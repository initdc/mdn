{"version":3,"sources":["settings/app.tsx","ui/atoms/auth-disabled/index.tsx"],"names":["SettingsApp","appProps","settingsDataURL","window","location","pathname","endsWith","useSWR","url","a","fetch","response","ok","text","Error","status","json","initialData","possibleLocales","undefined","revalidateOnFocus","settingsData","data","settingsError","error","userData","useUserData","isAuthenticated","DISABLE_AUTH","className","toString","href","length","Settings","userSettings","refreshUserSettings","mutate","CloseAccount","message","NotSignedIn","locale","useLocale","sp","URLSearchParams","set","to","React","useState","setLocale","sent","setSent","sendError","setSendError","validationErrors","setValidationErrors","sendSettings","formData","method","headers","csrfmiddlewaretoken","body","useEffect","mounted","setTimeout","onSubmit","event","preventDefault","ShowValidationErrors","errors","htmlFor","id","name","value","onChange","target","map","language","English","type","navigate","useNavigate","confirm","setConfirm","certain","setCertain","deleteError","alert","onClick","Object","entries","key","messages","code","AuthDisabled"],"mappings":"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","file":"static/js/15.0dff0895.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport useSWR, { mutate } from \"swr\";\n\nimport { Loading } from \"../ui/atoms/loading\";\nimport { DISABLE_AUTH } from \"../constants\";\nimport { useUserData } from \"../user-context\";\nimport { useLocale } from \"../hooks\";\nimport { AuthDisabled } from \"../ui/atoms/auth-disabled\";\n\nimport \"./index.scss\";\n\ninterface UserSettings {\n  csrfmiddlewaretoken: string;\n  locale: string;\n}\n\ninterface Locale {\n  locale: string;\n  native: string;\n  English: string;\n}\n\ninterface SettingsData {\n  possibleLocales: Locale[];\n}\n\nexport default function SettingsApp({ ...appProps }) {\n  // This app is only ever loaded in the client so we can use `window`\n  let settingsDataURL = window.location.pathname;\n  if (!settingsDataURL.endsWith(\"/\")) {\n    settingsDataURL += \"/\";\n  }\n  settingsDataURL += \"index.json\";\n\n  const { data: settingsData, error: settingsError } = useSWR<SettingsData>(\n    settingsDataURL,\n    async (url) => {\n      const response = await fetch(url);\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`${response.status} on ${url}: ${text}`);\n      }\n      return await response.json();\n    },\n    {\n      initialData: appProps.possibleLocales\n        ? {\n            possibleLocales: appProps.possibleLocales,\n          }\n        : undefined,\n      revalidateOnFocus: false,\n    }\n  );\n  const userData = useUserData();\n\n  const { data, error } = useSWR<UserSettings | null, Error | null>(\n    userData && userData.isAuthenticated ? \"/api/v1/settings\" : null,\n    async (url) => {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`${response.status} on ${response.url}`);\n      }\n      const data = (await response.json()) as UserSettings;\n      return data;\n    }\n  );\n\n  if (DISABLE_AUTH) {\n    return <AuthDisabled />;\n  }\n\n  if (!userData) {\n    // The XHR request hasn't finished yet so we don't know if the user is\n    // signed in or not.\n    return <Loading message=\"Loading user data…\" />;\n  }\n  if (!userData.isAuthenticated) {\n    return <NotSignedIn />;\n  }\n\n  if (error) {\n    return (\n      <div className=\"notecard negative\">\n        <h3>Server error</h3>\n        <p>A server error occurred trying to get your user settings.</p>\n        <p>\n          <code>{error.toString()}</code>\n        </p>\n        <a href={window.location.pathname}>Reload this page and try again.</a>\n      </div>\n    );\n  }\n\n  if (!data) {\n    return <Loading message=\"Loading user settings…\" />;\n  }\n\n  if (settingsError) {\n    return (\n      <div className=\"notecard negative\">\n        <h3>Server error</h3>\n        <p>Unable to get the current user settings from the server.</p>\n        <p>\n          <code>{settingsError.toString()}</code>\n        </p>\n        <a href={window.location.pathname}>Reload this page and try again.</a>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"account-settings-panels-container\">\n      {settingsData &&\n        settingsData.possibleLocales &&\n        settingsData.possibleLocales.length && (\n          <Settings\n            userSettings={data}\n            settingsData={settingsData}\n            refreshUserSettings={() => {\n              // This will \"force\" a new XHR request in the useUserData hook.\n              mutate(\"/api/v1/whoami\");\n\n              mutate(\"/api/v1/settings\");\n            }}\n          />\n        )}\n      <CloseAccount userSettings={data} />\n    </div>\n  );\n}\n\nfunction NotSignedIn() {\n  const locale = useLocale();\n  const sp = new URLSearchParams();\n  sp.set(\"next\", window.location.pathname);\n\n  return (\n    <>\n      <h2>You have not signed in</h2>\n      <Link to={`/${locale}/signin?${sp.toString()}`}>\n        Please sign in to continue\n      </Link>\n    </>\n  );\n}\n\ninterface ValidationErrorMessage {\n  message: string;\n  code: string;\n}\n\ninterface ValidationError {\n  [key: string]: ValidationErrorMessage[];\n}\ninterface ValidationErrors {\n  errors: ValidationError;\n}\n\nfunction Settings({\n  userSettings,\n  settingsData,\n  refreshUserSettings,\n}: {\n  userSettings: UserSettings;\n  settingsData: SettingsData;\n  refreshUserSettings: () => void;\n}) {\n  // It only becomes 'en-US' if the userprofile doesn't have a 'locale'\n  // set in its profile from before at all. But it also makes sure that\n  // the value is always a string.\n  const [locale, setLocale] = React.useState(userSettings.locale || \"en-US\");\n\n  const [sent, setSent] = React.useState(false);\n  const [sendError, setSendError] = React.useState<Error | null>(null);\n  const [validationErrors, setValidationErrors] =\n    React.useState<ValidationErrors | null>(null);\n\n  async function sendSettings() {\n    const formData = new URLSearchParams();\n    formData.set(\"locale\", locale);\n\n    const response = await fetch(\"/api/v1/settings\", {\n      method: \"POST\",\n      headers: {\n        \"X-CSRFToken\": userSettings.csrfmiddlewaretoken,\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      },\n      body: formData,\n    });\n    if (response.status === 400) {\n      setValidationErrors((await response.json()) as ValidationErrors);\n    } else if (!response.ok) {\n      setSendError(new Error(`${response.status} on ${response.url}`));\n    } else {\n      setSent(true);\n      refreshUserSettings();\n    }\n  }\n  React.useEffect(() => {\n    let mounted = true;\n    setTimeout(() => {\n      if (mounted) {\n        setSent(false);\n      }\n    }, 5000);\n    return () => {\n      mounted = false;\n    };\n  }, [sent]);\n\n  return (\n    <form\n      className=\"settings-form\"\n      onSubmit={async (event) => {\n        event.preventDefault();\n        await sendSettings();\n      }}\n    >\n      {validationErrors && (\n        <ShowValidationErrors errors={validationErrors.errors} />\n      )}\n\n      <div className=\"field-group\">\n        <h3>Default language</h3>\n\n        {sent && !sendError && (\n          <div className=\"notecard success\">\n            <p>Yay! Updated settings successfully saved.</p>\n          </div>\n        )}\n        {sendError && (\n          <div className=\"notecard negative\">\n            <h4>Server submission error</h4>\n            <p>Something unexpected happened during server submission.</p>\n            <p>\n              <code>{sendError.toString()}</code>\n            </p>\n            <a href={window.location.pathname}>Reload page to try again.</a>\n          </div>\n        )}\n        <label htmlFor=\"id_locale\" className=\"visually-hidden\">\n          Change language\n        </label>\n        <select\n          id=\"id_locale\"\n          name=\"locale\"\n          value={locale}\n          onChange={(event) => {\n            setLocale(event.target.value);\n          }}\n        >\n          {settingsData.possibleLocales.map((language) => {\n            return (\n              <option key={language.locale} value={language.locale}>\n                {language.English}\n              </option>\n            );\n          })}\n        </select>\n      </div>\n      <button type=\"submit\" className=\"button\">\n        Update language\n      </button>\n    </form>\n  );\n}\n\nfunction CloseAccount({ userSettings }: { userSettings: UserSettings }) {\n  const navigate = useNavigate();\n  const locale = useLocale();\n  const [confirm, setConfirm] = React.useState(false);\n  const [certain, setCertain] = React.useState(false);\n\n  const { error: deleteError } = useSWR<null, Error | null>(\n    certain ? \"/api/v1/settings\" : null,\n    async (url: string) => {\n      const response = await fetch(url, {\n        method: \"DELETE\",\n        headers: {\n          \"X-CSRFToken\": userSettings.csrfmiddlewaretoken,\n        },\n      });\n      if (!response.ok) {\n        throw new Error(`${response.status} on ${response.url}`);\n      }\n      alert(\"Your account has been closed and you are now signed out.\");\n\n      // This will \"force\" a new XHR request in the useUserData hook.\n      mutate(\"/api/v1/whoami\");\n\n      navigate(`/${locale}/`);\n      return null;\n    },\n    {\n      revalidateOnFocus: false,\n    }\n  );\n\n  return (\n    <div className=\"close-account\">\n      <h3>Close account</h3>\n      <p>Delete your account and all account data.</p>\n\n      {deleteError && (\n        <div className=\"notecard negative\">\n          <h3>Server error</h3>\n          <p>A server error occurred trying to close your account.</p>\n          <p>\n            <code>{deleteError.toString()}</code>\n          </p>\n          <a href={window.location.pathname}>Reload page to try again.</a>\n        </div>\n      )}\n\n      {confirm ? (\n        <div className=\"confirm-account-closure\">\n          <h4>Please confirm account deletion.</h4>\n          <div className=\"button-container\">\n            <button\n              type=\"button\"\n              className=\"button outline\"\n              onClick={() => {\n                setConfirm(false);\n              }}\n            >\n              Cancel\n            </button>{\" \"}\n            <button\n              type=\"button\"\n              className=\"button danger\"\n              onClick={() => {\n                setCertain(true);\n              }}\n            >\n              Confirm\n            </button>\n          </div>\n        </div>\n      ) : (\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => {\n            setConfirm(true);\n          }}\n        >\n          Close account\n        </button>\n      )}\n    </div>\n  );\n}\n\nfunction ShowValidationErrors({ errors }: { errors: ValidationError }) {\n  return (\n    <div className=\"notecard error\">\n      <h4>Validation errors</h4>\n      <ul>\n        {Object.entries(errors).map(([key, messages]) => {\n          return (\n            <li key={key}>\n              <b>\n                <code>{key}</code>\n              </b>\n              <ul>\n                {messages.map((message) => {\n                  return <li key={message.code}>{message.message}</li>;\n                })}\n              </ul>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","export function AuthDisabled() {\n  return (\n    <div className=\"notecard warning\">\n      <h4>Authentication disabled</h4>\n      <p>Authentication and the user settings app is currently disabled.</p>\n    </div>\n  );\n}\n"],"sourceRoot":""}