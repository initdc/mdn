{"version":3,"sources":["document/forms/edit.tsx","document/forms/form.tsx","../../node_modules/use-debounce/esm/useDebouncedCallback.js"],"names":["DocumentEdit","location","useLocation","documentURL","useDocumentURL","fetchURL","URLSearchParams","url","toString","useSWR","a","fetch","response","ok","Error","status","json","data","error","useState","isSaving","setIsSaving","savingError","setSavingError","didSlugChange","encodeURIComponent","method","headers","body","JSON","stringify","window","href","pathname","split","metadata","slug","className","role","to","doc","onSave","isPreview","DocumentForm","initialSlug","locale","useParams","setSlug","title","setTitle","rawBody","setRawBody","key","initialValue","item","localStorage","getItem","parse","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","useLocalStorage","autosaveEnabled","setAutoSaveEnabled","slugExists","isNew","canAutosave","Boolean","willAutosave","disableInputs","invalidSlug","endsWith","debounceCallback","func","wait","options","_this","this","lastCallTime","useRef","lastInvokeTime","timerId","lastArgs","lastThis","result","funcRef","mounted","current","useRAF","TypeError","leading","trailing","maxing","maxWait","Math","max","useEffect","useMemo","invokeFunc","time","args","thisArg","apply","startTimer","pendingFunc","cancelAnimationFrame","requestAnimationFrame","setTimeout","shouldInvoke","timeSinceLastCall","timeSinceLastInvoke","trailingEdge","timerExpired","Date","now","timeWaiting","remainingWait","min","_i","arguments","length","isInvoking","cancel","clearTimeout","isPending","flush","useDebouncedCallback","onSubmit","event","preventDefault","disabled","type","onChange","target","style","width","rows","id","checked","htmlFor"],"mappings":"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","file":"static/js/12.dc8aca96.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport useSWR from \"swr\";\nimport { Document } from \"../index\";\nimport { useDocumentURL } from \"../hooks\";\nimport { DocumentForm, DocumentOutData } from \"./form\";\n\nimport \"./edit.scss\";\n\nexport default function DocumentEdit() {\n  const location = useLocation();\n  const documentURL = useDocumentURL();\n  const fetchURL = `/_document?${new URLSearchParams({\n    url: documentURL,\n  }).toString()}`;\n  const { data, error } = useSWR(fetchURL, async (url) => {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`${response.status} on ${url}`);\n    }\n    return await response.json();\n  });\n\n  const [isSaving, setIsSaving] = useState(false);\n  const [savingError, setSavingError] = useState<Error | null>(null);\n  async function handleSave(data: DocumentOutData, didSlugChange: boolean) {\n    setIsSaving(true);\n    try {\n      const response = await fetch(\n        `/_document?url=${encodeURIComponent(documentURL)}`,\n        {\n          method: \"PUT\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(data),\n        }\n      );\n      if (!response.ok) {\n        setSavingError(new Error(`${response.status} on ${response.url}`));\n        return;\n      }\n      if (didSlugChange) {\n        // Hack! We do a full-page transition so that the search index refreshes itself\n        window.location.href =\n          location.pathname.split(\"_edit\")[0] + \"_edit/\" + data.metadata.slug;\n      }\n    } catch (err: any) {\n      setSavingError(err);\n    }\n    setIsSaving(false);\n  }\n\n  return (\n    <main className=\"page-content-container document-edit\" role=\"main\">\n      <h2 className=\"edit-header\">\n        Edit view\n        <Link to={documentURL} className=\"close\">\n          close\n        </Link>\n      </h2>\n\n      {!data && !error && <p>Loading source data...</p>}\n      {error && (\n        <div className=\"attention\">\n          <h3>Error loading source</h3>\n          <code>{error.toString()}</code>\n        </div>\n      )}\n      <div className=\"document-edit-forms\">\n        {data && (\n          <DocumentForm\n            doc={data}\n            {...{ isSaving, savingError }}\n            onSave={handleSave}\n          />\n        )}\n      </div>\n      <div className=\"document-preview\">\n        <Document isPreview={true} />\n      </div>\n    </main>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport { useDebouncedCallback } from \"use-debounce\";\n\nimport \"./form.scss\";\nimport useSWR from \"swr\";\n\ntype DocumentFormData = {\n  rawBody: string;\n  metadata: { slug: string; title: string };\n};\n\n// Same as DocumentFormData but metadata also includes the locale\nexport type DocumentOutData = DocumentFormData & {\n  metadata: DocumentFormData[\"metadata\"] & { locale: string };\n};\n\nexport function DocumentForm({\n  onSave,\n  initialSlug,\n  doc,\n  isSaving,\n  savingError,\n}: {\n  onSave: (doc: DocumentOutData, didSlugChange: boolean) => unknown;\n  initialSlug?: string | null;\n  doc?: DocumentFormData;\n  isSaving?: boolean;\n  savingError?: null | Error;\n}) {\n  const { locale } = useParams();\n\n  const [slug, setSlug] = useState(\n    initialSlug ? initialSlug + \"/\" : doc ? doc.metadata.slug : \"\"\n  );\n  const [title, setTitle] = useState(doc ? doc.metadata.title : \"\");\n  const [rawBody, setRawBody] = useState(doc ? doc.rawBody : \"\");\n\n  const [autosaveEnabled, setAutoSaveEnabled] = useLocalStorage(\n    \"autosaveEdit\",\n    false\n  );\n\n  const { data: slugExists } = useSWR(\n    `exists:${slug}`,\n    async () =>\n      (\n        await fetch(\n          `/_document?${new URLSearchParams({\n            url: `/${locale}/docs/${slug}`,\n          }).toString()}`\n        )\n      ).ok\n  );\n\n  const isNew = !doc;\n\n  // New documents should not autosave\n  const canAutosave = !isNew && autosaveEnabled;\n\n  const didSlugChange = Boolean(doc && doc.metadata.slug !== slug);\n\n  const willAutosave = canAutosave && !didSlugChange;\n\n  // In auto-save mode inputs should still be changeable during saving\n  const disableInputs = !willAutosave && isSaving;\n\n  const invalidSlug = slug.endsWith(\"/\");\n\n  function toggleAutoSave() {\n    setAutoSaveEnabled(!autosaveEnabled);\n  }\n\n  const debounceCallback = useDebouncedCallback(onSave, 1000);\n\n  useEffect(() => {\n    if (willAutosave) {\n      debounceCallback(\n        {\n          rawBody,\n          metadata: { slug, title, locale: locale || \"\" },\n        },\n        didSlugChange\n      );\n    }\n  }, [\n    willAutosave,\n    debounceCallback,\n    slug,\n    title,\n    rawBody,\n    didSlugChange,\n    locale,\n  ]);\n\n  return (\n    <form\n      className=\"document-form\"\n      onSubmit={(event) => {\n        event.preventDefault();\n        onSave(\n          {\n            rawBody,\n            metadata: { slug, title, locale: locale || \"\" },\n          },\n          didSlugChange\n        );\n      }}\n    >\n      <div>\n        <label>\n          Slug\n          <input\n            disabled={!isNew}\n            type=\"text\"\n            value={slug}\n            onChange={(event) => setSlug(event.target.value)}\n            style={{ width: \"100%\" }}\n          />\n        </label>\n        {slugExists && !(doc && doc.metadata.slug === slug) && (\n          <div className=\"form-warning\">\n            Warning! This slug already exists, creating this document will\n            override the other document using that slug.\n          </div>\n        )}\n        {invalidSlug && (\n          <div className=\"form-warning\">\n            Slugs are not allowed to end in a slash\n          </div>\n        )}\n      </div>\n\n      {didSlugChange && canAutosave && (\n        <div>\n          Autosave has been temporarily disabled until the new slug is saved!\n        </div>\n      )}\n\n      <p>\n        <label>\n          Title\n          <input\n            disabled={disableInputs}\n            type=\"text\"\n            value={title}\n            onChange={(event) => setTitle(event.target.value)}\n            style={{ width: \"100%\" }}\n          />\n        </label>\n      </p>\n\n      <textarea\n        disabled={disableInputs}\n        value={rawBody}\n        onChange={(event) => setRawBody(event.target.value)}\n        rows={20}\n        style={{ width: \"100%\" }}\n      />\n      <p>\n        <button\n          type=\"submit\"\n          disabled={disableInputs || !title || !slug || invalidSlug || !rawBody}\n        >\n          {isNew ? \"Create\" : \"Save\"}\n        </button>\n\n        {!isNew && (\n          <span className=\"action-options\">\n            <input\n              type=\"checkbox\"\n              id=\"enable_autosave\"\n              checked={autosaveEnabled}\n              onChange={toggleAutoSave}\n            />\n            <label htmlFor=\"enable_autosave\">Enable autosave</label>\n          </span>\n        )}\n      </p>\n      {savingError && (\n        <div className=\"error-message submission-error\">\n          <p>Error saving document</p>\n          <pre>{savingError.toString()}</pre>\n        </div>\n      )}\n    </form>\n  );\n}\n\n/**\n * From https://usehooks.com/useLocalStorage/\n */\nfunction useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n  return [storedValue, setValue];\n}\n","import { useRef, useEffect, useMemo } from 'react';\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked, or until the next browser frame is drawn. The debounced function\n * comes with a `cancel` method to cancel delayed `func` invocations and a\n * `flush` method to immediately invoke them. Provide `options` to indicate\n * whether `func` should be invoked on the leading and/or trailing edge of the\n * `wait` timeout. The `func` is invoked with the last arguments provided to the\n * debounced function. Subsequent calls to the debounced function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `debounce` and `throttle`.\n *\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0]\n *  The number of milliseconds to delay; if omitted, `requestAnimationFrame` is\n *  used (if available, otherwise it will be setTimeout(...,0)).\n * @param {Object} [options={}] The options object.\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.leading=false]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {number} [options.maxWait]\n *  Specify invoking on the trailing edge of the timeout.\n * @param {boolean} [options.trailing=true]\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * const resizeHandler = useDebouncedCallback(calculateLayout, 150);\n * window.addEventListener('resize', resizeHandler)\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * const clickHandler = useDebouncedCallback(sendMail, 300, {\n *   leading: true,\n *   trailing: false,\n * })\n * <button onClick={clickHandler}>click me</button>\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * const debounced = useDebouncedCallback(batchLog, 250, { 'maxWait': 1000 })\n * const source = new EventSource('/stream')\n * source.addEventListener('message', debounced)\n *\n * // Cancel the trailing debounced invocation.\n * window.addEventListener('popstate', debounced.cancel)\n *\n * // Check for pending invocations.\n * const status = debounced.pending() ? \"Pending...\" : \"Ready\"\n */\nexport default function useDebouncedCallback(func, wait, options) {\n    var _this = this;\n    var lastCallTime = useRef(null);\n    var lastInvokeTime = useRef(0);\n    var timerId = useRef(null);\n    var lastArgs = useRef([]);\n    var lastThis = useRef();\n    var result = useRef();\n    var funcRef = useRef(func);\n    var mounted = useRef(true);\n    funcRef.current = func;\n    // Bypass `requestAnimationFrame` by explicitly setting `wait=0`.\n    var useRAF = !wait && wait !== 0 && typeof window !== 'undefined';\n    if (typeof func !== 'function') {\n        throw new TypeError('Expected a function');\n    }\n    wait = +wait || 0;\n    options = options || {};\n    var leading = !!options.leading;\n    var trailing = 'trailing' in options ? !!options.trailing : true; // `true` by default\n    var maxing = 'maxWait' in options;\n    var maxWait = maxing ? Math.max(+options.maxWait || 0, wait) : null;\n    useEffect(function () {\n        mounted.current = true;\n        return function () {\n            mounted.current = false;\n        };\n    }, []);\n    // You may have a question, why we have so many code under the useMemo definition.\n    //\n    // This was made as we want to escape from useCallback hell and\n    // not to initialize a number of functions each time useDebouncedCallback is called.\n    //\n    // It means that we have less garbage for our GC calls which improves performance.\n    // Also, it makes this library smaller.\n    //\n    // And the last reason, that the code without lots of useCallback with deps is easier to read.\n    // You have only one place for that.\n    var debounced = useMemo(function () {\n        var invokeFunc = function (time) {\n            var args = lastArgs.current;\n            var thisArg = lastThis.current;\n            lastArgs.current = lastThis.current = null;\n            lastInvokeTime.current = time;\n            return (result.current = funcRef.current.apply(thisArg, args));\n        };\n        var startTimer = function (pendingFunc, wait) {\n            if (useRAF)\n                cancelAnimationFrame(timerId.current);\n            timerId.current = useRAF ? requestAnimationFrame(pendingFunc) : setTimeout(pendingFunc, wait);\n        };\n        var shouldInvoke = function (time) {\n            if (!mounted.current)\n                return false;\n            var timeSinceLastCall = time - lastCallTime.current;\n            var timeSinceLastInvoke = time - lastInvokeTime.current;\n            // Either this is the first call, activity has stopped and we're at the\n            // trailing edge, the system time has gone backwards and we're treating\n            // it as the trailing edge, or we've hit the `maxWait` limit.\n            return (!lastCallTime.current ||\n                timeSinceLastCall >= wait ||\n                timeSinceLastCall < 0 ||\n                (maxing && timeSinceLastInvoke >= maxWait));\n        };\n        var trailingEdge = function (time) {\n            timerId.current = null;\n            // Only invoke if we have `lastArgs` which means `func` has been\n            // debounced at least once.\n            if (trailing && lastArgs.current) {\n                return invokeFunc(time);\n            }\n            lastArgs.current = lastThis.current = null;\n            return result.current;\n        };\n        var timerExpired = function () {\n            var time = Date.now();\n            if (shouldInvoke(time)) {\n                return trailingEdge(time);\n            }\n            // https://github.com/xnimorz/use-debounce/issues/97\n            if (!mounted.current) {\n                return;\n            }\n            // Remaining wait calculation\n            var timeSinceLastCall = time - lastCallTime.current;\n            var timeSinceLastInvoke = time - lastInvokeTime.current;\n            var timeWaiting = wait - timeSinceLastCall;\n            var remainingWait = maxing ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;\n            // Restart the timer\n            startTimer(timerExpired, remainingWait);\n        };\n        var func = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            var time = Date.now();\n            var isInvoking = shouldInvoke(time);\n            lastArgs.current = args;\n            lastThis.current = _this;\n            lastCallTime.current = time;\n            if (isInvoking) {\n                if (!timerId.current && mounted.current) {\n                    // Reset any `maxWait` timer.\n                    lastInvokeTime.current = lastCallTime.current;\n                    // Start the timer for the trailing edge.\n                    startTimer(timerExpired, wait);\n                    // Invoke the leading edge.\n                    return leading ? invokeFunc(lastCallTime.current) : result.current;\n                }\n                if (maxing) {\n                    // Handle invocations in a tight loop.\n                    startTimer(timerExpired, wait);\n                    return invokeFunc(lastCallTime.current);\n                }\n            }\n            if (!timerId.current) {\n                startTimer(timerExpired, wait);\n            }\n            return result.current;\n        };\n        func.cancel = function () {\n            if (timerId.current) {\n                useRAF ? cancelAnimationFrame(timerId.current) : clearTimeout(timerId.current);\n            }\n            lastInvokeTime.current = 0;\n            lastArgs.current = lastCallTime.current = lastThis.current = timerId.current = null;\n        };\n        func.isPending = function () {\n            return !!timerId.current;\n        };\n        func.flush = function () {\n            return !timerId.current ? result.current : trailingEdge(Date.now());\n        };\n        return func;\n    }, [leading, maxing, wait, maxWait, trailing, useRAF]);\n    return debounced;\n}\n"],"sourceRoot":""}