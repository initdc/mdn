{"version":3,"sources":["fuzzy-search.ts","search.tsx"],"names":["FuzzySearch","docs","this","needle","limit","length","needleLowerCase","toLowerCase","shortlistDocs","doc","url","includes","push","Fzf","selector","item","find","isFuzzySearchString","str","startsWith","test","HighlightMatch","title","words","q","trim","split","regexWords","map","s","replace","regex","join","parts","RegExp","part","i","key","BreadcrumbURI","uri","positions","size","chars","char","has","keep","slice","filter","p","InnerSearchNavigateWidget","props","inputValue","onChangeInputValue","isFocused","onChangeIsFocused","onResultPicked","defaultSelection","navigate","useNavigate","locale","useLocale","useState","shouldInitialize","setShouldInitialize","searchIndex","setSearchIndex","useParams","useSWR","a","fetch","response","ok","Error","text","json","revalidateOnFocus","error","data","useEffect","flex","FlexSearch","create","tokenize","forEach","add","fuzzy","items","useMemo","useSearchIndex","searchIndexError","initializeSearchIndex","inputRef","useRef","formRef","isSelectionInitialized","showIndexing","value","ms","hasNotChanged","setHasNotChanged","previousValue","current","timeout","setTimeout","clearTimeout","useHasNotChangedFor","selectionStart","selectionEnd","resultItems","window","innerHeight","search","fuzzyResult","suggest","index","formAction","searchPath","sp","URLSearchParams","set","toString","nothingFoundItem","Set","useCombobox","defaultIsOpen","onSelectedItemChange","selectedItem","reset","toggleMenu","blur","scroll","top","left","behavior","getInputProps","getItemProps","getMenuProps","getComboboxProps","highlightedIndex","isOpen","useFocusOnSlash","preloadSupported","preload","searchResults","className","to","action","ref","id","role","onSubmit","e","preventDefault","htmlFor","type","name","placeholder","getPlaceholder","onMouseOver","onFocus","onBlur","onKeyDown","event","submit","onChange","target","HTMLInputElement","input","aria-label","SearchErrorBoundary","state","hasError","children","console","React","Component","SearchNavigateWidget"],"mappings":"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","file":"static/js/24.69eac644.chunk.js","sourcesContent":["import { Fzf, FzfResultItem } from \"fzf\";\n\nexport interface Doc {\n  url: string;\n  title: string;\n}\n\nexport class FuzzySearch {\n  docs: Doc[];\n\n  constructor(docs: Doc[]) {\n    this.docs = docs;\n  }\n\n  search(needle: string, { limit = 10 }): FzfResultItem<Doc>[] {\n    // Use `let` because we might come up with a new list (aka. shortlist)\n    // that makes the haystack search much simpler to send to `Fzf()`.\n    let docs = this.docs;\n    // The list of docs is possible over 10,000 entries (in 2021). If the\n    // search input is tiny, don't bother with the overhead of Fzf().\n    // Because we don't even need it when the test is so easy in that\n    // it just needs to contain a single character.\n    if (needle.length <= 3) {\n      const needleLowerCase = needle.toLowerCase();\n      // The reason this works and makes sense is because the `this.docs` is\n      // already sorted by popularity.\n      // So if someone searches for something short like `x` we just take\n      // the top 'limit' docs that have an `x` in the `.url`. This is\n      // faster than going through every doc with Fzf.\n      const shortlistDocs: Doc[] = [];\n      for (const doc of this.docs) {\n        if (doc.url.toLowerCase().includes(needleLowerCase)) {\n          shortlistDocs.push(doc);\n          if (shortlistDocs.length === limit) {\n            break;\n          }\n        }\n      }\n      // Suppose the needle was `yx`  and the `limit` as 10, then if we only found\n      // 9 (which is less than 10) docs that match exactly this, then we might\n      // be missing out, so we can't use the shortlist.\n      // For example, there might be more docs like `aaYbbbbXccc` which\n      // will be found by Fzf() but wouldn't be find in our shortlist because\n      // the two characters aren't next to each other.\n      if (shortlistDocs.length >= limit) {\n        docs = shortlistDocs;\n      }\n    }\n\n    const haystack = new Fzf(docs, {\n      limit,\n      selector: (item: Doc) => item.url,\n    });\n    // All longer strings, default to using the already initialized `Fzf()` instance.\n    return haystack.find(needle);\n  }\n}\n","import React, { useEffect, useMemo, useRef, useState } from \"react\";\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\nimport { useCombobox } from \"downshift\";\nimport FlexSearch from \"flexsearch\";\nimport useSWR from \"swr\";\n\nimport { Doc, FuzzySearch } from \"./fuzzy-search\";\nimport { preload, preloadSupported } from \"./document/preloading\";\n\nimport { useLocale } from \"./hooks\";\nimport { getPlaceholder, SearchProps, useFocusOnSlash } from \"./search-utils\";\n\nconst PRELOAD_WAIT_MS = 500;\nconst SHOW_INDEXING_AFTER_MS = 500;\n\ntype Item = {\n  url: string;\n  title: string;\n};\n\ntype SearchIndex = {\n  flex: any;\n  fuzzy: FuzzySearch;\n  items: null | Item[];\n};\n\ntype ResultItem = {\n  title: string;\n  url: string;\n  positions: Set<number>;\n};\n\nfunction useSearchIndex(): readonly [\n  null | SearchIndex,\n  null | Error,\n  () => void\n] {\n  const [shouldInitialize, setShouldInitialize] = useState(false);\n  const [searchIndex, setSearchIndex] = useState<null | SearchIndex>(null);\n  const { locale } = useParams();\n\n  // Default to 'en-US' if you're on the home page without the locale prefix.\n  const url = `/${locale || \"en-US\"}/search-index.json`;\n\n  const { error, data } = useSWR<null | Item[], Error | undefined>(\n    shouldInitialize ? url : null,\n    async (url: string) => {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(await response.text());\n      }\n      return await response.json();\n    },\n    { revalidateOnFocus: false }\n  );\n\n  useEffect(() => {\n    if (!data || searchIndex) {\n      return;\n    }\n\n    const flex = FlexSearch.create({ tokenize: \"forward\" });\n    data!.forEach(({ title }, i) => {\n      flex.add(i, title);\n    });\n    const fuzzy = new FuzzySearch(data as Doc[]);\n\n    setSearchIndex({ flex, fuzzy, items: data! });\n  }, [searchIndex, shouldInitialize, data]);\n\n  return useMemo(\n    () => [searchIndex, error || null, () => setShouldInitialize(true)],\n    [searchIndex, error, setShouldInitialize]\n  );\n}\n\n// The fuzzy search is engaged if the search term starts with a '/'\n// and does not have any spaces in it.\nfunction isFuzzySearchString(str: string) {\n  return str.startsWith(\"/\") && !/\\s/.test(str);\n}\n\nfunction HighlightMatch({ title, q }: { title: string; q: string }) {\n  // FlexSearch doesn't support finding out which \"typo corrections\"\n  // were done unfortunately.\n  // See https://github.com/nextapps-de/flexsearch/issues/99\n\n  // Split on higlight term and include term into parts, ignore case.\n  const words = q.trim().toLowerCase().split(/[ ,]+/);\n\n  // $& means the whole matched string\n  const regexWords = words.map((s) => s.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"));\n  const regex = `\\\\b(${regexWords.join(\"|\")})`;\n  const parts = title.split(new RegExp(regex, \"gi\"));\n  return (\n    <b>\n      {parts.map((part, i) => {\n        const key = `${part}:${i}`;\n        if (words.includes(part.toLowerCase())) {\n          return <mark key={key}>{part}</mark>;\n        } else {\n          return <span key={key}>{part}</span>;\n        }\n      })}\n    </b>\n  );\n}\n\nfunction BreadcrumbURI({\n  uri,\n  positions,\n}: {\n  uri: string;\n  positions?: Set<number>;\n}) {\n  if (positions && positions.size) {\n    const chars = uri.split(\"\");\n    return (\n      <small>\n        {chars.map((char, i) => {\n          if (positions.has(i)) {\n            return <mark key={i}>{char}</mark>;\n          } else {\n            return <span key={i}>{char}</span>;\n          }\n        })}\n      </small>\n    );\n  }\n  const keep = uri\n    .split(\"/\")\n    .slice(1)\n    .filter((p) => p !== \"docs\");\n  return <small>{keep.join(\" / \")}</small>;\n}\n\ntype InnerSearchNavigateWidgetProps = SearchProps & {\n  onResultPicked?: () => void;\n  defaultSelection: [number, number];\n};\n\nfunction useHasNotChangedFor(value: string, ms: number) {\n  const [hasNotChanged, setHasNotChanged] = useState(false);\n  const previousValue = useRef(value);\n  useEffect(() => {\n    if (previousValue.current === value) {\n      return;\n    }\n    previousValue.current = value;\n    setHasNotChanged(false);\n    // while timeouts are not accurate for counting time there error is only\n    // upwards, meaning they might trigger after more time than specified,\n    // which is fine in this case\n    const timeout = setTimeout(() => {\n      setHasNotChanged(true);\n    }, ms);\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [value, ms]);\n\n  return hasNotChanged;\n}\n\nfunction InnerSearchNavigateWidget(props: InnerSearchNavigateWidgetProps) {\n  const {\n    inputValue,\n    onChangeInputValue,\n    isFocused,\n    onChangeIsFocused,\n    onResultPicked,\n    defaultSelection,\n  } = props;\n\n  const navigate = useNavigate();\n  const locale = useLocale();\n\n  const [searchIndex, searchIndexError, initializeSearchIndex] =\n    useSearchIndex();\n\n  const inputRef = useRef<null | HTMLInputElement>(null);\n  const formRef = useRef<null | HTMLFormElement>(null);\n  const isSelectionInitialized = useRef(false);\n\n  const showIndexing = useHasNotChangedFor(inputValue, SHOW_INDEXING_AFTER_MS);\n\n  useEffect(() => {\n    if (!inputRef.current || isSelectionInitialized.current) {\n      return;\n    }\n    if (isFocused) {\n      inputRef.current.selectionStart = defaultSelection[0];\n      inputRef.current.selectionEnd = defaultSelection[1];\n    }\n    isSelectionInitialized.current = true;\n  }, [isFocused, defaultSelection]);\n\n  const resultItems: ResultItem[] = useMemo(() => {\n    if (!searchIndex || !inputValue || searchIndexError) {\n      // This can happen if the initialized hasn't completed yet or\n      // completed un-successfully.\n      return [];\n    }\n\n    // The iPhone X series is 812px high.\n    // If the window isn't very high, show fewer matches so that the\n    // overlaying search results don't trigger a scroll.\n    const limit = window.innerHeight < 850 ? 5 : 10;\n\n    if (isFuzzySearchString(inputValue)) {\n      if (inputValue === \"/\") {\n        return [];\n      } else {\n        const fuzzyResults = searchIndex.fuzzy.search(inputValue.slice(1), {\n          limit,\n        });\n        return fuzzyResults.map((fuzzyResult) => ({\n          url: fuzzyResult.item.url,\n          title: fuzzyResult.item.title,\n          positions: fuzzyResult.positions,\n        }));\n      }\n    } else {\n      // Full-Text search\n      const indexResults: number[] = searchIndex.flex.search(inputValue, {\n        limit,\n        suggest: true, // This can give terrible result suggestions\n      });\n      return indexResults.map(\n        (index: number) => (searchIndex.items || [])[index] as ResultItem\n      );\n    }\n  }, [inputValue, searchIndex, searchIndexError]);\n\n  const formAction = `/${locale}/search`;\n  const searchPath = useMemo(() => {\n    const sp = new URLSearchParams();\n    sp.set(\"q\", inputValue.trim());\n    return `${formAction}?${sp.toString()}`;\n  }, [formAction, inputValue]);\n\n  const nothingFoundItem = useMemo(\n    () => ({ url: searchPath, title: \"\", positions: new Set() }),\n    [searchPath]\n  );\n\n  const {\n    getInputProps,\n    getItemProps,\n    getMenuProps,\n    getComboboxProps,\n\n    highlightedIndex,\n    isOpen,\n\n    reset,\n    toggleMenu,\n  } = useCombobox({\n    items: resultItems.length === 0 ? [nothingFoundItem] : resultItems,\n    inputValue,\n    defaultIsOpen: isFocused,\n    onSelectedItemChange: ({ selectedItem }) => {\n      if (selectedItem) {\n        navigate(selectedItem.url);\n        onChangeInputValue(\"\");\n        reset();\n        toggleMenu();\n        inputRef.current?.blur();\n        if (onResultPicked) {\n          onResultPicked();\n        }\n        window.scroll({\n          top: 0,\n          left: 0,\n          behavior: \"smooth\",\n        });\n      }\n    },\n  });\n\n  useFocusOnSlash(inputRef);\n\n  useEffect(() => {\n    if (isFocused) {\n      initializeSearchIndex();\n    }\n  }, [initializeSearchIndex, isFocused]);\n\n  useEffect(() => {\n    const item = resultItems[highlightedIndex];\n    if (item && preloadSupported()) {\n      const timeout = setTimeout(() => {\n        preload(`${item.url}/index.json`);\n      }, PRELOAD_WAIT_MS);\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [highlightedIndex, resultItems]);\n\n  const searchResults = (() => {\n    if (!isOpen || !inputValue.trim()) {\n      return null;\n    }\n\n    if (searchIndexError) {\n      return (\n        <div className=\"searchindex-error\">Error initializing search index</div>\n      );\n    }\n\n    if (!searchIndex) {\n      return showIndexing ? (\n        <div className=\"indexing-warning\">\n          <em>Initializing index</em>\n        </div>\n      ) : null;\n    }\n\n    return (\n      <>\n        {resultItems.length === 0 && inputValue !== \"/\" ? (\n          <div\n            {...getItemProps({\n              className:\n                \"nothing-found result-item \" +\n                (highlightedIndex === 0 ? \"highlight\" : \"\"),\n              item: nothingFoundItem,\n              index: 0,\n            })}\n          >\n            No document titles found.\n            <br />\n            <Link to={searchPath}>\n              Site search for <code>{inputValue}</code>\n            </Link>\n          </div>\n        ) : (\n          resultItems.map((item, i) => (\n            <div\n              {...getItemProps({\n                key: item.url,\n                className:\n                  \"result-item \" + (i === highlightedIndex ? \"highlight\" : \"\"),\n                item,\n                index: i,\n              })}\n            >\n              <HighlightMatch title={item.title} q={inputValue} />\n              <br />\n              <BreadcrumbURI uri={item.url} positions={item.positions} />\n            </div>\n          ))\n        )}\n        {isFuzzySearchString(inputValue) && (\n          <div className=\"fuzzy-engaged\">Fuzzy searching by URI</div>\n        )}\n      </>\n    );\n  })();\n\n  return (\n    <form\n      action={formAction}\n      {...getComboboxProps({\n        ref: formRef as any, // downshift's types hardcode it as a div\n        className: \"search-form search-widget\",\n        id: \"nav-main-search\",\n        role: \"search\",\n        onSubmit: (e) => {\n          // This comes into effect if the input is completely empty and the\n          // user hits Enter, which triggers the native form submission.\n          // When something *is* entered, the onKeyDown event is triggered\n          // on the <input> and within that handler you can\n          // access `event.key === 'Enter'` as a signal to submit the form.\n          e.preventDefault();\n        },\n      })}\n    >\n      <label htmlFor=\"main-q\" className=\"visually-hidden\">\n        Search MDN\n      </label>\n\n      <input\n        {...getInputProps({\n          type: \"search\",\n          className: isOpen\n            ? \"has-search-results search-input-field\"\n            : \"search-input-field\",\n          id: \"main-q\",\n          name: \"q\",\n          placeholder: getPlaceholder(isFocused),\n          onMouseOver: initializeSearchIndex,\n          onFocus: () => {\n            onChangeIsFocused(true);\n          },\n          onBlur: () => onChangeIsFocused(false),\n          onKeyDown(event) {\n            if (event.key === \"Escape\" && inputRef.current) {\n              toggleMenu();\n            } else if (\n              event.key === \"Enter\" &&\n              inputValue.trim() &&\n              highlightedIndex === -1\n            ) {\n              inputRef.current!.blur();\n              formRef.current!.submit();\n            }\n          },\n          onChange(event) {\n            if (event.target instanceof HTMLInputElement) {\n              onChangeInputValue(event.target.value);\n            }\n          },\n          ref: (input) => {\n            inputRef.current = input;\n          },\n        })}\n      />\n\n      <input\n        type=\"submit\"\n        className=\"ghost search-button\"\n        value=\"\"\n        aria-label=\"Search\"\n      />\n\n      <div {...getMenuProps()}>\n        {searchResults && <div className=\"search-results\">{searchResults}</div>}\n      </div>\n    </form>\n  );\n}\n\nclass SearchErrorBoundary extends React.Component {\n  state = { hasError: false };\n\n  static getDerivedStateFromError(error: Error) {\n    console.error(\"There was an error while trying to render search\", error);\n    return { hasError: true };\n  }\n  render() {\n    return this.state.hasError ? (\n      <div>Error while rendering search. Check console for details.</div>\n    ) : (\n      this.props.children\n    );\n  }\n}\n\nexport default function SearchNavigateWidget(props) {\n  return (\n    <SearchErrorBoundary>\n      <InnerSearchNavigateWidget {...props} />\n    </SearchErrorBoundary>\n  );\n}\n"],"sourceRoot":""}