{"version":3,"sources":["site-search/form.tsx","site-search/utils.tsx"],"names":["LANGUAGES","Map","Object","entries","LANGUAGES_RAW","map","locale","data","toLowerCase","SiteSearchForm","useLocale","useSearchParams","searchParams","queryLocales","getAll","className","length","equalLocales","get","native","English","to","appendURL","page","undefined","list1","list2","list1LC","x","list2LC","every","includes","overrides","sp","createSearchParams","forEach","key","value","Array","isArray","delete","v","append","set"],"mappings":"yMAOMA,EAAY,IAAIC,IACpBC,OAAOC,QAAQC,GAAeC,KAAI,YAAqB,IAAD,mBAAlBC,EAAkB,KAAVC,EAAU,KACpD,MAAO,CAACD,EAAOE,cAAeD,OAInB,SAASE,IAAkB,IAAD,YACjCH,EAASI,cADwB,EAEhBC,cAAhBC,EAFgC,oBAGjCC,EAAeD,EAAaE,OAAO,UAEzC,OACE,qBAAKC,UAAU,mBAAf,SAG4B,UAAzBT,EAAOE,eACN,sBAAKO,UAAU,mBAAf,UACE,2CACA,qBAAIA,UAAU,uBAAd,UACE,8BACIF,EAAaG,QACU,IAAxBH,EAAaG,QACZC,EAAaJ,EAAc,CAACP,IAC5B,wCACGN,EAAUkB,IAAIZ,EAAOE,sBADxB,aACG,EAAqCW,OADxC,eAEGnB,EAAUkB,IAAIZ,EAAOE,sBAFxB,aAEG,EAAqCY,QAFxC,OAKA,eAAC,IAAD,CACEC,GAAE,WAAMC,YAAUV,EAAc,CAC9BN,OAAQ,CAACA,GACTiB,UAAMC,KAHV,oBAMGxB,EAAUkB,IAAIZ,EAAOE,sBANxB,aAMG,EAAqCW,OANxC,eAOGnB,EAAUkB,IAAIZ,EAAOE,sBAPxB,aAOG,EAAqCY,QAPxC,SAWJ,6BACGP,EAAaG,QAAUC,EAAaJ,EAAc,CAAC,UAClD,sCAAIb,EAAUkB,IAAI,gBAAlB,aAAI,EAAwBC,SAE5B,cAAC,IAAD,CACEE,GAAE,WAAMC,YAAUV,EAAc,CAC9BN,OAAQ,CAAC,SACTiB,UAAMC,KAHV,mBAMGxB,EAAUkB,IAAI,gBANjB,aAMG,EAAwBC,WAI/B,6BAC2B,IAAxBN,EAAaG,QACdC,EAAaJ,EAAc,CAACP,EAAQ,UAClC,qCAEA,cAAC,IAAD,CACEe,GAAE,WAAMC,YAAUV,EAAc,CAC9BN,OAAQ,CAACA,EAAQ,SACjBiB,UAAMC,KAHV,4BAmBhB,SAASP,EAAaQ,EAAiBC,GACrC,GAAID,EAAMT,SAAWU,EAAMV,OACzB,OAAO,EAET,IAAMW,EAAUF,EAAMpB,KAAI,SAACuB,GAAD,OAAOA,EAAEpB,iBAC7BqB,EAAUH,EAAMrB,KAAI,SAACuB,GAAD,OAAOA,EAAEpB,iBACnC,OAAOmB,EAAQG,OAAM,SAACF,GAAD,OAAOC,EAAQE,SAASH,Q,o8QCxFxC,SAASN,EACdV,EACAoB,GAEA,IAAMC,EAAKC,YAAmBtB,GAW9B,OAVAV,OAAOC,QAAQ6B,GAAWG,SAAQ,YAAmB,IAAD,mBAAhBC,EAAgB,KAAXC,EAAW,KAC9CC,MAAMC,QAAQF,IAChBJ,EAAGO,OAAOJ,GACVC,EAAMF,SAAQ,SAACM,GAAD,OAAOR,EAAGS,OAAON,EAAKK,YACjBjB,IAAVa,EACTJ,EAAGO,OAAOJ,GAEVH,EAAGU,IAAIP,EAAKC,MAGTJ","file":"static/js/16.efdb9744.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link, useSearchParams } from \"react-router-dom\";\nimport LANGUAGES_RAW from \"../languages.json\";\n\nimport { useLocale } from \"../hooks\";\nimport { appendURL } from \"./utils\";\n\nconst LANGUAGES = new Map(\n  Object.entries(LANGUAGES_RAW).map(([locale, data]) => {\n    return [locale.toLowerCase(), data];\n  })\n);\n\nexport default function SiteSearchForm() {\n  const locale = useLocale();\n  const [searchParams] = useSearchParams();\n  const queryLocales = searchParams.getAll(\"locale\");\n\n  return (\n    <div className=\"advanced-options\">\n      {/* Language only applies if you're browsing in, say, French\n      and want to search in English too. */}\n      {locale.toLowerCase() !== \"en-us\" && (\n        <div className=\"language-options\">\n          <h2>Language:</h2>\n          <ul className=\"language-option-list\">\n            <li>\n              {!queryLocales.length ||\n              (queryLocales.length === 1 &&\n                equalLocales(queryLocales, [locale])) ? (\n                <i>\n                  {LANGUAGES.get(locale.toLowerCase())?.native} (\n                  {LANGUAGES.get(locale.toLowerCase())?.English})\n                </i>\n              ) : (\n                <Link\n                  to={`?${appendURL(searchParams, {\n                    locale: [locale],\n                    page: undefined,\n                  })}`}\n                >\n                  {LANGUAGES.get(locale.toLowerCase())?.native} (\n                  {LANGUAGES.get(locale.toLowerCase())?.English})\n                </Link>\n              )}\n            </li>\n            <li>\n              {queryLocales.length && equalLocales(queryLocales, [\"en-us\"]) ? (\n                <i>{LANGUAGES.get(\"en-us\")?.native}</i>\n              ) : (\n                <Link\n                  to={`?${appendURL(searchParams, {\n                    locale: [\"en-US\"],\n                    page: undefined,\n                  })}`}\n                >\n                  {LANGUAGES.get(\"en-us\")?.native}\n                </Link>\n              )}\n            </li>\n            <li>\n              {queryLocales.length === 2 &&\n              equalLocales(queryLocales, [locale, \"en-us\"]) ? (\n                <i>Both</i>\n              ) : (\n                <Link\n                  to={`?${appendURL(searchParams, {\n                    locale: [locale, \"en-US\"],\n                    page: undefined,\n                  })}`}\n                >\n                  Both\n                </Link>\n              )}\n            </li>\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\n// Return true if two arrays, independent of case and order are equal.\n// E.g. `['foo', 'Bar']` is equal to `['bar', 'FoO']`\nfunction equalLocales(list1: string[], list2: string[]) {\n  if (list1.length !== list2.length) {\n    return false;\n  }\n  const list1LC = list1.map((x) => x.toLowerCase());\n  const list2LC = list2.map((x) => x.toLowerCase());\n  return list1LC.every((x) => list2LC.includes(x));\n}\n","import { createSearchParams, URLSearchParamsInit } from \"react-router-dom\";\n\nexport function appendURL(\n  searchParams: URLSearchParamsInit,\n  overrides: Record<string, string | string[] | undefined>\n) {\n  const sp = createSearchParams(searchParams);\n  Object.entries(overrides).forEach(([key, value]) => {\n    if (Array.isArray(value)) {\n      sp.delete(key);\n      value.forEach((v) => sp.append(key, v));\n    } else if (value === undefined) {\n      sp.delete(key);\n    } else {\n      sp.set(key, value);\n    }\n  });\n  return sp;\n}\n"],"sourceRoot":""}