{"version":3,"sources":["page-not-found/fallback-link.tsx"],"names":["LANGUAGES","Map","Object","entries","LANGUAGES_RAW","map","locale","data","toLowerCase","FallbackLink","url","useParams","location","useLocation","React","useState","fallbackCheckURL","setFallbackCheckURL","useSWR","a","fetch","response","ok","json","doc","status","Error","revalidateOnFocus","error","document","useEffect","includes","enUSURL","replace","endsWith","className","toString","get","English","href","mdn_url","title"],"mappings":"mOAOMA,EAAY,IAAIC,IACpBC,OAAOC,QAAQC,GAAeC,KAAI,YAAqB,IAAD,mBAAlBC,EAAkB,KAAVC,EAAU,KACpD,MAAO,CAACD,EAAOE,cAAeD,OAWnB,SAASE,EAAT,GAAiD,IA0DzC,EA1DgBC,EAAwB,EAAxBA,IAC7BJ,EAAWK,cAAXL,OACFM,EAAWC,cAF4C,EAIbC,IAAMC,SACpD,MAL2D,mBAItDC,EAJsD,KAIpCC,EAJoC,OAQ3BC,YAChCF,EADsC,uCAEtC,WAAON,GAAP,mBAAAS,EAAA,sEACyBC,MAAMV,GAD/B,YACQW,EADR,QAEeC,GAFf,iCAG0BD,EAASE,OAHnC,uBAGYC,EAHZ,EAGYA,IAHZ,kBAIWA,GAJX,WAKiC,MAApBH,EAASI,OALtB,0CAMW,MANX,cAQQ,IAAIC,MAAJ,UAAaL,EAASI,OAAtB,eAAmCf,IAR3C,4CAFsC,sDAYtC,CAAEiB,mBAAmB,IAZfC,EARqD,EAQrDA,MAAaC,EARwC,EAQ9CtB,KAoCf,OArBAO,IAAMgB,WAAU,WACd,GAAIpB,GAAOA,EAAIqB,SAAS,WAAsC,UAAzBzB,EAAOE,cAA2B,CAGrE,IAAIwB,EAAUtB,EAAIuB,QAAJ,WAAgB3B,EAAhB,KAA2B,YAIzC0B,EAAUA,EAAQC,QAAQ,SAAU,WAKvBC,SAAS,OACpBF,GAAW,KAGbf,EADAe,GAAW,iBAGZ,CAACtB,EAAKJ,EAAQM,IAEbgB,EAEA,sBAAKO,UAAU,sCAAf,UACE,wCACA,wMAKA,gDACiB,+BAAOP,EAAMQ,mBAIzBP,EAEP,sBAAKM,UAAU,qCAAf,UACE,4CACA,wEAC0C,IACxC,sCAAInC,EAAUqC,IAAI/B,EAAOE,sBAAzB,aAAI,EAAqC8B,UAF3C,oBAEyE,IACvE,2CAEF,mBAAGH,UAAU,gBAAb,SACE,oBAAGI,KAAMV,EAASW,QAAlB,UACE,4BAAIX,EAASY,QACb,uBACA,gCAAQZ,EAASW,kBAWpB,O","file":"static/js/21.ba1c8660.chunk.js","sourcesContent":["import React from \"react\";\nimport { useLocation, useParams } from \"react-router-dom\";\nimport useSWR from \"swr\";\n\nimport { Doc } from \"../document/types\";\nimport LANGUAGES_RAW from \"../languages.json\";\n\nconst LANGUAGES = new Map(\n  Object.entries(LANGUAGES_RAW).map(([locale, data]) => {\n    return [locale.toLowerCase(), data];\n  })\n);\n\n// TODO IDEA\n// Use https://www.npmjs.com/package/string-similarity\n// to download the /$locale/search-index.json to get a list of all possible\n// URLs and see if we can compare the current URL with one of those\n// for making a great suggestion,\n// like \"Did you mean: <a href=$url>$doctitle</a>?\"\n\nexport default function FallbackLink({ url }: { url: string }) {\n  const { locale } = useParams();\n  const location = useLocation();\n\n  const [fallbackCheckURL, setFallbackCheckURL] = React.useState<null | string>(\n    null\n  );\n\n  const { error, data: document } = useSWR<null | Doc>(\n    fallbackCheckURL,\n    async (url) => {\n      const response = await fetch(url);\n      if (response.ok) {\n        const { doc } = await response.json();\n        return doc;\n      } else if (response.status === 404) {\n        return null;\n      }\n      throw new Error(`${response.status} on ${url}`);\n    },\n    { revalidateOnFocus: false }\n  );\n\n  React.useEffect(() => {\n    if (url && url.includes(\"/docs/\") && locale.toLowerCase() !== \"en-us\") {\n      // What if we attempt to see if it would be something there in English?\n      // We'll use the `index.json` version of the URL\n      let enUSURL = url.replace(`/${locale}/`, \"/en-US/\");\n      // But of the benefit of local development, devs can use `/_404/`\n      // instead of `/docs/` to simulate getting to the Page not found page.\n      // So remove that when constructing the English index.json URL.\n      enUSURL = enUSURL.replace(\"/_404/\", \"/docs/\");\n\n      // Lastly, because we're going to append `index.json` always make sure\n      // the URL, up to this point, has a trailing /. The \"defensiveness\" here\n      // is probably only necessary so it works in production and in local development.\n      if (!enUSURL.endsWith(\"/\")) {\n        enUSURL += \"/\";\n      }\n      enUSURL += \"index.json\";\n      setFallbackCheckURL(enUSURL);\n    }\n  }, [url, locale, location]);\n\n  if (error) {\n    return (\n      <div className=\"fallback-document notecard negative\">\n        <h4>Oh no!</h4>\n        <p>\n          Unfortunately, when trying to look to see if there was an English\n          fallback, that check failed. This is either because of a temporary\n          network error or because of a bug.\n        </p>\n        <p>\n          The error was: <code>{error.toString()}</code>\n        </p>\n      </div>\n    );\n  } else if (document) {\n    return (\n      <div className=\"fallback-document notecard success\">\n        <h4>Good news!</h4>\n        <p>\n          The page you requested doesn't exist in{\" \"}\n          <b>{LANGUAGES.get(locale.toLowerCase())?.English}</b> but it exists in{\" \"}\n          <b>English</b>\n        </p>\n        <p className=\"fallback-link\">\n          <a href={document.mdn_url}>\n            <b>{document.title}</b>\n            <br />\n            <small>{document.mdn_url}</small>\n          </a>\n        </p>\n      </div>\n    );\n  } else if (document === null) {\n    // It means the lookup \"worked\" in principle, but there wasn't an English\n    // document there. Bummer. But at least we tried.\n    // Should we say something??\n  }\n\n  return null;\n}\n"],"sourceRoot":""}