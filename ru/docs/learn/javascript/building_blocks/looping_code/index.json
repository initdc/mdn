{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Зацикливание кода","mdn_url":"/ru/docs/Learn/JavaScript/Building_blocks/Looping_code","locale":"ru","native":"Русский","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"\"><a href=\"/ru/docs/Learn/Getting_started_with_the_web\"><strong>Новички начинают здесь!</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>Начало работы с Вебом</summary>\n          <ol>\n            <li><a href=\"/ru/docs/Learn/Getting_started_with_the_web\">Начало работы с Вебом</a></li>\n            <li><a href=\"/ru/docs/Learn/Getting_started_with_the_web/Installing_basic_software\">Установка базового программного обеспечения</a></li>\n            <li><a href=\"/ru/docs/Learn/Getting_started_with_the_web/What_will_your_website_look_like\">Каким должен быть ваш веб-сайт?</a></li>\n            <li><a href=\"/ru/docs/Learn/Getting_started_with_the_web/Dealing_with_files\">Работа с файлами</a></li>\n            <li><a href=\"/ru/docs/Learn/Getting_started_with_the_web/HTML_basics\">Основы HTML</a></li>\n            <li><a href=\"/ru/docs/Learn/Getting_started_with_the_web/CSS_basics\">Основы CSS</a></li>\n            <li><a href=\"/ru/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">Основы JavaScript</a></li>\n            <li><a href=\"/ru/docs/Learn/Getting_started_with_the_web/Publishing_your_website\">Публикация вашего веб-сайта</a></li>\n            <li><a href=\"/ru/docs/Learn/Getting_started_with_the_web/How_the_Web_works\">Как работает Веб</a></li>\n          </ol>\n      </details>\n  </li>\n  <li data-default-state=\"\"><a href=\"/ru/docs/Learn/HTML\"><strong>HTML — структура Веба</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>Вступление в HTML</summary>\n          <ol>\n            <li><a href=\"/ru/docs/Learn/HTML/Introduction_to_HTML\">Вступление в HTML</a></li>\n            <li><a href=\"/ru/docs/Learn/HTML/Introduction_to_HTML/Getting_started\">Начало работы с HTML</a></li>\n            <li><a href=\"/ru/docs/Learn/HTML/Introduction_to_HTML/The_head_metadata_in_HTML\">Что в \"шапке\"? Метаданные в HTML</a></li>\n            <li><a href=\"/ru/docs/Learn/HTML/Introduction_to_HTML/HTML_text_fundamentals\">Тексты в HTML</a></li>\n            <li><a href=\"/ru/docs/Learn/HTML/Introduction_to_HTML/Creating_hyperlinks\">Создание гиперссылок</a></li>\n            <li><a href=\"/ru/docs/Learn/HTML/Introduction_to_HTML/Advanced_text_formatting\">Продвинутое форматирование текста</a></li>\n            <li><a href=\"/ru/docs/Learn/HTML/Introduction_to_HTML/Document_and_website_structure\">Структура документа и веб-сайта</a></li>\n            <li><a href=\"/ru/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML\">Отладка HTML</a></li>\n            <li><a href=\"/ru/docs/Learn/HTML/Introduction_to_HTML/Marking_up_a_letter\">Задание: Выделение символа</a></li>\n            <li><a href=\"/ru/docs/Learn/HTML/Introduction_to_HTML/Structuring_a_page_of_content\">Задание: Структура страницы</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>Мультимедиа и встраивание</summary>\n          <ol>\n            <li><a href=\"/ru/docs/Learn/HTML/Multimedia_and_embedding\">Мультимедиа и встраивание</a></li>\n            <li><a href=\"/ru/docs/Learn/HTML/Multimedia_and_embedding/Images_in_HTML\">Изображения в HTML</a></li>\n            <li><a href=\"/ru/docs/Learn/HTML/Multimedia_and_embedding/Video_and_audio_content\">Видео и аудио контент</a></li>\n            <li><a href=\"/ru/docs/Learn/HTML/Multimedia_and_embedding/Other_embedding_technologies\">От object до iframe — другие технологии встраивания</a></li>\n            <li><a href=\"/ru/docs/Learn/HTML/Multimedia_and_embedding/Adding_vector_graphics_to_the_Web\">Добавление векторный графики в Веб</a></li>\n            <li><a href=\"/ru/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images\">Отзывчивые изображения</a></li>\n            <li><a href=\"/ru/docs/Learn/HTML/Multimedia_and_embedding/Mozilla_splash_page\">Задание: Страница о Mozilla</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>HTML tables</summary>\n          <ol>\n            <li><a href=\"/ru/docs/Learn/HTML/Tables\">HTML tables overview</a></li>\n            <li><a href=\"/ru/docs/Learn/HTML/Tables/Basics\">HTML table basics</a></li>\n            <li><a href=\"/ru/docs/Learn/HTML/Tables/Advanced\">HTML Table advanced features and accessibility</a></li>\n            <li><a href=\"/ru/docs/Learn/HTML/Tables/Structuring_planet_data\">Assessment: Structuring planet data</a></li>\n          </ol>\n      </details>\n  </li>\n  <li data-default-state=\"\"><a href=\"/ru/docs/Learn/CSS\"><strong>CSS — стилизирование Веба</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>CSS first steps</summary>\n          <ol>\n            <li><a href=\"/ru/docs/Learn/CSS/First_steps\">CSS first steps overview</a></li>\n            <li><a href=\"/ru/docs/Learn/CSS/First_steps/What_is_CSS\">What is CSS?</a></li>\n            <li><a href=\"/ru/docs/Learn/CSS/First_steps/Getting_started\">Getting started with CSS</a></li>\n            <li><a href=\"/ru/docs/Learn/CSS/First_steps/How_CSS_is_structured\">How CSS is structured</a></li>\n            <li><a href=\"/ru/docs/Learn/CSS/First_steps/How_CSS_works\">How CSS works</a></li>\n            <li><a href=\"/ru/docs/Learn/CSS/First_steps/Using_your_new_knowledge\">Using your new knowledge</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>CSS building blocks</summary>\n          <ol>\n            <li><a href=\"/ru/docs/Learn/CSS/Building_blocks\">CSS building blocks overview</a></li>\n            <li><a href=\"/ru/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance\">Cascade and inheritance</a></li>\n            <li><a href=\"/ru/docs/Learn/CSS/Building_blocks/Selectors\">CSS selectors</a></li>\n            <li><a href=\"/ru/docs/Learn/CSS/Building_blocks/The_box_model\">The box model</a></li>\n            <li><a href=\"/ru/docs/Learn/CSS/Building_blocks/Backgrounds_and_borders\">Backgrounds and borders</a></li>\n            <li><a href=\"/ru/docs/Learn/CSS/Building_blocks/Handling_different_text_directions\">Handling different text directions</a></li>\n            <li><a href=\"/ru/docs/Learn/CSS/Building_blocks/Overflowing_content\">Overflowing content</a></li>\n            <li><a href=\"/ru/docs/Learn/CSS/Building_blocks/Values_and_units\">Values and units</a></li>\n            <li><a href=\"/ru/docs/Learn/CSS/Building_blocks/Sizing_items_in_CSS\">Sizing items in CSS</a></li>\n            <li><a href=\"/ru/docs/Learn/CSS/Building_blocks/Images_media_form_elements\">Images, media, and form elements</a></li>\n            <li><a href=\"/ru/docs/Learn/CSS/Building_blocks/Styling_tables\">Styling tables</a></li>\n            <li><a href=\"/ru/docs/Learn/CSS/Building_blocks/Debugging_CSS\">Debugging CSS</a></li>\n            <li><a href=\"/ru/docs/Learn/CSS/Building_blocks/Organizing\">Organizing your CSS</a></li>\n      </ol></details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>Стилизирование текста</summary>\n          <ol>\n            <li><a href=\"/ru/docs/Learn/CSS/Styling_text\">Стилизирование текста</a></li>\n            <li><a href=\"/ru/docs/Learn/CSS/Styling_text/Fundamentals\">Основы стилизирования текста и шрифта</a></li>\n            <li><a href=\"/ru/docs/Learn/CSS/Styling_text/Styling_lists\">Стилизирование списков</a></li>\n            <li><a href=\"/ru/docs/Learn/CSS/Styling_text/Styling_links\">Стилизирование ссылок</a></li>\n            <li><a href=\"/ru/docs/Learn/CSS/Styling_text/Web_fonts\">Веб-шрифты</a></li>\n            <li><a href=\"/ru/docs/Learn/CSS/Styling_text/Typesetting_a_homepage\">Задание: Стилизирование школьного сайта</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>CSS макет</summary>\n          <ol>\n            <li><a href=\"/ru/docs/Learn/CSS/CSS_layout\">CSS макет</a></li>\n            <li><a href=\"/ru/docs/Learn/CSS/CSS_layout/Introduction\">Introduction to CSS layout</a></li>\n            <li><a href=\"/ru/docs/Learn/CSS/CSS_layout/Normal_Flow\">Normal Flow</a></li>\n            <li><a href=\"/ru/docs/Learn/CSS/CSS_layout/Flexbox\">Flexbox</a></li>\n            <li><a href=\"/ru/docs/Learn/CSS/CSS_layout/Grids\">Сетки</a></li>\n            <li><a href=\"/ru/docs/Learn/CSS/CSS_layout/Floats\">Float</a></li>\n            <li><a href=\"/ru/docs/Learn/CSS/CSS_layout/Positioning\">Позиционирование</a></li>\n            <li><a href=\"/ru/docs/Learn/CSS/CSS_layout/Multiple-column_Layout\">Multiple-column Layout</a></li>\n            <li><a href=\"/ru/docs/Learn/CSS/CSS_layout/Responsive_Design\">Responsive design</a></li>\n            <li><a href=\"/ru/docs/Learn/CSS/CSS_layout/Media_queries\">Beginner's guide to media queries</a></li>\n            <li><a href=\"/ru/docs/Learn/CSS/CSS_layout/Legacy_Layout_Methods\">Legacy Layout Methods</a></li>\n            <li><a href=\"/ru/docs/Learn/CSS/CSS_layout/Supporting_Older_Browsers\">Supporting Older Browsers</a></li>\n            <li><a href=\"/ru/docs/Learn/CSS/CSS_layout/Fundamental_Layout_Comprehension\">Fundamental Layout Comprehension</a></li>\n          </ol>\n      </details>\n  </li>\n  <li data-default-state=\"open\"><a href=\"/ru/docs/Learn/JavaScript\"><strong>JavaScript — динамический клиентский скриптинг</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>Первые шаги в JavaScript</summary>\n          <ol>\n            <li><a href=\"/ru/docs/Learn/JavaScript/First_steps\">Первые шаги в JavaScript</a></li>\n            <li><a href=\"/ru/docs/Learn/JavaScript/First_steps/What_is_JavaScript\">Что такое JavaScript?</a></li>\n            <li><a href=\"/ru/docs/Learn/JavaScript/First_steps/A_first_splash\">Первое погружение в JavaScript</a></li>\n            <li><a href=\"/ru/docs/Learn/JavaScript/First_steps/What_went_wrong\">Что-то пошло не так? Устранение ошибок JavaScript</a></li>\n            <li><a href=\"/ru/docs/Learn/JavaScript/First_steps/Variables\">Хранение нужной информации — Переменные</a></li>\n            <li><a href=\"/ru/docs/Learn/JavaScript/First_steps/Math\">Основы JavaScript — Числа и операторы</a></li>\n            <li><a href=\"/ru/docs/Learn/JavaScript/First_steps/Strings\">Работа с текстом — Строки в JavaScript</a></li>\n            <li><a href=\"/ru/docs/Learn/JavaScript/First_steps/Useful_string_methods\">Полезные методы для строк</a></li>\n            <li><a href=\"/ru/docs/Learn/JavaScript/First_steps/Arrays\">Массивы</a></li>\n            <li><a href=\"/ru/docs/Learn/JavaScript/First_steps/Silly_story_generator\">Задание: Генератор глупых историй</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details open=\"\">\n          <summary>Блоки в JavaScript</summary>\n          <ol>\n            <li><a href=\"/ru/docs/Learn/JavaScript/Building_blocks\">Блоки в JavaScript</a></li>\n            <li><a href=\"/ru/docs/Learn/JavaScript/Building_blocks/conditionals\">Делаем решения в вашем годе — Условия</a></li>\n            <li><a href=\"/ru/docs/Learn/JavaScript/Building_blocks/Looping_code\">Повторение кода</a></li>\n            <li><a href=\"/ru/docs/Learn/JavaScript/Building_blocks/Functions\">Функции — Переиспользуемые блоки кода</a></li>\n            <li><a href=\"/ru/docs/Learn/JavaScript/Building_blocks/Build_your_own_function\">Создаём свою функцию</a></li>\n            <li><a href=\"/ru/docs/Learn/JavaScript/Building_blocks/Return_values\">Возвращаемые значения функций</a></li>\n            <li><a href=\"/ru/docs/Learn/JavaScript/Building_blocks/Events\">Введение в события</a></li>\n            <li><a href=\"/ru/docs/Learn/JavaScript/Building_blocks/Image_gallery\">Задание: Галерея изображений</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>Введение в объекты JavaScript</summary>\n          <ol>\n            <li><a href=\"/ru/docs/Learn/JavaScript/Objects\">Введение в объекты JavaScript</a></li>\n            <li><a href=\"/ru/docs/Learn/JavaScript/Objects/Basics\">Основы объектов</a></li>\n            <li><a href=\"/ru/docs/Learn/JavaScript/Objects/Object_prototypes\">Прототипы объектов</a></li>\n            <li><a href=\"/ru/docs/Learn/JavaScript/Objects/Object-oriented_programming\">Object-oriented programming concepts</a></li>\n            <li><a href=\"/ru/docs/Learn/JavaScript/Objects/Classes_in_JavaScript\">Classes in JavaScript</a></li>\n            <li><a href=\"/ru/docs/Learn/JavaScript/Objects/JSON\">Работа с JSON данными</a></li>\n            <li><a href=\"/ru/docs/Learn/JavaScript/Objects/Object_building_practice\">Практика по созданию объектов</a></li>\n            <li><a href=\"/ru/docs/Learn/JavaScript/Objects/Adding_bouncing_balls_features\">Задание: Добавление возможностей в пример с прыгающими шарами</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Asynchronous JavaScript</summary>\n        <ol>\n          <li><a href=\"/ru/docs/Learn/JavaScript/Asynchronous\">Asynchronous JavaScript overview</a></li>\n          <li><a href=\"/ru/docs/Learn/JavaScript/Asynchronous/Concepts\">General asynchronous programming concepts</a></li>\n          <li><a href=\"/ru/docs/Learn/JavaScript/Asynchronous/Introducing\">Introducing asynchronous JavaScript</a></li>\n          <li><a href=\"/ru/docs/Learn/JavaScript/Asynchronous/Timeouts_and_intervals\">Cooperative asynchronous Java​Script: Timeouts and intervals</a></li>\n          <li><a href=\"/ru/docs/Learn/JavaScript/Asynchronous/Promises\">Graceful asynchronous programming with Promises</a></li>\n          <li><a href=\"/ru/docs/Learn/JavaScript/Asynchronous/Async_await\">Making asynchronous programming easier with async and await</a></li>\n          <li><a href=\"/ru/docs/Learn/JavaScript/Asynchronous/Choosing_the_right_approach\">Choosing the right approach</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Client-side web APIs</summary>\n        <ol>\n          <li><a href=\"/ru/docs/Learn/JavaScript/Client-side_web_APIs\">Client-side web APIs</a></li>\n          <li><a href=\"/ru/docs/Learn/JavaScript/Client-side_web_APIs/Introduction\">Introduction to web APIs</a></li>\n          <li><a href=\"/ru/docs/Learn/JavaScript/Client-side_web_APIs/Manipulating_documents\">Manipulating documents</a></li>\n          <li><a href=\"/ru/docs/Learn/JavaScript/Client-side_web_APIs/Fetching_data\">Fetching data from the server</a></li>\n          <li><a href=\"/ru/docs/Learn/JavaScript/Client-side_web_APIs/Third_party_APIs\">Third party APIs</a></li>\n          <li><a href=\"/ru/docs/Learn/JavaScript/Client-side_web_APIs/Drawing_graphics\">Drawing graphics</a></li>\n          <li><a href=\"/ru/docs/Learn/JavaScript/Client-side_web_APIs/Video_and_audio_APIs\">Video and audio APIs</a></li>\n          <li><a href=\"/ru/docs/Learn/JavaScript/Client-side_web_APIs/Client-side_storage\">Client-side storage</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"/ru/docs/Learn/Forms\"><strong>Web forms — Working with user data</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Core forms learning pathway</summary>\n        <ol>\n          <li><a href=\"/ru/docs/Learn/Forms\">Web forms overview</a></li>\n          <li><a href=\"/ru/docs/Learn/Forms/Your_first_form\">Your first form</a></li>\n          <li><a href=\"/ru/docs/Learn/Forms/How_to_structure_a_web_form\">How to structure a web form</a></li>\n          <li><a href=\"/ru/docs/Learn/Forms/Basic_native_form_controls\">Basic native form controls</a></li>\n          <li><a href=\"/ru/docs/Learn/Forms/HTML5_input_types\">The HTML5 input types</a></li>\n          <li><a href=\"/ru/docs/Learn/Forms/Other_form_controls\">Other form controls</a></li>\n          <li><a href=\"/ru/docs/Learn/Forms/Styling_web_forms\">Styling web forms</a></li>\n          <li><a href=\"/ru/docs/Learn/Forms/Advanced_form_styling\">Advanced form styling</a></li>\n          <li><a href=\"/ru/docs/Learn/Forms/UI_pseudo-classes\">UI pseudo-classes</a></li>\n          <li><a href=\"/ru/docs/Learn/Forms/Form_validation\">Client-side form validation</a></li>\n          <li><a href=\"/ru/docs/Learn/Forms/Sending_and_retrieving_form_data\">Sending form data</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Advanced forms articles</summary>\n        <ol>\n          <li><a href=\"/ru/docs/Learn/Forms/How_to_build_custom_form_controls\">How to build custom form controls</a></li>\n          <li><a href=\"/ru/docs/Learn/Forms/Sending_forms_through_JavaScript\">Sending forms through JavaScript</a></li>\n          <li><a href=\"/ru/docs/Learn/Forms/Property_compatibility_table_for_form_controls\">CSS property compatibility table for form controls</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"/ru/docs/Learn/Accessibility\"><strong>Accessibility — Make the web usable by everyone</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Accessibility guides</summary>\n        <ol>\n          <li><a href=\"/ru/docs/Learn/Accessibility\">Accessibility overview</a></li>\n          <li><a href=\"/ru/docs/Learn/Accessibility/What_is_accessibility\">What is accessibility?</a></li>\n          <li><a href=\"/ru/docs/Learn/Accessibility/HTML\">HTML: A good basis for accessibility</a></li>\n          <li><a href=\"/ru/docs/Learn/Accessibility/CSS_and_JavaScript\">CSS and JavaScript accessibility best practices</a></li>\n          <li><a href=\"/ru/docs/Learn/Accessibility/WAI-ARIA_basics\">WAI-ARIA basics</a></li>\n          <li><a href=\"/ru/docs/Learn/Accessibility/Multimedia\">Accessible multimedia</a></li>\n          <li><a href=\"/ru/docs/Learn/Accessibility/Mobile\">Mobile accessibility</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Accessibility assessment</summary>\n        <ol>\n            <li><a href=\"/ru/docs/Learn/Accessibility/Accessibility_troubleshooting\">Assessment: Accessibility troubleshooting</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"/ru/docs/Learn/Tools_and_testing\"><strong>Инструменты и тестирование</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Client-side web development tools</summary>\n        <ol>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Understanding_client-side_tools\">Client-side web development tools index</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Overview\">Client-side tooling overview</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Command_line\">Command line crash course</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Package_management\">Package management basics</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Introducing_complete_toolchain\">Introducing a complete toolchain</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Deployment\">Deploying our app</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Introduction to client-side frameworks</summary>\n        <ol>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Introduction\">Client-side frameworks overview</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Main_features\">Framework main features</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>React</summary>\n        <ol>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_getting_started\">Getting started with React</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_todo_list_beginning\">Beginning our React todo list</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_components\">Componentizing our React app</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_events_state\">React interactivity: Events and state</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_filtering_conditional_rendering\">React interactivity: Editing, filtering, conditional rendering</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_accessibility\">Accessibility in React</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_resources\">React resources</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Ember</summary>\n        <ol>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_getting_started\">Getting started with Ember</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_structure_componentization\">Ember app structure and componentization</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_interactivity_events_state\">Ember interactivity: Events, classes and state</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_conditional_footer\">Ember Interactivity: Footer functionality, conditional rendering</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_routing\">Routing in Ember</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_resources\">Ember resources and troubleshooting</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Vue</summary>\n        <ol>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_getting_started\">Getting started with Vue</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_first_component\">Creating our first Vue component</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_rendering_lists\">Rendering a list of Vue components</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_methods_events_models\">Adding a new todo form: Vue events, methods, and models</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_styling\">Styling Vue components with CSS</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_computed_properties\">Using Vue computed properties</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_conditional_rendering  \">Vue conditional rendering: editing existing todos</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_refs_focus_management\">Focus management with Vue refs</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_resources\">Vue resources</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Svelte</summary>\n        <ol>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_getting_started\">Getting started with Svelte</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_Todo_list_beginning\">Starting our Svelte Todo list app</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_variables_props\">Dynamic behavior in Svelte: working with variables and props</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_components\">Componentizing our Svelte app</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_reactivity_lifecycle_accessibility\">Advanced Svelte: Reactivity, lifecycle, accessibility</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_stores\">Working with Svelte stores</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_TypeScript  \">TypeScript support in Svelte</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_deployment_next\">Deployment and next steps</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Angular</summary>\n        <ol>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_getting_started\">Getting started with Angular</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_todo_list_beginning\">Beginning our Angular todo list app</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_styling\">Styling our Angular app</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_item_component\">Creating an item component</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_filtering\">Filtering our to-do items</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_building\">Building Angular applications and further resources</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Git and GitHub</summary>\n        <ol>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/GitHub\">Git and GitHub overview</a></li>\n          <li><a href=\"https://guides.github.com/activities/hello-world/\">Hello World</a></li>\n          <li><a href=\"https://guides.github.com/introduction/git-handbook/\">Git Handbook</a></li>\n          <li><a href=\"https://guides.github.com/activities/forking/\">Forking Projects</a></li>\n          <li><a href=\"https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests\">About pull requests</a></li>\n          <li><a href=\"https://guides.github.com/features/issues/\">Mastering Issues</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Кроссбраузерное тестирование</summary>\n        <ol>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Cross_browser_testing\">Кроссбраузерное тестирование</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Cross_browser_testing/Introduction\">Вступление в кроссбраузерное тестирование</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Cross_browser_testing/Testing_strategies\">Стратегии выполнения тестирования</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Cross_browser_testing/HTML_and_CSS\">Решение частых проблем с HTML и CSS</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Cross_browser_testing/JavaScript\">Решение частых проблем с JavaScript</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Cross_browser_testing/Accessibility\">Решение частых проблем доступности</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Cross_browser_testing/Feature_detection\">Проверка поддержки возможностей</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Cross_browser_testing/Automated_testing\">Вступление в автоматическое тестирование</a></li>\n          <li><a href=\"/ru/docs/Learn/Tools_and_testing/Cross_browser_testing/Your_own_automation_environment\">Установка вашей автоматической среды тестирования</a></li>\n        </ol>\n    </details>\n  </li>\n  <li data-default-state=\"\"><a href=\"/ru/docs/Learn/Server-side\"><strong>Программирование серверной части сайта</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Первые шаги</summary>\n        <ol>\n          <li><a href=\"/ru/docs/Learn/Server-side/First_steps\">Первые шаги</a></li>\n          <li><a href=\"/ru/docs/Learn/Server-side/First_steps/Introduction\">Вступление в серверное программирование</a></li>\n          <li><a href=\"/ru/docs/Learn/Server-side/First_steps/Client-Server_overview\">Клиент-сервер</a></li>\n          <li><a href=\"/ru/docs/Learn/Server-side/First_steps/Web_frameworks\">Веб-фреймворки для серверной части</a></li>\n          <li><a href=\"/ru/docs/Learn/Server-side/First_steps/Website_security\">Защищённость веб-сайтов</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Веб-фреймворк Django (Python)</summary>\n        <ol>\n          <li><a href=\"/ru/docs/Learn/Server-side/Django\">Веб-фреймворк Django (Python)</a></li>\n          <li><a href=\"/ru/docs/Learn/Server-side/Django/Introduction\">Вступление</a></li>\n          <li><a href=\"/ru/docs/Learn/Server-side/Django/development_environment\">Установка среды разработки</a></li>\n          <li><a href=\"/ru/docs/Learn/Server-side/Django/Tutorial_local_library_website\">Руководство: Сайт местной библиотеки</a></li>\n          <li><a href=\"/ru/docs/Learn/Server-side/Django/skeleton_website\">Руководство часть 2: Создаём набросок сайта</a></li>\n          <li><a href=\"/ru/docs/Learn/Server-side/Django/Models\">Руководство часть 3: Использование моделей</a></li>\n          <li><a href=\"/ru/docs/Learn/Server-side/Django/Admin_site\">Руководство часть 4: Django панель администратора</a></li>\n          <li><a href=\"/ru/docs/Learn/Server-side/Django/Home_page\">Руководство часть 5: Создание нашей домашней страницы</a></li>\n          <li><a href=\"/ru/docs/Learn/Server-side/Django/Generic_views\">Руководство часть 6: Списки и представления</a></li>\n          <li><a href=\"/ru/docs/Learn/Server-side/Django/Sessions\">Руководство часть 7: Сессии</a></li>\n          <li><a href=\"/ru/docs/Learn/Server-side/Django/Authentication\">Руководство часть 8: Аутенфикация и разрешения пользователей</a></li>\n          <li><a href=\"/ru/docs/Learn/Server-side/Django/Forms\">Руководство часть 9: Работа с формами</a></li>\n          <li><a href=\"/ru/docs/Learn/Server-side/Django/Testing\">Руководство часть 10: Тестирование веб-приложения на Django</a></li>\n          <li><a href=\"/ru/docs/Learn/Server-side/Django/Deployment\">Руководство часть 11: Разворачивание Django на продакшн сервере</a></li>\n          <li><a href=\"/ru/docs/Learn/Server-side/Django/web_application_security\">Защищённость веб-приложения</a></li>\n          <li><a href=\"/ru/docs/Learn/Server-side/Django/django_assessment_blog\">Задание: создание мини блога</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Express Web Framework (node.js/JavaScript)</summary>\n        <ol>\n          <li><a href=\"/ru/docs/Learn/Server-side/Express_Nodejs\">Express Web Framework (Node.js/JavaScript) overview</a></li>\n          <li><a href=\"/ru/docs/Learn/Server-side/Express_Nodejs/Introduction\">Express/Node introduction</a></li>\n          <li><a href=\"/ru/docs/Learn/Server-side/Express_Nodejs/development_environment\">Setting up a Node (Express) development environment</a></li>\n          <li><a href=\"/ru/docs/Learn/Server-side/Express_Nodejs/Tutorial_local_library_website\">Express tutorial: The Local Library website</a></li>\n          <li><a href=\"/ru/docs/Learn/Server-side/Express_Nodejs/skeleton_website\">Express Tutorial Part 2: Creating a skeleton website</a></li>\n          <li><a href=\"/ru/docs/Learn/Server-side/Express_Nodejs/mongoose\">Express Tutorial Part 3: Using a database (with Mongoose)</a></li>\n          <li><a href=\"/ru/docs/Learn/Server-side/Express_Nodejs/routes\">Express Tutorial Part 4: Routes and controllers</a></li>\n          <li><a href=\"/ru/docs/Learn/Server-side/Express_Nodejs/Displaying_data\">Express Tutorial Part 5: Displaying library data</a></li>\n          <li><a href=\"/ru/docs/Learn/Server-side/Express_Nodejs/forms\">Express Tutorial Part 6: Working with forms</a></li>\n          <li><a href=\"/ru/docs/Learn/Server-side/Express_Nodejs/deployment\">Express Tutorial Part 7: Deploying to production</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"#\"><strong>Дальнейшее чтение</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Общие вопросы</summary>\n        <ol>\n          <li><a href=\"/ru/docs/Learn/HTML/Howto\">Вопросы по HTML</a></li>\n          <li><a href=\"/ru/docs/Learn/CSS/Howto\">Вопросы по CSS</a></li>\n          <li><a href=\"/ru/docs/Learn/JavaScript/Howto\">JavaScript questions</a></li>\n          <li><a href=\"/ru/docs/Learn/Common_questions#Web_mechanics\">Как работает Веб</a></li>\n          <li><a href=\"/ru/docs/Learn/Common_questions#Tools_and_setup\">Инструменты и установка</a></li>\n          <li><a href=\"/ru/docs/Learn/Common_questions#Design_and_accessibility\">Дизайн и доступность</a></li>\n        </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div id=\"sect1\"></div>\n\n<div id=\"sect2\"><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ru/docs/Learn/JavaScript/Building_blocks/conditionals\"> Назад </a></li>\n    <li><a class=\"button minimal\" href=\"/ru/docs/Learn/JavaScript/Building_blocks\"> Обзор: Building blocks</a></li>\n    <li><a class=\"button minimal\" href=\"/ru/docs/Learn/JavaScript/Building_blocks/Functions\"> Далее  </a></li>\n</ul></div>\n\n<p class=\"summary\">Языки программирования очень полезны для быстрой реализации повторяющихся задач. От базовых числовых операций до любой другой ситуации, когда у вас есть много похожих операций, которые нужно выполнить. В этой статье мы рассмотрим структуры циклов, доступные в JavaScript, которые можно использовать для этих целей.</p>\n\n<table>\n <tbody>\n  <tr>\n   <th scope=\"row\">Требования:</th>\n   <td>Базовые значения компьютерной системы и базовое понимание HTML и CSS, <a href=\"/en-US/docs/Learn/JavaScript/First_steps\">JavaScript первые шаги</a>.</td>\n  </tr>\n  <tr>\n   <th scope=\"row\">Цель:</th>\n   <td>Понять как работают циклы в JavaScript.</td>\n  </tr>\n </tbody>\n</table>"}},{"type":"prose","value":{"id":"циклы_в_коде","title":"Циклы в коде","isH3":false,"content":"<p>Циклы являются важной концепцией в программировании. Их использование основано на повторении одного и того же, что в программировании называется <strong>итерацией</strong>.</p>\n\n<p>Давайте рассмотрим работу фермера, который следит за тем, чтобы у него было достаточно еды, чтобы кормить всю свою семью в течении недели. Его работу можно представить в виде цикла:</p>\n\n<p><br>\n <img alt=\"\" src=\"https://mdn.mozillademos.org/files/13755/loop_js-02-farm.png\" style=\"display: block; margin: 0 auto;\" loading=\"lazy\"></p>\n\n<p>Цикл обычно составляет одну или несколько из следующих функций:</p>\n\n<ul>\n <li> <strong>Счётчик</strong>, который инициализируется с определённого значения — начальной точки цикла (На рисунке выше первый этап: \"у меня нет еды (i have no food)\")</li>\n <li><strong>Условие выхода </strong>— критерий, при котором цикл останавливается, — обычно наступает, когда цикл достигает определённого значения. Это иллюстрируется выше словами \"Достаточно ли у меня еды? (Do I have enough food?)\". Предположим, фермеру нужно 10 порций еды, чтобы прокормить семью.</li>\n <li><strong>Итератор </strong>постепенно увеличивает счётчик на некоторое значение на каждом шаге цикла, пока не достигнуто условия выхода. Мы явно не показали это в изображении, но если предположить что фермер собирает две порции еды в час, то после каждого часа, количество еды, которое у него имеется, увеличивается на две порции, и он проверяет достаточно ли у него еды сейчас. Если у него собралось 10 порций (условие выхода), он может остановить сбор и вернуться домой.</li>\n</ul>\n\n<p>В <a href=\"/ru/docs/Glossary/Pseudocode\">псевдокоде</a> это будет выглядеть следующим образом:</p>\n\n<pre class=\"notranslate\">loop(food = 0; foodNeeded = 10) {\n  if (food = foodNeeded) {\n    exit loop;\n    // У нас достаточно еды, пора домой\n  } else {\n    food += 2; // Прошёл час, количество еды увеличилось на 2\n    // переход на следующую итерацию цикла.\n  }\n}</pre>\n\n<p>Таким образом, необходимое количество еды устанавливается равным 10, а изначально фермер не имеет ни одной порции, т.е. начало равно 0. На каждой итерации цикла проверяем, соответствует ли собранное количество еды, с тем количеством, которое ему необходимо. Если это так, можно выйти из цикла, если нет, фермер собирает ещё 2 порции и снова переходит к проверке.</p>"}},{"type":"prose","value":{"id":"зачем_это_нужно","title":"Зачем это нужно?","isH3":true,"content":"<p>Итак вы разобрались, как работают циклы. Но, вероятно, думаете: \"Хорошо, но как это мне поможет писать код на JavaScript\". Как мы писали ранее, <strong>циклы постоянно повторяют одно и тоже действие</strong>, что отлично подходит для <strong>быстрого выполнения повторяющихся задач</strong>.</p>\n\n<p>Часто код будет немного отличаться на каждой последующей итерации цикла. Это означает, что вы можете выполнять задачи, которые похожи, но у них есть некоторые различия. Например, если вам нужно выполнить много вычислений, немного отличающихся на каждой итерации.</p>\n\n<p>На следующем примере попробуем показать, почему циклы так полезны. Предположим мы хотели нарисовать 100 случайных кругов на элементе <a href=\"/ru/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a>. Нажмите кнопку \"Обновить\", чтобы снова и снова запускать пример и увидеть, что круги рисуются случайным образом.</p>\n\n\n\n<p><iframe class=\"sample-code-frame\" title=\"Hidden code sample\" id=\"frame_hidden_code\" width=\"100%\" height=\"400\" src=\"https://yari-demos.prod.mdn.mozit.cloud/ru/docs/Learn/JavaScript/Building_blocks/Looping_code/_sample_.hidden_code.html\" loading=\"lazy\"></iframe></p>\n\n<p>Вам необязательно понимать все части кода, но давайте посмотрим на место, где рисуются 100 кругов.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">beginPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">'rgba(255,0,0,0.5)'</span><span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token constant\">WIDTH</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token constant\">HEIGHT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<ul>\n <li><code>random()</code>, описанная в коде, возвращает случайное число между <code>0</code> и <code>x-1</code>.</li>\n <li><code>WIDTH</code> и <code>HEIGHT</code> — это высота и ширина  окна браузера.</li>\n</ul>\n\n<p>Вы должны понять основную идею: мы используем цикл для запуска 100 итераций этого кода, каждая из которых рисует круг в случайном месте в окне. Количество кода было бы одинаковым, если бы нам нужно было нарисовать 10, 100 или 1000 кругов, поменяется лишь одно число.</p>\n\n<p>Если бы мы не использовали циклы, нам бы пришлось повторить следующий код, для отрисовки каждого круга:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">beginPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">'rgba(255,0,0,0.5)'</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token constant\">WIDTH</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token constant\">HEIGHT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>Это множество лишнего кода очень усложнило бы поддержку кода в будущем, т.к. если бы вам захотелось что-то изменить, в каждой итерации цикла, пришлось бы изменять все части кода по отдельности. А ещё это усложняет поиск ошибок, т.к. если вдруг вы совершите логическую ошибку при описании одной из итераций, придётся потратить много времени на её поиски.</p>"}},{"type":"prose","value":{"id":"правила_записи_цикла","title":"Правила записи цикла","isH3":false,"content":"<p>Рассмотрим некоторые конкретные конструкции циклов. Первый вариант, который вы будете использовать чаще всего, это цикл <a href=\"/ru/docs/Web/JavaScript/Reference/Statements/for\">for</a>. Он имеет следующий синтаксис:</p>\n\n<pre class=\"notranslate\">for (initializer; exit-condition; final-expression) {\n  // код для выполнения\n}</pre>\n\n<p>Тут имеем:</p>\n\n<ol>\n <li>Ключевое слово <a href=\"ru/docs/Web/JavaScript/Reference/Statements/for\">for</a>, за которым следуют круглые скобки.</li>\n <li>В круглых скобках у нас есть три части, разделённые точкой с запятой:\n  <ol>\n   <li><strong>Инициализатор</strong> — обычно это переменная численного типа, которая увеличивается каждую итерацию, чтобы посчитать количество шагов цикла. Её также называет <strong>счётчиком</strong>.</li>\n   <li><strong>Условие выхода</strong> — как упоминалось ранее, определяет, когда цикл должен остановиться. Обычно это выражение с оператором сравнения проверяющим, выполнено ли условие выхода.</li>\n   <li><strong>Окончательное выражение</strong> — вычисляется (или выполняется) каждый раз, когда цикл проходит полную итерацию. Обычно оно служит для увеличения (или уменьшения) переменной <strong>счётчика</strong>, чтобы приблизить её значение к условию выхода.</li>\n  </ol>\n </li>\n <li>Фигурные скобки, содержащие блок кода. Этот код будет запускаться на каждой итерации цикла.</li>\n</ol>\n\n<p>Посмотрим на пример, чтобы разобраться в этом более детально.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> cats <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Билл'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Макс'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Пикси'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Алиса'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Жасмин'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> info <span class=\"token operator\">=</span> <span class=\"token string\">'Моих кошек зовут '</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> para <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> cats<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  info <span class=\"token operator\">+=</span> cats<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">', '</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\npara<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> info<span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>Этот блок кода будет иметь следующий результат:</p>\n\n\n\n<p><iframe class=\"sample-code-frame\" title=\"Hidden code 2 sample\" id=\"frame_hidden_code_2\" width=\"100%\" height=\"60\" src=\"https://yari-demos.prod.mdn.mozit.cloud/ru/docs/Learn/JavaScript/Building_blocks/Looping_code/_sample_.hidden_code_2.html\" loading=\"lazy\"></iframe></p>\n\n<div class=\"note notecard\" id=\"sect5\">\n<p><strong>Примечание</strong>: вы можете найти этот  <a href=\"https://github.com/mdn/learning-area/blob/master/javascript/building-blocks/loops/basic-for.html\" class=\"external\" rel=\" noopener\">пример на GitHub</a> или  <a href=\"https://mdn.github.io/learning-area/javascript/building-blocks/loops/basic-for.html\" class=\"external\" rel=\" noopener\">посмотреть онлайн</a>.</p>\n</div>\n\n<p>Здесь показан цикл, используемый для перебора элементов в массиве и выполнения определённых действий с каждым из них — очень распространённый шаблон в JavaScript<br>\n Подробнее:</p>\n\n<ol>\n <li>Итератор, <code>i</code>, начинается с <code>0</code> (<code>var i = 0</code>).</li>\n <li>Цикл запускается, пока значение итератора не будет больше длины массива кошек. Это важно - условие выхода показывает когда именно цикл должен работать, а когда нужно выйти из цикла. Поэтому в случае, пока <code>i &lt; cats.lenght</code> по-прежнему возвращает <code>true</code>, цикл будет работать.</li>\n <li>Внутри тела цикла мы соединяем текущий элемент цикла (<code>cats[i]</code> это <code>cats</code>[независимо от того, чем <code>i</code> является в данный момент]) с запятой и пробелом. Итак:\n  <ol>\n   <li>В начале, <code>i = 0</code>, поэтому <code>cats[0] + ', '</code> соединятся в (\"Билл, \").</li>\n   <li>На втором шаге, <code>i = 1</code>, поэтому <code>cats[1] + ', '</code> соединятся в (\"Макс, \")</li>\n   <li>И так далее. В конце каждого цикла <code>i</code> увеличится на 1 (<code>i++</code>) , и процесс будет начинаться заново.</li>\n  </ol>\n </li>\n <li>Когда <code>i</code> достигнет величины <code>cats.length</code> цикл остановится и браузер перейдёт к следующему фрагменту кода после цикла.</li>\n</ol>\n\n<div class=\"note notecard\" id=\"sect6\">\n<p><strong>Примечание</strong>: Мы добавили условия выхода <code>i &lt; cats.length</code>, а не <code>i &lt;= cats.length</code>, потому что компьютеры считают с  0,  а не с 1 — в начале <code>i = 0</code> и увеличивается до <code>i = 4</code> (индекс последнего элемента массива). <code>cats.length</code> возвращает 5, т.к. в массиве 5 элементов, но нам не нужно увеличивать до <code>i = 5</code>, т.к. <code>cats[5] </code>вернёт <code>undefined</code> (в массиве нет элемента с индексом 5). Таким образом мы хотим придти к результату на 1 меньше, поэтому <code>i &lt; cats.length</code>, не одно и тоже что <code>i &lt;= cats.length</code>.</p>\n</div>\n\n<div class=\"note notecard\" id=\"sect7\">\n<p><strong>Примечание</strong>: Стандартной ошибкой с условием выхода является использование условия \"равный\" (<code>===</code>) ,а не \"меньше или равно\" (<code>&lt;=</code>). Если нам нужно увеличить счётчик до <code>i = 5</code>, условие выхода должно быть <code>i &lt;= cats.length</code>. Если мы установим <code>i === cats.length</code>, цикл не начнётся, т.к. <code>i</code> не равно <code>5</code> на самой первой итерации, поэтому цикл остановится сразу.</p>\n</div>\n\n<p>Остаётся одна небольшая проблема: выходная строка сформирована не совсем корректно:</p>\n\n<blockquote>\n<p>Моих кошек зовут  Билл, Макс, Пикси, Алиса, Жасмин,</p>\n</blockquote>\n\n<p>В идеале мы хотим изменить конкатенацию на последней итерации цикла так, чтобы у нас не было запятой в конце предложения. Для этого нужно добавить условное выражение внутрь цикла <code>for</code> для обработки этого особого случая:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> cats<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">===</span> cats<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    info <span class=\"token operator\">+=</span> <span class=\"token string\">'и '</span> <span class=\"token operator\">+</span> cats<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    info <span class=\"token operator\">+=</span> cats<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">', '</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<div class=\"note notecard\" id=\"sect8\">\n<p><strong>Примечание</strong>: вы можете найти этот <a href=\"https://github.com/mdn/learning-area/blob/master/javascript/building-blocks/loops/basic-for-improved.html\" class=\"external\" rel=\" noopener\">пример на GitHub</a> или <a href=\"https://mdn.github.io/learning-area/javascript/building-blocks/loops/basic-for-improved.html\" class=\"external\" rel=\" noopener\">посмотреть онлайн</a>.</p>\n</div>\n\n<div class=\"warning notecard\" id=\"sect9\">\n<p><strong>Важно</strong>: С циклом <strong>for</strong>, также как и с другими циклами, вы должны убедиться что инициализатор (счётчик) и окончательное выражение построены так, что они достигнут условия выхода. Если этого не произойдёт, то цикл будет продолжаться вечно. В итоге браузер или заставит его остановиться, или выдаст ошибку. Это называется <strong>бесконечным циклом</strong>.</p>\n</div>"}},{"type":"prose","value":{"id":"выход_из_цикла_с_помощью_break","title":"Выход из цикла с помощью break","isH3":false,"content":"<p>Если вы хотите выйти из цикла до завершения всех итераций, вы можете использовать оператор <a href=\"/ru/docs/Web/JavaScript/Reference/Statements/break\">break</a> . Мы уже встречались с ним в предыдущей статье, когда рассматривали оператор <a href=\"/ru/docs/Learn/JavaScript/Building_blocks/conditionals#оператор_switch\">switch</a>: когда происходит событие, соответствующее условию, прописанному ключевым словом <code>case</code> внутри оператора <code>switch</code>, условие break моментально выходит из конструкции <code>switch</code> и запускает следующий после неё код.</p>\n\n<p>Тоже самое и с циклами — условие <code>break</code> моментально закончит цикл и заставит браузер запустить следующий после цикла код.</p>\n\n<p>Предположим, в массиве данных мы хотим найти имена контактов и телефонные номера, а вернуть только номер, который мы нашли.<br>\n Начнём с разметки HTML: поле <a href=\"/ru/docs/Web/HTML/Element/Input\"><code>&lt;input&gt;</code></a> позволяет нам ввести имя для поиска, элемент (кнопка) <a href=\"/ru/docs/Web/HTML/Element/button\"><code>&lt;button&gt;</code></a> для подтверждения поиска, и элемент <a href=\"/ru/docs/Web/HTML/Element/p\"><code>&lt;p&gt;</code></a> для отображения результата:</p>\n\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>search<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Поиск по имени: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>search<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">&gt;</span></span>Поиск<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n\n<p>Теперь в JavaScript:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> contacts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Григорий:2232322'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Марина:3453456'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Василий:7654322'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Наталья:9998769'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Диана:9384975'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> para <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> input <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbtn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> searchName <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  input<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  input<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> contacts<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> splitContact <span class=\"token operator\">=</span> contacts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">':'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>splitContact<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> searchName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      para<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> splitContact<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">', тел.: '</span> <span class=\"token operator\">+</span> splitContact<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      para<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'Контакт не найден.'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n\n\n<p><iframe class=\"sample-code-frame\" title=\"Hidden code 3 sample\" id=\"frame_hidden_code_3\" width=\"100%\" height=\"100\" src=\"https://yari-demos.prod.mdn.mozit.cloud/ru/docs/Learn/JavaScript/Building_blocks/Looping_code/_sample_.hidden_code_3.html\" loading=\"lazy\"></iframe></p>\n\n<ol>\n <li>Прежде всего у нас определены некоторые переменные: у нас есть массив с контактной информацией, каждый элемент которого это строка, содержащая в себе имя и номер телефона, которые разделены двоеточием.</li>\n <li>Далее мы применяем обработчик события кнопки (<code>btn</code>), чтобы при её нажатии запускался код для поиска и отображения результатов.</li>\n <li>Мы сохраняем значение, введённое в текстовое поле, в переменную  <code>searchName</code>, затем очищаем введённый текст и снова фокусируемся на текстовом поле для нового поиска.</li>\n <li>Теперь перейдём к интересующей нас части — к циклу <code>for</code>:\n  <ol>\n   <li>Мы начали счётчик с <code>0</code>, запускаем цикл до тех пор, пока счётчик всё ещё меньше, чем contacts.length, а инкремент <code>i</code> увеличиваем на 1 после каждой итерации цикла.</li>\n   <li>Внутри цикла мы сначала разделяем текущий контакт (<code>contacts[i]</code>) на символе двоеточия, и сохраняем полученные два значения в массиве с  названием <code>splitContact</code>.</li>\n   <li>Затем мы используем условный оператор, чтобы проверить, равно ли <code>splitContact[0]</code> (имя контакта) введённому <code>searchName</code>. Если это так, мы выводим строку в абзац, чтобы сообщить, каков номер контакта, и используем <code>break</code> для завершения цикла.</li>\n  </ol>\n </li>\n <li>\n  <p>После <a href=\"https://ru.wikipedia.org/wiki/%D0%98%D1%82%D0%B5%D1%80%D0%B0%D1%86%D0%B8%D1%8F_(%D0%B7%D0%BD%D0%B0%D1%87%D0%B5%D0%BD%D0%B8%D1%8F)\" class=\"external\" rel=\" noopener\">итерации</a> <code>(contacts.length-1)</code>, если имя контакта не совпадает с введённым именем в поисковом запросе, для текста абзаца устанавливается: «Контакт не найден.», и цикл продолжает повторяться.</p>\n </li>\n</ol>\n\n<div class=\"note notecard\" id=\"sect11\">\n<p>Примечание: вы можете посмотреть исходный код на <a href=\"https://github.com/mdn/learning-area/blob/master/javascript/building-blocks/loops/contact-search.html\" class=\"external\" rel=\" noopener\">GitHub</a>  или запустить его (also <a href=\"https://mdn.github.io/learning-area/javascript/building-blocks/loops/contact-search.html\" class=\"external\" rel=\" noopener\">see it running live</a>).</p>\n</div>"}},{"type":"prose","value":{"id":"пропуск_итераций_с_продолжением","title":"Пропуск итераций с продолжением","isH3":false,"content":"<p>Оператор <a href=\"/ru/docs/Web/JavaScript/Reference/Statements/continue\">continue</a> работает аналогичным образом, как и <code>break</code>, но вместо полного выхода из цикла он переходит к следующей итерации цикла.</p>\n\n<p>Рассмотрим другой пример, в котором в качестве вводных данных принимается число, а возвращаются только числа, которые являются квадратами целых чисел.</p>\n\n<p>Код HTML в основном такой же, как и в предыдущем примере — простой ввод текста и абзац для вывода.  JavaScript в основном такой же, хотя сам цикл немного другой:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> sqRoot <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>sqRoot<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> sqRoot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  para<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">+=</span> i <span class=\"token operator\">+</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<p>Вывод:</p>\n\n\n\n<p><iframe class=\"sample-code-frame\" title=\"Hidden code 4 sample\" id=\"frame_hidden_code_4\" width=\"100%\" height=\"100\" src=\"https://yari-demos.prod.mdn.mozit.cloud/ru/docs/Learn/JavaScript/Building_blocks/Looping_code/_sample_.hidden_code_4.html\" loading=\"lazy\"></iframe></p>\n\n<ol>\n <li>В этом случае на входе должно быть число (<code>num</code>). Циклу <code>for</code> присваивается счётчик, начинающийся с 1 (поскольку в данном случае нас не интересует 0), условие выхода, которое говорит, что цикл остановится, когда счётчик станет больше входного <code>num</code>, а итератор добавляет 1 к счётчику каждый раз.</li>\n <li>Внутри цикла мы находим квадратный корень каждого числа с помощью <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt\">Math.sqrt(i)</a>, а затем проверяем, является ли квадратный корень целым числом, проверяя, совпадает ли он с самим собой, когда он был округлён до ближайшего целого числа (это то, что <code>Math.floor ()</code> делает с числом, которое передаёт).</li>\n <li>Если квадратный корень и округлённый вниз квадратный корень не равны друг другу <code>(! ==)</code>, значит квадратный корень не является целым числом, поэтому нас он не интересует.  В таком случае мы используем оператор <code>continue</code>, чтобы перейти к следующей итерации цикла без записи этого числа.</li>\n <li>Если квадратный корень <em>является целым числом</em>, мы пропускаем блок <code>if</code> полностью, поэтому оператор <code>continue</code> не выполняется; вместо этого объединяется текущее значение <code>i</code> с пробелом в конце содержимого абзаца.</li>\n</ol>\n\n<div class=\"note notecard\" id=\"sect13\">\n<p><strong>Примечание. </strong>Вы также можете просмотреть полный исходный код на<strong> </strong><a href=\"https://github.com/mdn/learning-area/blob/master/javascript/building-blocks/loops/integer-squares.html\" class=\"external\" rel=\" noopener\"> GitHub</a> (так же смотри <a href=\"https://mdn.github.io/learning-area/javascript/building-blocks/loops/integer-squares.html\" class=\"external\" rel=\" noopener\">этот код вживую</a>).</p>\n</div>"}},{"type":"prose","value":{"id":"циклы_while_и_do...while","title":"Циклы <code>while</code> и <code>do...while</code>","isH3":false,"content":"<p><code><strong>for</strong> </code>— <code>не единственный тип цикла, доступный в JavaScript.</code> На самом деле существует множество других типов циклов. И хотя сейчас не обязательно знать их все, стоит взглянуть на структуру нескольких других, чтобы вы могли распознать те же функции, но в работе немного по-другому.</p>\n\n<p>Рассмотрим цикл <a href=\"/ru/docs/Web/JavaScript/Reference/Statements/while\">while</a>. Синтаксис этого цикла выглядит так:</p>\n\n<pre class=\"notranslate\">initializer\nwhile (exit-condition) {\n  // code to run\n\n  final-expression\n}</pre>\n\n<p>Его действие очень похоже на цикл <code>for</code>, но переменная инициализатора устанавливается перед циклом, а заключительное выражение включается в цикл после запуска кода. Напомним, у цикла <code>for</code> эти два элемента заключены в круглых скобках. Здесь же после ключевого слова <code>while в круглых скобках заключено условие выхода из цикла.</code></p>\n\n<p>Здесь присутствуют те же три элемента и в том же порядке, что и в цикле <code>for</code>. Это важно, так как вам нужно определить инициализатор, прежде чем получится проверить, достиг ли цикл условия выхода.</p>\n\n<p>Окончательное условие выполняется после выполнения кода внутри цикла (итерация завершена), и оно выполняется только в том случае, если условие выхода ещё не достигнуто.</p>\n\n<p>Посмотрим ещё раз пример со списком кошек с кодом переписанным под использование цикла <code>while:</code></p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> cats<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">===</span> cats<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    info <span class=\"token operator\">+=</span> <span class=\"token string\">'and '</span> <span class=\"token operator\">+</span> cats<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    info <span class=\"token operator\">+=</span> cats<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">', '</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<div class=\"note notecard\" id=\"sect14\">\n<p><strong>Примечание: </strong>цикл все ещё работает так же, как и ожидалось - посмотрите, <a href=\"https://mdn.github.io/learning-area/javascript/building-blocks/loops/while.html\" class=\"external\" rel=\" noopener\">как он работает на GitHub</a> (также посмотрите <a href=\"https://github.com/ConstantineZz/javaScript/blob/master/while.html\" class=\"external\" rel=\" noopener\">полный исходный код</a>).</p>\n</div>\n\n<p>Цикл<strong> <a href=\"/ru/docs/Web/JavaScript/Reference/Statements/do...while\">do...while</a></strong> представляет собой вариацию структуры цикла <code>while</code>:</p>\n\n<pre class=\"notranslate\">initializer\ndo {\n  // code to run\n\n  final-expression\n} while (exit-condition)</pre>\n\n<p>В этом случае инициализатор снова указывается прежде, чем цикл запускается. Ключевое слово <code>do</code> непосредственно предшествует фигурным скобкам, содержащим код для запуска и конечное выражение.</p>\n\n<p>Различие состоит в том, что условие выхода идёт после всего остального, заключённое в скобки после ключевого слова <code>while</code>. В цикле <code>do...while</code> код внутри фигурных скобок всегда запускается один раз, прежде чем выполняется проверка, чтобы увидеть, должна ли она быть выполнена снова (в <code>while</code> и <code>for</code> проверка идёт первой, поэтому код может быть не выполнен).</p>\n\n<p>Перепишем наш пример с кошками, чтобы использовать цикл <code>do...while</code>:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">===</span> cats<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    info <span class=\"token operator\">+=</span> <span class=\"token string\">'and '</span> <span class=\"token operator\">+</span> cats<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    info <span class=\"token operator\">+=</span> cats<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">', '</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> cats<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<div class=\"note notecard\" id=\"sect15\">\n<p><strong>Примечание: </strong>И снова это работает так же, как и ожидалось - посмотрите, как он работает <a href=\"https://mdn.github.io/learning-area/javascript/building-blocks/loops/do-while.html\" class=\"external\" rel=\" noopener\">на GitHub</a> (также посмотрите полный <a href=\"https://github.com/ConstantineZz/javaScript/blob/master/do-while.html\" class=\"external\" rel=\" noopener\">исходный код</a>).</p>\n</div>\n\n<div class=\"warning notecard\" id=\"sect16\">\n<p><strong>Замечание</strong>: Применяя циклы <code>while</code> and <code>do...while</code> , как и все циклы, убедитесь, что инициализатор повторяется так, чтобы он в конце концов достиг условия выхода. Если это не так, цикл будет продолжаться вечно, и либо браузер заставит его остановиться, либо произойдёт сбой. Это называется <em><s>доктор Стрэндж и Дормамму</s></em> <strong>бесконечным циклом</strong>. </p>\n</div>","titleAsText":"Циклы while и do...while"}},{"type":"prose","value":{"id":"практическое_упражнение_запускаем_обратный_отсчёт!","title":"Практическое упражнение:  запускаем обратный отсчёт!","isH3":false,"content":"<p>В этом упражнении мы хотим, чтобы вы написали простой отсчёт времени запуска до поля вывода, от 10 до \"Пуск!\"  В частности, мы хотим, чтобы вы:</p>\n\n<ul>\n <li>Цикл от 10 до 0. Мы предоставляем вам инициализатор: <code>var i = 10;</code>.</li>\n <li>Для каждой итерации создайте новый абзац и добавьте его к выходному элементу <code>&lt;div&gt;</code>, который мы выбрали, используя <code>var output = document.querySelector ('.output');</code>. В комментариях мы предоставили вам три строки кода, которые необходимо использовать где-то внутри цикла:\n  <ul>\n   <li><code>var para = document.createElement('p');</code> — создать новый абзац.</li>\n   <li><code>output.appendChild(para);</code> — добавляет абзац к выводу <code>&lt;div&gt;</code>.</li>\n   <li><code>para.textContent =</code> — делает текст внутри абзаца равным значению, которое вы расположили справа, после знака равенства.</li>\n  </ul>\n </li>\n <li>Разные номера итераций требуют, чтобы в абзаце для каждой итерации помещался свой текст (вам понадобится условный оператор и несколько<code> para.textContent = lines</code><br>\n  ):\n  <ul>\n   <li>Если число равно 10, выведите в абзаце «Обратный отсчёт 10».</li>\n   <li>Если число равно 0, выведите в абзаце «Пуск!»</li>\n   <li>Для любого другого числа выведите в абзаце только число.</li>\n  </ul>\n </li>\n <li>Не забудьте включить итератор! Однако в этом примере мы ведём обратный отсчёт после каждой итерации, а не вверх, поэтому вам <strong>не</strong> нужен <code>i ++</code>. Как выполнить итерацию вниз?</li>\n</ul>\n\n<p>Если вы допустили ошибку, вы всегда можете сбросить пример с помощью кнопки «Сброс» (Reset). Если у вас совсем ничего не получается, нажмите «Show solution», чтобы увидеть решение.</p>\n\n\n\n<p><iframe class=\"hide-codepen-jsfiddle\" title=\"Active learning sample\" id=\"frame_active_learning\" width=\"100%\" height=\"880\" src=\"https://yari-demos.prod.mdn.mozit.cloud/ru/docs/Learn/JavaScript/Building_blocks/Looping_code/_sample_.active_learning.html\" loading=\"lazy\"></iframe></p>"}},{"type":"prose","value":{"id":"практическое_упражнение_заполнение_списка_гостей","title":"Практическое упражнение:   Заполнение списка гостей","isH3":false,"content":"<p>Возьмите список имён, хранящихся в массиве, и поместите их в список гостей. Тут не всё так просто: мы не хотим приглашать Фила и Лолу, потому что они наглые и всё сожрут! У нас есть два списка. Один для тех, кого мы хотим пригласить, второй для тех, кого приглашать не нужно.</p>\n\n<p>Для этого нужно сделать следующее:</p>\n\n<ul>\n <li>Напишите цикл, который будет повторяться от 0 до длины массива <code>people</code>.<br>\n  Вам нужно начать с инициализатора <code>var i = 0;</code> , но какое нужно использовать условие выхода?</li>\n <li>Во время каждой итерации цикла нужно проверять, соответствует ли текущий элемент массива именам \"Фил\" или \"Лола\", используя условный оператор:\n  <ul>\n   <li>Если это так, привяжите этот элемент массива в конец <code>textContent</code> абзаца <code>refused</code>, за которым следуют запятая и пробел. </li>\n   <li>Если это не так, привяжите этот элемент массива в конец <code>textContent</code> абзаца <code>admitted</code>, за которым следуют запятая и пробел.</li>\n  </ul>\n </li>\n</ul>\n\n<p>Мы уже предоставили вам:</p>\n\n<ul>\n <li><code>var i = 0;</code> — ваш инициализатор.</li>\n <li><code>refused.textContent +=</code> — начало строки, которая объединит что-то до конца <code>refused.textContent</code>.</li>\n <li><code>admitted.textContent +=</code> — начало строки, которая объединит что-то до конца <code>admitted.textContent</code>.</li>\n</ul>\n\n<p>Дополнительный бонусный вопрос - после успешного выполнения вышеупомянутых задач у вас останется два списка имён, разделённых запятыми, но они будут составлены некорректно: в конце каждого списка будет запятая. Сможете ли вы составить эти списки так, чтобы в конце каждой строки вместо запятой была точка. За помощью можно обратиться к статье «<a href=\"/ru/docs/Learn/JavaScript/First_steps/Useful_string_methods\">Полезные строковые методы</a>».</p>\n\n<p>Если вы допустили ошибку, вы всегда можете сбросить пример с помощью кнопки «Сброс» (Reset). Если у вас совсем ничего не получается, нажмите «Показать решение», чтобы увидеть решение.</p>\n\n\n\n<p><iframe class=\"sample-code-frame\" title=\"Active learning 2 sample\" id=\"frame_active_learning_2\" width=\"100%\" height=\"680\" src=\"https://yari-demos.prod.mdn.mozit.cloud/ru/docs/Learn/JavaScript/Building_blocks/Looping_code/_sample_.active_learning_2.html\" loading=\"lazy\"></iframe></p>"}},{"type":"prose","value":{"id":"так_какой_тип_цикла_использовать","title":"Так какой тип цикла использовать?","isH3":false,"content":"<p>В основном, используют <code>for</code>, <code>while</code> и <code>do...while</code> циклы, и они во многом взаимозаменяемы. Все они могут быть использованы для выполнения одних и тех же задач и какой из них вы будете использовать, во многом зависит от ваших личных предпочтений. Используйте тот, который вам проще всего запомнить или наиболее интуитивно понятен. Давайте вспомним каждый из них.</p>\n\n<p><strong><code>For</code></strong>:</p>\n\n<pre class=\"notranslate\">for (initializer; exit-condition; final-expression) {\n  // code to run\n}</pre>\n\n<p><strong><code>while</code></strong>:</p>\n\n<pre class=\"notranslate\">initializer\nwhile (exit-condition) {\n  // code to run\n\n  final-expression\n}</pre>\n\n<p><strong><code>do...while</code></strong>:</p>\n\n<pre class=\"notranslate\">initializer\ndo {\n  // code to run\n\n  final-expression\n} while (exit-condition)</pre>\n\n<p>Для начала мы бы порекомендовали <code>for</code>, так как его проще запомнить: инициализатор, условие выхода и конечное выражение аккуратно заключено в скобки, поэтому их легко отследить, чтобы их не пропускать.</p>\n\n<div class=\"note notecard\" id=\"sect19\">\n<p><strong>Примечание. </strong>Существуют и другие типы и функции цикла, которые полезны в сложных или специализированных ситуациях и выходят за рамки данной статьи. Если вы хотите подробнее изучить тему циклов, прочитайте наше расширенное<a href=\"/ru/docs/Web/JavaScript/Guide/Loops_and_iteration\"> руководство по циклам и итерациям.</a> </p>\n</div>"}},{"type":"prose","value":{"id":"заключение","title":"Заключение","isH3":false,"content":"<p>Эта статья раскрывает основные концепции и различные опции, доступные при циклическом кодировании в JavaScript. Теперь вам должно быть понятно, почему циклы являются хорошим механизмом для работы с повторяющимся кодом. Старайтесь использовать их в своих собственных примерах!</p>\n\n<p>Если вы чего-то не поняли, пробуйте читать статью снова или <a href=\"/ru/docs/Learn#связаться_с_нами\">свяжитесь с нами</a>, мы поможем разобраться.</p>"}},{"type":"prose","value":{"id":"дополнительная_информация","title":"Дополнительная информация","isH3":false,"content":"<ul>\n <li><a href=\"/ru/docs/Web/JavaScript/Guide/Loops_and_iteration\">Циклы и итерации</a></li>\n <li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/for\">for свойства и характеристики</a></li>\n <li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/while\">while</a> и <a href=\"/ru/docs/Web/JavaScript/Reference/Statements/do...while\">do...while</a> описание</li>\n <li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/break\">break</a> и <a href=\"/ru/docs/Web/JavaScript/Reference/Statements/continue\">continue</a> описание</li>\n <li><a href=\"https://www.impressivewebs.com/javascript-for-loop/\" class=\"external\" rel=\" noopener\">What’s the Best Way to Write a JavaScript For Loop?</a> — статья о практическом применении циклов</li>\n</ul>\n\n<p></p><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ru/docs/Learn/JavaScript/Building_blocks/conditionals\"> Назад </a></li>\n    <li><a class=\"button minimal\" href=\"/ru/docs/Learn/JavaScript/Building_blocks\"> Обзор: Building blocks</a></li>\n    <li><a class=\"button minimal\" href=\"/ru/docs/Learn/JavaScript/Building_blocks/Functions\"> Далее  </a></li>\n</ul><p></p>"}},{"type":"prose","value":{"id":"в_этом_модуле","title":"В этом модуле","isH3":false,"content":"<ul>\n <li><a href=\"/ru/docs/Learn/JavaScript/Building_blocks/conditionals\">Принятие решений в вашем коде — условные конструкции</a></li>\n <li><a href=\"/ru/docs/Learn/JavaScript/Building_blocks/Looping_code\" aria-current=\"page\">Зацикливание кода</a></li>\n <li><a href=\"/ru/docs/Learn/JavaScript/Building_blocks/Functions\">Функции — Переиспользуемые блоки кода</a></li>\n <li><a href=\"/ru/docs/Learn/JavaScript/Building_blocks/Build_your_own_function\">Создайте свою собственную функцию</a></li>\n <li><a href=\"/ru/docs/Learn/JavaScript/Building_blocks/Return_values\">Возвращаемое значение функции</a></li>\n <li><a href=\"/ru/docs/Learn/JavaScript/Building_blocks/Events\">Введение в события</a></li>\n <li><a href=\"/ru/docs/Learn/JavaScript/Building_blocks/Image_gallery\">Создание галереи</a></li>\n</ul>"}}],"toc":[{"text":"Циклы в коде","id":"циклы_в_коде"},{"text":"Правила записи цикла","id":"правила_записи_цикла"},{"text":"Выход из цикла с помощью break","id":"выход_из_цикла_с_помощью_break"},{"text":"Пропуск итераций с продолжением","id":"пропуск_итераций_с_продолжением"},{"text":"Циклы <code>while</code> и <code>do...while</code>","id":"циклы_while_и_do...while"},{"text":"Практическое упражнение:  запускаем обратный отсчёт!","id":"практическое_упражнение_запускаем_обратный_отсчёт!"},{"text":"Практическое упражнение:   Заполнение списка гостей","id":"практическое_упражнение_заполнение_списка_гостей"},{"text":"Так какой тип цикла использовать?","id":"так_какой_тип_цикла_использовать"},{"text":"Заключение","id":"заключение"},{"text":"Дополнительная информация","id":"дополнительная_информация"},{"text":"В этом модуле","id":"в_этом_модуле"}],"summary":"Языки программирования очень полезны для быстрой реализации повторяющихся задач. От базовых числовых операций до любой другой ситуации, когда у вас есть много похожих операций, которые нужно выполнить. В этой статье мы рассмотрим структуры циклов, доступные в JavaScript, которые можно использовать для этих целей.","popularity":0.0011,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Looping code","locale":"en-US","native":"English (US)"},{"title":"Bucles","locale":"es","native":"Español"},{"title":"Les boucles dans le code","locale":"fr","native":"Français"},{"title":"ループコード","locale":"ja","native":"日本語"},{"title":"반복문","locale":"ko","native":"한국어"},{"title":"Código em loop","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"循环吧代码","locale":"zh-CN","native":"中文 (简体)"},{"title":"循環代碼","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ru/learn/javascript/building_blocks/looping_code","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/learn/javascript/building_blocks/looping_code/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Learn","title":"Изучение веб-разработки"},{"uri":"/ru/docs/Learn/JavaScript","title":"JavaScript"},{"uri":"/ru/docs/Learn/JavaScript/Building_blocks","title":"Структурные элементы JavaScript"},{"uri":"/ru/docs/Learn/JavaScript/Building_blocks/Looping_code","title":"Зацикливание кода"}],"pageTitle":"Зацикливание кода - Изучение веб-разработки | MDN","noIndexing":false}}