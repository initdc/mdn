{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Руководство по Django часть 2: создание скелета","mdn_url":"/ru/docs/Learn/Server-side/Django/skeleton_website","locale":"ru","native":"Русский","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div id=\"sect1\"><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ru/docs/Learn/Server-side/Django/Tutorial_local_library_website\"> Назад </a></li>\n    <li><a class=\"button minimal\" href=\"/ru/docs/Learn/Server-side/Django\"> Обзор: Django</a></li>\n    <li><a class=\"button minimal\" href=\"/ru/docs/Learn/Server-side/Django/Models\"> Далее  </a></li>\n</ul></div>\n\n<p class=\"summary\">Это вторая статья из нашего <a href=\"/ru/docs/Learn/Server-side/Django/Tutorial_local_library_website\">руководства по Django</a>, которая показывает, как можно создать \"скелет\" сайта, как фундамент, на котором можно строить всё остальное: настройки, ссылки, модели, контроллеры и представления.</p>\n\n<table>\n <tbody>\n  <tr>\n   <th scope=\"row\">Необходимо:</th>\n   <td>\n    <p><a href=\"/ru/docs/Learn/Server-side/Django/development_environment\">Настройка окружения</a>. Прочитать первую статью <a href=\"/ru/docs/Learn/Server-side/Django/Tutorial_local_library_website\">руководства по Django</a>.</p>\n   </td>\n  </tr>\n  <tr>\n   <th scope=\"row\">Цель:</th>\n   <td>Научиться использовать инструменты Django для создания новых веб-сайтов.</td>\n  </tr>\n </tbody>\n</table>"}},{"type":"prose","value":{"id":"обзор","title":"Обзор","isH3":false,"content":"<p>Эта статья показывает, как можно создать \"скелет\"(прототип) сайта, который затем можно расширить при помощи различных настроек, url адресов, моделей, представлений, и шаблонов (эти темы будут объясняться в последующих статьях).</p>\n\n<p>Алгоритм следующий:</p>\n\n<ol>\n <li>Использовать <code style=\"font-style: normal; font-weight: normal; line-height: 1.5;\">django-admin</code> для создания папки проекта, шаблонов остальных файлов, и скрипта для управления проектом (<strong style=\"line-height: 1.5;\">manage.py</strong>).</li>\n <li>Использовать <strong style=\"line-height: 1.5;\">manage.py</strong><em> </em>для создания одного или нескольких <em>приложений</em>.\n  <div class=\"note notecard\" id=\"sect2\">\n  <p><strong>Примечание: </strong>Сайт может состоять из одной или нескольких различных частей, например: основная часть, блог, вики, раздел загрузок, и так далее. Философия Django подталкивает разработчиков создавать эти части, как разные <strong>приложения</strong>, которые, если понадобится, могут быть использованы повторно в других проектах. </p>\n  </div>\n </li>\n <li>Зарегистрировать в настройках эти приложения, чтобы использовать их в проекте. </li>\n <li>Настроить маршруты url адресов для каждого из приложений.</li>\n</ol>\n\n<p>Для <a href=\"/ru/docs/Learn/Server-side/Django/Tutorial_local_library_website\">Сайта местной библиотеки</a> папка сайта и проекта будет называться <em>locallibrary</em>, и у нас будет одно приложение с названием <em>catalog</em>. Верхняя структура проекта будет следующей:</p>\n\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>locallibrary/         <span class=\"token comment\"># Папка сайта</span>\n    manage.py         <span class=\"token comment\"># Скрипт для управления проектов (создан manage.py)</span>\n    locallibrary/     <span class=\"token comment\"># Папка сайта/проекта (создана manage.py)</span>\n    catalog/          <span class=\"token comment\"># Папка приложения (также создана manage.py)</span>\n</code></pre></div>\n\n<p>Следующие разделы статьи разложат по полочкам этапы создания \"скелета\", и покажут вам, как можно проверить сделанные изменения. В конце статьи мы обсудим некоторые другие настройки сайта, которые можно назначить на этом этапе.</p>"}},{"type":"prose","value":{"id":"создание_проекта","title":"Создание проекта","isH3":false,"content":"<p>Для начала откройте командную строку/терминал, перейдите в ту папку, куда вы хотите поместить проект Django(лучше в папке профиля пользователя C:\\Users\\user_name, при запуске командной строки используется именно эта директория), и создайте папку для вашего нового сайта (в данном случае: <em>locallibrary</em>). Затем войдите в эту папку, используя команду cd:</p>\n\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">mkdir</span> locallibrary\n<span class=\"token builtin class-name\">cd</span> locallibrary</code></pre></div>\n\n<p>Создайте новую папку, используя команду <code>django-admin startproject</code> как в примере ниже, и затем зайдите в созданную папку.</p>\n\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>  django-admin startproject locallibrary <span class=\"token builtin class-name\">.</span>\n<span class=\"token builtin class-name\">cd</span> locallibrary</code></pre></div>\n\n<p>Команда <code>django-admin</code> создаст файловую структуру, как в примере ниже:</p>\n\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>locallibrary/\n    manage.py\n    locallibrary/\n        settings.py\n        urls.py\n        wsgi.py</code></pre></div>\n\n<p>Подпапка проекта <em>locallibrary</em> это ключевая директория нашего проекта: </p>\n\n<ul>\n <li><strong>settings.py</strong> содержит в себе все настройки проекта. Здесь мы регистрируем приложения, задаём размещение <em>статичных</em> файлов, настройки базы данных и так далее.  </li>\n <li><strong>urls.py</strong> задаёт ассоциации url адресов с представлениями. Несмотря на то, что этот файл может содержать <em>все</em> настройки url, обычно его делят на части, по одной на приложение, как будет показано далее. </li>\n <li><strong style=\"line-height: 1.5;\">wsgi.py</strong> используется для налаживания связи между вашим Django приложением и веб-сервером. Вы можете воспринимать его, как утилиту.</li>\n</ul>\n\n<p>Скрипт <strong>manage.py</strong> используется для создания приложений, работы с базами данных и для запуска отладочного сервера. </p>"}},{"type":"prose","value":{"id":"создание_приложения_каталог","title":"Создание приложения Каталог","isH3":false,"content":"<p>Выполнив предыдущие шаги, запустите следующую команду для создания приложения <em>catalog</em>, который будет размещён внутри папки locallibrary (команду необходимо выполнять из папки, в которой находится <strong>manage.py</strong>):</p>\n\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>python3 manage.py startapp catalog</code></pre></div>\n\n<div class=\"note notecard\" id=\"sect3\">\n<p><strong>Примечание</strong>: приведённая выше команда справедлива для GNU Linux/Mac OS. На Windows команда должна иметь вид: <code>py -3 manage.py startapp catalog</code></p>\n\n<p>Если вы работаете под Windows, заменяйте команду <code>python3</code> на <code>py -3</code> в этой и следующих статьях.</p>\n</div>\n\n<p>Эта команда создаст новую папку и наполнит её файлами различных частей приложения (выделенные <strong>полужирным </strong>ниже). Большинство файлов названы, исходя из их назначения (например контроллеры(views) должны находится во <strong>views.py</strong>, модели в <strong>models.py</strong>, тесты в <strong>tests.py</strong>, настройки административной части в <strong>admin.py</strong>, регистрация приложения в <strong>apps.py</strong>) и уже содержат некоторый шаблонный код для работы с вышеназванными объектами.</p>\n\n<p>Обновлённая директория должна выглядеть следующим образом:</p>\n\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>locallibrary/\n    manage.py\n    locallibrary/\n    catalog/\n        admin.py\n        apps.py\n        models.py\n        tests.py\n        views.py\n        __init__.py\n        migrations/\n</code></pre></div>\n\n<p>Кроме перечисленных выше файлов были созданы:</p>\n\n<ul>\n <li>Папка <em>migrations</em> используется, чтобы хранить\"миграции\" — файлы, которые позволяют вам автоматически обновлять базу данных по мере изменения моделей. </li>\n <li><strong>__init__.py</strong> — пустой файл для того, чтобы Django и Python распознавали папку как <a href=\"https://docs.python.org/3/tutorial/modules.html#packages\" class=\"external\" rel=\" noopener\">Python модуль </a>и позволяет нам использовать его объекты внутри других частей проекта.</li>\n</ul>\n\n<div class=\"note notecard\" id=\"sect4\">\n<p><strong>Примечание</strong>: Заметили, что некоторых файлов не хватает? В то время, как там нашли себе место файлы для контроллеров(views) и моделей(models), файлов для настройки url соотносителя, шаблонов, и статичных файлов создано не было. Далее мы покажем, как их создать (они не обязательны для каждого сайта, но нужны в данном примере).</p>\n</div>"}},{"type":"prose","value":{"id":"регистрация_папки_с_приложением","title":"Регистрация папки с приложением","isH3":false,"content":"<p>После создания приложения, нам нужно зарегистрировать его в проекте, чтобы различные утилиты затрагивали его своим действием (например при добавлении моделей в базу данных). Приложения регистрируются добавлением их названий в список <code>INSTALLED_APPS</code> в настройках проекта(который, как мы помним, называется <strong>settings.py</strong>). </p>\n\n<p>Откройте файл <strong>locallibrary/locallibrary/settings.py</strong> и найдите в нём список <code>INSTALLED_APPS</code> . Затем добавьте новую строку в конец списка, как показано <strong>полужирным </strong>ниже.</p>\n\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>INSTALLED_APPS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'django.contrib.admin'</span>,\n    <span class=\"token string\">'django.contrib.auth'</span>,\n    <span class=\"token string\">'django.contrib.contenttypes'</span>,\n    <span class=\"token string\">'django.contrib.sessions'</span>,\n    <span class=\"token string\">'django.contrib.messages'</span>,\n    <span class=\"token string\">'django.contrib.staticfiles'</span>,\n    <span class=\"token string\">'catalog.apps.CatalogConfig'</span>, \n<span class=\"token punctuation\">]</span></code></pre></div>\n\n<p>Новая строка указывает на файл конфигурации приложения (<code>CatalogConfig</code>), который был создан в <strong>/locallibrary/catalog/apps.py</strong> , когда вы создали приложение.</p>\n\n<div class=\"note notecard\" id=\"sect5\">\n<p><strong>Примечание</strong>: Легко заметить, что в <code>INSTALLED_APPS</code> уже подключено большое количество приложений (и объектов <code>MIDDLEWARE</code>, ниже в файле конфигурации). Они добавляют поддержку <a href=\"/ru/docs/Learn/Server-side/Django/Admin_site\">админ-панели Django</a> и, как следствие, огромное количество функциональности (включая сессии, аутентификацию и прочее).</p>\n</div>"}},{"type":"prose","value":{"id":"настройка_базы_данных","title":"Настройка базы данных","isH3":false,"content":"<p>На этом шаге обычно указывают базу данных для будущего проекта — имеет смысл использовать для разработки и размещённого в Сети одну и ту же базу данных, по возможности, чтобы исключить различия в поведении.  Про различные варианты вы можете прочитать в документации Django в разделе <a href=\"https://docs.djangoproject.com/en/1.10/ref/settings/#databases\" class=\"external\" rel=\" noopener\">Базы данных</a>. </p>\n\n<p>Мы будем использовать базу данных SQLite для этого проекта, потому что не предполагаем большое количество одновременных запросов на неё, а ещё потому, что для её настройки совсем не надо ничего делать! Вы можете видеть, что база данных уже настроена в <strong>settings.py</strong> (подробная информация указана ниже):</p>\n\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code>DATABASES <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'default'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'ENGINE'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'django.db.backends.sqlite3'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'NAME'</span><span class=\"token punctuation\">:</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>BASE_DIR<span class=\"token punctuation\">,</span> <span class=\"token string\">'db.sqlite3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n\n<p>Так как мы используем SQLite, то нам не нужно ничего делать.</p>\n\n<p>Давайте продолжим!</p>"}},{"type":"prose","value":{"id":"другие_настройки_проекта","title":"Другие настройки проекта","isH3":false,"content":"<p>Файл <strong>settings.py</strong> так же применяется и для некоторых других настроек, но на данном шаге имеет смысл поменять разве что <a href=\"https://docs.djangoproject.com/en/1.10/ref/settings/#std:setting-TIME_ZONE\" class=\"external\" rel=\" noopener\">TIME_ZONE</a> — это значение должно быть представлено строкой, указанной в <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" class=\"external\" rel=\" noopener\">списке часовых поясов tz </a>(колонка TZ в таблице, в строке временной зоны, которая вам нужна). Измените <code>TIME_ZONE</code> на одну из строк из таблицы, которая отвечает вашему часовому поясу. Например:</p>\n\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code>TIME_ZONE <span class=\"token operator\">=</span> <span class=\"token string\">'Europe/Moscow'</span></code></pre></div>\n\n<p>В файле присутствует две настройки, которые не нужно менять сейчас, но о назначении которых следует знать:</p>\n\n<ul>\n <li><code>SECRET_KEY</code>. Это секретный ключ, который используется Django для поддержки безопасности сайта. Если вы раскроете этот ключ в процессе разработки кому-либо, то необходимо будет его сменить (возможно считать его с какого-либо файла на сервере или переменной окружения) когда будете размещать проект на сервер. </li>\n <li><code>DEBUG</code>. Включает подробные сообщения об ошибках, вместо стандартных HTTP статусов ответов. Должно быть изменено на <code>False</code> на сервере, так как эта информация очень много расскажет взломщикам. </li>\n</ul>"}},{"type":"prose","value":{"id":"подключение_url-адреса","title":"Подключение URL-адреса","isH3":false,"content":"<p>При создании сайта, был создан файл сопоставления URL (<strong>urls.py</strong>) в корне проекта. Хотя можно использовать его для обработки всех URL адресов, более целесообразно подключать отдельные файлы сопоставлений для каждого приложения.</p>\n\n<p>Откройте <strong>locallibrary/locallibrary/urls.py</strong> и обратите внимание на закомментированный текст, который объясняет суть происходящего. </p>\n\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code><span class=\"token triple-quoted-string string\">\"\"\"\nlocallibrary URL Configuration\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/1.10/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  url(r'^$', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  url(r'^$', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.conf.urls import url, include\n    2. Add a URL to urlpatterns:  url(r'^blog/', include('blog.urls'))\n\"\"\"</span>\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> path\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib <span class=\"token keyword\">import</span> admin\n\n\nurlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">'admin/'</span><span class=\"token punctuation\">,</span> admin<span class=\"token punctuation\">.</span>site<span class=\"token punctuation\">.</span>urls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n</code></pre></div>\n\n<p>URL соотношения хранятся в переменной <code>urlpatterns</code>, которая является списком функций <code>path()</code>. Каждая <code>path()</code> функция или ассоциирует шаблон URL<em> </em>с контроллером(views) или же его с другим таким списком (во втором случае, первый URL становится \"базовым\" для других, которые определяются в дочернем списке). Список <code>urlpatterns</code> инициализирует список функции, которая, например, соотносит <em>admin/</em> с модулем <code>admin.site.urls</code> , который содержит собственный файл-соотноситель.</p>\n\n<p>Добавьте строчки, приведённые ниже в низ файла <strong>urls.py</strong> , чтобы добавить новый элемент в список <code>urlpatterns</code>. Этот элемент содержит <code>url()</code> который направляет запросы с URL <code>catalog/</code> к модулю  <code>catalog.urls</code> (файл с относительным путём <strong>/catalog/urls.py</strong>).</p>\n\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code><span class=\"token comment\"># Используйте include() чтобы добавлять URL из каталога приложения</span>\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> include\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> path\nurlpatterns <span class=\"token operator\">+=</span> <span class=\"token punctuation\">[</span>\n     path<span class=\"token punctuation\">(</span><span class=\"token string\">'catalog/'</span><span class=\"token punctuation\">,</span> include<span class=\"token punctuation\">(</span><span class=\"token string\">'catalog.urls'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n</code></pre></div>\n\n<p>Теперь давайте перенаправим корневой URL нашего сайта (например <code>127.0.0.1:8000</code>) на URL <code>127.0.0.1:8000/catalog/</code>; это единственное приложение, которое мы собираемся использовать, поэтому это вполне разумно. Чтобы это использовать, нам понадобится специальная функция (<code>RedirectView</code>), которая принимает первым параметром новый относительный URL на который следует перенаправлять (<code>/catalog/</code>) когда указанный в функции <code>url()</code> адрес  соотносится с адресом запроса (корневой URL, в данном случае).</p>\n\n<p>Добавьте следующие строчки, тоже в конец файла:</p>\n\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code><span class=\"token comment\"># Добавьте URL соотношения, чтобы перенаправить запросы с корневого URL, на URL приложения</span>\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views<span class=\"token punctuation\">.</span>generic <span class=\"token keyword\">import</span> RedirectView\nurlpatterns <span class=\"token operator\">+=</span> <span class=\"token punctuation\">[</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> RedirectView<span class=\"token punctuation\">.</span>as_view<span class=\"token punctuation\">(</span>url<span class=\"token operator\">=</span><span class=\"token string\">'/catalog/'</span><span class=\"token punctuation\">,</span> permanent<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n\n<p>Django не размещает <em>статические</em> файлы(CSS, JavaScript, и изображения) по умолчанию, но это было бы крайне полезно на этапе разработки нашего сайта. В самом конце нашего URL соотносителя, можно включить размещение статических файлов. </p>\n\n<p>Добавьте последнюю часть в конец файла:</p>\n\n<pre class=\"notranslate\"><code># Используйте static() чтобы добавить соотношения для статических файлов\n# Только на период разработки\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)</code>\n</pre>\n\n<div class=\"note notecard\" id=\"sect6\">\n<p><strong>Примечание</strong>: Существуют различные способы дополнения списка <code>urlpatterns</code> (в примере мы просто добавляли объект, используя оператор <code>+=</code> чтобы чётко разделить изначальный и дописанный код). Вместо этого, мы могли бы добавить соотношения внутрь определения переменной:</p>\n\n<pre class=\"notranslate\">urlpatterns = [   path('admin/', admin.site.urls),\npath('catalog/', include('catalog.urls')),path('',\nRedirectView.as_view(url='/catalog/', permanent=True)), ] +\n<code>static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)</code></pre>\n\n<p>Кроме того, мы добавили import вниз файла (<code>from django.urls import include</code>) ,чтобы видеть, что мы добавили, но обычно все инструкции import добавляются в верхнюю часть файла.</p>\n</div>\n\n<p>Напоследок, создайте файл <strong>urls.py</strong> внутри папки <strong>catalog</strong>, и добавьте следующий код, чтобы определить (пустой) <code>urlpatterns</code>. Сюда мы будем добавлять наши URL соотношения, по мере разработки сайта. </p>\n\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> path\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span> <span class=\"token keyword\">import</span> views\n\n\nurlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n\n<span class=\"token punctuation\">]</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"тестирование_работы_скелета","title":"Тестирование работы скелета","isH3":false,"content":"<p>На этом, мы создали прототип сайта. Пока сайт ничего не умеет делать, но стоит запустить его, чтобы убедиться, что мы ничего не сломали. </p>\n\n<p>До этого, нам предстоит впервые запустить <em> миграцию базы данных</em>. Это обновит нашу базу данных и добавит туда необходимые модели (и уберёт некоторые предупреждения, которые были бы показаны при попытке запуска).</p>"}},{"type":"prose","value":{"id":"запуск_миграций_базы_данных","title":"Запуск миграций базы данных","isH3":true,"content":"<p>Django использует Объектный Соотноситель Связей (ORM) чтобы соотносить определения моделей в Django приложении со структурами данных, которые используются базой данных. Когда мы меняем наши модели, Django отслеживает изменения и может создать файлы миграций (в папке <strong>/locallibrary/catalog/migrations/</strong>) чтобы применить соответствующие структуры данных к базе, чтобы та соответствовала модели.</p>\n\n<p>При создании сайта, Django автоматически добавил несколько моделей, чтобы мы могли их использовать в админ-панели (о которой мы поговорим позже). Выполните следующие команды, чтобы создать нужные таблицы в базе данных, соответствующие этим моделям (убедитесь, что вы находитесь в папке с<strong> manage.py</strong>):</p>\n\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>python3 manage.py makemigrations\npython3 manage.py migrate\n</code></pre></div>\n\n<div class=\"warning notecard\" id=\"sect7\">\n<p><strong>Предупреждение</strong>: Необходимо выполнять команды выше каждый раз, когда вы меняете модели таким образом, что структура таблицы изменится(включая добавления и удаления как отдельных полей, так и целых моделей).</p>\n</div>\n\n<p><code>Команда makemigrations</code> <em>создаёт</em> (но не применяет) миграции для всех приложений, которые установлены в ваш проект (вы так же можете указать в конце имя конкретного приложения, чтобы создать миграции только для него). Это даёт вам возможность проверить код перед тем, как их применить — когда вы станете хорошо разбираться в Django, то сможете даже менять их!</p>\n\n<p>Команда <code>migrate</code> применяет созданные миграции к базе (Django отслеживает, какие миграции были созданы для данной базы).</p>\n\n<div class=\"note notecard\" id=\"sect8\">\n<p><strong>Примечание</strong>: Посмотрите раздел <a href=\"https://docs.djangoproject.com/en/2.2/topics/migrations/\" class=\"external\" rel=\" noopener\">Миграции</a> в документации Django чтобы получить информацию о менее распространённых командах для управления миграциями.</p>\n</div>"}},{"type":"prose","value":{"id":"запуск_сайта","title":"Запуск сайта","isH3":true,"content":"<p>Во время разработки, вы можете проверить свой сайт, разместив его на <em>встроенном отладочном сервере</em>, и просмотрев его в своём браузере. </p>\n\n<div class=\"note notecard\" id=\"sect9\">\n<p><strong>Примечание</strong>: Отладочный веб-сервер не настолько функционален и производителен, для постоянного размещения , но это самый простой способ запустить свой сайт на Django и проверить его на наличие ошибок. По умолчанию, он разместит сайт на вашем компьютере (<code>http://127.0.0.1:8000/)</code>, но вы так же можете указать различные компьютеры в вашей сети для этой цели. Для получения большего количества информации загляните в раздел <a href=\"https://docs.djangoproject.com/en/2.2/ref/django-admin/\" class=\"external\" rel=\" noopener\">django-admin и manage.py: отладочный сервер</a> документации Django.</p>\n</div>\n\n<p>Запустите веб-сервер, используя команду <em>runserver</em> (в той же папке, что и <strong>manage.py</strong>):</p>\n\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>python3 manage.py runserver\n\n Performing system checks<span class=\"token punctuation\">..</span>.\n\n System check identified no issues <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> silenced<span class=\"token punctuation\">)</span>.\n September <span class=\"token number\">22</span>, <span class=\"token number\">2016</span> - <span class=\"token number\">16</span>:11:26\n Django version <span class=\"token number\">1.10</span>, using settings <span class=\"token string\">'locallibrary.settings'</span>\n Starting development server at http://127.0.0.1:8000/\n Quit the server with CTRL-BREAK.\n</code></pre></div>\n\n<p>Когда сервер запустится, вы сможете посетить сайт по адресу <code>http://127.0.0.1:8000/</code> в вашем веб-браузере. Вы должны увидеть страницу с ошибкой, навроде этой:</p>\n\n<p><img alt=\"Django debug page for a 404 not found error\" src=\"https://mdn.mozillademos.org/files/14009/django_404_debug_page.png\" style=\"display: block; margin: 0px auto;\" loading=\"lazy\"></p>\n\n<p>Не волнуйтесь! Эта страница должна появиться и сообщить нам, что мы ещё не настроили ни одной страницы в модуле <code>catalogs.urls</code> (на который мы были перенаправлены запросили корневой URL сайта). </p>\n\n<div class=\"note notecard\" id=\"sect10\">\n<p><strong>Примечание</strong>: Показанная выше страница открывает нам одно из замечательных свойств Django — автоматические отчёты об ошибках. На экране с ошибкой отображается множество полезной информации, когда страница не найдена, или ошибка была вызвана кодом. В данном случае, мы видим, что запрошенный URL  не соответствует ни одному шаблону (из указанных). Подобные отчёты будут выключены при DEBUG=False (когда мы разместим приложение в Сеть), в этом случае будет показана менее информативная, но более дружелюбная к пользователю страница(которую вам надо будет создать - прим. переводчика).</p>\n</div>\n\n<p>На данном этапе, мы поняли, что Django работает должным образом! </p>\n\n<div class=\"note notecard\" id=\"sect11\">\n<p><strong>Примечание</strong>: вам следует перезапускать миграцию и заново тестировать сайт, после того как вы делаете важные изменения. Поверьте, это не займёт много времени!</p>\n</div>"}},{"type":"prose","value":{"id":"домашнее_задание","title":"Домашнее задание","isH3":false,"content":"<p>Папка <strong>catalog/</strong> содержит файлы контроллеров(views), моделей(models), и других частей приложения. Просмотрите эти файлы. </p>\n\n<p>Как было написано выше, URL соотноситель для админ-панели был подключён в файле <strong>urls.py</strong>. Войдите в административную часть и посмотрите, что произойдёт (вы можете найти URL из соотношения выше).</p>\n\n<ul>\n</ul>"}},{"type":"prose","value":{"id":"подводя_итоги","title":"Подводя итоги","isH3":false,"content":"<p>Теперь вы создали полноценный скелет веб-приложения, который теперь вы можете расширить url соотносителями, контроллерами(views) и моделями(models).</p>\n\n<p>Теперь скелет <a href=\"/ru/docs/Learn/Server-side/Django/Tutorial_local_library_website\">Сайта местной библиотеки</a> сделан и запущен, теперь самое время начать писать код, который научит сайт делать то, что он должен делать. </p>"}},{"type":"prose","value":{"id":"также_посмотрите_эти_статьи","title":"Также посмотрите эти статьи","isH3":false,"content":"<ul>\n <li><a href=\"https://docs.djangoproject.com/en/2.2/intro/tutorial01/\" class=\"external\" rel=\" noopener\">Пишем своё первое приложение на Django - часть 1</a>  (документация Django)</li>\n <li><a href=\"https://docs.djangoproject.com/en/2.2/ref/applications/\" class=\"external\" rel=\" noopener\">Приложения</a> (документация Django). содержит информацию о настройке приложений.</li>\n</ul>\n\n<p></p><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ru/docs/Learn/Server-side/Django/Tutorial_local_library_website\"> Назад </a></li>\n    <li><a class=\"button minimal\" href=\"/ru/docs/Learn/Server-side/Django\"> Обзор: Django</a></li>\n    <li><a class=\"button minimal\" href=\"/ru/docs/Learn/Server-side/Django/Models\"> Далее  </a></li>\n</ul><p></p>"}}],"toc":[{"text":"Обзор","id":"обзор"},{"text":"Создание проекта","id":"создание_проекта"},{"text":"Создание приложения Каталог","id":"создание_приложения_каталог"},{"text":"Регистрация папки с приложением","id":"регистрация_папки_с_приложением"},{"text":"Настройка базы данных","id":"настройка_базы_данных"},{"text":"Другие настройки проекта","id":"другие_настройки_проекта"},{"text":"Подключение URL-адреса","id":"подключение_url-адреса"},{"text":"Тестирование работы скелета","id":"тестирование_работы_скелета"},{"text":"Домашнее задание","id":"домашнее_задание"},{"text":"Подводя итоги","id":"подводя_итоги"},{"text":"Также посмотрите эти статьи","id":"также_посмотрите_эти_статьи"}],"summary":"Это вторая статья из нашего руководства по Django, которая показывает, как можно создать \"скелет\" сайта, как фундамент, на котором можно строить всё остальное: настройки, ссылки, модели, контроллеры и представления.","popularity":0.0023,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Django Tutorial Part 2: Creating a skeleton website","locale":"en-US","native":"English (US)"},{"title":"Tutorial Django Parte 2: Creación del esqueleto del sitio web","locale":"es","native":"Español"},{"title":"Django didactique Section 2: Créer le squelette du site web","locale":"fr","native":"Français"},{"title":"Django チュートリアル Part 2: スケルトンウェブサイトの作成","locale":"ja","native":"日本語"},{"title":"장고 튜토리얼 강좌 2 : 뼈대 사이트 만들기","locale":"ko","native":"한국어"},{"title":"Django Tutorial Parte 2: Criando o \"esqueleto\" de um site","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Django Tutorial Part 2: 创建网站的地基","locale":"zh-CN","native":"中文 (简体)"},{"title":"Django 教學 2: 創建一個骨架網站","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ru/learn/server-side/django/skeleton_website","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/learn/server-side/django/skeleton_website/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Learn","title":"Изучение веб-разработки"},{"uri":"/ru/docs/Learn/Server-side","title":"Серверное программирование веб-сайтов"},{"uri":"/ru/docs/Learn/Server-side/Django","title":"Веб-фреймворк Django (Python)"},{"uri":"/ru/docs/Learn/Server-side/Django/skeleton_website","title":"Руководство по Django часть 2: создание скелета"}],"pageTitle":"Руководство по Django часть 2: создание скелета - Изучение веб-разработки | MDN","noIndexing":false}}