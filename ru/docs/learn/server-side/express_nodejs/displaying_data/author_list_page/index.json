{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Список авторов. Тест - список жанров","mdn_url":"/ru/docs/Learn/Server-side/Express_Nodejs/Displaying_data/Author_list_page","locale":"ru","native":"Русский","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Страница списка авторов должна показывать список всех авторов, хранимых в БД, причём каждое имя автора должно быть связано со страницей подробностей для этого автора. Дата рождения автора и дата смерти должны выводиться в одной строке после имени автора.</p>"}},{"type":"prose","value":{"id":"контроллер","title":"Контроллер","isH3":false,"content":"<p>Функция контроллера списка авторов должна получить список всех элементов в  <code>Author</code> , и передать этот список в шаблон для отображения.</p>\n\n<p>Откройте файл <strong>/controllers/authorController.js</strong>. Найдите экспортируемый метод <code>author_list()</code> в начале файла и замените его следующим ниже кодом:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js line-numbers  language-js notranslate\"><code><span class=\"token comment\">// Display list of all Authors.</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">author_list</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  Author<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'family_name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ascending'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> list_authors</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">//Successful, so render</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'author_list'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Author List'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">author_list</span><span class=\"token operator\">:</span> list_authors <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>Метод использует такие функции модели как <code>find()</code>, <code>sort()</code> и <code>exec()</code> для того, чтобы вернуть все объекты  <code>Author</code> отсортированными по  <code>family_name</code> в алфавитном порядке. В вызове <code>exec()</code> колбэк-функция имеет первый параметр- объект ошибок  (или <code>null</code>) и второй параметр - список всех авторов, если ошибок не было. При ошибках вызывается следующая функция промежуточного слоя  с полученным значением объекта ошибок, а если ошибок не было, отображается шаблон <strong>author_list</strong>(.pug), передавая странице <code>title</code> и список авторов (<code>author_list</code>).</p>"}},{"type":"prose","value":{"id":"представление","title":"Представление","isH3":false,"content":"<p>Создайте файл <strong>/views/author_list.pug</strong> и поместите в него следующий текст:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js line-numbers  language-js notranslate\"><code><span class=\"token keyword\">extends</span> <span class=\"token class-name\">layout</span>\n\nblock content\n  h1<span class=\"token operator\">=</span> title\n\n  ul\n    each author <span class=\"token keyword\">in</span> author_list\n      li\n        <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>href<span class=\"token operator\">=</span>author<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span> #<span class=\"token punctuation\">{</span>author<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">|</span>  <span class=\"token punctuation\">(</span>#<span class=\"token punctuation\">{</span>author<span class=\"token punctuation\">.</span>date_of_birth<span class=\"token punctuation\">}</span> <span class=\"token operator\">-</span> #<span class=\"token punctuation\">{</span>author<span class=\"token punctuation\">.</span>date_of_death<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">else</span>\n      li There are no authors<span class=\"token punctuation\">.</span></code></pre></div>\n\n<p>Представление создано по тому же образцу, что и другие шаблоны.</p>"}},{"type":"prose","value":{"id":"как_это_выглядит","title":"Как это выглядит?","isH3":false,"content":"<p>Запустите приложение и откройте браузер с адресом <a class=\"external external-icon\" href=\"http://localhost:3000/\" rel=\"noopener\">http://localhost:3000/</a>. Выберите ссылку <em>All authors</em>. Если все было сделано правильно, страница должна выглядеть примерно так, как на следующем скриншоте.</p>\n\n<p><img alt=\"Author List Page - Express Local Library site\" src=\"https://mdn.mozillademos.org/files/14468/LocalLibary_Express_Author_List.png\" style=\"display: block; margin: 0px auto;\" loading=\"lazy\"></p>\n\n<div class=\"note notecard\" id=\"sect1\">\n<p><strong>Примечание:</strong> Представление дат продолжительности жизни автора выглядит безобразно! Это можно исправить, если использовать <a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data#date_formatting\">тот же подход</a> , который применялся для списка <code>BookInstance</code>  (добавить в модель <code>Author</code> виртуальное свойство  продолжительности жизни).  Но в этот раз, однако, некоторые даты могут отсутствовать, и ссылки на несуществующие свойства игнорируются, если не задан строгий режим.  Метод <code>moment()</code> возвращает текущее время, и нежелательно, чтобы отсутствующие  даты форматировались как \"сегодня\". Один из способов состоит в том, чтобы форматирующая функция возвращала пустую строку, если дата не существует. Например:</p>\n\n<p><code>return this.date_of_birth ? moment(this.date_of_birth).format('YYYY-MM-DD') : '';</code></p>\n</div>"}},{"type":"prose","value":{"id":"тест_-_страница_списка_жанров!edit","title":"Тест - страница списка жанров!","isH3":false,"content":"<p>В этой части требуется создать собственную страницу списка жанров. Страница должна показывать жанры, имеющиеся в БД, а для каждого жанра должна быть создана ссылка на страницу с детальной информацией. Скриншот ожидаемого результата приводится ниже.</p>\n\n<p><img alt=\"Genre List - Express Local Library site\" src=\"https://mdn.mozillademos.org/files/14460/LocalLibary_Express_Genre_List.png\" style=\"border-style: solid; border-width: 1px; display: block; margin: 0px auto;\" loading=\"lazy\"></p>\n\n<p>Функция контроллера списка жанров должна получить список всех экземпляров <code>Genre</code>, и передать его в шаблон для отображения.</p>\n\n<ol>\n <li>Следует отредактировать <code>genre_list()</code> в файле  <strong>/controllers/genreController.js</strong>. </li>\n <li>Реализация почти такая же, как и для контроллера <code>author_list()</code> .\n  <ul>\n   <li>Sort the results by name, in ascending order.</li>\n  </ul>\n </li>\n <li>Отображающий шаблон должен быть назван <strong>genre_list.pug</strong>.</li>\n <li>Шаблону для отображения должны быть переданы переменные <code>title</code> (строка 'Genre List') и <code>genre_list</code> (the list of список жанров, который вернёт колбэк-функция <code>Genre.find()</code>.</li>\n <li>Представление должно соответствовать скриншоту, приведённому ранее (оно должно иметь структуру и формат, похожие на таковые в представлении списка авторов, за исключением, конечно, продолжительности жизни, так как для жанров даты не заданы).</li>\n</ol>"}},{"type":"prose","value":{"id":"далее","title":"Далее","isH3":false,"content":"<p>Вернуться к части 5 -  <a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data\">Express Tutorial Part 5: Displaying library data</a>.</p>\n\n<p>Перейти к следующему подразделу в части 5: подробная информация о жанрах (<a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data/Genre_detail_page\">Genre detail page</a>).</p>"}}],"toc":[{"text":"Контроллер","id":"контроллер"},{"text":"Представление","id":"представление"},{"text":"Как это выглядит?","id":"как_это_выглядит"},{"text":"Тест - страница списка жанров!","id":"тест_-_страница_списка_жанров!edit"},{"text":"Далее","id":"далее"}],"summary":"Страница списка авторов должна показывать список всех авторов, хранимых в БД, причём каждое имя автора должно быть связано со страницей подробностей для этого автора. Дата рождения автора и дата смерти должны выводиться в одной строке после имени автора.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Author list page and Genre list page challenge","locale":"en-US","native":"English (US)"},{"title":"著者リストページとジャンルリストページのチャレンジ","locale":"ja","native":"日本語"},{"title":"作者清单面页、分类清单页面、与自我挑战","locale":"zh-CN","native":"中文 (简体)"},{"title":"Author list page and Genre list page challenge","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ru/learn/server-side/express_nodejs/displaying_data/author_list_page","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/learn/server-side/express_nodejs/displaying_data/author_list_page/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Learn","title":"Изучение веб-разработки"},{"uri":"/ru/docs/Learn/Server-side","title":"Серверное программирование веб-сайтов"},{"uri":"/ru/docs/Learn/Server-side/Express_Nodejs","title":"Веб-фреймворк Express (Node.js/JavaScript)"},{"uri":"/ru/docs/Learn/Server-side/Express_Nodejs/Displaying_data","title":"Учебник Express часть 5: Отображение данных библиотеки"},{"uri":"/ru/docs/Learn/Server-side/Express_Nodejs/Displaying_data/Author_list_page","title":"Список авторов. Тест - список жанров"}],"pageTitle":"Список авторов. Тест - список жанров - Изучение веб-разработки | MDN","noIndexing":false}}