{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Основы шаблонов","mdn_url":"/ru/docs/Learn/Server-side/Express_Nodejs/Displaying_data/Template_primer","locale":"ru","native":"Русский","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Шаблон - это текстовый файл, определяющий <em>структуру</em>, или внешний вид выходного файла, с предусмотренными позициями, в которые будут помещаться данные при отображении по шаблону (в <em>Express</em> шаблоны также называют <em>представлениями</em>).</p>"}},{"type":"prose","value":{"id":"выбор_шаблонов_express","title":"Выбор шаблонов Express","isH3":false,"content":"<p>В Express можно использовать много движков отображающих шаблонов ( <a class=\"external external-icon\" href=\"https://expressjs.com/en/guide/using-template-engines.html\" rel=\"noopener\">template rendering engines</a>). В этом руководстве для шаблонов будет использован <a class=\"external external-icon\" href=\"https://pugjs.org/api/getting-started.html\" rel=\"noopener\">Pug</a> (ранее известный как Jade) . Это наиболее популярный в  Node язык шаблонов, который о себе заявляет так: чистый, чувствительный к пробелам синтаксис для написания HTML, на который сильно повлиял <a class=\"external external-icon\" href=\"http://haml.info/\" rel=\"noopener\">Haml</a>.</p>\n\n<p>Разные языки шаблонов используют различные подходы для определения внешнего вида и разметки позиций для данных—некоторые используют HTML для определения внешнего вида, тогда как другие применяют различные форматы разметки, которые затем должны компилироваться в  HTML. Pug - второго типа; он использует <em>представление</em> (<em>representation) </em> HTML, в котором первое слово в каждой строке обычно представляет элемент HTML, а отступы в следующих строках применяются, чтобы представить вложенные элементы. Результатом является определение страницы, которое транслируется непосредственно в HTML, и которое, вероятно, более краткое и легче читается.</p>\n\n<div class=\"note notecard\" id=\"sect1\">\n<p><strong>Примечание:</strong> недостаток применения <em>Pug</em> - это чувствительность к отступам и пробелам (если добавить лишний пробел в \"плохом\" месте, можно получить невразумительный код ошибки). Однако, если ваши шаблоны уже действуют, их очень легко читать и поддерживать.</p>\n</div>"}},{"type":"prose","value":{"id":"конфигурация_шаблона","title":"Конфигурация шаблона","isH3":false,"content":"<p>Когда создавался каркас (<a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/skeleton_website\">the skeleton website</a>) веб-сайта <em>LocalLibrary, </em>он был настроен  на использование <a class=\"external external-icon\" href=\"https://pugjs.org/api/getting-started.html\" rel=\"noopener\">Pug</a> . Можно было заметить, что модуль pug включён в зависимости в файле <strong>package.json</strong>, и установлен (app.set(...)) как движок представлений в файле <strong>app.js</strong>. Эта установка показывает,, что движок представлений -  pug, и что  <em>Express</em> должен искать шаблоны в подкаталоге <strong>/views</strong>.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js line-numbers  language-js notranslate\"><code><span class=\"token comment\">// View engine setup.</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'views'</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'views'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'view engine'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pug'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>Если посмотреть содержимое каталога <strong>views</strong>, можно увидеть файлы с расширением .pug, в которых шаблоны представлений по умолчанию.  Это представление  для домашней страницы (<strong>index.pug</strong>) и базовый шаблон (<strong>layout.pug</strong>), который следует заменить нашим содержимым.</p>\n\n<pre class=\"notranslate\"><code>/express-locallibrary-tutorial  //the project root\n  /views\n    error.pug\n    <strong>index.pug</strong>\n    layout.pug</code>\n</pre>"}},{"type":"prose","value":{"id":"синтаксис_шаблонов","title":"Синтаксис шаблонов","isH3":false,"content":"<p>Пример файла шаблона (ниже) демонстрирует многие наиболее полезные черты  Pug.</p>\n\n<p>Сначала отметим, что файл отражает структуру типового HTML-файла, причём первое слов в (почти) каждой строке является элементом HTML, а отступы используются, чтобы показать вложенные элементы. Так, например, элемент <code>body</code> находится внутри элемента <code>html</code>, а элементы <code>p</code>  (параграфы) - внутри элемента <code>body,</code> и так далее. Невложенные элементы (т.е. индивидуальные параграфы) располагаются в отдельных строках.</p>\n\n<div class=\"code-example\"><pre class=\"brush: html line-numbers  language-html notranslate\"><code>doctype html\nhtml(lang=\"en\")\n  head\n    title= title\n    script(type='text/javascript').\n  body\n    h1= title\n\n    p This is a line with #[em some emphasis] and #[strong strong text] markup.\n    p This line has un-escaped data: !{'<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>em</span><span class=\"token punctuation\">&gt;</span></span> is emphasised<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>em</span><span class=\"token punctuation\">&gt;</span></span>'} and escaped data: #{'<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>em</span><span class=\"token punctuation\">&gt;</span></span> is not emphasised<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>em</span><span class=\"token punctuation\">&gt;</span></span>'}.\n      | This line follows on.\n    p= 'Evaluated and <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>em</span><span class=\"token punctuation\">&gt;</span></span>escaped expression<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>em</span><span class=\"token punctuation\">&gt;</span></span>:' + title\n\n    <span class=\"token comment\">&lt;!-- You can add HTML comments directly --&gt;</span>\n    // You can add single line JavaScript comments and they are generated to HTML comments\n    //- Introducing a single line JavaScript comment with \"//-\" ensures the comment isn't rendered to HTML\n\n    p A line with a link\n      a(href='/catalog/authors') Some link text\n      |  and some extra text.\n\n    #container.col\n      if title\n        p A variable named \"title\" exists.\n      else\n        p A variable named \"title\" does not exist.\n      p.\n        Pug is a terse and simple template language with a\n        strong focus on performance and powerful features.\n\n    h2 Generate a list\n\n    ul\n      each val in [1, 2, 3, 4, 5]\n        li= val</code></pre></div>\n\n<p>Атрибуты элементов определены в скобках после соответствующих элементов. В скобках располагается список пар <em>имя атрибута=значение,</em>причём элементы списка разделяются запятой или пробелом. Например:</p>\n\n<ul>\n <li><code>script(type='text/javascript')</code>, <code>link(rel='stylesheet', href='/stylesheets/style.css')</code></li>\n <li><code>meta(name='viewport' content='width=device-width initial-scale=1')</code></li>\n</ul>\n\n<p>Значения всех атрибутов <em>экранируются</em> (т.е. такие символы как \"<code>&gt;</code>\" заменяются эквивалентными кодами HTML как \"<code>&amp;gt;\"</code>) , чтобы предотвратить JavaScript инъекции и межсайтовые атаки.</p>\n\n<p>Если после тэга стоит знак = , следующий текст рассматривается как <em>выражение</em> JavaScript. Например, ниже в первой строке, содержимое тэга <code>h1</code> будет <em>переменной </em> <code>title</code> (которая определена в файле или передана в шаблон из Express). Во второй строке содержимое параграфа - это текстовая строка, соединённая с переменной  <code>title</code> . В каждом из случаев поведение по умолчанию - экранировать строки.</p>\n\n<div class=\"code-example\"><pre class=\"brush: html line-numbers  language-html notranslate\"><code>h1= title\np= 'Evaluated and <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>em</span><span class=\"token punctuation\">&gt;</span></span>escaped expression<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>em</span><span class=\"token punctuation\">&gt;</span></span>:' + title</code></pre></div>\n\n<p>Если после тэга знак = отсутствует, тогда содержимое рассматривается как обычный текст. Внутри текста можно вставить экранированные или неэкранированные данные, применяя синтаксис  <code>#{}</code> и<code> !{}</code>, как показано ниже. В простой текст можно также вставлять \"сырой\" HTML.</p>\n\n<div class=\"code-example\"><pre class=\"brush: html line-numbers  language-html notranslate\"><code>p This is a line with #[em some emphasis] and #[strong strong text] markup.\np This line has an un-escaped string: !{'<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>em</span><span class=\"token punctuation\">&gt;</span></span> is emphasised<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>em</span><span class=\"token punctuation\">&gt;</span></span>'}, an escaped string: #{'<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>em</span><span class=\"token punctuation\">&gt;</span></span> is not emphasised<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>em</span><span class=\"token punctuation\">&gt;</span></span>'}, and escaped variables: #{title}.</code></pre></div>\n\n<div class=\"note notecard\" id=\"sect2\">\n<p><strong>Совет:</strong> Почти всегда желательно экранировать данные, полученные от пользователей (при помощи синтаксиса <strong><code>#{}</code></strong> ). Данные, которым можно верить (т.е. подсчитанное количество  записей,  могут быть выведены без экранирования значений.</p>\n</div>\n\n<p>Можно использовать символ конвейера ('<strong>|</strong>') в начале строки, чтобы отметить простой текст (\"<a class=\"external external-icon\" href=\"https://pugjs.org/language/plain-text.html\" rel=\"noopener\">plain text</a>\"). Например, дополнительный текст, приведённый ниже, будет показан в той же строке, что и предыдущий, но не будет относиться к ссылке.</p>\n\n<div class=\"code-example\"><pre class=\"brush: html line-numbers  language-html notranslate\"><code>a(href='http://someurl/') Link text\n| Plain text</code></pre></div>\n\n<p>Pug позволяет выполнять условные операции <code>if</code>, <code>else</code> , <code>else if</code> и <code>unless</code>— пример приведён ниже:</p>\n\n<div class=\"code-example\"><pre class=\"brush: html line-numbers  language-html notranslate\"><code>if title\n  p Переменная с именем \"title\" существует\nelse\n  p Переменной с именем \"title\" не существует</code></pre></div>\n\n<p>Можно также выполнять циклы (итерации), применяя синтаксис <code>each-in</code> или <code>while</code> . Фрагмент кода (ниже)  содержит цикл по элементам массива, чтобы показать список элементов (отметим применение 'li=' для оценки \"val\" как переменной). Значение итератора val может быть также передано в шаблон как переменная!</p>\n\n<div class=\"code-example\"><pre class=\"brush: html line-numbers  language-html notranslate\"><code>ul\n  each val in [1, 2, 3, 4, 5]\n    li= val</code></pre></div>\n\n<p>Синтаксис разрешает также комментарии (которые попадут в результат или нет, по вашему желанию), смеси для создания повторно используемых блоков кода, операторы выбора case, и много другого. Более подробная информация - в документации <a class=\"external external-icon\" href=\"https://pugjs.org/api/getting-started.html\" rel=\"noopener\">The Pug docs</a>.</p>"}},{"type":"prose","value":{"id":"расширение_шаблонов","title":"Расширение шаблонов","isH3":false,"content":"<p>Принято иметь общую структуру для всех страниц сайта, включая стандартную HTML-разметку для заголовка, футера, навигации и т.д. Вместо того, чтобы заставлять разработчиков дублировать эти образцы на каждой странице, <em>Pug</em> позволяет объявить базовой шаблон, а затем модифицировать его, заменяя только те небольшие части, которые различны на каждой конкретной странице.</p>\n\n<p>Например, базовый шаблон <strong>layout.pug,</strong> созданный в каркасе проекта, имеет такой вид:</p>\n\n<div class=\"code-example\"><pre class=\"brush: html line-numbers  language-html notranslate\"><code>doctype html\nhtml\n  head\n    title= title\n    link(rel='stylesheet', href='/stylesheets/style.css')\n  body\n    block content</code></pre></div>\n\n<p>Тэг  <code>block</code> применён для отметки разделов контента, которые могут быть заменены в производных шаблона (если блок не переопределяется, будет использования его реализация в базовом классе).</p>\n\n<p>Умолчание для  <strong>index.pug</strong> (созданный для каркаса проекта) показывает, как можно заменить базовый шаблон. Тэг <code>extends</code> идентифицирует базовый шаблон, который следует использовать, а затем мы используем  <code>block <em>section_name,</em></code> чтобы отметить новый контент раздела, который мы заменяем.</p>\n\n<div class=\"code-example\"><pre class=\"brush: html line-numbers  language-html notranslate\"><code>extends layout\n\nblock content\n  h1= title\n  p Welcome to #{title}</code></pre></div>"}},{"type":"prose","value":{"id":"next_steps","title":"Next steps","isH3":false,"content":"<ul>\n <li>Return to <a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data\">Express Tutorial Part 5: Displaying library data</a>.</li>\n <li>Proceed to the next subarticle of part 5: <a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data/LocalLibrary_base_template\">The LocalLibrary base template</a>.</li>\n</ul>"}}],"toc":[{"text":"Выбор шаблонов Express","id":"выбор_шаблонов_express"},{"text":"Конфигурация шаблона","id":"конфигурация_шаблона"},{"text":"Синтаксис шаблонов","id":"синтаксис_шаблонов"},{"text":"Расширение шаблонов","id":"расширение_шаблонов"},{"text":"Next steps","id":"next_steps"}],"summary":"Шаблон - это текстовый файл, определяющий структуру, или внешний вид выходного файла, с предусмотренными позициями, в которые будут помещаться данные при отображении по шаблону (в Express шаблоны также называют представлениями).","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Template primer","locale":"en-US","native":"English (US)"},{"title":"テンプレートプライマー","locale":"ja","native":"日本語"},{"title":"模板入门","locale":"zh-CN","native":"中文 (简体)"},{"title":"模板入門","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ru/learn/server-side/express_nodejs/displaying_data/template_primer","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/learn/server-side/express_nodejs/displaying_data/template_primer/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Learn","title":"Изучение веб-разработки"},{"uri":"/ru/docs/Learn/Server-side","title":"Серверное программирование веб-сайтов"},{"uri":"/ru/docs/Learn/Server-side/Express_Nodejs","title":"Веб-фреймворк Express (Node.js/JavaScript)"},{"uri":"/ru/docs/Learn/Server-side/Express_Nodejs/Displaying_data","title":"Учебник Express часть 5: Отображение данных библиотеки"},{"uri":"/ru/docs/Learn/Server-side/Express_Nodejs/Displaying_data/Template_primer","title":"Основы шаблонов"}],"pageTitle":"Основы шаблонов - Изучение веб-разработки | MDN","noIndexing":false}}