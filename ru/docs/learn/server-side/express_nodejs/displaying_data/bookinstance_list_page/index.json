{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Список экземпляров книг","mdn_url":"/ru/docs/Learn/Server-side/Express_Nodejs/Displaying_data/BookInstance_list_page","locale":"ru","native":"Русский","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Далее мы реализуем список всех имеющихся в библиотеке копий книги (<code>BookInstance</code>) . Эта страница должна включать название книги из <code>Book</code>,  с которой связаны экземпляры <code>BookInstance</code> (linked to its detail page), а также дополнительную информацию, имеющуюся в модели <code>BookInstance</code>, включая статус, издание, и уникальный идентификатор каждой копии. Уникальное значение идентификатора копии должно быть связано со страницей детальной информации <code>BookInstance</code>.</p>"}},{"type":"prose","value":{"id":"контроллер","title":"Контроллер","isH3":false,"content":"<p>Функция контроллера списка <code>BookInstance</code> требуется для получения списка всех экземпляров некоторой книги, для получения информации, связанной с книгой, и для передачи полученного списка в шаблон для отображения.</p>\n\n<p>Откройте файл <strong>/controllers/bookinstanceController.js</strong>. Найдите экспортируемый метод <code>bookinstance_list()</code> контроллера и замените его следующим кодом (изменённый код выделен жирным).</p>\n\n<div class=\"code-example\"><pre class=\"brush: js line-numbers  language-js notranslate\"><code><span class=\"token comment\">// Display list of all BookInstances.</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">bookinstance_list</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  BookInstance<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">populate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'book'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> list_bookinstances</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// Successful, so render</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bookinstance_list'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Book Instance List'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">bookinstance_list</span><span class=\"token operator\">:</span> list_bookinstances <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>Чтобы вернуть все объекты <code>BookInstance,</code> метод использует функцию <code>find()</code> модели. Далее в цепочке вызывается метод <code>populate()</code> с аргументом - полем <code>book,</code> что приводит к замене идентификатора id, хранящегося для каждого экземпляра <code>BookInstance</code> полным документом <code>Book</code>.</p>\n\n<p>При удаче, колбэк-функция, переданная запросу, заполняет шаблон <strong>bookinstance_list</strong>(.pug), передав переменные <code>title</code> и <code>bookinstance_list</code>.</p>"}},{"type":"prose","value":{"id":"представление","title":"Представление","isH3":false,"content":"<p>Создайте файл  <strong>/views/bookinstance_list.pug</strong> и скопируйте в него текст, приведённый ниже.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js line-numbers  language-js notranslate\"><code><span class=\"token keyword\">extends</span> <span class=\"token class-name\">layout</span>\n\nblock content\n  h1<span class=\"token operator\">=</span> title\n\n  ul\n    each val <span class=\"token keyword\">in</span> bookinstance_list\n      li\n        <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>href<span class=\"token operator\">=</span>val<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span> #<span class=\"token punctuation\">{</span>val<span class=\"token punctuation\">.</span>book<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> #<span class=\"token punctuation\">{</span>val<span class=\"token punctuation\">.</span>imprint<span class=\"token punctuation\">}</span> <span class=\"token operator\">-</span>\n        <span class=\"token keyword\">if</span> val<span class=\"token punctuation\">.</span>status<span class=\"token operator\">==</span><span class=\"token string\">'Available'</span>\n          span<span class=\"token punctuation\">.</span>text<span class=\"token operator\">-</span>success #<span class=\"token punctuation\">{</span>val<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> val<span class=\"token punctuation\">.</span>status<span class=\"token operator\">==</span><span class=\"token string\">'Maintenance'</span>\n          span<span class=\"token punctuation\">.</span>text<span class=\"token operator\">-</span>danger #<span class=\"token punctuation\">{</span>val<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n          span<span class=\"token punctuation\">.</span>text<span class=\"token operator\">-</span>warning #<span class=\"token punctuation\">{</span>val<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> val<span class=\"token punctuation\">.</span>status<span class=\"token operator\">!=</span><span class=\"token string\">'Available'</span>\n          <span class=\"token function\">span</span>  <span class=\"token punctuation\">(</span>Due<span class=\"token operator\">:</span> #<span class=\"token punctuation\">{</span>val<span class=\"token punctuation\">.</span>due_back<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">else</span>\n      li There are no book copies <span class=\"token keyword\">in</span> <span class=\"token keyword\">this</span> library<span class=\"token punctuation\">.</span></code></pre></div>\n\n<p>This view is much the same as all the others. It extends the layout, replacing the <em>content</em> block, displays the <code>title</code> passed in from the controller, and iterates through all the book copies in <code>bookinstance_list</code>. For each copy we display its status (colour coded) and if the book is not available, its expected return date. One new feature is introduced—we can use dot notation after a tag to assign a class. So <code>span.text-success</code> will be compiled to <code>&lt;span class=\"text-success\"&gt;</code> (and might also be written in Pug as <code>span(class=\"text-success\")</code>.</p>"}},{"type":"prose","value":{"id":"what_does_it_look_like","title":"What does it look like?","isH3":false,"content":"<p>Run the application, open your browser to <a class=\"external external-icon\" href=\"http://localhost:3000/\" rel=\"noopener\">http://localhost:3000/</a>, then select the <em>All book-instances </em>link. If everything is set up correctly, your site should look something like the following screenshot.</p>\n\n<p><img alt=\"BookInstance List Page - Express Local Library site\" src=\"https://mdn.mozillademos.org/files/14474/LocalLibary_Express_BookInstance_List.png\" style=\"border-style: solid; border-width: 1px; display: block; margin: 0px auto;\" loading=\"lazy\"></p>"}},{"type":"prose","value":{"id":"next_steps","title":"Next steps","isH3":false,"content":"<ul>\n <li>Return to <a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data\">Express Tutorial Part 5: Displaying library data</a>.</li>\n <li>Proceed to the next subarticle of part 5: <a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data/Date_formatting_using_moment\">Date formatting using moment</a>.</li>\n</ul>"}}],"toc":[{"text":"Контроллер","id":"контроллер"},{"text":"Представление","id":"представление"},{"text":"What does it look like?","id":"what_does_it_look_like"},{"text":"Next steps","id":"next_steps"}],"summary":"Далее мы реализуем список всех имеющихся в библиотеке копий книги (BookInstance) . Эта страница должна включать название книги из Book,  с которой связаны экземпляры BookInstance (linked to its detail page), а также дополнительную информацию, имеющуюся в модели BookInstance, включая статус, издание, и уникальный идентификатор каждой копии. Уникальное значение идентификатора копии должно быть связано со страницей детальной информации BookInstance.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"BookInstance list page","locale":"en-US","native":"English (US)"},{"title":"ブックインスタンスリストページ","locale":"ja","native":"日本語"},{"title":"书本实例列表页面","locale":"zh-CN","native":"中文 (简体)"},{"title":"書本實例清單頁面","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ru/learn/server-side/express_nodejs/displaying_data/bookinstance_list_page","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/learn/server-side/express_nodejs/displaying_data/bookinstance_list_page/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Learn","title":"Изучение веб-разработки"},{"uri":"/ru/docs/Learn/Server-side","title":"Серверное программирование веб-сайтов"},{"uri":"/ru/docs/Learn/Server-side/Express_Nodejs","title":"Веб-фреймворк Express (Node.js/JavaScript)"},{"uri":"/ru/docs/Learn/Server-side/Express_Nodejs/Displaying_data","title":"Учебник Express часть 5: Отображение данных библиотеки"},{"uri":"/ru/docs/Learn/Server-side/Express_Nodejs/Displaying_data/BookInstance_list_page","title":"Список экземпляров книг"}],"pageTitle":"Список экземпляров книг - Изучение веб-разработки | MDN","noIndexing":false}}