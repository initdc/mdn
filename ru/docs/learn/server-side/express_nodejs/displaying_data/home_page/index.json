{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Home page","mdn_url":"/ru/docs/Learn/Server-side/Express_Nodejs/Displaying_data/Home_page","locale":"ru","native":"Русский","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Первой создаваемой страницей будет домашняя  страница веб-сайта, доступная из корня сайта (<code>'/'</code>) или из каталога (<code>catalog/</code>). На странице будет виден статический текст, описывающий сайт, и динамически вычисляемые \"количества\" записей разных типов имеющихся в БД.</p>\n\n<p>Маршрут для домашней страницы уже создан. Для завершения страницы обновить функции контроллера, чтобы он извлекал количество записей из БД, и создавал представление (шаблон), который можно использовать для презентации страницы.</p>"}},{"type":"prose","value":{"id":"маршрут","title":"Маршрут","isH3":false,"content":"<p>Маршруты индексной страницы созданы ранее в предыдущем разделе (<a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/routes\">previous tutorial).</a> Напомним, все функции маршрутов определены в файле <strong>/routes/catalog.js</strong>:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js  notranslate\"><code><span class=\"token comment\">// GET catalog home page.</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> book_controller<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//This actually maps to /catalog/ because we import the route with a /catalog prefix</span></code></pre></div>\n\n<p>Параметр колбэк-функции определён в <strong>/controllers/bookController.js</strong>:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">index</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: Site Home Page'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<p>Именно эту функцию контроллера мы расширим, чтобы получать информацию из моделей и затем отображать её, используя шаблоны (представления).</p>"}},{"type":"prose","value":{"id":"контроллер","title":"Контроллер","isH3":false,"content":"<p>Функция контроллера индекса должна получать информацию о том, сколько книг (<code>Book)</code>, экземпляров книг (<code>BookInstance)</code>, сколько из них доступно, сколько авторов (<code>Author)</code>, жанров (<code>Genre)</code> имеется в БД, должна поместить эту информацию в шаблон, чтобы создать  HTML-страницу, после чего вернуть её в  HTTP-ответе.</p>\n\n<div class=\"note notecard\" id=\"sect1\">\n<p><strong>Примечание:</strong> Количество экземпляров в каждой модели вычисляется при помощи метода <code><a class=\"external external-icon\" href=\"http://mongoosejs.com/docs/api.html#model_Model.countDocuments\" rel=\"noopener\">countDocuments()</a></code> . Он вызывается для модели с возможным набором условий, необходимых для проверки соответствия первому аргументу и колбэк-функции второго аргумента (обсуждалось ранее в \"Использование базы данных с Mongoose\" <a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/mongoose\">Using a Database (with Mongoose)</a>), причём можно вернуть также запрос <code>Query,</code> а затем выполнить его позже при помощи callback. Эта  колбэк-функция будет выполняться, когда БД вернёт количество записей.  Значение ошибки (or <code>null</code>) будет первым параметром, а количество записей (или null, если была ошибка) -  вторым параметром.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js  notranslate\"><code>SomeModel<span class=\"token punctuation\">.</span><span class=\"token function\">countDocuments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a_model_field</span><span class=\"token operator\">:</span> <span class=\"token string\">'match_value'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> count</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// ... do something if there is an err</span>\n <span class=\"token comment\">// ... do something with the count if there was no error</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</div>\n\n<p>Откройте файл <strong>/controllers/bookController.js</strong>. Почти в самом начале вы должны увидеть экспортируемую функцию <code>index()</code> .</p>\n\n<div class=\"code-example\"><pre class=\"brush: python  notranslate\"><code>var Book <span class=\"token operator\">=</span> require<span class=\"token punctuation\">(</span><span class=\"token string\">'../models/book'</span><span class=\"token punctuation\">)</span>\n\nexports<span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> function<span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n res<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: Site Home Page'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<p>Замените весь код, показанный выше, на следующий фрагмент кода. Первое, что он делает - импортирует (<code>require()</code>)  все модели (выделено жирным).  Это требуется, поскольку они нужны для подсчёта числа записей. Затем импортируется модуль <em>async</em> .</p>\n\n<div class=\"code-example\"><pre class=\"brush: js  notranslate\"><code><span class=\"token keyword\">var</span> Book <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/book'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> Author <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/author'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> Genre <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/genre'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> BookInstance <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/bookinstance'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> async <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">index</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    async<span class=\"token punctuation\">.</span><span class=\"token function\">parallel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">book_count</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            Book<span class=\"token punctuation\">.</span><span class=\"token function\">countDocuments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Pass an empty object as match condition to find all documents of this collection</span>\n<span class=\"token comment\">// countDocuments не работает, работает только просто count</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">book_instance_count</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            BookInstance<span class=\"token punctuation\">.</span><span class=\"token function\">countDocuments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">book_instance_available_count</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            BookInstance<span class=\"token punctuation\">.</span><span class=\"token function\">countDocuments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span><span class=\"token string\">'Available'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">author_count</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            Author<span class=\"token punctuation\">.</span><span class=\"token function\">countDocuments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">genre_count</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            Genre<span class=\"token punctuation\">.</span><span class=\"token function\">countDocuments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> results</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Local Library Home'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> err<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> results <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>Метод <code>async.parallel()</code> передаёт объект с функциями для получения количества элементов каждой модели. Все эти функции стартуют одновременно. Когда все они завершатся,  будет вызвана финальная колбэк-функция, в итоговом параметре которой содержится нужный нам результат (или ошибка).</p>\n\n<p>При успешном завершении колбэк-функции она вызывает <code><a class=\"external external-icon\" href=\"http://expressjs.com/en/4x/api.html#res.render\" rel=\"noopener\">res.render()</a></code>, у которой в качестве параметров - представление (шаблон)  '<strong>index</strong>' и объект, содержащий данные, которые следует поместить в шаблон (среди них - количества элементов в моделях). Данные представлены как пары ключ-значение, и могут быть получены в шаблоне по ключу.</p>\n\n<div class=\"note notecard\" id=\"sect2\">\n<p><strong>Примечание:</strong>  В данном случае колбэк-функция, которую вызывает <code>async.parallel()</code> , несколько необычная - страница отображается всегда, независимо от того, была ошибка или нет (обычно используют отдельный путь выполнения для обработки выводимых ошибок).</p>\n</div>"}},{"type":"prose","value":{"id":"представление","title":"Представление","isH3":false,"content":"<p>Откройте файл  <strong>/views/index.pug</strong> и замените его содержимое текстом, приведённым ниже</p>\n\n<div class=\"code-example\"><pre class=\"brush: js  notranslate\"><code><span class=\"token keyword\">extends</span> <span class=\"token class-name\">layout</span>\n\nblock content\n  h1<span class=\"token operator\">=</span> title\n  p Welcome to #<span class=\"token punctuation\">[</span>em LocalLibrary<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> a very basic Express website developed <span class=\"token keyword\">as</span> a tutorial example on the Mozilla Developer Network<span class=\"token punctuation\">.</span>\n\n  h1 Dynamic content\n\n  <span class=\"token keyword\">if</span> error\n    p Error getting dynamic content<span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">else</span>\n    p The library has the following record counts<span class=\"token operator\">:</span>\n\n    ul\n      li #<span class=\"token punctuation\">[</span>strong Books<span class=\"token operator\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>book_count<span class=\"token punctuation\">}</span>\n      li #<span class=\"token punctuation\">[</span>strong Copies<span class=\"token operator\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>book_instance_count<span class=\"token punctuation\">}</span>\n      li #<span class=\"token punctuation\">[</span>strong Copies available<span class=\"token operator\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>book_instance_available_count<span class=\"token punctuation\">}</span>\n      li #<span class=\"token punctuation\">[</span>strong Authors<span class=\"token operator\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>author_count<span class=\"token punctuation\">}</span>\n      li #<span class=\"token punctuation\">[</span>strong Genres<span class=\"token operator\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>genre_count<span class=\"token punctuation\">}</span></code></pre></div>\n\n<p>Представление несложное. Мы расширили базовый шаблон  <strong>layout.pug</strong>, переопределив блок (<code>block)</code> с именем '<strong>content</strong>'. Первый заголовок <code>h1</code> будет экранированным текстом - значением переменной <code>title</code> ,variable that  которая передаётся в функцию <code>render()</code> —заметьте, что применение '<code>h1=</code>'  говорит, что следующий текст рассматривается как выражение JavaScript. Затем расположен параграф, знакомящий с  LocalLibrary.</p>\n\n<p>Под заголовком <em>Dynamic content</em>  мы проверяем, определена ли переданная из функции <code>render()</code> переменная error. Если да, отмечаем ошибку. Если нет, выводим ( как список) количества копий каждой модели, которые хранятся в переменной <code>data</code>.</p>\n\n<div class=\"note notecard\" id=\"sect3\">\n<p><strong>Примечание:</strong>  Мы не экранируем количества элементов (т.е. используется синтаксис <code>!{}</code> ) потому что эти значения вычисляются. Если бы информация предоставлялась конечным пользователем, следовало бы экранировать переменную перед выводом.</p>\n</div>"}},{"type":"prose","value":{"id":"как_это_выглядит","title":"Как это выглядит?","isH3":false,"content":"<p>Сейчас у нас есть все для того, чтобы показать страницу index. Запустите приложение и откройте браузер с адресом <a class=\"external external-icon\" href=\"http://localhost:3000/\" rel=\"noopener\">http://localhost:3000/</a>. Если все задано правильно, ваш сайт должен иметь примерно такой вид, как на приведённом снимке экрана.</p>\n\n<p><img alt=\"Home page - Express Local Library site\" src=\"https://mdn.mozillademos.org/files/14458/LocalLibary_Express_Home.png\" style=\"display: block; margin: 0px auto;\" loading=\"lazy\"></p>\n\n<div class=\"note notecard\" id=\"sect4\">\n<p><strong>Примечание:</strong>  Элементы бокового меню использовать ещё нельзя, так как адреса, представления и шаблоны для этих страниц ещё не определены. Если вы попытаетесь их использовать, будет выведено сообщение об ошибке, например,  вида \"NOT IMPLEMENTED: Book list\" (НЕ РЕАЛИЗОВАНО: список книг), в зависимости от выбранного элемента меню.  Эти строковые литералы (которые будут замещены действительными данными) были заданы в различных файлах контроллеров в каталоге \"controllers\".</p>\n</div>"}},{"type":"prose","value":{"id":"next_steps","title":"Next steps","isH3":false,"content":"<ul>\n <li>Return to <a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data\">Express Tutorial Part 5: Displaying library data</a>.</li>\n <li>Proceed to the next subarticle of part 5: <a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data/Book_list_page\">Book list page</a>.</li>\n</ul>"}}],"toc":[{"text":"Маршрут","id":"маршрут"},{"text":"Контроллер","id":"контроллер"},{"text":"Представление","id":"представление"},{"text":"Как это выглядит?","id":"как_это_выглядит"},{"text":"Next steps","id":"next_steps"}],"summary":"Первой создаваемой страницей будет домашняя  страница веб-сайта, доступная из корня сайта ('/') или из каталога (catalog/). На странице будет виден статический текст, описывающий сайт, и динамически вычисляемые \"количества\" записей разных типов имеющихся в БД.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Home page","locale":"en-US","native":"English (US)"},{"title":"ホームページ","locale":"ja","native":"日本語"},{"title":"主页","locale":"zh-CN","native":"中文 (简体)"},{"title":"主頁","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ru/learn/server-side/express_nodejs/displaying_data/home_page","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/learn/server-side/express_nodejs/displaying_data/home_page/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Learn","title":"Изучение веб-разработки"},{"uri":"/ru/docs/Learn/Server-side","title":"Серверное программирование веб-сайтов"},{"uri":"/ru/docs/Learn/Server-side/Express_Nodejs","title":"Веб-фреймворк Express (Node.js/JavaScript)"},{"uri":"/ru/docs/Learn/Server-side/Express_Nodejs/Displaying_data","title":"Учебник Express часть 5: Отображение данных библиотеки"},{"uri":"/ru/docs/Learn/Server-side/Express_Nodejs/Displaying_data/Home_page","title":"Home page"}],"pageTitle":"Home page - Изучение веб-разработки | MDN","noIndexing":false}}