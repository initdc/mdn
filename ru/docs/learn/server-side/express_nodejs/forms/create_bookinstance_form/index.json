{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Форма для создания BookInstance","mdn_url":"/ru/docs/Learn/Server-side/Express_Nodejs/forms/Create_BookInstance_form","locale":"ru","native":"Русский","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>В этой статье показано, как определить страницу / форму для создания объектов <code>BookInstance</code>. Это очень похоже на форму, которую мы использовали для создания объектов <code>Book</code>.</p>"}},{"type":"prose","value":{"id":"импорт_методов_проверки_и_очистки","title":"Импорт методов проверки и очистки","isH3":false,"content":"<p>Откройте <strong>/controllers/bookinstanceController.js</strong> и добавьте следующие строки вверху файла:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js line-numbers  language-js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> body<span class=\"token punctuation\">,</span>validationResult <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express-validator/check'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> sanitizeBody <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express-validator/filter'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>"}},{"type":"prose","value":{"id":"controller—get_route","title":"Controller—get route","isH3":false,"content":"<p>At the top of the file, require the <em>Book</em> module (needed because each <code>BookInstance</code> is associated with a particular <code>Book</code>).</p>\n\n<div class=\"code-example\"><pre class=\"brush: js line-numbers  language-js notranslate\"><code><span class=\"token keyword\">var</span> Book <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/book'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>Find the exported <code>bookinstance_create_get()</code> controller method and replace it with the following code.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js line-numbers  language-js notranslate\"><code><span class=\"token comment\">// Display BookInstance create form on GET.</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">bookinstance_create_get</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    Book<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> books</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// Successful, so render.</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bookinstance_form'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Create BookInstance'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">book_list</span><span class=\"token operator\">:</span> books<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>The controller gets a list of all books (<code>book_list</code>) and passes it to the view <code><strong>bookinstance_form.pug</strong></code> (along with the <code>title</code>)</p>"}},{"type":"prose","value":{"id":"controller—post_route","title":"Controller—post route","isH3":false,"content":"<p>Find the exported <code>bookinstance_create_post()</code> controller method and replace it with the following code.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js line-numbers  language-js notranslate\"><code><span class=\"token comment\">// Handle BookInstance create on POST.</span>\nexports<span class=\"token punctuation\">.</span>bookinstance_create_post <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n\n    <span class=\"token comment\">// Validate fields.</span>\n    <span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token string\">'book'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Book must be specified'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">min</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token string\">'imprint'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Imprint must be specified'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">min</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token string\">'due_back'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Invalid date'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">optional</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">checkFalsy</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isISO8601</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// Sanitize fields.</span>\n    <span class=\"token function\">sanitizeBody</span><span class=\"token punctuation\">(</span><span class=\"token string\">'book'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">escape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">sanitizeBody</span><span class=\"token punctuation\">(</span><span class=\"token string\">'imprint'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">escape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">sanitizeBody</span><span class=\"token punctuation\">(</span><span class=\"token string\">'status'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">escape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">sanitizeBody</span><span class=\"token punctuation\">(</span><span class=\"token string\">'due_back'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// Process request after validation and sanitization.</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// Extract the validation errors from a request.</span>\n        <span class=\"token keyword\">const</span> errors <span class=\"token operator\">=</span> <span class=\"token function\">validationResult</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Create a BookInstance object with escaped and trimmed data.</span>\n        <span class=\"token keyword\">var</span> bookinstance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BookInstance</span><span class=\"token punctuation\">(</span>\n          <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">book</span><span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>book<span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">imprint</span><span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>imprint<span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">due_back</span><span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>due_back\n           <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>errors<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// There are errors. Render form again with sanitized values and error messages.</span>\n            Book<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> books</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n                    <span class=\"token comment\">// Successful, so render.</span>\n                    res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bookinstance_form'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Create BookInstance'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">book_list</span><span class=\"token operator\">:</span> books<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">selected_book</span><span class=\"token operator\">:</span> bookinstance<span class=\"token punctuation\">.</span>book<span class=\"token punctuation\">.</span>_id <span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">errors</span><span class=\"token operator\">:</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">bookinstance</span><span class=\"token operator\">:</span> bookinstance <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Data from form is valid.</span>\n            bookinstance<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n                   <span class=\"token comment\">// Successful - redirect to new record.</span>\n                   res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span>bookinstance<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>The structure and behaviour of this code is the same as for creating our other objects. First we validate and sanitize the data. If the data is invalid, we then re-display the form along with the data that was originally entered by the user and a list of error messages. If the data is valid, we save the new <code>BookInstance</code> record and redirect the user to the detail page.</p>"}},{"type":"prose","value":{"id":"view","title":"View","isH3":false,"content":"<p>Create <strong>/views/bookinstance_form.pug</strong> and copy in the text below.</p>\n\n<pre class=\"line-numbers  language-html notranslate\"><code class=\"language-html\">extends layout\n\nblock content\n  h1=title\n\n  form(method='POST' action='')\n    div.form-group\n      label(for='book') Book:\n      select#book.form-control(type='select' placeholder='Select book' name='book' required='true')\n        - book_list.sort(function(a, b) {let textA = a.title.toUpperCase(); let textB = b.title.toUpperCase(); return (textA &lt; textB) ? -1 : (textA &gt; textB) ? 1 : 0;});\n        for book in book_list\n          if bookinstance\n            option(value=book._id selected=(bookinstance.book.toString()==book._id.toString() ? 'selected' : false)) #{book.title}\n          else\n            option(value=book._id) #{book.title}\n\n    div.form-group\n      label(for='imprint') Imprint:\n      input#imprint.form-control(type='text' placeholder='Publisher and date information' name='imprint' required='true' value=(undefined===bookinstance ? '' : bookinstance.imprint))\n    div.form-group\n      label(for='due_back') Date when book available:\n      input#due_back.form-control(type='date' name='due_back' value=(undefined===bookinstance ? '' : bookinstance.due_back))\n\n    div.form-group\n      label(for='status') Status:\n      select#status.form-control(type='select' placeholder='Select status' name='status' required='true')\n        option(value='Maintenance') Maintenance\n        option(value='Available') Available\n        option(value='Loaned') Loaned\n        option(value='Reserved') Reserved\n\n    button.btn.btn-primary(type='submit') Submit\n\n  if errors\n    ul\n      for error in errors\n        li!= error.msg</code></pre>\n\n<p>The view structure and behaviour is almost the same as for the <strong>book_form.pug</strong> template, so we won't go over it again.</p>\n\n<div class=\"note notecard\" id=\"sect1\">\n<p><strong>Note:</strong> The above template hard-codes the <em>Status</em> values (Maintenance, Available, etc.) and does not \"remember\" the user's entered values. Should you so wish, consider reimplementing the list, passing in option data from the controller and setting the selected value when the form is re-displayed.</p>\n</div>"}},{"type":"prose","value":{"id":"как_это_выглядит","title":"Как это выглядит?","isH3":false,"content":"<p>Запустите приложение и откройте в браузере  <a class=\"external external-icon\" href=\"http://localhost:3000/\" rel=\"noopener\">http://localhost:3000/</a>. Затем выберите ссылку <em>Create new book instance (copy)</em>. Если все настроено правильно, ваш сайт должен выглядеть примерно так, как показано на скриншоте. После того, как вы отправите валидный <code>BookInstance</code>, он должен быть сохранён, и вы попадёте на страницу сведений.</p>\n\n<p><img alt=\"\" src=\"https://mdn.mozillademos.org/files/14490/LocalLibary_Express_BookInstance_Create_Empty.png\" style=\"display: block; margin: 0px auto;\" loading=\"lazy\"></p>"}},{"type":"prose","value":{"id":"next_steps","title":"Next steps","isH3":false,"content":"<ul>\n <li>Return to <a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/forms\">Express Tutorial Part 6: Working with forms</a>.</li>\n <li>Proceed to the next subarticle of part 6: <a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/forms/Delete_author_form\">Delete Author form</a>.</li>\n</ul>"}}],"toc":[{"text":"Импорт методов проверки и очистки","id":"импорт_методов_проверки_и_очистки"},{"text":"Controller—get route","id":"controller—get_route"},{"text":"Controller—post route","id":"controller—post_route"},{"text":"View","id":"view"},{"text":"Как это выглядит?","id":"как_это_выглядит"},{"text":"Next steps","id":"next_steps"}],"summary":"В этой статье показано, как определить страницу / форму для создания объектов BookInstance. Это очень похоже на форму, которую мы использовали для создания объектов Book.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Create BookInstance form","locale":"en-US","native":"English (US)"},{"title":"创建书本实例表单","locale":"zh-CN","native":"中文 (简体)"},{"title":"Create BookInstance form","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ru/learn/server-side/express_nodejs/forms/create_bookinstance_form","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/learn/server-side/express_nodejs/forms/create_bookinstance_form/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Learn","title":"Изучение веб-разработки"},{"uri":"/ru/docs/Learn/Server-side","title":"Серверное программирование веб-сайтов"},{"uri":"/ru/docs/Learn/Server-side/Express_Nodejs","title":"Веб-фреймворк Express (Node.js/JavaScript)"},{"uri":"/ru/docs/Learn/Server-side/Express_Nodejs/forms","title":"Учебник Express часть 6: Работа с формами"},{"uri":"/ru/docs/Learn/Server-side/Express_Nodejs/forms/Create_BookInstance_form","title":"Форма для создания BookInstance"}],"pageTitle":"Форма для создания BookInstance - Изучение веб-разработки | MDN","noIndexing":false}}