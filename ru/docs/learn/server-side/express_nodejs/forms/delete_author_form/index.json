{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Delete Author form","mdn_url":"/ru/docs/Learn/Server-side/Express_Nodejs/forms/Delete_author_form","locale":"ru","native":"Русский","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>В этой статье показано, как определить страницу для удаления объектов <code>Author</code>.</p>\n\n<p>Как описано в разделе  <a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/forms#form_design\">form design</a>,  наша стратегия будет заключаться в том, чтобы разрешить удаление только объектов, на которые не ссылаются другие объекты(в этом случае это означает, что мы не позволим <code>Author</code> быть удалённым, если на него ссылается  <code>Book</code>). С точки зрения реализации это означает, что форма должна подтвердить, что нет никаких связанных книг, прежде чем автор будет удалён. Если есть связанные книги, то они должны отображаться и быть удалены до того, как будет удалён объект <code>Author</code>.</p>"}},{"type":"prose","value":{"id":"controller—get_route","title":"Controller—get route","isH3":false,"content":"<p>Откройте <strong>/controllers/authorController.js</strong>. Найдите экспортируемый метод контроллера  <code>author_delete_get()</code> и замените его на следующий код.</p>\n\n<pre class=\"notranslate\"><code class=\"language-js\">// Отображать форму для удаления автора GET\nexports.author_delete_get = function(req, res, next) {\n\n    async.parallel({\n        author: function(callback) {\n            Author.findById(req.params.id).exec(callback)\n        },\n        authors_books: function(callback) {\n          Book.find({ 'author': req.params.id }).exec(callback)\n        },\n    }, function(err, results) {\n        if (err) { return next(err); }\n        if (results.author==null) { // No results.\n            res.redirect('/catalog/authors');\n        }\n        // </code>Удачно, значит рендерим.<code class=\"language-js\">\n        res.render('author_delete', { title: 'Delete Author', author: results.author, author_books: results.authors_books } );\n    });\n\n};</code></pre>\n\n<p>Контроллер получает id экземпляра <code>Author</code> для удаления из параметра URL  (<code>req.params.id</code>). Он использует метод  <code>async.parallel()</code> , чтобы получить запись автора и параллельно вс связанные книги. Когда оба параметра авершины, он рендерит страницу  <code><strong>author_delete</strong></code><strong>.pug</strong>, передаёт значения для <code>title</code>, <code>author</code>, и <code>author_books</code>.</p>\n\n<div class=\"note notecard\" id=\"sect1\">\n<p><strong>Примечание:</strong> Если <code>findById()</code><strong> </strong>не возвращает результатов, то автор отсутствует в базе данных. В этом случае удалять нечего, поэтому сразу выводим список всех авторов.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js line-numbers  language-js notranslate\"><code><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> results</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span>author<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// No results.</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/catalog/authors'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n</div>"}},{"type":"prose","value":{"id":"controller—post_route","title":"Controller—post route","isH3":false,"content":"<p>Найдите экспортируемый метод контроллера <code>author_delete_post()</code> и замените его на следующий код.</p>\n\n<pre class=\"notranslate\"><code class=\"language-js\">// Обработчик удаления автора POST.\nexports.author_delete_post = function(req, res, next) {\n\n    async.parallel({\n        author: function(callback) {\n          Author.findById(req.body.authorid).exec(callback)\n        },\n        authors_books: function(callback) {\n          Book.find({ 'author': req.body.authorid }).exec(callback)\n        },\n    }, function(err, results) {\n        if (err) { return next(err); }\n        // Success\n        if (results.authors_books.length &gt; 0) {\n            // </code>Автор книги. Визуализация выполняется так же, как и для GET route.<code class=\"language-js\">\n            res.render('author_delete', { title: 'Delete Author', author: results.author, author_books: results.authors_books } );\n            return;\n        }\n        else {\n            </code>//У автора нет никаких книг. Удалить объект и перенаправить в список авторов.<code class=\"language-js\">\n            Author.findByIdAndRemove(req.body.authorid, function deleteAuthor(err) {\n                if (err) { return next(err); }\n                // </code>Успех-перейти к списку авторов<code class=\"language-js\">\n                res.redirect('/catalog/authors')\n            })\n        }\n    });\n};</code></pre>\n\n<p>Сначала мы проверяем, что был предоставлен id (он отправляется через параметры тела формы, а не через версию в URL). Затем мы получаем автора и связанные с ним книги так же, как и для маршрута <code>GET</code>. Если книг нет, то удаляем объект автора и перенаправляем в список всех авторов. Если есть ещё книги, то мы просто перерисовываем форму, передавая автора и список книг, которые нужно удалить.</p>\n\n<div class=\"note notecard\" id=\"sect2\">\n<p><strong>Примечание:</strong> Мы можем проверить, возвращает ли вызов <code>findbyid ()</code> какой-либо результат, и если нет, немедленно отобразить список всех авторов.Для краткости мы оставили код как есть выше (он всё равно вернёт список авторов, если id не будет найден, но это произойдёт после <code>findByIdAndRemove()</code>).</p>\n</div>"}},{"type":"prose","value":{"id":"view","title":"View","isH3":false,"content":"<p>Создайте <strong>/views/author_delete.pug</strong> и скопируйте текст ниже.</p>\n\n<pre class=\"line-numbers  language-html notranslate\"><code class=\"language-html\">extends layout\n\nblock content\n  h1 #{title}: #{author.name}\n  p= author.lifespan\n\n  if author_books.length\n\n    p #[strong Delete the following books before attempting to delete this author.]\n\n    div(style='margin-left:20px;margin-top:20px')\n\n      h4 Books\n\n      dl\n      each book in author_books\n        dt\n          a(href=book.url) #{book.title}\n        dd #{book.summary}\n\n  else\n    p Do you really want to delete this Author?\n\n    form(method='POST' action='')\n      div.form-group\n        input#authorid.form-control(type='hidden',name='authorid', required='true', value=author._id )\n\n      button.btn.btn-primary(type='submit') Delete</code></pre>\n\n<p>Представление расширяет шаблон макета, переопределяя блок с именем <code>content</code>. Вверху отображаются сведения об авторе. Затем он включает условный оператор, основанный на количестве <code><strong>author_books</strong></code> (пункты <code>if</code> и <code>else</code> ).</p>\n\n<ul>\n <li>Если есть книги, связанные с автором, то на странице перечислены книги и говорится, что они должны быть удалены, прежде чем этот <code>Author</code> может быть удалён.</li>\n <li>Если книг нет, на странице отображается запрос на подтверждение. Если нажать кнопку <strong>Delete</strong>, то id автора будет отправлен на сервер в <code>POST</code>-запросе, и запись этого автора будет удалена.</li>\n</ul>"}},{"type":"prose","value":{"id":"добавление_элемента_управления_delete","title":"Добавление элемента управления delete","isH3":false,"content":"<p>Затем мы добавим элемент управления <code>Delete</code> в представление сведений об авторе (страница сведений-хорошее место для удаления записи).</p>\n\n<div class=\"note notecard\" id=\"sect3\">\n<p><strong>Note:</strong> В полном объёме контроль будет доступен только авторизованным пользователям. Однако на данный момент у нас нет системы авторизации!</p>\n</div>\n\n<p>Откройте <strong>author_detail.pug</strong> и добавьте следующие строки внизу.</p>\n\n<div class=\"code-example\"><pre class=\"brush: html line-numbers  language-html notranslate\"><code>hr\np\n  a(href=author.url+'/delete') Delete author</code></pre></div>\n\n<p>Теперь элемент управления должен отображаться в виде ссылки, как показано ниже на странице сведений об авторе.</p>\n\n<p><img alt=\"\" src=\"https://mdn.mozillademos.org/files/14492/LocalLibary_Express_Author_Detail_Delete.png\" style=\"border-style: solid; border-width: 1px; display: block; margin: 0px auto;\" loading=\"lazy\"></p>"}},{"type":"prose","value":{"id":"как_это_выглядит","title":"Как это выглядит?","isH3":false,"content":"<p>Запустите приложение и откройте в вашем браузере  <a class=\"external external-icon\" href=\"http://localhost:3000/\" rel=\"noopener\">http://localhost:3000/</a>. Затем раздел <em>All authors </em>, а затем укажите конкретного пользователя. Наконец, выберите ссылку <em>Delete author</em>.</p>\n\n<p>Если у автора нет книг, вам будет представлена такая страница. После нажатия клавиши delete сервер удалит автора и перенаправит в список авторов</p>\n\n<p><img alt=\"\" src=\"https://mdn.mozillademos.org/files/14494/LocalLibary_Express_Author_Delete_NoBooks.png\" style=\"border-style: solid; border-width: 1px; display: block; margin: 0px auto;\" loading=\"lazy\"></p>\n\n<p>Если у автора есть книги, то вам будет представлен следующий вид. Затем вы можете удалить книги из их подробных страниц (как только этот код будет реализован!).</p>\n\n<p><img alt=\"\" src=\"https://mdn.mozillademos.org/files/14496/LocalLibary_Express_Author_Delete_WithBooks.png\" style=\"border-style: solid; border-width: 1px; display: block; margin: 0px auto;\" loading=\"lazy\"></p>\n\n<div class=\"note notecard\" id=\"sect4\">\n<p><strong>Note:</strong> Другие страницы для удаления объектов могут быть реализованы примерно таким же образом. Мы оставили это как задачи.</p>\n</div>"}},{"type":"prose","value":{"id":"next_steps","title":"Next steps","isH3":false,"content":"<ul>\n <li>Return to <a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/forms\">Express Tutorial Part 6: Working with forms</a>.</li>\n <li>Proceed to the final subarticle of part 6: <a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/forms/Update_Book_form\">Update Book form</a>.</li>\n</ul>"}}],"toc":[{"text":"Controller—get route","id":"controller—get_route"},{"text":"Controller—post route","id":"controller—post_route"},{"text":"View","id":"view"},{"text":"Добавление элемента управления delete","id":"добавление_элемента_управления_delete"},{"text":"Как это выглядит?","id":"как_это_выглядит"},{"text":"Next steps","id":"next_steps"}],"summary":"В этой статье показано, как определить страницу для удаления объектов Author.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Delete Author form","locale":"en-US","native":"English (US)"},{"title":"删除作者表单","locale":"zh-CN","native":"中文 (简体)"},{"title":"Delete Author form","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ru/learn/server-side/express_nodejs/forms/delete_author_form","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/learn/server-side/express_nodejs/forms/delete_author_form/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Learn","title":"Изучение веб-разработки"},{"uri":"/ru/docs/Learn/Server-side","title":"Серверное программирование веб-сайтов"},{"uri":"/ru/docs/Learn/Server-side/Express_Nodejs","title":"Веб-фреймворк Express (Node.js/JavaScript)"},{"uri":"/ru/docs/Learn/Server-side/Express_Nodejs/forms","title":"Учебник Express часть 6: Работа с формами"},{"uri":"/ru/docs/Learn/Server-side/Express_Nodejs/forms/Delete_author_form","title":"Delete Author form"}],"pageTitle":"Delete Author form - Изучение веб-разработки | MDN","noIndexing":false}}