{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Создание простой сцены с помощью Three.js","mdn_url":"/ru/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_Three.js","locale":"ru","native":"Русский","sidebarHTML":"\n  <ol>\n    <li class=\"toggle\">\n        <details>\n            <summary>Introduction</summary>\n            <ol>\n              <li><a href=\"/ru/docs/Games/Introduction\">Introduction</a></li>\n              <li><a href=\"/ru/docs/Games/Anatomy\">Anatomy</a></li>\n              <li><a href=\"/ru/docs/Games/Examples\">Examples</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>APIs for game development</summary>\n            <ol>\n              <li><a href=\"/ru/docs/Web/API/Canvas_API\">Canvas</a></li>\n              <li><a href=\"/ru/docs/Web/CSS\">CSS</a></li>\n              <li><a href=\"/ru/docs/Web/API/Fullscreen_API\">Full screen</a></li>\n              <li><a href=\"/ru/docs/Web/API/Gamepad_API\">Gamepad</a></li>\n              <li><a href=\"/ru/docs/Web/API/IndexedDB_API\">IndexedDB</a></li>\n              <li><a href=\"/ru/docs/Web/JavaScript\">JavaScript</a></li>\n              <li><a href=\"/ru/docs/Web/API/Pointer_Lock_API\">Pointer Lock</a></li>\n              <li><a href=\"/ru/docs/Web/SVG\">SVG</a></li>\n              <li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">Typed Arrays</a></li>\n              <li><a href=\"/ru/docs/Web/API/Web_Audio_API\">Web Audio</a></li>\n              <li><a href=\"/ru/docs/Web/API/WebGL_API\">WebGL</a></li>\n              <li><a href=\"/ru/docs/Web/API/WebRTC_API\">WebRTC</a></li>\n              <li><a href=\"/ru/docs/Web/API/WebSockets_API\">WebSockets</a></li>\n              <li><a href=\"/ru/docs/Web/API/WebVR_API\">WebVR</a></li>\n              <li><a href=\"/ru/docs/Web/API/Web_Workers_API\">Web Workers</a></li>\n              <li><a href=\"/ru/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Techniques</summary>\n            <ol>\n              <li><a href=\"/ru/docs/Games/Techniques/Async_scripts\">Using async scripts for asm.js</a></li>\n              <li><a href=\"/ru/docs/Web/Apps/Developing/Optimizing_startup_performance\">Optimizing startup performance</a></li>\n              <li><a href=\"/ru/docs/Games/Techniques/WebRTC_data_channels\">Using WebRTC peer-to-peer data channels</a></li>\n              <li><a href=\"/ru/docs/Games/Techniques/Efficient_animation_for_web_games\">Efficient animation for web games</a></li>\n              <li><a href=\"/ru/docs/Games/Techniques/Audio_for_Web_Games\">Audio for Web Games</a></li>\n              <li><a href=\"/ru/docs/Games/Techniques/2D_collision_detection\">2D collision detection</a></li>\n              <li><a href=\"/ru/docs/Games/Techniques/Tilemaps\">Tiles and tilemaps overview</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>3D games on the Web</summary>\n            <ol>\n              <li><a href=\"/ru/docs/Games/Techniques/3D_on_the_web\">3D games on the Web overview</a></li>\n              <li><a href=\"/ru/docs/Games/Techniques/3D_on_the_web/Basic_theory\">Explaining basic 3D theory</a></li>\n              <li><a href=\"/ru/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_A-Frame\">Building up a basic demo with A-Frame</a></li>\n              <li><a href=\"/ru/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_Babylon.js\">Building up a basic demo with Babylon.js</a></li>\n              <li><a href=\"/ru/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_PlayCanvas\">Building up a basic demo with PlayCanvas</a></li>\n              <li><a href=\"/ru/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_Three.js\">Building up a basic demo with Three.js</a></li>\n              <li><a href=\"/ru/docs/Games/Techniques/3D_on_the_web/WebVR\">WebVR</a></li>\n              <li><a href=\"/ru/docs/Games/Techniques/3D_collision_detection\">3D collision detection</a></li>\n              <li><a href=\"/ru/docs/Games/Techniques/3D_collision_detection/Bounding_volume_collision_detection_with_THREE.js\">Bounding volume collision detection with THREE.js</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Implementing game control mechanisms</summary>\n            <ol>\n              <li><a href=\"/ru/docs/Games/Techniques/Control_mechanisms\">Control mechanisms</a></li>\n              <li><a href=\"/ru/docs/Games/Techniques/Control_mechanisms/Mobile_touch\">Mobile touch</a></li>\n              <li><a href=\"/ru/docs/Games/Techniques/Control_mechanisms/Desktop_with_mouse_and_keyboard\">Desktop with mouse and keyboard</a></li>\n              <li><a href=\"/ru/docs/Games/Techniques/Control_mechanisms/Desktop_with_gamepad\">Desktop with gamepad</a></li>\n              <li><a href=\"/ru/docs/Games/Techniques/Control_mechanisms/Other\">Other</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Tutorials</summary>\n            <ol>\n              <li><a href=\"/ru/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript\">2D breakout game using pure JavaScript</a></li>\n              <li><a href=\"/ru/docs/Games/Tutorials/2D_breakout_game_Phaser\">2D breakout game using Phaser</a></li>\n              <li><a href=\"/ru/docs/Games/Tutorials/HTML5_Gamedev_Phaser_Device_Orientation\">2D maze_game with device orientation</a></li>\n              <li><a href=\"https://mozdevs.github.io/html5-games-workshop/en/guides/platformer/start-here/\">2D platform game using Phaser</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Publishing games</summary>\n            <ol>\n              <li><a href=\"/ru/docs/Games/Publishing_games\">Publishing games overview</a></li>\n              <li><a href=\"/ru/docs/Games/Publishing_games/Game_distribution\">Game distribution</a></li>\n              <li><a href=\"/ru/docs/Games/Publishing_games/Game_promotion\">Game promotion</a></li>\n              <li><a href=\"/ru/docs/Games/Publishing_games/Game_monetization\">Game monetization</a></li>\n            </ol>\n        </details>\n    </li>\n  </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div id=\"sect1\"></div>\n\n<p class=\"summary\">В 3D сцене любой игры, даже самой простой, есть стандартные сущности, такие как поверхности, расположенные в координатной системе, камера, для того, чтобы их видеть, света и материалы, для того, чтобы они лучше выглядели, анимации, чтобы их оживить и тд.<strong> Three.js</strong>, как и любая другая 3D библиотека, предоставляет встроенные функции, которые помогут вам в реализации 3D. <span class=\"seoSummary\">В этой статье мы покажем вам основы использования Three, включая настройку среды, структуру необходимого HTML, фундаментальные объекты Three и как создать простейшую сцену.</span></p>\n\n<div class=\"note notecard\" id=\"sect2\">\n<p><strong>На заметку</strong>: Мы выбрали Three, потому что это одна из самых популярных <a href=\"/en-US/docs/Web/API/WebGL_API\">WebGL</a> библиотек и она достаточно проста в освоении. Это не значит, что она самая лучшая, вы можете выбрать любую другую, например <a href=\"http://www.ambiera.com/copperlicht/index.html\" class=\"external\" rel=\" noopener\">CopperLicht</a>, <a href=\"http://www.glge.org/\" class=\"external\" rel=\" noopener\">GLGE</a>, <a href=\"https://code.google.com/p/o3d/\" class=\"external\" rel=\" noopener\">O3D</a> и тд.</p>\n</div>"}},{"type":"prose","value":{"id":"настройка_среды","title":"Настройка среды","isH3":false,"content":"<p>Чтобы начать разработку с Three.js, нужно:</p>\n\n<ul>\n <li>Удостовериться, что вы используете современную версию браузера с поддержкой <a href=\"/en-US/docs/Web/API/WebGL_API\">WebGL</a>, например, Firefox или Chrome.</li>\n <li>Создать папку для экспериментов.</li>\n <li>Сохранить копию <a href=\"https://threejs.org/build/three.min.js\" class=\"external\" rel=\" noopener\">последней версии библиотеки Three.js</a> в вашей папке.</li>\n <li>Открыть <a href=\"https://threejs.org/docs/\" class=\"external\" rel=\" noopener\">документацию Three.js</a> в отдельной вкладке.</li>\n</ul>"}},{"type":"prose","value":{"id":"html_структура","title":"HTML структура","isH3":false,"content":"<p>Здесь находится HTML структура, которую мы будем использовать:</p>\n\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>MDN Games: Three.js demo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token style\"><span class=\"token language-css\">\n\t\t<span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token selector\">canvas</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>three.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n\t<span class=\"token keyword\">var</span> <span class=\"token constant\">WIDTH</span> <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">var</span> <span class=\"token constant\">HEIGHT</span> <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>innerHeight<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/* весь наш JavaScript-код будет после этого комментария */</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n\n<p>Она содержит основную информацию: <a href=\"/ru/docs/Web/HTML/Element/title\"><code>&lt;title&gt;</code></a>, CSS, чтобы сделать <code>ширину</code> и <code>высоту</code> <a href=\"/ru/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a> элемента равным странице. В первом элементе <a href=\"/ru/docs/Web/HTML/Element/script\"><code>&lt;script&gt;</code></a> мы подключаем Three.js, во втором будем писать наш код, в котором уже создали 2 переменные для хранения <code>width</code> и <code>height</code>.</p>\n\n<p>Прежде чем продолжить, скопируйте этот код в новый файл и сохраните в вашей рабочей директории под именем <code>index.html</code>.</p>"}},{"type":"prose","value":{"id":"renderer","title":"Renderer","isH3":false,"content":"<p>Renderer это инструмент для отрисовки сцены в браузере. Есть 2 вида таких инструментов: WebGL по умолчанию, другие - Canvas, SVG, CSS, и DOM. Они различаются по тому как все рендерится. Несмотря на различия в них, для пользователя все будет выглядеть одинаково. Поэтому, вы можете выбрать запасной вариант на случай, если браузер пользователя не поддерживает выбранную вами технологию.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> renderer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>WebGLRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">antialias</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrenderer<span class=\"token punctuation\">.</span><span class=\"token function\">setSize</span><span class=\"token punctuation\">(</span><span class=\"token constant\">WIDTH</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">HEIGHT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrenderer<span class=\"token punctuation\">.</span><span class=\"token function\">setClearColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xDDDDDD</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>renderer<span class=\"token punctuation\">.</span>domElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Создаём новый WebGL renderer, устанавливаем размер так, чтобы он занимал все пространство страницы, прикрепляем DOM-элемент к странице. Вы могли заметить параметр <code>antialias</code> в первой строке — если он установлен в <code>true</code>, то границы объектов сглаживаются. Метод <code>setClearColor()</code> устанавливает цвет фона (мы установили в 0xDDDDDD, светло-серый, значение по умолчанию - чёрный).</p>\n\n<p>Добавьте этот код в ваш элемент <a href=\"/ru/docs/Web/HTML/Element/script\"><code>&lt;script&gt;</code></a>.</p>"}},{"type":"prose","value":{"id":"сцена","title":"Сцена","isH3":false,"content":"<p>Сцена (scene) это место, где все происходит. Когда создаются новые объекты, они добавляются в сцену, чтобы их можно было увидеть. В three.js роль сцены выполняет объект <code>Scene</code>. Давайте создадим его, добавив следующих код:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> scene <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Scene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Позже, мы будем использовать метод <code>.add()</code> для добавления объектов в сцену.</p>"}},{"type":"prose","value":{"id":"камера","title":"Камера","isH3":false,"content":"<p>У нас есть сцена, теперь необходимо создать камеру. С помощью следующих строк мы добавим камеру, установим её позицию в координатной системе и направим её на нужную нам точку, где расположено то, что мы хотим видеть:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> camera <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>PerspectiveCamera</span><span class=\"token punctuation\">(</span><span class=\"token number\">70</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">WIDTH</span><span class=\"token operator\">/</span><span class=\"token constant\">HEIGHT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncamera<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span>\nscene<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>camera<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Добавьте следующий код в программу.</p>\n\n<p>Существует несколько типов камер: кубическая (Cube), ортографическая (Orthographic), но самая простая - перспективная (Perspective). Чтобы инициализировать её, нужно установить угол обзора и соотношение сторон: Первое нужно для указания того, как широко мы видим, последний для того, чтобы эти объекты имели правильные пропорции. Объясним поподробнее, что означают числа, что мы установили:</p>\n\n<ul>\n <li>Мы установили поле зрения в 70, с этим можно поэкспериментировать: чем больше число, тем больше угол обзора, тем шире мы видим. Представьте обычную камеру и камеру с эффектом fish eye, Которая позволяет увидеть больше. Значение по умолчанию 50.</li>\n <li>Соотношение сторон установлено в соотношение сторон окна браузера. Можно установить, например, в 16 ⁄ 9. Значение по умолчанию 1.</li>\n <li>Координата <code>z</code>, равная 50, это дистанция от камеры до начала координат сцены вдоль оси <code>z</code>. Мы установили такое значение, чтобы увидеть объекты в сцене. Значения <code>x</code> и <code>y</code> по умолчанию равны 0.</li>\n</ul>\n\n<p>Стоит поэкспериментировать с этими значениями, чтобы лучше разобраться в том, как они влияют на отрисовку сцены.</p>\n\n<div class=\"note notecard\" id=\"sect3\">\n<p><strong>На заметку</strong>: значения позиции  (например координата z) безразмерны, устанавливайте их так, чтобы вам было удобно с ними работать.</p>\n</div>"}},{"type":"prose","value":{"id":"отрисовка_сцены","title":"Отрисовка сцены","isH3":false,"content":"<p>Всё уже готово, но мы пока что ничего не видим. Хотя мы настроили рендерер, нам всё равно нужно запустить рендеринг. Функция <code>render()</code> выполнит эту работу с небольшой помощью <code><a href=\"/en-US/docs/Web/API/window/requestAnimationFrame\">requestAnimationFrame()</a></code>, которая заставляет сцену постоянно перерисовываться в каждом кадре:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>render<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\trenderer<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>scene<span class=\"token punctuation\">,</span> camera<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>На каждом новом кадре вызывается функция <code>render()</code>, а <code>renderer</code> рендерит <code>scene</code> и <code>camera</code>. Сразу после объявления функции мы в первый раз вызываем её, чтобы запустить цикл, после чего он будет использоваться бесконечно.</p>\n\n<p>Ещё раз, добавьте этот новый код ниже ваших предыдущих дополнений. Попробуйте сохранить файл и открыть его в браузере. Теперь вы должны увидеть серое окно. Поздравляем!</p>"}},{"type":"prose","value":{"id":"geometry","title":"Geometry","isH3":false,"content":"<p>Now our scene is properly rendering, we can start adding 3D shapes. To speed up development, Three.js provides a bunch of predefined primitives, which you can use to create shapes instantly in a single line of code. There's cubes, spheres, cylinders, and more complicated shapes available. Detail like drawing required vertices and faces, for a given shape, is handled by the Three framework, so we can focus on higher level coding. Let's start, by defining the geometry for a cube shape, adding the following just above the <code>render()</code> function:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> boxGeometry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>BoxGeometry</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>In this case, we define a simple cube that is 10 x 10 x 10 units. The geometry itself is not enough though, we also need a material that will be used for our shape.</p>"}},{"type":"prose","value":{"id":"material","title":"Material","isH3":false,"content":"<p>A material is what covers an object, the colors, or textures on its surface. In our case, we will choose a simple blue color to paint our box. There are a number of predefined materials which can be used: Basic, Phong, Lambert. Let's play with the last two later, but for now, the Basic one should be enough:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> basicMaterial <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>MeshBasicMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token number\">0x0095DD</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Add this line below the previously added.</p>\n\n<p>Our material is now ready, what next?</p>"}},{"type":"prose","value":{"id":"mesh","title":"Mesh","isH3":false,"content":"<p>To apply the material to a geometry, a mesh is used. This takes on a shape, and adds the specified material to every face:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> cube <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Mesh</span><span class=\"token punctuation\">(</span>boxGeometry<span class=\"token punctuation\">,</span> basicMaterial<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Again, add this line below the one you previously added.</p>"}},{"type":"prose","value":{"id":"добавление_куба_в_сцену","title":"Добавление куба в сцену","isH3":false,"content":"<p>Сейчас мы создали куб, используя 'geometry' и 'material'. Последнее, что мы должны сделать - добавить куб на сцену. Добавьте в код эту строку:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>scene<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cube<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Если вы сохраните код и обновите вкладку браузера, вы увидите квадрат, а не куб, потому, что он стоит ровно напротив камеры и мы видим только одну сторону. У объектов есть полезное свойство - мы можем изменять их как хотим. Например, вы можете вращать его и масштабировать, сколько угодно. Что давайте немного повернём его, чтобы видеть больше сторон.  Добавить в конец кода эту строку:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>cube<span class=\"token punctuation\">.</span>rotation<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Поздравляю, вы создали объект в 3D-среде! This might have proven easier than you first thought? Here's how it should look:</p>\n\n<p><img alt=\"Blue cube on a gray background rendered with Three.js.\" src=\"https://mdn.mozillademos.org/files/11849/cube.png\" style=\"display: block; margin: 0px auto;\" loading=\"lazy\"></p>\n\n<p>Весь код который мы создали:</p>\n\n<p></p><p><iframe allowfullscreen=\"allowfullscreen\" width=\"756\" height=\"350\" src=\"https://jsfiddle.net/end3r/bwup75fa/embedded/\" loading=\"lazy\"></iframe></p><p></p>\n\n<p>Вы также можете <a href=\"https://github.com/end3r/MDN-Games-3D/blob/gh-pages/Three.js/cube.html\" class=\"external\" rel=\" noopener\">просмотреть на GitHub</a>.</p>"}},{"type":"prose","value":{"id":"more_shapes_and_materials","title":"More shapes and materials","isH3":false,"content":"<p>Now we will add more shapes to the scene, and explore other shapes, materials, lighting, and more. Let's move the cube to the left, to make space for some friends. Adding the following line just below the previous one:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>cube<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">25</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Now onto more shapes and materials. What might you input to add a torus, wrapped in the Phong material? Try adding the following lines, just below the lines defining the cube.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> torusGeometry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>TorusGeometry</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> phongMaterial <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>MeshPhongMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token number\">0xFF9500</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> torus <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Mesh</span><span class=\"token punctuation\">(</span>torusGeometry<span class=\"token punctuation\">,</span> phongMaterial<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nscene<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>torus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>These lines will add a torus geometry; the <code>TorusGeometry()</code> method's parameters define, and the parameters are <code>radius</code>, <code>tube diameter</code>, <code>radial segment count</code>, and <code>tubular segment count</code>. The Phong material should look more glossy than the box's simple Basic material, though right now our torus will just look black.</p>\n\n<p>We can choose more fun predefined shapes. Let's play some more. Add the following lines, below those defining the torus:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> dodecahedronGeometry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>DodecahedronGeometry</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> lambertMaterial <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>MeshLambertMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token number\">0xEAEFF2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> dodecahedron <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Mesh</span><span class=\"token punctuation\">(</span>dodecahedronGeometry<span class=\"token punctuation\">,</span> lambertMaterial<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndodecahedron<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span>\nscene<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>dodecahedron<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>This time, we are creating a dodecahedron, a shape containing twelve flat faces. The parameter, <code>DodecahedronGeometry(),</code> defines the size of the object. We're using a Lambert material, similar to Phong, but should be less glossy. Again it's black, for now. We're moving the object to the right, so it's not in the same position as the box, or torus.</p>\n\n<p>As mentioned above, the new objects currently just look black. To have both, the Phong and Lambert materials properly visible, we need to introduce a source of light.</p>"}},{"type":"prose","value":{"id":"lights","title":"Lights","isH3":false,"content":"<p>There are various types of light sources available in Three.js. The most basic is <code>PointLight</code>, which works like a flashlight, shining a spotlight in a defined direction. Add the following lines, below your shape definitions:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> light <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>PointLight</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFFFFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlight<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nscene<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>light<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>We define a white point of light, set its position a little away from the center of the scene, so it can light up some parts of the shapes, finally adding it to the scene. Now everything works as it should, all three shapes are visible. You should check the documentation for other types of lights, like Ambient, Directional, Hemisphere, or Spot. Experiment placing them on our scene, to see how they affect it.</p>\n\n<p><img alt=\"Shapes: blue cube, dark yellow torus and dark gray dodecahedron on a gray background rendered with Three.js.\" src=\"https://mdn.mozillademos.org/files/11851/shapes.png\" loading=\"lazy\"></p>\n\n<p>This looks a little boring though. In a game, something is usually happening. We might see animations and such. So let's try breathing a little life into these shapes, by animating them!</p>"}},{"type":"prose","value":{"id":"анимация","title":"Анимация","isH3":false,"content":"<p>Мы можем использовать 'rotation', чтобы поменять положение куба. Также мы можем масштабировать фигуры или изменять их положение. Чтобы создать анимацию нужно внесённые изменения внести в цикл рендеринга, чтобы изменения происходили в каждом кадре.</p>"}},{"type":"prose","value":{"id":"вращение","title":"Вращение","isH3":true,"content":"<p>Вращать фигуры просто. Вы просто добавляете или отнимаете значение по оси вращения. Добавьте эту строку кода сразу после: <code>requestAnimationFrame()</code> invocation inside the <code>render</code> function:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>cube<span class=\"token punctuation\">.</span>rotation<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+=</span> <span class=\"token number\">0.01</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>This rotates the cube on every frame, by a tiny bit, so the animation looks smooth.</p>"}},{"type":"prose","value":{"id":"scaling","title":"Scaling","isH3":true,"content":"<p>We can also scale an object. Applying a constant value, we would make it grow, or shrink just once. Let's make things more interesting. First, we implement a helper variable, called <code>t,</code> for counting elapsed time. Add it right before the <code>render()</code> function:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> t <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Now let's increase the value by a given constant value, on each frame of the animation. Add the following lines, just below the <code>requestAnimationFrame()</code> invocation:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>t <span class=\"token operator\">+=</span> <span class=\"token number\">0.01</span><span class=\"token punctuation\">;</span>\ntorus<span class=\"token punctuation\">.</span>scale<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>We use <code>Math.sin</code>, ending up with quite an interesting result. This scales the torus, repeating the process, as <code>sin</code> is a periodic function. We're wrapping the scale value in <code>Math.abs</code>, to pass the absolute values, greater or equal to 0. As sin is between -1 and 1,  negative values might render out torus in unexpected way. In this case it looks black half the time.</p>\n\n<p>Now, onto movement.</p>"}},{"type":"prose","value":{"id":"moving","title":"Moving","isH3":true,"content":"<p>Aside from rotation, and scaling, we can additionally move objects around the scene. Add the following, again just below our <code>requestAnimationFrame()</code> invocation:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>dodecahedron<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">7</span><span class=\"token operator\">*</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>This will move the dodecahedron up and down, by applying the <code>sin()</code> value to the y axis on each frame, and a little adjustment to make it look cooler. Try changing these values, to see how it affects the animations.</p>"}},{"type":"prose","value":{"id":"conclusion","title":"Conclusion","isH3":false,"content":"<p>Here's the final code:</p>\n\n<p></p><p><iframe allowfullscreen=\"allowfullscreen\" width=\"756\" height=\"350\" src=\"https://jsfiddle.net/rybr720u/embedded/\" loading=\"lazy\"></iframe></p><p></p>\n\n<p>You can also <a href=\"https://github.com/end3r/MDN-Games-3D/blob/gh-pages/Three.js/shapes.html\" class=\"external\" rel=\" noopener\">see it on GitHub</a> and <a href=\"https://github.com/end3r/MDN-Games-3D/\" class=\"external\" rel=\" noopener\">fork the repository</a>, if you want to play with it locally. Now you understand the basics of Three.js, you can jump back to the parent page, <a href=\"/en-US/docs/Games/Techniques/3D_on_the_web\">3D on the Web</a>.</p>\n\n<p>You could also try learning raw WebGL, to gain a better understanding of what's going on underneath. See our <a href=\"/en-US/docs/Web/API/WebGL_API\">WebGL documentation</a>.</p>"}}],"toc":[{"text":"Настройка среды","id":"настройка_среды"},{"text":"HTML структура","id":"html_структура"},{"text":"Renderer","id":"renderer"},{"text":"Сцена","id":"сцена"},{"text":"Камера","id":"камера"},{"text":"Отрисовка сцены","id":"отрисовка_сцены"},{"text":"Geometry","id":"geometry"},{"text":"Material","id":"material"},{"text":"Mesh","id":"mesh"},{"text":"Добавление куба в сцену","id":"добавление_куба_в_сцену"},{"text":"More shapes and materials","id":"more_shapes_and_materials"},{"text":"Lights","id":"lights"},{"text":"Анимация","id":"анимация"},{"text":"Conclusion","id":"conclusion"}],"summary":"В 3D сцене любой игры, даже самой простой, есть стандартные сущности, такие как поверхности, расположенные в координатной системе, камера, для того, чтобы их видеть, света и материалы, для того, чтобы они лучше выглядели, анимации, чтобы их оживить и тд. Three.js, как и любая другая 3D библиотека, предоставляет встроенные функции, которые помогут вам в реализации 3D. В этой статье мы покажем вам основы использования Three, включая настройку среды, структуру необходимого HTML, фундаментальные объекты Three и как создать простейшую сцену.В этой статье мы покажем вам основы использования Three, включая настройку среды, структуру необходимого HTML, фундаментальные объекты Three и как создать простейшую сцену.","popularity":0.0004,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Building up a basic demo with Three.js","locale":"en-US","native":"English (US)"},{"title":"Building up a basic demo with Three.js","locale":"fr","native":"Français"},{"title":"Three.js を使った基本的なデモの作成","locale":"ja","native":"日本語"},{"title":"Building up a basic demo with Three.js","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ru/games/techniques/3d_on_the_web/building_up_a_basic_demo_with_three.js","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/games/techniques/3d_on_the_web/building_up_a_basic_demo_with_three.js/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Games","title":"Разработка игр"},{"uri":"/ru/docs/Games/Techniques","title":"Techniques for game development"},{"uri":"/ru/docs/Games/Techniques/3D_on_the_web","title":"3D games on the Web"},{"uri":"/ru/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_Three.js","title":"Создание простой сцены с помощью Three.js"}],"pageTitle":"Создание простой сцены с помощью Three.js - Разработка игр | MDN","noIndexing":false}}