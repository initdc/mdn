{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Асинхронные скрипты для asm.js","mdn_url":"/ru/docs/Games/Techniques/Async_scripts","locale":"ru","native":"Русский","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div id=\"sect1\">\n<p><font><font>Каждая средняя или большая игра должна компилировать </font><font>код </font></font><a href=\"/en-US/docs/Games/Tools/asm.js\"><font><font>asm.js</font></font></a><font><font> как часть асинхронного скрипта, чтобы дать браузеру максимальную гибкость для оптимизации процесса компиляции. </font><font>В Gecko асинхронная компиляция позволяет движку JavaScript компилировать asm.js из основного потока когда игра загружается, и кешировать сгенерированный машинный код, так что игру не нужно компилировать при последующих загрузках (начиная с Firefox 28) , </font><font>Чтобы увидеть разницу, переключите </font></font><code>javascript.options.parallel_parsing</code><font><font>в </font></font><code>about:config</code><font><font>.</font></font></p>\n</div>"}},{"type":"prose","value":{"id":"написание_асинхронного_скрипта","title":"<font><font> Написание асинхронного скрипта</font></font>","isH3":false,"content":"<p><font><font>Получить асинхронную компиляцию легко: при написании JavaScript просто используйте </font></font><code>async</code><font><font>атрибут следующим образом:</font></font></p>\n\n<pre class=\"notranslate\"><code>&lt;script async src=\"file.js\"&gt;&lt;/script&gt;</code></pre>\n\n<p><font><font>или, чтобы сделать то же самое через скрипт:</font></font></p>\n\n<pre class=\"notranslate\"><code>var script = document.createElement('script');\nscript.src = \"file.js\";\ndocument.body.appendChild(script);</code></pre>\n\n<p><font><font>(скрипты создаются из скрипта по умолчанию </font></font><code>async</code><font><font>.) Стандартная оболочка HTML, которую генерирует Emscripten, создаёт последнее.</font></font></p>","titleAsText":" Написание асинхронного скрипта"}},{"type":"prose","value":{"id":"когда_асинхронный_не_асинхронный","title":"<font><font>Когда асинхронный не асинхронный?</font></font>","isH3":false,"content":"<p><font><font>Две распространённые ситуации, в которых сценарий * не * асинхронен (как </font></font><a href=\"https://www.w3.org/TR/html5/scripting-1.html\" class=\"external\" rel=\" noopener\"><font><font>определено спецификацией HTML</font></font></a><font><font> ):</font></font></p>\n\n<pre class=\"notranslate\"><code>&lt;script async&gt;code&lt;/script&gt;</code></pre>\n\n<p><font><font>а также</font></font></p>\n\n<pre class=\"notranslate\"><code>var script = document.createElement('script');\nscript.innerHTML = \"code\";\ndocument.body.appendChild(script);</code></pre>\n\n<p><font><font>Оба считаются «встроенными» скриптами, компилируются и запускаются сразу</font></font></p>\n\n<p><font><font>Что если ваш код находится в строке JS? </font><font>Вместо использования </font></font><code>eval</code><font><font>или </font></font><code>innerHTML</code><font><font>, оба из которых запускают синхронную компиляцию, вы должны использовать BLOB-объект с URL объекта:</font></font></p>\n\n<pre class=\"notranslate\"><code>var blob = new Blob([codeString]);\nvar script = document.createElement('script');\nvar url = URL.createObjectURL(blob);\nscript.onload = script.onerror = function() { URL.revokeObjectURL(url); };\nscript.src = url;\ndocument.body.appendChild(script);</code></pre>\n\n<p><font><font>Настройка </font></font><code>src</code><font><font>вместо настройки </font></font><code>innerHTML </code><font><font>делает этот скрипт асинхронным.</font></font></p>","titleAsText":"Когда асинхронный не асинхронный?"}}],"toc":[{"text":"<font><font> Написание асинхронного скрипта</font></font>","id":"написание_асинхронного_скрипта"},{"text":"<font><font>Когда асинхронный не асинхронный?</font></font>","id":"когда_асинхронный_не_асинхронный"}],"summary":"Каждая средняя или большая игра должна компилировать код asm.js как часть асинхронного скрипта, чтобы дать браузеру максимальную гибкость для оптимизации процесса компиляции. В Gecko асинхронная компиляция позволяет движку JavaScript компилировать asm.js из основного потока когда игра загружается, и кешировать сгенерированный машинный код, так что игру не нужно компилировать при последующих загрузках (начиная с Firefox 28) , Чтобы увидеть разницу, переключите javascript.options.parallel_parsingв about:config.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Async scripts for asm.js","locale":"en-US","native":"English (US)"},{"title":"asm.js の非同期スクリプト","locale":"ja","native":"日本語"},{"title":"asm.js 的异步脚本","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ru/games/techniques/async_scripts","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/games/techniques/async_scripts/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Games","title":"Разработка игр"},{"uri":"/ru/docs/Games/Techniques","title":"Techniques for game development"},{"uri":"/ru/docs/Games/Techniques/Async_scripts","title":"Асинхронные скрипты для asm.js"}],"pageTitle":"Асинхронные скрипты для asm.js - Разработка игр | MDN","noIndexing":false}}