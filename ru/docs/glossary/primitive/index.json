{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Primitive","mdn_url":"/ru/docs/Glossary/Primitive","locale":"ru","native":"Русский","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong>Примитив</strong> (значение примитивного типа, примитивный тип данных) это данные, которые не являются <a href=\"/ru/docs/Glossary/Object\">объектом</a> и не имеют <a href=\"/ru/docs/Glossary/Method\">методов</a>. В <a href=\"/ru/docs/Glossary/JavaScript\">JavaScript</a> 7 простых типов данных: <a href=\"/ru/docs/Glossary/String\">string</a>, <a href=\"/ru/docs/Glossary/Number\">number</a>, <a href=\"/ru/docs/Glossary/Boolean\">boolean</a>, <a href=\"/ru/docs/Glossary/Null\">null</a>, <a href=\"/ru/docs/Glossary/undefined\">undefined</a>, <a href=\"/ru/docs/conflicting/Web/JavaScript/Reference/Global_Objects/Symbol\">symbol</a> (новое в <a href=\"/ru/docs/Glossary/ECMAScript\">ECMAScript</a> 2015), <a href=\"/ru/docs/Glossary/BigInt\">bigint</a>.</p>\n\n<p>Чаще всего значение примитивного типа представлено в низкоуровневой реализации языка.</p>\n\n<p>Все<strong> </strong>примитивы <strong>неизменяемы (immutable)</strong>, то есть они не могут быть изменены. <span id=\"result_box\" lang=\"ru\"><span>Важно не путать сам примитив с переменной, которой присвоено значение примитивного типа.</span> <span>Переменной может быть переприсвоено новое значение, но существующее значение примитивного типа не может быть изменено подобно объектам, массивам и функциям.</span></span></p>"}},{"type":"prose","value":{"id":"пример","title":"Пример","isH3":false,"content":"<p><span id=\"result_box\" lang=\"ru\"><span>Этот пример поможет понять, что значения примитивных типов неизменяемы </span></span><strong>(immutable)</strong><span lang=\"ru\"><span>.</span></span></p>"}},{"type":"prose","value":{"id":"javascript","title":"JavaScript","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Using a string method doesn't mutate the string</span>\n<span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token string\">\"baz\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// baz</span>\nbar<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// baz</span>\n\n<span class=\"token comment\">// Using an array method mutates the array</span>\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// []</span>\nfoo<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"plugh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// [\"plugh\"]</span>\n\n<span class=\"token comment\">// Assignment gives the primitive a new (not a mutated) value</span>\nbar <span class=\"token operator\">=</span> bar<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// BAZ</span>\n</code></pre></div>\n\n<p><span id=\"result_box\" lang=\"ru\"><span>Примитив может быть заменён, но он не может быть напрямую изменён.</span></span></p>"}},{"type":"prose","value":{"id":"другой_пример_step-by-step","title":"Другой пример [ Step-by-step ]","isH3":false,"content":"<p><span id=\"result_box\" lang=\"ru\"><span>Следующий пример поможет разобраться как JavaScript </span></span><span lang=\"ru\"><span>работает с примитивами.</span></span></p>"}},{"type":"prose","value":{"id":"javascript_2","title":"<span class=\"highlight-span\">JavaScript</span>","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js line-numbers  language-js notranslate\"><code><span class=\"token comment\">// The Primitive</span>\n<span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Defining a function that should change the Primitive value</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">addTwo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   num <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Another function trying to do the same thing</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">addTwo_v2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">foo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   foo <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Calling our first function while passing our Primitive as an argument</span>\n<span class=\"token function\">addTwo</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Getting the current Primitive value</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 5</span>\n\n<span class=\"token comment\">// Trying again with our second function...</span>\n<span class=\"token function\">addTwo_v2</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 5</span>\n</code></pre></div>\n\n<p><span id=\"result_box\" lang=\"ru\"><span>Вы ожидали, что будет 7 вместо 5?</span> <span>Если так, тогда прочитайте, как работает этот код:</span></span></p>\n\n<ul>\n <li>При вызове обеих функций <code>addTwo</code> <code>и addTwo_v2</code>, JavaScript ищет <span class=\"short_text\" id=\"result_box\" lang=\"ru\"><span>значение для идентификатора</span></span> <code>foo</code>. JavaScript <span id=\"result_box\" lang=\"ru\"><span>правильно определяет нашу переменную, созданную с помощью первого оператора</span></span></li>\n <li><span id=\"result_box\" lang=\"ru\"><span>После этого JavaScript передаёт найденный аргумент в функцию в качестве параметра</span></span></li>\n <li>Перед выполнением операторов в теле функции, <strong>JavaScript берёт исходный переданный аргумент </strong>(который является примитивом) и создаёт его локальную копию. <span id=\"result_box\" lang=\"ru\"><span>Эти копии, существующие только внутри областей функций, доступны через идентификаторы, указанные в определениях функций</span></span> (<code>num</code> для <code>addTwo</code>, <font face=\"consolas, Liberation Mono, courier, monospace\"><span style=\"background-color: rgba(220, 220, 220, 0.5);\">foo</span></font> для <code>addTwo_v2</code>)</li>\n <li><span class=\"short_text\" id=\"result_box\" lang=\"ru\"><span>Затем выполняются операторы функций</span></span>:\n  <ul>\n   <li>В первой функции был создан локальный аргумент <code>num</code>. <span id=\"result_box\" lang=\"ru\"><span>Мы увеличиваем его значение на 2</span></span> (а не значение исходной переменной <code>foo</code>).</li>\n   <li>Во второй функции был создан локальный аргумент<code> foo</code>. Мы увеличиваем его значение на 2 (а не значение исходной (внешней) переменной <code>foo</code>).  <span id=\"result_box\" lang=\"ru\"><span>Кроме того, в этой ситуации, внешняя переменная</span></span> <code>foo</code> является недоступной <strong>никаким</strong> способом. Это связано с лексическими областями JavaScript и, как следствие, с затенением переменных. Локальная переменная <code>foo</code> скрывает внешнюю переменную <code>foo</code>. Чтобы получить больше информации, смотри <a href=\"/en-US/docs/Web/JavaScript/Closures\">Closures</a>.</li>\n  </ul>\n </li>\n <li>Таким образом, никакие изменения внутри наших функций <strong>не будут</strong> влиять на ИСХОДНУЮ <code>foo</code> вообще, так как мы работаем с её <strong>копиями</strong></li>\n</ul>\n\n<p><span id=\"result_box\" lang=\"ru\"><span>Вот почему примитивы неизменяемы </span></span><strong>(immutable)</strong><span lang=\"ru\"><span>.</span> <span>Потому что мы не работаем над ними напрямую. Мы создаём копию и продолжаем работать с ней, не касаясь исходных значений.</span></span></p>","titleAsText":"JavaScript"}},{"type":"prose","value":{"id":"обёртки_примитивных_типов_в_javascript","title":"Обёртки примитивных типов в JavaScript","isH3":false,"content":"<p>За исключением <code>null</code> и <code>undefined</code>, все примитивные значения имеют объектный аналог, который оборачивает значение примитивного типа:</p>\n\n<ul>\n <li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> для string примитива.</li>\n <li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> для number примитива.</li>\n <li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> для bigint примитива.</li>\n <li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> для boolean примитива.</li>\n <li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> для symbol примитива.</li>\n</ul>\n\n<p>Метод <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>valueOf()</code></a> типа обёртки возвращает значение примитивного типа.</p>"}},{"type":"prose","value":{"id":"смотрите_также","title":"Смотрите также","isH3":false,"content":""}},{"type":"prose","value":{"id":"общие_сведения","title":"Общие сведения","isH3":true,"content":"<ul>\n <li><a href=\"/en-US/docs/Web/JavaScript/Data_structures\">Введение в типы данных JavaScript</a></li>\n <li> <a href=\"https://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%B8%D0%BC%D0%B8%D1%82%D0%B8%D0%B2%D0%BD%D1%8B%D0%B9_%D1%82%D0%B8%D0%BF\" class=\"external\" rel=\" noopener\">Примитивный тип</a> на Wikipedia</li>\n</ul>"}}],"toc":[{"text":"Пример","id":"пример"},{"text":"Другой пример [ Step-by-step ]","id":"другой_пример_step-by-step"},{"text":"Обёртки примитивных типов в JavaScript","id":"обёртки_примитивных_типов_в_javascript"},{"text":"Смотрите также","id":"смотрите_также"}],"summary":"Примитив (значение примитивного типа, примитивный тип данных) это данные, которые не являются объектом и не имеют методов. В JavaScript 7 простых типов данных: string, number, boolean, null, undefined, symbol (новое в ECMAScript 2015), bigint.","popularity":0.0006,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Primitive","locale":"en-US","native":"English (US)"},{"title":"Primitivo","locale":"es","native":"Español"},{"title":"Primitive","locale":"fr","native":"Français"},{"title":"Primitive (プリミティブ)","locale":"ja","native":"日本語"},{"title":"원시 값","locale":"ko","native":"한국어"},{"title":"Primitivo","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"基本类型","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ru/glossary/primitive","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/glossary/primitive/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Glossary","title":"Глоссарий"},{"uri":"/ru/docs/Glossary/Primitive","title":"Primitive"}],"pageTitle":"Primitive - Глоссарий | MDN","noIndexing":false}}