{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Оптимизация ваших страниц для рискованного парсинга","mdn_url":"/ru/docs/Glossary/speculative_parsing","locale":"ru","native":"Русский","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Традиционно, HTML-парсер в браузерах работает на главной ветке и блокируется после тега <code>&lt;/script&gt;</code>, пока скрипт не загрузится и не выполнится. HTML-парсер в Firefox 4 и новее поддерживает рискованный парсинг вне главной ветки. Он продолжает парсить, пока скрипты загружаются и выполняются. В Firefox 3.5 и 3.6 парсер начинает рискованную загрузку скриптов, стилей и изображений, когда он находит их. Однако, в Firefox 4 и новее HTML-парсер также рискованно загружает алгоритм постройки дерева HTML. С одной стороны, когда риск оправдался, нет необходимости в репарсинге части, которая уже была просканирована на скрипты, стили и изображения. С другой стороны, когда риск не оправдался, HTML-парсеру достаётся больше работы.</p>\n\n<p>Эта статья поможет избежать некоторых проблем, которые замедляют загрузку страницы.</p>"}},{"type":"prose","value":{"id":"делаем_рискованную_загрузку_успешной","title":"Делаем рискованную загрузку успешной","isH3":false,"content":"<p>Есть только одно правило, чтобы сделать рискованную загрузку скриптов, стилей и изображений успешной:</p>\n\n<ul>\n <li>Если вы используете элемент <code>&lt;base&gt;</code>, чтобы заменить основной URI страницы, поместите этот элемент в часть страницы без скриптов. Не добавляйте его с помощью <code>document.write()</code> или <code>document.createElement()</code>.</li>\n</ul>"}},{"type":"prose","value":{"id":"как_избежать_перестройки_дерева_страницы","title":"Как избежать перестройки дерева страницы","isH3":false,"content":"<p>Рискованное построение дерева терпит неудачу в случае, когда функция <code>document.write() </code>изменяет состояния построителя дерева так, что то рискованное состояние после тега <code>&lt;/script&gt; </code>более не остаётся прежним после того, как весь контент, добавленный через <code>document.write(),</code> будет распарсен. Только несколько необычных применений <code>document.write()</code> вызывают эту проблему. Вот, чего необходимо избегать:</p>\n\n<ul>\n <li>Не пишите незаконченные древа. Вместо <code>&lt;script&gt;document.write(\"&lt;div&gt;\");&lt;/script&gt;</code> лучше написать <code>&lt;script&gt;document.write(\"&lt;div&gt;&lt;/div&gt;\");&lt;/script&gt;</code>.</li>\n <li>Не пишите незаконченные теги. Не стоит писать <code>&lt;script&gt;document.write(\"&lt;div&gt;&lt;/div\");&lt;/script&gt;</code>.</li>\n <li>Не заканчивайте строку возрастной кареткой (<code>\\r</code>). Вместо <code>&lt;script&gt;document.write(\"Hello World!\\r\");&lt;/script&gt;</code> лучше написать <code>&lt;script&gt;document.write(\"Hello World!\\n\");&lt;/script&gt;</code>.</li>\n <li>Заметьте, что написание законченных тегов может повлиять на другие теги так, что они станут незаконченными. В том числе, <code>&lt;script&gt;document.write(\"&lt;div&gt;&lt;/div&gt;\");&lt;/script&gt;</code> внутри <code>&lt;head&gt;</code> будет интерпретировано как <code>&lt;script&gt;document.write(\"&lt;/head&gt;&lt;body&gt;&lt;div&gt;&lt;/div&gt;\");&lt;/script&gt;</code>, что повлияет на <code>&lt;head&gt;</code> так, что он станет незаконченным.</li>\n <li>Не форматируйте часть таблицы. Вместо <code>&lt;table&gt;&lt;script&gt;document.write(\"&lt;tr&gt;&lt;td&gt;Hello World!&lt;/td&gt;&lt;/tr&gt;\");&lt;/script&gt;&lt;/table&gt;</code> лучше написать <code>&lt;script&gt;document.write(\"</code><code>&lt;table&gt;</code><code>&lt;tr&gt;&lt;td&gt;Hello World!&lt;/td&gt;&lt;/tr&gt;</code><code>&lt;/table&gt;</code><code>\");&lt;/script&gt;</code>.</li>\n</ul>"}}],"toc":[{"text":"Делаем рискованную загрузку успешной","id":"делаем_рискованную_загрузку_успешной"},{"text":"Как избежать перестройки дерева страницы","id":"как_избежать_перестройки_дерева_страницы"}],"summary":"Традиционно, HTML-парсер в браузерах работает на главной ветке и блокируется после тега </script>, пока скрипт не загрузится и не выполнится. HTML-парсер в Firefox 4 и новее поддерживает рискованный парсинг вне главной ветки. Он продолжает парсить, пока скрипты загружаются и выполняются. В Firefox 3.5 и 3.6 парсер начинает рискованную загрузку скриптов, стилей и изображений, когда он находит их. Однако, в Firefox 4 и новее HTML-парсер также рискованно загружает алгоритм постройки дерева HTML. С одной стороны, когда риск оправдался, нет необходимости в репарсинге части, которая уже была просканирована на скрипты, стили и изображения. С другой стороны, когда риск не оправдался, HTML-парсеру достаётся больше работы.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Speculative parsing","locale":"en-US","native":"English (US)"},{"title":"Optimizar sus páginas para análisis especulativo","locale":"es","native":"Español"},{"title":"Optimisation des pages pour l'analyse spéculative","locale":"fr","native":"Français"},{"title":"Speculative parsing (投機的解析)","locale":"ja","native":"日本語"},{"title":"Optimizing your pages for speculative parsing","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"对页面预解析进行优化","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ru/glossary/speculative_parsing","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/glossary/speculative_parsing/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Glossary","title":"Глоссарий"},{"uri":"/ru/docs/Glossary/speculative_parsing","title":"Оптимизация ваших страниц для рискованного парсинга"}],"pageTitle":"Оптимизация ваших страниц для рискованного парсинга - Глоссарий | MDN","noIndexing":false}}