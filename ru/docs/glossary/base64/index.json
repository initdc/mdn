{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Кодирование и декодирование в формате Base64","mdn_url":"/ru/docs/Glossary/Base64","locale":"ru","native":"Русский","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong>Base64</strong> - это группа схожих <a href=\"https://en.wikipedia.org/wiki/Binary-to-text_encoding\" class=\"external\" rel=\" noopener\">binary-to-text encoding</a> схем, которые представляют двоичные данные в ASCII-формате методом перевода в radix-64 представление. Термин <em>Base64</em> происходит от a specific <a href=\"https://en.wikipedia.org/wiki/MIME#Content-Transfer-Encoding\" class=\"external\" rel=\" noopener\">MIME content transfer encoding</a>.</p>\n\n<p>Кодирование Base64 широко используется в случаях, когда требуется перекодировать двоичные данные для передачи по каналу приспособленному для передачи текстовых данных. Это делается с целью защиты двоичных данных от любых возможных повреждений при передаче. Base64 широко используется во многих приложениях, включая электронную почту (<a href=\"https://en.wikipedia.org/wiki/MIME\" class=\"external\" rel=\" noopener\">MIME</a>), и при сохранении больших объёмов данных в <a href=\"/en-US/docs/Web/XML\">XML</a>.</p>\n\n<p>В языке JavaScript существуют две функции, для кодирования и декодирования данных в/из формат Base64 соответственно:</p>\n\n<ul>\n <li><a href=\"/ru/docs/Web/API/btoa\" title=\"btoa()\"><code>btoa()</code></a></li>\n <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/atob\"><code>atob()</code> <small>(en-US)</small></a></li>\n</ul>\n\n<p><code>Функция atob()</code> декодирует Base64-кодированную строку. В противоположность ей, функция <code>btoa()</code> создаёт Base64 кодированную ASCII строку из \"строки\" бинарных данных.</p>\n\n<p>Обе функции <code>atob()</code> и <code>btoa()</code> работают со строками. Если вам необходимо работать с <a href=\"/en-US/docs/Web/API/ArrayBuffer\" class=\"page-not-created\" title=\"This is a link to an unwritten page\"><code>ArrayBuffers</code></a>, обратитесь к <a href=\"#\">этому параграфу</a>.</p>"}},{"type":"prose","value":{"id":"документация","title":"Документация","isH3":false,"content":"<dl>\n    <dt id=\"data_uris\"><a href=\"/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">data URIs (en-US)</a></dt>\n    <dd><small><code>data</code> URIs, описанные в <a href=\"https://tools.ietf.org/html/rfc2397\" class=\"external\" rel=\" noopener\">RFC 2397</a>, позволяют создателям контента встроить в документ маленькие файлы в виде строки (инлайном).</small></dd>\n    <dt id=\"base64\"><a href=\"https://en.wikipedia.org/wiki/Base64\" class=\"external\" rel=\" noopener\">Base64</a></dt>\n    <dd><small>Wikipedia article about Base64 encoding.</small></dd>\n    <dt id=\"atob_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/atob\"><code>atob()</code> <small>(en-US)</small></a></dt>\n    <dd><small>Decodes a string of data which has been encoded using base-64 encoding.</small></dd>\n    <dt id=\"btoa\"><a href=\"/ru/docs/Web/API/btoa\" title=\"btoa()\"><code>btoa()</code></a></dt>\n    <dd><small>Creates a base-64 encoded ASCII string from a \"string\" of binary data.</small></dd>\n    <dt id=\"the_unicode_problem\"><a href=\"#the_unicode_problem\">The \"Unicode Problem\"</a></dt>\n    <dd><small>In most browsers, calling <code>btoa()</code> on a Unicode string will cause a <code>Character Out Of Range</code> exception. This paragraph shows some solutions.</small></dd>\n    <dt id=\"urischeme\"><a href=\"/en-US/docs/URIScheme\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">URIScheme</a></dt>\n    <dd><small>List of Mozilla supported URI schemes</small></dd>\n    <dt id=\"stringview\"><a href=\"/en-US/docs/Web/JavaScript/Typed_arrays/StringView\" class=\"page-not-created\" title=\"This is a link to an unwritten page\"><code>StringView</code></a></dt>\n    <dd>In this article is published a library of ours whose aims are:\n    <ul>\n    <li>creating a <a href=\"http://en.wikipedia.org/wiki/C_%28programming_language%29\" class=\"external\" rel=\" noopener\">C</a>-like interface for strings (i.e. array of characters codes —<a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"> <code>ArrayBufferView</code></a> in JavaScript) based upon the JavaScript <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> interface,</li>\n    <li>creating a collection of methods for such string-like objects (since now: <code>stringView</code>s) which work <strong>strictly on array of numbers</strong> rather than on immutable JavaScript strings,</li>\n    <li>working with other Unicode encodings, different from default JavaScript's UTF-16 <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>DOMString</code></a>s,</li>\n    </ul>\n    </dd>\n</dl>"}},{"type":"prose","value":{"id":"tools","title":"Tools","isH3":false,"content":"<ul>\n    <li><a href=\"#solution_2_–_rewrite_the_doms_atob()_and_btoa()_using_javascript's_typedarrays_and_utf-8\">Rewriting <code>atob()</code> and <code>btoa()</code> using <code>TypedArray</code>s and UTF-8</a></li>\n    <li><a href=\"/en-US/docs/Web/JavaScript/Typed_arrays/StringView\" class=\"page-not-created\" title=\"This is a link to an unwritten page\"><code>StringView</code> – a C-like representation of strings based on typed arrays</a></li>\n</ul>"}},{"type":"prose","value":{"id":"related_topics","title":"Related Topics","isH3":false,"content":"<ul>\n    <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a></li>\n    <li><a href=\"/en-US/docs/Web/JavaScript/Typed_arrays\">Typed arrays</a></li>\n    <li><code><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">ArrayBufferView</a></code></li>\n    <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a></li>\n    <li><a href=\"/ru/docs/Web/JavaScript/Typed_arrays/StringView\" class=\"page-not-created\" title=\"This is a link to an unwritten page\"><code>StringView</code> – a C-like representation of strings based on typed arrays</a></li>\n    <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>DOMString</code></a></li>\n    <li><a href=\"/en-US/docs/Glossary/URI\"><code>URI</code></a></li>\n    <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\"><code>encodeURI()</code></a></li>\n</ul>"}},{"type":"prose","value":{"id":"the_unicode_problem","title":"The \"Unicode Problem\"","isH3":false,"content":"<p>Since <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>DOMString</code></a>s are 16-bit-encoded strings, in most browsers calling <code>window.btoa</code> on a Unicode string will cause a <code>Character Out Of Range</code> exception if a character exceeds the range of a 8-bit byte (0x00~0xFF). There are two possible methods to solve this problem:</p>\n\n<ul>\n <li>the first one is to escape the whole string (with UTF-8, see <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\"><code>encodeURIComponent</code></a>) and then encode it;</li>\n <li>the second one is to convert the UTF-16 <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>DOMString</code></a> to an UTF-8 array of characters and then encode it.</li>\n</ul>\n\n<p>Here are the two possible methods.</p>"}},{"type":"prose","value":{"id":"solution_1_–_escaping_the_string_before_encoding_it","title":"Solution #1 – escaping the string before encoding it","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush:js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">b64EncodeUnicode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// first we use encodeURIComponent to get percent-encoded UTF-8,</span>\n    <span class=\"token comment\">// then we convert the percent encodings into raw bytes which</span>\n    <span class=\"token comment\">// can be fed into btoa.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">btoa</span><span class=\"token punctuation\">(</span><span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">%([0-9A-F]{2})</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">function</span> <span class=\"token function\">toSolidBytes</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">match<span class=\"token punctuation\">,</span> p1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0x'</span> <span class=\"token operator\">+</span> p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">b64EncodeUnicode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'✓ à la mode'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"4pyTIMOgIGxhIG1vZGU=\"</span>\n<span class=\"token function\">b64EncodeUnicode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Cg==\"</span>\n</code></pre></div>\n\n<p>To decode the Base64-encoded value back into a String:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">b64DecodeUnicode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Going backwards: from bytestream, to percent-encoding, to original string.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">decodeURIComponent</span><span class=\"token punctuation\">(</span><span class=\"token function\">atob</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'%'</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'00'</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">b64DecodeUnicode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'4pyTIMOgIGxhIG1vZGU='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"✓ à la mode\"</span>\n<span class=\"token function\">b64DecodeUnicode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Cg=='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"\\n\"</span>\n</code></pre></div>\n\n<p><a href=\"https://github.com/coolaj86/unibabel-js\" class=\"external\" rel=\" noopener\">Unibabel</a> implements common conversions using this strategy.</p>"}},{"type":"prose","value":{"id":"solution_2_–_rewrite_the_doms_atob_and_btoa_using_javascripts_typedarrays_and_utf-8","title":"Solution #2 – rewrite the DOMs <code>atob()</code> and <code>btoa()</code> using JavaScript's <code>TypedArray</code>s and UTF-8","isH3":true,"content":"<p>Use a <a href=\"/en-US/docs/Web/API/TextEncoder\">TextEncoder</a> polyfill such as <a href=\"https://github.com/inexorabletash/text-encoding\" class=\"external\" rel=\" noopener\">TextEncoding</a> (also includes legacy windows, mac, and ISO encodings), <a href=\"https://github.com/coolaj86/TextEncoderLite\" class=\"external\" rel=\" noopener\">TextEncoderLite</a>, combined with a <a href=\"https://github.com/feross/buffer\" class=\"external\" rel=\" noopener\">Buffer</a> and a Base64 implementation such as <a href=\"https://github.com/beatgammit/base64-js\" class=\"external\" rel=\" noopener\">base64-js</a>.</p>\n\n<p>When a native <code>TextEncoder</code> implementation is not available, the most light-weight solution would be to use <a href=\"https://github.com/coolaj86/TextEncoderLite\" class=\"external\" rel=\" noopener\">TextEncoderLite</a> with <a href=\"https://github.com/beatgammit/base64-js\" class=\"external\" rel=\" noopener\">base64-js</a>. Use the browser implementation when you can.</p>\n\n<p>The following function implements such a strategy. It assumes base64-js imported as <code>&lt;script type=\"text/javascript\" src=\"base64js.min.js\"/&gt;</code>. Note that TextEncoderLite only works with UTF-8.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Base64Encode</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> encoding <span class=\"token operator\">=</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span>TextEncoder <span class=\"token operator\">||</span> TextEncoderLite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>encoding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> base64js<span class=\"token punctuation\">.</span><span class=\"token function\">fromByteArray</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Base64Decode</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> encoding <span class=\"token operator\">=</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> bytes <span class=\"token operator\">=</span> base64js<span class=\"token punctuation\">.</span><span class=\"token function\">toByteArray</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span>TextDecoder <span class=\"token operator\">||</span> TextDecoderLite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>encoding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","titleAsText":"Solution #2 – rewrite the DOMs atob() and btoa() using JavaScript's TypedArrays and UTF-8"}}],"toc":[{"text":"Документация","id":"документация"},{"text":"Tools","id":"tools"},{"text":"Related Topics","id":"related_topics"},{"text":"The \"Unicode Problem\"","id":"the_unicode_problem"}],"summary":"Base64 - это группа схожих binary-to-text encoding схем, которые представляют двоичные данные в ASCII-формате методом перевода в radix-64 представление. Термин Base64 происходит от a specific MIME content transfer encoding.","popularity":0.0023,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Base64","locale":"en-US","native":"English (US)"},{"title":"Base64 codificando y decodificando","locale":"es","native":"Español"},{"title":"Décoder et encoder en base64","locale":"fr","native":"Français"},{"title":"Base64","locale":"ja","native":"日本語"},{"title":"Base64 的编码与解码","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ru/glossary/base64","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/glossary/base64/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Glossary","title":"Глоссарий"},{"uri":"/ru/docs/Glossary/Base64","title":"Кодирование и декодирование в формате Base64"}],"pageTitle":"Кодирование и декодирование в формате Base64 - Глоссарий | MDN","noIndexing":false}}