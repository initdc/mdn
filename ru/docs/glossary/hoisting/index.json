{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Поднятие","mdn_url":"/ru/docs/Glossary/Hoisting","locale":"ru","native":"Русский","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Поднятие (hoisting) — термин, который вы <em>не</em> встретите в документации JavaScript. Поднятие задумывалось как общий способ мышления о том, как контекст исполнения (в частности, фазы создания и исполнения) работает в JavaScript. Однако, hoisting может привести и к недоразумениям. Например, hoisting учит, что объявление переменной или функции физически перемещается в начало вашего кода, хотя в действительности этого не происходит. На самом же деле, объявления переменных и функций попадают в память в процессе фазы компиляции, но остаются в коде на том месте, где вы их объявили.</p>"}},{"type":"prose","value":{"id":"узнаем_больше","title":"Узнаем больше","isH3":false,"content":""}},{"type":"prose","value":{"id":"пример","title":"Пример:","isH3":true,"content":"<p>Одним из преимуществ помещения в память объявлений функций до выполнения кода является возможность использовать функцию до её объявления. Например:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">catName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Мою кошку зовут \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">catName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Тигр\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\nРезультатом будет вывод строки: \"Мою кошку зовут Тигр\"\n*/</span>\n</code></pre></div>\n\n<p>Предыдущий пример демонстрирует ожидаемый рабочий код. Теперь давайте посмотрим, что происходит, когда мы вызываем функцию в коде до её объявления:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">catName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Раиса\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">catName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Мою кошку зовут \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*\nРезультатом будет вывод строки: \"Мою кошку зовут Раиса\"\n*/</span>\n</code></pre></div>\n\n<p>Даже если мы вызываем функцию до её объявления, код работает. Это происходит благодаря тому, как работает контекст выполнения в JavaScript.</p>\n\n<p> </p>\n\n<p><code>Hoisting</code> хорошо работает и с другими типами данных и переменными. Переменные могут быть инициализированы и использованы до их объявления. Однако, они не могут быть использованы без инициализации.</p>"}},{"type":"prose","value":{"id":"пример_2","title":"Пример:<br>\n  ","isH3":true,"content":"<pre class=\"notranslate\">num = 6;\nnum + 7;\nvar num;\n/* не генерирует ошибку, так как num объявлен */\n\n</pre>\n\n<p>JavaScript \"поднимает\" только объявление, но не инициализацию. Если вы используете переменную, объявленную и проинициализированную после её использования, то значение будет <code>undefined</code>. Два примера ниже демонстрируют это поведение.<br>\n  </p>\n\n<pre class=\"notranslate\">var x = 1; // Инициализируем x\nconsole.log(x + \" \" + y);  // '1 undefined'\nvar y = 2;\n//код выше и код ниже одинаковые\n\nvar x = 1; // Инициализируем x\nvar y; // Объявляем y\nconsole.log(x + \" \" + y);  // '1 undefined'\ny = 2; // Инициализируем y\n</pre>\n\n<p> </p>","titleAsText":"Пример:\n  "}},{"type":"prose","value":{"id":"technical_reference","title":"Technical reference","isH3":true,"content":"<ul>\n <li><a href=\"https://www.udemy.com/understand-javascript/\" class=\"external\" rel=\" noopener\">JavaScript: Understanding the Weird Parts</a> - Udemy.com Course</li>\n <li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/var\">var - объявление переменной</a> - MDN</li>\n <li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/function\">Функция</a> - MDN</li>\n</ul>"}}],"toc":[{"text":"Узнаем больше","id":"узнаем_больше"}],"summary":"Поднятие (hoisting) — термин, который вы не встретите в документации JavaScript. Поднятие задумывалось как общий способ мышления о том, как контекст исполнения (в частности, фазы создания и исполнения) работает в JavaScript. Однако, hoisting может привести и к недоразумениям. Например, hoisting учит, что объявление переменной или функции физически перемещается в начало вашего кода, хотя в действительности этого не происходит. На самом же деле, объявления переменных и функций попадают в память в процессе фазы компиляции, но остаются в коде на том месте, где вы их объявили.","popularity":0.0012,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Hoisting","locale":"en-US","native":"English (US)"},{"title":"Hoisting","locale":"es","native":"Español"},{"title":"Hoisting","locale":"fr","native":"Français"},{"title":"Hoisting (巻き上げ、ホイスティング)","locale":"ja","native":"日本語"},{"title":"호이스팅","locale":"ko","native":"한국어"},{"title":"Hoisting","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Hoisting（变量提升）","locale":"zh-CN","native":"中文 (简体)"},{"title":"提升（Hoisting）","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ru/glossary/hoisting","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/glossary/hoisting/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Glossary","title":"Глоссарий"},{"uri":"/ru/docs/Glossary/Hoisting","title":"Поднятие"}],"pageTitle":"Поднятие - Глоссарий | MDN","noIndexing":false}}