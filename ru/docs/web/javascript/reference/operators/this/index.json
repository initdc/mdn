{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"this","mdn_url":"/ru/docs/Web/JavaScript/Reference/Operators/this","locale":"ru","native":"Русский","sidebarHTML":"\n <ol>\n  <li><a href=\"/ru/docs/Web/JavaScript\"><strong><em>JavaScript</em></strong></a></li>\n  <li><a href=\"/ru/docs/Web/JavaScript/Tutorials\"><strong>Уроки:</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Базовые</summary>\n      <ol>\n        <li><a href=\"/ru/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">Основы JavaScript</a></li>\n        <li><a href=\"/ru/docs/Learn/JavaScript/First_steps\">JavaScript first steps</a></li>\n        <li><a href=\"/ru/docs/Learn/JavaScript/Building_blocks\">JavaScript building blocks</a></li>\n        <li><a href=\"/ru/docs/Learn/JavaScript/Objects\">Introducing JavaScript objects</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Руководство по JavaScript</summary>\n      <ol>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Introduction\">Вступление</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Grammar_and_Types\">Грамматика и типы</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">Порядок выполнения и обработка ошибок</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Loops_and_iteration\">Циклы и итерации</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Functions\">Функции</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Expressions_and_Operators\">Выражения и операторы</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Numbers_and_dates\">Числа и даты</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Text_formatting\">Форматирование текста</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Regular_Expressions\">Регулярные выражения</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Indexed_collections\">Упорядоченные наборы данных</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Keyed_collections\">Коллекции</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Working_with_Objects\">Работа с объектами</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Details_of_the_Object_Model\">Подробнее об объектной модели</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Using_promises\">Using promises</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Iterators_and_generators\">Итераторы и генераторы</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Meta_programming\">Метапрограммирование</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Modules\">JavaScript modules</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Средние</summary>\n      <ol>\n        <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks\">Client-side JavaScript frameworks</a></li>\n        <li><a href=\"/ru/docs/Learn/JavaScript/Client-side_web_APIs\">Client-side web APIs</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">Повторное введение в JavaScript</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Data_structures\">Структуры данных JavaScript</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness\">Проверки на равенство и когда их использовать</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Closures\">Замыкания</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Продвинутые</summary>\n      <ol>\n        <li><a href=\"/ru/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">Наследование и цепочка прототипов</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Reference/Strict_mode\">Строгий режим</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Typed_arrays\">Типизированные массивы JavaScript</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Memory_Management\">Управление памятью</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/EventLoop\">Модель совпадения и циклы событий</a></li>\n      </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/ru/docs/Web/JavaScript/Reference\">Справочная информация:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n       <summary>Встроенные объекты</summary>\n        <ol><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\">AggregateError</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\">AsyncFunction</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\">AsyncGenerator</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\">AsyncGeneratorFunction</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Atomics\">Atomics</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array\">BigInt64Array</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array\">BigUint64Array</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/DataView\">DataView</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\">decodeURI()</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent()</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI()</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent()</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Error\">Error</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/escape\">escape()</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval()</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/EvalError\">EvalError</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\">FinalizationRegistry</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\">Float32Array</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\">Float64Array</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Generator\">Generator</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">globalThis</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Infinity\">Infinity</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\">Int16Array</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\">Int32Array</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\">Int8Array</a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/InternalError\">InternalError</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/isFinite\">isFinite()</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/isNaN\">isNaN()</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/NaN\">NaN</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">parseFloat()</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">parseInt()</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/RangeError\">RangeError</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\">ReferenceError</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">Reflect</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">RegExp</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/String\">String</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\">SyntaxError</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">TypedArray</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\">Uint16Array</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\">Uint32Array</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">Uint8Array</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\">Uint8ClampedArray</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/undefined\">undefined</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/unescape\">unescape()</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/URIError\">URIError</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/WeakRef\">WeakRef</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\">WeakSet</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Выражения и операторы</summary>\n      <ol><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Addition_assignment\">Addition assignment (+=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Addition\">Addition (+)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Assignment\">Assignment (=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/async_function*\">async function* expression</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/await\">await</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment\">Bitwise AND assignment (&amp;=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">Bitwise AND (&amp;)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">Bitwise NOT (~)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment\">Bitwise OR assignment (|=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">Bitwise OR (|)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment\">Bitwise XOR assignment (^=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">Bitwise XOR (^)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/class\">class expression</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Comma_Operator\">Comma operator (,)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">Conditional (ternary) operator</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Decrement\">Decrement (--)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/delete\">delete operator</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">Destructuring assignment</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Division_assignment\">Division assignment (/=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Division\">Division (/)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Equality\">Equality (==)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment\">Exponentiation assignment (**=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Exponentiation\">Exponentiation (**)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/function\">Function expression</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal\">Greater than or equal (&gt;=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Greater_than\">Greater than (&gt;)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Grouping\">Grouping operator ( )</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/import.meta\">import.meta</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/import\">import</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/in\">in operator</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Increment\">Increment (++)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Inequality\">Inequality (!=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/instanceof\">instanceof</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment\">Left shift assignment (&lt;&lt;=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Left_shift\">Left shift (&lt;&lt;)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal\">Less than or equal (&lt;=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Less_than\">Less than (&lt;)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment\">Logical AND assignment (&amp;&amp;=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Logical_AND\">Logical AND (&amp;&amp;)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">Logical NOT (!)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment\">Logical nullish assignment (??=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment\">Logical OR assignment (||=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Logical OR (||)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment\">Multiplication assignment (*=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Multiplication\">Multiplication (*)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/new.target\">new.target</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/new\">new operator</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/null\">null</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\">Nullish coalescing operator (??)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Object_initializer\">Object initializer</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">Operator precedence</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">Optional chaining (?.)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Property_Accessors\">Property accessors</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Remainder_assignment\">Remainder assignment (%=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Remainder\">Remainder (%)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment\">Right shift assignment (&gt;&gt;=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Right_shift\">Right shift (&gt;&gt;)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Spread syntax (...)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Strict_equality\">Strict equality (===)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">Strict inequality (!==)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment\">Subtraction assignment (-=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Subtraction\">Subtraction (-)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/super\">super</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/this\">this</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/typeof\">typeof</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Unary_negation\">Unary negation (-)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Unary_plus\">Unary plus (+)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment\">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">Unsigned right shift (&gt;&gt;&gt;)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/void\">void operator</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/yield*\">yield*</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/yield\">yield</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Инструкции и объявления</summary>\n      <ol><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/async_function*\">async function*</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/block\">block</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/break\">break</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/class\">class</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/const\">const</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/continue\">continue</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/debugger\">debugger</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/do...while\">do...while</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/Empty\">empty</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/export\">export</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/for-await...of\">for await...of</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/for\">for</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/function*\">function*</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/function\">function declaration</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/if...else\">if...else</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/import\">import</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/label\">label</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/let\">let</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/return\">return</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/switch\">switch</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/throw\">throw</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/try...catch\">try...catch</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/var\">var</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/while\">while</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/with\">with</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Функции</summary>\n      <ol><li><a href=\"/ru/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow function expressions</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Functions/get\">getter</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Functions/set\">setter</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Классы</summary>\n      <ol><li><a href=\"/ru/docs/Web/JavaScript/Reference/Classes/Class_static_initialization_blocks\">Class static initialization blocks</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Classes/constructor\">constructor</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Classes/extends\">extends</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">Private class features</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Classes/Public_class_fields\">Public class fields</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Classes/static\">static</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Ошибки</summary>\n      <ol><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Already_has_pragma\">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Array_sort_argument\">TypeError: invalid Array.prototype.sort argument</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Bad_octal\">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Bad_radix\">RangeError: radix must be an integer</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag\">SyntaxError: invalid regular expression flag \"x\"</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield\">SyntaxError: return not in function</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/BigInt_division_by_zero\">RangeError: BigInt division by zero</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/BigInt_negative_exponent\">RangeError: BigInt negative exponent</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type\">TypeError: X.prototype.y called on incompatible type</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init\">ReferenceError: can't access lexical declaration 'X' before initialization</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Cant_assign_to_property\">TypeError: can't assign to property \"x\" on \"y\": not an object</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Cant_be_converted_to_BigInt_because_it_isnt_an_integer\">RangeError: x can't be converted to BigInt because it isn't an integer</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Cant_convert_BigInt_to_number\">TypeError: can't convert BigInt to number</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Cant_convert_x_to_BigInt\">TypeError: can't convert x to BigInt</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible\">TypeError: can't define property \"x\": \"obj\" is not extensible</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Cant_delete\">TypeError: property \"x\" is non-configurable and can't be deleted</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property\">TypeError: can't redefine non-configurable property \"x\"</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Cant_use_nullish_coalescing_unparenthesized\">SyntaxError: cannot use `??` unparenthesized within `||` and `&amp;&amp;` expressions</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value\">TypeError: cyclic object value</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Dead_object\">TypeError: can't access dead object</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode\">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage\">ReferenceError: deprecated caller or arguments usage</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Deprecated_expression_closures\">Warning: expression closures are deprecated</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Deprecated_octal\">SyntaxError: \"0\"-prefixed octal literals and octal escape seq. are deprecated</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma\">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Deprecated_String_generics\">Warning: String.x is deprecated; use String.prototype.x instead</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Deprecated_toLocaleFormat\">Warning: Date.prototype.toLocaleFormat is deprecated</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Equal_as_assign\">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Getter_only\">TypeError: setting getter-only property \"x\"</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Hash_outside_class\">SyntaxError: Unexpected '#' used outside of class body</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Identifier_after_number\">SyntaxError: identifier starts immediately after numeric literal</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Illegal_character\">SyntaxError: illegal character</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/in_operator_no_object\">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\">RangeError: invalid array length</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side\">SyntaxError: invalid assignment left-hand side</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax\">SyntaxError: invalid BigInt syntax</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment\">TypeError: invalid assignment to const \"x\"</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Invalid_date\">RangeError: invalid date</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer\">SyntaxError: for-in loop head declarations may not have initializers</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer\">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand\">TypeError: invalid 'instanceof' operand 'x'</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/is_not_iterable\">TypeError: 'x' is not iterable</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse\">SyntaxError: JSON.parse: bad parsing</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Malformed_formal_parameter\">SyntaxError: Malformed formal parameter</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Malformed_URI\">URIError: malformed URI sequence</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list\">SyntaxError: missing ] after element list</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id\">SyntaxError: missing : after property id</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body\">SyntaxError: missing } after function body</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list\">SyntaxError: missing } after property list</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter\">SyntaxError: missing formal parameter</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const\">SyntaxError: missing = in const declaration</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator\">SyntaxError: missing name after . operator</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\">SyntaxError: missing ) after argument list</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition\">SyntaxError: missing ) after condition</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Missing_semicolon_before_statement\">SyntaxError: missing ; before statement</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/More_arguments_needed\">TypeError: More arguments needed</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count\">RangeError: repeat count must be non-negative</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/No_non-null_object\">TypeError: \"x\" is not a non-null object</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/No_properties\">TypeError: \"x\" has no properties</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/No_variable_name\">SyntaxError: missing variable name</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element\">TypeError: can't delete non-configurable array element</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint\">RangeError: argument is not a valid code point</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Not_a_constructor\">TypeError: \"x\" is not a constructor</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Not_a_function\">TypeError: \"x\" is not a function</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Not_defined\">ReferenceError: \"x\" is not defined</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Precision_range\">RangeError: precision is out of range</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Property_access_denied\">Error: Permission denied to access property \"x\"</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Read-only\">TypeError: \"x\" is read-only</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter\">SyntaxError: redeclaration of formal parameter \"x\"</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value\">TypeError: Reduce of empty array with no initial value</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Reserved_identifier\">SyntaxError: \"x\" is a reserved identifier</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large\">RangeError: repeat count must be less than infinity</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Stmt_after_return\">Warning: unreachable code after return statement</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params\">SyntaxError: \"use strict\" not allowed in function with non-simple parameters</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Too_much_recursion\">InternalError: too much recursion</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Undeclared_var\">ReferenceError: assignment to undeclared variable \"x\"</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Undefined_prop\">ReferenceError: reference to undefined property \"x\"</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Unexpected_token\">SyntaxError: Unexpected token</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Unexpected_type\">TypeError: \"x\" is (not) \"y\"</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement\">SyntaxError: function statement requires a name</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Unparenthesized_unary_expr_lhs_exponentiation\">SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Unterminated_string_literal\">SyntaxError: unterminated string literal</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Ещё</summary>\n      <ol>\n        <li><a href=\"/ru/docs/Web/JavaScript/JavaScript_technologies_overview\">Обзор технологий JavaScript</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Reference/Lexical_grammar\">Лексическая грамматика</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Data_structures\">Структуры данных JavaScript</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">Перечисляемость и принадлежность свойств</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Reference/Iteration_protocols\">Протоколы перебора</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Reference/Strict_mode\">Строгий режим</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\">Переход в строгий режим</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Reference/Template_literals\">Шаблонные строки</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\">Устаревшие возможности</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div id=\"sect1\"></div>\n\n<p>Поведение ключевого слова <code>this</code> в JavaScript несколько отличается по сравнению с остальными языками. Имеются также различия при использовании <code>this</code> в <a href=\"/en-US/docs/Web/JavaScript/Reference/Strict_mode\">строгом</a> и нестрогом режиме.</p>\n\n<p>В большинстве случаев значение <code>this</code> определяется тем, каким образом вызвана функция. Значение <code>this</code> не может быть установлено путём присваивания во время исполнения кода и может иметь разное значение при каждом вызове функции. В ES5 представлен метод <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>bind()</code></a>, который используется для <a href=\"/ru/docs/Web/JavaScript/Reference/Operators/this#%D0%9C%D0%B5%D1%82%D0%BE%D0%B4_bind\" aria-current=\"page\"><code>привязки значения ключевого слова this независимо от того, как вызвана функция</code></a>. Также в ES2015 представлены <a href=\"/ru/docs/Web/JavaScript/Reference/Functions/Arrow_functions\"><code>стрелочные функции</code></a>, которые не создают собственные привязки к <code>this</code> (они сохраняют значение <code>this</code> лексического окружения, в котором были созданы).</p>\n\n<div id=\"sect2\"><iframe class=\"interactive\" height=\"490\" src=\"https://interactive-examples.mdn.mozilla.net/pages/js/expressions-this.html\" title=\"MDN Web Docs Interactive Example\" loading=\"lazy\"></iframe></div>"}},{"type":"prose","value":{"id":"синтаксис","title":"Синтаксис","isH3":false,"content":"<pre class=\"syntaxbox notranslate\">this</pre>"}},{"type":"prose","value":{"id":"значение","title":"Значение","isH3":true,"content":"<p>Свойство контекста выполнения кода (global, function или eval), которое в нестрогом режиме всегда является ссылкой на объект, а в строгом режиме может иметь любое значение.</p>"}},{"type":"prose","value":{"id":"global_контекст","title":"Global контекст","isH3":false,"content":"<p>В глобальном контексте выполнения (за пределами каких-либо функций) <code>this</code> ссылается на глобальный объект вне зависимости от режима (строгий или нестрогий).</p>\n\n<div class=\"code-example\"><pre class=\"brush:js notranslate\"><code><span class=\"token comment\">// В браузерах, объект window также является объектом global:</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\na <span class=\"token operator\">=</span> <span class=\"token number\">37</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 37</span>\n\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token string\">\"MDN\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// \"MDN\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>         <span class=\"token comment\">// \"MDN\"</span>\n</code></pre></div>\n\n<div class=\"note notecard\" id=\"sect3\">\n<p><strong>Примечание:</strong> вы всегда можете легко получить объект global, используя глобальное свойство <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/globalThis\"><code>globalThis</code></a>, независимо от текущего контекста, в котором выполняется ваш код.</p>\n</div>"}},{"type":"prose","value":{"id":"function_контекст","title":"Function контекст","isH3":false,"content":"<p>В пределах функции значение <code>this</code> зависит от того, каким образом вызвана функция.</p>"}},{"type":"prose","value":{"id":"простой_вызов","title":"Простой вызов","isH3":true,"content":"<p>Поскольку следующий код не в <a href=\"/ru/docs/Web/JavaScript/Reference/Strict_mode\"><code>строгом режиме</code></a>, и значение <code>this</code> не устанавливается вызовом, по умолчанию будет использоваться объект global, которым в браузере является <code><a href=\"/ru/docs/Web/API/Window\"><code>window</code></a></code>.</p>\n\n<div class=\"code-example\"><pre class=\"brush:js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// В браузере:</span>\n<span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> window<span class=\"token punctuation\">;</span> <span class=\"token comment\">// window - глобальный объект в браузере</span>\n\n<span class=\"token comment\">// В Node:</span>\n<span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> global<span class=\"token punctuation\">;</span> <span class=\"token comment\">// global - глобальный объект в Node</span>\n</code></pre></div>\n\n<p>В строгом режиме, если значение <code>this</code> не установлено в контексте выполнения, оно остаётся <code>undefined</code>, как показано в следующем примере:</p>\n\n<div class=\"code-example\"><pre class=\"brush:js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// см. strict mode</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n\n<div class=\"note notecard\" id=\"sect4\">Во втором примере <code>this</code> должно иметь значение <code><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a></code>, потому что функция <code>f2</code> была вызвана напрямую, а не как метод или свойство объекта (например, <code>window.f2()</code>). Реализация этой особенности не поддерживалась в некоторых браузерах, когда они впервые начали поддерживать <a href=\"/ru/docs/Web/JavaScript/Reference/Strict_mode\"><code>строгий режим</code></a>. В результате они некорректно возвращали объект <code>window</code>.</div>\n\n<p>Для того, чтобы при вызове функции установить <code>this</code> в определённое значение, используйте <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>call()</code></a> или <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>apply()</code></a>, как в следующих примерах.</p>\n\n<p><strong>Пример 1</strong></p>\n\n<pre class=\"notranslate\"><code>// </code>В качестве первого аргумента методов<code> call или apply</code> может быть передан объект<code>,\n// на который будет указывать this.</code><code>\nvar obj = {a: 'Custom'};\n\n// Это свойство принадлежит глобальному объекту\nvar a = 'Global';\n\nfunction whatsThis() {\n  return this.a;  //значение this зависит от контекста вызова функции</code>\n\n<code>}\n\nwhatsThis();          // 'Global'\nwhatsThis.call(obj);  // 'Custom'\nwhatsThis.apply(obj); // 'Custom'</code></pre>\n\n<p><strong>Пример 2</strong></p>\n\n<pre class=\"notranslate\">function add(c, d) {\n  return this.a + this.b + c + d;\n}\n\nvar o = {a: 1, b: 3};\n\n// Первый параметр - это объект для использования в качестве\n// 'this', последующие параметры передаются как\n// аргументы функции call\nadd.call(o, 5, 7); // 16\n\n// Первый параметр - это объект для использования в качестве\n// 'this', второй - массив, чьи члены используются\n// в качестве аргументов функции call\nadd.apply(o, [10, 20]); // 34\n</pre>\n\n<p>Обратите внимание, что в нестрогом режиме, если значение, переданное в <code>call</code> или <code>apply как</code> <code>this</code>, не является объектом, будет сделана попытка преобразовать его в объект с помощью внутренней операции <code>ToObject</code>. Таким образом, если переданное значение является примитивом, таким как <code>7</code> или <code>'foo'</code>, оно будет преобразовано в <code>Object</code> с использованием связанного конструктора, так что примитивное число <code>7</code> будет преобразовано в объект так, как будто с помощью <code>new Number(7)</code>, а строка <code>'foo'</code> - как будто с помощью <code>new String('foo')</code>, например</p>\n\n<pre class=\"notranslate\">function bar() {\n  console.log(Object.prototype.toString.call(this));\n}\n\nbar.call(7);     // [object Number]\nbar.call('foo'); // [object String]\n</pre>"}},{"type":"prose","value":{"id":"метод_bind","title":"Метод <code>bind</code>","isH3":true,"content":"<p>ECMAScript 5 представил <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a>. Вызов <code>f.bind(someObject)</code> создаёт новую функцию с тем же телом и областью действия, что и <code>f</code>, но там, где в исходной функции используется <code>this</code>, в новой функции оно постоянно будет связано с первым аргументом <code>bind</code>, независимо от того, как функция используется.</p>\n\n<pre class=\"notranslate\">function f() {\n  return this.a;\n}\n\nvar g = f.bind({a: 'azerty'});\nconsole.log(g()); // azerty\n\nvar h = g.bind({a: 'yoo'}); // bind only works once!\nconsole.log(h()); // azerty\n\nvar o = {a: 37, f: f, g: g, h: h};\nconsole.log(o.a, o.f(), o.g(), o.h()); // 37,37, azerty, azerty</pre>","titleAsText":"Метод bind"}},{"type":"prose","value":{"id":"стрелочные_функции","title":"Стрелочные функции","isH3":true,"content":"<p>В <a href=\"/ru/docs/Web/JavaScript/Reference/Functions/Arrow_functions\"><code>стрелочных функциях</code></a>, <code>this</code> привязан к окружению, в котором была создана функция. В глобальной области видимости <code>this</code> будет указывать на глобальный объект.</p>\n\n<pre class=\"notranslate\"><code>var globalObject = this;\nvar foo = (() =&gt; this);\nconsole.log(foo() === globalObject); // true</code></pre>\n\n<div class=\"note notecard\" id=\"sect5\">\n<p>Note: если аргумент this передаётся в call, bind или apply при вызове стрелочной функции, он будет проигнорирован. Вы всё ещё можете добавить аргументы к вызову, но первый аргумент (thisArg) должен быть установлен в null.</p>\n</div>\n\n<p>Неважно, как стрелочная функция <code>foo()</code> будет вызвана, её значение this будет указывать на глобальный объект. <code>this</code> будет сохранять своё значение, даже если функция <code>foo()</code> будет вызвана как метод объекта (что в обычных функциях связывает <code>this</code> с объектом вызова) или с использованием методов <code>call</code>, <code>apply</code> или <code>bind</code>:</p>\n\n<pre class=\"notranslate\"><code>// Вызов функции как метода объекта\nvar obj = {foo: foo};\nconsole.log(obj.foo() === globalObject); // true\n\n// Попытка установить this с помощью call\nconsole.log(foo.call(obj) === globalObject); // true\n\n// Попытка установить this с помощью bind\nfoo = foo.bind(obj);\nconsole.log(foo() === globalObject); // true</code></pre>\n\n<p>Несмотря ни на что, <code>this</code> стрелочной функции <code>foo()</code> имеет то же значение, что и при создании функции (глобальный объект в примере выше). То же самое касается стрелочных функций, созданных внутри других функций: их <code>this</code> будет привязан к окружению.</p>\n\n<pre class=\"notranslate\"><code>// Создаём объект obj, содержащий метод bar, который возвращает функцию,\n// которая возвращает свой this. Возвращаемая функция создана\n// как стрелочная функция, таким образом её this постоянно замкнут\n// на this функции, в которой она создана. </code>Значение bar может быть установлено\n<code>//</code> в вызове, который, в свою очередь, устанавливает значение возвращаемой функции.<code>\nvar obj = { bar : function() {\n                    var x = (() =&gt; this);\n                    return x;\n                  }\n          };\n\n// Вызываем bar как метод объекта obj, устанавливая его this на obj\n// Присваиваем ссылку возвращаемой функции переменной fn\nvar fn = obj.bar();\n\n// Вызываем fn без установки this, что в обычных функциях указывало бы\n// на глобальный объект или undefined в строгом режиме.\nconsole.log(fn() === obj); // true</code>\n\n// Но будьте осторожны, если вы ссылаетесь на метод obj, не вызывая его\nvar fn2 = obj.bar;\n// Вызов this стрелочной функции изнутри метода bar вернёт теперь window,\n// потому что он следует за this из fn2.\nconsole.log(fn2()() == window); // true</pre>\n\n<p>В примере выше, функция (назовём её анонимной функцией A), присвоенная методу <code>obj.bar</code>, возвращает другую функцию (назовём её анонимной функцией B) которая создана как стрелочная функция. В результате, <code>this функции B при вызове замкнут на</code> <code>this,</code> принадлежащий <code>obj.bar</code> (функции A). <code>this</code> функции B всегда будет иметь то значение, которое он получил при создании. В примере выше, <code>this функции B</code> указывает на <code>this функции A,которым является</code> obj, таким образом this будет равен <code>obj</code> даже тогда, когда будет вызван методом, который в нормальных условиях устанавливал бы значение this равным <code>undefined</code> или глобальному объекту (или любым другим методом, как в предыдущем примере в глобальном контексте выполнения).</p>"}},{"type":"prose","value":{"id":"в_методе_объекта","title":"В методе объекта","isH3":true,"content":"<p>Когда функция вызывается как метод объекта, используемое в этой функции ключевое слово <code>this </code>принимает значение объекта, по отношению к которому вызван метод.</p>\n\n<p>В следующем примере, когда вызвано свойство <code>o.f()</code> , внутри функции <code>this</code> привязано к объекту <code>o.</code></p>\n\n<div class=\"code-example\"><pre class=\"brush:js notranslate\"><code><span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">prop</span><span class=\"token operator\">:</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">f</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prop<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs 37</span>\n</code></pre></div>\n\n<p>Необходимо отметить, что на поведение <code>this</code> совсем не влияет то, как или где была определена функция. В предыдущем примере мы определили функцию внутри свойства <code>f</code> во время определения объекта <code>o</code>. Однако, мы могли бы также просто определить сначала функцию, а затем закрепить её за свойством <code>o.f</code>. В этом случае поведение <code>this</code> не изменится:</p>\n\n<div class=\"code-example\"><pre class=\"brush:js notranslate\"><code><span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">prop</span><span class=\"token operator\">:</span> <span class=\"token number\">37</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">independent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prop<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\no<span class=\"token punctuation\">.</span>f <span class=\"token operator\">=</span> independent<span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs 37</span>\n</code></pre></div>\n\n<p>Эти примеры показывают, что имеет значение только то, что функция была вызвана из свойства <code>f</code> объекта <code>o</code>.</p>\n\n<p>Аналогично, привязывание <code>this</code> обуславливается наличием ближайшей ссылки на объект или свойство. В следующем примере, когда мы вызываем функцию, мы обращаемся к ней как к методу <code>g</code> объекта <code>o.b</code>. На этот раз во время выполнения, <code>this, </code>что находится внутри функции, будет ссылаться на<code> </code> <code>o.b</code>. Тот факт, что объект является членом объекта <code>o</code>, не имеет значения; важна только ближайшая ссылка.</p>\n\n<div class=\"code-example\"><pre class=\"brush:js notranslate\"><code>o<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">g</span><span class=\"token operator\">:</span> independent<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">prop</span><span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs 42</span>\n</code></pre></div>\n\n<h4 id=\"this_в_цепочке_objects_prototype\"><code>this</code> в цепочке object's prototype</h4>\n\n<p>Это же представление справедливо и для методов, определённых где-либо в цепочке object's prototype. Если метод находится в цепочке прототипов, то <code>this</code> ссылается на объект, на котором был вызван метод, т.е. так, словно метод является методом самого объекта, а не прототипа.</p>\n\n<div class=\"code-example\"><pre class=\"brush:js notranslate\"><code><span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token function-variable function\">f</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\np<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\np<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n</code></pre></div>\n\n<p>В этом примере объект, который присвоен переменной <code>p</code>, не имеет собственного свойства <code>f</code>, а наследует это свойство от своего прототипа. Однако, совершенно неважно, что поиск свойства f в конце концов обнаружит его на объекте <code>o</code>. Поскольку поиск начался с <code>p.f</code>, то и свойство <code>this</code> внутри функции <code>f</code> будет ссылаться на объект <code>p</code>. Таким образом, если <code>f</code> вызывается как метод <code>p</code>, то и <code>this</code> относится к <code>p</code>. Это полезная особенность прототипного наследования JS.</p>\n\n<h4 id=\"this_с_геттерамисеттерами\"><code>this</code> с геттерами/сеттерами</h4>\n\n<p>Все те же утверждения справедливы, если функция вызывается из геттера или сеттера. Для функции, которая используется как геттер или сеттер <code>this</code> привязан к объекту, свойство которого необходимо извлечь через геттер/сеттер.</p>\n\n<div class=\"code-example\"><pre class=\"brush:js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">modulus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>re <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>re <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>im <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>im<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">re</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">im</span><span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">phase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">atan2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>im<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>re<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> <span class=\"token string\">'modulus'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">get</span><span class=\"token operator\">:</span> modulus<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">configurable</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>phase<span class=\"token punctuation\">,</span> o<span class=\"token punctuation\">.</span>modulus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs -0.78 1.4142</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"в_конструкторе","title":"В конструкторе","isH3":true,"content":"<p>Когда функция используется как конструктор (с ключевым словом <code><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/new\">new</a></code> ), <code>this</code> связано с создаваемым новым объектом.</p>\n\n<p>Примечание: по умолчанию конструктор возвращает объект, на который ссылается <code>this</code>, но он может вернуть и другой объект (если возвращаемое значение не является объектом, тогда будет возвращён объект с <code>this</code>).</p>\n\n<div class=\"code-example\"><pre class=\"brush:js notranslate\"><code><span class=\"token comment\">/*\n * Конструктор работает таким образом:\n *\n * function MyConstructor(){\n *   // фактический код, составляющий тело функции.\n *   // создание свойств с |this| по\n *   // желанию, определяя их значения; например,\n *   this.fum = \"nom\";\n *   // и т.д.\n *\n *   // Если функция возвращает выражение,\n *   // возвращающее объект, этот объект будет\n *   // результатом выражения |new|. В обратном случае,\n *   // результат выражения - объект,\n *   // в данный момент привязанный к |this|\n *   // (т.е. наиболее часто встречающийся случай).\n * }\n */</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">37</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs 37</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token constant\">C2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">37</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">38</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\no <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">C2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs 38</span>\n</code></pre></div>\n\n<p>В последнем примере (<code>C2</code>), из-за того, что конструктор вернул объект, новый объект, к которому было привязано <code>this</code>, был просто отброшен. (Это фактически делает выражение \"<code>this.a = 37;</code>\" \"мёртвым\" кодом. Он не является буквально нерабочим, так как он выполняется, но он может быть изъят без каких-либо внешних эффектов.)</p>"}},{"type":"prose","value":{"id":"call_и_apply","title":"<code>call</code> и <code>apply</code>","isH3":true,"content":"<p>Когда в теле функции используется ключевое слово <code>this</code>, его значение может быть привязано к конкретному объекту в вызове при помощи методов <code><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\">call</a></code> или <code><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\">apply</a></code>, которые наследуются всеми функциями от <code>Function.prototype</code>.</p>\n\n<div class=\"code-example\"><pre class=\"brush:js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c<span class=\"token punctuation\">,</span> d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">+</span> c <span class=\"token operator\">+</span> d<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Первый параметр - это объект, который следует использовать как</span>\n<span class=\"token comment\">// 'this', последующие параметры передаются</span>\n<span class=\"token comment\">// как аргументы при вызове функции</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 + 3 + 5 + 7 = 16</span>\n\n<span class=\"token comment\">// Первый параметр - объект, который следует использовать как</span>\n<span class=\"token comment\">// 'this', второй параметр - массив,</span>\n<span class=\"token comment\">// элементы которого используются как аргументы при вызове функции</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 + 3 + 10 + 20 = 34</span>\n</code></pre></div>\n\n<p>Необходимо отметить, что если методам <code>call</code> и <code>apply</code> передаётся значение с <code>this</code>, которое не является при этом объектом, будет предпринята попытка конвертировать значение в объект, используя внутреннюю операцию <code>ToObject</code>. Если переданное значение является примитивным типом, например <code>7</code> или <code>'foo'</code>, оно будет преобразовано в объект с использованием родственного конструктора, так примитив <code>7</code> преобразовывается в объект через <code>new Number(7),</code> а строка <code>'foo'</code> в объект через <code>new String('foo'),</code> и т.д.</p>\n\n<div class=\"code-example\"><pre class=\"brush:js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">bar</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Number]</span>\n</code></pre></div>","titleAsText":"call и apply"}},{"type":"prose","value":{"id":"как_обработчик_событий_dom","title":"Как обработчик событий DOM","isH3":true,"content":"<p>Когда функция используется как обработчик событий, <code>this</code> присваивается элементу с которого начинается событие (некоторые браузеры не следуют этому соглашению для обработчиков, добавленных динамически с помощью всех методов, кроме <code>addEventListener</code>).</p>\n\n<div class=\"code-example\"><pre class=\"brush:js notranslate\"><code><span class=\"token comment\">// Когда вызывается как обработчик, связанный элемент становится синим</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bluify</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Всегда true</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> e<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// true, когда currentTarget и target один объект</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">'#A5D9F3'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Получить список каждого элемента в документе</span>\n<span class=\"token keyword\">var</span> elements <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Добавить bluify как обработчика кликов, чтобы при</span>\n<span class=\"token comment\">// нажатии на элемент он становился синим</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> elements<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  elements<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> bluify<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>"}},{"type":"prose","value":{"id":"в_инлайновом_обработчике_событий","title":"В инлайновом обработчике событий","isH3":true,"content":"<p>Когда код вызван из инлайнового обработчика, <code>this</code> указывает на DOM-элемент, в котором расположен код события:</p>\n\n<div class=\"code-example\"><pre class=\"brush:js notranslate\"><code><span class=\"token operator\">&lt;</span>button onclick<span class=\"token operator\">=</span><span class=\"token string\">\"alert(this.tagName.toLowerCase());\"</span><span class=\"token operator\">&gt;</span>\n  Показать <span class=\"token keyword\">this</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n</code></pre></div>\n\n<p>Код выше выведет '<code>button</code>'. Следует отметить, что <code>this</code> будет указывать на DOM-элемент только во внешних (не вложенных) функциях:</p>\n\n<div class=\"code-example\"><pre class=\"brush:js notranslate\"><code><span class=\"token operator\">&lt;</span>button onclick<span class=\"token operator\">=</span><span class=\"token string\">\"alert((function() {return this;} ()));\"</span><span class=\"token operator\">&gt;</span>\n  Показать вложенный <span class=\"token keyword\">this</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n</code></pre></div>\n\n<p>В этом случае <code>this</code> вложенной функции не будет установлен, так что будет возвращён global/window объект.</p>"}},{"type":"specifications","value":{"title":"Спецификации","id":"спецификации","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-this-keyword","title":"ECMAScript Language Specification"}],"query":"javascript.operators.this"}},{"type":"browser_compatibility","value":{"title":"Совместимость","id":"совместимость","isH3":false,"query":"javascript.operators.this","dataURL":"/ru/docs/Web/JavaScript/Reference/Operators/this/bcd.json"}},{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p></p><p></p>"}},{"type":"prose","value":{"id":"see_also","title":"Смотрите также","isH3":false,"content":"<ul>\n <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Strict_mode\">Строгий режим</a></li>\n <li><a href=\"http://bjorn.tipling.com/all-this\" class=\"external\" rel=\" noopener\">All this</a>, статья о <code>this</code> в разном контексте</li>\n <li><a href=\"https://rainsoft.io/gentle-explanation-of-this-in-javascript/\" class=\"external\" rel=\" noopener\">Краткое объяснение ключевого слова 'this' в JavaScript</a></li>\n</ul>"}}],"toc":[{"text":"Синтаксис","id":"синтаксис"},{"text":"Global контекст","id":"global_контекст"},{"text":"Function контекст","id":"function_контекст"},{"text":"Спецификации","id":"спецификации"},{"text":"Совместимость","id":"совместимость"},{"text":"Смотрите также","id":"see_also"}],"summary":"Поведение ключевого слова this в JavaScript несколько отличается по сравнению с остальными языками. Имеются также различия при использовании this в строгом и нестрогом режиме.","popularity":0.0038,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"this","locale":"en-US","native":"English (US)"},{"title":"this","locale":"es","native":"Español"},{"title":"L'opérateur this","locale":"fr","native":"Français"},{"title":"this","locale":"ja","native":"日本語"},{"title":"this","locale":"ko","native":"한국어"},{"title":"this","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"this","locale":"zh-CN","native":"中文 (简体)"},{"title":"this","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ru/web/javascript/reference/operators/this","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/web/javascript/reference/operators/this/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Web","title":"Веб-технологии для разработчиков"},{"uri":"/ru/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/ru/docs/Web/JavaScript/Reference","title":"Справочник по JavaScript"},{"uri":"/ru/docs/Web/JavaScript/Reference/Operators","title":"Выражения и операторы"},{"uri":"/ru/docs/Web/JavaScript/Reference/Operators/this","title":"this"}],"pageTitle":"this - JavaScript | MDN","noIndexing":false}}