{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Object.setPrototypeOf()","mdn_url":"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf","locale":"ru","native":"Русский","sidebarHTML":"<ol><li><strong><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects\">Стандартные встроенные объекты</a></strong></li><li><strong><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>Свойства</strong></a><ol><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>Методы</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"><code>Object.assign()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/create\"><code>Object.create()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties\"><code>Object.defineProperties()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\"><code>Object.entries()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\"><code>Object.freeze()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries\"><code>Object.fromEntries()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\"><code>Object.getOwnPropertyDescriptor()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors\"><code>Object.getOwnPropertyDescriptors()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\"><code>Object.getOwnPropertyNames()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols\"><code>Object.getOwnPropertySymbols()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\"><code>Object.getPrototypeOf()</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn\"><code>Object.hasOwn()</code> <small>(en-US)</small></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/is\"><code>Object.is()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\"><code>Object.isExtensible()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\"><code>Object.isFrozen()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\"><code>Object.isSealed()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\"><code>Object.keys()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\"><code>Object.preventExtensions()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\"><code>Object.seal()</code></a></li><li><em><code>Object.setPrototypeOf()</code></em></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/values\"><code>Object.values()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div id=\"sect1\"></div>\n\n<div class=\"warning notecard\" id=\"sect2\">\n<p><strong>Предупреждение:</strong> Изменение прототипа <code>[[Prototype]]</code> объекта является, по самой природе оптимизации доступа к свойствам в современных движках JavaScript, очень медленной операцией, это справедливо для <strong><em>любого</em></strong> браузера и движка JavaScript. Изменение прототипов очень тонко и обширно влияет на производительность, причём это влияние не ограничивается просто временем, проведённым внутри метода <code>Object.setPrototypeOf()</code>, оно может распространяться на <strong><em>любой</em></strong> код, который имеет доступ к <strong><em>любому</em></strong> объекту, чей прототип <code>[[Prototype]]</code> был изменён. Если вы заботитесь о производительности, вы никогда не должны изменять прототип <code>[[Prototype]]</code> объекта. Вместо этого создайте объект с нужным прототипом <code>[[Prototype]]</code>, с помощью метода <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/create\"><code>Object.create()</code></a>.</p>\n</div>"}},{"type":"prose","value":{"id":"summary","title":"Сводка","isH3":false,"content":"<p>Метод <strong><code>Object.setPrototypeOf()</code></strong> устанавливает прототип (то есть, внутреннее свойство <code>[[Prototype]]</code>) указанного объекта в другой объект или <a href=\"/ru/docs/Web/JavaScript/Reference/Operators/null\"><code>null</code></a>.</p>"}},{"type":"prose","value":{"id":"syntax","title":"Синтаксис","isH3":false,"content":"<pre class=\"syntaxbox notranslate\"><code>Object.setPrototypeOf(<var>obj</var>, <var>prototype</var>);</code></pre>"}},{"type":"prose","value":{"id":"parameters","title":"Параметры","isH3":true,"content":"<dl>\n <dt id=\"obj\"><code>obj</code></dt>\n <dd>Объект, которому устанавливается прототип.</dd>\n <dt id=\"prototype\"><code>prototype</code></dt>\n <dd>Новый прототип объекта (объект или <a href=\"/ru/docs/Web/JavaScript/Reference/Operators/null\"><code>null</code></a>).</dd>\n</dl>"}},{"type":"prose","value":{"id":"description","title":"Описание","isH3":false,"content":"<p>Выкидывает исключение <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a>, если объект, чей прототип <code>[[Prototype]]</code> является не расширяемым, согласно методу <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\"><code>Object.isExtensible()</code></a>. Не делает ничего, если параметр <code>prototype</code> не является объектом или значением <a href=\"/ru/docs/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> (то есть, является числом, строкой, логическим значением или <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>). В противном случае метод устанавливает прототип <code>[[Prototype]]</code> объекта <code>obj</code> в новое значение.</p>"}},{"type":"prose","value":{"id":"examples","title":"Примеры","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> dict <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"polyfill","title":"Полифил","isH3":false,"content":"<p>Используя старое свойство <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a>, мы можем легко определить <code>Object.setPrototypeOf()</code>, если он ещё не доступен:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Object<span class=\"token punctuation\">.</span>setPrototypeOf<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">setPrototypeOf</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> proto</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n             obj<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> proto<span class=\"token punctuation\">;</span>\n             <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n             <span class=\"token comment\">// Если нужно будет определить прототип у Object.create(null) объекта</span>\n             <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Fn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                 <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//Если в объект уже были определены некоторые свойства</span>\n                     Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n                         <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                 <span class=\"token punctuation\">}</span>\n             <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n             <span class=\"token class-name\">Fn</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> proto<span class=\"token punctuation\">;</span>\n             <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>"}},{"type":"prose","value":{"id":"appending_prototype_chains","title":"Добавление цепочки прототипов","isH3":false,"content":"<p>Сочетание метода <code>Object.getPrototypeOf()</code> и свойства <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a> позволяет добавить целую цепочку прототипов к новому прототипу объекта:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/**\n*** Object.appendChain(@object, @prototype)\n*\n* Присоединяет первый неродной прототип цепочки к новому прототипу.\n* Возвращает @object (если он был примитивным значением, оно будет преобразовано в объект).\n*\n*** Object.appendChain(@object [, \"@arg_name_1\", \"@arg_name_2\", \"@arg_name_3\", \"...\"], \"@function_body\")\n*** Object.appendChain(@object [, \"@arg_name_1, @arg_name_2, @arg_name_3, ...\"], \"@function_body\")\n*\n* Присоединяет первый не родной прототип цепочки к родному объекту Function.prototype, затем присоединяет\n* new Function([\"@arg\"(s)], \"@function_body\") к этой цепочке.\n* Возвращает функцию.\n*\n**/</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">appendChain</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">oChain<span class=\"token punctuation\">,</span> oProto</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Object.appendChain - Not enough arguments'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> oProto <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> oProto <span class=\"token operator\">===</span> <span class=\"token string\">'boolean'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'second argument to Object.appendChain must be an object or a string'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">var</span> oNewProto <span class=\"token operator\">=</span> oProto<span class=\"token punctuation\">,</span>\n      oReturn <span class=\"token operator\">=</span> o2nd <span class=\"token operator\">=</span> oLast <span class=\"token operator\">=</span> oChain <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">this</span> <span class=\"token operator\">?</span> oChain <span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">oChain<span class=\"token punctuation\">.</span>constructor</span><span class=\"token punctuation\">(</span>oChain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> o1st <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>o2nd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    o1st <span class=\"token operator\">!==</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">&amp;&amp;</span> o1st <span class=\"token operator\">!==</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\n    o1st <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>o2nd<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    o2nd <span class=\"token operator\">=</span> o1st<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oProto<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    oNewProto <span class=\"token operator\">=</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\n    oReturn <span class=\"token operator\">=</span> <span class=\"token function\">Function</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span>oReturn<span class=\"token punctuation\">,</span> oLast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span>o2nd<span class=\"token punctuation\">,</span> oNewProto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> oReturn<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"usage","title":"Использование","isH3":true,"content":"<h4 id=\"first_example.3a_appending_a_chain_to_a_prototype\">Первый пример: присоединение цепочки к прототипу</h4>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Mammal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isMammal <span class=\"token operator\">=</span> <span class=\"token string\">'да'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MammalSpecies</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sMammalSpecies</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>species <span class=\"token operator\">=</span> sMammalSpecies<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">MammalSpecies</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mammal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">MammalSpecies</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> MammalSpecies<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> oCat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MammalSpecies</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Felis'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>oCat<span class=\"token punctuation\">.</span>isMammal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'да'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>breathing <span class=\"token operator\">=</span> <span class=\"token string\">'да'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">appendChain</span><span class=\"token punctuation\">(</span>oCat<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>oCat<span class=\"token punctuation\">.</span>breathing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'да'</span>\n</code></pre></div>\n\n<h4 id=\"second_example.3a_transforming_a_primitive_value_into_an_instance_of_its_constructor_and_append_its_chain_to_a_prototype\">Второй пример: преобразование примитивного значения в экземпляр его конструктора и присоединение его цепочки к прототипу</h4>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isSymbol <span class=\"token operator\">=</span> <span class=\"token string\">'да'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> nPrime <span class=\"token operator\">=</span> <span class=\"token number\">17</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> nPrime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'number'</span>\n\n<span class=\"token keyword\">var</span> oPrime <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">appendChain</span><span class=\"token punctuation\">(</span>nPrime<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>oPrime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '17'</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>oPrime<span class=\"token punctuation\">.</span>isSymbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'да'</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> oPrime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'object'</span>\n</code></pre></div>\n\n<h4 id=\"third_example.3a_appending_a_chain_to_the_function.prototype_object_and_appending_a_new_function_to_that_chain\">Третий пример: присоединение цепочки к объекту <code>Function.prototype</code> и новой функции к этой цепочке</h4>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>identity <span class=\"token operator\">=</span> sName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> george <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">appendChain</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Георг'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                <span class=\"token string\">'alert(\"Привет, парни!!\");'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>george<span class=\"token punctuation\">.</span>identity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Георг'</span>\n<span class=\"token function\">george</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Привет, парни!!'</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Спецификации","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.setprototypeof","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.Object.setPrototypeOf"}},{"type":"browser_compatibility","value":{"title":"Совместимость с браузерами","id":"browser_compatibility","isH3":false,"query":"javascript.builtins.Object.setPrototypeOf","dataURL":"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf/bcd.json"}},{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p></p><p></p>"}},{"type":"prose","value":{"id":"see_also","title":"Смотрите также","isH3":false,"content":"<ul>\n <li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li>\n <li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\"><code>Object.getPrototypeOf()</code></a></li>\n <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code> <small>(en-US)</small></a></li>\n</ul>"}}],"toc":[{"text":"Сводка","id":"summary"},{"text":"Синтаксис","id":"syntax"},{"text":"Описание","id":"description"},{"text":"Примеры","id":"examples"},{"text":"Полифил","id":"polyfill"},{"text":"Добавление цепочки прототипов","id":"appending_prototype_chains"},{"text":"Спецификации","id":"specifications"},{"text":"Совместимость с браузерами","id":"browser_compatibility"},{"text":"Смотрите также","id":"see_also"}],"summary":"Метод Object.setPrototypeOf() устанавливает прототип (то есть, внутреннее свойство [[Prototype]]) указанного объекта в другой объект или null.","popularity":0.0006,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Object.setPrototypeOf()","locale":"en-US","native":"English (US)"},{"title":"Object.setPrototypeOf()","locale":"es","native":"Español"},{"title":"Object.setPrototypeOf()","locale":"fr","native":"Français"},{"title":"Object.setPrototypeOf()","locale":"ja","native":"日本語"},{"title":"Object.setPrototypeOf()","locale":"ko","native":"한국어"},{"title":"Object.setPrototypeOf()","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Object.setPrototypeOf()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ru/web/javascript/reference/global_objects/object/setprototypeof","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/web/javascript/reference/global_objects/object/setprototypeof/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Web","title":"Веб-технологии для разработчиков"},{"uri":"/ru/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/ru/docs/Web/JavaScript/Reference","title":"Справочник по JavaScript"},{"uri":"/ru/docs/Web/JavaScript/Reference/Global_Objects","title":"Стандартные встроенные объекты"},{"uri":"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object","title":"Object"},{"uri":"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf","title":"Object.setPrototypeOf()"}],"pageTitle":"Object.setPrototypeOf() - JavaScript | MDN","noIndexing":false}}