{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Function","mdn_url":"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function","locale":"ru","native":"Русский","sidebarHTML":"<ol><li><strong><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects\">Стандартные встроенные объекты</a></strong></li><li><strong><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>Свойства</strong></a><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function.prototype.displayName</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function.prototype.length</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function.prototype.name</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\"><code>Function.prototype.prototype</code> <small>(en-US)</small></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>Методы</strong></a><ol><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></li><li><strong>Наследование:</strong></li><li><strong><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>Свойства</strong></a><ol><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>Методы</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>На самом деле каждая JavaScript-функция является объектом <code>Function</code>. Это легко проверить, выполнив проверку <code>(function(){}).constructor === Function</code>, которая вернёт true.</p>"}},{"type":"prose","value":{"id":"конструктор","title":"Конструктор","isH3":false,"content":"<dl>\n  <dt id=\"function\"><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/Function\"><code>Function()</code></a></dt>\n  <dd>\n    <p>Создаёт новый объект <code>Function</code>. Вызов конструктора напрямую позволяет создавать функции программным путём. Такой способ представляет угрозу для безопасности, а также несёт разные (хотя не такие значительные) проблемы с производительностью при использовании с <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/eval\"><code>Global_Objects/eval</code></a>. Однако в отличие от eval, конструктор <code>Function</code> создаёт функции, выполняемые только в глобальной области видимости.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"свойства_экземпляра","title":"Свойства экземпляра","isH3":false,"content":"<dl>\n  <dt id=\"function.prototype.arguments\"><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a></dt>\n  <dd>\n    <p>\n      Массив с переданными функции аргументами.\n      Это устаревшее свойство объекта <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function\" aria-current=\"page\"><code>Function</code></a>. Вместо него используйте объект <a href=\"/ru/docs/Web/JavaScript/Reference/Functions/arguments\"><code>arguments</code></a> (доступный внутри функции).\n    </p>\n  </dd>\n  <dt id=\"function.prototype.caller\"><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code></a></dt>\n  <dd>\n    <p>\n      Содержит функцию, которая вызвала текущую выполняющуюся функцию.\n      Это устаревшее свойство, которое работает только в функциях без включённого строгого режима.\n    </p>\n  </dd>\n  <dt id=\"function.prototype.displayname\"><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function.prototype.displayName</code></a></dt>\n  <dd>\n    <p>Отображаемое имя функции.</p>\n  </dd>\n  <dt id=\"function.prototype.length\"><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function.prototype.length</code></a></dt>\n  <dd>\n    <p>Содержит количество аргументов в функции.</p>\n  </dd>\n  <dt id=\"function.prototype.name\"><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function.prototype.name</code></a></dt>\n  <dd>\n    <p>Имя функции.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"методы_экземпляра","title":"Методы экземпляра","isH3":false,"content":"<dl>\n  <dt id=\"function.prototype.applythisarg_argsarray\"><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply(<var>thisArg</var> [, <var>argsArray</var>])</code></a></dt>\n  <dd>\n    <p>Вызывает функцию и устанавливает её <code>this</code> на переданный <code>thisArg</code>. Аргументы могут быть переданы в виде объекта <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>.</p>\n  </dd>\n  <dt id=\"function.prototype.bindthisarg_arg1_arg2_...argn\"><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind(<var>thisArg</var>[, <var>arg1</var>[, <var>arg2</var>[, ...<var>argN</var>]]])</code></a></dt>\n  <dd>\n    <p>Создает новую функцию, при вызове которой её <code>this</code> будет установлен на <code>thisArg</code>. Можно также указать ряд аргументов, которые будут добавлены к аргументам при вызове новой привязанной функции.</p>\n  </dd>\n  <dt id=\"function.prototype.callthisarg_arg1_arg2_...argn\"><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call(<var>thisArg</var>[, <var>arg1</var>, <var>arg2</var>, ...<var>argN</var>])</code></a></dt>\n  <dd>\n    <p>Вызывает функцию и устанавливает её <code>this</code> на переданное значение. Аргументы могут быть переданы как есть.</p>\n  </dd>\n  <dt id=\"function.prototype.tostring\"><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></dt>\n  <dd>\n    <p>\n      Возвращает строку с исходным кодом функции.\n      Переопределяет метод <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString</code></a>.\n    </p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"примеры","title":"Примеры","isH3":false,"content":""}},{"type":"prose","value":{"id":"сравнение_конструктора_function_и_объявления_функции","title":"Сравнение конструктора Function и объявления функции","isH3":true,"content":"<p>Функции, созданные через конструктор <code>Function</code>, не имеют доступа к собственному контексту исполнения, т.е. они всегда создаются в глобальной области видимости. При выполнении таких функций, они смогут обращаться только к своим локальным и глобальным переменным, но не к переменным в той области видимости, в которой вызывался конструктор <code>Function</code>. В этом они отличаются от использования <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/eval\"><code>Global_Objects/eval</code></a> с функциями-выражениями.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createFunction1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">'return x;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// здесь |x| ссылается на глобальный |x|</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createFunction2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// здесь |x| ссылается на локальный |x| выше</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> f1 <span class=\"token operator\">=</span> <span class=\"token function\">createFunction1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 10</span>\n<span class=\"token keyword\">var</span> f2 <span class=\"token operator\">=</span> <span class=\"token function\">createFunction2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 20</span>\n</code></pre></div>\n<p>Хотя этот код работает в браузерах, в окружении Node.js вызов <code>f1()</code> приведёт к ошибке <code>ReferenceError</code>, потому что <code>x</code> не будет найден. Это происходит из-за того, что область видимости верхнего уровня в Node не является глобальной областью видимости, поэтому <code>x</code> ссылается на локальную переменную в пределах текущего модуля.</p>"}},{"type":"specifications","value":{"title":"Спецификации","id":"спецификации","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-function-objects","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.Function"}},{"type":"browser_compatibility","value":{"title":"Поддержка браузерами","id":"поддержка_браузерами","isH3":false,"query":"javascript.builtins.Function","dataURL":"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/bcd.json"}},{"type":"prose","value":{"id":"смотрите_также","title":"Смотрите также","isH3":false,"content":"<ul>\n  <li><a href=\"/ru/docs/Web/JavaScript/Reference/Functions\">Функции и их область видимости</a></li>\n  <li>Инструкция <a href=\"/ru/docs/Web/JavaScript/Reference/Statements/function\"><code>function</code></a></li>\n  <li>Выражение <a href=\"/ru/docs/Web/JavaScript/Reference/Operators/function\"><code>function</code></a></li>\n  <li>Инструкция <a href=\"/ru/docs/Web/JavaScript/Reference/Statements/function*\"><code>function*</code></a></li>\n  <li>Выражение <a href=\"/ru/docs/Web/JavaScript/Reference/Operators/function*\"><code>function*</code></a></li>\n  <li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\"><code>AsyncFunction</code></a></li>\n  <li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\"><code>GeneratorFunction</code></a></li>\n</ul>"}}],"toc":[{"text":"Конструктор","id":"конструктор"},{"text":"Свойства экземпляра","id":"свойства_экземпляра"},{"text":"Методы экземпляра","id":"методы_экземпляра"},{"text":"Примеры","id":"примеры"},{"text":"Спецификации","id":"спецификации"},{"text":"Поддержка браузерами","id":"поддержка_браузерами"},{"text":"Смотрите также","id":"смотрите_также"}],"summary":"На самом деле каждая JavaScript-функция является объектом Function. Это легко проверить, выполнив проверку (function(){}).constructor === Function, которая вернёт true.","popularity":0.0022,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Function","locale":"en-US","native":"English (US)"},{"title":"Function","locale":"es","native":"Español"},{"title":"Function","locale":"fr","native":"Français"},{"title":"Function","locale":"ja","native":"日本語"},{"title":"Function","locale":"ko","native":"한국어"},{"title":"Function","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Function","locale":"zh-CN","native":"中文 (简体)"},{"title":"Function","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ru/web/javascript/reference/global_objects/function","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/web/javascript/reference/global_objects/function/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ru/docs/Web","title":"Веб-технологии для разработчиков"},{"uri":"/ru/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/ru/docs/Web/JavaScript/Reference","title":"Справочник по JavaScript"},{"uri":"/ru/docs/Web/JavaScript/Reference/Global_Objects","title":"Стандартные встроенные объекты"},{"uri":"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function","title":"Function"}],"pageTitle":"Function - JavaScript | MDN","noIndexing":false}}