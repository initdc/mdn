{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"RegExp","mdn_url":"/ru/docs/Web/JavaScript/Reference/Global_Objects/RegExp","locale":"ru","native":"Русский","sidebarHTML":"<ol><li><strong><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects\">Стандартные встроенные объекты</a></strong></li><li><strong><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>Свойства</strong></a><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@species\"><code>get RegExp[@@species]</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll\"><code>RegExp.prototype.dotAll</code> <small>(en-US)</small></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/RegExp/flags\"><code>RegExp.prototype.flags</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global\"><code>RegExp.prototype.global</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/hasIndices\"><code>RegExp.prototype.hasIndices</code> <small>(en-US)</small></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase\"><code>RegExp.prototype.ignoreCase</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/RegExp/input\"><code>RegExp.input ($_)</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex\"><code>RegExp: lastIndex</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastMatch\"><code>RegExp.lastMatch ($&amp;)</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastParen\"><code>RegExp.lastParen ($+)</code> <small>(en-US)</small></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/leftContext\"><code>RegExp.leftContext ($`)</code> <small>(en-US)</small></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline\"><code>RegExp.prototype.multiline</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/RegExp/n\"><code>RegExp.$1-$9</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/rightContext\"><code>RegExp.rightContext ($')</code> <small>(en-US)</small></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/RegExp/source\"><code>RegExp.prototype.source</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky\"><code>RegExp.prototype.sticky</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode\"><code>RegExp.prototype.unicode</code></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>Методы</strong></a><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@match\"><code>RegExp.prototype[@@match]()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll\"><code>RegExp.prototype[@@matchAll]()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace\"><code>RegExp.prototype[@@replace]()</code> <small>(en-US)</small></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@search\"><code>RegExp.prototype[@@search]()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@split\"><code>RegExp.prototype[@@split]()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/compile\"><code>RegExp.prototype.compile()</code> <small>(en-US)</small></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code>RegExp.prototype.exec()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\"><code>RegExp.prototype.test()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/RegExp/toString\"><code>RegExp.prototype.toString()</code></a></li></ol></li><li><strong>Наследование:</strong></li><li><strong><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li><a href=\"#\"><strong>Свойства</strong></a><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function.prototype.displayName</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function.prototype.length</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function.prototype.name</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\"><code>Function.prototype.prototype</code> <small>(en-US)</small></a></li></ol></li><li><a href=\"#\"><strong>Методы</strong></a><ol><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></li><li><strong><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>Свойства</strong></a><ol><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>Методы</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div id=\"sect1\"></div>"}},{"type":"prose","value":{"id":"summary","title":"Сводка","isH3":false,"content":"<p>Конструктор <strong><code>RegExp</code></strong> создаёт объект регулярного выражения для сопоставления текста с шаблоном.</p>\n\n<p>Введение в то, что представляют собой регулярные выражения, читайте в <a href=\"/ru/docs/Web/JavaScript/Guide/Regular_Expressions\">главе «Регулярные выражения» в руководстве по JavaScript</a>.</p>\n\n<div id=\"sect2\"><iframe class=\"interactive\" height=\"490\" src=\"https://interactive-examples.mdn.mozilla.net/pages/js/regexp-constructor.html\" title=\"MDN Web Docs Interactive Example\" loading=\"lazy\"></iframe></div>"}},{"type":"prose","value":{"id":"syntax","title":"Синтаксис","isH3":false,"content":"<p>Возможны как литеральная запись, так и запись через конструктор:</p>\n\n<pre class=\"syntaxbox notranslate\"><code>/<var>pattern</var>/<var>flags</var>\nnew RegExp(<var>pattern</var>, <var>flags</var>)</code>\n</pre>"}},{"type":"prose","value":{"id":"parameters","title":"Параметры","isH3":true,"content":"<dl>\n <dt id=\"pattern\"><code>pattern</code></dt>\n <dd>Текст регулярного выражения.</dd>\n <dt id=\"flags\"><code>flags</code></dt>\n <dd>\n <p>Если определён, может принимать любую комбинацию нижеследующих значений:</p>\n\n <dl>\n  <dt id=\"g\"><code>g</code></dt>\n  <dd>глобальное сопоставление</dd>\n  <dt id=\"i\"><code>i</code></dt>\n  <dd>игнорирование регистра при сопоставлении</dd>\n  <dt id=\"m\"><code>m</code></dt>\n  <dd>сопоставление по нескольким строкам; символы начала и конца (^ и $) начинают работать по нескольким строкам (то есть, происходит сопоставление с началом или концом <em>каждой</em> строки (строки разделяются символами \\n или \\r), а не только с началом или концом всей вводимой строки)</dd>\n  <dt id=\"y\"><code>y</code> <svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg></dt>\n  <dd>«липкий» поиск; сопоставление в целевой строке начинается с индекса, на который указывает свойство <code>lastIndex</code> этого регулярного выражения (и не пытается сопоставиться с любого более позднего индекса).</dd>\n </dl>\n </dd>\n</dl>"}},{"type":"prose","value":{"id":"description","title":"Описание","isH3":false,"content":"<p>Существует два способа создания объекта <code>RegExp</code>: литеральная запись и использование конструктора. При записи строк параметры в литеральной записи не используют символы кавычек, в то время как параметры функции-конструктора используют кавычки. Так что следующие выражения создают одинаковые регулярные выражения:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">ab+c</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ab+c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Литеральная запись обеспечивает компиляцию регулярного выражения при вычислении выражения. Используйте литеральную запись если регулярное выражение будет неизменным. Например, если вы используете литеральную запись для конструирования регулярного выражения, используемого в цикле, регулярное выражение не будет перекомпилироваться на каждой итерации.</p>\n\n<p>Конструктор объекта регулярного выражения, например, <code>new RegExp('ab+c')</code>, обеспечивает компиляцию регулярного выражения во время выполнения. Используйте функцию-конструктор, если вы знаете, что шаблон регулярного выражения будет меняться или если вы не знаете шаблон и получаете его из внешних источников, например, из пользовательского ввода.</p>\n\n<p>При использовании функции-конструктора необходимо использовать обычные правила экранирования в строках (предварять специальные символы символом обратного слеша «\\»). Например, следующие выражения эквивалентны:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\w+</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\\\w+'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"special_characters_meaning_in_regular_expressions","title":"Значение специальных символов в регулярных выражениях","isH3":false,"content":"<ul>\n <li><a href=\"#character-classes\">Символьные классы</a></li>\n <li><a href=\"#character-sets\">Наборы символов</a></li>\n <li><a href=\"#boundaries\">Границы</a></li>\n <li><a href=\"#grouping-back-references\">Группировка и обратные ссылки</a></li>\n <li><a href=\"#quantifiers\">Квантификаторы</a></li>\n</ul>\n\n<table class=\"fullwidth-table\">\n <tbody>\n  <tr id=\"character-classes\">\n   <th colspan=\"2\">Символьные классы</th>\n  </tr>\n  <tr>\n   <th>Символ</th>\n   <th>Значение</th>\n  </tr>\n  <tr>\n   <td><code>.</code></td>\n   <td>\n    <p>(Точка, десятичная запятая) сопоставляется с любым символом <em>за исключением</em> символов новой строки: <code>\\n</code>, <code>\\r</code>, <code>\\u2028</code> или <code>\\u2029</code>.</p>\n\n    <p>Обратите внимание, что флаг многострочности <code>m</code> не изменяет поведение точки. Так что для сопоставления с шаблона с несколькими строками используйте набор символов <code>[^]</code> (конечно, если только вам не нужно поддерживать старые версии IE), он сопоставляется с любым символом, включая символы новой строки.</p>\n\n    <p>Например, шаблон <code>/.н/</code> сопоставляется с подстрокой «ан», но не подстрокой «ну», во фразе «ну что, потанцуем».</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code>\\d</code></td>\n   <td>\n    <p>Сопоставляется с символом цифры в базовом латинском алфавите. Эквивалентен набору символов <code>[0-9]</code>.</p>\n\n    <p>Например, шаблоны <code>/\\d/</code> и <code>/[0-9]/</code> сопоставляются с подстрокой «2» в строке «B2 — это номер люкс».</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code>\\D</code></td>\n   <td>\n    <p>Сопоставляется с любым символом, который не является цифрой в базовом латинском алфавите. Эквивалентен набору символов <code>[^0-9]</code>.</p>\n\n    <p>Например, шаблоны <code>/\\D/</code> и <code>/[^0-9]/</code> сопоставляются с подстрокой «B» в строке «B2 — это номер люкс».</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code>\\w</code></td>\n   <td>\n    <p>Сопоставляется с любым алфавитно-цифровым символом из базового латинского алфавита, включая символ подчёркивания. Эквивалентен набору символов <code>[A-Za-z0-9_]</code>.</p>\n\n    <p>Например, шаблон <code>/\\w/</code> сопоставляется с подстрокой «a» в строке «apple», с подстрокой «5» в строке «$5.28» и с подстрокой «3» в строке «3D».</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code>\\W</code></td>\n   <td>\n    <p>Сопоставляется с любым символом из базового латинского алфавита, не являющимся символом, из которых состоят слова. Эквивалентен набору символов <code>[^A-Za-z0-9_]</code>.</p>\n\n    <p>Например, шаблоны <code>/\\W/</code> и <code>/[^A-Za-z0-9_]/</code> сопоставляются с подстрокой «%» в строке «50%».</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code>\\s</code></td>\n   <td>\n    <p>Сопоставляется с одиночным пробельным символом, который включает в себя пробел, табуляцию, подачу страницы, перевод строки и другие пробельные символы Юникода. Эквивалентен набору символов <code>[ \\f\\n\\r\\t\\v​\\u00a0\\u1680​\\u180e\\u2000​\\u2001\\u2002​\\u2003\\u2004​\\u2005\\u2006​\\u2007\\u2008​\\u2009\\u200a​\\u2028\\u2029​​\\u202f\\u205f​\\u3000]</code>.</p>\n\n    <p>Например, шаблон <code>/\\s\\w*/</code> сопоставляется с подстрокой « bar» в строке «foo bar».</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code>\\S</code></td>\n   <td>\n    <p>Сопоставляется с одиночным символом, не являющимся пробельным. Эквивалентен набору символов <code>[^ \\f\\n\\r\\t\\v​\\u00a0\\u1680​\\u180e\\u2000​\\u2001\\u2002​\\u2003\\u2004​\\u2005\\u2006​\\u2007\\u2008​\\u2009\\u200a​\\u2028\\u2029​\\u202f\\u205f​\\u3000]</code>.</p>\n\n    <p>Например, шаблон <code>/\\S\\w*/</code> сопоставляется с подстрокой «foo» в строке «foo bar».</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code>\\t</code></td>\n   <td>Сопоставляется с символом табуляции.</td>\n  </tr>\n  <tr>\n   <td><code>\\r</code></td>\n   <td>Сопоставляется с символом возврата каретки.</td>\n  </tr>\n  <tr>\n   <td><code>\\n</code></td>\n   <td>Сопоставляется с символом перевода строки.</td>\n  </tr>\n  <tr>\n   <td><code>\\v</code></td>\n   <td>Сопоставляется с символом вертикальной табуляции.</td>\n  </tr>\n  <tr>\n   <td><code>\\f</code></td>\n   <td>Сопоставляется с символом подачи страницы.</td>\n  </tr>\n  <tr>\n   <td><code>[\\b]</code></td>\n   <td>Сопоставляется с символом забоя (не перепутайте его с символьным классом <code>\\b</code>).</td>\n  </tr>\n  <tr>\n   <td><code>\\0</code></td>\n   <td>Сопоставляется с нулевым символом. Не ставьте за ним другую цифру.</td>\n  </tr>\n  <tr>\n   <td><code>\\c<em>X</em></code></td>\n   <td>\n    <p>Где <code><em>X</em></code> является буквой от «A» до «Z». Сопоставляется с управляющим символом в строке.</p>\n\n    <p>Например, шаблон <code>/\\cM/</code> сопоставляется с символом control-M в строке.</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code>\\x<em>hh</em></code></td>\n   <td>Сопоставляется с символом с кодом <code><em>hh</em></code> (две шестнадцатеричные цифры).</td>\n  </tr>\n  <tr>\n   <td><code>\\u<em>hhhh</em></code></td>\n   <td>Сопоставляется с символом со значением Юникода <code><em>hhhh</em></code> (четыре шестнадцатеричные цифры).</td>\n  </tr>\n  <tr>\n   <td><code>\\</code></td>\n   <td>\n    <p>Для символов, которые обычно трактуются буквально, указывает, что следующий символ является специальным и не должен интерпретироваться буквально.</p>\n\n    <p>Например, шаблон <code>/b/</code> сопоставляется с символом «b». Поместив перед ним символ обратного слеша, то есть превратив шаблон в <code>/\\b/</code>, символ приобретёт специальное значение, обозначающее сопоставление с границей слова.</p>\n\n    <p><em>или</em></p>\n\n    <p>Для символов, которые обычно трактуются специальным образом, указывает, что следующий символ не является специальным и должен интерпретироваться буквально.</p>\n\n    <p>Например, звёздочка «*» является специальным символом, обозначающим ноль или более вхождений предшествующего символа при сопоставлении; поэтому шаблон <code>/a*/</code> означает сопоставление с нулём или более символов «a». Для буквального сопоставления со звёздочкой <code>*</code> предварите её символом обратного слеша; например, шаблон <code>/a\\*/</code> сопоставляется со строкой «a*».</p>\n   </td>\n  </tr>\n </tbody>\n <tbody>\n  <tr id=\"character-sets\">\n   <th colspan=\"2\">Наборы символов</th>\n  </tr>\n  <tr>\n   <th>Символ</th>\n   <th>Значение</th>\n  </tr>\n  <tr>\n   <td><code>[xyz]</code></td>\n   <td>\n    <p>Набор символов. Сопоставляется с любым из заключённых в квадратные скобки символов. С помощью дефиса вы можете определить диапазон символов.</p>\n\n    <p>Например, шаблон <code>[абвгд]</code> означает тоже самое, что и шаблон <code>[а-д]</code>. Они сопоставляются с символом «г» в слове «грудинка» и символом «б» в слове «отбивная».</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code>[^xyz]</code></td>\n   <td>\n    <p>Отрицательный или дополнительный набор символов. То есть он сопоставляется со всеми символами, что не заключены в квадратные скобки. С помощью дефиса вы можете определить диапазон символов.</p>\n\n    <p>Например, шаблон <code>[^абвгд]</code> означает тоже самое, что и шаблон <code>[^а-д]</code>. Они сопоставляются с символом «е» в слове «бекон» и символом «о» в слове «отбивная».</p>\n   </td>\n  </tr>\n </tbody>\n <tbody>\n  <tr id=\"boundaries\">\n   <th colspan=\"2\">Границы</th>\n  </tr>\n  <tr>\n   <th>Символ</th>\n   <th>Значение</th>\n  </tr>\n  <tr>\n   <td><code>^</code></td>\n   <td>\n    <p>Сопоставляется c началом ввода. Если установлен флаг многострочности, также сопоставляется с позицией сразу за символом переноса строки.</p>\n\n    <p>Например, шаблон <code>/^Б/</code> не сопоставляется с буквой «Б» в строке «буква Б», но сопоставляется с первой буквой «Б» в строке «Буква Б».</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code>$</code></td>\n   <td>\n    <p>Сопоставляется c концом ввода. Если установлен флаг многострочности, также сопоставляется с позицией сразу перед символом переноса строки.</p>\n\n    <p>Например, шаблон <code>/т$/</code> не сопоставляется с буквой «т» в слове «кормить», но сопоставляется с ней в слове «кормит».</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code>\\b</code></td>\n   <td>\n    <p>Сопоставляется с границей слова нулевой ширины, например с позицией между буквой и пробелом (не путайте его с набором символов <code>[\\b]</code>).</p>\n\n    <p>Например, шаблон <code>/\\bпол/</code> сопоставляется с подстрокой «пол» в строке «в полдень»; шаблон <code>/но\\b/</code> сопоставляется с подстрокой «но» в строке «возможно завтра».</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code>\\B</code></td>\n   <td>\n    <p>Сопоставляется с границей не-слов нулевой ширины, например с позицией между двумя буквами или двумя пробелами.</p>\n\n    <p>Например, шаблон <code>/\\Bдень/</code> сопоставляется с подстрокой «день» в строке «в полдень»; шаблон <code>/за\\B/</code> сопоставляется с подстрокой «за» в строке «возможно завтра».</p>\n   </td>\n  </tr>\n </tbody>\n <tbody>\n  <tr id=\"grouping-back-references\">\n   <th colspan=\"2\">Группировка и обратные ссылки</th>\n  </tr>\n  <tr>\n   <th>Символ</th>\n   <th>Значение</th>\n  </tr>\n  <tr>\n   <td><code>(<em>x</em>)</code></td>\n   <td>\n    <p>Сопоставляется с <code><em>x</em></code> и запоминает сопоставление. Называется «захватывающие скобки».</p>\n\n    <p>Например, шаблон <code>/(foo)/</code> сопоставляется с подстрокой «foo» и запоминает её в строке «foo bar». Сопоставленную подстроку можно достать из элементов <code>[1], ..., [n]</code> результирующего массива или из предопределённых свойств <code>$1, ..., $9</code> объекта <code>RegExp</code>.</p>\n\n    <p>Захват групп ведёт к проседанию производительности. Если вам не нужно повторно ссылаться на захваченную подстроку, лучше использовать скобки без захвата (смотрите ниже).</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code>\\<em>n</em></code></td>\n   <td>\n    <p>Где <code><em>n</em></code> является целым положительным числом. Обратная ссылка на последнюю сопоставившуюся подстроку в <em>n</em>-ных по счёту круглых скобках в регулярном выражении (нумерация скобок идёт слева направо).</p>\n\n    <p>Например, шаблон <code>/яблоко(,)\\sапельсин\\1/</code> сопоставится подстроке «яблоко, апельсин,» в строке «яблоко, апельсин, вишня, персик». Более подробный пример смотрите после этой таблицы.</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code>(?:<em>x</em>)</code></td>\n   <td>Сопоставляется с <code><em>x</em></code>, но не запоминает сопоставление. Называется «незахватывающие скобки». Сопоставленную подстроку нельзя достать из элементов <code>[1], ..., [n]</code> результирующего массива или из предопределённых свойств <code>$1, ..., $9</code> объекта <code>RegExp</code>.</td>\n  </tr>\n </tbody>\n <tbody>\n  <tr id=\"quantifiers\">\n   <th colspan=\"2\">Квантификаторы</th>\n  </tr>\n  <tr>\n   <th>Символ</th>\n   <th>Значение</th>\n  </tr>\n  <tr>\n   <td><code><em>x</em>*</code></td>\n   <td>\n    <p>Сопоставляется с предшествующим элементом <em>x</em> ноль или более раз.</p>\n\n    <p>Например, шаблон <code>/ела*/</code> сопоставляется с подстрокой «ел» в строке «Призрак просвистел» и подстрокой «ела» в строке «Птица пропела», но ни с чем не сопоставится в строке «Козёл хмыкнул».</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code><em>x</em>+</code></td>\n   <td>\n    <p>Сопоставляется с предшествующим элементом <em>x</em> один или более раз. Эквивалентен квантификатору <code>{1,}</code>.</p>\n\n    <p>Например, шаблон <code>/о+/</code> сопоставляется с символом «о» в строке «конфета» и со всеми символами «о» в строке «коооооонфета».</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code><em>x</em>*?</code><br>\n    <code><em>x</em>+?</code></td>\n   <td>\n    <p>Сопоставляется с предшествующим элементом <em>x</em> подобно квантификаторам <code>*</code> и <code>+</code>, описанным выше, однако ищет минимально возможное сопоставление.</p>\n\n    <p>Например, шаблон <code>/\".*?\"/</code> сопоставляется с подстрокой «\"foo\"» в строке «\"foo\" \"bar\"» и не сопоставляется со строкой «\"foo\" \"bar\"», поскольку за звёздочкой <code>*</code> следует символ вопроса <code>?</code>.</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code><em>x</em>?</code></td>\n   <td>\n    <p>Сопоставляется с предшествующим элементом <em>x</em> ноль или один раз.</p>\n\n    <p>Например, шаблон <code>/о?то?/</code> сопоставляется с подстрокой «от» в строке «кот» и подстрокой «то» в строке «ток».</p>\n\n    <p>Если символ используется сразу после какого-то из квантификаторов <code>*</code>, <code>+</code>, <code>?</code>, или <code>{}</code>, то он делает этот квантификатор «нежадным» (сопоставление происходит минимально возможное количество раз), в противоположность «жадному» поведению квантификатора по умолчанию (сопоставление происходит максимально возможное количество раз).</p>\n\n    <p>Также символ используется в квантификаторах предпросмотра <code>(?=)</code>, <code>(?!)</code> и <code>(?:)</code>, также описанных в этой таблице.</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code><em>x</em>(?=<em>y</em>)</code></td>\n   <td>Сопоставляется с <code><em>x</em></code>, только если за <code><em>x</em></code> следует <code><em>y</em></code>. Например, шаблон <code>/Джек(?=Шпрот)/</code> сопоставляется со строкой «Джек» только если за ней следует строка «Шпрот». Шаблон <code>/Джек(?=Шпрот|Мороз)/</code> сопоставляется со строкой «Джек» только если за ней следуют строки «Шпрот» или «Мороз». Однако, ни «Шпрот», ни «Мороз» не являются частью результата сопоставления.</td>\n  </tr>\n  <tr>\n   <td><code><em>x</em>(?!<em>y</em>)</code></td>\n   <td>\n    <p>Сопоставляется с <code><em>x</em></code>, только если за <code><em>x</em></code> не следует <code><em>y</em></code>. Например, шаблон <code>/\\d+(?!\\.)/</code> сопоставляется с числом только если за ним не следует десятичная запятая.</p>\n\n    <p>Выражение <code>/\\d+(?!\\.)/.exec('3.141')</code> сопоставится с «141» но не с «3.141».</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code>(?&lt;=<em>y</em>)<em>x</em></code></td>\n   <td>\n    <p><code><font face=\"Arial, x-locale-body, sans-serif\"><span style=\"background-color: #ffffff;\">Сопоставляется с </span></font><em>x</em></code>, только если <code><em>x</em></code> предшествует <code><em>y</em></code></p>\n\n    <p>Например, /<code>(?&lt;=Пётр)Иванов/</code> сопоставится с \"Иванов\" только если ему будет предшествовать \"Петр\".<br>\n     <code>/(?&lt;=Пётр|Владислав)Иванов/</code> сопоставится с \"Иванов\" только если ему будет предшествовать \"Пётр\" или \"Владислав\".<br>\n     В любом случае, ни \"Пётр\" ни \"Владислав\" не войдут в результат сопоставления.</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code>(?&lt;!<em>y</em>)<em>x</em></code></td>\n   <td>\n    <table>\n     <tbody>\n      <tr>\n       <td>\n        <p><code><font face=\"Arial, x-locale-body, sans-serif\"><span style=\"background-color: #ffffff;\">Сопоставляется с </span></font><em>x</em></code>, только если <code><em>x</em></code> не предшествует <code><em>y</em></code></p>\n\n        <p>Например, <code>/(?&lt;!-)\\d+/</code> сопоставится с цифрой, только если ей не предшествует минус.<br>\n         <code>/(?&lt;!-)\\d+/.exec('3')</code> вернёт \"3\".<br>\n          <code>/(?&lt;!-)\\d+/.exec('-3')</code>  не сопоставится с цифрой, тк цифре перед цифрой 3 присутствует минус.</p>\n       </td>\n      </tr>\n     </tbody>\n    </table>\n   </td>\n  </tr>\n  <tr>\n   <td><code><em>x</em>|<em>y</em></code></td>\n   <td>\n    <p>Сопоставляется либо с <code><em>x</em></code>, либо с <code><em>y</em></code>.</p>\n\n    <p>Например, шаблон <code>/зелёное|красное/</code> сопоставится с подстрокой «зелёное» в строке «зелёное яблоко» и подстрокой «красное» в строке «красное яблоко».</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code><em>x</em>{<em>n</em>}</code></td>\n   <td>\n    <p>Где <code><em>n</em></code> является целым положительным числом. Сопоставляется точно с <code><em>n</em></code> вхождениями предшествующего элемента <em>x</em>.</p>\n\n    <p>Например, шаблон <code>/о{2}/</code> не сопоставится с символом «о» в слове «конфета», но сопоставится со всеми символами «о» в слове «коонфета» и с первыми двумя символами «о» в слове «кооонфета».</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code><em>x</em>{<em>n</em>,}</code></td>\n   <td>\n    <p>Где <code><em>n</em></code> является целым положительным числом. Сопоставляется по крайней мере с <code><em>n</em></code> вхождениями предшествующего элемента <em>x</em>.</p>\n\n    <p>Например, шаблон <code>/о{2,}/</code> не сопоставится с символом «о» в слове «конфета», но сопоставится со всеми символами «о» в словах «коонфета» и даже в «кооооооонфета».</p>\n   </td>\n  </tr>\n  <tr>\n   <td><code><em>x</em>{<em>n</em>,<em>m</em>}</code></td>\n   <td>\n    <p>Где <code><em>n</em></code> и <code><em>m</em></code> являются целыми положительными числами. Сопоставляется по крайней мере с <code><em>n</em></code> но не более, чем с <code><em>m</em></code> вхождениями предшествующего элемента <em>x</em>.</p>\n\n    <p>Например, шаблон <code>/о{1,3}/</code> ни с чем не сопоставится в слове «кнфета», с символом «о» в слове «конфета», с двумя символами «о» в слове «коонфета» и с первыми тремя символами «о» в слове «кооооооонфета». Обратите внимание, что при сопоставлении со словом «кооооооонфета» сопоставимость только подстрока «ооо», хотя слово содержало гораздо больше символов «о».</p>\n   </td>\n  </tr>\n </tbody>\n</table>"}},{"type":"prose","value":{"id":"properties","title":"Свойства","isH3":false,"content":"<dl>\n <dt id=\"regexp.prototype_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp.prototype</code> <small>(en-US)</small></a></dt>\n <dd>Позволяет добавлять свойства ко всем объектам регулярных выражений.</dd>\n <dt id=\"regexp.length\"><code>RegExp.length</code></dt>\n <dd>Значение <code>RegExp.length</code> равно 2.</dd>\n</dl>\n\n<div id=\"sect3\"><div class=\"notecard note\" id=\"sect4\">\n\n<div id=\"sect5\"><span>Свойства, унаследованные из <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a>:</span></div>\n<div id=\"sect6\"><a class=\"internal page-not-created\" href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/Arity\" title=\"This is a link to an unwritten page\"><code>arity</code></a>, <a class=\"internal\" href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>caller</code></a>, <a class=\"internal only-in-en-us\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" title=\"Currently only available in English (US)\">constructor (en-US)</a>, <a class=\"internal\" href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>length</code></a>, <a class=\"internal\" href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>name</code></a></div>\n</div></div>"}},{"type":"prose","value":{"id":"methods","title":"Методы","isH3":false,"content":"<p>Глобальный объект <code>RegExp</code> не имеет собственных методов, однако, он наследует некоторые методы через цепочку прототипов.</p>\n\n<div id=\"sect7\"><div class=\"notecard note\" id=\"sect8\">\n\n<div id=\"sect9\"><span>Методы, унаследованные из <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a>:</span></div>\n<div id=\"sect10\"><a class=\"internal\" href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>apply</code></a>, <a class=\"internal\" href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>call</code></a>, <a class=\"internal\" href=\"/ru/docs/conflicting/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>toSource</code></a>, <a class=\"internal\" href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>toString</code></a></div>\n</div></div>"}},{"type":"prose","value":{"id":"regexp_prototype_objects_and_instances","title":"Экземпляры регулярного выражения","isH3":false,"content":""}},{"type":"prose","value":{"id":"properties_of_regexp_instance","title":"Свойства","isH3":true,"content":"<div id=\"sect11\">{{page('/ru/docs/Web/JavaScript/Reference/Global_Objects/RegExp/prototype', 'Properties')}}</div>"}},{"type":"prose","value":{"id":"methods_of_regexp_instance","title":"Методы","isH3":true,"content":"<div id=\"sect12\">{{page('/ru/docs/Web/JavaScript/Reference/Global_Objects/RegExp/prototype', 'Methods')}}</div>"}},{"type":"prose","value":{"id":"examples","title":"Примеры","isH3":false,"content":""}},{"type":"prose","value":{"id":"example_using_a_regular_expression_to_change_data_format","title":"Пример: использование регулярных выражений для смены формата данных","isH3":true,"content":"<p>Следующий скрипт использует метод <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>replace()</code></a> экземпляра строки <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> для сопоставления с именем в формате <em>имя фамилия</em> и выводит его в формате <em>фамилия, имя</em>. В тесте замены скрипт использует заменители <code>$1</code> и <code>$2</code>, которые заменяются на результаты соответствующих сопоставившихся подгрупп регулярного выражения.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(\\w+)\\s(\\w+)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'John Smith'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> newstr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">,</span> <span class=\"token string\">'$2, $1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newstr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// пример с русскими буквами</span>\n<span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">([а-яё]+)\\s([а-яё]+)</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'Джон Смит'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> newstr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">,</span> <span class=\"token string\">'$2, $1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newstr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Пример выведет «Smith, John» и «Смит, Джон»</p>"}},{"type":"prose","value":{"id":"example_using_regular_expression_to_split_lines","title":"Пример: использование регулярного выражения для разбиения строк с различными символами конца строки","isH3":true,"content":"<p>Символы конца строки различаются на различных платформах (Unix, Windows и так далее). Разбиение строк из этого примера работает на всех платформах.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> text <span class=\"token operator\">=</span> <span class=\"token string\">'Некоторый текст\\nЕщё текст\\r\\nИ ещё\\rЭто конец'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> lines <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\r\\n|\\r|\\n</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// выведет [ 'Некоторый текст', 'Ещё текст', 'И ещё', 'Это конец' ]</span>\n</code></pre></div>\n\n<p>Обратите внимание, что порядок шаблонов в регулярном выражении имеет значение.</p>"}},{"type":"prose","value":{"id":"example_using_regular_expression_on_multiple_lines","title":"Пример: использование регулярных выражений на нескольких строках","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'Please yes\\nmake my day!'</span><span class=\"token punctuation\">;</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">yes.*day</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Вернёт null</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">yes[^]*day</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Вернёт 'yes\\nmake my day'</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"example_using_a_regular_expression_with_the_.22sticky.22_flag","title":"Пример: использование регулярных выражений с флагом «липучести»","isH3":true,"content":"<p>Этот пример демонстрирует, как можно использовать флаг «липучести» регулярных выражений для сопоставления с отдельными строками многострочного ввода.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> text <span class=\"token operator\">=</span> <span class=\"token string\">'Первая строка\\nВторая строка'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(\\S+) строка\\n?</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">y</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> match <span class=\"token operator\">=</span> regex<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// напечатает 'Первая'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span>lastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// напечатает '14'</span>\n\n<span class=\"token keyword\">var</span> match2 <span class=\"token operator\">=</span> regex<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>match2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// напечатает 'Вторая'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span>lastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// напечатает '27'</span>\n\n<span class=\"token keyword\">var</span> match3 <span class=\"token operator\">=</span> regex<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>match3 <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// напечатает 'true'</span>\n</code></pre></div>\n\n<p>Во время выполнения можно проверить, поддерживается ли флаг «липучести», при помощи блока <code>try { … } catch { … }</code>. Для этого надо использовать либо выражение с <code>eval(…)</code>, либо конструктор <code>RegExp(<var>строка-регулярки</var>, <var>строка-с-флагами</var>)</code> (поскольку нотация <code>/<var>регулярка</var>/<var>флаги</var></code> обрабатывается во время компиляции, исключение будет выброшено до того, как выполнение достигнет блока <code>catch</code>). Например:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> supports_sticky<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> supports_sticky <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> supports_sticky <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>supports_sticky<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// напечатает 'true'</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"example_regular_expression_and_unicode_characters","title":"Пример: регулярные выражения и символы Юникода","isH3":true,"content":"<p>Как уже сказано выше, символьные классы <code>\\w</code> и <code>\\W</code> сопоставляются только с базовыми символами ASCII; то есть, с символами от «a» до «z», от «A» до «Z», от «0» до «9» и символом «_». Для сопоставления с символами из других языков, например, с кириллическими или иврита, используйте форму <code>\\uhhhh</code>, где «hhhh» — это значение символа Юникода, записанное в шестнадцатеричной форме. Этот пример демонстрирует, как можно выделить символы Юникода, составляющие слова.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> text <span class=\"token operator\">=</span> <span class=\"token string\">'Образец text на русском языке'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\u0400-\\u04FF]+</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> match <span class=\"token operator\">=</span> regex<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// напечатает 'Образец'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span>lastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// напечатает '7'</span>\n\n<span class=\"token keyword\">var</span> match2 <span class=\"token operator\">=</span> regex<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>match2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// напечатает 'на' [не 'text']</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span>lastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// напечатает '15'</span>\n\n<span class=\"token comment\">// и так далее</span>\n</code></pre></div>\n\n<p>Вот на этом внешнем ресурсе можно составить полный диапазон блоков Юникода для различных письменностей: <a href=\"http://kourge.net/projects/regexp-unicode-block\" class=\"external\" rel=\" noopener\">regexp-unicode-block</a>.</p>"}},{"type":"prose","value":{"id":"example_extracting_subdomain_name_from_url","title":"Пример: извлечение имени поддомена из URL","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'http://xxx.domain.com'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[^.]+</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// напечатает 'xxx'</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Спецификации","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/text-processing.html#sec-regexp-regular-expression-objects","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.RegExp"}},{"type":"browser_compatibility","value":{"title":"Совместимость с браузерами","id":"browser_compatibility","isH3":false,"query":"javascript.builtins.RegExp","dataURL":"/ru/docs/Web/JavaScript/Reference/Global_Objects/RegExp/bcd.json"}},{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p></p><p></p>"}},{"type":"prose","value":{"id":"gecko_specific_notes","title":"Примечания по Gecko","isH3":true,"content":"<p>Начиная с Gecko 34 (Firefox 34 / Thunderbird 34 / SeaMonkey 2.31), в случае захвата группы с квантификаторами, предотвращающими появление группы в результате сопоставления, сопоставившийся текст для захваченной группы теперь имеет значение <code>undefined</code> вместо пустой строки:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Firefox 33 или более ранние</span>\n<span class=\"token string\">'x'</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">x(.)?</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">m<span class=\"token punctuation\">,</span> group</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"'group:\"</span> <span class=\"token operator\">+</span> group <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'group:'</span>\n\n<span class=\"token comment\">// Firefox 34 или более новые</span>\n<span class=\"token string\">'x'</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">x(.)?</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">m<span class=\"token punctuation\">,</span> group</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"'group:\"</span> <span class=\"token operator\">+</span> group <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'group:undefined'</span>\n</code></pre></div>\n\n<p>Обратите внимание, что для поддержания обратной совместимости, свойства <code>RegExp.$N</code> по-прежнему возвращают пустую строку вместо значения <code>undefined</code> (<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1053944\" class=\"external\" rel=\" noopener\">bug 1053944</a>).</p>"}},{"type":"prose","value":{"id":"see_also","title":"Смотрите также","isH3":false,"content":"<ul>\n <li>Глава про <a href=\"/ru/docs/Web/JavaScript/Guide/Regular_Expressions\">регулярные выражения</a> в <a href=\"/ru/docs/Web/JavaScript/Guide\">руководстве по JavaScript</a></li>\n <li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/String/match\"><code>String.prototype.match()</code></a></li>\n <li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>String.prototype.replace()</code></a></li>\n</ul>"}}],"toc":[{"text":"Сводка","id":"summary"},{"text":"Синтаксис","id":"syntax"},{"text":"Описание","id":"description"},{"text":"Значение специальных символов в регулярных выражениях","id":"special_characters_meaning_in_regular_expressions"},{"text":"Свойства","id":"properties"},{"text":"Методы","id":"methods"},{"text":"Экземпляры регулярного выражения","id":"regexp_prototype_objects_and_instances"},{"text":"Примеры","id":"examples"},{"text":"Спецификации","id":"specifications"},{"text":"Совместимость с браузерами","id":"browser_compatibility"},{"text":"Смотрите также","id":"see_also"}],"summary":"Конструктор RegExp создаёт объект регулярного выражения для сопоставления текста с шаблоном.","popularity":0.0069,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"RegExp","locale":"en-US","native":"English (US)"},{"title":"RegExp","locale":"es","native":"Español"},{"title":"RegExp","locale":"fr","native":"Français"},{"title":"RegExp","locale":"ja","native":"日本語"},{"title":"RegExp","locale":"ko","native":"한국어"},{"title":"RegExp","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"RegExp(正则表达式)","locale":"zh-CN","native":"中文 (简体)"},{"title":"RegExp","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ru/web/javascript/reference/global_objects/regexp","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/web/javascript/reference/global_objects/regexp/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Web","title":"Веб-технологии для разработчиков"},{"uri":"/ru/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/ru/docs/Web/JavaScript/Reference","title":"Справочник по JavaScript"},{"uri":"/ru/docs/Web/JavaScript/Reference/Global_Objects","title":"Стандартные встроенные объекты"},{"uri":"/ru/docs/Web/JavaScript/Reference/Global_Objects/RegExp","title":"RegExp"}],"pageTitle":"RegExp - JavaScript | MDN","noIndexing":false}}