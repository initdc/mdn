{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Использование промисов","mdn_url":"/ru/docs/Web/JavaScript/Guide/Using_promises","locale":"ru","native":"Русский","sidebarHTML":"\n <ol>\n  <li><a href=\"/ru/docs/Web/JavaScript\"><strong><em>JavaScript</em></strong></a></li>\n  <li><a href=\"/ru/docs/Web/JavaScript/Tutorials\"><strong>Уроки:</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Базовые</summary>\n      <ol>\n        <li><a href=\"/ru/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">Основы JavaScript</a></li>\n        <li><a href=\"/ru/docs/Learn/JavaScript/First_steps\">JavaScript first steps</a></li>\n        <li><a href=\"/ru/docs/Learn/JavaScript/Building_blocks\">JavaScript building blocks</a></li>\n        <li><a href=\"/ru/docs/Learn/JavaScript/Objects\">Introducing JavaScript objects</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Руководство по JavaScript</summary>\n      <ol>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Introduction\">Вступление</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Grammar_and_Types\">Грамматика и типы</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">Порядок выполнения и обработка ошибок</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Loops_and_iteration\">Циклы и итерации</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Functions\">Функции</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Expressions_and_Operators\">Выражения и операторы</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Numbers_and_dates\">Числа и даты</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Text_formatting\">Форматирование текста</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Regular_Expressions\">Регулярные выражения</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Indexed_collections\">Упорядоченные наборы данных</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Keyed_collections\">Коллекции</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Working_with_Objects\">Работа с объектами</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Details_of_the_Object_Model\">Подробнее об объектной модели</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Using_promises\">Using promises</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Iterators_and_generators\">Итераторы и генераторы</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Meta_programming\">Метапрограммирование</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Modules\">JavaScript modules</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Средние</summary>\n      <ol>\n        <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks\">Client-side JavaScript frameworks</a></li>\n        <li><a href=\"/ru/docs/Learn/JavaScript/Client-side_web_APIs\">Client-side web APIs</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">Повторное введение в JavaScript</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Data_structures\">Структуры данных JavaScript</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness\">Проверки на равенство и когда их использовать</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Closures\">Замыкания</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Продвинутые</summary>\n      <ol>\n        <li><a href=\"/ru/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">Наследование и цепочка прототипов</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Reference/Strict_mode\">Строгий режим</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Typed_arrays\">Типизированные массивы JavaScript</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Memory_Management\">Управление памятью</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/EventLoop\">Модель совпадения и циклы событий</a></li>\n      </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/ru/docs/Web/JavaScript/Reference\">Справочная информация:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n       <summary>Встроенные объекты</summary>\n        <ol><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\">AggregateError</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\">AsyncFunction</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\">AsyncGenerator</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\">AsyncGeneratorFunction</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Atomics\">Atomics</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array\">BigInt64Array</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array\">BigUint64Array</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/DataView\">DataView</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\">decodeURI()</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent()</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI()</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent()</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Error\">Error</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/escape\">escape()</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval()</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/EvalError\">EvalError</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\">FinalizationRegistry</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\">Float32Array</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\">Float64Array</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Generator\">Generator</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">globalThis</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Infinity\">Infinity</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\">Int16Array</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\">Int32Array</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\">Int8Array</a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/InternalError\">InternalError</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/isFinite\">isFinite()</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/isNaN\">isNaN()</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/NaN\">NaN</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">parseFloat()</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">parseInt()</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/RangeError\">RangeError</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\">ReferenceError</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">Reflect</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">RegExp</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/String\">String</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\">SyntaxError</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">TypedArray</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\">Uint16Array</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\">Uint32Array</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">Uint8Array</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\">Uint8ClampedArray</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/undefined\">undefined</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/unescape\">unescape()</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/URIError\">URIError</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/WeakRef\">WeakRef</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\">WeakSet</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Выражения и операторы</summary>\n      <ol><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Addition_assignment\">Addition assignment (+=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Addition\">Addition (+)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Assignment\">Assignment (=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/async_function*\">async function* expression</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/await\">await</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment\">Bitwise AND assignment (&amp;=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">Bitwise AND (&amp;)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">Bitwise NOT (~)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment\">Bitwise OR assignment (|=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">Bitwise OR (|)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment\">Bitwise XOR assignment (^=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">Bitwise XOR (^)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/class\">class expression</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Comma_Operator\">Comma operator (,)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">Conditional (ternary) operator</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Decrement\">Decrement (--)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/delete\">delete operator</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">Destructuring assignment</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Division_assignment\">Division assignment (/=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Division\">Division (/)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Equality\">Equality (==)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment\">Exponentiation assignment (**=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Exponentiation\">Exponentiation (**)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/function\">Function expression</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal\">Greater than or equal (&gt;=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Greater_than\">Greater than (&gt;)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Grouping\">Grouping operator ( )</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/import.meta\">import.meta</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/import\">import</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/in\">in operator</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Increment\">Increment (++)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Inequality\">Inequality (!=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/instanceof\">instanceof</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment\">Left shift assignment (&lt;&lt;=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Left_shift\">Left shift (&lt;&lt;)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal\">Less than or equal (&lt;=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Less_than\">Less than (&lt;)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment\">Logical AND assignment (&amp;&amp;=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Logical_AND\">Logical AND (&amp;&amp;)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">Logical NOT (!)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment\">Logical nullish assignment (??=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment\">Logical OR assignment (||=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Logical OR (||)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment\">Multiplication assignment (*=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Multiplication\">Multiplication (*)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/new.target\">new.target</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/new\">new operator</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/null\">null</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\">Nullish coalescing operator (??)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Object_initializer\">Object initializer</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">Operator precedence</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">Optional chaining (?.)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Property_Accessors\">Property accessors</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Remainder_assignment\">Remainder assignment (%=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Remainder\">Remainder (%)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment\">Right shift assignment (&gt;&gt;=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Right_shift\">Right shift (&gt;&gt;)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Spread syntax (...)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Strict_equality\">Strict equality (===)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">Strict inequality (!==)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment\">Subtraction assignment (-=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Subtraction\">Subtraction (-)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/super\">super</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/this\">this</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/typeof\">typeof</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Unary_negation\">Unary negation (-)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Unary_plus\">Unary plus (+)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment\">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">Unsigned right shift (&gt;&gt;&gt;)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/void\">void operator</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/yield*\">yield*</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/yield\">yield</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Инструкции и объявления</summary>\n      <ol><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/async_function*\">async function*</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/block\">block</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/break\">break</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/class\">class</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/const\">const</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/continue\">continue</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/debugger\">debugger</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/do...while\">do...while</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/Empty\">empty</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/export\">export</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/for-await...of\">for await...of</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/for\">for</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/function*\">function*</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/function\">function declaration</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/if...else\">if...else</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/import\">import</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/label\">label</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/let\">let</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/return\">return</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/switch\">switch</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/throw\">throw</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/try...catch\">try...catch</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/var\">var</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/while\">while</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/with\">with</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Функции</summary>\n      <ol><li><a href=\"/ru/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow function expressions</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Functions/get\">getter</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Functions/set\">setter</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Классы</summary>\n      <ol><li><a href=\"/ru/docs/Web/JavaScript/Reference/Classes/Class_static_initialization_blocks\">Class static initialization blocks</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Classes/constructor\">constructor</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Classes/extends\">extends</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">Private class features</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Classes/Public_class_fields\">Public class fields</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Classes/static\">static</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Ошибки</summary>\n      <ol><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Already_has_pragma\">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Array_sort_argument\">TypeError: invalid Array.prototype.sort argument</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Bad_octal\">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Bad_radix\">RangeError: radix must be an integer</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag\">SyntaxError: invalid regular expression flag \"x\"</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield\">SyntaxError: return not in function</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/BigInt_division_by_zero\">RangeError: BigInt division by zero</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/BigInt_negative_exponent\">RangeError: BigInt negative exponent</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type\">TypeError: X.prototype.y called on incompatible type</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init\">ReferenceError: can't access lexical declaration 'X' before initialization</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Cant_assign_to_property\">TypeError: can't assign to property \"x\" on \"y\": not an object</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Cant_be_converted_to_BigInt_because_it_isnt_an_integer\">RangeError: x can't be converted to BigInt because it isn't an integer</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Cant_convert_BigInt_to_number\">TypeError: can't convert BigInt to number</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Cant_convert_x_to_BigInt\">TypeError: can't convert x to BigInt</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible\">TypeError: can't define property \"x\": \"obj\" is not extensible</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Cant_delete\">TypeError: property \"x\" is non-configurable and can't be deleted</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property\">TypeError: can't redefine non-configurable property \"x\"</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Cant_use_nullish_coalescing_unparenthesized\">SyntaxError: cannot use `??` unparenthesized within `||` and `&amp;&amp;` expressions</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value\">TypeError: cyclic object value</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Dead_object\">TypeError: can't access dead object</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode\">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage\">ReferenceError: deprecated caller or arguments usage</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Deprecated_expression_closures\">Warning: expression closures are deprecated</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Deprecated_octal\">SyntaxError: \"0\"-prefixed octal literals and octal escape seq. are deprecated</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma\">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Deprecated_String_generics\">Warning: String.x is deprecated; use String.prototype.x instead</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Deprecated_toLocaleFormat\">Warning: Date.prototype.toLocaleFormat is deprecated</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Equal_as_assign\">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Getter_only\">TypeError: setting getter-only property \"x\"</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Hash_outside_class\">SyntaxError: Unexpected '#' used outside of class body</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Identifier_after_number\">SyntaxError: identifier starts immediately after numeric literal</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Illegal_character\">SyntaxError: illegal character</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/in_operator_no_object\">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\">RangeError: invalid array length</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side\">SyntaxError: invalid assignment left-hand side</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax\">SyntaxError: invalid BigInt syntax</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment\">TypeError: invalid assignment to const \"x\"</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Invalid_date\">RangeError: invalid date</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer\">SyntaxError: for-in loop head declarations may not have initializers</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer\">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand\">TypeError: invalid 'instanceof' operand 'x'</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/is_not_iterable\">TypeError: 'x' is not iterable</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse\">SyntaxError: JSON.parse: bad parsing</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Malformed_formal_parameter\">SyntaxError: Malformed formal parameter</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Malformed_URI\">URIError: malformed URI sequence</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list\">SyntaxError: missing ] after element list</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id\">SyntaxError: missing : after property id</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body\">SyntaxError: missing } after function body</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list\">SyntaxError: missing } after property list</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter\">SyntaxError: missing formal parameter</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const\">SyntaxError: missing = in const declaration</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator\">SyntaxError: missing name after . operator</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\">SyntaxError: missing ) after argument list</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition\">SyntaxError: missing ) after condition</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Missing_semicolon_before_statement\">SyntaxError: missing ; before statement</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/More_arguments_needed\">TypeError: More arguments needed</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count\">RangeError: repeat count must be non-negative</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/No_non-null_object\">TypeError: \"x\" is not a non-null object</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/No_properties\">TypeError: \"x\" has no properties</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/No_variable_name\">SyntaxError: missing variable name</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element\">TypeError: can't delete non-configurable array element</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint\">RangeError: argument is not a valid code point</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Not_a_constructor\">TypeError: \"x\" is not a constructor</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Not_a_function\">TypeError: \"x\" is not a function</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Not_defined\">ReferenceError: \"x\" is not defined</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Precision_range\">RangeError: precision is out of range</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Property_access_denied\">Error: Permission denied to access property \"x\"</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Read-only\">TypeError: \"x\" is read-only</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter\">SyntaxError: redeclaration of formal parameter \"x\"</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value\">TypeError: Reduce of empty array with no initial value</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Reserved_identifier\">SyntaxError: \"x\" is a reserved identifier</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large\">RangeError: repeat count must be less than infinity</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Stmt_after_return\">Warning: unreachable code after return statement</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params\">SyntaxError: \"use strict\" not allowed in function with non-simple parameters</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Too_much_recursion\">InternalError: too much recursion</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Undeclared_var\">ReferenceError: assignment to undeclared variable \"x\"</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Undefined_prop\">ReferenceError: reference to undefined property \"x\"</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Unexpected_token\">SyntaxError: Unexpected token</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Unexpected_type\">TypeError: \"x\" is (not) \"y\"</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement\">SyntaxError: function statement requires a name</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Unparenthesized_unary_expr_lhs_exponentiation\">SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Unterminated_string_literal\">SyntaxError: unterminated string literal</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Ещё</summary>\n      <ol>\n        <li><a href=\"/ru/docs/Web/JavaScript/JavaScript_technologies_overview\">Обзор технологий JavaScript</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Reference/Lexical_grammar\">Лексическая грамматика</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Data_structures\">Структуры данных JavaScript</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">Перечисляемость и принадлежность свойств</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Reference/Iteration_protocols\">Протоколы перебора</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Reference/Strict_mode\">Строгий режим</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\">Переход в строгий режим</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Reference/Template_literals\">Шаблонные строки</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\">Устаревшие возможности</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div id=\"sect1\">\n<p></p><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ru/docs/conflicting/Web/JavaScript/Inheritance_and_the_prototype_chain\">« Предыдущая статья</a></li>\n    <li><a class=\"button minimal\" href=\"/ru/docs/Web/JavaScript/Guide/Iterators_and_Generators\">Следующая статья  »</a></li>\n</ul><p></p>\n</div>\n\n<p class=\"summary\"><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> (промис) - это объект, представляющий результат успешного или неудачного завершения асинхронной операции. Так как большинство людей пользуются уже созданными промисами, это руководство начнём с объяснения использования вернувшихся промисов до объяснения принципов создания. </p>\n\n<p>В сущности, промис - это возвращаемый объект, в который вы записываете два колбэка вместо того, чтобы передать их функции.</p>\n\n<p>Например, вместо старомодной функции, которая принимает два колбэка и вызывает один из них в зависимости от успешного или неудачного завершения операции:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">doSomethingOldStyle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">successCallback<span class=\"token punctuation\">,</span> failureCallback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Готово.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Успех в половине случаев.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">.5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">successCallback</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Успех\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">failureCallback</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ошибка\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">successCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Успешно завершено с результатом \"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">failureCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Завершено с ошибкой \"</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">doSomethingOldStyle</span><span class=\"token punctuation\">(</span>successCallback<span class=\"token punctuation\">,</span> failureCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>…современные функции возвращают промис, в который вы записываете ваши колбэки:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Готово.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Успех в половине случаев.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">.5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Успех\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ошибка\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npromise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>successCallback<span class=\"token punctuation\">,</span> failureCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>…или просто:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>successCallback<span class=\"token punctuation\">,</span> failureCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>Мы называем это <em>асинхронным вызовом функции</em>. У этого соглашения есть несколько преимуществ. Давайте рассмотрим их.</p>"}},{"type":"prose","value":{"id":"гарантии","title":"Гарантии","isH3":false,"content":"<p>В отличие от старомодных переданных колбэков промис даёт некоторые гарантии:</p>\n\n<ul>\n <li>Колбэки никогда не будут вызваны до <a href=\"/ru/docs/Web/JavaScript/EventLoop#никогда_не_блокируется\">завершения обработки текущего события</a> в событийном цикле JavaScript.</li>\n <li>Колбэки, добавленные через .then даже <em>после </em>успешного или неудачного завершения асинхронной операции, будут также вызваны.</li>\n <li>Несколько колбэков может быть добавлено вызовом .then нужное количество раз, и они будут выполняться независимо в порядке добавления.</li>\n</ul>\n\n<p>Но наиболее непосредственная польза от промисов - цепочка вызовов (<em>chaining</em>).</p>"}},{"type":"prose","value":{"id":"цепочка_вызовов","title":"Цепочка вызовов","isH3":false,"content":"<p>Общая нужда - выполнять две или более асинхронных операции одна за другой, причём каждая следующая начинается при успешном завершении предыдущей и использует результат её выполнения. Мы реализуем это, создавая цепочку вызовов промисов (<em>promise chain</em>).</p>\n\n<p>Вот в чём магия: функция <code>then</code> возвращает новый промис, отличающийся от первоначального:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> promise <span class=\"token operator\">=</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> promise2 <span class=\"token operator\">=</span> promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>successCallback<span class=\"token punctuation\">,</span> failureCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>или</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> promise2 <span class=\"token operator\">=</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>successCallback<span class=\"token punctuation\">,</span> failureCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Второй промис представляет завершение не только <code>doSomething()</code>, но и функций <code>successCallback</code> или <code>failureCallback</code>, переданных вами, а они тоже могут быть асинхронными функциями, возвращающими промис. В этом случае все колбэки, добавленные к <code>promise2</code> будут поставлены в очередь за промисом, возвращаемым <code>successCallback</code> или <code>failureCallback</code>.</p>\n\n<p>По сути, каждый вызванный промис означает успешное завершение предыдущих шагов в цепочке.</p>\n\n<p>Раньше выполнение нескольких асинхронных операций друг за другом приводило к классической \"Вавилонской башне\" колбэков:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">doSomethingElse</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newResult</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">doThirdThing</span><span class=\"token punctuation\">(</span>newResult<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">finalResult</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Итоговый результат: '</span> <span class=\"token operator\">+</span> finalResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> failureCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> failureCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> failureCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>В современных функциях мы записываем колбэки в возвращаемые промисы - формируем цепочку промисов:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">doSomethingElse</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newResult</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">doThirdThing</span><span class=\"token punctuation\">(</span>newResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">finalResult</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Итоговый результат: '</span> <span class=\"token operator\">+</span> finalResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>failureCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Аргументы <code>then</code> необязательны, а <code>catch(failureCallback)</code> - это сокращение для <code>then(null, failureCallback)</code>. Вот как это выражено с помощью <a href=\"/ru/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">стрелочных функций</a>:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">doSomethingElse</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newResult</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">doThirdThing</span><span class=\"token punctuation\">(</span>newResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">finalResult</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Итоговый результат: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>finalResult<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>failureCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p><strong>Важно:</strong> Всегда возвращайте промисы в return, иначе колбэки не будут сцеплены и ошибки могут быть не пойманы (стрелочные функции неявно возвращают результат, если скобки {} вокруг тела функции опущены).</p>"}},{"type":"prose","value":{"id":"цепочка_вызовов_после_catch","title":"Цепочка вызовов после catch","isH3":true,"content":"<p>Можно продолжить цепочку вызовов <em>после </em>ошибки, т. е. после <code>catch</code>, что полезно для выполнения новых действий даже после того, как действие вернёт ошибку в цепочке вызовов. Ниже приведён пример:</p>\n\n<pre class=\"syntaxbox notranslate\">new Promise((resolve, reject) =&gt; {\n    console.log('Начало');\n\n    resolve();\n})\n.then(() =&gt; {\n    throw new Error('Где-то произошла ошибка');\n\n    console.log('Выведи это');\n})\n.catch(() =&gt; {\n    console.log('Выведи то');\n})\n.then(() =&gt; {\n    console.log('Выведи это, несмотря ни на что');\n});</pre>\n\n<p>В результате выведется данный текст:</p>\n\n<pre class=\"notranslate\">Начало\nВыведи то\nВыведи это, несмотря ни на что</pre>\n\n<p>Заметьте, что текст \"Выведи это\" не вывелся, потому что \"Где-то произошла ошибка\" привела к отказу</p>"}},{"type":"prose","value":{"id":"распространение_ошибки","title":"Распространение ошибки","isH3":false,"content":"<p>Вы могли ранее заметить, что <code>failureCallback</code>  повторяется три раза  в <strong>\"pyramid of doom\", </strong>а в цепочке промисов всего лишь один раз:</p>\n\n<pre class=\"notranslate\">doSomething()\n.then(result =&gt; doSomethingElse(result))\n.then(newResult =&gt; doThirdThing(newResult))\n.then(finalResult =&gt; console.log(`Итоговый результат: ${finalResult}`))\n.catch(failureCallback);</pre>\n\n<p>В основном, цепочка промисов останавливает выполнение кода, если где-либо произошла ошибка, и вместо этого ищет далее по цепочке обработчики ошибок. Это очень похоже на то, как работает синхронный код:</p>\n\n<pre class=\"notranslate\">try {\n  let result = syncDoSomething();\n  let newResult = syncDoSomethingElse(result);\n  let finalResult = syncDoThirdThing(newResult);\n  console.log(`Итоговый результат: ${finalResult}`);\n} catch(error) {\n  failureCallback(error);\n}\n</pre>\n\n<p>Эта симметрия с синхронным кодом лучше всего показывает себя в синтаксическом сахаре <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/async_function\"><code>async</code>/<code>await</code></a> в ECMAScript 2017:</p>\n\n<pre class=\"notranslate\">async function foo() {\n  try {\n    let result = await doSomething();\n    let newResult = await doSomethingElse(result);\n    let finalResult = await doThirdThing(newResult);\n    console.log(`Итоговый результат: ${finalResult}`);\n  } catch(error) {\n    failureCallback(error);\n  }\n}\n</pre>\n\n<p>Работа данного кода основана на промисах. Для примера здесь используется функция <code>doSomething()</code>, которая встречалась ранее. Вы можете прочитать больше о синтаксисе <a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/async-functions\" class=\"external\" rel=\" noopener\">здесь</a></p>\n\n<p>Промисы решают основную проблему пирамид, обработку всех ошибок, даже вызовов исключений и программных ошибок. Это основа для функционального построения асинхронных операций.</p>"}},{"type":"prose","value":{"id":"создание_промиса_вокруг_старого_колбэка","title":"Создание промиса вокруг старого колбэка","isH3":false,"content":"<p><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> может быть создан с помощью конструктора. Это может понадобится только для старых API.</p>\n\n<p>В идеале, все асинхронные функции уже должны возвращать промис. Но увы, некоторые APIs до сих пор ожидают успешного или неудачного колбэка переданных по старинке. Типичный пример: <a href=\"/ru/docs/Web/API/setTimeout\" title=\"setTimeout()\"><code>setTimeout()</code></a> функция:</p>\n\n<pre class=\"notranslate\">setTimeout(() =&gt; saySomething(\"10 seconds passed\"), 10000);</pre>\n\n<p>Смешивание старого колбэк-стиля и промисов проблематично. В случае неудачного завершения <code>saySomething</code> или программной ошибки, нельзя обработать ошибку.</p>\n\n<p>К счастью мы можем обернуть функцию в промис. Хороший тон оборачивать проблематичные функции на самом низком возможном уровне, и больше никогда их не вызывать напрямую:</p>\n\n<pre class=\"notranslate\">const wait = ms =&gt; new Promise(resolve =&gt; setTimeout(resolve, ms));\n\nwait(10000).then(() =&gt; saySomething(\"10 seconds\")).catch(failureCallback);</pre>\n\n<p>В сущности, конструктор промиса становится исполнителем функции, который позволяет нам резолвить или режектить промис вручную. Так как <code>setTimeout</code> всегда успешен, мы опустили reject в этом случае.</p>"}},{"type":"prose","value":{"id":"композиция","title":"Композиция","isH3":false,"content":"<p><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\"><code>Promise.resolve()</code></a> и <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject\"><code>Promise.reject()</code></a> короткий способ создать уже успешные или отклонённые промисы соответственно. Это иногда бывает полезно.</p>\n\n<p><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\"><code>Promise.all()</code></a> и <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Promise/race\"><code>Promise.race()</code></a> - два метода запустить асинхронные операции параллельно.</p>\n\n<p>Последовательное выполнение композиции возможно при помощи хитрости JavaScript:</p>\n\n<pre class=\"notranslate\">[func1, func2].reduce((p, f) =&gt; p.then(f), Promise.resolve());</pre>\n\n<p>Фактически, мы превращаем массив асинхронных функций в цепочку промисов равносильно: <code>Promise.resolve().then(func1).then(func2);</code></p>\n\n<p>Это также можно сделать, объединив композицию в функцию, в функциональном стиле программирования:</p>\n\n<pre class=\"notranslate\">const applyAsync = (acc,val) =&gt; acc.then(val);\nconst composeAsync = (...funcs) =&gt; x =&gt; funcs.reduce(applyAsync, Promise.resolve(x));</pre>\n\n<p><code>composeAsync</code> функция примет любое количество функций в качестве аргументов и вернёт новую функцию которая примет в параметрах начальное значение, переданное по цепочке. Это удобно, потому что некоторые или все функции могут быть либо асинхронными, либо синхронными, и они гарантированно выполнятся в правильной последовательности:</p>\n\n<pre class=\"notranslate\">const transformData = composeAsync(func1, asyncFunc1, asyncFunc2, func2);\ntransformData(data);</pre>\n\n<p>В ECMAScript 2017, последовательные композиции могут быть выполнены более простым способом с помощью async/await:</p>\n\n<pre class=\"notranslate\">for (const f of [func1, func2]) {\n  await f();\n}</pre>"}},{"type":"prose","value":{"id":"порядок_выполнения","title":"Порядок выполнения","isH3":false,"content":"<p>Чтобы избежать сюрпризов, функции, переданные в <code>then</code> никогда не будут вызваны синхронно, даже с уже разрешённым промисом:</p>\n\n<pre class=\"notranslate\">Promise.resolve().then(() =&gt; console.log(2));\nconsole.log(1); // 1, 2</pre>\n\n<p>Вместо немедленного выполнения, переданная функция встанет в очередь микрозадач, а значит выполнится, когда очередь будет пустой  в конце текущего вызова JavaScript цикла событий (event loop), т.е. очень скоро:</p>\n\n<pre class=\"notranslate\">const wait = ms =&gt; new Promise(resolve =&gt; setTimeout(resolve, ms));\n\nwait().then(() =&gt; console.log(4));\nPromise.resolve().then(() =&gt; console.log(2)).then(() =&gt; console.log(3));\nconsole.log(1); // 1, 2, 3, 4</pre>"}},{"type":"prose","value":{"id":"вложенность","title":"Вложенность","isH3":false,"content":"<p>Простые цепочки promise лучше оставлять без вложений, так как вложенность может быть результатом небрежной структуры. Смотрите <a href=\"/ru/docs/Web/JavaScript/Guide/Ispolzovanie_promisov$edit#Common_mistakes\">распространённые ошибки</a>.</p>\n\n<p>Вложенность - это управляющая структура, ограничивающая область действия операторов catch. В частности, вложенный catch только перехватывает сбои в своей области и ниже, а не ошибки выше в цепочке за пределами вложенной области. При правильном использовании это даёт большую точность в извлечение ошибок:</p>\n\n<pre class=\"notranslate\">doSomethingCritical()\n.then(result =&gt; doSomethingOptional()\n  .then(optionalResult =&gt; doSomethingExtraNice(optionalResult))\n  .catch(e =&gt; {})) // Игнорируется если необязательные параметр не выкинул исключение\n.then(() =&gt; moreCriticalStuff())\n.catch(e =&gt; console.log(\"Критическая ошибка: \" + e.message));</pre>\n\n<p>Обратите внимание, что необязательный шаги здесь выделены отступом.</p>\n\n<p>Внутренний оператор catch нейтрализует и перехватывает ошибки только от doSomethingOptional() и doSomethingExtraNice(), после чего код возобновляется с помощью moreCriticalStuff(). Важно, что в случае сбоя doSomethingCritical() его ошибка перехватывается только последним (внешним) catch.</p>"}},{"type":"prose","value":{"id":"частые_ошибки","title":"Частые ошибки","isH3":false,"content":"<p>В этом разделе собраны частые ошибки, возникающие при создании цепочек промисов. Несколько таких ошибок можно увидеть в следующем примере:</p>\n\n<pre class=\"notranslate\">// Плохой пример! Три ошибки!\n\ndoSomething().then(function(result) {\n  doSomethingElse(result) // Забыл вернуть промис из внутренней цепочки + неуместное влаживание\n  .then(newResult =&gt; doThirdThing(newResult));\n}).then(() =&gt; doFourthThing());\n// Забыл закончить цепочку методом catch</pre>\n\n<p>Первая ошибка это неправильно сцепить вещи между собой. Такое происходит когда мы создаём промис но забываем вернуть его. Как следствие, цепочка сломана, но правильнее было бы сказать что теперь у нас есть две независимые цепочки, соревнующиеся за право разрешится первой. Это означает, что <code>doFourthThing()</code> не будет ждать <code>doSomethingElse()</code> или <code>doThirdThing()</code> пока тот закончится, и будет исполнятся параллельно с ними, это, вероятно, не то что хотел разработчик. Отдельные цепочки также имеют отдельную обработку ошибок, что приводит к необработанным ошибкам.</p>\n\n<p>Вторая ошибка это излишняя вложенность, включая первую ошибку. Вложенность также ограничивает область видимости внутренних обработчиков ошибок, если это не то чего хотел разработчик, это может привести к необработанным ошибкам. Примером этого является <a href=\"https://stackoverflow.com/questions/23803743/what-is-the-explicit-promise-construction-antipattern-and-how-do-i-avoid-it\" class=\"external\" rel=\" noopener\">пример как не нужно создавать промисы</a>, который комбинирует вложенность с чрезмерным использованием конструктора промисов для оборачивания кода который уже использует промисы.</p>\n\n<p>Третья ошибка это забыть закончить цепочку ключевым словом <code>catch</code>. Незаконченные цепочки приводят к необработанным отторжениям промисов в большинстве браузеров.</p>\n\n<p>Хорошим примером является всегда либо возвращать либо заканчивать цепочки промисов, и как только вы получаете новый промис, возвращайте его сразу же, чтобы не усложнять код излишней вложенностью:</p>\n\n<pre class=\"notranslate\">doSomething()\n.then(function(result) {\n  return doSomethingElse(result);\n})\n.then(newResult =&gt; doThirdThing(newResult))\n.then(() =&gt; doFourthThing())\n.catch(error =&gt; console.log(error));</pre>\n\n<p>Обратите внимание что <code>() =&gt; x</code>  это сокращённая форма <code>() =&gt; { return x; }</code>.</p>\n\n<p>Теперь у нас имеется единственная определённая цепочка с правильной обработкой ошибок.</p>\n\n<p>Использование <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/async_function\"><code>async</code>/<code>await</code></a> предотвращает большинство, если не все вышеуказанные ошибки, но взамен появляется другая частая ошибка — забыть ключевое слово <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/async_function\"><code>await</code></a>.</p>"}},{"type":"prose","value":{"id":"смотрите_также","title":"Смотрите также","isH3":false,"content":"<ul>\n <li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\"><code>Promise.then()</code></a></li>\n <li><a href=\"https://promisesaplus.com/\" class=\"external\" rel=\" noopener\">Спецификация Promises/A+ (EN)</a></li>\n <li><a href=\"https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html\" class=\"external\" rel=\" noopener\">Нолан Лоусон (Nolan Lawson): У нас проблемы с промисами - распространённые ошибки (EN)</a></li>\n</ul>"}}],"toc":[{"text":"Гарантии","id":"гарантии"},{"text":"Цепочка вызовов","id":"цепочка_вызовов"},{"text":"Распространение ошибки","id":"распространение_ошибки"},{"text":"Создание промиса вокруг старого колбэка","id":"создание_промиса_вокруг_старого_колбэка"},{"text":"Композиция","id":"композиция"},{"text":"Порядок выполнения","id":"порядок_выполнения"},{"text":"Вложенность","id":"вложенность"},{"text":"Частые ошибки","id":"частые_ошибки"},{"text":"Смотрите также","id":"смотрите_также"}],"summary":"Promise (промис) - это объект, представляющий результат успешного или неудачного завершения асинхронной операции. Так как большинство людей пользуются уже созданными промисами, это руководство начнём с объяснения использования вернувшихся промисов до объяснения принципов создания. ","popularity":0.0022,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using Promises","locale":"en-US","native":"English (US)"},{"title":"Usar promesas","locale":"es","native":"Español"},{"title":"Utiliser les promesses","locale":"fr","native":"Français"},{"title":"プロミスの使用","locale":"ja","native":"日本語"},{"title":"Using promises","locale":"ko","native":"한국어"},{"title":"Usando promises","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"使用 Promise","locale":"zh-CN","native":"中文 (简体)"},{"title":"使用 Promise","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ru/web/javascript/guide/using_promises","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/web/javascript/guide/using_promises/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Web","title":"Веб-технологии для разработчиков"},{"uri":"/ru/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/ru/docs/Web/JavaScript/Guide","title":"Руководство JavaScript"},{"uri":"/ru/docs/Web/JavaScript/Guide/Using_promises","title":"Использование промисов"}],"pageTitle":"Использование промисов - JavaScript | MDN","noIndexing":false}}