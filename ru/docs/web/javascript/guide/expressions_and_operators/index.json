{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Выражения и операторы","mdn_url":"/ru/docs/Web/JavaScript/Guide/Expressions_and_Operators","locale":"ru","native":"Русский","sidebarHTML":"\n <ol>\n  <li><a href=\"/ru/docs/Web/JavaScript\"><strong><em>JavaScript</em></strong></a></li>\n  <li><a href=\"/ru/docs/Web/JavaScript/Tutorials\"><strong>Уроки:</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Базовые</summary>\n      <ol>\n        <li><a href=\"/ru/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">Основы JavaScript</a></li>\n        <li><a href=\"/ru/docs/Learn/JavaScript/First_steps\">JavaScript first steps</a></li>\n        <li><a href=\"/ru/docs/Learn/JavaScript/Building_blocks\">JavaScript building blocks</a></li>\n        <li><a href=\"/ru/docs/Learn/JavaScript/Objects\">Introducing JavaScript objects</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Руководство по JavaScript</summary>\n      <ol>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Introduction\">Вступление</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Grammar_and_Types\">Грамматика и типы</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">Порядок выполнения и обработка ошибок</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Loops_and_iteration\">Циклы и итерации</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Functions\">Функции</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Expressions_and_Operators\">Выражения и операторы</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Numbers_and_dates\">Числа и даты</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Text_formatting\">Форматирование текста</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Regular_Expressions\">Регулярные выражения</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Indexed_collections\">Упорядоченные наборы данных</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Keyed_collections\">Коллекции</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Working_with_Objects\">Работа с объектами</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Details_of_the_Object_Model\">Подробнее об объектной модели</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Using_promises\">Using promises</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Iterators_and_generators\">Итераторы и генераторы</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Meta_programming\">Метапрограммирование</a></li>\n          <li><a href=\"/ru/docs/Web/JavaScript/Guide/Modules\">JavaScript modules</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Средние</summary>\n      <ol>\n        <li><a href=\"/ru/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks\">Client-side JavaScript frameworks</a></li>\n        <li><a href=\"/ru/docs/Learn/JavaScript/Client-side_web_APIs\">Client-side web APIs</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">Повторное введение в JavaScript</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Data_structures\">Структуры данных JavaScript</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness\">Проверки на равенство и когда их использовать</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Closures\">Замыкания</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Продвинутые</summary>\n      <ol>\n        <li><a href=\"/ru/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">Наследование и цепочка прототипов</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Reference/Strict_mode\">Строгий режим</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Typed_arrays\">Типизированные массивы JavaScript</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Memory_Management\">Управление памятью</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/EventLoop\">Модель совпадения и циклы событий</a></li>\n      </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/ru/docs/Web/JavaScript/Reference\">Справочная информация:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n       <summary>Встроенные объекты</summary>\n        <ol><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\">AggregateError</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\">AsyncFunction</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\">AsyncGenerator</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\">AsyncGeneratorFunction</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Atomics\">Atomics</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array\">BigInt64Array</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array\">BigUint64Array</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/DataView\">DataView</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\">decodeURI()</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent()</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI()</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent()</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Error\">Error</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/escape\">escape()</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval()</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/EvalError\">EvalError</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\">FinalizationRegistry</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\">Float32Array</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\">Float64Array</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Generator\">Generator</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">globalThis</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Infinity\">Infinity</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\">Int16Array</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\">Int32Array</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\">Int8Array</a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/InternalError\">InternalError</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/isFinite\">isFinite()</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/isNaN\">isNaN()</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/NaN\">NaN</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">parseFloat()</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">parseInt()</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/RangeError\">RangeError</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\">ReferenceError</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">Reflect</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">RegExp</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/String\">String</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\">SyntaxError</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">TypedArray</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\">Uint16Array</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\">Uint32Array</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">Uint8Array</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\">Uint8ClampedArray</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/undefined\">undefined</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/unescape\">unescape()</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/URIError\">URIError</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/WeakRef\">WeakRef</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\">WeakSet</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Выражения и операторы</summary>\n      <ol><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Addition_assignment\">Addition assignment (+=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Addition\">Addition (+)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Assignment\">Assignment (=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/async_function*\">async function* expression</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/await\">await</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment\">Bitwise AND assignment (&amp;=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">Bitwise AND (&amp;)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">Bitwise NOT (~)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment\">Bitwise OR assignment (|=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">Bitwise OR (|)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment\">Bitwise XOR assignment (^=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">Bitwise XOR (^)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/class\">class expression</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Comma_Operator\">Comma operator (,)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">Conditional (ternary) operator</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Decrement\">Decrement (--)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/delete\">delete operator</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">Destructuring assignment</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Division_assignment\">Division assignment (/=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Division\">Division (/)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Equality\">Equality (==)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment\">Exponentiation assignment (**=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Exponentiation\">Exponentiation (**)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/function\">Function expression</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal\">Greater than or equal (&gt;=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Greater_than\">Greater than (&gt;)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Grouping\">Grouping operator ( )</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/import.meta\">import.meta</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/import\">import</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/in\">in operator</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Increment\">Increment (++)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Inequality\">Inequality (!=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/instanceof\">instanceof</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment\">Left shift assignment (&lt;&lt;=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Left_shift\">Left shift (&lt;&lt;)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal\">Less than or equal (&lt;=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Less_than\">Less than (&lt;)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment\">Logical AND assignment (&amp;&amp;=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Logical_AND\">Logical AND (&amp;&amp;)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">Logical NOT (!)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment\">Logical nullish assignment (??=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment\">Logical OR assignment (||=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Logical OR (||)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment\">Multiplication assignment (*=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Multiplication\">Multiplication (*)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/new.target\">new.target</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/new\">new operator</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/null\">null</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\">Nullish coalescing operator (??)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Object_initializer\">Object initializer</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">Operator precedence</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">Optional chaining (?.)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Property_Accessors\">Property accessors</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Remainder_assignment\">Remainder assignment (%=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Remainder\">Remainder (%)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment\">Right shift assignment (&gt;&gt;=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Right_shift\">Right shift (&gt;&gt;)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Spread syntax (...)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Strict_equality\">Strict equality (===)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">Strict inequality (!==)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment\">Subtraction assignment (-=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Subtraction\">Subtraction (-)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/super\">super</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/this\">this</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/typeof\">typeof</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Unary_negation\">Unary negation (-)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Unary_plus\">Unary plus (+)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment\">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">Unsigned right shift (&gt;&gt;&gt;)</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/void\">void operator</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/yield*\">yield*</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/yield\">yield</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Инструкции и объявления</summary>\n      <ol><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/async_function*\">async function*</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/block\">block</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/break\">break</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/class\">class</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/const\">const</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/continue\">continue</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/debugger\">debugger</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/do...while\">do...while</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/Empty\">empty</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/export\">export</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/for-await...of\">for await...of</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/for\">for</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/function*\">function*</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/function\">function declaration</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/if...else\">if...else</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/import\">import</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/label\">label</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/let\">let</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/return\">return</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/switch\">switch</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/throw\">throw</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/try...catch\">try...catch</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/var\">var</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/while\">while</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ru/docs/Web/JavaScript/Reference/Statements/with\">with</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Функции</summary>\n      <ol><li><a href=\"/ru/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow function expressions</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Functions/get\">getter</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Functions/set\">setter</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Классы</summary>\n      <ol><li><a href=\"/ru/docs/Web/JavaScript/Reference/Classes/Class_static_initialization_blocks\">Class static initialization blocks</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Classes/constructor\">constructor</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Classes/extends\">extends</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">Private class features</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Classes/Public_class_fields\">Public class fields</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Classes/static\">static</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Ошибки</summary>\n      <ol><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Already_has_pragma\">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Array_sort_argument\">TypeError: invalid Array.prototype.sort argument</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Bad_octal\">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Bad_radix\">RangeError: radix must be an integer</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag\">SyntaxError: invalid regular expression flag \"x\"</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield\">SyntaxError: return not in function</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/BigInt_division_by_zero\">RangeError: BigInt division by zero</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/BigInt_negative_exponent\">RangeError: BigInt negative exponent</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type\">TypeError: X.prototype.y called on incompatible type</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init\">ReferenceError: can't access lexical declaration 'X' before initialization</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Cant_assign_to_property\">TypeError: can't assign to property \"x\" on \"y\": not an object</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Cant_be_converted_to_BigInt_because_it_isnt_an_integer\">RangeError: x can't be converted to BigInt because it isn't an integer</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Cant_convert_BigInt_to_number\">TypeError: can't convert BigInt to number</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Cant_convert_x_to_BigInt\">TypeError: can't convert x to BigInt</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible\">TypeError: can't define property \"x\": \"obj\" is not extensible</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Cant_delete\">TypeError: property \"x\" is non-configurable and can't be deleted</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property\">TypeError: can't redefine non-configurable property \"x\"</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Cant_use_nullish_coalescing_unparenthesized\">SyntaxError: cannot use `??` unparenthesized within `||` and `&amp;&amp;` expressions</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value\">TypeError: cyclic object value</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Dead_object\">TypeError: can't access dead object</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode\">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage\">ReferenceError: deprecated caller or arguments usage</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Deprecated_expression_closures\">Warning: expression closures are deprecated</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Deprecated_octal\">SyntaxError: \"0\"-prefixed octal literals and octal escape seq. are deprecated</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma\">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Deprecated_String_generics\">Warning: String.x is deprecated; use String.prototype.x instead</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Deprecated_toLocaleFormat\">Warning: Date.prototype.toLocaleFormat is deprecated</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Equal_as_assign\">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Getter_only\">TypeError: setting getter-only property \"x\"</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Hash_outside_class\">SyntaxError: Unexpected '#' used outside of class body</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Identifier_after_number\">SyntaxError: identifier starts immediately after numeric literal</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Illegal_character\">SyntaxError: illegal character</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/in_operator_no_object\">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\">RangeError: invalid array length</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side\">SyntaxError: invalid assignment left-hand side</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax\">SyntaxError: invalid BigInt syntax</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment\">TypeError: invalid assignment to const \"x\"</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Invalid_date\">RangeError: invalid date</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer\">SyntaxError: for-in loop head declarations may not have initializers</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer\">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand\">TypeError: invalid 'instanceof' operand 'x'</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/is_not_iterable\">TypeError: 'x' is not iterable</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse\">SyntaxError: JSON.parse: bad parsing</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Malformed_formal_parameter\">SyntaxError: Malformed formal parameter</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Malformed_URI\">URIError: malformed URI sequence</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list\">SyntaxError: missing ] after element list</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id\">SyntaxError: missing : after property id</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body\">SyntaxError: missing } after function body</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list\">SyntaxError: missing } after property list</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter\">SyntaxError: missing formal parameter</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const\">SyntaxError: missing = in const declaration</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator\">SyntaxError: missing name after . operator</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\">SyntaxError: missing ) after argument list</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition\">SyntaxError: missing ) after condition</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Missing_semicolon_before_statement\">SyntaxError: missing ; before statement</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/More_arguments_needed\">TypeError: More arguments needed</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count\">RangeError: repeat count must be non-negative</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/No_non-null_object\">TypeError: \"x\" is not a non-null object</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/No_properties\">TypeError: \"x\" has no properties</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/No_variable_name\">SyntaxError: missing variable name</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element\">TypeError: can't delete non-configurable array element</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint\">RangeError: argument is not a valid code point</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Not_a_constructor\">TypeError: \"x\" is not a constructor</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Not_a_function\">TypeError: \"x\" is not a function</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Not_defined\">ReferenceError: \"x\" is not defined</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Precision_range\">RangeError: precision is out of range</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Property_access_denied\">Error: Permission denied to access property \"x\"</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Read-only\">TypeError: \"x\" is read-only</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter\">SyntaxError: redeclaration of formal parameter \"x\"</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value\">TypeError: Reduce of empty array with no initial value</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Reserved_identifier\">SyntaxError: \"x\" is a reserved identifier</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large\">RangeError: repeat count must be less than infinity</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Stmt_after_return\">Warning: unreachable code after return statement</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params\">SyntaxError: \"use strict\" not allowed in function with non-simple parameters</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Too_much_recursion\">InternalError: too much recursion</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Undeclared_var\">ReferenceError: assignment to undeclared variable \"x\"</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Undefined_prop\">ReferenceError: reference to undefined property \"x\"</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Unexpected_token\">SyntaxError: Unexpected token</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Unexpected_type\">TypeError: \"x\" is (not) \"y\"</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement\">SyntaxError: function statement requires a name</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Unparenthesized_unary_expr_lhs_exponentiation\">SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'</a></li><li><a href=\"/ru/docs/Web/JavaScript/Reference/Errors/Unterminated_string_literal\">SyntaxError: unterminated string literal</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Ещё</summary>\n      <ol>\n        <li><a href=\"/ru/docs/Web/JavaScript/JavaScript_technologies_overview\">Обзор технологий JavaScript</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Reference/Lexical_grammar\">Лексическая грамматика</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Data_structures\">Структуры данных JavaScript</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">Перечисляемость и принадлежность свойств</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Reference/Iteration_protocols\">Протоколы перебора</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Reference/Strict_mode\">Строгий режим</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\">Переход в строгий режим</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Reference/Template_literals\">Шаблонные строки</a></li>\n        <li><a href=\"/ru/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\">Устаревшие возможности</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p></p> <ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ru/docs/Web/JavaScript/Guide/Functions\">« Предыдущая статья</a></li>\n    <li><a class=\"button minimal\" href=\"/ru/docs/Web/JavaScript/Guide/Numbers_and_dates\">Следующая статья  »</a></li>\n</ul><p></p>\n\n<p class=\"summary\">Эта глава описывает выражения и операторы языка JavaScript, такие как операторы присваивания, сравнения, арифметические, битовые, логические, строчные, и различные специальные операторы.</p>\n\n<ul>\n</ul>\n\n<p>Полный и детальный список операторов и выражений также доступен в этом <a href=\"/ru/docs/Web/JavaScript/Reference/Operators\">руководстве</a>.</p>"}},{"type":"prose","value":{"id":"операторы","title":"Операторы","isH3":false,"content":"<p>В JavaScript есть следующие типы операторов. Данный подраздел описывает каждый тип и содержит информацию об их приоритетах друг над другом.</p>\n\n<ul>\n <li><a href=\"#операторы_присваивания\">Операторы присваивания</a></li>\n <li><a href=\"#операторы_сравнения\">Операторы сравнения</a></li>\n <li><a href=\"#арифметические_операторы\">Арифметические операторы</a></li>\n <li><a href=\"#битовые_(поразрядные)_операторы\">Битовые (поразрядные) операторы</a></li>\n <li><a href=\"#логические_операторы\">Логические операторы</a></li>\n <li><a href=\"#строковые_операторы\">Строковые операторы</a></li>\n <li><a href=\"#условный_(тернарный)_оператор\">Условный (тернарный) оператор</a></li>\n <li><a href=\"#оператор_запятая\">Оператор запятая</a></li>\n <li><a href=\"#унарные_операторы\">Унарные операторы</a></li>\n <li><a href=\"#операторы_отношения\">Операторы отношения</a></li>\n <li><a href=\"#приоритет_операторов\">Приоритет операторов</a></li>\n</ul>\n\n<p>JavaScript поддерживает бинарные и унарные операторы, а также ещё один специальный тернарный оператор - условный оператор. Бинарная операция использует два операнда, один перед оператором и другой за ним:</p>\n\n<pre class=\"syntaxbox notranslate\"><em>operand1</em> <em>operator</em> <em>operand2</em>\n</pre>\n\n<p>Например: <code>3+4</code> или <code>x*y</code>.</p>\n\n<p>В свою очередь унарная операция использует один операнд, перед или после оператора:</p>\n\n<pre class=\"syntaxbox notranslate\"><em>operator</em> <em>operand</em>\n</pre>\n\n<p>или</p>\n\n<pre class=\"syntaxbox notranslate\"><em>operand</em> <em>operator</em>\n</pre>\n\n<p>Например: <code>x++</code> или <code>++x</code>.</p>"}},{"type":"prose","value":{"id":"операторы_присваивания","title":"Операторы присваивания","isH3":true,"content":"<p>В результате операции присваивания операнду слева от <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">оператора присваивания (en-US)</a> (знак \"=\") устанавливается значение , которое берётся из правого операнда. Основным оператором присваивания является  =, он присваивает значение правого операнда операнду, находящемуся слева. Таким образом, выражение x = y означает, что x присваивается значение y.</p>\n\n<p>Существуют также составные операторы присваивания, которые используются для сокращённого представления операций, описанных в следующей таблице:</p>\n\n<table class=\"standard-table\">\n <caption>Список операторов присваивания</caption>\n <tbody>\n  <tr>\n   <th>Имя</th>\n   <th>Сокращённый оператор</th>\n   <th>Смысл</th>\n  </tr>\n  <tr>\n   <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Присваивание (en-US)</a></td>\n   <td><code>x = y</code></td>\n   <td><code>x = y</code></td>\n  </tr>\n  <tr>\n   <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#addition_assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Присваивание со сложением (en-US)</a></td>\n   <td><code>x += y</code></td>\n   <td><code>x = x + y</code></td>\n  </tr>\n  <tr>\n   <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#subtraction_assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Присваивание с вычитанием (en-US)</a></td>\n   <td><code>x -= y</code></td>\n   <td><code>x = x - y</code></td>\n  </tr>\n  <tr>\n   <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#multiplication_assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Присваивание с умножением (en-US)</a></td>\n   <td><code>x *= y</code></td>\n   <td><code>x = x * y</code></td>\n  </tr>\n  <tr>\n   <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#division_assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Присваивание с делением (en-US)</a></td>\n   <td><code>x /= y</code></td>\n   <td><code>x = x / y</code></td>\n  </tr>\n  <tr>\n   <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#remainder_assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Присваивание по модулю (en-US)</a></td>\n   <td><code>x %= y</code></td>\n   <td><code>x = x % y</code></td>\n  </tr>\n  <tr>\n   <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#left_shift_assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Присваивание с левым сдвигом (en-US)</a></td>\n   <td><code>x &lt;&lt;= y</code></td>\n   <td><code>x = x &lt;&lt; y</code></td>\n  </tr>\n  <tr>\n   <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#right_shift_assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Присваивание с правым сдвигом (en-US)</a></td>\n   <td><code>x &gt;&gt;= y</code></td>\n   <td><code>x = x &gt;&gt; y</code></td>\n  </tr>\n  <tr>\n   <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#unsigned_right_shift_assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Присваивание с беззнаковым сдвигом вправо (en-US)</a></td>\n   <td><code>x &gt;&gt;&gt;= y</code></td>\n   <td><code>x = x &gt;&gt;&gt; y</code></td>\n  </tr>\n  <tr>\n   <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#bitwise_and_assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Присваивание с побитовым AND (en-US)</a></td>\n   <td><code>x &amp;= y</code></td>\n   <td><code>x = x &amp; y</code></td>\n  </tr>\n  <tr>\n   <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#bitwise_xor_assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Присваивание с побитовым XOR (en-US)</a></td>\n   <td><code>x ^= y</code></td>\n   <td><code>x = x ^ y</code></td>\n  </tr>\n  <tr>\n   <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#bitwise_or_assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Присваивание с побитовым OR (en-US)</a></td>\n   <td><code>x |= y</code></td>\n   <td><code>x = x | y</code></td>\n  </tr>\n </tbody>\n</table>\n\n<h4 id=\"деструктуризация\">Деструктуризация</h4>\n\n<p>Для более сложного присваивания в JavaScript есть синтаксис <a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">деструктуризации</a> - это выражение, которое позволяет извлекать данные из массивов или объектов, используя синтаксис, который зеркалирует конструкторы массивов и литералы объектов.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// без деструктуризации</span>\n<span class=\"token keyword\">var</span> one   <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> two   <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> three <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// с деструктуризацией</span>\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">[</span>one<span class=\"token punctuation\">,</span> two<span class=\"token punctuation\">,</span> three<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">;</span></code></pre></div>"}},{"type":"prose","value":{"id":"операторы_сравнения","title":"Операторы сравнения","isH3":true,"content":"<p><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Оператор сравнения (en-US)</a> сравнивает свои операнды и возвращает логическое значение, базируясь на истинности сравнения. Операнды могут быть числами, строками, логическими величинами или объектами. Строки сравниваются на основании стандартного лексикографического порядка, используя Unicode-значения. В большинстве случаев, если операнды имеют разный тип, то JavaScript пробует преобразовать их в тип, подходящий для сравнения. Такое поведение обычно происходит при сравнении числовых операндов. Единственным исключением из данного правила является сравнение с использованием операторов <code>===</code> и <code>!==</code>, которые производят строгое сравнение на равенство или неравенство. Эти операторы не пытаются преобразовать операнды перед их сравнением. Следующая таблица описывает операторы сравнения в контексте следующего примера кода:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> var1 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> var2 <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<table class=\"standard-table\">\n <caption>Операторы сравнения</caption>\n <thead>\n  <tr>\n   <th scope=\"col\">Оператор</th>\n   <th scope=\"col\">Описание</th>\n   <th scope=\"col\">Примеры, возвращающие true</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Операторы_сравнения#Equality\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">Равно</a> (<code>==</code>)</td>\n   <td>Возвращает true, если операнды равны.</td>\n   <td><code>3 == var1</code><br>\n    <code>\"3\" == var1</code><br>\n    <code>3 == '3'</code></td>\n  </tr>\n  <tr>\n   <td><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Операторы_сравнения#Inequality\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">Не равно</a> (<code>!=</code>)</td>\n   <td>Возвращает true, если операнды не равны.</td>\n   <td><code>var1 != 4<br>\n    var2 != \"3\"</code></td>\n  </tr>\n  <tr>\n   <td><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Операторы_сравнения#Identity\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">Строго равно</a> (<code>===</code>)</td>\n   <td>Возвращает true, если операнды равны и имеют одинаковый тип. Смотрите также <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/is\"><code>Object.is</code></a> и <a href=\"/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness\" title=\"/ru/docs/Web/JavaScript/Guide/Sameness\">sameness in JS</a>.</td>\n   <td><code>3 === var1</code></td>\n  </tr>\n  <tr>\n   <td><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Операторы_сравнения#Nonidentity\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">Строго не равно</a>(<code>!==</code>)</td>\n   <td>Возвращает true, если операнды не равны и/или имеют разный тип.</td>\n   <td><code>var1 !== \"3\"<br>\n    3 !== '3'</code></td>\n  </tr>\n  <tr>\n   <td><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Операторы_сравнения#Greater_than_operator\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">Больше</a> (<code>&gt;</code>)</td>\n   <td>Возвращает true, если операнд слева больше операнда справа.</td>\n   <td><code>var2 &gt; var1<br>\n    \"12\" &gt; 2</code></td>\n  </tr>\n  <tr>\n   <td><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Операторы_сравнения#Greater_than_or_equal_operator\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">Больше или равно</a> (<code>&gt;=</code>)</td>\n   <td>Возвращает true, если операнд слева больше или равен операнду справа.</td>\n   <td><code>var2 &gt;= var1<br>\n    var1 &gt;= 3</code></td>\n  </tr>\n  <tr>\n   <td><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Операторы_сравнения#Less_than_operator\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">Меньше</a> (<code>&lt;</code>)</td>\n   <td>Возвращает true, если операнд слева меньше операнда справа.</td>\n   <td><code>var1 &lt; var2<br>\n    \"2\" &lt; 12</code></td>\n  </tr>\n  <tr>\n   <td><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Операторы_сравнения#Less_than_or_equal_operator\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">Меньше или равно</a> (<code>&lt;=</code>)</td>\n   <td>Возвращает true, если операнд слева меньше или равен операнду справа.</td>\n   <td><code>var1 &lt;= var2<br>\n    var2 &lt;= 5</code></td>\n  </tr>\n </tbody>\n</table>\n\n<div class=\"note notecard\" id=\"sect1\">\n<p><strong>Замечание: </strong>(<strong>=&gt;</strong>) не оператор, а нотация <a href=\"/ru/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Стрелочных функций</a>.</p>\n</div>"}},{"type":"prose","value":{"id":"арифметические_операторы","title":"Арифметические операторы","isH3":true,"content":"<p><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Арифметические операторы (en-US)</a> используют в качестве своих операндов числа (также литералы или переменные) и в качестве результата возвращают одно числовое значение. Стандартными арифметическими операторами являются сложение (+), вычитание (-), умножение (*), и деление (/). При работе с числами с плавающей точкой эти операторы работают аналогично их работе в большинстве других языках программирования (обратите внимание, что деление на ноль возвращает бесконечность <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a>). Например:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* возвращает 0.5 */</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* возвращает true */</span>\n</code></pre></div>\n\n<p>Кроме того, JavaScript позволяет использовать следующие арифметические операторы, представленные в таблице:</p>\n\n<table class=\"fullwidth-table\">\n <caption>Арифметические операторы</caption>\n <thead>\n  <tr>\n   <th scope=\"col\">Оператор</th>\n   <th scope=\"col\">Описание</th>\n   <th scope=\"col\">Пример</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#remainder\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Остаток от деления (en-US)</a> (<code>%</code>)</td>\n   <td>Бинарный оператор. Возвращает целочисленный остаток от деления двух операндов.</td>\n   <td>12 % 5 вернёт 2.</td>\n  </tr>\n  <tr>\n   <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#increment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Инкремент (en-US)</a> (<code>++</code>)</td>\n   <td>Унарный оператор. Добавляет единицу к своему операнду. Если используется в качестве префикса (<code>++x</code>), то возвращает значение операнда с добавленной к нему единицей; а в случае применения в качестве окончания (<code>x++</code>) возвращает значение операнда перед добавлением к нему единицы.</td>\n   <td><code>Если x</code> равно 3, тогда <code>++x</code> установит значение <code>x</code> равным 4 и вернёт 4, напротив <code>x++</code> вернёт 3 и потом установит значение <code>x</code> равным 4.</td>\n  </tr>\n  <tr>\n   <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#decrement\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Декремент (en-US)</a> (<code>--</code>)</td>\n   <td>Унарный оператор. Вычитает единицу из значения своего операнда. Логика данного оператора аналогична оператору инкремента.</td>\n   <td>Если <code>x</code> равно 3, тогда <code>--x</code> установит значение <code>x</code> равным 2 и вернёт 2, напротив <code>x--</code> вернёт 3 и потом установит значение <code>x</code> равным 2.</td>\n  </tr>\n  <tr>\n   <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#unary_negation\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Унарный минус (en-US)</a><code>-</code></td>\n   <td>Унарный оператор. Возвращает отрицательное значение своего операнда.</td>\n   <td>Если <code>x</code> равно 3, тогда <code>-x</code> вернёт -3.</td>\n  </tr>\n  <tr>\n   <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#unary_plus\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Унарный плюс (en-US)</a> (<code>+</code>)</td>\n   <td>Унарный оператор. Пытается конвертировать операнд в число, если он ещё не оно.</td>\n   <td><code>+\"3\"</code> вернёт <code>3</code>.<br>\n    <code>+true</code> вернёт <code>1.</code></td>\n  </tr>\n  <tr>\n   <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#exponentiation\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Возведение в степень (en-US)</a> (<code>**</code>) <svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg></td>\n   <td>Возводит <code>основание</code> в показатель <code>степени</code>, как, <code>основание<sup>степень</sup></code></td>\n   <td><code>2 ** 3</code> вернёт <code>8</code>.<br>\n    <code>10 ** -1</code> вернёт <code>0.1</code>.</td>\n  </tr>\n </tbody>\n</table>"}},{"type":"prose","value":{"id":"битовые_(поразрядные)_операторы","title":"Битовые (поразрядные) операторы","isH3":true,"content":"<p><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Битовые операторы (en-US)</a> обрабатывают свои операнды как последовательности из 32 бит (нулей и единиц), а не как десятичные, шестнадцатеричные или восьмеричные числа. Например, десятичное число 9 имеет двоичное представление 1001. Битовые операторы выполняют операции над таким двоичным представлением, но результат возвращают как обычное числовое значение JavaScript.</p>\n\n<p>Следующая таблица обобщает битовые операторы JavaScript.</p>\n\n<table class=\"standard-table\">\n <caption>Битовые операторы</caption>\n <thead>\n  <tr>\n   <th scope=\"col\">Оператор</th>\n   <th scope=\"col\">Использование</th>\n   <th scope=\"col\">Описание</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#bitwise_and\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Побитовое И (en-US)</a></td>\n   <td><code>a &amp; b</code></td>\n   <td>Возвращает единицу в каждой битовой позиции, для которой соответствующие биты обеих операндов являются единицами.</td>\n  </tr>\n  <tr>\n   <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#bitwise_or\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Побитовое ИЛИ  (en-US)</a></td>\n   <td><code>a | b</code></td>\n   <td>Возвращает единицу в каждой битовой позиции, для которой один из соответствующих битов или оба бита операндов являются единицами.</td>\n  </tr>\n  <tr>\n   <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#bitwise_xor\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Исключающее ИЛИ (en-US)</a></td>\n   <td><code>a ^ b</code></td>\n   <td>Возвращает единицу в каждой битовой позиции, для которой только один из соответствующих битов операндов является единицей.</td>\n  </tr>\n  <tr>\n   <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#bitwise_not\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Побитовое НЕ (en-US)</a></td>\n   <td><code>~ a</code></td>\n   <td>Заменяет биты операнда на противоположные.</td>\n  </tr>\n  <tr>\n   <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#left_shift\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Сдвиг влево (en-US)</a></td>\n   <td><code>a &lt;&lt; b</code></td>\n   <td>Сдвигает <code>a</code> в двоичном представлении на <code>b</code> бит влево, добавляя справа нули.</td>\n  </tr>\n  <tr>\n   <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#right_shift\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Сдвиг вправо с переносом знака (en-US)</a></td>\n   <td><code>a &gt;&gt; b</code></td>\n   <td>Сдвигает <code>a</code> в двоичном представлении на <code>b</code> бит вправо, отбрасывая сдвигаемые биты.</td>\n  </tr>\n  <tr>\n   <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#unsigned_right_shift\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Сдвиг вправо с заполнением нулями (en-US)</a></td>\n   <td><code>a &gt;&gt;&gt; b</code></td>\n   <td>Сдвигает <code>a</code> в двоичном представлении на <code>b</code> бит вправо, отбрасывая сдвигаемые биты и добавляя слева нули.</td>\n  </tr>\n </tbody>\n</table>\n\n<h4 id=\"bitwise_logical_operators\">Битовые логические операторы</h4>\n\n<p>Основной смысл работы битовых логических операторов состоит в следующем:</p>\n\n<ul>\n <li>Операнды преобразуются в 32-битные целые числа и представляются в виде последовательности бит (нулей и единиц). Числа, имеющие более 32 битов будут сокращены. Например, следующее число имеет больше 32 битов и сконвертируется в 32-х битное:\n  <div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>До    : 11100110111110100000000000000110000000000001\nПосле :             10100000000000000110000000000001</code></pre></div>\n </li>\n <li>Каждый бит первого операнда связывается с соответствующим битом второго операнда: первый бит с первым битом, второй бит - со вторым, и так далее.</li>\n <li>К каждой паре бит применяется заданный оператор, и побитово формируется итоговый результат.</li>\n</ul>\n\n<p>Например, двоичным представлением числа 9 является 1001, а двоичным представлением пятнадцати - 1111. Результаты применения к этим числам битовых логических операторов выглядят следующим образом:</p>\n\n<table class=\"standard-table\">\n <caption>Примеры работы битовых операторов</caption>\n <thead>\n  <tr>\n   <th scope=\"col\">Выражение</th>\n   <th scope=\"col\">Результат</th>\n   <th scope=\"col\">Двоичное описание</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td><code>15 &amp; 9</code></td>\n   <td><code>9</code></td>\n   <td><code>1111 &amp; 1001 = 1001</code></td>\n  </tr>\n  <tr>\n   <td><code>15 | 9</code></td>\n   <td><code>15</code></td>\n   <td><code>1111 | 1001 = 1111</code></td>\n  </tr>\n  <tr>\n   <td><code>15 ^ 9</code></td>\n   <td><code>6</code></td>\n   <td><code>1111 ^ 1001 = 0110</code></td>\n  </tr>\n  <tr>\n   <td><code>~15</code></td>\n   <td><code>-16</code></td>\n   <td><code>~</code><code>00000000...</code><code>00001111 = </code><code>1111</code><code>1111</code><code>...</code><code>11110000</code></td>\n  </tr>\n  <tr>\n   <td><code>~9</code></td>\n   <td><code>-10</code></td>\n   <td><code>~</code><code>00000000</code><code>...</code><code>0000</code><code>1001 = </code><code>1111</code><code>1111</code><code>...</code><code>1111</code><code>0110</code></td>\n  </tr>\n </tbody>\n</table>\n\n<p>Обратите внимание, что все 32 бита преобразуются с использованием битового оператора НЕ, и что величины с наиболее значимым (самым левым) битом равным 1 представляют собой отрицательные числа (в представлении дополнения до двух).</p>\n\n<h4 id=\"bitwise_shift_operators\">Битовые операторы сдвига</h4>\n\n<p>Битовые операторы сдвига используют два операнда: первый представляет величину, подлежащую сдвигу, а второй операнд указывает число битовых позиций на которое должен быть сдвинут первый операнд. Направление операции сдвига определяется используемым оператором.</p>\n\n<p>Операторы сдвига преобразуют свои операнды в 32-битные целые числа и возвращают результат того же типа, каким является левый операнд.</p>\n\n<p>Операторы сдвига перечислены в следующей таблице.</p>\n\n<table class=\"fullwidth-table\">\n <caption>Битовые операторы сдвига</caption>\n <thead>\n  <tr>\n   <th scope=\"col\">Оператор</th>\n   <th scope=\"col\">Описание</th>\n   <th scope=\"col\">Пример</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#%3c%3c_(left_shift)\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Сдвиг влево (en-US)</a><br>\n    (<code>&lt;&lt;</code>)</td>\n   <td>Данный оператор сдвигает первый операнд на указанное количество бит влево. Излишние биты, сдвинутые влево, отбрасываются. Справа число дополняется нулевыми битами.</td>\n   <td><code>9&lt;&lt;2</code> равно 36, так как 1001 после сдвига на 2 бита влево превращается в 100100, что соответствует числу 36.</td>\n  </tr>\n  <tr>\n   <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#%3e%3e_(sign-propagating_right_shift)\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Сдвиг вправо с переносом знака (en-US)</a> (<code>&gt;&gt;</code>)</td>\n   <td>Данный оператор сдвигает первый операнд на указанное количество бит вправо. Излишние биты, сдвинутые вправо, отбрасываются. Слева число дополняется копиями крайнего слева бита.</td>\n   <td><code>9&gt;&gt;2</code> равно 2, так как 1001 после сдвига на 2 бита вправо превращается в 10, что соответствует числу 2. Подобным же образом <code>-9&gt;&gt;2</code> равно -3, так как знак сохраняется.</td>\n  </tr>\n  <tr>\n   <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#%3e%3e%3e_(zero-fill_right_shift)\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Сдвиг вправо с заполнением нулями (en-US)</a> (<code>&gt;&gt;&gt;</code>)</td>\n   <td>Данный оператор сдвигает первый операнд на указанное количество бит вправо. Излишние биты, сдвинутые вправо, отбрасываются. Слева число дополняется нулевыми битами.</td>\n   <td><code>19&gt;&gt;&gt;2</code> равно 4, так как 10011 после сдвига на 2 бита вправо превращается в 100, что соответствует числу 4. Для неотрицательных чисел сдвиг вправо с заполнением нулями и сдвиг вправо с переносом знака дают одинаковый результат.</td>\n  </tr>\n </tbody>\n</table>"}},{"type":"prose","value":{"id":"логические_операторы","title":"Логические операторы","isH3":true,"content":"<p><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Логические операторы (en-US)</a> обычно используются с булевыми (логическими) значениями; при этом возвращаемое ими значение также является булевым. Однако операторы &amp;&amp; и || фактически возвращают значение одного из операндов, поэтому, если эти операторы используются с небулевыми величинами, то возвращаемая ими величина также может быть не булевой. Логические операторы описаны в следующей таблице.</p>\n\n<table class=\"fullwidth-table\">\n <caption>Логические операторы</caption>\n <thead>\n  <tr>\n   <th scope=\"col\">Оператор</th>\n   <th scope=\"col\">Использование</th>\n   <th scope=\"col\">Описание</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#logical_and\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Логическое И (en-US)</a><code> </code>(<code>&amp;&amp;</code>)</td>\n   <td><code>expr1 &amp;&amp; expr2</code></td>\n   <td>(Логическое И) Возвращает операнд <code>expr1</code>, если он может быть преобразован в <code>false</code>; в противном случае возвращает операнд <code>expr2</code>. Таким образом, при использовании булевых величин в качестве операндов, оператор <code>&amp;&amp;</code> возвращает <code>true</code>, если оба операнда <code>true</code>; в противном случае возвращает <code>false</code>.</td>\n  </tr>\n  <tr>\n   <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#logical_or\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Логическое ИЛИ  (en-US)</a>(<code>||</code>)</td>\n   <td><code>expr1 || expr2</code></td>\n   <td>(Логическое ИЛИ) Возвращает операнд <code>expr1</code>, если он может быть преобразован в <code>true</code>; в противном случае возвращает операнд <code>expr2</code>. Таким образом, при использовании булевых величин в качестве операндов, оператор <code>||</code> возвращает <code>true</code>, если один из операндов <code>true</code>; если же оба <code>false</code>, то возвращает <code>false</code>.</td>\n  </tr>\n  <tr>\n   <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#logical_not\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Логическое НЕ  (en-US)</a>(<code>!</code>)</td>\n   <td><code>!expr</code></td>\n   <td>(Логическое НЕ) Возвращает <code>false</code>, если операнд может быть преобразован в <code>true</code>; в противном случае возвращает <code>true</code>.</td>\n  </tr>\n </tbody>\n</table>\n\n<p>Примерами выражений, которые могут быть преобразованы в false являются: null, 0, NaN, пустая строка (\"\") или undefined.</p>\n\n<p>Следующий код демонстрирует примеры использования оператора &amp;&amp; (логическое И).</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> a1 <span class=\"token operator\">=</span>  <span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// t &amp;&amp; t возвращает true</span>\n<span class=\"token keyword\">var</span> a2 <span class=\"token operator\">=</span>  <span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// t &amp;&amp; f возвращает false</span>\n<span class=\"token keyword\">var</span> a3 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// f &amp;&amp; t возвращает false</span>\n<span class=\"token keyword\">var</span> a4 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// f &amp;&amp; f возвращает false</span>\n<span class=\"token keyword\">var</span> a5 <span class=\"token operator\">=</span> <span class=\"token string\">\"Cat\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">\"Dog\"</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// t &amp;&amp; t возвращает Dog</span>\n<span class=\"token keyword\">var</span> a6 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">\"Cat\"</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// f &amp;&amp; t возвращает false</span>\n<span class=\"token keyword\">var</span> a7 <span class=\"token operator\">=</span> <span class=\"token string\">\"Cat\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// t &amp;&amp; f возвращает false</span>\n</code></pre></div>\n\n<p>Следующий код демонстрирует примеры использования оператора || (логическое ИЛИ).</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> o1 <span class=\"token operator\">=</span>  <span class=\"token boolean\">true</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// t || t возвращает true</span>\n<span class=\"token keyword\">var</span> o2 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// f || t возвращает true</span>\n<span class=\"token keyword\">var</span> o3 <span class=\"token operator\">=</span>  <span class=\"token boolean\">true</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// t || f возвращает true</span>\n<span class=\"token keyword\">var</span> o4 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// f || f возвращает false</span>\n<span class=\"token keyword\">var</span> o5 <span class=\"token operator\">=</span> <span class=\"token string\">\"Cat\"</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"Dog\"</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// t || t возвращает Cat</span>\n<span class=\"token keyword\">var</span> o6 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"Cat\"</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// f || t возвращает Cat</span>\n<span class=\"token keyword\">var</span> o7 <span class=\"token operator\">=</span> <span class=\"token string\">\"Cat\"</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// t || f возвращает Cat</span>\n</code></pre></div>\n\n<p>Следующий код демонстрирует примеры использования оператора ! (логическое НЕ).</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> n1 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// !t возвращает false</span>\n<span class=\"token keyword\">var</span> n2 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// !f возвращает true</span>\n<span class=\"token keyword\">var</span> n3 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token string\">\"Cat\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// !t возвращает false</span>\n</code></pre></div>\n\n<h4 id=\"short-circuit_evaluation\">Сокращённая оценка</h4>\n\n<p>Так как логические выражения вычисляются слева направо, они проверяются на возможность выполнения сокращённой оценки с использованием следующих правил:</p>\n\n<ul>\n <li><code>false</code> &amp;&amp; anything<em> - </em>сокращение с результатом false.</li>\n <li><code>true</code> || <em>anything - </em>сокращение с результатом true.</li>\n</ul>\n\n<p>Правила логики гарантируют, что данные вычисления всегда корректны. Обратите внимание, что часть \"<em>anything\"</em> представленных выше выражений не вычисляется, таким образом удаётся избежать любых побочных эффектов вычисления данной части.</p>"}},{"type":"prose","value":{"id":"строковые_операторы","title":"Строковые операторы","isH3":true,"content":"<p>В дополнение к операторам сравнения, которые могут использоваться со строковыми значениями, оператор (+) позволяет объединить две строки, возвращая при этом третью строку, которая представляет собой объединение двух строк-операндов:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my \"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// в консоли выведется строка  \"my string\".</span></code></pre></div>\n\n<p>Сокращённый оператор присваивания += также может быть использован для объединения (конкатенации) строк:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span>  mystring <span class=\"token operator\">=</span> <span class=\"token string\">\"alpha\"</span><span class=\"token punctuation\">;</span>  mystring <span class=\"token operator\">+=</span> <span class=\"token string\">\"bet\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// получается значение \"alphabet\" и присваивается mystring.</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"условный_(тернарный)_оператор","title":"Условный (тернарный) оператор","isH3":true,"content":"<p><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">Условный оператор</a> является единственным оператором JavaScript, который использует три операнда. Оператор принимает одно из двух значений в зависимости от заданного условия. Синтаксис оператора:</p>\n\n<pre class=\"syntaxbox notranslate\"><em>condition</em> ? <em>val1</em> : <em>val2</em>\n</pre>\n\n<div class=\"warning notecard\" id=\"sect2\">\n<p><em>   val1 и val2 обязательно должны что-то возвращать, поэтому в этой конструкции нельзя использовать continue или break</em></p>\n</div>\n\n<p>Если <code>condition (условие)</code> - истина, то оператор принимает значение <code>val1</code>. В противном случае оператор принимает значение <code>val2</code>. Вы можете использовать условный оператор во всех случаях, где может быть использован стандартный оператор.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> status <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>age <span class=\"token operator\">&gt;=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"adult\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"minor\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Данное выражение присваивает значение \"adult\" переменной <code>status</code>, если <code>age</code> имеет значение 18 или более. В противном случае переменной <code>status</code> присваивается значение \"minor\".</p>"}},{"type":"prose","value":{"id":"оператор_запятая","title":"Оператор запятая","isH3":true,"content":"<p><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Comma_Operator\">Оператор запятая</a> (<code>,</code>) просто вычисляет оба операнда и возвращает значение последнего операнда. Данный оператор в основном используется внутри цикла <code>for</code>, что позволяет при каждом прохождении цикла одновременно обновлять значения нескольких переменных.</p>\n\n<p>Например, если <code>a</code> является двумерным массивом, каждая строка которого содержит 10 элементов, то следующий код с использованием оператора запятая позволяет выполнять одновременное приращение двух переменных. Данный код выводит на экран значения диагональных элементов массива:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a[\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\"][\"</span> <span class=\"token operator\">+</span> j <span class=\"token operator\">+</span> <span class=\"token string\">\"]= \"</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"унарные_операторы","title":"Унарные операторы","isH3":true,"content":"<p>Унарная операция - операция только с одним операндом.</p>\n\n<h4 id=\"delete\"><code>delete</code></h4>\n\n<p>Оператор <a href=\"/ru/docs/Web/JavaScript/Reference/Operators/delete\">delete</a> выполняет удаление объекта, свойства объекта, или элемента массива с заданным индексом. Синтаксис оператора:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">delete</span> objectName<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> objectName<span class=\"token punctuation\">.</span>property<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> objectName<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> property<span class=\"token punctuation\">;</span> <span class=\"token comment\">// допустимо только внутри with</span>\n</code></pre></div>\n\n<p>где <code>objectName</code> представляет собой имя объекта, <code>property</code> - свойство объекта, а <code>index</code> - целое число, указывающее на положение (номер позиции)  элемента в массиве.</p>\n\n<p>Четвёртый вариант использования позволяет удалить свойство объекта, но допускается только внутри <code><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/with\">with</a></code>.</p>\n\n<p>Вы можете использовать оператор <code>delete</code> для удаления переменных, объявленных неявно, но вы не можете с его помощью удалять переменные, объявленные с помощью <code>var</code>.</p>\n\n<p>После применения оператора <code>delete</code> свойство элемента меняется на <code>undefined</code>. Оператор <code>delete</code> возвращает <code>true</code> если выполнение операции возможно; оператор возвращает <code>false</code>, если выполнение операции невозможно.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>x <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token number\">43</span><span class=\"token punctuation\">;</span>\nmyobj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyobj<span class=\"token punctuation\">.</span>h <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// создаём свойство h</span>\n<span class=\"token keyword\">delete</span> x<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// возвращает true (можно удалить переменную объявленную неявно)</span>\n<span class=\"token keyword\">delete</span> y<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// возвращает false (нельзя удалить переменную объявленную с помощью var)</span>\n<span class=\"token keyword\">delete</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// возвращает false (нельзя удалить встроенные свойства)</span>\n<span class=\"token keyword\">delete</span> myobj<span class=\"token punctuation\">.</span>h<span class=\"token punctuation\">;</span> <span class=\"token comment\">// возвращает true (можно удалить пользовательские свойства)</span>\n<span class=\"token keyword\">delete</span> myobj<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// возвращает true (можно удалить объект объявленный неявно)</span>\n</code></pre></div>\n\n<h5 id=\"удаление_элементов_массива\">Удаление элементов массива</h5>\n\n<p>Удаление элемента массива не влияет на длину массива. Например, если вы удалите <code>a[3]</code>, элемент <code>a[4]</code> останется <code>a[4],</code> <code>a[3]</code> станет undefined.</p>\n\n<p>Когда элемент массива удаляется с помощью оператора <code>delete</code>, то из массива удаляется значение данного элемента. В следующем примере элемент <code>trees[3]</code> удалён с помощью оператора <code>delete</code>. Однако, элемент <code>trees[3]</code> остаётся адресуемым и возвращает значение <code>undefined</code>.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> trees <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"redwood\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bay\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cedar\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"oak\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"maple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> trees<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token keyword\">in</span> trees<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// условие не выполняется</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n\n<p>Если вы хотите, чтобы элемент оставался в массиве, но имел значение undefined, то используйте ключевое слово <code>undefined</code> вместо оператора <code>delete</code>. В следующем примере элементу <code>trees[3]</code> присвоено значение <code>undefined</code>, но элемент при этом остаётся в массиве:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> trees <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"redwood\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bay\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cedar\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"oak\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"maple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntrees<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token keyword\">in</span> trees<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// данный блок кода выполняется</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n\n<h4 id=\"typeof\"><code>Оператор typeof</code></h4>\n\n<p><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/typeof\">Оператор<code> typeof</code></a> используется одним из следующих способов:</p>\n\n<pre class=\"syntaxbox notranslate\">typeof operand\ntypeof (operand)</pre>\n\n<p>Оператор <code>typeof</code> возвращает строку обозначающую тип невычисленного операнда. Значение <code>operand</code> может быть строкой, переменной, дескриптором, или объектом, тип которого следует определить. Скобки вокруг операнда необязательны.</p>\n\n<p>Предположим, вы определяете следующие переменные:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myFun <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5 + 2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> shape <span class=\"token operator\">=</span> <span class=\"token string\">\"round\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> size <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> today <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Оператор <code>typeof</code> возвращает следующие результаты для этих переменных:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> myFun<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// возвращает \"function\"</span>\n<span class=\"token keyword\">typeof</span> shape<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// возвращает \"string\"</span>\n<span class=\"token keyword\">typeof</span> size<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// возвращает \"number\"</span>\n<span class=\"token keyword\">typeof</span> today<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// возвращает \"object\"</span>\n<span class=\"token keyword\">typeof</span> dontExist<span class=\"token punctuation\">;</span> <span class=\"token comment\">// возвращает \"undefined\"</span>\n</code></pre></div>\n\n<p>Для дескрипторов <code>true</code> и <code>null</code> оператор <code>typeof</code> возвращает следующие результаты:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// возвращает \"boolean\"</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// возвращает \"object\"</span>\n</code></pre></div>\n\n<p>Для чисел и строк оператор <code>typeof</code> возвращает следующие результаты:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> <span class=\"token number\">62</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// возвращает \"number\"</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token string\">'Hello world'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// возвращает \"string\"</span>\n</code></pre></div>\n\n<p>Для свойств оператор <code>typeof</code> возвращает тип значения данного свойства:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> document<span class=\"token punctuation\">.</span>lastModified<span class=\"token punctuation\">;</span> <span class=\"token comment\">// возвращает \"string\"</span>\n<span class=\"token keyword\">typeof</span> window<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// возвращает \"number\"</span>\n<span class=\"token keyword\">typeof</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">LN2</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// возвращает \"number\"</span>\n</code></pre></div>\n\n<p>Для методов и функций оператор <code>typeof</code> возвращает следующие результаты:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> blur<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// возвращает \"function\"</span>\n<span class=\"token keyword\">typeof</span> eval<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// возвращает \"function\"</span>\n<span class=\"token keyword\">typeof</span> parseInt<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// возвращает \"function\"</span>\n<span class=\"token keyword\">typeof</span> shape<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">;</span> <span class=\"token comment\">// возвращает \"function\"</span>\n</code></pre></div>\n\n<p>Для встроенных объектов оператор <code>typeof</code> возвращает следующие результаты:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> Date<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// возвращает \"function\"</span>\n<span class=\"token keyword\">typeof</span> Function<span class=\"token punctuation\">;</span> <span class=\"token comment\">// возвращает \"function\"</span>\n<span class=\"token keyword\">typeof</span> Math<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// возвращает \"object\"</span>\n<span class=\"token keyword\">typeof</span> Option<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// возвращает \"function\"</span>\n<span class=\"token keyword\">typeof</span> String<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// возвращает \"function\"</span></code></pre></div>\n\n<h4 id=\"void\"><code>Оператор void</code></h4>\n\n<p><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/void\">Оператор<code> </code><code>void</code></a> используется любым из следующих способов:</p>\n\n<pre class=\"syntaxbox notranslate\">void (expression)\nvoid expression\n</pre>\n\n<p>Оператор <code>void</code> определяет выражение, которое должно быть вычислено без возвращения результата. <code>expression</code> - это выражение JavaScript, требующее вычисления. Скобки вокруг выражения необязательны, но их использование является правилом хорошего тона.</p>\n\n<p>Вы можете использовать оператор <code>void</code> для указания на то, что операнд-выражение является гипертекстовой ссылкой. При этом выражение обрабатывается, но не загружается в текущий документ.</p>\n\n<p>Следующий код служит примером создания гипертекстовой ссылки, которая бездействует при нажатии на неё пользователем. Когда пользователь нажимает на ссылку, <code>void(0)</code> вычисляется равным <code>undefined</code>, что не приводит ни к каким действиям в JavaScript.</p>\n\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>A</span> <span class=\"token attr-name\">HREF</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>javascript:void(0)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Нажмите здесь, чтобы ничего не произошло<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>A</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n\n<p>Приведённый ниже код создаёт гипертекстовую ссылку, которая подтверждает отправку формы при клике на ней пользователем:</p>\n\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>A</span> <span class=\"token attr-name\">HREF</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>javascript:void(document.form.submit())<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\nНажмите здесь, чтобы подтвердить отправку формы<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>A</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>"}},{"type":"prose","value":{"id":"операторы_отношения","title":"Операторы отношения","isH3":true,"content":"<p>Оператор отношения сравнивает свои операнды и возвращает результат сравнения в виде булева значения.</p>\n\n<h4 id=\"оператор_in\"><code>Оператор in</code></h4>\n\n<p><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/in\">Оператор <code>in</code></a> возвращает true, если указанный объект имеет указанное свойство. Синтаксис оператора:</p>\n\n<pre class=\"syntaxbox notranslate\">propNameOrNumber in objectName\n</pre>\n\n<p>где <code>propNameOrNumber</code> - строка или числовое выражение, представляющее имя свойства или индекс массива, а <code>objectName</code> - имя объекта.</p>\n\n<p>Некоторые примеры способов использования оператора <code>in</code>:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Массивы</span>\n<span class=\"token keyword\">var</span> trees <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"redwood\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bay\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cedar\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"oak\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"maple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">0</span> <span class=\"token keyword\">in</span> trees<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// возвращает true</span>\n<span class=\"token number\">3</span> <span class=\"token keyword\">in</span> trees<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// возвращает true</span>\n<span class=\"token number\">6</span> <span class=\"token keyword\">in</span> trees<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// возвращает false</span>\n<span class=\"token string\">\"bay\"</span> <span class=\"token keyword\">in</span> trees<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// возвращает false (следует указать индекс элемента массива,</span>\n                   <span class=\"token comment\">// а не значение элемента)</span>\n<span class=\"token string\">\"length\"</span> <span class=\"token keyword\">in</span> trees<span class=\"token punctuation\">;</span> <span class=\"token comment\">// возвращает true (length является свойством объекта Array)</span>\n\n<span class=\"token comment\">// Встроенные объекты</span>\n<span class=\"token string\">\"PI\"</span> <span class=\"token keyword\">in</span> Math<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// возвращает true</span>\n<span class=\"token keyword\">var</span> myString <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"coral\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">\"length\"</span> <span class=\"token keyword\">in</span> myString<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// возвращает true</span>\n\n<span class=\"token comment\">// Пользовательские объекты</span>\n<span class=\"token keyword\">var</span> mycar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">make</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Honda\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">model</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Accord\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">year</span><span class=\"token operator\">:</span> <span class=\"token number\">1998</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">\"make\"</span> <span class=\"token keyword\">in</span> mycar<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// возвращает true</span>\n<span class=\"token string\">\"model\"</span> <span class=\"token keyword\">in</span> mycar<span class=\"token punctuation\">;</span> <span class=\"token comment\">// возвращает true</span>\n</code></pre></div>\n\n<h4 id=\"instanceof\">Оператор <code>instanceof</code></h4>\n\n<p><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/instanceof\">Оператор <code>instanceof</code> </a>возвращает true, если заданный объект является объектом указанного типа. Его синтаксис:</p>\n\n<pre class=\"syntaxbox notranslate\">objectName instanceof objectType\n</pre>\n\n<p>где <code>objectName</code> - имя объекта, тип которого необходимо сравнить с <code>objectType</code>, а <code>objectType</code> - тип объекта, например, <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> или <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>.</p>\n\n<p><code><font face=\"Open Sans, Arial, sans-serif\">Используйте оператор </font>instanceof</code>, когда вам необходимо подтвердить тип объекта во время выполнения программы. Например, при перехвате исключений вы можете создать различные программные переходы для обработки исключений в зависимости от типа обрабатываемого исключения.</p>\n\n<p>Например, следующий код использует оператор <code>instanceof</code> для проверки того, является ли объект <code>theDay</code> объектом типа <code>Date</code>. Так как <code>theDay</code> действительно является объектом типа <code>Date</code>, то программа выполняет код, содержащийся в утверждении <code>if</code>.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> theDay <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">1995</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>theDay <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// выполняемый код</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"приоритет_операторов","title":"Приоритет операторов","isH3":true,"content":"<p><em>Приоритет</em> операторов определяет порядок их выполнения при вычислении выражения. Вы можете влиять на приоритет операторов с помощью скобок.</p>\n\n<p>Приведённая ниже таблица описывает приоритет операторов от наивысшего до низшего.</p>\n\n<table class=\"standard-table\">\n <caption>Таблица 3.7 Приоритет операторов</caption>\n <thead>\n  <tr>\n   <th scope=\"col\">Тип оператора</th>\n   <th scope=\"col\">Операторы</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td>свойство объекта</td>\n   <td><code>. []</code></td>\n  </tr>\n  <tr>\n   <td>вызов, создание экземпляра объекта</td>\n   <td><code>() new</code></td>\n  </tr>\n  <tr>\n   <td>отрицание, инкремент</td>\n   <td><code>! ~ - + ++ -- typeof void delete</code></td>\n  </tr>\n  <tr>\n   <td>умножение, деление</td>\n   <td><code>* / %</code></td>\n  </tr>\n  <tr>\n   <td>сложение, вычитание</td>\n   <td><code>+ -</code></td>\n  </tr>\n  <tr>\n   <td>побитовый сдвиг</td>\n   <td><code>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</code></td>\n  </tr>\n  <tr>\n   <td>сравнение, вхождение</td>\n   <td><code>&lt; &lt;= &gt; &gt;= in instanceof</code></td>\n  </tr>\n  <tr>\n   <td>равенство</td>\n   <td><code>== != === !==</code></td>\n  </tr>\n  <tr>\n   <td>битовое-и</td>\n   <td><code>&amp;</code></td>\n  </tr>\n  <tr>\n   <td>битовое-исключающее-или</td>\n   <td><code>^</code></td>\n  </tr>\n  <tr>\n   <td>битовое-или</td>\n   <td><code>|</code></td>\n  </tr>\n  <tr>\n   <td>логическое-и</td>\n   <td><code>&amp;&amp;</code></td>\n  </tr>\n  <tr>\n   <td>логическое-или</td>\n   <td><code>||</code></td>\n  </tr>\n  <tr>\n   <td>условный (тернарный) оператор</td>\n   <td><code>?:</code></td>\n  </tr>\n  <tr>\n   <td>присваивание</td>\n   <td><code>= += -= *= /= %= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;= &amp;= ^= |=</code></td>\n  </tr>\n  <tr>\n   <td>запятая</td>\n   <td><code>,</code></td>\n  </tr>\n </tbody>\n</table>\n\n<p>Более подробная версия данной таблицы, содержащая ссылки и дополнительную информацию по каждому оператору, находится в <a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#table\">справочнике JavaScript</a>.</p>"}},{"type":"prose","value":{"id":"выражения","title":"Выражения","isH3":false,"content":"<p><em>Выражением </em>является любой корректный блок кода, который возвращает значение.</p>\n\n<p>Концептуально, существуют два типа выражений: те которые присваивают переменной значение, и те, которые вычисляют значение без его присваивания.</p>\n\n<p>Выражение <code>x = 7</code>  является примером выражения первого типа. Данное выражение использует <em>оператор</em> = для присваивания переменной<span style=\"line-height: 1.5;\"> </span><code style=\"font-style: normal; line-height: 1.5;\">x </code><span style=\"line-height: 1.5;\">значения 7</span><span style=\"line-height: 1.5;\">. Само выражение также равняется 7.</span></p>\n\n<p>Код <code>3 + 4</code> является примером выражения второго типа. Данное выражение использует  <em>оператор</em><span style=\"line-height: 1.5;\"> \"+\" для сложения чисел 3 и 4 без присваивания переменной полученного результата 7.</span></p>\n\n<p>Все выражения в JavaScript делятся на следующие категории:</p>\n\n<ul>\n <li><strong>Арифметические</strong>: вычисляются в число, например: 3.14159 (Используют <a href=\"#arithmetic_operators\">арифметические операторы</a>).</li>\n <li><strong>Строковые</strong>: вычисляются в текстовую строку, например: \"Fred\" или \"234\" (Используют <a href=\"#string_operators\">строковые операторы</a>).</li>\n <li><strong>Логические</strong>: вычисляются в true или false (Используют <a href=\"#logical_operators\">логические операторы</a>).</li>\n <li><strong>Основные выражения</strong>: Базовые ключевые слова и основные выражения в JavaScript.</li>\n <li><strong>Левосторонние выражения</strong>: Значениям слева назначаются значения справа.</li>\n</ul>"}},{"type":"prose","value":{"id":"основные_выражения","title":"Основные выражения","isH3":true,"content":"<p>Базовые ключевые слова и основные выражения в JavaScript.</p>\n\n<h4 id=\"this\">Оператор <code>this</code></h4>\n\n<p>Используйте ключевое слово <code>this</code> для указания на текущий объект. В общем случае <code>this</code> указывает на вызываемый объект, которому принадлежит данный метод. Используйте <code>this</code> следующим образом:</p>\n\n<pre class=\"syntaxbox notranslate\">this[\"propertyName\"]\nthis.propertyName\n</pre>\n\n<p>Предположим, функция <code>validate</code> выполняет проверку свойства <code>value</code> некоторого объекта; задан объект, а также верхняя и нижняя граница величины данного свойства:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> lowval<span class=\"token punctuation\">,</span> hival</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&lt;</span> lowval<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&gt;</span> hival<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Неверное значение!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n\n<p>Вы можете вызвать функцию <code>validate</code> для обработчика события <code>onChange</code> для каждого элемента формы, используя <code>this</code> для указания на элемент формы, как это показано в следующем примере:</p>\n\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>B</span><span class=\"token punctuation\">&gt;</span></span>Введите число от 18 до 99:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>B</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>INPUT</span> <span class=\"token attr-name\">TYPE</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">NAME</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">SIZE</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>3</span>\n   <span class=\"token special-attr\"><span class=\"token attr-name\">onChange</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n\n<h4 id=\"оператор_группировки\">Оператор группировки</h4>\n\n<p>Оператор группировки <code>\"скобки\" ( )</code> контролирует приоритет вычисления выражений. Например, вы можете переопределить порядок - \"умножение и деление, а потом сложение и вычитание\", так чтобы, например, чтобы сложение выполнялось до умножения:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// обычный порядок</span>\na <span class=\"token operator\">+</span> b <span class=\"token operator\">*</span> c     <span class=\"token comment\">// 7</span>\n<span class=\"token comment\">// выполняется, как обычно, так</span>\na <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span> c<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 7</span>\n\n<span class=\"token comment\">// теперь поменяем порядок</span>\n<span class=\"token comment\">// сложение до умножения</span>\n<span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> c   <span class=\"token comment\">// 9</span>\n\n<span class=\"token comment\">// что эквивалентно следующему</span>\na <span class=\"token operator\">*</span> c <span class=\"token operator\">+</span> b <span class=\"token operator\">*</span> c <span class=\"token comment\">// 9</span></code></pre></div>\n\n<h4 id=\"упрощённый_синтаксис_создания_массивов_и_генераторов\">Упрощённый синтаксис создания массивов и генераторов</h4>\n\n<p>Упрощённый синтаксис - экспериментальная возможность JavaScript, которая возможно будет добавлена в будущие версии ECMAScript. Есть 2 версии синтаксиса:</p>\n\n<dl>\n <dt id=\"sect3\"><svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg> <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\"><code>[for (x of y) x]</code> <small>(en-US)</small></a></dt>\n <dd>Упрощённый синтаксис для массивов.</dd>\n <dt id=\"sect4\"><svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg> <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\"><code>(for (x of y) y)</code> <small>(en-US)</small></a></dt>\n <dd>Упрощённый синтаксис для генераторов.</dd>\n</dl>\n\n<p>Упрощённые синтаксисы существуют во многих языках программирования и позволяют вам быстро собирать новый массив, основанный на существующем. Например:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">[</span><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">of</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> i<span class=\"token operator\">*</span>i <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [ 1, 4, 9 ]</span>\n\n<span class=\"token keyword\">var</span> abc <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>letters <span class=\"token keyword\">of</span> abc<span class=\"token punctuation\">)</span> letters<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [ \"a\", \"b\", \"c\" ]</span></code></pre></div>"}},{"type":"prose","value":{"id":"левосторонние_выражения","title":"Левосторонние выражения","isH3":true,"content":"<p>Значениям слева назначаются значения справа.</p>\n\n<h4 id=\"new\"><code>new</code></h4>\n\n<p>Вы можете использовать <a href=\"/ru/docs/Web/JavaScript/Reference/Operators/new\">оператор <code>new</code></a> для создания экземпляра объекта пользовательского типа или одного из встроенных объектов. Используйте оператор <code>new</code> следующим образом:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> objectName <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">objectType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>param1<span class=\"token punctuation\">,</span> param2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">,</span> paramN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<h4 id=\"super\">super</h4>\n\n<p><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/super\">Ключевое слово</a> используется, чтобы вызывать функции родительского объекта. Это полезно и с <a href=\"/ru/docs/Web/JavaScript/Reference/Classes\">классами</a> для вызова конструктора родителя, например.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// вызывает конструктор родителя. super.functionOnParent([arguments]);</span></code></pre></div>\n\n<h4 id=\"оператор_расширения\">Оператор расширения</h4>\n\n<p><a href=\"/ru/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Оператор расширения</a> позволяет выражению расширяться в местах с множеством аргументов (для вызовов функций) или множестве элементов (для массивов).</p>\n\n<p><strong>Пример:</strong> Сегодня, если у вас есть массив и вы хотите создать новый с существующей частью первого, то литерального синтаксиса массива уже не достаточно, и вы должны писать императивный (без вариантов) код, используя комбинацию <code>push</code>, <code>splice</code>, <code>concat</code> и т.д. Но с этим оператором код становится более коротким:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> parts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'shoulder'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'knees'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> lyrics <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'head'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>parts<span class=\"token punctuation\">,</span> <span class=\"token string\">'and'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'toes'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>Похожим образом оператор работает с вызовами функций:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p></p><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ru/docs/Web/JavaScript/Guide/Functions\">« Предыдущая статья</a></li>\n    <li><a class=\"button minimal\" href=\"/ru/docs/Web/JavaScript/Guide/Numbers_and_dates\">Следующая статья  »</a></li>\n</ul><p></p>"}},{"type":"prose","value":{"id":"sect1","title":" ","isH3":true,"content":""}},{"type":"prose","value":{"id":"sect2","title":" ","isH3":false,"content":"<ul>\n</ul>"}}],"toc":[{"text":"Операторы","id":"операторы"},{"text":"Выражения","id":"выражения"},{"text":" ","id":"sect2"}],"summary":"Эта глава описывает выражения и операторы языка JavaScript, такие как операторы присваивания, сравнения, арифметические, битовые, логические, строчные, и различные специальные операторы.","popularity":0.0089,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Expressions and operators","locale":"en-US","native":"English (US)"},{"title":"Expresiones y operadores","locale":"es","native":"Español"},{"title":"Expressions et opérateurs","locale":"fr","native":"Français"},{"title":"式と演算子","locale":"ja","native":"日本語"},{"title":"표현식과 연산자","locale":"ko","native":"한국어"},{"title":"Expressões e operadores","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"表达式与运算符","locale":"zh-CN","native":"中文 (简体)"},{"title":"運算式與運算子","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ru/web/javascript/guide/expressions_and_operators","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/web/javascript/guide/expressions_and_operators/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Web","title":"Веб-технологии для разработчиков"},{"uri":"/ru/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/ru/docs/Web/JavaScript/Guide","title":"Руководство JavaScript"},{"uri":"/ru/docs/Web/JavaScript/Guide/Expressions_and_Operators","title":"Выражения и операторы"}],"pageTitle":"Выражения и операторы - JavaScript | MDN","noIndexing":false}}