{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Использование пользовательских элементов","mdn_url":"/ru/docs/Web/Web_Components/Using_custom_elements","locale":"ru","native":"Русский","sidebarHTML":"<ol><li class=\"toggle\"><details open=\"\"><summary>Руководства</summary><ol><li><a href=\"/ru/docs/Web/Web_Components/Using_custom_elements\">Using custom elements</a></li><li><a href=\"/ru/docs/Web/Web_Components/Using_shadow_DOM\">Using shadow DOM</a></li><li><a href=\"/ru/docs/Web/Web_Components/Using_templates_and_slots\">Using templates and slots</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Интерфейсы</summary><ol><li><a href=\"/ru/docs/Web/API/CustomElementRegistry\"><code>CustomElementRegistry</code></a></li><li><a href=\"/ru/docs/Web/API/HTMLSlotElement\"><code>HTMLSlotElement</code></a></li><li><a href=\"/ru/docs/Web/API/HTMLTemplateElement\"><code>HTMLTemplateElement</code></a></li><li><a href=\"/ru/docs/Web/API/ShadowRoot\"><code>ShadowRoot</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Свойства</summary><ol><li><a href=\"/ru/docs/Web/API/Element/shadowRoot\"><code>Element.shadowRoot</code></a></li><li><a href=\"/ru/docs/Web/API/Element/slot\"><code>Element.slot</code></a></li><li><a href=\"/ru/docs/Web/API/Event/composed\"><code>Event.composed</code></a></li><li><a href=\"/ru/docs/Web/API/Event/composedPath\"><code>Event.composedPath</code></a></li><li><a href=\"/ru/docs/Web/API/Node/isConnected\"><code>Node.isConnected</code></a></li><li><a href=\"/ru/docs/Web/API/Window/customElements\"><code>Window.customElements</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Методы</summary><ol><li><a href=\"/ru/docs/Web/API/Document/createElement\"><code>Document.createElement()</code></a></li><li><a href=\"/ru/docs/Web/API/Element/attachShadow\"><code>Element.attachShadow()</code></a></li><li><a href=\"/ru/docs/Web/API/Node/getRootNode\"><code>Node.getRootNode()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div id=\"sect1\"></div>\n\n<p class=\"summary\">Одна из ключевых особенностей стандарта Веб-компонент это возможность создавать пользовательские элементы на HTML-странице, инкапсулирующие функциональность, вместо того чтобы создавать длинную, вложенную группу элементов, которые бы вместе реализовывали нужную пользовательскую фичу. Эта статья является вводной по использованию пользовательских HTML-компонент.</p>\n\n<div class=\"note notecard\" id=\"sect2\">\n<p><strong>Примечание</strong>: Пользовательские элементы поддерживаются по умолчанию в Firefox, Chrome и Opera. Safari пока поддерживает только автономные пользовательские компоненты, Edge также работает над реализацией.</p>\n</div>"}},{"type":"prose","value":{"id":"высокоуровневый_обзор","title":"Высокоуровневый обзор","isH3":false,"content":"<p>Контроллером пользовательских элементов веб-документа является объект <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CustomElementRegistry\"><code>CustomElementRegistry</code> <small>(en-US)</small></a> — этот элемент позволяет регистрировать пользовательские элементы на веб-странице, возвращает информацию о зарегистрированных элементах и т.п.</p>\n\n<p>Чтобы зарегистрировать пользовательский элемент на странице, используйте метод <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CustomElementRegistry/define\"><code>CustomElementRegistry.define()</code> <small>(en-US)</small></a> method. Он принимает аргументы:</p>\n\n<ul>\n <li><a href=\"/ru/docs/conflicting/Web/JavaScript/Reference/Global_Objects/String_6fa58bba0570d663099f0ae7ae8883ab\"><code>DOMString</code></a> - имя элемента. Обратите внимание, что в именах пользовательских элементах <a href=\"https://stackoverflow.com/questions/22545621/do-custom-elements-require-a-dash-in-their-name\" class=\"external\" rel=\" noopener\">должен содержаться дефис</a>; они не могут состоять только из одного слова.</li>\n <li>Объект типа <a href=\"/en-US/docs/Web/JavaScript/Reference/Classes\">class</a>, определяющий поведение элемента.</li>\n <li>Опционально объект options, имеющий свойство <code>extends</code>, соответствующее встроенному элементу, от которого наследует объект.</li>\n</ul>\n\n<p>К примеру, мы можем определить пользовательский элемент <a href=\"https://mdn.github.io/web-components-examples/word-count-web-component/\" class=\"external\" rel=\" noopener\">word-count element</a>:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'word-count'</span><span class=\"token punctuation\">,</span> WordCount<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token string\">'p'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>Этот элемент называется <code>word-count</code>, объект соответствующего класса называется <code>WordCount</code>, и он наследует элементу <a href=\"/ru/docs/Web/HTML/Element/p\"><code>&lt;p&gt;</code></a>.</p>\n\n<p>Объект класса пользовательского элемента определяется с помощью синтаксиса классов ES 2015. Например, <code>WordCount</code> имеют следующую структуру:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">WordCount</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLParagraphElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Всегда первым делом вызывайте super() в конструкторе</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Далее пишется функциональность элемента</span>\n\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<p>Это простой пример, но его можно дополнить. Можно определить специальные lifecycle callbacks, которые будут вызваны в определённые моменты жизненного цикла элемента. Например, <code>connectedCallback</code> будет вызван, когда пользовательский элемент оказывается впервые встроен в DOM, а <code>attributeChangedCallback</code> вызывается, когда пользовательскому элементу добавляют, удаляют или изменяют какой-то атрибут.</p>\n\n<p>Подробнее об этом в секции <a href=\"#using_the_lifecycle_callbacks\">Using the lifecycle callbacks</a> ниже.</p>\n\n<p>Есть два типа пользовательских элементов:</p>\n\n<ul>\n <li><strong>Автономные пользовательские элементы</strong> независимы — они не наследуют встроенным HTML-элементам. Их используют на странице просто как обычный HTML-элемент. Например, <code>&lt;popup-info&gt;</code> или <code>document.createElement(\"popup-info\")</code>.</li>\n <li><strong>Модифицированные встроенные элементы</strong> наследуют базовым HTML-элементам. Чтобы создать один из них, вы определяете элемент, от которого они унаследованы (как в примерах выше), и используете их как обычный базовый элемент, но с добавлением атрибута/свойства с именем пользовательского элемента <a href=\"/ru/docs/Web/HTML/Global_attributes#attr-is\"><code>is</code></a>. Например <code>&lt;p is=\"word-count\"&gt;</code>, или <code>document.createElement(\"p\", { is: \"word-count\" })</code>.</li>\n</ul>"}},{"type":"prose","value":{"id":"разбор_простых_примеров","title":"Разбор простых примеров","isH3":false,"content":"<p>А сейчас давайте разберём ещё несколько простых примеров, иллюстрирующих подробности создания пользовательских элементов.</p>"}},{"type":"prose","value":{"id":"автономные_пользовательские_элементы","title":"Автономные пользовательские элементы","isH3":true,"content":"<p>Рассмотрим пример автономного пользовательского элемента — <code><a href=\"https://github.com/mdn/web-components-examples/tree/master/popup-info-box-web-component\" class=\"external\" rel=\" noopener\">&lt;popup-info-box&gt;</a></code> (см. <a href=\"https://mdn.github.io/web-components-examples/popup-info-box-web-component/\" class=\"external\" rel=\" noopener\">работающий пример</a>). Он содержит изображение и строку, и встраивает изображение в страницу. Когда на изображение наводят фокус, компонент показывает всплывающую подсказку с текстом.</p>\n\n<p>Прежде всего файл JavaScript определяет класс <code>PopUpInfo</code>, наследующий от <a href=\"/ru/docs/Web/API/HTMLElement\"><code>HTMLElement</code></a>. Автономные пользовательские элементы почти всегда наследуют <code>HTMLElement</code>.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">PopUpInfo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Всегда первым делом вызывайте super() в конструкторе</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// далее следует функциональность элемента</span>\n\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<p>В этом фрагменте кода содержится определение конструктора <a class=\"page-not-created\" title=\"Документация об этом ещё не написана; пожалуйста, поспособствуйте её написанию!\"><code>constructor</code></a> класса, которое всегда начинается с вызова <code><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/super\">super()</a></code> чтобы отработала цепочка прототипного наследования.</p>\n\n<p>Внутри конструктора мы определяем всю функциональность, которую получит элемент при создании его объекта. В данном случае мы добавляем shadow root к пользовательскому элементу, производим манипуляции с DOM, чтобы создать определённую структуру shadow DOM внутри элемента — которая затем присоединяется к shadow root — и наконец добавляем CSS к shadow root, чтобы задать его стиль.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Создание shadow root</span>\n<span class=\"token keyword\">var</span> shadow <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'open'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Создание spans</span>\n<span class=\"token keyword\">var</span> wrapper <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwrapper<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'wrapper'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> icon <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nicon<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'icon'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nicon<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tabindex'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> info <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninfo<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'info'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Берём содержимое атрибута и добавляем его в span</span>\n<span class=\"token keyword\">var</span> text <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninfo<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Вставляем иконку</span>\n<span class=\"token keyword\">var</span> imgUrl<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  imgUrl <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  imgUrl <span class=\"token operator\">=</span> <span class=\"token string\">'img/default.png'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> img <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nimg<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> imgUrl<span class=\"token punctuation\">;</span>\nicon<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Создаём CSS для shadow dom</span>\n<span class=\"token keyword\">var</span> style <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'style'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nstyle<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'.wrapper {'</span> <span class=\"token operator\">+</span>\n<span class=\"token comment\">// CSS truncated for brevity</span>\n\n<span class=\"token comment\">// добавляем созданные элементы к shadow dom</span>\n\nshadow<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nshadow<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwrapper<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>icon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwrapper<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>Наконец, регистрируем пользовательский элемент в <code>CustomElementRegistry</code> с помощью метода <code>define()</code>, который упоминался ранее — в качестве параметров мы передаём ему имя элемента и имя класса, который содержит его функциональность:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'popup-info'</span><span class=\"token punctuation\">,</span> PopUpInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>Теперь он доступен для использования на нашей странице. В HTML мы используем его так:</p>\n\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>popup-info</span> <span class=\"token attr-name\">img</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>img/alt.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Код валидации вашей карты (CVC)\n  это дополнительная мера безопасности — это последние 3 или 4 цифры\n  на обороте вашей карты.<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n\n<div class=\"note notecard\" id=\"sect3\">\n<p><strong>Примечание</strong>: вы можете прочитать <a href=\"https://github.com/mdn/web-components-examples/blob/master/popup-info-box-web-component/main.js\" class=\"external\" rel=\" noopener\">полный исходный код на JavaScript</a> здесь.</p>\n</div>"}},{"type":"prose","value":{"id":"модифицированные_встроенные_элементы","title":"Модифицированные встроенные элементы","isH3":true,"content":"<p>Теперь давайте взглянем на другой пример модифицированного пользовательского элемента — <a href=\"https://github.com/mdn/web-components-examples/tree/master/expanding-list-web-component\" class=\"external\" rel=\" noopener\">раскрывающийся список</a> (<a href=\"https://mdn.github.io/web-components-examples/expanding-list-web-component/\" class=\"external\" rel=\" noopener\">см. действующий пример</a>). Он превращает любой ненумерованный список в раскрывающееся/складывающееся меню.</p>\n\n<p>Первым делом определим класс элемента наподобие того, как это делалось выше:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">ExpandingList</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLUListElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Всегда первым делом вызываем super() в конструкторе</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ниже следует функциональность элемента</span>\n\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<p>Здесь мы не будем во всех подробностях описывать функциональность элемента, вы можете понять как он работает, посмотрев исходный код. Единственное принципиальное различие с предыдущим примером состоит в том, что мы используем интерфейс <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLUListElement\"><code>HTMLUListElement</code> <small>(en-US)</small></a>, а не <a href=\"/ru/docs/Web/API/HTMLElement\"><code>HTMLElement</code></a>. Так что у него есть все характеристики элемента <a href=\"/ru/docs/Web/HTML/Element/ul\"><code>&lt;ul&gt;</code></a>, плюс дополнительная функциональность, которую определили мы. Это и отличает модифицированный встроенный элемент от автономного пользовательского элемента.</p>\n\n<p>Далее мы регистрируем этот элемент с помощью метода <code>define()</code> как в прошлом примере, только на сей раз мы добавляем объект options, который определяет, какому встроенному элементу наследует данный:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'expanding-list'</span><span class=\"token punctuation\">,</span> ExpandingList<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ul\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>Встроенный элемент используется на веб-странице немного по-другому:</p>\n\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">is</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>expanding-list<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  ...\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n\n<p>Вы задаёте элемент <code>&lt;ul&gt;</code> как обычно, но указываете имя модифицированного элемента в атрибуте <code>is</code>.</p>\n\n<div class=\"note notecard\" id=\"sect4\">\n<p><strong>Замечание</strong>: Полный <a href=\"https://github.com/mdn/web-components-examples/blob/master/expanding-list-web-component/main.js\" class=\"external\" rel=\" noopener\">исходный код на JavaScript</a> доступен здесь.</p>\n</div>"}},{"type":"prose","value":{"id":"использование_lifecycle_callbacks","title":"Использование lifecycle callbacks","isH3":false,"content":"<p>Вы можете определить несколько разных колбэков в конструкторе пользовательских элементов, которые сработают на разных этапах жизненного цикла элемента:</p>\n\n<ul>\n <li><code>connectedCallback</code>: Срабатывает, когда пользовательский элемент впервые добавляется в DOM.</li>\n <li><code>disconnectedCallback</code>: Срабатывает, когда пользовательский элемент удаляется из DOM.</li>\n <li><code>adoptedCallback</code>: Срабатывает, когда пользовательский элемент перемещён в новый документ.</li>\n <li><code>attributeChangedCallback</code>: Срабатывает, когда пользовательскому элементу добавляют, удаляют или изменяют атрибут.</li>\n</ul>\n\n<p>Посмотрим на них в действии. Код ниже взят из примера <a href=\"https://github.com/mdn/web-components-examples/tree/master/life-cycle-callbacks\" class=\"external\" rel=\" noopener\">life-cycle-callbacks</a> (<a href=\"https://mdn.github.io/web-components-examples/life-cycle-callbacks/\" class=\"external\" rel=\" noopener\">см. его в действии</a>). Это тривиальный пример, создающий на странице цветной квадрат. Вот как выглядит код пользовательского элемента:</p>\n\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>custom-square</span> <span class=\"token attr-name\">l</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">c</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>red<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>custom-square</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n\n<p>Конструктор класса очень простой — мы просто добавляем shadow DOM к элементу, а затем добавляем пустые элементы <a href=\"/ru/docs/Web/HTML/Element/div\"><code>&lt;div&gt;</code></a> и <a href=\"/ru/docs/Web/HTML/Element/style\"><code>&lt;style&gt;</code></a> к shadow root:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> shadow <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'open'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> style <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'style'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nshadow<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nshadow<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>Наиболее важная функция в этом примере <code>updateStyle()</code> — она принимает элемент, находит его shadow root, находит его элемент <code>&lt;style&gt;</code>, и добавляет <a href=\"/ru/docs/Web/CSS/width\"><code>width</code></a>, <a href=\"/ru/docs/Web/CSS/height\"><code>height</code></a>, и <a href=\"/ru/docs/Web/CSS/background-color\"><code>background-color</code></a> к стилям.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">updateStyle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">elem</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> shadow <span class=\"token operator\">=</span> elem<span class=\"token punctuation\">.</span>shadowRoot<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> childNodes <span class=\"token operator\">=</span> shadow<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> childNodes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>childNodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>nodeName <span class=\"token operator\">===</span> <span class=\"token string\">'STYLE'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      childNodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'div {'</span> <span class=\"token operator\">+</span>\n                          <span class=\"token string\">' width: '</span> <span class=\"token operator\">+</span> elem<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'l'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'px;'</span> <span class=\"token operator\">+</span>\n                          <span class=\"token string\">' height: '</span> <span class=\"token operator\">+</span> elem<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'l'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'px;'</span> <span class=\"token operator\">+</span>\n                          <span class=\"token string\">' background-color: '</span> <span class=\"token operator\">+</span> elem<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<p>Сами изменения стилей обрабатываются колбэками жизненного цикла, находящимися внутри конструктора. <code>connectedCallback()</code> срабатывает, когда элемент встраивается в DOM — здесь мы запускаем функцию <code>updateStyle()</code> которая обеспечивает, чтобы квадрат имел стиль, описанный в его атрибутах:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Пользовательский элемент квадрат добавлен на страницу.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">updateStyle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<p>колбэки <code>disconnectedCallback()</code> и <code>adoptedCallback()</code> логируют простые сообщения на консоль, которые уведомляют нас, что элемент удалён из DOM или перемещён на другую страницу:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">disconnectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Пользовательский элемент квадрат удален.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">adoptedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Пользовательский элемент квадрат перемещён на другую страницу.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<p>Колбэк <code>attributeChangedCallback()</code> запускается когда один из атрибутов элемента меняется. Как видно из его свойств, можно воздействовать на индивидуальные атрибуты, глядя на их имена, и новые и старые значения атрибутов. В данном случае, однако, мы просто снова запускаем функцию <code>updateStyle()</code> чтобы убедиться, что атрибуты квадрата получили новые значения:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">attributeChangedCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">,</span> newValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Атрибуты пользовательского элемента квадрат изменились.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">updateStyle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<p>Обратите внимание, что нужно наблюдать за атрибутами, чтобы запустить колбэк <code>attributeChangedCallback()</code> когда они изменятся. Это делается через вызов геттера <code>observedAttributes()</code> в конструкторе, который содержит оператор <code>return</code> возвращающий массив с именами атрибутов, которые вы хотите наблюдать:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">observedAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'l'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>\n\n<p>В нашем случае он расположен в начале конструктора.</p>\n\n<div class=\"note notecard\" id=\"sect5\">\n<p><strong>Замещение</strong>: Смотрите <a href=\"https://github.com/mdn/web-components-examples/blob/master/life-cycle-callbacks/main.js\" class=\"external\" rel=\" noopener\">полный исходный код на JavaScript</a> здесь.</p>\n</div>"}}],"toc":[{"text":"Высокоуровневый обзор","id":"высокоуровневый_обзор"},{"text":"Разбор простых примеров","id":"разбор_простых_примеров"},{"text":"Использование lifecycle callbacks","id":"использование_lifecycle_callbacks"}],"summary":"Одна из ключевых особенностей стандарта Веб-компонент это возможность создавать пользовательские элементы на HTML-странице, инкапсулирующие функциональность, вместо того чтобы создавать длинную, вложенную группу элементов, которые бы вместе реализовывали нужную пользовательскую фичу. Эта статья является вводной по использованию пользовательских HTML-компонент.","popularity":0.0005,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using custom elements","locale":"en-US","native":"English (US)"},{"title":"Usando elementos personalizados","locale":"es","native":"Español"},{"title":"Utilisation d'éléments personnalisés","locale":"fr","native":"Français"},{"title":"カスタム要素の使用","locale":"ja","native":"日本語"},{"title":"사용자 정의 요소 사용하기","locale":"ko","native":"한국어"},{"title":"Usando custom elements","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"使用 custom elements","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ru/web/web_components/using_custom_elements","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/web/web_components/using_custom_elements/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Web","title":"Веб-технологии для разработчиков"},{"uri":"/ru/docs/Web/Web_Components","title":"Веб-компоненты"},{"uri":"/ru/docs/Web/Web_Components/Using_custom_elements","title":"Использование пользовательских элементов"}],"pageTitle":"Использование пользовательских элементов - Веб-компоненты | MDN","noIndexing":false}}