{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Разрешение использования изображений из разных источников и canvas","mdn_url":"/ru/docs/Web/HTML/CORS_enabled_image","locale":"ru","native":"Русский","sidebarHTML":"\n<ol></ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>HTML предоставляет атрибут <a href=\"/ru/docs/Web/HTML/Element/img#attr-crossorigin\"><code>crossorigin</code></a> для изображений, которые в сочетании с соответствующим заголовком <a href=\"/ru/docs/Glossary/CORS\">CORS</a> позволяют использовать изображения, определённые элементом <a href=\"/ru/docs/Web/HTML/Element/img\"><code>&lt;img&gt;</code></a>, загруженные из внешних источников, в <a href=\"/ru/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a> , как если бы они были загружены из текущего источника.</p>\n<p>Дополнительные сведения об использовании атрибута <code>crossorigin</code> смотрите в разделе <a href=\"/ru/docs/Web/HTML/Attributes/crossorigin\">атрибуты параметров CORS</a>.</p>"}},{"type":"prose","value":{"id":"безопасность_и_испорченные_холсты_canvas","title":"Безопасность и испорченные холсты canvas","isH3":false,"content":"<p>Поскольку пиксели в растровом изображении canvas могут поступать из различных источников, включая изображения или видео, полученные с других хостов, неизбежно могут возникнуть проблемы с безопасностью.</p>\n<p>Как только вы рисуете на холсте любые данные, которые были загружены из другого источника без одобрения CORS, холст становится <strong>испорченным</strong>. Испорченный холст - это тот, который больше не считается безопасным, и любые попытки получить данные изображения с холста вызовут исключение.</p>\n<p>Если источником внешнего содержимого является элемент HTML <a href=\"/ru/docs/Web/HTML/Element/img\"><code>&lt;img&gt;</code></a> или SVG <a href=\"/ru/docs/Web/SVG/Element/svg\"><code>&lt;svg&gt;</code></a>, то попытка извлечения содержимого холста не допускается.</p>\n<p>Если внешнее содержимое поступает из изображения, полученного либо из <a href=\"/ru/docs/Web/API/HTMLCanvasElement\"><code>HTMLCanvasElement</code></a>, либо из <a href=\"/ru/docs/Web/API/ImageBitmap\"><code>ImageBitMap</code></a>, и источник изображения не соответствует тем же правилам происхождения, попытки прочитать содержимое холста блокируются.</p>\n<p>Вызов любого из следующих методов на испорченном холсте приведёт к ошибке:</p>\n<ul>\n  <li>Вызов <a href=\"/ru/docs/Web/API/CanvasRenderingContext2D/getImageData\" title=\"getImageData()\"><code>getImageData()</code></a> в контексте canvas</li>\n  <li>Вызов <a href=\"/ru/docs/Web/API/HTMLCanvasElement/toBlob\" title=\"toBlob()\"><code>toBlob()</code></a> на самом элементе <a href=\"/ru/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a></li>\n  <li>Вызов <a href=\"/ru/docs/Web/API/HTMLCanvasElement/toDataURL\" title=\"toDataURL()\"><code>toDataURL()</code></a> на canvas</li>\n</ul>\n<p>Попытка обратиться к ним, когда холст испорчен, приведёт к возникновению ошибки безопасности <code>SecurityError</code>. Это защищает пользователей от доступа к личным данным с помощью изображений для извлечения информации с удалённых веб-сайтов без разрешения.</p>"}},{"type":"prose","value":{"id":"хранение_изображений_из_внешнего_источника","title":"Хранение изображений из внешнего источника","isH3":false,"content":"<p>В этом примере мы хотим разрешить извлечение изображений из внешнего источника и сохранение их в локальном хранилище. Реализация этого требует настройки сервера, а также написания кода для самого веб-сайта.</p>"}},{"type":"prose","value":{"id":"конфигурация_веб-сервера","title":"Конфигурация веб-сервера","isH3":true,"content":"<p>Первое, что нам нужно, - это сервер, настроенный на размещение изображений с заголовком <a href=\"/ru/docs/Web/HTTP/Headers/Access-Control-Allow-Origin\"><code>Access-Control-Allow-Origin</code></a>, настроенным на разрешение доступа к файлам изображений из разных источников.</p>\n<p>Давайте предположим, что мы обслуживаем наш сайт с помощью <a href=\"https://httpd.apache.org/\" class=\"external\" rel=\" noopener\">Apache</a>. Рассмотрим <a href=\"https://github.com/h5bp/server-configs-apache/blob/master/src/cross-origin/images.conf\" class=\"external\" rel=\" noopener\">стандартный файл конфигурации сервера Apache HTML5 для образов CORS</a>, показанный ниже:</p>\n<div class=\"code-example\"><pre class=\"brush: xml notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>IfModule</span> <span class=\"token attr-name\">mod_setenvif.c</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>IfModule</span> <span class=\"token attr-name\">mod_headers.c</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>FilesMatch</span> <span class=\"token attr-name\">\"\\.(bmp|cur|gif|ico|jpe?g|png|svgz?|webp)$\"</span><span class=\"token punctuation\">&gt;</span></span>\n      SetEnvIf Origin \":\" IS_CORS\n      Header set Access-Control-Allow-Origin \"*\" env=IS_CORS\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>FilesMatch</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>IfModule</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>IfModule</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>Вкратце, это настраивает сервер на разрешение графических файлов (тех, что с расширениями \".bmp\", \".cur\", \".gif\", \".ico\", \".jpg\", \".jpeg\", \".png\", \".svg\", \".svgz\" и \".webp\") для получения доступа из любой точки интернета.</p>"}},{"type":"prose","value":{"id":"реализация_возможности_сохранения","title":"Реализация возможности сохранения","isH3":true,"content":"<p>Теперь, когда сервер настроен так, чтобы разрешить извлечение изображений из разных источников, мы можем написать код, который позволяет пользователю сохранять их в <a href=\"/ru/docs/Web/API/Web_Storage_API\">локальном хранилище</a>, как если бы они обслуживались из того же домена, на котором выполняется код.</p>\n<p>Ключевым моментом является использование атрибута <a href=\"/ru/docs/Web/HTML/Global_attributes#attr-crossorigin\"><code>crossorigin</code></a> путём установки <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLImageElement/crossOrigin\"><code>crossOrigin</code> <small>(en-US)</small></a> в элементе <a href=\"/ru/docs/Web/API/HTMLImageElement\"><code>HTMLImageElement</code></a> , на который будет загружено изображение. Это даёт браузеру команду на запрос доступа к другому источнику при попытке загрузить данные изображения.</p>\n<h4 id=\"запуск_загрузки\">Запуск загрузки</h4>\n<p>Код, который запускает загрузку (скажем, когда пользователь нажимает кнопку \"Загрузить\"), выглядит следующим образом:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">startDownload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> imageURL <span class=\"token operator\">=</span> <span class=\"token string\">\"https://cdn.glitch.com/4c9ebeb9-8b9a-4adc-ad0a-238d9ae00bb5%2Fmdn_logo-only_color.svg?1535749917189\"</span><span class=\"token punctuation\">;</span>\n\n  downloadedImg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">;</span>\n  downloadedImg<span class=\"token punctuation\">.</span>crossOrigin <span class=\"token operator\">=</span> <span class=\"token string\">\"Anonymous\"</span><span class=\"token punctuation\">;</span>\n  downloadedImg<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span> imageReceived<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  downloadedImg<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> imageURL<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Здесь мы используем жёстко закодированный URL-адрес (<code>imageURL</code>), но он запросто может поступать откуда угодно. Чтобы начать загрузку изображения, мы создаём новый объект <a href=\"/ru/docs/Web/API/HTMLImageElement\"><code>HTMLImageElement</code></a> с помощью конструктора <a href=\"/ru/docs/Web/API/HTMLImageElement/Image\" title=\"Image()\"><code>Image()</code></a>. Затем изображение настраивается так, чтобы разрешить загрузку из другого источника. Для этого его атрибут <code>crossOrigin</code> устанавливается на <code>\"Anonymous\"</code> (то есть разрешение неавторизованной загрузки изображения из перекрёстного источника). Обработчик событий добавляется к событию <code><a href=\"/en-US/docs/Web/API/Window/load_event\" title=\"Currently only available in English (US)\" class=\"only-in-en-us\">load (en-US)</a></code>, запускаемому на элементе изображения, что означает, что данные изображения были получены.</p>\n<p>Наконец, атрибут <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLImageElement/src\"><code>src</code> <small>(en-US)</small></a> изображения устанавливается в URL-адрес загружаемого изображения; это инициирует начало загрузки.</p>\n<h4 id=\"получение_и_сохранение_изображения\">Получение и сохранение изображения</h4>\n<p>Код, обрабатывающий недавно загруженные изображения, находится в методе <code>imageReceived()</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">imageReceived</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"canvas\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> context <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  canvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> downloadedImg<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n  canvas<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> downloadedImg<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n\n  context<span class=\"token punctuation\">.</span><span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span>downloadedImg<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  imageBox<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"saved-image-example\"</span><span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">toDataURL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"image/png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error: \"</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>imageReceived()</code> вызывается для обработки события <code>\"load\"</code> в элементе <code>HTMLImageElement</code>, который получает загруженное изображение. Это событие срабатывает, как только все загруженные данные становятся доступными. Он начинается с создания нового элемента <a href=\"/ru/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a>, который мы будем использовать для преобразования изображения в URL-адрес данных и получения доступа к контексту 2D-рендеринга холста (<a href=\"/ru/docs/Web/API/CanvasRenderingContext2D\"><code>CanvasRenderingContext2D</code></a>) в переменной <code>context</code>.</p>\n<p>Размер холста настраивается в соответствии с полученным изображением, затем изображение рисуется на холсте с помощью <a href=\"/ru/docs/Web/API/CanvasRenderingContext2D/drawImage\" title=\"drawImage()\"><code>drawImage()</code></a>. Затем холст вставляется в документ, чтобы изображение было видно.</p>\n<p>Теперь пришло время действительно сохранить изображение локально. Для этого мы используем механизм локального хранения Web Storage API, доступ к которому осуществляется через <a href=\"/ru/docs/Web/API/Window/localStorage\" title=\"localStorage\"><code>localStorage</code></a> глобально. Метод canvas <a href=\"/ru/docs/Web/API/HTMLCanvasElement/toDataURL\" title=\"toDataURL()\"><code>toDataURL()</code></a> используется для преобразования изображения в data:// URL, представляющий изображение PNG, которое затем сохраняется в локальном хранилище с помощью <a href=\"/ru/docs/Web/API/Storage/setItem\" title=\"setItem()\"><code>setItem()</code></a>.</p>\n<p>Вы можете <a href=\"https://cors-image-example.glitch.me/\" class=\"external\" rel=\" noopener\">проверить</a> или <a href=\"https://glitch.com/edit/#!/remix/cors-image-example\" class=\"external\" rel=\" noopener\">переделать</a> этот пример на Glitch.</p>"}},{"type":"prose","value":{"id":"смотрите_также","title":"Смотрите также","isH3":false,"content":"<ul>\n  <li><a href=\"https://blog.chromium.org/2011/07/using-cross-domain-images-in-webgl-and.html\" class=\"external\" rel=\" noopener\">Using Cross-domain images in WebGL and Chrome 13</a></li>\n  <li><a href=\"http://whatwg.org/html#attr-img-crossorigin\" class=\"external\" rel=\" noopener\">HTML Specification - the <code>crossorigin</code> attribute</a></li>\n  <li><a href=\"ru/docs/Web/API/Web_Storage_API\">Веб хранилище (API)</a></li>\n</ul>"}}],"toc":[{"text":"Безопасность и испорченные холсты canvas","id":"безопасность_и_испорченные_холсты_canvas"},{"text":"Хранение изображений из внешнего источника","id":"хранение_изображений_из_внешнего_источника"},{"text":"Смотрите также","id":"смотрите_также"}],"summary":"HTML предоставляет атрибут crossorigin для изображений, которые в сочетании с соответствующим заголовком CORS позволяют использовать изображения, определённые элементом <img>, загруженные из внешних источников, в <canvas> , как если бы они были загружены из текущего источника.","popularity":0.0003,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Allowing cross-origin use of images and canvas","locale":"en-US","native":"English (US)"},{"title":"Imagen con CORS habilitado","locale":"es","native":"Español"},{"title":"Autoriser les images et canevas provenant d'autres origines","locale":"fr","native":"Français"},{"title":"画像とキャンバスをオリジン間で利用できるようにする","locale":"ja","native":"日本語"},{"title":"교차 출처 이미지와 캔버스 허용하기","locale":"ko","native":"한국어"},{"title":"CORS_habilitar_imagens","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"启用了 CORS 的图片","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ru/web/html/cors_enabled_image","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/web/html/cors_enabled_image/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ru/docs/Web","title":"Веб-технологии для разработчиков"},{"uri":"/ru/docs/Web/HTML","title":"HTML"},{"uri":"/ru/docs/Web/HTML/CORS_enabled_image","title":"Разрешение использования изображений из разных источников и canvas"}],"pageTitle":"Разрешение использования изображений из разных источников и canvas - HTML | MDN","noIndexing":false}}