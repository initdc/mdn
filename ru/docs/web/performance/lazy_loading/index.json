{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Lazy loading","mdn_url":"/ru/docs/Web/Performance/Lazy_loading","locale":"ru","native":"Русский","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong>Lazy loading (ленивая загрузка) </strong>- это стратегия, направленная на определение ресурсов как неблокирующих (не критических) для того, чтобы отложить загрузку этих ресурсов на тот момент, когда они действительно необходимы. Так можно сократить длину <a href=\"/ru/docs/Web/Performance/Critical_rendering_path\">критических этапов рендеринга</a>, что приводит к уменьшению времени загрузки приложения.</p>\n\n<p>Ленивая загрузка может происходить в разные моменты работы приложения, но, как правило, она запускается во время взаимодействия пользователя и системы, например, при скроллинге или навигации.</p>"}},{"type":"prose","value":{"id":"обзор","title":"Обзор","isH3":false,"content":"<p>Вместе с ростом web-приложений драматически вырос объем и размеры ресурсов, отправляемых клиентскому приложению. С 2011 по 2019 медианный рост размеров ресурсов вырос с <strong>~100KB</strong> до <strong>~400KB</strong> для настольных компьютеров и с <strong>~50KB</strong> до <strong>~350KB</strong> для мобильных. А размер изображений вырос с <strong>~250KB</strong> до <strong>~900KB</strong> для настольных компьютеров и со <strong>~100KB</strong> до <strong>~850KB</strong> для мобильных.</p>\n\n<p>Очевидно, что такое повышение объёмов способствует увеличению длительности загрузки приложения. Один из способов её сократить - это отложить загрузку ресурсов, которые не являются критически важными для приложения. Например, вы посещаете приложение интернет-магазина, которое состоит из списка товаров и корзины. Очевидно, что вам не нужны изображения товаров, которые сейчас находится за пределами экрана; очевидно так же, что вам не нужно грузить все данные о содержимом корзины до тех пор, пока пользователь не перешёл к ней.</p>"}},{"type":"prose","value":{"id":"стратегии","title":"Стратегии","isH3":false,"content":"<p>Ленивая загрузка (Lazy loading) может применяться к разным ресурсам и разными подходами.   </p>"}},{"type":"prose","value":{"id":"общий_подход","title":"    Общий подход","isH3":true,"content":"<p id=\"Code_splitting\"><strong>Разделение кода (code splitting)</strong><br>\n JavaScript, CSS и HTML могут быть разделены на небольшие части, называемые чанками (chunks). При первоначальной загрузке приложения вы можете отправлять не цельное приложение, а только необходимые части, например, только каркас разметки. Данные для заполнения этого каркаса могут быть подгружены позже, например, с помощью AJAX. Есть два вида разделения кода:</p>\n\n<ul>\n <li>Разделение по точкам входа (entrypoint)</li>\n <li>Динамическое (<a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/import\">dynamic import()</a>)</li>\n</ul>"}},{"type":"prose","value":{"id":"javascript","title":"    JavaScript","isH3":true,"content":"<p><strong>Указание типа \"module</strong>\"<br>\n Любой тег скрипта с <code>type=\"module\"</code> рассматривается как <a href=\"/en-US/docs/Web/JavaScript/Guide/Modules\">JavaScript module</a>, а его загрузка откладывается по умолчанию.</p>"}},{"type":"prose","value":{"id":"css","title":"    CSS","isH3":true,"content":"<p>По умолчанию CSS считается ресурсом, блокирующим рендеринг (<a href=\"/en-US/docs/Web/Performance/Critical_rendering_path\">render blocking</a>). Это означает, что браузер не будет отображать контент до тех пор, пока не будет построена объектная модель CSS (<a href=\"/en-US/docs/Web/API/CSS_Object_Model\">CSSOM</a>). Поэтому CSS-файл должен быть небольшим, чтобы он был доставлен так быстро, насколько это возможно. Рекомендуется использовать медиавыражения, для того чтобы вместо одного монолитного CSS-файла грузить специализированные.</p>\n\n<pre class=\"notranslate\">&lt;link href=\"style.css\"    rel=\"stylesheet\" media=\"all\"&gt;\n&lt;link href=\"portrait.css\" rel=\"stylesheet\" media=\"orientation:portrait\"&gt;\n&lt;link href=\"print.css\"    rel=\"stylesheet\" media=\"print\"&gt;\n</pre>\n\n<p>Также в целях ускорения CSS можно применять оптимизации (<a href=\"/en-US/docs/Learn/Performance/CSS\">CSS optimizations</a>).</p>"}},{"type":"prose","value":{"id":"шрифты","title":"    Шрифты","isH3":true,"content":"<p>По умолчанию, загрузка шрифтов откладывается на тот момент, пока дерево рендера (render tree) не сформировано полностью. Это приводит к тому, что текст страницы может появиться не сразу.</p>\n\n<p>Вы можете переопределить такое поведение и загрузить шрифты заранее, используя <code>&lt;link rel=\"preload\"&gt;</code>, <a href=\"/en-US/docs/Web/CSS/@font-face/font-display\">CSS font-display свойство</a> или <a href=\"/en-US/docs/Web/API/CSS_Font_Loading_API\">Font Loading API</a>.<br>\n <br>\n Смотрите также: <a href=\"/en-US/docs/Web/HTML/Element/link\">Element Link</a></p>"}},{"type":"prose","value":{"id":"изображения","title":"    Изображения","isH3":true,"content":"<p>Очень часто веб-страницы содержат множество изображений, загрузка которых заметно нагружает канал передачи данных и увеличивает длительность загрузки. Подавляющая часть этих изображений находятся за видимой областью экрана и не являются необходимым (<a href=\"/en-US/docs/Web/Performance/Critical_rendering_path\">non-critical</a>), а для взаимодействия с пользователем требуют действия (например, прокрутки до них).</p>\n\n<p><strong>Атрибут Loading </strong><br>\n Атрибут <a href=\"/ru/docs/Web/HTML/Element/img#attr-loading\"><code>loading</code></a> элемента <a href=\"/ru/docs/Web/HTML/Element/img\"><code>&lt;img&gt;</code></a> (или  <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/HTML/Element/iframe\"><code>loading</code> <small>(en-US)</small></a> атрибут для <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code> <small>(en-US)</small></a>) могут быть использованы, чтобы указать браузеру на необходимость отложить загрузку изображений / iframe до тех пор, пока пользователь не доскроллит до них.</p>\n\n<pre class=\"notranslate\">&lt;img src=\"image.jpg\" loading=\"lazy\" alt=\"...\" /&gt;\n&lt;iframe src=\"video-player.html\" loading=\"lazy\"&gt;&lt;/iframe&gt;</pre>\n\n<p>Событие <code>load</code> запускается, когда все другие необходимые ресурсы были загружены. В это время, возможно (или даже наиболее вероятно), что изображения не будут загружены, даже если пользователь доскроллит до изображений и они будут в <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Glossary/Visual_Viewport\">visual viewport <small>(en-US)</small></a>.</p>\n\n<p>Вы можете определить, было ли загружено то или иное изображение, проверив Boolean значение <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLImageElement/complete\"><code>complete</code> <small>(en-US)</small></a>.</p>\n\n<p><strong>Полифил</strong><br>\n Для использованиях в браузерах, которые не поддерживают данную технологию, рекомендуется использовать полифил: <a href=\"https://github.com/mfranzke/loading-attribute-polyfill\" rel=\"noopener\" class=\"external\">loading-attribute-polyfill</a></p>\n\n<p><strong>Intersection Observer API</strong><br>\n <a href=\"/en-US/docs/Web/API/IntersectionObserver\">Intersection Observers</a> позволяют вам узнать, как наблюдаемый вами элемент входит или выходит из зоны видимости браузера (viewport).</p>\n\n<p><strong>Обработчики событий (Event handlers)</strong><br>\n Intersection Observer API - относительно молодая технология, которая может не поддерживаться некоторыми устаревшими браузерами.<strong> </strong>Если поддержка браузеров важна для вас, есть несколько способов получить её:</p>\n\n<ul>\n <li><a href=\"https://github.com/w3c/IntersectionObserver\" class=\"external\" rel=\" noopener\">polyfill intersection observer</a></li>\n <li>вы можете вычислять, находится ли элемент во viewport каждый раз при срабатывании событий scroll, resize или orientation change.</li>\n</ul>"}},{"type":"prose","value":{"id":"смотрите_также","title":"Смотрите также","isH3":false,"content":"<ul>\n <li><a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-blocking-css\" class=\"external\" rel=\" noopener\">Render blocking CSS</a></li>\n <li><a href=\"https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/webfont-optimization#optimizing_loading_and_rendering\" class=\"external\" rel=\" noopener\">Optimizing loading and rendering</a></li>\n <li><a href=\"https://developers.google.com/web/fundamentals/performance/lazy-loading-guidance/images-and-video\" class=\"external\" rel=\" noopener\">Lazy loading images and video</a></li>\n</ul>\n\n<dl>\n</dl>"}}],"toc":[{"text":"Обзор","id":"обзор"},{"text":"Стратегии","id":"стратегии"},{"text":"Смотрите также","id":"смотрите_также"}],"summary":"Lazy loading (ленивая загрузка) - это стратегия, направленная на определение ресурсов как неблокирующих (не критических) для того, чтобы отложить загрузку этих ресурсов на тот момент, когда они действительно необходимы. Так можно сократить длину критических этапов рендеринга, что приводит к уменьшению времени загрузки приложения.","popularity":0.0018,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Lazy loading","locale":"en-US","native":"English (US)"},{"title":"Le chargement différé","locale":"fr","native":"Français"},{"title":"Lazy loading","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ru/web/performance/lazy_loading","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/web/performance/lazy_loading/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Web","title":"Веб-технологии для разработчиков"},{"uri":"/ru/docs/Web/Performance","title":"Web Performance"},{"uri":"/ru/docs/Web/Performance/Lazy_loading","title":"Lazy loading"}],"pageTitle":"Lazy loading - Web Performance | MDN","noIndexing":false}}