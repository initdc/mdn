{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Оптимизация запуска","mdn_url":"/ru/docs/Web/Performance/Optimizing_startup_performance","locale":"ru","native":"Русский","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"summary\" id=\"sect1\">\n<p>Часто упускаемый из вида аспект разработки приложений - это скорость запуска приложения. Даже если вы прикладываете много усилий к оптимизации работы приложений, именно этот этап может быть пропущен. Как долго запускается ваше приложение? Создаётся ли впечатление, что устройство зависает, пока приложение запускается? Все эти симптомы заставляют пользователя считать, что приложение сломано или что-то идёт не так. Всегда будет не лишним убедиться, что ваше приложение запускается плавно. В этой статье мы поделимся некоторыми подсказками, которые помогут вам оптимизировать запуск приложения, вне зависимости от того, пишете ли вы его с нуля или работаете над уже существующим.</p>\n</div>"}},{"type":"prose","value":{"id":"приятный_запуск","title":"Приятный запуск","isH3":false,"content":"<p>Не имеет значения, какую платформу вы используете, всегда будет правильным обеспечить как можно более быструю загрузку приложения. Так как это наиболее общая проблема, мы не будем заострять на ней внимание здесь. Однако, мы обратим внимание на наибольшую проблему Web-приложений: синхронная загрузка ресурсов. Решением этой проблемы был бы максимальный переход на асинхронную загрузку ресурсов. Это означает, что инициализирующий код не должен запускаться в одном единственном обработчике событий в главном потоке процесса.</p>\n\n<p>Вместо этого, вы можете разбить ваш код так, чтобы часть его обрабатывалась в <a href=\"/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\" title=\"/en-US/docs/DOM/Using_web_workers\">Web worker</a>, что выделит его в отдельные фоновые неблокирующие треды (например, запросы данных и их обработка). Затем, все, что должно быть выполнено в основном потоке (например, пользовательские события или рендеринг интерфейса) должно быть разбито на небольшие кусочки так, чтобы обработчик браузера выполнял небольшие куски кода итеративно, а не за один подход. Это позволит вашему приложению выглядеть отзывчивым даже во время первоначальной загрузки.</p>\n\n<p>Почему так важно делать все это асинхронно? Помимо причин, перечисленных выше, подумайте о влиянии, которые оказывают зависшие приложения: пользователь не может отменить запуск, даже если он запустил приложение по ошибке. Если приложение запускается в браузере, пользователь даже не сможет закрыть вкладку. В конечном счёте это может привести даже к системным предупреждениям о \"медленных скриптах\" или \"исчерпании памяти\". А ведь было время, когда каждая вкладка не работала в отдельном процессе, как сейчас, а потому повисшая вкладка приводила к зависанию всего браузера! Вы должны не просто делать загрузку приложения \"мягкой\", но и давать пользователю знать о процессе загрузки: показывайте ему прогресс-бары или этапы, которые проходит приложение. Это позволит пользователю убедиться, что приложение не зависло.</p>"}},{"type":"prose","value":{"id":"было_бы_желание...","title":"Было бы желание...","isH3":true,"content":"<p>Если вы начинаете ваш проект с нуля, обычно очень легко начать писать код \"правильно\", делая все изначально асинхронным. Все вычисления при запуске должны выполняться в фоновых потоках, в то время как основной поток должен держаться максимально очищенным от лишних функций. Включайте индикатор прогресса для того, чтобы пользователь знал, что сейчас происходит и не думал, что приложение сломано. В теории, если вы только начинаете разработку приложения - это все должно быть очень просто.</p>\n\n<p>С другой стороны, потребуются некоторые ухищрения, если вы пытаетесь портировать существующее десктопное приложение в Web или привыкли писать такие. Десктопные приложения обычно не нуждаются в написании кода в асинхронной манере, потому что операционная система берёт заботу об этом на себя. В исходниках такого приложения может быть лишь один поток обработки кода, но даже он может быть легко разбит на асинхронные этапы (запуском каждой новой итерации потока по отдельности). В таких приложениях запуск часто представляет собой последовательную монолитную процедуру, которая время от времени обращается к метрикам прогресса и обновляет их.</p>\n\n<p>И хотя вы можете использовать <a href=\"/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\" title=\"/en-US/docs/DOM/Using_web_workers\">Web workers</a>, чтобы обработать очень большие и \"тяжёлые\" скрипты асинхронно, вы должны учитывать некоторые ограничения. Web Worker-ы не имеют доступа к некоторым API браузера: DOM, <a href=\"/en-US/docs/Web/API/WebGL_API\" title=\"/en-US/docs/WebGL\">WebGL</a> или audio, они не могут посылать синхронные сообщения в основной поток, вы даже не можете проксировать некоторые из этих API в основной поток. Это всё означает, что вы можете поместить в Web Worker-ы только \"чистые функции\", но вам всё равно придётся вычислять огромную часть данных в основном потоке. Поэтому очень полезно разрабатывать систему так, чтобы в ней было как можно больше чистых функций - так их будет проще делегировать в последствии.</p>\n\n<p>Тем не менее, даже код в основном потоке можно сделать асинхронным, приложив лишь небольшие усилия.</p>"}},{"type":"prose","value":{"id":"переход_к_асинхронности","title":"Переход к асинхронности","isH3":false,"content":"<p>Есть несколько предложений, как сделать процесс загрузки асинхронным:</p>\n\n<ul>\n <li>Используйте атрибуты <a href=\"/ru/docs/Web/HTML/Global_attributes#attr-defer\"><code>defer</code></a> или <a href=\"/ru/docs/Web/HTML/Global_attributes#attr-async\"><code>async</code></a> на тегах script. Это позволит HTML парсерам продолжать парсинг документа, вместо того, чтобы переключаться на скачивание / парсинг / выполнение скриптов.</li>\n <li>Если вам нужно декодировать какой-то ресурс (например, JPEG для превращения его в текстуру в WebGL), делайте это в Worker-ах.</li>\n <li>Когда вы имеете дело с данными, поддерживаемыми браузером, используйте встроенные декодеры, а не пишите свои. Это касается, например, декодинга изображений / видео. Производители браузеров стараются применять лучшие техники, наиболее совместимые с их кодовой базой. Кроме того, многие браузеры поддерживают параллельное выполнение таких обработчиков.</li>\n <li>Любая обработка данных, которая может быть сделана параллельно <strong>должна </strong>быть сделана параллельно.</li>\n <li>Не подключайте скрипты и стили, которые не критичны для запуска приложения, в инициализирующий HTML. Загружайте их только тогда, когда это необходимо.</li>\n <li>Сокращайте размеры ваших JavaScript-файлов. Попробуйте отправлять минифицированный код и используйте сжатие, например Gzip или Brotli.</li>\n <li>Используйте дополнительные атрибуты (например preconnect или preload) всегда, когда есть возможность сказать браузеру, что является критическим для вашей системы.</li>\n</ul>\n\n<p>Чем больше вещей вы можете сделать асинхронно, тем большие преимущества многоядерных процессоров вы сможете задействовать.</p>"}},{"type":"prose","value":{"id":"проблемы_портирования","title":"Проблемы портирования","isH3":true,"content":"<p>Когда первоначальная загрузка завершена и начинается обработка приложения в основном потоке, вполне возможно, что ваше приложение обязано быть однопоточным, особенно если это портированная версия. Очень важно попытаться помочь процессу запуска приложения, порефакторив код, сделав его композитным, состоящим из маленьких кусочков, каждый из которых может быть обработан последовательно основным потоком. В этом случае, в промежутке между выполнением этих кусочков кода браузер сможет выделить время на обработку ввода (например, клик) или на обработку микро-задач.</p>\n\n<p>В случае, если вы портируете ваше приложение, вы наверняка знаете о <a href=\"/en-US/docs/Mozilla/Projects/Emscripten\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">Emscripten. </a>Это решение предоставляет API, которое поможет с подобным рефакторингом. Например, вы можете использовать <code>emscripten_push_main_loop_blocker()</code>, чтобы определить функцию, как выполняемую после того, как основной поток разрешит продолжить работу. Создавая такие функции, создавая очередь, которая должна выполниться в определённом порядке, вы можете с лёгкостью разгрузить основной поток.</p>\n\n<p>Конечно, все это не отменяет необходимости рефакторинга кода так, чтобы он работал лучше и это займёт время. Но для старта этого может оказаться достаточно.</p>"}},{"type":"prose","value":{"id":"насколько_далеко_я_должен_зайти","title":"Насколько далеко я должен зайти?","isH3":true,"content":"<p>Стоит держать в голове, что браузер начинает беспокоиться о вашем скрипте в том случае, если он блокирует основной поток больше, чем на 10 секунд. В идеале, вы не должны блокировать работу страницы так долго. И пока вы держите показатели загрузки приложения ниже этих значение - все должно быть ок. Но не забывайте, что если кто-то имеет не такой мощный компьютер или мобильное устройство, как у вас, то код, выполняющийся у вас за 2 секунды, у этого пользователя может занять 10 секунд. Для этого полезно использовать CPU Throttling, который предоставляется средствами разработчиков в некоторых браузерах.</p>"}},{"type":"prose","value":{"id":"другие_предложения","title":"Другие предложения","isH3":false,"content":"<p>Существуют другие вещи, которые могут влиять на скорость запуска приложения, и одна лишь асинхронность не спасёт от всего. Вот несколько из них:</p>\n\n<dl>\n <dt id=\"время_загрузки\">Время загрузки</dt>\n <dd>Держите в голове, как много времени занимает загрузка данных вашего приложения. Если приложение действительно большое, популярное и должно обновлять данные часто, вы должны использовать как можно более быстрый хостинг (или даже несколько хостингов для разных регионов). Так же не забывайте сжимать данные.</dd>\n <dt id=\"влияние_gpu\">Влияние GPU</dt>\n <dd>Компиляция шейдеров или загрузка текстур в GPU может занять время, особенно для по-настоящему сложных WebGL приложений. Давайте пользователю знать о том, что загрузка или обработка данных продолжается фоном, чтобы он знал, когда лучше переходить в загруженные части приложения.</dd>\n <dt id=\"размер_данных\">Размер данных</dt>\n <dd>Делайте всё, чтобы избежать лишних данных. Чем меньше лишних данных запрашивается каждый раз, тем работает приложение. Используйте нормализацию данных и кеширование.</dd>\n <dt id=\"субъективные_факторы\">Субъективные факторы</dt>\n <dd>Любая вещь, которую вы предлагаете пользователю во время запуска приложения и с которой он может взаимодействовать, заставляет время течь быстрее. Это забавно, но прогресс-бар, который показывается 3 секунды ощущается более быстрым, чем пустая страница в течение 1 секунды. Добавляйте подсказки к вашему приложению, рассказывайте интересные факты или просто показывайте что-то красивое - это уже улучшит восприятие.</dd>\n</dl>"}},{"type":"prose","value":{"id":"смотрите_также","title":"Смотрите также","isH3":false,"content":"<ul>\n <li><a href=\"/en-US/docs/Web/Progressive_web_apps\" title=\"/en-US/docs/Apps\">Apps</a></li>\n <li><a href=\"/en-US/docs/Games\" title=\"/en-US/docs/Games\">Games</a></li>\n</ul>\n\n<div class=\"originaldocinfo\" id=\"sect2\">\n<h2 id=\"original_document_information\">Информация об оригинальном документе:</h2>\n\n<ul>\n <li>Автор: Alon Zakai</li>\n <li>Исходник: <a href=\"https://mozakai.blogspot.com/2012/07/bananabread-or-any-compiled-codebase.html\" class=\"external\" rel=\" noopener\">BananaBread (or any compiled codebase) Startup Experience</a></li>\n</ul>\n</div>"}}],"toc":[{"text":"Приятный запуск","id":"приятный_запуск"},{"text":"Переход к асинхронности","id":"переход_к_асинхронности"},{"text":"Другие предложения","id":"другие_предложения"},{"text":"Смотрите также","id":"смотрите_также"}],"summary":"\nЧасто упускаемый из вида аспект разработки приложений - это скорость запуска приложения. Даже если вы прикладываете много усилий к оптимизации работы приложений, именно этот этап может быть пропущен. Как долго запускается ваше приложение? Создаётся ли впечатление, что устройство зависает, пока приложение запускается? Все эти симптомы заставляют пользователя считать, что приложение сломано или что-то идёт не так. Всегда будет не лишним убедиться, что ваше приложение запускается плавно. В этой статье мы поделимся некоторыми подсказками, которые помогут вам оптимизировать запуск приложения, вне зависимости от того, пишете ли вы его с нуля или работаете над уже существующим.\n","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Optimizing startup performance","locale":"en-US","native":"English (US)"},{"title":"Mejorando el Rendimiento Inicial","locale":"es","native":"Español"},{"title":"优化启动性能","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ru/web/performance/optimizing_startup_performance","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/web/performance/optimizing_startup_performance/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Web","title":"Веб-технологии для разработчиков"},{"uri":"/ru/docs/Web/Performance","title":"Web Performance"},{"uri":"/ru/docs/Web/Performance/Optimizing_startup_performance","title":"Оптимизация запуска"}],"pageTitle":"Оптимизация запуска - Web Performance | MDN","noIndexing":false}}