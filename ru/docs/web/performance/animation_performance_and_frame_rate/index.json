{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Производительность анимации и частота кадров","mdn_url":"/ru/docs/Web/Performance/Animation_performance_and_frame_rate","locale":"ru","native":"Русский","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Анимация в Вебе может быть сделана с помощью <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SVGAnimationElement\"><code>SVG</code> <small>(en-US)</small></a>, <a href=\"/ru/docs/Web/API/window/requestAnimationFrame\" title=\"JavaScript\"><code>JavaScript</code></a>, включая <a href=\"/ru/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a> и <a href=\"/ru/docs/Web/API/WebGL_API\" title=\"WebGL\"><code>WebGL</code></a>, CSS <a href=\"/ru/docs/Web/CSS/animation\"><code>animation</code></a>, <a href=\"/ru/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a>, анимированных GIF и даже с помощью анимированных PNG и других типов изображений. Производительность CSS-анимации может отличаться от одного CSS-свойства к другому, а попытка анимировать некоторые \"дорогие\" CSS-свойства может привести к зависаниям (<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Glossary/Jank\">jank <small>(en-US)</small></a>), даже несмотря на то, что браузер борется за то, чтобы смягчить частоту смены кадров <a class=\"page-not-created\" title=\"Документация об этом ещё не написана; пожалуйста, поспособствуйте её написанию!\">frame rate</a>.</p>\n\n<p>Для анимированных медиа, таких как видео и GIF, основная проблема производительности - это размер файлов. Скачивание больших по объёму файлов не может не повлиять на производительность системы или на то, как эту систему воспринимает пользователь. </p>\n\n<p>Анимации, основанные на коде, будь то CSS, SVG, &lt;canvas&gt;, webGL или другие JavaScript анимации, могут нести проблемы производительности сами в себе, даже если файлы этого кода скачиваются быстро. Такие анимации могут потреблять всё время CPU и приводить к зависаниям.</p>\n\n<p>Несомненно, производительность каждой конкретной системы - очень чувствительная тема. Улучшив клиентскую производительность, вы сможете не только ускорить работу приложения, но даже затронете физический аспект - сможете сэкономить заряд батареи мобильных устройств и / или понизите температуру устройства. Поэтому очень важно владеть инструментами для измерения производительности. Они помогут вам понять всю работу, которую проводит браузер, пока рендерит ваше приложение и поможет избежать и диагностировать проблемы, когда они происходят.<br>\n <br>\n Пользователи ожидают, что взаимодействие с интерфейсом будет плавным, а интерфейс будет отзывчивым. Анимация помогает улучшить восприятие приложения, сделав его быстрым и отзывчивым; но анимация так же может замедлить его и привести к зависаниям, если она сделана неумело. Отзывчивые интерфейсы должны иметь частоту смены кадров, равную <a href=\"https://firefox-source-docs.mozilla.org/devtools-user/performance/frame_rate/index.html\" class=\"external\" rel=\" noopener\">60 кадров в секунду (fps)</a>. В то время, как не всегда возможно поддерживать такую частоту, очень важно поддерживать быструю и устойчивую смену кадров для анимации. </p>\n\n<p>Мы рассмотрим, как можно использовать инструменты браузера для инспектирования частоты смены кадров. Так же, мы обсудим некоторые подсказки, как организовать и поддерживать быструю и стабильную смену кадров.</p>\n\n<p>Графики <a href=\"https://firefox-source-docs.mozilla.org/devtools-user/performance/frame_rate/index.html\" class=\"external\" rel=\" noopener\">frame rate</a> и <a href=\"https://firefox-source-docs.mozilla.org/devtools-user/performance/waterfall/index.html\" class=\"external\" rel=\" noopener\">waterfall</a> из встроенных инструментов браузера дают информацию о том, как браузер выполняет работу по анимации. Используя эти инструменты, вы можете измерить fps приложения и диагностировать узкие места, в которых fps уменьшается.</p>\n\n<p>С помощью <a href=\"/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations\">CSS-анимации</a> вы указываете <a href=\"/en-US/docs/Web/CSS/@keyframes\">ключевые кадры (keyframes)</a>, каждый из которых использует определённые CSS-свойства, чтобы определить внешний вид элемента в конкретный (ключевой) момент анимации. Браузер создаёт анимации с помощью плавных переходов от одного ключевого кадра к следующему.</p>\n\n<p>Если сравнивать анимацию с помощью JavaScript и CSS, вы увидите, что CSS-анимации проще создать. Более того, CSS-анимации гарантируют лучшую производительность, так как они автоматически делегируют некоторые задачи браузеру. Например, в случае CSS браузер сам решает, когда нужно отрендерить кадр, а когда пропустить кадр, если это необходимо. </p>\n\n<p><br>\n Однако, стоимость изменения разных CSS-свойств варьируется. Общепринято, что 60 кадров в секунду - это достаточная частота, чтобы анимация выглядела мягкой и плавной. Несложный подсчёт говорит, что при частоте 60 кадров в секунду, браузер имеет лишь 16.7 миллисекунд, чтобы выполнить все скрипты, пересчитать стили, скомпоновать слои и отрисовать новый кадр. Отсюда следует, что медленные скрипты и анимация дорогих CSS-свойств может может привести к <a href=\"/en-US/docs/Glossary/Jank\">зависаниям</a>, так как браузер все ещё будет пытаться вычислить все 60 кадров.</p>\n\n<p>Стоит заметить, что 60 кадров в секунду - это стандартная частота обновления экрана. Существуют экраны с гораздо большим FPS. Например, экраны игровых ноутбуков или iPad Pro 2018 имеют частоту смены кадров, равную 120 fps и выше. Для таких устройств производители браузеров ограничивают частоту 60-ю кадрами в секунду, но с помощью некоторых опций этот лимит можно убрать. И в этом случае, на формирование каждого кадра устройство будет отводить лишь 8.6 миллисекунд.</p>"}},{"type":"prose","value":{"id":"этапы_рендеринга","title":"Этапы рендеринга","isH3":false,"content":"<p>Процесс, используемый браузером для отображения анимации CSS-свойств, может быть представлен как последовательность этапов из следующего изображения:</p>\n\n<p><img alt=\"\" src=\"https://mdn.mozillademos.org/files/10821/css-rendering-waterfall.png\" style=\"display: block; margin-left: auto; margin-right: auto;\" loading=\"lazy\"></p>\n\n<ol>\n <li><strong>Recalculate Style</strong>: когда любое CSS-свойство для элемента изменяется, браузер должен заново вычислить результирующий набор свойств.</li>\n <li><strong>Layout</strong>: затем браузер использует вычисленные стили для того, чтобы понять позицию и геометрию элементов - как изменённого, так и рядом лежащих. Эта операция называется \"layout\", но иногда её так же называют \"reflow\".</li>\n <li><strong>Paint</strong>: наконец, браузер должен перерисовать элементы на экране. Но этот этап не обязательно должен быть простым, как на изображении. Страница может быть разделена на слои, каждый из которых перерисовывается независимо, а только после этого они комбинируются в процессе, который называется композицией \"Composition\".</li>\n</ol>\n\n<p>Процессы, которые браузер использует для отрисовывания изменений на элементе &lt;canvas&gt; отличаются. В случае &lt;canvas&gt;, Layout не происходит. Скорее, страница будет перерисована с помощью JavaScript canvas API. </p>\n\n<p>В любом случае, вычисление каждого следующего кадра должно происходить достаточно быстро, чтобы успеть попасть в частоту обновления экрана, чтобы не было зависаний.</p>"}},{"type":"prose","value":{"id":"стоимость_css_свойств","title":"Стоимость CSS-свойств","isH3":false,"content":"<p>На всех этапах рендеринга изменение некоторых свойств является более затратным, других - менее:</p>\n\n<table class=\"fullwidth-table standard-table\">\n <thead>\n  <tr>\n   <th scope=\"col\">Тип свойства</th>\n   <th scope=\"col\">Стоимость</th>\n   <th scope=\"col\">Примеры</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td>Свойства, затрагивающие геометрию или позицию элемента, запускают <strong>весь</strong> процесс заново: новое вычисление стилей, layout и перерисовку.</td>\n   <td>\n     <img alt=\"\" src=\"/en-US/docs/Web/Performance/Animation_performance_and_frame_rate/recalculate-style.png\" width=\"246\" height=\"52\" loading=\"lazy\">\n     <img alt=\"\" src=\"/en-US/docs/Web/Performance/Animation_performance_and_frame_rate/layout.png\" width=\"244\" height=\"52\" loading=\"lazy\">\n     <img alt=\"\" src=\"/en-US/docs/Web/Performance/Animation_performance_and_frame_rate/paint.png\" width=\"246\" height=\"52\" loading=\"lazy\">\n    </td>\n   <td>\n    <p><code><a href=\"/en-US/docs/Web/CSS/left\">left</a></code><br>\n     <code><a href=\"/en-US/docs/Web/CSS/max-width\">max-width</a></code><br>\n     <code><a href=\"/en-US/docs/Web/CSS/border-width\">border-width</a></code><br>\n     <code><a href=\"/en-US/docs/Web/CSS/margin-left\">margin-left</a></code><br>\n     <code><a href=\"/en-US/docs/Web/CSS/font-size\">font-size</a></code></p>\n   </td>\n  </tr>\n  <tr>\n   <td>\n    <p>Свойства, не затрагивающие геометрию и позиционирование элементов, но не лежащие в отдельном слое, запускают только вычисление стилей и перерисовку, но не Layout.</p>\n   </td>\n   <td>\n     <img alt=\"\" src=\"/en-US/docs/Web/Performance/Animation_performance_and_frame_rate/recalculate-style.png\" width=\"246\" height=\"52\" loading=\"lazy\">\n     <img alt=\"\" src=\"/en-US/docs/Web/Performance/Animation_performance_and_frame_rate/layout-faint.png\" width=\"246\" height=\"52\" loading=\"lazy\">\n     <img alt=\"\" src=\"/en-US/docs/Web/Performance/Animation_performance_and_frame_rate/paint.png\" width=\"246\" height=\"52\" loading=\"lazy\">\n    </td>\n   <td>\n    <p><code><a href=\"/en-US/docs/Web/CSS/color\">color</a></code></p>\n   </td>\n  </tr>\n  <tr>\n   <td>\n    <p>Свойства, которые рендерятся в отдельном слое не запускают даже repaint, так как результат обновления обрабатывается на этапе композиции.</p>\n   </td>\n   <td>\n     <img alt=\"\" src=\"/en-US/docs/Web/Performance/Animation_performance_and_frame_rate/recalculate-style.png\" width=\"246\" height=\"52\" loading=\"lazy\">\n     <img alt=\"\" src=\"/en-US/docs/Web/Performance/Animation_performance_and_frame_rate/layout-faint.png\" width=\"246\" height=\"52\" loading=\"lazy\">\n     <img alt=\"\" src=\"/en-US/docs/Web/Performance/Animation_performance_and_frame_rate/paint-faint.png\" width=\"246\" height=\"52\" loading=\"lazy\">\n   </td>\n   <td><code><a href=\"/en-US/docs/Web/CSS/transform\">transform</a></code><br>\n    <code><a href=\"/en-US/docs/Web/CSS/opacity\">opacity</a></code></td>\n  </tr>\n </tbody>\n</table>\n\n<div class=\"note notecard\" id=\"sect1\">\n<p>На Веб-сайте <a href=\"https://csstriggers.com/\" class=\"external\" rel=\" noopener\">CSS Triggers</a> хорошо показано, какие CSS-свойства вызывают те или иные этапы обновления в разных браузерах.</p>\n</div>"}},{"type":"prose","value":{"id":"пример_margin_против_transform","title":"Пример: margin против transform","isH3":false,"content":"<p>В этом разделе мы увидим, как инструмент <a href=\"https://firefox-source-docs.mozilla.org/devtools-user/performance/waterfall/index.html\" class=\"external\" rel=\" noopener\">Waterfall</a> может указать на разницу между анимацией <code><a href=\"/en-US/docs/Web/CSS/margin\">margin</a></code> и <code><a href=\"/en-US/docs/Web/CSS/transform\">transform</a></code>.</p>\n\n<p>Задумка этого сценария не в том, чтобы убедить вас, что анимация через <code>margin</code> - это всегда плохая идея. Сценарий нужен, чтобы продемонстрировать, как инструменты могут помочь вам понять работу браузера и как вы можете применить эти знания для оптимизации.</p>\n\n<p>Если вы хотите самостоятельно разобраться с этим примером, вы можете найти демо <a href=\"https://mdn.github.io/performance-scenarios/animation-transform-margin/index.html\" class=\"external\" rel=\" noopener\">здесь</a>. Демо выглядит так:</p>\n\n<p><img alt=\"\" src=\"https://mdn.mozillademos.org/files/11029/css-animations-demo.png\" style=\"display: block; margin-left: auto; margin-right: auto;\" loading=\"lazy\">На экране всего два контрола: кнопка \"start / stop\" для запуска и остановки анимации и радио-кнопки для выбора свойства, с помощью которого происходит анимация:  <code>margin</code>, или <code>transform</code>.</p>\n\n<p>Так же на странице есть некоторое количество элементов со свойствами  <code><a href=\"/en-US/docs/Web/CSS/gradient/linear-gradient\">linear-gradient</a></code> и <code><a href=\"/en-US/docs/Web/CSS/box-shadow\">box-shadow</a></code> Мы обращаем внимание именно на эти два свойства, так как они относительно дорогие.</p>\n\n<p>Так же существует видео-версия анализа и оптимизации этой страницы.</p>\n\n<p><iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/Tvu6_j8Qzfk\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" loading=\"lazy\"></iframe></p>"}},{"type":"prose","value":{"id":"анимация_свойства_margin","title":"Анимация свойства margin","isH3":true,"content":"<p>Оставим включённой опцию \"Use margin\" и начнём анимацию. В это же время откроем \"Performance tool\" и нажмём кнопку \"записать\" (make a recording). Нам понадобится лишь пара секунд записи.</p>\n\n<p>Откройте первую запись. Точное содержимое, которое вы увидите, зависит от вашего устройства, системной нагрузки и окружения, но, в целом это должно выглядеть так:</p>\n\n<p><img alt=\"\" src=\"https://mdn.mozillademos.org/files/10853/margin-recording.png\" style=\"display: block; margin-left: auto; margin-right: auto;\" loading=\"lazy\"></p>\n\n<p>На экране показаны три отдельных секции: (a) обзор этапов рендеринга (Waterfall), (b) частота кадров, и (c) детали на временной шкалы.</p>\n\n<h4 id=\"обзор_этапов_рендеринга_на_временной_шкале_waterfall\">Обзор этапов рендеринга на временной шкале (Waterfall)</h4>\n\n<p><img alt=\"\" src=\"https://mdn.mozillademos.org/files/10857/margin-timeline-overview.png\" style=\"display: block; margin-left: auto; margin-right: auto;\" loading=\"lazy\"></p>\n\n<p>Сейчас здесь показаны ужатые этапы рендеринга <a href=\"https://firefox-source-docs.mozilla.org/devtools-user/performance/waterfall/index.html\" class=\"external\" rel=\" noopener\">Waterfall</a>. Как видите, большая часть графика заполнена зелёным цветом - это говорит нам о том, что <a href=\"https://firefox-source-docs.mozilla.org/devtools-user/performance/waterfall/index.html#timeline-color-coding\" class=\"external\" rel=\" noopener\">мы тратим много ресурсов на отрисовывание</a>.</p>\n\n<h4 id=\"частота_кадров_frame_rate\">Частота кадров (Frame Rate)</h4>\n\n<p><img alt=\"\" src=\"https://mdn.mozillademos.org/files/10859/margin-frame-rate.png\" style=\"display: block; margin-left: auto; margin-right: auto;\" loading=\"lazy\"></p>\n\n<p>Эта секция показывает <a href=\"https://firefox-source-docs.mozilla.org/devtools-user/performance/frame_rate/index.html\" class=\"external\" rel=\" noopener\">частоту кадров</a>. Средняя частота на примере - 46.67fps. Это ниже, чем желаемые 60fps. Однако, ещё хуже то, что частота кадров нестабильна - есть этапы, где частота кадров снижается до 20 и даже до 10 fps. Маловероятно, что вы увидите здесь плавную анимацию, особенно если добавите какое-то взаимодействие с пользователем.</p>\n\n<h4 id=\"этапы_рендеринга_в_деталях_waterfall\">Этапы рендеринга в деталях (Waterfall)</h4>\n\n<p>Оставшаяся часть записей показа в секции \"Waterfall view\". Если вы пролистаете этот список, вы увидите что-то наподобие этого:</p>\n\n<p><img alt=\"\" src=\"https://mdn.mozillademos.org/files/10861/margin-timeline.png\" style=\"display: block; margin-left: auto; margin-right: auto;\" loading=\"lazy\"></p>\n\n<p>Это шаги рендеринга (<a href=\"https://firefox-source-docs.mozilla.org/devtools-user/performance/scenarios/animating_css_properties/index.html#the_css_rendering_waterfall\" class=\"external\" rel=\" noopener\">rendering waterfall</a>). Для каждого кадра анимации мы вычисляем стили для каждого элемента, потом вычисляем Layout, а затем перерисовываем все элементы.</p>\n\n<p>Из таблицы видно, что особый урон производительности наносит перерисовка Paint (зелёные полосы). Например, выделенный этап Paint занял 13.11мс. Учитывая, что весь бюджет рендеринга - 16.7мс, неудивительно, что мы увидели падения fps.</p>\n\n<p>Вы можете поэкспериментировать с некоторыми свойствами. Например, попробуйте убрать box-shadow с помощью инспектора страницы (<a href=\"https://firefox-source-docs.mozilla.org/devtools-user/page_inspector/how_to/examine_and_edit_css/index.html\" class=\"external\" rel=\" noopener\">Page / Element Inspector</a>), замерьте производительность и посмотрите, как это отразилось на производительности. Затраты на Paint уменьшатся значительно. Но они все ещё есть. Мы ещё вернёмся к этому вопросу позже, когда будем изучать использование <code><a href=\"/en-US/docs/Web/CSS/transform\">transform</a></code> вместо <code><a href=\"/en-US/docs/Web/CSS/margin\">margin</a></code>. Вы увидите, что от затрат на этот этап можно избавиться полностью.</p>"}},{"type":"prose","value":{"id":"анимация_свойства_transform","title":"Анимация свойства transform","isH3":true,"content":"<p>Теперь, переключитесь на \"Use transform\" и запишите новые данные. Это должно выглядеть примерно так:</p>\n\n<p><img alt=\"\" src=\"https://mdn.mozillademos.org/files/10863/transform-recording.png\" style=\"display: block; margin-left: auto; margin-right: auto;\" loading=\"lazy\"></p>\n\n<h4 id=\"обзор_этапов_рендеринга_на_временной_шкале_waterfall_2\">Обзор этапов рендеринга на временной шкале (Waterfall)</h4>\n\n<p><img alt=\"\" src=\"https://mdn.mozillademos.org/files/10869/transform-timeline-overview.png\" style=\"display: block; margin-left: auto; margin-right: auto;\" loading=\"lazy\"></p>\n\n<p>В сравнении с <a href=\"https://firefox-source-docs.mozilla.org/devtools-user/performance/scenarios/animating_css_properties/index.html#waterfall_overview\" class=\"external\" rel=\" noopener\">версией, которая использует margin</a>, мы видим намного меньше зелёного, но намного больше фиолетового цвета. Это говорит о том, что вместо paint мы теперь тратим ресурсы на этапы <a href=\"https://firefox-source-docs.mozilla.org/devtools-user/performance/waterfall/index.html#timeline-color-coding\" class=\"external\" rel=\" noopener\">layout или style recalculation</a>.</p>\n\n<h4 id=\"частота_кадров_frame_rate_2\">Частота кадров (Frame Rate)</h4>\n\n<p><img alt=\"\" src=\"https://mdn.mozillademos.org/files/10865/transform-frame-rate.png\" style=\"display: block; margin-left: auto; margin-right: auto;\" loading=\"lazy\"></p>\n\n<p>В сравнении с <a href=\"https://firefox-source-docs.mozilla.org/devtools-user/performance/scenarios/animating_css_properties/index.html#frame_rate\" class=\"external\" rel=\" noopener\">версией, которая использует margin</a>, показатели fps здесь выглядят достаточно хорошо. Средняя частота кадров близка к 60fps, а стабильность fps, за исключением падения fps в начале значительно выросла.</p>\n\n<h4 id=\"этапы_рендеринга_в_деталях_waterfall_2\">Этапы рендеринга в деталях (Waterfall)</h4>\n\n<p>В этой секции мы видим объяснения тому, что fps значительно улучшился. Мы больше не тратим время на layout и перерисовку элементов:</p>\n\n<p><img alt=\"\" src=\"https://mdn.mozillademos.org/files/10867/transform-timeline.png\" style=\"display: block; margin-left: auto; margin-right: auto;\" loading=\"lazy\"></p>\n\n<p>Здесь, используя <code>transform</code>, мы заметно улучшили производительность приложения. А инструменты разработчика помогли нам это сделать.</p>"}}],"toc":[{"text":"Этапы рендеринга","id":"этапы_рендеринга"},{"text":"Стоимость CSS-свойств","id":"стоимость_css_свойств"},{"text":"Пример: margin против transform","id":"пример_margin_против_transform"}],"summary":"Анимация в Вебе может быть сделана с помощью SVG (en-US), JavaScript, включая <canvas> и WebGL, CSS animation, <video>, анимированных GIF и даже с помощью анимированных PNG и других типов изображений. Производительность CSS-анимации может отличаться от одного CSS-свойства к другому, а попытка анимировать некоторые \"дорогие\" CSS-свойства может привести к зависаниям (jank (en-US)), даже несмотря на то, что браузер борется за то, чтобы смягчить частоту смены кадров frame rate.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Animation performance and frame rate","locale":"en-US","native":"English (US)"}],"source":{"folder":"ru/web/performance/animation_performance_and_frame_rate","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/web/performance/animation_performance_and_frame_rate/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Web","title":"Веб-технологии для разработчиков"},{"uri":"/ru/docs/Web/Performance","title":"Web Performance"},{"uri":"/ru/docs/Web/Performance/Animation_performance_and_frame_rate","title":"Производительность анимации и частота кадров"}],"pageTitle":"Производительность анимации и частота кадров - Web Performance | MDN","noIndexing":false}}