{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Прямая и обратная обработка XML","mdn_url":"/ru/docs/Web/Guide/Parsing_and_serializing_XML","locale":"ru","native":"Русский","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Иногда возникает необходимость в обработке <a href=\"/ru/docs/Glossary/XML\">XML</a> и в последующей конвертации в древо <a href=\"/ru/docs/Glossary/DOM\">DOM</a>. Или наоборот, необходимо перевести древо DOM в XML. В этой статье рассмотрим объекты платформы web для обработки XML.</p>\n\n<dl>\n <dt id=\"xmlserializer\"><a href=\"/ru/docs/Web/API/XMLSerializer\"><code>XMLSerializer</code></a></dt>\n <dd>Сериализует деревья DOM, преобразуя их в строки, содержащие XML.</dd>\n <dt id=\"domparser\"><a href=\"/ru/docs/Web/API/DOMParser\"><code>DOMParser</code></a></dt>\n <dd>Создаёт дерево DOM, анализируя строку, содержащую XML, возвращая <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XMLDocument\"><code>XMLDocument</code> <small>(en-US)</small></a> или <a href=\"/ru/docs/Web/API/Document\"><code>Document</code></a> в зависимости от входящих данных.</dd>\n <dt id=\"xmlhttprequest\"><a href=\"/ru/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a></dt>\n <dd>Загружает контент из URL-адреса; Содержимое XML возвращается как объект XML <a href=\"/ru/docs/Web/API/Document\"><code>Document</code></a> с деревом DOM, построенным из самого XML.</dd>\n <dt id=\"xpath\"><a href=\"/en-US/docs/Web/XPath\">XPath</a></dt>\n <dd>Технология создания строк, содержащих адреса для определённых частей документа XML, и поиска узлов XML на основе этих адресов.</dd>\n</dl>"}},{"type":"prose","value":{"id":"создание_xml-документа","title":"Создание XML-документа","isH3":false,"content":"<p>Использование одного из следующих подходов для создания XML-документа (который является экземпляром <a href=\"/ru/docs/Web/API/Document\"><code>Document</code></a>.</p>"}},{"type":"prose","value":{"id":"parsing_строк_в_дерево_dom","title":"Parsing строк в дерево DOM","isH3":true,"content":"<p>В этом примере фрагмент XML в строке преобразуется в дерево DOM с помощью <a href=\"/ru/docs/Web/API/DOMParser\"><code>DOMParser</code></a>:</p>\n\n<div style=\"overflow: hidden;\" id=\"sect1\">\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> sMyString <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;a id=\"a\"&gt;&lt;b id=\"b\"&gt;hey!&lt;/b&gt;&lt;/a&gt;'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> oParser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DOMParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> oDOM <span class=\"token operator\">=</span> oParser<span class=\"token punctuation\">.</span><span class=\"token function\">parseFromString</span><span class=\"token punctuation\">(</span>sMyString<span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// print the name of the root element or error message</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>oDOM<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>nodeName <span class=\"token operator\">==</span> <span class=\"token string\">\"parsererror\"</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"error while parsing\"</span> <span class=\"token operator\">:</span> oDOM<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>nodeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</div>"}},{"type":"prose","value":{"id":"parsing_url-addressable_ресурсов_в_дерево_dom","title":"Parsing URL-addressable ресурсов в дерево DOM","isH3":true,"content":"<h4 id=\"использование_xmlhttprequest\">Использование XMLHttpRequest</h4>\n\n<p>Вот пример кода, который считывает и анализирует XML-файл с URL-адресом в дереве DOM:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">dump</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseXML<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>nodeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">dump</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error while getting XML.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"example.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span>responseType <span class=\"token operator\">=</span> <span class=\"token string\">\"document\"</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Значение, возвращаемое в поле <a href=\"/ru/docs/Web/API/XMLHttpRequest/responseXML\" title=\"responseXML\"><code>responseXML</code></a> объекта xhr, является <a href=\"/ru/docs/Web/API/Document\"><code>Document</code></a>, созданным путём синтаксического анализа XML.</p>\n\n<p>Если документ представляет собой <a href=\"/ru/docs/Glossary/HTML\">HTML</a>, приведённый выше код вернёт <a href=\"/ru/docs/Web/API/Document\"><code>Document</code></a>. Если документ XML, результирующий объект на самом деле является <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XMLDocument\"><code>XMLDocument</code> <small>(en-US)</small></a>. Эти два типа по существу одинаковы; разница в основном историческая, хотя дифференциация имеет также некоторые практические преимущества.</p>\n\n<div class=\"note notecard\" id=\"sect2\">\n<p>Примечание: на самом деле существует интерфейс <a href=\"/ru/docs/Web/API/HTMLDocument\"><code>HTMLDocument</code></a>, но это не обязательно независимый тип. В некоторых браузерах это так, а в других это просто псевдоним для интерфейса документа.</p>\n</div>"}},{"type":"prose","value":{"id":"сериализация_xml-документа","title":"Сериализация XML-документа","isH3":false,"content":"<p>Имея <a href=\"/ru/docs/Web/API/Document\"><code>Document</code></a>, вы можете сериализовать дерево DOM документа обратно в XML с помощью метода <a class=\"page-not-created\" title=\"Документация об этом ещё не написана; пожалуйста, поспособствуйте её написанию!\"><code>XMLSerializer.serializeToString ()</code></a>.</p>\n\n<p>Используйте следующие подходы для сериализации содержимого XML-документа, созданного в предыдущем разделе.</p>"}},{"type":"prose","value":{"id":"serializing_dom_trees_to_strings","title":"Serializing DOM trees to strings","isH3":true,"content":"<p>Сначала создайте дерево DOM, как описано в разделе Как создать дерево DOM. В качестве альтернативы используйте дерево DOM, полученное из <a href=\"/ru/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a>.</p>\n\n<p>Чтобы сериализовать документ дерева DOM в текст XML, вызовите <a class=\"page-not-created\" title=\"Документация об этом ещё не написана; пожалуйста, поспособствуйте её написанию!\"><code>XMLSerializer.serializeToString ()</code></a>:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> oSerializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> sXML <span class=\"token operator\">=</span> oSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">serializeToString</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>"}},{"type":"prose","value":{"id":"serializing_html_documents","title":"Serializing HTML documents","isH3":true,"content":"<p>Если у вас есть модель DOM в виде HTML-документа, вы можете сериализовать её с помощью serializeToString (), но есть более простой вариант: просто используйте свойство <a href=\"/ru/docs/Web/API/Element/innerHTML\"><code>Element.innerHTML</code></a> (если вам нужны только потомки указанный узел) или свойство <a href=\"/ru/docs/Web/API/Element/outerHTML\"><code>Element.outerHTML</code></a>, если вам нужен узел и все его потомки.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> docHTML <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>В результате docHTML представляет собой <a href=\"/ru/docs/conflicting/Web/JavaScript/Reference/Global_Objects/String_6fa58bba0570d663099f0ae7ae8883ab\"><code>DOMString</code></a>, содержащий HTML-код содержимого документа; то есть содержимое элемента <a href=\"/ru/docs/Web/HTML/Element/body\"><code>&lt;body&gt;</code></a>.</p>\n\n<p>Вы можете получить HTML, соответствующий &lt;body&gt; и его потомкам, с помощью этого кода:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> docHTML <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>outerHTML<span class=\"token punctuation\">;</span></code></pre></div>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n <li><a class=\"internal\" href=\"/en-US/XPath\" title=\"en/XPath\">XPath</a></li>\n <li><a href=\"/ru/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a></li>\n <li><a href=\"/ru/docs/Web/API/Document\"><code>Document</code></a>, <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XMLDocument\"><code>XMLDocument</code> <small>(en-US)</small></a>, and <a href=\"/ru/docs/Web/API/HTMLDocument\"><code>HTMLDocument</code></a></li>\n</ul>"}}],"toc":[{"text":"Создание XML-документа","id":"создание_xml-документа"},{"text":"Сериализация XML-документа","id":"сериализация_xml-документа"},{"text":"See also","id":"see_also"}],"summary":"Иногда возникает необходимость в обработке XML и в последующей конвертации в древо DOM. Или наоборот, необходимо перевести древо DOM в XML. В этой статье рассмотрим объекты платформы web для обработки XML.","popularity":0.0005,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Parsing and serializing XML","locale":"en-US","native":"English (US)"},{"title":"Convertir código a cadena de texto (serializing) y visceversa (parsing) a un  XML","locale":"es","native":"Español"},{"title":"XML のパースとシリアライズ","locale":"ja","native":"日本語"},{"title":"XML 파싱 및 직렬화","locale":"ko","native":"한국어"},{"title":"Parsing and serializing XML","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ru/web/guide/parsing_and_serializing_xml","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/web/guide/parsing_and_serializing_xml/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Web","title":"Веб-технологии для разработчиков"},{"uri":"/ru/docs/Web/Guide","title":"Руководства Web-разработчика"},{"uri":"/ru/docs/Web/Guide/Parsing_and_serializing_XML","title":"Прямая и обратная обработка XML"}],"pageTitle":"Прямая и обратная обработка XML - Руководства Web-разработчика | MDN","noIndexing":false}}