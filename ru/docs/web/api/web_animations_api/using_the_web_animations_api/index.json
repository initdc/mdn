{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Using the Web Animations API","mdn_url":"/ru/docs/Web/API/Web_Animations_API/Using_the_Web_Animations_API","locale":"ru","native":"Русский","sidebarHTML":"<ol><li><strong><a href=\"/ru/docs/Web/API/Web_Animations_API\">Web Animations API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Руководства</summary><ol><li><a href=\"/ru/docs/Web/API/Web_Animations_API/Using_the_Web_Animations_API\">Using the Web Animations API</a></li><li><a href=\"/ru/docs/Web/API/Web_Animations_API/Web_Animations_API_Concepts\">Web Animations API Concepts</a></li><li><a href=\"/ru/docs/Web/API/Web_Animations_API/Keyframe_Formats\">Keyframe Formats</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Интерфейсы</summary><ol><li><a href=\"/ru/docs/Web/API/Animation\"><code>Animation</code></a></li><li><a href=\"/ru/docs/Web/API/AnimationEffect\"><code>AnimationEffect</code></a></li><li><a href=\"/ru/docs/Web/API/AnimationEvent\"><code>AnimationEvent</code></a></li><li><a href=\"/ru/docs/Web/API/AnimationTimeline\"><code>AnimationTimeline</code></a></li><li><a href=\"/ru/docs/Web/API/AnimationPlaybackEvent\"><code>AnimationPlaybackEvent</code></a></li><li><a href=\"/ru/docs/Web/API/DocumentTimeline\"><code>DocumentTimeline</code></a></li><li><a href=\"/ru/docs/Web/API/KeyframeEffect\"><code>KeyframeEffect</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Свойства</summary><ol><li><a href=\"/ru/docs/Web/API/Document/timeline\"><code>Document.timeline</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Методы</summary><ol><li><a href=\"/ru/docs/Web/API/Document/getAnimations\"><code>Document.getAnimations()</code></a></li><li><a href=\"/ru/docs/Web/API/Element/animate\"><code>Element.animate()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p></p><p></p>\n\n<p class=\"summary\">Web Animations API позволяет нам создать анимацию и управлять её воспроизведением с помощью JavaScript. Эта статья будет правильным руководством для старта c весёлыми демками и уроками с Алисой в Стране Чудес.</p>"}},{"type":"prose","value":{"id":"встречайте_web_animations_api","title":"Встречайте Web Animations API","isH3":false,"content":"<p>В <a href=\"/en-US/docs/Web/API/Web_Animations_API\">Web Animations API</a> открывает анимацию на движке браузеров для разработчиков и манипуляции через (с помощью) JavaScript.<br>\n Этот API был разработан в основе реализации <a href=\"/en-US/docs/Web/CSS/CSS_Animations\">CSS Animations</a> и <a href=\"/en-US/docs/Web/CSS/CSS_Transitions\">CSS Transitions</a>, и оставлял свободу движений для будущих анимационных эффектов. Это один из самых эффективных способов анимации, поддерживаемой в Интернете, позволяя браузеру сделать свою собственную внутреннюю оптимизацию без хаков, принуждения, или <a href=\"/ru/docs/Web/API/window/requestAnimationFrame\"><code>Window.requestAnimationFrame()</code></a>.</p>\n\n<p>С Web Animations API, мы можем управлять интерактивной анимацией со стилями  JavaScript, отделяя представление от действия. Нам больше не нужно полагаться  на DOM-heavy методики написания CSS-свойств и обзорных классов для элементов контроля воспроизведения направления. И в отличии от чисто декларативного CSS, JavaScript также позволяет устанавливать динамические значения свойств и их продолжительность. Для создания пользовательских библиотек и интерактивной анимации Web Animations API может стать прекрасным инструментом в работе. Давайте посмотрим, что он может сделать!</p>"}},{"type":"prose","value":{"id":"поддержка_браузеров","title":"Поддержка Браузеров","isH3":false,"content":"<p>Основы и компоненты Web Animations API, описанные в этой статье доступны в Firefox 48+ и Chrome 36+. Webkit и Edge перешли на  API соответственно, но пока нет полной поддержки во всех браузерах, есть удобная служба проверки <a href=\"https://github.com/web-animations/web-animations-js\" class=\"external\" rel=\" noopener\">handy maintained polyfill</a> которая тестирует и добавляет её при необходимости.</p>"}},{"type":"prose","value":{"id":"написание_css_animations_вместе_с_web_animations_api","title":"Написание CSS Animations вместе с Web Animations API","isH3":false,"content":"<p>Самый простой способ в обучении Web Animations API это начать с чего начинало большинство веб-разработчиков: CSS Animations. В CSS Animations есть знакомый синтаксис, который хорошо раскрывает структуры демонстрационных примеров.</p>"}},{"type":"prose","value":{"id":"css_версия","title":"CSS версия","isH3":true,"content":"<p>Вот такая анимация написана в CSS, показывающая, как Алиса падает в кроличью нору, которая ведёт в страну чудес (см. полный код на<a href=\"https://codepen.io/rachelnabors/pen/QyOqqW\" class=\"external\" rel=\" noopener\"> Codepen</a>):</p>\n\n<p><a href=\"https://codepen.io/rachelnabors/pen/rxpmJL\" class=\"external\" rel=\" noopener\"><img alt=\"Alice Tumbling down the rabbit's hole.\" src=\"https://mdn.mozillademos.org/files/13843/tumbling-alice_optimized.gif\" style=\"display: block; margin-left: auto; margin-right: auto;\" loading=\"lazy\"></a></p>\n\n<p>Заметьте, что фон двигается, Алиса крутится и её цвет меняется при вращении. Мы собираемся сосредоточиться только на Алисе в этом уроке. Вот упрощённый код CSS, который управляет движением Алисы.</p>\n\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">#alice</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> aliceTumbling infinite 3s linear<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> aliceTumbling</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">0%</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #000<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">)</span> <span class=\"token function\">translate3D</span><span class=\"token punctuation\">(</span>-50%<span class=\"token punctuation\">,</span> -50%<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">30%</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #431236<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">100%</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #000<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>360deg<span class=\"token punctuation\">)</span> <span class=\"token function\">translate3D</span><span class=\"token punctuation\">(</span>-50%<span class=\"token punctuation\">,</span> -50%<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<p>Изменение цвета Алисы и её вращение в течение 3 секунд при постоянной (линейной) скорости и бесконечном цикле. В <a href=\"/en-US/docs/Web/CSS/@keyframes\">@keyframes</a> блоке мы видим, что 30%  из всего цикла (около 9 секунд), цвет Алисы меняется от чёрного до насыщенного бордового, а потом снова в чёрный к концу цикла.</p>"}},{"type":"prose","value":{"id":"движение_в_javascript","title":"Движение в JavaScript","isH3":true,"content":"<p>Теперь давайте попробуем создать такую же анимацию с Web Animations API.</p>\n\n<h4 id=\"представляя_кадры\">Представляя кадры</h4>\n\n<p>В первую очередь мы должны создать <a href=\"/en-US/docs/Web/API/Web_Animations_API/Keyframe_Formats\">Keyframe Object</a> соответствующего нашему CSS <a href=\"/en-US/docs/Web/CSS/@keyframes\">@keyframes</a> блоку:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> aliceTumbling <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span> <span class=\"token string\">'rotate(0) translate3D(-50%, -50%, 0)'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'#000'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'#431236'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">offset</span><span class=\"token operator\">:</span> <span class=\"token number\">0.333</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span> <span class=\"token string\">'rotate(360deg) translate3D(-50%, -50%, 0)'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'#000'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>Здесь мы используем массив, содержащий несколько объектов. Каждый объект представляет собой код от оригинального CSS. Однако, в отличие от CSS, Web Animations API не нужно назначать точные проценты по анимации для каждого открывающего кода. Он автоматически разделит анимацию на равные части в соответствии с количеством кодов, которые вы ему даёте. Это означает, что объект Keyframe с тремя кодами будет воспроизводить средний код 50% времени через каждый цикл анимации если не указано иное.</p>\n\n<p>Если мы хотим, чтобы определённый набор кода смещался относительного другого кода, мы можем указать смещение непосредственно на объекте который будет меняться, отделив значение запятой. В приведённом выше примере видно, чтобы цвет Алисы менялся на 30%, а не на 50% всего цикла, мы задаём смещение: 0,333.</p>\n\n<p>Там должно быть как минимум два кадра (представляющих начало и конец анимации). Если в вашем списке keyframe только одна запись, <a href=\"/ru/docs/Web/API/Element/animate\"><code>Element.animate()</code></a> то анимация выполняться не будет, вы получите ошибку NotSupportedError exception.</p>\n\n<p>И так повторим, код равномерно распределён по умолчанию, если не указано смещение. Удобно, не так ли?</p>\n\n<h4 id=\"представление_свойства_времени.\">Представление свойства времени.</h4>\n\n<p>Мы также должны создать объекту временные свойства (an <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/KeyframeEffect/KeyframeEffect\"><code>AnimationEffectTimingProperties</code> <small>(en-US)</small></a> object) соответствующие значению анимации Алисы:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> aliceTiming <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">duration</span><span class=\"token operator\">:</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">iterations</span><span class=\"token operator\">:</span> <span class=\"token number\">Infinity</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<p>Вы увидите здесь несколько отличий того, как соответствующие значения представлены в CSS:</p>\n\n<ul>\n <li>Во-первых, длительность в миллисекундах, в отличии от секунд - 3000, а не 3с. Как <a href=\"/ru/docs/Web/API/setTimeout\"><code>WindowTimers.setTimeout()</code></a> и <a href=\"/ru/docs/Web/API/window/requestAnimationFrame\"><code>Window.requestAnimationFrame()</code></a>, Web Animations API использует только миллисекунды.</li>\n <li>Во-вторых, что вы заметили, что он итерационный (повторяется), а не счётчик повторений.</li>\n</ul>\n\n<div class=\"note notecard\" id=\"sect1\">\n<p>Существует ряд небольших различий между терминологией, используемой в анимации CSS и терминологии, которая используется в веб-анимации. Например, веб-анимации не используется строка \"бесконечное\", а вместо этого использует JavaScript-код бесконечность. И вместо временной-функции мы используем ослабление. Мы не будем перечислять здесь значение ослабления, потому что, в отличие от CSS-анимации, где по умолчанию <a href=\"/en-US/docs/Web/CSS/animation-timing-function\">animation-timing-function</a> это просто, в веб-анимации API для ослабления по умолчанию используется линейная зависимость - которые мы используем здесь</p>\n</div>\n\n<h4 id=\"собираем_части_вместе.\">Собираем части вместе.</h4>\n\n<p>Сейчас соберём все части вместе используя <a href=\"/ru/docs/Web/API/Element/animate\"><code>Element.animate()</code></a> метод:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"alice\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span>\n  aliceTumbling<span class=\"token punctuation\">,</span>\n  aliceTiming\n<span class=\"token punctuation\">)</span></code></pre></div>\n\n<p>И вуаля, анимация работает(смотрите готовый вариант на <a href=\"https://codepen.io/rachelnabors/pen/rxpmJL\" class=\"external\" rel=\" noopener\">version on Codepen</a>).</p>\n\n<p>The <code>animate()</code> метод может быть применён на любой DOM-элемент, который может быть анимирован с помощью CSS. И он может быть записан несколькими способами. Вместо того, чтобы делить объекты на ключевые кадры и временные характеристики, мы могли бы просто передать свои значения непосредственно вот так:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"alice\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span> <span class=\"token string\">'rotate(0) translate3D(-50%, -50%, 0)'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'#000'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'#431236'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">offset</span><span class=\"token operator\">:</span> <span class=\"token number\">0.333</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span> <span class=\"token string\">'rotate(360deg) translate3D(-50%, -50%, 0)'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'#000'</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">duration</span><span class=\"token operator\">:</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">iterations</span><span class=\"token operator\">:</span> <span class=\"token number\">Infinity</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>Более того, если мы хотели указать только длительность анимации, а не её повторение (по умолчанию анимации повторяется один раз), мы могли бы пройтись только по миллисекундам:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"alice\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span> <span class=\"token string\">'rotate(0) translate3D(-50%, -50%, 0)'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'#000'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'#431236'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">offset</span><span class=\"token operator\">:</span> <span class=\"token number\">0.333</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span> <span class=\"token string\">'rotate(360deg) translate3D(-50%, -50%, 0)'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'#000'</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>"}},{"type":"prose","value":{"id":"управление_воспроизведением_с_помощью_play_pause_reverse_and_playbackrate","title":"Управление воспроизведением с помощью play(), pause(), reverse() and playbackRate","isH3":false,"content":"<p>Хотя мы можем писать CSS-анимацию с Web Animations API, где API действительно хорошо подходит в качестве воздействия для воспроизведения анимации. Web Animations API обеспечивает несколько удобных методов для контроля воспроизведения анимации. Давайте посмотрим на паузу и воспроизведение анимации в росте/уменьшении Алисы в игре (проверить полный код можно на сайте <a href=\"https://codepen.io/rachelnabors/pen/PNYGZQ\" class=\"external\" rel=\" noopener\">full code on Codepen</a>):</p>\n\n<p><a href=\"https://codepen.io/rachelnabors/pen/PNYGZQ?editors=0010\" class=\"external\" rel=\" noopener\"><img alt=\"Playing the growing and shrinking game with Alice.\" src=\"https://mdn.mozillademos.org/files/13845/growing-shrinking_article_optimized.gif\" style=\"display: block; margin-left: auto; margin-right: auto;\" loading=\"lazy\"></a></p>\n\n<p>В этой игре Алиса меняется в росте, она то растёт, то уменьшается, а контролируем мы этот процесс с помощью  бутылки и кекса. Каждый из них имеют свою анимацию.</p>"}},{"type":"prose","value":{"id":"пауза_и_проигрывание_анимации.","title":"Пауза и проигрывание анимации.","isH3":true,"content":"<p>Мы поговорим об анимации Алисы позже, а сейчас посмотрим поближе на анимации кекса:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> nommingCake <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'eat-me_sprite'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span> <span class=\"token string\">'translateY(0)'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span> <span class=\"token string\">'translateY(-80%)'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">fill</span><span class=\"token operator\">:</span> <span class=\"token string\">'forwards'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">easing</span><span class=\"token operator\">:</span> <span class=\"token string\">'steps(4, end)'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">duration</span><span class=\"token operator\">:</span> aliceChange<span class=\"token punctuation\">.</span>effect<span class=\"token punctuation\">.</span>timing<span class=\"token punctuation\">.</span>duration <span class=\"token operator\">/</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>Метод <a href=\"/ru/docs/Web/API/Element/animate\"><code>Element.animate()</code></a> будет выполняться сразу же как начнётся игра. Чтобы предотвратить автоматическое поедание кекса до того, как пользователь на него нажмёт, мы вызываем <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Animation/pause\"><code>Animation.pause()</code> <small>(en-US)</small></a> сразу же как игра открывается, например так:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>nommingCake<span class=\"token punctuation\">.</span><span class=\"token function\">pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>Теперь мы можем запустить метод <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Animation/play\"><code>Animation.play()</code> <small>(en-US)</small></a> когда будем готовы:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>nommingCake<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>Нам необходимо связать его с анимацией Алисы, чтобы она росла всякий раз, когда съедала кекс. Мы можем сделать это с помощью функции:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">growAlice</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// Play Alice's animation.</span>\n  aliceChange<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Play the cake's animation.</span>\n  nommingCake<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<p>Когда пользователь поместит указатель мыши вниз или нажимает пальцем на торт на сенсорном экране, мы можем вызвать growAlice, чтобы выполнить все анимации:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>cake<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mousedown\"</span><span class=\"token punctuation\">,</span> growAlice<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncake<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"touchstart\"</span><span class=\"token punctuation\">,</span> growAlice<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>"}},{"type":"prose","value":{"id":"другие_полезные_методы.","title":"Другие полезные методы.","isH3":true,"content":"<p>Помимо паузы и воспроизведения, мы можем использовать следующие методы анимации:</p>\n\n<ul>\n <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Animation/finish\"><code>Animation.finish()</code> <small>(en-US)</small></a> перейти в конец анимации.</li>\n <li><a href=\"/ru/docs/Web/API/Animation/cancel\"><code>Animation.cancel()</code></a> прервать анимацию и удалить её эффект.</li>\n <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Animation/reverse\"><code>Animation.reverse()</code> <small>(en-US)</small></a> устанавливать скорость анимации если установить (<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Animation/playbackRate\"><code>Animation.playbackRate</code> <small>(en-US)</small></a> отрицательное значение, то анимация пойдёт в обратном порядке.</li>\n</ul>\n\n<p>Давайте посмотрим на первый playbackRate— отрицательное значение будет запускать анимацию в обратном направлении. Когда Алиса пьёт из бутылки, она становится меньше. Это происходит потому, что бутылка изменяет её анимацию playbackRate от 1 до -1:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">shrinkAlice</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  aliceChange<span class=\"token punctuation\">.</span>playbackRate <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  aliceChange<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbottle<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mousedown\"</span><span class=\"token punctuation\">,</span> shrinkAlice<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbottle<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"touchstart\"</span><span class=\"token punctuation\">,</span> shrinkAlice<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>В <a href=\"https://en.wikipedia.org/wiki/Through_the_Looking-Glass\" class=\"external\" rel=\" noopener\">Through the Looking-Glass</a>, Алиса путешествует по миру, где должна бежать, чтобы оставаться на месте и бежать в двое быстрее, чтобы двигаться вперёд. Например в гонке с Красной королевой, Алиса и Красная королева бегут, чтобы оставаться на месте (проверить полный код можно на <a href=\"https://codepen.io/rachelnabors/pen/PNGGaV\" class=\"external\" rel=\" noopener\">full code on Codepen</a>):</p>\n\n<p><a href=\"https://codepen.io/rachelnabors/pen/PNGGaV\" class=\"external\" rel=\" noopener\"><img alt=\"Alice and the Red Queen race to get to the next square in this game.\" src=\"https://mdn.mozillademos.org/files/13847/red-queen-race_optimized.gif\" style=\"display: block; margin-left: auto; margin-right: auto;\" loading=\"lazy\"></a></p>\n\n<p>Так как маленькие дети легко устают, в отличии от шахматных фигур, Алиса постоянно замедляется. Мы отобразили это в коде путём ослабления (уменьшения скорости) playbackRate анимации.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// Make sure the playback rate never falls below .4</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>redQueen_alice<span class=\"token punctuation\">.</span>playbackRate <span class=\"token operator\">&gt;</span> <span class=\"token number\">.4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    redQueen_alice<span class=\"token punctuation\">.</span>playbackRate <span class=\"token operator\">*=</span> <span class=\"token number\">.9</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>Но постоянно нажимая на них мышью, мы заставляем их ускориться путём умножения playbackRate (скорости анимации)</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">goFaster</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  redQueen_alice<span class=\"token punctuation\">.</span>playbackRate <span class=\"token operator\">*=</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> goFaster<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"touchstart\"</span><span class=\"token punctuation\">,</span> goFaster<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>Фон также ускоряется при щелчках мыши или касаниях. Что же происходит, когда вы заставляете Алису и Красную королеву бежать в два раза быстрее? Что происходит, когда они тормозят?</p>"}},{"type":"prose","value":{"id":"получение_информации_из_анимации","title":"Получение информации из анимации","isH3":false,"content":"<p>Представьте, что мы могли бы использовать playbackRate, как улучшения доступности сайта для пользователей с вестибулярными расстройствами, позволяя им замедлить анимацию на всех страницах сайта. Это невозможно сделать с помощью CSS без пересчёта длительности в каждом правиле CSS, но с веб-анимации API, мы могли бы использовать в будущем (пока не поддерживается в браузерах!) Метод <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Document/getAnimations\"><code>document.getAnimations()</code> <small>(en-US)</small></a> систему циклов по каждой анимации на странице и сократить скорость анимации вот так:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>document<span class=\"token punctuation\">.</span><span class=\"token function\">getAnimations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">animation</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    animation<span class=\"token punctuation\">.</span>playbackRate <span class=\"token operator\">*=</span> <span class=\"token number\">.5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>С Web Animations API нужно изменить только одно свойство.</p>\n\n<p>Другое дело, что это трудно делать только с CSS Animations, создавать зависимости от значения предусмотренные для других анимации. В примере игры про рост и уменьшение Алисы, вы можете заметить некоторые странности у кекса:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token literal-property property\">duration</span><span class=\"token operator\">:</span> aliceChange<span class=\"token punctuation\">.</span>effect<span class=\"token punctuation\">.</span>timing<span class=\"token punctuation\">.</span>duration <span class=\"token operator\">/</span> <span class=\"token number\">2</span></code></pre></div>\n\n<p>Чтобы понять, что здесь происходит, давайте посмотрим на анимацию Алисы:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> aliceChange <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'alice'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span> <span class=\"token string\">'translate(-50%, -50%) scale(.5)'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span> <span class=\"token string\">'translate(-50%, -50%) scale(2)'</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">duration</span><span class=\"token operator\">:</span> <span class=\"token number\">8000</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">easing</span><span class=\"token operator\">:</span> <span class=\"token string\">'ease-in-out'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">fill</span><span class=\"token operator\">:</span> <span class=\"token string\">'both'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>Изменение размера Алисы в два раза происходит за 8 секунд. Затем мы останавливаем её:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>aliceChange<span class=\"token punctuation\">.</span><span class=\"token function\">pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>Если бы оставили её на паузе в начале анимации , то Алиса увеличилась бы в два раза, когда выпила бы всю бутылку. Мы хотим остановить её анимацию \"воспроизведение\" в середине, когда она уже на половину выполнена. Мы могли бы это сделать, установив <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Animation/currentTime\"><code>Animation.currentTime</code> <small>(en-US)</small></a> 4 секунды, вот так:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>aliceChange<span class=\"token punctuation\">.</span>currentTime <span class=\"token operator\">=</span> <span class=\"token number\">4000</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>Но во время работы над этой анимацией мы можем сильно увеличить её продолжительность. Разве не лучше установить динамическое изменение времени (currentTime), тогда нам не придётся делать два обновления за один раз. Мы можем это сделать с помощью ссылки на изменение свойства размера Алисы (aliceChange) <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Animation/effect\"><code>Animation.effect</code> <small>(en-US)</small></a> который возвращает все детали и действующие эффекты, содержащиеся в объекте, на Алису:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>aliceChange<span class=\"token punctuation\">.</span>currentTime <span class=\"token operator\">=</span> aliceChange<span class=\"token punctuation\">.</span>effect<span class=\"token punctuation\">.</span>timing<span class=\"token punctuation\">.</span>duration <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>эффекты позволяют нам получить доступ к анимации keyframe (кадров) и синхронности объектов - aliceChange.effect.timing , указывающий на время Алисиных элементов (которые имеют тип <a class=\"page-not-created\" title=\"Документация об этом ещё не написана; пожалуйста, поспособствуйте её написанию!\"><code>AnimationEffectTimingReadOnly</code></a>) — в этом содержится её <a class=\"page-not-created\" title=\"Документация об этом ещё не написана; пожалуйста, поспособствуйте её написанию!\"><code>AnimationEffectTimingReadOnly.duration</code></a>. Мы можем распределить её длительность на два раза, чтобы получить среднюю точку во временной шкале для установки нормального роста.</p>\n\n<p>Теперь мы можем запустить её в обратном порядке и играться анимацией в любом направлении, чтобы заставить её расти или уменьшаться</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> drinking <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'liquid'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token string\">'100%'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token string\">'0'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">fill</span><span class=\"token operator\">:</span> <span class=\"token string\">'forwards'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">duration</span><span class=\"token operator\">:</span> aliceChange<span class=\"token punctuation\">.</span>effect<span class=\"token punctuation\">.</span>timing<span class=\"token punctuation\">.</span>duration <span class=\"token operator\">/</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndrinking<span class=\"token punctuation\">.</span><span class=\"token function\">pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>И мы можем сделать тоже самое при установки длительности анимации на кексе или бутылке.</p>\n\n<p>Теперь все три анимации связаны только с одной продолжительности, и мы можем легко переходить из одного места.</p>\n\n<p>Мы также можем использовать веб-анимации API, чтобы выяснить Текущее время анимации. Игра заканчивается, когда вы бежите от съеденного торта или выпитой бутылки. Изображение у игрока будет зависеть от анимации Алисы. Стала ли она слишком большой на фоне крошечной двери и не может в неё пройти или слишком маленькой и не может достать ключ, чтобы открыть дверь. Мы можем выяснить, стала она большой или маленький в конце её анимация, получая текущее время её анимации <code><a href=\"/en-US/docs/Web/API/Animation/currentTime\">currentTime</a></code> и разделив её на activeDuration:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">endGame</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// get Alice's timeline's playhead location</span>\n  <span class=\"token keyword\">var</span> alicePlayhead <span class=\"token operator\">=</span> aliceChange<span class=\"token punctuation\">.</span>currentTime<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> aliceTimeline <span class=\"token operator\">=</span> aliceChange<span class=\"token punctuation\">.</span>effect<span class=\"token punctuation\">.</span>activeDuration<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// stops Alice's and other animations</span>\n  <span class=\"token function\">stopPlayingAlice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// depending on which third it falls into</span>\n  <span class=\"token keyword\">var</span> aliceHeight <span class=\"token operator\">=</span> alicePlayhead<span class=\"token operator\">/</span>aliceTimeline<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>aliceHeight <span class=\"token operator\">&lt;=</span> <span class=\"token number\">.333</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Alice got smaller!</span>\n    <span class=\"token operator\">...</span>\n\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>aliceHeight <span class=\"token operator\">&gt;=</span> <span class=\"token number\">.666</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Alice got bigger!</span>\n    <span class=\"token operator\">...</span>\n\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Alice didn't change significantly</span>\n    <span class=\"token operator\">...</span>\n\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n\n<div class=\"note notecard\" id=\"sect2\">\n<p><strong>Примечание:</strong> <code>getAnimations()</code> и эффект не полностью поддерживаются на момент написания этой статьи, но polyfill  поддерживает их уже сегодня.</p>\n</div>"}},{"type":"prose","value":{"id":"колбэки_и_промисы","title":"Колбэки и промисы","isH3":false,"content":"<p>CSS Animations и Transitions (переходы) имеют свои события и они также могут быть воспроизведены и в Web Animations API:</p>\n\n<ul>\n <li><code><a href=\"/en-US/docs/Web/API/Animation/finish_event\">onfinish</a></code> это обработчик события завершения анимации, он может быть запущен вручную с помощью метода <code><a href=\"/en-US/docs/Web/API/Animation/finish\">finish()</a></code>.</li>\n <li><code><a href=\"/en-US/docs/Web/API/Animation/cancel_event\">oncancel</a></code> это обработчик события отмены анимации, он может быть запущен вручную с помощью метода <code><a href=\"/en-US/docs/Web/API/Animation/cancel\">cancel()</a></code>.</li>\n</ul>\n\n<p>Здесь мы устанавливаем колбэк для бутылки, кекса и Алисы, чтобы запустить функцию endGame.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// When the cake or runs out...</span>\nnommingCake<span class=\"token punctuation\">.</span>onfinish <span class=\"token operator\">=</span> endGame<span class=\"token punctuation\">;</span>\ndrinking<span class=\"token punctuation\">.</span>onfinish <span class=\"token operator\">=</span> endGame<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...or Alice reaches the end of her animation</span>\naliceChange<span class=\"token punctuation\">.</span>onfinish <span class=\"token operator\">=</span> endGame<span class=\"token punctuation\">;</span>\n\n</code></pre></div>\n\n<p>Нравится перспектива? Web Animations API также даёт две перспективы: <code><a href=\"/en-US/docs/Web/API/Animation/finish_event\">onfinish</a></code> и <code><a href=\"/en-US/docs/Web/API/Animation/cancel_event\">oncancel</a></code>.</p>\n\n<div class=\"note notecard\" id=\"sect3\">\n<p>Эти промисы не полностью поддерживаются в настоящий момент.</p>\n</div>"}},{"type":"prose","value":{"id":"заключение","title":"Заключение","isH3":false,"content":"<p>Таковы основные особенности веб-анимации API, большинство из которых уже поддерживается в последних версиях Firefox и Chrome. К этому моменту вы должны быть готовы к \"прыжку в кроличью нору\" анимации в браузере и готовы написать свои собственные эксперименты в анимации! Если вы используете API и хотите поделиться, попробуйте использовать хештег #WAAPI. Мы будем следить и писать другие учебники, чтобы охватить будущие дополнительные функции, в виде поддержки распространяя!</p>"}},{"type":"prose","value":{"id":"посмотрите_также","title":"Посмотрите также","isH3":false,"content":"<ul>\n <li><a href=\"https://codepen.io/collection/bpEza/\" class=\"external\" rel=\" noopener\">Полный набор Алиса в Стране Чудес демки</a> на сайт codepen для вас, чтобы играть, развиваться и делиться</li>\n <li><a href=\"https://hacks.mozilla.org/2016/08/animating-like-you-just-dont-care-with-element-animate/\" class=\"external\" rel=\" noopener\">Animating like you just don’t care with Element.animate</a> — отличная статья, чтобы прочитать, где объясняется больше на фоне веб-анимации API, и поэтому он является более эффективным, чем другие методы веб-анимации</li>\n <li><a href=\"https://github.com/web-animations/web-animations-js\" class=\"external\" rel=\" noopener\">web-animations-js</a> — the Web Animations API polyfill</li>\n</ul>"}}],"toc":[{"text":"Встречайте Web Animations API","id":"встречайте_web_animations_api"},{"text":"Поддержка Браузеров","id":"поддержка_браузеров"},{"text":"Написание CSS Animations вместе с Web Animations API","id":"написание_css_animations_вместе_с_web_animations_api"},{"text":"Управление воспроизведением с помощью play(), pause(), reverse() and playbackRate","id":"управление_воспроизведением_с_помощью_play_pause_reverse_and_playbackrate"},{"text":"Получение информации из анимации","id":"получение_информации_из_анимации"},{"text":"Колбэки и промисы","id":"колбэки_и_промисы"},{"text":"Заключение","id":"заключение"},{"text":"Посмотрите также","id":"посмотрите_также"}],"summary":"Web Animations API позволяет нам создать анимацию и управлять её воспроизведением с помощью JavaScript. Эта статья будет правильным руководством для старта c весёлыми демками и уроками с Алисой в Стране Чудес.","popularity":0.0003,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using the Web Animations API","locale":"en-US","native":"English (US)"},{"title":"Web Animations API を利用する","locale":"ja","native":"日本語"},{"title":"Usando a Web Animations API","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Using the Web Animations API","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ru/web/api/web_animations_api/using_the_web_animations_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/web/api/web_animations_api/using_the_web_animations_api/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Web","title":"Веб-технологии для разработчиков"},{"uri":"/ru/docs/Web/API","title":"Интерфейсы веб API"},{"uri":"/ru/docs/Web/API/Web_Animations_API","title":"Web Animations API"},{"uri":"/ru/docs/Web/API/Web_Animations_API/Using_the_Web_Animations_API","title":"Using the Web Animations API"}],"pageTitle":"Using the Web Animations API - Интерфейсы веб API | MDN","noIndexing":false}}