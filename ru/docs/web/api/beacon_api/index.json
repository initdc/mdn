{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Beacon API","mdn_url":"/ru/docs/Web/API/Beacon_API","locale":"ru","native":"Русский","sidebarHTML":"<ol><li><strong><a href=\"/ru/docs/Web/API/Beacon_API\">Beacon API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Руководства</summary><ol><li><a href=\"/ru/docs/Web/API/Beacon_API\">Beacon API</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Интерфейсы</summary><ol><li><a href=\"/ru/docs/Web/API/Navigator\"><code>Navigator</code></a></li><li><a href=\"/ru/docs/Web/API/WorkerNavigator\"><code>WorkerNavigator</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div id=\"sect1\"><div class=\"notecard experimental\" id=\"sect2\"><p><strong>Experimental:</strong> <strong>Это экспериментальная технология</strong><br>Так как спецификация этой технологии ещё не стабилизировалась, смотрите <a href=\"#browser_compatibility\">таблицу совместимости</a> по поводу использования в различных браузерах. Также заметьте, что синтаксис и поведение экспериментальной технологии может измениться в будущих версиях браузеров, вслед за изменениями спецификации.</p></div></div>\n\n\n\n<p>Интерфейс <strong><code>Beacon</code></strong> используется для планирования асинхронного и неблокирующего запроса к веб-серверу. <strong><code>Beacon</code></strong> запросы используют метод HTTP POST, и обычно не требуют ответа. Запросы гарантированно будут  инициированы до того, как страница будет выгружена, и они выполняются до конца, не требуя блокирующего запроса (например <a href=\"/ru/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a>).</p>\n\n<p>Например, вариантом использования Beacon API может быть логирование активности или отправка аналитики на сервер.</p>\n\n<p>Пример кода интерфейсов, описанных в этом документе, включён в раздел <em><a href=\"/docs/Web/API/Beacon_API/Using_the_Beacon_API\">Использование Beacon API</a></em>.</p>"}},{"type":"prose","value":{"id":"зачем_использовать_beacon","title":"Зачем использовать Beacon?","isH3":false,"content":"<p>Интерфейс <code>Beacon</code> отвечает потребностям аналитического и диагностического кода, который обычно пытается отправить данные на веб-сервер перед выгрузкой документа. Отправка данных хоть на секунду раньше может привести к упущенной возможности сбора данных. В любом случае, обеспечение того, чтобы данные отправлялись во время выгрузки документа, является чем-то, что традиционно было трудным для разработчиков.</p>\n\n<p>Пользовательские браузеры обычно игнорируют асинхронные  <a href=\"/ru/docs/Web/API/XMLHttpRequest\" title=\"XMLHttpRequests\"><code>XMLHttpRequests</code></a> сделанные в обработчике выгрузки. Для решения этой проблемы, аналитический и диагностический код обычно создаёт синхронный <a href=\"/ru/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a> в обработчике <code><a href=\"/en-US/docs/Web/API/Window/unload_event\" title=\"Currently only available in English (US)\" class=\"only-in-en-us\">unload (en-US)</a></code> или <code><a href=\"/en-US/docs/Web/API/Window/beforeunload_event\" title=\"Currently only available in English (US)\" class=\"only-in-en-us\">beforeunload (en-US)</a></code> для отправки данных. Синхронный <a href=\"/ru/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a> заставляет браузер отложить выгрузку документа и делает следующую навигацию более медленной. Следующая страница ничего не может сделать, чтобы избежать этого ощущения низкой производительности при загрузке страницы. </p>\n\n<p>Есть и другие методы, используемые для проверки предоставления данных. Одним из таких методов является задержка отправки данных путём создания элемента Image и установки его атрибута <code>src</code> в обработчике выгрузки. Поскольку большинство браузеров откладывают выгрузку для завершения ожидающей загрузки изображения, данные могут быть отправлены во время выгрузки. Другой метод заключается в создании неработающего цикла, который  в течение нескольких секунд будет висеть в обработчике выгрузки, чтобы задержать выгрузку и отправить данные на сервер.</p>\n\n<p>Эти методы представляют плохие шаблоны программирования, некоторые из них ненадёжны и приводят к восприятию плохой производительности при загрузке страницы для следующей навигации. API-интерфейс Beacon предоставляет стандартный способ решения этих проблем.</p>"}},{"type":"prose","value":{"id":"глобальный_контекст","title":"Глобальный контекст","isH3":false,"content":"<p>Интерфейс <code>Beacon API's</code> предоставляет метод <a href=\"/ru/docs/Web/API/Navigator/sendBeacon\"><code>Navigator.sendBeacon()</code></a>, который используется для отправки <em>beacon</em> данных  на сервер в <em>глобальный браузерный контекст</em>. Метод принимает два аргумента: URL и данные для отправки в запросе. Аргумент data является необязательным, и его тип может быть <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>ArrayBufferView</code> <small>(en-US)</small></a>, <a href=\"/ru/docs/Web/API/Blob\"><code>Blob</code></a>, <a href=\"/ru/docs/conflicting/Web/JavaScript/Reference/Global_Objects/String_6fa58bba0570d663099f0ae7ae8883ab\"><code>DOMString</code></a> или <a class=\"page-not-created\" title=\"Документация об этом ещё не написана; пожалуйста, поспособствуйте её написанию!\"><code> FormData </code></a>. Если браузер успешно поставил в очередь запрос на доставку, то метод возвращает <code>true</code> либо возвращает <code>false</code> в противном случае.</p>"}},{"type":"prose","value":{"id":"рабочий_контекст","title":"Рабочий контекст","isH3":false,"content":"<p>Интерфейс <code>Beacon API's</code> предоставляет метод <a href=\"/ru/docs/Web/API/Navigator/sendBeacon\"><code>Navigator.sendBeacon()</code></a>, который используется для отправки <em>beacon</em> данных на сервер из <em><a href=\"/ru/docs/Web/API/WorkerGlobalScope\" title=\"worker global scope\"><code>worker global scope</code></a></em>. Метод принимает два аргумента: URL-адрес и данные для отправки в запросе. Аргумент <code>data</code> является необязательным, и его тип может быть <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>ArrayBufferView</code> <small>(en-US)</small></a>, <a href=\"/ru/docs/Web/API/Blob\"><code>Blob</code></a>, <a href=\"/ru/docs/conflicting/Web/JavaScript/Reference/Global_Objects/String_6fa58bba0570d663099f0ae7ae8883ab\"><code>DOMString</code></a>, или <a href=\"/ru/docs/Web/API/FormData\"><code>FormData</code></a>. Если браузер успешно поставил в очередь запрос на доставку, то метод возвращает <code>true</code> либо возвращает <code>false</code> в противном случае.</p>"}},{"type":"prose","value":{"id":"совместимость_с_браузерами","title":"Совместимость с браузерами","isH3":false,"content":"<p>The <a href=\"/ru/docs/Web/API/Navigator/sendBeacon#browser_compatibility\" title=\"Navigator.sendBeacon()\"><code>Navigator.sendBeacon().Browser_compatibility</code></a> table indicates that method has relatively broad implementation.</p>"}},{"type":"prose","value":{"id":"смотрите_также","title":"Смотрите также","isH3":false,"content":"<ul>\n <li><a href=\"/ru/docs/Web/API/WorkerGlobalScope\"><code>WorkerGlobalScope</code></a></li>\n <li><a href=\"https://w3c.github.io/beacon/\" class=\"external\" rel=\" noopener\">Beacon standard</a></li>\n <li><a href=\"http://caniuse.com/#search=beacon\" class=\"external\" rel=\" noopener\">Beacon CanIUse data</a></li>\n <li><a href=\"https://ehsanakhgari.org/blog/2015-04-08/intercepting-beacons-through-service-workers\" class=\"external\" rel=\" noopener\">Intercepting beacons through service workers</a>; Ehsan Akhgari; 2015-Apr-08</li>\n</ul>"}}],"toc":[{"text":"Зачем использовать Beacon?","id":"зачем_использовать_beacon"},{"text":"Глобальный контекст","id":"глобальный_контекст"},{"text":"Рабочий контекст","id":"рабочий_контекст"},{"text":"Совместимость с браузерами","id":"совместимость_с_браузерами"},{"text":"Смотрите также","id":"смотрите_также"}],"summary":"Интерфейс Beacon используется для планирования асинхронного и неблокирующего запроса к веб-серверу. Beacon запросы используют метод HTTP POST, и обычно не требуют ответа. Запросы гарантированно будут  инициированы до того, как страница будет выгружена, и они выполняются до конца, не требуя блокирующего запроса (например XMLHttpRequest).","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Beacon API","locale":"en-US","native":"English (US)"},{"title":"Beacon API","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ru/web/api/beacon_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/web/api/beacon_api/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Web","title":"Веб-технологии для разработчиков"},{"uri":"/ru/docs/Web/API","title":"Интерфейсы веб API"},{"uri":"/ru/docs/Web/API/Beacon_API","title":"Beacon API"}],"pageTitle":"Beacon API - Интерфейсы веб API | MDN","noIndexing":false}}