{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Синхронизация видимости элемента с Intersection Observer API","mdn_url":"/ru/docs/Web/API/Intersection_Observer_API/Timing_element_visibility","locale":"ru","native":"Русский","sidebarHTML":"<ol><li><strong><a href=\"/ru/docs/Web/API/Intersection_Observer_API\">Intersection Observer API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Руководства</summary><ol><li><a href=\"/ru/docs/Web/API/Intersection_Observer_API/Timing_element_visibility\">Timing element visibility with the Intersection Observer API</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Интерфейсы</summary><ol><li><a href=\"/ru/docs/Web/API/IntersectionObserver\"><code>IntersectionObserver</code></a></li><li><a href=\"/ru/docs/Web/API/IntersectionObserverEntry\"><code>IntersectionObserverEntry</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Свойства</summary><ol><li><a href=\"/ru/docs/Web/API/indexedDB\"><code>indexedDB</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":"структура_приложения_html","title":"Структура приложения: HTML","isH3":false,"content":"<div id=\"sect1\"></div>\n\n<p><a href=\"/en-US/docs/Web/API/Intersection_Observer_API\">Intersection Observer API</a> позволяет в асинхронном режиме уведомлять приложение о том, что какой-то интересующий нас элемент в той или иной степени перекрыл родительский или другой элемент, в том числе <a href=\"/ru/docs/Web/API/Document\"><code>Document</code></a>. В этой статье мы построим пример блога, в котором в DOM динамически встраиваются рекламные блоки. Затем, с помощью Intersection Observer API, мы выясним, сколько времени показывается каждая отдельная реклама пользователю. Когда такая реклама показывается дольше, чем одну минуту, мы заменяем её на новую.</p>\n\n<p>Хотя многие элементы в нашем примере слабо связаны с реальным миром, этого будет достаточно для понимания API. В реальном мире статьи чаще всего отличаются между собой и хранятся не в клиенте, а загружаются из базы данных; да и реклама не состоит из одной только строчки текста.</p>\n\n<p>Есть важная причина, почему мы используем отслеживание видимости рекламы. Вышло так, что наиболее частое употребление Flash или скриптов в Web рекламе нужно для того, чтобы оценивать эффективность рекламы, а значит, её стоимость. Без Intersection Observer API эта задача свелась бы к повсеместному применению setTimeout и setInterval для каждой отдельной рекламы. Такие техники могут драматически ухудшить производительность страницы. Использование API в этом случае может позволит браузеру взять на себя обработку сложной логики и не только ускорит приложение, но и спасёт вас от ошибок, которые обязательно появятся при использовании setTimeout / setInterval.</p>\n\n<p>Начнём!</p>\n\n<div id=\"fullpage_example\">\n\n\n<p>Структура Web-приложений не очень сложна. Мы будем использовать <a href=\"/en-US/docs/Web/CSS/CSS_Grid_Layout\">CSS Grid</a> для стилизации и макетирования, так что всё достаточно очевидно:</p>\n\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>header</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>A Fake Blog<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>Showing Intersection Observer in action!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>header</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>aside</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nav</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#link1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>A link<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#link2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Another link<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#link3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>One more link<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nav</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>aside</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>main</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>main</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n\n<p>Это заготовка для приложения. В верхней части приложения находится блок <a href=\"/ru/docs/Web/HTML/Element/header\"><code>&lt;header&gt;</code></a>. Ниже - боковая панель <a href=\"/ru/docs/Web/HTML/Element/aside\"><code>&lt;aside&gt;</code></a>, заполненная ссылками. В самом конце структуры - основное тело приложения. Приложение стартует с пустым элементом <a href=\"/ru/docs/Web/HTML/Element/main\"><code>&lt;main&gt;</code></a> -  он будет заполнен позже с помощью JavaScript.</p>\n\n<h2 id=\"стилизация_приложения_с_помощью_css\">Стилизация приложения с помощью CSS</h2>\n\n<p>После определения структуры приложения мы переходим к стилизации. Давайте рассмотрим каждый компонент по отдельности.</p>\n\n<h3 id=\"основа\">Основа</h3>\n\n<p>Мы создаём стили для <a href=\"/ru/docs/Web/HTML/Element/body\"><code>&lt;body&gt;</code></a> и <a href=\"/ru/docs/Web/HTML/Element/main\"><code>&lt;main&gt;</code></a> так, чтобы определить фоновый цвет и сеточную систему.</p>\n\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Open Sans\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Arial\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Helvetica\"</span><span class=\"token punctuation\">,</span> sans-serif<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> aliceblue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.wrapper</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> grid<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> auto <span class=\"token function\">minmax</span><span class=\"token punctuation\">(</span>min-content<span class=\"token punctuation\">,</span> 1fr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-rows</span><span class=\"token punctuation\">:</span> auto <span class=\"token function\">minmax</span><span class=\"token punctuation\">(</span>min-content<span class=\"token punctuation\">,</span> 1fr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 700px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 auto<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> aliceblue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<p>Элемент приложения <a href=\"/ru/docs/Web/HTML/Element/body\"><code>&lt;body&gt;</code></a> сконфигурирован так, чтобы использовать общеупотребимый шрифт из семейства sans-serif и цвет <code>\"aliceblue\"</code> в качестве фона. Класс <code>\"wrapper\"</code> оборачивает всё приложение, включая header, sidebar и body content.</p>\n\n<p>Обёртка определяет также CSS Grid сетку, как сетку из двух колонок и двух строк. Первая колонка (размер вычисляется автоматически на основе контента) используется для боковой панели, а вторая колонка (будет использоваться для основного содержимого) имеет ширину, достаточную, чтобы вместить содержимое и занять всю доступную площадь.</p>\n\n<p>Первая строка будет использована для заголовка сайта. Размеры строк определяются схожим образом - размер первой вычисляется на основе контента, а второй - занимает всё доступной пространство, но не меньше размера, необходимого для показа содержимого.</p>\n\n<p>Ширина обёртки зафиксирована - 700px, так что её размер будет удобен для представления приложения в MDN.</p>\n\n<p>The wrapper's width is fixed at 700px so that it will fit in the available space when presented inline on MDN below.</p>\n\n<h3 id=\"заголовок\">Заголовок</h3>\n\n<p>Заголовок достаточно прост, так как в нашем примере он содержит небольшой текст.</p>\n\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">header</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">grid-column</span><span class=\"token punctuation\">:</span> 1 / -1<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-row</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> aliceblue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<p>Значение <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/CSS/grid-row\"><code>grid-row</code> <small>(en-US)</small></a> равно 1, так как мы хотим поместить заголовок в верхнюю строку сеточной системы. Более интересно использование <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/CSS/grid-column\"><code>grid-column</code> <small>(en-US)</small></a>; Мы указываем здесь, что блок занимает пространство с первой колонки до первой с конца (то есть последней).</p>\n\n<h3 id=\"боковая_панель\">Боковая панель</h3>\n\n<p>Боковая панель используется для показа ссылок на другие страницы приложения. Ни одна из них не будет работать в нашем примере. Вся боковая панель нужна, чтобы просто приблизить внешний вид приложения к реальному блогу. Боковая панель создаётся с помощью элемента <a href=\"/ru/docs/Web/HTML/Element/aside\"><code>&lt;aside&gt;</code></a>.</p>\n\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">aside</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">grid-column</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-row</span><span class=\"token punctuation\">:</span> 2<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> cornsilk<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 5px 10px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">aside ul</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">padding-left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">aside ul li</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">list-style</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">aside ul li a</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">text-decoration</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<p>Важно отметить, что значение <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/CSS/grid-column\"><code>grid-column</code> <small>(en-US)</small></a> здесь установлено в 1 для того, чтобы поместить панель в левую часть экрана. Если вы поменяете это значение на \"-1\", то панель переместится вправо, однако, в этом случае, вам понадобится немного изменить стили внутренних элементов. Значение <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/CSS/grid-row\"><code>grid-row</code> <small>(en-US)</small></a> равно 2, чтобы боковая панель заняла область вдоль области контента.</p>\n\n<h3 id=\"область_контента\">Область контента</h3>\n\n<p>Контент будет содержаться в элементе <a href=\"/ru/docs/Web/HTML/Element/main\"><code>&lt;main&gt;</code></a>.</p>\n\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">main</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">grid-column</span><span class=\"token punctuation\">:</span> 2<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-row</span><span class=\"token punctuation\">:</span> 2<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> 16px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 16px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<p>Главная особенность здесь - контент занимает вторую колонку и вторую строку.</p>\n\n<h3 id=\"статьи\">Статьи</h3>\n\n<p>Каждая статья состоит из элемента <a href=\"/ru/docs/Web/HTML/Element/article\"><code>&lt;article&gt;</code></a>:</p>\n\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">article</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 6px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">article:not(:last-child)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 8px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">article h2</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<p>Эти стили создают область с белым фоном с небольшими отступами как внутри области, так и между областями.</p>\n\n<h3 id=\"рекламные_блоки\">Рекламные блоки</h3>\n\n<p>Наконец, рекламные блоки. Нужно заметить, что каждый отдельный рекламный блок может изменять свои стили динамически (мы увидим это позже):</p>\n\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">.ad</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 96px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 6px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-color</span><span class=\"token punctuation\">:</span> #555<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-style</span><span class=\"token punctuation\">:</span> solid<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-width</span><span class=\"token punctuation\">:</span> 1px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.ad:not(:last-child)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 8px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.ad h2</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.ad div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> right<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0 4px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 120px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 14px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid black<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>255<span class=\"token punctuation\">,</span> 255<span class=\"token punctuation\">,</span> 255<span class=\"token punctuation\">,</span> 0.5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<p>Здесь нет никакой магии. Простой CSS.</p>\n\n<h2 id=\"совмещаем_с_javascript\">Совмещаем с JavaScript</h2>\n\n<p>Перейдём к JavaScript-коду, который всё оживит. Начнём с глобальных переменных:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> contentBox<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> nextArticleID <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> visibleAds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> previouslyVisibleAds <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> adObserver<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> refreshIntervalID <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>Вот что здесь используется:</p>\n\n<dl>\n <dt id=\"contentbox\"><code>contentBox</code></dt>\n <dd>Ссылка на элемент <a href=\"/ru/docs/Web/HTML/Element/main\"><code>&lt;main&gt;</code></a>. Это место, куда мы будем вставлять статьи и рекламу.</dd>\n <dt id=\"nextarticleid\"><code>nextArticleID</code></dt>\n <dd>Каждая статья получает уникальный цифровой ID. Эта переменная позволяет понять, какой следующий ID использовать.</dd>\n <dt id=\"visibleads\"><code>visibleAds</code></dt>\n <dd><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> используется для отслеживания текущих видимых на экране рекламных блоков.</dd>\n <dt id=\"previouslyvisibleads\"><code>previouslyVisibleAds</code></dt>\n <dd>Используется для временного хранения списка рекламных блоков в то время, как документ невидим (например, если пользователь переключился на другой таб)</dd>\n <dt id=\"adobserver\"><code>adObserver</code></dt>\n <dd>Содержит экземпляр <a href=\"/ru/docs/Web/API/IntersectionObserver\"><code>IntersectionObserver</code></a>, используемый для вычисления наложения рекламных блоков и границ элемента <code>&lt;main&gt;</code>.</dd>\n <dt id=\"refreshintervalid\"><code>refreshIntervalID</code></dt>\n <dd>Переменная для хранения ID интервала, который возвращается функцией <a href=\"/ru/docs/Web/API/setInterval\" title=\"setInterval()\"><code>setInterval()</code></a>. Этот интервал будет использоваться для запуска периодических обновлений рекламных блоков.</dd>\n</dl>\n\n<h3 id=\"установка\">Установка</h3>\n\n<p>Для первичного запуска приложения мы вызовем функцию <code>startup()</code>:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span> startup<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">startup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  contentBox <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"visibilitychange\"</span><span class=\"token punctuation\">,</span> handleVisibilityChange<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> observerOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">root</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">rootMargin</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0px\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">threshold</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.75</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  adObserver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span>intersectionCallback<span class=\"token punctuation\">,</span>\n                    observerOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">buildContents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  refreshIntervalID <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>handleRefreshInterval<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<p>Вначале мы получаем элемент <a href=\"/ru/docs/Web/HTML/Element/main\"><code>&lt;main&gt;</code></a>, в который можем вставлять содержимое. Затем мы устанавливаем обработчик на событие <code><a href=\"/en-US/docs/Web/API/Document/visibilitychange_event\" title=\"Currently only available in English (US)\" class=\"only-in-en-us\">visibilitychange (en-US)</a></code>. Это событие срабатывает, когда документ меняет состояние между видим/невидим, например, когда пользователь переключается между табами. Intersection Observer API не должен засчитывать пересечение с элементом Main, если пользователь не будет в это время смотреть на вкладку. Таким образом, мы должны останавливать наши таймеры каждый раз, когда пользователь уходит со страницы. С помощью этого обработчика.</p>\n\n<p>Затем мы устанавливаем параметры для <a href=\"/ru/docs/Web/API/IntersectionObserver\"><code>IntersectionObserver</code></a>. Параметры определяют, что IntersectionObserver должен отслеживать перекрытия с областью видимости документа (параметр <code>root</code> в значении <code>null</code>). У нас нет отступов для модификации корневой области; мы хотим отслеживать совпадение границ элементов и видимого документа именно для целей обнаружения перекрытий.</p>\n\n<p>Параметр \"порог\" (<code>threshold</code>) содержит массив со значениями 0.0 и 0.75; Это заставит обработчик вызываться каждый раз, когда целевой элемент становится полностью обёрнут или только начинает выходить из зоны перекрытия (коэффициент перекрытия 0.0) или проходит порог в 75% видимости в обоих направлениях (коэффициент перекрытия 0.75).</p>\n\n<p>Наблюдатель <code>adObserver</code> создаётся с помощью конструктора <code>IntersectionObserver</code>. В аргументы конструктора мы передаём колбэк-функцию (<code>intersectionCallback</code>) и ранее определённый объект параметров.</p>\n\n<p>После этого мы вызываем функцию <code>buildContents()</code>. Её мы напишем чуть позже. Функция генерирует и вставляет в контейнер статьи и рекламные блоки.</p>\n\n<p>В конце мы устанавливаем интервал, который каждую секунду запускает проверку - нужно ли что-то обновить. Нам необходимо второе обновление, так как в каждом отдельном рекламном блоке мы показываем таймер. В реальном приложении это не понадобится.</p>\n\n<h3 id=\"обработка_изменения_видимости_документа\">Обработка изменения видимости документа</h3>\n\n<p>Давайте рассмотрим обработчик события <code><a href=\"/en-US/docs/Web/API/Document/visibilitychange_event\" title=\"Currently only available in English (US)\" class=\"only-in-en-us\">visibilitychange (en-US)</a></code>. Это событие срабатывает, когда документ становится видим или невидим. Как правило, это случается, когда пользователь переключается между табами. Так как Intersection Observer отслеживает только перекрытия элемента с корневым элементом, нам необходимо отдельно позаботиться о детекции видимости документа. Для этого мы используем <a href=\"/en-US/docs/Web/API/Page_Visibility_API\">Page Visibility API</a>.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">handleVisibilityChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>hidden<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>previouslyVisibleAds<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      previouslyVisibleAds <span class=\"token operator\">=</span> visibleAds<span class=\"token punctuation\">;</span>\n      visibleAds <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      previouslyVisibleAds<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">adBox</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">updateAdTimer</span><span class=\"token punctuation\">(</span>adBox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        adBox<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>lastViewStarted <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    previouslyVisibleAds<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">adBox</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      adBox<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>lastViewStarted <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    visibleAds <span class=\"token operator\">=</span> previouslyVisibleAds<span class=\"token punctuation\">;</span>\n    previouslyVisibleAds <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<p>Так как событие само по себе не указывает, стал ли документ видимым или, наоборот, невидимым, мы должны вручную проверить свойство <a href=\"/ru/docs/Web/API/Document/hidden\"><code>document.hidden</code></a>. В теории, это событие может сработать несколько раз, поэтому нам нужно обрабатывать только те рекламные блоки, учёт которых ещё не был приостановлен.</p>\n\n<p>Для остановки таймеров нам нужно удалить ссылки на рекламные блоки из коллекции <code>visibleAds</code> и пометить их как неактивные. Чтобы это сделать, мы начинаем с сохранения ссылок на текущие видимые элементы в переменную<code> previouslyVisibleAds</code>. Это нужно, чтобы в дальнейшем можно было восстановить счётчики для этих блоков. Так мы указываем приложению, что эту рекламу не надо считать активной. Затем, если пользователь вернулся в документ, мы вызываем функцию  <code>updateAdTimer()</code> для каждого отложенного элемента. Эта функция обновляет общее время видимости элемента. После этого мы присваиваем переменной <code>dataset.lastViewStarted</code> значение 0, что означает, что таймер не запущен.</p>\n\n<p>Если документ стал видимым, мы выполняем обратный процесс: сначала мы проходим через коллекцию <code>previouslyVisibleAds</code>. Для каждого элемента мы присваиваем  <code>dataset.lastViewStarted</code> значение, соответствующее текущему времени документа (в миллисекундах с момента создания документа). Это время можно узнать с помощью  метода <a href=\"/ru/docs/Web/API/Performance/now\" title=\"performance.now()\"><code>performance.now()</code></a>. Затем мы присваиваем переменной  <code>visibleAds</code> закешированное ранее значение <code>previouslyVisibleAds</code>, с обнулением последней переменной. Теперь рекламные блоки перезапущены и настроены, так что время простоя не будет учитываться.</p>\n\n<h3 id=\"обработчик_изменений_наложения\">Обработчик изменений наложения</h3>\n\n<p>При каждой итерации в браузерном event loop, каждый наблюдатель  <a href=\"/ru/docs/Web/API/IntersectionObserver\"><code>IntersectionObserver</code></a> проверяет, не прошёл ли какой-либо из элементов-целей через пороговые значения наблюдателя.  Для каждого наблюдателя список таких целей собирается в один список и отправляется в колбэк-функцию наблюдателя. Каждый элемент списка - это <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IntersectionObserverEntry\"><code>IntersectionObserverEntry</code> <small>(en-US)</small></a> объект. В нашем приложении <code>intersectionCallback()</code> выглядит так:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">intersectionCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entries</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  entries<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> adBox <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>isIntersecting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>intersectionRatio <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0.75</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        adBox<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>lastViewStarted <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">;</span>\n        visibleAds<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>adBox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      visibleAds<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>adBox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>intersectionRatio <span class=\"token operator\">===</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>adBox<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>totalViewTime <span class=\"token operator\">&gt;=</span> <span class=\"token number\">60000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">replaceAd</span><span class=\"token punctuation\">(</span>adBox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<p>Как мы упоминали ранее, колбэк-функция <a href=\"/ru/docs/Web/API/IntersectionObserver\"><code>IntersectionObserver</code></a>  получает на вход массив элементов, которые активировали наблюдателя. В нашей функции мы итерируемся по этому массиву. Если элемент пересекается с корневым элементом, мы знаем, что он стал видимым. Если он становится видимым более, чем на 75%, мы считаем, что реклама видима и мы запускаем таймер, выставляя значение  <code>dataset.lastViewStarted</code> равным времени изменения параметра перекрытия <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IntersectionObserverEntry/time\"><code>entry.time</code> <small>(en-US)</small></a>. Затем мы добавляем рекламный блок в набор <code>visibleAds</code>.</p>\n\n<p>Если рекламный блок уходит из зоны видимости, мы удаляем его из набор видимых элементов. Затем, в зависимости от значения <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IntersectionObserverEntry/intersectionRatio\"><code>entry.ratio</code> <small>(en-US)</small></a>, мы либо меняем рекламу, либо ставим на паузу. Так, если значение равно 0.0 и реклама уже была видна минимум минуту, мы вызываем функцию <code>replaceAd()</code> . В этом случае пользователь видит разные рекламные блоки, но сама реклама меняется незаметно для пользователя.</p>\n\n<h3 id=\"обработка_периодический_событий\">Обработка периодический событий</h3>\n\n<p>Каждую секунду у нас срабатывает интервал <code>handleRefreshInterval()</code>, который мы задали в функции <code>startup()</code>. Главная задача этого интервала - обновлять таймеры каждую секунду и перерисовывать значение таймеров.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">handleRefreshInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> redrawList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  visibleAds<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">adBox</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> previousTime <span class=\"token operator\">=</span> adBox<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>totalViewTime<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">updateAdTimer</span><span class=\"token punctuation\">(</span>adBox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>previousTime <span class=\"token operator\">!=</span> adBox<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>totalViewTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      redrawList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>adBox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>redrawList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      redrawList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">adBox</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">drawAdTimer</span><span class=\"token punctuation\">(</span>adBox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<p>Массив <code>redrawList</code> используется для хранения списка рекламных блоков, которые должны быть перерисованы в следующем цикле перерисовки. Это нужно, так как таймеры текущих рекламных блоков не всегда совпадают с реальными таймингами из-за прочих системных процессов. Или из-за того, что вы указали в качестве интервала промежуток не в 1000мс.</p>\n\n<p>Затем, для каждого видимого рекламного блока, мы сохраняем значение <code>dataset.totalViewTime</code> (количество миллисекунд, которое текущая реклама была видима с момента последнего обновления этого значения). После этого вызываем функцию <code>updateAdTimer()</code> для обновления времени. Если оно изменилось, мы вставляем рекламный блок в список <code>redrawList</code>. Таким образом, при обработке следующего кадра приложение знает, что нужно перерисовать.</p>\n\n<p>И, наконец, если существует хоть один элемент, который нужно перерисовать, мы будем используем <a href=\"/ru/docs/Web/API/window/requestAnimationFrame\" title=\"requestAnimationFrame()\"><code>requestAnimationFrame()</code></a>, чтобы отложить отрисовку каждого элемента на тот момент, когда будет формироваться следующий кадр.</p>\n\n<h3 id=\"обновление_таймера_видимости_рекламы\">Обновление таймера видимости рекламы</h3>\n\n<p>Ранее мы уже видели, что если нам нужно обновить общее время видимости рекламы - мы вызываем функцию <code>updateAdTimer()</code>. Эта функция принимает в качестве аргумента объект <a href=\"/ru/docs/Web/API/HTMLDivElement\"><code>HTMLDivElement</code></a>.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">updateAdTimer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">adBox</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> lastStarted <span class=\"token operator\">=</span> adBox<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>lastViewStarted<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> currentTime <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastStarted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> diff <span class=\"token operator\">=</span> currentTime <span class=\"token operator\">-</span> lastStarted<span class=\"token punctuation\">;</span>\n\n    adBox<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>totalViewTime <span class=\"token operator\">=</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>adBox<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>totalViewTime<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> diff<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  adBox<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>lastViewStarted <span class=\"token operator\">=</span> currentTime<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<p>Для отслеживания времени видимости элемента мы используем два data-атрибута на каждом рекламном блоке:</p>\n\n<dl>\n <dt id=\"lastviewstarted\"><code>lastViewStarted</code></dt>\n <dd>Время в миллисекундах относительно первоначальной загрузки страницы до момента, когда счётчик рекламного блока был обновлён или блок стал невидим. Если значение равно нулю - блок не был видим в последний раз, когда проверялся.</dd>\n <dt id=\"totalviewtime\"><code>totalViewTime</code></dt>\n <dd>Общее время видимости рекламного блока.</dd>\n</dl>\n\n<p>Значение этих атрибутов можно получить с помощью <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLElement/dataset\"><code>HTMLElement.dataset</code> <small>(en-US)</small></a>. Значения - строки, но вы можете конвертировать их в числа. Фактически, JavaScript делает это автоматически, но нам всё равно придётся в одном месте сделать это вручную.</p>\n\n<p>Функция начинается с выяснения времени, когда происходила последняя проверка видимости рекламы (<code>adBox.dataset.lastViewStarted</code>). Мы также получаем текущее время с момента создания документа с помощью <a href=\"/ru/docs/Web/API/Performance/now\" title=\"performance.now()\"><code>performance.now()</code></a> <code>currentTime</code>.</p>\n\n<p>Если время последней проверки lastStarted не равно нулю - это значит, что таймер сейчас уже запущен. В этом случае мы вычисляем разницу между текущим временем и временем старта проверки. Это значение покажет, сколько реклама была видима с момента последнего старта детекции. Затем это значение прибавляем к уже имеющемуся <code>totalViewTime</code>. Обратите внимание не вызов <a class=\"page-not-created\" title=\"Документация об этом ещё не написана; пожалуйста, поспособствуйте её написанию!\"><code>parseFloat()</code></a>: так как все значения из Dataset - строки, JavaScript пытается соединить строки вместо того, чтобы просуммировать числа.</p>\n\n<p>В конце мы присваиваем <code>lastViewStarted</code> текущее значение. Это делается вне зависимости от того, был ли элемент видим во время вызова функции или нет - это позволяет таймеру рекламных блоков срабатывать всегда, когда эта функция вызывается. Это имеет смысл, потому что вызов может сработать ровно в тот момент, когда реклама только появилась.</p>\n\n<h3 id=\"показываем_таймер_рекламы\">Показываем таймер рекламы</h3>\n\n<p>Внутри каждого рекламного блока мы отображаем текущее значение общего времени видимости в формате мин:сек. Для этого мы передаём в функцию <code>drawAdTimer</code> контейнер:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">drawAdTimer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">adBox</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> timerBox <span class=\"token operator\">=</span> adBox<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".timer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> totalSeconds <span class=\"token operator\">=</span> adBox<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>totalViewTime <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> sec <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>totalSeconds <span class=\"token operator\">%</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> min <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>totalSeconds <span class=\"token operator\">/</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  timerBox<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> min <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> sec<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<p>Функция находит внутри переданного контейнера блок с классом <code>timer</code>. Затем забирает данные о текущем общем времени видимости блока. С помощью деления на 1000, 60 и 60 мы преобразуем результат в нужный формат (миллисекунды -&gt; секунды -&gt; минуты / секунды)</p>\n\n<p>Метод <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\"><code>String.padStart()</code></a> используется для того, чтобы убедиться, что число секунд всегда состоят из двух цифр.</p>\n\n<h3 id=\"строим_содержимое_страницы\">Строим содержимое страницы</h3>\n\n<p>Функция <code>buildContents()</code> вызывается при старте приложения. Она формирует тело статьи и добавляет рекламные блоки:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> loremIpsum <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing\"</span> <span class=\"token operator\">+</span>\n  <span class=\"token string\">\" elit. Cras at sem diam. Vestibulum venenatis massa in tincidunt\"</span> <span class=\"token operator\">+</span>\n  <span class=\"token string\">\" egestas. Morbi eu lorem vel est sodales auctor hendrerit placerat\"</span> <span class=\"token operator\">+</span>\n  <span class=\"token string\">\" risus. Etiam rutrum faucibus sem, vitae mattis ipsum ullamcorper\"</span> <span class=\"token operator\">+</span>\n  <span class=\"token string\">\" eu. Donec nec imperdiet nibh, nec vehicula libero. Phasellus vel\"</span> <span class=\"token operator\">+</span>\n  <span class=\"token string\">\" malesuada nulla. Aliquam sed magna aliquam, vestibulum nisi at,\"</span> <span class=\"token operator\">+</span>\n  <span class=\"token string\">\" cursus nunc.&lt;/p&gt;\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">buildContents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    contentBox<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span><span class=\"token function\">createArticle</span><span class=\"token punctuation\">(</span>loremIpsum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">loadRandomAd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n\n<p>Переменная <code>loremIpsum</code> содержит текст, который мы используем как тело статьи. Разумеется, в реальном мире вы будете забирать статьи из какой-то базы данных. Но это тема другой статьи, поэтому мы пошли простым путём.</p>\n\n<p><code>buildContents()</code> создаёт страницу с пятью статьями. Каждая нечётная статья содержит рекламные блоки.  Статьи будут вставлены в блок контента <a href=\"/ru/docs/Web/HTML/Element/main\"><code>&lt;main&gt;</code></a>. после того, как будет вызван метод <code>createArticle()</code>, который мы разберём позже.</p>\n\n<p>Рекламные блоки создаются с помощью функции <code>loadRandomAd()</code>. Эта функция создаёт и вставляет блоки одновременно. Как мы увидим позже, эта же функция может и заменить уже существующую рекламу. Но пока что просто добавим рекламу в существующий текст.</p>\n\n<h3 id=\"создаём_статью\">Создаём статью</h3>\n\n<p>Для создания элемента статьи <a href=\"/ru/docs/Web/HTML/Element/article\"><code>&lt;article&gt;</code></a> и её содержимого мы используем функцию <code>createArticle()</code>, которая в качестве входных данных принимает строку-текст статьи.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">createArticle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">contents</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> articleElem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"article\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  articleElem<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> nextArticleID<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> titleElem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  titleElem<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> nextArticleID<span class=\"token punctuation\">;</span>\n  titleElem<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> <span class=\"token string\">\"Article \"</span> <span class=\"token operator\">+</span> nextArticleID <span class=\"token operator\">+</span> <span class=\"token string\">\" title\"</span><span class=\"token punctuation\">;</span>\n  articleElem<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>titleElem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  articleElem<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">+=</span> contents<span class=\"token punctuation\">;</span>\n  nextArticleID <span class=\"token operator\">+=</span><span class=\"token number\">1</span> <span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> articleElem<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<p>Сперва, элемент <code>&lt;article&gt;</code> создаётся и ему присваивается уникальный ID <code>nextArticleID</code> (это просто счётчик от нуля до бесконечности). Затем мы создаём и добавляем элемент <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/HTML/Element/Heading_Elements\"><code>&lt;h2&gt;</code> <small>(en-US)</small></a> для заголовка и применяем HTML из переменной <code>contents</code>. Наконец, мы увеличиваем значение <code>nextArticleID</code> (таким образом, следующий элемент получит уникальный ID) и возвращаем элемент статьи обратно.</p>\n\n<h3 id=\"создание_рекламного_блока\">Создание рекламного блока</h3>\n\n<p>Функция <code>loadRandomAd()</code> имитирует загрузку рекламы и её добавление на страницу. Если вы не указываете значение для <code>replaceBox</code>, создаётся и применяется новый контейнер для рекламы. Если вы указали <code>replaceBox</code>, этот контейнер рассматривается, как уже существующий элемент. Вместо создания нового, существующий элемент изменяется, чтобы содержать актуальные данные. Это помогает избежать риска неэффективной перерисовки элементов, если вы сначала будете удалять элемент из DOM, а затем вставлять новый.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">loadRandomAd</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">replaceBox</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> ads <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">bgcolor</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#cec\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Eat Green Beans\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Make your mother proud—they're good for you!\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">bgcolor</span><span class=\"token operator\">:</span> <span class=\"token string\">\"aquamarine\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"MillionsOfFreeBooks.whatever\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Read classic literature online free!\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">bgcolor</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lightgrey\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"3.14 Shades of Gray: A novel\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Love really does make the world go round...\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">bgcolor</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#fee\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Flexbox Florist\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token string\">\"When life's layout gets complicated, send flowers.\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> adBox<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">,</span> timerElem<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> ad <span class=\"token operator\">=</span> ads<span class=\"token punctuation\">[</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ads<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>replaceBox<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    adObserver<span class=\"token punctuation\">.</span><span class=\"token function\">unobserve</span><span class=\"token punctuation\">(</span>replaceBox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    adBox <span class=\"token operator\">=</span> replaceBox<span class=\"token punctuation\">;</span>\n    title <span class=\"token operator\">=</span> replaceBox<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".title\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    body <span class=\"token operator\">=</span> replaceBox<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".body\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    timerElem <span class=\"token operator\">=</span> replaceBox<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".timer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    adBox <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    adBox<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">\"ad\"</span><span class=\"token punctuation\">;</span>\n    title <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    body <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    timerElem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    adBox<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    adBox<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    adBox<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>timerElem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  adBox<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> ad<span class=\"token punctuation\">.</span>bgcolor<span class=\"token punctuation\">;</span>\n\n  title<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">\"title\"</span><span class=\"token punctuation\">;</span>\n  body<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">\"body\"</span><span class=\"token punctuation\">;</span>\n  title<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> ad<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">;</span>\n  body<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> ad<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n\n  adBox<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>totalViewTime <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  adBox<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>lastViewStarted <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  timerElem<span class=\"token punctuation\">.</span>className<span class=\"token operator\">=</span><span class=\"token string\">\"timer\"</span><span class=\"token punctuation\">;</span>\n  timerElem<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> <span class=\"token string\">\"0:00\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>replaceBox<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    contentBox<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>adBox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  adObserver<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>adBox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<p>Вначале мы определяем массив <code>ads</code>. Этот массив содержит данные, необходимые для создания рекламных блоков. В реальном приложении, конечно, мы будем загружать эти данные из базы или, что более вероятно, из рекламного сервиса, который будет использовать какой-то API. Тем не менее, наша простая задача решается: каждый рекламный блок представлен тремя свойствами: фоновым цветом (<code>bgcolor</code>), заголовком (<code>title</code>) и текстовым содержимым (<code>body</code>).</p>\n\n<p>Затем мы определяем несколько переменных:</p>\n\n<dl>\n <dt id=\"adbox\"><code>adBox</code></dt>\n <dd>Определяет контейнер, содержащий рекламу. Вновь добавленные рекламные блоки будут добавлены к странице с помощью<a href=\"/ru/docs/Web/API/Document/createElement\"><code>Document.createElement()</code></a>. Когда замещается существующая реклама, в этой переменной указан элемент (<code>replaceBox</code>).</dd>\n <dt id=\"title\"><code>title</code></dt>\n <dd>Содержит ссылку на элемент <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/HTML/Element/Heading_Elements\"><code>&lt;h2&gt;</code> <small>(en-US)</small></a>.</dd>\n <dt id=\"body\"><code>body</code></dt>\n <dd>Содержит ссылку на элемент <a href=\"/ru/docs/Web/HTML/Element/p\"><code>&lt;p&gt;</code></a>.</dd>\n <dt id=\"timerelem\"><code>timerElem</code></dt>\n <dd>Содержит ссылку на элемент таймера <a href=\"/ru/docs/Web/HTML/Element/div\"><code>&lt;div&gt;</code></a>.</dd>\n</dl>\n\n<p>Случайный рекламный блок вычисляется с помощью <code>Math.floor(Math.random() * ads.length)</code>. Результат этой функции - целое число между 0 и максимальным количеством рекламных блоков. Соответствующий рекламный блок теперь доступен нам из переменной <code>adBox</code>.</p>\n\n<p>Если <code>replaceBox</code> содержит какое-то значение, мы рассматриваем его как элемент рекламного блока. Мы завершаем наблюдение за элементом с помощью <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IntersectionObserver/unobserve\"><code>IntersectionObserver.unobserve()</code> <small>(en-US)</small></a>. Затем собираем в локальные переменные данные из каждого свойства элемента: заголовок, тело и таймер.</p>\n\n<p>Если никакое значение не указано для <code>replaceBox</code>, мы создаём новый элемент. Создаётся новый контейнер <a href=\"/ru/docs/Web/HTML/Element/div\"><code>&lt;div&gt;</code></a>. Его CSS-параметры задаются с помощью класса <code>\"ad\"</code>. Затем создаются заголовок рекламного блока, его текст и таймер.  Соотстветвенно, это <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/HTML/Element/Heading_Elements\"><code>&lt;h2&gt;</code> <small>(en-US)</small></a>, <a href=\"/ru/docs/Web/HTML/Element/p\"><code>&lt;p&gt;</code></a> и <a href=\"/ru/docs/Web/HTML/Element/div\"><code>&lt;div&gt;</code></a>. Эти элементы применяются к контейнеру <code>adBox</code>.</p>\n\n<p>После этого разветвления наш код вновь возвращается к единому. Фоновый цвет рекламных блоков присваивается соответственно записям. Элементам присваиваются классы и содержимое.</p>\n\n<p>Наступаем время присвоить data-параметры, чтобы отслеживать видимость рекламных блоков с помощью установки <code>adBox.dataset.totalViewTime</code> и <code>adBox.dataset.lastViewStarted</code> равными нулю.</p>\n\n<p>Наконец, мы устанавливаем CSS-класс контейнеру таймера. С помощью этого класса приложение сможет с лёгкостью собирать данные и обновлять их для каждого таймера. По умолчанию, текст этого контейнера - \"0:00\".</p>\n\n<p>Если мы создаём новую рекламу, мы должны применить элемент к страницы с помощью <a href=\"/ru/docs/Web/API/Node/appendChild\" title=\"Document.appendChild()\"><code>Document.appendChild()</code></a>. Если мы лишь заменяем рекламный блок - он уже представлен в DOM и всё, что нам нужно сделать - это обновить его. Затем мы вызываем функцию <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IntersectionObserver/observe\"><code>observe()</code> <small>(en-US)</small></a>. <code>adObserver</code> начинает отслеживать изменения перекрытия элементов в видимой области приложения. С этого момента любой рекламный блок, который становится на 100% скрыт или хотя бы на один пиксель видим или преодолевает порог в 75% видимости в любом направлении, запускает вычисление таймингов и обновление содержимого таймеров.</p>\n\n<h3 id=\"замена_существующей_рекламы\">Замена существующей рекламы</h3>\n\n<p>Наша <a href=\"#handling_intersection_changes\">функция обработки перекрытия</a> отслеживает рекламные блоки. Когда они становятся на 100% и общее время их видимости достаточное для того, рекламный блок заменяется на новый. Когда это происходит, вызывается функция <code>replaceAd()</code>.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">replaceAd</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">adBox</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> visibleTime<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">updateAdTimer</span><span class=\"token punctuation\">(</span>adBox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  visibleTime <span class=\"token operator\">=</span> adBox<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>totalViewTime\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"  Replacing ad: \"</span> <span class=\"token operator\">+</span> adBox<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">+</span> <span class=\"token string\">\" - visible for \"</span> <span class=\"token operator\">+</span> visibleTime<span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">loadRandomAd</span><span class=\"token punctuation\">(</span>adBox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<p><code>replaceAd()</code> начинается с вызова <code>updateAdTimer()</code> для существующего рекламного блока, чтобы убедиться, что таймер обновлён. С помощью этого вызова мы убеждаемся, что <code>totalViewTime</code>, который мы используем для обработки, действительно совпадает с тем, что видел пользователь. Мы логируем это значение и загружаем в рекламный блок новые данные. Помните, что в реальном мире вы не должны логировать подобные вещи, а скорее использовать API для сбор логов.</p>\n</div>"}},{"type":"prose","value":{"id":"результат","title":"Результат","isH3":false,"content":"<p>Вы можете увидеть результат в окне ниже. Попробуйте экспериментировать с прокруткой и понаблюдайте за тем, как изменение видимости затрагивает каждый таймер. Кроме того, обратите внимание, что каждый рекламный блок обновляется только в том случае, если он уже был видим в течение минуты.</p>\n\n<p><iframe class=\"sample-code-frame\" title=\"fullpage example sample\" id=\"frame_fullpage_example\" width=\"750\" height=\"800\" src=\"https://yari-demos.prod.mdn.mozit.cloud/ru/docs/Web/API/Intersection_Observer_API/Timing_element_visibility/_sample_.fullpage_example.html\" loading=\"lazy\"></iframe></p>"}},{"type":"prose","value":{"id":"смотрите_также","title":"Смотрите также:","isH3":false,"content":"<ul>\n <li><a href=\"/en-US/docs/Web/API/Intersection_Observer_API\">Intersection Observer API</a></li>\n <li><a href=\"/en-US/docs/Web/API/Page_Visibility_API\">Page Visibility API</a></li>\n</ul>"}}],"toc":[{"text":"Структура приложения: HTML","id":"структура_приложения_html"},{"text":"Результат","id":"результат"},{"text":"Смотрите также:","id":"смотрите_также"}],"summary":"Intersection Observer API позволяет в асинхронном режиме уведомлять приложение о том, что какой-то интересующий нас элемент в той или иной степени перекрыл родительский или другой элемент, в том числе Document. В этой статье мы построим пример блога, в котором в DOM динамически встраиваются рекламные блоки. Затем, с помощью Intersection Observer API, мы выясним, сколько времени показывается каждая отдельная реклама пользователю. Когда такая реклама показывается дольше, чем одну минуту, мы заменяем её на новую.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Timing element visibility with the Intersection Observer API","locale":"en-US","native":"English (US)"},{"title":"Intersection Observer API を使用したタイミング要素の可視性","locale":"ja","native":"日本語"},{"title":"Timing element visibility with the Intersection Observer API","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ru/web/api/intersection_observer_api/timing_element_visibility","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/web/api/intersection_observer_api/timing_element_visibility/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Web","title":"Веб-технологии для разработчиков"},{"uri":"/ru/docs/Web/API","title":"Интерфейсы веб API"},{"uri":"/ru/docs/Web/API/Intersection_Observer_API","title":"Intersection Observer API"},{"uri":"/ru/docs/Web/API/Intersection_Observer_API/Timing_element_visibility","title":"Синхронизация видимости элемента с Intersection Observer API"}],"pageTitle":"Синхронизация видимости элемента с Intersection Observer API - Интерфейсы веб API | MDN","noIndexing":false}}