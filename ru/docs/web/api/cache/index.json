{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Cache","mdn_url":"/ru/docs/Web/API/Cache","locale":"ru","native":"Русский","sidebarHTML":"<ol><li><strong><a href=\"/ru/docs/Web/API/Service_Worker_API\">Service Worker API</a></strong></li><li><strong><a href=\"/ru/docs/Web/API/Cache\"><code>Cache</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Методы</summary><ol><li><a href=\"/ru/docs/Web/API/Cache/add\"><code>add()</code></a></li><li><a href=\"/ru/docs/Web/API/Cache/addAll\"><code>addAll()</code></a></li><li><a href=\"/ru/docs/Web/API/Cache/delete\"><code>delete()</code></a></li><li><a href=\"/ru/docs/Web/API/Cache/keys\"><code>keys()</code></a></li><li><a href=\"/ru/docs/Web/API/Cache/match\"><code>match()</code></a></li><li><a href=\"/ru/docs/Web/API/Cache/matchAll\"><code>matchAll()</code></a></li><li><a href=\"/ru/docs/Web/API/Cache/put\"><code>put()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Похожие страницы для Service Workers API</summary><ol><li><a href=\"/ru/docs/Web/API/CacheStorage\"><code>CacheStorage</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Client\"><code>Client</code> <small>(en-US)</small></a></li><li><a href=\"/ru/docs/Web/API/Clients\"><code>Clients</code></a></li><li><a href=\"/ru/docs/Web/API/ExtendableEvent\"><code>ExtendableEvent</code></a></li><li><a href=\"/ru/docs/Web/API/FetchEvent\"><code>FetchEvent</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/InstallEvent\"><code>InstallEvent</code> <small>(en-US)</small></a></li><li><a href=\"/ru/docs/Web/API/Navigator/serviceWorker\"><code>Navigator.serviceWorker</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/NotificationEvent\"><code>NotificationEvent</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PeriodicSyncEvent\"><code>PeriodicSyncEvent</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PeriodicSyncManager\"><code>PeriodicSyncManager</code> <small>(en-US)</small></a></li><li><a href=\"/ru/docs/Web/API/ServiceWorker\"><code>ServiceWorker</code></a></li><li><a href=\"/ru/docs/Web/API/ServiceWorkerContainer\"><code>ServiceWorkerContainer</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ServiceWorkerGlobalScope\"><code>ServiceWorkerGlobalScope</code> <small>(en-US)</small></a></li><li><a href=\"/ru/docs/Web/API/ServiceWorkerRegistration\"><code>ServiceWorkerRegistration</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SyncEvent\"><code>SyncEvent</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SyncManager\"><code>SyncManager</code> <small>(en-US)</small></a></li><li><a href=\"/ru/docs/Web/API/WindowClient\"><code>WindowClient</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p></p><div class=\"notecard experimental\" id=\"sect1\"><p><strong>Experimental:</strong> <strong>Это экспериментальная технология</strong><br>Так как спецификация этой технологии ещё не стабилизировалась, смотрите <a href=\"#browser_compatibility\">таблицу совместимости</a> по поводу использования в различных браузерах. Также заметьте, что синтаксис и поведение экспериментальной технологии может измениться в будущих версиях браузеров, вслед за изменениями спецификации.</p></div><p></p>\n\n<p>Интерфейс <strong><code>Cache</code></strong> представляет собой механизм хранения пары объектов <code><a href=\"http://fetch.spec.whatwg.org/#request\" class=\"external\" rel=\" noopener\">Request</a></code> / <code><a href=\"http://fetch.spec.whatwg.org/#response\" class=\"external\" rel=\" noopener\">Response</a>,</code> которые кешируются, например, как часть жизненного цикла <a href=\"/ru/docs/Web/API/ServiceWorker\"><code>ServiceWorker</code></a>. Заметьте, что интерфейс Cache доступен как в области видимости окна, так и в области видимости воркеров. Не обязательно использовать его вместе с сервис воркерами, даже если интерфейс определён в их спецификации.</p>\n\n<p>Для вызывающего скрипта может быть множество именованных объектов <code>Cache</code>. Разработчик сам определяет реализацию того, как скрипт (например, в  <a href=\"/ru/docs/Web/API/ServiceWorker\"><code>ServiceWorker</code></a>) управляет обновлением <code>Cache</code>. Записи в <code>Cache</code> не будут обновлены, пока не будет выполнен явный запрос; их время жизни не истечёт до момента удаления. Используйте <a href=\"/ru/docs/Web/API/CacheStorage/open\" title=\"CacheStorage.open(cacheName)\"><code>CacheStorage.open(cacheName)</code></a>, чтобы открыть определённый именованный объект <code>Cache </code>и затем вызывайте любые методы<code> Cache </code>для управления его состоянием.</p>\n\n<p>Вы также ответственны за периодическую очистку записей кеша. Каждый браузер имеет жёсткие ограничения на объем хранилища кеша, доступный для исходного кода. Браузер делает все, чтобы как можно лучше использовать дисковое пространство, но он может удалить хранилище кеша для скрипта. В основном, браузер либо удаляет все данные из кеша для скрипта, либо не удаляет ничего. Устанавливайте версии кеша в имени и используйте кеш только той версии, которая безопасна для использования. Смотрите <a href=\"/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#deleting_old_caches\">Удаление старого кеша</a>.</p>\n\n<div class=\"note notecard\" id=\"sect2\">\n<p><strong>Замечание</strong>: <a href=\"/ru/docs/Web/API/Cache/put\"><code>Cache.put</code></a>, <a href=\"/ru/docs/Web/API/Cache/add\"><code>Cache.add</code></a> и <a href=\"/ru/docs/Web/API/Cache/addAll\"><code>Cache.addAll</code></a> допускают сохранение в кеш только <code>GET</code> запросов.</p>\n</div>\n\n<div class=\"note notecard\" id=\"sect3\">\n<p><strong>Замечание</strong>: Изначально, реализация Cache (как в Blink, так и в Gecko) возвращала успешное завершение для промисов <a href=\"/ru/docs/Web/API/Cache/add\"><code>Cache.add</code></a>, <a href=\"/ru/docs/Web/API/Cache/addAll\"><code>Cache.addAll</code></a> и <a href=\"/ru/docs/Web/API/Cache/put\"><code>Cache.put</code></a>, когда тело ответа было полностью помещено в хранилище. Более поздние версии используют новейший язык, утверждая, что браузер может разрешить промис как только запись будет записана в базу данных, даже если тело ответа все ещё загружается в потоке.</p>\n</div>\n\n<div class=\"note notecard\" id=\"sect4\">\n<p><strong>Замечание:</strong> Начиная с Chrome 46, Cache API будут хранить запросы только от безопасных источников, то есть, доступных через HTTPS.</p>\n</div>\n\n<div class=\"note notecard\" id=\"sect5\">\n<p><strong>Замечание</strong>: Алгоритм сопоставления ключей зависит от заголовка <a href=\"https://www.fastly.com/blog/best-practices-for-using-the-vary-header\" class=\"external\" rel=\" noopener\">VARY</a> хранимого значения. Таким образом, сопоставление нового ключа требует одновременно как проверки самого ключа, так и значений для записей в Cache.</p>\n</div>\n\n<div class=\"note notecard\" id=\"sect6\">\n<p><strong>Замечание:</strong> Кеширующие API не приветствуют заголовки кеширования HTTP.</p>\n</div>"}},{"type":"prose","value":{"id":"методы","title":"Методы","isH3":false,"content":"<dl>\n <dt id=\"cache.matchrequest_options\"><a href=\"/ru/docs/Web/API/Cache/match\" title=\"Cache.match(request, options)\"><code>Cache.match(request, options)</code></a></dt>\n <dd>Возвращает <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>, который успешно завершается с нахождением первого совпадения для данного запроса в объекте <a href=\"/ru/docs/Web/API/Cache\" aria-current=\"page\"><code>Cache</code></a>.</dd>\n <dt id=\"cache.matchallrequest_options\"><a href=\"/ru/docs/Web/API/Cache/matchAll\" title=\"Cache.matchAll(request, options)\"><code>Cache.matchAll(request, options)</code></a></dt>\n <dd>Возвращает <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>, который успешно завершается и возвращает массив всех найденных совпадений для данного запроса в объекте  <a href=\"/ru/docs/Web/API/Cache\" aria-current=\"page\"><code>Cache</code></a>.</dd>\n <dt id=\"cache.addrequest\"><a href=\"/ru/docs/Web/API/Cache/add\" title=\"Cache.add(request)\"><code>Cache.add(request)</code></a></dt>\n <dd>Принимает в качестве параметра URL, получает данные по нему и добавляет полученный объект ответа в заданный кеш. Функциональный эквивалент  вызову fetch() с последующим вызовом Cache.put() для добавления результата в кеш.</dd>\n <dt id=\"cache.addallrequests\"><a href=\"/ru/docs/Web/API/Cache/addAll\" title=\"Cache.addAll(requests)\"><code>Cache.addAll(requests)</code></a></dt>\n <dd>Принимает массив URL в качестве параметра, получает данные по ним, добавляет полученные объекты ответов в заданный кеш.</dd>\n <dt id=\"cache.putrequest_response\"><a href=\"/ru/docs/Web/API/Cache/put\" title=\"Cache.put(request, response)\"><code>Cache.put(request, response)</code></a></dt>\n <dd>Принимает запрос и ответ на него и добавляет их в заданный кеш.</dd>\n <dt id=\"cache.deleterequest_options\"><a href=\"/ru/docs/Web/API/Cache/delete\" title=\"Cache.delete(request, options)\"><code>Cache.delete(request, options)</code></a></dt>\n <dd>Находит запись <a href=\"/ru/docs/Web/API/Cache\" aria-current=\"page\"><code>Cache</code></a>, чей ключ является запросом, и, в случае нахождения, удаляет запись <a href=\"/ru/docs/Web/API/Cache\" aria-current=\"page\"><code>Cache</code></a>  и возвращает <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>, успешно завершающийся со значением <code>true</code>. Если же запись  <a href=\"/ru/docs/Web/API/Cache\" aria-current=\"page\"><code>Cache</code></a> не найдена, возвращается <code>false</code>.</dd>\n <dt id=\"cache.keysrequest_options\"><a href=\"/ru/docs/Web/API/Cache/keys\" title=\"Cache.keys(request, options)\"><code>Cache.keys(request, options)</code></a></dt>\n <dd>Возвращает <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>, который отдаёт массив ключей <a href=\"/ru/docs/Web/API/Cache\" aria-current=\"page\"><code>Cache</code></a>.</dd>\n</dl>"}},{"type":"prose","value":{"id":"примеры","title":"Примеры","isH3":false,"content":"<p>Этот пример кода из <a href=\"https://github.com/GoogleChrome/samples/blob/gh-pages/service-worker/selective-caching/service-worker.js\" class=\"external\" rel=\" noopener\">примера выборочного кеширования сервис воркера</a>. (смотрите <a href=\"https://googlechrome.github.io/samples/service-worker/selective-caching/\" class=\"external\" rel=\" noopener\">работа выборочного кеширования</a>). В коде используется <a href=\"/ru/docs/Web/API/CacheStorage/open\" title=\"CacheStorage.open(cacheName)\"><code>CacheStorage.open(cacheName)</code></a> для открытия любых объектов <a href=\"/ru/docs/Web/API/Cache\" aria-current=\"page\"><code>Cache</code></a> с заголовком Content-Type, начинающимся с <code>font/</code>.</p>\n\n<p>Далее используется <a href=\"/ru/docs/Web/API/Cache/match\" title=\"Cache.match(request, options)\"><code>Cache.match(request, options)</code></a> для определения того, находится ли уже совпадающий шрифт в кеше, и, если так, то возвращает его. Если же совпадающего шрифта нет, код получает этот шрифт по сети и использует <a href=\"/ru/docs/Web/API/Cache/put\" title=\"Cache.put(request, response)\"><code>Cache.put(request, response)</code></a> для кеширования полученного ресурса.</p>\n\n<p>Код обрабатывает исключения, возможные при операции <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/fetch\"><code>fetch()</code> <small>(en-US)</small></a>. Заметьте, что HTTP-ответ с ошибкой  (например, 404) не будет вызывать исключения. Будет возвращён нормальный объект ответа с установленным соответствующим кодом ошибки.</p>\n\n<p>Также, пример описывает лучшие практики по заданию версий кеша при работе с сервис воркерами. И хотя в примере лишь один кеш, тот же подход может быть использован для множества кешей. Он сравнивает сокращённый идентификатор кеша с определённым, версионным именем кеша. Код также удаляет весь кеш, для которого не определено имя <code>CURRENT_CACHES</code>.</p>\n\n<p>В примере кода \"кеш\" это атрибут WorkerGlobalScope сервис воркеров. Он содержит объект CacheStorage, через который можно получить доступ к <a href=\"/en-US/docs/Web/API/CacheStorage\">CacheStorage</a>  API.</p>\n\n<div class=\"note notecard\" id=\"sect7\"><strong>Замечание:</strong> В Chrome, откройте chrome://inspect/#service-workers и кликните по ссылке \"inspect\" под зарегистрированным сервис воркером чтобы увидеть записи журнала по различным действиям выполняемым скриптом <a href=\"https://github.com/GoogleChrome/samples/blob/gh-pages/service-worker/selective-caching/service-worker.js\" class=\"external\" rel=\" noopener\">service-worker.js</a>.</div>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> <span class=\"token constant\">CACHE_VERSION</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Сокращённый идентификатор привязанный к определённой версии кеша.</span>\n<span class=\"token keyword\">var</span> <span class=\"token constant\">CURRENT_CACHES</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">font</span><span class=\"token operator\">:</span> <span class=\"token string\">'font-cache-v'</span> <span class=\"token operator\">+</span> <span class=\"token constant\">CACHE_VERSION</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nself<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'activate'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> expectedCacheNames <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CURRENT_CACHES</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">CURRENT_CACHES</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Активный воркер не будет рассматриваться как активированный, пока promise не разрешится успешно.</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span>\n    caches<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cacheNames</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>\n        cacheNames<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cacheName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>expectedCacheNames<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>cacheName<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Deleting out of date cache:'</span><span class=\"token punctuation\">,</span> cacheName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>cacheName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nself<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fetch'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Handling fetch event for'</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>\n\n    <span class=\"token comment\">// Открывает объекты Cache, начинающиеся с 'font'.</span>\n    caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CURRENT_CACHES</span><span class=\"token punctuation\">[</span><span class=\"token string\">'font'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cache</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Found response in cache:'</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n          <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// Обрабатывает исключения от match() или fetch().</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error in fetch handler:'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>"}},{"type":"specifications","value":{"title":"Спецификации","id":"спецификации","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/ServiceWorker/#cache-interface","title":"Service Workers 1"}],"query":"api.Cache"}},{"type":"browser_compatibility","value":{"title":"Совместимость с браузерами","id":"совместимость_с_браузерами","isH3":false,"query":"api.Cache","dataURL":"/ru/docs/Web/API/Cache/bcd.json"}},{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p></p><p></p>"}},{"type":"prose","value":{"id":"смотрите_также","title":"Смотрите также","isH3":false,"content":"<ul>\n <li><a href=\"/en-US/docs/Web/API/ServiceWorker_API/Using_Service_Workers\">Использование Сервис Воркеров</a></li>\n <li><a class=\"external external-icon\" href=\"https://github.com/mdn/sw-test\" rel=\" noopener\">Базовый пример кода для Сервис воркеров</a></li>\n <li><a class=\"external external-icon\" href=\"https://jakearchibald.github.io/isserviceworkerready/\" rel=\" noopener\">Готов ли Сервис Воркер?</a></li>\n <li><a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a></li>\n <li><a href=\"/en-US/docs/Web/Guide/Performance/Using_web_workers\">Использование web воркеров</a></li>\n</ul>"}}],"toc":[{"text":"Методы","id":"методы"},{"text":"Примеры","id":"примеры"},{"text":"Спецификации","id":"спецификации"},{"text":"Совместимость с браузерами","id":"совместимость_с_браузерами"},{"text":"Смотрите также","id":"смотрите_также"}],"summary":"Интерфейс Cache представляет собой механизм хранения пары объектов Request / Response, которые кешируются, например, как часть жизненного цикла ServiceWorker. Заметьте, что интерфейс Cache доступен как в области видимости окна, так и в области видимости воркеров. Не обязательно использовать его вместе с сервис воркерами, даже если интерфейс определён в их спецификации.","popularity":0.0004,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Cache","locale":"en-US","native":"English (US)"},{"title":"Cache","locale":"fr","native":"Français"},{"title":"Cache","locale":"ja","native":"日本語"},{"title":"Cache","locale":"ko","native":"한국어"},{"title":"Cache","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Cache","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ru/web/api/cache","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/web/api/cache/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Web","title":"Веб-технологии для разработчиков"},{"uri":"/ru/docs/Web/API","title":"Интерфейсы веб API"},{"uri":"/ru/docs/Web/API/Cache","title":"Cache"}],"pageTitle":"Cache - Интерфейсы веб API | MDN","noIndexing":false}}