{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Использование шейдеров для задания цвета в WebGL","mdn_url":"/ru/docs/Web/API/WebGL_API/Tutorial/Using_shaders_to_apply_color_in_WebGL","locale":"ru","native":"Русский","sidebarHTML":"\n <ol>\n  <li><a href=\"/ru/docs/Web/API/WebGL_API\"><strong>WebGL API</strong></a></li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Руководство WebGL</summary>\n      <ol>\n        <li><a href=\"/ru/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL\">Начало работы с WebGL</a></li>\n        <li><a href=\"/ru/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context\">Добавление двухмерного контента в контекст WebGL</a></li>\n        <li><a href=\"/ru/docs/Web/API/WebGL_API/Tutorial/Using_shaders_to_apply_color_in_WebGL\">Использование шейдеров для задания цвета в WebGL</a></li>\n        <li><a href=\"/ru/docs/Web/API/WebGL_API/Tutorial/Animating_objects_with_WebGL\">Оживление объектов при помощи WebGL</a></li>\n        <li><a href=\"/ru/docs/Web/API/WebGL_API/Tutorial/Creating_3D_objects_using_WebGL\">Создание 3D с помощью WebGL</a></li>\n        <li><a href=\"/ru/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL\">Использование текстур WebGL</a></li>\n        <li><a href=\"/ru/docs/Web/API/WebGL_API/Tutorial/Lighting_in_WebGL\">Освещение WebGL</a></li>\n        <li><a href=\"/ru/docs/Web/API/WebGL_API/Tutorial/Animating_textures_in_WebGL\">Анимация текстур WebGL</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Примеры и статьи</summary>\n      <ol>\n        <li><a href=\"/ru/docs/Web/API/WebGL_API/Matrix_math_for_the_web\">Математическая матрица для Веба</a></li>\n        <li><a href=\"/ru/docs/Web/API/WebGL_API/WebGL_model_view_projection\">WebGL модель, представление, проекция</a></li>\n        <li><a href=\"/ru/docs/Web/API/WebGL_API/WebGL_best_practices\">WebGL лучшие практики</a></li>\n        <li><a href=\"/ru/docs/Web/API/WebGL_API/Using_Extensions\">Использование расширений WebGL</a></li>\n        <li><a href=\"/ru/docs/Web/API/WebGL_API/Basic_2D_animation_example\">A basic 2D WebGL animation example</a></li>\n        <li><a href=\"/ru/docs/Web/API/WebGL_API/By_example\">WebGL by example</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Интерфейсы</summary>\n      <ol>\n        <li><a href=\"/ru/docs/Web/API/WebGLRenderingContext\"><code>WebGLRenderingContext</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGL2RenderingContext\"><code>WebGL2RenderingContext</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLActiveInfo\"><code>WebGLActiveInfo</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLBuffer\"><code>WebGLBuffer</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLContextEvent\"><code>WebGLContextEvent</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLFramebuffer\"><code>WebGLFramebuffer</code> <small>(en-US)</small></a></li>\n        <li><a href=\"/ru/docs/Web/API/WebGLProgram\"><code>WebGLProgram</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLQuery\"><code>WebGLQuery</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLRenderbuffer\"><code>WebGLRenderbuffer</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLSampler\"><code>WebGLSampler</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLShader\"><code>WebGLShader</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLShaderPrecisionFormat\"><code>WebGLShaderPrecisionFormat</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLSync\"><code>WebGLSync</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLTexture\"><code>WebGLTexture</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLTransformFeedback\"><code>WebGLTransformFeedback</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLUniformLocation\"><code>WebGLUniformLocation</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLVertexArrayObject\"><code>WebGLVertexArrayObject</code> <small>(en-US)</small></a></li>\n      </ol>\n    </details>\n  </li>\n\n  <li><strong><a href=\"/ru/docs/MDN\">Доментация:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Внести вклад</summary>\n      <ol>\n        <li><a href=\"/ru/docs/MDN\">Проект MDN</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p></p> <ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ru/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context\">« Предыдущая статья</a></li>\n    <li><a class=\"button minimal\" href=\"/ru/docs/Web/API/WebGL_API/Tutorial/Animating_objects_with_WebGL\">Следующая статья  »</a></li>\n</ul><p></p>\n\n<p>В <a href=\"/ru/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context\" title=\"en/WebGL/Adding 2D content to a WebGL context\">предыдущей статье</a> мы создали квадрат, следующим шагом будет добавление ему цвета. Мы можем сделать это, используя шейдеры.</p>"}},{"type":"prose","value":{"id":"задание_цвета_вершинам","title":"Задание цвета вершинам","isH3":false,"content":"<p>В GL, объекты строятся с использованием наборов вершин, для каждой из которых задаётся положение в пространстве и цвет. По умолчанию, цвета всех остальных пикселей (и все их другие атрибуты, включая положение в пространстве) вычисляются с использованием линейной интерполяции, автоматически создавая плавный градиент. В прошлый раз наш вершинный шейдер не задавал определённых цветов вершинам, а фрагментный шейдер назначил фиксированный белый цвет каждому пикселю, поэтому квадрат целиком был отрисован белым цветом.</p>\n\n<p>Предположим, что мы хотим отрисовать градиент, в котором каждый угол квадрата разного цвета: красного, синего, зелёного и белый. Первое, что необходимо сделать - назначить эти цвета четырём вершинам. Чтобы сделать это, нам сначала необходимо создать массив цветов вершин, а затем сохранить его в WebGL буфер. Мы сделаем это, добавив следующий код в нашу функцию <code>initBuffers()</code>:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">var</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// белый</span>\n    <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// красный</span>\n    <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// зелёный</span>\n    <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span>     <span class=\"token comment\">// синий</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  squareVerticesColorBuffer <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">createBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindBuffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> squareVerticesColorBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">bufferData</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float32Array</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">STATIC_DRAW</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n\n<p>Этот код начинается с создания JavaScript массива, содержащего четыре вектора, содержащих по четыре значения каждый - по одному вектору для задания цвета каждой вершине. Затем новый WebGL буфер выделяет место в памяти для хранения этих цветов и массив приводится к вещественному формату WebGL и сохраняется в буфер.</p>\n\n<p>Чтобы теперь использовать эти цвета, вершинному шейдеру необходимо обновиться, поместив соответствующий цвет из буфера цвета:</p>\n\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shader-vs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>x-shader/x-vertex<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n      attribute vec3 aVertexPosition<span class=\"token punctuation\">;</span>\n      attribute vec4 aVertexColor<span class=\"token punctuation\">;</span>\n\n      uniform mat4 uMVMatrix<span class=\"token punctuation\">;</span>\n      uniform mat4 uPMatrix<span class=\"token punctuation\">;</span>\n\n      varying lowp vec4 vColor<span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">void</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        gl_Position <span class=\"token operator\">=</span> uPMatrix <span class=\"token operator\">*</span> uMVMatrix <span class=\"token operator\">*</span> <span class=\"token function\">vec4</span><span class=\"token punctuation\">(</span>aVertexPosition<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vColor <span class=\"token operator\">=</span> aVertexColor<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n\n<p>Ключевым отличием здесь является то, что для каждой вершины, мы задаём цвет на соответствующее значение из массива цвета.</p>"}},{"type":"prose","value":{"id":"окраска_фрагментов","title":"Окраска фрагментов","isH3":false,"content":"<p>Чтобы напомнить, как фрагментный шейдер выглядел ранее, ниже приведён его код:</p>\n\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shader-fs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>x-shader/x-fragment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n      <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">void</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        gl_FragColor <span class=\"token operator\">=</span> <span class=\"token function\">vec4</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n\n<p>Для того, чтобы подобрать интерполируемый цвет каждому пикселю, нам просто необходимо изменить его, получив значение из переменной <code>vColor</code>:</p>\n\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shader-fs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>x-shader/x-fragment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    \tvarying lowp vec4 vColor<span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">void</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        gl_FragColor <span class=\"token operator\">=</span> vColor<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n\n<p>Это простое изменение, но с помощью него каждый фрагмент вместо фиксированного значения получает значение интерполируемого цвета на основе его расположения относительно вершин.</p>"}},{"type":"prose","value":{"id":"отрисовка_с_использованием_цветов","title":"Отрисовка с использованием цветов","isH3":false,"content":"<p>Далее, необходимо добавить код в процедуру <code>initShaders()</code> для задания значений атрибута цвета для шейдерной программы:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  vertexColorAttribute <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">\"aVertexColor\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">enableVertexAttribArray</span><span class=\"token punctuation\">(</span>vertexColorAttribute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Затем, drawScene() может быть исправлен на фактическое использование этих цветов при отрисовке квадрата:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindBuffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> squareVerticesColorBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">vertexAttribPointer</span><span class=\"token punctuation\">(</span>vertexColorAttribute<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">FLOAT</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>На этом этапе, вы можете посмотреть <a href=\"http://mdn.github.io/webgl-examples/tutorial/sample3/index.html\" title=\"https://developer.mozilla.org/samples/webgl/sample3/index.html\" class=\"external\" rel=\" noopener\">результат работы написанного кода</a>, если используете браузер, поддерживающий WebGL. Вы увидите нечто похожее на следующий рисунок (расположенный по центру в большом чёрном поле):</p>\n\n<p><img alt=\"screenshot.png\" class=\"default internal\" src=\"/@api/deki/files/4081/=screenshot.png\" loading=\"lazy\"></p>\n\n<p></p><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ru/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context\">« Предыдущая статья</a></li>\n    <li><a class=\"button minimal\" href=\"/ru/docs/Web/API/WebGL_API/Tutorial/Animating_objects_with_WebGL\">Следующая статья  »</a></li>\n</ul><p></p>"}}],"toc":[{"text":"Задание цвета вершинам","id":"задание_цвета_вершинам"},{"text":"Окраска фрагментов","id":"окраска_фрагментов"},{"text":"Отрисовка с использованием цветов","id":"отрисовка_с_использованием_цветов"}],"summary":"В предыдущей статье мы создали квадрат, следующим шагом будет добавление ему цвета. Мы можем сделать это, используя шейдеры.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using shaders to apply color in WebGL","locale":"en-US","native":"English (US)"},{"title":"Utilizar los shaders para aplicar color en WebGL","locale":"es","native":"Español"},{"title":"Ajouter des couleurs avec les nuanceurs","locale":"fr","native":"Français"},{"title":"シェーダーを用いた WebGL での色の指定","locale":"ja","native":"日本語"},{"title":"WebGL에서 셰이더를 사용하여 색상 적용하기","locale":"ko","native":"한국어"},{"title":"使用着色器将颜色应用于 WebGL","locale":"zh-CN","native":"中文 (简体)"},{"title":"使用 shaders 在 WebGL 上色","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ru/web/api/webgl_api/tutorial/using_shaders_to_apply_color_in_webgl","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/web/api/webgl_api/tutorial/using_shaders_to_apply_color_in_webgl/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Web","title":"Веб-технологии для разработчиков"},{"uri":"/ru/docs/Web/API","title":"Интерфейсы веб API"},{"uri":"/ru/docs/Web/API/WebGL_API","title":"WebGL"},{"uri":"/ru/docs/Web/API/WebGL_API/Tutorial","title":"WebGL tutorial"},{"uri":"/ru/docs/Web/API/WebGL_API/Tutorial/Using_shaders_to_apply_color_in_WebGL","title":"Использование шейдеров для задания цвета в WebGL"}],"pageTitle":"Использование шейдеров для задания цвета в WebGL - Интерфейсы веб API | MDN","noIndexing":false}}