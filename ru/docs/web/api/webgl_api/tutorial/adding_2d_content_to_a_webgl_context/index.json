{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Добавление двухмерного контента в контекст WebGL","mdn_url":"/ru/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context","locale":"ru","native":"Русский","sidebarHTML":"\n <ol>\n  <li><a href=\"/ru/docs/Web/API/WebGL_API\"><strong>WebGL API</strong></a></li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Руководство WebGL</summary>\n      <ol>\n        <li><a href=\"/ru/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL\">Начало работы с WebGL</a></li>\n        <li><a href=\"/ru/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context\">Добавление двухмерного контента в контекст WebGL</a></li>\n        <li><a href=\"/ru/docs/Web/API/WebGL_API/Tutorial/Using_shaders_to_apply_color_in_WebGL\">Использование шейдеров для задания цвета в WebGL</a></li>\n        <li><a href=\"/ru/docs/Web/API/WebGL_API/Tutorial/Animating_objects_with_WebGL\">Оживление объектов при помощи WebGL</a></li>\n        <li><a href=\"/ru/docs/Web/API/WebGL_API/Tutorial/Creating_3D_objects_using_WebGL\">Создание 3D с помощью WebGL</a></li>\n        <li><a href=\"/ru/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL\">Использование текстур WebGL</a></li>\n        <li><a href=\"/ru/docs/Web/API/WebGL_API/Tutorial/Lighting_in_WebGL\">Освещение WebGL</a></li>\n        <li><a href=\"/ru/docs/Web/API/WebGL_API/Tutorial/Animating_textures_in_WebGL\">Анимация текстур WebGL</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Примеры и статьи</summary>\n      <ol>\n        <li><a href=\"/ru/docs/Web/API/WebGL_API/Matrix_math_for_the_web\">Математическая матрица для Веба</a></li>\n        <li><a href=\"/ru/docs/Web/API/WebGL_API/WebGL_model_view_projection\">WebGL модель, представление, проекция</a></li>\n        <li><a href=\"/ru/docs/Web/API/WebGL_API/WebGL_best_practices\">WebGL лучшие практики</a></li>\n        <li><a href=\"/ru/docs/Web/API/WebGL_API/Using_Extensions\">Использование расширений WebGL</a></li>\n        <li><a href=\"/ru/docs/Web/API/WebGL_API/Basic_2D_animation_example\">A basic 2D WebGL animation example</a></li>\n        <li><a href=\"/ru/docs/Web/API/WebGL_API/By_example\">WebGL by example</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Интерфейсы</summary>\n      <ol>\n        <li><a href=\"/ru/docs/Web/API/WebGLRenderingContext\"><code>WebGLRenderingContext</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGL2RenderingContext\"><code>WebGL2RenderingContext</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLActiveInfo\"><code>WebGLActiveInfo</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLBuffer\"><code>WebGLBuffer</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLContextEvent\"><code>WebGLContextEvent</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLFramebuffer\"><code>WebGLFramebuffer</code> <small>(en-US)</small></a></li>\n        <li><a href=\"/ru/docs/Web/API/WebGLProgram\"><code>WebGLProgram</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLQuery\"><code>WebGLQuery</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLRenderbuffer\"><code>WebGLRenderbuffer</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLSampler\"><code>WebGLSampler</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLShader\"><code>WebGLShader</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLShaderPrecisionFormat\"><code>WebGLShaderPrecisionFormat</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLSync\"><code>WebGLSync</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLTexture\"><code>WebGLTexture</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLTransformFeedback\"><code>WebGLTransformFeedback</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLUniformLocation\"><code>WebGLUniformLocation</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLVertexArrayObject\"><code>WebGLVertexArrayObject</code> <small>(en-US)</small></a></li>\n      </ol>\n    </details>\n  </li>\n\n  <li><strong><a href=\"/ru/docs/MDN\">Доментация:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Внести вклад</summary>\n      <ol>\n        <li><a href=\"/ru/docs/MDN\">Проект MDN</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p></p> <ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ru/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL\">« Предыдущая статья</a></li>\n    <li><a class=\"button minimal\" href=\"/ru/docs/Web/API/WebGL_API/Tutorial/Using_shaders_to_apply_color_in_WebGL\">Следующая статья  »</a></li>\n</ul><p></p>\n\n<p>После того, как вы успешно <a href=\"/ru/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL\" title=\"en/WebGL/Getting started with WebGL\">создали контекст WebGL</a>, вы можете начинать отображать в нем графические объекты. Простейшая вещь, которую вы можете сделать - отрисовать простой квадрат без текстуры. Итак, начнём построение кода для отрисовки квадрата.</p>"}},{"type":"prose","value":{"id":"отрисовка_сцены","title":"Отрисовка сцены","isH3":false,"content":"<p>На данном этапе очень важно понять одну вещь: не смотря на то, что мы в этом примере отрисовываем двухмерный объект, мы по-прежнему отрисовываем его в трёхмерном пространстве. По существу, нам по-прежнему необходимо создать шейдеры, которые будут освещать нашу простую сцену,  и отрисовать наш объект. На данном шаге определим как квадрат будет освещаться.</p>"}},{"type":"prose","value":{"id":"инициализация_шейдеров","title":"Инициализация шейдеров","isH3":true,"content":"<p>Шейдеры задаются при помощи языка высокого уровня для программирования шейдеров - <a class=\"external\" href=\"https://www.khronos.org/registry/gles/specs/2.0/GLSL_ES_Specification_1.0.17.pdf\" rel=\" noopener\">OpenGL ES Shading Language</a>. Для того, чтобы сделать проще процесс поддержки и обновления нашего контента, мы можем фактически написать наш код, загружающий шейдеры и помещающий их в HTML документ, вместо того, чтобы встраивать его весь в JavaScript. Давайте рассмотрим нашу процедуру <code>initShaders()</code>, которая выполнит эту задачу:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">initShaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> fragmentShader <span class=\"token operator\">=</span> <span class=\"token function\">getShader</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> <span class=\"token string\">\"shader-fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> vertexShader <span class=\"token operator\">=</span> <span class=\"token function\">getShader</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> <span class=\"token string\">\"shader-vs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// создать шейдерную программу</span>\n\n  shaderProgram <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">createProgram</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">attachShader</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> vertexShader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">attachShader</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> fragmentShader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">linkProgram</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Если создать шейдерную программу не удалось, вывести предупреждение</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>gl<span class=\"token punctuation\">.</span><span class=\"token function\">getProgramParameter</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">LINK_STATUS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unable to initialize the shader program.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">useProgram</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  vertexPositionAttribute <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">\"aVertexPosition\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">enableVertexAttribArray</span><span class=\"token punctuation\">(</span>vertexPositionAttribute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div>\n\n<p>Этой процедурой загружаются две шейдерные программы. Первая - фрагментный шейдер, загружается из элемента <a href=\"/en-US/HTML/Element/Script\" title=\"En/HTML/Element/Script\"><code>script</code></a> с ID \"shader-fs\". Вторая - вершинный шейдер, загружается из элемента <a href=\"/en-US/HTML/Element/Script\" title=\"En/HTML/Element/Script\"><code>script</code></a> с ID \"shader-vs\". Мы рассмотрим функцию <code>getShader()</code> чуть ниже. Эта процедура фактически отвечает за извлечение шейдерных программ из DOM.</p>\n\n<p>Затем мы создаём шейдерную программу, вызывая функцию <code>createProgram()</code> объекта WebGL, присоединяя два шейдера к нему, и связывая шейдерную программу. После выполнения этого, проверяется значение параметра <code>LINK_STATUS</code> объекта <code>gl</code> для того, чтобы убедиться, что программа успешно скомпонована. Если это так, мы активируем новую шейдерную программу.</p>"}},{"type":"prose","value":{"id":"загрузка_шейдеров_из_dom","title":"Загрузка шейдеров из DOM","isH3":true,"content":"<p>Функция <code>getShader()</code> получает из DOM шейдерную программу с определённым именем, возвращая скомпилированную шейдерную программу вызывающему, или значение null, если шейдерная программа не может быть загружена или скомпилирована.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">getShader</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">gl<span class=\"token punctuation\">,</span> id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> shaderScript<span class=\"token punctuation\">,</span> theSource<span class=\"token punctuation\">,</span> currentChild<span class=\"token punctuation\">,</span> shader<span class=\"token punctuation\">;</span>\n\n  shaderScript <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>shaderScript<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  theSource <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  currentChild <span class=\"token operator\">=</span> shaderScript<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>currentChild<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentChild<span class=\"token punctuation\">.</span>nodeType <span class=\"token operator\">==</span> currentChild<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXT_NODE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      theSource <span class=\"token operator\">+=</span> currentChild<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    currentChild <span class=\"token operator\">=</span> currentChild<span class=\"token punctuation\">.</span>nextSibling<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n\n<p>Как только элемент с указанным ID найден, его текст помещается в переменную <code>theSource</code>.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shaderScript<span class=\"token punctuation\">.</span>type <span class=\"token operator\">==</span> <span class=\"token string\">\"x-shader/x-fragment\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    shader <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">createShader</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">FRAGMENT_SHADER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shaderScript<span class=\"token punctuation\">.</span>type <span class=\"token operator\">==</span> <span class=\"token string\">\"x-shader/x-vertex\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    shader <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">createShader</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">VERTEX_SHADER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">// неизвестный тип шейдера</span>\n     <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n\n<p>После того, как код для шейдера считан, мы проверяем MIME тип шейдерного объекта, чтобы определить является он вершинным (MIME type \"x-shader/x-vertex\") или фрагментным (MIME type \"x-shader/x-fragment\") шейдером, а затем создаём соответствующий тип шейдера из полученного исходного кода.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  gl<span class=\"token punctuation\">.</span><span class=\"token function\">shaderSource</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">,</span> theSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// скомпилировать шейдерную программу</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">compileShader</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Проверить успешное завершение компиляции</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>gl<span class=\"token punctuation\">.</span><span class=\"token function\">getShaderParameter</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">COMPILE_STATUS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"An error occurred compiling the shaders: \"</span> <span class=\"token operator\">+</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getShaderInfoLog</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> shader<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n\n<p>В результате, исходный код, передан в переменную shader и скомпилирован. Если произошли ошибки во время компиляции кода шейдера, мы отображаем окно с предупреждением и возвращаем значение null; Иначе, возвращается новый скомпилированный шейдер.</p>"}},{"type":"prose","value":{"id":"шейдеры","title":"Шейдеры","isH3":true,"content":"<p>После этого нам необходимо добавить шейдерные программы в HTML описывающий наш документ. Подробная информация о том, как работают шейдеры выходит за рамки этой статьи, как и впрочем описание синтаксиса языка программирования шейдеров.</p>\n\n<h4 id=\"фрагментный_шейдер\">Фрагментный шейдер</h4>\n\n<p>Каждый пиксель в полигоне называется <strong>фрагментом</strong> в языке GL. Фрагментные шейдеры необходимы для назначения цвета для каждого пикселя. В данном случае, мы просто назначаем белый цвет каждому пикселю.</p>\n\n<p><code>gl_FragColor</code> - встроенная переменная GL, используемая для управления цветом фрагментов. Устанавливая её значение назначаем цвет пикселям. Ниже приведён пример этого.</p>\n\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shader-fs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>x-shader/x-fragment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">void</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    gl_FragColor <span class=\"token operator\">=</span> <span class=\"token function\">vec4</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n\n<h4 id=\"вершинный_шейдер\">Вершинный шейдер</h4>\n\n<p>Вершинный шейдер определяет положение и форму каждой вершины.</p>\n\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shader-vs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>x-shader/x-vertex<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  attribute vec3 aVertexPosition<span class=\"token punctuation\">;</span>\n\n  uniform mat4 uMVMatrix<span class=\"token punctuation\">;</span>\n  uniform mat4 uPMatrix<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">void</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    gl_Position <span class=\"token operator\">=</span> uPMatrix <span class=\"token operator\">*</span> uMVMatrix <span class=\"token operator\">*</span> <span class=\"token function\">vec4</span><span class=\"token punctuation\">(</span>aVertexPosition<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"создание_объекта","title":"Создание объекта","isH3":false,"content":"<p>Перед тем, как мы отрисуем наш квадрат, нам необходимо создать буфер, который содержит его вершины. Мы сделаем это,  вызвав функцию <code>initBuffers().</code> По мере ознакомления с другими концепциями WebGL, эта функция будет усложняться при создании более сложных трёхмерных объектов.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> horizAspect <span class=\"token operator\">=</span> <span class=\"token number\">480.0</span><span class=\"token operator\">/</span><span class=\"token number\">640.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">initBuffers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  squareVerticesBuffer <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">createBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindBuffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> squareVerticesBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> vertices <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">bufferData</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float32Array</span><span class=\"token punctuation\">(</span>vertices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">STATIC_DRAW</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n\n<p>В этом примере эта функция упрощена и даёт оценить основную суть сцены. Она начинает работу с вызова метода <code>createBuffer()</code> объекта <code>gl</code> для получения буфера, в котором мы будем хранить вершины. Затем он привязывается к контексту, вызовом метода <code>bindBuffer()</code>.</p>\n\n<p>После того, как мы это сделали, мы создаём JavaScript массив, содержащий координаты для каждой вершины квадрата. Затем этот массив преобразуется в массив вещественных чисел WebGL и передаётся в метод <code>bufferData()</code> объекта <code>gl</code> для назначения вершин объекту.</p>"}},{"type":"prose","value":{"id":"отрисовка_сцены_2","title":"Отрисовка сцены","isH3":false,"content":"<p>Как только шейдеры установлены и объект создан, мы можем действительно отрисовать сцену. Поскольку в этом примере нет какой-либо анимации, наша функция <code>drawScene()</code> имеет очень простой вид. Она использует несколько утилитарных процедур, которые мы кратко рассмотрим ниже.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">drawScene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">COLOR_BUFFER_BIT</span> <span class=\"token operator\">|</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">DEPTH_BUFFER_BIT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  perspectiveMatrix <span class=\"token operator\">=</span> <span class=\"token function\">makePerspective</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">640.0</span><span class=\"token operator\">/</span><span class=\"token number\">480.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">loadIdentity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">mvTranslate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">6.0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindBuffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> squareVerticesBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">vertexAttribPointer</span><span class=\"token punctuation\">(</span>vertexPositionAttribute<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">FLOAT</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setMatrixUniforms</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">drawArrays</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TRIANGLE_STRIP</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n\n<p>Первый шаг - очистка цветом фона сцены контекста. Затем мы устанавливаем перспективу камеры. Мы устанавливаем угол обзора в 45°, с соотношением ширины к высоте равным 640/480 (размеры нашего объекта canvas). Мы также определяем, что мы хотим видеть отрисованными объекты на расстоянии от 0.1 до 100 единиц от камеры.</p>\n\n<p>Затем мы устанавливаем позицию квадрата, загружая определённую позицию и размещая её от камеры на 6 единиц. После этого, мы привязываем буфер, содержащий вершины квадрата к контексту, настраиваем его, и отрисовываем объект, вызывая метод <code>drawArrays()</code>.</p>\n\n<p>Вы можете <a href=\"http://mdn.github.io/webgl-examples/tutorial/sample2\" title=\"https://developer.mozilla.org/samples/webgl/sample2\" class=\"external\" rel=\" noopener\">посмотреть как это работает щёлкнув по этой ссылке</a>. Но это только в том случае, если используемый браузер осуществляет поддержку WebGL.</p>"}},{"type":"prose","value":{"id":"операции_над_матрицами","title":"Операции над матрицами","isH3":false,"content":"<p>Операции над матрицами достаточно сложны. Никому бы не хотелось самому писать весь код для работы с ними. К счастью, есть <a class=\"external\" href=\"http://sylvester.jcoglan.com/\" rel=\" noopener\">Sylvester</a> - очень удобная библиотека для выполнения операций над векторами и матрицами, написанная на JavaScript.</p>\n\n<p>Файл <code>glUtils.js</code>, используемый в этом примере, используется большинством примеров на WebGL, размещённых в сети интернет. Никто не знает точно откуда он появился. Он просто используется Sylvester и он даже пополняется методами для построения специальных типов матриц, а также вывода HTML для их отображения.</p>\n\n<p>Также, этот пример определяет несколько полезных процедур взаимодействия с этими библиотеками для выполнения определённых задач. Пояснения относительно того, что делает каждая из приведённых функций, выходят за рамки этого примера, но в сети есть много хороших материалов об операциях над матрицами. Чуть <a href=\"#ниже\">ниже</a> есть список некоторых из них.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">loadIdentity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  mvMatrix <span class=\"token operator\">=</span> Matrix<span class=\"token punctuation\">.</span><span class=\"token constant\">I</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">multMatrix</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">m</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  mvMatrix <span class=\"token operator\">=</span> mvMatrix<span class=\"token punctuation\">.</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">mvTranslate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">multMatrix</span><span class=\"token punctuation\">(</span>Matrix<span class=\"token punctuation\">.</span><span class=\"token function\">Translation</span><span class=\"token punctuation\">(</span>$<span class=\"token constant\">V</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ensure4x4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">setMatrixUniforms</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> pUniform <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">\"uPMatrix\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">uniformMatrix4fv</span><span class=\"token punctuation\">(</span>pUniform<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float32Array</span><span class=\"token punctuation\">(</span>perspectiveMatrix<span class=\"token punctuation\">.</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> mvUniform <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">\"uMVMatrix\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">uniformMatrix4fv</span><span class=\"token punctuation\">(</span>mvUniform<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float32Array</span><span class=\"token punctuation\">(</span>mvMatrix<span class=\"token punctuation\">.</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"смотрите_также","title":"Смотрите также","isH3":false,"content":"<ul>\n <li><a class=\"external\" href=\"https://mathworld.wolfram.com/Matrix.html\" rel=\" noopener\">Матрицы</a> на Wolfram MathWorld</li>\n <li><a class=\"external\" href=\"http://en.wikipedia.org/wiki/Matrix_(mathematics)\" rel=\" noopener\">Матрица</a> (Wikipedia)</li>\n</ul>\n\n<p></p><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ru/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL\">« Предыдущая статья</a></li>\n    <li><a class=\"button minimal\" href=\"/ru/docs/Web/API/WebGL_API/Tutorial/Using_shaders_to_apply_color_in_WebGL\">Следующая статья  »</a></li>\n</ul><p></p>"}}],"toc":[{"text":"Отрисовка сцены","id":"отрисовка_сцены"},{"text":"Создание объекта","id":"создание_объекта"},{"text":"Отрисовка сцены","id":"отрисовка_сцены_2"},{"text":"Операции над матрицами","id":"операции_над_матрицами"},{"text":"Смотрите также","id":"смотрите_также"}],"summary":"После того, как вы успешно создали контекст WebGL, вы можете начинать отображать в нем графические объекты. Простейшая вещь, которую вы можете сделать - отрисовать простой квадрат без текстуры. Итак, начнём построение кода для отрисовки квадрата.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Adding 2D content to a WebGL context","locale":"en-US","native":"English (US)"},{"title":"Agregando Contenido 2D en el Contexto WebGL","locale":"es","native":"Español"},{"title":"Ajouter du contenu à WebGL","locale":"fr","native":"Français"},{"title":"WebGL コンテキストへの平面コンテンツの追加","locale":"ja","native":"日本語"},{"title":"WebGL 컨텍스트에 2D 컨텐츠 추가하기","locale":"ko","native":"한국어"},{"title":"Adicionando conteúdo 2D a um contexto WebGL","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"使用 WebGL 创建 2D 内容","locale":"zh-CN","native":"中文 (简体)"},{"title":"增加一個 2D 物件到 WebGL 環境","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ru/web/api/webgl_api/tutorial/adding_2d_content_to_a_webgl_context","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/web/api/webgl_api/tutorial/adding_2d_content_to_a_webgl_context/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Web","title":"Веб-технологии для разработчиков"},{"uri":"/ru/docs/Web/API","title":"Интерфейсы веб API"},{"uri":"/ru/docs/Web/API/WebGL_API","title":"WebGL"},{"uri":"/ru/docs/Web/API/WebGL_API/Tutorial","title":"WebGL tutorial"},{"uri":"/ru/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context","title":"Добавление двухмерного контента в контекст WebGL"}],"pageTitle":"Добавление двухмерного контента в контекст WebGL - Интерфейсы веб API | MDN","noIndexing":false}}