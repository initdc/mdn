{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"WindowOrWorkerGlobalScope.fetch()","mdn_url":"/ru/docs/Web/API/fetch","locale":"ru","native":"Русский","sidebarHTML":"<ol><li><strong><a href=\"/ru/docs/Web/API/Fetch_API\">Fetch API</a></strong></li><li><strong><a href=\"/ru/docs/Web/API/fetch\"><code>Fetch</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Похожие страницы для Fetch API</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Headers\"><code>Headers</code> <small>(en-US)</small></a></li><li><a href=\"/ru/docs/Web/API/Request\"><code>Request</code></a></li><li><a href=\"/ru/docs/Web/API/Response\"><code>Response</code></a></li><li><a href=\"/ru/docs/Web/API/fetch\"><code>fetch()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div id=\"sect1\"></div>\n\n<p>Метод <code><strong>fetch()</strong></code> , относящийся к миксину <a href=\"/ru/docs/orphaned/Web/API/WindowOrWorkerGlobalScope\"><code>WindowOrWorkerGlobalScope</code></a>, запускает процесс извлечения ресурса из сети. Возвращает promise, содержащий <a href=\"/ru/docs/Web/API/Response\"><code>Response</code></a> объект (ответ на запрос).</p>\n\n<p><code>WorkerOrGlobalScope</code> относится к <a href=\"/ru/docs/Web/API/Window\"><code>Window</code></a> и <a href=\"/ru/docs/Web/API/WorkerGlobalScope\"><code>WorkerGlobalScope</code></a> сразу. Это означает, что метод <code>fetch()</code> доступен практически в любом контексте, в котором бы вы не захотели получить ресурсы.</p>\n\n<p>Промис <a href=\"/ru/docs/Web/API/fetch\" title=\"Fetch()\" aria-current=\"page\"><code>Fetch()</code></a> завершается <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a>, если возникает сетевая ошибка, хотя обычно это означает проблему с доступами или аналогичную ей. Для успешного завершения <code>fetch()</code> достаточно удостовериться в том, что промис выполнен и что свойство <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Response/ok\"><code>Response.ok</code> <small>(en-US)</small></a> имеет значение <code>true</code>. HTTP статус 404 не является сетевой ошибкой.</p>\n\n<p>Метод <code>fetch()</code> контролируется директивой <code>connect-src</code> directive of <a href=\"/en-US/docs/Web/HTTP/Headers/Content-Security-Policy\">Content Security Policy</a> (политика безопасности контента), а не директивой ресурсов, которые извлекает.</p>\n\n<div class=\"note notecard\" id=\"sect2\">\n<p><strong>На Заметку</strong>: Аргументы метода <code>fetch()</code> идентичны аргументам <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/Request\"><code>Request()</code> <small>(en-US)</small></a> конструктора.</p>\n</div>"}},{"type":"prose","value":{"id":"синтаксис","title":"Синтаксис","isH3":false,"content":"<pre class=\"syntaxbox notranslate\">Promise&lt;Response&gt; fetch(input[, init]);</pre>"}},{"type":"prose","value":{"id":"аргументы","title":"Аргументы","isH3":true,"content":"<dl>\n <dt id=\"input\"><em>input</em></dt>\n <dd>Определяет желаемый для получения ресурс. Это может быть:\n <ul>\n  <li><a href=\"/ru/docs/conflicting/Web/JavaScript/Reference/Global_Objects/String_9094f63a1f7efd350dd69d6a8ae174fb\"><code>USVString</code></a> (строка), содержащая прямую URL ссылку на ресурс. Некоторые браузеры принимают <code>blob:</code> и <code>data:</code> , как схемы.</li>\n  <li><a href=\"/ru/docs/Web/API/Request\"><code>Request</code></a> объект (объект ответа).</li>\n </ul>\n </dd>\n <dt id=\"init\"><em>init</em> <span class=\"badge inline optional\">Необязательный</span></dt>\n <dd>Объект с опциями, содержащий пользовательские настройки, которые вы желаете применить к запросу. Возможные варианты:\n <ul>\n  <li><code>method</code>: Метод запроса, например, <code>GET</code>, <code>POST</code>.</li>\n  <li><code>headers</code>: Заголовки, содержащиеся в объекте <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Headers\"><code>Headers</code> <small>(en-US)</small></a> или в объекте литерале с побитовыми значениями (<a href=\"/ru/docs/conflicting/Web/JavaScript/Reference/Global_Objects/String\"><code>ByteString</code></a>).</li>\n  <li><code>body</code>: Тело запроса, которое может быть: <a href=\"/ru/docs/Web/API/Blob\"><code>Blob</code></a>, <a class=\"page-not-created\" title=\"Документация об этом ещё не написана; пожалуйста, поспособствуйте её написанию!\"><code>BufferSource</code></a>, <a href=\"/ru/docs/Web/API/FormData\"><code>FormData</code></a>, <a href=\"/ru/docs/Web/API/URLSearchParams\"><code>URLSearchParams</code></a>, или <a href=\"/ru/docs/conflicting/Web/JavaScript/Reference/Global_Objects/String_9094f63a1f7efd350dd69d6a8ae174fb\"><code>USVString</code></a> объектами. Обратите внимание, что <code>GET</code> или <code>HEAD</code> запрос не может иметь тела.</li>\n  <li><code>mode</code>: Режим, например, <code>cors</code>, <code>no-cors</code> или <code>same-origin</code>.</li>\n  <li><code>credentials</code>: Полномочия: <code>omit</code>, <code>same-origin</code> или <code>include</code>. Для автоматической отправки куки для текущего домена, эта опция должна быть указана. Начиная с Chrome 50, это свойство также принимает экземпляр класса <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/FederatedCredential\"><code>FederatedCredential</code> <small>(en-US)</small></a> или  <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PasswordCredential\"><code>PasswordCredential</code> <small>(en-US)</small></a>.</li>\n  <li><code>cache</code>: Режим кеширования запроса <code>default</code>, <code>no-store</code>, <code>reload</code>, <code>no-cache</code>, <code>force-cache</code> или <code>only-if-cached</code>.</li>\n  <li><code>redirect</code>: Режим редиректа: <code>follow</code> (автоматически переадресовывать), <code>error</code> (прерывать перенаправление ошибкой) или <code>manual</code> (управлять перенаправлениями вручную). В Chrome по дефолту стоит <code>follow</code> (ранее, в Chrome 47, стояло <code>manual</code>).</li>\n  <li><code>referrer</code>: <a href=\"/ru/docs/conflicting/Web/JavaScript/Reference/Global_Objects/String_9094f63a1f7efd350dd69d6a8ae174fb\"><code>USVString</code></a>, определяющая <code>no-referrer</code>, <code>client</code> или a URL. Дефолтное значение - <code>client</code>.</li>\n  <li><code>referrerPolicy</code>: Определяет значение HTTP заголовка реферера. Может быть: <code>no-referrer</code>, <code>no-referrer-when-downgrade</code>, <code>origin</code>, <code>origin-when-cross-origin</code>, <code>unsafe-url</code>.</li>\n  <li><code>integrity</code>: Содержит значение целостности субресурсов (<a href=\"/en-US/docs/Web/Security/Subresource_Integrity\">subresource integrity</a>) запроса (например, <code>sha256-BpfBw7ivV8q2jLiT13fxDYAe2tJllusRSZ273h2nFSE=</code>).</li>\n  <li><code>keepalive</code>: Эта опция может быть использована, чтобы разрешить запросу \"пережить\" страницу. Получение ресурсов с флагом <code>keepalive</code> - это альтернатива <a href=\"/ru/docs/Web/API/Navigator/sendBeacon\"><code>Navigator.sendBeacon()</code></a> API. </li>\n  <li><code>signal</code>: Экземпляр объекта <a href=\"/ru/docs/Web/API/AbortSignal\"><code>AbortSignal</code></a>; позволяет коммуницировать с fetch запросом и, если нужно, отменять его с помощью <a href=\"/ru/docs/Web/API/AbortController\"><code>AbortController</code></a>.</li>\n </ul>\n </dd>\n</dl>"}},{"type":"prose","value":{"id":"возвращаемое_значение","title":"Возвращаемое значение","isH3":true,"content":"<p><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code> <small>(en-US)</small></a>, содержащий <a href=\"/ru/docs/Web/API/Response\"><code>Response</code></a> объект (ответ на запрос).</p>"}},{"type":"prose","value":{"id":"исключения","title":"Исключения","isH3":true,"content":"<table class=\"standard-table\">\n <thead>\n  <tr>\n   <th scope=\"col\"><strong>Тип</strong></th>\n   <th scope=\"col\"><strong>Описание</strong></th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td><code>AbortError</code></td>\n   <td>Запрос был отменён (используя <a href=\"/ru/docs/Web/API/AbortController/abort\"><code>AbortController.abort()</code></a>).</td>\n  </tr>\n  <tr>\n   <td><code>TypeError</code></td>\n   <td>Начиная с версии <a href=\"/en-US/docs/Mozilla/Firefox/Releases/43\">Firefox 43</a>, <code>fetch()</code> завершится ошибкой <code>TypeError</code>, если URL имеет такие полномочия, как <code>http://user:password@example.com</code>.</td>\n  </tr>\n </tbody>\n</table>"}},{"type":"prose","value":{"id":"пример","title":"Пример","isH3":false,"content":"<p>В нашем <a href=\"https://github.com/mdn/fetch-examples/tree/master/fetch-request\" class=\"external\" rel=\" noopener\">Fetch Request примере</a> (см. <a href=\"https://mdn.github.io/fetch-examples/fetch-request/\" class=\"external\" rel=\" noopener\">Fetch Request live</a>) мы создаём новый объект <a href=\"/ru/docs/Web/API/Request\"><code>Request</code></a> (запроса), используя релевантный конструктор, а затем получаем его вызовом <code>fetch()</code>. Так как запрашиваемый ресурс - изображение, для того, чтобы присвоить ему подходящий MIME тип и обработать должным образом, мы применяем к ответу метод <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Response/blob\"><code>Body.blob()</code> <small>(en-US)</small></a>, после чего создаём для него Object URL и передаём её в элемент <a href=\"/ru/docs/Web/HTML/Element/img\"><code>&lt;img&gt;</code></a>.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myImage <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> myRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flowers.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>myRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> objectURL <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  myImage<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> objectURL<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>В нашем <a href=\"https://github.com/mdn/fetch-examples/blob/master/fetch-with-init-then-request/index.html\" class=\"external\" rel=\" noopener\">Fetch with init then Request примере</a> (см. <a href=\"https://mdn.github.io/fetch-examples/fetch-with-init-then-request/\" class=\"external\" rel=\" noopener\">Fetch Request init live</a>) мы делаем тоже самое, за исключением того, что передаём в качестве аргумента для <code>fetch()</code> объект init:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myImage <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> myHeaders <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'image/jpeg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> myInit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n               <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> myHeaders<span class=\"token punctuation\">,</span>\n               <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'cors'</span><span class=\"token punctuation\">,</span>\n               <span class=\"token literal-property property\">cache</span><span class=\"token operator\">:</span> <span class=\"token string\">'default'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> myRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flowers.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>myRequest<span class=\"token punctuation\">,</span>myInit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>Обратите внимание, что объект init в качестве аргумента можно передать и в конструктор <code>Request</code> для получения аналогичного результата, например:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flowers.jpg'</span><span class=\"token punctuation\">,</span> myInit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>Допустимо использования объекта литерала в качестве <code>headers</code> в <code>init</code>.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myInit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n               <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                   <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'image/jpeg'</span>\n               <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n               <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'cors'</span><span class=\"token punctuation\">,</span>\n               <span class=\"token literal-property property\">cache</span><span class=\"token operator\">:</span> <span class=\"token string\">'default'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> myRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flowers.jpg'</span><span class=\"token punctuation\">,</span> myInit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Спецификации","id":"спецификации","isH3":false,"specifications":[{"bcdSpecificationURL":"https://fetch.spec.whatwg.org/#fetch-method","title":"Fetch Standard"}],"query":"api.fetch"}},{"type":"browser_compatibility","value":{"title":"Совместимость с браузерами","id":"совместимость_с_браузерами","isH3":false,"query":"api.fetch","dataURL":"/ru/docs/Web/API/fetch/bcd.json"}},{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p></p><p></p>"}},{"type":"prose","value":{"id":"смотрите_также","title":"Смотрите также","isH3":false,"content":"<ul>\n <li><a href=\"/en-US/docs/Web/API/Fetch_API\">Fetch API</a></li>\n <li><a href=\"/en-US/docs/Web/API/Service_Worker_API\">ServiceWorker API</a></li>\n <li><a href=\"/en-US/docs/Web/HTTP/CORS\">HTTP access control (CORS)</a></li>\n <li><a href=\"/en-US/docs/Web/HTTP\">HTTP</a></li>\n</ul>"}}],"toc":[{"text":"Синтаксис","id":"синтаксис"},{"text":"Пример","id":"пример"},{"text":"Спецификации","id":"спецификации"},{"text":"Совместимость с браузерами","id":"совместимость_с_браузерами"},{"text":"Смотрите также","id":"смотрите_также"}],"summary":"Метод fetch() , относящийся к миксину WindowOrWorkerGlobalScope, запускает процесс извлечения ресурса из сети. Возвращает promise, содержащий Response объект (ответ на запрос).","popularity":0.0004,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"fetch()","locale":"en-US","native":"English (US)"},{"title":"WindowOrWorkerGlobalScope.fetch()","locale":"es","native":"Español"},{"title":"GlobalFetch.fetch()","locale":"fr","native":"Français"},{"title":"WindowOrWorkerGlobalScope.fetch()","locale":"ja","native":"日本語"},{"title":"fetch()","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"fetch()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ru/web/api/fetch","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/web/api/fetch/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Web","title":"Веб-технологии для разработчиков"},{"uri":"/ru/docs/Web/API","title":"Интерфейсы веб API"},{"uri":"/ru/docs/Web/API/fetch","title":"WindowOrWorkerGlobalScope.fetch()"}],"pageTitle":"WindowOrWorkerGlobalScope.fetch() - Интерфейсы веб API | MDN","noIndexing":false}}