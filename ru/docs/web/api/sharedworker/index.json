{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"SharedWorker","mdn_url":"/ru/docs/Web/API/SharedWorker","locale":"ru","native":"Русский","sidebarHTML":"<ol><li><strong><a href=\"/ru/docs/Web/API/Web_Workers_API\">Web Workers API</a></strong></li><li><strong><a href=\"/ru/docs/Web/API/SharedWorker\"><code>SharedWorker</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Конструктор</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SharedWorker/SharedWorker\"><code>SharedWorker()</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Свойства</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SharedWorker/port\"><code>port</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SharedWorker/error_event\"><code>SharedWorker: error event</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Наследование:</summary><ol><li><a href=\"/ru/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Похожие страницы для Web Workers API</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DedicatedWorkerGlobalScope\"><code>DedicatedWorkerGlobalScope</code> <small>(en-US)</small></a></li><li><a href=\"/ru/docs/Web/API/ServiceWorker\"><code>ServiceWorker</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SharedWorkerGlobalScope\"><code>SharedWorkerGlobalScope</code> <small>(en-US)</small></a></li><li><a href=\"/ru/docs/Web/API/Worker\"><code>Worker</code></a></li><li><a href=\"/ru/docs/Web/API/WorkerGlobalScope\"><code>WorkerGlobalScope</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WorkerLocation\"><code>WorkerLocation</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WorkerNavigator\"><code>WorkerNavigator</code> <small>(en-US)</small></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div id=\"sect1\"></div>\n\n<p><code>Интерфейс <strong>SharedWorker </strong>(разделяемый воркер)</code> является особым видом воркеров к которому можно получить доступ из нескольких контекстов браузера, например, из нескольких окон, iframe, или других воркеров. Этот интерфейс реализован иначе, чем dedicated воркеры и имеют иной глобальный контекст, <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SharedWorkerGlobalScope\"><code>SharedWorkerGlobalScope</code> <small>(en-US)</small></a>.</p>\n\n<div class=\"note notecard\" id=\"sect2\">\n<p><strong>Замечание:</strong> Если SharedWorker может быть доступен из нескольких контекстов браузера, все они должны разделять одинаковое расположение (идентичные протокол, хост и порт).</p>\n</div>\n\n<div class=\"note notecard\" id=\"sect3\">\n<p><strong>Замечание</strong>: В Firefox, разделяемые воркеры не могут взаимодействовать между private (например, просматриваемыми в приватном режиме) и non-private документами (см. <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1177621\" class=\"external\" rel=\" noopener\">баг&nbsp;1177621</a>.)</p>\n</div>"}},{"type":"prose","value":{"id":"свойства","title":"Свойства","isH3":false,"content":"<p><em>Наследует свойства родителя, <a href=\"/ru/docs/Web/API/EventTarget\"><code>EventTarget</code></a>, и реализует свойства <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Worker\"><code>AbstractWorker</code> <small>(en-US)</small></a>.</em></p>\n\n<dl>\n <dt id=\"abstractworker.onerror_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Worker/error_event\"><code>AbstractWorker.onerror</code> <small>(en-US)</small></a></dt>\n <dd><a href=\"/ru/docs/conflicting/Web/API/EventTarget/addEventListener\"><code>EventListener</code></a> который вызывается всегда, когда <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ErrorEvent\"><code>ErrorEvent</code> <small>(en-US)</small></a> типа <code>error</code> всплывает через воркер.</dd>\n <dt id=\"sharedworker.port_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SharedWorker/port\"><code>SharedWorker.port</code> <small>(en-US)</small></a> <span title=\"Это значение изменять нельзя.\" class=\"badge inline readonly\">Только для чтения </span></dt>\n <dd>Возвращает объект <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MessagePort\"><code>MessagePort</code> <small>(en-US)</small></a>, используемый для коммуникации и контроля разделяемого воркера.</dd>\n</dl>"}},{"type":"prose","value":{"id":"constructors","title":"Constructors","isH3":false,"content":"<dl>\n <dt id=\"sharedworker_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SharedWorker/SharedWorker\"><code>SharedWorker()</code> <small>(en-US)</small></a></dt>\n <dd>Создаёт разделяемый веб воркер, который выполняет скрипт по указанному URL.</dd>\n</dl>"}},{"type":"prose","value":{"id":"методы","title":"Методы","isH3":false,"content":"<p><em>Наследует методы родительского класса, <a href=\"/ru/docs/Web/API/EventTarget\"><code>EventTarget</code></a>, и реализует свойства <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Worker\"><code>AbstractWorker</code> <small>(en-US)</small></a>.</em></p>"}},{"type":"prose","value":{"id":"пример","title":"Пример","isH3":false,"content":"<p>В нашем <a class=\"external external-icon\" href=\"https://github.com/mdn/simple-shared-worker\" rel=\" noopener\">Базовом примере разделяемого воркера</a> (<a class=\"external external-icon\" href=\"https://mdn.github.io/simple-shared-worker/\" rel=\" noopener\">запустить</a>), имеются две HTML страницы, каждая из которых использует JavaScript для простых вычислений. Разные скрипты используют один и тот же воркер, чтобы выполнить умножение двух чисел - они оба имеют доступ к нему, даже если их страницы запущены в разных окнах.</p>\n\n<p>Следующий пример кода демонстрирует создание объекта <code>SharedWorker</code> с использованием конструктора <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SharedWorker/SharedWorker\"><code>SharedWorker()</code> <small>(en-US)</small></a>. Оба скрипта содержат:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myWorker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SharedWorker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worker.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>далее скрипты получают доступ к воркеру через объект <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MessagePort\"><code>MessagePort</code> <small>(en-US)</small></a>, находящийся в свойстве <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SharedWorker/port\"><code>SharedWorker.port</code> <small>(en-US)</small></a>. Если устанавливается обработчик события onmessage, port самостоятельно начинает работу, вызывая собственный метод <code>start(), </code>если же принимать события с помощью обработчика события  \"message\" через addEventListener, необходимо вызвать метод <code>start()</code> самостоятельно:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>myWorker<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>После того, как порт запущен, оба скрипта отправляют сообщения воркеру и принимают их от него, используя <code>port.postMessage()</code> и <code>port.onmessage</code>, соответственно:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>first<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onchange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    myWorker<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>second<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Message posted to worker'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  second<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onchange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    myWorker<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>second<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Message posted to worker'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  myWorker<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result1<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Message received from worker'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n\n<p>Внутри воркера используется хэндлер <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SharedWorkerGlobalScope/connect_event\"><code>SharedWorkerGlobalScope.onconnect</code> <small>(en-US)</small></a> для соединения к тому же порту, как обсуждалось ранее. Порты, связанные с данным воркером доступны в свойстве ports события <code><a href=\"/ru/docs/Web/Reference/Events/connect\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">connect</a></code>. Далее вызывается метод <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MessagePort\"><code>MessagePort</code> <small>(en-US)</small></a> <code>start()</code> для запуска порта, и устанавливается хэндлер <code>onmessage</code> для обработки сообщений, присылаемых от обоих потоков.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function-variable function\">onconnect</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> port <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>ports<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// or port = e.source</span>\n\n    port<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> workerResult <span class=\"token operator\">=</span> <span class=\"token string\">'Result: '</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      port<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>workerResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    port<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// необходимо при добавлении обработчиков с помощью addEventListener. При использовании сеттера port.onmessage, данный метод вызывается автоматически, неявно</span>\n<span class=\"token punctuation\">}</span></code></pre></div>"}},{"type":"prose","value":{"id":"пример_с_несколькими_страницами","title":"Пример с несколькими страницами","isH3":true,"content":"<h4 id=\"sect1\"> </h4>\n\n<pre class=\"notranslate\"><strong>test.js\n</strong>\nlet connected = false;\nself.addEventListener(\"connect\", e =&gt; {\n  e.source.addEventListener(\"message\", ev =&gt; {\n    if (ev.data === \"start\") {\n      if (connected === false) {\n        e.source.postMessage('worker init');\n        connected = true;\n      } else {\n        e.source.postMessage('worker already inited');\n      }\n    }\n  }, false);\n  e.source.start();\n}, false);\n\n\n<strong>На странице 1 получаем сообщение '</strong>worker init<strong>' в консоли.\n\nindex1.html\n...</strong>\n&lt;script&gt;\n    let worker = new SharedWorker('test.js');\n    worker.port.addEventListener(\"message\", e =&gt; {\n      console.log(e.data);\n    }, false);\n    worker.port.start();\n    worker.port.postMessage(\"start\");\n&lt;/script&gt;\n<strong>...\n\nНа странице 2 в консоль выводится 'worker already inited', так как страница 1 уже запустила наш воркер;\n\n</strong>index2.html\n...\n&lt;script&gt;\n    let worker = new SharedWorker('test.js');\n    worker.port.addEventListener(\"message\", e =&gt; {\n      console.log(e.data);\n    }, false);\n    worker.port.start();\n    worker.port.postMessage(\"start\");\n&lt;/script&gt;\n...</pre>\n\n<p> </p>\n\n<p> </p>\n\n<p> </p>"}},{"type":"prose","value":{"id":"sect2","title":" ","isH3":false,"content":""}},{"type":"specifications","value":{"title":"Спецификации","id":"спецификации","isH3":false,"specifications":[{"bcdSpecificationURL":"https://html.spec.whatwg.org/multipage/workers.html#shared-workers-and-the-sharedworker-interface","title":"HTML Standard"}],"query":"api.SharedWorker"}},{"type":"browser_compatibility","value":{"title":"Совместимость браузеров","id":"совместимость_браузеров","isH3":false,"query":"api.SharedWorker","dataURL":"/ru/docs/Web/API/SharedWorker/bcd.json"}},{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p></p><p></p>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n <li><a href=\"/ru/docs/Web/API/Worker\"><code>Worker</code></a></li>\n <li><a class=\"internal\" href=\"/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\">Использование веб воркеров</a></li>\n</ul>"}}],"toc":[{"text":"Свойства","id":"свойства"},{"text":"Constructors","id":"constructors"},{"text":"Методы","id":"методы"},{"text":"Пример","id":"пример"},{"text":" ","id":"sect2"},{"text":"Спецификации","id":"спецификации"},{"text":"Совместимость браузеров","id":"совместимость_браузеров"},{"text":"See also","id":"see_also"}],"summary":"Интерфейс SharedWorker (разделяемый воркер) является особым видом воркеров к которому можно получить доступ из нескольких контекстов браузера, например, из нескольких окон, iframe, или других воркеров. Этот интерфейс реализован иначе, чем dedicated воркеры и имеют иной глобальный контекст, SharedWorkerGlobalScope (en-US).","popularity":0.0002,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"SharedWorker","locale":"en-US","native":"English (US)"},{"title":"SharedWorker","locale":"fr","native":"Français"},{"title":"SharedWorker","locale":"ja","native":"日本語"},{"title":"SharedWorker","locale":"ko","native":"한국어"},{"title":"SharedWorker","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"SharedWorker","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ru/web/api/sharedworker","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/web/api/sharedworker/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Web","title":"Веб-технологии для разработчиков"},{"uri":"/ru/docs/Web/API","title":"Интерфейсы веб API"},{"uri":"/ru/docs/Web/API/SharedWorker","title":"SharedWorker"}],"pageTitle":"SharedWorker - Интерфейсы веб API | MDN","noIndexing":false}}