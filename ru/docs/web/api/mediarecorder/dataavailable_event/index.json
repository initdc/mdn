{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"MediaRecorder.ondataavailable","mdn_url":"/ru/docs/Web/API/MediaRecorder/dataavailable_event","locale":"ru","native":"Русский","sidebarHTML":"<ol><li><strong><a href=\"/ru/docs/Web/API/MediaStream_Recording_API\">MediaStream Recording API</a></strong></li><li><strong><a href=\"/ru/docs/Web/API/MediaRecorder\"><code>MediaRecorder</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Конструктор</summary><ol><li><a href=\"/ru/docs/Web/API/MediaRecorder/MediaRecorder\"><code>MediaRecorder()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Свойства</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaRecorder/audioBitsPerSecond\"><code>audioBitsPerSecond</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaRecorder/mimeType\"><code>mimeType</code> <small>(en-US)</small></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaRecorder/warning_event\"><code>onwarning</code> <small>(en-US)</small></a></li><li><a href=\"/ru/docs/Web/API/MediaRecorder/state\"><code>state</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaRecorder/stream\"><code>stream</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaRecorder/videoBitsPerSecond\"><code>videoBitsPerSecond</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Методы</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaRecorder/isTypeSupported\"><code>isTypeSupported()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaRecorder/pause\"><code>pause()</code> <small>(en-US)</small></a></li><li><a href=\"/ru/docs/Web/API/MediaRecorder/requestData\"><code>requestData()</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaRecorder/resume\"><code>resume()</code> <small>(en-US)</small></a></li><li><a href=\"/ru/docs/Web/API/MediaRecorder/start\"><code>start()</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaRecorder/stop\"><code>stop()</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>События</summary><ol><li><em><code>dataavailable</code></em></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaRecorder/error_event\"><code>error</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaRecorder/pause_event\"><code>pause</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaRecorder/resume_event\"><code>resume</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaRecorder/start_event\"><code>start</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaRecorder/stop_event\"><code>stop</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Наследование:</summary><ol><li><a href=\"/ru/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Похожие страницы для MediaStream Recording</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/BlobEvent\"><code>BlobEvent</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaRecorderErrorEvent\"><code>MediaRecorderErrorEvent</code> <small>(en-US)</small></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p></p><p></p>\n\n<p><strong><code>MediaRecorder.ondataavailable </code></strong>обработчик события (часть <a href=\"/en-US/docs/Web/API/MediaStream_Recording_API\">MediaStream Recording API</a>) обрабатывает <code><a href=\"/ru/docs/Web/Reference/Events/dataavailable\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">dataavailable</a></code> событие, позволяет выполнить код, когда тип данных  <a href=\"/ru/docs/Web/API/Blob\"><code>Blob</code></a>, представляющий обработанные данные становиться доступным для использования.</p>\n\n<p>Событие <code>dataavailable</code> вызывается когда MediaRecorder доставляет медиа данные в ваше приложение для использования. Они представляются в виде объекта типа  <a href=\"/ru/docs/Web/API/Blob\"><code>Blob</code></a>, содержащего данные. Это происходит в четырёх ситуациях:</p>\n\n<ul>\n <li>Когда медиа поток завершается, любые мультимедийные данные ещё не доставленные в обработчик <code>ondataavailable</code> немедленно передаются в объект <a href=\"/ru/docs/Web/API/Blob\"><code>Blob</code></a>.</li>\n <li>При вызове метода  <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaRecorder/stop\"><code>MediaRecorder.stop()</code> <small>(en-US)</small></a> , порция медиаданных, объем которых был захвачен с момента начала записи или после последнего вызова события <code>dataavailable</code> помещаются в объект  <a href=\"/ru/docs/Web/API/Blob\"><code>Blob</code></a>;  после этого захват завершается.</li>\n <li>При вызове метода <a href=\"/ru/docs/Web/API/MediaRecorder/requestData\"><code>MediaRecorder.requestData()</code></a> порция медиаданных, объем которых был захвачен с момента начала записи, или после последнего вызова события <code>dataavailable</code> помещаются в вновь созданный объект типа <code>Blob</code> , и захват порций медиаданных продолжается уже в этот новый объект <code>blob</code>.</li>\n <li>Если свойство  <code>timeslice</code> передаётся в метод <a href=\"/ru/docs/Web/API/MediaRecorder/start\"><code>MediaRecorder.start()</code></a>, который запускает захват порций медиаданных, событие  <code>dataavailable</code> запускается каждые <code>timeslice</code> миллисекунд. Это значит, что каждый объект типа <code>blob</code> будет иметь специфический размер (за исключением последнего, который может быть короче, содержащий все, что осталось с момента последнего события ). Поэтому, если метод выглядит так : <code>recorder.start(1000);</code> то событие  <code>dataavailable</code> будет запускаться каждую секунду общего потока медиа захвата, и обработчик события будет вызываться каждую секунду, содержащий в параметре объект типа  <code>blob</code> , который будет содержать объем порции записи медиаданных продолжительностью в одну секунду. Можно использовать свойство  <code>timeslice</code> вместе с <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaRecorder/stop\"><code>MediaRecorder.stop()</code> <small>(en-US)</small></a> и <a href=\"/ru/docs/Web/API/MediaRecorder/requestData\"><code>MediaRecorder.requestData()</code></a> для создания нескольких объектов типа<code> blob</code> одинакового объёма данных , плюс последние короткие объекты типа<code> blob.</code></li>\n</ul>\n\n<div class=\"note notecard\" id=\"sect1\">\n<p>Медиаданные, содержащиеся в объекте типа <a href=\"/ru/docs/Web/API/Blob\"><code>Blob</code></a> доступны в свойстве <code>data</code> , возвращаемого в параметре объекта события <code><a href=\"/ru/docs/Web/Reference/Events/dataavailable\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">dataavailable</a></code>.</p>\n</div>"}},{"type":"prose","value":{"id":"синтаксис","title":"Синтаксис","isH3":false,"content":"<pre class=\"syntaxbox notranslate\"><em>MediaRecorder</em>.ondataavailable = function(event) { ... }\n<em>MediaRecorder</em>.addEventListener('dataavailable', function(event) { ... })\n</pre>"}},{"type":"prose","value":{"id":"пример","title":"Пример","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\" id=\"line1\"><code><span class=\"token operator\">...</span>\n\n  mediaRecorder<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onstop</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data available after MediaRecorder.stop() called.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> audio <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'audio'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    audio<span class=\"token punctuation\">.</span>controls <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span>chunks<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'type'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'audio/ogg; codecs=opus'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> audioURL <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    audio<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> audioURL<span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recorder stopped\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  mediaRecorder<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">ondataavailable</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    chunks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">...</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Спецификации","id":"спецификации","isH3":false,"query":"api.MediaRecorder.dataavailable_event","specifications":[]}},{"type":"browser_compatibility","value":{"title":"Совместимость с браузерами","id":"совместимость_с_браузерами","isH3":false,"data":null,"query":"api.MediaRecorder.dataavailable_event","browsers":null}},{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p></p><p></p>"}},{"type":"prose","value":{"id":"смотрите_также","title":"Смотрите также","isH3":false,"content":"<ul>\n <li><a href=\"/en-US/docs/Web/API/MediaStream_Recording_API\">Использование интерфейса записи медиапотока</a></li>\n <li><a href=\"https://mdn.github.io/web-dictaphone/\" class=\"external\" rel=\" noopener\">Веб диктофон</a>: MediaRecorder + getUserMedia + Web Audio API пример визуализации, от <a href=\"https://twitter.com/chrisdavidmills\" class=\"external\" rel=\" noopener\">Chris Mills</a> (<a href=\"https://github.com/mdn/web-dictaphone/\" class=\"external\" rel=\" noopener\">source on Github</a>.)</li>\n <li><a href=\"https://simpl.info/mediarecorder/\" class=\"external\" rel=\" noopener\">Демонстрационный пример записи медиапотока</a>, от <a href=\"https://twitter.com/sw12\" class=\"external\" rel=\" noopener\">Sam Dutton</a>.</li>\n <li><a href=\"/ru/docs/Web/API/Navigator/getUserMedia\"><code>Navigator.getUserMedia</code></a></li>\n</ul>"}}],"toc":[{"text":"Синтаксис","id":"синтаксис"},{"text":"Пример","id":"пример"},{"text":"Спецификации","id":"спецификации"},{"text":"Совместимость с браузерами","id":"совместимость_с_браузерами"},{"text":"Смотрите также","id":"смотрите_также"}],"summary":"MediaRecorder.ondataavailable обработчик события (часть MediaStream Recording API) обрабатывает dataavailable событие, позволяет выполнить код, когда тип данных  Blob, представляющий обработанные данные становиться доступным для использования.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"MediaRecorder: dataavailable event","locale":"en-US","native":"English (US)"},{"title":"MediaRecorder.ondataavailable","locale":"ja","native":"日本語"},{"title":"MediaRecorder.ondataavailable","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ru/web/api/mediarecorder/dataavailable_event","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/web/api/mediarecorder/dataavailable_event/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Web","title":"Веб-технологии для разработчиков"},{"uri":"/ru/docs/Web/API","title":"Интерфейсы веб API"},{"uri":"/ru/docs/Web/API/MediaRecorder","title":"MediaRecorder"},{"uri":"/ru/docs/Web/API/MediaRecorder/dataavailable_event","title":"MediaRecorder.ondataavailable"}],"pageTitle":"MediaRecorder.ondataavailable - Интерфейсы веб API | MDN","noIndexing":false}}