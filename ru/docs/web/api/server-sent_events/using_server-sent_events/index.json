{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Using server-sent events","mdn_url":"/ru/docs/Web/API/Server-sent_events/Using_server-sent_events","locale":"ru","native":"Русский","sidebarHTML":"<ol><li><strong><a href=\"/ru/docs/Web/API/Server-sent_events\">Server-sent events</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Руководства</summary><ol><li><a href=\"/ru/docs/Web/API/Server-sent_events/Using_server-sent_events\">Using server-sent events</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Интерфейсы</summary><ol><li><a href=\"/ru/docs/Web/API/EventSource\"><code>EventSource</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p></p><p></p>\n\n<div class=\"summary\" id=\"sect1\">\n<p>Разрабатывать web-приложения, использующие <a href=\"/en-US/docs/Web/API/Server-sent_events\">Server-Sent Events</a> намного проще, чем с использованием websockets. Нужно всего лишь немного кода на стороне сервера, чтобы переправлять события web-приложению, но клиентская часть кода для обработки этих событий работает почти точно так же, как и для любых других событий.</p>\n</div>"}},{"type":"prose","value":{"id":"получение_событий_от_сервера","title":"Получение событий от сервера","isH3":false,"content":"<p>Server-Sent Event API содержится внутри интерфейса <a href=\"/ru/docs/Web/API/EventSource\"><code>EventSource</code></a>. Чтобы открыть соединение с сервером для начала записи событий, которые он присылает, необходимо создать новый объект <code>EventSource</code>, который будет указывать на URI скрипта, который создаёт события. Например:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> evtSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ssedemo.php\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>Если файл с генератором событий размещён на другом домене, то должен быть создан новый объект <code>EventSource</code> в который следует передать помимо URI ещё и словарь опций. Например, если предположить, что клиентский скрипт находится на <code>example.com</code>:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> evtSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"//api.example.com/ssedemo.php\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">withCredentials</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n</code></pre></div>\n\n<p>Как только вы создали экземпляр <code>EventSource</code>, вы можете начать получать сообщения с сервера, добавив обработчик события <code><a href=\"/ru/docs/Web/Reference/Events/message\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">message</a></code> :</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>evtSource<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"li\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> eventList <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'list'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  newElement<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"message: \"</span> <span class=\"token operator\">+</span> event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n  eventList<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>newElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n\n<p>Этот код обрабатывает входящие сообщения (то есть уведомления от сервера, на которых нет поля <code>event</code>) и добавляет текст сообщения в список в HTML-документе.</p>\n\n<p>Вы также можете обрабатывать события, используя <code>addEventListener()</code>:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>evtSource<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ping\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"li\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> time <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">;</span>\n\n  newElement<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"ping at \"</span> <span class=\"token operator\">+</span> time<span class=\"token punctuation\">;</span>\n  eventList<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>newElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>Этот код аналогичен коду выше, за исключением того, что он будет вызываться автоматически всякий раз, когда сервер отправляет сообщение с полем <code>event</code>, установленным в «ping»; затем он парсит JSON в поле <code>data</code> и выводит эту информацию.</p>"}},{"type":"prose","value":{"id":"отправка_событий_с_сервера","title":"Отправка событий с сервера","isH3":false,"content":"<p>Код на стороне сервера, который отправляет события, должен отвечать, используя MIME-тип <code>text/event-stream</code>. Каждое уведомление отправляется в виде блока текста, оканчивающегося парой новых строк (<code>\\n</code>) . Подробнее о формате потока событий см.  <a href=\"#event_stream_format\">Event stream format</a>.</p>\n\n<p><a href=\"/ru/docs/Glossary/PHP\">PHP</a> код, который мы используем для примера приведён ниже:</p>\n\n<div class=\"code-example\"><pre class=\"brush: php notranslate\"><code><span class=\"token function\">date_default_timezone_set</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"America/New_York\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Cache-Control: no-cache'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Content-Type: text/event-stream\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$counter</span> <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Every second, send a \"ping\" event.</span>\n\n  <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"event: ping\\n\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$curDate</span> <span class=\"token operator\">=</span> <span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DATE_ISO8601</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'data: {\"time\": \"'</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$curDate</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'\"}'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"\\n\\n\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Send a simple message at random intervals.</span>\n\n  <span class=\"token variable\">$counter</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$counter</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'data: This is a message at time '</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$curDate</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"\\n\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$counter</span> <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">ob_end_flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n\n<p>Приведённый выше код генерирует событие каждую секунду с типом события «ping». Данные каждого события - это объект JSON, содержащий метку времени ISO 8601, соответствующую дате, когда было сгенерировано событие. Через случайные интервалы отправляется простое сообщение (без типа <code>event</code>).</p>\n\n<div class=\"note notecard\" id=\"sect2\">\n<p><strong>Примечание</strong>: вы можете найти полный пример, который использует код, показанный в этой статье на GitHub - см. <a href=\"https://github.com/mdn/dom-examples/tree/master/server-sent-events\" class=\"external\" rel=\" noopener\">Simple SSE demo using PHP.</a></p>\n</div>"}},{"type":"prose","value":{"id":"обработка_ошибок","title":"Обработка ошибок","isH3":false,"content":"<p>Когда возникают проблемы (такие как тайм-аут ответа сети или проблемы, связанные с <a href=\"/en-US/docs/Web/HTTP/CORS\" title=\"/en-US/docs/HTTP/Access_control_CORS\">контролем доступа</a>), тогда генерируется событие <code>error</code>. Вы можете обработать это событие программно, реализовав метод <code>onerror</code> для объекта <code>EventSource</code>:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>evtSource<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"⛔ EventSource failed: \"</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"закрытие_потоков_событий","title":"Закрытие потоков событий","isH3":false,"content":"<p>По умолчанию, если соединение между клиентом и сервером закрывается, то соединение сбрасывается. Прервать соединение можно с помощью метода <code>.close()</code>.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>evtSource<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>"}},{"type":"prose","value":{"id":"формат_потока_событий","title":"Формат потока событий","isH3":false,"content":"<p>Поток событий представляет из себя простой поток текста, который должен иметь кодировку <a href=\"/en-US/docs/Glossary/UTF-8\">UTF-8</a>. Сообщения в потоке событий разделяются парой символов новой строки. Двоеточие, как первый символ строки считается комментарием и игнорируется.</p>\n\n<div class=\"note notecard\" id=\"sect3\"><strong>Примечание:</strong> Строка комментария может использоваться, чтобы предотвратить тайм-аут соединений; сервер может периодически отправлять комментарий, чтобы поддерживать соединение.</div>\n\n<p>Каждое сообщение содержит одну или более строчек текста, которые перечисляют поля этого сообщения. Каждое имеет своё имя, за которым следует двоеточие, после которого идут текстовые данные для значения этого поля. </p>"}},{"type":"prose","value":{"id":"поля","title":"Поля","isH3":true,"content":"<p>Каждое полученное сообщение имеет некоторую комбинацию следующих полей, по одному на строку:</p>\n\n<dl>\n <dt id=\"event\"><code>event</code></dt>\n <dd>Строка, идентифицирующая тип описанного события. Если <code>event</code> указан, то событие будет отправлено в браузер обработчику указанного имени события. Исходный код сайта должен использовать <code>addEventListener()</code> для обработки именованных событий. Обработчик <code>onmessage</code> вызывается, если для сообщения не указано имя события.</dd>\n <dt id=\"data\"><code>data</code></dt>\n <dd>Поле данных для сообщения. Когда <code>EventSource</code> получает несколько последовательных строк, начинающихся с <code>data:</code>, <a href=\"https://www.w3.org/TR/eventsource/#dispatchMessage\" class=\"external\" rel=\" noopener\">он объединяет их</a>, вставляя символ новой строки между каждой из них. Последние переводы строки удаляются.</dd>\n <dt id=\"id\"><code>id</code></dt>\n <dd>Идентификатор события для установки значения последнего ID события для объекта <code><a href=\"/en-US/Server-sent_events/EventSource\" title=\"en/Server-sent events/EventSource\">EventSource</a></code>.</dd>\n <dt id=\"retry\"><code>retry</code></dt>\n <dd>Время переподключения, используемое при попытке отправить событие. Это должно быть целое число, указывающее время переподключения в миллисекундах. Если указано нецелое значение, поле игнорируется.</dd>\n</dl>\n\n<p>Другие названия полей игнорируются.</p>\n\n<div class=\"note notecard\" id=\"sect4\"><strong>Примечание:</strong> If a line doesn't contain a colon, the entire line is treated as the field name with an empty value string.</div>"}},{"type":"prose","value":{"id":"примеры","title":"Примеры","isH3":true,"content":"<h4 id=\"сообщения_с_данными\">Сообщения с данными</h4>\n\n<p>В следующем примере отправлено три сообщения. Первый - это просто комментарий, так как он начинается с символа двоеточия. Как упоминалось ранее, это может быть полезно в качестве подтверждения активности, если сообщения могут отправляться не регулярно.</p>\n\n<p>Второе сообщение содержит поле данных со значением «some text». Третье сообщение содержит поле данных со значением «another message \\n with two lines». Обратите внимание на специальный символ новой строки в значении.</p>\n\n<div class=\"code-example\"><pre class=\"brush: json notranslate\"><code><span class=\"token operator\">:</span> this is a test stream\n\ndata<span class=\"token operator\">:</span> some text\n\ndata<span class=\"token operator\">:</span> another message\ndata<span class=\"token operator\">:</span>\n</code></pre></div>\n\n<h4 id=\"именованные_события\">Именованные события</h4>\n\n<p>Данный пример отправляет именованные события. У каждого из них есть имя события, указанное в поле <code>event</code>, и поле <code>data</code>, значением которого является соответствующая строка JSON с данными, необходимыми для клиента, чтобы реагировать на событие. Поле <code>data</code> может, конечно, содержать любые строковые данные; это не обязательно должен быть JSON.</p>\n\n<div class=\"code-example\"><pre class=\"brush: json notranslate\"><code>event<span class=\"token operator\">:</span> userconnect\ndata<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token property\">\"username\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bobby\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"time\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"02:33:48\"</span><span class=\"token punctuation\">}</span>\n\nevent<span class=\"token operator\">:</span> usermessage\ndata<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token property\">\"username\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bobby\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"time\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"02:34:11\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"text\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hi everyone.\"</span><span class=\"token punctuation\">}</span>\n\nevent<span class=\"token operator\">:</span> userdisconnect\ndata<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token property\">\"username\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bobby\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"time\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"02:34:23\"</span><span class=\"token punctuation\">}</span>\n\nevent<span class=\"token operator\">:</span> usermessage\ndata<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token property\">\"username\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sean\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"time\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"02:34:36\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"text\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Bye, bobby.\"</span><span class=\"token punctuation\">}</span>\n</code></pre></div>\n\n<h4 id=\"смешивание_и_сопоставление\">Смешивание и сопоставление</h4>\n\n<p>Вам не нужно использовать только неназванные сообщения или именованные события. Вы можете смешать их вместе в одном потоке событий.</p>\n\n<div class=\"code-example\"><pre class=\"brush: json notranslate\"><code>event<span class=\"token operator\">:</span> userconnect\ndata<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token property\">\"username\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bobby\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"time\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"02:33:48\"</span><span class=\"token punctuation\">}</span>\n\ndata<span class=\"token operator\">:</span> Here's a system message of some kind that will get used\ndata<span class=\"token operator\">:</span> to accomplish some task.\n\nevent<span class=\"token operator\">:</span> usermessage\ndata<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token property\">\"username\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bobby\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"time\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"02:34:11\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"text\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hi everyone.\"</span><span class=\"token punctuation\">}</span></code></pre></div>"}},{"type":"browser_compatibility","value":{"title":"Совместимость с браузерами","id":"совместимость_с_браузерами","isH3":false,"query":"api.EventSource","dataURL":"/ru/docs/Web/API/Server-sent_events/Using_server-sent_events/bcd.json"}},{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div id=\"sect5\">\n\n\n<div id=\"sect6\">\n\n\n<p></p><p></p>\n</div>\n</div>"}}],"toc":[{"text":"Получение событий от сервера","id":"получение_событий_от_сервера"},{"text":"Отправка событий с сервера","id":"отправка_событий_с_сервера"},{"text":"Обработка ошибок","id":"обработка_ошибок"},{"text":"Закрытие потоков событий","id":"закрытие_потоков_событий"},{"text":"Формат потока событий","id":"формат_потока_событий"},{"text":"Совместимость с браузерами","id":"совместимость_с_браузерами"}],"summary":"\nРазрабатывать web-приложения, использующие Server-Sent Events намного проще, чем с использованием websockets. Нужно всего лишь немного кода на стороне сервера, чтобы переправлять события web-приложению, но клиентская часть кода для обработки этих событий работает почти точно так же, как и для любых других событий.\n","popularity":0.0006,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using server-sent events","locale":"en-US","native":"English (US)"},{"title":"Utilizando eventos enviados por el servidor (server-sent event)","locale":"es","native":"Español"},{"title":"Utiliser les évènements envoyés par le serveur","locale":"fr","native":"Français"},{"title":"サーバー送信イベントの使用","locale":"ja","native":"日本語"},{"title":"Server-Sent Events 사용하기","locale":"ko","native":"한국어"},{"title":"Using server-sent events","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"使用服务器发送事件","locale":"zh-CN","native":"中文 (简体)"},{"title":"使用 server-sent 事件","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ru/web/api/server-sent_events/using_server-sent_events","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/web/api/server-sent_events/using_server-sent_events/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Web","title":"Веб-технологии для разработчиков"},{"uri":"/ru/docs/Web/API","title":"Интерфейсы веб API"},{"uri":"/ru/docs/Web/API/Server-sent_events","title":"Server-sent events"},{"uri":"/ru/docs/Web/API/Server-sent_events/Using_server-sent_events","title":"Using server-sent events"}],"pageTitle":"Using server-sent events - Интерфейсы веб API | MDN","noIndexing":false}}