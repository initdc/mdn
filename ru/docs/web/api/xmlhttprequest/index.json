{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"XMLHttpRequest","mdn_url":"/ru/docs/Web/API/XMLHttpRequest","locale":"ru","native":"Русский","sidebarHTML":"<ol><li><strong><a href=\"/ru/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a></strong></li><li><strong><a href=\"/ru/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Конструктор</summary><ol><li><a href=\"/ru/docs/Web/API/XMLHttpRequest/XMLHttpRequest\"><code>XMLHttpRequest()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Свойства</summary><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XMLHttpRequest/channel\"><code>channel</code> <small>(en-US)</small></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XMLHttpRequest/mozAnon\"><code>mozAnon</code> <small>(en-US)</small></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XMLHttpRequest/mozBackgroundRequest\"><code>mozBackgroundRequest</code> <small>(en-US)</small></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XMLHttpRequest/mozSystem\"><code>mozSystem</code> <small>(en-US)</small></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XMLHttpRequest/msCaching\"><code>msCaching</code> <small>(en-US)</small></a></li><li><a href=\"/ru/docs/Web/API/XMLHttpRequest/readyState\"><code>readyState</code></a></li><li><a href=\"/ru/docs/Web/API/XMLHttpRequest/response\"><code>response</code></a></li><li><a href=\"/ru/docs/Web/API/XMLHttpRequest/responseText\"><code>responseText</code></a></li><li><a href=\"/ru/docs/Web/API/XMLHttpRequest/responseType\"><code>responseType</code></a></li><li><a href=\"/ru/docs/Web/API/XMLHttpRequest/responseURL\"><code>responseURL</code></a></li><li><a href=\"/ru/docs/Web/API/XMLHttpRequest/responseXML\"><code>responseXML</code></a></li><li><a href=\"/ru/docs/Web/API/XMLHttpRequest/status\"><code>status</code></a></li><li><a href=\"/ru/docs/Web/API/XMLHttpRequest/statusText\"><code>statusText</code></a></li><li><a href=\"/ru/docs/Web/API/XMLHttpRequest/timeout\"><code>timeout</code></a></li><li><a href=\"/ru/docs/Web/API/XMLHttpRequest/upload\"><code>upload</code></a></li><li><a href=\"/ru/docs/Web/API/XMLHttpRequest/withCredentials\"><code>withCredentials</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Методы</summary><ol><li><a href=\"/ru/docs/Web/API/XMLHttpRequest/abort\"><code>abort()</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders\"><code>getAllResponseHeaders()</code> <small>(en-US)</small></a></li><li><a href=\"/ru/docs/Web/API/XMLHttpRequest/getResponseHeader\"><code>getResponseHeader()</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XMLHttpRequest/msCachingEnabled\"><code>msCachingEnabled()</code> <small>(en-US)</small></a></li><li><a href=\"/ru/docs/Web/API/XMLHttpRequest/open\"><code>open()</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XMLHttpRequest/overrideMimeType\"><code>overrideMimeType()</code> <small>(en-US)</small></a></li><li><a href=\"/ru/docs/Web/API/XMLHttpRequest/send\"><code>send()</code></a></li><li><a href=\"/ru/docs/Web/API/XMLHttpRequest/setRequestHeader\"><code>setRequestHeader()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>События</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XMLHttpRequest/abort_event\"><code>abort</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XMLHttpRequest/error_event\"><code>error</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XMLHttpRequest/load_event\"><code>load</code> <small>(en-US)</small></a></li><li><a href=\"/ru/docs/Web/API/XMLHttpRequest/loadend_event\"><code>loadend</code></a></li><li><a href=\"/ru/docs/Web/API/XMLHttpRequest/loadstart_event\"><code>loadstart</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XMLHttpRequest/progress_event\"><code>progress</code> <small>(en-US)</small></a></li><li><a href=\"/ru/docs/Web/API/XMLHttpRequest/readystatechange_event\"><code>readystatechange</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XMLHttpRequest/timeout_event\"><code>timeout</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Наследование:</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XMLHttpRequestEventTarget\"><code>XMLHttpRequestEventTarget</code> <small>(en-US)</small></a></li><li><a href=\"/ru/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Похожие страницы для XMLHttpRequest</summary><ol><li><a href=\"/ru/docs/Web/API/FormData\"><code>FormData</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ProgressEvent\"><code>ProgressEvent</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XMLHttpRequestEventTarget\"><code>XMLHttpRequestEventTarget</code> <small>(en-US)</small></a></li><li><a class=\"page-not-created\" title=\"Документация об этом ещё не написана; пожалуйста, поспособствуйте её написанию!\"><code>XMLHttpRequestUpload</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p></p><p></p>\n\n<p><code>XMLHttpRequest</code> это API, который предоставляет клиенту функциональность для обмена данными между клиентом и сервером. Данный API предоставляет простой способ получения данных по ссылке без перезагрузки страницы. Это позволяет обновлять только часть веб-страницы не прерывая пользователя.  <code>XMLHttpRequest используется в AJAX запросах и особенно в single-page приложениях.</code></p>\n\n<p>XMLHttpRequest изначально был разработан Microsoft и позже заимствован Mozilla, Apple, и Google. Сейчас он <a href=\"https://xhr.spec.whatwg.org/\" class=\"external\" rel=\" noopener\">стандартизирован WHATWG</a>. Несмотря на своё название, <code>XMLHttpRequest</code> может быть использован для получения любых типов данных, не только XML, и поддерживает протоколы помимо <a href=\"/ru/docs/Web/HTTP\">HTTP</a> (включая <code>file</code> и <a href=\"/ru/docs/Glossary/FTP\">ftp</a>).</p>\n\n<p>Чтобы начать работать с <code>XMLHttpRequest</code>, выполните этот код:</p>\n\n<pre class=\"notranslate\">var myRequest = new XMLHttpRequest();\n</pre>\n\n<p>более детальное описание создание объекта, можно увидеть в разделе <a class=\"internal\" href=\"/ru/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\" title=\"En/Using XMLHttpRequest\">Using XMLHttpRequest</a>.</p>"}},{"type":"prose","value":{"id":"список_методов_объекта","title":"Список методов объекта","isH3":false,"content":"<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td><code><a class=\"internal\" href=\"/en-US/DOM/XMLHttpRequest#xmlhttprequest()\" title=\"/en/DOM/XMLHttpRequest#XMLHttpRequest()\">XMLHttpRequest</a>(JSObject objParameters);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a class=\"internal\" href=\"/en-US/DOM/XMLHttpRequest#abort()\" title=\"en/DOM/XMLHttpRequest#abort()\">abort</a>();</code></td>\n  </tr>\n  <tr>\n   <td><code>DOMString <a class=\"internal\" href=\"/en-US/DOM/XMLHttpRequest#getallresponseheaders()\" title=\"en/DOM/XMLHttpRequest#getAllResponseHeaders()\">getAllResponseHeaders</a>();</code></td>\n  </tr>\n  <tr>\n   <td><code>DOMString? <a class=\"internal\" href=\"/en-US/DOM/XMLHttpRequest#getresponseheader()\" title=\"en/DOM/XMLHttpRequest#getResponseHeader()\">getResponseHeader</a>(DOMString header);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a class=\"internal\" href=\"/en-US/DOM/XMLHttpRequest#open()\" title=\"en/DOM/XMLHttpRequest#open()\">open</a>(DOMString method, DOMString url, optional boolean async, optional DOMString? user, optional DOMString? password);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a class=\"internal\" href=\"/en-US/DOM/XMLHttpRequest#overridemimetype()\" title=\"en/DOM/XMLHttpRequest#overrideMimeType()\">overrideMimeType</a>(DOMString mime);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a class=\"internal\" href=\"/en-US/DOM/XMLHttpRequest#send()\" title=\"en/DOM/XMLHttpRequest#send()\">send</a>();</code><br>\n    <s><code>void <a class=\"internal\" href=\"/en-US/DOM/XMLHttpRequest#send()\" title=\"en/DOM/XMLHttpRequest#send()\">send</a>(ArrayBuffer data);</code></s><br>\n    <code>void <a class=\"internal\" href=\"/en-US/DOM/XMLHttpRequest#send()\" title=\"en/DOM/XMLHttpRequest#send()\">send</a>(ArrayBufferView data);</code><br>\n    <code>void <a class=\"internal\" href=\"/en-US/DOM/XMLHttpRequest#send()\" title=\"en/DOM/XMLHttpRequest#send()\">send</a>(Blob data);</code><br>\n    <code>void <a class=\"internal\" href=\"/en-US/DOM/XMLHttpRequest#send()\" title=\"en/DOM/XMLHttpRequest#send()\">send</a>(Document data);</code><br>\n    <code>void <a class=\"internal\" href=\"/en-US/DOM/XMLHttpRequest#send()\" title=\"en/DOM/XMLHttpRequest#send()\">send</a>(DOMString? data);</code><br>\n    <code>void <a class=\"internal\" href=\"/en-US/DOM/XMLHttpRequest#send()\" title=\"en/DOM/XMLHttpRequest#send()\">send</a>(FormData data);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a class=\"internal\" href=\"/en-US/DOM/XMLHttpRequest#setrequestheader()\" title=\"en/DOM/XMLHttpRequest#setRequestHeader()\">setRequestHeader</a>(DOMString header, DOMString value);</code></td>\n  </tr>\n  <tr>\n   <th>Нестандартные методы</th>\n  </tr>\n  <tr>\n   <td><code>[noscript] void <a class=\"internal\" href=\"/en-US/DOM/XMLHttpRequest#init()\" title=\"en/DOM/XMLHttpRequest#init()\">init</a>(in nsIPrincipal principal, in nsIScriptContext scriptContext, in nsPIDOMWindow ownerWindow);</code></td>\n  </tr>\n  <tr>\n   <td><code>[noscript] void <a class=\"internal\" href=\"/en-US/DOM/XMLHttpRequest#openrequest()\" title=\"en/DOM/XMLHttpRequest#openRequest()\">openRequest</a>(in AUTF8String method, in AUTF8String url, in boolean async, in AString user, in AString password); </code></td>\n  </tr>\n  <tr>\n   <td><code>void <a class=\"internal\" href=\"/en-US/DOM/XMLHttpRequest#sendasbinary()\" title=\"en/DOM/XMLHttpRequest#sendAsBinary()\">sendAsBinary</a>(in DOMString body);</code> <span class=\"notecard inline deprecated\" title=\"(Firefox 31 / Thunderbird 31 / SeaMonkey 2.28)\">Устарело Gecko 31</span></td>\n  </tr>\n </tbody>\n</table>"}},{"type":"prose","value":{"id":"поля_объекта","title":"Поля объекта","isH3":false,"content":"<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <th>Attribute</th>\n   <th>Type</th>\n   <th>Description</th>\n  </tr>\n  <tr id=\"onreadystatechange\">\n   <td>\n    <p><code>onreadystatechange</code></p>\n   </td>\n   <td><code>Function?</code></td>\n   <td>\n    <p>Callback - функция, которая вызывается всякий раз, когда поле <code>readyState меняет своё значение</code>. Callback выполняется в потоке работы приложения.</p>\n\n    <div class=\"warning notecard\" id=\"sect1\"><strong>Внимание:</strong> Он не должен использоваться в синхронных запросах, и не должен выполняться из нативного кода (? must not be used from native code).</div>\n   </td>\n  </tr>\n  <tr id=\"readyState\">\n   <td><code>readyState</code></td>\n   <td><code>unsigned short</code></td>\n   <td>\n    <p>Состояние запроса:</p>\n\n    <table class=\"standard-table\">\n     <tbody>\n      <tr>\n       <td class=\"header\">Значение</td>\n       <td class=\"header\">Состояние</td>\n       <td class=\"header\">Описание</td>\n      </tr>\n      <tr>\n       <td><code>0</code></td>\n       <td><code>UNSENT</code></td>\n       <td>Клиент создан. Метод <code>open()</code> ещё не вызван.</td>\n      </tr>\n      <tr>\n       <td><code>1</code></td>\n       <td><code>OPENED</code></td>\n       <td>Вызван метод open<code>()</code>. В этом состоянии можно добавить заголовки через метод <code>setRequestHeader()</code>; вызов метода <code>send()</code> отправит запрос.</td>\n      </tr>\n      <tr>\n       <td><code>2</code></td>\n       <td><code>HEADERS_RECEIVED</code></td>\n       <td>Вызван метод <code>send()</code>, получены заголовки и код ответа (200, 404, 501 и проч.).</td>\n      </tr>\n      <tr>\n       <td><code>3</code></td>\n       <td><code>LOADING</code></td>\n       <td>Загрузка; если значение <code>responseType</code> равно \"text\" или пустой строке, то <code>responseText</code> содержит частичные данные.</td>\n      </tr>\n      <tr>\n       <td><code>4</code></td>\n       <td><code>DONE</code></td>\n       <td>Операция завершена. Все данные получены.</td>\n      </tr>\n     </tbody>\n    </table>\n   </td>\n  </tr>\n  <tr id=\"response\">\n   <td><code>response</code></td>\n   <td>varies</td>\n   <td>\n    <p>Тело сущности запроса. Согласно полю <code><a href=\"#responsetype\">responseType</a></code>, может быть <a href=\"/en-US/JavaScript_typed_arrays/ArrayBuffer\" title=\"en/JavaScript typed arrays/ArrayBuffer\"><code>ArrayBuffer</code></a>, <a href=\"/en-US/DOM/Blob\" title=\"en/DOM/Blob\"><code>Blob</code></a>, <a href=\"/ru/docs/Web/API/Document\"><code>Document</code></a>, JavaScript объектом (для \"json\"), или строкой. Равно <code>null</code> если запрос не завершён или окончен с ошибкой.</p>\n   </td>\n  </tr>\n  <tr id=\"responseText\">\n   <td><code>responseText</code> <span title=\"Это значение изменять нельзя.\" class=\"badge inline readonly\">Только для чтения </span></td>\n   <td><code>DOMString</code></td>\n   <td>Ответ на запрос в виде строки или <code>null</code> в случае если запрос не успешен или ответ ещё не получен.</td>\n  </tr>\n  <tr id=\"responseType\">\n   <td><code>responseType</code></td>\n   <td><code>XMLHttpRequestResponseType</code></td>\n   <td>\n    <p>Может использоваться для определения типа ответа.</p>\n\n    <table class=\"standard-table\" style=\"width: auto;\">\n     <tbody>\n      <tr>\n       <td class=\"header\">Value</td>\n       <td class=\"header\">Data type of <code>response</code> property</td>\n      </tr>\n      <tr>\n       <td><code>\"\"</code> (пустая строка)</td>\n       <td>String (строка, дефолтное значение)</td>\n      </tr>\n      <tr>\n       <td><code>\"arraybuffer\"</code></td>\n       <td><a href=\"/en-US/JavaScript_typed_arrays/ArrayBuffer\" title=\"en/JavaScript typed arrays/ArrayBuffer\"><code>ArrayBuffer</code></a></td>\n      </tr>\n      <tr>\n       <td><code>\"blob\"</code></td>\n       <td><a href=\"/ru/docs/Web/API/Blob\"><code>Blob</code></a></td>\n      </tr>\n      <tr>\n       <td><code>\"document\"</code></td>\n       <td><a href=\"/ru/docs/Web/API/Document\"><code>Document</code></a></td>\n      </tr>\n      <tr>\n       <td><code>\"json\"</code></td>\n       <td>JavaScript объект, полученный путём парсинга JSON строки, полученной с сервера.</td>\n      </tr>\n      <tr>\n       <td><code>\"text\"</code></td>\n       <td>String (строка)</td>\n      </tr>\n      <tr>\n       <td><code>\"moz-blob\"</code></td>\n       <td>Firefox - велосипед, который позволяет работать с частично-полученными данными <a href=\"/ru/docs/Web/API/Blob\"><code>Blob</code></a> при помощи событий прогресса (progressing events). Эта штука позволяет работать с ответом от сервера, до того как он получен полностью.</td>\n      </tr>\n      <tr>\n       <td><code>\"moz-chunked-text\"</code></td>\n       <td>\n        <p>Похоже на поле <code>\"text\"</code>, но только находится в потоке(streaming). Это значит, что значение доступно только в промежуток времени между событиями прогресса (<code>\"progress\"</code> event), и содержит данные которые пришли из последнего события прогресса.</p>\n\n        <p>Поле содержит строку, пока выполняются события прогресса. После того как ответ получен полностью, значение поля меняется на <code>null</code>.</p>\n\n        <p>Работает только в Firefox.</p>\n       </td>\n      </tr>\n      <tr>\n       <td><code>\"moz-chunked-arraybuffer\"</code></td>\n       <td>\n        <p>Похоже на поле <code>\"arraybuffer\"</code>, но только находится в потоке(streaming). Это значит, что значение доступно только в промежуток времени между событиями прогресса (<code>\"progress\"</code> event), и содержит данные которые пришли из последнего события прогресса.</p>\n\n        <p>Поле содержит строку, пока выполняются события прогресса. После того как ответ получен полностью, значение поля меняется на <code>null</code>.</p>\n\n        <p>Работает только в Firefox.</p>\n       </td>\n      </tr>\n     </tbody>\n    </table>\n\n    <div class=\"note notecard\" id=\"sect2\"><strong>Note:</strong> Starting with Gecko 11.0 (Firefox 11.0 / Thunderbird 11.0 / SeaMonkey 2.8), as well as WebKit build 528, these browsers no longer let you use the <code>responseType</code> attribute when performing synchronous requests. Attempting to do so throws an <code>NS_ERROR_DOM_INVALID_ACCESS_ERR</code> exception. This change has been proposed to the W3C for standardization.</div>\n   </td>\n  </tr>\n  <tr id=\"responseXML\">\n   <td><code>responseXML</code> <span title=\"Это значение изменять нельзя.\" class=\"badge inline readonly\">Только для чтения </span></td>\n   <td><code>Document?</code></td>\n   <td>\n    <p>Ответ является объектом DOM <code><a class=\"internal\" href=\"/en-US/DOM/document\" title=\"En/DOM/Document\">Document</a></code>, или <code>null в случае если запрос окончился ошибкой, или ответ не получен полностью, или если ответ невозможно распарсить как </code>XML или HTML. Ответ парсится как если бы это был <code>text/xml</code> stream. Когда значение <code>responseType</code> равно <code>\"document\"</code> и запрос выполнен асинхронно, ответ парсится как <code>text/html</code> stream.</p>\n\n    <div class=\"note notecard\" id=\"sect3\"><strong>Примечание:</strong> Если сервер не работает с заголовком (не присылает в ответе) \"Content-type: <code>text/xml\"</code>, то можно использовать метод <code>overrideMimeType() для того чтобы парсить получаемый ответ как </code>XML.</div>\n   </td>\n  </tr>\n  <tr id=\"status\">\n   <td><code>status</code> <span title=\"Это значение изменять нельзя.\" class=\"badge inline readonly\">Только для чтения </span></td>\n   <td><code>unsigned short</code></td>\n   <td>Статус ответа на запрос. Равен кодам HTTP (200 - успешно, 404 не найдено, 301 - перенесено навсегда).</td>\n  </tr>\n  <tr id=\"statusText\">\n   <td><code>statusText</code> <span title=\"Это значение изменять нельзя.\" class=\"badge inline readonly\">Только для чтения </span></td>\n   <td><code>DOMString</code></td>\n   <td>Строка статуса ответа. В отличи от поля <code>status</code>, эта строка включает в себя текст - (\"<code>200 OK</code>\", например).</td>\n  </tr>\n  <tr id=\"timeout\">\n   <td><code>timeout</code></td>\n   <td><code>unsigned long</code></td>\n   <td>\n    <p>Время в миллисекундах, после которого запрос будет отменён. Значение 0 (по умолчанию) значит что таймаута не будет. Никогда.</p>\n\n    <div class=\"note notecard\" id=\"sect4\"><strong>Примечание:</strong> Вы можете не использовать поле timeout для синхронных запросов из owning window.</div>\n   </td>\n  </tr>\n  <tr id=\"ontimeout\">\n   <td><code>ontimeout</code></td>\n   <td><code>Function</code></td>\n   <td>\n    <p>Колбэк-функция которая будет вызвана в случае таймаута.</p>\n   </td>\n  </tr>\n  <tr id=\"upload\">\n   <td><code>upload</code></td>\n   <td><code>XMLHttpRequestUpload</code></td>\n   <td>Загрузка (upload process) может отслеживаться обработчиком события.</td>\n  </tr>\n  <tr id=\"withCredentials\">\n   <td><code>withCredentials</code></td>\n   <td><code>boolean</code></td>\n   <td>\n    <p>Определяет что cross-site запрос, согласно <code>Access-Control</code>  должен использовать авторизацию (креды для логина и пароля) через куки, или заголовок с авторизационными данными. По умолчанию false.</p>\n\n    <div class=\"note notecard\" id=\"sect5\"><strong>Примечание:</strong> Не влияет на same-site запросы.</div>\n\n    <div class=\"note notecard\" id=\"sect6\"><strong>Примечание:</strong> Начиная с Gecko 11.0 (Firefox 11.0 / Thunderbird 11.0 / SeaMonkey 2.8), Gecko больше не позволяет использовать поле <code>withCredentials</code> при выполнении синхронных запросов. Попытка выполнить это выбрасывает <code>NS_ERROR_DOM_INVALID_ACCESS_ERR</code> исключение.</div>\n   </td>\n  </tr>\n </tbody>\n</table>"}},{"type":"prose","value":{"id":"нестандартные_свойства","title":"Нестандартные свойства","isH3":true,"content":"<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <th>Attribute</th>\n   <th>Type</th>\n   <th>Description</th>\n  </tr>\n  <tr id=\"channel\">\n   <td><code>channel</code> <span title=\"Это значение изменять нельзя.\" class=\"badge inline readonly\">Только для чтения </span></td>\n   <td><code>nsIChannel</code></td>\n   <td>The channel used by the object when performing the request. This is <code>null</code> if the channel hasn't been created yet. In the case of a multi-part request, this is the initial channel, not the different parts in the multi-part request. <strong>Requires elevated privileges to access.</strong></td>\n  </tr>\n  <tr id=\"mozAnon\">\n   <td><code>mozAnon</code> <span title=\"Это значение изменять нельзя.\" class=\"badge inline readonly\">Только для чтения </span></td>\n   <td><code>boolean</code></td>\n   <td>\n    <p>Если значение равно true, запрос отправляется без куки и заголовков авторизации.</p>\n   </td>\n  </tr>\n  <tr id=\"mozSystem\">\n   <td><code>mozSystem</code> <span title=\"Это значение изменять нельзя.\" class=\"badge inline readonly\">Только для чтения </span></td>\n   <td><code>boolean</code></td>\n   <td>\n    <p>Если значение равно true, same origin policy не будут использоваться в запросе (кроссдоменный запрос не сработает).</p>\n   </td>\n  </tr>\n  <tr id=\"mozBackgroundRequest\">\n   <td><code>mozBackgroundRequest</code></td>\n   <td><code>boolean</code></td>\n   <td>\n    <div class=\"note notecard\" id=\"sect7\">\n    <p>Этот метод не может быть вызван из контекста страницы. Для того чтобы воспользоваться им нужны повышенные привелегии (elevated privileges).</p>\n    </div>\n\n    <p>Флаг, означающий что запрос от пользователя надо скрыть. Для пользователя не появится никаких сообщений и/или оповещений что запрос вообще был.</p>\n\n    <p>В случае, если для продолжения запроса нужна какая-то аутентификация, и в других случаях было бы отображено оповещение, этот запрос просто не сработает.</p>\n\n    <div class=\"note notecard\" id=\"sect8\"><strong>Note: Этот флаг должен быть выставлен до вызова метода </strong><code>open()</code>.</div>\n   </td>\n  </tr>\n  <tr id=\"mozResponseArrayBuffer\">\n   <td><code>mozResponseArrayBuffer</code> <span title=\"(Firefox 6 / Thunderbird 6 / SeaMonkey 2.3)\" class=\"notecard inline obsolete\">Вышла из употребления с версии Gecko 6</span> <span title=\"Это значение изменять нельзя.\" class=\"badge inline readonly\">Только для чтения </span></td>\n   <td><a href=\"/en-US/JavaScript_typed_arrays/ArrayBuffer\" title=\"en/JavaScript typed arrays/ArrayBuffer\"><code>ArrayBuffer</code></a></td>\n   <td>Массив, в который ляжет ответ от сервера, если ответ приходит в виде Javascript массива ([]). В случае, если запрос не удалось завершить, или если запрос не был отправлен, то это поле будет null.</td>\n  </tr>\n  <tr id=\"multipart\">\n   <td><code>multipart</code> <span title=\"(Firefox 22 / Thunderbird 22 / SeaMonkey 2.19)\" class=\"notecard inline obsolete\">Вышла из употребления с версии Gecko 22</span></td>\n   <td><code>boolean</code></td>\n   <td>\n    <p><strong>This Gecko-only feature was removed in Firefox/Gecko 22.</strong> Please use <a href=\"/en-US/docs/Web/API/Server-sent_events\" title=\"/en-US/docs/Server-sent_events\">Server-Sent Events</a>, <a href=\"/en-US/docs/Web/API/WebSockets_API\" title=\"/en-US/docs/WebSockets\">Web Sockets</a>, or <code>responseText</code> from progress events instead.</p>\n\n    <p>Indicates whether or not the response is expected to be a stream of possibly multiple XML documents. If set to <code>true</code>, the content type of the initial response must be <code>multipart/x-mixed-replace</code> or an error will occur. All requests must be asynchronous.</p>\n\n    <p>This enables support for server push; for each XML document that's written to this request, a new XML DOM document is created and the <code>onload</code> handler is called between documents.</p>\n\n    <div class=\"note notecard\" id=\"sect9\"><strong>Note:</strong> When this is set, the <code>onload</code> handler and other event handlers are not reset after the first XMLdocument is loaded, and the <code>onload</code> handler is called after each part of the response is received.</div>\n   </td>\n  </tr>\n </tbody>\n</table>"}},{"type":"prose","value":{"id":"конструктор","title":"Конструктор","isH3":false,"content":""}},{"type":"prose","value":{"id":"xmlhttprequest()","title":"XMLHttpRequest()","isH3":true,"content":"<p>Конструктор создаёт объект XMLHttpRequest. Он должен быть вызван перед обращением к любому методу класса.</p>\n\n<p>Gecko/Firefox 16 добавляет нестандартные параметры в конструктор, для лучшего взаимодействия с режимом инкогнито, (смотри <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=692677\" title=\"692677 – Relax same-origin XHR restrictions for privileged applications\" class=\"external\" rel=\" noopener\">Bug 692677</a>). Установка флага <code>mozAnon</code> в значение <code>true</code> создаёт сущность <a href=\"https://www.w3.org/TR/2012/WD-XMLHttpRequest-20120117/#dom-anonxmlhttprequest\" title=\"see AnonXMLHttpRequest in the XMLHttpRequest specification\" class=\"external\" rel=\" noopener\"><code>AnonXMLHttpRequest()</code></a> описанную в XMLHttpRequest спецификации, но не реализованную не в одном из браузеров (информация сентября 2012).</p>\n\n<pre class=\"notranslate\">XMLHttpRequest (\n  JSObject objParameters\n);</pre>\n\n<h5 id=\"параметры_(нестандартные)\">Параметры (нестандартные)</h5>\n\n<dl>\n <dt id=\"objparameters\"><code>objParameters</code></dt>\n <dd>Вы можете использовать два флага:\n <dl>\n  <dt id=\"mozanon\"><code>mozAnon</code></dt>\n  <dd>Boolean: Использование этого флага уберёт из запроса заголовки origin, и <a href=\"https://www.w3.org/TR/2012/WD-XMLHttpRequest-20120117/#user-credentials\" title=\"Defintion of “User credentials” in the XMLHttpRequest specification.\" class=\"external\" rel=\" noopener\">user credentials</a>. Кроме этого, куки не будут отправлены в запросе, если только они не будут добавлены к запросу специально, через метод setRequestHeader.</dd>\n  <dt id=\"mozsystem\"><code>mozSystem</code></dt>\n  <dd>Boolean: Если выставить этот флаг в значение <code>true</code> то это позволит делать cross-доменные запросы без необходимости получения специальных заголовков со стороны сервера (CORS). Для использования этого флага необходимо использовать дополнительный флаг<em> <code>mozAnon: true</code>, поскольку для отправки запроса на другой домен, нельзя использовать куки и креды пользователя. Этот флаг <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=692677#c68\" title=\"Bug 692677 comment 68\" class=\"external\" rel=\" noopener\">работает только с привилегированными (одобренными) приложениями</a>; он не сработает с произвольно загруженными страницами.</em></dd>\n </dl>\n </dd>\n</dl>"}},{"type":"prose","value":{"id":"методы","title":"Методы","isH3":false,"content":""}},{"type":"prose","value":{"id":"abort()","title":"abort()","isH3":true,"content":"<p>Отменяет запрос, если он был отправлен.</p>"}},{"type":"prose","value":{"id":"getallresponseheaders()","title":"getAllResponseHeaders()","isH3":true,"content":"<pre class=\"notranslate\">DOMString getAllResponseHeaders();</pre>\n\n<p>Возвращает все заголовки ответа как строку, или <code>null</code> если ответ не был получен. Для multypart запросов возвращает заголовки текущей части запроса, а не всего канала.</p>"}},{"type":"prose","value":{"id":"getresponseheader()","title":"getResponseHeader()","isH3":true,"content":"<pre class=\"notranslate\">DOMString? getResponseHeader(DOMString <var>header</var>);</pre>\n\n<p>Возвращает значение указанного заголовка из полученного ответа, или <code>null</code> в случает если ответ не получен, или такого заголовка в ответе нет. Возвращаемая строка имеет кодировку UTF.</p>\n\n<div class=\"note notecard\" id=\"sect10\">\n<p><code><strong>Примечание: </strong>Если в ответе есть заголовки с одни названием, то значения этих заголовков будут объеденены в одну строку, разделённую запятой и пробелом.</code></p>\n</div>"}},{"type":"prose","value":{"id":"open()","title":"open()","isH3":true,"content":"<p>Инициализирует запрос. Этот метод может (и должен) быть вызван из JavaScript-кода; если необходимо вызвать запрос из нативного кода, то нужно использовать метод <a class=\"internal\" href=\"/en-US/nsIXMLHttpRequest#openrequest()\" title=\"/en/XMLHttpRequest#openRequest()\"><code>openRequest()</code></a>.</p>\n\n<div class=\"note notecard\" id=\"sect11\"><strong>Примечание:</strong> Вызов этого метода из активного запроса (если метод <code>open() или</code> <code>openRequest() уже были вызваны</code>) эквивалентно вызову метода <code>abort()</code>.</div>\n\n<pre class=\"notranslate\">void open(\n   DOMString <var>method</var>,\n   DOMString <var>url</var>,\n   optional boolean <var>async</var>,\n   optional DOMString <var>user</var>,\n   optional DOMString <var>password</var>\n);\n</pre>\n\n<h6 id=\"параметры\">Параметры</h6>\n\n<dl>\n <dt id=\"method\"><code>method</code></dt>\n <dd>HTTP метод отправки сообщения - \"GET\", \"POST\", \"PUT\", \"DELETE\", и проч.. Ignored for non-HTTP(S) URLs.</dd>\n <dt id=\"url\"><code>url</code></dt>\n <dd>URL адрес, на который будет отправлено сообщение.</dd>\n <dt id=\"async\"><code>async</code></dt>\n <dd>Необязательный boolean параметр, по умолчанию равный <code>true. Определяет, будет ли запрос отправлен асинхронно. Если значение равно</code> <code>false</code>, метод <code>send() вернёт ответ в общем потоке работы приложения (иначе говоря, приложение зависнет на некоторое время), в противном случае, ответ может быть получен только при помощи определённых </code> обработчиков событий. В случае, если используется отправка <code>multipart</code> запроса, то этот атрибут <strong>должен </strong>быть <code>true</code>, или будет выброшено исключение.\n <div class=\"note notecard\" id=\"sect12\"><strong>Примечание:</strong> Начиная с Gecko 30.0 (Firefox 30.0 / Thunderbird 30.0 / SeaMonkey 2.27), синхронные запросы объявлены как deprecated, в силу того что все пользователи недовольны тем, что приложение \"зависает\".</div>\n </dd>\n <dt id=\"user\"><code>user</code></dt>\n <dd>Необязательный параметр, используется для аутентификации пользователя. По умолчанию, пустая строка.</dd>\n <dt id=\"password\"><code>password</code></dt>\n <dd>Необязательный параметр, используется для аутентификации пользователя. По умолчанию пустая строка.</dd>\n</dl>"}},{"type":"prose","value":{"id":"overridemimetype()","title":"overrideMimeType()","isH3":true,"content":"<p>Переопределяет MIME тип, получаемый от сервера. Это может быть использовано, например, для того чтобы получить и распарсить данные в формате text/xml, даже, если сервер сообщает что это не так. Этот метод должен быть вызван перед вызовом метода <code>send()</code>.</p>\n\n<pre class=\"notranslate\">void overrideMimeType(DOMString <var>mimetype</var>);</pre>"}},{"type":"prose","value":{"id":"send()","title":"send()","isH3":true,"content":"<p>Отправляет запрос. Если запрос асинхронный (а по умолчанию это так), этот метод вернёт значение сразу после того как метод вызван.</p>\n\n<div class=\"note notecard\" id=\"sect13\">\n<p><strong>Примечание переводчика: </strong>в этом случае, в ответе не будет содержаться информации, которая пришла с сервера, поскольку она ещё не пришла. Для того чтобы получить эту информацию, нужно слушать события загрузки, или использовать promise.</p>\n</div>\n\n<p>Если запрос синхронный, то метод вернёт значение только после того, как придёт запрос от сервера.</p>\n\n<div class=\"note notecard\" id=\"sect14\"><strong>Примечание:</strong> все необходимые обработчики событий должны быть установлены перед вызовом <code>send()</code>.</div>\n\n<div class=\"note notecard\" id=\"sect15\"><strong>Примечание:</strong> Лучше не использовать параметр ArrayBuffer. Сейчас он не входит в спецификацию <code>XMLHttpRequest</code>. Вместо него можно использовать ArrayBufferView (смотри таблицу совместимости для различных версий).</div>\n\n<pre class=\"notranslate\">void send();\n<s>void send(ArrayBuffer <var>data</var>);</s>\nvoid send(ArrayBufferView <var>data</var>);\nvoid send(Blob <var>data</var>);\nvoid send(Document <var>data</var>);\nvoid send(DOMString? <var>data</var>);\nvoid send(FormData <var>data</var>);</pre>\n\n<h6 id=\"примечания\">Примечания</h6>\n\n<p>Если тип <var>data</var> - <code>Document</code>, то он будет сериализован перед отправкой. Firefox до версии 3 всегда отправляет такой запрос в кодировке UTF-8; <a href=\"/en-US/Firefox_3\" rel=\"internal\" title=\"en/Firefox_3\">Firefox 3</a> отправляет данные в той кодировке, которая указаны в <code>body.xmlEncoding</code>, или UTF-8 если такой информации нет.</p>\n\n<p>If it's an <code>nsIInputStream</code>, it must be compatible with <code>nsIUploadChannel</code>'s <code>setUploadStream()</code>method. In that case, a Content-Length header is added to the request, with its value obtained using <code>nsIInputStream</code>'s <code>available()</code>method. Any headers included at the top of the stream are treated as part of the message body. The stream's MIMEtype should be specified by setting the Content-Type header using the <a class=\"internal\" href=\"#setrequestheader()\" title=\"/en/XMLHttpRequest#setRequestHeader()\"><code>setRequestHeader()</code></a> method prior to calling <code>send()</code>.</p>\n\n<p>The best way to send binary content (like in files upload) is using an <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\" title=\"/en-US/docs/JavaScript/Typed_arrays/ArrayBufferView\">ArrayBufferView</a> or <a href=\"/en-US/docs/Web/API/Blob\" title=\"/en-US/docs/DOM/Blob\">Blobs</a> in conjuncton with the <code>send()</code> method. However, if you want to send a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\" title=\"/en-US/docs/JavaScript/Reference/Global_Objects/JSON/stringify\">stringifiable</a> raw data, use the <a href=\"/en-US/docs/Web/API/XMLHttpRequest#sendasbinary()\" title=\"/en-US/docs/DOM/XMLHttpRequest#sendAsBinary()\"><code>sendAsBinary()</code></a> method instead, or the <a href=\"/en-US/docs/Web/JavaScript/Typed_arrays/StringView\" title=\"This is a link to an unwritten page\" class=\"page-not-created\"><code>StringView</code></a> Non native typed arrays superclass.</p>"}},{"type":"prose","value":{"id":"setrequestheader()","title":"setRequestHeader()","isH3":true,"content":"<p>Устанавливает значение заголовка HTTP-запроса. Вы должны вызвать <code>setRequestHeader()</code> после <a href=\"#open\"><code>open()</code></a>, но перед <code>send()</code>. Если данный метод вызывается несколько раз с одним и тем же заголовком, все значения объединяются в один заголовок запроса.</p>\n\n<pre class=\"notranslate\">void setRequestHeader(\n   DOMString <var>header</var>,\n   DOMString <var>value</var>\n);\n</pre>\n\n<h6 id=\"параметры_2\">Параметры</h6>\n\n<dl>\n <dt id=\"header\"><code>header</code></dt>\n <dd>Имя заголовка, значение которого будет установлено.</dd>\n <dt id=\"value\"><code>value</code></dt>\n <dd>Значение, заданное как тело заголовка.</dd>\n</dl>"}},{"type":"prose","value":{"id":"нестандартные_методы","title":"Нестандартные методы","isH3":true,"content":"<h4 id=\"init()\">init()</h4>\n\n<p>Инициализирует объект для использования с C++ кодом.</p>\n\n<div class=\"warning notecard\" id=\"sect16\"><strong>Внимание:</strong> Этот метод <strong><em>нельзя</em></strong> вызывать из JavaScript.</div>\n\n<pre class=\"notranslate\">[noscript] void init(\n   in nsIPrincipal principal,\n   in nsIScriptContext scriptContext,\n   in nsPIDOMWindow ownerWindow\n);\n</pre>\n\n<h5 id=\"параметры_3\">Параметры</h5>\n\n<dl>\n <dt id=\"principal\"><code>principal</code></dt>\n <dd>\n <p>Принцип, используемый для запроса; не должен быть <code>null</code>.</p>\n </dd>\n <dt id=\"scriptcontext\"><code>scriptContext</code></dt>\n <dd>\n <p>Контекст скрипта, используемого для запроса; не должен быть <code>null</code>.</p>\n </dd>\n <dt id=\"ownerwindow\"><code>ownerWindow</code></dt>\n <dd>\n <p>Окно, связанное с запросом; может быть <code>null</code>.</p>\n </dd>\n</dl>\n\n<h4 id=\"openrequest()\">openRequest()</h4>\n\n<p>Инициализирует запрос. Этот метод должен использоваться из собственного кода; для инициализации запроса из кода JavaScript вместо этого используйте используйте <code><a class=\"internal\" href=\"/en-US/nsIXMLHttpRequest#open()\" title=\"/en/XMLHttpRequest#open()\">open()</a></code> метод. Смотрите документацию для <code><a class=\"internal\" href=\"/en-US/nsIXMLHttpRequest#open()\" title=\"/en/XMLHttpRequest#open()\">open()</a></code>.</p>\n\n<h4 id=\"sendasbinary()_deprecated_inline(31)\">sendAsBinary() <span class=\"notecard inline deprecated\" title=\"(Firefox 31 / Thunderbird 31 / SeaMonkey 2.28)\">Устарело Gecko 31</span></h4>\n\n<p>Вариант метода <code>send()</code> который посылает бинарные данные.</p>\n\n<div class=\"note notecard\" id=\"sect17\"><strong>Примечание:</strong> Этот нестандартный метод считается устарелым по состоянию на Gecko 31 (Firefox 31 / Thunderbird 31 / SeaMonkey 2.28), и со временем будет удалён. Взамен может использоваться стандарт метода <code>send(Blob data).</code> </div>\n\n<pre class=\"notranslate\">void sendAsBinary(\n   in DOMString body\n);\n</pre>\n\n<p>Данный метод используется в сочетании с методом <code><a href=\"/en-US/docs/Web/API/FileReader#readasbinarystring()\" title=\"/en-US/docs/DOM/FileReader#readAsBinaryString()\">readAsBinaryString</a>,</code> который присутствует в <a href=\"/en-US/docs/Web/API/FileReader\" title=\"/en-US/docs/DOM/FileReader\"><code>FileReader</code></a> API, и позволяет <a href=\"/en-US/docs/DOM/XMLHttpRequest/Using_XMLHttpRequest#Submitting_forms_and_uploading_files\" title=\"/en-US/docs/DOM/XMLHttpRequest/Using_XMLHttpRequest#Submitting_forms_and_uploading_files\">прочитать и <strong>загрузить</strong> файл любого типа</a> и превратить необработанные данные в <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\" title=\"/en-US/docs/JavaScript/Reference/Global_Objects/JSON/stringify\">JSON-строку</a>.</p>\n\n<h5 id=\"параметры_4\">Параметры</h5>\n\n<dl>\n <dt id=\"body\"><code>body</code></dt>\n <dd>Тело запроса в виде <a href=\"/ru/docs/Web/API/DOMString\">DOMstring</a>. Эти данные конвертированы в строку с однобайтовыми символами с помощью усечения (удаления байта с высоким порядком в каждом символе).</dd>\n</dl>\n\n<h5 id=\"sendasbinary()_polyfill\"><code>sendAsBinary()</code> polyfill</h5>\n\n<p>Since <code>sendAsBinary()</code> is an experimental feature, here is <strong>a polyfill</strong> for browsers that <em>don't</em> support the <code>sendAsBinary()</code> method but support <a href=\"/en-US/docs/Web/JavaScript/Typed_arrays\" title=\"/en-US/docs/JavaScript/Typed_arrays\">typed arrays</a>.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/*\\\n|*|\n|*|  :: XMLHttpRequest.prototype.sendAsBinary() Polyfill ::\n|*|\n|*|  https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#sendAsBinary()\n|*|\n\\*/</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>sendAsBinary<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sendAsBinary</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">sData</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> nBytes <span class=\"token operator\">=</span> sData<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> ui8Data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>nBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> nIdx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> nIdx <span class=\"token operator\">&lt;</span> nBytes<span class=\"token punctuation\">;</span> nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      ui8Data<span class=\"token punctuation\">[</span>nIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sData<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>nIdx<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/* send as ArrayBufferView...: */</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>ui8Data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* ...or as ArrayBuffer (legacy)...: this.send(ui8Data.buffer); */</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<div class=\"note notecard\" id=\"sect18\"><strong>Note:</strong> It's possible to build this polyfill putting two types of data as argument for <code>send()</code>: an <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\" title=\"/en-US/docs/JavaScript/Typed_arrays/ArrayBuffer\"><code>ArrayBuffer</code></a> (<code>ui8Data.buffer</code> – the commented code) or an <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\" title=\"/en-US/docs/JavaScript/Typed_arrays/ArrayBufferView\"><code>ArrayBufferView</code></a> (<code>ui8Data</code>, which is a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\" title=\"/en-US/docs/JavaScript/Typed_arrays/Uint8Array\">typed array of 8-bit unsigned integers</a> – uncommented code). However, on Google Chrome, when you try to send an <code>ArrayBuffer</code>, the following warning message will appear: <code>ArrayBuffer is deprecated in XMLHttpRequest.send(). Use ArrayBufferView instead.</code> Another possible approach to send binary data is the <a href=\"/en-US/docs/Web/JavaScript/Typed_arrays/StringView\" title=\"This is a link to an unwritten page\" class=\"page-not-created\"><code>StringView</code></a> Non native typed arrays superclass in conjunction with the <a href=\"#send()\" title=\"#send()\"><code>send()</code></a> method.</div>"}},{"type":"prose","value":{"id":"notes","title":"Notes","isH3":false,"content":"<ul>\n <li>By default, Firefox 3 limits the number of <code>XMLHttpRequest</code> connections per server to 6 (previous versions limit this to 2 per server). Some interactive web sites may keep an <code>XMLHttpRequest</code> connection open, so opening multiple sessions to such sites may result in the browser hanging in such a way that the window no longer repaints and controls don't respond. This value can be changed by editing the <code>network.http.max-persistent-connections-per-server</code> preference in <code><a href=\"/about:config\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">about:config</a></code>.</li>\n <li>From <span title=\"(Firefox 7.0 / Thunderbird 7.0 / SeaMonkey 2.4)\">Gecko&nbsp;7.0</span> headers set by <a href=\"#setrequestheader\">setRequestHeader</a> are sent with the request when following a redirect. Previously these headers would not be sent.</li>\n <li><code>XMLHttpRequest</code> is implemented in Gecko using the <code>nsIXMLHttpRequest</code>, <code>nsIXMLHttpRequestEventTarget</code>, and <code>nsIJSXMLHttpRequest</code> interfaces.</li>\n <li>When a request reaches its timeout value, a \"timeout\" event is raised.</li>\n</ul>\n\n<h4 id=\"events\">Events</h4>\n\n<p><code>onreadystatechange</code> as a property of the <code>XMLHttpRequest</code> instance is supported in all browsers.</p>\n\n<p>Since then, a number of additional event handlers were implemented in various browsers (<code>onload</code>, <code>onerror</code>, <code>onprogress</code>, etc.). These are supported in Firefox. In particular, see <code>nsIXMLHttpRequestEventTarget</code> and <a href=\"/en-US/DOM/XMLHttpRequest/Using_XMLHttpRequest\" title=\"En/XMLHttpRequest/Using_XMLHttpRequest\">Using XMLHttpRequest</a>.</p>\n\n<p>More recent browsers, including Firefox, also support listening to the <code>XMLHttpRequest</code> events via standard <code><a href=\"/en-US/DOM/element.addEventListener\" title=\"element.addEventListener\">addEventListener</a></code> APIs in addition to setting <code>on*</code> properties to a handler function.</p>"}},{"type":"prose","value":{"id":"permissions","title":"Permissions","isH3":false,"content":"<p>When using System XHR via the <code>mozSystem</code> property, for example for Firefox OS apps, you need to be sure to add the <code>systemXHR</code> permission into your manifest file. System XHR can be used in privileged or certified apps.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string-property property\">\"permissions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"systemXHR\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>"}},{"type":"browser_compatibility","value":{"title":"Совместимость с браузерами","id":"browser_compatibility","isH3":false,"query":"api.XMLHttpRequest","dataURL":"/ru/docs/Web/API/XMLHttpRequest/bcd.json"}},{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p></p><p></p>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n <li>MDN articles about XMLHttpRequest:\n  <ul>\n   <li><a href=\"/en-US/AJAX/Getting_Started\" title=\"en/AJAX/Getting_Started\">AJAX - Getting Started</a></li>\n   <li><a href=\"/en-US/DOM/XMLHttpRequest/Using_XMLHttpRequest\" title=\"En/Using XMLHttpRequest\">Using XMLHttpRequest</a></li>\n   <li><a href=\"/en-US/HTML_in_XMLHttpRequest\" title=\"en/HTML_in_XMLHttpRequest\">HTML in XMLHttpRequest</a></li>\n   <li><a href=\"/en-US/DOM/XMLHttpRequest/FormData\" title=\"en/XMLHttpRequest/FormData\"><code>FormData</code></a></li>\n  </ul>\n </li>\n <li>XMLHttpRequest references from W3C and browser vendors:\n  <ul>\n   <li><a class=\"external\" href=\"https://www.w3.org/TR/XMLHttpRequest1/\" rel=\" noopener\">W3C: XMLHttpRequest</a> (base features)</li>\n   <li><a class=\"external\" href=\"https://dvcs.w3.org/hg/xhr/raw-file/tip/Overview.html\" rel=\" noopener\">W3C: XMLHttpRequest</a> (latest editor's draft with extensions to the base functionality, formerly XMLHttpRequest Level 2</li>\n   <li><a class=\"external\" href=\"http://msdn.microsoft.com/library/default.asp?url=/library/en-us/xmlsdk/html/xmobjxmlhttprequest.asp\" rel=\" noopener\">Microsoft documentation</a></li>\n   <li><a class=\"external\" href=\"https://developer.apple.com/library/safari/#documentation/AppleApplications/Conceptual/SafariJSProgTopics/Articles/XHR.html\" rel=\" noopener\">Apple developers' reference</a></li>\n  </ul>\n </li>\n <li><a class=\"external\" href=\"https://jibbering.com/2002/4/httprequest.html\" rel=\" noopener\">\"Using the XMLHttpRequest Object\" (jibbering.com)</a></li>\n <li><a class=\"external\" href=\"https://www.peej.co.uk/articles/rich-user-experience.html\" rel=\" noopener\">XMLHttpRequest - REST and the Rich User Experience</a></li>\n <li><a class=\"external\" href=\"https://www.html5rocks.com/en/tutorials/file/xhr2/\" rel=\" noopener\">HTML5 Rocks - New Tricks in XMLHttpRequest2</a></li>\n <li><a href=\"http://programmers.stackexchange.com/questions/157375/why-does-xmlhttprequest-not-seem-to-follow-a-naming-convention\" class=\"external\" rel=\" noopener\">Thread on the naming convention of <code>XMLHttpRequest</code></a></li>\n <li><code>Chrome scope availability</code> - how to access from JSM modules etc which do not have access to DOM\n  <ul>\n   <li><a href=\"/en-US/docs/Components.utils.importGlobalProperties\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">Components.utils.importGlobalProperties</a></li>\n   <li><a href=\"/en-US/docs/nsIXMLHttpRequest\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">nsIXMLHttpRequest [en-US]</a></li>\n  </ul>\n </li>\n</ul>"}}],"toc":[{"text":"Список методов объекта","id":"список_методов_объекта"},{"text":"Поля объекта","id":"поля_объекта"},{"text":"Конструктор","id":"конструктор"},{"text":"Методы","id":"методы"},{"text":"Notes","id":"notes"},{"text":"Permissions","id":"permissions"},{"text":"Совместимость с браузерами","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"XMLHttpRequest это API, который предоставляет клиенту функциональность для обмена данными между клиентом и сервером. Данный API предоставляет простой способ получения данных по ссылке без перезагрузки страницы. Это позволяет обновлять только часть веб-страницы не прерывая пользователя.  XMLHttpRequest используется в AJAX запросах и особенно в single-page приложениях.","popularity":0.0025,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"XMLHttpRequest","locale":"en-US","native":"English (US)"},{"title":"XMLHttpRequest","locale":"es","native":"Español"},{"title":"XMLHttpRequest","locale":"fr","native":"Français"},{"title":"XMLHttpRequest","locale":"ja","native":"日本語"},{"title":"XMLHttpRequest","locale":"ko","native":"한국어"},{"title":"XMLHttpRequest","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"XMLHttpRequest","locale":"zh-CN","native":"中文 (简体)"},{"title":"XMLHttpRequest","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ru/web/api/xmlhttprequest","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/web/api/xmlhttprequest/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Web","title":"Веб-технологии для разработчиков"},{"uri":"/ru/docs/Web/API","title":"Интерфейсы веб API"},{"uri":"/ru/docs/Web/API/XMLHttpRequest","title":"XMLHttpRequest"}],"pageTitle":"XMLHttpRequest - Интерфейсы веб API | MDN","noIndexing":false}}