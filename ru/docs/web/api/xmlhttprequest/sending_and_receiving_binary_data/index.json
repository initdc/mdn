{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Отправка и получение бинарных данных","mdn_url":"/ru/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data","locale":"ru","native":"Русский","sidebarHTML":"","body":[{"type":"prose","value":{"id":"receiving_binary_data_using_javascript_typed_arrays","title":"Получение бинарных данных используя JavaScript arrays ","isH3":false,"content":"<p>Свойство responseType объекта XMLHttpRequest можно задать для изменения ожидаемого типа ответа с сервера. Возможные значения: пустая строка (по умолчанию), \"arraybuffer\", \"blob\", \"document\", \"json\" и \"text\". Свойство response будет содержать тело сущности в соответствии с типом ответа, как ArrayBuffer, Blob, Document, JSON или string. Это значение равно null, если запрос не завершён или не был успешным.</p>\n\n<p>В этом примере изображение считывается как двоичный файл и создаётся 8-разрядный массив целых чисел без знака из необработанных байтов. Обратите внимание, что это не будет декодировать изображение и читать пиксели. Для этого вам понадобится <a href=\"https://github.com/devongovett/png.js/\" class=\"external\" rel=\" noopener\">библиотека декодирования png</a>.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> oReq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/myfile.png\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noReq<span class=\"token punctuation\">.</span>responseType <span class=\"token operator\">=</span> <span class=\"token string\">\"arraybuffer\"</span><span class=\"token punctuation\">;</span>\n\noReq<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">oEvent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> arrayBuffer <span class=\"token operator\">=</span> oReq<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Note: not oReq.responseText</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arrayBuffer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> byteArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>arrayBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> byteArray<span class=\"token punctuation\">.</span>byteLength<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// do something with each byte in the array</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Альтернатива вышеуказанному методу использует интерфейс <a href=\"/ru/docs/Web/API/Blob\"><code>Blob</code></a> для непосредственного построения Blob с данными arraybuffer.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> oReq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/myfile.png\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noReq<span class=\"token punctuation\">.</span>responseType <span class=\"token operator\">=</span> <span class=\"token string\">\"arraybuffer\"</span><span class=\"token punctuation\">;</span>\n\noReq<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">oEvent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>oReq<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"image/png\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Также вы можете прочитать двоичный файл как <a href=\"/ru/docs/Web/API/Blob\"><code>Blob</code></a>, установив строку\" blob \" в свойство responseType.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> oReq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/myfile.png\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noReq<span class=\"token punctuation\">.</span>responseType <span class=\"token operator\">=</span> <span class=\"token string\">\"blob\"</span><span class=\"token punctuation\">;</span>\n\noReq<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">oEvent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> blob <span class=\"token operator\">=</span> oReq<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>"}},{"type":"prose","value":{"id":"receiving_binary_data_in_older_browsers","title":"Получение бинарных данных в старых браузерах","isH3":false,"content":"<p>Функция load_binary_resource(), показанная ниже, загружает двоичные данные из указанного URL, возвращая их вызывающему объекту.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">load_binary_resource</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> req <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  req<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//XHR binary charset opt by Marcus Granado 2006 [http://mgran.blogspot.com]</span>\n  req<span class=\"token punctuation\">.</span><span class=\"token function\">overrideMimeType</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text\\/plain; charset=x-user-defined'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  req<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>status <span class=\"token operator\">!=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> req<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n\n<p>Магия происходит в строке 5, которая переопределяет тип MIME, заставляя браузер рассматривать его как обычный текст, используя пользовательский набор символов. Это говорит браузеру не анализировать его и пропускать байты через необработанные.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> filestream <span class=\"token operator\">=</span> <span class=\"token function\">load_binary_resource</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> abyte <span class=\"token operator\">=</span> filestream<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// throw away high-order byte (f7)</span>\n</code></pre></div>\n\n<p>The example above fetches the byte at offset <code>x</code> within the loaded binary data. The valid range for <code>x</code> is from 0 to <code>filestream.length-1</code>.</p>\n\n<p>See <a href=\"https://web.archive.org/web/20071103070418/http://mgran.blogspot.com/2006/08/downloading-binary-streams-with.html\" class=\"external\" rel=\" noopener\">downloading binary streams with XMLHttpRequest</a> for a detailed explanation. See also <a href=\"/en-US/docs/Code_snippets/Downloading_Files\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">downloading files</a>.</p>"}},{"type":"prose","value":{"id":"получение_бинарных_данных_из_различных_источников","title":"Получение бинарных данных из различных источников","isH3":false,"content":"<p>Библиотека <a href=\"https://github.com/jDataView/jBinary\" class=\"external\" rel=\" noopener\">jBinary</a> для работы с бинарными данными в JavaScript позволяет загрузить данные из любого источника, автоматически определяя лучший способ для этого в текущем браузере или Node.js:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>jBinary<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">binary</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// здесь аргумент `binary` может использовться для обработки данных</span>\n  <span class=\"token comment\">// в любом формате (строка, массив байтов, структура данных и т. д.)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"sending_binary_data","title":"Отправка бинарных данных","isH3":false,"content":"<p>Метод <code>send</code> объекта XMLHttpRequest был расширен, чтобы обеспечить лёгкую передачу бинарных данных - теперь он принимает объекты <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\" title=\"ArrayBuffer\"><code>ArrayBuffer</code></a>, <a href=\"/ru/docs/Web/API/Blob\"><code>Blob</code></a>, или <a href=\"/ru/docs/Web/API/File\"><code>File</code></a>.</p>\n\n<p>В примере ниже на лету создаётся текстовый файл и отправляется методом <code>POST</code> на сервер. Здесь используется обычный текст, но нетрудно представить себе пример с бинарным файлом.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> oReq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noReq<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">oEvent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Uploaded.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'abc123'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/plain'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"sending_typed_arrays_as_binary_data","title":"Отправка типизированных массивов как бинарных данных","isH3":false,"content":"<p>Точно так же можно отправлять типизированные массивы JavaScript.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> longInt8View <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>myArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span> longInt8View<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  longInt8View<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">%</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>myArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Здесь создаётся и отправляется 512-ти байтовый массив из 8-битных целых чисел, н, разумеется, можно использовать любые двоичные данные.</p>\n\n<div class=\"note notecard\" id=\"sect1\"><strong>Примечание:</strong> Поддержка передачи объектов <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\" title=\"ArrayBuffer\"><code>ArrayBuffer</code></a> с помощью XMLHttpRequest появилась в Gecko 9.0 (Firefox 9.0 / Thunderbird 9.0 / SeaMonkey 2.6). <strong>Add information about other browsers' support here.</strong></div>"}},{"type":"prose","value":{"id":"submitting_forms_and_uploading_files","title":"Отправка форм и загрузка файлов","isH3":false,"content":"<p>См. <a href=\"/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#submitting_forms_and_uploading_files\" title=\"Currently only available in English (US)\" class=\"only-in-en-us\">этот параграф (en-US)</a>.</p>"}},{"type":"prose","value":{"id":"firefox-specific_examples","title":"Примеры для Firefox","isH3":false,"content":"<p>В этом примере двоичные данные передаются асинхронно методом <code>POST</code> и нестандартным методом Firefox's <code>sendAsBinary()</code>.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> req <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// установите заголовок и тип данных</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Length\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">741</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">sendAsBinary</span><span class=\"token punctuation\">(</span>aBody<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>В строке 4 заголовок Content-Length устанавливается в 741, что означает, что размер данных 741 байт. Разумеется, это значение должно соответствовать реальному размеру данных.</p>\n\n<p>В строке 5 метод <code>sendAsBinary()</code> начинает запрос.</p>\n\n<div class=\"note notecard\" id=\"sect2\"><strong>Примечание:</strong> Нестандартный метод <code>sendAsBinary</code> начиная с Gecko 31 (Firefox 31 / Thunderbird 31 / SeaMonkey 2.28) считается устаревшим и скоро будет удалён. Вместо него, как показывалось выше, можно использовать стандартный метод <code>send(Blob data)</code>.</div>\n\n<p>Кроме того, чтобы отправить бинарные данные можно передать экземпляр <code>nsIFileInputStream</code> в метод <a href=\"/en-US/docs/Web/API/XMLHttpRequest#send()\" title=\"XMLHttpRequest#send()\"><code>send()</code></a>. В этом случае заголовок <code>Content-Length</code> заполнять явно необязательно, поскольку информация получается из потока автоматически:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Создание потока из файла.</span>\n<span class=\"token keyword\">var</span> stream <span class=\"token operator\">=</span> Components<span class=\"token punctuation\">.</span>classes<span class=\"token punctuation\">[</span><span class=\"token string\">\"@mozilla.org/network/file-input-stream;1\"</span><span class=\"token punctuation\">]</span>\n                       <span class=\"token punctuation\">.</span><span class=\"token function\">createInstance</span><span class=\"token punctuation\">(</span>Components<span class=\"token punctuation\">.</span>interfaces<span class=\"token punctuation\">.</span>nsIFileInputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstream<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> <span class=\"token number\">0x04</span> <span class=\"token operator\">|</span> <span class=\"token number\">0x08</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0644</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x04</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// file is an nsIFile instance</span>\n\n<span class=\"token comment\">// Попытка опредедения типа MIME для файла</span>\n<span class=\"token keyword\">var</span> mimeType <span class=\"token operator\">=</span> <span class=\"token string\">\"text\\/plain\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> mimeService <span class=\"token operator\">=</span> Components<span class=\"token punctuation\">.</span>classes<span class=\"token punctuation\">[</span><span class=\"token string\">\"@mozilla.org/mime;1\"</span><span class=\"token punctuation\">]</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">getService</span><span class=\"token punctuation\">(</span>Components<span class=\"token punctuation\">.</span>interfaces<span class=\"token punctuation\">.</span>nsIMIMEService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  mimeType <span class=\"token operator\">=</span> mimeService<span class=\"token punctuation\">.</span><span class=\"token function\">getTypeFromFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// file is an nsIFile instance</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>oEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* в случае ошибки просто использовать text/plain */</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Отправка</span>\n<span class=\"token keyword\">var</span> req <span class=\"token operator\">=</span> Components<span class=\"token punctuation\">.</span>classes<span class=\"token punctuation\">[</span><span class=\"token string\">\"@mozilla.org/xmlextras/xmlhttprequest;1\"</span><span class=\"token punctuation\">]</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">createInstance</span><span class=\"token punctuation\">(</span>Components<span class=\"token punctuation\">.</span>interfaces<span class=\"token punctuation\">.</span>nsIXMLHttpRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'PUT'</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* синхронный вызов! */</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> mimeType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}}],"toc":[{"text":"Получение бинарных данных используя JavaScript arrays ","id":"receiving_binary_data_using_javascript_typed_arrays"},{"text":"Получение бинарных данных в старых браузерах","id":"receiving_binary_data_in_older_browsers"},{"text":"Получение бинарных данных из различных источников","id":"получение_бинарных_данных_из_различных_источников"},{"text":"Отправка бинарных данных","id":"sending_binary_data"},{"text":"Отправка типизированных массивов как бинарных данных","id":"sending_typed_arrays_as_binary_data"},{"text":"Отправка форм и загрузка файлов","id":"submitting_forms_and_uploading_files"},{"text":"Примеры для Firefox","id":"firefox-specific_examples"}],"summary":"Свойство responseType объекта XMLHttpRequest можно задать для изменения ожидаемого типа ответа с сервера. Возможные значения: пустая строка (по умолчанию), \"arraybuffer\", \"blob\", \"document\", \"json\" и \"text\". Свойство response будет содержать тело сущности в соответствии с типом ответа, как ArrayBuffer, Blob, Document, JSON или string. Это значение равно null, если запрос не завершён или не был успешным.","popularity":0.0007,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Sending and Receiving Binary Data","locale":"en-US","native":"English (US)"},{"title":"バイナリデータの送信と受信","locale":"ja","native":"日本語"},{"title":"发送和接收二进制数据","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ru/web/api/xmlhttprequest/sending_and_receiving_binary_data","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/web/api/xmlhttprequest/sending_and_receiving_binary_data/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Web","title":"Веб-технологии для разработчиков"},{"uri":"/ru/docs/Web/API","title":"Интерфейсы веб API"},{"uri":"/ru/docs/Web/API/XMLHttpRequest","title":"XMLHttpRequest"},{"uri":"/ru/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data","title":"Отправка и получение бинарных данных"}],"pageTitle":"Отправка и получение бинарных данных - Интерфейсы веб API | MDN","noIndexing":false}}