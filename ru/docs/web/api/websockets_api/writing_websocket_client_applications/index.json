{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Написание клиентских приложений с помощью веб-сокетов","mdn_url":"/ru/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications","locale":"ru","native":"Русский","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Веб-сокеты - технология, которая позволяет открыть интерактивную сессию общения между браузером пользователя и сервером. Соединяясь через веб-сокеты, веб-приложения могут осуществлять взаимодействие в реальном времени вместо того, чтобы делать запросы к клиенту о входящих/исходящих изменениях.</p>\n\n<div class=\"note notecard\" id=\"sect1\"><strong>Замечание: </strong>У нас есть работающий пример чата, части кода из которого используются в статье. Пример будет доступен, когда инфраструктура сайта сможет должным образом поддерживать хостинг примеров с использованием веб-сокетов.</div>"}},{"type":"prose","value":{"id":"доступность_веб-сокетов","title":"Доступность веб-сокетов","isH3":false,"content":"<p>API веб-сокетов доступно в Javascript коде, область видимости которого включает объект DOM <a href=\"/ru/docs/Web/API/Window\"><code>Window</code></a> или любой объект, реализующий <a class=\"page-not-created\" title=\"Документация об этом ещё не написана; пожалуйста, поспособствуйте её написанию!\"><code>WorkerUtils</code></a>; это означает, что вы можете использовать Web Workers.</p>\n\n<div class=\"note notecard\" id=\"sect2\"><strong>Замечание:</strong> API веб-сокетов (как и протокол лежащий в его основе) всё ещё проходят этап активной разработки; в настоящее время существует много проблем совместимости с разными браузерами (и даже с разными релизами одного и того же браузера).</div>"}},{"type":"prose","value":{"id":"создание_объекта_websocket","title":"Создание объекта WebSocket","isH3":false,"content":"<p><code>Чтобы общаться через протокол веб-сокетов необходимо создать объект <a href=\"/en-US/WebSockets/WebSockets_reference/WebSocket\" title=\"en/WebSockets/WebSockets reference/WebSocket\">WebSocket</a></code>; при его создании автоматически происходит попытка открыть соединение с сервером.</p>\n\n<p>Конструктор WebSocket принимает один обязательный и один необязательный параметр:</p>\n\n<pre class=\"notranslate\">WebSocket WebSocket(\n  in DOMString url,\n  in optional DOMString protocols\n);\n\nWebSocket WebSocket(\n  in DOMString url,\n  in optional DOMString[] protocols\n);\n</pre>\n\n<dl>\n <dt id=\"url\"><code>url</code></dt>\n <dd>URL, с которым происходит соединение; это должен быть URL веб-сокет-сервера.</dd>\n <dt id=\"protocols\"><code>protocols</code> <span class=\"badge inline optional\">Необязательный</span></dt>\n <dd>Может быть одной строкой протокола или массивом таких строк. Эти строки используют для индикации под-протоколов; таким образом, один сервер может реализовывать несколько под-протоколов веб-сокетов (к примеру, вам может потребоваться, чтобы сервер мог обрабатывать разные типы взаимодействий в зависимости от определённого под-протокола). Если вы не укажете строку протокола, то будет передана пустая строка.</dd>\n</dl>\n\n<p>В конструкторе могут возникать следующие исключения:</p>\n\n<dl>\n <dt id=\"security_err\"><code>SECURITY_ERR</code></dt>\n <dd>Порт, к которому проводится подключение, заблокирован.</dd>\n</dl>\n\n<dl>\n</dl>"}},{"type":"prose","value":{"id":"ошибки_подключения","title":"Ошибки подключения","isH3":true,"content":"<p>Если ошибка случается во время попытки подключения, то в объект <a href=\"/en/WebSockets/WebSockets_reference/WebSocket\" style=\"line-height: 21px;\" title=\"WebSocket\"><code style=\"font-style: inherit;\">WebSocket</code></a> сначала посылается простое событие с именем «error» (таким образом, задействуя обработчик <code style=\"font-size: 14px; line-height: 21px;\">onerror</code>), потом - событие <a href=\"/en/WebSockets/WebSockets_reference/CloseEvent\" style=\"line-height: 21px;\" title=\"CloseEvent\"><code style=\"font-style: inherit;\">CloseEvent</code></a>  (таким образом, задействуя обработчик <code style=\"font-size: 14px; line-height: 21px;\">onclose</code>) чтобы обозначить причину закрытия соединения.</p>\n\n<p>Однако, начиная с версии Firefox 11, типичным является получение в консоль от платформы Mozilla расширенного сообщения об ошибке и кода завершения, как то определено в <a class=\"external\" href=\"https://tools.ietf.org/html/rfc6455#section-7.4\" title=\"RFC 6455 Section 7.4\" rel=\" noopener\">RFC 6455, Section 7.4</a> посредством <a href=\"/en-US/WebSockets/WebSockets_reference/CloseEvent\" title=\"CloseEvent\"><code>CloseEvent</code></a>.</p>"}},{"type":"prose","value":{"id":"примеры","title":"Примеры","isH3":true,"content":"<p>Этот простой пример создаёт новый WebSocket, подключаемый к серверу <code>ws://www.example.com/socketserver</code>. В данном примере в конструктор сокета в качестве дополнительного параметра передаётся пользовательский протокол \"protocolOne\", хотя эта часть может быть опущена.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> exampleSocket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ws://www.example.com/socketserver\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"protocolOne\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>После выполнения функции, <code>exampleSocket</code>.<code>readyState</code> будет иметь значение <code>CONNECTING</code>. <code>readyState</code> изменится на <code>OPEN</code> как только соединение станет готовым к передаче данных.</p>\n\n<p>Если нужно открыть соединение, поддерживающее несколько протоколов, можно передать массив протоколов:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> exampleSocket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ws://www.example.com/socketserver\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"protocolOne\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"protocolTwo\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Когда соединение установлено (что соответствует, <code>readyState</code> <code>OPEN</code>), <code>exampleSocket.protocol</code> сообщит, какой протокол выбрал сервер.</p>\n\n<p>В приведенных выше примерах <code>ws</code> заменяет <code>http</code>, аналогично <code>wss</code> заменяет <code>https</code>. Установка соединения через WebSocket зависит от механизма обновления HTTP, таким образом запрос на обновление неявный, когда мы обращаемся к серверу HTTP с помощью <code>ws://www.example.com</code> или <code>wss://www.example.com</code>.</p>"}},{"type":"prose","value":{"id":"отправка_данных_на_сервер","title":"Отправка данных на сервер","isH3":false,"content":"<p>Однажды открыв соединение, вы можете передавать данные на сервер. Для осуществления этого, вызовите метод <a href=\"/en-US/WebSockets/WebSockets_reference/WebSocket#send()\" title=\"en/WebSockets/WebSockets reference/WebSocket#send()\"><code>send()</code></a> объекта <code>WebSocket</code>  для каждого сообщение, которое желаете отправить:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>exampleSocket<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Вот текст, который будет отправлен серверу.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Вы можете пересылать данные в виде строки, <a href=\"/ru/docs/Web/API/Blob\"><code>Blob</code></a>, так и <a href=\"/en-US/JavaScript_typed_arrays/ArrayBuffer\" title=\"en/JavaScript typed arrays/ArrayBuffer\"><code>ArrayBuffer</code></a>.</p>\n\n<div class=\"note notecard\" id=\"sect3\"><strong>Замечание:</strong> До версии 11, Firefox поддерживал отправку данных только в виде строки.</div>\n\n<p>Так как установка соедиения асинхронна и подвержена сбоям, то нет никакой гарантии, что вызов метода <code>send()</code>, после создания объекта WebSocket, будет завершен успешно. По крайней мере, мы можем быть уверены, что попытка отправить данные будет иметь место только после того, как соединение будет установлено, определив обработчик <code>onopen</code> для выполнения этого действия:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>exampleSocket<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onopen</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  exampleSocket<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Вот текст, который будет отправлен серверу.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"использование_json_для_передачи_объектов","title":"Использование JSON для передачи объектов","isH3":true,"content":"<p>Одна удобная вещь которую вы можете сделать, это использовать <a href=\"/en-US/JSON\" title=\"en/JSON\">JSON</a> для пересылки сложных данных на сервер. Например, приложение-чат может взаимодействовать с сервером, используя протокол, реализованный с использованием пакетов данных, инкапсулированных в JSON:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Отправьте текст всем пользователям через сервер</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sendText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Создайте объект содержащий данные, необходимые серверу для обрабоки сообщения от клиента чата.</span>\n  <span class=\"token keyword\">var</span> msg <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span>   clientID<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Отправьте объект в виде JSON строки.</span>\n  exampleSocket<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Очистите элемент ввода текста, чтобы получить следующую строку текста от пользователя.</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"получение_сообщений_от_сервера","title":"Получение сообщений от сервера","isH3":false,"content":"<p>WebSockets — это API, управляемый событиями; когда сообщения получены, событие \"message\" доставлено в функцию <code>onmessage</code>. Чтобы начать прослушивание входящих данных, вы можете сделать что-то вроде этого:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>exampleSocket<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"получение_и_интерпретация_json_объектов","title":"Получение и интерпретация JSON объектов","isH3":true,"content":"<p>Давайте рассмотрим клиентское приложение чата, которое впервые упоминалось в разделе <a href=\"#использование_json_для_передачи_объектов\">Использование JSON для передачи объектов</a>. Есть разные типы пакетов данных, которые может получить клиент, например:</p>\n\n<ul>\n <li>Вход в систему</li>\n <li>Текст сообщения</li>\n <li>Обновление списка пользователей</li>\n</ul>\n\n<p>Код обрабатывающий эти входящие сообщения, может выглядеть так:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>exampleSocket<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chatbox\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>contentDocument<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> msg <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> time <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> timeStr <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span>\n      clientID <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"username\"</span><span class=\"token operator\">:</span>\n      text <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;b&gt;User &lt;em&gt;\"</span> <span class=\"token operator\">+</span> msg<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;/em&gt; signed in at \"</span> <span class=\"token operator\">+</span> timeStr <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;/b&gt;&lt;br&gt;\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"message\"</span><span class=\"token operator\">:</span>\n      text <span class=\"token operator\">=</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">+</span> timeStr <span class=\"token operator\">+</span> <span class=\"token string\">\") &lt;b&gt;\"</span> <span class=\"token operator\">+</span> msg<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;/b&gt;: \"</span> <span class=\"token operator\">+</span> msg<span class=\"token punctuation\">.</span>text <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;br&gt;\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"rejectusername\"</span><span class=\"token operator\">:</span>\n      text <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;b&gt;Your username has been set to &lt;em&gt;\"</span> <span class=\"token operator\">+</span> msg<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;/em&gt; because the name you chose is in use.&lt;/b&gt;&lt;br&gt;\"</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"userlist\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">var</span> ul <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> msg<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ul <span class=\"token operator\">+=</span> msg<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;br&gt;\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userlistbox\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> ul<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    f<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chatbox\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>contentWindow<span class=\"token punctuation\">.</span><span class=\"token function\">scrollByPages</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Здесь мы используем <a href=\"/en-US/JavaScript/Reference/Global_Objects/JSON/parse\" title=\"en/JavaScript/Reference/Global Objects/JSON/parse\"><code>JSON.parse()</code></a> чтобы преобразовать JSON строку в объект, затем обработайте его.</p>"}},{"type":"prose","value":{"id":"формат_текстовых_данных","title":"Формат текстовых данных","isH3":true,"content":"<p>Текст, полученный через WebSocket должен иметь кодировку UTF-8</p>\n\n<p>До Gecko 9.0 (Firefox 9.0 / Thunderbird 9.0 / SeaMonkey 2.6), некоторые не символьные значения в допустимом тексте UTF-8 могут привести к разрыву соединения. Теперь Gecko допускает эти значения.</p>"}},{"type":"prose","value":{"id":"закрытие_соединения","title":"Закрытие соединения","isH3":false,"content":"<p>Когда вы закончили использовать соединение WebSocket, закройте его используя метод  <a href=\"/en-US/WebSockets/WebSockets_reference/WebSocket#close()\" title=\"en/WebSockets/WebSockets reference/WebSocket#close()\"><code>close()</code></a>:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>exampleSocket<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Перед попыткой закрыть соединение может быть полезно проверить атрибут <code>bufferedAmount</code> чтобы определить, не переданы ли еще какие-либо данные по сети.</p>"}},{"type":"prose","value":{"id":"безопасность","title":"Безопасность","isH3":false,"content":"<p>WebSocket не следует использовать в среде со смешанным содержимым: то есть вы не должны открывать незащищенное соединение WebSocket со страницы, загруженной с использованием HTTPS, или наоборот. Фактически, некоторые браузеры явно запрещают это, например Firefox 8 и выше.</p>\n\n<p></p>"}}],"toc":[{"text":"Доступность веб-сокетов","id":"доступность_веб-сокетов"},{"text":"Создание объекта WebSocket","id":"создание_объекта_websocket"},{"text":"Отправка данных на сервер","id":"отправка_данных_на_сервер"},{"text":"Получение сообщений от сервера","id":"получение_сообщений_от_сервера"},{"text":"Закрытие соединения","id":"закрытие_соединения"},{"text":"Безопасность","id":"безопасность"}],"summary":"Веб-сокеты - технология, которая позволяет открыть интерактивную сессию общения между браузером пользователя и сервером. Соединяясь через веб-сокеты, веб-приложения могут осуществлять взаимодействие в реальном времени вместо того, чтобы делать запросы к клиенту о входящих/исходящих изменениях.","popularity":0.001,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Writing WebSocket client applications","locale":"en-US","native":"English (US)"},{"title":"Escribiendo aplicaciones con WebSockets","locale":"es","native":"Español"},{"title":"Ecrire des applications client WebSocket","locale":"fr","native":"Français"},{"title":"WebSocket クライアントアプリケーションの記述","locale":"ja","native":"日本語"},{"title":"WebSocket을 이용하여 클라이언트 애플리케이션 작성하기","locale":"ko","native":"한국어"},{"title":"Escrevendo aplicações cliente WebSocket","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"编写 WebSocket 客户端应用","locale":"zh-CN","native":"中文 (简体)"},{"title":"製作 WebSocket 客戶端應用程式","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ru/web/api/websockets_api/writing_websocket_client_applications","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/web/api/websockets_api/writing_websocket_client_applications/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Web","title":"Веб-технологии для разработчиков"},{"uri":"/ru/docs/Web/API","title":"Интерфейсы веб API"},{"uri":"/ru/docs/Web/API/WebSockets_API","title":"WebSockets"},{"uri":"/ru/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications","title":"Написание клиентских приложений с помощью веб-сокетов"}],"pageTitle":"Написание клиентских приложений с помощью веб-сокетов - Интерфейсы веб API | MDN","noIndexing":false}}