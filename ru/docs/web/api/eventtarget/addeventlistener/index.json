{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Метод EventTarget.addEventListener()","mdn_url":"/ru/docs/Web/API/EventTarget/addEventListener","locale":"ru","native":"Русский","sidebarHTML":"<ol><li><strong><a href=\"/ru/docs/Web/API/EventTarget\"><code>EventTarget</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Конструктор</summary><ol><li><a href=\"/ru/docs/Web/API/EventTarget/EventTarget\"><code>EventTarget()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Методы</summary><ol><li><em><code>addEventListener()</code></em></li><li><a href=\"/ru/docs/Web/API/EventTarget/dispatchEvent\"><code>dispatchEvent()</code></a></li><li><a href=\"/ru/docs/Web/API/EventTarget/removeEventListener\"><code>removeEventListener()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p></p><p></p>\n\n<p>Метод <code>EventTarget.addEventListener()</code> регистрирует определённый обработчик события, вызванного на <a href=\"/ru/docs/Web/API/EventTarget\"><code>EventTarget</code></a>.</p>\n\n<p><a href=\"/ru/docs/Web/API/EventTarget\"><code>EventTarget</code></a> может быть <a href=\"/ru/docs/Web/API/Element\"><code>Element</code></a>, <a href=\"/ru/docs/Web/API/Document\"><code>Document</code></a>, <a href=\"/ru/docs/Web/API/Window\"><code>Window</code></a>, или любым другим объектом, поддерживающим события (таким как <code style=\"font-style: normal;\"><a href=\"/en-US/docs/Web/API/XMLHttpRequest\" title=\"Currently only available in English (US)\" class=\"only-in-en-us\">XMLHttpRequest (en-US)</a></code>).</p>"}},{"type":"prose","value":{"id":"syntax","title":"Синтаксис","isH3":false,"content":"<pre class=\"syntaxbox notranslate\"><code><em>target.addEventListener(type, listener</em>[<em>, options</em>]<em>);\ntarget</em>.addEventListener(<em>type</em>, <em>listener</em>[, <em>useCapture</em>]);\n<em>target</em>.addEventListener(<em>type</em>, <em>listener</em>[, <em>useCapture</em>,\n<em>wantsUntrusted </em><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg>]); // только Gecko/Mozilla </code></pre>"}},{"type":"prose","value":{"id":"параметры","title":"Параметры","isH3":true,"content":"<dl>\n <dt id=\"type\"><code>type</code></dt>\n <dd>Чувствительная к регистру строка, представляющая <a href=\"/en-US/docs/Web/API/Event/type\" title=\"DOM/Event.type\">тип обрабатываемого события</a>.</dd>\n <dt id=\"listener\"><code>listener</code></dt>\n <dd>Объект, который принимает уведомление, когда событие указанного типа произошло. Это должен быть объект, реализующий интерфейс <a href=\"/ru/docs/conflicting/Web/API/EventTarget/addEventListener\"><code>EventListener</code></a> или просто <a href=\"/en-US/docs/Web/JavaScript/Guide/Functions\" title=\"JavaScript/Guide/Functions\">функция JavaScript</a>.</dd>\n</dl>\n\n<dl>\n <dt id=\"options\"><code>options</code> <span class=\"badge inline optional\">Необязательный</span></dt>\n <dd>Объект <code>options</code>, который определяет характеристики объекта, прослушивающего событие. Доступны следующие варианты:\n <ul>\n  <li><code>capture</code>:  <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> указывает, что события этого типа будут отправлены зарегистрированному обработчику <code>listener</code> перед отправкой на <code>EventTarget</code>, расположенный ниже в дереве DOM.</li>\n  <li><code>once</code>: <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> указывает, что обработчик должен быть вызван не более одного раза после добавления. Если <code>true</code>, обработчик автоматически удаляется при вызове.</li>\n  <li><code>passive</code>:  <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> указывает, что обработчик никогда не вызовет <code>preventDefault()</code>. Если всё же вызов будет произведён, браузер должен игнорировать его и генерировать консольное предупреждение. Пример <a href=\"#улучшение_производительности_прокрутки_с_помощью_passive_true\">Улучшение производительности прокрутки с помощью passive true</a></li>\n  <li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><code> mozSystemGroup</code>: <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> указывает, что обработчик должен быть добавлен в системную группу. Доступно только в коде, запущенном в XBL или в <a href=\"https://chrome.google.com/webstore/detail/open-with-firefox/poeacjbaiakjnaepdjgggojcjoajakmd\" class=\"external\" rel=\" noopener\">расширении Chrome</a>.</li>\n </ul>\n </dd>\n <dt id=\"usecapture\"><code>useCapture</code> <span class=\"badge inline optional\">Необязательный</span></dt>\n <dd>Если равно <code>true</code>, <code>useCapture</code> указывает, что пользователь желает начать захват. После инициализации захвата все события указанного типа будут отправлены в зарегистрированный <code>listener</code> перед отправкой в какой-либо <code>EventTarget</code> под ним в дереве DOM. События, восходящие вверх по дереву, не будут вызывать обработчиков, которым назначено использовать захват. Смотрите <a href=\"https://www.w3.org/TR/DOM-Level-3-Events/#event-flow\" class=\"external\" rel=\" noopener\">DOM Level 3 Events</a> для более детального объяснения. Значение <code>useCapture</code> по умолчанию равно <code>false</code>.\n <div class=\"note notecard\" id=\"sect1\"><strong>Note: </strong>Для обработчиков событий прикреплённых к цели события, событие  находиться в целевой фазе, а не в фазах захвата или всплытия. События в целевой фазе инициируют все обработчики на элементе в том порядке, в котором они были зарегистрированы независимо от параметра <code>useCapture</code>.</div>\n\n <div class=\"note notecard\" id=\"sect2\"><strong>Note:</strong> <code>useCapture</code> не всегда был опциональным. Лучше указывать данный параметр для повышения совместимости.</div>\n </dd>\n <dt id=\"wantsuntrusted\"><code>wantsUntrusted</code> <svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg></dt>\n <dd>Если равно <code>true</code>, обработчик будет получать сгенерированные события, посланные со страницы (по умолчанию равно <code>false</code> для chrome и <code>true</code> для обычных веб-страниц). Этот параметр доступен только в Gecko и в основном полезен для использования в дополнениях и самом браузере. Смотрите <a href=\"/ru/docs/Archive/Add-ons/Interaction_between_privileged_and_non-privileged_pages\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">Взаимодействие между привилегированными и непривилегированными страницами</a> для примеров использования.</dd>\n</dl>\n\n<p>Прежде чем использовать определённое значение в объекте <code>options</code>, рекомендуется убедиться, что браузер пользователя поддерживает его, поскольку это дополнение, которое не все браузеры поддерживали исторически.</p>"}},{"type":"prose","value":{"id":"возвращаемое_значение","title":"Возвращаемое значение","isH3":true,"content":"<p><code>undefined</code></p>"}},{"type":"prose","value":{"id":"примечания_по_использованию","title":"Примечания по использованию","isH3":false,"content":""}},{"type":"prose","value":{"id":"колбэк_обработчика_событий","title":"Колбэк обработчика событий","isH3":true,"content":"<p>Обработчик событий может быть задан либо как колбэк-функция, либо как объект реализующий <a href=\"/ru/docs/conflicting/Web/API/EventTarget/addEventListener\"><code>EventListener</code></a>, чей <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/EventTarget/addEventListener\"><code>handleEvent()</code> <small>(en-US)</small></a> метод служит как колбэк-функция.</p>\n\n<p>Сама колбэк-функция имеет те же параметры и возвращаемое значение что и метод <code>handleEvent()</code>; То есть колбэк принимает единственный параметр: объект основанный на <a href=\"/ru/docs/Web/API/Event\"><code>Event</code></a> описывая событие, которое произошло и ничего не возвращая.</p>\n\n<p>Например, колбэк обработчика событий, который может использоваться для обработки <code><a href=\"/en-US/docs/Web/API/Document/fullscreenchange_event\" title=\"Currently only available in English (US)\" class=\"only-in-en-us\">fullscreenchange (en-US)</a></code> и <code><a href=\"/en-US/docs/Web/API/Document/fullscreenerror_event\" title=\"Currently only available in English (US)\" class=\"only-in-en-us\">fullscreenerror (en-US)</a></code> может выглядеть так:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">eventHandler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>type <span class=\"token operator\">==</span> <span class=\"token string\">'fullscreenchange'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* Переключатель полноэкранного режима */</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token comment\">/* fullscreenerror */</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* Ошибка переключателя полноэкранного режима */</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>"}},{"type":"prose","value":{"id":"безопасная_проверка_поддержки_option","title":"Безопасная проверка поддержки <code>option</code>","isH3":true,"content":"<p>В более старых версиях спецификации DOM третьим параметром <code>addEventListener</code> было логическое значение, указывающее, следует ли захватывать событие на этапе погружения. Со временем стало ясно, что необходимо больше вариантов. Вместо добавления дополнительных параметров в функцию (усложняя ситуацию при использовании необязательных значений) третий параметр был изменён на объект, который может содержать различные свойства, определяющие значения параметров для настройки обработчика событий.</p>\n\n<p>Поскольку старые браузеры (а также некоторые не слишком старые браузеры) по-прежнему предполагают, что третий параметр является логическим, возникает необходимость создания своего кода, чтобы разумно обрабатывать этот сценарий. Вы можете сделать это, используя функцию обнаружения для каждого из интересующих вас параметров.</p>\n\n<p>Например, если вы хотите проверить параметр <code>passive</code>:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> passiveSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> options <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"passive\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      passiveSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n\n<p>Этот код создаёт объект <code>options</code> с геттером для свойства passive, устанавливающим флаг <code>passiveSupported</code> в <code>true</code>, если он вызван. Это означает, что если браузер проверяет значение свойства <code>passive</code> на объекте <code>options</code>, значение <code>passiveSupported</code> будет установлено в true; в противном случае он останется ложным. Затем мы вызываем <code>addEventListener</code>, чтобы настроить фальшивый обработчик событий, указав эти параметры для проверки опций, если браузер распознает объект в качестве третьего параметра.</p>\n\n<p>Для проверки поддержки использования какой-либо опции можно просто добавить геттер для неё, используя код, подобный тому, что показан выше.</p>\n\n<p>Если вы хотите добавить обработчик событий, использующий параметры, о которых идёт речь, вы можете сделать это подобным образом:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>someElement<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mouseup\"</span><span class=\"token punctuation\">,</span> handleMouseUp<span class=\"token punctuation\">,</span> passiveSupported\n                               <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">passive</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>Здесь мы добавляем обработчик события <code><a href=\"/en-US/docs/Web/API/Element/mouseup_event\" title=\"Currently only available in English (US)\" class=\"only-in-en-us\">mouseup (en-US)</a></code> элемента <code>someElement</code>. Для третьего параметра, если <code>passiveSupported</code> имеет значение <code>true</code>, мы указываем объект <code>options</code> с <code>passive: true</code>; в противном случае мы знаем, что нам нужно передать логическое значение, и мы передаём <code>false</code> как значение параметра <code>useCapture</code>.</p>\n\n<p>Вы можете использовать стороннюю библиотеку, такую как <a href=\"https://modernizr.com/docs\" class=\"external\" rel=\" noopener\">Modernizr</a> или <a href=\"https://github.com/rafrex/detect-it\" class=\"external\" rel=\" noopener\">Detect It</a>, чтобы проверить поддержку необходимого свойства.</p>\n\n<p>Узнайте больше о <a href=\"https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection\" class=\"external\" rel=\" noopener\">EventListenerOptions</a> из  <a href=\"https://wicg.github.io/admin/charter.html\" class=\"external\" rel=\" noopener\">Web Incubator Community Group</a>.</p>","titleAsText":"Безопасная проверка поддержки option"}},{"type":"prose","value":{"id":"примеры","title":"Примеры","isH3":false,"content":""}},{"type":"prose","value":{"id":"addeventlistenerbasic","title":"Добавление простого обработчика","isH3":true,"content":"<p>Эти примеры демонстрируют как использовать <code>addEventListener()</code> для наблюдения за щелчками мышкой по элементу.</p>\n\n<h4 id=\"html_содержимое\">HTML Содержимое</h4>\n\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>outside<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>t1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>один<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>t2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>два<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n\n<h4 id=\"javascript_содержимое\">JavaScript Содержимое</h4>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Функция изменяет содержимое t2</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">modifyText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> t2 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">.</span>nodeValue <span class=\"token operator\">==</span> <span class=\"token string\">\"три\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    t2<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">.</span>nodeValue <span class=\"token operator\">=</span> <span class=\"token string\">\"два\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    t2<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">.</span>nodeValue <span class=\"token operator\">=</span> <span class=\"token string\">\"три\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Добавляет обработчика событий для таблицы</span>\n<span class=\"token keyword\">var</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"outside\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nel<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> modifyText<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>В примере выше, <code>modifyText()</code> регистрирует обработчика для события click, используя <code>addEventListener()</code>. Клик в любом месте таблицы будет поднимать обработчик и запускать <code>modifyText()</code>.</p>\n\n<h4 id=\"результат\">Результат</h4>\n\n<p><iframe class=\"sample-code-frame\" title=\"addEventListenerBasic sample\" id=\"frame_addeventlistenerbasic\" src=\"https://yari-demos.prod.mdn.mozit.cloud/ru/docs/Web/API/EventTarget/addEventListener/_sample_.addeventlistenerbasic.html\" loading=\"lazy\"></iframe></p>\n\n<p>Если вам нужно передать параметры в обработчик, вы можете использовать анонимные функции.</p>"}},{"type":"prose","value":{"id":"event_listener_with_anonymous_function","title":"Обработчик события с анонимной функцией","isH3":true,"content":"<h4 id=\"html_содержимое_2\">HTML Содержимое</h4>\n\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>outside<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>t1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>один<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>t2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>два<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n\n<h4 id=\"javascript_содержимое_2\">JavaScript Содержимое</h4>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Функция, изменяющая содержание t2</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">modifyText</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">new_text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> t2 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  t2<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">.</span>nodeValue <span class=\"token operator\">=</span> new_text<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Функция, добавляющая обработчик к таблице</span>\nel <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"outside\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nel<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token function\">modifyText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"четыре\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Notice that the listener is an anonymous function that encapsulates code that is then, in turn, able to send parameters to the <code>modifyText()</code> function, which is responsible for actually responding to the event.</p>\n\n<h4 id=\"результат_2\">Результат</h4>\n\n<p><iframe class=\"sample-code-frame\" title=\"Event Listener with anonymous function sample\" id=\"frame_event_listener_with_anonymous_function\" src=\"https://yari-demos.prod.mdn.mozit.cloud/ru/docs/Web/API/EventTarget/addEventListener/_sample_.event_listener_with_anonymous_function.html\" loading=\"lazy\"></iframe></p>"}},{"type":"prose","value":{"id":"обработчик_события_со_стрелочной_функцией","title":"Обработчик события со стрелочной функцией","isH3":true,"content":"<h4 id=\"html\">HTML</h4>\n\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>outside<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>t1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>one<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>t2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>two<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n\n<h4 id=\"javascript\">JavaScript</h4>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Function to change the content of t2</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">modifyText</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">new_text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> t2 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  t2<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">.</span>nodeValue <span class=\"token operator\">=</span> new_text<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Add event listener to table with an arrow function</span>\n<span class=\"token keyword\">var</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"outside\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nel<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">modifyText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"four\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<h4 id=\"результат_3\">Результат</h4>\n\n<p><iframe class=\"sample-code-frame\" title=\"Обработчик события со стрелочной функцией sample\" id=\"frame_обработчик_события_со_стрелочной_функцией\" src=\"https://yari-demos.prod.mdn.mozit.cloud/ru/docs/Web/API/EventTarget/addEventListener/_sample_.%D0%BE%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%87%D0%B8%D0%BA_%D1%81%D0%BE%D0%B1%D1%8B%D1%82%D0%B8%D1%8F_%D1%81%D0%BE_%D1%81%D1%82%D1%80%D0%B5%D0%BB%D0%BE%D1%87%D0%BD%D0%BE%D0%B9_%D1%84%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D0%B5%D0%B9.html\" loading=\"lazy\"></iframe></p>\n\n<p>Обратите внимание: несмотря на то, что анонимные и стрелочные функции схожи, они имеют разные значения <code>this</code>.</p>"}},{"type":"prose","value":{"id":"примечания","title":"Примечания","isH3":false,"content":""}},{"type":"prose","value":{"id":"why_use_addeventlistener.3f","title":"Зачем использовать <code>addEventListener</code>?","isH3":true,"content":"<p><code>addEventListener</code> — это способ зарегистрировать обработчик события, описанный в документации W3C DOM. Вот список преимуществ его использования:</p>\n\n<ul>\n <li>Позволяет добавлять множество обработчиков для одного события. Это особенно полезно для <a href=\"/en-US/docs/DHTML\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">DHTML</a> библиотек или <a href=\"/en-US/docs/Extensions\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">Mozilla extensions</a>, которые должны работать в условиях использования сторонних библиотек/расширений.</li>\n <li>Предоставляет точный контроль фазы срабатывания(вызова) обработчика (захват или всплытие)</li>\n <li>Срабатывает на любом DOM-элементе, а не только на HTML-элементах.</li>\n</ul>\n\n<p>Ниже описан другой, <a href=\"#older_way_to_register_event_listeners\">более старый способ регистрации обработчиков</a>.</p>","titleAsText":"Зачем использовать addEventListener?"}},{"type":"prose","value":{"id":"adding_a_listener_during_event_dispatch","title":"Добавление обработчика во время обработки события","isH3":true,"content":"<p>Если <code>EventListener</code> добавлен к <code>EventTarget</code> во время обработки события, он не будет вызван текущими действиями, но может быть вызван на более поздней стадии обработки события, при восходящей обработке.</p>"}},{"type":"prose","value":{"id":"multiple_identical_event_listeners","title":"Несколько одинаковых обработчиков события","isH3":true,"content":"<p>Если зарегистрировано несколько одинаковых <code>EventListener</code> на одном <code>EventTarget</code> с одинаковыми параметрами, дублирующиеся обработчики игнорируются. Так как одинаковые обработчики игнорируются, не требуется удалять их вручную с помощью метода <a href=\"/en-US/docs/Web/API/EventTarget/removeEventListener\" title=\"DOM/element.removeEventListener\">removeEventListener</a>.</p>"}},{"type":"prose","value":{"id":"the_value_of_this_within_the_handler","title":"Значение <code>this</code> в обработчике","isH3":true,"content":"<p>Обычно желательно передавать элемент, на котором сработал обработчик события, например, при использовании обобщённых обработчиков для схожих элементов. При добавлении функции при помощи <code>addEventListener()</code> значение переменной <code>this</code> меняется — заметьте, что значение <code>this</code> передаётся в функцию от вызывающего объекта.</p>\n\n<p>В примере выше значение переменной <code>this</code> внутри <code>modifyText()</code> при вызове событием клика равно таблице 't'. Это противоположно поведению, которое возникает, если обработчик добавлен в HTML-разметке:</p>\n\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>t<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">modifyText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span>\n  . . .\n</code></pre></div>\n\n<p>Значение переменной <code>this</code> внутри <code>modifyText()</code> при вызове событием клика будет равно ссылке на глобальный (window) объект (или <code>undefined</code> при использовании <a href=\"/en-US/docs/Web/JavaScript/Reference/Strict_mode\">strict mode</a>)</p>\n\n<div class=\"note notecard\" id=\"sect3\"><strong>Note:</strong> В JavaScript 1.8.5 введён метод <code><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" title=\"JavaScript/Reference/Global Objects/Function/bind\">Function.prototype.bind()</a></code> , который позволяет указать значение, которое должно быть использовано для всех вызовов данной функции. Он позволяет вам легко обходить ситуации, в которых не ясно, чему будет равно this, в зависимости от того, в каком контексте будет вызвана ваша функция. заметьте, также, что вам будет необходимо иметь внешнюю ссылку на обработчик, чтобы вы могли удалить его позже.</div>\n\n<p>Пример с использованием <code>bind</code> и без него:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Something</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Something Good'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick1</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined, так как this является элементом</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Something Good', так как в this передано значение объекта Something</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  element<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onclick1<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  element<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onclick2</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Trick</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n\n<p>Проблема в примере выше заключается в том, что вы не можете удалить обработчик, вызванный с <code>bind</code>. Другое решение использует специальную функцию <code>handleEvent</code>, чтобы перехватывать любые события:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Something</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Something Good'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">handleEvent</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Something Good', так как this является объектом Something</span>\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'click'</span><span class=\"token operator\">:</span>\n        <span class=\"token comment\">// код обработчика...</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'dblclick'</span><span class=\"token operator\">:</span>\n        <span class=\"token comment\">// код обработчика...</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// В этом случае обработчики хранятся в this, а не в this.handleEvent</span>\n  element<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  element<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dblclick'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Вы можете напрямую удалять обработчики</span>\n  element<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  element<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dblclick'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","titleAsText":"Значение this в обработчике"}},{"type":"prose","value":{"id":"legacy_internet_explorer_and_attachevent","title":"Наследство Internet Explorer и attachEvent","isH3":true,"content":"<p>В Internet Explorer младше 9 версии, вы можете использовать <code><a href=\"http://msdn.microsoft.com/en-us/library/ms536343(VS.85).aspx\" class=\"external\" rel=\" noopener\">attachEvent</a></code> вместо стандартного <code>addEventListener</code>. Для поддержки IE, пример выше может быть модифицирован следующим образом:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">.</span>addEventListener<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  el<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> modifyText<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">.</span>attachEvent<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\n  el<span class=\"token punctuation\">.</span><span class=\"token function\">attachEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'onclick'</span><span class=\"token punctuation\">,</span> modifyText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n\n<p>У <code>attachEvent</code> есть недостаток: <code>this</code> будет ссылаться на объект <code>window</code>, а не на элемент, на котором он был вызван.</p>"}},{"type":"prose","value":{"id":"compatibility","title":"Совместимость","isH3":true,"content":"<p>Вы можете обойти методы <code>addEventListener</code>, <code>removeEventListener</code>, <code>Event.preventDefault</code> и <code>Event.stopPropagation</code> не поддерживаемы в IE 8 используя следующий код в начале вашего скрипта. Этот код поддерживает использование <code>handleEvent</code> и события <code>DOMContentLoaded</code>.</p>\n\n<div class=\"note notecard\" id=\"sect4\">\n<p><strong>Note: </strong>useCapture не поддерживается, так как IE 8 не имеет альтернативного метода для этого. Также заметьте, что следующий код только добавляет поддержку IE 8. Также, он работает только при соблюдении стандартов: объявление DOCTYPE страницы обязательно.</p>\n</div>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">Event</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>preventDefault<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Event</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">preventDefault</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>returnValue<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">Event</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>stopPropagation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Event</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">stopPropagation</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cancelBubble<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">Element</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>addEventListener<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> eventListeners<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">addEventListener</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span>listener <span class=\"token comment\">/*, useCapture (will be ignored) */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> self<span class=\"token operator\">=</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">wrapper</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        e<span class=\"token punctuation\">.</span>target<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>srcElement<span class=\"token punctuation\">;</span>\n        e<span class=\"token punctuation\">.</span>currentTarget<span class=\"token operator\">=</span>self<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">.</span>handleEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          listener<span class=\"token punctuation\">.</span><span class=\"token function\">handleEvent</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">listener</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type<span class=\"token operator\">==</span><span class=\"token string\">\"DOMContentLoaded\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">wrapper2</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>readyState<span class=\"token operator\">==</span><span class=\"token string\">\"complete\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">attachEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"onreadystatechange\"</span><span class=\"token punctuation\">,</span>wrapper2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        eventListeners<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">object</span><span class=\"token operator\">:</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span>type<span class=\"token punctuation\">,</span><span class=\"token literal-property property\">listener</span><span class=\"token operator\">:</span>listener<span class=\"token punctuation\">,</span><span class=\"token literal-property property\">wrapper</span><span class=\"token operator\">:</span>wrapper2<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>readyState<span class=\"token operator\">==</span><span class=\"token string\">\"complete\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">var</span> e<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Event</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          e<span class=\"token punctuation\">.</span>srcElement<span class=\"token operator\">=</span>window<span class=\"token punctuation\">;</span>\n          <span class=\"token function\">wrapper2</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"on\"</span><span class=\"token operator\">+</span>type<span class=\"token punctuation\">,</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        eventListeners<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">object</span><span class=\"token operator\">:</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span>type<span class=\"token punctuation\">,</span><span class=\"token literal-property property\">listener</span><span class=\"token operator\">:</span>listener<span class=\"token punctuation\">,</span><span class=\"token literal-property property\">wrapper</span><span class=\"token operator\">:</span>wrapper<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">removeEventListener</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span>listener <span class=\"token comment\">/*, useCapture (will be ignored) */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> counter<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>counter<span class=\"token operator\">&lt;</span>eventListeners<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> eventListener<span class=\"token operator\">=</span>eventListeners<span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>eventListener<span class=\"token punctuation\">.</span>object<span class=\"token operator\">==</span><span class=\"token keyword\">this</span> <span class=\"token operator\">&amp;&amp;</span> eventListener<span class=\"token punctuation\">.</span>type<span class=\"token operator\">==</span>type <span class=\"token operator\">&amp;&amp;</span> eventListener<span class=\"token punctuation\">.</span>listener<span class=\"token operator\">==</span>listener<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type<span class=\"token operator\">==</span><span class=\"token string\">\"DOMContentLoaded\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">detachEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"onreadystatechange\"</span><span class=\"token punctuation\">,</span>eventListener<span class=\"token punctuation\">.</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">detachEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"on\"</span><span class=\"token operator\">+</span>type<span class=\"token punctuation\">,</span>eventListener<span class=\"token punctuation\">.</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          eventListeners<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">++</span>counter<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Element</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>addEventListener<span class=\"token operator\">=</span>addEventListener<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Element</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>removeEventListener<span class=\"token operator\">=</span>removeEventListener<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>HTMLDocument<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">HTMLDocument</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>addEventListener<span class=\"token operator\">=</span>addEventListener<span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">HTMLDocument</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>removeEventListener<span class=\"token operator\">=</span>removeEventListener<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Window<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">Window</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>addEventListener<span class=\"token operator\">=</span>addEventListener<span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">Window</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>removeEventListener<span class=\"token operator\">=</span>removeEventListener<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>"}},{"type":"prose","value":{"id":"older_way_to_register_event_listeners","title":"Старый способ регистрации обработчиков событий","isH3":true,"content":"<p><code>addEventListener()</code> был добавлен в спецификации DOM 2 <a href=\"https://www.w3.org/TR/DOM-Level-2-Events\" class=\"external\" rel=\" noopener\">Events</a>. До этого обработчики добавлялись следующим образом:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Передача ссылки на функцию — не добавляйте '()' после него, это вызовет функцию!</span>\nel<span class=\"token punctuation\">.</span>onclick <span class=\"token operator\">=</span> modifyText<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Использование функционального выражения</span>\nelement<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ... логика функции ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Этот метод заменяет текущие обработчики события <code>click</code>, если они есть. Тоже самое для других событий и ассоциируемых с ними  обработчиков, таких как <code>blur</code> (<code>onblur</code>), <code>keypress</code> (<code>onkeypress</code>), и так далее.</p>\n\n<p>Так как это по существу было частью DOM 0, этот метод имеет широкую поддержку и не требует специального кросс-браузерного кода; следовательно, это обычно используется, чтобы добавлять обработчики динамически, если не требуются расширенные возможности <code>addEventListener()</code>.</p>"}},{"type":"prose","value":{"id":"memory_issues","title":"Вопросы памяти","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> els <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Случай 1</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>els<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  els<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token comment\">/*некоторые действия*/</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Случай 2</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">processEvent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/*некоторые действия*/</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>els<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  els<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> processEvent<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div>\n\n<p>В первом случае новая (анонимная) функция создаётся при каждом шаге цикла. Во втором случае одна заранее объявленная функция используется как обработчик события. Из этого следует меньшее потребление памяти. Более того, в первом случае, вследствие отсутствия ссылок на анонимные функции, невозможно вызвать <code><a href=\"/en-US/docs/Web/API/EventTarget/removeEventListener\" title=\"DOM/element.removeEventListener\">element.removeEventListener</a>,</code> потому что нет ссылки на обработчик, в то время, как во втором случае возможно вызвать <code>myElement.removeEventListener(\"click\", processEvent, false)</code>.</p>"}},{"type":"prose","value":{"id":"улучшение_производительности_прокрутки_с_помощью_passive_true","title":"Улучшение производительности прокрутки с помощью <code>passive: true</code>","isH3":true,"content":"<p>Значение по умолчанию для параметра <code>passive</code> - <code>false</code>. Начиная с Chrome 56 (desktop, Chrome for Android, Android webview) значение по умолчанию для <code><a href=\"/en-US/docs/Web/API/Element/touchstart_event\" title=\"Currently only available in English (US)\" class=\"only-in-en-us\">touchstart (en-US)</a></code> и <code><a href=\"/en-US/docs/Web/API/Element/touchmove_event\" title=\"Currently only available in English (US)\" class=\"only-in-en-us\">touchmove (en-US)</a></code> равно <code>true</code>, а вызовы <code>preventDefault()</code> не разрешены. Чтобы отменить это поведение, необходимо установить параметр <code>passive</code> в <code>false</code> (см. пример ниже). Это изменение не позволяет обработчику блокировать показ страницы во время прокрутки пользователя. Демонстрация доступна на <a href=\"https://developers.google.com/web/updates/2016/06/passive-event-listeners\" class=\"external\" rel=\" noopener\">сайте разработчиков Google</a>. Обратите внимание, что Edge вообще не поддерживает <code>options</code>, и добавление его без <a href=\"/ru/docs/Web/API/EventTarget/addEventListener$edit#Safely_detecting_option_support\">проверки поддержки</a> помешает использовать аргумент <code>useCapture</code>.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/* Feature detection */</span>\n<span class=\"token keyword\">var</span> passiveSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n        Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"passive\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> passiveSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* Event Listener */</span>\n<span class=\"token keyword\">var</span> elem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'elem'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nelem<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'touchmove'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">listener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">/* do something */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    passiveSupported <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">passive</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>Установка <code>passive</code> не имеет значения для основного события <code><a href=\"/en-US/docs/Web/API/Document/scroll_event\" title=\"Currently only available in English (US)\" class=\"only-in-en-us\">scroll (en-US)</a></code>, поскольку его нельзя отменить, поэтому его обработчик в любом случае не может блокировать показ страницы.</p>","titleAsText":"Улучшение производительности прокрутки с помощью passive: true"}},{"type":"browser_compatibility","value":{"title":"Совместимость","id":"browser_compatibility","isH3":false,"query":"api.EventTarget.addEventListener","dataURL":"/ru/docs/Web/API/EventTarget/addEventListener/bcd.json"}},{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div id=\"sect5\"></div>"}},{"type":"prose","value":{"id":"примечания_по_gecko","title":"Примечания по Gecko","isH3":true,"content":"<ul>\n <li>До Firefox 6, браузер выбросит исключение, если параметр <code>useCapture</code> не был точно равен <code>false</code>. До Gecko 9.0 (Firefox 9.0 / Thunderbird 9.0 / SeaMonkey 2.6), <code>addEventListener()</code> выбросит исключение, если параметр <code>listener</code> был равен <code>null</code>; сейчас метод завершается без ошибки, но ничего не делает.</li>\n</ul>"}},{"type":"prose","value":{"id":"примечания_по_webkit","title":"Примечания по WebKit","isH3":true,"content":"<ul>\n <li>Несмотря на то, что в WebKit параметр <code>useCapture</code> был объявлен необязательным <a href=\"https://trac.webkit.org/changeset/89781\" class=\"external\" rel=\" noopener\">только в июне 2011 года</a>, это работало и до этого изменения. Новые изменения были добавлены в Safari 5.1 и Chrome 13.</li>\n</ul>"}},{"type":"prose","value":{"id":"specifications","title":"Specifications","isH3":false,"content":"<table class=\"standard-table\">\n <thead>\n  <tr>\n   <th>Specification</th>\n   <th>Status</th>\n   <th>Comment</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td><a href=\"https://dom.spec.whatwg.org/#dom-eventtarget-addeventlistener\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">DOM<br><small lang=\"ru\">Определение 'EventTarget.addEventListener()' в этой спецификации.</small></a></td>\n   <td><span class=\"spec-living\">Живой стандарт</span></td>\n   <td></td>\n  </tr>\n  <tr>\n   <td><a href=\"https://www.w3.org/TR/dom/#dom-eventtarget-addeventlistener\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">DOM4<br><small lang=\"ru\">Определение 'EventTarget.addEventListener()' в этой спецификации.</small></a></td>\n   <td><span class=\"spec-obsolete\">Устаревшая</span></td>\n   <td></td>\n  </tr>\n  <tr>\n   <td><a href=\"https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget-addEventListener\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">Document Object Model (DOM) Level 2 Events Specification<br><small lang=\"ru\">Определение 'EventTarget.addEventListener()' в этой спецификации.</small></a></td>\n   <td><span class=\"spec-obsolete\">Устаревшая</span></td>\n   <td>Initial definition</td>\n  </tr>\n </tbody>\n</table>"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility_2","isH3":false,"query":"api.EventTarget.addEventListener","dataURL":"/ru/docs/Web/API/EventTarget/addEventListener/bcd-2.json"}},{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p></p><p></p>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n <li><a href=\"/ru/docs/Web/API/EventTarget/removeEventListener\"><code>EventTarget.removeEventListener()</code></a></li>\n <li><a href=\"/en-US/docs/Web/Events/Creating_and_triggering_events\">Creating and triggering custom events</a></li>\n <li><a href=\"https://www.quirksmode.org/js/this.html\" class=\"external\" rel=\" noopener\">More details on the use of <code>this</code> in event handlers</a></li>\n</ul>"}}],"toc":[{"text":"Синтаксис","id":"syntax"},{"text":"Примечания по использованию","id":"примечания_по_использованию"},{"text":"Примеры","id":"примеры"},{"text":"Примечания","id":"примечания"},{"text":"Совместимость","id":"browser_compatibility"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility_2"},{"text":"See also","id":"see_also"}],"summary":"Метод EventTarget.addEventListener() регистрирует определённый обработчик события, вызванного на EventTarget.","popularity":0.0133,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"EventTarget.addEventListener()","locale":"en-US","native":"English (US)"},{"title":"element.addEventListener","locale":"es","native":"Español"},{"title":"EventTarget.addEventListener()","locale":"fr","native":"Français"},{"title":"EventTarget.addEventListener()","locale":"ja","native":"日本語"},{"title":"EventTarget.addEventListener()","locale":"ko","native":"한국어"},{"title":"Element.addEventListener()","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"EventTarget.addEventListener()","locale":"zh-CN","native":"中文 (简体)"},{"title":"EventListener","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ru/web/api/eventtarget/addeventlistener","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/web/api/eventtarget/addeventlistener/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Web","title":"Веб-технологии для разработчиков"},{"uri":"/ru/docs/Web/API","title":"Интерфейсы веб API"},{"uri":"/ru/docs/Web/API/EventTarget","title":"EventTarget"},{"uri":"/ru/docs/Web/API/EventTarget/addEventListener","title":"Метод EventTarget.addEventListener()"}],"pageTitle":"Метод EventTarget.addEventListener() - Интерфейсы веб API | MDN","noIndexing":false}}