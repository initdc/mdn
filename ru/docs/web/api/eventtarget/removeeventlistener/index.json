{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Метод EventTarget.removeEventListener()","mdn_url":"/ru/docs/Web/API/EventTarget/removeEventListener","locale":"ru","native":"Русский","sidebarHTML":"<ol><li><strong><a href=\"/ru/docs/Web/API/EventTarget\"><code>EventTarget</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Конструктор</summary><ol><li><a href=\"/ru/docs/Web/API/EventTarget/EventTarget\"><code>EventTarget()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Методы</summary><ol><li><a href=\"/ru/docs/Web/API/EventTarget/addEventListener\"><code>addEventListener()</code></a></li><li><a href=\"/ru/docs/Web/API/EventTarget/dispatchEvent\"><code>dispatchEvent()</code></a></li><li><em><code>removeEventListener()</code></em></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p></p><p></p>\n\n<p>Удаляет обработчик события, который был зарегистрирован при помощи <a href=\"/ru/docs/Web/API/EventTarget/addEventListener\"><code>EventTarget.addEventListener()</code></a>. Обработчик определяется типом события, самой функцией обработки события, и дополнительными параметрами, переданными при регистрации обработчика.</p>"}},{"type":"prose","value":{"id":"syntax","title":"Синтаксис","isH3":false,"content":"<pre class=\"syntaxbox notranslate\"><code><em>target</em>.removeEventListener(<em>type</em>, <em>listener</em>[, <em>options</em>]);\n</code><em>target</em>.removeEventListener(<em>type</em>, <em>listener</em>[, <em>useCapture</em>]);\n</pre>"}},{"type":"prose","value":{"id":"параметры","title":"Параметры","isH3":true,"content":"<dl>\n <dt id=\"type\"><code>type</code></dt>\n <dd>Строка, описывающая тип события, которое нужно удалить.</dd>\n <dt id=\"listener\"><code>listener</code></dt>\n <dd><a href=\"/ru/docs/conflicting/Web/API/EventTarget/addEventListener\"><code>EventListener</code></a> функция, которую нужно удалить с элемента.</dd>\n <dt id=\"options\">options <span class=\"badge inline optional\">Необязательный</span></dt>\n <dd>Объект опций, описывающий характеристики обработчика события. Доступные опции:\n <ul>\n  <li><code>capture</code>: <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a>. Указывает на то, что события этого типа отправляются данному обработчику до того, как происходит их передача любым <code>EventTarget</code>, находящимся ниже него в дереве DOM.</li>\n  <li><code>passive</code>: <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a>. Указывает на то, что <code>listener</code> никогда не будет вызывать <code>preventDefault()</code>. В противном случае (если <code>listener</code> вызовет <code>preventDefault()</code> ), user agent проигнорирует вызов и сгенерирует предупреждение в консоли.</li>\n </ul>\n </dd>\n <dt id=\"usecapture\"><code>useCapture</code> <span class=\"badge inline optional\">Необязательный</span></dt>\n <dd><p>Указывает, был ли удаляемый <a href=\"/ru/docs/conflicting/Web/API/EventTarget/addEventListener\"><code>EventListener</code></a>зарегистрирован как перехватывающий обработчик, или нет. Если этот параметр отсутствует, предполагается значение по умолчанию:<code>false</code>.</p>\n <p>Если обработчик был зарегистрирован дважды, один раз с перехватом (с <code>capture</code>) и один - без, каждый из них должен быть удалён по отдельности. Удаление перехватывающего обработчика никак не затрагивает неперехватывающую версию этого же обработчика, и наоборот.</p></dd>\n</dl>\n\n<div class=\"note notecard\" id=\"sect1\"><strong>Примечание:</strong> <code>useCapture</code> требуется в большинстве основных браузеров старых версий. Если вы хотите поддерживать большую совместимость, вы всегда должны использовать параметр <code>useCapture</code>.</div>"}},{"type":"prose","value":{"id":"return_value","title":"Возвращаемое значение","isH3":true,"content":"<p><code>undefined</code>.</p>"}},{"type":"prose","value":{"id":"поиск_обработчика_при_удалении","title":"Поиск обработчика при удалении","isH3":true,"content":"<p>В большинстве браузеров помимо типа события и функции важно лишь совпадение значений параметра <code>useCapture</code> / <code>options.capture</code>, но так как это поведение не закреплено стандартом, наилучшим способом будет указание для <code>removeEventListener()</code> в точности тех же параметров, что были переданы в <code>addEventListener()</code>.</p>"}},{"type":"prose","value":{"id":"compatibility","title":"Примечания","isH3":false,"content":"<p>Если <a href=\"/ru/docs/conflicting/Web/API/EventTarget/addEventListener\"><code>EventListener</code></a> был удалён из <a href=\"/ru/docs/Web/API/EventTarget\"><code>EventTarget</code></a> процессе обработки события (например предшествующим <a href=\"/ru/docs/conflicting/Web/API/EventTarget/addEventListener\"><code>EventListener</code></a> того же типа), он не будет вызван. После удаления, <a href=\"/ru/docs/conflicting/Web/API/EventTarget/addEventListener\"><code>EventListener</code></a> не будет вызываться, однако его можно назначить заново.</p>\n\n<p>Вызов <code>removeEventListener()</code> с параметрами, не соответствующими ни одному зарегистрированному <a href=\"/ru/docs/conflicting/Web/API/EventTarget/addEventListener\"><code>EventListener</code></a> в <code>EventTarget</code>, не имеет никакого эффекта.</p>"}},{"type":"prose","value":{"id":"пример","title":"Пример","isH3":false,"content":"<p>Это пример добавления и последующего удаления обработчика событий.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">listener</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* do something here */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ndiv<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> listener<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndiv<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> listener<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"browser_compatibility","value":{"title":"Совместимость браузеров","id":"browser_compatibility","isH3":false,"query":"api.EventTarget.removeEventListener","dataURL":"/ru/docs/Web/API/EventTarget/removeEventListener/bcd.json"}},{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p></p><p></p>"}},{"type":"prose","value":{"id":"gecko_примечания","title":"Gecko примечания","isH3":true,"content":"<ul>\n <li>В версиях Firefox младше версии 6 браузер бросает исключение, если параметр <code>useCapture</code> не был явно указан как false. В Gecko младше 9.0 (Firefox 9.0 / Thunderbird 9.0 / SeaMonkey 2.6), <code>addEventListener()</code> бросает исключение, если параметр <code>listener</code> равен <code>null</code>; в настоящее время метод отрабатывает без ошибки, но при этом не производит никаких действий.</li>\n</ul>"}},{"type":"prose","value":{"id":"opera_примечания","title":"Opera примечания","isH3":true,"content":"<ul>\n <li>В Opera 12.00 параметр <code>useCapture</code> - опциональный (<a class=\"external\" href=\"https://my.opera.com/ODIN/blog/2011/09/29/what-s-new-in-opera-development-snapshots-28-september-2011-edition\" rel=\" noopener\">source</a>).</li>\n</ul>"}},{"type":"prose","value":{"id":"webkit_примечания","title":"WebKit примечания","isH3":true,"content":"<ul>\n <li>Несмотря на то, что WebKit явно добавил \"<code>[optional]</code>\" к параметру <code>useCapture</code> в Safari 5.1 и Chrome 13, это работало и до изменений.</li>\n</ul>"}},{"type":"prose","value":{"id":"specification","title":"Спецификация","isH3":true,"content":"<ul>\n <li><a class=\"external\" href=\"https://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-EventTarget-removeEventListener\" rel=\" noopener\">removeEventListener </a></li>\n</ul>"}},{"type":"prose","value":{"id":"полифилы_для_поддержки_старых_браузеров","title":"Полифилы для поддержки старых браузеров","isH3":false,"content":"<p><code>addEventListener()</code> и <code>removeEventListener()</code> отсутствуют в старых браузерах. Это ограничение можно обойти, вставив следующий код в начале ваших скриптов, что позволяет использовать <code>addEventListener()</code> и <code>removeEventListener()</code> в версиях, не поддерживающих эти методы нативно. Тем не менее, этот метод не работает в Internet Explorer версии 7 и ниже, так как расширение Element.prototype не поддерживалось в более ранних версиях Internet Explorer ранее 8.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">Element</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>addEventListener<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> oListeners <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">runListeners</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">oEvent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>oEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> oEvent <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> iLstId <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> iElId <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> oEvtListeners <span class=\"token operator\">=</span> oListeners<span class=\"token punctuation\">[</span>oEvent<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> iElId <span class=\"token operator\">&lt;</span> oEvtListeners<span class=\"token punctuation\">.</span>aEls<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> iElId<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oEvtListeners<span class=\"token punctuation\">.</span>aEls<span class=\"token punctuation\">[</span>iElId<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>iLstId<span class=\"token punctuation\">;</span> iLstId <span class=\"token operator\">&lt;</span> oEvtListeners<span class=\"token punctuation\">.</span>aEvts<span class=\"token punctuation\">[</span>iElId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> iLstId<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> oEvtListeners<span class=\"token punctuation\">.</span>aEvts<span class=\"token punctuation\">[</span>iElId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>iLstId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> oEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token class-name\">Element</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">addEventListener</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>sEventType<span class=\"token punctuation\">,</span> fListener <span class=\"token comment\">/*, useCapture (will be ignored!) */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oListeners<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>sEventType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> oEvtListeners <span class=\"token operator\">=</span> oListeners<span class=\"token punctuation\">[</span>sEventType<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> nElIdx <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> iElId <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> iElId <span class=\"token operator\">&lt;</span> oEvtListeners<span class=\"token punctuation\">.</span>aEls<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> iElId<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oEvtListeners<span class=\"token punctuation\">.</span>aEls<span class=\"token punctuation\">[</span>iElId<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> nElIdx <span class=\"token operator\">=</span> iElId<span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nElIdx <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        oEvtListeners<span class=\"token punctuation\">.</span>aEls<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        oEvtListeners<span class=\"token punctuation\">.</span>aEvts<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>fListener<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"on\"</span> <span class=\"token operator\">+</span> sEventType<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> runListeners<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> aElListeners <span class=\"token operator\">=</span> oEvtListeners<span class=\"token punctuation\">.</span>aEvts<span class=\"token punctuation\">[</span>nElIdx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"on\"</span> <span class=\"token operator\">+</span> sEventType<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> runListeners<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          aElListeners<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"on\"</span> <span class=\"token operator\">+</span> sEventType<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> runListeners<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> iLstId <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> iLstId <span class=\"token operator\">&lt;</span> aElListeners<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> iLstId<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>aElListeners<span class=\"token punctuation\">[</span>iLstId<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> fListener<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        aElListeners<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>fListener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      oListeners<span class=\"token punctuation\">[</span>sEventType<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">aEls</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">aEvts</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">[</span>fListener<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"on\"</span> <span class=\"token operator\">+</span> sEventType<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> runListeners<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Element</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">removeEventListener</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>sEventType<span class=\"token punctuation\">,</span> fListener <span class=\"token comment\">/*, useCapture (will be ignored!) */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>oListeners<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>sEventType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> oEvtListeners <span class=\"token operator\">=</span> oListeners<span class=\"token punctuation\">[</span>sEventType<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> nElIdx <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> iElId <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> iElId <span class=\"token operator\">&lt;</span> oEvtListeners<span class=\"token punctuation\">.</span>aEls<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> iElId<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oEvtListeners<span class=\"token punctuation\">.</span>aEls<span class=\"token punctuation\">[</span>iElId<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> nElIdx <span class=\"token operator\">=</span> iElId<span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nElIdx <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> iLstId <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> aElListeners <span class=\"token operator\">=</span> oEvtListeners<span class=\"token punctuation\">.</span>aEvts<span class=\"token punctuation\">[</span>nElIdx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> iLstId <span class=\"token operator\">&lt;</span> aElListeners<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> iLstId<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>aElListeners<span class=\"token punctuation\">[</span>iLstId<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> fListener<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> aElListeners<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>iLstId<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>"}},{"type":"prose","value":{"id":"смотрите_также","title":"Смотрите также","isH3":false,"content":"<ul>\n <li><a href=\"/ru/docs/Web/API/EventTarget/addEventListener\"><code>EventTarget.addEventListener()</code></a>.</li>\n <li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/EventTarget/removeEventListener\"><code>EventTarget.detachEvent()</code> <small>(en-US)</small></a>.</li>\n</ul>"}}],"toc":[{"text":"Синтаксис","id":"syntax"},{"text":"Примечания","id":"compatibility"},{"text":"Пример","id":"пример"},{"text":"Совместимость браузеров","id":"browser_compatibility"},{"text":"Полифилы для поддержки старых браузеров","id":"полифилы_для_поддержки_старых_браузеров"},{"text":"Смотрите также","id":"смотрите_также"}],"summary":"Удаляет обработчик события, который был зарегистрирован при помощи EventTarget.addEventListener(). Обработчик определяется типом события, самой функцией обработки события, и дополнительными параметрами, переданными при регистрации обработчика.","popularity":0.0034,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"EventTarget.removeEventListener()","locale":"en-US","native":"English (US)"},{"title":"EventTarget.removeEventListener()","locale":"es","native":"Español"},{"title":"element.removeEventListener","locale":"fr","native":"Français"},{"title":"EventTarget.removeEventListener()","locale":"ja","native":"日本語"},{"title":"EventTarget.removeEventListener()","locale":"ko","native":"한국어"},{"title":"EventTarget.removeEventListener()","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"EventTarget.removeEventListener()","locale":"zh-CN","native":"中文 (简体)"},{"title":"EventTarget.removeEventListener()","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ru/web/api/eventtarget/removeeventlistener","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/web/api/eventtarget/removeeventlistener/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/Web","title":"Веб-технологии для разработчиков"},{"uri":"/ru/docs/Web/API","title":"Интерфейсы веб API"},{"uri":"/ru/docs/Web/API/EventTarget","title":"EventTarget"},{"uri":"/ru/docs/Web/API/EventTarget/removeEventListener","title":"Метод EventTarget.removeEventListener()"}],"pageTitle":"Метод EventTarget.removeEventListener() - Интерфейсы веб API | MDN","noIndexing":false}}