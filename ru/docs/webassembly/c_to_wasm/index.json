{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Компиляция кода C/C++ в WebAssembly","mdn_url":"/ru/docs/WebAssembly/C_to_wasm","locale":"ru","native":"Русский","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"open\"><a href=\"/ru/docs/WebAssembly\"><strong>WebAssembly home page</strong></a>\n  </li><li class=\"toggle\">\n    <details open=\"\">\n      <summary>Tutorials</summary>\n      <ol>\n        <li><a href=\"/ru/docs/WebAssembly/Concepts\">WebAssembly concepts</a></li>\n        <li><a href=\"/ru/docs/WebAssembly/C_to_wasm\">Compiling from C/C++ to WebAssembly</a></li>\n        <li><a href=\"/ru/docs/WebAssembly/Rust_to_wasm\">Compiling from Rust to WebAssembly</a></li>\n        <li><a href=\"/ru/docs/WebAssembly/Using_the_JavaScript_API\">Using the WebAssembly JavaScript API</a></li>\n        <li><a href=\"/ru/docs/WebAssembly/Understanding_the_text_format\">Understanding WebAssembly text format</a></li>\n        <li><a href=\"/ru/docs/WebAssembly/Text_format_to_wasm\">Converting WebAssembly text format to wasm</a></li>\n        <li><a href=\"/ru/docs/WebAssembly/Loading_and_running\">Loading and running WebAssembly code</a></li>\n        <li><a href=\"/ru/docs/WebAssembly/Caching_modules\">Caching compiled WebAssembly modules</a></li>\n        <li><a href=\"/ru/docs/WebAssembly/Exported_functions\">Exported WebAssembly functions</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Object reference</summary>\n      <ol>\n        <li><a href=\"/ru/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code> <small>(en-US)</small></a></li>\n        <li><a href=\"/ru/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code> <small>(en-US)</small></a></li>\n      </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div id=\"sect1\"></div>\n\n<p class=\"summary\">После того как вы написали код на C / C ++, вы можете скомпилировать его в WebAssembly, например, с помощью инструмента <a href=\"/en-US/docs/Mozilla/Projects/Emscripten\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">Emscripten</a>. Давайте посмотрим, как это работает.</p>"}},{"type":"prose","value":{"id":"подготовка_рабочей_среды_для_emscripten","title":"Подготовка рабочей среды для Emscripten","isH3":false,"content":"<p>Первым делом установим компоненты для дальнейшей работы.</p>"}},{"type":"prose","value":{"id":"необходимые_компоненты","title":"Необходимые компоненты","isH3":true,"content":"<p>Установите Emscripten SDK и настройте рабочее окружение используя инструкции: <a href=\"https://kripken.github.io/emscripten-site/docs/getting_started/downloads.html\" class=\"external\" rel=\" noopener\">https://kripken.github.io/emscripten-site/docs/getting_started/downloads.html </a></p>"}},{"type":"prose","value":{"id":"компиляция_примера","title":"Компиляция примера","isH3":false,"content":"<p>Когда рабочее окружение подготовлено, попробуем собрать пример кода на языке Си при помощи Emscripten. Вам доступно большое количество опций для настройки компиляции, но мы рассмотрим только два основных сценария компиляции с использованием Emscripten:</p>\n\n<ul>\n <li>Компиляция в wasm и создание HTML-страницы для запуска вашего кода, а также JavaScript-кода, необходимого для работы wasm модуля в веб-среде.</li>\n <li>Просто компиляция в wasm и создание JavaScript-кода.</li>\n</ul>\n\n<p>Мы рассмотрим оба способа ниже.</p>"}},{"type":"prose","value":{"id":"создание_html_и_javascript","title":"Создание HTML и JavaScript","isH3":true,"content":"<p>Это самый простой способ, который мы рассмотрим. С его помощью вы сможете использовать Emscripten для создания всего что нужно, чтобы ваш код работал в браузере как модуль WebAssembly.</p>\n\n<ol>\n <li>Нам понадобится простой пример для компиляции. Скопируйте следующий код программы на Си и сохраните его в файле  <code>hello.c</code> в новой папке на вашем локальном диске:\n\n  <div class=\"code-example\"><pre class=\"brush: cpp notranslate\"><code><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n </li>\n <li>Теперь, используя терминал, перейдите в каталог, в котором находится ваш файл hello.c, и выполните следующую команду:\n  <div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>emcc hello.c -s <span class=\"token assign-left variable\">WASM</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> -o hello.html</code></pre></div>\n </li>\n</ol>\n\n<p>Рассмотрим параметры, которые мы передали компилятору:</p>\n\n<ul>\n <li><code>-s WASM=1</code> — Указывает, что мы хотим получить wasm модуль. Если не использовать этот параметр, по умолчанию Emscripten просто создаёт  <a href=\"http://asmjs.org/\" class=\"external\" rel=\" noopener\">asm.js</a>;</li>\n <li><code>-o hello.html</code> — Указывает, что мы хотим, чтобы Emscripten сгенерировал HTML-страницу <code>hello.html</code> запускающую наш код, а также сам модуль wasm и код JavaScript который позволит использовать модуль в веб-среде.</li>\n</ul>\n\n<p>На этом этапе в вашем каталоге должны находится:</p>\n\n<ul>\n <li>Бинарный код модуля wasm (<code>hello.wasm</code>)</li>\n <li>Файл JavaScript, содержащий код связывающий нативные функции Си и JavaScript/wasm (<code>hello.js</code>)</li>\n <li>HTML-страница для загрузки, компиляции и инициализации wasm модуля, и отображающий его вывод в браузере (<code>hello.html</code>)</li>\n</ul>"}},{"type":"prose","value":{"id":"запуск_вашего_примера","title":"Запуск вашего примера","isH3":true,"content":"<p>Теперь, всё что нужно чтобы запустить полученный  <code>hello.html</code> в браузере, это поддержка WebAssembly. Он включён по умолчанию в Firefox 52+, Chrome 57+ и последних версиях Opera. Также вы можете использовать модули WebAssembly в Firefox 47+, включив флаг <code>javascript.options.wasm</code> в <em>about:config</em>, или в Chrome 51+ и Opera 38+ перейдя в <em>chrome://flags</em> и включив флаг <em>Experimental WebAssembly.</em></p>\n\n<p>Если все работает как планировалось, вы должны увидеть надпись \"Hello world\" на открывшейся веб-странице и в JavaScript консоли вашего браузера. Поздравляем, вы только что скомпилировали программу на Си в WebAssembly и запустили её в своём браузере!</p>\n\n<div class=\"note notecard\" id=\"sect2\">\n<p><strong>Примечание</strong>: На самом деле, если просто открыть полученный <code>hello.html</code>, то ничего работать не будет. Подразумевается что все файлы находятся на веб-сервере и вы запускаете страницу через <code>localhost/hello.html</code>. Для этих целей можно использовать отладочный веб-сервер Emscripten. Чтобы его запустить, откройте терминал, перейдите в каталог, в котором находятся ваши файлы и выполните команду <code>emrun hello.html</code></p>\n</div>"}},{"type":"prose","value":{"id":"использование_собственного_html_шаблона","title":"Использование собственного HTML шаблона","isH3":true,"content":"<p>Вы можете использовать собственный шаблон HTML. Давайте посмотрим, как это сделать:</p>\n\n<ol>\n <li>\n  <p>Прежде всего, сохраните следующий код в файле hello2.c в новом каталоге:</p>\n\n  <div class=\"code-example\"><pre class=\"brush: cpp notranslate\"><code><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n </li>\n <li>\n  <p>Найдите файл  <code>shell_minimal.html</code> в вашем репозитории emsdk. Скопируйте его в подкаталог <code>html_template</code> внутри вашего нового каталога.</p>\n </li>\n <li>\n  <p>Теперь, используя терминал, перейдите в ваш новый каталог и выполните следующую команду:</p>\n\n  <div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>emcc -o hello2.html hello2.c -O3 -s <span class=\"token assign-left variable\">WASM</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> --shell-file html_template/shell_minimal.html</code></pre></div>\n\n  <p>В этот раз мы использовали немного другие параметры компиляции:</p>\n\n  <ul>\n   <li>Мы указали <code>-o hello2.html</code>, чтобы компилятор по прежнему генерировал необходимый JavaScript-код и <code>.html</code> файл.</li>\n   <li>Также, мы указали  <code>--shell-file html_template/shell_minimal.html </code>чтобы компилятор использовал ваш шаблон для создания HTML страницы запускающей этот пример.</li>\n  </ul>\n </li>\n <li>\n  <p>Теперь давайте запустим этот пример. Команда, указанная выше, сгенерирует файл <code>hello2.html</code>, который будет иметь тоже содержание что и шаблон, но с некоторым кодом, добавленным в процесс загрузки сгенерированного wasm, запускающим его и т.д. Откройте его в своём браузере, и вы увидите тот же результат, что и прошлом примере.</p>\n </li>\n</ol>\n\n<div class=\"note notecard\" id=\"sect3\">\n<p><strong>Примечание</strong>: вы можете указать компилятору создавать только JavaScript-кода, без HTML, используя внутри флага <code>-o</code>, <code>.js</code> вместо <code>.html</code> для формата выходного файла, например <code>emcc -o hello2.js hello2.c -O3 -s WASM=1</code>. После этого вы должны создать свой собственный HTML файл с нуля. Однако так делать не рекомендуется — Emscripten требуется большое количество связывающего кода для обработки операций выделения памяти, утечек памяти и других проблем, которые уже включены в предоставляемый шаблон. Намного легче использовать уже готовое решение, чем создавать свои собственные версии самому.</p>\n</div>"}},{"type":"prose","value":{"id":"вызов_пользовательской_функции_определённой_в_си","title":"Вызов пользовательской функции, определённой в Си","isH3":true,"content":"<p>Если у вас есть функция определённая в коде на Си, которую вы хотите по необходимости вызывать из JavaScript, то вы можете использовать для этого функцию  <code>ccall()</code> из Emscripten, и объявление <code>EMSCRIPTEN_KEEPALIVE</code> которое добавит вашу функцию в список экспортируемых функций (см. <a href=\"https://kripken.github.io/emscripten-site/docs/getting_started/FAQ.html#why-do-functions-in-my-c-c-source-code-vanish-when-i-compile-to-javascript-and-or-i-get-no-functions-to-process\" class=\"external\" rel=\" noopener\">Почему функции в моем коде исчезают после компиляции и/или я получаю сообщение «Нет функций для обработки»</a>). Давайте посмотрим, как это работает.</p>\n\n<ol>\n <li>\n  <p>Для начала сохраните следующий код в файле  <code>hello3.c</code> в новом каталоге:</p>\n\n  <div class=\"code-example\"><pre class=\"brush: cpp notranslate\"><code><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;emscripten/emscripten.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus</span></span>\n<span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token punctuation\">{</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token keyword\">void</span> EMSCRIPTEN_KEEPALIVE <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyFunction Called\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus</span></span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></code></pre></div>\n\n  <p>По умолчанию, код созданный Emscripten, всегда просто вызывает функцию  <code>main()</code> , а остальные неиспользуемые функции удаляются. Добавьте определение <code>EMSCRIPTEN_KEEPALIVE</code> перед именем функции чтобы этого не происходило. Также вы должны подключить библиотеку <code>emscripten.h</code> для использования <code>EMSCRIPTEN_KEEPALIVE</code>.</p>\n\n  <div class=\"note notecard\" id=\"sect4\">\n  <p><strong>Примечание</strong>: Мы используем блоки <code>#ifdef</code> чтобы, пример оставался рабочим если вы попытаетесь использовать C++ код. Из за различия в правилах преобразования имён между Си и Си++, этот код может сломаться, но мы написали его так, что функция будет рассматриваться как функция Си даже если вы будете использовать Си++.</p>\n  </div>\n </li>\n <li>\n  <p>Теперь добавьте <code>html_template/shell_minimal.html</code> в ваш новый каталог, просто для удобства. В настоящем проекте стоит размещать его в специально определённый каталог.</p>\n </li>\n <li>\n  <p>Теперь снова займёмся этапом компиляции. Внутри вашего последнего каталога, используя терминал, скомпилируйте ваш Си код следующей командой. (Обратите внимание что при компиляции обязательно нужно использовать опцию NO_EXIT_RUNTIME, иначе после выполнения функции <code>main()</code>, рабочий цикл будет завершён. Это приведёт, например, к вызову функции atexits и дальше будет невозможно использовать наш скомпилированный код. Другими словами это необходимо для правильной эмуляции Си.)</p>\n\n  <div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>emcc -o hello3.html hello3.c -O3 -s <span class=\"token assign-left variable\">WASM</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> --shell-file html_template/shell_minimal.html -s <span class=\"token assign-left variable\">NO_EXIT_RUNTIME</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>  -s <span class=\"token assign-left variable\">EXTRA_EXPORTED_RUNTIME_METHODS</span><span class=\"token operator\">=</span><span class=\"token string\">'[\"ccall\"]'</span></code></pre></div>\n </li>\n <li>\n  <p>Если вы снова запустите пример в своём браузере, вы увидите тоже самое что и до этого!</p>\n </li>\n <li>\n  <p>Теперь нам нужно вызвать нашу новую функцию <code>myFunction()</code> из JavaScript. Прежде всего, добавьте <a href=\"/ru/docs/Web/HTML/Element/button\"><code>&lt;button&gt;</code></a> как показано ниже, чуть выше первого открывающего тега <code>&lt;script type='text/javascript'&gt;</code>.</p>\n\n  <div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mybutton<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Run myFunction<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n </li>\n <li>\n  <p>Теперь добавьте следующий код в конце первого элемента <a href=\"/ru/docs/Web/HTML/Element/script\"><code>&lt;script&gt;</code></a> (чуть выше закрывающего тега <code>&lt;/script&gt;</code>):</p>\n\n  <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.mybutton'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'check console'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">ccall</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myFunction'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// name of C function</span>\n                             <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// return type</span>\n                             <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// argument types</span>\n                             <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// arguments</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n </li>\n</ol>\n\n<p>Это показывает как использовать <code>ccall()</code> для вызова экспортируемой функции.</p>"}},{"type":"prose","value":{"id":"смотрите_также","title":"Смотрите также","isH3":false,"content":"<ul>\n <li><a href=\"http://emscripten.org/\" class=\"external\" rel=\" noopener\">emscripten.org</a> — узнайте больше об Emscripten и разнообразии его настроек.</li>\n <li><a href=\"https://kripken.github.io/emscripten-site/docs/porting/connecting_cpp_and_javascript/Interacting-with-code.html#calling-compiled-c-functions-from-javascript-using-ccall-cwrap\" class=\"external\" rel=\" noopener\">Calling compiled C functions from JavaScript using ccall/cwrap</a></li>\n <li><a href=\"https://kripken.github.io/emscripten-site/docs/getting_started/FAQ.html#why-do-functions-in-my-c-c-source-code-vanish-when-i-compile-to-javascript-and-or-i-get-no-functions-to-process\" class=\"external\" rel=\" noopener\">Why do functions in my C/C++ source code vanish when I compile to JavaScript, and/or I get No functions to process?</a></li>\n <li><a href=\"https://research.mozilla.org/webassembly/\" class=\"external\" rel=\" noopener\">WebAssembly on Mozilla Research</a></li>\n <li>\n  <p><a href=\"/en-US/docs/WebAssembly/existing_C_to_wasm\">Compiling an Existing C Module to WebAssembly</a></p>\n </li>\n</ul>"}}],"toc":[{"text":"Подготовка рабочей среды для Emscripten","id":"подготовка_рабочей_среды_для_emscripten"},{"text":"Компиляция примера","id":"компиляция_примера"},{"text":"Смотрите также","id":"смотрите_также"}],"summary":"После того как вы написали код на C / C ++, вы можете скомпилировать его в WebAssembly, например, с помощью инструмента Emscripten. Давайте посмотрим, как это работает.","popularity":0.0003,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Compiling a New C/C++ Module to WebAssembly","locale":"en-US","native":"English (US)"},{"title":"Compiler un nouveau module C/C++ en WebAssembly","locale":"fr","native":"Français"},{"title":"C/C++ から WebAssembly へのコンパイル","locale":"ja","native":"日本語"},{"title":"C/C++ 모듈을 웹어셈블리로 컴파일하기","locale":"ko","native":"한국어"},{"title":"编译 C/C++ 为 WebAssembly","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ru/webassembly/c_to_wasm","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/webassembly/c_to_wasm/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/WebAssembly","title":"WebAssembly"},{"uri":"/ru/docs/WebAssembly/C_to_wasm","title":"Компиляция кода C/C++ в WebAssembly"}],"pageTitle":"Компиляция кода C/C++ в WebAssembly - WebAssembly | MDN","noIndexing":false}}