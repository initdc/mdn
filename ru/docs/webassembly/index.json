{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"WebAssembly","mdn_url":"/ru/docs/WebAssembly","locale":"ru","native":"Русский","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"open\"><a href=\"/ru/docs/WebAssembly\"><strong>WebAssembly home page</strong></a>\n  </li><li class=\"toggle\">\n    <details open=\"\">\n      <summary>Tutorials</summary>\n      <ol>\n        <li><a href=\"/ru/docs/WebAssembly/Concepts\">WebAssembly concepts</a></li>\n        <li><a href=\"/ru/docs/WebAssembly/C_to_wasm\">Compiling from C/C++ to WebAssembly</a></li>\n        <li><a href=\"/ru/docs/WebAssembly/Rust_to_wasm\">Compiling from Rust to WebAssembly</a></li>\n        <li><a href=\"/ru/docs/WebAssembly/Using_the_JavaScript_API\">Using the WebAssembly JavaScript API</a></li>\n        <li><a href=\"/ru/docs/WebAssembly/Understanding_the_text_format\">Understanding WebAssembly text format</a></li>\n        <li><a href=\"/ru/docs/WebAssembly/Text_format_to_wasm\">Converting WebAssembly text format to wasm</a></li>\n        <li><a href=\"/ru/docs/WebAssembly/Loading_and_running\">Loading and running WebAssembly code</a></li>\n        <li><a href=\"/ru/docs/WebAssembly/Caching_modules\">Caching compiled WebAssembly modules</a></li>\n        <li><a href=\"/ru/docs/WebAssembly/Exported_functions\">Exported WebAssembly functions</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Object reference</summary>\n      <ol>\n        <li><a href=\"/ru/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code> <small>(en-US)</small></a></li>\n        <li><a href=\"/ru/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code> <small>(en-US)</small></a></li>\n      </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div id=\"sect1\"></div>\n\n<p class=\"summary\" dir=\"ltr\" id=\"docs-internal-guid-22bb55aa-d69e-e8ef-cbc6-aafea272f684\">WebAssembly – это новый открытый формат байт-кода, исполняемого современными браузерами. Он позволяет переносить код, написанный на таких языках как C, C++, C#, Rust, в низкоуровневые ассемблерные инструкции и использовать его в сети. Формат имеет компактные размеры, высокую производительность, близкую к нативной, и может одновременно работать с  JavaScript.</p>"}},{"type":"prose","value":{"id":"в_двух_словах","title":"В двух словах","isH3":false,"content":"<p dir=\"ltr\">WebAssembly оказывает огромное влияние на веб-платформу — он предоставляет способ исполнения кода, написанного на различных языках, в сети, со скоростью близкой к нативной, чего ранее невозможно было достичь.</p>\n\n<p dir=\"ltr\">WebAssembly разработан для дополнения JavaScript – используя WebAssembly JavaScript API вы можете загружать модули WebAssembly в приложения JavaScript и обеспечивать взаимодействие между ними, используя общие функции. Такой подход позволяет вам получить производительность и мощность WebAssembly, а также выразительность и гибкость JavaScript в ваших приложениях, даже если вы не знаете как писать код WebAssembly, а используете готовые модули.</p>\n\n<p dir=\"ltr\">И что ещё лучше, так это то, что WebAssembly разрабатывается как веб-стандарт <a href=\"https://www.w3.org/wasm/\" class=\"external\" rel=\" noopener\">W3C WebAssembly Working Group</a> и <a href=\"https://www.w3.org/community/webassembly/\" class=\"external\" rel=\" noopener\">Community Group</a> при активном участии основных производителей браузеров.</p>\n\n<div class=\"row topicpage-table\" id=\"sect2\">\n<div class=\"section\" id=\"sect3\">\n<h2 dir=\"ltr\" id=\"руководства\">Руководства</h2>\n\n<dl>\n <dt id=\"основы_webassembly\"><a href=\"/ru/docs/WebAssembly/Concepts\">Основы WebAssembly</a></dt>\n <dd>Прежде всего, начните с чтения общего описания WebAssembly - что это такое, чем это может быть полезно, почему он подходит для веб-платформы и как его использовать.</dd>\n <dt id=\"компиляция_кода_cc_в_webassembly\"><a href=\"/en-US/docs/WebAssembly/C_to_wasm\">Компиляция кода C/C++ в WebAssembly</a></dt>\n <dd>После того как вы написали код на C / C ++, вы можете скомпилировать его в .wasm, например, с помощью инструмента <a href=\"/en-US/docs/Mozilla/Projects/Emscripten/\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">Emscripten</a>. Давайте посмотрим, как это работает.</dd>\n <dt id=\"компиляция_существующего_кода_c_в_webassembly\"><a href=\"/en-US/docs/WebAssembly/existing_C_to_wasm\">Компиляция существующего кода C в WebAssembly</a></dt>\n <dd>Главное, что позволяет WebAssembly, это использование огромного множества разнообразных и проверенных временем библиотек, написанных на языке C, в сети.</dd>\n <dt id=\"загрузка_и_запуск_кода_webassembly\"><a href=\"/ru/docs/WebAssembly/Loading_and_running\">Загрузка и запуск кода WebAssembly</a></dt>\n <dd>После того, как у вас появился .wasm, эта статья расскажет, как из него получить, скомпилировать и создать экземпляр модуля, совмещая <a href=\"/en-US/docs/WebAssembly/JavaScript_interface\">WebAssembly JavaScript API</a> c <a href=\"/en-US/docs/Web/API/Fetch_API\">Fetch</a> или <a href=\"/en-US/docs/Web/API/XMLHttpRequest\">XHR</a> API.</dd>\n <dt id=\"кеширование_скомпилированных_модулей_webassembly\"><a href=\"/en-US/docs/WebAssembly/Caching_modules\">Кеширование скомпилированных модулей WebAssembly</a></dt>\n <dd>Кеширование больших модулей WebAssembly на клиенте полезно для повышения скорости запуска приложений. В этой статье объясняется, как это сделать с помощью <a href=\"/en-US/docs/Web/API/IndexedDB_API\">IndexedDB</a>.</dd>\n <dt id=\"использование_webassembly_javascript_api\"><a href=\"/ru/docs/WebAssembly/Using_the_JavaScript_API\">Использование WebAssembly JavaScript API</a></dt>\n <dd>После того, как вы загрузили модуль .wasm, вы захотите его использовать. В этой статье мы покажем вам, как использовать WebAssembly через WebAssembly JavaScript API.</dd>\n <dt id=\"экспортируемые_функции_webassembly\"><a href=\"/en-US/docs/WebAssembly/Exported_functions\">Экспортируемые функции WebAssembly</a></dt>\n <dd>Экспортируемые функции WebAssembly — это функции нативного модуля, доступные в JavaScript, которые позволяют вызывать код WebAssembly из JavaScript. В этой статье описывается, что они из себя представляют.</dd>\n <dt id=\"описание_текстового_формата_webassembly\"><a href=\"/ru/docs/WebAssembly/Understanding_the_text_format\">Описание текстового формата WebAssembly</a></dt>\n <dd>Эта статья описывает текстовый формат WebAssembly. Это низкоуровневое текстовое представления модулей .wasm используемое в инструментах разработчика во время отладки.</dd>\n <dt id=\"перевод_из_текстового_формата_webassembly_в_wasm\"><a href=\"/en-US/docs/WebAssembly/Text_format_to_wasm\">Перевод из текстового формата WebAssembly в wasm</a></dt>\n <dd>Эта статья содержит руководство по переводу модулей WebAssembly, написанных в текстовом формате, в двоичный файл .wasm.</dd>\n</dl>\n</div>\n\n<div class=\"section\" id=\"sect4\">\n<h2 dir=\"ltr\" id=\"ссылки_на_api\">Ссылки на API</h2>\n\n<dl>\n <dt id=\"webassembly\"><a href=\"/ru/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></dt>\n <dd>Этот объект является пространством имён для всех функций, связанных с WebAssembly.</dd>\n <dt id=\"webassembly.module_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module()</code> <small>(en-US)</small></a></dt>\n <dd>Объект <code>WebAssembly.Module</code> содержит не контролируемый WebAssembly код, который уже скомпилирован браузером и может эффективно использоваться совместно с<a href=\"/en-US/docs/Web/API/Worker/postMessage\"> Workers</a>, <a href=\"/en-US/docs/WebAssembly/Caching_modules\">кешироваться в IndexedDB</a>, и иметь несколько экземпляров.</dd>\n <dt id=\"webassembly.instance_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance()</code> <small>(en-US)</small></a></dt>\n <dd>Объект <code>WebAssembly.Instance</code> это контролируемый, исполняемый экземпляр <code>Module</code>.  <code>Instance</code> содержит все  <a href=\"/en-US/docs/WebAssembly/Exported_functions\">экспортированные функции WebAssembly</a>, которые позволяют вызывать код WebAssembly из JavaScript.</dd>\n <dt id=\"webassembly.instantiatestreaming_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/instantiateStreaming\"><code>WebAssembly.instantiateStreaming()</code> <small>(en-US)</small></a></dt>\n <dd>Функция <code>WebAssembly.instantiateStreaming()</code> является основной для компиляции и создания экземпляра кода WebAssembly, возвращающая одновременно <code>Module</code> и <code>Instance</code>.</dd>\n <dt id=\"webassembly.memory_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory()</code> <small>(en-US)</small></a></dt>\n <dd><code>WebAssembly.Memory</code> это изменяемый <a href=\"/ru/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> содержащий в себе данные не имеющие типа к которым обращается <code>Instance</code>.</dd>\n <dt id=\"webassembly.table\"><a href=\"/ru/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table()</code></a></dt>\n <dd><code>WebAssembly.Table</code> объект является изменяемым типизированным массивом значений, таких как ссылки на функции, которые доступны <code>Instance</code>.</dd>\n <dt id=\"webassembly.compileerror_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError()</code> <small>(en-US)</small></a></dt>\n <dd>Создаёт новый WebAssembly <code>CompileError</code> объект.</dd>\n <dt id=\"webassembly.linkerror_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError()</code> <small>(en-US)</small></a></dt>\n <dd>Создаёт новый WebAssembly <code>LinkError</code> объект.</dd>\n <dt id=\"webassembly.runtimeerror_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError()</code> <small>(en-US)</small></a></dt>\n <dd>Создаёт новый WebAssembly <code>RuntimeError</code> объект.</dd>\n</dl>\n</div>\n</div>"}},{"type":"prose","value":{"id":"примеры","title":"Примеры","isH3":false,"content":"<ul dir=\"ltr\">\n <li><a href=\"https://github.com/JasonWeathersby/WASMSobel\" class=\"external\" rel=\" noopener\">WASMSobel</a></li>\n <li>Больше примеров вы можете найти в нашем репозитории <a href=\"https://github.com/mdn/webassembly-examples/\" class=\"external\" rel=\" noopener\">webassembly-examples</a>.</li>\n</ul>"}},{"type":"prose","value":{"id":"спецификация","title":"Спецификация","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>Specification</th>\n      <th>Status</th>\n      <th>Comment</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://webassembly.github.io/spec/js-api/\" hreflang=\"en\" lang=\"en\" class=\"external\" title=\"Спецификация 'WebAssembly JavaScript Interface'\" rel=\" noopener\">WebAssembly JavaScript Interface</a></td>\n      <td><span class=\"spec-wd\">Рабочий черновик</span></td>\n      <td>Initial draft definition of the JavaScript API.</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"browser_compatibility","value":{"title":"Совместимость с браузерами","id":"browser_compatibility","isH3":false,"query":"javascript.builtins.WebAssembly","dataURL":"/ru/docs/WebAssembly/bcd.json"}},{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p></p><p></p>"}},{"type":"prose","value":{"id":"смотрите_также","title":"Смотрите также","isH3":false,"content":"<ul dir=\"ltr\">\n <li><a href=\"https://research.mozilla.org/webassembly/\" class=\"external\" rel=\" noopener\">WebAssembly on Mozilla Research</a></li>\n <li><a href=\"http://webassembly.org/\" class=\"external\" rel=\" noopener\">webassembly.org</a></li>\n <li><a href=\"https://hacks.mozilla.org/category/webassembly/\" class=\"external\" rel=\" noopener\">WebAssembly articles on Mozilla Hacks blog</a></li>\n <li><a href=\"https://www.w3.org/community/webassembly/\" class=\"external\" rel=\" noopener\">W3C WebAssembly Community Group</a></li>\n <li><a href=\"/en-US/docs/Web/HTTP/Headers/Large-Allocation\">Large-Allocation HTTP header</a></li>\n <li><a href=\"https://developers.google.com/web/updates/2018/03/emscripting-a-c-library\" class=\"external\" rel=\" noopener\">Emscripting a C Library to Wasm</a></li>\n</ul>"}}],"toc":[{"text":"В двух словах","id":"в_двух_словах"},{"text":"Примеры","id":"примеры"},{"text":"Спецификация","id":"спецификация"},{"text":"Совместимость с браузерами","id":"browser_compatibility"},{"text":"Смотрите также","id":"смотрите_также"}],"summary":"WebAssembly – это новый открытый формат байт-кода, исполняемого современными браузерами. Он позволяет переносить код, написанный на таких языках как C, C++, C#, Rust, в низкоуровневые ассемблерные инструкции и использовать его в сети. Формат имеет компактные размеры, высокую производительность, близкую к нативной, и может одновременно работать с  JavaScript.","popularity":0.0006,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"WebAssembly","locale":"en-US","native":"English (US)"},{"title":"WebAssembly","locale":"es","native":"Español"},{"title":"WebAssembly","locale":"fr","native":"Français"},{"title":"WebAssembly","locale":"ja","native":"日本語"},{"title":"웹어셈블리","locale":"ko","native":"한국어"},{"title":"WebAssembly","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"WebAssembly","locale":"zh-CN","native":"中文 (简体)"},{"title":"WebAssembly","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ru/webassembly","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/webassembly/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"pageTitle":"WebAssembly | MDN","noIndexing":false}}