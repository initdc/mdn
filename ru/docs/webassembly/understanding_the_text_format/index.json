{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Описание текстового формата WebAssembly","mdn_url":"/ru/docs/WebAssembly/Understanding_the_text_format","locale":"ru","native":"Русский","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"open\"><a href=\"/ru/docs/WebAssembly\"><strong>WebAssembly home page</strong></a>\n  </li><li class=\"toggle\">\n    <details open=\"\">\n      <summary>Tutorials</summary>\n      <ol>\n        <li><a href=\"/ru/docs/WebAssembly/Concepts\">WebAssembly concepts</a></li>\n        <li><a href=\"/ru/docs/WebAssembly/C_to_wasm\">Compiling from C/C++ to WebAssembly</a></li>\n        <li><a href=\"/ru/docs/WebAssembly/Rust_to_wasm\">Compiling from Rust to WebAssembly</a></li>\n        <li><a href=\"/ru/docs/WebAssembly/Using_the_JavaScript_API\">Using the WebAssembly JavaScript API</a></li>\n        <li><a href=\"/ru/docs/WebAssembly/Understanding_the_text_format\">Understanding WebAssembly text format</a></li>\n        <li><a href=\"/ru/docs/WebAssembly/Text_format_to_wasm\">Converting WebAssembly text format to wasm</a></li>\n        <li><a href=\"/ru/docs/WebAssembly/Loading_and_running\">Loading and running WebAssembly code</a></li>\n        <li><a href=\"/ru/docs/WebAssembly/Caching_modules\">Caching compiled WebAssembly modules</a></li>\n        <li><a href=\"/ru/docs/WebAssembly/Exported_functions\">Exported WebAssembly functions</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Object reference</summary>\n      <ol>\n        <li><a href=\"/ru/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code> <small>(en-US)</small></a></li>\n        <li><a href=\"/ru/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code> <small>(en-US)</small></a></li>\n      </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div id=\"sect1\"></div>\n\n<p class=\"summary\">Чтобы люди могли читать и редактировать код WebAssembly, существует текстовое представление двоичного формата wasm. Это промежуточная форма, предназначенная для отображения в текстовых редакторах, средствах разработки браузеров и т. д. В этой статье объясняется, как работает этот текстовый формат с точки зрения синтаксиса, как он связан с байт-кодом, который он представляет и оболочками объектов wasm в JavaScript.</p>\n\n<div class=\"note notecard\" id=\"sect2\">\n<p><strong>Примечание</strong>: Ознакомление с данной статьёй может оказаться излишним, если вы веб-разработчик, который просто хочет загрузить модуль wasm на страницу и использовать его в своём коде (см. <a href=\"/ru/docs/WebAssembly/Using_the_JavaScript_API\">Использование WebAssembly JavaScript API</a>). Эта статья будет наиболее полезной, если вы хотите написать несколько модулей wasm для оптимизации производительности вашей библиотеки JavaScript или создать свой собственный компилятор WebAssembly.</p>\n</div>"}},{"type":"prose","value":{"id":"s-выражения","title":"S-выражения","isH3":false,"content":"<p>Как в двоичном, так и в текстовом форматах основным блоком кода в WebAssembly является модуль. В текстовом формате модуль представлен как одно большое S-выражение. S-выражения - это очень старый и очень простой текстовый формат для представления деревьев. И поэтому мы можем думать о модуле как о дереве узлов, которые описывают структуру модуля и его код. В отличие от абстрактного синтаксического дерева в языке программирования, дерево WebAssembly довольно плоское и состоит в основном из списков инструкций.</p>\n\n<p>Во-первых, давайте посмотрим, как выглядит S-выражение. Каждый узел дерева входит в пару круглых скобок - <code>( ... )</code>. Первая метка в скобках сообщает вам, какой это тип узла, за ним следует разделённый пробелами список атрибутов или дочерних узлов. Давайте рассмотрим, что  означает следующее S-выражение WebAssembly:</p>\n\n<pre class=\"notranslate\">(module (memory 1) (func))</pre>\n\n<p>Это выражение представляет дерево с корневым узлом «module» и двумя дочерними узлами - узлом «memory» с атрибутом «1» и узлом «func». Мы вскоре увидим, что на самом деле означают эти узлы.</p>"}},{"type":"prose","value":{"id":"самый_простой_модуль","title":"Самый простой модуль","isH3":true,"content":"<p>Давайте начнём с самого простого модуля wasm.</p>\n\n<pre class=\"notranslate\">(module)</pre>\n\n<p>Этот модуль полностью пуст, но является допустимым.</p>\n\n<p>Если мы сейчас преобразуем наш модуль в двоичный формат (см. <a href=\"/en-US/docs/WebAssembly/Text_format_to_wasm\">Перевод текстового формата WebAssembly в wasm</a>), мы увидим только 8-байтовый заголовок модуля, описанный в <a href=\"http://webassembly.org/docs/binary-encoding/#high-level-structure\" class=\"external\" rel=\" noopener\">двоичном формате</a>:</p>\n\n<pre class=\"notranslate\">0000000: 0061 736d              ; WASM_BINARY_MAGIC\n0000004: 0100 0000              ; WASM_BINARY_VERSION</pre>"}},{"type":"prose","value":{"id":"добавление_функциональности_в_ваш_модуль","title":"Добавление функциональности в ваш модуль","isH3":true,"content":"<p>Хорошо, это не очень интересно, давайте добавим немного исполняемого кода в этот модуль.</p>\n\n<p>Весь код в модуле сгруппирован в функции, которые имеют следующую структуру псевдокода:</p>\n\n<pre class=\"notranslate\">( func &lt;signature&gt; &lt;locals&gt; &lt;body&gt; )</pre>\n\n<ul>\n <li><strong>signature</strong> объявляет, что функция принимает (параметры) и возвращает (возвращаемые значения).</li>\n <li><strong>locals</strong> похожи на переменные в JavaScript, но с определёнными явными типами.</li>\n <li><strong>body</strong> - это просто линейный список низкоуровневых инструкций.</li>\n</ul>\n\n<p>Несмотря на то, что это S-выражение, оно очень напоминает функцию в других языках.</p>"}},{"type":"prose","value":{"id":"сигнатуры_и_параметры","title":"Сигнатуры и параметры","isH3":false,"content":"<p>Сигнатура - это последовательность объявлений типов параметров, за которыми следует список объявлений возвращаемых типов. Здесь стоит отметить, что:</p>\n\n<ul>\n <li>Отсутствие возвращаемого типа <code>(result)</code> означает, что функция ничего не возвращает.</li>\n <li>В текущей версии WebAssembly может быть не более 1 возвращаемого типа, но <a href=\"https://webassembly.org/docs/future-features#multiple-return\" class=\"external\" rel=\" noopener\">позже это значение будет изменено</a> на любое число.</li>\n</ul>\n\n<p>    Каждый параметр имеет явно объявленный тип; у wasm в настоящее время есть четыре доступных типа:</p>\n\n<ul>\n <li>    <code>i32</code>: 32-разрядное целое число</li>\n <li>    <code>i64</code>: 64-разрядное целое число</li>\n <li>    <code>f32</code>: 32-разрядное число с плавающей точкой</li>\n <li>    <code>f64</code>: 64-разрядное число с плавающей точкой</li>\n</ul>\n\n<p>Один параметр можно записать как <code>(param i32)</code>, а тип возвращаемого значения как <code>(result i32)</code>. Двоичная функция, которая принимает два 32-разрядных целых числа и возвращает 64-разрядное число с плавающей запятой, будет записана следующим образом:</p>\n\n<pre class=\"notranslate\">(func (param i32) (param i32) (result f64) ... )</pre>\n\n<p>После сигнатуры перечисляются локальные переменные с указанием типа, например <code>(local i32)</code>. Параметры в сигнатуре приравниваются к локальным переменным, которые инициализируются значением соответствующего аргумента, переданного вызывающей стороной.</p>"}},{"type":"prose","value":{"id":"получение_и_установка_локальных_переменных_и_параметров_функции","title":"Получение и установка локальных переменных и параметров функции","isH3":false,"content":"<p>И параметры и локальные переменные могут быть прочитаны и записаны в теле функции с помощью инструкций <code>get_local</code> и <code>set_local</code>.</p>\n\n<p>Инструкции <code>get_local</code> и <code>set_local</code> ссылаются по индексу на параметр, который должен быть получен или  установлен: сначала считаются параметры, а затем локальные переменные в порядке их объявления. Объясним это на примере следующей функции:</p>\n\n<pre class=\"notranslate\">(func (param i32) (param f32) (local f64)\n  get_local 0\n  get_local 1\n  get_local 2)</pre>\n\n<p>Инструкция <code>get_local 0</code> получит параметр i32, <code>get_local 1</code> получит параметр f32, а get_local 2 получит локальную переменную local f64.</p>\n\n<p>Использование числовых индексов для ссылки на элементы может сбивать с толку и раздражать, поэтому текстовый формат позволяет присваивать имена параметрам, локальным переменным и большинству других элементов. Для этого нужно просто добавить имя с префиксом символа доллара (<code>$</code>) непосредственно перед объявлением типа.</p>\n\n<p>Таким образом, можно переписать нашу сигнатуру так:</p>\n\n<pre class=\"notranslate\">(func (param $p1 i32) (param $p2 f32) (local $loc f64) …)</pre>\n\n<p>После чего можно было бы написать инструкцию получения <code>get_local $p1</code> вместо <code>get_local 0</code> и т.д. (Обратите внимание, что, когда этот текст преобразуется в двоичный файл, двоичный файл будет содержать только индексы.)</p>"}},{"type":"prose","value":{"id":"стековые_машины","title":"Стековые машины","isH3":false,"content":"<p>Прежде чем мы сможем написать тело функции, мы должны поговорить ещё о <strong>стековых машинах</strong>. Хотя браузер компилирует wasm-код во что-то более эффективное, выполнение его определяется в терминах стековой машины, где основная идея заключается в том, что каждый тип инструкции получает или помещает определённое количество значений <code>i32</code> / <code>i64</code> / <code>f32</code> / <code>f64</code> в стек или из стека.</p>\n\n<p>Например, инструкция <code>get_local</code> предназначена для помещения значения локальной переменной, которое она считала, в стек. А инструкция <code>i32.add</code> получает два значения <code>i32</code> (неявно получает два предыдущих значения, помещённых в стек), вычисляет их сумму и помещает назад в стек результат вычисления <code>i32</code>.</p>\n\n<p>Когда вызывается функция, для неё выделяется пустой стек, который постепенно заполняется и очищается при выполнении инструкций в теле функции. Так, например, после выполнения следующей функции:</p>\n\n<pre class=\"notranslate\">(func (param $p i32)\n  get_local $p\n  get_local $p\n  i32.add)</pre>\n\n<p>Стек будет содержать ровно одно значение <code>i32</code> - результат выполнения выражения ($p + $p), которое обработалось инструкцией <code>i32.add</code>. Возвращаемое значение функции - это  последнее значение, оставленное в стеке.</p>\n\n<p>Правила валидации WebAssembly гарантируют, выполнение следующего: если вы объявляете тип возвращаемого значения функции как <code>(result f32)</code>, то стек должен содержать ровно одно значение типа <code>f32</code> в конце. Если тип результата отсутствует, стек должен быть пустым.</p>"}},{"type":"prose","value":{"id":"тело_функции","title":"Тело функции","isH3":false,"content":"<p>Как упоминалось ранее, тело функции - это просто список инструкций, которые выполняются при вызове функции. Объединяя это с тем, что мы уже изучили, мы можем наконец определить модуль, содержащий простую функцию:</p>\n\n<pre class=\"notranslate\">(module\n  (func (param $lhs i32) (param $rhs i32) (result i32)\n    get_local $lhs\n    get_local $rhs\n    i32.add))</pre>\n\n<p>Эта функция получает два параметра, складывает их вместе и возвращает результат.</p>\n\n<p>Есть ещё много инструкций, которые можно поместить в тело функции. Сейчас мы начнём с простых, а далее вы увидите гораздо больше примеров по мере продвижения. Полный список доступных инструкций смотрите в справочнике по <a href=\"http://webassembly.org/docs/semantics/\" class=\"external\" rel=\" noopener\">семантике webassembly.org</a>.</p>"}},{"type":"prose","value":{"id":"вызов_функции","title":"Вызов функции","isH3":true,"content":"<p>Определение нашей функции само по себе почти ничего не делает - теперь нам нужно её вызвать. Как мы это сделаем? Как и в модуле ES2015, функции wasm должны быть явно экспортированы инструкцией <code>export</code> внутри модуля.</p>\n\n<p>Как и локальные переменные, функции идентифицируются индексом по умолчанию, но для удобства им можно присвоить имя. Давайте это сделаем: сначала добавим имя, которому предшествует знак доллара, сразу после ключевого слова <code>func</code>:</p>\n\n<pre class=\"notranslate\">(func $add … )</pre>\n\n<p>Теперь нам нужно добавить объявление экспорта:</p>\n\n<pre class=\"notranslate\">(export \"add\" (func $add))</pre>\n\n<p>Здесь <code>add</code> - это имя, по которому функция будет идентифицироваться в коде JavaScript, а <code>$add</code> определяет, какая функция внутри модуля WebAssembly будет экспортироваться.</p>\n\n<p>Итак, наш последний вариант модуля (на данный момент) выглядит так:</p>\n\n<pre class=\"notranslate\">(module\n  (func $add (param $lhs i32) (param $rhs i32) (result i32)\n    get_local $lhs\n    get_local $rhs\n    i32.add)\n  (export \"add\" (func $add))\n)</pre>\n\n<p>Если вы хотите собственноручно скомпилировать пример, сохраните ранее написанный модуль в файле с именем <code>add.wat</code>, а затем преобразуйте его в двоичный файл с именем <code>add.wasm</code>, используя wabt (подробности смотрите в разделе <a href=\"/en-US/docs/WebAssembly/Text_format_to_wasm\">Перевод текстового формата WebAssembly в wasm</a>).</p>\n\n<p>Затем мы загрузим наш двоичный файл, скомпилируем, создадим его экземпляр и выполним нашу функцию <code>add</code> в коде JavaScript (теперь нам доступна функция <code>add()</code> в свойстве <code><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Instance/exports\">exports</a></code> экземпляра модуля):</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add.wasm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"3\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<div class=\"note notecard\" id=\"sect3\">\n<p><strong>Примечание</strong>: вы можете найти этот пример на GitHub в файле <a href=\"https://github.com/mdn/webassembly-examples/blob/master/understanding-text-format/add.html\" class=\"external\" rel=\" noopener\">add.html</a> (смотрите также это <a href=\"https://mdn.github.io/webassembly-examples/understanding-text-format/add.html\" class=\"external\" rel=\" noopener\">вживую</a>). Также смотрите <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/instantiateStreaming\"><code>WebAssembly.instantiateStreaming()</code> <small>(en-US)</small></a> для получения более подробной информации о функции создания экземпляра модуля.</p>\n</div>"}},{"type":"prose","value":{"id":"изучение_основ","title":"Изучение основ","isH3":false,"content":"<p>Теперь, когда мы рассмотрели простейшие примеры, давайте перейдём к рассмотрению некоторых более сложных возможностей.</p>"}},{"type":"prose","value":{"id":"вызов_функций_из_других_функций_в_том_же_модуле","title":"Вызов функций из других функций в том же модуле","isH3":true,"content":"<p>Для вызова функции по индексу или имени используется инструкция <code>call</code>. Например, следующий модуль содержит две функции - первая просто возвращает значение <code>42</code>, вторая возвращает сумму результата вызова первой функции и единицы:</p>\n\n<pre class=\"notranslate\">(module\n  (func $getAnswer (result i32)\n    i32.const 42)\n  (func (export \"getAnswerPlus1\") (result i32)\n    call $getAnswer\n    i32.const 1\n    i32.add))</pre>\n\n<div class=\"note notecard\" id=\"sect4\">\n<p><strong>Примечание</strong>: Инструкция <code>i32.const</code> создаёт 32-разрядное целое число и помещает его в стек. Вы можете поменять <code>i32</code> на любой другой доступный тип данных и изменить значение на любое другое (здесь мы установили значение <code>42</code>).</p>\n</div>\n\n<p>В этом примере обратите внимание на секцию объявления экспорта <code>(export “getAnswerPlus1”)</code>, которая находится сразу после объявления второй функции <code>func</code>. Это сокращённый способ объявления, совмещённый с именем функции, которую мы хотим экспортировать.</p>\n\n<p>Функционально это эквивалентно включению отдельного объявления экспорта функции без функции, в любом месте модуля, например:</p>\n\n<pre class=\"notranslate\">(export \"getAnswerPlus1\" (func $functionName))</pre>\n\n<p>Код JavaScript для вызова экспортируемой функции из нашего модуля выглядит так:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'call.wasm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">getAnswerPlus1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"43\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<div class=\"note notecard\" id=\"sect5\">\n<p><strong>Примечание</strong>: вы можете найти этот пример на GitHub как <a href=\"https://github.com/mdn/webassembly-examples/blob/master/understanding-text-format/call.html\" class=\"external\" rel=\" noopener\">call.html</a> (смотрите также <a href=\"https://mdn.github.io/webassembly-examples/understanding-text-format/call.html\" class=\"external\" rel=\" noopener\">вживую</a>). Ещё посмотрите <a href=\"https://github.com/mdn/webassembly-examples/blob/master/wasm-utils.js\" class=\"external\" rel=\" noopener\">wasm-utils.js</a> для метода <code>fetchAndInstantiate()</code>.</p>\n</div>"}},{"type":"prose","value":{"id":"импорт_функций_из_javascript","title":"Импорт функций из JavaScript","isH3":true,"content":"<p>Мы уже видели JavaScript, вызывающий экспортируемые функции модуля WebAssembly, но как насчёт WebAssembly модуля, вызывающего функции JavaScript? WebAssembly не имеет каких либо знаний о внешнем коде JavaScript, но у него есть  способ импорта, который может принимать функции из JavaScript или wasm. Давайте посмотрим на пример:</p>\n\n<pre class=\"notranslate\">(module\n  (import \"console\" \"log\" (func $log (param i32)))\n  (func (export \"logIt\")\n    i32.const 13\n    call $log))</pre>\n\n<p>В инструкции импорта в модуль WebAssembly определено двухуровневое пространство имён, в котором мы указали импортировать функцию <code>log</code> из модуля <code>console</code>. Вы также можете видеть, что экспортируемая функция <code>logIt</code> вызывает импортированную функцию, используя инструкцию <code>call</code>, о которой мы говорили ранее.</p>\n\n<p>Импортируемые функции аналогичны обычным функциям: они имеют сигнатуру, которую WebAssembly проверяет статически, им присваивается индекс (в место которого можно  присвоить имя) и их можно вызвать обычным способом.</p>\n\n<p>Функции JavaScript не имеют понятия сигнатуры, поэтому любую функцию JavaScript можно передать независимо от объявленной сигнатуры импорта. Если модуль объявляет импорт, вызывающая сторона (например метод <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/instantiate\"><code>WebAssembly.instantiate()</code> <small>(en-US)</small></a>) должна передать объект импорта, который должен иметь соответствующее свойство.</p>\n\n<p>Для иллюстрации вышесказанного нам нужен объект (назовём его <code>importObject</code>), в котором  конечное свойство <code>importObject.console.log</code> должно содержать функцию JavaScript.</p>\n\n<p>Код будет выглядеть следующим образом:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> importObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">console</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">log</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nWebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'logger.wasm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> importObject<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  obj<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">logIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<div class=\"note notecard\" id=\"sect6\">\n<p><strong>Примечание</strong>: Этот пример можно найти на GitHub в файле <a href=\"https://github.com/mdn/webassembly-examples/blob/master/understanding-text-format/logger.html\" class=\"external\" rel=\" noopener\">logger.html</a> (смотрите также <a href=\"https://mdn.github.io/webassembly-examples/understanding-text-format/logger.html\" class=\"external\" rel=\" noopener\">вживую</a>).</p>\n</div>"}},{"type":"prose","value":{"id":"определение_глобальных_переменных_webassembly","title":"Определение глобальных переменных WebAssembly","isH3":true,"content":"<p>WebAssembly имеет возможность создавать экземпляры глобальных переменных. Они доступны как в коде JavaScript, так и через импорт / экспорт для одного и более экземпляров <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code> <small>(en-US)</small></a>. Это очень полезная возможность в плане динамического связывания нескольких модулей.</p>\n\n<p>В текстовом формате WebAssembly это выглядит примерно так (смотрите файл <a href=\"https://mdn.github.io/webassembly-examples/js-api-examples/global.html\" class=\"external\" rel=\" noopener\">global.html</a> в нашем репозитории на GitHub; смотрите также <a href=\"https://mdn.github.io/webassembly-examples/js-api-examples/global.html\" class=\"external\" rel=\" noopener\">вживую</a>):</p>\n\n<pre class=\"notranslate\">(module\n   (global $g (import \"js\" \"global\") (mut i32))\n   (func (export \"getGlobal\") (result i32)\n        (get_global $g))\n   (func (export \"incGlobal\")\n        (set_global $g\n            (i32.add (get_global $g) (i32.const 1))))\n)</pre>\n\n<p>Это похоже на то, что мы делали раньше, за исключением того, что мы указываем глобальную переменную с помощью ключевого слова <code>global</code>. Также мы указываем ключевое слово <code>mut</code> вместе с типом данных значения (если хотим, чтобы глобальная переменная была изменяемой).</p>\n\n<p>Чтобы создать эквивалентный код с помощью JavaScript, вы должны использовать конструктор <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global()</code> <small>(en-US)</small></a>:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> global <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebAssembly<span class=\"token punctuation\">.</span>Global</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span><span class=\"token string\">'i32'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">mutable</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>"}},{"type":"prose","value":{"id":"память_webassembly","title":"Память WebAssembly","isH3":true,"content":"<p>Приведённый выше пример - довольно ужасная функция ведения журнала: она печатает только одно целое число! Что если мы хотим записать текстовую строку? Для работы со строками и другими более сложными типами данных WebAssembly предоставляет <strong>линейную память</strong>. Согласно технологии WebAssembly, линейная память - это просто большой массив байтов, который со временем может увеличиваться. WebAssembly код содержит ряд инструкций, наподобие <code>i32.load</code> и <code>i32.store</code> для чтения и записи значений из <a href=\"http://webassembly.org/docs/semantics/#linear-memory\" class=\"external\" rel=\" noopener\">линейной памяти</a>.</p>\n\n<p>Со стороны JavaScript, линейная память как будто находится внутри одного большого (расширяющегося) объекта <a class=\"page-not-created\" title=\"Документация об этом ещё не написана; пожалуйста, поспособствуйте её написанию!\"><code>ArrayBuffer</code></a>.</p>\n\n<p>Таким образом, строка - это просто последовательность байтов где-то внутри этой линейной памяти. Давайте предположим, что мы записали нужную строку байтов в память; как мы передадим эту строку в JavaScript?<br>\n Ключевым моментом является то, что JavaScript может создавать экземпляры(объекты) линейной памяти WebAssembly через конструктор <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory()</code> <small>(en-US)</small></a> и получать доступ к существующему экземпляру памяти (в настоящее время вы можете иметь только один экземпляр памяти на экземпляр модуля), используя соответствующие методы экземпляра модуля. Экземпляр памяти имеет свойство <code><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Memory/buffer\">buffer</a></code>, которое возвращает объект <code>ArrayBuffer</code>, предоставляя всю линейную память модуля.</p>\n\n<p>Объекты памяти могут расширятся с помощью метода <code><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Memory/grow\">Memory.grow()</a></code> из JavaScript. Когда происходит расширение, текущий объект <code>ArrayBuffer</code> не может изменить размер и он отсоединяется. Вместо него создаётся новый объект <code>ArrayBuffer</code>, указывающий на новую, увеличенную память. Пользуясь этими возможностями можно передать строку в  JavaScript, её начальный индекс и её длину в линейной памяти.</p>\n\n<p>Хотя есть много разных способов кодировать длину строки в самой строке (например, как в строках в C); для простоты здесь мы просто передаём смещение и длину в качестве параметров:</p>\n\n<pre class=\"notranslate\">(import \"console\" \"log\" (func $log (param i32) (param i32)))</pre>\n\n<p>На стороне JavaScript, мы можем использовать <a href=\"/en-US/docs/Web/API/TextDecoder\">TextDecoder API</a>, чтобы легко декодировать наши байты в строку JavaScript. (Мы указываем кодировку utf8, хотя поддерживаются и другие кодировки.)</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">consoleLogString</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">offset<span class=\"token punctuation\">,</span> length</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>memory<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> string <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextDecoder</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<p>Последний недостающий фрагмент головоломки - это место, где функция <code>consoleLogString</code> получает доступ к памяти (<code>memory</code>) WebAssembly. WebAssembly даёт нам здесь много гибкости: либо мы можем создать объект <code><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Memory\">Memory</a></code> в коде JavaScript и импортировать его в модуль WebAssembly, или мы можем создать его в модуле WebAssembly и затем экспортировать в  JavaScript.</p>\n\n<p>Для простоты, давайте создадим объект памяти в JavaScript и импортируем его в  WebAssembly модуль. Напишем следующее объявление импорта <code>(import</code>):</p>\n\n<pre class=\"notranslate\">(import \"js\" \"mem\" (memory 1))</pre>\n\n<p>Число <code>1</code> указывает, что импортируемая память должна иметь по крайней мере 1 страницу памяти (WebAssembly определяет страницу как фиксированный блок памяти в 64КБ.)</p>\n\n<p>Давайте взглянем на наш последний вариант модуля, который выводит слово “Hi”. В обычной C программе, мы бы вызывали функцию для выделения памяти для строки. Но так как мы пишем собственную сборку и у нас есть собственная импортируемая память, то мы просто пишем содержание строки в линейную память, используя секцию <code>data</code>. Data-секция во время создания записывает строку байт, начиная с указанного отступа. И она действует также как и <code>.data</code> секция в “родных” форматах для исполнения.</p>\n\n<p>Наш последний вариант модуля выглядит так:</p>\n\n<pre class=\"notranslate\">(module\n  (import \"console\" \"log\" (func $log (param i32 i32)))\n  (import \"js\" \"mem\" (memory 1))\n  (data (i32.const 0) \"Hi\")\n  (func (export \"writeHi\")\n    i32.const 0  ;; pass offset 0 to log\n    i32.const 2  ;; pass length 2 to log\n    call $log))</pre>\n\n<div class=\"note notecard\" id=\"sect7\">\n<p><strong>Примечание</strong>: Обратите внимание, что двойная точка с запятой (<code>;;</code>) позволяет оставлять комментарии в файлах WebAssembly.</p>\n</div>\n\n<p>Теперь из JavaScript мы можем создать и передать объект памяти размером в 1 страницу. Результатом работы этого кода будет вывод “Hi” в консоль:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> memory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebAssembly<span class=\"token punctuation\">.</span>Memory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">initial</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> importObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">console</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">log</span><span class=\"token operator\">:</span> consoleLogString <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">js</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">mem</span><span class=\"token operator\">:</span> memory <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nWebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'logger2.wasm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> importObject<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  obj<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">writeHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<div class=\"note notecard\" id=\"sect8\">\n<p><strong>Примечание</strong>: вы можете найти полный исходный код на GitHub в файле <a href=\"https://github.com/mdn/webassembly-examples/blob/master/understanding-text-format/logger2.html\" class=\"external\" rel=\" noopener\">logger2.html</a> (также смотрите это <a href=\"https://mdn.github.io/webassembly-examples/understanding-text-format/logger2.html\" class=\"external\" rel=\" noopener\">вживую</a>).</p>\n</div>"}},{"type":"prose","value":{"id":"таблицы_webassembly","title":"Таблицы WebAssembly","isH3":true,"content":"<p>Чтобы завершить обзор текстового формата WebAssembly, давайте рассмотрим самую сложную и запутанную часть WebAssembly - <strong>таблицы</strong>. Таблицы - это массивы ссылок изменяемого размера, доступ к которым можно получить по индексу из кода WebAssembly.</p>\n\n<p>Чтобы понять, зачем нужны таблицы, нам нужно сначала обратить внимание, что инструкция <code>call</code>, которую мы видели ранее (см. <a href=\"#вызов_функций_из_других_функций_в_том_же_модуле\">Вызов функций из других функций в том же модуле</a>), принимает статический индекс функции и может вызывать только определённую функцию. Но что, если вызываемый элемент будет значением, установленным во время выполнения?</p>\n\n<ul>\n <li>    В JavaScript это делается постоянно: функции являются ссылочными значениями.</li>\n <li>    В C/C++ это делается с помощью указателей на функции.</li>\n <li>    В C++ это делается с помощью виртуальных функций.</li>\n</ul>\n\n<p>Для того чтобы сделать это в WebAssembly нужен был отдельный тип инструкции вызова.  Поэтому мы создали инструкцию <code>call_indirect</code>, которая принимает операнд динамической функции. Проблема в том, что типы данных, которые мы должны использовать в операндах в WebAssembly, в настоящее время такие: <code>i32</code> / <code>i64</code> / <code>f32</code> / <code>f64</code>.</p>\n\n<p>Для WebAssembly можно было бы создать тип инструкции вызова  <code>anyfunc</code> («любой», потому что эта инструкция смогла вызвать функции любой сигнатуры), но, к сожалению, операнд этого типа не может быть сохранён в линейной памяти по соображениям безопасности. Линейная память представляет содержимое хранимых значений в виде незащищённых байтов, и это позволяет содержимому wasm произвольно читать и изменять незащищённые адреса функций, что недопустимо для веб.</p>\n\n<p>Решением стало следующее. Хранить ссылки на функции в таблице и передавать вместо них индексы таблицы, которые являются просто значениями <code>i32</code>. Поэтому операндом инструкции <code>call_indirect</code> может выступить простое значение индекса <code>i32</code>.</p>\n\n<h4 id=\"определение_таблицы_в_wasm\">Определение таблицы в wasm</h4>\n\n<p>Так как же разместить функции wasm в нашей таблице? Подобно тому, как секции <code>data</code> могут использоваться для инициализации областей линейной памяти байтами, секции <code>elem</code>  могут использоваться для инициализации областей таблиц с функциями:</p>\n\n<pre class=\"notranslate\">(module\n  (table 2 anyfunc)\n  (elem (i32.const 0) $f1 $f2)\n  (func $f1 (result i32)\n    i32.const 42)\n  (func $f2 (result i32)\n    i32.const 13)\n  ...\n)</pre>\n\n<ul>\n <li>\n  <p>В <code>(table 2 anyfunc)</code>, 2 - это начальный размер таблицы (это означает, что она будет хранить две ссылки), а объявление <code>anyfunc</code> означает, что типом элемента этих ссылок является «функция с любой сигнатурой». В текущей версии WebAssembly, это единственный допустимый тип атрибута, но в будущем будет добавлено больше.</p>\n </li>\n <li>\n  <p>Секции функций <code>(func) </code>- это обычные объявления функций модуля wasm. Это те функции, на которые мы будем ссылаться в нашей таблице (каждая из них просто возвращает постоянное значение). Обратите внимание, что порядок объявления секций не имеет значения - вы можете объявить свои функции где угодно и по-прежнему ссылаться на них в секции <code>elem</code>.</p>\n </li>\n <li>\n  <p>Секция <code>elem</code> - это список функций, на которые ссылается таблица, в том порядке, в котором они указаны. Здесь можно перечислить любое количество функций, включая их дубликаты.</p>\n </li>\n <li>\n  <p>Значение <code>(i32.const 0)</code> внутри секции <code>elem</code> является смещением - его необходимо объявить в начале секции и указать, по какому индексу в таблице ссылок начинают заполняться ссылки на функции. Здесь мы указали 0, а размер таблицы указали как 2 (см. выше), поэтому мы можем заполнить две ссылки на индексы 0 и 1. Если бы мы захотели записать  наши ссылки со смещением в 1, то нам нужно было бы написать <code>(i32.const 1)</code>, а размер таблицы должен был быть равен 3.</p>\n </li>\n</ul>\n\n<div class=\"note notecard\" id=\"sect9\">\n<p><strong>Примечание</strong>: Неинициализированным элементам присваивается значение вызова по умолчанию.</p>\n</div>\n\n<p>В JavaScript эквивалентный код для создания такого экземпляра таблицы ссылок будет выглядеть примерно так:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// table section</span>\n  <span class=\"token keyword\">var</span> tbl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebAssembly<span class=\"token punctuation\">.</span>Table</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">initial</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">element</span><span class=\"token operator\">:</span><span class=\"token string\">\"anyfunc\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// function sections:</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">f1</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> … <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">f2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> … <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// elem section</span>\n  tbl<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> f1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  tbl<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> f2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<h4 id=\"использование_таблицы\">Использование таблицы</h4>\n\n<p>Мы определили таблицу, которую нам нужно как-то использовать. Для этого добавим следующую секцию кода:</p>\n\n<pre class=\"notranslate\">(type $return_i32 (func (result i32))) ;; if this was f32, type checking would fail\n(func (export \"callByIndex\") (param $i i32) (result i32)\n  get_local $i\n  call_indirect (type $return_i32))</pre>\n\n<ul>\n <li>Секция <code>(type $return_i32 (func (result i32)))</code> определяет тип с заданным именем <code>$return_i32</code>. Этот тип используется при выполнении проверки сигнатуры функции в таблице функций. Здесь мы указываем, что ссылки должны быть функциями, возвращаемое значение которых должно быть с типом <code>i32</code>.</li>\n <li>Далее мы определяем экспортируемую функцию с именем <code>callByIndex</code>. Для единственного  параметра функции задан тип <code>i32</code>, которому присвоено имя <code>$i</code>.</li>\n <li>Внутри функции мы помещаем одно значение в стек - любое значение, переданное в качестве параметра <code>$i</code> экспортируемой функции.</li>\n <li>Наконец, мы используем инструкцию <code>call_indirect</code> для вызова функции из таблицы - она ​​неявно получает значение <code>$i</code> из стека. Конечным результатом будет вызов функции из таблицы с индексом, указанным в <code>$i</code>.</li>\n</ul>\n\n<p>Вы также можете объявить параметр <code>call_indirect</code> явно во время вызова инструкции, а не до него (неявным получением из стека), например так:</p>\n\n<pre class=\"notranslate\">(call_indirect (type $return_i32) (get_local $i))</pre>\n\n<p>На языке высокого уровня, таком как JavaScript эти же действия вы можете представить в виде манипуляций с массивом (или, скорее, с объектом), содержащим функции. Псевдокод будет выглядеть примерно так: <code>tbl[i]()</code>.</p>\n\n<p>Итак, вернёмся к проверке типов. Так как в коде WebAssembly проверяются типы, а атрибут <code>anyfunc</code> означает “сигнатура любой функции\", мы должны предоставить предполагаемую сигнатуру в месте вызова, поэтому мы включаем тип с именем <code>$return_i32</code>, чтобы сообщить программе, что ожидается функция, возвращающая значение с типом <code>i32</code>. Если вызываемая функция не имеет соответствующей сигнатуры (скажем, вместо неё возвращается <code>f32</code>), выбросится исключение <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code> <small>(en-US)</small></a>.</p>\n\n<p>Так как инструкция <code>call_indirect</code> связывается с таблицей, с которой мы вызываем функцию? Ответ заключается в том, что на данный момент для каждого экземпляра модуля разрешена только одна таблица. Поэтому инструкция <code>call_indirect</code> выполняет неявный вызов именно из этой таблицы. В будущем, когда будет разрешено использование нескольких таблиц, нам нужно будет указать идентификатор таблицы, например так:</p>\n\n<pre class=\"notranslate\">call_indirect $my_spicy_table (type $i32_to_void)</pre>\n\n<p>Весь модуль в целом выглядит следующим образом и может быть найден в нашем примере файла <a href=\"https://github.com/mdn/webassembly-examples/blob/master/understanding-text-format/wasm-table.wat\" class=\"external\" rel=\" noopener\">wasm-table.wat</a>:</p>\n\n<pre class=\"notranslate\">(module\n  (table 2 anyfunc)\n  (func $f1 (result i32)\n    i32.const 42)\n  (func $f2 (result i32)\n    i32.const 13)\n  (elem (i32.const 0) $f1 $f2)\n  (type $return_i32 (func (result i32)))\n  (func (export \"callByIndex\") (param $i i32) (result i32)\n    get_local $i\n    call_indirect (type $return_i32))\n)</pre>\n\n<p>Загрузка модуля и использование экспортируемой функции в коде JavaScript будет выглядеть так:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wasm-table.wasm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">callByIndex</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns 42</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">callByIndex</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns 13</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">callByIndex</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns an error, because there is no index position 2 in the table</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<div class=\"note notecard\" id=\"sect10\">\n<p><strong>Примечание</strong>: Этот пример можно найти на GitHub в файле <a href=\"https://github.com/mdn/webassembly-examples/blob/master/understanding-text-format/wasm-table.html\" class=\"external\" rel=\" noopener\">wasm-table.html</a> (смотрите это также <a href=\"https://mdn.github.io/webassembly-examples/understanding-text-format/wasm-table.html\" class=\"external\" rel=\" noopener\">вживую</a>)</p>\n</div>\n\n<div class=\"note notecard\" id=\"sect11\">\n<p><strong>Примечание</strong>: Как и в случае с памятью, таблицы также можно создавать из кода JavaScript (см. <code><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Table\">WebAssembly.Table()</a></code>).</p>\n</div>"}},{"type":"prose","value":{"id":"изменяющиеся_таблицы_и_динамическое_связывание","title":"Изменяющиеся таблицы и динамическое связывание","isH3":true,"content":"<p>Поскольку JavaScript имеет полный доступ к ссылкам на функции, объект таблицы может быть изменён из кода JavaScript с помощью методов <code><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Table/grow\">grow()</a></code>, <code><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Table/get\">get()</a></code> и <code><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Table/set\">set()</a></code>. Когда WebAssembly получит <a href=\"http://webassembly.org/docs/gc/\" class=\"external\" rel=\" noopener\">ссылочные типы</a>, код WebAssembly сможет изменять таблицы самостоятельно с помощью инструкций <code>get_elem</code> / <code>set_elem</code>.</p>\n\n<p>Поскольку таблицы являются изменяемыми, их можно использовать для реализации сложных схем <a href=\"http://webassembly.org/docs/dynamic-linking\" class=\"external\" rel=\" noopener\">динамического связывания</a> во время загрузки и во время выполнения. Когда программа динамически связана, несколько экземпляров могут совместно использовать линейную память и таблицу ссылок. Это похоже на поведение в обычном приложении где несколько скомпилированных <code>.dll</code> совместно используют адресное пространство одного процесса.</p>\n\n<p>Чтобы увидеть это в действии, мы создадим один объект импорта, содержащий объект памяти и объект таблицы. Далее мы передадим этот объект импорта при создании нескольких модулей с помощью метода <code><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/instantiate\">instantiate()</a></code>.</p>\n\n<p>Наши примеры файлов <code>.wat</code> выглядят так:</p>\n\n<p><code>shared0.wat</code>:</p>\n\n<pre class=\"notranslate\">(module\n  (import \"js\" \"memory\" (memory 1))\n  (import \"js\" \"table\" (table 1 anyfunc))\n  (elem (i32.const 0) $shared0func)\n  (func $shared0func (result i32)\n   i32.const 0\n   i32.load)\n)</pre>\n\n<p><code>shared1.wat</code>:</p>\n\n<pre class=\"notranslate\">(module\n  (import \"js\" \"memory\" (memory 1))\n  (import \"js\" \"table\" (table 1 anyfunc))\n  (type $void_to_i32 (func (result i32)))\n  (func (export \"doIt\") (result i32)\n   i32.const 0\n   i32.const 42\n   i32.store  ;; store 42 at address 0\n   i32.const 0\n   call_indirect (type $void_to_i32))\n)</pre>\n\n<p>Они работают следующим образом:</p>\n\n<ol>\n <li>Функция <code>shared0func</code> определена в <code>shared0.wat</code> и сохраняется в нашей импортированной таблице.</li>\n <li>Эта функция создаёт константу, содержащую значение <code>0</code>, затем инструкция <code>i32.load</code> получает значение из импортированной памяти по предоставленному константой индексу. Предоставленный  индекс равен <code>0</code>. Как и другие подобные инструкции, <code>i32.load</code> неявно получает предоставленное значение из стека. Итак, <code>shared0func</code> загружает и возвращает значение, хранящееся в индексе памяти <code>0</code>.</li>\n <li>В <code>shared1.wat</code> мы экспортируем функцию с именем <code>doIt</code> - эта функция размещает в стеке  две константы, содержащие значения <code>0</code> и <code>42</code>. Затем она вызывает инструкцию <code>i32.store</code> для сохранения предоставленного значения по предоставленному индексу в импортированной памяти. Опять же, инструкция неявно получает эти значения из стека. Поэтому в результате <code>doIt</code> сохраняет значение <code>42</code> в индексе памяти <code>0</code>.</li>\n <li>В последней части функции создаётся константа со значением <code>0</code>, затем вызывается  функция с этим индексом (<code>0</code>) из таблицы. Это будет функция <code>shared0func</code> модуля <code>shared0.wat</code>, которая ранее была размещена там с помощью секции <code>elem</code>.</li>\n <li>При вызове shared0func загружает число <code>42</code>, которые мы сохранили в памяти, с помощью ранее указанной инструкции <code>i32.store</code> в модуле <code>shared1.wat</code>.</li>\n</ol>\n\n<div class=\"note notecard\" id=\"sect12\">\n<p><strong>Примечание</strong>: Вышеприведённые выражения неявно извлекают значения из стека, но вместо этого вы можете объявить их явно в вызовах инструкций, например:</p>\n\n<pre class=\"notranslate\">(i32.store (i32.const 0) (i32.const 42))\n(call_indirect (type $void_to_i32) (i32.const 0))</pre>\n</div>\n\n<p>После преобразования текста в модули мы используем файлы <code>shared0.wasm</code> и <code>shared1.wasm</code> в JavaScript с помощью следующего кода:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> importObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">js</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">memory</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebAssembly<span class=\"token punctuation\">.</span>Memory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">initial</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">table</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebAssembly<span class=\"token punctuation\">.</span>Table</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">initial</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">element</span><span class=\"token operator\">:</span> <span class=\"token string\">\"anyfunc\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'shared0.wasm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> importObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'shared1.wasm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> importObj<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">results</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// prints 42</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>Каждый из компилируемых модулей может импортировать общие объекты памяти и таблицы. Таким образом, они могут совместно использовать одну и ту же линейную память и таблицу ссылок.</p>\n\n<div class=\"note notecard\" id=\"sect13\">\n<p><strong>Примечание</strong>: Этот пример можно найти на GitHub в файле <a href=\"https://github.com/mdn/webassembly-examples/blob/master/understanding-text-format/shared-address-space.html\" class=\"external\" rel=\" noopener\">shared-address-space.html</a> (смотрите это также <a href=\"https://mdn.github.io/webassembly-examples/understanding-text-format/shared-address-space.html\" class=\"external\" rel=\" noopener\">вживую</a>).</p>\n</div>"}},{"type":"prose","value":{"id":"резюме","title":"Резюме","isH3":false,"content":"<p>На этом мы завершаем обзор основных компонентов текстового формата WebAssembly и того, как они отображены в WebAssembly JS API.</p>"}},{"type":"prose","value":{"id":"смотрите_также","title":"Смотрите также","isH3":false,"content":"<ul>\n <li><a href=\"http://webassembly.org/docs/semantics\" class=\"external\" rel=\" noopener\">Семантика WebAssembly</a> для информации по всем возможным инструкциям.</li>\n <li><a href=\"https://github.com/WebAssembly/spec/blob/master/interpreter/README.md#s-expression-syntax\" class=\"external\" rel=\" noopener\">Грамматика текстового формата</a>, который реализован в интерпретаторе спецификации.</li>\n</ul>"}}],"toc":[{"text":"S-выражения","id":"s-выражения"},{"text":"Сигнатуры и параметры","id":"сигнатуры_и_параметры"},{"text":"Получение и установка локальных переменных и параметров функции","id":"получение_и_установка_локальных_переменных_и_параметров_функции"},{"text":"Стековые машины","id":"стековые_машины"},{"text":"Тело функции","id":"тело_функции"},{"text":"Изучение основ","id":"изучение_основ"},{"text":"Резюме","id":"резюме"},{"text":"Смотрите также","id":"смотрите_также"}],"summary":"Чтобы люди могли читать и редактировать код WebAssembly, существует текстовое представление двоичного формата wasm. Это промежуточная форма, предназначенная для отображения в текстовых редакторах, средствах разработки браузеров и т. д. В этой статье объясняется, как работает этот текстовый формат с точки зрения синтаксиса, как он связан с байт-кодом, который он представляет и оболочками объектов wasm в JavaScript.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Understanding WebAssembly text format","locale":"en-US","native":"English (US)"},{"title":"WebAssembly テキスト形式の理解","locale":"ja","native":"日本語"},{"title":"Understanding WebAssembly text format","locale":"ko","native":"한국어"},{"title":"Entendendo o formato textual do WebAssembly","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"理解 WebAssembly 文本格式","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ru/webassembly/understanding_the_text_format","github_url":"https://github.com/mdn/translated-content/blob/main/files/ru/webassembly/understanding_the_text_format/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ru/docs/WebAssembly","title":"WebAssembly"},{"uri":"/ru/docs/WebAssembly/Understanding_the_text_format","title":"Описание текстового формата WebAssembly"}],"pageTitle":"Описание текстового формата WebAssembly - WebAssembly | MDN","noIndexing":false}}