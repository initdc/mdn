{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"KumaScript","mdn_url":"/ja/docs/MDN/Tools/KumaScript","locale":"ja","native":"日本語","sidebarHTML":"\n  <ol>\n    <li><a href=\"/ja/docs/MDN/About\">MDN について</a></li>\n    <li class=\"toggle\">\n        <details>\n            <summary>MDN の改善に貢献する</summary>\n            <ol>\n                <li><a href=\"/ja/docs/MDN/Contribute/Getting_started\">MDN を始めよう</a></li>\n                <li><a href=\"/ja/docs/MDN/Contribute\">MDN の改善に貢献する</a></li>\n                <li><a href=\"/ja/docs/MDN/Contribute/Howto\">あなたにできること</a></li>\n                <li><a href=\"/ja/docs/MDN/Contribute/Localize\">MDN でのローカライズ</a></li>\n                <li><a href=\"/ja/docs/MDN/Guidelines\">Guidelines</a></li>\n                <li><a href=\"/ja/docs/MDN/Structures\">文書の構造</a></li>\n             </ol>\n        </details>\n    </li>\n  </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>MDN を動かしている <a href=\"/ja/docs/MDN/Yari\">Yari</a> プラットフォームでは、コンテンツの特定の側面を自動化するために、 <a href=\"https://github.com/mdn/yari/tree/main/kumascript\" class=\"external\" rel=\" noopener\">KumaScript</a> と呼ばれる古くからのテンプレート/マクロシステムがまだ利用可能です。このシステムの使用をいつか中止したいと考えていますが、それまでは MDN はこのシステムに依存しています。この記事では、 KumaScript の使用に関する基本的な情報を提供します。</p>"}},{"type":"prose","value":{"id":"kumascript_とは","title":"KumaScript とは","isH3":true,"content":"<ul>\n  <li>文書間で繰り返し現れるコンテンツの再利用やローカライズを行う手段 (互換性のラベル、セクションナビゲーション、警告バナーなど)。</li>\n  <li>他の文書からコンテンツを引用して文書を構築する手段。</li>\n  <li>他のウェブサイトやサービス (Bugzilla など) からコンテンツを取得して含める手段。</li>\n</ul>"}},{"type":"prose","value":{"id":"kumascript_が持たないもの","title":"KumaScript が持たないもの","isH3":true,"content":"<p>KumaScript は次のことは行いません。</p>\n<ul>\n  <li>フォーム送信を受け付けるような対話型スクリプトには対応していません。</li>\n  <li>データベースやファイルにアクセスしたり、情報を永続的に格納したりする仕組みはありません。</li>\n  <li>ログイン中のユーザー情報に基づくサイトのパーソナライズには対応していません。</li>\n  <li>ユーザー情報にアクセスすることはできず、コンテンツとページのメタデータにのみアクセス可能です。</li>\n</ul>"}},{"type":"prose","value":{"id":"基本","title":"基本","isH3":false,"content":"<p>KumaScript は MDN で<a href=\"https://github.com/mde/ejs\" class=\"external\" rel=\" noopener\">埋め込み JavaScript テンプレート</a>に利用されています。これらのテンプレートは MDN の筆者ならば誰でも文書内で、マクロを使用して呼び出すことができます。</p>\n<p>KumaScript のスクリプトは<em>テンプレート</em>であり、それぞれのテンプレートは Github の <code>mdn/yari</code> リポジトリーの <a href=\"https://github.com/mdn/yari/tree/main/kumascript/macros\" class=\"external\" rel=\" noopener\">macros ディレクトリー</a>に格納されているファイルです。テンプレートは以下のようなものです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> $0<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n  Hello #<span class=\"token operator\">&lt;</span><span class=\"token operator\">%=</span> i <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n</code></pre></div>\n<p>テンプレートの呼び出しには_マクロ*を使用します。これはすべてのページコンテンツのすべてどこでも利用できます。上記のテンプレートを呼び出すと、次のようになります (macros ディレクトリーに <code>hello.ejs</code> というファイル名で保存されている場合)。</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">{{hello(3)}}\n</pre></div>\n<p>マクロの出力は以下のようなものです。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>Hello #0\nHello #1\nHello #2\n</code></pre></div>"}},{"type":"prose","value":{"id":"マクロの構文","title":"マクロの構文","isH3":true,"content":"<p>マクロの呼び出しは、次のような一般的な形を取ります。</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">{{templateName(\"arg0\", \"arg1\", /* …, */ \"argN\")}}\n</pre></div>\n<p>マクロの構文は、以下の規則に基づいて構成されます。</p>\n<ul>\n  <li>マクロの先頭と末尾は <code>{{` と `}}</code> の文字です。</li>\n  <li>このマクロの最初の部分は、テンプレートの名前です。この名前の小文字の値は、 macros ディレクトリーの下にあるファイル名のいずれかの小文字の値と一致する必要があります。</li>\n  <li>テンプレートは引数を受け付けます。括弧内にカンマ区切りで複数の引数を記述することができます。</li>\n  <li>数値以外の引数は引用符で囲む必要があります。数値は囲む必要はありません。</li>\n</ul>\n<h4 id=\"マクロの引数に_json_を用いる\">マクロの引数に JSON を用いる</h4>\n<p>半実験的な機能（動作保証なし）として、以下のように引数が一つだけの場合は、引数に JSON オブジェクトを指定できます。</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">{{templateName({ \"Alpha\": \"one\", \"Beta\": [\"a\", \"b\", \"c\"], \"Foo\": \"https:\\/\\/mozilla.org\\/\" })}}\n</pre></div>\n<p>このマクロからのデータは、テンプレートコード内で <code>$0</code> 引数のオブジェクトとして利用できます（例えば、 <code>$0.Alpha</code>, <code>$0.Beta</code>, <code>$0.Foo</code>）。これにより、引数の単純なリストで実現することが難しい又は不可能な複雑なデータ構造を、マクロ引数で表すことができます。</p>\n<p>なお、この引数の形はとても繊細です。 — 正確に <a href=\"https://json.org/\" class=\"external\" rel=\" noopener\">JSON の構文</a>に従っていなければならず、間違いを犯しやすいエスケープ文字の要件が求められます (例えば、すべてのスラッシュをエスケープするなど)。疑わしい場合は、 <a href=\"https://jsonlint.com/\" class=\"external\" rel=\" noopener\">JSON をバリデーターに掛けてみてください</a>。</p>\n<h4 id=\"_を記述する方法\">\"{{\" を記述する方法</h4>\n<p>\"<code>{{</code>\" という文字の並びはマクロの開始を示すため、実際にページ内で \"<code>{{</code>\" および \"<code>}}</code>\" を使用したい場合は問題になります。おそらく <code>DocumentParsingError</code> メッセージが発生するでしょう。</p>\n<p>この場合、 <code>\\{{</code> のように最初の中括弧をバックスラッシュでエスケープすることができます。</p>"}},{"type":"prose","value":{"id":"テンプレートの構文","title":"テンプレートの構文","isH3":true,"content":"<p>それぞれの KumaScript テンプレートは、 <code>mdn/yari</code> リポジトリーの <a href=\"https://github.com/mdn/yari/tree/main/kumascript/macros\" class=\"external\" rel=\" noopener\">macros ディレクトリー</a>に格納されているファイルです。これらのファイルは GitHub 上の何らかのオープンソースプロジェクトのファイルとして作成したり編集したりします。</p>\n<p>KumaScript テンプレートは、いくつかの簡単な規則で、<a href=\"https://ejs.co\" class=\"external\" rel=\" noopener\">組み込み JavaScript テンプレートエンジン</a>によって処理されます。</p>\n<ul>\n  <li>テンプレート内では、マクロから渡された引数は <code>$0</code>, <code>$1</code>, <code>$2</code>, などのような変数として利用できます。引数のリスト全体は、テンプレート内で変数 <code>arguments</code> として利用できます。</li>\n  <li>多くのテキストは出力として扱われ、出力ストリームに入ります。</li>\n  <li>JavaScript の変数や式は、以下のブロックを用いて出力ストリームに挿入可能です。\n    <ul>\n      <li><code>&lt;%= expr %&gt;</code> — 出力される前に HTML エスケープされた JavaScript の式の値 (<code>&lt;</code> および <code>&gt;</code> は <code>&amp;lt;</code> および <code>&amp;gt;</code> となる)</li>\n      <li><code>&lt;%- expr %&gt;</code> — エスケープされない JavaScript の式の値 (マークアップを動的に構築したり、マークアップを含むことができる他のテンプレートの結果に使用してください)</li>\n      <li>このブロック直下にセミコロンを含めるとエラーとなる。</li>\n    </ul>\n  </li>\n  <li><code>&lt;% %&gt;</code> の間は JavaScript として解釈される。すなわち、ループ、条件文、関数などを含めることが可能。</li>\n  <li><code>&lt;% %&gt;</code> ブロック内は出力ストリームに含まれない。ブロック内の変数などをブロック外で使用する場合は、以下のように <code>&lt;%= %&gt;</code> を用いる。\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> $0<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n  Hello #<span class=\"token operator\">&lt;</span><span class=\"token operator\">%=</span> i <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n</code></pre></div>JavaScriptのコードは <code>&lt;% … %&gt;</code> に含まれており、 <code>%&gt; … &lt;%</code> の間に現れるものは出力されることに注意してください。 JS の <code>for</code> ループは、1つ目の <code>&lt;% %&gt;</code> ブロックで始まり、出力モードに移行して、2つ目の <code>&lt;% %&gt;</code> の JS ブロックで終わらせることができます。\n  </li>\n  <li>EJS の構文の詳細については、<a href=\"https://ejs.co\" class=\"external\" rel=\" noopener\">上流モジュールのドキュメント</a>でご確認ください。</li>\n</ul>"}},{"type":"prose","value":{"id":"高度な機能","title":"高度な機能","isH3":false,"content":"<p>KumaScript には前章までに紹介したもの以外に、高度な機能もあります。</p>"}},{"type":"prose","value":{"id":"環境変数","title":"環境変数","isH3":true,"content":"<p>Wiki が KumaScript サービスを呼び出す際には、KumaScript がテンプレートに変数として利用できるようにする、現在の文書に関するいくつかのコンテキストを渡します。</p>\n<dl>\n  <dt id=\"env.path\"><code>env.path</code></dt>\n  <dd>\n    <p>現在の MDN 文書へのパス</p>\n  </dd>\n  <dt id=\"env.url\"><code>env.url</code></dt>\n  <dd>\n    <p>現在の MDN 文書への絶対 URL</p>\n  </dd>\n  <dt id=\"env.id\"><code>env.id</code></dt>\n  <dd>\n    <p>現在の MDN 文書のユニーク ID</p>\n  </dd>\n  <dt id=\"env.files\"><code>env.files</code></dt>\n  <dd>\n    <p>現在の MDN 文書に添付されているファイルの配列で、配列内の各オブジェクトは、下記の <a href=\"#file_%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88\">File オブジェクト</a>で説明されています。</p>\n  </dd>\n  <dt id=\"env.review_tags\"><code>env.review_tags</code></dt>\n  <dd>\n    <p>記事のレビュータグ配列 (\"technical\"、 \"editorial\"など。)</p>\n  </dd>\n  <dt id=\"env.locale\"><code>env.locale</code></dt>\n  <dd>\n    <p>現在の MDN 文書のロケール</p>\n  </dd>\n  <dt id=\"env.title\"><code>env.title</code></dt>\n  <dd>\n    <p>現在の MDN 文書のタイトル</p>\n  </dd>\n  <dt id=\"env.slug\"><code>env.slug</code></dt>\n  <dd>\n    <p>現在の MDN 文書の URL スラッグ</p>\n  </dd>\n  <dt id=\"env.tags\"><code>env.tags</code></dt>\n  <dd>\n    <p>現在の MDN 文書に付与されたタグの名称のリスト</p>\n  </dd>\n  <dt id=\"env.modified\"><code>env.modified</code></dt>\n  <dd>\n    <p>現在の MDN 文書の最終更新日を示すタイムスタンプ</p>\n  </dd>\n  <dt id=\"env.cache_control\"><code>env.cache_control</code></dt>\n  <dd>\n    <p><code>Cache-Control</code> ヘッダーで、現在の MDN 文書がリクエストされた際に送信されたものであり、キャッシュを無効にするかどうかの判断をするのに便利です</p>\n  </dd>\n</dl>\n<h4 id=\"file_オブジェクト\">File オブジェクト</h4>\n<p>個々の file オブジェクトは以下の様なフィールドを持ちます。</p>\n<dl>\n  <dt id=\"title\"><code>title</code></dt>\n  <dd>\n    <p>添付ファイルのタイトル</p>\n  </dd>\n  <dt id=\"description\"><code>description</code></dt>\n  <dd>\n    <p>現行版の添付ファイルに関する説明</p>\n  </dd>\n  <dt id=\"filename\"><code>filename</code></dt>\n  <dd>\n    <p>添付ファイルのファイル名</p>\n  </dd>\n  <dt id=\"size\"><code>size</code></dt>\n  <dd>\n    <p>添付ファイルのサイズ（※単位 = bytes )</p>\n  </dd>\n  <dt id=\"author\"><code>author</code></dt>\n  <dd>\n    <p>添付ファイルをアップロードした人のユーザ名</p>\n  </dd>\n  <dt id=\"mime\"><code>mime</code></dt>\n  <dd>\n    <p>添付ファイルの MIME type</p>\n  </dd>\n  <dt id=\"url\"><code>url</code></dt>\n  <dd>\n    <p>添付ファイルの URL</p>\n  </dd>\n</dl>\n<h4 id=\"タグリストでの作業\">タグリストでの作業</h4>\n<p>変数 <code>env.tags</code> および <code>env.review_tags</code> がタグの配列を返します。これらを使って作業するには、もちろんたくさんの方法がありますが、ここではいくつかを提案します。</p>\n<h5 id=\"特定のタグが設定されているかどうかの確認\">特定のタグが設定されているかどうかの確認</h5>\n<p>ページに特定のタグが存在するかどうかを調べるには、このようにします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">.</span>tags<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tag\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> −<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// The page has the tag \"tag\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h5 id=\"ページのすべてのタグを反復処理\">ページのすべてのタグを反復処理</h5>\n<p>次のようにして、ページのすべてのタグを反復処理するようにすることもできます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>env<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tag</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// do whatever you need to do, such as:</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// this tag starts with \"a\" - woohoo!</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"api_とモジュール","title":"API とモジュール","isH3":true,"content":"<p>KumaScript は、 KumaScript マクロ用にいくつかの組み込みメソッドと API を提供します。マクロは、 <code>module.exports</code> を使用して新しい API メソッドをエクスポートすることもできます。</p>\n<h4 id=\"組み込みメソッド\">組み込みメソッド</h4>\n<p>この文書は手動で管理されているので、コードとともに古くなってしまう可能性があります。この点を考慮して、<a href=\"https://github.com/mdn/yari/tree/main/kumascript/src/api\" class=\"external\" rel=\" noopener\">KumaScript のソース</a>にある組み込み API の最新状態を常にチェックしましょう。しかし、ここではテンプレートに公開されている便利なメソッドの一部を紹介します。</p>\n<ul>\n  <li><code>md5(string)</code>\n    <ul>\n      <li>: 与えられた文字列の MD5 ダイジェストを16 進で返します。</li>\n    </ul>\n  </li>\n  <li>\n    <code>template(\"name\", [\"arg0\", \"arg1\", …, \"argN\"])</code>\n    <ul>\n      <li>: 指定されたテンプレートを、指定された引数のリストを使って実行し、その結果を返します。</li>\n    </ul>例: <code>&lt;%- template(\"warning\", [\"foo\", \"bar\", \"baz\"]) %&gt;</code>.\n    <code>DOMxRef</code> マクロを使用した例: <code>&lt;%- template(\"DOMxRef\", [\"Event.bubbles\", \"bubbles\"]) %&gt;</code>.\n    これは JavaScript の関数です。ですから、引数が <code>$2</code> のような引数の変数である場合は、引用符で囲まないでください。 <code>&lt;%- template(\"warning\", [$1, $2, \"baz\"]) %&gt;</code> のようにします。コードのブロック内から他のテンプレートを呼び出す必要がある場合は、 <code>&lt;%</code> … <code>%&gt;</code> を使用しないでください。例えば <code>myvar = \"&lt;li&gt;\" + template(\"LXRSearch\", [\"ident\", \"i\", $1]) + \"&lt;/li&gt;\";</code> のようにします。\n  </li>\n  <li><code>require(name)</code>\n    <ul>\n      <li>: 別なテンプレートをモジュールとして読み込みます。すべての出力は無視されます。テンプレート内で <code>module.exports</code> に代入されたものをすべて返します。テンプレート内で、 <code>&lt;% const my_module = require('MyModule'); %&gt;</code> のように使用されます。</li>\n    </ul>\n  </li>\n  <li><code>cacheFn(key, timeout, function_to_cache)</code>\n    <ul>\n      <li>: 指定されたキーとキャッシュ生存時間を使用して、指定された関数の結果をキャッシュします。 <code>env.cache_control</code> の値を尊重し、ログイン中のユーザーが Shift を押しながら更新を押すことで送信される <code>no-cache</code> でキャッシュを無効化します。</li>\n    </ul>\n  </li>\n  <li><code>request</code>\n    <ul>\n      <li>: HTTP リクエストを作成するためのライブラリーである <a href=\"https://github.com/request/request\" class=\"external\" rel=\" noopener\"><code>request/request</code></a> にアクセスします。 KumaScript テンプレート内でこのモジュールを使用するにはあまり使い勝手が良くないので、簡単にするためにモジュール API の中でラップすると良いでしょう。</li>\n    </ul>\n  </li>\n  <li><code>log.debug(string)</code>\n    <ul>\n      <li>: ページ上のスクリプトログにデバッグメッセージを出力します (通常はエラーを表示する大きな赤いボックスです)。</li>\n    </ul>\n  </li>\n</ul>\n<h4 id=\"組み込み_api_モジュール\">組み込み API モジュール</h4>\n<p>環境スクリプトによって自動的に読み込まれ、すべてのテンプレートで利用可能になる一連の組み込み API があます。 MDN が何年も前に依存していた古い DekiScript システムからいくつかの機能を提供しています。</p>\n<p>これらは、テンプレート間で共通の変数やメソッドを共有するために使用されます。</p>\n<ul>\n  <li><code>kuma.*</code> - <a href=\"https://github.com/mdn/yari/blob/main/kumascript/src/api/kuma.js\" class=\"external\" rel=\" noopener\">Kuma</a></li>\n  <li><code>MDN.*</code> - <a href=\"https://github.com/mdn/yari/blob/main/kumascript/src/api/mdn.js\" class=\"external\" rel=\" noopener\">MDN:Common</a></li>\n  <li><code>page.*</code> - <a href=\"https://github.com/mdn/yari/blob/main/kumascript/src/api/page.js\" class=\"external\" rel=\" noopener\">DekiScript:Page</a></li>\n  <li><code>string.*</code> - <a href=\"https://github.com/mdn/yari/blob/main/kumascript/src/api/string.js\" class=\"external\" rel=\" noopener\">DekiScript:String</a></li>\n  <li><code>web.*</code> - <a href=\"https://github.com/mdn/yari/blob/main/kumascript/src/api/web.js\" class=\"external\" rel=\" noopener\">DekiScript:Web</a></li>\n  <li><code>wiki.*</code> - <a href=\"https://github.com/mdn/yari/blob/main/kumascript/src/api/wiki.js\" class=\"external\" rel=\" noopener\">DekiScript:Wiki</a></li>\n</ul>\n<p>他に利用可能な API には以下のようなものがあります。</p>\n<dl>\n  <dt id=\"kuma.inspectobject\"><code>kuma.inspect(object)</code></dt>\n  <dd>\n    <p>任意の JS オブジェクトを文字列として出力します。 <code>log.debug()</code> と共に良く使用します。 <a href=\"https://nodejs.org/api/util.html#util_util_inspect_object_options\" class=\"external\" rel=\" noopener\">node.js の <code>util.inspect()</code></a> も参照してください。</p>\n  </dd>\n  <dt id=\"kuma.htmlescapestring\"><code>kuma.htmlEscape(string)</code></dt>\n  <dd>\n    <p><code>&amp;, &lt;, &gt;, \"</code> の文字を <code>&amp;amp, &amp;lt;, &amp;gt;, &amp;quot;</code> にそれぞれエスケープします。</p>\n  </dd>\n  <dt id=\"kuma.url\"><code>kuma.url</code></dt>\n  <dd>\n    <p><a href=\"https://nodejs.org/api/url.html\" class=\"external\" rel=\" noopener\">node.js の <code>url</code> モジュール</a>も参照してください。</p>\n  </dd>\n  <dt id=\"kuma.fetchfeedurl\"><code>kuma.fetchFeed(url)</code></dt>\n  <dd>\n    <p>RSS フィードを読み取り JS オブジェクトに解釈します。</p>\n  </dd>\n</dl>\n<h4 id=\"モジュールの作成\">モジュールの作成</h4>\n<p>組み込みの <code>require()</code> メソッドを使って、テンプレートをモジュールとして読み込み、テンプレート間で共通の変数やメソッドを共有することができます。モジュールはテンプレートの中で次のように定義できます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n</code></pre></div>\n<p>このテンプレートが macros ディレクトリーに <code>MathLib.ejs</code> として保存されていたとすると、次のように別のテンプレートで使用することができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>\n<span class=\"token keyword\">const</span> math_lib <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MathLib\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\nThe result <span class=\"token keyword\">of</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">%=</span> math_lib<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n</code></pre></div>\n<p>このテンプレートの出力は以下の様になるでしょう。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>The result of 2 + 2 = 4\n</code></pre></div>"}},{"type":"prose","value":{"id":"ヒントと注意点","title":"ヒントと注意点","isH3":false,"content":""}},{"type":"prose","value":{"id":"デバッグ","title":"デバッグ","isH3":true,"content":"<p>デバッグ時に役立つヒントです。 <code>log.debug()</code> メソッドを使うと、テンプレートを実行しているページの上部にあるスクリプトメッセージ領域にテキストを出力することができます。ただし、これらのメッセージはすべてのユーザーが見ることができるため、デバッグが終わったら確実に削除する必要があります。これを使うには、次のようにしてください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span><span class=\"token operator\">-</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Some text goes here\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n</code></pre></div>\n<p>もちろん、役立つのであれば、スクリプトコードを使ってより複雑な出力を作ることもできます。</p>"}},{"type":"prose","value":{"id":"キャッシュ","title":"キャッシュ","isH3":true,"content":"<p>KumaScript テンプレートは、パフォーマンスを向上させるために深くキャッシュされます。ほとんどの場合、これは頻繁に変更されないコンテンツを提供するのに適しています。しかし、ログインしたユーザーがスクリプトの問題に気づいたときに、ページを強制的に再生成するための 2 つのオプションがあります。</p>\n<ul>\n  <li>ブラウザーで再読み込みしてください。これにより、 KumaScript は <code>Cache-Control: max-age=0</code> ヘッダーのリクエストを発行することで、現在のページのコンテンツのキャッシュを無効にします。</li>\n  <li>ブラウザーで Shift を押しながら再読み込みを実行してください。これにより <code>Cache-Control: no-cache</code> ヘッダー付きのリクエストを発行することで、 KumaScript は、現在のページ、および現在のページで使用されているテンプレートやコンテンツのキャッシュを無効にします。</li>\n</ul>"}},{"type":"prose","value":{"id":"クックブック","title":"クックブック","isH3":false,"content":"<p>このセクションでは、MDN で使用されるテンプレートの一般的なパターンの例をリストアップします。これには、古い DekiScript テンプレートと新しい KumaScript の同等品のサンプルがあります。</p>"}},{"type":"prose","value":{"id":"ページ上で使用されているテンプレートを強制的に再読み込みさせる","title":"ページ上で使用されているテンプレートを強制的に再読み込みさせる","isH3":true,"content":"<p>繰り返しになりますが、ページで使用されているテンプレートを編集後に強制的に再読み込みさせるには、Shift を押しながら再読み込みします。再読み込みを使用するだけで、ページのコンテンツが再生成されますが、キャッシュされたテンプレートやインクルードされたコンテンツが使用されます。ページ自体のコンテンツ以外のキャッシュを無効にするには、 Shift を押しながらの再読み込みが必要です。</p>"}},{"type":"prose","value":{"id":"unknown_error_からの回復","title":"\"Unknown Error\" からの回復","isH3":true,"content":"<p>時々、ページ読込時に、次のようなスクリプティングメッセージが表示されることがあります。</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">Kumascript service failed unexpectedly: &lt;class 'httplib.BadStatusLine'&gt;\n</pre></div>\n<p>これはおそらく、 KumaScript サービスの一時的な障害です。ページを更新すると、このエラーは消えるかもしれません。それがうまくいかない場合は、Shift を押しながら再読み込みを試してみてください。何度か試してみてもエラーが消えない場合は、 Mozilla Developer Network に <a href=\"https://bugzilla.mozilla.org/enter_bug.cgi?product=mozilla.org&amp;format=itrequest\" class=\"external\" rel=\" noopener\">IT バグを提出</a>して調査を依頼してください。</p>"}},{"type":"prose","value":{"id":"broken_wiki.languages_マクロ","title":"Broken wiki.languages() マクロ","isH3":true,"content":"<p>いくつかのページで、以下の様なスクリプトエラーメッセージを見かける場合があるでしょう。</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">Syntax error at line 436, column 461: Expected valid JSON object as the parameter of the preceding macro but…\n</pre></div>\n<p>その様なページを編集状態にした場合、ページ下部に以下の様なマクロが見つかるかもしれません。</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">{{ wiki.languages({ \"zh-tw\": \"zh_tw/Core_JavaScript_1.5_教學/JavaScript_概要\", … }) }}\n</pre></div>\n<p>この問題を解決するには、マクロを削除してください。または、情報を温存するために次のように両側の中括弧を HTML コメント <code>&lt;!-- --&gt;</code> で置き換えてください。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token comment\">&lt;!-- wiki.languages({ \"zh-tw\": \"zh_tw/Core_JavaScript_1.5_教學/JavaScript_概要\", ... }) --&gt;</span>\n</code></pre></div>\n<p>Kuma は様々な方法でローカライズに対応しているため、これらのマクロは実際にはもう必要ありません。しかし、ローカライズされたページ間の関係を再検討する必要がある場合に備えて、これらのマクロはそのまま残されています。残念ながら、マイグレーションではいくつかのマクロを正しく変換できなかったようです。</p>"}},{"type":"prose","value":{"id":"ページの言語の取得","title":"ページの言語の取得","isH3":true,"content":"<p>KumaScript では、現在の文書のロケールは環境変数から取得することができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> lang <span class=\"token operator\">=</span> env<span class=\"token punctuation\">.</span>locale<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>変数 <code>env.locale</code> は信頼すべきものであり、すべての文書で定義されています。</p>"}},{"type":"prose","value":{"id":"ページの添付ファイルの内容の読み取り","title":"ページの添付ファイルの内容の読み取り","isH3":true,"content":"<p>以下のように <code>mdn.getFileContent()</code> 関数を用いることで、添付ファイルの内容を読み取ることができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>\n  <span class=\"token keyword\">let</span> contents <span class=\"token operator\">=</span> mdn<span class=\"token punctuation\">.</span><span class=\"token function\">getFileContent</span><span class=\"token punctuation\">(</span>fileUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// do stuff with the contents…</span>\n<span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n</code></pre></div>\n<p>または</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span><span class=\"token operator\">-</span> mdn<span class=\"token punctuation\">.</span><span class=\"token function\">getFileContent</span><span class=\"token punctuation\">(</span>fileObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n</code></pre></div>\n<p>つまり、読み込むファイルのURLを指定する場合と、ファイルオブジェクトとして指定する場合があります。あるページのファイルオブジェクトは、配列 <code>env.files</code> を通じてアクセスできます。ですから、例えば、記事に添付された最初のファイルの内容を埋め込むには、次のようにします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span><span class=\"token operator\">-</span> mdn<span class=\"token punctuation\">.</span><span class=\"token function\">getFileContent</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> テキスト以外のファイルのコンテンツをこの方法で埋め込もうとすると、生のコンテンツがテキストとして注入されてしまうので、おそらく避けた方がいいでしょう。これは、テキストの添付ファイルの内容にアクセスするためのものです。</p>\n</div>\n<p>ファイルが見つからない場合は、空の文字列が返されます。現在のところ、空のファイルと存在しないファイルの違いを見分ける方法はありません。しかし、もし空のファイルを wiki に置いているのであれば、それは間違っています。</p>"}},{"type":"prose","value":{"id":"テンプレートのローカライズ","title":"テンプレートのローカライズ","isH3":true,"content":"<p>テンプレートは wiki ページのように翻訳されるわけではなく、 1 つのテンプレートをいくつものロケールで使用することになります。</p>\n<p>テンプレートは <code>mdn.localString()</code> メソッドを用いてローカライズすることができます。このメソッドは、ロケールと文字列の対応表を含むオブジェクトを受け取ります。例えば</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>\n<span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> mdn<span class=\"token punctuation\">.</span><span class=\"token function\">localString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"en-US\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hello world!\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"es\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"¡Hola mundo!\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n</code></pre></div>\n<p>各ロケールは、複数の文字列に対するキーと文字列の対応表を含むオブジェクトを取ることもできます。たとえば、</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>\n<span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> mdn<span class=\"token punctuation\">.</span><span class=\"token function\">localStringMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">'en-US'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">'Complete_beginners_start_here'</span><span class=\"token operator\">:</span> <span class=\"token string\">'Complete beginners start here!'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'Getting_started_with_the_web'</span><span class=\"token operator\">:</span> <span class=\"token string\">'Getting started with the web'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">'de'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">'Complete_beginners_start_here'</span><span class=\"token operator\">:</span> <span class=\"token string\">'Anfänger starten hier!'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'Getting_started_with_the_web'</span><span class=\"token operator\">:</span> <span class=\"token string\">'Lernen Sie das Internet kennen'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">'fr'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">'Complete_beginners_start_here'</span><span class=\"token operator\">:</span> <span class=\"token string\">'Bienvenue aux débutants !'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'Getting_started_with_the_web'</span><span class=\"token operator\">:</span> <span class=\"token string\">'Commencer avec le Web'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n</code></pre></div>\n<p><code>mdn.localString()</code> 関数は適切なロケールの文字列を自動的に読み込みます。あるロケールの文字列が見つからない場合、その文字列は <code>en-US</code> で代替されます。 例えば、</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>\n<span class=\"token keyword\">const</span> s_title <span class=\"token operator\">=</span> mdn<span class=\"token punctuation\">.</span><span class=\"token function\">localString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"en-US\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Firefox for Developers\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"de\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Firefox für Entwickler\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"es\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Firefox para desarrolladores\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> mdn<span class=\"token punctuation\">.</span><span class=\"token function\">localString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"en-US\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"hello\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"goodbye\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Goodbye!\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"de\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"hello\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hallo!\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"goodbye\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Auf Wiedersehen!\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"es\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"hello\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"¡Hola!\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%=</span> s_title <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">/</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">%=</span> body<span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">/</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">%=</span> body<span class=\"token punctuation\">[</span><span class=\"token string\">'goodbye'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n</code></pre></div>\n<p><code>de</code> で表示するとこのようになります。</p>\n<pre class=\"notranslate\">Firefox für Entwickler / Hallo! / Auf Wiedersehen!\n</pre>\n<p><code>es</code> ではこうなります。</p>\n<pre class=\"notranslate\">Firefox para desarrolladores / ¡Hola! / Goodbye!\n</pre>\n<p><code>en-US</code> / <code>ko</code> ではこうなります。</p>\n<pre class=\"notranslate\">Firefox for Developers / Hello! / Goodbye!\n</pre>"}}],"toc":[{"text":"基本","id":"基本"},{"text":"高度な機能","id":"高度な機能"},{"text":"ヒントと注意点","id":"ヒントと注意点"},{"text":"クックブック","id":"クックブック"}],"summary":"MDN を動かしている Yari プラットフォームでは、コンテンツの特定の側面を自動化するために、 KumaScript と呼ばれる古くからのテンプレート/マクロシステムがまだ利用可能です。このシステムの使用をいつか中止したいと考えていますが、それまでは MDN はこのシステムに依存しています。この記事では、 KumaScript の使用に関する基本的な情報を提供します。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"KumaScript","locale":"en-US","native":"English (US)"},{"title":"Introducción a KumaScript","locale":"es","native":"Español"},{"title":"KumaScript","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"KumaScript","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ja/mdn/tools/kumascript","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/mdn/tools/kumascript/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/MDN","title":"MDN Web Docs プロジェクト"},{"uri":"/ja/docs/MDN/Tools","title":"MDN のツール"},{"uri":"/ja/docs/MDN/Tools/KumaScript","title":"KumaScript"}],"pageTitle":"KumaScript - MDN Web Docs プロジェクト | MDN","noIndexing":false}}