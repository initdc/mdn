{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"構文の節","mdn_url":"/ja/docs/MDN/Writing_guidelines/Page_structures/Syntax_sections","locale":"ja","native":"日本語","sidebarHTML":"\n  <ol>\n    <li><a href=\"/ja/docs/MDN/About\">MDN について</a></li>\n    <li class=\"toggle\">\n        <details>\n            <summary>MDN の改善に貢献する</summary>\n            <ol>\n                <li><a href=\"/ja/docs/MDN/Contribute/Getting_started\">MDN を始めよう</a></li>\n                <li><a href=\"/ja/docs/MDN/Contribute\">MDN の改善に貢献する</a></li>\n                <li><a href=\"/ja/docs/MDN/Contribute/Howto\">あなたにできること</a></li>\n                <li><a href=\"/ja/docs/MDN/Contribute/Localize\">MDN でのローカライズ</a></li>\n                <li><a href=\"/ja/docs/MDN/Guidelines\">Guidelines</a></li>\n                <li><a href=\"/ja/docs/MDN/Structures\">文書の構造</a></li>\n             </ol>\n        </details>\n    </li>\n  </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>MDN リファレンスページの構文の節には、機能が持つ正確な構文を定義する構文ボックスがあります（例えば、どのような引数が受け入れられるか、どれがオプションかなど）。この記事では、リファレンス記事の構文ボックスの書き方を説明します。</p>"}},{"type":"prose","value":{"id":"api_リファレンスの構文","title":"API リファレンスの構文","isH3":false,"content":"<p>\n  API リファレンスページの構文の節は手作業で書かれており、文書化される機能によって若干異なる場合があります。\n  この節は、「構文」という見出し（通常はレベル 2 の見出し <code>##</code>）で始まり、リファレンスページの一番上（導入部分のすぐ下）に記述する必要があります。\n  見出しの下にはその機能の正確な構文を示すコードブロックがあり、コードフェンス <code>``` [markup-language]</code> クラスを使って区分けされています。\n</p>\n<p>以下の例では典型的な構文セクション（JavaScript 関数）の Markdown コードを示しています。</p>\n<pre class=\"notranslate\">## 構文\n\n```js\nslice()\nslice(start)\nslice(start, end)\n```\n</pre>"}},{"type":"prose","value":{"id":"全般的なスタイル規則","title":"全般的なスタイル規則","isH3":true,"content":"<p>構文ブロック内をマークアップするために従うべき規則がいくつかあります。</p>\n<ul>\n  <li>行をセミコロン <code>;</code> で終わらせ<strong>ない</strong>でください。 構文の節は、実行可能なコードを表示するためのものではありません。だから、セミコロンを表示するのは意味がありません。</li>\n  <li>構文ブロック内で（または MDN のコードサンプルブロック内でも） &lt;code&gt; を使用し<strong>ない</strong>でください。一般的に役に立たないだけでなく、マークアップはこれを必要としないので、これを含むと見た目の通りにレンダリングされません。</li>\n  <li>関数と引数のみを指定してください。以下、「修正」した例を示します。\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//responseStr = element.querySelector(selector);</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// const observer = new IntersectionObserver(callback, options);</span>\n</code></pre></div>\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"コンストラクターやメソッドの場合","title":"コンストラクターやメソッドの場合","isH3":true,"content":"<h4 id=\"構文ブロック\">構文ブロック</h4>\n<p>構文ブロックは、次のように始めてください（<a href=\"/ja/docs/Web/API/IntersectionObserver/IntersectionObserver\" title=\"IntersectionObserver constructor\"><code>IntersectionObserver constructor</code></a> ページを参照）。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>または、次のようにします（<a href=\"/ja/docs/Web/API/Document/hasStorageAccess\"><code>Document.hasStorageAccess</code></a> を参照）。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">hasStorageAccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h5 id=\"オプション引数は複数行で\">オプション引数は複数行で</h5>\n<p>多くの異なる方法で使用することができるメソッドは、複数の行に展開し、利用可能な変化形をすべて表示する必要があります。</p>\n<p>各オプションはそれ自身の行に記述し、各オプションのコメントと代入は省略する必要があります。例えば、 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\"><code>Array.prototype.slice()</code></a> は 2 つのオプションの引数を持っており、以下のように文書化されます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">)</span>\n<span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>同様に、 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage\"><code>CanvasRenderingContext2D.drawImage</code> <small>(en-US)</small></a> の場合です。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> dx<span class=\"token punctuation\">,</span> dy<span class=\"token punctuation\">)</span>\n<span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> dx<span class=\"token punctuation\">,</span> dy<span class=\"token punctuation\">,</span> dWidth<span class=\"token punctuation\">,</span> dHeight<span class=\"token punctuation\">)</span>\n<span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> sx<span class=\"token punctuation\">,</span> sy<span class=\"token punctuation\">,</span> sWidth<span class=\"token punctuation\">,</span> sHeight<span class=\"token punctuation\">,</span> dx<span class=\"token punctuation\">,</span> dy<span class=\"token punctuation\">,</span> dWidth<span class=\"token punctuation\">,</span> dHeight<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>同様に、 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> コンストラクターの場合です。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>dateString<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">,</span> monthIndex<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">,</span> monthIndex<span class=\"token punctuation\">,</span> day<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">,</span> monthIndex<span class=\"token punctuation\">,</span> day<span class=\"token punctuation\">,</span> hours<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">,</span> monthIndex<span class=\"token punctuation\">,</span> day<span class=\"token punctuation\">,</span> hours<span class=\"token punctuation\">,</span> minutes<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">,</span> monthIndex<span class=\"token punctuation\">,</span> day<span class=\"token punctuation\">,</span> hours<span class=\"token punctuation\">,</span> minutes<span class=\"token punctuation\">,</span> seconds<span class=\"token punctuation\">,</span> milliseconds<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h5 id=\"形式文法\">形式文法</h5>\n<p>形式文法記法（<a href=\"https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form\" class=\"external\" rel=\" noopener\">BNF</a> を使用したもの）は構文の節で使用すべきではありません。代わりに<a href=\"#%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3%E5%BC%95%E6%95%B0%E3%81%AF%E8%A4%87%E6%95%B0%E8%A1%8C%E3%81%A7\">前述</a>のような複数行の書式に展開したものを使用してください。</p>\n<p>形式的な記法により、複雑な構文を簡潔に記述することができますが、多くの開発者には馴染みがなく、特定のプログラミング言語で有効な構文と_矛盾する可能性があります。例えば、「<code>[ ]</code>」は「オプション引数」と JavaScript の配列 (<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>) の両方の意味があります。これは以下の <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\"><code>Array.prototype.slice()</code></a> の形式文法で見ることができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>begin<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>有益と思われる特定のケースについては、別な<strong>形式文法</strong>の節で正式な表記を用いて宣言することができます。</p>\n<h5 id=\"構文ブロックは簡潔に\">構文ブロックは簡潔に</h5>\n<p>構文ブロックを簡潔にし、その機能の構文の定義の曖昧さをなくすために — 無関係な構文を含めないでください。例えば、このサイトの多くの場所で、プロミスを説明するために次のような形をよく見かけます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>caches<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Do something with the response</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>しかし、次のものははるかに簡潔で、余計な <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\"><code>Promise.prototype.then()</code></a> メソッド呼び出しを含んでいません。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h5 id=\"コールバックの構文ブロック\">コールバックの構文ブロック</h5>\n<p>コールバック関数を持つメソッドについては、アロー関数、関数、インライン関数の構文を示してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// アロー関数</span>\n<span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* … */</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span>\n<span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentValue<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* … */</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span>\n<span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentValue<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* … */</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// コールバック関数</span>\n<span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>callbackFn<span class=\"token punctuation\">)</span>\n<span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>callbackFn<span class=\"token punctuation\">,</span> thisArg<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// インラインコールバック関数</span>\n<span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* … */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentValue<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* … */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentValue<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">/* … */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentValue<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* … */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> thisArg<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h5 id=\"任意の数の引数を取る構文\">任意の数の引数を取る構文</h5>\n<p>任意の数の引数を受け取るメソッドの場合、構文の節は次のように記述してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>element0<span class=\"token punctuation\">)</span>\n<span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>element0<span class=\"token punctuation\">,</span> element1<span class=\"token punctuation\">)</span>\n<span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>element0<span class=\"token punctuation\">,</span> element1<span class=\"token punctuation\">,</span> <span class=\"token comment\">/* … ,*/</span> elementN<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h4 id=\"引数の項\">引数の項</h4>\n<p>次に、「引数」の項を設置して、それぞれの引数が何であるべきかを説明リストの形で説明してください。複数のメンバーを含むことができるオブジェクトの引数は、入れ子の説明リストで記述し、その中にそれぞれのメンバーが何であるべきかを記述してください。省略可能な引数は、説明する用語の名前の隣に <span class=\"badge inline optional\">省略可</span> マクロでマークしてください。</p>\n<p>リスト内の各引数の名前は <a href=\"/ja/docs/Web/HTML/Element/code\"><code>&lt;code&gt;</code></a> ブロックの中に含めてください。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> その機能が何も引数を取らない場合は、「引数」の項を設置する必要はありませんが、中身を「なし」として設置しても構いません。</p>\n</div>\n<h4 id=\"返値の項\">返値の項</h4>\n<p>その次に、「返値」の項を設置して、コンストラクターやメソッドの返値が何であるかを説明してください。例については前述のリンクを参照して下さい。</p>\n<p>返値がない場合は、下記のテキストを使用してください。</p>\n<p>なし ({{jsxref(\"undefined\")}})。</p>\n<h4 id=\"例外の項\">例外の項</h4>\n<p>最後に、「例外」の項を設置して、コンストラクターやメソッドの呼び出し時に問題が発生した場合にどの例外が発生するかを説明してください。発生する原因としては、引数名の綴りが間違っていたり、間違ったデータ型の値が与えられたり、呼び出された環境に問題があったり (例えば、安全なコンテキストで実行する機能を安全でないコンテキストで実行しようとした場合など)、その他の理由であったりする場合などです。</p>\n<p>メソッドで発生する例外を特定するには、仕様を十分に精査する必要があります。機能がどのように動作するかについて、仕様書の一つ一つの説明を調べると、一般に例外とそれが発生する状況の確実な一覧を得ることができます。</p>\n<p>例外の名前と説明を説明リストに記述してください。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> その機能で発生する例外がない場合は「例外」の項を設置する必要はありませんが、中身を「なし」として設置しても構いません。</p>\n</div>"}},{"type":"prose","value":{"id":"プロパティの場合","title":"プロパティの場合","isH3":true,"content":"<h4 id=\"値の項\">値の項</h4>\n<p>構文ブロックの下に「値」の項を設置する必要があり、そこでプロパティの値を — データ型とその用途について — 説明してください。</p>\n<h4 id=\"例外の項_2\">例外の項</h4>\n<p>プロパティにアクセスする際に例外が発生する可能性がある場合、「例外」の項を設置してそれぞれの例外を説明してください。これは前述のメソッドやコンストラクターの説明と同様のことをしてください。</p>"}},{"type":"prose","value":{"id":"javascript_リファレンスの構文","title":"JavaScript リファレンスの構文","isH3":false,"content":"<p>JavaScript の組み込みオブジェクトのリファレンスページは、 API リファレンスページと同様の基本規則に従います。例えばメソッドやプロパティについてです。多少の違いが見られることがあります。</p>\n<ul>\n  <li>組込みオブジェクトで単一のコンストラクターを持つものは、コンストラクターの構文がオブジェクトのランディングページに含まれていることが良くあります。例えば <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> を参照してください。（<code>Date</code> オブジェクト自身が持つ）静的メソッドは、「メソッド」の下の「Date.prototype メソッド」で記述されていることが分かるでしょう。</li>\n  <li>また、引数も例外もないメソッドは、 JavaScript リファレンスページにこれらの節が全く含まれていないことに気が付くでしょう。例えば <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Date/getDate\"><code>Date.getDate()</code></a> や <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Date/now\"><code>Date.now()</code></a> を参照してください。</li>\n</ul>"}},{"type":"prose","value":{"id":"css_リファレンスの構文","title":"CSS リファレンスの構文","isH3":false,"content":""}},{"type":"prose","value":{"id":"プロパティ","title":"プロパティ","isH3":true,"content":"<p>CSS プロパティページには「構文」の節があり、ふつうはページの先頭にありますが、次第に、機能の典型的な使用方法を示すブロックを含む節や、その機能が何を行うかを説明するライブデモ（例えば <a href=\"/ja/docs/Web/CSS/animation\"><code>animation</code></a> を参照）の下に見られるようになっています。</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> このようにしているのは、 CSS の形式文法が複雑であり、 MDN の読者の多くが必要としておらず、初心者にとってとっつきにくいからです。実際の構文と例が多くの人にとってより有用です。</p>\n</div>\n<p>構文の節の中には、次のような内容が見られるでしょう。</p>\n<h4 id=\"説明文は任意\">説明文は任意</h4>\n<p>CSS プロパティによってはそれ自体が説明的であり、それ以上の説明が本当に必要ない場合があります (例えば <a href=\"/ja/docs/Web/CSS/color\"><code>color</code></a>)。一方、より複雑で、複数の値などを含む構文の順序の説明が必要なものもあります (<a href=\"/ja/docs/Web/CSS/animation\"><code>animation</code></a> を参照)。そのような場合、項が始まる前に追加の説明を加えることができます。</p>\n<h4 id=\"値の項_2\">値の項</h4>\n<p>次に、「値」の項を入れてください。 — これには説明リストが入り、プロパティの値を構成する値の型を説明します。値の型はそれぞれ山括弧で囲み、その値の型を説明する MDN のリファレンスページがあれば、そこへリンクしてください。例えば、 <a href=\"/ja/docs/Web/CSS/border\"><code>border</code></a> プロパティのリファレンスを参照してください。 — これは3つの値の型を参照しており、そのうちの一つ (<a href=\"/ja/docs/Web/CSS/color_value\"><code>&lt;color&gt;</code></a>) だけがリンクになっています。</p>\n<h4 id=\"形式文法_2\">形式文法</h4>\n<p>最後の項、「形式文法」は <a href=\"https://github.com/mdn/data\" class=\"external\" rel=\" noopener\">MDN data リポジトリー</a>の CSS ディレクトリーにあるデータから自動的に生成されます。タイトルの下で <code>CSSSyntax</code> マクロ呼び出しを記述するだけで、残りのことはマクロがやってくれます。</p>\n<p>唯一の問題は、必要なデータが存在することを確認することです。 <a href=\"https://github.com/mdn/data/blob/main/css/properties.json\" class=\"external\" rel=\" noopener\">properties.json</a> ファイルに、文書化しているプロパティの項目が含まれている必要があり、 <a href=\"https://github.com/mdn/data/blob/main/css/types.json\" class=\"external\" rel=\" noopener\">types.json</a> ファイルには、プロパティの値で使用されるすべての値の型の項目が含まれている必要があります。</p>\n<p>これを行うには、 <a href=\"https://github.com/mdn/data\" class=\"external\" rel=\" noopener\">MDN data リポジトリー</a>をフォークし、フォークをローカルにクローンし、新しいブランチに変更を行い、上流のリポジトリーに向けてプルリクエストを送信してください。 <a href=\"/ja/docs/MDN/Writing_guidelines/Page_structures/Compatibility_tables#%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B%E6%BA%96%E5%82%99\">Git の使用についての詳細はこちらにあります</a>。</p>"}},{"type":"prose","value":{"id":"セレクター","title":"セレクター","isH3":true,"content":"<p>セレクターのリファレンスページの「構文」の節は、プロパティページよりもずっと簡潔です。ここには \"Syntax Box\" を使用してスタイル付けされたブロックが 1 つ入り、ここでセレクターの基本的な構文を、単純なキーワードだけ (例えば <a href=\"/ja/docs/Web/CSS/:hover\"><code>:hover</code></a>) または引数を取るより複雑な関数値（例えば <a href=\"/ja/docs/Web/CSS/:not\"><code>:not()</code></a>）のどちらかで示します。引数を構文ブロックの中の別な項目で説明している場合もあります（例えば <a href=\"/ja/docs/Web/CSS/:nth-last-of-type\"><code>:nth-last-of-type()</code></a> を参照してください）。</p>\n<p>このブロックは、 <a href=\"https://github.com/mdn/data\" class=\"external\" rel=\" noopener\">MDN data リポジトリー</a>の CSS ディレクトリにあるデータから自動的に生成されます。題名の下で <code>CSSSyntax</code> マクロ呼び出しを追加するだけで、残りのことはマクロがやってくれます。</p>\n<p>唯一の問題は、必要なデータが存在することを確認することです。 <a href=\"https://github.com/mdn/data/blob/main/css/selectors.json\" class=\"external\" rel=\" noopener\">selectors.json</a> ファイルに、文書化しているセレクターの項目が含まれている必要があります。</p>\n<p>これを行うには、 <a href=\"https://github.com/mdn/data\" class=\"external\" rel=\" noopener\">MDN data リポジトリー</a>をフォークし、フォークをローカルにクローンし、新しいブランチに変更を行い、上流のリポジトリーに向けてプルリクエストを送信してください。 <a href=\"/ja/docs/MDN/Writing_guidelines/Page_structures/Compatibility_tables#%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B%E6%BA%96%E5%82%99\">Git の使用についての詳細はこちらにあります</a>。</p>"}},{"type":"prose","value":{"id":"html_リファレンスの構文","title":"HTML リファレンスの構文","isH3":false,"content":"<p>HTML リファレンスページには「構文」の節がありません。 — 構文は常に要素名を山括弧で囲んだものであるため、必要ないからです。 HTML 要素について主に知っておかなければならないことは、どのような属性を取りうるか、その値は何になるかであり、これは別の「属性」の節で扱います。例としては、 <a href=\"/ja/docs/Web/HTML/Element/ol\"><code>&lt;ol&gt;</code></a> や <a href=\"/ja/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a> をご覧ください。</p>"}},{"type":"prose","value":{"id":"http_リファレンスの構文","title":"HTTP リファレンスの構文","isH3":false,"content":"<p>HTTP リファレンスの構文はすべて手作業で作成され、文書化する HTTP の機能によって異なります。</p>"}},{"type":"prose","value":{"id":"http_ヘッダーcontent-security-policy","title":"HTTP ヘッダー/Content-Security-Policy","isH3":true,"content":"<p>HTTP ヘッダーの構文（および Content-Security-Policy）ページ上で 2 つの節に分けて記述します。 — 「構文」と「ディレクティブ」です。</p>\n<h4 id=\"構文の節\">構文の節</h4>\n<p>「構文」の節は、ヘッダーの構文がどのようなものかを、 \"Syntax Box\" スタイルを使用してスタイル付けされた構文ブロックを用いて、値にどのディレクティブが含まれるか、どのような順番かなどの形式文法を含めて示します。例えば、 <a href=\"/ja/docs/Web/HTTP/Headers/If-None-Match\"><code>If-None-Match</code></a> ヘッダーの構文ブロックは次のようになります。</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">If-None-Match: &lt;etag_value&gt;\nIf-None-Match: &lt;etag_value&gt;, &lt;etag_value&gt;, …\nIf-None-Match: *\n</pre></div>\n<p>ヘッダーによっては個別にリクエストディレクティブ、レスポンスディレクティブ、拡張構文があることがあります。存在する場合、それぞれの項の下にある個別の構文ブロックの中に設置する必要があります。例としては <a href=\"/ja/docs/Web/HTTP/Headers/Cache-Control\"><code>Cache-Control</code></a> をご覧ください。</p>\n<h4 id=\"ディレクティブの節\">ディレクティブの節</h4>\n<p>「ディレクティブ」の節には、構文に現れる可能性があるすべてのディレクティブの名前と解説を記述した説明リストを設定します。</p>"}},{"type":"prose","value":{"id":"http_リクエストメソッド","title":"HTTP リクエストメソッド","isH3":true,"content":"<p>リクエストメソッドの構文は実に単純で、構文ブロックを設置し、 \"Syntax Box\" スタイルを用いてスタイル付けし、どのようにメソッドの構文を構成するかを示すだけです。 <a href=\"/ja/docs/Web/HTTP/Methods/GET\">GET メソッド</a>の構文は次のようになります。</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">GET /index.html\n</pre></div>"}},{"type":"prose","value":{"id":"http_レスポンスステータスコード","title":"HTTP レスポンスステータスコード","isH3":true,"content":"<p>HTTP レスポンスステータスコードの構文も、実に単純です。 — コードと名前を含む構文ブロックです。例えば次のようになります。</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">404 Not Found\n</pre></div>"}},{"type":"prose","value":{"id":"svg_リファレンスの構文","title":"SVG リファレンスの構文","isH3":false,"content":""}},{"type":"prose","value":{"id":"svg_要素","title":"SVG 要素","isH3":true,"content":"<p>SVG 要素に構文の節は存在しません。 — HTML 要素の構文の節と同様です。それぞれの SVG 要素のリファレンスページは、その要素に適用することができる属性の一覧を含みます。例えば <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/SVG/Element/feTile\"><code>&lt;feTile&gt;</code> <small>(en-US)</small></a> を参照してください。</p>"}},{"type":"prose","value":{"id":"svg_属性","title":"SVG 属性","isH3":true,"content":"<p>SVG 属性のリファレンスページにも、構文の節はありません。</p>"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/MDN/Writing_guidelines/Howto/Markdown_in_MDN#example_code_blocks\">MDN での Markdown</a></li>\n</ul>"}}],"toc":[{"text":"API リファレンスの構文","id":"api_リファレンスの構文"},{"text":"JavaScript リファレンスの構文","id":"javascript_リファレンスの構文"},{"text":"CSS リファレンスの構文","id":"css_リファレンスの構文"},{"text":"HTML リファレンスの構文","id":"html_リファレンスの構文"},{"text":"HTTP リファレンスの構文","id":"http_リファレンスの構文"},{"text":"SVG リファレンスの構文","id":"svg_リファレンスの構文"},{"text":"関連情報","id":"関連情報"}],"summary":"MDN リファレンスページの構文の節には、機能が持つ正確な構文を定義する構文ボックスがあります（例えば、どのような引数が受け入れられるか、どれがオプションかなど）。この記事では、リファレンス記事の構文ボックスの書き方を説明します。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Syntax sections","locale":"en-US","native":"English (US)"}],"source":{"folder":"ja/mdn/writing_guidelines/page_structures/syntax_sections","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/mdn/writing_guidelines/page_structures/syntax_sections/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/MDN","title":"MDN Web Docs プロジェクト"},{"uri":"/ja/docs/MDN/Writing_guidelines","title":"執筆ガイドライン"},{"uri":"/ja/docs/MDN/Writing_guidelines/Page_structures","title":"文書の構造"},{"uri":"/ja/docs/MDN/Writing_guidelines/Page_structures/Syntax_sections","title":"構文の節"}],"pageTitle":"構文の節 - MDN Web Docs プロジェクト | MDN","noIndexing":false}}