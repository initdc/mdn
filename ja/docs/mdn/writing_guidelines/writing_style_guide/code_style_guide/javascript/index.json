{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"JavaScript のコード例を整形するためのガイドライン","mdn_url":"/ja/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide/JavaScript","locale":"ja","native":"日本語","sidebarHTML":"\n  <ol>\n    <li><a href=\"/ja/docs/MDN/About\">MDN について</a></li>\n    <li class=\"toggle\">\n        <details>\n            <summary>MDN の改善に貢献する</summary>\n            <ol>\n                <li><a href=\"/ja/docs/MDN/Contribute/Getting_started\">MDN を始めよう</a></li>\n                <li><a href=\"/ja/docs/MDN/Contribute\">MDN の改善に貢献する</a></li>\n                <li><a href=\"/ja/docs/MDN/Contribute/Howto\">あなたにできること</a></li>\n                <li><a href=\"/ja/docs/MDN/Contribute/Localize\">MDN でのローカライズ</a></li>\n                <li><a href=\"/ja/docs/MDN/Guidelines\">Guidelines</a></li>\n                <li><a href=\"/ja/docs/MDN/Structures\">文書の構造</a></li>\n             </ol>\n        </details>\n    </li>\n  </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>以下のガイドラインは、 MDN Web Docs における JavaScript のコード例の書き方について述べています。これは、できるだけ多くの人に理解されるような簡潔な例を書くためのシンプルなリストです。もし、もっと詳しく説明したものが欲しければ、 <a href=\"https://github.com/airbnb/javascript\" class=\"external\" rel=\" noopener\">AirBnB JavaScript Style Guide</a> をお勧めします。これは、私たちのガイドラインと概ね互換性があります。</p>"}},{"type":"prose","value":{"id":"javascript_コード例に関する一般的なガイドライン","title":"JavaScript コード例に関する一般的なガイドライン","isH3":false,"content":""}},{"type":"prose","value":{"id":"構文のスタイル","title":"構文のスタイル","isH3":true,"content":"<ul>\n  <li>\n    JavaScript では展開した構文を使用しており、 JS の各行は改行され、ブロックの開始中括弧はその関連文と同じ行に、終了中括弧は新しい行に配置しています。これは読みやすさを向上させ、また MDN Web Docs での一貫性を保つためです。\n    次のようにしてください。\n    <div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>次のようにしないでください。\n    <div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n  <li>すべての文はセミコロン (\";\") で終わらせてください。私たちは、JavaScript では技術的にオプションであるにもかかわらず、すべてのコードサンプルでセミコロンを必須としていますが、これは、各文の終わりをより明確に、より正確に示すコードにつながると考えるからです。</li>\n  <li>JavaScript では、 構文上で単一引用符が必要な場合は、すべて単一引用符を使用してください。</li>\n</ul>"}},{"type":"prose","value":{"id":"スペース","title":"スペース","isH3":true,"content":"<ul>\n  <li>制御文のキーワード、関数、ループのキーワードとその開始括弧の間には、スペースを入れてください（例: <code>if () { ... }</code> and <code>for (...) { ... }</code>）。</li>\n  <li>このような場合、前項で記述したように、開始括弧と開始中括弧の間にスペースを入れてください。</li>\n  <li>演算子とオペランド、引数などの間にはスペースを入れてください。例えば、次のような場合はスペースを入れた方が読みやすくなります。\n    <div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dayOfWeek <span class=\"token operator\">===</span> <span class=\"token number\">7</span> <span class=\"token operator\">&amp;&amp;</span> weather <span class=\"token operator\">===</span> <span class=\"token string\">'sunny'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">goOnTrip</span><span class=\"token punctuation\">(</span><span class=\"token string\">'beach'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'car'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'ice cream'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bucket and spade'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'beach towel'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n  </li>\n</ul>\n<p>こちらの方が読みにくくなります。</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dayOfWeek<span class=\"token operator\">===</span><span class=\"token number\">7</span><span class=\"token operator\">&amp;&amp;</span>weather<span class=\"token operator\">===</span><span class=\"token string\">'sunny'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">goOnTrip</span><span class=\"token punctuation\">(</span><span class=\"token string\">'beach'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'car'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">'ice cream'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'bucket and spade'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'beach towel'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n  <li>開閉括弧の前後にスペースを入れないでください。例: <code>( myVar )</code> ではなく、<code>(myVar)</code> を使用してください。</li>\n</ul>"}},{"type":"prose","value":{"id":"javascript_のコメント","title":"JavaScript のコメント","isH3":true,"content":"<p>自己文書化されていないコードをコメントする場合は、 JS 形式のコメントを使用してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token comment\">// これは、JavaScript 形式のコメントです</span>\n</code></pre></div>\n<p>コメントは、参照するコードの前に別個の行で記述してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ブラウザーの JS コンソールに文字列 'Hello' を出力する</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 新しい段落を作成し、その中に中身を入れて、 &lt;body&gt; に追加します。</span>\n  <span class=\"token keyword\">let</span> para <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  para<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'My new paragraph'</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>para<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"最新の_javascript_機能","title":"最新の JavaScript 機能","isH3":true,"content":"<p>MDN Web Docs のコード例では、最近のよく対応されている JavaScript の機能（<a href=\"/ja/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">アロー関数</a>、<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise\">プロミス</a>、<a href=\"/ja/docs/Web/JavaScript/Reference/Statements/async_function\"><code>async</code></a>/<a href=\"/ja/docs/Web/JavaScript/Reference/Operators/await\"><code>await</code></a>、<a href=\"/ja/docs/Web/JavaScript/Reference/Statements/let\"><code>let</code></a>/<a href=\"/ja/docs/Web/JavaScript/Reference/Statements/const\"><code>const</code></a>、<a href=\"/ja/docs/Web/JavaScript/Reference/Template_literals\">テンプレートリテラル</a>、<a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">スプレッド構文</a>など）を使用してもかまいません。私たちは、このガイドラインの多くの場所で使用しています。なぜなら、ウェブ業界は一般的に、このような機能が十分に理解できるところまで来ていると考えているからです。そして、まだ使用していない人たちのために、彼らのスキルを進化させる手助けをする役割を果たしたいと思っています。</p>"}},{"type":"prose","value":{"id":"配列","title":"配列","isH3":false,"content":""}},{"type":"prose","value":{"id":"配列の作成","title":"配列の作成","isH3":true,"content":"<p>配列の作成には、コンストラクターではなくリテラルを使用してください。</p>\n<p>このようにしてください。</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">let</span> myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>このようにしないでください。</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">let</span> myArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"項目の追加","title":"項目の追加","isH3":true,"content":"<p>配列に項目を追加する場合は、直接代入ではなく、 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/push\"><code>push()</code></a> を使用してください。次のような配列があったとします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> pets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>次のようにしてください。</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code>pets<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>次のようにしないでください。</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code>pets<span class=\"token punctuation\">[</span>pets<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'cat'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"条件文","title":"条件文","isH3":false,"content":""}},{"type":"prose","value":{"id":"ループ","title":"ループ","isH3":true,"content":"<p><a href=\"/ja/docs/Learn/JavaScript/Building_blocks/Looping_code\">ループ</a>が必要な場合は、利用可能なループ（<a href=\"/ja/docs/Web/JavaScript/Reference/Statements/for\"><code>for</code></a>, <a href=\"/ja/docs/Web/JavaScript/Reference/Statements/for...of\"><code>for...of</code></a>, <a href=\"/ja/docs/Web/JavaScript/Reference/Statements/while\"><code>while</code></a> など）の中から、自由に適切なループを選択してください。</p>\n<ul>\n  <li>ループキーワードとその開始括弧の間には、スペースを入れてください。</li>\n  <li>括弧と開始中括弧の間には、スペースを入れてください。</li>\n  <li><code>for</code>/<code>for...of</code> ループを使用する場合は、初期化子を <code>let</code> キーワードで適切に定義してください。\n    <div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">let</span> cats <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Athena'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Luna'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">of</span> cats<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>以下の例は、スペースや初期化に関する推奨ガイドラインに従ったものではありません。\n    <div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">let</span> cats <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Athena'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Luna'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">of</span> cats<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"switch_文","title":"switch 文","isH3":true,"content":"<p>switch 文はこのように整形してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">let</span> expr <span class=\"token operator\">=</span> <span class=\"token string\">'Papayas'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>expr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'Oranges'</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Oranges are $0.59 a pound.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'Papayas'</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mangoes and papayas are $2.79 a pound.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 期待される出力: \"Mangoes and papayas are $2.79 a pound.\"</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Sorry, we are out of </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>expr<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"制御文","title":"制御文","isH3":false,"content":"<ul>\n  <li>制御文のキーワードとその開始括弧の間には、スペースを入れてください。</li>\n  <li>括弧と開始の中括弧の間にはスペースを入れてください。</li>\n</ul>\n<p>制御文はこのようにきちんとスペースを空けて書いてください。</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>iceCream<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Woo hoo!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>以下の例は、スペースのガイドラインに従ったものではありません。</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>iceCream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Woo hoo!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"エラー処理","title":"エラー処理","isH3":false,"content":"<p>もしプログラムの特定の状態により捕捉できないエラーが発生した場合、実行が停止し、例の有用性が低下する可能性があります。したがって、 <a href=\"/ja/docs/Web/JavaScript/Reference/Statements/try...catch\"><code>try...catch</code></a> ブロックを使用してエラーを捕捉する必要があります。</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"関数","title":"関数","isH3":false,"content":""}},{"type":"prose","value":{"id":"関数の命名","title":"関数の命名","isH3":true,"content":"<p>関数名には lowerCamelCasing を使用し、必要に応じて簡潔で人間が読める意味のある名前を使用してください。</p>\n<p>このようにしてください。</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>このようにしないでください。</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">SayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">notVeryObviousName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"関数の宣言","title":"関数の宣言","isH3":true,"content":"<ul>\n  <li>関数名とその開始括弧の間にはスペースを入れないでください。</li>\n  <li>括弧と中括弧の間にはスペースを入れてください。</li>\n  <li>\n    可能であれば、 <code>function</code> 宣言を使用して、関数式に関数を定義してください。\n    このようにしてください。\n    <div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>このようにしないでください。\n    <div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n  </li>\n  <li>\n    関数を引数として必要とするメソッドの内部で無名関数を使用する場合、コードを短くすっきりさせるためにアロー関数を使用することは（必須ではありませんが）許容されます。\n    次のようにする代わりに、\n    <div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">const</span> array1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> array1<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n  a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>このように書くこともできます。\n    <div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">const</span> array1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> array1<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"オブジェクト","title":"オブジェクト","isH3":false,"content":""}},{"type":"prose","value":{"id":"オブジェクトの命名","title":"オブジェクトの命名","isH3":true,"content":"<p>オブジェクトクラスを定義する場合、クラス名には UpperCamelCasing （PascalCasing とも呼ばれる）を使用し、オブジェクトのプロパティとメソッド名には lowerCamelCasing を使用してください。</p>\n<p>オブジェクトのインスタンスを定義する場合（リテラルまたはコンストラクター経由）、インスタンス名には lowerCamelCase を使用します。</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">let</span> hanSolo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Han Solo'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'male'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> hanSolo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Han Solo'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'male'</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"オブジェクトの作成","title":"オブジェクトの作成","isH3":true,"content":"<p>一般的なオブジェクトを作成する場合（クラスが関与しない場合）には、コンストラクターではなくリテラルを使用してください。</p>\n<p>このようにしてください。</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">let</span> myObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>このようにしないでください。</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">let</span> myObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"オブジェクトクラス","title":"オブジェクトクラス","isH3":true,"content":"<p>オブジェクトには、旧来のコンストラクターではなく、 ES クラス構文を使用してください。</p>\n<p>例えば、これが推奨される方法です。</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> gender</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> gender<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hi! I'm </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>継承には <code>extends</code> を使用してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Teacher</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"演算子","title":"演算子","isH3":false,"content":""}},{"type":"prose","value":{"id":"条件演算子","title":"条件演算子","isH3":true,"content":"<p><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">条件（または三項）演算子</a>は、以下のように単一の行にまとめて記述してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">let</span> status <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>age <span class=\"token operator\">&gt;=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">'adult'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'minor'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>コードが読みにくくなるので、以下のように条件演算子を入れ子にしないでください。</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">let</span> status <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>age <span class=\"token operator\">&gt;=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">?</span> <span class=\"token string\">'adult'</span>\n  <span class=\"token operator\">:</span> <span class=\"token string\">'minor'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"厳密等価を用いる","title":"厳密等価を用いる","isH3":true,"content":"<p>等価・不等価演算子よりも、常に<a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Strict_equality\">「厳密」等価</a>・不等価演算子を使用してください。</p>\n<p>厳密等価演算子、不等価演算子はこのように使用します。</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code>name <span class=\"token operator\">===</span> <span class=\"token string\">'Chris'</span><span class=\"token punctuation\">;</span>\nage <span class=\"token operator\">!==</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>以下のように、等価演算子、不等価演算子を使用しないでください。</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code>name <span class=\"token operator\">==</span> <span class=\"token string\">'Chris'</span><span class=\"token punctuation\">;</span>\nage <span class=\"token operator\">!=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"論理値の評価に短縮形式を使う","title":"論理値の評価に短縮形式を使う","isH3":true,"content":"<p>論理値の評価には短縮形式を使用してください。 <code>x</code> や <code>!x</code> を使い、 <code>x === true</code> や <code>x === false</code> は使わないでください。</p>"}},{"type":"prose","value":{"id":"文字列","title":"文字列","isH3":false,"content":""}},{"type":"prose","value":{"id":"テンプレートリテラルを使う","title":"テンプレートリテラルを使う","isH3":true,"content":"<p>文字列に値を挿入する場合は、<a href=\"/ja/docs/Web/JavaScript/Reference/Template_literals\">テンプレートリテラル</a>を使用してください。</p>\n<p>これは、テンプレートリテラルを使用する際の推奨される方法の一例です。</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">let</span> myName <span class=\"token operator\">=</span> <span class=\"token string\">'Chris'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hi! I'm </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>myName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>このようにしないでください。</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">let</span> myName <span class=\"token operator\">=</span> <span class=\"token string\">'Chris'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hi! I\\'m'</span> <span class=\"token operator\">+</span> myName <span class=\"token operator\">+</span> <span class=\"token string\">'!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"ノードのテキストコンテンツ","title":"ノードのテキストコンテンツ","isH3":true,"content":"<p>DOM ノードに文字列を挿入する場合、 <a href=\"/ja/docs/Web/API/Node/textContent\"><code>Node.textContent</code></a> を <a href=\"/ja/docs/Web/API/Element/innerHTML\"><code>Element.innerHTML</code></a> の代わりに使用してください。 <code>textContent</code> は <code>innerHTML</code> よりもずっと効率的で、エラーの可能性も低くなります。</p>\n<p>以下の例は、 <code>textContent</code> の使い方を示したものです。</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">let</span> text <span class=\"token operator\">=</span> <span class=\"token string\">'Hello to all you good people'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> para <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npara<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>文字列を DOM ノードに挿入するのに <code>innerHTML</code> は使用しないでください。</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">let</span> text <span class=\"token operator\">=</span> <span class=\"token string\">'Hello to all you good people'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> para <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npara<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"変数","title":"変数","isH3":false,"content":""}},{"type":"prose","value":{"id":"変数の命名","title":"変数の命名","isH3":true,"content":"<p>変数名には lowerCamelCasing （訳注: 小文字で始め、各単語の先頭を大文字にした形）を使用し、必要に応じて簡潔で人間が読みやすい、意味のある名前を使用してください。</p>\n<p>変数名はこちらに示したように使用してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">let</span> playerScore <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> speed <span class=\"token operator\">=</span> distance <span class=\"token operator\">/</span> time<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>このような変数名を使用しないでください。</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">let</span> thisIsaveryLONGVariableThatRecordsPlayerscore345654 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> d<span class=\"token operator\">/</span>t<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> 人間が読める意味のある名前を使わなくても良いのは、ループの反復子に <code>i</code> や <code>j</code> などを使用するような、非常に一般的に認識されている慣習が存在する場合だけです。</p>\n</div>"}},{"type":"prose","value":{"id":"変数の宣言","title":"変数の宣言","isH3":true,"content":"<p>変数や定数を宣言するときは、 <a href=\"/ja/docs/Web/JavaScript/Reference/Statements/let\"><code>let</code></a> や <a href=\"/ja/docs/Web/JavaScript/Reference/Statements/const\"><code>const</code></a> キーワードを使用してください。 <a href=\"/ja/docs/Web/JavaScript/Reference/Statements/var\"><code>var</code></a> は使用しないでください。以下の例は、MDN Web Docs で何が推奨され、何が推奨されないかを示しています。</p>\n<ul>\n  <li>変数が再代入されない場合は、 <code>const</code> を推奨します。\n    <div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">const</span> myName <span class=\"token operator\">=</span> <span class=\"token string\">'Chris'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n  <li>そうでない場合は <code>let</code> を使用してください。\n    <div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">let</span> myAge <span class=\"token operator\">=</span> <span class=\"token string\">'40'</span><span class=\"token punctuation\">;</span>\nmyAge<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Happy birthday!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n  <li>この例では <code>const</code> を使用すべきところを <code>let</code> を使用しています。これはこれで動作はしますが、 MDN のコード例では避けてください。\n    <div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">let</span> myName <span class=\"token operator\">=</span> <span class=\"token string\">'Chris'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n</ul>\n<p>この例では、再代入される変数に const を使用しています。再代入されるとエラーが発生します。</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">const</span> myAge <span class=\"token operator\">=</span> <span class=\"token string\">'40'</span><span class=\"token punctuation\">;</span>\nmyAge<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Happy birthday!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>この例では <code>var</code> を使用していますが、MDN のコード例では、本当に必要な場合以外は避けるべきです。</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">var</span> myAge <span class=\"token operator\">=</span> <span class=\"token string\">'40'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> myName <span class=\"token operator\">=</span> <span class=\"token string\">'Chris'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<p>私たちの <a href=\"/ja/docs/Web/JavaScript/Reference\">JavaScript 言語リファレンス</a> のページのトップに、簡潔で意味のある良い JavaScript のスニペットがあります。参照していくつか見つけてください。私たちのインタラクティブな例 (およびその他の例) は、おおむね上記のガイドラインに沿って書かれていますが、ほとんどはガイドラインが新しく書かれる前に書かれたものなので、ところどころ違っている可能性があることを認識しておいてください。</p>\n<ul>\n  <li>API の例については、以下のものを見てみてください。\n    <ul>\n      <li><a href=\"/ja/docs/Web/API/fetch#%E4%BE%8B\"><code>fetch()</code> の例</a></li>\n      <li><a href=\"/ja/docs/Web/API/CanvasRenderingContext2D/fillRect#%E4%BE%8B\"><code>fillRect()</code> の例</a> （Canvas 2D の例は、古いスタイルの <code>var</code> をまだ使用していますが、概ね良好です）。</li>\n      <li><a href=\"/en-US/docs/Web/API/PaymentRequest/show\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Payment Request API の show() (en-US)</a> （<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PaymentRequest\"><code>PaymentRequest</code> <small>(en-US)</small></a> の例は、全般的にかなり良いものです）。</li>\n      <li><a href=\"/ja/docs/Web/API/Web_Audio_API/Using_Web_Audio_API\">ウェブ音声 API の使用</a> （HTML、CSS、JavaScript の一般的な良い実践と、スニペットを使用する方法の良いデモと、他の場所での完全な例へのリンク）。</li>\n      <li><a href=\"/en-US/docs/Web/API/Media_Capabilities_API/Using_the_Media_Capabilities_API\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">メディア能力 API の使用 (en-US)</a> （ガイドでコードスニペットを使用するための、より一般的な良い実践）。</li>\n    </ul>\n  </li>\n</ul>"}}],"toc":[{"text":"JavaScript コード例に関する一般的なガイドライン","id":"javascript_コード例に関する一般的なガイドライン"},{"text":"配列","id":"配列"},{"text":"条件文","id":"条件文"},{"text":"制御文","id":"制御文"},{"text":"エラー処理","id":"エラー処理"},{"text":"関数","id":"関数"},{"text":"オブジェクト","id":"オブジェクト"},{"text":"演算子","id":"演算子"},{"text":"文字列","id":"文字列"},{"text":"変数","id":"変数"},{"text":"関連情報","id":"関連情報"}],"summary":"以下のガイドラインは、 MDN Web Docs における JavaScript のコード例の書き方について述べています。これは、できるだけ多くの人に理解されるような簡潔な例を書くためのシンプルなリストです。もし、もっと詳しく説明したものが欲しければ、 AirBnB JavaScript Style Guide をお勧めします。これは、私たちのガイドラインと概ね互換性があります。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Guidelines for styling JavaScript code examples","locale":"en-US","native":"English (US)"},{"title":"Lignes directrices pour JavaScript","locale":"fr","native":"Français"}],"source":{"folder":"ja/mdn/writing_guidelines/writing_style_guide/code_style_guide/javascript","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/mdn/writing_guidelines/writing_style_guide/code_style_guide/javascript/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/MDN","title":"MDN Web Docs プロジェクト"},{"uri":"/ja/docs/MDN/Writing_guidelines","title":"執筆ガイドライン"},{"uri":"/ja/docs/MDN/Writing_guidelines/Writing_style_guide","title":"執筆スタイルガイド"},{"uri":"/ja/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide","title":"コード例のガイドライン"},{"uri":"/ja/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide/JavaScript","title":"JavaScript のコード例を整形するためのガイドライン"}],"pageTitle":"JavaScript のコード例を整形するためのガイドライン - MDN Web Docs プロジェクト | MDN","noIndexing":false}}