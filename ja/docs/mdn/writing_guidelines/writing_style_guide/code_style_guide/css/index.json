{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"CSS のコード例を整形するためのガイドライン","mdn_url":"/ja/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide/CSS","locale":"ja","native":"日本語","sidebarHTML":"\n  <ol>\n    <li><a href=\"/ja/docs/MDN/About\">MDN について</a></li>\n    <li class=\"toggle\">\n        <details>\n            <summary>MDN の改善に貢献する</summary>\n            <ol>\n                <li><a href=\"/ja/docs/MDN/Contribute/Getting_started\">MDN を始めよう</a></li>\n                <li><a href=\"/ja/docs/MDN/Contribute\">MDN の改善に貢献する</a></li>\n                <li><a href=\"/ja/docs/MDN/Contribute/Howto\">あなたにできること</a></li>\n                <li><a href=\"/ja/docs/MDN/Contribute/Localize\">MDN でのローカライズ</a></li>\n                <li><a href=\"/ja/docs/MDN/Guidelines\">Guidelines</a></li>\n                <li><a href=\"/ja/docs/MDN/Structures\">文書の構造</a></li>\n             </ol>\n        </details>\n    </li>\n  </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>次のガイドラインでは、MDN コードの例として CSS を記述する方法について説明します。</p>"}},{"type":"prose","value":{"id":"css_のコード例のための全般的なガイドライン","title":"CSS のコード例のための全般的なガイドライン","isH3":false,"content":""}},{"type":"prose","value":{"id":"css_を計画する","title":"CSS を計画する","isH3":true,"content":"<p>CSS を大量に書き込む前に、スタイルを慎重に計画しましょう。どのようなスタイルが必要なのか、どのようなレイアウトが必要なのか、どのようなオーバーライドが必要なのか、そしてそれらは再利用可能なものなのか。特に、<strong>オーバーライドのしすぎは禁物</strong>です。スタイルを書いても、いくつかのルールセットで再びキャンセルしてしまうようなことがあれば、おそらく戦略を見直す必要があります。</p>"}},{"type":"prose","value":{"id":"柔軟性のある相対的な単位を使う","title":"柔軟性のある/相対的な単位を使う","isH3":true,"content":"<p>可能な限り幅広い端末で最大限の柔軟性を実現するために、コンテナーやパディングなどの寸法は、em や rem のような相対的な単位を使用し、ビューポートの幅に応じて変化させたい場合はパーセント値やビューポートの単位を使うことをお勧めします。これについては、<a href=\"/ja/docs/Web/Progressive_web_apps/Responsive/responsive_design_building_blocks#fluid_grids\">レスポンシブデザインの構成要素</a>の記事をご覧ください。</p>"}},{"type":"prose","value":{"id":"プリプロセッサーを使用しない","title":"プリプロセッサーを使用しない","isH3":true,"content":"<p>MDN のサンプル コードでは、<a href=\"https://sass-lang.com/\" class=\"external\" rel=\" noopener\">Sass</a>,<a href=\"https://lesscss.org/\" class=\"external\" rel=\" noopener\">Less</a>,<a href=\"http://stylus-lang.com/\" class=\"external\" rel=\" noopener\">Stylus,</a>などのプリプロセッサー構文を使用しないでください。MDN はバニラ CSS 言語を文書化しており、プリプロセッサーを使うことは、例を理解するためのハードルを上げるだけであり、読者を混乱させる可能性があります。</p>"}},{"type":"prose","value":{"id":"特定の_css_の方法論を使わない","title":"特定の CSS の方法論を使わない","isH3":true,"content":"<p>前のガイドラインと同じ精神で、 <a href=\"http://getbem.com/naming/\" class=\"external\" rel=\" noopener\">BEM</a> や <a href=\"https://smacss.com/\" class=\"external\" rel=\" noopener\">SMACSS</a> のような特定の CSS の方法論を使って MDN のサンプルコードを書かないようにしてください。これらが有効な CSS 構文であっても、それらの方法論に精通していない人にとっては、命名規則が混乱を招く可能性があります。</p>"}},{"type":"prose","value":{"id":"リセットを使わない","title":"リセットを使わない","isH3":true,"content":"<p>プラットフォーム横断的に CSS を最大限に制御するために、多数の人が CSS リセットを使用してすべてのスタイルを削除し、その後、自分で再構築する方法をとっています。これには確かにメリットがありますが、特に現代では CSS リセットはやりすぎで、既定のマージンやリストスタイルなど、元々完全に壊れていないものを再実装するために多数の余分な時間がかかってしまうことがあります。</p>\n<p>もし本当にリセットを使う必要があると感じたら、<a href=\"https://necolas.github.io/normalize.css/\" class=\"external\" rel=\" noopener\">Nicolas Gallagher による normalize.css</a> の使用を検討してください。これは、ブラウザー間でより一貫したものにし、いつも削除している既定の厄介なもの（例えば <code>&lt;body&gt;</code> 上のマージン）を取り除き、いくつかのバグを修正することだけを目的としています。</p>"}},{"type":"prose","value":{"id":"!important_は使わない","title":"!important は使わない","isH3":true,"content":"<p><code>!important</code> は最後の手段で、何かを上書きする必要があり、他に方法がないときだけ使用します。これは悪しき習慣であり、可能な限り避けるべきです。</p>\n<div class=\"code-example\"><pre class=\"brush: css example-bad notranslate\"><code><span class=\"token selector\">.bad-code</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 4rem <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"css_のコメント","title":"CSS のコメント","isH3":true,"content":"<p>自己文書化されていないコードにコメントを付けるには、 CSS 形式のコメントを使用してください。</p>\n<div class=\"code-example\"><pre class=\"brush: css example-good notranslate\"><code><span class=\"token comment\">/* これが CSS 形式のコメントです。 */</span>\n</code></pre></div>\n<p>コメントは、参照するコードの前に別の行で記述してください。</p>\n<div class=\"code-example\"><pre class=\"brush: css example-good notranslate\"><code><span class=\"token selector\">h3</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 赤色のドロップシャドウを、右下に 1px のオフセット、 2px のぼかし半径で作成 */</span>\n  <span class=\"token property\">text-shadow</span><span class=\"token punctuation\">:</span> 1px 1px 2px red<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* フォントサイズを文書の既定値の 2 倍に設定 */</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 2rem<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"値の周りには二重引用符を使う","title":"値の周りには二重引用符を使う","isH3":true,"content":"<p>引用符を入れることができる、または入れる必要がある場合は、次のように二重引用符を使用してください。</p>\n<div class=\"code-example\"><pre class=\"brush: css example-good notranslate\"><code><span class=\"token selector\">[data-vegetable=\"liquid\"]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> goldenrod<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">\"../../media/examples/lizard.png\"</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"一括指定と個別指定のルール","title":"一括指定と個別指定のルール","isH3":true,"content":"<p>通常、 CSS 構文の詳細を教える場合、簡潔な一括指定よりも個別指定のプロパティを使用した方が明確でわかりやすいです（もちろん、簡潔な一括指定を教えることがこの例のポイントである場合は除きます）。 MDN の例のポイントは、人に教えることであって、賢いやり方でも効率的でもないことを覚えておいてください。</p>\n<ul>\n  <li>そもそも、一括指定は何をやっているのか理解するのが難しいことが多いのです。例えば <a href=\"/ja/docs/Web/CSS/font\"><code>font</code></a> 構文が何をしているのかを正確に拾い上げるには、しばらく時間がかかります。\n    <div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token property\">font</span><span class=\"token punctuation\">:</span> small-caps bold 2rem/1.5 sans-serif<span class=\"token punctuation\">;</span>\n</code></pre></div>一方、こちらはより即座に理解することができます。\n    <div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token property\">font-variant</span><span class=\"token punctuation\">:</span> small-caps<span class=\"token punctuation\">;</span>\n<span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> bold<span class=\"token punctuation\">;</span>\n<span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 2rem<span class=\"token punctuation\">;</span>\n<span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 1.5<span class=\"token punctuation\">;</span>\n<span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> sans-serif<span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n  <li>CSS の一括指定には潜在的な落とし穴があります。明示的に設定していない構文の属値に既定値が設定され、カスケードで先に設定した値を予期せぬ形でリセットしてしまったり、その他の予期せぬ効果をもたらす可能性があるからです。例えば <a href=\"/ja/docs/Web/CSS/grid\"><code>grid</code></a> プロパティは、指定されていない項目に対して、以下のすべての既定値を設定します。\n    <ul>\n      <li><a href=\"/ja/docs/Web/CSS/grid-template-rows\"><code>grid-template-rows</code></a>: <code>none</code></li>\n      <li><a href=\"/ja/docs/Web/CSS/grid-template-columns\"><code>grid-template-columns</code></a>: <code>none</code></li>\n      <li><a href=\"/ja/docs/Web/CSS/grid-template-areas\"><code>grid-template-areas</code></a>: <code>none</code></li>\n      <li><a href=\"/ja/docs/Web/CSS/grid-auto-rows\"><code>grid-auto-rows</code></a>: <code>auto</code></li>\n      <li><a href=\"/ja/docs/Web/CSS/grid-auto-columns\"><code>grid-auto-columns</code></a>: <code>auto</code></li>\n      <li><a href=\"/ja/docs/Web/CSS/grid-auto-flow\"><code>grid-auto-flow</code></a>: <code>row</code></li>\n      <li><a href=\"/ja/docs/Web/CSS/column-gap\"><code>column-gap</code></a>: <code>0</code></li>\n      <li><a href=\"/ja/docs/Web/CSS/row-gap\"><code>row-gap</code></a>: <code>0</code></li>\n      <li><a href=\"/ja/docs/Web/CSS/column-gap\"><code>column-gap</code></a>: <code>normal</code></li>\n      <li><a href=\"/ja/docs/Web/CSS/row-gap\"><code>row-gap</code></a>: <code>normal</code></li>\n    </ul>\n  </li>\n  <li>一部の一括指定は、様々な値の構成要素を特定の順序で入れないと期待通りに動作しません。例えば CSS アニメーションでは、次のようになります。\n    <div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token comment\">/* duration | timing-function | delay | iteration-count\n  direction | fill-mode | play-state | name */</span>\n<span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> 3s ease-in 1s 2 reverse both paused slidein<span class=\"token punctuation\">;</span>\n</code></pre></div>例として、 <a href=\"/ja/docs/Web/CSS/time\"><code>&lt;time&gt;</code></a> として解釈できる最初の値は <a href=\"/ja/docs/Web/CSS/animation-duration\"><code>animation-duration</code></a> に割り当てられ、 2 つ目の値は <a href=\"/ja/docs/Web/CSS/animation-delay\"><code>animation-delay</code></a> に割り当てられます。詳しくは、 <a href=\"/ja/docs/Web/CSS/animation#%E6%A7%8B%E6%96%87\">animation の構文</a>の詳細をご覧ください。\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"「モバイルファースト」のメディアクエリーを使う","title":"「モバイルファースト」のメディアクエリーを使う","isH3":true,"content":"<p>同じスタイルシート内で<a href=\"/ja/docs/Web/CSS/Media_Queries/Using_media_queries\">メディアクエリー</a>を使用して、様々なターゲットのビューポートサイズによって異なるスタイルのセットを入れるとき、メディアクエリーが文書に適用される前の既定のスタイルを狭い画面／モバイルスタイルとし、その後メディアクエリー内で広いビューポート用に上書きするのはよい考えです。これには多くの利点があり、<a href=\"/ja/docs/Web/Progressive_web_apps/Responsive/Mobile_first\">モバイルファースト</a>の記事で概説しています。</p>\n<div class=\"code-example\"><pre class=\"brush: css example-good notranslate\"><code><span class=\"token comment\">/* 狭い画面向けの既定の CSS レイアウト値 */</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 480px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 中型の画面向けの CSS */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 800px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 広い画面向けの CSS */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 1100px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 本当に広い画面向けの CSS */</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"セレクター","title":"セレクター","isH3":false,"content":"<ul>\n  <li>ID セレクターを使用しないでください。理由は以下の通りです。\n    <ul>\n      <li>ID セレクターは柔軟性に欠け、複数必要だとわかっても追加できません。</li>\n      <li>クラスよりも特異性が高く、必要な場合に上書きするのが難しいです。</li>\n    </ul>\n    <div class=\"code-example\"><pre class=\"brush: css example-good notranslate\"><code><span class=\"token selector\">.editorial-summary</span> <span class=\"token punctuation\">{</span>\n  ...\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n    <div class=\"code-example\"><pre class=\"brush: css example-bad notranslate\"><code><span class=\"token selector\">#editorial-summary</span> <span class=\"token punctuation\">{</span>\n  ...\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n  </li>\n  <li>\n    ルールに複数のセレクターがある場合、それぞれのセレクターを別の行に置いてください。こうすることで、セレクターのリストが読みやすくなり、コードの各行を短くすることができます。\n    次のようにしてください。\n    <div class=\"code-example\"><pre class=\"brush: css example-good notranslate\"><code><span class=\"token selector\">h1,\nh2,\nh3</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> sans-serif<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>次のようにはしないでください。\n    <div class=\"code-example\"><pre class=\"brush: css example-bad notranslate\"><code><span class=\"token selector\">h1, h2, h3</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> sans-serif<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"関数の引数のスペース","title":"関数の引数のスペース","isH3":true,"content":"<p>関数の引数には、区切り文字のカンマの後にスペースを置くべきですが、その前には置きません。</p>\n<div class=\"code-example\"><pre class=\"brush: css example-good notranslate\"><code><span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgb</span><span class=\"token punctuation\">(</span>255<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">linear-gradient</span><span class=\"token punctuation\">(</span>to bottom<span class=\"token punctuation\">,</span> red<span class=\"token punctuation\">,</span> black<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"構文のスタイル","title":"構文のスタイル","isH3":true,"content":"<p>CSS にはさまざまな記述方法がありますが、私たちは、セレクター/開始中括弧、終了中括弧、および各宣言がそれぞれ別の行にある、展開されたスタイルを好んで使用します。これは読みやすさを最大限に高め、また MDN での一貫性を促進します。</p>\n<p>加えて、以下の慣例を意識してください。</p>\n<ul>\n  <li>セレクターと中括弧の間にはスペースを入れる。</li>\n  <li>最後の宣言の最後には、たとえ厳密には必要ないとしても、必ずセミコロンを入れる。</li>\n  <li>閉じ中括弧は改行して書く。</li>\n  <li>それぞれの宣言では、区切りコロンの後にスペースを入れ、その前には入れない。</li>\n  <li>コードのインデントには 2 つのスペースを使う。</li>\n</ul>\n<div class=\"code-example\"><pre class=\"brush: css example-good notranslate\"><code><span class=\"token selector\">p</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 1rem<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: css example-bad notranslate\"><code><span class=\"token selector\">p</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span> <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 1rem<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"border_などのプロパティをオフにする","title":"border などのプロパティをオフにする","isH3":true,"content":"<p>境界（および他のプロパティのうち、値として <code>0</code> または <code>none</code> を取ることができるもの）をオフにするときは、 <code>none</code> ではなく <code>0</code> を使用してください。</p>\n<div class=\"code-example\"><pre class=\"brush: css example-good notranslate\"><code><span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<p><a href=\"/ja/docs/Web/CSS/Reference#index\">CSS のキーワード索引</a>から探して参照してみてください。そこにあるインタラクティブな例は、一般的に上記のガイドラインに沿って書かれていますが、ガイドラインが新しく書かれる前に書かれたものがほとんどなので、場所によってはそうではない場合があることに注意してください。</p>"}}],"toc":[{"text":"CSS のコード例のための全般的なガイドライン","id":"css_のコード例のための全般的なガイドライン"},{"text":"セレクター","id":"セレクター"},{"text":"関連情報","id":"関連情報"}],"summary":"次のガイドラインでは、MDN コードの例として CSS を記述する方法について説明します。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Guidelines for styling CSS code examples","locale":"en-US","native":"English (US)"},{"title":"Lignes directrices du CSS","locale":"fr","native":"Français"},{"title":"CSS 가이드라인","locale":"ko","native":"한국어"}],"source":{"folder":"ja/mdn/writing_guidelines/writing_style_guide/code_style_guide/css","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/mdn/writing_guidelines/writing_style_guide/code_style_guide/css/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/MDN","title":"MDN Web Docs プロジェクト"},{"uri":"/ja/docs/MDN/Writing_guidelines","title":"執筆ガイドライン"},{"uri":"/ja/docs/MDN/Writing_guidelines/Writing_style_guide","title":"執筆スタイルガイド"},{"uri":"/ja/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide","title":"コード例のガイドライン"},{"uri":"/ja/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide/CSS","title":"CSS のコード例を整形するためのガイドライン"}],"pageTitle":"CSS のコード例を整形するためのガイドライン - MDN Web Docs プロジェクト | MDN","noIndexing":false}}