{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"WebIDL ファイルに含まれる情報","mdn_url":"/ja/docs/MDN/Writing_guidelines/Howto/Write_an_API_reference/Information_contained_in_a_WebIDL_file","locale":"ja","native":"日本語","sidebarHTML":"\n  <ol>\n    <li><a href=\"/ja/docs/MDN/About\">MDN について</a></li>\n    <li class=\"toggle\">\n        <details>\n            <summary>MDN の改善に貢献する</summary>\n            <ol>\n                <li><a href=\"/ja/docs/MDN/Contribute/Getting_started\">MDN を始めよう</a></li>\n                <li><a href=\"/ja/docs/MDN/Contribute\">MDN の改善に貢献する</a></li>\n                <li><a href=\"/ja/docs/MDN/Contribute/Howto\">あなたにできること</a></li>\n                <li><a href=\"/ja/docs/MDN/Contribute/Localize\">MDN でのローカライズ</a></li>\n                <li><a href=\"/ja/docs/MDN/Guidelines\">Guidelines</a></li>\n                <li><a href=\"/ja/docs/MDN/Structures\">文書の構造</a></li>\n             </ol>\n        </details>\n    </li>\n  </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>API についての記事を書くとき、情報源はたくさんあります。仕様書にはモデルと同様に何が実装されるべきかが記述され、実装には実際にブラウザーに置かれたものが記述されています。 WebIDL ファイルは、 API に関する情報のすべてではありませんが、多くの情報を提供する非常に凝縮された方法です。この記事では、 WebIDL 構文を理解するためのリファレンスを提供します。</p>\n<p>IDL は <strong><em>Interface Definition Language</em></strong> の略で、 API を記述するために設計されています。広いコンピューターの世界では、 IDL はいくつかの種類に分かれています。ブラウザーの世界では、私たちが使っている IDL は <em>WebIDL</em> と呼ばれています。 WebIDL には、 WebIDL 仕様書で規定されているものと、ブラウザーに実装されているものの 2 種類があります。仕様書は標準的なリファレンスで、ブラウザーの WebIDL は特定のブラウザーで実際に実装されているものを記述し、アノテーション、非標準の要素に関する情報、 IDL 仕様に対するブラウザー固有の拡張などの追加事項を含んでいます。</p>"}},{"type":"prose","value":{"id":"webidl_ファイルの場所","title":"WebIDL ファイルの場所","isH3":false,"content":"<p>WebIDL は複数の場所で見つけることができます。</p>\n<ul>\n  <li>それぞれの仕様書には、本文の中に WebIDL が含まれています：これは、正確な定義を伝えるのにとても便利な方法です。これらは、API の構文を記述しています。正規のリファレンスではありますが、実際の実装とは異なる可能性があることを念頭に置いておく必要があります。 MDN では、実用的でありたいと考えており、ウェブプラットフォームが実際にどうであるか、理想的にどうあるべきかを文書化するものではありません。ですから、そこにあるものを実装でダブルチェックしてください（そして、矛盾を発見したら遠慮なくバグを報告してください）。</li>\n  <li>3 つのブラウザーエンジンが、ツールチェーンの一部として（修正された） WebIDL を使用しています。 Gecko、Chromium/Blink、そして WebCore/WebKit です。 Chromium 以前の Edge では内部的に WebIDL を使用していましたが、残念ながらこれらは公開されていません。\n    <ul>\n      <li>Gecko では、すべての WebIDL ファイルは 1 つのディレクトリー <a href=\"https://dxr.mozilla.org/mozilla-central/source/dom/webidl/\" class=\"external\" rel=\" noopener\">https://dxr.mozilla.org/mozilla-central/source/dom/webidl/</a> にまとめられています。拡張子は <code>.webidl</code> です。Gecko のソースツリーには他にも <code>*.idl</code> ファイルがありますが、それらは WebIDL ではないので無視してかまいません。古いバージョンの Gecko には WebIDL が散在しており、 WebIDL の代わりに Mozilla の IDL を使ってウェブインターフェイスを記述しているものもありますが、最近の Gecko のコードでは問題ありません。</li>\n      <li>Chromium では、ソースコードの <a href=\"https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/\" class=\"external\" rel=\" noopener\"><code>renderer/</code></a> ディレクトリーのサブツリーである <a href=\"https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/core/\" class=\"external\" rel=\" noopener\"><code>core/</code></a> と <a href=\"https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/modules/\" class=\"external\" rel=\" noopener\"><code>modules/</code></a> の 2 ヶ所に配置されます。 Chromium のソースコードには、他の場所にも IDL ファイルがありますが、これらはテストシステムの一部であり、API の実装には関係ありません。</li>\n      <li>WebCore の場合は、ソースコードのあちこちに散らばっているので、もう少し掘り下げる必要があります。例：<a href=\"https://github.com/WebKit/webkit/blob/master/Source/WebCore/html/DOMTokenList.idl\" class=\"external\" rel=\" noopener\">https://github.com/WebKit/webkit/blob/master/Source/WebCore/html/DOMTokenList.idl</a></li>\n    </ul>\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"webidl_のさまざまな方言","title":"WebIDL のさまざまな方言","isH3":false,"content":"<p>WebIDL は<a href=\"https://heycam.github.io/webidl/\" class=\"external\" rel=\" noopener\">その仕様書</a>で定義されています。しかし、より多くの情報を伝えるために拡張できるように設計されており、 ブラウザーのベンダーはそれを行っています。</p>\n<ul>\n  <li>Gecko については、 Mozilla がその方言である WebIDL の<a href=\"https://firefox-source-docs.mozilla.org/dom/webIdlBindings/index.html\" class=\"external\" rel=\" noopener\">ドキュメント</a> を作成しました。</li>\n  <li>Chromium については、 Google もその拡張機能を説明する<a href=\"https://www.chromium.org/blink/webidl/\" class=\"external\" rel=\" noopener\">ドキュメント</a>を作成しました。</li>\n  <li>WebCore については、Apple もその方言に関する<a href=\"https://trac.webkit.org/wiki/WebKitIDL\" class=\"external\" rel=\" noopener\">ページ</a>を公開しています。</li>\n</ul>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> ここでは、記事を書くときに最も役に立つ WebIDL のサブセットのみを説明します。実装者にとって便利なアノテーションは他にもたくさんあります。完全な概要を知るには、上記のリンク先の 4 つの記事を参照してください。</p>\n</div>"}},{"type":"prose","value":{"id":"インターフェイス","title":"インターフェイス","isH3":false,"content":"<p>ここでは、 API 全体の機能を記述する WebIDL 構文について説明します。</p>"}},{"type":"prose","value":{"id":"インターフェイスの名前","title":"インターフェイスの名前","isH3":true,"content":"<p>インターフェイス名は、キーワード <code>interface</code> の後、次の開き括弧 (<code>'{'</code>) またはコロン (<code>':'</code>) の前に表示される文字列です。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">interface</span> <span class=\"token class-name\">URL</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>WebIDL インターフェイスは、真のインターフェイスであれ、ミックスインであれ、それぞれ独自のページをドキュメントに持ち、そのインターフェイスで定義されているすべてのコンストラクター、プロパティ、メソッドを掲載します。</p>"}},{"type":"prose","value":{"id":"インターフェイスチェーン","title":"インターフェイスチェーン","isH3":true,"content":"<p>あるインターフェイスの親がある場合は、インターフェイス名の後にコロン (<code>':'</code>) をつけて定義します。 1 つのインターフェイスにつき、親は 1 つだけ存在することができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">interface</span> <span class=\"token class-name\">HTMLMediaElement</span> <span class=\"token operator\">:</span> HTMLElement <span class=\"token punctuation\">{</span>…<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>継承チェーンはサイドバーに自動的に掲載されます（{{APIRef}} マクロを使用）。また、 SVG 画像としてマクロの {{InheritanceDiagram}} を使って追加することもできます。</p>"}},{"type":"prose","value":{"id":"ミックスイン","title":"ミックスイン","isH3":true,"content":"<p>いくつかのプロパティやメソッドは、複数のインターフェイスで利用できます。再定義を防ぐために、それらは<em>ミックスイン</em>と呼ばれる特別な WebIDL インターフェイスで定義されています。</p>\n<p>2019 年 9 月に、ミックスインの構文が更新されています。新しい構文では、 <code>interface mixin</code> を使用して、ミックスインのインターフェイスを以下のように定義します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">interface</span> <span class=\"token class-name\">MyInterface</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">mixin</span> MyMixin <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">somethingMixedIn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>そして、 <code>includes</code> キーワードを使用して、ミックスインの内部で定義されたプロパティがインターフェイス上で利用可能であることを表明します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>MyInterface includes MyMixin<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ミックスインは継承をせず、他のミックスインを取り込むことはできません。しかし、パーシャルをサポートしているので、次のようにすることができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">interface</span> <span class=\"token class-name\">MyInterface</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">mixin</span> MyMixin <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\npartial <span class=\"token keyword\">interface</span> <span class=\"token class-name\">mixin</span> MyMixin <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">somethingMixedIn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nMyInterface includes MyMixin<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>\n  MDN では、ドキュメント作成にあたって、ミックスインを非表示にしています。これらは抽象的で仕様のみの構成要素です。\n  ブラウザーのコンソールで見ることはできませんし、メソッドやプロパティが実際のどのインターフェイスで実装されているかを知る方がより有用です。\n</p>\n<p>\n  IDL で <a href=\"https://html.spec.whatwg.org/multipage/links.html#htmlhyperlinkelementutils\" class=\"external\" rel=\" noopener\">HTMLHyperlinkElementUtils</a> のようなミックスインに遭遇した場合。\n  そのミックスインを実装しているインターフェイスを探してください。\n  <a href=\"https://html.spec.whatwg.org/multipage/text-level-semantics.html#htmlanchorelement\" class=\"external\" rel=\" noopener\">HTMLAnchorElement</a> のように、ミックスインを実装するインターフェイスを探し、それらのインターフェイス上で直接ミックスインのメンバーを文書化します。\n</p>\n<p>実際には、 <code>HTMLHyperlinkElementUtils</code> を文書化するのではなく、 <a href=\"/ja/docs/Web/API/HTMLAnchorElement\"><code>HTMLAnchorElement</code></a> や <a href=\"/ja/docs/Web/API/HTMLAreaElement\"><code>HTMLAreaElement</code></a> のような具体的なインターフェイスにドキュメントが追加されます。</p>\n<p><code>HTMLHyperlinkElementUtils.hash</code> を適切に説明する以下の 2 ページを参照してください。</p>\n<ul>\n  <li><a href=\"/ja/docs/Web/API/HTMLAnchorElement/hash\"><code>HTMLAnchorElement.hash</code></a></li>\n  <li><a href=\"/ja/docs/Web/API/HTMLAreaElement/hash\"><code>HTMLAreaElement.hash</code></a></li>\n</ul>\n<p>互換性データについては、 <a href=\"https://github.com/mdn/browser-compat-data/blob/main/docs/data-guidelines.md\" class=\"external\" rel=\" noopener\">BCD におけるミックスインのデータガイドライン</a>を参照してください。</p>"}},{"type":"prose","value":{"id":"古いミックスインの構文","title":"古いミックスインの構文","isH3":true,"content":"<p>古いスタイルの WebIDL ミックスインの構文では、まだいくつかの場所で見かけるかもしれませんが、ミックスインは <code>[NoInterfaceObject]</code> という注釈で接頭辞を付けます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">[</span>NoInterfaceObject<span class=\"token punctuation\">]</span>\n   <span class=\"token keyword\">interface</span> <span class=\"token class-name\">MyMixin</span> <span class=\"token punctuation\">{</span>…<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>旧来の構文では、インターフェイスに実装されたミックスインは <code>implements</code> キーワードで定義します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>MyInterface <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MyMixin</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"ウィンドウとワーカーでの可用性","title":"ウィンドウとワーカーでの可用性","isH3":true,"content":"<p>ウェブワーカー（任意の型）および Window スコープでの可用性は、注釈 <code>[Exposed=(Window,Worker)]</code> を使用して定義します。この注釈は一緒に掲載されている部分インターフェイスに適用されます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">[</span>Exposed<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>Window<span class=\"token punctuation\">,</span>Worker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Performance</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token punctuation\">[</span>DependsOn<span class=\"token operator\">=</span>DeviceState<span class=\"token punctuation\">,</span> Affects<span class=\"token operator\">=</span>Nothing<span class=\"token punctuation\">]</span>\n   DOMHighResTimeStamp <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span>Exposed<span class=\"token operator\">=</span>Window<span class=\"token punctuation\">]</span>\npartial <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Performance</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token punctuation\">[</span>Constant<span class=\"token punctuation\">]</span>\n   readonly attribute PerformanceTiming timing<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">[</span>Constant<span class=\"token punctuation\">]</span>\n   readonly attribute PerformanceNavigation navigation<span class=\"token punctuation\">;</span>\n\n   jsonifier<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>この場合、 <code>Performance.now()</code> は <code>Window</code> スコープと任意のワーカーで利用できますが、 <code>Performance.timing</code>、<code>Performance.navigation</code>、<code>Performance.toJSON()</code> はウェブワーカーで利用できません。</p>\n<p><code>[Exposed]</code> の最も一般的な値は次のとおりです。</p>\n<dl>\n  <dt id=\"window\"><code>Window</code></dt>\n  <dd>\n    <p>この部分インターフェイスは <a href=\"/ja/docs/Web/API/Window\"><code>Window</code></a> グローバルスコープで利用可能です。</p>\n  </dd>\n  <dt id=\"worker\"><code>Worker</code></dt>\n  <dd>\n    <p>この部分インターフェイスは、グローバルスコープが <a href=\"/ja/docs/Web/API/WorkerGlobalScope\"><code>WorkerGlobalScope</code></a> - <a href=\"/ja/docs/Web/API/DedicatedWorkerGlobalScope\"><code>DedicatedWorkerGlobalScope</code></a>、<a href=\"/ja/docs/Web/API/SharedWorkerGlobalScope\"><code>SharedWorkerGlobalScope</code></a>、<a href=\"/ja/docs/Web/API/ServiceWorkerGlobalScope\"><code>ServiceWorkerGlobalScope</code></a> の子孫であれば、どんな種類のワーカーでも利用可能です（<code>ChromeWorker</code> にもありますが、ウェブ上では見えず、 Firefox の内部であるため文書化されていません.）。</p>\n  </dd>\n  <dt id=\"dedicatedworker\"><code>DedicatedWorker</code></dt>\n  <dd>\n    <p>この部分インターフェイスは <a href=\"/ja/docs/Web/API/DedicatedWorkerGlobalScope\"><code>DedicatedWorkerGlobalScope</code></a> のみで利用可能です。</p>\n  </dd>\n  <dt id=\"sharedworker\"><code>SharedWorker</code></dt>\n  <dd>\n    <p>この部分インターフェイスは <a href=\"/ja/docs/Web/API/SharedWorkerGlobalScope\"><code>SharedWorkerGlobalScope</code></a> のみで利用可能です。</p>\n  </dd>\n  <dt id=\"serviceworker\"><code>ServiceWorker</code></dt>\n  <dd>\n    <p>この部分インターフェイスは <a href=\"/ja/docs/Web/API/ServiceWorkerGlobalScope\"><code>ServiceWorkerGlobalScope</code></a> のみで利用可能です。</p>\n  </dd>\n</dl>\n<p><code>System</code> のような別の値も可能ですが、これには<a href=\"/ja/docs/Mozilla/WebIDL_bindings#exposed\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">特別な意味</a>があり、文書化する必要はありません。</p>\n<p>これらの可能な値は、それ自体が WebIDL ファイルで定義されていることに注意してください。インターフェイスは <code>[Global=xyz]</code> という注釈を持つことができます。これは、このタイプのオブジェクトがグローバルスコープとして使用される場合、 <code>[Exposed]</code> の値が <code>xyz</code> である インターフェイス、プロパティ、メソッドがすべて利用可能になることを意味します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">[</span>Global<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>Worker<span class=\"token punctuation\">,</span>DedicatedWorker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Exposed<span class=\"token operator\">=</span>DedicatedWorker<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">DedicatedWorkerGlobalScope</span> <span class=\"token operator\">:</span> WorkerGlobalScope <span class=\"token punctuation\">{</span>…<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ここでは、グローバルスコープが <code>DedicatedWorkerGlobalScope</code> 型の場合、つまり、専用ワーカーにいる場合は、 <code>Worker</code> または <code>DedicatedWorker</code> に <code>[Exposed]</code> 注釈を用いて公開したインターフェイス、プロパティ、メソッドを利用できると定義しています。</p>"}},{"type":"prose","value":{"id":"設定","title":"設定","isH3":true,"content":"<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> この情報は Gecko 固有のものであり、ブラウザー互換性 の節でのみ使用されるべきものです。</p>\n</div>\n<p>Gecko では、コンストラクター、プロパティ、メソッドを含む部分インターフェイスの可用性は、プリファレンス（通常 \"pref\" と呼ばれます）によって制御されることがあります。これは WebIDL でもマークされています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">[</span>Pref<span class=\"token operator\">=</span><span class=\"token string\">\"media.webspeech.synth.enabled\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">SpeechSynthesis</span> <span class=\"token punctuation\">{</span>\n   readonly attribute boolean pending<span class=\"token punctuation\">;</span>\n   readonly attribute boolean speaking<span class=\"token punctuation\">;</span>\n   readonly attribute boolean paused<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ここでは <code>media.webspeech.synth.enabled</code> が <code>SpeechSynthesis</code> インターフェイスとそのプロパティを制御します（完全なリストは 3 つだけではありません）。</p>\n<blockquote>\n  <p><strong>注意:</strong> 環境設定の既定値は、 WebIDL で直接利用できません（Gecko を使用している製品ごとに異なる場合があります）。</p>\n</blockquote>"}},{"type":"prose","value":{"id":"システムコードでのみ使用可能なもの","title":"システムコードでのみ使用可能なもの","isH3":true,"content":"<p>インターフェイスによっては、ブラウザー内部システムコード、またはクロームコードでのみ利用可能な機能がある場合があります。これを示すために、 Gecko では [ChromeOnly] を使用します。例えば、次の例の propName プロパティは、クロームコード経由でのみ呼び出せます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">interface</span> <span class=\"token class-name\">MyInterface</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>ChromeOnly<span class=\"token punctuation\">]</span>\n  readonly attribute PropValue propName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"プロパティ","title":"プロパティ","isH3":false,"content":"<p>プロパティの定義は、 <code>attribute</code> キーワードの存在によって認識することができます。</p>"}},{"type":"prose","value":{"id":"プロパティの名前","title":"プロパティの名前","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>readonly attribute MediaError<span class=\"token operator\">?</span> error<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>上記の例では、プロパティの名前は <code>error</code> です。ドキュメントでは、このプロパティは <code>HTMLMediaElement</code> インターフェイスに属するため、 <code>HTMLMediaElement.error</code> と表記します。ページへのリンクは、インターフェイスの接頭辞を付けるために {{domxref('HTMLMediaElement.error')}} を使用したり、コンテキストが明白で曖昧でない場合には、接頭辞を付け<strong>ない</strong>ように {{domxref('HTMLMediaElement.error', 'error')}} を使用したりします。</p>"}},{"type":"prose","value":{"id":"プロパティの型","title":"プロパティの型","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>readonly attribute MediaError<span class=\"token operator\">?</span> error<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>このプロパティの値は <code>MediaError</code> 型のオブジェクトです。疑問符 (<code>'?'</code>) は <code>null</code> の値を取ることができることを示し、ドキュメントでは<em>いつ</em>これが発生するかを説明する必要があります。疑問符がない場合、 <code>error</code> プロパティを <code>null</code> にすることはできません。</p>"}},{"type":"prose","value":{"id":"プロパティへの書き込み権限","title":"プロパティへの書き込み権限","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>readonly attribute MediaError<span class=\"token operator\">?</span> error<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>キーワード <code>readonly</code> が存在する場合、そのプロパティを変更することはできません。読み取り専用としてマークする必要があります。</p>\n<ul>\n  <li>インターフェイスでは、その定義用語の横に <span title=\"This value may not be changed.\" class=\"badge inline readonly\">読取専用 </span> マクロを追加してください。</li>\n  <li>そのページの最初の文章で、説明を次のように始めてください。 <em><strong>HTMLMediaElement.error`</strong> プロパティは読み取り専用で...</em>。</li>\n  <li>自身のページに <code>Read-only</code> タグを追加してください。</li>\n  <li>インターフェイスページの説明を <em>...を返します</em> で始めてください。</li>\n</ul>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> 値を「返す」と表現できるのは、読み取り専用のプロパティのみです。読み取り専用でないプロパティは、値を設定するために使用することもできます。</p>\n</div>"}},{"type":"prose","value":{"id":"例外の発生","title":"例外の発生","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">[</span>SetterThrows<span class=\"token punctuation\">]</span>\n            attribute DOMString src<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ある値が不正である場合など、新しい値を設定すると例外が発生することがあります。これは <code>[SetterThrows]</code> の注釈でマークします。このような場合、プロパティページの構文の節に、例外の項がなければなりません。例外のリストとそれが発生する条件は、その API の仕様にテキスト情報として記載されています。</p>\n<p>例外の中には、明示的にマークされていないものの、JavaScript のバインディングによって定義されているものがあることに注意してください。（JavaScript の文字列にマッピングされている）<a href=\"https://heycam.github.io/webidl/#es-enumeration\" class=\"external\" rel=\" noopener\">不正な列挙値を設定しようとした場合</a>は <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> 例外が発生します。これは文書化しなければなりませんが、WebIDL 文書では暗黙のうちにマークされているだけです。</p>\n<p>ゲッターが例外を発生させるのは珍しいことですが、発生する場合がいくつかあります。この場合、 <code>[GetterThrows]</code> 注釈が使用されます。ここでも、プロパティページの構文の節に、例外の項がなければなりません。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>partial <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Blob</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>GetterThrows<span class=\"token punctuation\">]</span>\n  readonly attribute unsigned long long size<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"例外を発生させない","title":"例外を発生させない","isH3":true,"content":"<p>Webidl の意味論に従わない場合、<code>[SetterThrows]</code> や <code>[GetterThrows]</code> が設定されていなくても、例外が発生することがよくあります。例えば、厳格モードにおいて、読み取り専用のプロパティを新しい値に設定しようとすると、つまり、その暗黙のセッターを呼び出そうとすると、読み取り専用のプロパティは厳格モードで例外を発生します。</p>\n<p>大抵は互換性のためですが、この動作は時に煩わしいものです。これを防ぐために、無操作なセッターを作る（つまり、プロパティを新しい値に設定しようとする試みを黙って無視する）ために、 <code>[LenientSetter]</code> 注釈を使用することができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>partial <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Document</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>LenientSetter<span class=\"token punctuation\">]</span>\n  readonly attribute boolean fullscreen<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">[</span>LenientSetter<span class=\"token punctuation\">]</span>\n  readonly attribute boolean fullscreenEnabled<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>このような場合、プロパティの説明文に追加の文章が追加されます。例えば、</p>\n<p><em>このプロパティは読み取り専用ですが、変更されても（厳格なモードでも）例外が発生しません。セッターは無操作なので、無視されます</em>。</p>"}},{"type":"prose","value":{"id":"新しいオブジェクトまたは参照","title":"新しいオブジェクトまたは参照","isH3":true,"content":"<p>プロパティの返値は、内部オブジェクトのコピー、新しく生成された合成オブジェクト、または内部オブジェクトへの参照のいずれかになります。</p>\n<p><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a>（IDL <code>DOMString</code> など）、<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>（IDL <code>byte</code>, <code>octet</code>, <code>unsigned int</code> など）、 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> といった型の基本オブジェクトは常にコピーされるので特に注意すべき点はありません（これは JavaScript 開発者が求める当然の挙動です）。</p>\n<p>インターフェイスオブジェクトの場合、既定では、内部オブジェクトへの参照を返すことになっています。このことは、インターフェイスページの短い説明と、特定のサブページの説明の両方で言及しなければなりません。</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>Note:</strong> オブジェクトを返すプロパティで使われるキーワード <code>readonly</code> は、参照に適用されるものです（内部のオブジェクトは変更できません）。返されたオブジェクトのプロパティは、関連するインターフェイスで読み取り専用とされていても、変更することができます。</p>\n</div>\n<p>API は時として、<em>新しい</em>オブジェクト、あるいは内部のオブジェクトの<em>コピー</em>を返さなければなりません。このような場合、 WebIDL では <code>[NewObject]</code> 注釈を使用します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">[</span>NewObject<span class=\"token punctuation\">]</span>\n   readonly attribute TimeRanges buffered<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>この場合、 <code>buffered</code> を呼び出すたびに異なるオブジェクトが返されます。これを変更しても内部の値は変化せず、内部の値が変化しても各オブジェクトのインスタンスには影響がありません。ドキュメントでは、オブジェクトの隣に<em>新しい</em>という形容詞を使ってマークすることにします。</p>\n<p><em><strong><code>HTMLMediaElement.buffered</code></strong> プロパティは読み取り専用で、新しい {{domxref(\"TimeRanges\")}} オブジェクトを返します…</em></p>\n<p>および</p>\n<dl>\n  <dt id=\"domxrefhtmlmediaelement.bufferedreadonlyinline\"><em>{{domxref(\"HTMLMediaElement.buffered\")}}{{readonlyinline}}</em></dt>\n  <dd>\n    <p><em>新しい {{domxref(\"TimeRanges\")}} オブジェクトを返します …</em></p>\n  </dd>\n</dl>\n<p>コレクションオブジェクトへの参照（<code>HTMLCollection</code>, <code>HTMLFormElementsCollection</code>, <code>HTMLOptionsCollection</code> など、常に <code>[NewObject]</code> を含まない）の場合、そのオブジェクトへの変更が、返された参照を通して利用できることを明確にします。このことを示すために、インターフェイスの説明とサブページの両方で、コレクションを<strong>生きた</strong> <code>HTMLCollection</code> （または <code>HTMLFormElementsCollections</code> や <code>HTMLOptionsCollection</code>）として修飾しています。</p>\n<p>例えば、</p>\n<dl>\n  <dt id=\"domxrefhtmlformelement.elementsreadonlyinline\">{{domxref(\"HTMLFormElement.elements\")}}{{readonlyinline}}</dt>\n  <dd>\n    <p>生きた {{domxref(\"HTMLFormControlsCollection\")}} を返します…</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"ワーカーでの使用可否","title":"ワーカーでの使用可否","isH3":true,"content":"<p>ワーカーにおける個々のプロパティの使用可否は WebIDL にも記載されています。プロパティの場合、既定の使用条件は <code>interface</code> （特別なマークがない場合に限り <a href=\"/ja/docs/Web/API/Window\"><code>Window</code></a> コンテキストで使用可能）または <code>partial interface</code> で定義されているものと同じです。</p>\n<p>文書化する場合、サブページには \"構文\" の直前に、ウェブワーカーで利用可能かどうかを示す文を記述する必要があります。</p>"}},{"type":"prose","value":{"id":"環境設定","title":"環境設定","isH3":true,"content":"<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>Note:</strong> この情報は Gecko 固有のものであり、ブラウザー互換性の節でのみ使用すべきものです。</p>\n</div>\n<p>Gecko では、いくつかのプロパティの使用可否は、環境設定によって制御されている場合があります。これは WebIDL でもマークされています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">[</span>Pref<span class=\"token operator\">=</span><span class=\"token string\">\"media.webvtt.enabled\"</span><span class=\"token punctuation\">]</span>\n    readonly attribute TextTrackList<span class=\"token operator\">?</span> textTracks<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ここで <code>media.webvtt.enabled</code> は <code>textTracks</code> プロパティを制御します。</p>\n<div class=\"notecard note\" id=\"sect6\">\n  <p><strong>Note:</strong> 環境設定の既定値は、 WebIDL では直接利用できません（Gecko を使用する製品ごとに異なる場合があります）。</p>\n</div>"}},{"type":"prose","value":{"id":"メソッド","title":"メソッド","isH3":false,"content":"<p>メソッド名の後に括弧があることで、そのメソッドの定義を認識することができます。</p>"}},{"type":"prose","value":{"id":"メソッド名","title":"メソッド名","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>DOMString <span class=\"token function\">canPlayType</span><span class=\"token punctuation\">(</span>DOMString type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>このメソッドの名前は <code>canPlayType</code> で、<code>HTMLMediaElement</code> インターフェイスに属しているため、ドキュメントでは <code>HTMLMediaElement.canPlayType()</code> （メソッドであることを示す括弧を付けて） と呼ぶことにしています。ページへのリンクは、コンテキストが明白で曖昧でない場合、インターフェイスのプレフィックスを使用する {{domxref('HTMLMediaElement.canPlayType()')}} か、接頭辞を使用しない {{domxref('HTMLMediaElement.canPlayType', 'canPlayType()')}} かのどちらかで行われます。括弧は常に付けるようにしてください。</p>"}},{"type":"prose","value":{"id":"引数","title":"引数","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>TextTrack <span class=\"token function\">addTextTrack</span><span class=\"token punctuation\">(</span>TextTrackKind kind<span class=\"token punctuation\">,</span>\n                       optional DOMString label <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n                       optional DOMString language <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>メソッドの引数は、メソッドサブページの構文の節に記載されています。 WebIDL では、括弧の間にカンマで区切られたリストとして順番に記載されています。それぞれの引数には名前（上記参照）と型（例：<code>'？'</code>は <code>null</code>値が有効であることを意味します）があります。マークされている場合、引数をメソッド呼び出しに含めることは任意であり、構文の節に記載する際に {{OptionalInline}} フラグを指定する必要があります。引数の既定値は、等号 (<code>'='</code>) の後に表示されます。</p>"}},{"type":"prose","value":{"id":"返値の型","title":"返値の型","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>DOMString <span class=\"token function\">canPlayType</span><span class=\"token punctuation\">(</span>DOMString type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>返値の型は括弧の中で最初に示します。上記の場合、値は <code>DOMString</code> 型のオブジェクトです。疑問符 (<code>'?'</code>) が続く場合、 <code>null</code> という値も返すことができ、ドキュメントではこれがどのような場合に起こり得るかを説明しなければなりません。このように疑問符がない場合、その返値は <code>null</code> になることはありません。</p>\n<p>キーワード <code>void</code> は、返値が存在しないことを意味します。これは返値の型ではありません。WebIDL のエントリが <code>void</code> と書かれている場合、ドキュメントの返値の節にはシンプルに「なし」だけが書かれているはずです。</p>"}},{"type":"prose","value":{"id":"例外の発生_2","title":"例外の発生","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">[</span>Throws<span class=\"token punctuation\">]</span>\n   <span class=\"token keyword\">void</span> <span class=\"token function\">fastSeek</span><span class=\"token punctuation\">(</span>double time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>いくつかのメソッドは例外を投げることができます。これは <code>[Throws]</code> という注釈でマークされます。このような場合、メソッドページの構文の節に例外の項がなければなりません。例外のリストと例外を発生させる条件は、その API の仕様にテキスト情報として記載されています。</p>\n<p>例外の中には、明示的にマークされていないものの、 JavaScript のバインディングによって定義されているものもあることに注意してください。<a href=\"https://heycam.github.io/webidl/#es-enumeration\" class=\"external\" rel=\" noopener\">不正な列挙値を設定しようとした場合</a> (JavaScript の文字列にマッピングされます）は文書化する必要がありますが、WebIDL 文書では暗黙のうちにマークされているだけです。</p>\n<p>これらの<a href=\"/en-US/docs/Web/API/SubtleCrypto/importKey\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">例外の節 (en-US)</a>のいずれかを見てみてください。</p>"}},{"type":"prose","value":{"id":"ワーカーでの使用可否_2","title":"ワーカーでの使用可否","isH3":true,"content":"<p>ワーカーにおける個々のメソッドの可用性は、WebIDL にも記載されています。メソッドの場合、既定では <code>interface</code> （特別なマークがない場合に限り <a href=\"/ja/docs/Web/API/Window\"><code>Window</code></a> コンテキストで利用可能）または <code>partial interface</code> として定義されているものと同じです。</p>\n<p>ドキュメントでは、サブページの構文の節の直前に、ウェブワーカーで利用可能かどうかを示す文を記述する必要があります。</p>"}},{"type":"prose","value":{"id":"環境設定_2","title":"環境設定","isH3":true,"content":"<div class=\"notecard note\" id=\"sect7\">\n  <p><strong>Note:</strong> この情報は Gecko 固有のものであり、ブラウザーの互換性の節でのみ使用するようにしてください。</p>\n</div>\n<p>Gecko では、いくつかのプロパティの利用可否は環境設定によって制御される場合があります。これは WebIDL でもマークされています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">[</span>Pref<span class=\"token operator\">=</span><span class=\"token string\">\"media.webvtt.enabled\"</span><span class=\"token punctuation\">]</span>\n   TextTrack <span class=\"token function\">addTextTrack</span><span class=\"token punctuation\">(</span>TextTrackKind kind<span class=\"token punctuation\">,</span>\n                          optional DOMString label <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n                          optional DOMString language <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ここでは <code>media.webvtt.enabled</code> が <code>addTextTrack()</code> メソッドを制御しています。</p>\n<div class=\"notecard note\" id=\"sect8\">\n  <p><strong>Note:</strong> 環境設定の既定値は、WebIDL では直接利用できません（Gecko を使用する製品ごとに異なる場合があります）。</p>\n</div>"}},{"type":"prose","value":{"id":"特殊なメソッド","title":"特殊なメソッド","isH3":false,"content":"<p>いくつかのメソッドは、WebIDL の通常のメソッドとしてではなく、特別なキーワードとして記載されており、特定の標準的な JavaScript のメソッドに変換されます。</p>"}},{"type":"prose","value":{"id":"tostring_および_tojson","title":"toString() および toJSON()","isH3":true,"content":"<p>文字列化子とは、あるインターフェイスに基づくオブジェクトが、文字列を期待するコンテキストでどのように解決されるかを指定するものです。（<a href=\"#%E6%96%87%E5%AD%97%E5%88%97%E5%8C%96%E5%AD%90\">文字列化子</a>の節を参照してください。）さらに、このキーワードは <code>toString()</code> に対応付けられ、次のように定義されます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>stringifier<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>toString()</code> メソッドは、インターフェイスの他のメソッドと同様に掲載され、独自のサブページがあります（例: <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Range/toString\"><code>Range.toString()</code> <small>(en-US)</small></a>）。</p>\n<p>JSON 化子は <code>toJSON()</code> に対応付けられ、次のように定義されます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>jsonifier<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Gecko 版</span>\nserializer<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 標準版</span>\n</code></pre></div>\n<p><code>toJSON()</code> メソッドは他のインターフェイスのメソッドと同様に掲載され、独自のサブページがあります（例: <a href=\"/ja/docs/Web/API/Performance/toJSON\"><code>Performance.toJSON()</code></a>）。</p>\n<div class=\"notecard note\" id=\"sect9\">\n  <p><strong>Note:</strong> WebIDL 仕様では、<code>jsonifier</code> の代わりに <code>serializer</code> を使用しています。これは Gecko では使われていません。非標準的な、おそらく初期の提案である <code>jsonifier</code> だけが mozilla-central で見つかりました。</p>\n</div>"}},{"type":"prose","value":{"id":"反復子風のメソッド","title":"反復子風のメソッド","isH3":true,"content":"<p>インターフェイスは <em>iterable</em> として定義することができます。これは、 <code>entries()</code>, <code>keys()</code>, <code>values()</code>, <code>forEach()</code> といったメソッドを持つことを意味します。また、このインターフェイスを実装したオブジェクトに対して <a href=\"/ja/docs/Web/JavaScript/Reference/Statements/for...of\"><code>for...of</code></a> を使用することに対応しています。</p>\n<p>反復処理には、<em>値反復子</em>と<em>組反復子</em>の 2 種類があります。</p>\n<h4 id=\"値反復子\">値反復子</h4>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>iterable<span class=\"token operator\">&lt;</span>valueType<span class=\"token operator\">&gt;</span>\n</code></pre></div>\n<p>この反復子は <em>valueType</em> 型の値に対して反復処理を行います。生成されるメソッドは次のようになります。</p>\n<ul>\n  <li><code>entries()</code> は添字（すなわち <code>unsigned long</code>）の<a href=\"/ja/docs/Web/JavaScript/Reference/Iteration_protocols\">反復子</a>を返します。</li>\n  <li><code>values()</code> は値の<a href=\"/ja/docs/Web/JavaScript/Reference/Iteration_protocols\">反復子</a>を返します。</li>\n  <li><code>keys()</code> はキー、すなわち添字（<code>unsigned long</code>）の<a href=\"/ja/docs/Web/JavaScript/Reference/Iteration_protocols\">反復子</a>を返します。値反復子の場合、 <code>keys()</code> と <code>entries()</code> は等価です。</li>\n  <li><code>forEach()</code> はキーで、リストの各項目に対応するコールバック関数を呼び出す<a href=\"/ja/docs/Web/JavaScript/Reference/Iteration_protocols\">反復子</a>を返します。</li>\n</ul>\n<p>このような反復子は，<code>for (var p in object)</code> という構文を <code>for (var p in object.entries())</code> の省略形として使うことを可能にします。インターフェイスの説明の中に、このことに関する文を追加しています。</p>\n<div class=\"notecard note\" id=\"sect10\">\n  <p><strong>Note:</strong> 以下の場合、反復処理する値の組は 2 つの異なる方法で定義することができます。</p>\n  <ol>\n    <li>webidl ファイルの外側で、それに付随する散文で。このような散文は仕様書にあり、通常、次のように始まります。<em>\"<a href=\"https://heycam.github.io/webidl/#dfn-values-to-iterate-over\" class=\"external\" rel=\" noopener\">反復処理する値</a>...\"</em>.</li>\n    <li>webidl ファイルでは、インターフェイスがインデックス付きプロパティに対応している場合、つまり、インターフェイスが <code>unsigned long</code> 型の引数を持つ <code>getter</code> メソッドを持つ場合、暗黙のうちに、インデックス付きプロパティに対応するようにします。</li>\n  </ol>\n</div>\n<h4 id=\"組反復子\">組反復子</h4>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>iterable<span class=\"token operator\">&lt;</span>keyType<span class=\"token punctuation\">,</span> valueType<span class=\"token operator\">&gt;</span>\n</code></pre></div>\n<p>この反復子は、<em>valueType</em> 型の値と <em>keyType</em> 型のキーを反復処理します。生成されるメソッドは次のようになります。</p>\n<ul>\n  <li><code>entries()</code> は（<em>keyType</em> 型の）索引の<a href=\"/ja/docs/Web/JavaScript/Reference/Iteration_protocols\">反復子</a>を返します。例: E<a href=\"/ja/docs/Web/API/FormData/entries\"><code>FormData.entries()</code></a></li>\n  <li><code>values()</code> は値の<a href=\"/ja/docs/Web/JavaScript/Reference/Iteration_protocols\">反復子</a>を返します。例: <a href=\"/ja/docs/Web/API/FormData/values\"><code>FormData.values()</code></a></li>\n  <li><code>keys()</code> はキーの<a href=\"/ja/docs/Web/JavaScript/Reference/Iteration_protocols\">反復子</a>を返します。例: <a href=\"/ja/docs/Web/API/FormData/keys\"><code>FormData.keys()</code></a></li>\n  <li>Once <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1216751\" class=\"external\" rel=\" noopener\">バグ&nbsp;1216751</a> lands, <code>forEach()</code>.</li>\n</ul>\n<p>このようなイテレータを使うと，<code>for (var p in object)</code> という構文を， <code>for (var p in object.entries())</code> の省略形として使うことができます．インターフェイスの説明の中に、それに関する文を追加します。例: <a href=\"/ja/docs/Web/API/FormData\"><code>FormData</code></a>.</p>\n<div class=\"notecard note\" id=\"sect11\">\n  <p><strong>Note:</strong> 繰り返す値の組は、 webidl ファイルではなく、それに付随する散文で定義されます。そのような散文は仕様書にあり、通常、次のように始まります。<em>\"The <a href=\"https://heycam.github.io/webidl/#dfn-value-pairs-to-iterate-over\" class=\"external\" rel=\" noopener\">value pairs to iterate over</a>...\"</em> で始まります。</p>\n  <p>例えば、<a href=\"/ja/docs/Web/API/FormData\"><code>FormData</code></a>の場合、仕様書の中に次のように書かれています。<em>\"The <a href=\"https://heycam.github.io/webidl/#dfn-value-pairs-to-iterate-over\" class=\"external\" rel=\" noopener\">value pairs to iterate over</a> are the <a href=\"https://xhr.spec.whatwg.org/#concept-formdata-entry\" class=\"external\" rel=\" noopener\">entries</a> with the key is the <a href=\"https://xhr.spec.whatwg.org/#concept-formdata-entry-name\" class=\"external\" rel=\" noopener\">name</a> and the value the <a href=\"https://xhr.spec.whatwg.org/#concept-formdata-entry-value\" class=\"external\" rel=\" noopener\">value</a>. \"</em></p>\n</div>"}},{"type":"prose","value":{"id":"集合風メソッド","title":"集合風メソッド","isH3":true,"content":"<p>このインターフェイスは <em>set-like</em> として定義することができます。つまり、順序付きの値の集合を表すもので、 <code>entries()</code>, <code>keys()</code>, <code>values()</code>, <code>forEach(),</code> と <code>has()</code> (<code>size</code> 属性も持ちます) のメソッドを持っています。また、このインターフェイスを実装したオブジェクトに対して <a href=\"/ja/docs/Web/JavaScript/Reference/Statements/for...of\"><code>for...of</code></a> を使用することもサポートしています。 set-like には、接頭辞として <code>readonly</code> を付けることも、付けないこともできます。read-only でない場合は、セットを変更するためのメソッド <code>add()</code>, <code>clear()</code>, <code>delete()</code> も実装されています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>setlike<span class=\"token operator\">&lt;</span>valueType<span class=\"token operator\">&gt;</span>\n</code></pre></div>\n<p>生成されるプロパティは以下の通りです。</p>\n<ul>\n  <li><code>entries()</code> はインデックスの<a href=\"/ja/docs/Web/JavaScript/Reference/Iteration_protocols\">反復子</a>を返します。例: <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/NodeList/entries\"><code>NodeList.entries()</code> <small>(en-US)</small></a></li>\n  <li><code>values()</code> は値の<a href=\"/ja/docs/Web/JavaScript/Reference/Iteration_protocols\">反復子</a>を返します。例: <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/NodeList/values\"><code>NodeList.values()</code> <small>(en-US)</small></a></li>\n  <li><code>keys()</code> はキーの<a href=\"/ja/docs/Web/JavaScript/Reference/Iteration_protocols\">反復子</a>を返します。例: <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/NodeList/keys\"><code>NodeList.keys()</code> <small>(en-US)</small></a></li>\n  <li><code>forEach()</code></li>\n</ul>\n<p>set-like 宣言の前に read-only が付かない場合、以下のメソッドも生成されます。</p>\n<ul>\n  <li><code>add()</code> は項目を追加します。例: <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/FontFaceSet\"><code>FontFaceSet</code> <small>(en-US)</small></a> の <code>.add()</code> メソッド</li>\n  <li><code>clear()</code> は集合風構造を空にします。例: <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/FontFaceSet\"><code>FontFaceSet</code> <small>(en-US)</small></a> の <code>.clear()</code> メソッド</li>\n  <li><code>delete()</code> は項目を取り除きます。例: <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/FontFaceSet\"><code>FontFaceSet</code> <small>(en-US)</small></a> の <code>.delete()</code> メソッド</li>\n</ul>\n<p>このような集合インターフェイスでは、<code>for (var p in object)</code> という構文を <code>for (var p in object.entries())</code> の省略形として使うこともできます。</p>"}},{"type":"prose","value":{"id":"特殊な動作","title":"特殊な動作","isH3":false,"content":"<p>IDLのメンバーには、適切なページで注意すべき特別な動作を示すものがあります。</p>"}},{"type":"prose","value":{"id":"文字列化子","title":"文字列化子","isH3":true,"content":"<p>インターフェイスに <code>toString()</code> メソッドを追加することに加えて、 <a href=\"#tostring_and_tojson\">toString() と toJSON()</a> で説明したように、文字列化子はオブジェクトインスタンスが文字列として使われたときに既定以外の文字列を返すことを示すこともできます。（既定値は通常、オブジェクトの JSON 表現です）。正確な方法は、 IDL で指定された方法によります。どのようにするかにかかわらず、既定以外の動作はインターフェイスページに記述する必要があります。</p>\n<p><code>stringifier</code> キーワードが属性名に付随している場合、オブジェクト名を参照することは属性名を参照することと同じ結果になります。次のような IDL を考えてみましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">interface</span> <span class=\"token class-name\">InterfaceIdentifier</span> <span class=\"token punctuation\">{</span>\n  stringifier attribute DOMString DOMString name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>このインターフェイスをベースとしたクラスでは、以下のコード行が相当します。この動作は、インターフェイスページだけでなく、プロパティページにも記載する必要があります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>interfaceIdentifier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>interfaceIdentifier<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>stringifier</code> キーワードを単独で使用した場合、上記のようにインターフェイスのオブジェクトを使用することができますが、その動作はソースコードで定義されています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">interface</span> <span class=\"token class-name\">InterfaceIdentifier</span> <span class=\"token punctuation\">{</span>\n  stringifier<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>インターフェイスリファレンスが実際に何をするのかを知るには、インターフェイスの仕様を参照するか、インターフェイスを実験してその出力を判断してください。</p>"}},{"type":"prose","value":{"id":"コンストラクター","title":"コンストラクター","isH3":false,"content":"<p>コンストラクターは WebIDL では少し隠されています。メインインターフェイスの注釈として記載されています。</p>"}},{"type":"prose","value":{"id":"無名コンストラクター","title":"無名コンストラクター","isH3":true,"content":"<p>これは、コンストラクターの最も一般的なケースです。与えられたインターフェイス A のコンストラクターは、 <code>a = new A(parameters);</code> のように使うことができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">[</span>Constructor<span class=\"token punctuation\">,</span> Func<span class=\"token operator\">=</span><span class=\"token string\">\"MessageChannel::Enabled\"</span><span class=\"token punctuation\">,</span>\n  Exposed<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>Window<span class=\"token punctuation\">,</span>Worker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">interface</span> <span class=\"token class-name\">MessageChannel</span> <span class=\"token punctuation\">{</span>…<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>同じインターフェイスを持つコンストラクターは、インターフェイスの <code>Constructor</code> 注釈を使用して定義します。括弧と引数のリストがあってもなくても構いません（上の例のように）。名前のないコンストラクターはすべてサブページで文書化します。たとえば、上の例では <em>Web/API/MessageChannel/MessageChannel</em> というスラッグと <code>MessageChannel()</code> というタイトルを付けています。</p>\n<p>無名コンストラクターのもうひとつの例、引数付きのものです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">[</span><span class=\"token function\">Constructor</span><span class=\"token punctuation\">(</span>DOMString type<span class=\"token punctuation\">,</span> optional MessageEventInit eventInitDict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n Exposed<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>Window<span class=\"token punctuation\">,</span>Worker<span class=\"token punctuation\">,</span>System<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n   <span class=\"token keyword\">interface</span> <span class=\"token class-name\">MessageEvent</span> <span class=\"token operator\">:</span> Event <span class=\"token punctuation\">{</span>…<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>また、引数のリストが異なる無名のコンストラクターが複数存在することもあります。すべての構文は、ひとつのサブページで説明されています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">[</span><span class=\"token function\">Constructor</span><span class=\"token punctuation\">(</span>DOMString url<span class=\"token punctuation\">,</span> <span class=\"token constant\">URL</span> base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n <span class=\"token function\">Constructor</span><span class=\"token punctuation\">(</span>DOMString url<span class=\"token punctuation\">,</span> optional DOMString base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n Exposed<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>Window<span class=\"token punctuation\">,</span>Worker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">interface</span> <span class=\"token class-name\">URL</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"名前付きコンストラクター","title":"名前付きコンストラクター","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">[</span>NamedConstructor<span class=\"token operator\">=</span><span class=\"token function\">Image</span><span class=\"token punctuation\">(</span>optional unsigned long width<span class=\"token punctuation\">,</span> optional unsigned long height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">interface</span> <span class=\"token class-name\">HTMLImageElement</span> <span class=\"token operator\">:</span> HTMLElement <span class=\"token punctuation\">{</span>…\n</code></pre></div>\n<p>名前付きコンストラクターとは、そのインターフェイスとは異なる名前を持つコンストラクターのことです。例えば、 <code>new Image(...)</code> は新しい <code>HTMLImageElement</code> オブジェクトを生成します。WebIDL では、インターフェイスに <code>NamedConstructor</code> という注釈をつけ、等号の後にコンストラクターの名前 (<code>'='</code>) を、括弧の中にはメソッドと同じ書式で引数を記述して定義します。</p>\n<p>特定のインターフェイスに複数の名前付きコンストラクターが存在することもありますが、これは非常に稀なケースで、そのような場合は名前ごとに 1 つのサブページが含まれます。</p>"}},{"type":"prose","value":{"id":"新しいコンストラクターの構文","title":"新しいコンストラクターの構文","isH3":true,"content":"<p>2019 年 9 月より、 WebIDL のコンストラクターの構文が更新されました。コンストラクターの構文には、インターフェイスの拡張属性が含まれなくなりました。</p>\n<div class=\"code-example\"><pre class=\"brush: webidl notranslate\">[Constructor(DOMString str)]\n    interface MyInterface {\n     // …\n};\n</pre></div>\n<p>新しい仕様では、代わりに <code>constructor</code> という名前のメソッドに似た構文を使用し、返値の型を明示的に定義しない、次のような書き方をします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">interface</span> <span class=\"token class-name\">MyInterface</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>DOMString str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>つまり、コンストラクターに拡張属性を指定できるようになり、すべてのコンストラクターが例外を発生することを前提にしなくなりました。コンストラクターが例外を発生する場合は、 <code>[Throws]</code> がそのことを示すのに使われます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">interface</span> <span class=\"token class-name\">MyInterface</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>Throws<span class=\"token punctuation\">]</span> <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>すべての仕様が新しい構文に更新されるとは限りませんので、おそらく両方の構文に遭遇することになるでしょう。そのため、ここでは引き続き両方の型の構文を取り上げます。</p>"}},{"type":"prose","value":{"id":"ワーカーでの使用可否_3","title":"ワーカーでの使用可否","isH3":true,"content":"<p>コンストラクターの使用条件は、定義されているインターフェイス（または部分インターフェイス）と同じです。サブページでは、メソッドと同じようにこの情報を提供します。</p>"}},{"type":"prose","value":{"id":"環境設定_3","title":"環境設定","isH3":true,"content":"<p>コンストラクターは、定義されているインターフェイス、または部分インターフェイスと同じ環境設定によって制御されます。サブページでは、メソッドと同じようにこの情報を提供します。</p>"}}],"toc":[{"text":"WebIDL ファイルの場所","id":"webidl_ファイルの場所"},{"text":"WebIDL のさまざまな方言","id":"webidl_のさまざまな方言"},{"text":"インターフェイス","id":"インターフェイス"},{"text":"プロパティ","id":"プロパティ"},{"text":"メソッド","id":"メソッド"},{"text":"特殊なメソッド","id":"特殊なメソッド"},{"text":"特殊な動作","id":"特殊な動作"},{"text":"コンストラクター","id":"コンストラクター"}],"summary":"API についての記事を書くとき、情報源はたくさんあります。仕様書にはモデルと同様に何が実装されるべきかが記述され、実装には実際にブラウザーに置かれたものが記述されています。 WebIDL ファイルは、 API に関する情報のすべてではありませんが、多くの情報を提供する非常に凝縮された方法です。この記事では、 WebIDL 構文を理解するためのリファレンスを提供します。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Information contained in a WebIDL file","locale":"en-US","native":"English (US)"},{"title":"Information contained in a WebIDL file","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/mdn/writing_guidelines/howto/write_an_api_reference/information_contained_in_a_webidl_file","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/mdn/writing_guidelines/howto/write_an_api_reference/information_contained_in_a_webidl_file/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/MDN","title":"MDN Web Docs プロジェクト"},{"uri":"/ja/docs/MDN/Writing_guidelines","title":"執筆ガイドライン"},{"uri":"/ja/docs/MDN/Writing_guidelines/Howto/Write_an_API_reference","title":"API リファレンスの書き方"},{"uri":"/ja/docs/MDN/Writing_guidelines/Howto/Write_an_API_reference/Information_contained_in_a_WebIDL_file","title":"WebIDL ファイルに含まれる情報"}],"pageTitle":"WebIDL ファイルに含まれる情報 - MDN Web Docs プロジェクト | MDN","noIndexing":false}}