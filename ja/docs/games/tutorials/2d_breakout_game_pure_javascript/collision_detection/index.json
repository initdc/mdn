{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"衝突検出","mdn_url":"/ja/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript/Collision_detection","locale":"ja","native":"日本語","sidebarHTML":"\n  <ol>\n    <li class=\"toggle\">\n        <details>\n            <summary>Web のゲーム開発紹介</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Games/Introduction\">Web のゲーム開発紹介</a></li>\n              <li><a href=\"/ja/docs/Games/Anatomy\">ビデオゲームとの違い</a></li>\n              <li><a href=\"/ja/docs/Games/Examples\">Examples</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>ツール</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Web/API/Canvas_API\">Canvas</a></li>\n              <li><a href=\"/ja/docs/Web/CSS\">CSS</a></li>\n              <li><a href=\"/ja/docs/Web/API/Fullscreen_API\">Full screen</a></li>\n              <li><a href=\"/ja/docs/Web/API/Gamepad_API\">Gamepad</a></li>\n              <li><a href=\"/ja/docs/Web/API/IndexedDB_API\">IndexedDB</a></li>\n              <li><a href=\"/ja/docs/Web/JavaScript\">JavaScript</a></li>\n              <li><a href=\"/ja/docs/Web/API/Pointer_Lock_API\">Pointer Lock</a></li>\n              <li><a href=\"/ja/docs/Web/SVG\">SVG</a></li>\n              <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">Typed Arrays</a></li>\n              <li><a href=\"/ja/docs/Web/API/Web_Audio_API\">Web Audio</a></li>\n              <li><a href=\"/ja/docs/Web/API/WebGL_API\">WebGL</a></li>\n              <li><a href=\"/ja/docs/Web/API/WebRTC_API\">WebRTC</a></li>\n              <li><a href=\"/ja/docs/Web/API/WebSockets_API\">WebSockets</a></li>\n              <li><a href=\"/ja/docs/Web/API/WebVR_API\">WebVR</a></li>\n              <li><a href=\"/ja/docs/Web/API/Web_Workers_API\">Web Workers</a></li>\n              <li><a href=\"/ja/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>ゲーム開発テクニック</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Games/Techniques/Async_scripts\">asm.js の同期スクリプトを利用する</a></li>\n              <li><a href=\"/ja/docs/Web/Apps/Developing/Optimizing_startup_performance\">起動パフォーマンスを最適化する</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/WebRTC_data_channels\">ピア通信チャンネルとして WebRTC を利用する</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Efficient_animation_for_web_games\">Web ゲームの効率的なアニメーション</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Audio_for_Web_Games\">Web ゲーム向けの音</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/2D_collision_detection\">2D 衝突検出</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Tilemaps\">タイルとタイルマップの概要</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Web上の 3D ゲームの概要</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web\">Web上の 3D ゲームの概要</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/Basic_theory\">基本の 3D理論の説明</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_A-Frame\">A-Frame</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_Babylon.js\">Babylon.js</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_PlayCanvas\">PlayCanvas を利用した基本的なデモの制作</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_Three.js\">Three.js を使った基本的なデモ製作</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/WebVR\">WebVR</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_collision_detection\">3D 衝突検出の概要</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_collision_detection/Bounding_volume_collision_detection_with_THREE.js\">THREE.js を使ったバウンディングボリューム衝突検出</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Implementing game control mechanisms</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Games/Techniques/Control_mechanisms\">Control mechanisms</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Control_mechanisms/Mobile_touch\">Mobile touch</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Control_mechanisms/Desktop_with_mouse_and_keyboard\">Desktop with mouse and keyboard</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Control_mechanisms/Desktop_with_gamepad\">Desktop with gamepad</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Control_mechanisms/Other\">Other</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>チュートリアル</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript\">そのままの JavaScript を使ったブロックくずしゲーム</a></li>\n              <li><a href=\"/ja/docs/Games/Tutorials/2D_breakout_game_Phaser\">Phaser を使ったブロックくずしゲーム</a></li>\n              <li><a href=\"/ja/docs/Games/Tutorials/HTML5_Gamedev_Phaser_Device_Orientation\">デバイス回転方向を使った 2D 迷路ゲーム</a></li>\n              <li><a href=\"https://mozdevs.github.io/html5-games-workshop/en/guides/platformer/start-here/\">Phaser を使った 2D プラットフォームゲーム</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>ゲームを公開する</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Games/Publishing_games\">ゲームを公開するには</a></li>\n              <li><a href=\"/ja/docs/Games/Publishing_games/Game_distribution\">ゲームの配信</a></li>\n              <li><a href=\"/ja/docs/Games/Publishing_games/Game_promotion\">ゲームのプロモーション</a></li>\n              <li><a href=\"/ja/docs/Games/Publishing_games/Game_monetization\">ゲームのマネタイズ</a></li>\n            </ol>\n        </details>\n    </li>\n  </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ja/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript/Build_the_brick_field\">« 前のページ</a></li>\n    <li><a class=\"button minimal\" href=\"/ja/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript/Track_the_score_and_win\">次のページ »</a></li>\n</ul>\n<p>これは、<a href=\"/ja/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript\">ゲーム開発キャンバスチュートリアル</a> の 10 ステップ中 <strong>7 ステップ目</strong>になります。このレッスンを終えた後のソースコードは、<a href=\"https://github.com/end3r/Gamedev-Canvas-workshop/blob/gh-pages/lesson07.html\" class=\"external\" rel=\" noopener\">Gamedev-Canvas-workshop/lesson7.html</a>で見ることができます。</p>\n<p>ブロックはすでに画面の内側へ現れていますが、ボールがその中を通過していくので、ゲームはまだそれほど面白くはありません。レンガを跳ね返して壊せるように、衝突判定を追加することを考えなければなりません。</p>\n<p>もちろん、これをどのように実装するかは自由ですが、ボールが矩形に触れているかどうかを計算するのは大変です。なぜなら、キャンバスにはこのためのヘルパー関数がないからです。このチュートリアルでは、可能な限り簡単な方法で実装することにします。ボールの中心が与えられたレンガのどれかに衝突しているかどうかをチェックします。これは毎回完璧な結果を得られるわけではありませんし、衝突検出を行うにはもっと洗練された方法がありますが、基本的な概念を学ぶにはこの著作物で十分です。</p>"}},{"type":"prose","value":{"id":"衝突検出関数","title":"衝突検出関数","isH3":false,"content":"<p>最初の第一歩として、毎フレーム描画されるたびに全てのブロックを通してループし、ひとつひとつのブロックの位置をボールの座標と比較する衝突検出関数を作成しましょう。コードがより読みやすくなるように、衝突検出のループの中でブロックオブジェクトを保存する変数 <code>b</code> を定義します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">collisionDetection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> c <span class=\"token operator\">&lt;</span> brickColumnCount<span class=\"token punctuation\">;</span> c<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> r <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> r <span class=\"token operator\">&lt;</span> brickRowCount<span class=\"token punctuation\">;</span> r<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> bricks<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 計算</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>もしボールの中央がブロックの 1 つの座標の内部だったらボールの向きを変えます。ボールの中央がブロックの内部にあるためには次の 4 つの命題が全て真でなければなりません。</p>\n<ul>\n  <li>ボールの x 座標がブロックの x 座標より大きい</li>\n  <li>ボールの x 座標がブロックの x 座標とその幅の和より小さい</li>\n  <li>ボールの y 座標がブロックの y 座標より大きい</li>\n  <li>ボールの y 座標がブロックの y 座標とその高さの和より小さい</li>\n</ul>\n<p>コードに書き下ろしてみましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">collisionDetection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> c <span class=\"token operator\">&lt;</span> brickColumnCount<span class=\"token punctuation\">;</span> c<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> r <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> r <span class=\"token operator\">&lt;</span> brickRowCount<span class=\"token punctuation\">;</span> r<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> bricks<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&gt;</span> b<span class=\"token punctuation\">.</span>x <span class=\"token operator\">&amp;&amp;</span> x <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>x<span class=\"token operator\">+</span>brickWidth <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">&gt;</span> b<span class=\"token punctuation\">.</span>y <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>y<span class=\"token operator\">+</span>brickHeight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        dy <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>dy<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>上記のブロックを自分のコードの <code>keyUpHandler()</code> 関数の下に追加してください。</p>"}},{"type":"prose","value":{"id":"ブロックが当たった後に消えるようにする","title":"ブロックが当たった後に消えるようにする","isH3":false,"content":"<p>上記のコードは期待したとおり動作し、ボールの向きを変えるはずです。問題はブロックがそのままとどまっているということです。ボールに既に当たったブロックを取り除く方法を考え出さなければなりません。これはそれぞれのブロックを画面上に描画したいかどうかを示す新たなパラメーターを追加することで達成できます。ブロックを初期化している部分のコードで、それぞれのブロックオブジェクトに <code>status</code> プロパティを追加しましょう。次の部分のコードをハイライトした行で示したように更新してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> bricks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> c <span class=\"token operator\">&lt;</span> brickColumnCount<span class=\"token punctuation\">;</span> c<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  bricks<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> r <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> r <span class=\"token operator\">&lt;</span> brickRowCount<span class=\"token punctuation\">;</span> r<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    bricks<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>次に、それぞれのブロックを描画する前に <code>status</code> プロパティの値を <code>drawBricks()</code> 関数で確認します。もし <code>status</code> が <code>1</code> なら描画します。でももし <code>0</code> ならそのブロックは既にボールに当たっていますから、これ以上画面上に描画されてほしくありません。自分の <code>drawBricks()</code> 関数を次のように更新してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">drawBricks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> c <span class=\"token operator\">&lt;</span> brickColumnCount<span class=\"token punctuation\">;</span> c<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> r <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> r <span class=\"token operator\">&lt;</span> brickRowCount<span class=\"token punctuation\">;</span> r<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bricks<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> brickX <span class=\"token operator\">=</span> c <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>brickWidth <span class=\"token operator\">+</span> brickPadding<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> brickOffsetLeft<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> brickY <span class=\"token operator\">=</span> r <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>brickHeight <span class=\"token operator\">+</span> brickPadding<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> brickOffsetTop<span class=\"token punctuation\">;</span>\n        bricks<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> brickX<span class=\"token punctuation\">;</span>\n        bricks<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> brickY<span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">beginPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">rect</span><span class=\"token punctuation\">(</span>brickX<span class=\"token punctuation\">,</span> brickY<span class=\"token punctuation\">,</span> brickWidth<span class=\"token punctuation\">,</span> brickHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">\"#0095DD\"</span><span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">closePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"衝突検出関数で状態を追跡、更新する","title":"衝突検出関数で状態を追跡、更新する","isH3":false,"content":"<p>ここでは <code>collisionDetection()</code> 関数内で <code>status</code> プロパティをブロックに紐づけていきます。もしブロックがアクティブ (状態が <code>1</code>) なら衝突が起きるかどうか確認します。もし衝突が起きるのなら、画面上に描画されないようにそのブロックの状態を <code>0</code> に設定します。自分の <code>collisionDetection()</code> 関数を以下に示すように更新してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">collisionDetection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> c <span class=\"token operator\">&lt;</span> brickColumnCount<span class=\"token punctuation\">;</span> c<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> r <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> r <span class=\"token operator\">&lt;</span> brickRowCount<span class=\"token punctuation\">;</span> r<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> bricks<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&gt;</span> b<span class=\"token punctuation\">.</span>x <span class=\"token operator\">&amp;&amp;</span> x <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> brickWidth <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">&gt;</span> b<span class=\"token punctuation\">.</span>y <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> brickHeight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          dy <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>dy<span class=\"token punctuation\">;</span>\n          b<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"衝突検出を有効にする","title":"衝突検出を有効にする","isH3":false,"content":"<p><code>collisionDetection()</code> 関数への呼び出しをメインの <code>draw()</code> 関数に追加して仕上げとします。次の行を <code>draw()</code> 関数の、 <code>drawPaddle()</code> の呼び出しのすぐ下に追加してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">collisionDetection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"コードを比べる","title":"コードを比べる","isH3":false,"content":"<p>これでボールの衝突検出がそれぞれのブロックに対してフレームごとに確認されるようになりました。ブロックを壊せるようになったのです。</p><p><iframe allowfullscreen=\"allowfullscreen\" width=\"756\" height=\"395\" src=\"https://jsfiddle.net/yumetodo/kaed3hbu/embedded/\" loading=\"lazy\"></iframe></p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> ボールの色をブロックに当たったときに変えましょう。</p>\n</div>"}},{"type":"prose","value":{"id":"次のステップ","title":"次のステップ","isH3":false,"content":"<p>着実にゴールに近づいています。では、先に進みましょう。第 8 章ではどのように<a href=\"/ja/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript/Track_the_score_and_win\">スコアと勝ち負けを記録するか</a>を見てみます。</p><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ja/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript/Build_the_brick_field\">« 前のページ</a></li>\n    <li><a class=\"button minimal\" href=\"/ja/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript/Track_the_score_and_win\">次のページ »</a></li>\n</ul>"}}],"toc":[{"text":"衝突検出関数","id":"衝突検出関数"},{"text":"ブロックが当たった後に消えるようにする","id":"ブロックが当たった後に消えるようにする"},{"text":"衝突検出関数で状態を追跡、更新する","id":"衝突検出関数で状態を追跡、更新する"},{"text":"衝突検出を有効にする","id":"衝突検出を有効にする"},{"text":"コードを比べる","id":"コードを比べる"},{"text":"次のステップ","id":"次のステップ"}],"summary":"これは、ゲーム開発キャンバスチュートリアル の 10 ステップ中 7 ステップ目になります。このレッスンを終えた後のソースコードは、Gamedev-Canvas-workshop/lesson7.htmlで見ることができます。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Collision detection","locale":"en-US","native":"English (US)"},{"title":"Detección de colisiones","locale":"es","native":"Español"},{"title":"Détection de collisions","locale":"fr","native":"Français"},{"title":"충돌 감지","locale":"ko","native":"한국어"},{"title":"Обнаружение столкновений","locale":"ru","native":"Русский"},{"title":"撞击处理","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/games/tutorials/2d_breakout_game_pure_javascript/collision_detection","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/games/tutorials/2d_breakout_game_pure_javascript/collision_detection/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Games","title":"ゲーム開発"},{"uri":"/ja/docs/Games/Tutorials","title":"チュートリアル"},{"uri":"/ja/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript","title":"純粋な JavaScript を使ったブロック崩しゲーム"},{"uri":"/ja/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript/Collision_detection","title":"衝突検出"}],"pageTitle":"衝突検出 - ゲーム開発 | MDN","noIndexing":false}}