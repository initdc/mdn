{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"仕上げ","mdn_url":"/ja/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript/Finishing_up","locale":"ja","native":"日本語","sidebarHTML":"\n  <ol>\n    <li class=\"toggle\">\n        <details>\n            <summary>Web のゲーム開発紹介</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Games/Introduction\">Web のゲーム開発紹介</a></li>\n              <li><a href=\"/ja/docs/Games/Anatomy\">ビデオゲームとの違い</a></li>\n              <li><a href=\"/ja/docs/Games/Examples\">Examples</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>ツール</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Web/API/Canvas_API\">Canvas</a></li>\n              <li><a href=\"/ja/docs/Web/CSS\">CSS</a></li>\n              <li><a href=\"/ja/docs/Web/API/Fullscreen_API\">Full screen</a></li>\n              <li><a href=\"/ja/docs/Web/API/Gamepad_API\">Gamepad</a></li>\n              <li><a href=\"/ja/docs/Web/API/IndexedDB_API\">IndexedDB</a></li>\n              <li><a href=\"/ja/docs/Web/JavaScript\">JavaScript</a></li>\n              <li><a href=\"/ja/docs/Web/API/Pointer_Lock_API\">Pointer Lock</a></li>\n              <li><a href=\"/ja/docs/Web/SVG\">SVG</a></li>\n              <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">Typed Arrays</a></li>\n              <li><a href=\"/ja/docs/Web/API/Web_Audio_API\">Web Audio</a></li>\n              <li><a href=\"/ja/docs/Web/API/WebGL_API\">WebGL</a></li>\n              <li><a href=\"/ja/docs/Web/API/WebRTC_API\">WebRTC</a></li>\n              <li><a href=\"/ja/docs/Web/API/WebSockets_API\">WebSockets</a></li>\n              <li><a href=\"/ja/docs/Web/API/WebVR_API\">WebVR</a></li>\n              <li><a href=\"/ja/docs/Web/API/Web_Workers_API\">Web Workers</a></li>\n              <li><a href=\"/ja/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>ゲーム開発テクニック</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Games/Techniques/Async_scripts\">asm.js の同期スクリプトを利用する</a></li>\n              <li><a href=\"/ja/docs/Web/Apps/Developing/Optimizing_startup_performance\">起動パフォーマンスを最適化する</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/WebRTC_data_channels\">ピア通信チャンネルとして WebRTC を利用する</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Efficient_animation_for_web_games\">Web ゲームの効率的なアニメーション</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Audio_for_Web_Games\">Web ゲーム向けの音</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/2D_collision_detection\">2D 衝突検出</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Tilemaps\">タイルとタイルマップの概要</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Web上の 3D ゲームの概要</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web\">Web上の 3D ゲームの概要</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/Basic_theory\">基本の 3D理論の説明</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_A-Frame\">A-Frame</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_Babylon.js\">Babylon.js</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_PlayCanvas\">PlayCanvas を利用した基本的なデモの制作</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_Three.js\">Three.js を使った基本的なデモ製作</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/WebVR\">WebVR</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_collision_detection\">3D 衝突検出の概要</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_collision_detection/Bounding_volume_collision_detection_with_THREE.js\">THREE.js を使ったバウンディングボリューム衝突検出</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Implementing game control mechanisms</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Games/Techniques/Control_mechanisms\">Control mechanisms</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Control_mechanisms/Mobile_touch\">Mobile touch</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Control_mechanisms/Desktop_with_mouse_and_keyboard\">Desktop with mouse and keyboard</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Control_mechanisms/Desktop_with_gamepad\">Desktop with gamepad</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Control_mechanisms/Other\">Other</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>チュートリアル</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript\">そのままの JavaScript を使ったブロックくずしゲーム</a></li>\n              <li><a href=\"/ja/docs/Games/Tutorials/2D_breakout_game_Phaser\">Phaser を使ったブロックくずしゲーム</a></li>\n              <li><a href=\"/ja/docs/Games/Tutorials/HTML5_Gamedev_Phaser_Device_Orientation\">デバイス回転方向を使った 2D 迷路ゲーム</a></li>\n              <li><a href=\"https://mozdevs.github.io/html5-games-workshop/en/guides/platformer/start-here/\">Phaser を使った 2D プラットフォームゲーム</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>ゲームを公開する</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Games/Publishing_games\">ゲームを公開するには</a></li>\n              <li><a href=\"/ja/docs/Games/Publishing_games/Game_distribution\">ゲームの配信</a></li>\n              <li><a href=\"/ja/docs/Games/Publishing_games/Game_promotion\">ゲームのプロモーション</a></li>\n              <li><a href=\"/ja/docs/Games/Publishing_games/Game_monetization\">ゲームのマネタイズ</a></li>\n            </ol>\n        </details>\n    </li>\n  </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ja/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript/Mouse_controls\">« 前のページ</a></li>\n    \n</ul>\n<p>これは、<a href=\"/ja/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript\">ゲーム開発キャンバスチュートリアル</a> の 10 ステップ中 <strong>10 ステップ目、最後のステップ</strong>になります。このレッスンを終えた後のソースコードは、<a href=\"https://github.com/end3r/Gamedev-Canvas-workshop/blob/gh-pages/lesson10.html\" class=\"external\" rel=\" noopener\">Gamedev-Canvas-workshop/lesson10.html</a>で見ることができます。</p>\n<p>私たちが書くゲームには、常に改良の余地があります。例えば、プレイヤーに複数の人生を提供することができます。 1 人または 2 人がミスをしても、ゲームを完了させることができるのです。また、コードのレンダリングを改善することもできます。</p>"}},{"type":"prose","value":{"id":"プレイヤーにライフを与える","title":"プレイヤーにライフを与える","isH3":false,"content":"<p>ライフを実装するのは極めて単純です。まずは他の変数を宣言したところと同じところにライフの数を保存する変数を追加しましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> lives <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ライフカウンタを描画するのはスコアカウンタを描画するのとほとんど同じです。次の関数を自分のコードの <code>drawScore()</code> の下に追加してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">drawLives</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  ctx<span class=\"token punctuation\">.</span>font <span class=\"token operator\">=</span> <span class=\"token string\">\"16px Arial\"</span><span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">\"#0095DD\"</span><span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillText</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Lives: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>lives<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">-</span> <span class=\"token number\">65</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>すぐにゲームを終了するのではなく、ライフがなくなるまでライフを減らしていきます。また、プレイヤーが次のライフで始めるときに、ボールとパドルの位置をリセットすることができます。そこで、 <code>draw()</code> 関数の中で、以下の 3 行を置き換えてください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GAME OVER\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span><span class=\"token function\">reload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// クロームがゲームを終了するのに必要</span>\n</code></pre></div>\n<p>これに以下で示すようなもう少し複雑なロジックを追加します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>lives<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>lives<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GAME OVER\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span><span class=\"token function\">reload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// クロームがゲームを終了するのに必要</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  x <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  y <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span>height <span class=\"token operator\">-</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n  dx <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  dy <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  paddleX <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">-</span> paddleWidth<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ボールが画面下端に当たったときに <code>lives</code> 変数からライフを 1 つ引きます。もしライフが残っていなかったらゲームは負けです。ライフが残っている場合は、ボールの位置とパドルの位置がリセットされ、ボールの動きもリセットされます。</p>"}},{"type":"prose","value":{"id":"ライフ表示を描画する","title":"ライフ表示を描画する","isH3":true,"content":"<p><code>drawLives()</code> への呼び出しを<code>draw()</code> 関数内に追加する必要があります。 <code>drawScore()</code> の呼び出しの下に追記してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">drawLives</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"requestanimationframeで描画を改善する","title":"requestAnimationFrame()で描画を改善する","isH3":false,"content":"<p>ではゲーム機構に直結しない部分、描画に関わる部分にとりかかりましょう。 <a href=\"/ja/docs/Web/API/Window/requestAnimationFrame\" title=\"requestAnimationFrame\"><code>requestAnimationFrame</code></a> は今は <a href=\"/ja/docs/Web/API/setInterval\"><code>setInterval()</code></a> で実装している固定フレームレートよりもより良くブラウザーがゲームを描画できるようにします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> interval <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>draw<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これを簡単に次の行で置き換えます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>そして、それぞれのインスタンスを削除します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// クロームがゲームを終了するのに必要</span>\n</code></pre></div>\n<p>次に、 <code>draw()</code> 関数の一番下（中括弧を閉じる直前）に、以下の行を追加します。これは、 <code>draw()</code> 関数が何度も繰り返し呼び出されるようにするためのものです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>draw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これで<code>draw()</code>関数が<code>requestAnimationFrame()</code>ループの中で何度も実行されるようになりましたが、固定の10ミリ秒のフレームレートではなくブラウザーに制御を託しています。ブラウザーはフレームレートを適切に同期し図形を必要なときだけ描画します。これは古い<code>setInterval()</code>メソッドよりも効率的で滑らかなアニメーションループを生み出します。</p>"}},{"type":"prose","value":{"id":"自分のコードを比べる","title":"自分のコードを比べる","isH3":false,"content":"<p>これで全部です。ゲームの最終版が準備でき、プレイできる状態になりました。</p><p><iframe allowfullscreen=\"allowfullscreen\" width=\"756\" height=\"395\" src=\"https://jsfiddle.net/raymondjplante/dfh2tpu1/embedded/\" loading=\"lazy\"></iframe></p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> ライフの数とパドルでボールが跳ねる角度を替えてみましょう。</p>\n</div>"}},{"type":"prose","value":{"id":"ゲームクリア_-_今のところは","title":"ゲームクリア - 今のところは","isH3":false,"content":"<p>おめでとうございます。これで全てのレッスンを終えました。ここまでで、キャンバス操作の基本をと簡単な 2D ゲームの裏にあるロジックを学んだはずです。フレームワークを学びゲーム開発を続ける良い時期です。このシリーズに対応する <a href=\"/ja/docs/Games/Tutorials/2D_breakout_game_Phaser\">Phaser を使ったブロックくずしゲーム</a>や<a href=\"/en-US/docs/Games/Tutorials/HTML5_Gamedev_Phaser_Device_Orientation\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">デバイス回転方向を使った 2D 迷路ゲーム (en-US)</a>チュートリアルを見てみると良いでしょう。 <a href=\"/ja/docs/Games\">MDN のゲームセクション</a>で発想やより多くの知識を探してみても良いでしょう。</p>\n<p>また、<a href=\"/ja/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript\">このチュートリアルシリーズの目次</a>を見返せます。コーディングを楽しみましょう。</p><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ja/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript/Mouse_controls\">« 前のページ</a></li>\n    \n</ul>"}}],"toc":[{"text":"プレイヤーにライフを与える","id":"プレイヤーにライフを与える"},{"text":"requestAnimationFrame()で描画を改善する","id":"requestanimationframeで描画を改善する"},{"text":"自分のコードを比べる","id":"自分のコードを比べる"},{"text":"ゲームクリア - 今のところは","id":"ゲームクリア_-_今のところは"}],"summary":"これは、ゲーム開発キャンバスチュートリアル の 10 ステップ中 10 ステップ目、最後のステップになります。このレッスンを終えた後のソースコードは、Gamedev-Canvas-workshop/lesson10.htmlで見ることができます。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Finishing up","locale":"en-US","native":"English (US)"},{"title":"Terminando","locale":"es","native":"Español"},{"title":"Finitions","locale":"fr","native":"Français"},{"title":"개발 마무리","locale":"ko","native":"한국어"},{"title":"Заключение","locale":"ru","native":"Русский"},{"title":"收尾工作","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/games/tutorials/2d_breakout_game_pure_javascript/finishing_up","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/games/tutorials/2d_breakout_game_pure_javascript/finishing_up/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Games","title":"ゲーム開発"},{"uri":"/ja/docs/Games/Tutorials","title":"チュートリアル"},{"uri":"/ja/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript","title":"純粋な JavaScript を使ったブロック崩しゲーム"},{"uri":"/ja/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript/Finishing_up","title":"仕上げ"}],"pageTitle":"仕上げ - ゲーム開発 | MDN","noIndexing":false}}