{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"パドルとキーボード操作","mdn_url":"/ja/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript/Paddle_and_keyboard_controls","locale":"ja","native":"日本語","sidebarHTML":"\n  <ol>\n    <li class=\"toggle\">\n        <details>\n            <summary>Web のゲーム開発紹介</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Games/Introduction\">Web のゲーム開発紹介</a></li>\n              <li><a href=\"/ja/docs/Games/Anatomy\">ビデオゲームとの違い</a></li>\n              <li><a href=\"/ja/docs/Games/Examples\">Examples</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>ツール</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Web/API/Canvas_API\">Canvas</a></li>\n              <li><a href=\"/ja/docs/Web/CSS\">CSS</a></li>\n              <li><a href=\"/ja/docs/Web/API/Fullscreen_API\">Full screen</a></li>\n              <li><a href=\"/ja/docs/Web/API/Gamepad_API\">Gamepad</a></li>\n              <li><a href=\"/ja/docs/Web/API/IndexedDB_API\">IndexedDB</a></li>\n              <li><a href=\"/ja/docs/Web/JavaScript\">JavaScript</a></li>\n              <li><a href=\"/ja/docs/Web/API/Pointer_Lock_API\">Pointer Lock</a></li>\n              <li><a href=\"/ja/docs/Web/SVG\">SVG</a></li>\n              <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">Typed Arrays</a></li>\n              <li><a href=\"/ja/docs/Web/API/Web_Audio_API\">Web Audio</a></li>\n              <li><a href=\"/ja/docs/Web/API/WebGL_API\">WebGL</a></li>\n              <li><a href=\"/ja/docs/Web/API/WebRTC_API\">WebRTC</a></li>\n              <li><a href=\"/ja/docs/Web/API/WebSockets_API\">WebSockets</a></li>\n              <li><a href=\"/ja/docs/Web/API/WebVR_API\">WebVR</a></li>\n              <li><a href=\"/ja/docs/Web/API/Web_Workers_API\">Web Workers</a></li>\n              <li><a href=\"/ja/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>ゲーム開発テクニック</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Games/Techniques/Async_scripts\">asm.js の同期スクリプトを利用する</a></li>\n              <li><a href=\"/ja/docs/Web/Apps/Developing/Optimizing_startup_performance\">起動パフォーマンスを最適化する</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/WebRTC_data_channels\">ピア通信チャンネルとして WebRTC を利用する</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Efficient_animation_for_web_games\">Web ゲームの効率的なアニメーション</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Audio_for_Web_Games\">Web ゲーム向けの音</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/2D_collision_detection\">2D 衝突検出</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Tilemaps\">タイルとタイルマップの概要</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Web上の 3D ゲームの概要</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web\">Web上の 3D ゲームの概要</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/Basic_theory\">基本の 3D理論の説明</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_A-Frame\">A-Frame</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_Babylon.js\">Babylon.js</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_PlayCanvas\">PlayCanvas を利用した基本的なデモの制作</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_Three.js\">Three.js を使った基本的なデモ製作</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/WebVR\">WebVR</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_collision_detection\">3D 衝突検出の概要</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_collision_detection/Bounding_volume_collision_detection_with_THREE.js\">THREE.js を使ったバウンディングボリューム衝突検出</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Implementing game control mechanisms</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Games/Techniques/Control_mechanisms\">Control mechanisms</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Control_mechanisms/Mobile_touch\">Mobile touch</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Control_mechanisms/Desktop_with_mouse_and_keyboard\">Desktop with mouse and keyboard</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Control_mechanisms/Desktop_with_gamepad\">Desktop with gamepad</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Control_mechanisms/Other\">Other</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>チュートリアル</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript\">そのままの JavaScript を使ったブロックくずしゲーム</a></li>\n              <li><a href=\"/ja/docs/Games/Tutorials/2D_breakout_game_Phaser\">Phaser を使ったブロックくずしゲーム</a></li>\n              <li><a href=\"/ja/docs/Games/Tutorials/HTML5_Gamedev_Phaser_Device_Orientation\">デバイス回転方向を使った 2D 迷路ゲーム</a></li>\n              <li><a href=\"https://mozdevs.github.io/html5-games-workshop/en/guides/platformer/start-here/\">Phaser を使った 2D プラットフォームゲーム</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>ゲームを公開する</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Games/Publishing_games\">ゲームを公開するには</a></li>\n              <li><a href=\"/ja/docs/Games/Publishing_games/Game_distribution\">ゲームの配信</a></li>\n              <li><a href=\"/ja/docs/Games/Publishing_games/Game_promotion\">ゲームのプロモーション</a></li>\n              <li><a href=\"/ja/docs/Games/Publishing_games/Game_monetization\">ゲームのマネタイズ</a></li>\n            </ol>\n        </details>\n    </li>\n  </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ja/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript/Bounce_off_the_walls\">« 前のページ</a></li>\n    <li><a class=\"button minimal\" href=\"/ja/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript/Game_over\">次のページ »</a></li>\n</ul>\n<p>これは、<a href=\"/ja/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript\">ゲーム開発キャンバスチュートリアル</a> の 10 ステップ中 <strong>4 ステップ目</strong>になります。このレッスンを終えた後のソースコードは、<a href=\"https://github.com/end3r/Gamedev-Canvas-workshop/blob/gh-pages/lesson04.html\" class=\"external\" rel=\" noopener\">Gamedev-Canvas-workshop/lesson4.html</a>で見ることができます。</p>\n<p>ボールが自由に壁に跳ね返っていて、それを無限に眺めることができるのですが、現状では対話することができないのです。操作できないのでは、ゲームとは言えません! そこで、ユーザーが操作できるパドルという対話を追加してみましょう。</p>"}},{"type":"prose","value":{"id":"ボールにぶつかるパドルの定義","title":"ボールにぶつかるパドルの定義","isH3":false,"content":"<p>そういうわけで、ボールに当てるパドルが必要になりました。パドルに用いるいくつかの変数を定義しましょう。次の変数を、他の変数と一緒にコードの一番上に追加してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> paddleHeight <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> paddleWidth <span class=\"token operator\">=</span> <span class=\"token number\">75</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> paddleX <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">-</span> paddleWidth<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ここではパドルの高さと幅、 <code>x</code> 軸上の開始地点を定義しています。続くコードではこれらを用いてさらなる計算が行われます。パドルを画面上に表示する関数を作成しましょう。 <code>drawBall()</code> のすぐ下に次の関数を追加してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">drawPaddle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">beginPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">rect</span><span class=\"token punctuation\">(</span>paddleX<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>height <span class=\"token operator\">-</span> paddleHeight<span class=\"token punctuation\">,</span> paddleWidth<span class=\"token punctuation\">,</span> paddleHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">\"#0095DD\"</span><span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">closePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"パドルを操作できるようにする","title":"パドルを操作できるようにする","isH3":false,"content":"<p>こにパドルを描画しても良いですが、ユーザーの行動に応答する必要があります。キーボード操作を実装するのです。必要なものは次のとおりです。</p>\n<ul>\n  <li>左の操作ボタンが押されているか、右の操作ボタンが押されているかという情報を保存する 2 つの変数。</li>\n  <li><code>keydown</code> イベントと <code>keyup</code> イベントの 2 つのイベントリスナー。ボタンが押されたときにパドルの動きを扱うコードを走らせたいのです。</li>\n  <li><code>keydown</code> イベントと <code>keyup</code> イベントを扱い、ボタンが押されたときに実行されるコード。</li>\n  <li>パドルを左や右に動かす機能</li>\n</ul>\n<p>押されているボタンはこのとおり、論理値として定義、初期化できます。このコードをどこか他の変数の近くに追記してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> rightPressed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> leftPressed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>最初は制御ボタンは押されていないため、どちらにおいても既定値は <code>false</code> です。ボタンが押されたのを検知するため、 2 つのイベントリスナーを設定します。 JavaScript の最後にある <code>setInterval()</code> の行のちょうど上に次のコードを追記してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"keydown\"</span><span class=\"token punctuation\">,</span> keyDownHandler<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"keyup\"</span><span class=\"token punctuation\">,</span> keyUpHandler<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>キーボードのキーのどれかに対して <code>keydown</code> イベントが発生したとき（どれかが押されたとき）、 <code>keyDownHandler()</code> 関数が実行されます。 2 つ目のリスナーについても同様で、（そのキーが押されなくなったき） <code>keyup</code> イベントは <code>keyUpHandler()</code> 関数を呼び出します。自分の <code>addEventListener()</code> の行の下に次のコードを追記してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">keyDownHandler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token string\">\"Right\"</span> <span class=\"token operator\">||</span> e<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token string\">\"ArrowRight\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    rightPressed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token string\">\"Left\"</span> <span class=\"token operator\">||</span> e<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token string\">\"ArrowLeft\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    leftPressed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">keyUpHandler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token string\">\"Right\"</span> <span class=\"token operator\">||</span> e<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token string\">\"ArrowRight\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    rightPressed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token string\">\"Left\"</span> <span class=\"token operator\">||</span> e<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token string\">\"ArrowLeft\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    leftPressed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>キーが押されたとき、その情報は変数に保存されます。それぞれの場合で関連する変数が <code>true</code> に設定されます。キーが離されたときに変数は <code>false</code> に戻されます。</p>\n<p>どちらの関数も変数 <code>e</code> で表されるイベントを引数としてとります。これから有用な情報が手に入ります。 <code>key</code> は押されたキーについての情報を持っています。大抵のブラウザーでは左右の矢印キーにそれぞれ <code>ArrowLeft</code> と <code>ArrowRight</code> が対応します。ただし IE/Edge に対応するために、 <code>Left</code> と <code>Right</code>も確認する必要があります。 もし左カーソルが押されたら、変数 <code>leftPressed</code> は <code>true</code> に、離されたら変数 <code>leftPressed</code> は <code>false</code> に設定されます。右カーソルと変数 <code>rightPressed</code> についても同様です。</p>"}},{"type":"prose","value":{"id":"パドルの移動ロジック","title":"パドルの移動ロジック","isH3":true,"content":"<p>押されているキーについての情報を保存している変数、そして関連する関数が設定されました。ではそれらを使う実際のコードに手を入れて画面上のパドルを動かしてみましょう。 <code>draw()</code> 関数の中で、各々のフレームを描画するときに左カーソルキーが押されているか、右カーソルが押されているか確認しましょう。次のようなコードになっているでしょう。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightPressed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  paddleX <span class=\"token operator\">+=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftPressed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  paddleX <span class=\"token operator\">-=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>左カーソルを押すとパドルは左に 7 ピクセル移動し、右カーソルを押すとパドルは右に 7 ピクセル移動する。これは今のところうまく動作しているが、どちらかのキーを長く押しているとパドルがキャンバスの端から消えてしまいます。これを改善し、パドルをキャンバスの枠内だけ移動させるには、次のようなコードに変更します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightPressed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  paddleX <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>paddleX <span class=\"token operator\">+</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">-</span> paddleWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftPressed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  paddleX <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>paddleX <span class=\"token operator\">-</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ここで用いられている位置 <code>paddleX</code> は期待されているように左端の <code>0</code> と右端の <code>canvas.width-paddleWidth</code> 間で動きます。</p>\n<p>上記のコード片を <code>draw()</code> 関数の最後、閉じ波括弧のちょうど前に追記してください。</p>\n<p>あとは <code>drawPaddle()</code> 関数を <code>draw()</code> 関数から呼び出し、実際に画面に表示するようにすれば完了です。次の行を <code>draw()</code> 関数の、ちょうど <code>drawBall()</code> を呼ぶ行の下に追記してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">drawPaddle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"自分のコードと比べる","title":"自分のコードと比べる","isH3":false,"content":"<p>自分のコードと比べられる、実際に動くコードがこちらになります。</p><p><iframe allowfullscreen=\"allowfullscreen\" width=\"756\" height=\"395\" src=\"https://jsfiddle.net/L9xfn4up/1/embedded/\" loading=\"lazy\"></iframe></p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> パドルを速く、または遅く動くようにしたり、大きさを変えたりしてみましょう。</p>\n</div>"}},{"type":"prose","value":{"id":"次のステップ","title":"次のステップ","isH3":false,"content":"<p>ゲームっぽい要素を追加しましょう。今問題なのはただパドルでボールを永遠に打ち続けることしか出来ないという点です。これは第5章、<a href=\"/ja/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript/Game_over\">ゲームオーバー</a>でゲームの終了状態を追加することで完全に変わることになります。</p><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ja/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript/Bounce_off_the_walls\">« 前のページ</a></li>\n    <li><a class=\"button minimal\" href=\"/ja/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript/Game_over\">次のページ »</a></li>\n</ul>"}}],"toc":[{"text":"ボールにぶつかるパドルの定義","id":"ボールにぶつかるパドルの定義"},{"text":"パドルを操作できるようにする","id":"パドルを操作できるようにする"},{"text":"自分のコードと比べる","id":"自分のコードと比べる"},{"text":"次のステップ","id":"次のステップ"}],"summary":"これは、ゲーム開発キャンバスチュートリアル の 10 ステップ中 4 ステップ目になります。このレッスンを終えた後のソースコードは、Gamedev-Canvas-workshop/lesson4.htmlで見ることができます。","popularity":0.0002,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Paddle and keyboard controls","locale":"en-US","native":"English (US)"},{"title":"Control de la pala y el teclado","locale":"es","native":"Español"},{"title":"Raquette et contrôle clavier","locale":"fr","native":"Français"},{"title":"Paddle과 키보드 컨트롤","locale":"ko","native":"한국어"},{"title":"Ракетка и управление клавиатурой","locale":"ru","native":"Русский"},{"title":"球板及键盘控制","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/games/tutorials/2d_breakout_game_pure_javascript/paddle_and_keyboard_controls","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/games/tutorials/2d_breakout_game_pure_javascript/paddle_and_keyboard_controls/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Games","title":"ゲーム開発"},{"uri":"/ja/docs/Games/Tutorials","title":"チュートリアル"},{"uri":"/ja/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript","title":"純粋な JavaScript を使ったブロック崩しゲーム"},{"uri":"/ja/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript/Paddle_and_keyboard_controls","title":"パドルとキーボード操作"}],"pageTitle":"パドルとキーボード操作 - ゲーム開発 | MDN","noIndexing":false}}