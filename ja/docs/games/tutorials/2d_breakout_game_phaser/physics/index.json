{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"物理演算","mdn_url":"/ja/docs/Games/Tutorials/2D_breakout_game_Phaser/Physics","locale":"ja","native":"日本語","sidebarHTML":"\n  <ol>\n    <li class=\"toggle\">\n        <details>\n            <summary>Web のゲーム開発紹介</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Games/Introduction\">Web のゲーム開発紹介</a></li>\n              <li><a href=\"/ja/docs/Games/Anatomy\">ビデオゲームとの違い</a></li>\n              <li><a href=\"/ja/docs/Games/Examples\">Examples</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>ツール</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Web/API/Canvas_API\">Canvas</a></li>\n              <li><a href=\"/ja/docs/Web/CSS\">CSS</a></li>\n              <li><a href=\"/ja/docs/Web/API/Fullscreen_API\">Full screen</a></li>\n              <li><a href=\"/ja/docs/Web/API/Gamepad_API\">Gamepad</a></li>\n              <li><a href=\"/ja/docs/Web/API/IndexedDB_API\">IndexedDB</a></li>\n              <li><a href=\"/ja/docs/Web/JavaScript\">JavaScript</a></li>\n              <li><a href=\"/ja/docs/Web/API/Pointer_Lock_API\">Pointer Lock</a></li>\n              <li><a href=\"/ja/docs/Web/SVG\">SVG</a></li>\n              <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">Typed Arrays</a></li>\n              <li><a href=\"/ja/docs/Web/API/Web_Audio_API\">Web Audio</a></li>\n              <li><a href=\"/ja/docs/Web/API/WebGL_API\">WebGL</a></li>\n              <li><a href=\"/ja/docs/Web/API/WebRTC_API\">WebRTC</a></li>\n              <li><a href=\"/ja/docs/Web/API/WebSockets_API\">WebSockets</a></li>\n              <li><a href=\"/ja/docs/Web/API/WebVR_API\">WebVR</a></li>\n              <li><a href=\"/ja/docs/Web/API/Web_Workers_API\">Web Workers</a></li>\n              <li><a href=\"/ja/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>ゲーム開発テクニック</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Games/Techniques/Async_scripts\">asm.js の同期スクリプトを利用する</a></li>\n              <li><a href=\"/ja/docs/Web/Apps/Developing/Optimizing_startup_performance\">起動パフォーマンスを最適化する</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/WebRTC_data_channels\">ピア通信チャンネルとして WebRTC を利用する</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Efficient_animation_for_web_games\">Web ゲームの効率的なアニメーション</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Audio_for_Web_Games\">Web ゲーム向けの音</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/2D_collision_detection\">2D 衝突検出</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Tilemaps\">タイルとタイルマップの概要</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Web上の 3D ゲームの概要</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web\">Web上の 3D ゲームの概要</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/Basic_theory\">基本の 3D理論の説明</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_A-Frame\">A-Frame</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_Babylon.js\">Babylon.js</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_PlayCanvas\">PlayCanvas を利用した基本的なデモの制作</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_Three.js\">Three.js を使った基本的なデモ製作</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/WebVR\">WebVR</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_collision_detection\">3D 衝突検出の概要</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_collision_detection/Bounding_volume_collision_detection_with_THREE.js\">THREE.js を使ったバウンディングボリューム衝突検出</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Implementing game control mechanisms</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Games/Techniques/Control_mechanisms\">Control mechanisms</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Control_mechanisms/Mobile_touch\">Mobile touch</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Control_mechanisms/Desktop_with_mouse_and_keyboard\">Desktop with mouse and keyboard</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Control_mechanisms/Desktop_with_gamepad\">Desktop with gamepad</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Control_mechanisms/Other\">Other</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>チュートリアル</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript\">そのままの JavaScript を使ったブロックくずしゲーム</a></li>\n              <li><a href=\"/ja/docs/Games/Tutorials/2D_breakout_game_Phaser\">Phaser を使ったブロックくずしゲーム</a></li>\n              <li><a href=\"/ja/docs/Games/Tutorials/HTML5_Gamedev_Phaser_Device_Orientation\">デバイス回転方向を使った 2D 迷路ゲーム</a></li>\n              <li><a href=\"https://mozdevs.github.io/html5-games-workshop/en/guides/platformer/start-here/\">Phaser を使った 2D プラットフォームゲーム</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>ゲームを公開する</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Games/Publishing_games\">ゲームを公開するには</a></li>\n              <li><a href=\"/ja/docs/Games/Publishing_games/Game_distribution\">ゲームの配信</a></li>\n              <li><a href=\"/ja/docs/Games/Publishing_games/Game_promotion\">ゲームのプロモーション</a></li>\n              <li><a href=\"/ja/docs/Games/Publishing_games/Game_monetization\">ゲームのマネタイズ</a></li>\n            </ol>\n        </details>\n    </li>\n  </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal only-in-en-us\" href=\"/en-US/docs/Games/Tutorials/2D_breakout_game_Phaser/Move_the_ball\" title=\"Currently only available in English (US)\">« 前のページ (en-US)</a></li>\n    <li><a class=\"button minimal only-in-en-us\" href=\"/en-US/docs/Games/Tutorials/2D_breakout_game_Phaser/Bounce_off_the_walls\" title=\"Currently only available in English (US)\">次のページ » (en-US)</a></li>\n</ul>\n<p>これは、<a href=\"/ja/docs/Games/Tutorials/2D_breakout_game_Phaser\">Gamedev Phaser チュートリアル</a>の 16 ステップ中、 <strong>5 ステップ目</strong>になります。このレッスンを終えた後のソースコードは <a href=\"https://github.com/end3r/Gamedev-Phaser-Content-Kit/blob/gh-pages/demos/lesson05.html\" class=\"external\" rel=\" noopener\">Gamedev-Phaser-Content-Kit/demos/lesson05.html</a> で見ることができます。</p>\n<p>モノ同士の衝突を正しく処理するためには、物理演算が必要になります。この文書では、 Phaser での実装と、典型的な例を紹介します。</p>"}},{"type":"prose","value":{"id":"物理演算の追加","title":"物理演算の追加","isH3":false,"content":"<p>Phaser は Arcade Physics、P2、そして Ninja Physics と、3 つの異なる物理演算エンジンを備えています。また商用プラグインとして Box2D も物理演算エンジンとして利用できます。チュートリアルで作成しているような単純なゲームでは、複雑な幾何計算を必要としません。そのような場合には Arcade Physics を利用すると良いでしょう。</p>\n<p>まず最初に、ゲーム内の Arcade Physics エンジンを初期化しましょう。以下のように、<code>create</code> 関数の最初に <code>physics.startSystem()</code> メソッドを追加します（関数内の最初の行にします）。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>game<span class=\"token punctuation\">.</span>physics<span class=\"token punctuation\">.</span><span class=\"token function\">startSystem</span><span class=\"token punctuation\">(</span>Phaser<span class=\"token punctuation\">.</span>Physics<span class=\"token punctuation\">.</span><span class=\"token constant\">ARCADE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>標準では Phaser オブジェクトは物理演算エンジンを利用しません。そのため、<code>create()</code> の末尾に次の行を追加して、ボールから物理演算エンジンを利用できるようにします：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>game<span class=\"token punctuation\">.</span>physics<span class=\"token punctuation\">.</span><span class=\"token function\">enable</span><span class=\"token punctuation\">(</span>ball<span class=\"token punctuation\">,</span> Phaser<span class=\"token punctuation\">.</span>Physics<span class=\"token punctuation\">.</span><span class=\"token constant\">ARCADE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>次にボールを動かします。次のように、<code>create()</code> 末尾で body 属性の持つ <code>velocity</code> 属性を設定します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>ball<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>velocity<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"以前作成した、更新処理の削除","title":"以前作成した、更新処理の削除","isH3":false,"content":"<p><code>update()</code> 関数から <code>x</code> と <code>y</code> に値を追加する古いメソッドを削除することを忘れないでください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  ball<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  ball<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>以上で、物理演算エンジンを組み込むことができました。</p>"}},{"type":"prose","value":{"id":"最終的に作成されたコード","title":"最終的に作成されたコード","isH3":false,"content":"<p>最終的に得られたコードは以下の通りです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> ball<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">preload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  game<span class=\"token punctuation\">.</span>scale<span class=\"token punctuation\">.</span>scaleMode <span class=\"token operator\">=</span> Phaser<span class=\"token punctuation\">.</span>ScaleManager<span class=\"token punctuation\">.</span><span class=\"token constant\">SHOW_ALL</span><span class=\"token punctuation\">;</span>\n  game<span class=\"token punctuation\">.</span>scale<span class=\"token punctuation\">.</span>pageAlignHorizontally <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  game<span class=\"token punctuation\">.</span>scale<span class=\"token punctuation\">.</span>pageAlignVertically <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  game<span class=\"token punctuation\">.</span>stage<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">'#eee'</span><span class=\"token punctuation\">;</span>\n  game<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">.</span><span class=\"token function\">image</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ball'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'img/ball.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  game<span class=\"token punctuation\">.</span>physics<span class=\"token punctuation\">.</span><span class=\"token function\">startSystem</span><span class=\"token punctuation\">(</span>Phaser<span class=\"token punctuation\">.</span>Physics<span class=\"token punctuation\">.</span><span class=\"token constant\">ARCADE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ball <span class=\"token operator\">=</span> game<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">.</span><span class=\"token function\">sprite</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ball'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  game<span class=\"token punctuation\">.</span>physics<span class=\"token punctuation\">.</span><span class=\"token function\">enable</span><span class=\"token punctuation\">(</span>ball<span class=\"token punctuation\">,</span> Phaser<span class=\"token punctuation\">.</span>Physics<span class=\"token punctuation\">.</span><span class=\"token constant\">ARCADE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ball<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>velocity<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>index.html</code> を再読み込みすると、ボールは 1 方向に進み続けます。現在、物理エンジンには重力加速度も摩擦係数も設定されていません。重力加速度を設定すれば、ボールは落下するようになります。また、摩擦係数を設定すれば、ボールが摩擦で停止するようになります。</p>"}},{"type":"prose","value":{"id":"物理学を楽しむ","title":"物理学を楽しむ","isH3":false,"content":"<p>今回扱った内容以外にもできることはたくさんあります。例えば、 <code>ball.body.gravity.y = 100;</code> と追加することで、ボールに影響する重力を設定できます。その結果として、ボールが重力に引かれて、落下するようになります。</p>\n<p>このような機能はほんの一部分です。公式の <a href=\"https://phaser.io/docs#physics\" class=\"external\" rel=\" noopener\">physics documentation</a> には、物理演算に関する数多くの関数と変数が、 <a href=\"https://phaser.io/examples/v2/category/arcade-physics\" class=\"external\" rel=\" noopener\">Arcade</a> と <a href=\"https://phaser.io/examples/v2/category/p2-physics\" class=\"external\" rel=\" noopener\">P2</a> 物理演算エンジンの使用例とともに解説されています。</p>"}},{"type":"prose","value":{"id":"自分のコードと比較しよう","title":"自分のコードと比較しよう","isH3":false,"content":"<p>上記のコードや、下記のデモと比較して、どのように動作しているかを理解しましょう。</p><p><iframe allowfullscreen=\"allowfullscreen\" width=\"756\" height=\"400\" src=\"https://jsfiddle.net/end3r/bjto9nj8/embedded/\" loading=\"lazy\"></iframe></p>"}},{"type":"prose","value":{"id":"次のステップ","title":"次のステップ","isH3":false,"content":"<p>次のステップでは、<a href=\"/en-US/docs/Games/Tutorials/2D_breakout_game_Phaser/Bounce_off_the_walls\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">壁でボールを跳ね返す (en-US)</a>を実装します。</p><ul class=\"prev-next\">\n    <li><a class=\"button minimal only-in-en-us\" href=\"/en-US/docs/Games/Tutorials/2D_breakout_game_Phaser/Move_the_ball\" title=\"Currently only available in English (US)\">« 前のページ (en-US)</a></li>\n    <li><a class=\"button minimal only-in-en-us\" href=\"/en-US/docs/Games/Tutorials/2D_breakout_game_Phaser/Bounce_off_the_walls\" title=\"Currently only available in English (US)\">次のページ » (en-US)</a></li>\n</ul>"}}],"toc":[{"text":"物理演算の追加","id":"物理演算の追加"},{"text":"以前作成した、更新処理の削除","id":"以前作成した、更新処理の削除"},{"text":"最終的に作成されたコード","id":"最終的に作成されたコード"},{"text":"物理学を楽しむ","id":"物理学を楽しむ"},{"text":"自分のコードと比較しよう","id":"自分のコードと比較しよう"},{"text":"次のステップ","id":"次のステップ"}],"summary":"これは、Gamedev Phaser チュートリアルの 16 ステップ中、 5 ステップ目になります。このレッスンを終えた後のソースコードは Gamedev-Phaser-Content-Kit/demos/lesson05.html で見ることができます。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Physics","locale":"en-US","native":"English (US)"},{"title":"Физика","locale":"ru","native":"Русский"},{"title":"Physics","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/games/tutorials/2d_breakout_game_phaser/physics","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/games/tutorials/2d_breakout_game_phaser/physics/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Games","title":"ゲーム開発"},{"uri":"/ja/docs/Games/Tutorials","title":"チュートリアル"},{"uri":"/ja/docs/Games/Tutorials/2D_breakout_game_Phaser","title":"Phaser を使用した 2D ブロック崩しゲーム"},{"uri":"/ja/docs/Games/Tutorials/2D_breakout_game_Phaser/Physics","title":"物理演算"}],"pageTitle":"物理演算 - ゲーム開発 | MDN","noIndexing":false}}