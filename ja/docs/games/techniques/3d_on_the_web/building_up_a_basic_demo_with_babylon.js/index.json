{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Babylon.js を使った基本的なデモの作成","mdn_url":"/ja/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_Babylon.js","locale":"ja","native":"日本語","sidebarHTML":"\n  <ol>\n    <li class=\"toggle\">\n        <details>\n            <summary>Web のゲーム開発紹介</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Games/Introduction\">Web のゲーム開発紹介</a></li>\n              <li><a href=\"/ja/docs/Games/Anatomy\">ビデオゲームとの違い</a></li>\n              <li><a href=\"/ja/docs/Games/Examples\">Examples</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>ツール</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Web/API/Canvas_API\">Canvas</a></li>\n              <li><a href=\"/ja/docs/Web/CSS\">CSS</a></li>\n              <li><a href=\"/ja/docs/Web/API/Fullscreen_API\">Full screen</a></li>\n              <li><a href=\"/ja/docs/Web/API/Gamepad_API\">Gamepad</a></li>\n              <li><a href=\"/ja/docs/Web/API/IndexedDB_API\">IndexedDB</a></li>\n              <li><a href=\"/ja/docs/Web/JavaScript\">JavaScript</a></li>\n              <li><a href=\"/ja/docs/Web/API/Pointer_Lock_API\">Pointer Lock</a></li>\n              <li><a href=\"/ja/docs/Web/SVG\">SVG</a></li>\n              <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">Typed Arrays</a></li>\n              <li><a href=\"/ja/docs/Web/API/Web_Audio_API\">Web Audio</a></li>\n              <li><a href=\"/ja/docs/Web/API/WebGL_API\">WebGL</a></li>\n              <li><a href=\"/ja/docs/Web/API/WebRTC_API\">WebRTC</a></li>\n              <li><a href=\"/ja/docs/Web/API/WebSockets_API\">WebSockets</a></li>\n              <li><a href=\"/ja/docs/Web/API/WebVR_API\">WebVR</a></li>\n              <li><a href=\"/ja/docs/Web/API/Web_Workers_API\">Web Workers</a></li>\n              <li><a href=\"/ja/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>ゲーム開発テクニック</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Games/Techniques/Async_scripts\">asm.js の同期スクリプトを利用する</a></li>\n              <li><a href=\"/ja/docs/Web/Apps/Developing/Optimizing_startup_performance\">起動パフォーマンスを最適化する</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/WebRTC_data_channels\">ピア通信チャンネルとして WebRTC を利用する</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Efficient_animation_for_web_games\">Web ゲームの効率的なアニメーション</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Audio_for_Web_Games\">Web ゲーム向けの音</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/2D_collision_detection\">2D 衝突検出</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Tilemaps\">タイルとタイルマップの概要</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Web上の 3D ゲームの概要</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web\">Web上の 3D ゲームの概要</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/Basic_theory\">基本の 3D理論の説明</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_A-Frame\">A-Frame</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_Babylon.js\">Babylon.js</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_PlayCanvas\">PlayCanvas を利用した基本的なデモの制作</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_Three.js\">Three.js を使った基本的なデモ製作</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/WebVR\">WebVR</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_collision_detection\">3D 衝突検出の概要</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_collision_detection/Bounding_volume_collision_detection_with_THREE.js\">THREE.js を使ったバウンディングボリューム衝突検出</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Implementing game control mechanisms</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Games/Techniques/Control_mechanisms\">Control mechanisms</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Control_mechanisms/Mobile_touch\">Mobile touch</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Control_mechanisms/Desktop_with_mouse_and_keyboard\">Desktop with mouse and keyboard</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Control_mechanisms/Desktop_with_gamepad\">Desktop with gamepad</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Control_mechanisms/Other\">Other</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>チュートリアル</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript\">そのままの JavaScript を使ったブロックくずしゲーム</a></li>\n              <li><a href=\"/ja/docs/Games/Tutorials/2D_breakout_game_Phaser\">Phaser を使ったブロックくずしゲーム</a></li>\n              <li><a href=\"/ja/docs/Games/Tutorials/HTML5_Gamedev_Phaser_Device_Orientation\">デバイス回転方向を使った 2D 迷路ゲーム</a></li>\n              <li><a href=\"https://mozdevs.github.io/html5-games-workshop/en/guides/platformer/start-here/\">Phaser を使った 2D プラットフォームゲーム</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>ゲームを公開する</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Games/Publishing_games\">ゲームを公開するには</a></li>\n              <li><a href=\"/ja/docs/Games/Publishing_games/Game_distribution\">ゲームの配信</a></li>\n              <li><a href=\"/ja/docs/Games/Publishing_games/Game_promotion\">ゲームのプロモーション</a></li>\n              <li><a href=\"/ja/docs/Games/Publishing_games/Game_monetization\">ゲームのマネタイズ</a></li>\n            </ol>\n        </details>\n    </li>\n  </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"https://www.babylonjs.com/\" class=\"external\" rel=\" noopener\">Babylon.js</a> は開発者に使われている最も有名な 3D ゲームエンジンです。他のどんな 3D と同様に、より迅速に共通の3D機能を実装するのを助けるプラグイン機能を提供します。この記事では Babylon.js を使った基礎を通じて開発環境の構築、必要な HTML 構造、 JavaScript の書き方を提供します。</p>\n<p>まずは、画面の内側へレンダリングされた立方体という簡単なデモを作成してみることにします。もし、すでにこの基本デモの作成<a href=\"/ja/docs/Games/Techniques/3D_on_the_web\">シリーズ</a> (<a href=\"/ja/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_Three.js\">Three.js</a>, <a href=\"/ja/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_PlayCanvas\">PlayCanvas</a>, <a href=\"/ja/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_A-Frame\">A-Frame</a>) を通して作業をしたことがある人（あるいは、他の 3D ライブラリーに精通している人）は、 Babylon.js がカメラ、光、オブジェクトという同じような概念で動作することに気づくでしょう。</p>"}},{"type":"prose","value":{"id":"環境構築","title":"環境構築","isH3":false,"content":"<p>Babylon.js で開発を始めるにあたっては、そんなに多くのものを必要としません。以下のようにすぐに始めましょう。</p>\n<ul>\n  <li><a href=\"/ja/docs/Web/API/WebGL_API\">WebGL</a> によく対応した最新のブラウザー、例えば最新の Firefox や Chrome を使用していることを確認することです。</li>\n  <li>作業用のディレクトリーを作成して下さい。</li>\n  <li>ディレクトリーに<a href=\"https://cdn.babylonjs.com/babylon.js\" class=\"external\" rel=\" noopener\">最新の Babylon.js エンジン</a>をコピーして保存して下さい。</li>\n  <li><a href=\"https://doc.babylonjs.com/\" class=\"external\" rel=\" noopener\">Babylon.js のドキュメント</a>を別のタブに開いて下さい。 — 参照するのに役に立ちます。</li>\n</ul>"}},{"type":"prose","value":{"id":"html_構造","title":"HTML 構造","isH3":false,"content":"<p>ここに使う HTML の構造を示します。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>MDN Games: Babylon.js demo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token style\"><span class=\"token language-css\">\n        <span class=\"token selector\">html,body,canvas</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span> <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>babylon.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>canvas</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>render-canvas<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>canvas</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"render-canvas\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* all our JavaScript code goes here */</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>ここには文書のタイトル (<a href=\"/ja/docs/Web/HTML/Element/title\"><code>&lt;title&gt;</code></a>) や、Babylon.js がその内容を描画するための <a href=\"/ja/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a> 要素の幅や高さが利用可能なビューポート領域全体を占めるようにする CSS など、文書の基本的な情報が含まれています。&nbsp;初めの <a href=\"/ja/docs/Web/HTML/Element/script\"><code>&lt;script&gt;</code></a> 要素は Babylon.js に含みます。次に例となるコードを書いていきます。すでに 1 つのヘルパー変数が取り込まれており、 <code>&lt;canvas&gt;</code> 要素への参照が格納されます。</p>\n<p>読み進める前に、このコードを新しいテキストファイルにコピーし、作業ディレクトリーに <code>index.html</code> という名前で保存してください。</p>"}},{"type":"prose","value":{"id":"babylon.js_エンジンの初期化","title":"Babylon.js エンジンの初期化","isH3":false,"content":"<p>ゲームの開発を始める前に、まず Babylon.js エンジンのインスタンスを作成しなければなりません（レンダリングするための <code>&lt;canvas&gt;</code> 要素を渡します）。 2 つ目の <code>&lt;script&gt;</code> 要素の一番下に、以下のコードを追加してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> engine <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BABYLON<span class=\"token punctuation\">.</span>Engine</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>BABYLON</code> グローバルオブジェクトは、エンジンで利用可能なすべての Babylon.js の関数を含んでいます。</p>"}},{"type":"prose","value":{"id":"シーンの作成","title":"シーンの作成","isH3":false,"content":"<p>シーンとは、すべてのゲームコンテンツが表示される場所です。このデモでは、新しいオブジェクトを作成しながら、それらをすべてシーンに追加して、画面の内側へ表示されるようにします。前のコードのすぐ下に次の行を追加して、シーンを作成しましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> scene <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BABYLON<span class=\"token punctuation\">.</span>Scene</span><span class=\"token punctuation\">(</span>engine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nscene<span class=\"token punctuation\">.</span>clearColor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BABYLON<span class=\"token punctuation\">.</span>Color3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>こうしてシーンを作成し、 2 つ目の行で背景色をライトグレーに設定しています。</p>"}},{"type":"prose","value":{"id":"レンダリングのループを作る","title":"レンダリングのループを作る","isH3":false,"content":"<p>シーンを実際に見えるようにするためには、レンダリングする必要があります。以下の行を <code>&lt;script&gt;</code> 要素の最後、閉じる <code>&lt;/script&gt;</code> の直前に追加してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">renderLoop</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    scene<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nengine<span class=\"token punctuation\">.</span><span class=\"token function\">runRenderLoop</span><span class=\"token punctuation\">(</span>renderLoop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>エンジンの <code>runRenderLoop()</code> メソッドを使用して、 <code>renderLoop()</code> 関数をフレームごとに繰り返し実行しています。このループは、停止が指示されるまで無制限にレンダリングしつづけます。</p>"}},{"type":"prose","value":{"id":"カメラの作成","title":"カメラの作成","isH3":false,"content":"<p>さて、セットアップコードができたところで、標準的なシーンコンポーネントであるカメラ、ライト、オブジェクトの実装について考える必要があります。まず、カメラから始めましょう。シーンの作成と <code>clearColor</code> を定義した行の下に、次の行を追加してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> camera <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BABYLON<span class=\"token punctuation\">.</span>FreeCamera</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"camera\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BABYLON<span class=\"token punctuation\">.</span>Vector3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> scene<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Babylon.js では多くの<a href=\"https://doc.babylonjs.com/divingDeeper/cameras\" class=\"external\" rel=\" noopener\">カメラ</a>が利用可能です。 <code>FreeCamera</code> は最も基本的で汎用的なカメラです。初期化するためには、 3 つの引数を渡す必要があります。使用したい名前、三次元空間での位置の座標、そして追加したいシーンです。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> ここで、<code>BABYLON.Vector3()</code> メソッドが使用されていることにお気づきでしょう。これはシーン上の 3D 位置を定義するものです。 Babylon.js には、ベクトル、色、行列などを扱うための完全な数学ライブラリーがバンドルされています。</p>\n</div>"}},{"type":"prose","value":{"id":"光あれ","title":"光あれ","isH3":false,"content":"<p>Babylon.js では、様々な<a href=\"https://doc.babylonjs.com/divingDeeper/lights/lights_introduction#types-of-lights\" class=\"external\" rel=\" noopener\">光源</a>が利用可能です。最も基本的なものは <code>PointLight</code> で、これは懐中電灯のように動作し、指定された方向にスポットライトを照らします。カメラ定義の下に、次の行を追加してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> light <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BABYLON<span class=\"token punctuation\">.</span>PointLight</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"light\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BABYLON<span class=\"token punctuation\">.</span>Vector3</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> scene<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>引数は、先に定義したカメラと非常によく似ています。ライトの名前、三次元空間での位置、ライトを追加するシーンです。</p>"}},{"type":"prose","value":{"id":"ジオメトリー","title":"ジオメトリー","isH3":false,"content":"<p>これでシーンが正しくレンダリングされたので、3D図形を追加することができます。 Babylon.js は、開発スピードを上げるために、たくさんの<a href=\"https://doc.babylonjs.com/divingDeeper/mesh/creation/set\" class=\"external\" rel=\" noopener\">定義済みプリミティブ</a>を提供しており、これを使用すれば、 1 行のコードで即座に形状を作成することができます。立方体、球体、円柱、そしてもっと複雑な形状が用意されています。まず、箱型の図形を定義してみましょう。前に追加したコードの下に、次の新しいコードを追加してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> box <span class=\"token operator\">=</span> <span class=\"token constant\">BABYLON</span><span class=\"token punctuation\">.</span>Mesh<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBox</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"box\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> scene<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>メッシュはエンジンが幾何学的な図形を作成する方法なので、後で簡単に素材を適用することができます。この例では、 <code>Mesh.CreateBox</code> メソッドを使用して、独自の名前とサイズとして 2、そしてどのシーンに追加するかを宣言してボックスを作成します。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> サイズや位置の値（ボックスのサイズなど）は単位がなく、基本的にミリメートル、メートル、フィート、マイルなど、シーンに適した値を設定することができます。</p>\n</div>\n<p>今、保存して更新すると、オブジェクトは正方形のように見えます。なぜなら、カメラに面しているからです。オブジェクトの良いところは、シーン上で好きなように動かせることです。例えば、回転させたり、拡大縮小したりできます。複数の面が見えるように、ボックスに少し回転を加えてみましょう。もう一度、これらの線を前の線の下に追加してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>box<span class=\"token punctuation\">.</span>rotation<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">;</span>\nbox<span class=\"token punctuation\">.</span>rotation<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">0.4</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>今のところ、ボックスは黒く見えますが、これはボックスの面に適用する素材を定義していないからです。次にそれを処理しましょう。</p>"}},{"type":"prose","value":{"id":"素材","title":"素材","isH3":false,"content":"<p>素材とは、オブジェクトに応じたもの、つまり表面の色や質感のことです。この例では、シンプルな青色を使用して、箱を塗装します。使用できる<a href=\"https://doc.babylonjs.com/toolsAndResources/assetLibraries/materialsLibrary\" class=\"external\" rel=\" noopener\">素材</a>の型はたくさんありますが、今のところ標準的なもので十分でしょう。前の行の下に、次の行を追加してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> boxMaterial <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BABYLON<span class=\"token punctuation\">.</span>StandardMaterial</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"material\"</span><span class=\"token punctuation\">,</span> scene<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nboxMaterial<span class=\"token punctuation\">.</span>emissiveColor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BABYLON<span class=\"token punctuation\">.</span>Color3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.58</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.86</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbox<span class=\"token punctuation\">.</span>material <span class=\"token operator\">=</span> boxMaterial<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>StandardMaterial</code> は、名前と追加したいシーンの 2 つの引数を受け取ります。 2 つ目の行は <code>emissiveColor</code> を定義しています。この定義には組み込みの <code>Color3</code> 関数を使用することができます。 3 行目では、新しく作成した素材をボックスに割り当てています。</p>\n<p>おめでとうございます！ Babylon.js を使用して、 3D 環境で最初のオブジェクトを作成することができました。思ったより簡単だったでしょう？こんな風に見えるはずです。</p>\n<p>\n  <img src=\"/en-US/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_Babylon.js/cube.png\" alt=\"Blue Babylon.js 3D box on the gray background.\" width=\"600\" height=\"490\" loading=\"lazy\">\n</p>\n<p>そして今まで作ったコードはここです。</p><p><iframe allowfullscreen=\"allowfullscreen\" width=\"756\" height=\"350\" src=\"https://jsfiddle.net/end3r/9zoeo5sy/embedded/\" loading=\"lazy\"></iframe></p>\n<p><a href=\"https://github.com/end3r/MDN-Games-3D/blob/gh-pages/Babylon.js/cube.html\" class=\"external\" rel=\" noopener\">GitHub 上でも見る</a>ことができます。</p>"}},{"type":"prose","value":{"id":"もっと図形を加える","title":"もっと図形を加える","isH3":false,"content":"<p>このシーンにはすでに箱がありますが、さらに図形を追加してみましょう。</p>"}},{"type":"prose","value":{"id":"トーラス","title":"トーラス","isH3":true,"content":"<p>トーラスを追加してみましょう。先ほどのコードの下に、以下の行を追加してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> torus <span class=\"token operator\">=</span> <span class=\"token constant\">BABYLON</span><span class=\"token punctuation\">.</span>Mesh<span class=\"token punctuation\">.</span><span class=\"token function\">CreateTorus</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"torus\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> scene<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntorus<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\ntorus<span class=\"token punctuation\">.</span>rotation<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">1.5</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これはトーラスを作成し、シーンに追加します。引数は、名前、直径、厚さ、テセレーション（分割数）、追加するシーンです。また、トーラスを少し左側に配置し、見やすくするために <code>x</code> 軸で回転させます。それでは、素材を追加してみましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> torusMaterial <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BABYLON<span class=\"token punctuation\">.</span>StandardMaterial</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"material\"</span><span class=\"token punctuation\">,</span> scene<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntorusMaterial<span class=\"token punctuation\">.</span>emissiveColor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BABYLON<span class=\"token punctuation\">.</span>Color3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntorus<span class=\"token punctuation\">.</span>material <span class=\"token operator\">=</span> torusMaterial<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ボックス要素と同じように見えます。標準的な素材を作成し、グレーがかった色をつけて、トーラスに割り当てています。</p>"}},{"type":"prose","value":{"id":"円柱","title":"円柱","isH3":true,"content":"<p>円柱とその素材の作成は、トーラスの場合とほぼ同じ方法で行います。次のコードを、やはりスクリプトの一番下に追加してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> cylinder <span class=\"token operator\">=</span> <span class=\"token constant\">BABYLON</span><span class=\"token punctuation\">.</span>Mesh<span class=\"token punctuation\">.</span><span class=\"token function\">CreateCylinder</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cylinder\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> scene<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncylinder<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\ncylinder<span class=\"token punctuation\">.</span>rotation<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> cylinderMaterial <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BABYLON<span class=\"token punctuation\">.</span>StandardMaterial</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"material\"</span><span class=\"token punctuation\">,</span> scene<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncylinderMaterial<span class=\"token punctuation\">.</span>emissiveColor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BABYLON<span class=\"token punctuation\">.</span>Color3</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.58</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncylinder<span class=\"token punctuation\">.</span>material <span class=\"token operator\">=</span> cylinderMaterial<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>円柱の引数は、名前、高さ、上部の直径、下部の直径、テセレーション、高さの細分化、追加するシーンです。そして立方体の右側に配置し、 3D 形状が見えるように少し回転させ、黄色の素材を与えます。</p>\n<p>今、このシーンはこうなっているはずです。</p>\n<p>\n  <img src=\"/en-US/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_Babylon.js/shapes.png\" alt=\"Light gray torus, blue box and yellow cylinder created with Babylon.js on the gray background.\" width=\"600\" height=\"210\" loading=\"lazy\">\n</p>\n<p>これはうまくいくのですが、少し退屈です。ゲームではたいてい何かが起こっています。アニメーションを見たりすることができます。そこで、これらの図形にアニメーションをつけて、生命を吹き込んでみましょう。</p>"}},{"type":"prose","value":{"id":"アニメーション","title":"アニメーション","isH3":false,"content":"<p>すでに <code>position</code> と <code>rotation</code> を使用して、図形の位置を調整しました。また、拡大縮小も可能です。実際のアニメーションを表示するには、コードの最後にあるレンダリングループの中でこれらの値を変更し、すべてのフレームで更新されるようにする必要があります。アニメーションに使用するヘルパー変数 <code>t</code> を <code>renderLoop</code> の直前に定義し、ループ内の各フレームでデクリメントするようにします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> t <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">renderLoop</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    scene<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    t <span class=\"token operator\">-=</span> <span class=\"token number\">0.01</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// animation code goes here</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nengine<span class=\"token punctuation\">.</span><span class=\"token function\">runRenderLoop</span><span class=\"token punctuation\">(</span>renderLoop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>変数 <code>t</code> はレンダリングフレームごとに増加します。</p>"}},{"type":"prose","value":{"id":"回転","title":"回転","isH3":true,"content":"<p>回転を適用するのは、 <code>renderLoop</code> 関数の最後にこの行を追加するだけと簡単です。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>box<span class=\"token punctuation\">.</span>rotation<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> t<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これは、 <code>y</code> 軸に沿ってボックスを回転させます。</p>"}},{"type":"prose","value":{"id":"拡大縮小","title":"拡大縮小","isH3":true,"content":"<p>この行を前の行の下に追加して、トーラスを拡大縮小します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>torus<span class=\"token punctuation\">.</span>scaling<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>アニメーションの見た目を良くするために、少し調整が加えられています。値を変えてみて、アニメーションにどのような影響が出るか試してみてください。</p>"}},{"type":"prose","value":{"id":"移動","title":"移動","isH3":true,"content":"<p>円柱の位置を直接変更することで、シーン上で円柱を動かすことができます。この行を前の行の下に追加してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>cylinder<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>円柱は <code>Math.sin()</code> 関数のおかげで <code>y</code> 軸上で上下に浮き沈みします。</p>"}},{"type":"prose","value":{"id":"まとめ","title":"まとめ","isH3":false,"content":"<p>以下は、最終的なコード一覧と、閲覧可能なライブ例です。</p><p><iframe allowfullscreen=\"allowfullscreen\" width=\"756\" height=\"350\" src=\"https://jsfiddle.net/end3r/8r66fdvp/embedded/\" loading=\"lazy\"></iframe></p>\n<p><a href=\"https://github.com/end3r/MDN-Games-3D/blob/gh-pages/Babylon.js/shapes.html\" class=\"external\" rel=\" noopener\">GitHubで見る</a>ことや、<a href=\"https://github.com/end3r/MDN-Games-3D/\" class=\"external\" rel=\" noopener\">リポジトリーをフォークする</a>こともできますので、ローカルで遊んでみたい方はどうぞ。これで、 Babylon.js エンジンの基本がわかりましたね。楽しく実験してください！</p>"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"http://learningbabylonjs.com/\" class=\"external\" rel=\" noopener\">Learning Babylon.js book</a></li>\n</ul>"}}],"toc":[{"text":"環境構築","id":"環境構築"},{"text":"HTML 構造","id":"html_構造"},{"text":"Babylon.js エンジンの初期化","id":"babylon.js_エンジンの初期化"},{"text":"シーンの作成","id":"シーンの作成"},{"text":"レンダリングのループを作る","id":"レンダリングのループを作る"},{"text":"カメラの作成","id":"カメラの作成"},{"text":"光あれ","id":"光あれ"},{"text":"ジオメトリー","id":"ジオメトリー"},{"text":"素材","id":"素材"},{"text":"もっと図形を加える","id":"もっと図形を加える"},{"text":"アニメーション","id":"アニメーション"},{"text":"まとめ","id":"まとめ"},{"text":"関連情報","id":"関連情報"}],"summary":"Babylon.js は開発者に使われている最も有名な 3D ゲームエンジンです。他のどんな 3D と同様に、より迅速に共通の3D機能を実装するのを助けるプラグイン機能を提供します。この記事では Babylon.js を使った基礎を通じて開発環境の構築、必要な HTML 構造、 JavaScript の書き方を提供します。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Building up a basic demo with Babylon.js","locale":"en-US","native":"English (US)"}],"source":{"folder":"ja/games/techniques/3d_on_the_web/building_up_a_basic_demo_with_babylon.js","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/games/techniques/3d_on_the_web/building_up_a_basic_demo_with_babylon.js/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Games","title":"ゲーム開発"},{"uri":"/ja/docs/Games/Techniques","title":"ゲーム開発テクニック"},{"uri":"/ja/docs/Games/Techniques/3D_on_the_web","title":"ウェブ上の 3D ゲームの概要"},{"uri":"/ja/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_Babylon.js","title":"Babylon.js を使った基本的なデモの作成"}],"pageTitle":"Babylon.js を使った基本的なデモの作成 - ゲーム開発 | MDN","noIndexing":false}}