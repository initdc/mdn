{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"ゲームパッド API を使用したコントロールの実装","mdn_url":"/ja/docs/Games/Techniques/Controls_Gamepad_API","locale":"ja","native":"日本語","sidebarHTML":"\n  <ol>\n    <li class=\"toggle\">\n        <details>\n            <summary>Web のゲーム開発紹介</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Games/Introduction\">Web のゲーム開発紹介</a></li>\n              <li><a href=\"/ja/docs/Games/Anatomy\">ビデオゲームとの違い</a></li>\n              <li><a href=\"/ja/docs/Games/Examples\">Examples</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>ツール</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Web/API/Canvas_API\">Canvas</a></li>\n              <li><a href=\"/ja/docs/Web/CSS\">CSS</a></li>\n              <li><a href=\"/ja/docs/Web/API/Fullscreen_API\">Full screen</a></li>\n              <li><a href=\"/ja/docs/Web/API/Gamepad_API\">Gamepad</a></li>\n              <li><a href=\"/ja/docs/Web/API/IndexedDB_API\">IndexedDB</a></li>\n              <li><a href=\"/ja/docs/Web/JavaScript\">JavaScript</a></li>\n              <li><a href=\"/ja/docs/Web/API/Pointer_Lock_API\">Pointer Lock</a></li>\n              <li><a href=\"/ja/docs/Web/SVG\">SVG</a></li>\n              <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">Typed Arrays</a></li>\n              <li><a href=\"/ja/docs/Web/API/Web_Audio_API\">Web Audio</a></li>\n              <li><a href=\"/ja/docs/Web/API/WebGL_API\">WebGL</a></li>\n              <li><a href=\"/ja/docs/Web/API/WebRTC_API\">WebRTC</a></li>\n              <li><a href=\"/ja/docs/Web/API/WebSockets_API\">WebSockets</a></li>\n              <li><a href=\"/ja/docs/Web/API/WebVR_API\">WebVR</a></li>\n              <li><a href=\"/ja/docs/Web/API/Web_Workers_API\">Web Workers</a></li>\n              <li><a href=\"/ja/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>ゲーム開発テクニック</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Games/Techniques/Async_scripts\">asm.js の同期スクリプトを利用する</a></li>\n              <li><a href=\"/ja/docs/Web/Apps/Developing/Optimizing_startup_performance\">起動パフォーマンスを最適化する</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/WebRTC_data_channels\">ピア通信チャンネルとして WebRTC を利用する</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Efficient_animation_for_web_games\">Web ゲームの効率的なアニメーション</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Audio_for_Web_Games\">Web ゲーム向けの音</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/2D_collision_detection\">2D 衝突検出</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Tilemaps\">タイルとタイルマップの概要</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Web上の 3D ゲームの概要</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web\">Web上の 3D ゲームの概要</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/Basic_theory\">基本の 3D理論の説明</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_A-Frame\">A-Frame</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_Babylon.js\">Babylon.js</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_PlayCanvas\">PlayCanvas を利用した基本的なデモの制作</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_Three.js\">Three.js を使った基本的なデモ製作</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/WebVR\">WebVR</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_collision_detection\">3D 衝突検出の概要</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/3D_collision_detection/Bounding_volume_collision_detection_with_THREE.js\">THREE.js を使ったバウンディングボリューム衝突検出</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Implementing game control mechanisms</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Games/Techniques/Control_mechanisms\">Control mechanisms</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Control_mechanisms/Mobile_touch\">Mobile touch</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Control_mechanisms/Desktop_with_mouse_and_keyboard\">Desktop with mouse and keyboard</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Control_mechanisms/Desktop_with_gamepad\">Desktop with gamepad</a></li>\n              <li><a href=\"/ja/docs/Games/Techniques/Control_mechanisms/Other\">Other</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>チュートリアル</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript\">そのままの JavaScript を使ったブロックくずしゲーム</a></li>\n              <li><a href=\"/ja/docs/Games/Tutorials/2D_breakout_game_Phaser\">Phaser を使ったブロックくずしゲーム</a></li>\n              <li><a href=\"/ja/docs/Games/Tutorials/HTML5_Gamedev_Phaser_Device_Orientation\">デバイス回転方向を使った 2D 迷路ゲーム</a></li>\n              <li><a href=\"https://mozdevs.github.io/html5-games-workshop/en/guides/platformer/start-here/\">Phaser を使った 2D プラットフォームゲーム</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>ゲームを公開する</summary>\n            <ol>\n              <li><a href=\"/ja/docs/Games/Publishing_games\">ゲームを公開するには</a></li>\n              <li><a href=\"/ja/docs/Games/Publishing_games/Game_distribution\">ゲームの配信</a></li>\n              <li><a href=\"/ja/docs/Games/Publishing_games/Game_promotion\">ゲームのプロモーション</a></li>\n              <li><a href=\"/ja/docs/Games/Publishing_games/Game_monetization\">ゲームのマネタイズ</a></li>\n            </ol>\n        </details>\n    </li>\n  </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>この記事では、ゲームパッド API を使用してウェブゲーム用の効果的なクロスブラウザー制御システムを実装し、ゲーム機のゲームコントローラーを使用してウェブゲームを制御できるようにします。 <a href=\"http://enclavegames.com/\" class=\"external\" rel=\" noopener\">Enclave Games</a> によって作成されたケーススタディゲーム Hungry Fridge を掲載しています。</p>"}},{"type":"prose","value":{"id":"ウェブゲームのコントロール","title":"ウェブゲームのコントロール","isH3":false,"content":"<p>歴史的には、テレビに接続されたゲーム機でゲームをすることと、 PC 上でのゲームとはまったく異なる体験でした。最終的にはドライバーとプラグインにより、ゲーム機のゲームパッドをデスクトップゲーム――ネイティブかブラウザーで実行されるゲーム――で使用できるようになりました。 HTML5 の時代になり、<a href=\"/ja/docs/Web/API/Gamepad_API\">ゲームパッド API</a> が完成し、プラグインなしでゲームパッドコントローラを使用してブラウザーベースのゲームをプレイできるようになりました。ゲームパッド API は、入力を処理するために JavaScript コード内で使用できるボタンの押下と軸の変更を公開するインターフェイスを提供することで、これを実現します。 これらは、ブラウザーゲームにとって良いことです。</p>"}},{"type":"prose","value":{"id":"api_ステータスとブラウザーサポート","title":"API ステータスとブラウザーサポート","isH3":false,"content":"<p><a href=\"https://www.w3.org/TR/gamepad/\" class=\"external\" rel=\" noopener\">ゲームパッド API</a> は W3C のプロセスではまだ草案の状態であり、まだ実装が変わることがありますが、<a href=\"http://caniuse.com/gamepad\" class=\"external\" rel=\" noopener\">ブラウザーの対応</a>はかなり良い状態です。 Firefox 29 以降はそのまま使用できます。 Opera はバージョン 22 以降で API に対応しています（Chrome の Blink エンジンを使用していることを考えると驚くことではありません）。 Microsoft は Edge にて API をサポートしており、ゲームパッド API は 4 つの主要なブラウザーが現在対応しています。</p>"}},{"type":"prose","value":{"id":"どのゲームパッドが良いか？","title":"どのゲームパッドが良いか？","isH3":false,"content":"<p>現在最も人気のあるゲームパッドは XBox 360、XBox One、PS3 や PS4 であり、これらは かなりテストが行われており、Windows や Mac OS X のブラウザーでゲームパッド API がうまく動いています。</p>\n<p>さまざまなボタンレイアウトを備えたデバイスも多数あり、ブラウザーの実装によって多かれ少なかれ動作します。 この記事で取り上げたコードはいくつかのゲームパッドでテストしましたが、著者の好みはワイヤレス XBox 360 コントローラと Mac OS X 上の Firefox ブラウザーの組み合わせです。</p>"}},{"type":"prose","value":{"id":"ケーススタディ_hungry_fridge","title":"ケーススタディ: Hungry Fridge","isH3":false,"content":"<p><a href=\"https://github.blog/2013-10-30-github-game-off-ii/\" class=\"external\" rel=\" noopener\">GitHub Game Off II</a> のコンペが 2013 年 11 月に実施され、 <a href=\"http://enclavegames.com/\" class=\"external\" rel=\" noopener\">Enclave Games</a> が参加することに決めました。コンペのテーマは「変化」で、 Hungry Fridge に健康な食べ物（リンゴ、ニンジン、レタス）をタップして与え、「悪しき」食べ物（ビール、ハンバーガー、ピザ）を避けるゲームを提出しました。カウントダウンで、Fridgeが食べたいものの種類が数秒ごとに変わるので、注意してすばやく行動する必要があります。</p>\n<p>2 番目の、隠された「変化」の実装は、静的な Fridge を本格的な移動式射撃食堂に変えることです。 コントローラーを接続すると、ゲームが大きく変わります（Hungry Fridge が Super Turbo Hungry Fridge に変わります）、ゲームパッド API を使用して装甲冷蔵庫を制御できます。 あなたは食べ物を撃たなければなりませんが、もう一度、冷蔵庫が各所で食べたい食べ物の種類を見つけなければなりません。そうしないとエネルギーが失われます。</p>\n<p>このゲームは、 2 つの全く異なるタイプの「変化」をカプセル化しています。</p>"}},{"type":"prose","value":{"id":"デモ","title":"デモ","isH3":false,"content":"<p>Hungry Fridge ゲームのフルバージョンが最初に構築され、次にゲームパッド API が実際に表示され、JavaScript のソースコードが表示され、<a href=\"https://end3r.github.io/Gamepad-API-Content-Kit/demo/demo.html\" class=\"external\" rel=\" noopener\">簡単なデモ</a>が作成されました。 これは GitHub で利用可能な <a href=\"https://end3r.github.io/Gamepad-API-Content-Kit/\" class=\"external\" rel=\" noopener\">Gamepad API Content Kit</a> の一部であり、コードを深く掘り下げてどのように動作するかを正確に調べることができます。</p>\n<p>以下に説明するコードは、Hungry Fridge ゲームのフルバージョンからのものですが、デモのものとほぼ同じです。唯一の違いは、フルバージョンでは、スーパーターボモードを使用してゲームを起動するかどうかを決定する<code>ターボ</code>変数。 これは独立して機能するので、ゲームパッドが接続されていなくてもオンにすることができます。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> イースターエッグの時間: ゲームパッドを接続せずにデスクトップで Super Turbo Hungry Fridge を起動する隠しオプションがあります。スクリーンの右上にあるゲームパッドアイコンをクリックします。 それはスーパーターボモードでゲームを起動し、あなたはキーボードで冷蔵庫を制御することができます。タレットを左右に回すたには A と D、撃つためには W、移動の多面実は矢印キーを使います。</p>\n</div>"}},{"type":"prose","value":{"id":"実装","title":"実装","isH3":false,"content":"<p>ゲームパッド API で使用する重要なイベントは、<code>gamepadconnected</code> と <code>gamepaddisconnected</code> の2つです。最初のイベントは、ブラウザが新しいゲームパッドの接続を検出したときに発行され、 2 つ目はゲームパッドが切断されたときに発行されます（ユーザーによる物理的な切断、または操作不能による切断）。このデモでは、<code>gamepadAPI</code> オブジェクトを使用して API に関するすべての情報を格納しています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> gamepadAPI <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">controller</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">turbo</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">buttonPressed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">buttons</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">buttonsCache</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">buttonsStatus</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">axesStatus</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>buttons</code> の配列は XBox 360 ボタンレイアウトを格納します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token literal-property property\">buttons</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">'DPad-Up'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'DPad-Down'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'DPad-Left'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'DPad-Right'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Start'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Back'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Axis-Left'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Axis-Right'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'LB'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'RB'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Power'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'X'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Y'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n</code></pre></div>\n<p>これは、 PS3 コントローラ（または名前のない、一般的なもの）のような他のタイプのゲームパッドでは異なる場合があり、期待しているボタンが実際に得るのと同じボタンになるか注意する必要があり、また仮定してはいけません。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gamepadconnected\"</span><span class=\"token punctuation\">,</span> gamepadAPI<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gamepaddisconnected\"</span><span class=\"token punctuation\">,</span> gamepadAPI<span class=\"token punctuation\">.</span>disconnect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>セキュリティポリシーのため、イベントが発生するとページが表示されている間にコントローラーと最初にやりとりする必要があります。 API がユーザーとのやりとりなしで動作した場合、 API を認識することなくフィンガープリントに使用できます。</p>\n<p>どちらの関数もかなりシンプルです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  gamepadAPI<span class=\"token punctuation\">.</span>controller <span class=\"token operator\">=</span> evt<span class=\"token punctuation\">.</span>gamepad<span class=\"token punctuation\">;</span>\n  gamepadAPI<span class=\"token punctuation\">.</span>turbo <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Gamepad connected.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre></div>\n<p><code>connect()</code> 関数はイベントを引数として受け取り、 <code>gamepad</code> オブジェクトを <code>gamepadAPI.controller</code> 変数に代入します。このゲームでは 1 つのゲームパッドしか使用しないため、ゲームパッドの配列ではなく単一のオブジェクトです。次に、 <code>turbo</code> プロパティを <code>true</code> に設定します。（この目的のために <code>gamepad.connected</code> という論理値を使用することができましたが、上で説明した理由から、ゲームパッドを接続しなくてもターボモードを有効にするための別の変数が必要でした）。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  gamepadAPI<span class=\"token punctuation\">.</span>turbo <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">delete</span> gamepadAPI<span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Gamepad disconnected.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre></div>\n<p><code>disconnect</code> 関数は <code>gamepad.turbo</code> プロパティを <code>false</code> に設定し、gamepad オブジェクトを含む変数を削除します。</p>"}},{"type":"prose","value":{"id":"gamepad_オブジェクト","title":"Gamepad オブジェクト","isH3":true,"content":"<p><code>gamepad</code> オブジェクトには、ボタンや軸の状態が最も重要な情報がたくさんあります。</p>\n<ul>\n  <li><code>id</code>: コントローラーに関する情報を含む文字列。</li>\n  <li><code>index</code>: 接続したデバイスを定義するユニークな識別子。</li>\n  <li><code>connected</code>: 接続時に <code>true</code> になる真偽値の変数。</li>\n  <li><code>mapping</code>: ボタンのレイアウトタイプ。 標準は現在利用可能な唯一のオプション。</li>\n  <li><code>axes</code>: 各軸の状態。浮動小数点値の配列で表される。</li>\n  <li><code>buttons</code> : <code>pressed</code> プロパティと <code>value</code> のプロパティを含む <code>GamepadButton</code> オブジェクトの配列で表される各ボタンの状態。</li>\n</ul>\n<p><code>index</code> 変数は、 2 つ以上のコントローラを接続しており、2つのデバイスが接続されている2人のゲームがある場合など、それらを識別する必要がある場合に便利です。</p>"}},{"type":"prose","value":{"id":"gamepad_オブジェクトのクエリー","title":"gamepad オブジェクトのクエリー","isH3":true,"content":"<p><code>connect()</code> と <code>disconnect()</code> のほかに、<code>gamepadAPI</code> オブジェクトには <code>update()</code> と <code>buttonPressed()</code> の 2 つのメソッドがあります。 <code>update()</code>は、ゲームループ内のすべてのフレームで実行され、ゲームパッドオブジェクトの実際のステータスを定期的に更新します：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Clear the buttons cache</span>\n  gamepadAPI<span class=\"token punctuation\">.</span>buttonsCache <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// Move the buttons status from the previous frame to the cache</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> gamepadAPI<span class=\"token punctuation\">.</span>buttonsStatus<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    gamepadAPI<span class=\"token punctuation\">.</span>buttonsCache<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> gamepadAPI<span class=\"token punctuation\">.</span>buttonsStatus<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token comment\">// Clear the buttons status</span>\n  gamepadAPI<span class=\"token punctuation\">.</span>buttonsStatus <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// Get the gamepad object</span>\n  <span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> gamepadAPI<span class=\"token punctuation\">.</span>controller <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Loop through buttons and push the pressed ones to the array</span>\n  <span class=\"token keyword\">const</span> pressed <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>buttons<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> b <span class=\"token operator\">&lt;</span> c<span class=\"token punctuation\">.</span>buttons<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> b<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>buttons<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pressed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        pressed<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>gamepadAPI<span class=\"token punctuation\">.</span>buttons<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token comment\">// Loop through axes and push their values to the array</span>\n  <span class=\"token keyword\">const</span> axes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>axes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> a <span class=\"token operator\">&lt;</span> c<span class=\"token punctuation\">.</span>axes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      axes<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>axes<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token comment\">// Assign received values</span>\n  gamepadAPI<span class=\"token punctuation\">.</span>axesStatus <span class=\"token operator\">=</span> axes<span class=\"token punctuation\">;</span>\n  gamepadAPI<span class=\"token punctuation\">.</span>buttonsStatus <span class=\"token operator\">=</span> pressed<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// Return buttons for debugging purposes</span>\n  <span class=\"token keyword\">return</span> pressed<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre></div>\n<p>すべてのフレームで、 <code>update()</code> は前のフレームで押されたボタンを <code>buttonsCache</code> 配列に保存し、新しいものを <code>gamepadAPI.controller</code> オブジェクトから取得します。 次に、実際の状態と値を取得するためにボタンと軸をループします。</p>"}},{"type":"prose","value":{"id":"ボタンプレスの検出","title":"ボタンプレスの検出","isH3":true,"content":"<p><code>buttonPressed()</code> メソッドはメインのゲームループに配置され、ボタンの押下を待機します。 2 つの引数、つまり待ち受けするボタンと、ボタンを押したままにすることをゲームに伝える（オプション）方法があります。 それがなければ、ボタンを放してもう一度押して、希望する効果を持たなければなりません。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">buttonPressed</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">button<span class=\"token punctuation\">,</span> hold</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> newPress <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// Loop through pressed buttons</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> gamepadAPI<span class=\"token punctuation\">.</span>buttonsStatus<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// If we found the button we're looking for</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>gamepadAPI<span class=\"token punctuation\">.</span>buttonsStatus<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> button<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Set the boolean variable to true</span>\n      newPress <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      \n      <span class=\"token comment\">// If we want to check the single press</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hold<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Loop through the cached states from the previous frame</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> gamepadAPI<span class=\"token punctuation\">.</span>buttonsCache<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// If the button was already pressed, ignore new press</span>\n          newPress <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>gamepadAPI<span class=\"token punctuation\">.</span>buttonsCache<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> newPress<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre></div>\n<p>ボタンには、 1 回の押下と長押しの2種類のアクションがあります。論理型の <code>newPress</code> 変数は、ボタンの新規押下があるかどうかを示します。 次に、押されたボタンの配列をループします。指定されたボタンが探しているボタンと同じ場合、<code>newPress</code> 変数は <code>true</code> に設定されます。 プレスが新しいものかどうかを確認するために、プレイヤーがキーを保持していないので、ゲームループの前のフレームからのボタンのキャッシュ状態をループします。 ボタンが見つかった場合、ボタンが押されていることを意味するので、新しいプレスはありません。 最後に、<code>newPress</code> 変数が返されます。 <code>buttonPressed</code> 関数は、このようなゲームの更新ループで使用されます：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>gamepadAPI<span class=\"token punctuation\">.</span>turbo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>gamepadAPI<span class=\"token punctuation\">.</span><span class=\"token function\">buttonPressed</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hold'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">turbo_fire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>gamepadAPI<span class=\"token punctuation\">.</span><span class=\"token function\">buttonPressed</span><span class=\"token punctuation\">(</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">managePause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>gamepadAPI.turbo</code> が <code>true</code> で、指定されたボタンが押された (または保持されている) 場合、それらに割り当てられた適切な関数を実行します。 この場合、 <code>A</code> を押すと、弾丸が発射され、 <code>B</code> を押すとゲームが一時停止します。</p>"}},{"type":"prose","value":{"id":"軸のしきい値","title":"軸のしきい値","isH3":true,"content":"<p>ボタンには <code>0</code> または <code>1</code> の二つの状態しかありませんが、アナログスティックは <code>X</code> 軸と <code>Y</code> 軸の両方に沿って <code>-1</code> と <code>1</code> の間の浮動小数点範囲を持っています。</p>\n<p>ゲームパッドは使用しないまま放置しておくと、ホコリで汚れてしまうことがあり、-1や1の値を正確にチェックすることが難しくなります。このため、軸の値が有効になるための閾値を設定するとよいでしょう。例えば、 Fridge のタンクは、 <code>X</code> の値が <code>0.5</code> より大きいときだけ右に曲がります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>gamepadAPI<span class=\"token punctuation\">.</span>axesStatus<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">&gt;</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>player<span class=\"token punctuation\">.</span>angle <span class=\"token operator\">+=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>turret<span class=\"token punctuation\">.</span>angle <span class=\"token operator\">+=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>たとえ誤って少し動かしても、スティックが元の位置に戻らない場合でも、タンクが予期せず回転することはありません。</p>"}},{"type":"prose","value":{"id":"仕様書の更新","title":"仕様書の更新","isH3":false,"content":"<p>1 年以上の安定の後、 2015 年 4 月に W3C Gamepad API 仕様書が更新されました (<a href=\"https://w3c.github.io/gamepad/\" class=\"external\" rel=\" noopener\">最新の仕様を参照</a>) 。あまり変わっていませんが、何が起こっているのかを知ることは良いことです。</p>"}},{"type":"prose","value":{"id":"ゲームパッドの取得","title":"ゲームパッドの取得","isH3":true,"content":"<p><a href=\"/ja/docs/Web/API/Navigator/getGamepads\"><code>Navigator.getGamepads()</code></a> メソッドが<a href=\"https://w3c.github.io/gamepad/#navigator-interface-extension\" class=\"external\" rel=\" noopener\">長い説明とコードの例</a>と共に更新されました。ゲームパッドの配列の長さは <code>n+1</code> でなければなりません。ここで <code>n</code> は接続されている機器の数です。<code>[null, [object Gamepad]]</code> となります。機器が切断されていたり、利用できない場合は、その機器に対応する値が <code>null</code> に設定されます。</p>"}},{"type":"prose","value":{"id":"マッピング標準","title":"マッピング標準","isH3":true,"content":"<p>マッピング型は、文字列ではなく列挙型のオブジェクトになりました。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">enum</span> GamepadMappingType <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"standard\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>この列挙型は、ゲームパッドの既知のマッピングのセットを定義します。 今のところ <code>standard</code> のレイアウトしかありませんが、将来は新しいレイアウトが登場する可能性があります。 レイアウトが不明な場合は、空の文字列に設定されます。</p>"}},{"type":"prose","value":{"id":"イベント","title":"イベント","isH3":true,"content":"<p>仕様書には <code>gamepadconnected</code> と <code>gamepaddisconnected</code> 以外にも使用できるイベントがあったが、とても特殊なものではないと判断され、仕様書から削除された。それらを戻すべきかどうか、またどのような形で戻すべきかについては、現在も議論が続いています。</p>"}},{"type":"prose","value":{"id":"概要","title":"概要","isH3":false,"content":"<p>ゲームパッド API は、とても簡単に開発することができます。プラグインを一切使わずに、ゲーム機のような体験をブラウザで実現することが、これまで以上に簡単にできるようになりました。ブラウザーで直接、 <a href=\"https://enclavegames.com/games/hungry-fridge/\" class=\"external\" rel=\" noopener\">Hungry Fridge</a> のフルバージョンをプレイすることができます。 <a href=\"https://end3r.github.io/Gamepad-API-Content-Kit/\" class=\"external\" rel=\" noopener\">Gamepad API Content Kit</a> の他のリソースもチェックしてみてください。</p>"}}],"toc":[{"text":"ウェブゲームのコントロール","id":"ウェブゲームのコントロール"},{"text":"API ステータスとブラウザーサポート","id":"api_ステータスとブラウザーサポート"},{"text":"どのゲームパッドが良いか？","id":"どのゲームパッドが良いか？"},{"text":"ケーススタディ: Hungry Fridge","id":"ケーススタディ_hungry_fridge"},{"text":"デモ","id":"デモ"},{"text":"実装","id":"実装"},{"text":"仕様書の更新","id":"仕様書の更新"},{"text":"概要","id":"概要"}],"summary":"この記事では、ゲームパッド API を使用してウェブゲーム用の効果的なクロスブラウザー制御システムを実装し、ゲーム機のゲームコントローラーを使用してウェブゲームを制御できるようにします。 Enclave Games によって作成されたケーススタディゲーム Hungry Fridge を掲載しています。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Implementing controls using the Gamepad API","locale":"en-US","native":"English (US)"},{"title":"Реализация элементов управления с помощью API Gamepad","locale":"ru","native":"Русский"},{"title":"使用 Gamepad API 实现控制","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/games/techniques/controls_gamepad_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/games/techniques/controls_gamepad_api/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Games","title":"ゲーム開発"},{"uri":"/ja/docs/Games/Techniques","title":"ゲーム開発テクニック"},{"uri":"/ja/docs/Games/Techniques/Controls_Gamepad_API","title":"ゲームパッド API を使用したコントロールの実装"}],"pageTitle":"ゲームパッド API を使用したコントロールの実装 - ゲーム開発 | MDN","noIndexing":false}}