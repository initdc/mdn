{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"WebAssembly の概要","mdn_url":"/ja/docs/WebAssembly/Concepts","locale":"ja","native":"日本語","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"open\"><a href=\"/ja/docs/WebAssembly\"><strong>WebAssembly home page</strong></a>\n  </li><li class=\"toggle\">\n    <details open=\"\">\n      <summary>Tutorials</summary>\n      <ol>\n        <li><a href=\"/ja/docs/WebAssembly/Concepts\">WebAssembly concepts</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/C_to_wasm\">Compiling from C/C++ to WebAssembly</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Rust_to_wasm\">Compiling from Rust to WebAssembly</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Using_the_JavaScript_API\">Using the WebAssembly JavaScript API</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Understanding_the_text_format\">Understanding WebAssembly text format</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Text_format_to_wasm\">Converting WebAssembly text format to wasm</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Loading_and_running\">Loading and running WebAssembly code</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Caching_modules\">Caching compiled WebAssembly modules</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Exported_functions\">Exported WebAssembly functions</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Object reference</summary>\n      <ol>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code></a></li>\n      </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>この記事では、 WebAssembly がどのように機能しているか、その目標、解決している問題、ウェブブラウザーのレンダリングエンジン内での動作などの概念について説明します。</p>"}},{"type":"prose","value":{"id":"webassembly_とは何か","title":"WebAssembly とは何か","isH3":false,"content":"<p>WebAssembly は最近のウェブブラウザーで動作し、新たな機能と大幅なパフォーマンス向上を提供する新しい種類のコードです。基本的に直接記述ではなく、C、C++、Rust 等の低水準の言語にとって効果的なコンパイル対象となるように設計されています。</p>\n<p>この機能はウェブプラットフォームにとって大きな意味を持ちます。ウェブ上で動作するクライアントアプリで従来は実現できなかった、ネイティブ水準の速度で複数の言語で記述されたコードをウェブ上で動作させる方法を提供します。</p>\n<p>それ以上に、その利点を享受するために利用者は WebAssembly のコードをどのように作成するのか知る必要さえ有りません。 WebAssembly モジュールはウェブ (あるいは Node.js) アプリにインポートすることができ、 WebAssembly の機能は JavaScript を経由して他の領域から利用できる状態になります。 JavaScript 製フレームワークでは、大幅なパフォーマンス改善と開発中の新機能をウェブ開発者が容易に利用できるようにするために WebAssembly を用いることができます。</p>"}},{"type":"prose","value":{"id":"webassembly_の目標","title":"WebAssembly の目標","isH3":false,"content":"<p>WebAssembly は <a href=\"https://www.w3.org/community/webassembly/\" class=\"external\" rel=\" noopener\">W3C WebAssembly Community Group</a> 内で策定されるオープン標準として以下を目標に定めて作成されています。</p>\n<ul>\n  <li>高速で、高効率であり、ポータブルであること — WebAssembly のコードは <a href=\"http://webassembly.org/docs/portability/#assumptions-for-efficient-execution\" class=\"external\" rel=\" noopener\">共通ハードウェア対応環境</a> を利用して異なるプラットフォーム間でネイティブ水準の速度で実行可能です。</li>\n  <li>可読性を持ちデバッグ可能であること — WebAssembly は低水準のアセンブリー言語ですが、人間が読めるテキスト形式があります（その仕様策定は終わっていないものの）。この形式は人の手で読み書きできて、デバッグもできます。</li>\n  <li>安全であること — WebAssembly は安全でサンドボックス化された実行環境上で動作するように設計されています。他のウェブ言語と同様に、ブラウザーに対して same-origin および権限ポリシーの確認を強制します。</li>\n  <li>ウェブを破壊しないこと — WebAssembly は他のウェブ技術と協調し、後方互換性を維持するように設計されます。</li>\n</ul>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> WebAssembly はまたウェブの領域外の JavaScript 環境での利用も行います (<a href=\"http://webassembly.org/docs/non-web/\" class=\"external\" rel=\" noopener\">Non-web embeddings</a> を参照)。</p>\n</div>"}},{"type":"prose","value":{"id":"webassembly_はどのようにウェブプラットフォームに適合するのか","title":"WebAssembly はどのようにウェブプラットフォームに適合するのか","isH3":false,"content":"<p>ウェブプラットフォームは 2 つの領域からなると考えることができます。</p>\n<ul>\n  <li>ウェブアプリのコードを実行する仮想マシン (VM) 、例としてアプリを動作させる JavaScript コード。</li>\n  <li>ウェブブラウザー / デバイスの機能をコントロールして物事を実現するためにウェブアプリが呼ぶことのできる <a href=\"/ja/docs/Web/API\">Web API</a> のセット (<a href=\"/ja/docs/Web/API/Document_Object_Model\">DOM</a>、 <a href=\"/ja/docs/Web/API/CSS_Object_Model\">CSSOM</a>、 <a href=\"/ja/docs/Web/API/WebGL_API\">WebGL</a>、 <a href=\"/ja/docs/Web/API/IndexedDB_API\">IndexedDB</a>、 <a href=\"/ja/docs/Web/API/Web_Audio_API\">Web Audio API</a> 等)。</li>\n</ul>\n<p>以前、仮想マシンは JavaScript だけを読み込むことができました。 JavaScript は、今日のウェブにあるほとんどの問題を解決するのに十分強力なので、これはうまく動作しています。しかし、 3D ゲーム、仮想現実、拡張現実、コンピュータービジョン、画像/動画編集、その他ネイティブなパフォーマンスを必要とする多くの領域など、より集中的な使用例で JavaScript を使用しようとすると、パフォーマンスの問題に直面します（詳しいアイデアは <a href=\"https://webassembly.org/docs/use-cases/\" class=\"external\" rel=\" noopener\">WebAssembly use cases</a> をご覧ください）。</p>\n<p>加えて巨大な JavaScript アプリケーションのダウンロード、構造の解析とコンパイルのコストは異常に高いものになりえます。モバイルや他のリソースが限られたプラットフォームではこのようなパフォーマンスのボトルネックの影響をずっと強く受けることになります。</p>\n<p>WebAssembly は JavaScript とは異なる言語ですが、置き換えを意図しているわけではありません。その代わり、JavaScript の足りない所を補強して併用し、ウェブ開発者に双方の以下のような利益を提供することを狙いとしています。</p>\n<ul>\n  <li>JavaScript は高水準の言語であり、ウェブアプリケーションを作る上で十分な柔軟性と表現力を持っています。そして多くの利点 — 動的型付け言語である、コンパイルが必須でない、強力なフレームワーク、ライブラリーやツールを提供する豊富な土壌等を持っています。</li>\n  <li>WebAssembly はネイティブに近いパフォーマンスで動作して、C++ や Rust のような低水準のメモリー管理を行う言語がウェブ上で動作するようコンパイルされる対象となる、コンパクトなバイナリー形式を持つ低水準なアセンブリーに似た言語です (WebAssembly は将来的にガベージコレクションによるメモリー管理を行う言語をサポートする <a href=\"http://webassembly.org/docs/high-level-goals/\" class=\"external\" rel=\" noopener\">高レベルの目標</a> を持っていることに注意してください)。</li>\n</ul>\n<p>ブラウザーにおける WebAssembly の登場によって、私たちが先述したような仮想マシンはこれから 2 つの種類の言語をロードして実行することになります — JavaScript と WebAssembly です。</p>\n<p>必要に応じてこの異なったコードは互いを呼び出し合うことができます — <a href=\"/ja/docs/WebAssembly/JavaScript_interface\">WebAssembly JavaScript API</a> はエクスポートした WebAssembly のコードを普遍的に呼び出せる JavaScript 関数でラップし、WebAssembly のコードは通常の JavaScript 関数をインポートして同期的に呼び出せます。実際、WebAssembly のコードの基本単位はモジュールと呼ばれ、 WebAssembly のモジュールは ES モジュールと多くの対になる概念を持っています。</p>"}},{"type":"prose","value":{"id":"webassembly_の主要概念","title":"WebAssembly の主要概念","isH3":true,"content":"<p>ブラウザー上で WebAssembly がどのように動作するかを理解するため必要となる主要概念がいくつか存在します。これらのコンセプトはそれぞれが <a href=\"/ja/docs/WebAssembly/JavaScript_interface\">WebAssembly JavaScript API</a> に一対一で対応しています。</p>\n<ul>\n  <li><strong>モジュール</strong> (Module): ブラウザーによって実行可能な機械語にコンパイルされた WebAssembly のバイナリーに対応します。モジュールはステートレスであるため、<a href=\"/ja/docs/Web/API/Blob\">Blob</a> のように、明示的に <a href=\"/ja/docs/WebAssembly/Caching_modules\">IndexedDB にキャッシュ</a> できたり window やウェブワーカーと ( <a href=\"/ja/docs/Web/API/MessagePort/postMessage\"><code>postMessage()</code></a> を経由して ) 共有することができます。モジュールは ES2015 のモジュールのように import と export の宣言を行います。</li>\n  <li><strong>メモリー</strong> (Memory): WebAssembly の低水準なメモリーアクセス命令によって読み込みおよび書き込みが行われるバイト列を一次元の配列として保持している、リサイズ可能な ArrayBuffer です。</li>\n  <li><strong>テーブル</strong> (Table): メモリー内に（安全性およびポータブル性を維持するため）バイト列として保持することができなかった（関数等に対する）参照を保持しているリサイズ可能な型付き配列です。</li>\n  <li><strong>インスタンス</strong> (Instance): メモリー、テーブル、インポートされた値を含む実行時に利用されるすべての状態と対となるモジュールです。インスタンスは特定の import によって特定のグローバル環境にロードされた ES モジュールのようなものです。</li>\n</ul>\n<p>JavaScript API はモジュール、メモリー、テーブルおよびインスタンスを作る機能を開発者に提供します。 WebAssembly のインスタンスが与えられれば、 JavaScript はその中で export されたオブジェクトを、一般的な JavaScript で渡せる状態にされた関数同様に、同期的に呼び出すことができます。また任意の JavaScript の関数はその関数を WebAssembly のインスタンスに import することで WebAssembly のコードから同期的に呼び出されるようにすることもできます。</p>\n<p>JavaScript は WebAssembly のコードがどのようにダウンロードされ、コンパイルされて実行されるかを完全に制御できるため、JavaScript 開発者は WebAssembly を単に効果的に高いパフォーマンスを発揮する JavaScript の機能のようにとらえることもできます。</p>\n<p>将来的には、 WebAssembly モジュールは (<code>&lt;script type='module'&gt;</code> を利用して) <a href=\"https://github.com/WebAssembly/proposals/issues/12\" class=\"external\" rel=\" noopener\">ES2015 モジュールのようにロード可能</a> となり、これは JavaScript が WebAssembly モジュールを ES2015 モジュールと同じくらい簡単に取得、コンパイル、インポートできるようになることを意味します。</p>"}},{"type":"prose","value":{"id":"webassembly_をどのようにアプリで用いるか","title":"WebAssembly をどのようにアプリで用いるか","isH3":false,"content":"<p>ここまで私たちは WebAssembly がウェブプラットフォームに付加する基本的な原則について話しました。つまりコードのバイナリー形式とバイナリーコードを読み込み実行する API について。ここからは実際にこれらの原則をどのように活かすのかについて話します。</p>\n<p>WebAssembly のエコシステムはまだ黎明期の状態にあります。もっと多くのツール群によってこの状況が進展するのは間違いありません。現時点では主に 4 つの入口があります。</p>\n<ul>\n  <li><a href=\"https://emscripten.org/\" class=\"external\" rel=\" noopener\">Emscripten</a> を用いて C/C++ 製アプリケーションを移植する。</li>\n  <li>アセンブリー水準で WebAssembly を記述もしくは直接生成する。</li>\n  <li>Rust アプリケーションを書き、 WebAssembly を出力ターゲットとする。</li>\n  <li>TypeScript によく似た <a href=\"https://assemblyscript.org/\" class=\"external\" rel=\" noopener\">AssemblyScript</a> を用いて、 WebAssembly バイナリーに出力する</li>\n</ul>\n<p>これらの選択肢について考えてみましょう。</p>"}},{"type":"prose","value":{"id":"cc_からの移植","title":"C/C++ からの移植","isH3":true,"content":"<p>WASM コードを作成するための多くのオプションのうちの 2 つは、オンラインの Wasm アセンブラーまたは <a href=\"https://emscripten.org/\" class=\"external\" rel=\" noopener\">Emscripten</a> です。 WASM のオンラインアセンブラーには、次のようなものがあります。</p>\n<ul>\n  <li><a href=\"https://wasdk.github.io/WasmFiddle/\" class=\"external\" rel=\" noopener\">WasmFiddle</a></li>\n  <li><a href=\"https://anonyco.github.io/WasmFiddlePlusPlus/\" class=\"external\" rel=\" noopener\">WasmFiddle++</a></li>\n  <li><a href=\"https://mbebenita.github.io/WasmExplorer/\" class=\"external\" rel=\" noopener\">WasmExplorer</a></li>\n</ul>\n<p>これらは、どこから始めるべきかを把握しようとしている人にとっては素晴らしいリソースですが、 Emscripten のツールと最適化には欠けています。</p>\n<p>Emscripten ツールは C/C++ ソースコードを取得し、それを .wasm モジュール、加えてモジュールを読み出して実行するために必要な JavaScript に \"glue\" コードとコードの結果を表示するための HTML 文書にコンパイルおよび出力します。</p>\n<p>\n  <img src=\"/en-US/docs/WebAssembly/Concepts/emscripten-diagram.png\" alt=\"\" width=\"764\" height=\"104\" loading=\"lazy\">\n</p>\n<p>簡潔に言えば、このプロセスは以下のような物になります。</p>\n<ol>\n  <li>Emscripten は最初に C/C++ を Clang + LLVM — 完成度の高いオープンソースの C/C++ コンパイラー・ツールチェインであり、OSX の XCode の一部として提供される等の利用例が有る、に注入します。</li>\n  <li>Emscripten が Clang + LLVM によるコンパイル結果を .wasm バイナリーに変換します。</li>\n  <li>それ自体だけでは WebAssembly は現時点で DOM に直接アクセスできません; JavaScript を呼び出して、整数型もしくは浮動小数点型の基本データを渡せるだけです。そのため、ウェブ API にアクセスするためには、WebAssembly は JavaScript を呼び出す必要が有り、この時点でウェブ API の呼び出しが行われます。そのため Emscripten は結果を得るための HTML と JavaScript のグルーコードを生成します。</li>\n</ol>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> 将来的に <a href=\"https://github.com/WebAssembly/gc/blob/master/README.md\" class=\"external\" rel=\" noopener\">WebAssembly に直接ウェブ API を呼ばせることを許容する</a> 計画があります。</p>\n</div>\n<p>JavaScript グルーコードは多くの人が想像するほど簡単な構造をしていません。はじめに、 Emscripten は <a href=\"https://en.wikipedia.org/wiki/Simple_DirectMedia_Layer\" class=\"external\" rel=\" noopener\">SDL</a>、 <a href=\"https://en.wikipedia.org/wiki/OpenGL\" class=\"external\" rel=\" noopener\">OpenGL</a>、 <a href=\"https://en.wikipedia.org/wiki/OpenAL\" class=\"external\" rel=\" noopener\">OpenAL</a> および <a href=\"https://en.wikipedia.org/wiki/POSIX\" class=\"external\" rel=\" noopener\">POSIX</a> の一部といった主な C/C++ ライブラリーを組み込みます。これらのライブラリー群はウェブ API の観点から組み込まれ、各々が WebAssembly を既存のウェブ API に接続するためにいくつかの JavaScript グルーコードを必要とします。</p>\n<p>そのためグルーコードの一部は C/C++ コードによって利用されるそれぞれのライブラリーの機能を組み込みます。グルーコードはまた .wasm ファイルを取得、ロード、実行するため先述した WebAssembly JavaScript API を呼び出すロジックも含んでいます。</p>\n<p>生成された HTML 文章は JavaScript グルーコードのファイルを読み込んで <a href=\"/ja/docs/Web/HTML/Element/textarea\"><code>&lt;textarea&gt;</code></a> に標準出力を書き出します。もしアプリケーションが OpenGL を利用している場合、その HTML はまた出力先となる <a href=\"/ja/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a> 要素を含みます。Emscripten の出力結果を修正して必要とするウェブアプリに変換するのは非常に簡単です。</p>\n<p>Emscripten に関する完全なドキュメントは <a href=\"https://emscripten.org\" class=\"external\" rel=\" noopener\">emscripten.org</a> で参照でき、このツールチェインの組み込みと自身の C/C++ アプリを wasm へとコンパイルするガイドとしては <a href=\"/ja/docs/WebAssembly/C_to_wasm\">C/C++ を WebAssembly にコンパイルする</a> が参考になります。</p>"}},{"type":"prose","value":{"id":"webassembly_を直接記述する","title":"WebAssembly を直接記述する","isH3":true,"content":"<p>独自のコンパイラー、ツール、あるいは WebAssembly を実行時に生成する JavaScript のライブラリーを作りたいとお考えですか？</p>\n<p>実際のアセンブリー言語同様、 WebAssembly バイナリー形式はテキスト表現を持っています — これらは一対一で対応しています。なんらかの <a href=\"https://webassembly.org/getting-started/advanced-tools/\" class=\"external\" rel=\" noopener\">WebAssemby テキスト表現バイナリー変換ツール</a> を用いることでテキスト表現を直接記述してバイナリー形式に変換することができます。</p>\n<p>この手順に関しては、 <a href=\"/ja/docs/WebAssembly/Text_format_to_wasm\">WebAssembly テキスト表現を wasm 形式に変換する</a> の項目を参照ください。</p>"}},{"type":"prose","value":{"id":"webassembly_をターゲットとした_rust_の記述","title":"WebAssembly をターゲットとした Rust の記述","isH3":true,"content":"<p>Rust WebAssembly ワーキンググループの不断の仕事のおかげで、Rust コードを書いて WebAssembly にコンパイルすることも可能です。必要なツールチェーンをインストールし、サンプル Rust プログラムを WebAssembly npm パッケージにコンパイルし、ウェブアプリケーションのサンプルを使用して、 <a href=\"/ja/docs/WebAssembly/Rust_to_wasm\">Rust から WebAssembly へのコンパイル</a>の記事を読むことができます。</p>"}},{"type":"prose","value":{"id":"assemblyscript_の使用","title":"AssemblyScript の使用","isH3":true,"content":"<p>C や Rust の詳細を学ぶ必要なく、 TypeScript のような慣れ親しんだ言語の快適さの中で WebAssembly を試したいウェブ開発者にとって、 AssemblyScript は最良の選択肢になるでしょう。 AssemblyScript は TypeScript の厳密なバージョンを WebAssembly にコンパイルし、ウェブ開発者は Prettier、ESLint、VS Code intellisense など、使い慣れた TypeScript 互換のツールを引き続き使用することができます。ドキュメントは <a href=\"https://www.assemblyscript.org/\" class=\"external\" rel=\" noopener\">https://www.assemblyscript.org/</a> で確認することができます。</p>"}},{"type":"prose","value":{"id":"まとめ","title":"まとめ","isH3":false,"content":"<p>本項目では WebAssembly が何であるか、どういった利便性が有るか、どのようにしてウェブに適用するかとどのように活用するかについて説明しました。</p>"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"https://hacks.mozilla.org/category/webassembly/\" class=\"external\" rel=\" noopener\">WebAssembly articles on Mozilla Hacks blog</a></li>\n  <li><a href=\"https://research.mozilla.org/\" class=\"external\" rel=\" noopener\">WebAssembly on Mozilla Research</a></li>\n  <li><a href=\"/ja/docs/WebAssembly/Loading_and_running\">WebAssembly コードの読み込みと実行</a> — ウェブページでどのようにして自作の WebAssembly モジュールをロードするかについての理解が深まります。</li>\n  <li><a href=\"/ja/docs/WebAssembly/Using_the_JavaScript_API\">WebAssembly JavaScript API の使用</a> — WebAssembly JavaScript API のその他の利用法について理解が深まります。</li>\n</ul>"}}],"toc":[{"text":"WebAssembly とは何か","id":"webassembly_とは何か"},{"text":"WebAssembly の目標","id":"webassembly_の目標"},{"text":"WebAssembly はどのようにウェブプラットフォームに適合するのか","id":"webassembly_はどのようにウェブプラットフォームに適合するのか"},{"text":"WebAssembly をどのようにアプリで用いるか","id":"webassembly_をどのようにアプリで用いるか"},{"text":"まとめ","id":"まとめ"},{"text":"関連情報","id":"関連情報"}],"summary":"この記事では、 WebAssembly がどのように機能しているか、その目標、解決している問題、ウェブブラウザーのレンダリングエンジン内での動作などの概念について説明します。","popularity":0.0004,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"WebAssembly Concepts","locale":"en-US","native":"English (US)"},{"title":"WebAssembly Concepts","locale":"es","native":"Español"},{"title":"Concepts de WebAssembly","locale":"fr","native":"Français"},{"title":"웹어셈블리의 컨셉","locale":"ko","native":"한국어"},{"title":"Conceitos do WebAssembly","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Основы WebAssembly","locale":"ru","native":"Русский"},{"title":"WebAssembly 概念","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/webassembly/concepts","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/webassembly/concepts/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/WebAssembly","title":"WebAssembly"},{"uri":"/ja/docs/WebAssembly/Concepts","title":"WebAssembly の概要"}],"pageTitle":"WebAssembly の概要 - WebAssembly | MDN","noIndexing":false}}