{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"エクスポートされた WebAssembly 関数","mdn_url":"/ja/docs/WebAssembly/Exported_functions","locale":"ja","native":"日本語","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"open\"><a href=\"/ja/docs/WebAssembly\"><strong>WebAssembly home page</strong></a>\n  </li><li class=\"toggle\">\n    <details open=\"\">\n      <summary>Tutorials</summary>\n      <ol>\n        <li><a href=\"/ja/docs/WebAssembly/Concepts\">WebAssembly concepts</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/C_to_wasm\">Compiling from C/C++ to WebAssembly</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Rust_to_wasm\">Compiling from Rust to WebAssembly</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Using_the_JavaScript_API\">Using the WebAssembly JavaScript API</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Understanding_the_text_format\">Understanding WebAssembly text format</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Text_format_to_wasm\">Converting WebAssembly text format to wasm</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Loading_and_running\">Loading and running WebAssembly code</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Caching_modules\">Caching compiled WebAssembly modules</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Exported_functions\">Exported WebAssembly functions</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Object reference</summary>\n      <ol>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code></a></li>\n      </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>エクスポートされた WebAssembly 関数は WebAssembly 関数が JavaScript でどのように表現されるのか、この記事では、もう少し詳しく説明します。</p>"}},{"type":"prose","value":{"id":"エクスポートされた...とは","title":"エクスポートされた...とは?","isH3":false,"content":"<p>エクスポートされた WebAssembly 関数は、 WebAssembly 関数を表現する JavaScript の単なるラッパーです。呼び出されると、バックグラウンドでいくつかの動作を行います。引数を wasm で使える型に（例えば、 JavaScript の数値を Int32 に）変換し、wasm モジュール内の関数に渡し、実行し、結果を変換して JavaScript 側に戻します。</p>\n<p>エクスポートされた WebAssembly 関数は次の 2 つの方法で取得できます。</p>\n<ul>\n  <li>既存のテーブルの <a href=\"/ja/docs/WebAssembly/JavaScript_interface/Table/get\"><code>Table.prototype.get()</code></a> を呼び出す。</li>\n  <li>wasm モジュールインスタンスの <a href=\"/ja/docs/WebAssembly/JavaScript_interface/Instance/exports\"><code>Instance.exports</code></a> を通してエクスポートされた関数にアクセスする。</li>\n</ul>\n<p>いずれにしても、同じ種類の内在する関数のラッパーを取得できます。 JavaScript からみると、すべての wasm 関数は JavaScript の関数のようにみえます。しかし、これは wasm 関数オブジェクトインスタンスによってカプセル化されており、アクセスする方法は限られています。</p>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":"<p>物事を明らかにするために例を見ていきましょう（例は GitHub の <a href=\"https://github.com/mdn/webassembly-examples/blob/master/other-examples/table-set.html\" class=\"external\" rel=\" noopener\">table-set.html</a> と <a href=\"https://mdn.github.io/webassembly-examples/other-examples/table-set.html\" class=\"external\" rel=\" noopener\">動作例</a>、wasm の <a href=\"https://github.com/mdn/webassembly-examples/blob/master/ja-api-examples/table.wat\" class=\"external\" rel=\" noopener\">テキスト表現</a> を参照してください）。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> otherTable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebAssembly<span class=\"token punctuation\">.</span>Table</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">element</span><span class=\"token operator\">:</span> <span class=\"token string\">\"anyfunc\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">initial</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nWebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'table.wasm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> tbl <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span>tbl<span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tbl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 13</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tbl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 42</span>\n    otherTable<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>tbl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    otherTable<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>tbl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>otherTable<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>otherTable<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ここでは、<a href=\"/ja/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code></a> コンストラクターを使用して JavaScript からテーブル(<code>otherTable</code>)を作成し、 table.wasm をページに読み込むために <a href=\"/ja/docs/WebAssembly/JavaScript_interface/instantiateStreaming\"><code>WebAssembly.instantiateStreaming()</code></a> ユーティリティ関数を使用しています。</p>\n<p>そのあと、モジュールからエクスポートされた関数を取得し、関数の参照を <a href=\"/ja/docs/WebAssembly/JavaScript_interface/Table/get\"><code>tbl.get()</code></a> を通して取り出し、それぞれを実行した結果をコンソールに出力します。次に、 <code>set()</code> を使用して、<code>tbl</code> テーブルと同じ関数への参照を <code>otherTable</code> テーブルに含まれるようにします。</p>\n<p>確認するために、<code>otherTable</code> から参照を取得し直し、その結果もコンソールに出力します(同じ結果が得られます)。</p>"}},{"type":"prose","value":{"id":"それらは本物の関数です","title":"それらは本物の関数です","isH3":false,"content":"<p>前の例で、 <a href=\"/ja/docs/WebAssembly/JavaScript_interface/Table/get\"><code>Table.prototype.get()</code></a> のそれぞれの返値はエクスポートされた WebAssembly 関数でした。まさに私たちが話していたことです。</p>\n<p>これらは WebAssembly 関数のラッパーであるのに加えて本物の JavaScript 関数であることに注意してください。上の例を <a href=\"/ja/docs/WebAssembly#%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%83%BC%E3%81%AE%E4%BA%92%E6%8F%9B%E6%80%A7\">WebAssembly をサポートするブラウザー</a>で読み込み、以下の行をコンソールで実行してみてください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> testFunc <span class=\"token operator\">=</span> otherTable<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> testFunc<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>結果として関数が返されます。この関数は他の JavaScript の<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function\">関数</a>と同じように扱うことができます。例えば <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>call()</code></a> や <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>bind()</code></a> などです。 <code>testFunc.toString()</code> は興味深い結果を返します。</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">function 0() {\n    [native code]\n}\n</pre></div>\n<p>これで、よりラッパーの性質がよくわかると思います。</p>\n<p>エクスポートされた WebAssembly 関数について他の注意事項を挙げます。</p>\n<ul>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/length\">length</a> プロパティは wasm 内の関数シグネチャで宣言されている引数の数です。</li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/name\">name</a> プロパティは <code>toString()</code> の結果で見えている wasm モジュール内での関数のインデックスです。</li>\n  <li>i64 型の値を受け取る、または返すエクスポートされた wasm 関数を呼び出そうとすると、現在 JavaScript 上で i64 を表現する的確な方法がないためエラーが発生します。。これは将来的に変わる可能性があります。新しい int64 型が将来の標準で検討されており、 wasm によって使用される可能性があります。</li>\n</ul>"}}],"toc":[{"text":"エクスポートされた...とは?","id":"エクスポートされた...とは"},{"text":"例","id":"例"},{"text":"それらは本物の関数です","id":"それらは本物の関数です"}],"summary":"エクスポートされた WebAssembly 関数は WebAssembly 関数が JavaScript でどのように表現されるのか、この記事では、もう少し詳しく説明します。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Exported WebAssembly functions","locale":"en-US","native":"English (US)"},{"title":"Exported WebAssembly functions","locale":"fr","native":"Français"},{"title":"Exported WebAssembly functions","locale":"ko","native":"한국어"},{"title":"Экспортируемые функции WebAssembly","locale":"ru","native":"Русский"},{"title":"导出的 WebAssembly 函数","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/webassembly/exported_functions","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/webassembly/exported_functions/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/WebAssembly","title":"WebAssembly"},{"uri":"/ja/docs/WebAssembly/Exported_functions","title":"エクスポートされた WebAssembly 関数"}],"pageTitle":"エクスポートされた WebAssembly 関数 - WebAssembly | MDN","noIndexing":false}}