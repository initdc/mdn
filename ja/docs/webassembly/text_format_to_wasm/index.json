{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"WebAssembly テキスト形式から wasm への変換","mdn_url":"/ja/docs/WebAssembly/Text_format_to_wasm","locale":"ja","native":"日本語","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"open\"><a href=\"/ja/docs/WebAssembly\"><strong>WebAssembly home page</strong></a>\n  </li><li class=\"toggle\">\n    <details open=\"\">\n      <summary>Tutorials</summary>\n      <ol>\n        <li><a href=\"/ja/docs/WebAssembly/Concepts\">WebAssembly concepts</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/C_to_wasm\">Compiling from C/C++ to WebAssembly</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Rust_to_wasm\">Compiling from Rust to WebAssembly</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Using_the_JavaScript_API\">Using the WebAssembly JavaScript API</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Understanding_the_text_format\">Understanding WebAssembly text format</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Text_format_to_wasm\">Converting WebAssembly text format to wasm</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Loading_and_running\">Loading and running WebAssembly code</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Caching_modules\">Caching compiled WebAssembly modules</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Exported_functions\">Exported WebAssembly functions</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Object reference</summary>\n      <ol>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code></a></li>\n      </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>WebAssembly には S 式ベースのテキスト表現があります。これはテキストエディター、ブラウザーの開発者ツールなどで見せるために設計された中間表現です。この記事では、これがどのように動作するか、テキスト形式のファイルを <code>.wasm</code> アセンブリー形式に変換するのに利用可能なツールの使用方法について少し説明します。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> テキスト形式のファイルは、通常 <code>.wat</code> という拡張子で保存されます。過去には <code>.wast</code> という拡張子も使用されていましたが、現在は WebAssembly テストスイートで使用されるスクリプト言語のために使用されています。</p>\n</div>"}},{"type":"prose","value":{"id":"初めてのテキスト形式","title":"初めてのテキスト形式","isH3":false,"content":"<p>簡単な例を見てみましょう。次のプログラムは <code>imported_func</code> という名前の関数を <code>imports</code> というモジュールからインポートし、 <code>exported_func</code> という名前の関数をエクスポートしています。</p>\n<div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token variable\">$i</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">import</span> <span class=\"token string\">\"imports\"</span> <span class=\"token string\">\"imported_func\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">export</span> <span class=\"token string\">\"exported_func\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">42</span>\n    <span class=\"token keyword\">call</span> <span class=\"token variable\">$i</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>WebAssembly 関数 <code>exported_func</code> は私たちの環境（WebAssembly モジュールを使用しているウェブアプリなど）で使用するためにエクスポートされます。この関数が呼び出されたとき、インポートされた JavaScript 関数 <code>imported_func</code> の引数として値 (42) を渡して実行されます。</p>"}},{"type":"prose","value":{"id":"テキストの_.wat_ファイルからバイナリーの_.wasm_ファイルへの変換","title":"テキストの .wat ファイルからバイナリーの .wasm ファイルへの変換","isH3":false,"content":"<p>上の <code>.wat</code> テキスト表現の例を <code>.wasm</code> アセンブリー形式に変換してみましょう。</p>\n<ol>\n  <li>はじめに、上のコードをテキストファイルにコピーして <code>simple.wat</code> という名前のファイルを作成してください。</li>\n  <li>このテキスト表現をブラウザーが実際に読み込んで利用可能なアセンブリー言語にアセンブルする必要があります。このために wabt ツールを使用することができます。これは WebAssembly のテキスト表現から wasm 変換する、または逆に変換するコンパイラー（加えてもう少し別のツール）が含まれます。<a href=\"https://github.com/webassembly/wabt\" class=\"external\" rel=\" noopener\">https://github.com/webassembly/wabt</a> に行って、そのページの説明に従ってツールの設定をしてください。</li>\n  <li>ツールをビルドしたら、 <code>/wabt/out/clang/Debug</code> ディレクトリーをシステムの <code>PATH</code> に追加します。</li>\n  <li>次に、wat2wasm プログラムを実行します。入力ファイルパス、続いて <code>-o</code> 引数と、その後に出力ファイルパスを指定します。\n    <div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>wat2wasm simple.wat -o simple.wasm\n</code></pre></div>\n  </li>\n</ol>\n<p>これで <code>simple.wasm</code> という名前のファイルに wasm が出力されます。これには <code>.wasm</code> アセンブリーのコードが含まれます。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> wasm2wat を使用して wasm から テキスト表現に戻すことができます。例: <code>wasm2wat simple.wasm -o text.wat</code>.</p>\n</div>"}},{"type":"prose","value":{"id":"アセンブリーの出力を見る","title":"アセンブリーの出力を見る","isH3":false,"content":"<p>出力されたファイルはアセンブリーベースなので通常のテキストエディターで表示することができません。ただし、wat2wasm ツールの <code>-v</code> オプションを使用して見ることができます。以下を試してみてください。</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>wat2wasm simple.wat -v\n</code></pre></div>\n<p>ターミナルには次のように出力されるでしょう。</p>\n<p>\n  <img src=\"/en-US/docs/WebAssembly/Text_format_to_wasm/assembly-output.png\" alt=\"複数のバイナリー文字列の横に文字列の説明を表示しています。例：0000008: 01 ; セクションコード \" width=\"585\" height=\"366\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/WebAssembly/Understanding_the_text_format\">WebAssembly テキスト形式を理解する</a> — テキスト形式のシンタックスの詳細説明。</li>\n  <li><a href=\"/ja/docs/WebAssembly/C_to_wasm\">C/C++ から WebAssembly にコンパイルする</a> — Binaryen/Emscripten のようなツールはソースコードを wasm にコンパイルし、 JavaScript のコンテキストでモジュールを実行するために必要な API コードを作成します。それらの使用方法の詳細はこちらから探してください。</li>\n  <li><a href=\"/ja/docs/WebAssembly/Using_the_JavaScript_API\">WebAssembly JavaScript API の使用</a> — WebAssembly API コードがどのように機能するかについて詳しく知りたい場合はこちらをお読みください。</li>\n  <li><a href=\"https://webassembly.github.io/spec/core/text/index.html\" class=\"external\" rel=\" noopener\">Text format</a> — WebAssembly GitHub リポジトリーのテキスト形式の詳細説明。</li>\n  <li><a href=\"https://github.com/xtuc/webassemblyjs/tree/master/packages/wast-loader\" class=\"external\" rel=\" noopener\">wast-loader</a> — これをすべて処理してくれる webpack のローダーです。</li>\n</ul>"}}],"toc":[{"text":"初めてのテキスト形式","id":"初めてのテキスト形式"},{"text":"テキストの .wat ファイルからバイナリーの .wasm ファイルへの変換","id":"テキストの_.wat_ファイルからバイナリーの_.wasm_ファイルへの変換"},{"text":"アセンブリーの出力を見る","id":"アセンブリーの出力を見る"},{"text":"関連情報","id":"関連情報"}],"summary":"WebAssembly には S 式ベースのテキスト表現があります。これはテキストエディター、ブラウザーの開発者ツールなどで見せるために設計された中間表現です。この記事では、これがどのように動作するか、テキスト形式のファイルを .wasm アセンブリー形式に変換するのに利用可能なツールの使用方法について少し説明します。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Converting WebAssembly text format to wasm","locale":"en-US","native":"English (US)"},{"title":"Converting WebAssembly text format to wasm","locale":"ko","native":"한국어"},{"title":"将 WebAssembly 文本格式转换为 wasm","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/webassembly/text_format_to_wasm","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/webassembly/text_format_to_wasm/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/WebAssembly","title":"WebAssembly"},{"uri":"/ja/docs/WebAssembly/Text_format_to_wasm","title":"WebAssembly テキスト形式から wasm への変換"}],"pageTitle":"WebAssembly テキスト形式から wasm への変換 - WebAssembly | MDN","noIndexing":false}}