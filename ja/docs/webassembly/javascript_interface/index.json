{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"WebAssembly","mdn_url":"/ja/docs/WebAssembly/JavaScript_interface","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects\">標準組み込みオブジェクト</a></strong></li><li><strong><a href=\"/ja/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>メソッド</strong></a><ol><li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/compile\"><code>WebAssembly.compile()</code></a></li><li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/compileStreaming\"><code>WebAssembly.compileStreaming()</code></a></li><li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/instantiate\"><code>WebAssembly.instantiate()</code></a></li><li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/instantiateStreaming\"><code>WebAssembly.instantiateStreaming()</code></a></li><li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/validate\"><code>WebAssembly.validate()</code></a></li></ol></li><li><strong>関連するページ</strong></li><li><strong><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a></strong></li><li><strong><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global</code></a></strong></li><li><strong><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code></a></strong></li><li><strong><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code></a></strong></li><li><strong><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code></a></strong></li><li><strong><a href=\"/ja/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code></a></strong></li><li><strong><a href=\"/ja/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code></a></strong></li><li><strong><a href=\"/ja/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code></a></strong></li><li><strong>継承</strong></li><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>プロパティ</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>メソッド</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>WebAssembly</code></strong> は JavaScript のオブジェクトで、 <a href=\"/ja/docs/WebAssembly\">WebAssembly</a> に関するすべての機能の名前空間の役割をします。</p>\n<p>他のグローバルオブジェクトとは異なり、 <code>WebAssembly</code> はコンストラクターではありません (関数オブジェクトではありません) 。数学の定数や関数の名前空間である <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math\"><code>Math</code></a> や 、国際化のコンストラクターやその他の言語を意識した関数ための <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Intl\"><code>Intl</code></a> と同様のものです。</p>"}},{"type":"prose","value":{"id":"概要","title":"概要","isH3":false,"content":"<p><code>WebAssembly</code> オブジェクトの主な用途は次のとおりです。</p>\n<ul>\n  <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/instantiate\"><code>WebAssembly.instantiate()</code></a> 関数を用いた WebAssembly コードの読み込み。</li>\n  <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory()</code></a>/<a href=\"/ja/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table()</code></a> コンストラクターによる新しいメモリーやテーブルインスタンスの生成。</li>\n  <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError()</code></a>/<a href=\"/ja/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError()</code></a>/<a href=\"/ja/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError()</code></a> コンストラクターによる、WebAssembly で発生するエラーの処理する機能の提供。</li>\n</ul>"}},{"type":"prose","value":{"id":"コンストラクタープロパティ","title":"コンストラクタープロパティ","isH3":false,"content":"<dl>\n  <dt id=\"webassembly.compileerror\"><a href=\"/ja/docs/WebAssembly/JavaScript_interface/CompileError/CompileError\"><code>WebAssembly.CompileError()</code></a></dt>\n  <dd>\n    <p>WebAssembly のデコードまたは検証中のエラーを示します。</p>\n  </dd>\n  <dt id=\"webassembly.global\"><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Global/Global\"><code>WebAssembly.Global()</code></a></dt>\n  <dd>\n    <p>グローバル変数のインスタンスを表し、 JavaScript からアクセス可能で、 1 つ以上の <a href=\"/ja/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a> インスタンスの間でインポート/エクスポート可能です。これにより、複数のモジュールを動的リンクすることができます。</p>\n  </dd>\n  <dt id=\"webassembly.instance\"><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Instance/Instance\"><code>WebAssembly.Instance()</code></a></dt>\n  <dd>\n    <p>ステートフルで、実行可能な <a href=\"/ja/docs/WebAssembly/JavaScript_interface/Module\">WebAssembly.Module</a> のインスタンスです。</p>\n  </dd>\n  <dt id=\"webassembly.linkerror\"><a href=\"/ja/docs/WebAssembly/JavaScript_interface/LinkError/LinkError\"><code>WebAssembly.LinkError()</code></a></dt>\n  <dd>\n    <p>(関数開始後の<a href=\"https://webassembly.org/docs/semantics/#traps\" class=\"external\" rel=\" noopener\">トラップ</a>ではなく) モジュールの初期化時に発生したエラーを示します。</p>\n  </dd>\n  <dt id=\"webassembly.memory\"><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Memory/Memory\"><code>WebAssembly.Memory()</code></a></dt>\n  <dd>\n    <p><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Memory/buffer\"><code>buffer</code></a> プロパティが可変長の <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a> であり、これが WebAssembly の <code>Instance</code> からアクセス可能なメモリーのバイト列を保持しています。</p>\n  </dd>\n  <dt id=\"webassembly.module\"><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Module/Module\"><code>WebAssembly.Module()</code></a></dt>\n  <dd>\n    <p>ステートレスの WebAssembly のコードであり、ブラウザーでコンパイルされ、効率的に<a href=\"/ja/docs/Web/API/Worker/postMessage\">ワーカーと共有</a>することができ、複数回インスタンス化することができます。</p>\n  </dd>\n  <dt id=\"webassembly.runtimeerror\"><a href=\"/ja/docs/WebAssembly/JavaScript_interface/RuntimeError/RuntimeError\"><code>WebAssembly.RuntimeError()</code></a></dt>\n  <dd>\n    <p>WebAssembly が<a href=\"https://webassembly.org/docs/semantics/#traps\" class=\"external\" rel=\" noopener\">トラップ</a>を指定するたびに例外として発生するエラー型です。</p>\n  </dd>\n  <dt id=\"webassembly.table\"><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Table/Table\"><code>WebAssembly.Table()</code></a></dt>\n  <dd>\n    <p>WebAssembly のテーブルを表す配列風の構造で、関数の参照を保持します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"静的メソッド","title":"静的メソッド","isH3":false,"content":"<dl>\n  <dt id=\"webassembly.instantiate\"><a href=\"/ja/docs/WebAssembly/JavaScript_interface/instantiate\"><code>WebAssembly.instantiate()</code></a></dt>\n  <dd>\n    <p>WebAssembly コードをコンパイル、インスタンス化するための主要な API で、 <code>Module</code> と、その最初の <code>Instance</code> を返します。</p>\n  </dd>\n  <dt id=\"webassembly.instantiatestreaming\"><a href=\"/ja/docs/WebAssembly/JavaScript_interface/instantiateStreaming\"><code>WebAssembly.instantiateStreaming()</code></a></dt>\n  <dd>\n    <p>ソースのストリームから直接 WebAssembly モジュールをコンパイル、インスタンス化し、 <code>Module</code> と、その最初の <code>Instance</code> を返します。</p>\n  </dd>\n  <dt id=\"webassembly.compile\"><a href=\"/ja/docs/WebAssembly/JavaScript_interface/compile\"><code>WebAssembly.compile()</code></a></dt>\n  <dd>\n    <p><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a> を用いて WebAssembly バイナリコードからコンパイルします。インスタンス化は別ステップとして分離されます。</p>\n  </dd>\n  <dt id=\"webassembly.compilestreaming\"><a href=\"/ja/docs/WebAssembly/JavaScript_interface/compileStreaming\"><code>WebAssembly.compileStreaming()</code></a></dt>\n  <dd>\n    <p>ソースのストリームから直接 <a href=\"/ja/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a> にコンパイルします。インスタンス化は別ステップとして分離されます。</p>\n  </dd>\n  <dt id=\"webassembly.validate\"><a href=\"/ja/docs/WebAssembly/JavaScript_interface/validate\"><code>WebAssembly.validate()</code></a></dt>\n  <dd>\n    <p>WebAssembly バイナリコードの型付き配列を検証し、バイト列が有効な WebAssembly コードか (<code>true</code>) 否か (<code>false</code>) を返します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":""}},{"type":"prose","value":{"id":".wasm_モジュールを読み込み、コンパイルし、インスタンス化する","title":".wasm モジュールを読み込み、コンパイルし、インスタンス化する","isH3":false,"content":"<p>次の例 (GitHub 上の <a href=\"https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/instantiate-streaming.html\" class=\"external\" rel=\" noopener\">instantiate-streaming.html</a> のデモと、<a href=\"https://mdn.github.io/webassembly-examples/js-api-examples/instantiate-streaming.html\" class=\"external\" rel=\" noopener\">動作例</a>も参照) は、基礎となるソースから .wasm モジュールを直接ストリーミングし、コンパイルしてインスタンス化し、 <code>ResultObject</code> で履行されるプロミスを返します。 <code>instantiateStreaming()</code> 関数は <a href=\"/ja/docs/Web/API/Response\"><code>Response</code></a> オブジェクトのプロミスを受け付けるので、 <a href=\"/ja/docs/Web/API/fetch\"><code>fetch()</code></a> の呼び出し結果を直接渡すと、履行されたときにレスポンスを関数に渡すことができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> importObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">imports</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">imported_func</span><span class=\"token operator\">:</span> <span class=\"token parameter\">arg</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nWebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'simple.wasm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> importObject<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span> <span class=\"token operator\">=&gt;</span> obj<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">exported_func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>それから <code>ResultObject</code> の instance メンバーにアクセスすると、呼び出し対象のエクスポートされた関数が入っています。</p>"}},{"type":"specifications","value":{"title":"仕様書","id":"仕様書","isH3":false,"specifications":[{"bcdSpecificationURL":"https://webassembly.github.io/spec/js-api/#webassembly-namespace","title":"WebAssembly JavaScript Interface"}],"query":"javascript.builtins.WebAssembly"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"query":"javascript.builtins.WebAssembly","dataURL":"/ja/docs/WebAssembly/JavaScript_interface/bcd.json"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/WebAssembly\">WebAssembly</a> 概要ページ</li>\n  <li><a href=\"/ja/docs/WebAssembly/Concepts\">WebAssembly の概念</a></li>\n  <li><a href=\"/ja/docs/WebAssembly/Using_the_JavaScript_API\">WebAssembly JavaScript API の使用</a></li>\n</ul>"}}],"toc":[{"text":"概要","id":"概要"},{"text":"コンストラクタープロパティ","id":"コンストラクタープロパティ"},{"text":"静的メソッド","id":"静的メソッド"},{"text":"例","id":"例"},{"text":".wasm モジュールを読み込み、コンパイルし、インスタンス化する","id":".wasm_モジュールを読み込み、コンパイルし、インスタンス化する"},{"text":"仕様書","id":"仕様書"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"WebAssembly は JavaScript のオブジェクトで、 WebAssembly に関するすべての機能の名前空間の役割をします。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"WebAssembly","locale":"en-US","native":"English (US)"},{"title":"WebAssembly","locale":"es","native":"Español"},{"title":"WebAssembly","locale":"fr","native":"Français"},{"title":"WebAssembly","locale":"ko","native":"한국어"},{"title":"WebAssembly","locale":"ru","native":"Русский"},{"title":"WebAssembly","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/webassembly/javascript_interface","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/webassembly/javascript_interface/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/WebAssembly","title":"WebAssembly"},{"uri":"/ja/docs/WebAssembly/JavaScript_interface","title":"WebAssembly"}],"pageTitle":"WebAssembly - WebAssembly | MDN","noIndexing":false}}