{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"WebAssembly テキスト形式の理解","mdn_url":"/ja/docs/WebAssembly/Understanding_the_text_format","locale":"ja","native":"日本語","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"open\"><a href=\"/ja/docs/WebAssembly\"><strong>WebAssembly home page</strong></a>\n  </li><li class=\"toggle\">\n    <details open=\"\">\n      <summary>Tutorials</summary>\n      <ol>\n        <li><a href=\"/ja/docs/WebAssembly/Concepts\">WebAssembly concepts</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/C_to_wasm\">Compiling from C/C++ to WebAssembly</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Rust_to_wasm\">Compiling from Rust to WebAssembly</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Using_the_JavaScript_API\">Using the WebAssembly JavaScript API</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Understanding_the_text_format\">Understanding WebAssembly text format</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Text_format_to_wasm\">Converting WebAssembly text format to wasm</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Loading_and_running\">Loading and running WebAssembly code</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Caching_modules\">Caching compiled WebAssembly modules</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Exported_functions\">Exported WebAssembly functions</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Object reference</summary>\n      <ol>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code></a></li>\n      </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>WebAssembly を人間が読んだり編集したりできるようにするため、 wasm バイナリー形式にはテキスト表現が存在します。これはテキストエディター、ブラウザーの開発者ツールなどで見せるために設計された中間表現です。この記事では、テキスト形式のしくみ、生の構文、および元のバイトコードの表現との関係 (と JavaScript で wasm を表現したラッパーオブジェクト) について説明します。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> この記事は、あなたがウェブ開発者で wasm モジュールをページに読み込んでコード内で使用するだけなら過剰なものかもしれません (<a href=\"/ja/docs/WebAssembly/Using_the_JavaScript_API\">WebAssembly JavaScript API の使用</a>を参照)。しかし、例えば、パフォーマンスを最適化するために wasm モジュールを書きたいときや、あなた自身で WebAssembly コンパイラーを作るときには役に立ちます。</p>\n</div>"}},{"type":"prose","value":{"id":"s_式","title":"S 式","isH3":false,"content":"<p>バイナリー、テキスト形式どちらでも、 WebAssembly の基本的なコードの単位はモジュールです。テキスト形式ではモジュールは 1 つの大きな S 式として表現されます。 S 式はツリー構造を表現するための非常に古くてシンプルなテキスト形式で、モジュールをその構造とそのコードを記述するノードツリーとして考えることができます。しかし、プログラミング言語の AST (抽象構文木) とは異なり、　WebAssembly のツリーはかなり平坦で、ほとんどは命令の列で構成されています。</p>\n<p>はじめに、 S 式がどういうものか見てみましょう。ツリー内の各ノードは <code>( ... )</code> のように 1 組の括弧内に入れられます。 括弧内の最初のラベルは、それがどのノードタイプかを示し、スペースで区切られた属性、または子ノードのリストが続きます。次のコードは WebAssembly の S 式を意味します。</p>\n<div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">memory</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>ルートノード \"module\" と 2 つの子ノード、 \"1\" を属性に持つ \"memory\" ノード、\"func\" ノードを表します。これらのノードが実際にどういう意味なのかを見ていきましょう。</p>"}},{"type":"prose","value":{"id":"最もシンプルなモジュール","title":"最もシンプルなモジュール","isH3":true,"content":"<p>最もシンプルで短い実行可能な wasm モジュールから始めてみましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>このモジュールは完全に空ですが、モジュールとしては有効です。</p>\n<p>いま、このモジュールをバイナリーに変換すると (<a href=\"/ja/docs/WebAssembly/Text_format_to_wasm\">WebAssembly テキスト形式から wasm に変換する</a> を参照) 、 <a href=\"http://webassembly.org/docs/binary-encoding/#high-level-structure\" class=\"external\" rel=\" noopener\">バイナリー形式</a> で記述された 8 バイトのモジュールヘッダーだけになります。</p>\n<div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token number\">0000000</span>: <span class=\"token number\">0061</span> 736d              ; WASM_BINARY_MAGIC\n<span class=\"token number\">0000004</span>: <span class=\"token number\">0100</span> <span class=\"token number\">0000</span>              ; WASM_BINARY_VERSION\n</code></pre></div>"}},{"type":"prose","value":{"id":"モジュールに機能を追加する","title":"モジュールに機能を追加する","isH3":true,"content":"<p>はい、これは全然面白くないですね。モジュールに実行可能なコードを追加していきましょう。</p>\n<p>すべての WebAssembly モジュール内のコードは次の疑似コード構造を持つ関数にグループ化されます:</p>\n<div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span> <span class=\"token keyword\">func</span> &lt;signature&gt; &lt;locals&gt; &lt;body&gt; <span class=\"token punctuation\">)</span>\n</code></pre></div>\n<ul>\n  <li><strong>signature</strong> は関数が何を受け取る (引数) かと何を返す (返値) かを宣言します。</li>\n  <li><strong>locals</strong> は JavaScript でいうと変数のようなものですが、明示的な型が宣言されます。</li>\n  <li><strong>body</strong> は線形の低レベルな命令のリストです。</li>\n</ul>\n<p>S 式であるために違って見えますが、これは、他の言語の関数に似ています。</p>"}},{"type":"prose","value":{"id":"シグネチャと引数","title":"シグネチャと引数","isH3":false,"content":"<p>シグネチャは、返値の型宣言のリストが後に続く、引数の型宣言の並びです。ここで注目すべきは次の点です。</p>\n<ul>\n  <li><code>(result)</code> がない場合、その関数は何も返さないということです。</li>\n  <li>現在は、最大で 1 つの返値の型を指定することができますが、任意の数に<a href=\"https://github.com/WebAssembly/spec/blob/master/proposals/multi-value/Overview.md\" class=\"external\" rel=\" noopener\">緩和される予定</a>です。</li>\n</ul>\n<p>それぞれの引数には、明示的に型を宣言します。 wasm は現在 4 つの数値型を利用できます（さらに参照型もあります。以下の<a href=\"#%E5%8F%82%E7%85%A7%E5%9E%8B\">参照型</a>の項を参照してください）。</p>\n<ul>\n  <li><code>i32</code>: 32 ビット整数</li>\n  <li><code>i64</code>: 64 ビット整数</li>\n  <li><code>f32</code>: 32 ビット浮動小数点数</li>\n  <li><code>f64</code>: 64 ビット浮動小数点数</li>\n</ul>\n<p>単体の引数は <code>(param i32)</code> 、返値は <code>(result i32)</code> のように記述します。したがって、 2 つの 32 ビット整数を引数にとり、 64 ビット浮動小数点数を返すバイナリー関数は次のように記述します。</p>\n<div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">result</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">)</span> ... <span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>シグネチャのあとに、型付けされたローカル変数のリストが続きます (例: <code>(local i32)</code>) 。引数は基本的に、呼び出し元から渡された対応する引数の値で初期化される単なるローカル変数です。</p>"}},{"type":"prose","value":{"id":"ローカル変数と引数を取得設定する","title":"ローカル変数と引数を取得/設定する","isH3":false,"content":"<p>ローカル変数と引数は関数本体から <code>local.get</code> と <code>local.set</code> 命令を使用して読み書きすることができます。</p>\n<p><code>local.get</code>/<code>local.get</code> コマンドは数値のインデックスから取得/設定される項目を参照します。最初に引数が宣言順に、その後に、ローカル変数が宣言順に参照されます。次の関数を見てください。</p>\n<div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token keyword\">f32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">local</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">local</span>.get <span class=\"token number\">0</span>\n  <span class=\"token keyword\">local</span>.get <span class=\"token number\">1</span>\n  <span class=\"token keyword\">local</span>.get <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>命令 <code>local.get 0</code> は i32 の引数, <code>local.get 1</code> は f32 の引数、そして <code>local.get 2</code> は f64 のローカル変数を取得します。</p>\n<p>ここで別の問題があります。数値のインデックスを使用して項目を参照すると、混乱したり、困ってしまうことがあります。そこで、テキスト形式では、単純に型宣言の直前に (<code>$</code>) を接頭辞として付けた名前を、引数、ローカル変数や他の多くの項目につけることができます。</p>\n<p>したがって、上記のシグネチャを次のように書き直すことができます。</p>\n<div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token variable\">$p1</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token variable\">$p2</span> <span class=\"token keyword\">f32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">local</span> <span class=\"token variable\">$loc</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">)</span> …<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>そして、<code>local.get 0</code> の代わりに <code>local.get $p1</code> と書くことができるようになります（このテキストがバイナリーに変換されたとき、バイナリーには整数値だけが残されることに注意してください）。</p>"}},{"type":"prose","value":{"id":"スタックマシン","title":"スタックマシン","isH3":false,"content":"<p>関数本体を書く前に、もう 1 つ、<strong>スタックマシン</strong>について話をする必要があります。ブラウザーはそれを更に効率的な形にコンパイルしますが、wasm の実行はスタックマシンとして定義されます。スタックマシンの基本的な考え方は、すべての命令がスタックから特定の数の <code>i32</code>/<code>i64</code>/<code>f32</code>/<code>f64</code> 値をプッシュ、ポップするようにすることです。</p>\n<p>例えば、 <code>local.get</code> はローカル変数の値をスタックにプッシュするように定義されます。そして、<code>i32.add</code> は2つの <code>i32</code> 値 (スタックにプッシュされた前の2つの値を暗黙的に取得します) をポップし、合計を計算して (2^32 の剰余として) 結果の i32 値をプッシュします。</p>\n<p>関数が呼び出されたとき、空のスタックから開始され、徐々に積まれてゆき、本体の命令が実行されると空になります。例として、次の関数の実行後について見てみましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token variable\">$p</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">result</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">local</span>.get <span class=\"token variable\">$p</span>\n  <span class=\"token keyword\">local</span>.get <span class=\"token variable\">$p</span>\n  <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>add</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>スタックには <code>i32</code> という値 1 つだけが入っています。これは式 (<code>$p + $p</code>) が <code>i32.add</code> よって処理された結果です。関数の返値はスタックに残った最後の値になります。</p>\n<p>WebAssembly のバリデーションルールはスタックが正確に一致することを保証します。もし、<code>(result f32)</code> と宣言した場合、最終的にスタックに1つだけ <code>f32</code> 値が積まれている状態である必要があります。結果の型がない場合は、スタックは空でなければなりません。</p>"}},{"type":"prose","value":{"id":"はじめての関数本体","title":"はじめての関数本体","isH3":false,"content":"<p>前述の通り、関数本体は関数が呼び出された後に続く単純な命令列です。 これまでに学んだことと共に、最終的にはシンプルな関数を含むモジュールを定義することができるようになります。</p>\n<div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token variable\">$lhs</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token variable\">$rhs</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">result</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">local</span>.get <span class=\"token variable\">$lhs</span>\n    <span class=\"token keyword\">local</span>.get <span class=\"token variable\">$rhs</span>\n    <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>add</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>この関数は 2 つの引数を受け取って、それらを足して、その結果を返します。</p>\n<p>関数本体に置けるものはもっとたくさんありますが、いまはシンプルなもので始めます。進むにつれてもっと多くの例を見ていきます。すべての有効なオペコードのリストについては <a href=\"https://webassembly.github.io/spec/core/exec/index.html\" class=\"external\" rel=\" noopener\">webassembly.org Semantics reference</a> を調べてみてください。</p>"}},{"type":"prose","value":{"id":"関数を呼び出す","title":"関数を呼び出す","isH3":true,"content":"<p>定義した関数は自身では大したことをしません。いまはそれを呼び出す必要があります。どのようにすればよいでしょうか。 ES2015 モジュールのように、wasm 関数はモジュール内の <code>export</code> ステートメントによって明示的にエクスポートしなければなりません。</p>\n<p>ローカル変数と同じように、関数も既定ではインデックスで識別されますが、便宜上の関数名を付けることができます。 <code>func</code> キーワードの直後にドル記号で始まる名前を付けてみましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token variable\">$add</span> … <span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>ここでエクスポート宣言を追加する必要があります。次のようになります。</p>\n<div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">export</span> <span class=\"token string\">\"add\"</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token variable\">$add</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>ここで <code>add</code> は JavaScript で認識される関数名であるのに対して、<code>$add</code> はモジュール内の、どの WebAssembly 関数をエクスポートするのかを選択します。</p>\n<p>（今のところ）最終的なモジュールは次のようになります。</p>\n<div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token variable\">$add</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token variable\">$lhs</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token variable\">$rhs</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">result</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">local</span>.get <span class=\"token variable\">$lhs</span>\n    <span class=\"token keyword\">local</span>.get <span class=\"token variable\">$rhs</span>\n    <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>add</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">export</span> <span class=\"token string\">\"add\"</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token variable\">$add</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>例に従うなら、上のモジュールを <code>add.wat</code> という名前で保存して、wabt を使用して（詳細は <a href=\"/ja/docs/WebAssembly/Text_format_to_wasm\">WebAssembly テキスト形式から wasm に変換する</a> を参照してください）、<code>add.wasm</code> というファイルに変換します。</p>\n<p>次に、 <code>addCode</code> という名前の型付き配列にバイナリー読み込み（<a href=\"/ja/docs/WebAssembly/Loading_and_running\">WebAssembly コードのロードと実行</a> で説明されています）、コンパイル、インスタンス化して、JavaScript で <code>add</code> 関数を実行します（<code>add()</code> はインスタンスの <a href=\"/ja/docs/WebAssembly/JavaScript_interface/Instance/exports\"><code>exports</code></a> プロパティから見つけることができます）。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add.wasm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"3\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> この例は GitHub の<a href=\"https://github.com/mdn/webassembly-examples/blob/master/understanding-text-format/add.html\" class=\"external\" rel=\" noopener\">add.html</a> (<a href=\"https://mdn.github.io/webassembly-examples/understanding-text-format/add.html\" class=\"external\" rel=\" noopener\">動作例</a>) にあります。関数のインスタンス化についての詳細は <a href=\"/ja/docs/WebAssembly/JavaScript_interface/instantiateStreaming\"><code>WebAssembly.instantiateStreaming()</code></a> も合わせて参照してください。</p>\n</div>"}},{"type":"prose","value":{"id":"基礎を探る","title":"基礎を探る","isH3":false,"content":"<p>ここでは実際の基本的な例を取り上げてから、いくつかの高度な機能について見てみましょう。</p>"}},{"type":"prose","value":{"id":"同じモジュールの他の関数から関数を呼び出す","title":"同じモジュールの他の関数から関数を呼び出す","isH3":true,"content":"<p><code>call</code> 命令はインデックスか名前を指定して単一の関数を呼び出します。例えば、次のモジュールには 2 つの関数が含まれています。 1 つ目はただ 42 を返すだけ、もう 1 つは 1 つ目のものに 1 を足した値を返します。</p>\n<div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token variable\">$getAnswer</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">result</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">export</span> <span class=\"token string\">\"getAnswerPlus1\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">result</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">call</span> <span class=\"token variable\">$getAnswer</span>\n    <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>add</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> <code>i32.const</code> は 32 ビット整数を定義してスタックにプッシュするだけです。 <code>i32</code> 以外の有効な型に変えて、 const の値を好きなものに変えることができます（ここでは <code>42</code> に設定しました）。</p>\n</div>\n<p>この例で、 <code>func</code> の直後に宣言された <code>(export \"getAnswerPlus1\")</code> セクションに気づくでしょう。これはこの関数をエクスポートするための宣言をして、さらにそれに名前をつけるために使用するショートカットです。</p>\n<p>これは、上で行ったように、モジュール内の関数外の別の場所で、関数ステートメントと分けて定義するのと同等の機能です。</p>\n<div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">export</span> <span class=\"token string\">\"getAnswerPlus1\"</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token variable\">$functionName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>上のモジュールを呼び出す JavaScript コードは次のようになります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'call.wasm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">getAnswerPlus1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"43\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"javascript_から関数をインポートする","title":"JavaScript から関数をインポートする","isH3":true,"content":"<p>すでに、JavaScript から WebAssembly 関数を呼び出すことについては確認しましたが、WebAssembly から JavaScript 関数を呼び出すことについてはどうでしょうか? WebAssembly は実際に JavaScript のビルトインの情報を持っていませんが、JavaScript か wasm 関数をインポートするための一般的な方法があります。例を見てみましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">import</span> <span class=\"token string\">\"console\"</span> <span class=\"token string\">\"log\"</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token variable\">$log</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">export</span> <span class=\"token string\">\"logIt\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">13</span>\n    <span class=\"token keyword\">call</span> <span class=\"token variable\">$log</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>WebAssembly は 2 階層の名前空間のインポート文を持っています。ここでは、<code>console</code> モジュールから <code>log</code> 関数をインポートすることを要求しています。また、エクスポートされた <code>logIt</code> 関数から、上で紹介した <code>call</code> 命令を使用して、インポートされた関数を呼ぶ出すことができます。</p>\n<p>インポートされた関数は通常の関数と同じようなものです。WebAssembly のバリデーションによって静的にチェックするシグネチャを持ち、インデックスか名前を付けて呼び出すことができます。</p>\n<p>JavaScript 関数にはシグネチャの概念がないため、インポート宣言のシグネチャに関係なく、どの JavaScript 関数も渡すことができます。モジュールがインポート宣言をすると、 <a href=\"/ja/docs/WebAssembly/JavaScript_interface/instantiate\"><code>WebAssembly.instantiate()</code></a> を呼び出す側は、対応したプロパティを持ったインポートオブジェクトを渡す必要があります。</p>\n<p>上の場合、 <code>importObject.console.log</code> が JavaScript 関数であるようなオブジェクト(<code>importObject</code> と呼びましょう) が必要になります。</p>\n<p>これは次のようになります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> importObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">console</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">log</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nWebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'logger.wasm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> importObject<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    obj<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">logIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>Note:</strong> この例は GitHub の <a href=\"https://github.com/mdn/webassembly-examples/blob/master/understanding-text-format/logger.html\" class=\"external\" rel=\" noopener\">logger.html</a> (<a href=\"https://mdn.github.io/webassembly-examples/understanding-text-format/logger.html\" class=\"external\" rel=\" noopener\">動作例</a>)を参照してください。</p>\n</div>"}},{"type":"prose","value":{"id":"webassembly_でのグローバルの宣言","title":"WebAssembly でのグローバルの宣言","isH3":true,"content":"<p>WebAssembly には、 JavaScript からアクセス可能なグローバル変数インスタンスを作成する機能と、 1 つ以上の <a href=\"/ja/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a> インスタンスにまたがってインポート/エクスポート可能なグローバル変数インスタンスを作成する機能があります。これは、複数のモジュールを動的にリンクすることができるので、とても便利です。</p>\n<p>WebAssembly のテキスト形式では、次のようになります (GitHub のリポジトリにある <a href=\"https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/global.wat\" class=\"external\" rel=\" noopener\">global.wat</a> を参照してください。JavaScript の例は <a href=\"https://mdn.github.io/webassembly-examples/js-api-examples/global.html\" class=\"external\" rel=\" noopener\">global.html</a> も参照してください)。</p>\n<div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span>\n   <span class=\"token punctuation\">(</span><span class=\"token keyword\">global</span> <span class=\"token variable\">$g</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">import</span> <span class=\"token string\">\"js\"</span> <span class=\"token string\">\"global\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">export</span> <span class=\"token string\">\"getGlobal\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">result</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">(</span><span class=\"token keyword\">global</span>.get <span class=\"token variable\">$g</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">export</span> <span class=\"token string\">\"incGlobal\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">(</span><span class=\"token keyword\">global</span>.set <span class=\"token variable\">$g</span>\n            <span class=\"token punctuation\">(</span><span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>add</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">global</span>.get <span class=\"token variable\">$g</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>これは、キーワード <code>global</code> を使用してグローバルな値を指定していることと、値のデータ型と一緒にキーワード <code>mut</code> を指定して変更可能にしたい場合に指定していることを除いて、以前に見たものと似ています。</p>\n<p>JavaScript を使用して同等の値を作成するには、 <a href=\"/ja/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global()</code></a> コンストラクターを使用してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> global <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebAssembly<span class=\"token punctuation\">.</span>Global</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"i32\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">mutable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"webassembly_メモリー","title":"WebAssembly メモリー","isH3":true,"content":"<p>上の例はとてもひどいロギング関数です。たった 1 つの整数値を表示するだけです。文字列を表示するためにはどうしたらよいでしょうか? 文字列やさらに複雑なデータ型を扱うために WebAssembly は <strong>メモリー</strong> を提供します（WebAssembly のより新しい実装では、<a href=\"#%E5%8F%82%E7%85%A7%E5%9E%8B\">参照型</a>もあります）。 WebAssembly では、メモリーは徐々に拡張することのできるただの大きなバイト列です。 WebAssembly は <code>i32.load</code> や <code>i32.store</code> のような命令を持っており、それで<a href=\"http://webassembly.org/docs/semantics/#linear-memory\" class=\"external\" rel=\" noopener\">線形メモリー</a>を読み書きします。</p>\n<p>JavaScript から見ると、メモリーはすべて 1 つの大きな (リサイズ可能な) <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> の内部にあるように見えます。それはまさに、asm.js とともに動かさなければならないものすべてです (ただしリサイズは出来ません。asm.js の <a href=\"http://asmjs.org/spec/latest/#programming-model\" class=\"external\" rel=\" noopener\">プログラミングモデル</a> を参照してください) 。</p>\n<p>したがって、文字列は線形メモリー内部のどこかに存在するただのバイト列です。適切なバイト列の文字列をメモリーに書き込んだとしましょう。その文字列をどのように JavaScript に渡すのでしょうか?</p>\n<p>鍵は <a href=\"/ja/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory()</code></a> インターフェースを使用して JavaScript から WebAssembly の線形メモリーを作成し、関連するインスタンスメソッドを使用して既存の Memory インスタンス (現在は 1 モジュールごとに 1 つだけ持つことができます) にアクセスできることです。Memory インスタンスは <a href=\"/ja/docs/WebAssembly/JavaScript_interface/Memory/buffer\"><code>buffer</code></a> ゲッターを持ち、これは線形メモリー全体を指し示す ArrayBuffer を返します。</p>\n<p>Memory インスタンスは、例えば JavaScript から <a href=\"/ja/docs/WebAssembly/JavaScript_interface/Memory/grow\"><code>Memory.grow()</code></a> メソッドを使用して拡張することもできます。拡張したとき、<code>ArrayBuffer</code> はサイズを変更することができないため、現在の <code>ArrayBuffer</code> は切り離され、新しく作成された、より大きな <code>ArrayBuffer</code> を指し示すようになります。これは、JavaScript に文字列を渡すために必要なことは、線形メモリー内での文字列のオフセットと長さを指定する方法を渡すことだけであることを意味します。</p>\n<p>文字列自身に文字列の長さの情報をエンコードするさまざまな方法 (例えば、 C 言語の文字列) がありますが、簡単にするためにここではオフセットと長さの両方を引数として渡します。</p>\n<div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">import</span> <span class=\"token string\">\"console\"</span> <span class=\"token string\">\"log\"</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token variable\">$log</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>JavaScript 側では、バイト列を簡単に JavaScript 文字列にデコードするために <a href=\"/ja/docs/Web/API/TextDecoder\">TextDecoder API</a> を使用することができます (ここでは <code>utf8</code> を指定していますが、他の多くのエンコーディングに対応しています) 。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">consoleLogString</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">offset<span class=\"token punctuation\">,</span> length</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>memory<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> string <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextDecoder</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>最後のに欠けているのは、 <code>consoleLogString</code> が WebAssembly の <code>memory</code> にアクセスする場所です。このあたり WebAssembly は柔軟です。JavaScript から <a href=\"/ja/docs/WebAssembly/JavaScript_interface/Memory\"><code>Memory</code></a> オブジェクトを作成して WebAssembly モジュールでメモリーをインポートするか、WebAssembly モジュールでメモリーを作成して JavaScript で使用するためにエクスポートすることができます。</p>\n<p>簡単にするために、JavaScript で作成したメモリーを WebAssembly にインポートしてみましょう。<code>import</code> ステートメントは次のようになります。</p>\n<div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">import</span> <span class=\"token string\">\"js\"</span> <span class=\"token string\">\"mem\"</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">memory</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p><code>1</code> はインポートされたメモリーに少なくとも 1 ページ分のメモリーが必要であることを示します(WebAssembly では 1 ページを 64KB と定義しています)。</p>\n<p>文字列 \"Hi\" を出力する完全なモジュールを見てみましょう。通常のコンパイルされた C のプログラムでは文字列にメモリーを割り当てる関数を呼び出しますが、ここでは独自のアセンブリーを書くだけで、すべての線形メモリーを所有しているので、 <code>data</code> セクションを使用してグローバルメモリーに文字列の内容を書きこむことができます。データセクションではインスタンス化時にオフセットを指定してバイト列の文字列を書きこむことができます。これはネイティブの実行可能形式の <code>.data</code> セクションに似ています。</p>\n<p>最終的な wasm モジュールは次のようになります。</p>\n<div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">import</span> <span class=\"token string\">\"console\"</span> <span class=\"token string\">\"log\"</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token variable\">$log</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token keyword\">i32</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">import</span> <span class=\"token string\">\"js\"</span> <span class=\"token string\">\"mem\"</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">memory</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">data</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"Hi\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">export</span> <span class=\"token string\">\"writeHi\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">0</span>  <span class=\"token comment\">;; pass offset 0 to log</span>\n    <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">2</span>  <span class=\"token comment\">;; pass length 2 to log</span>\n    <span class=\"token keyword\">call</span> <span class=\"token variable\">$log</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>Note:</strong> 上記の 2 重のセミコロン構文 (<code>;;</code>) は WebAssembly ファイル内でコメントを書くためのものです。</p>\n</div>\n<p>ここで、JavaScript から 1 ページ分のサイズを持つ Memory を作成してそれに渡すことができます。結果としてコンソールに \"Hi\" と出力されます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> memory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebAssembly<span class=\"token punctuation\">.</span>Memory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">initial</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> importObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">console</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">log</span><span class=\"token operator\">:</span> consoleLogString <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">js</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">mem</span><span class=\"token operator\">:</span> memory <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nWebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'logger2.wasm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> importObject<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    obj<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">writeHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect6\">\n  <p><strong>Note:</strong> 完全なソースは GitHub の <a href=\"https://github.com/mdn/webassembly-examples/blob/master/understanding-text-format/logger2.html\" class=\"external\" rel=\" noopener\">logger2.html</a> (<a href=\"https://mdn.github.io/webassembly-examples/understanding-text-format/logger2.html\" class=\"external\" rel=\" noopener\">動作例</a>) を参照してください。</p>\n</div>"}},{"type":"prose","value":{"id":"webassembly_テーブル","title":"WebAssembly テーブル","isH3":true,"content":"<p>WebAssembly テキスト形式のツアーを終了するために、 WebAssembly で最も複雑でしばしば混乱する部分 (<strong>テーブル</strong>) を見てみましょう。テーブルは基本的に WebAssembly コードからインデックスでアクセスできるリサイズ可能な参照の配列です。</p>\n<p>なぜテーブルが必要なのかを見るために、最初に観察する必要があります。さきほど見た <code>call</code> 命令 (<a href=\"#%E5%90%8C%E3%81%98%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%AE%E4%BB%96%E3%81%AE%E9%96%A2%E6%95%B0%E3%81%8B%E3%82%89%E9%96%A2%E6%95%B0%E3%82%92%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%99\">同じモジュールの他の関数から関数を呼び出す</a> を参照) は静的な関数インデックスをとり、結果として 1 つの関数しか呼び出せません。しかし、呼び出し先がランタイム値の場合はどうなるでしょうか。</p>\n<ul>\n  <li>JavaScript ではこれは常に見えます。関数は第一級の値です。</li>\n  <li>C/C++ では関数ポインターで見ることができます。</li>\n  <li>C++ では仮想関数で見ることができます。</li>\n</ul>\n<p>WebAssembly にはこれを実現するための一種の呼び出し命令が必要だったため、動的な関数をオペランドに受け取る <code>call_indirect</code> を与えました。問題は WebAssembly ではオペランドに指定できる型が (現在) <code>i32</code>/<code>i64</code>/<code>f32</code>/<code>f64</code> だけであることです。</p>\n<p>WebAssembly は <code>anyfunc</code> 型 (任意のシグニチャの関数を保持できるため \"any\") を追加することができましたが、あいにくセキュリティ上の理由から <code>anyfunc</code> 型は線形メモリーに格納できませんでした。線形メモリーは格納された値の生の内容をバイト列として公開し、これによって wasm コンテンツが生の関数ポインターを自由に観察できて破損させることができてしまいます。これはウェブ上では許可できません。</p>\n<p>解決方法は関数参照をテーブルに格納し、代わりにテーブルのインデックスを渡すことでした。これは単なる i32 値です。<code>call_indirect</code> のオペランドは単純に i32 のインデックス値にすることができます。</p>\n<h4 id=\"wasm_でテーブルを定義する\">wasm でテーブルを定義する</h4>\n<p>どのようにしてテーブルに wasm 関数を配置するのでしょうか。 <code>data</code> セクションを使用して線形メモリーの領域をバイト列で初期化するのと同じように、<code>elem</code> セクションを使用してテーブルの領域を関数の列で初期化することが出来ます:</p>\n<div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">table</span> <span class=\"token number\">2</span> funcref<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">elem</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">$f1</span> <span class=\"token variable\">$f2</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token variable\">$f1</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">result</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token variable\">$f2</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">result</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span>\n  ...\n<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<ul>\n  <li><code>(table 2 funcref)</code> で、2 はテーブルの初期サイズ (2つの参照を格納できることを意味します) で、<code>funcref</code> はこれらの参照の要素型がの関数参照であることを宣言します。</li>\n  <li>関数 (<code>func</code>) セクションは他の宣言された wasm 関数と同様です。これらはテーブルで参照する関数です (上の例ではそれぞれは定数を返すだけです) 。セクションが宣言された順序は重要ではないことに注意してください。関数はどこででも宣言できて <code>elem</code> セクションから参照することができます。</li>\n  <li><code>elem</code> セクションはモジュール内の関数のサブセットをリスト化することができます (任意の順で並べることができ、重複を許容します) 。これは参照された順序でテーブルに参照される関数のリストです。</li>\n  <li><code>elem</code> セクション内の <code>(i32.const 0)</code> 値はオフセットです。これはセクションの先頭で宣言する必要があります。これはテーブルに関数参照を追加するインデックスの開始位置を指定します。ここでは 0 と テーブルのサイズとして 2 (上記参照) を指定していますので、2つの参照はインデックスが 0 と 1 の部分に書き込まれます。もしオフセットを 1 にして書き込みたければ、 <code>(i32.const 1)</code> と記述してテーブルのサイズを 3 にする必要があります。</li>\n</ul>\n<div class=\"notecard note\" id=\"sect7\">\n  <p><strong>Note:</strong> 初期化されていない要素はデフォルトの throw-on-call 値が与えられます。</p>\n</div>\n<p>JavaScript で同じようなテーブルのインスタンスを作成する場合、次のようになります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// table section</span>\n  <span class=\"token keyword\">var</span> tbl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebAssembly<span class=\"token punctuation\">.</span>Table</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">initial</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">element</span><span class=\"token operator\">:</span><span class=\"token string\">\"anyfunc\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// function sections:</span>\n  <span class=\"token keyword\">var</span> f1 <span class=\"token operator\">=</span> <span class=\"token operator\">...</span> <span class=\"token comment\">/* some imported WebAssembly function */</span>\n  <span class=\"token keyword\">var</span> f2 <span class=\"token operator\">=</span> <span class=\"token operator\">...</span> <span class=\"token comment\">/* some imported WebAssembly function */</span>\n\n  <span class=\"token comment\">// elem section</span>\n  tbl<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> f1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  tbl<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> f2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"テーブルを使用する\">テーブルを使用する</h4>\n<p>先に進みましょう。いま、何らかの形で使用するために必要なテーブルを定義しました。このコードのセクションで使ってみましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span> <span class=\"token variable\">$return_i32</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">result</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">;; if this was f32, type checking would fail</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">export</span> <span class=\"token string\">\"callByIndex\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token variable\">$i</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">result</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">local</span>.get <span class=\"token variable\">$i</span>\n  <span class=\"token keyword\">call_indirect</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span> <span class=\"token variable\">$return_i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<ul>\n  <li><code>(type $return_i32 (func (result i32)))</code> ブロックで参照名を持つ型を指定します。この型は後でテーブルの関数参照呼び出しの型チェックを行うときに使用されます。ここでは、参照が1つの <code>i32</code> を返す関数である必要があると言っています。</li>\n  <li>次に、<code>callByIndex</code> としてエクスポートされる関数を定義します。引数として1つの <code>i32</code> をとり、引数名として <code>$i</code> が指定されています。</li>\n  <li>関数内部でスタックに値を1つ追加します。値は引数 <code>$i</code> のものが渡されます。</li>\n  <li>最後に、テーブルから関数を呼び出すために <code>call_indirect</code> を使用します。これは暗黙的に <code>$i</code> の値をスタックからポップします。この結果、<code>callByIndex</code> 関数はテーブルの <code>$i</code> 番目の関数を呼び出します。</li>\n</ul>\n<p><code>call_indirect</code> の引数はコマンド呼び出しの前に置く代わりに、次のように明示的に宣言することもできます:</p>\n<div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">call_indirect</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span> <span class=\"token variable\">$return_i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">local</span>.get <span class=\"token variable\">$i</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>より高級な、JavaScript のような表現力の高い言語では、関数を含む配列 (あるいはオブジェクトかもしれません) で同じことができることが想像できますよね。擬似コードだとこれは <code>tbl[i]()</code> のようになります。</p>\n<p>型チェックの話に戻ります。WebAssembly は型チェックされていて、 <code>funcref</code> は「任意の関数シグネチャ」を意味するので、呼び出し先の (推定される) シグネチャを指定する必要があります。そのため、 <code>$return_i32</code> 型を指定することで、プログラムに関数が <code>i32</code> を返すはずだと知らせます。もし呼び出し先のシグネチャが一致しない (代わりに <code>f32</code> が返されるような) 場合は <a href=\"/ja/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code></a> 例外が発生します。</p>\n<p>さて、呼び出しを行うときにどのようにテーブルに <code>call_indirect</code> をリンクさせているのでしょうか? 答えは、現在モジュールインスタンスごとに1つのテーブルしか許容されないため、<code>call_indirect</code> はそれを暗黙的に呼び出します。将来的に複数のテーブルを持てるようになったとき、以下の行のように、何らかのテーブル識別子を指定する必要があるでしょう。</p>\n<div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token keyword\">call_indirect</span> <span class=\"token variable\">$my_spicy_table</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span> <span class=\"token variable\">$i32_to_void</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>完全なモジュールは次のようになります。例は <a href=\"https://github.com/mdn/webassembly-examples/blob/master/understanding-text-format/wasm-table.wat\" class=\"external\" rel=\" noopener\">wasm-table.wat</a> を参照してください:</p>\n<div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">table</span> <span class=\"token number\">2</span> funcref<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token variable\">$f1</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">result</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token variable\">$f2</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">result</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">elem</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">$f1</span> <span class=\"token variable\">$f2</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span> <span class=\"token variable\">$return_i32</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">result</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">export</span> <span class=\"token string\">\"callByIndex\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token variable\">$i</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">result</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">local</span>.get <span class=\"token variable\">$i</span>\n    <span class=\"token keyword\">call_indirect</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span> <span class=\"token variable\">$return_i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>次の JavaScript を使用してウェブページに読み込んでみましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wasm-table.wasm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">callByIndex</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns 42</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">callByIndex</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns 13</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">callByIndex</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns an error, because there is no index position 2 in the table</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect8\">\n  <p><strong>Note:</strong> 例は GitHub の <a href=\"https://github.com/mdn/webassembly-examples/blob/master/understanding-text-format/wasm-table.html\" class=\"external\" rel=\" noopener\">wasm-table.html</a> (<a href=\"https://mdn.github.io/webassembly-examples/understanding-text-format/wasm-table.html\" class=\"external\" rel=\" noopener\">動作例</a>) を参照してください。</p>\n</div>\n<div class=\"notecard note\" id=\"sect9\">\n  <p><strong>Note:</strong> Memory と同じように Table も JavaScript から作成すること (<a href=\"/ja/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table()</code></a> を参照) 、別の wasm モジュール間でインポートすることができます。</p>\n</div>"}},{"type":"prose","value":{"id":"テーブルの変更と動的リンク","title":"テーブルの変更と動的リンク","isH3":true,"content":"<p>JavaScript は関数参照にフルアクセスできるため、 Table オブジェクトは JavaScript から <a href=\"/ja/docs/WebAssembly/JavaScript_interface/Table/grow\"><code>grow()</code></a>, <a href=\"/ja/docs/WebAssembly/JavaScript_interface/Table/get\"><code>get()</code></a>, <a href=\"/ja/docs/WebAssembly/JavaScript_interface/Table/set\"><code>set()</code></a> メソッドを使用して変更することができます。また、 WebAssembly のコード自体も、<a href=\"#%E5%8F%82%E7%85%A7%E5%9E%8B\">参照型</a>の一部として追加された <code>table.get</code> や <code>table.set</code> などの命令を使ってテーブルを操作することが可能です。</p>\n<p>テーブルは変更可能であるため、高度な読み込み時および実行時の<a href=\"https://webassembly.org/docs/dynamic-linking\" class=\"external\" rel=\" noopener\">動的リンクスキーム</a>の実装に使用することができます。プログラムが動的にリンクされたとき、複数のインスタンスで同じメモリーとテーブルを共有することができます。これは複数のコンパイル済み <code>.dll</code> が単一のプロセスのアドレス空間を共有するネイティブアプリケーションと対称的です。</p>\n<p>この動作を確認するために、Memory オブジェクトと Table オブジェクトを含む単一のインポートオブジェクトを作成し、同じインポートオブジェクトを複数の <a href=\"/ja/docs/WebAssembly/JavaScript_interface/instantiate\"><code>instantiate()</code></a> の呼び出しで渡してみましょう。</p>\n<p><code>.wat</code> ファイルの例は次のようになります。</p>\n<p><code>shared0.wat</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">import</span> <span class=\"token string\">\"js\"</span> <span class=\"token string\">\"memory\"</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">memory</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">import</span> <span class=\"token string\">\"js\"</span> <span class=\"token string\">\"table\"</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">table</span> <span class=\"token number\">1</span> funcref<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">elem</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">$shared0func</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token variable\">$shared0func</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">result</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">0</span>\n   <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>load</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p><code>shared1.wat</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">import</span> <span class=\"token string\">\"js\"</span> <span class=\"token string\">\"memory\"</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">memory</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">import</span> <span class=\"token string\">\"js\"</span> <span class=\"token string\">\"table\"</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">table</span> <span class=\"token number\">1</span> funcref<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span> <span class=\"token variable\">$void_to_i32</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">result</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">export</span> <span class=\"token string\">\"doIt\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">result</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">0</span>\n   <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">42</span>\n   <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>store</span>  <span class=\"token comment\">;; store 42 at address 0</span>\n   <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">0</span>\n   <span class=\"token keyword\">call_indirect</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span> <span class=\"token variable\">$void_to_i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>これらは次のように動作します。</p>\n<ol>\n  <li>関数 <code>shared0func</code> は <code>shared0.wat</code> で定義され、インポートされたテーブルに格納されます。</li>\n  <li>この関数は定数値 <code>0</code> を作成して、次に <code>i32.load</code> コマンドを使用して指定したメモリーのインデックスから値をロードします。そのインデックスは <code>0</code> になります 。先と同様に、前の値をスタックから暗黙的にポップします。つまり、<code>shared0func</code> はメモリーのインデックス <code>0</code> の位置に格納された値をロードして返します。</li>\n  <li><code>shared1.wat</code> では、 <code>doIt</code> という関数をエクスポートします。この関数は2つの定数値 <code>0</code> と <code>42</code> を作成して <code>i32.store</code> を呼び出して、インポートされたメモリーの指定したインデックスに指定した値を格納します。ここでも、これらの値はスタックから暗黙的にポップされます。したがって、結果的にメモリーのインデックスが <code>0</code> の位置に、値として <code>42</code> が格納されます。</li>\n  <li>関数の最後では、定数値 <code>0</code> を作成し、テーブルのインデックスが 0 の位置にある関数を呼び出します。これは <code>shared0func</code> で、先に <code>shared0.wat</code> の <code>elem</code> ブロックで格納されたものです。</li>\n  <li>呼び出されたとき、<code>shared0func</code> は <code>shared1.wat</code> 内で <code>i32.store</code> コマンドを使用してメモリーに格納された 42 をロードします。</li>\n</ol>\n<div class=\"notecard note\" id=\"sect10\">\n  <p><strong>Note:</strong> 上の式はスタックから値を暗黙的にポップしますが、代わりにコマンド呼び出しの中で明示的に宣言することができます。</p>\n  <div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>store</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">call_indirect</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span> <span class=\"token variable\">$void_to_i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n</div>\n<p>アセンブリーに変換した後、次のコードで JavaScript 内で <code>shared0.wasm</code> と <code>shared1.wasm</code> を使用します:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> importObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">js</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">memory</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebAssembly<span class=\"token punctuation\">.</span>Memory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">initial</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">table</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebAssembly<span class=\"token punctuation\">.</span>Table</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">initial</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">element</span><span class=\"token operator\">:</span> <span class=\"token string\">\"anyfunc\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'shared0.wasm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> importObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'shared1.wasm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> importObj<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">results</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// prints 42</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>コンパイルされた各モジュールは同じメモリーとテーブルオブジェクトをインポートし、その結果同じ線形メモリーとテーブルの「アドレス空間」を共有することができます。</p>\n<div class=\"notecard note\" id=\"sect11\">\n  <p><strong>Note:</strong> 例は GitHub の <a href=\"https://github.com/mdn/webassembly-examples/blob/master/understanding-text-format/shared-address-space.html\" class=\"external\" rel=\" noopener\">shared-address-space.html</a> (<a href=\"https://mdn.github.io/webassembly-examples/understanding-text-format/shared-address-space.html\" class=\"external\" rel=\" noopener\">動作例</a>) を参照してください。</p>\n</div>"}},{"type":"prose","value":{"id":"大規模メモリー操作","title":"大規模メモリー操作","isH3":false,"content":"<p>大規模メモリー操作は、言語へ新しく追加されたものです（例えば <a href=\"/ja/docs/Mozilla/Firefox/Releases/79\">Firefox 79</a>）。コピーや初期化などのバルクメモリ操作のために 7 つの新しい組み込み操作が提供されており、 WebAssembly が <code>memcpy</code> や <code>memmove</code> などのネイティブ関数を、より効率的でパフォーマンスの高い方法でモデル化できるようにします。</p>\n<p>新しい操作は次の通りです。</p>\n<ul>\n  <li><code>data.drop</code>: データセグメント内のデータを無効にします。</li>\n  <li><code>elem.drop</code>: 要素セグメント内のデータを無効にします。</li>\n  <li><code>memory.copy</code>: 線形メモリーの一範囲を他へコピーします。</li>\n  <li><code>memory.fill</code>: 線形メモリーの一範囲を指定した値で埋めます。</li>\n  <li><code>memory.init</code>: データセグメントから範囲をコピーします。</li>\n  <li><code>table.copy</code>: テーブルの一範囲から他へコピーします。</li>\n  <li><code>table.init</code>: 要素セグメントから範囲をコピーします。</li>\n</ul>\n<div class=\"notecard note\" id=\"sect12\">\n  <p><strong>Note:</strong> 詳しい情報は <a href=\"https://github.com/WebAssembly/bulk-memory-operations/blob/master/proposals/bulk-memory-operations/Overview.md\" class=\"external\" rel=\" noopener\">Bulk Memory Operations and Conditional Segment Initialization</a> の提案にあります。</p>\n</div>"}},{"type":"prose","value":{"id":"参照型","title":"参照型","isH3":false,"content":"<p><a href=\"https://github.com/WebAssembly/reference-types/blob/master/proposals/reference-types/Overview.md\" class=\"external\" rel=\" noopener\">参照型の提案</a> (<a href=\"/ja/docs/Mozilla/Firefox/Releases/79\">Firefox 79</a> で対応) では、主に 2 つのことを提供しています。</p>\n<ul>\n  <li>新しい型である <code>externref</code> は、文字列、DOM 参照、オブジェクトなど、あらゆる JavaScript の値を保持することができます。 WebAssembly の観点からは <code>externref</code> は不透明です。wasm モジュールはこれらの値にアクセスして操作することができず、代わりに値を受け取って送り返すことだけができます。しかし、これは wasm モジュールが JavaScript の関数や DOM API などを呼び出したり、ホスト環境との相互運用を容易にするために非常に有用です。<code>externref</code> は値型とテーブル要素に使用することができます。</li>\n  <li>JavaScript API 経由ではなく、wasm モジュールが直接 <a href=\"#webassembly_%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB\">WebAssembly テーブル</a>を操作できるようにするための新しい命令がいくつか追加されました。</li>\n</ul>\n<div class=\"notecard note\" id=\"sect13\">\n  <p><strong>Note:</strong> <a href=\"https://rustwasm.github.io/docs/wasm-bindgen/\" class=\"external\" rel=\" noopener\">wasm-bindgen</a> のドキュメントには、 <code>externref</code> を Rust で利用する方法について、いくつかの有用な情報が含まれています。</p>\n</div>"}},{"type":"prose","value":{"id":"webassembly_の複数値","title":"WebAssembly の複数値","isH3":false,"content":"<p>もっと最近になって (例えば <a href=\"/ja/docs/Mozilla/Firefox/Releases/78\">Firefox 78</a>) 言語に追加されたものが WebAssembly 複数値です。これは、WebAssembly 関数が複数の値を返すことができるようになり、一連の命令が複数のスタック値を消費して生成することができるようになったことを意味します。</p>\n<p>執筆時点 (2020 年 6 月) において、これは初期段階であり、利用可能な多値命令は、それ自体が複数の値を返す関数の呼び出しのみです。例を示します。</p>\n<div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token variable\">$get_two_numbers</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">result</span> <span class=\"token keyword\">i32</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">export</span> <span class=\"token string\">\"add_two_numbers\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">result</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">call</span> <span class=\"token variable\">$get_two_numbers</span>\n    <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>add</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>しかし、これはより有用な命令タイプやその他のものへの道を開くことになるでしょう。これまでの進捗状況や、これがどのように動作するかについては、 Nick Fitzgerald の <a href=\"https://hacks.mozilla.org/2019/11/multi-value-all-the-wasm/\" class=\"external\" rel=\" noopener\">Multi-Value All The Wasm!</a> を参照してください。</p>"}},{"type":"prose","value":{"id":"webassembly_スレッド","title":"WebAssembly スレッド","isH3":false,"content":"<p>WebAssembly スレッド (<a href=\"/ja/docs/Mozilla/Firefox/Releases/79\">Firefox 79</a> 以降で対応) は、 WebAssembly Memory オブジェクトを別なウェブワーカー内で動作している複数の WebAssembly インスタンスで共有できるものであり、 JavaScript の <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> と似たような形のものです。これにより、ワーカー間の非常に高速な通信が可能になり、ウェブアプリケーションのパフォーマンスが大幅に向上します。</p>\n<p>スレッドの提案は、共有メモリーと不可分メモリーアクセスの 2 つの部分からなります。</p>"}},{"type":"prose","value":{"id":"共有メモリー","title":"共有メモリー","isH3":true,"content":"<p>上記のように、共有の WebAssembly <a href=\"/ja/docs/WebAssembly/JavaScript_interface/Memory\"><code>Memory</code></a> オブジェクトを作成することが可能です。これは、 <a href=\"/ja/docs/Web/API/Window/postMessage\"><code>postMessage()</code></a> を使用してウィンドウとワーカーのコンテキスト間で、 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> と同じ方法で転送されるものです。</p>\n<p>JavaScript API 側では、<a href=\"/ja/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory()</code></a> コンストラクタの初期化オブジェクトに <code>shared</code> プロパティを追加し、 <code>true</code> に設定すると共有メモリを作成するようになりました。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> memory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebAssembly<span class=\"token punctuation\">.</span>Memory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">initial</span><span class=\"token operator\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">maximum</span><span class=\"token operator\">:</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">shared</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>メモリーの <a href=\"/ja/docs/WebAssembly/JavaScript_interface/Memory/buffer\"><code>buffer</code></a> プロパティは <code>SharedArrayBuffer</code> を返すようになり、普通の <code>ArrayBuffer</code> ではなくなりました。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>memory<span class=\"token punctuation\">.</span>buffer <span class=\"token comment\">// returns SharedArrayBuffer</span>\n</code></pre></div>\n<p>テキスト形式の上では、 <code>shared</code> キーワードを使って、次のように共有メモリーを作成することができます。</p>\n<div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">memory</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> shared<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>共有されていないメモリーと異なり、共有メモリーは JavaScript API のコンストラクターと wasm のテキスト形式の両方で「最大」サイズを指定する必要があります。</p>\n<div class=\"notecard note\" id=\"sect14\">\n  <p><strong>Note:</strong> 詳しくは、 <a href=\"https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md\" class=\"external\" rel=\" noopener\">WebAssembly のスレッド提案</a>にたくさん載っています。</p>\n</div>"}},{"type":"prose","value":{"id":"不可分メモリーアクセス","title":"不可分メモリーアクセス","isH3":true,"content":"<p>ミューテックスや条件変数など、より高度な機能を実装するために使用できる新しい wasm 命令が多数追加されました。<a href=\"https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#atomic-memory-accesses\" class=\"external\" rel=\" noopener\">ここにリストアップされています</a>。これらの命令は、 Firefox 80 の時点で共有でないメモリー上で許可されています。</p>\n<div class=\"notecard note\" id=\"sect15\">\n  <p><strong>Note:</strong> <a href=\"https://emscripten.org/docs/porting/pthreads.html\" class=\"external\" rel=\" noopener\">Emscripten Pthreads support page</a> で、 Emscripten の新機能を利用する方法を紹介しています。</p>\n</div>"}},{"type":"prose","value":{"id":"まとめ","title":"まとめ","isH3":false,"content":"<p>これで、WebAssembly テキスト形式の主要コンポーネントとそれらが WebAssembly JS API にどのように反映されるのかの高レベルなツアーが完了しました。</p>"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li>この記事に含まれなかった主なものは、関数本体で現れるすべての命令の包括的なリストです。各命令の処理は <a href=\"http://webassembly.org/docs/semantics\" class=\"external\" rel=\" noopener\">WebAssembly のセマンティックス</a> を参照してください。</li>\n  <li>スペックインタプリターによって実装された<a href=\"https://github.com/WebAssembly/spec/blob/master/interpreter/README.md#s-expression-syntax\" class=\"external\" rel=\" noopener\">テキスト形式の文法</a>も参照してください。</li>\n</ul>"}}],"toc":[{"text":"S 式","id":"s_式"},{"text":"シグネチャと引数","id":"シグネチャと引数"},{"text":"ローカル変数と引数を取得/設定する","id":"ローカル変数と引数を取得設定する"},{"text":"スタックマシン","id":"スタックマシン"},{"text":"はじめての関数本体","id":"はじめての関数本体"},{"text":"基礎を探る","id":"基礎を探る"},{"text":"大規模メモリー操作","id":"大規模メモリー操作"},{"text":"参照型","id":"参照型"},{"text":"WebAssembly の複数値","id":"webassembly_の複数値"},{"text":"WebAssembly スレッド","id":"webassembly_スレッド"},{"text":"まとめ","id":"まとめ"},{"text":"関連情報","id":"関連情報"}],"summary":"WebAssembly を人間が読んだり編集したりできるようにするため、 wasm バイナリー形式にはテキスト表現が存在します。これはテキストエディター、ブラウザーの開発者ツールなどで見せるために設計された中間表現です。この記事では、テキスト形式のしくみ、生の構文、および元のバイトコードの表現との関係 (と JavaScript で wasm を表現したラッパーオブジェクト) について説明します。","popularity":0.0002,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Understanding WebAssembly text format","locale":"en-US","native":"English (US)"},{"title":"Understanding WebAssembly text format","locale":"ko","native":"한국어"},{"title":"Entendendo o formato textual do WebAssembly","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Описание текстового формата WebAssembly","locale":"ru","native":"Русский"},{"title":"理解 WebAssembly 文本格式","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/webassembly/understanding_the_text_format","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/webassembly/understanding_the_text_format/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/WebAssembly","title":"WebAssembly"},{"uri":"/ja/docs/WebAssembly/Understanding_the_text_format","title":"WebAssembly テキスト形式の理解"}],"pageTitle":"WebAssembly テキスト形式の理解 - WebAssembly | MDN","noIndexing":false}}