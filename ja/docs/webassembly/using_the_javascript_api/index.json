{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"WebAssembly JavaScript API の使用","mdn_url":"/ja/docs/WebAssembly/Using_the_JavaScript_API","locale":"ja","native":"日本語","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"open\"><a href=\"/ja/docs/WebAssembly\"><strong>WebAssembly home page</strong></a>\n  </li><li class=\"toggle\">\n    <details open=\"\">\n      <summary>Tutorials</summary>\n      <ol>\n        <li><a href=\"/ja/docs/WebAssembly/Concepts\">WebAssembly concepts</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/C_to_wasm\">Compiling from C/C++ to WebAssembly</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Rust_to_wasm\">Compiling from Rust to WebAssembly</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Using_the_JavaScript_API\">Using the WebAssembly JavaScript API</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Understanding_the_text_format\">Understanding WebAssembly text format</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Text_format_to_wasm\">Converting WebAssembly text format to wasm</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Loading_and_running\">Loading and running WebAssembly code</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Caching_modules\">Caching compiled WebAssembly modules</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Exported_functions\">Exported WebAssembly functions</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Object reference</summary>\n      <ol>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code></a></li>\n      </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>これまでに <a href=\"/ja/docs/WebAssembly/C_to_wasm\">Emscripten などのツールを使用して他の言語からモジュールをコンパイルしたり</a>、<a href=\"/ja/docs/WebAssembly/Loading_and_running\">自分自身のコードを読み込んでして実行したりしました</a>。次のステップは他の WebAssembly JavaScript API の使い方について学ぶことです。この記事では知る必要があることを説明します。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> もし、この記事で説明している基本的な概念がよくわからない場合、 <a href=\"/ja/docs/WebAssembly/Concepts\">WebAssembly の概要</a>を先に読んでからこの記事に戻ってきてください。</p>\n</div>"}},{"type":"prose","value":{"id":"シンプルな例","title":"シンプルな例","isH3":false,"content":"<p>WebAssembly JavaScript API の使用方法と、wasm モジュールを読み込んでウェブページ内で使用する方法を、ステップバイステップの例を通して実行してみましょう。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> サンプルコードは <a href=\"https://github.com/mdn/webassembly-examples\" class=\"external\" rel=\" noopener\">webassembly-examples</a> GitHub リポジトリーから参照してください。</p>\n</div>"}},{"type":"prose","value":{"id":"例の準備","title":"例の準備","isH3":true,"content":"<ol>\n  <li>まずは、 wasm モジュールが必要です! <a href=\"https://raw.githubusercontent.com/mdn/webassembly-examples/master/js-api-examples/simple.wasm\" class=\"external\" rel=\" noopener\">simple.wasm</a> をコピーしてローカルマシンの新しいディレクトリーの中に保存してください。</li>\n  <li>次に、 wasm ファイルと同じディレクトリーに <code>index.html</code> という名前でシンプルな HTML ファイルを作成しましょう（簡単に利用できるテンプレートを持っていないのであれば、<a href=\"https://github.com/mdn/webassembly-examples/blob/master/template/template.html\" class=\"external\" rel=\" noopener\">単純なテンプレート</a>が利用できます）。</li>\n  <li>ここで、何が起こっているのか理解を助けるために、 wasm モジュールのテキスト表現を見てみましょう（<a href=\"/ja/docs/WebAssembly/Text_format_to_wasm\">WebAssembly 形式から wasm への変換</a>も参照してください）。\n    <div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token variable\">$i</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">import</span> <span class=\"token string\">\"imports\"</span> <span class=\"token string\">\"imported_func\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">export</span> <span class=\"token string\">\"exported_func\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">42</span>\n    <span class=\"token keyword\">call</span> <span class=\"token variable\">$i</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n  </li>\n  <li>2 行目に 2 階層の名前空間を持つインポートの宣言があります。 — 内部関数 <code>$i</code> は <code>imports.imported_func</code> からインポートされています。wasm モジュールにインポートするオブジェクトを記述するときに、この 2 階層の名前空間を JavaScript に反映させる必要があります。 <code>&lt;script&gt;&lt;/script&gt;</code> 要素を HTML 内に作成して、次のコードを追加してください。\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> importObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">imports</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">imported_func</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n</ol>"}},{"type":"prose","value":{"id":"webassembly_モジュールをストリーミングする","title":"WebAssembly モジュールをストリーミングする","isH3":true,"content":"<p>Firefox 58 の新機能として、 WebAssembly モジュールを基礎となるソースから直接コンパイルおよびインスタンス化する機能があります。これは <a href=\"/ja/docs/WebAssembly/JavaScript_interface/compileStreaming\"><code>WebAssembly.compileStreaming()</code></a> と <a href=\"/ja/docs/WebAssembly/JavaScript_interface/instantiateStreaming\"><code>WebAssembly.instantiateStreaming()</code></a> メソッドを使用して実現します。これらのメソッドは、バイトコードを直接 <code>Module</code>/<code>Instance</code> インスタンスに変換することができるので、<a href=\"/ja/docs/Web/API/Response\"><code>Response</code></a> を <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> に別途格納する必要がないため、ストリーミングではない対応するメソッドよりも簡単になっています。</p>\n<p>この例（GitHub の <a href=\"https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/instantiate-streaming.html\" class=\"external\" rel=\" noopener\">instantiate-streaming.html</a> デモや、<a href=\"https://mdn.github.io/webassembly-examples/js-api-examples/instantiate-streaming.html\" class=\"external\" rel=\" noopener\">ライブ版</a>も参照してください）では、 <code>instantiateStreaming()</code> を使って wasm モジュールを取得し、そこに JavaScript 関数をインポートしてコンパイルしてインスタンス化し、そのエクスポート関数にアクセスするまで、すべて一度に行っています。</p>\n<p>スクリプトに以下の 1 ブロックを加えてください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"simple.wasm\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> importObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> obj<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">exported_func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>この結果、エクスポートした WebAssembly の <code>exported_func</code> 関数を呼び出し、インポートした JavaScript の <code>imported_func</code> 関数を呼び出し、WebAssembly インスタンスの中で提供した値 (42) をコンソールに記録することになりました。サンプルのコードを保存して、WebAssembly に対応しているブラウザーで読み込むと、これが実際に動作しているのがわかります。</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> これは複雑で長い例のほんの一部ですが、ウェブアプリケーション内で WebAssembly をどのように JavaScript と組み合わせて動作させることができるかを説明しています。別の場所でも言及していますが、 WebAssembly は JavaScript の置き換えを目指しているわけではありません。両方が協力して、お互いの強みを活かすことができます。</p>\n</div>"}},{"type":"prose","value":{"id":"ストリーミングせずに_wasm_モジュールを読み込む","title":"ストリーミングせずに wasm モジュールを読み込む","isH3":true,"content":"<p>上記のようなストリーミングメソッドを使用できない、または使用したくない場合は、代わりにストリーミングメソッドではない <a href=\"/ja/docs/WebAssembly/JavaScript_interface/compile\"><code>WebAssembly.compile</code></a> / <a href=\"/ja/docs/WebAssembly/JavaScript_interface/instantiate\"><code>WebAssembly.instantiate</code></a> を使用することができます。</p>\n<p>これらのメソッドはバイトコードに直接アクセスしないので、 wasm モジュールをコンパイル/インスタンス化する前にレスポンスを <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> に変換する余分な手順が必要になります。</p>\n<p>同等のコードは次のようになります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"simple.wasm\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">arrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bytes</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiate</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> importObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">results</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    results<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">exported_func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"開発者ツールで_wasm_を見る","title":"開発者ツールで wasm を見る","isH3":true,"content":"<p>Firefox 54 以降では、開発者ツールのデバッガーパネルでウェブページに含まれる wasm コードのテキスト表現を表示する機能があります。これを表示するためには、デバッガーパネルに移動して、 \"wasm://\" 項目をクリックしてください。</p>\n<p>\n  <img src=\"/en-US/docs/WebAssembly/Using_the_JavaScript_API/wasm-debug.png\" alt=\"\" width=\"2038\" height=\"633\" loading=\"lazy\">\n</p>\n<p>WebAssembly をテキストとして表示するだけでなく、 WebAssembly のテキスト表現を使用してすぐにデバッグを開始することができます（ブレークポイント、コールスタックの検査、ステップ実行など）。 <a href=\"https://www.youtube.com/watch?v=R1WtBkMeGds\" class=\"external\" rel=\" noopener\">Firefox 開発者ツールでの WebAssembly のデバッグ</a>の動画を参照してください。</p>"}},{"type":"prose","value":{"id":"メモリー","title":"メモリー","isH3":false,"content":"<p>WebAssembly の低レベルのメモリーモデルでは、メモリーは<a href=\"https://webassembly.github.io/spec/core/exec/index.html\" class=\"external\" rel=\" noopener\">線形メモリー</a>と呼ばれる型のない連続したバイト列として表現され、モジュール内の<a href=\"https://webassembly.github.io/spec/core/exec/instructions.html#memory-instructions\" class=\"external\" rel=\" noopener\">ロード、ストア命令</a>を使用して読み書きされます。このメモリーモデルでは、任意のロード、ストア命令は線形メモリー全体の任意のバイトにアクセスすることができます。これはポインターなどの C/C++ の概念を忠実に表現するために必要なものです。</p>\n<p>しかし、利用可能なメモリー範囲がプロセス全体に及ぶネイティブの C/C++ プログラムとは異なり、特定の WebAssembly インスタンスがアクセスできるメモリーは、 WebAssembly Memory オブジェクトが含む特定の（潜在的に非常に小さな）範囲に制限されています。これにより、単一のウェブアプリで複数の独立したライブラリー（それぞれが内部で WebAssembly を使用している）を使用し、互いに完全に分離された個別のメモリーを持つことができます。さらに、新しい実装では<a href=\"/ja/docs/WebAssembly/Understanding_the_text_format#%E5%85%B1%E6%9C%89%E3%83%A1%E3%83%A2%E3%83%AA%E3%83%BC\">共有メモリー</a>を作成することもでき、これは <a href=\"/ja/docs/Web/API/Window/postMessage\"><code>postMessage()</code></a> によってウィンドウとワーカーコンテキスト間で転送して複数の場所で使用することが可能です。</p>\n<p>JavaScript では、Memory インスタンスはリサイズ可能な <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> (または共有メモリーの場合は <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a>) とみなすことができます。<code>ArrayBuffer</code> と同様に、単一のウェブアプリケーションで多くの独立した Memory オブジェクトを作成することができます。Memory オブジェクトは初期サイズと最大サイズ (省略可) を指定して、<a href=\"/ja/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory()</code></a> コンストラクターから作成することができます。</p>\n<p>簡単な例を見ながら、探索を始めましょう。</p>\n<ol>\n  <li>もう 1 つのシンプルな HTML ページを（<a href=\"https://github.com/mdn/webassembly-examples/blob/master/template/template.html\" class=\"external\" rel=\" noopener\">単純なテンプレート</a>をコピーして）作成し、 <code>memory.html</code> という名前を付けてください。このページに <code>&lt;script&gt;&lt;/script&gt;</code> 要素を追加してください。</li>\n  <li>\n    メモリーインスタンスを作成するために、次の行をスクリプトに追加します。\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> memory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebAssembly<span class=\"token punctuation\">.</span>Memory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">initial</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">maximum</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><code>initial</code> と <code>maximum</code> の単位は WebAssembly ページです。これらは 64KB に固定されています。上の例では、メモリーインスタンスは初期サイズが 640KB、最大サイズが 6.4MB であることを意味しています。\n    WebAssembly メモリーが持つバイト列は ArrayBuffer として buffer ゲッター/セッターから公開されています。例えば、線形メモリーの先頭ワードに直接、 42 を書き込むには次のようにします。\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint32Array</span><span class=\"token punctuation\">(</span>memory<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n</code></pre></div>その後で同じ値を返すことができます。\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint32Array</span><span class=\"token punctuation\">(</span>memory<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n</code></pre></div>\n  </li>\n  <li>デモで試してみましょう。これまでに追加した内容を保存してブラウザーで読み込んだ後、JavaScript コンソールで上の 2 行を入力してみてください。</li>\n</ol>"}},{"type":"prose","value":{"id":"メモリーの拡張","title":"メモリーの拡張","isH3":true,"content":"<p>メモリーインスタンスは <a href=\"/ja/docs/WebAssembly/JavaScript_interface/Memory/grow\"><code>Memory.prototype.grow()</code></a> を呼び出すことで拡張することができます。引数は WebAssembly ページ単位で指定します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>memory<span class=\"token punctuation\">.</span><span class=\"token function\">grow</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Memory インスタンスの作成時に最大値が指定していて、この最大値を超えて拡張しようとすると <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a> 例外が発生します。エンジンは提供された上限を利用してメモリーを事前に確保しておくことで、より効率的なリサイズが可能になります。</p>\n<p>注: <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> の byteLength は変更不可であるため、 <a href=\"/ja/docs/WebAssembly/JavaScript_interface/Memory/grow\"><code>Memory.prototype.grow()</code></a> 操作が成功した後、buffer ゲッターは新しい (新しい byteLength で) ArrayBufferを返します。そして、前の ArrayBuffer は「切り離された状態」になるか、メモリーから切り離されます。</p>\n<p>関数と同様に、線形メモリーはモジュール内で定義することもインポートすることもできます。同じようにモジュールは任意でメモリーをエクスポートすることも可能です。これは JavaScript が WebAssembly インスタンスに対して新しく作成した <code>WebAssembly.Memory</code> をインポートで渡したり、Memory のエクスポートから (<a href=\"/ja/docs/WebAssembly/JavaScript_interface/Instance/exports\"><code>Instance.prototype.exports</code></a> を介して) 受け取れることを意味しています。</p>"}},{"type":"prose","value":{"id":"より複雑なメモリーの例","title":"より複雑なメモリーの例","isH3":true,"content":"<p>より複雑なメモリーの例を見て、上記のことを明確にしましょう。先に定義したメモリーインスタンスをインポートし、それを整数の配列で埋め込んで、それらを合計する WebAssembly モジュールです。これは <a href=\"https://raw.githubusercontent.com/mdn/webassembly-examples/master/js-api-examples/memory.wasm\" class=\"external\" rel=\" noopener\">memory.wasm</a> で見ることができます。</p>\n<ol>\n  <li><code>memory.wasm</code> のローカルコピーを以前と同じディレクトリーに作成します。\n    <div class=\"notecard note\" id=\"sect4\">\n      <p><strong>Note:</strong> モジュールのテキスト表現は <a href=\"https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/memory.wat\" class=\"external\" rel=\" noopener\">memory.wat</a> を参照してください。</p>\n    </div>\n  </li>\n  <li><code>memory.html</code> サンプルファイルに戻って、以前と同じように wasm モジュールを読み取り、コンパイル、インスタンス化します。以下のものをスクリプトの最後に追加してください。\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"memory.wasm\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">js</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">mem</span><span class=\"token operator\">:</span> memory <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">results</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ここにコードを追加</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n  <li>このモジュールはモジュール内部のメモリーをエクスポートします。 instance という名前でモジュールの Instance が取得され、エクスポートされた関数 <code>accumulate()</code> を使用してモジュールの線形メモリー (<code>mem</code>) に直接入力された配列を合計する事ができます。指定された場所に、次のコードを追加してみましょう。\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> i32 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint32Array</span><span class=\"token punctuation\">(</span>memory<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  i32<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> sum <span class=\"token operator\">=</span> results<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">accumulate</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n</ol>\n<p>Memory オブジェクト自体でなく、Memory オブジェクトの buffer (<a href=\"/ja/docs/WebAssembly/JavaScript_interface/Memory/buffer\"><code>Memory.prototype.buffer</code></a>) から <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a> ビューを作成していることに注意してください。</p>\n<p>メモリーのインポートは関数のインポートと同じように機能します。JavaScript 関数の代わりに Memory オブジェクトを渡すだけです。メモリーのインポートは 2 つの理由で役に立ちます。</p>\n<ul>\n  <li>モジュールをコンパイルする前、もしくは並行して、メモリーの初期コンテンツを JavaScript で読み取り、または作成することができます。</li>\n  <li>単一の Memory オブジェクトを複数のモジュールインスタンスにインポートすることができます。これは WebAssembly で動的リンクを実装するための重要な構成要素です。</li>\n</ul>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>Note:</strong> 完全なデモは <a href=\"https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/memory.html\" class=\"external\" rel=\" noopener\">memory.html</a> (<a href=\"https://mdn.github.io/webassembly-examples/js-api-examples/memory.html\" class=\"external\" rel=\" noopener\">動作例</a>) を参照してください。</p>\n</div>"}},{"type":"prose","value":{"id":"テーブル","title":"テーブル","isH3":false,"content":"<p>WebAssembly Table は JavaScript と WebAssembly コードの両方でアクセスできるリサイズ可能な <a href=\"https://en.wikipedia.org/wiki/Reference_(computer_science)\" class=\"external\" rel=\" noopener\">参照</a> の型付き配列です。Memory はリサイズ可能な生のバイト列を提供しますが、参照はエンジンに保証された値（このバイト列は安全性、移植性、安定性の理由からコンテンツによって直接読み書きしてはいけない）であるため、参照を格納するために使用することは安全ではありません。</p>\n<p>テーブルは要素の型を持ち、テーブルに格納できる参照の型が制限されます。WebAssembly の現バージョンでは WebAssembly コード内で必要な参照の型は関数型の1つだけです。そして、これが唯一の正しい要素の型となります。将来のバージョンでは、さらに多くの要素の型が追加される予定です。</p>\n<p>関数参照は関数ポインターを持つ C/C++ のような言語をコンパイルするために必要です。C/C++ のネイティブ実装では、関数ポインターはプロセスの仮想アドレス空間内の関数のコードの生のアドレスで表現されるため、安全性の理由から線形メモリーに直接格納することはできません。代わりに、関数参照はテーブルに格納されます。整数値のインデックスは線形メモリーに格納することができます。</p>\n<p>関数ポインターを呼び出すときは、WebAssembly を呼び出す側でインデックスを指定します。インデックスを付けたり、インデックス付けされた関数参照を呼び出す前に安全な境界のチェックをすることができます。したがって、テーブルは現在、安全かつ移植可能に低レベルのプログラミング言語の機能をコンパイルするために使用される、低レベルのプリミティブです。</p>\n<p>テーブルは <a href=\"/ja/docs/WebAssembly/JavaScript_interface/Table/set\"><code>Table.prototype.set()</code></a> を通してテーブル内の値を1つ更新することができます。さらに、<a href=\"/ja/docs/WebAssembly/JavaScript_interface/Table/grow\"><code>Table.prototype.grow()</code></a> でテーブルに格納できる値の数を増やすことができます。時間の経過とともに間接呼び出しされる関数を変更することを許容し、これは <a href=\"https://github.com/WebAssembly/tool-conventions/blob/main/DynamicLinking.md\" class=\"external\" rel=\" noopener\">動的リンク技術</a> のために必要なものです。変化した値に対して JavaScript では <a href=\"/ja/docs/WebAssembly/JavaScript_interface/Table/get\"><code>Table.prototype.get()</code></a> を通してすぐにアクセスできます。wasm モジュールからも同様です。</p>"}},{"type":"prose","value":{"id":"テーブルの例","title":"テーブルの例","isH3":true,"content":"<p>テーブルのシンプルな例を見てみましょう。紹介する WebAssembly モジュールは2つの要素 (要素0は13、要素1は42を返します) を持つテーブルをエクスポートするものです。モジュールは <a href=\"https://github.com/mdn/webassembly-examples/raw/master/js-api-examples/table.wasm\" class=\"external\" rel=\" noopener\">table.wasm</a> から見つけられます。</p>\n<ol>\n  <li><code>table.wasm</code> をローカルの新しいディレクトリーにコピーします。\n    <div class=\"notecard note\" id=\"sect6\">\n      <p><strong>Note:</strong> このモジュールのテキスト表現は <a href=\"https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/table.wat\" class=\"external\" rel=\" noopener\">table.wat</a> を参照してください。</p>\n    </div>\n  </li>\n  <li><a href=\"https://github.com/mdn/webassembly-examples/blob/master/template/template.html\" class=\"external\" rel=\" noopener\">HTML template</a> を <code>table.html</code> という名前で同じディレクトリーにコピーします。</li>\n  <li>前と同じように、wasm モジュールを読み取り、コンパイル、インスタンス化します。次のコードを HTML の body の末尾の <a href=\"/ja/docs/Web/HTML/Element/script\"><code>&lt;script&gt;</code></a> 要素に追加してください。\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"table.wasm\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">results</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// add code here</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n  <li>今度はテーブル内のデータにアクセスしてみましょう。コードの指定された場所に次の行を追加してください。\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> tbl <span class=\"token operator\">=</span> results<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span>tbl<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tbl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 13</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tbl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 42</span>\n</code></pre></div>\n  </li>\n</ol>\n<p>このコードはテーブルに格納されている各関数参照に順番にアクセスし、内包した値をコンソールに書き出すためにインスタンス化します。 <a href=\"/ja/docs/WebAssembly/JavaScript_interface/Table/get\"><code>Table.prototype.get()</code></a> で各関数参照を取得した後、関数を実行するためには括弧を追加することに注意してください。</p>\n<div class=\"notecard note\" id=\"sect7\">\n  <p><strong>Note:</strong> 完全なデモは <a href=\"https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/table.html\" class=\"external\" rel=\" noopener\">table.html</a> (<a href=\"https://mdn.github.io/webassembly-examples/js-api-examples/table.html\" class=\"external\" rel=\" noopener\">動作例</a>) を参照してください。</p>\n</div>"}},{"type":"prose","value":{"id":"グローバル値","title":"グローバル値","isH3":false,"content":"<p>WebAssembly はグローバル変数のインスタンスを作成する機能を持っており、 JavaScript の両方からアクセスでき、1 つ以上の <a href=\"/ja/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a> インスタンスにわたってインポート/エクスポートが可能です。これにより、複数のモジュールを動的にリンクすることができるので、非常に便利です。</p>\n<p>JavaScript の内部から WebAssembly のグローバルインスタンスを作成するには、次のような <a href=\"/ja/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global()</code></a> コンストラクターを使用します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> global <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebAssembly<span class=\"token punctuation\">.</span>Global</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"i32\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">mutable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これは 2 つの引数を取ることがわかります。</p>\n<ul>\n  <li>グローバル変数について記述した 2 つのプロパティを含むオブジェクトです。\n    <ul>\n      <li><code>value</code>: データ型は、 WebAssembly モジュールで受け入れられるもの (<code>i32</code>, <code>i64</code>, <code>f32</code>, <code>f64</code>) ならばどれでも構いません。</li>\n      <li><code>mutable</code>: 論理値で、値が変更可能かどうかを定義します。</li>\n    </ul>\n  </li>\n  <li>変数の実際の値を含む値。これは、指定されたデータ型と一致している限り、どのような値でもよい。</li>\n</ul>\n<p>では、これをどう使うのでしょうか。次の例では、値を 0 とする mutable 型の <code>i32</code> としてグローバルを定義しています。</p>\n<p>次に、グローバル変数の値を変更してみます。最初は <code>Global.value</code> を使用して <code>42</code> に設定し、それから <code>global.wasm</code> モジュールからエクスポートされた <code>incGlobal()</code> 関数を使用して 43 にします（この関数は、指定された値に何でも 1 を加算し、新しい値を返します）。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"output\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">assertEq</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg<span class=\"token punctuation\">,</span> got<span class=\"token punctuation\">,</span> expected</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> got <span class=\"token operator\">===</span> expected <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">SUCCESS! Got: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>got<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;br&gt;</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">FAIL!&lt;br&gt;Got: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>got<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;br&gt;Expected: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>expected<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;br&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  output<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Testing </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>msg<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">assertEq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WebAssembly.Global exists\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span> WebAssembly<span class=\"token punctuation\">.</span>Global<span class=\"token punctuation\">,</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> global <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebAssembly<span class=\"token punctuation\">.</span>Global</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"i32\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">mutable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nWebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"global.wasm\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">js</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> global <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> instance <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">assertEq</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"getting initial value from wasm\"</span><span class=\"token punctuation\">,</span>\n      instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">getGlobal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    global<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertEq</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"getting JS-updated value from wasm\"</span><span class=\"token punctuation\">,</span>\n      instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">getGlobal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token number\">42</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">incGlobal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertEq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getting wasm-updated value from JS\"</span><span class=\"token punctuation\">,</span> global<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">43</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect8\">\n  <p><strong>Note:</strong> <a href=\"https://mdn.github.io/webassembly-examples/js-api-examples/global.html\" class=\"external\" rel=\" noopener\">GitHub の動作例</a> を見ることができます。<a href=\"https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/global.html\" class=\"external\" rel=\" noopener\">ソースコード</a>も見てください。</p>\n</div>"}},{"type":"prose","value":{"id":"多重性","title":"多重性","isH3":false,"content":"<p>ここまで、主な WebAssembly の構成要素のデモを見てきましたが、これは多重性の概念に触れるのによい機会です。これはアーキテクチャ効率の点で多くの進歩がもたらされます:</p>\n<ul>\n  <li>1 つの関数が N 個のクロージャを生成するのと同様に、 1 つのモジュールは N 個のインスタンスを持つことができます。</li>\n  <li>1 つのモジュールインスタンスは 0 から 1 つのメモリーインスタンスを持つことができ、それが「アドレス空間」を提供します。 WebAssembly の将来のバージョンでは、 1 つのモジュールが 0 から N 個のメモリーインスタンスを許容する可能性があります (<a href=\"https://webassembly.org/roadmap/\" class=\"external\" rel=\" noopener\">Multiple Memories</a> を参照) 。</li>\n  <li>1 つのモジュールインスタンスは 0 から 1 つのテーブルインスタンスを持つことができます。これはインスタンスの「関数アドレス空間」で、 C 言語の関数ポインターを実装するために使用されます。 WebAssembly の将来のバージョンでは 1 つのモジュールにつき 0 から N 個のメモリーインスタンスを許容する可能性があります。</li>\n  <li>1 つのメモリーやテーブルを 0 から N 個のモジュールから使用することができます。複数のインスタンス全てが同じアドレス空間を共有でき、<a href=\"https://github.com/WebAssembly/tool-conventions/blob/main/DynamicLinking.md\" class=\"external\" rel=\" noopener\">動的リンク</a> が可能です。</li>\n</ul>\n<p>多重性については、「WebAssembly テキスト形式を理解」の記事で多重性の働きについてみることができます。その中の<a href=\"/ja/docs/WebAssembly/Understanding_the_text_format#%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB%E3%81%AE%E5%A4%89%E6%9B%B4%E3%81%A8%E5%8B%95%E7%9A%84%E3%83%AA%E3%83%B3%E3%82%AF\">テーブルの変更と動的リンク</a>を参照してください。</p>"}},{"type":"prose","value":{"id":"まとめ","title":"まとめ","isH3":false,"content":"<p>この記事では WebAssembly JavaScript API の基本的な使い方について説明しました。WebAssembly モジュールを JavaScript のコンテキストに組み込む方法、その関数を使えるようすること、JavaScript でのメモリーとテーブルの使い方について。さらに、多重性の概念についても触れました。</p>"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"https://webassembly.org/\" class=\"external\" rel=\" noopener\">webassembly.org</a></li>\n  <li><a href=\"/ja/docs/WebAssembly/Concepts\">WebAssembly の概要</a></li>\n  <li><a href=\"https://research.mozilla.org/\" class=\"external\" rel=\" noopener\">WebAssembly on Mozilla Research</a></li>\n</ul>"}}],"toc":[{"text":"シンプルな例","id":"シンプルな例"},{"text":"メモリー","id":"メモリー"},{"text":"テーブル","id":"テーブル"},{"text":"グローバル値","id":"グローバル値"},{"text":"多重性","id":"多重性"},{"text":"まとめ","id":"まとめ"},{"text":"関連情報","id":"関連情報"}],"summary":"これまでに Emscripten などのツールを使用して他の言語からモジュールをコンパイルしたり、自分自身のコードを読み込んでして実行したりしました。次のステップは他の WebAssembly JavaScript API の使い方について学ぶことです。この記事では知る必要があることを説明します。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using the WebAssembly JavaScript API","locale":"en-US","native":"English (US)"},{"title":"Utiliser l'API JavaScript de WebAssembly","locale":"fr","native":"Français"},{"title":"웹어셈블리의 자바스크립트 API 사용하기","locale":"ko","native":"한국어"},{"title":"Usando a API JavaScript do WebAssembly","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Использование WebAssembly JavaScript API","locale":"ru","native":"Русский"},{"title":"使用 WebAssembly JavaScript API","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/webassembly/using_the_javascript_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/webassembly/using_the_javascript_api/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/WebAssembly","title":"WebAssembly"},{"uri":"/ja/docs/WebAssembly/Using_the_JavaScript_API","title":"WebAssembly JavaScript API の使用"}],"pageTitle":"WebAssembly JavaScript API の使用 - WebAssembly | MDN","noIndexing":false}}