{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"C/C++ から WebAssembly へのコンパイル","mdn_url":"/ja/docs/WebAssembly/C_to_wasm","locale":"ja","native":"日本語","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"open\"><a href=\"/ja/docs/WebAssembly\"><strong>WebAssembly home page</strong></a>\n  </li><li class=\"toggle\">\n    <details open=\"\">\n      <summary>Tutorials</summary>\n      <ol>\n        <li><a href=\"/ja/docs/WebAssembly/Concepts\">WebAssembly concepts</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/C_to_wasm\">Compiling from C/C++ to WebAssembly</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Rust_to_wasm\">Compiling from Rust to WebAssembly</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Using_the_JavaScript_API\">Using the WebAssembly JavaScript API</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Understanding_the_text_format\">Understanding WebAssembly text format</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Text_format_to_wasm\">Converting WebAssembly text format to wasm</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Loading_and_running\">Loading and running WebAssembly code</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Caching_modules\">Caching compiled WebAssembly modules</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Exported_functions\">Exported WebAssembly functions</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Object reference</summary>\n      <ol>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code></a></li>\n      </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>C / C ++のような言語でコードを書いたら、<a href=\"https://emscripten.org/\" class=\"external\" rel=\" noopener\">Emscripten</a> のようなツールを使って WebAssembly にコンパイルすることができます。 どのように動作するかを見てみましょう。</p>"}},{"type":"prose","value":{"id":"emscripten_の環境設定","title":"Emscripten の環境設定","isH3":false,"content":"<p>まず、必要な開発環境をセットアップしましょう。</p>"}},{"type":"prose","value":{"id":"準備","title":"準備","isH3":true,"content":"<p>Emscripten SDK を取得します。以下の指示に従ってください。<a href=\"https://emscripten.org/docs/getting_started/downloads.html\" class=\"external\" rel=\" noopener\">https://emscripten.org/docs/getting_started/downloads.html</a></p>"}},{"type":"prose","value":{"id":"サンプルコードをコンパイルする","title":"サンプルコードをコンパイルする","isH3":false,"content":"<p>環境を設定した後は、C のサンプルコードを Emscripten にコンパイルする方法を見てみましょう。 Emscripten でコンパイルするときにはいくつかのオプションがありますが、この記事でカバーする主な 2 つのシナリオは次のとおりです。</p>\n<ul>\n  <li>wasm にコンパイルし、コードを実行するための HTML とウェブ環境上で wasm を実行するための全ての JavaScript グルーコードを生成する。</li>\n  <li>wasm にコンパイルと JavaScript の生成だけ行う。</li>\n</ul>\n<p>2 つについて見てみましょう。</p>"}},{"type":"prose","value":{"id":"html_と_javascript_を生成する","title":"HTML と JavaScript を生成する","isH3":true,"content":"<p>最も簡単なケースを見てみましょう。コードを WebAssembly としてブラウザーで実行するための全てを Emscripten で生成するようにします。</p>\n<ol>\n  <li>まずはコンパイルするためのサンプルコードを用意します。以下の C のサンプルコードをコピーして <code>hello.c</code> としてローカルドライブの新しいディレクトリーに保存してください:\n    <div class=\"code-example\"><pre class=\"brush: cpp notranslate\"><code><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n  </li>\n  <li>Emscripten コンパイラー環境を導入したターミナルウィンドウを使用して、<code>hello.c</code> ファイルと同じディレクトリーに移動し、次のコマンドを実行します。\n    <div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>emcc hello.c -o hello.html\n</code></pre></div>\n  </li>\n</ol>\n<p>このコマンドで渡されたオプションは次のとおりです。</p>\n<ul>\n  <li><code>-o hello.html</code> — コードを実行するための HTML ページを指定します。 wasm モジュールとそれをウェブ環境で使用できるようにコンパイル、インスタンス化するための JavaScript 「グルー」コードも出力に含まれます。</li>\n</ul>\n<p>この時点でソースディレクトリーに以下のファイルが出力されているはずです。</p>\n<ul>\n  <li>バイナリーの wasm モジュールコード (<code>hello.wasm</code>)</li>\n  <li>ネイティブの C の関数と JavaScript/wasm の間で変換を行う JavaScript ファイル (<code>hello.js</code>)</li>\n  <li>wasm コードを読み込み、コンパイルし、インスタンス化し、ブラウザーに出力するための HTML ファイル (<code>hello.html</code>)</li>\n</ul>"}},{"type":"prose","value":{"id":"サンプルコードを実行する","title":"サンプルコードを実行する","isH3":true,"content":"<p>WebAssembly に対応しているブラウザーで <code>hello.html</code> を読み込むるだけです。既定で有効なのは Firefox 52, Chrome 57, Opera 44 以降です。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> 生成された HTML ファイル (<code>hello.html</code>) をローカルのハードドライブから直接開こうとすると（例: <code>file://your_path/hello.html</code>）、 _<code>both async and sync fetching of the wasm failed</code> という複数行のエラーメッセージが表示されます。 HTML ファイルを HTTP サーバー (<code>http://</code>) で実行する必要があります。詳しくは <a href=\"/ja/docs/Learn/Common_questions/set_up_a_local_testing_server\">ローカルのテストサーバーを設定するには</a> を参照してください。</p>\n</div>\n<p>\n  全てが計画通りに機能していれば、ウェブページ上の Emscripten コンソールに \"Hello world\" の出力が表示されるはずです。おめでとうございます、ようやく C を WebAssembly にコンパイルしてブラウザーで実行することができました。\n  \n  <img src=\"/en-US/docs/WebAssembly/C_to_wasm/helloworld.png\" alt=\"image\" width=\"1366\" height=\"676\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"カスタム_html_テンプレートを使う","title":"カスタム HTML テンプレートを使う","isH3":true,"content":"<p>場合によっては、カスタム HTML テンプレートを使用することもできます。 どうやってできるかを見てみましょう。</p>\n<ol>\n  <li>まず、次の C のコードを <code>hello2.c</code> として新しいディレクトリーに保存します。\n    <div class=\"code-example\"><pre class=\"brush: cpp notranslate\"><code><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n  </li>\n  <li><code>shell_minimal.html</code> を emsdk リポジトリーから探します。先ほど作成した新しいディレクトリーに <code>html_template</code> というサブディレクトリーを作って、そこにコピーします。</li>\n  <li>新しいディレクトリーに移動して（Emscripten コンパイラー環境があるターミナルウィンドウで）、次のコマンドを実行します。\n    <div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>emcc -o hello2.html hello2.c -O3 --shell-file html_template/shell_minimal.html\n</code></pre></div>今回渡したオプションは少しだけ異なります。\n    <ul>\n      <li><code>-o hello2.html</code> と指定したことで、今回コンパイラーは JavaScript グルーコードと <code>.html</code> を出力します。</li>\n      <li>さらに <code>--shell-file html_template/shell_minimal.html</code> と指定しました — これは例を実行する HTML を生成するための、HTML テンプレートパスです。</li>\n    </ul>\n  </li>\n  <li>この例を実行してみましょう。上記のコマンドで hello2.html が生成されます。これは生成された wasm コードに対してロード、実行などを行うグルーコードを含むテンプレートと同じ内容を持ちます。ブラウザーを開いて最後の例と同じ出力であることを確認してください。</li>\n</ol>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> HTML ファイルの代わりに .js ファイルを <code>-o</code> フラグで指定することで、完全な HTML ではなく、 JavaScript の「グルー」ファイル<em>だけ</em>を出力するように指定することができます。例えば <code>emcc -o hello2.js hello2.c -O3</code> とします。そうすると、完全にスクラッチでカスタム HTML を作成することができますが、これは高度なアプローチであり、通常は提供されている HTML テンプレートを使用する方が簡単です。</p>\n  <p>Emscripten は、メモリー割り当て、メモリーリーク、その他多くの問題を処理するために、多種多様な JavaScript の「グルー」コードを必要とします。</p>\n</div>"}},{"type":"prose","value":{"id":"c_で定義されたカスタム関数を呼び出す","title":"C で定義されたカスタム関数を呼び出す","isH3":true,"content":"<p>C で定義された関数があって、それを JavaScript から呼び出したい場合、 Emscripten の <code>ccall()</code> 関数と <code>EMSCRIPTEN_KEEPALIVE</code> 宣言（対象の関数をエクスポートする関数リストに加えるものです（<a href=\"https://emscripten.org/docs/getting_started/FAQ.html#why-do-functions-in-my-c-c-source-code-vanish-when-i-compile-to-javascript-and-or-i-get-no-functions-to-process\" class=\"external\" rel=\" noopener\">Why do functions in my C/C++ source code vanish when I compile to JavaScript, and/or I get No functions to process?</a> を参照））を使用します。これがどのように動作するか見てみましょう。</p>\n<ol>\n  <li>はじめに、次のコードを <code>hello3.c</code> として新しいディレクトリーに保存します。\n    <div class=\"code-example\"><pre class=\"brush: cpp notranslate\"><code><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;emscripten/emscripten.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTERN</span> <span class=\"token expression\"><span class=\"token keyword\">extern</span> </span><span class=\"token string\">\"C\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTERN</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n\nEXTERN EMSCRIPTEN_KEEPALIVE <span class=\"token keyword\">void</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyFunction Called\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>既定では、 Emscripten が生成したコードは常に <code>main()</code> を呼び出し、他のデッドコードは削除されます。関数名の前に <code>EMSCRIPTEN_KEEPALIVE</code> を置くことによって、これが起こらなくなります。また、<code>EMSCRIPTEN_KEEPALIVE</code> を使用するために <code>emscripten.h</code> をインポートする必要があります。\n    <div class=\"notecard note\" id=\"sect3\">\n      <p><strong>Note:</strong> <code>#ifdef</code> ブロックを加えたことによって、C++ のコードからこの例をインクルードしようとしても動作するでしょう。 C と C++ の間でのマングリング規則によって、他の場合では壊れることもありますが、ここでは C++ を使用している場合に、外部の C の関数として扱うように設定しています。</p>\n    </div>\n  </li>\n  <li>便宜上、この新しいディレクトリーに <code>html_template/shell_minimal.html</code> （もちろん、このファイルはあなたの実際の開発環境に置きます）を加えます。</li>\n  <li>さて、再びコンパイル手順を実行しましょう。あなたの最新のディレクトリーの中（そして、Emscripten コンパイラー環境の入っているターミナルウィンドウ）で、このように C のコードをコンパイルします（NO_EXIT_RUNTIME オプションを付与してコンパイルする必要があることに注意してください。そうしない場合、 main() 関数が終了したときにランタイムもシャットダウンされてしまい、コンパイルされたコードが正しく呼ばれなくなる可能性があります - 例えば、atexit の呼び出しなどの適切な C のエミュレーションに必要です）\n    <div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>emcc -o hello3.html hello3.c -O3 --shell-file html_template/shell_minimal.html -s <span class=\"token assign-left variable\">NO_EXIT_RUNTIME</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> -s <span class=\"token string\">\"EXPORTED_RUNTIME_METHODS=['ccall']\"</span>\n</code></pre></div>\n  </li>\n  <li>例をブラウザーで読み込んだら、前と同じものが見られるでしょう。</li>\n  <li>JavaScript から新しい <code>myFunction()</code> 関数を呼び出す必要があります。まずは、 hello3.html ファイルをテキストエディターで開いてください。</li>\n  <li>以下のような <a href=\"/ja/docs/Web/HTML/Element/button\"><code>&lt;button&gt;</code></a> を最初の <code>&lt;script type='text/javascript'&gt;</code> タグの上に加えましょう。\n    <div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mybutton<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Run myFunction<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n  </li>\n  <li>そして、 <a href=\"/ja/docs/Web/HTML/Element/script\"><code>&lt;script&gt;</code></a> 要素内の最後に次のコードを追加します。\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>document\n  <span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mybutton\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"check console\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">ccall</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"myFunction\"</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// name of C function</span>\n      <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// return type</span>\n      <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// argument types</span>\n      <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// arguments</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n</ol>\n<p>これはエクスポートされた関数をどのようにして <code>ccall()</code> を使用して呼び出すかを示しています。</p>"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"https://emscripten.org/\" class=\"external\" rel=\" noopener\">emscripten.org</a> — Emscripten とそれの多種多様なオプションについての詳細を確認してください。</li>\n  <li><a href=\"https://emscripten.org/docs/porting/connecting_cpp_and_javascript/Interacting-with-code.html#calling-compiled-c-functions-from-javascript-using-ccall-cwrap\" class=\"external\" rel=\" noopener\">Calling compiled C functions from JavaScript using ccall/cwrap</a></li>\n  <li><a href=\"https://emscripten.org/docs/getting_started/FAQ.html#why-do-functions-in-my-c-c-source-code-vanish-when-i-compile-to-javascript-and-or-i-get-no-functions-to-process\" class=\"external\" rel=\" noopener\">Why do functions in my C/C++ source code vanish when I compile to JavaScript, and/or I get No functions to process?</a></li>\n  <li><a href=\"https://research.mozilla.org/\" class=\"external\" rel=\" noopener\">WebAssembly on Mozilla Research</a></li>\n  <li><a href=\"/ja/docs/WebAssembly/existing_C_to_wasm\">既存の C モジュールから WebAssembly へのコンパイル</a></li>\n</ul>"}}],"toc":[{"text":"Emscripten の環境設定","id":"emscripten_の環境設定"},{"text":"サンプルコードをコンパイルする","id":"サンプルコードをコンパイルする"},{"text":"関連情報","id":"関連情報"}],"summary":"C / C ++のような言語でコードを書いたら、Emscripten のようなツールを使って WebAssembly にコンパイルすることができます。 どのように動作するかを見てみましょう。","popularity":0.0004,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Compiling a New C/C++ Module to WebAssembly","locale":"en-US","native":"English (US)"},{"title":"Compiler un nouveau module C/C++ en WebAssembly","locale":"fr","native":"Français"},{"title":"C/C++ 모듈을 웹어셈블리로 컴파일하기","locale":"ko","native":"한국어"},{"title":"Компиляция кода C/C++ в WebAssembly","locale":"ru","native":"Русский"},{"title":"编译 C/C++ 为 WebAssembly","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/webassembly/c_to_wasm","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/webassembly/c_to_wasm/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/WebAssembly","title":"WebAssembly"},{"uri":"/ja/docs/WebAssembly/C_to_wasm","title":"C/C++ から WebAssembly へのコンパイル"}],"pageTitle":"C/C++ から WebAssembly へのコンパイル - WebAssembly | MDN","noIndexing":false}}