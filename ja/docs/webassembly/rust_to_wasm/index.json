{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Rust から WebAssembly にコンパイルする","mdn_url":"/ja/docs/WebAssembly/Rust_to_wasm","locale":"ja","native":"日本語","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"open\"><a href=\"/ja/docs/WebAssembly\"><strong>WebAssembly home page</strong></a>\n  </li><li class=\"toggle\">\n    <details open=\"\">\n      <summary>Tutorials</summary>\n      <ol>\n        <li><a href=\"/ja/docs/WebAssembly/Concepts\">WebAssembly concepts</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/C_to_wasm\">Compiling from C/C++ to WebAssembly</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Rust_to_wasm\">Compiling from Rust to WebAssembly</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Using_the_JavaScript_API\">Using the WebAssembly JavaScript API</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Understanding_the_text_format\">Understanding WebAssembly text format</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Text_format_to_wasm\">Converting WebAssembly text format to wasm</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Loading_and_running\">Loading and running WebAssembly code</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Caching_modules\">Caching compiled WebAssembly modules</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Exported_functions\">Exported WebAssembly functions</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Object reference</summary>\n      <ol>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code></a></li>\n      </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Rust のコードがあれば、それを <a href=\"/ja/docs/WebAssembly\">WebAssembly</a> (wasm) にコンパイルすることができます。このチュートリアルでは Rust プロジェクトをコンパイルして既存のウェブアプリケーションで使用するために必要なことについて説明します。</p>"}},{"type":"prose","value":{"id":"rust_と_webassembly_の用途","title":"Rust と WebAssembly の用途","isH3":false,"content":"<p>Rust と WebAssembly には、主に 2 つの用途があります。</p>\n<ul>\n  <li>アプリケーション全体を構築する — ウェブアプリ全体を Rust ベースで構築します。</li>\n  <li>アプリケーションの一部を構築する — 既存の JavaScript フロントエンドの内部で Rust を使用します。</li>\n</ul>\n<p>今のところ、Rust チームは後者のケースに焦点を当てているので、ここではこれについて説明します。前者の場合、<a href=\"https://github.com/DenisKolodin/yew\" class=\"external\" rel=\" noopener\"><code>yew</code></a> のようなプロジェクトをチェックアウトしてください。</p>\n<p>このチュートリアルでは、Rust で npm パッケージを構築するためのツールである <code>wasm-pack</code> を使用して npm パッケージを構築します。このパッケージには WebAssembly と JavaScript のコードしか含まれていないため、パッケージのユーザーは Rust をインストールする必要がありません。WebAssembly で書かれていることにすら気づかないかもしれません。</p>"}},{"type":"prose","value":{"id":"rust_開発環境のセットアップ","title":"Rust 開発環境のセットアップ","isH3":false,"content":"<p>環境を整えるために必要なすべてのステップを踏んでみましょう。</p>"}},{"type":"prose","value":{"id":"rust_のインストール","title":"Rust のインストール","isH3":true,"content":"<p><a href=\"https://www.rust-lang.org/install.html\" class=\"external\" rel=\" noopener\">Install Rust</a> ページに行って指示に従い、Rust をインストールしてください。これによって \"rustup\" と呼ばれる複数のバージョンの Rust を管理できるようにするツールがインストールされます。既定の設定では、通常の Rust 開発で使いたいであろう最新の安定版 Rust リリースをインストールします。rustup は Rust コンパイラーの <code>rustc</code> や Rust のパッケージマネージャーの <code>cargo</code> や Rust の標準ライブラリーの <code>rust-std</code> やいくつかの助けになるドキュメント — <code>rust-docs</code> をインストールします。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> インストール後のメモで、cargo の <code>bin</code> ディレクトリーをシステムの <code>PATH</code> に追加する必要があるという点に注意してください。これは自動的に追加されるはずですが、有効にするためにターミナルを再起動する必要があります。</p>\n</div>"}},{"type":"prose","value":{"id":"wasm-pack","title":"wasm-pack","isH3":true,"content":"<p>パッケージをビルドするには、<code>wasm-pack</code> という追加のツールが必要です。これは <code>npm</code> 向けに正しくパッケージングをすることだけでなく、WebAssembly にコードをコンパイルするのにも役立ちます。ダウンロードしてインストールするには、ターミナルに次のコマンドを入力します。</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>cargo <span class=\"token function\">install</span> wasm-pack\n</code></pre></div>"}},{"type":"prose","value":{"id":"webassembly_パッケージのビルド","title":"WebAssembly パッケージのビルド","isH3":false,"content":"<p>セットアップは以上です。 Rust で新しいパッケージを作りましょう。個人的なプロジェクトを置いておく場所へ移動して以下を実行してください。</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>$ cargo new --lib hello-wasm\n     Created library <span class=\"token variable\"><span class=\"token variable\">`</span>hello-wasm<span class=\"token variable\">`</span></span> project\n</code></pre></div>\n<p>これにより新たなライブラリーが出発に必要なものすべてと一緒に <code>hello-wasm</code> という名前のサブディレクトリーに作成されます。</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">+-- Cargo.toml\n+-- src\n    +-- lib.rs\n</pre></div>\n<p>まず <code>Cargo.toml</code> があります。これはビルドを設定するためのファイルです。もし <code>Gemfile</code> を Bundler から使ったり、<code>package.json</code> を npm から使ったりしたことがあるなら、なじみがあるでしょう。cargo は両者と似たような動作をします。</p>\n<p>次に、 Cargo はいくつかの Rust コードを <code>src/lib.rs</code> に生成してくれています。</p>\n<div class=\"code-example\"><pre class=\"brush: rust notranslate\"><code><span class=\"token attribute attr-name\">#[cfg(test)]</span>\n<span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">tests</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute attr-name\">#[test]</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">it_works</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>このチュートリアルでは、このテストコードはまったく使わないので、消してください。</p>"}},{"type":"prose","value":{"id":"rust_を書いてみよう","title":"Rust を書いてみよう","isH3":true,"content":"<p>代わりに以下のコードを <code>src/lib.rs</code> に書き込みましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: rust notranslate\"><code><span class=\"token keyword\">use</span> <span class=\"token namespace\">wasm_bindgen<span class=\"token punctuation\">::</span>prelude<span class=\"token punctuation\">::</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[wasm_bindgen]</span>\n<span class=\"token keyword\">extern</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">alert</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token attribute attr-name\">#[wasm_bindgen]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">greet</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token macro property\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, {}!\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これが Rust プロジェクトの中身です。三つの主要な部分があります。順番に説明しましょう。ここでは高水準な説明を行い、細部は省略します。Rust についてもっと学びたいのであれば、無料のオンラインブック <a href=\"https://doc.rust-lang.org/book/\" class=\"external\" rel=\" noopener\">The Rust Programming Language</a> (訳注: <a href=\"https://doc.rust-jp.rs/book/second-edition/\" class=\"external\" rel=\" noopener\">和訳</a>もあります) を確認してください。</p>\n<h4 id=\"wasm-bindgen_を使用して_rust_と_javascript_を協調させる\"><code>wasm-bindgen</code> を使用して Rust と JavaScript を協調させる</h4>\n<p>最初の部分は以下のようになっています。</p>\n<div class=\"code-example\"><pre class=\"brush: rust notranslate\"><code><span class=\"token keyword\">use</span> <span class=\"token namespace\">wasm_bindgen<span class=\"token punctuation\">::</span>prelude<span class=\"token punctuation\">::</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ライブラリーは Rust では「クレート」と呼ばれます。</p>\n<p>理解できましたか？ <em>Cargo</em> が<em>クレート</em>を取り入れるのです。</p>\n<p>3 行目にはコードをライブラリーから自分のコードにインポートする <code>use</code> コマンドがあります。この場合、<code>wasm_bindgen::prelude</code> モジュールにあるものすべてをインポートしています。これらの機能は次の節で使用します。</p>\n<p>次の節に移動する前に、もう少し <code>wasm-bindgen</code> について話しておいたほうがいいでしょう。</p>\n<p><code>wasm-pack</code> は 別のツールの <code>wasm-bindgen</code> を利用して、JavaScript と Rust の型を繋いでいます。<code>wasm-bindgen</code> によって JavaScript が文字列に関する Rust API を呼び出すことや Rust の関数が JavaScript の例外をキャッチすることができるようになります。</p>\n<p>パッケージ内で <code>wasm-bindgen</code> の機能を使うことになるでしょう。実際、次の節で利用します。</p>\n<h4 id=\"javascript_内の外部関数を_rust_から呼び出す。\">JavaScript 内の外部関数を Rust から呼び出す。</h4>\n<p>次の部分は以下のようになっています。</p>\n<div class=\"code-example\"><pre class=\"brush: rust notranslate\"><code><span class=\"token attribute attr-name\">#[wasm_bindgen]</span>\n<span class=\"token keyword\">extern</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">alert</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>#[ ]</code> の内側は「アトリビュート」と呼ばれ、次に来る文を何らかの形で修飾します。この場合、その文は外部で定義された関数を呼び出したいことを Rust に伝える <code>extern</code> です。アトリビュートは「wasm-bindgen はこれらの関数を見つける方法を知っている」ということを意味しています。</p>\n<p>3 行目は関数の Rust で書かれたシグニチャです。「<code>alert</code> 関数は <code>s</code> という名前の引数を一つ取る」ということを意味しています。</p>\n<p>お察しの通り、これは <a href=\"/ja/docs/Web/API/Window/alert\">JavaScript によって提供される <code>alert</code> 関数</a>です。次の節でこの関数を呼び出します。</p>\n<p>JavaScript 関数を呼び出したい時はいつでも、このファイルに追加すれば、<code>wasm-bindgen</code> があらゆるセットアップの世話をしてくれます。まだすべてに対応している訳ではありませんが、作業をしています。何か見つからないものがあれば<a href=\"https://github.com/rustwasm/wasm-bindgen/issues/new\" class=\"external\" rel=\" noopener\">バグを報告</a>してください。</p>\n<h4 id=\"javascript_が呼び出せる_rust_関数の作成\">JavaScript が呼び出せる Rust 関数の作成</h4>\n<p>最後の部分は以下のコードです。</p>\n<div class=\"code-example\"><pre class=\"brush: rust notranslate\"><code><span class=\"token attribute attr-name\">#[wasm_bindgen]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">greet</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token macro property\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, {}!\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>再び <code>#[wasm_bindgen]</code> アトリビュートが目に入ります。この場合、<code>extern</code> ブロックではなく <code>fn</code> を改変しています。これは JavaScript がこの Rust 関数を呼び出せるようにしてほしいということを意味します。これは <code>extern</code> とは逆です。自分が必要とする関数ではなく、外の世界に渡す関数なのです。</p>\n<p>この関数は <code>greet</code> という名前で、引数に (<code>&amp;str</code> と書かれる) 文字列 <code>name</code> を一つ取ります。そしてそれは上の <code>extern</code> ブロックで要求した alert 関数を呼び出します。文字列を結合する <code>format!</code> マクロに呼び出しを渡します。</p>\n<p><code>format!</code> マクロはこの場合フォーマット文字列とそこに挿入する変数の二つの引数を取ります。フォーマット文字列は <code>\"Hello, {}!\"</code> の部分です。それは変数が補完される <code>{}</code> を含みます。渡している変数は関数の引数 <code>name</code> なので、<code>greet(\"Steve\")</code> と呼び出すと <code>\"Hello, Steve!\"</code> が見られるはずです。</p>\n<p>これは alert() に渡されるので、この関数を呼び出すと \"Hello, Steve!\" と書かれたアラートボックスが現れるでしょう。</p>\n<p>ライブラリーを書いたので、それをビルドしましょう。</p>"}},{"type":"prose","value":{"id":"コードを_webassembly_にコンパイルする","title":"コードを WebAssembly にコンパイルする","isH3":true,"content":"<p>コードを正しくコンパイルするには、はじめに <code>Cargo.toml</code> で設定する必要があります。<code>Cargo.toml</code> を開き、以下のように中身を変更してください。</p>\n<div class=\"code-example\"><pre class=\"brush: toml notranslate\"><code><span class=\"token punctuation\">[</span><span class=\"token table class-name\">package</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">name</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"hello-wasm\"</span>\n<span class=\"token key property\">version</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"0.1.0\"</span>\n<span class=\"token key property\">authors</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Your Name &lt;you@example.com&gt;\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">description</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"A sample project with wasm-pack\"</span>\n<span class=\"token key property\">license</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"MIT/Apache-2.0\"</span>\n<span class=\"token key property\">repository</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"https://github.com/yourgithubusername/hello-wasm\"</span>\n<span class=\"token key property\">edition</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"2018\"</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">lib</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">crate-type</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"cdylib\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">dependencies</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">wasm-bindgen</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"0.2\"</span>\n</code></pre></div>\n<p>自分自身のリポジトリを記入し、<code>git</code> が <code>authors</code> フィールドに使用するものと同じ情報を使用してください。</p>\n<p>追加する大部分は下にあるものです。最初の部分 — <code>[lib]</code> — は Rust にパッケージの cdylib バージョンをビルドするよう伝えます。何を意味するかはこのチュートリアルでは掘り下げません。もっと知るには、<a href=\"https://doc.rust-lang.org/cargo/guide/\" class=\"external\" rel=\" noopener\">Cargo</a> と <a href=\"https://doc.rust-lang.org/reference/linkage.html\" class=\"external\" rel=\" noopener\">Rust Linkage</a> のドキュメンテーションを調べてください。</p>\n<p>第二の項は <code>[dependencies]</code> の項です。ここで Cargo にどのバージョンの <code>wasm-bindgen</code> に依存させるかを知らせます。今回の場合、バージョン <code>0.2.z</code> のいずれかのものです (<code>0.3.0</code> やそれ以上ではありません)。</p>"}},{"type":"prose","value":{"id":"パッケージのビルド","title":"パッケージのビルド","isH3":true,"content":"<p>すべてのセットアップが完了したので、ビルドしましょう。ターミナルに以下のものを入力してください。</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>wasm-pack build --target web\n</code></pre></div>\n<p>このコマンドは多くのことをします (そして時間がかかます。特に初めて <code>wasm-pack</code> を実行したときはそうです)。それらについて詳しく学ぶには、<a href=\"https://hacks.mozilla.org/2018/04/hello-wasm-pack/\" class=\"external\" rel=\" noopener\">Mozilla Hacks のこのブログ投稿</a>を確認してください。手短に説明すると、<code>wasm-pack build</code> は次のことをします。</p>\n<ol>\n  <li>Rust コードを WebAssembly にコンパイルする。</li>\n  <li><code>wasm-bindgen</code> をその WebAssembly に対して実行し、WebAssembly ファイルを npm が理解できるモジュールにラップする JavaScript ファイルを生成する。</li>\n  <li><code>pkg</code> ディレクトリーを作成し、その JavaScript ファイルと WebAssembly コードをそこに移動する。</li>\n  <li><code>Cargo.toml</code> を読み、等価な <code>package.json</code> を生成する。</li>\n  <li>(もし存在するなら) <code>README.md</code> をパッケージにコピーする。</li>\n</ol>\n<p>最終的な結果は？ npm パッケージが <code>pkg</code> ディレクトリーに生成されます。</p>\n<h4 id=\"コードサイズについての余談\">コードサイズについての余談</h4>\n<p>生成された WebAssembly のコードサイズについて確認すると、それはおそらく数百キロバイトでしょう。Rust にはサイズの最適化をまったく指示しておらず、最適化すればサイズを大幅に削減できます。これはこのチュートリアルの脱線ですが、もしもっと学習したいなら、Rust WebAssembly Working Group の<a href=\"https://rustwasm.github.io/book/game-of-life/code-size.html#shrinking-wasm-size\" class=\"external\" rel=\" noopener\">.wasm のサイズの縮小</a>を確認してください。</p>"}},{"type":"prose","value":{"id":"パッケージのウェブでの利用","title":"パッケージのウェブでの利用","isH3":false,"content":"<p>さて、コンパイルされた wasm モジュールが入手できたので、ブラウザーで動かしてみましょう。</p>\n<p>まず、プロジェクトのルートに <code>index.html</code> という名前のファイルを作成し、以下のような内容にしてみましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en-US<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>hello-wasm example<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n      <span class=\"token keyword\">import</span> init<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>greet<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./pkg/hello_wasm.js\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WebAssembly\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>このファイルのスクリプトは、js グルーコードをインポートし、wasm モジュールを初期化し、rust で書いた <code>greet</code> 関数を呼び出します。</p>\n<p>プロジェクトのルートディレクトリーに、ローカルのウェブサーバーを用意します（例: <code>python3 -m http.server</code> ）。やり方がよくわからない場合は、<a href=\"/ja/docs/Learn/Common_questions/set_up_a_local_testing_server#running_a_simple_local_http_server\">シンプルなローカル HTTP サーバーの実行</a>を参考にしてください。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> 必ず <code>application/wasm</code> という MIME 型に対応している最新のウェブサーバーを使用してください。古いウェブサーバーでは、まだ対応していないかもしれません。</p>\n</div>\n<p>ウェブサーバーから <code>index.html</code> を読み込む （Python3 の例を使用する場合: <code>http://localhost:8000</code>）。 画面上にアラートボックスが現れ、 <code>Hello, WebAssembly!</code> と表示されます。 JavaScript から Rust へ、そして Rust から JavaScript への呼び出しに成功しました。</p>"}},{"type":"prose","value":{"id":"npm_でパッケージが利用できるようにする","title":"npm でパッケージが利用できるようにする","isH3":false,"content":"<p>WebAssembly モジュールを npm で使用する場合、いくつかの変更が必要です。</p>\n<p>まず、Rust を target bundler オプションで再コンパイルすることから始めましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>wasm-pack build --target bundler\n</code></pre></div>"}},{"type":"prose","value":{"id":"node.js_と_npm_のインストール","title":"Node.js と npm のインストール","isH3":true,"content":"<p>npmパッケージを構築しているので、Node.jsと npm をインストールしておく必要があります。</p>\n<p>Node.js と npm を入手するには、 <a href=\"https://docs.npmjs.com/getting-started/\" class=\"external\" rel=\" noopener\">Get npm!</a> ページへ移動して指示に従ってください。バージョンは好きなものを選んでください。このチュートリアルはバージョンを詳細に指定するものではありません。</p>\n<p>次に、インストールした他の JavaScript パッケージがこのパッケージを利用できるようにするために、 `npm link` を使用しましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token builtin class-name\">cd</span> pkg\n<span class=\"token function\">npm</span> <span class=\"token function\">link</span>\n</code></pre></div>\n<p>Rust で書かれ、 WebAssembly にコンパイルされた npm パッケージができました。JavaScript から利用する準備ができており、ユーザーが Rust をインストールすることを必要としません。コードに含まれているのは WebAssembly コードであり、Rust のソースではないのです。</p>"}},{"type":"prose","value":{"id":"パッケージのウェブでの利用_2","title":"パッケージのウェブでの利用","isH3":false,"content":"<p>この新たなパッケージを利用するウェブサイトを構築しましょう。多くの人が様々なバンドラーツールで npm のパッケージを利用していますが、このチュートリアルではそのうちの一つである <code>webpack</code> を使用します。これは若干複雑ですが、現実的なユースケースを示します。</p>\n<p><code>pkg</code> ディレクトリーの外に戻り、新たなディレクトリー <code>site</code> を作成し、そこでこれを試してみましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>\n<span class=\"token function\">mkdir</span> site\n<span class=\"token builtin class-name\">cd</span> site\n<span class=\"token function\">npm</span> <span class=\"token function\">link</span> hello-wasm\n</code></pre></div>\n<p>新しいファイル <code>package.json</code> を作成し、次のコードをそこに書き込んでください。</p>\n<div class=\"code-example\"><pre class=\"brush: json notranslate\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"serve\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack-dev-server\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"hello-wasm\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^0.1.0\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"webpack\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.25.1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"webpack-cli\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^3.1.2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"webpack-dev-server\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^3.1.10\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>次に、Webpack を設定する必要があります。<code>webpack.config.js</code> を作成し、そこに次のことを記入してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./index.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"dist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">\"development\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>次に、HTML ファイルで参照される <code>index.js</code> を作成し、以下の内容を追加してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./node_modules/hello-wasm/hello_wasm.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">js</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  js<span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WebAssembly with npm\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>まこれは新しいモジュールを <code>node_modules</code> フォルダーからインポートします。これは最善の方法ではないと思いますが、デモなので、これでいいでしょう。一度そのモジュールが読み込まれると、そこから <code>greet</code> 関数を呼び出し、<code>\"WebAssembly\"</code> を文字列として渡します。ここに特別なことはなにもありませんが、Rust コードを呼び出していることに注意してください。JavaScript コードから観察する限り、これはただの普通のモジュールです。</p>\n<p>最後に HTML ファイルが必要です。 <code>index.html</code> を作成し、次の内容を追加してください。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en-US<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>hello-wasm example<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./index.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>ファイルを作りました。これを試してみましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span>\n<span class=\"token function\">npm</span> run serve\n</code></pre></div>\n<p>これでウェブサーバーが起動します。 <code>http://localhost:8080</code> を読み込んでください。 <code>Hello, WebAssembly!</code> と書かれたアラートボックスが画面に出てくるはずです。JavaScript からの Rust の呼び出しと Rust からの JavaScript の呼び出しに成功しました。</p>"}},{"type":"prose","value":{"id":"おわりに","title":"おわりに","isH3":false,"content":"<p>ここでチュートリアルは終わりです。あなたの役に立ったと思われることを望みます。</p>\n<p>この領域にはたくさんの進行中の刺激的な仕事があります。もしそれをもっとよくするのを手伝いたいなら、 <a href=\"https://fitzgeraldnick.com/2018/02/27/wasm-domain-working-group.html\" class=\"external\" rel=\" noopener\">the Rust WebAssembly Working Group</a> を確認してください。</p>"}}],"toc":[{"text":"Rust と WebAssembly の用途","id":"rust_と_webassembly_の用途"},{"text":"Rust 開発環境のセットアップ","id":"rust_開発環境のセットアップ"},{"text":"WebAssembly パッケージのビルド","id":"webassembly_パッケージのビルド"},{"text":"パッケージのウェブでの利用","id":"パッケージのウェブでの利用"},{"text":"npm でパッケージが利用できるようにする","id":"npm_でパッケージが利用できるようにする"},{"text":"パッケージのウェブでの利用","id":"パッケージのウェブでの利用_2"},{"text":"おわりに","id":"おわりに"}],"summary":"Rust のコードがあれば、それを WebAssembly (wasm) にコンパイルすることができます。このチュートリアルでは Rust プロジェクトをコンパイルして既存のウェブアプリケーションで使用するために必要なことについて説明します。","popularity":0.0004,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Compiling from Rust to WebAssembly","locale":"en-US","native":"English (US)"},{"title":"Rust를 WebAssembly로 컴파일하기","locale":"ko","native":"한국어"},{"title":"Компиляция Rust в WebAssembly","locale":"ru","native":"Русский"},{"title":"编译 Rust 为 WebAssembly","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/webassembly/rust_to_wasm","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/webassembly/rust_to_wasm/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/WebAssembly","title":"WebAssembly"},{"uri":"/ja/docs/WebAssembly/Rust_to_wasm","title":"Rust から WebAssembly にコンパイルする"}],"pageTitle":"Rust から WebAssembly にコンパイルする - WebAssembly | MDN","noIndexing":false}}