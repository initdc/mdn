{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"WebAssembly","mdn_url":"/ja/docs/WebAssembly","locale":"ja","native":"日本語","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"open\"><a href=\"/ja/docs/WebAssembly\"><strong>WebAssembly home page</strong></a>\n  </li><li class=\"toggle\">\n    <details open=\"\">\n      <summary>Tutorials</summary>\n      <ol>\n        <li><a href=\"/ja/docs/WebAssembly/Concepts\">WebAssembly concepts</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/C_to_wasm\">Compiling from C/C++ to WebAssembly</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Rust_to_wasm\">Compiling from Rust to WebAssembly</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Using_the_JavaScript_API\">Using the WebAssembly JavaScript API</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Understanding_the_text_format\">Understanding WebAssembly text format</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Text_format_to_wasm\">Converting WebAssembly text format to wasm</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Loading_and_running\">Loading and running WebAssembly code</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Caching_modules\">Caching compiled WebAssembly modules</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Exported_functions\">Exported WebAssembly functions</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Object reference</summary>\n      <ol>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code></a></li>\n      </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>WebAssembly は現代のウェブブラウザーで実行できる新しい種類のコードです。ネイティブに近いパフォーマンスで動作する、コンパクトなバイナリー形式の低レベルなアセンブリー風言語です。さらに、 C/C++、C# や Rust などの言語のコンパイル先となり、それらの言語をウェブ上で実行することができます。 WebAssembly は JavaScript と並行して動作するように設計されているため、両方を連携させることができます。</p>"}},{"type":"prose","value":{"id":"概要","title":"概要","isH3":false,"content":"<p>WebAssembly はウェブプラットフォームに大きな影響を与えます。以前ではできなかったようなウェブ上で動作するクライアントアプリケーションのために、複数の言語で記述されたコードをウェブ上でネイティブに近い速度で実行する方法を提供します。</p>\n<p>WebAssembly は JavaScript を補完、並行して動作するように設計されています。 WebAssembly JavaScript API を使用して、 WebAssembly モジュールを JavaScript アプリケーションに読み込み、2 つの間で機能を共有できます。これにより、WebAssembly コードの記述方法を知らなくても、 WebAssembly のパフォーマンスとパワー、 JavaScript の表現力と柔軟性を同じアプリケーションで活用できます。</p>\n<p>さらに、 <a href=\"https://www.w3.org/wasm/\" class=\"external\" rel=\" noopener\">W3C WebAssembly Working Group</a> と<a href=\"https://www.w3.org/community/webassembly/\" class=\"external\" rel=\" noopener\">コミュニティグループ</a>を介して、ウェブ標準として開発されており、主要なブラウザーベンダーも積極的に参加しています。</p>"}},{"type":"prose","value":{"id":"ガイド","title":"ガイド","isH3":false,"content":"<dl>\n  <dt id=\"webassembly_の概要\"><a href=\"/ja/docs/WebAssembly/Concepts\">WebAssembly の概要</a></dt>\n  <dd>\n    <p>まずは WebAssembly の大まかな概念 — WebAssembly とはなにか、有用性、ウェブプラットフォーム (またはそれ以上) にどのように適合するか、どのように使用するか — の理解から始めてください。</p>\n  </dd>\n  <dt id=\"cc_から_webassembly_へのコンパイル\"><a href=\"/ja/docs/WebAssembly/C_to_wasm\">C/C++ から WebAssembly へのコンパイル</a></dt>\n  <dd>\n    <p>C/C++ で書いたコードを <a href=\"https://emscripten.org/\" class=\"external\" rel=\" noopener\">Emscripten</a> のようなツールを使って .wasm にコンパイルできます。どのように動作するか確認してみましょう。</p>\n  </dd>\n  <dt id=\"既存の_c_モジュールから_webassembly_へのコンパイル\"><a href=\"/ja/docs/WebAssembly/existing_C_to_wasm\">既存の C モジュールから WebAssembly へのコンパイル</a></dt>\n  <dd>\n    <p>WebAssembly のコアユースケースは、既存の C ライブラリーのエコシステムを利用し、開発者がウェブ上でそれらを使用できるようにすることです。</p>\n  </dd>\n  <dt id=\"rust_から_webassembly_へのコンパイル\"><a href=\"/ja/docs/WebAssembly/Rust_to_wasm\">Rust から WebAssembly へのコンパイル</a></dt>\n  <dd>\n    <p>Rust コードを書いていれば、WebAssembly にコンパイルすることができます。このチュートリアルでは、Rust プロジェクトをコンパイルして既存のウェブアプリケーションで使用するために知っておく必要があるすべてのことを説明します。</p>\n  </dd>\n  <dt id=\"webassembly_コードの読み込みと実行\"><a href=\"/ja/docs/WebAssembly/Loading_and_running\">WebAssembly コードの読み込みと実行</a></dt>\n  <dd>\n    <p>.wasm を手に入れたら、この記事ではそれを読み取り、コンパイルし、インスタンス化する方法を説明します。 <a href=\"/ja/docs/WebAssembly/JavaScript_interface\">WebAssembly JavaScript</a> API と <a href=\"/ja/docs/Web/API/Fetch_API\">Fetch</a> または <a href=\"/ja/docs/Web/API/XMLHttpRequest\">XHR</a> API とを組み合わせます。</p>\n  </dd>\n  <dt id=\"webassembly_javascript_api_の使用\"><a href=\"/ja/docs/WebAssembly/Using_the_JavaScript_API\">WebAssembly JavaScript API の使用</a></dt>\n  <dd>\n    <p>.wasm モジュールを読み込んだら、それを使いたくなるでしょう。この記事では、 WebAssembly JavaScript API を用いて WebAssembly を使用する方法を説明します。</p>\n  </dd>\n  <dt id=\"エクスポートされた_webassembly_関数\"><a href=\"/ja/docs/WebAssembly/Exported_functions\">エクスポートされた WebAssembly 関数</a></dt>\n  <dd>\n    <p>エクスポートされた WebAssembly 関数は、WebAssembly 関数の JavaScript リフレクションであり、 JavaScript から WebAssembly コードを呼び出すことができます。 この記事では、それらが何なのか説明します。</p>\n  </dd>\n  <dt id=\"webassembly_テキスト形式を理解する\"><a href=\"/ja/docs/WebAssembly/Understanding_the_text_format\">WebAssembly テキスト形式を理解する</a></dt>\n  <dd>\n    <p>この記事では wasm テキスト形式について説明します。これは .wasm モジュールの低レベルなテキスト表現で、デバッグ時にブラウザーの開発者ツールに表示されます。</p>\n  </dd>\n  <dt id=\"webassembly_テキスト形式から_wasm_に変換する\"><a href=\"/ja/docs/WebAssembly/Text_format_to_wasm\">WebAssembly テキスト形式から wasm に変換する</a></dt>\n  <dd>\n    <p>この記事では、テキスト形式で書かれた WebAssembly モジュールを .wasm バイナリーに変換する方法について説明します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"api_リファレンス","title":"API リファレンス","isH3":false,"content":"<dl>\n  <dt id=\"webassembly_の制御フロー\"><a href=\"/en-US/docs/WebAssembly/Reference/Control_flow\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">WebAssembly の制御フロー (en-US)</a></dt>\n  <dd>\n    <p>WebAssembly の制御フロー操作の設定に関するリファレンスドキュメントです。</p>\n  </dd>\n  <dt id=\"webassembly\"><a href=\"/ja/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></dt>\n  <dd>\n    <p>このオブジェクトは、 WebAssembly に関連する全ての機能の名前空間として振る舞います。</p>\n  </dd>\n  <dt id=\"webassembly.global\"><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global()</code></a></dt>\n  <dd>\n    <p><code>WebAssembly.Global</code> オブジェクトは JavaScript と 1 つ以上の <a href=\"/ja/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a> インスタンス（のインポート/エクスポート可能な値）を横断してアクセスできるグローバル変数のインスタンスを表現します。これによって、複数モジュールでの動的リンクを実現できます。</p>\n  </dd>\n  <dt id=\"webassembly.module\"><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module()</code></a></dt>\n  <dd>\n    <p><code>WebAssembly.Module</code> オブジェクトにはブラウザーでコンパイルされたステートレスな WebAssembly コードが含まれており、効率的に<a href=\"/ja/docs/Web/API/Worker/postMessage\">ワーカーで共有</a>したり、複数回インスタンス化したりすることができます。</p>\n  </dd>\n  <dt id=\"webassembly.instance\"><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance()</code></a></dt>\n  <dd>\n    <p><code>WebAssembly.Instance</code> オブジェクトはステートフルで、実行可能な <code>Module</code> のインスタンスです。<code>Instance</code> オブジェクトには JavaScript から WebAssembly コードを呼び出すことを許可された<a href=\"/ja/docs/WebAssembly/Exported_functions\">エクスポートされた WebAssembly 関数</a>が含まれます。</p>\n  </dd>\n  <dt id=\"webassembly.instantiatestreaming\"><a href=\"/ja/docs/WebAssembly/JavaScript_interface/instantiateStreaming\"><code>WebAssembly.instantiateStreaming()</code></a></dt>\n  <dd>\n    <p><code>WebAssembly.instantiate()</code> 関数は WebAssembly コードをコンパイル、インスタンス化するための主要な API で、<code>Module</code> と、その最初の <code>Instance</code> を返します。</p>\n  </dd>\n  <dt id=\"webassembly.memory\"><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory()</code></a></dt>\n  <dd>\n    <p><code>WebAssembly.Memory</code> オブジェクトはリサイズ可能な <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> で、 <code>Instance</code> からアクセスされる生のバイト列を保持します。</p>\n  </dd>\n  <dt id=\"webassembly.table\"><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table()</code></a></dt>\n  <dd>\n    <p><code>WebAssembly.Table</code> オブジェクトは <code>Instance</code> からアクセスされる関数参照などの不透明値のリサイズ可能な型付き配列です。</p>\n  </dd>\n  <dt id=\"webassembly.compileerror\"><a href=\"/ja/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError()</code></a></dt>\n  <dd>\n    <p>WebAssembly <code>CompileError</code> オブジェクトを生成します。</p>\n  </dd>\n  <dt id=\"webassembly.linkerror\"><a href=\"/ja/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError()</code></a></dt>\n  <dd>\n    <p>WebAssembly <code>LinkError</code> オブジェクトを生成します。</p>\n  </dd>\n  <dt id=\"webassembly.runtimeerror\"><a href=\"/ja/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError()</code></a></dt>\n  <dd>\n    <p>WebAssembly <code>RuntimeError</code> オブジェクトを生成します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":"<ul>\n  <li><a href=\"https://github.com/JasonWeathersby/WASMSobel\" class=\"external\" rel=\" noopener\">WASMSobel</a></li>\n  <li>他の多くの例については <a href=\"https://github.com/mdn/webassembly-examples/\" class=\"external\" rel=\" noopener\">webassembly-examples</a> リポジトリーを参照してください。</li>\n</ul>"}},{"type":"specifications","value":{"title":"仕様書","id":"仕様書","isH3":false,"specifications":[{"bcdSpecificationURL":"https://webassembly.github.io/spec/js-api/#webassembly-namespace","title":"WebAssembly JavaScript Interface"}],"query":"javascript.builtins.WebAssembly"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"query":"javascript.builtins.WebAssembly","dataURL":"/ja/docs/WebAssembly/bcd.json"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"https://research.mozilla.org/\" class=\"external\" rel=\" noopener\">WebAssembly on Mozilla Research</a></li>\n  <li><a href=\"https://webassembly.org/\" class=\"external\" rel=\" noopener\">webassembly.org</a></li>\n  <li><a href=\"https://hacks.mozilla.org/category/webassembly/\" class=\"external\" rel=\" noopener\">WebAssembly articles on Mozilla Hacks blog</a></li>\n  <li><a href=\"https://www.w3.org/community/webassembly/\" class=\"external\" rel=\" noopener\">W3C WebAssembly Community Group</a></li>\n  <li><a href=\"https://web.dev/emscripting-a-c-library/\" class=\"external\" rel=\" noopener\">Emscripting a C Library to Wasm</a></li>\n</ul>"}}],"toc":[{"text":"概要","id":"概要"},{"text":"ガイド","id":"ガイド"},{"text":"API リファレンス","id":"api_リファレンス"},{"text":"例","id":"例"},{"text":"仕様書","id":"仕様書"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"WebAssembly は現代のウェブブラウザーで実行できる新しい種類のコードです。ネイティブに近いパフォーマンスで動作する、コンパクトなバイナリー形式の低レベルなアセンブリー風言語です。さらに、 C/C++、C# や Rust などの言語のコンパイル先となり、それらの言語をウェブ上で実行することができます。 WebAssembly は JavaScript と並行して動作するように設計されているため、両方を連携させることができます。","popularity":0.001,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"WebAssembly","locale":"en-US","native":"English (US)"},{"title":"WebAssembly","locale":"es","native":"Español"},{"title":"WebAssembly","locale":"fr","native":"Français"},{"title":"웹어셈블리","locale":"ko","native":"한국어"},{"title":"WebAssembly","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"WebAssembly","locale":"ru","native":"Русский"},{"title":"WebAssembly","locale":"zh-CN","native":"中文 (简体)"},{"title":"WebAssembly","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ja/webassembly","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/webassembly/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"pageTitle":"WebAssembly | MDN","noIndexing":false}}