{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"既存の C モジュールから WebAssembly へのコンパイル","mdn_url":"/ja/docs/WebAssembly/existing_C_to_wasm","locale":"ja","native":"日本語","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"open\"><a href=\"/ja/docs/WebAssembly\"><strong>WebAssembly home page</strong></a>\n  </li><li class=\"toggle\">\n    <details open=\"\">\n      <summary>Tutorials</summary>\n      <ol>\n        <li><a href=\"/ja/docs/WebAssembly/Concepts\">WebAssembly concepts</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/C_to_wasm\">Compiling from C/C++ to WebAssembly</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Rust_to_wasm\">Compiling from Rust to WebAssembly</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Using_the_JavaScript_API\">Using the WebAssembly JavaScript API</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Understanding_the_text_format\">Understanding WebAssembly text format</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Text_format_to_wasm\">Converting WebAssembly text format to wasm</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Loading_and_running\">Loading and running WebAssembly code</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Caching_modules\">Caching compiled WebAssembly modules</a></li>\n        <li><a href=\"/ja/docs/WebAssembly/Exported_functions\">Exported WebAssembly functions</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Object reference</summary>\n      <ol>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code></a></li>\n        <li><a href=\"/ja/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code></a></li>\n      </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>WebAssembly の主な用途は、既存の C ライブラリーのエコシステムを取得し、開発者がウェブ上でそれらを利用できるようにすることです。</p>\n<p>これらのライブラリーは、C の標準ライブラリー、オペレーティングシステム、ファイルシステムやその他のものにしばしば依存します。 Emscripten は、いくつかの<a href=\"https://emscripten.org/docs/porting/guidelines/api_limitations.html\" class=\"external\" rel=\" noopener\">制限</a>はあるものの、これらの機能のほとんどを提供しています。</p>\n<p>例として、 WebP のエンコーダーを wasm にコンパイルしてみましょう。WebP コーデックのソースは C 言語で書かれており、 <a href=\"https://github.com/webmproject/libwebp\" class=\"external\" rel=\" noopener\">GitHub にあり</a>、拡張 <a href=\"https://developers.google.com/speed/webp/docs/api\" class=\"external\" rel=\" noopener\">API</a> のドキュメントも同様に利用できます。これはとても良いスタート地点です。</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">git</span> clone https://github.com/webmproject/libwebp\n</code></pre></div>\n<p>簡単な例から始めましょう。 <code>WebPGetEncoderVersion()</code> を <code>encode.h</code> から JavaScript に公開するために、 <code>webp.c</code> という C のファイルを書きます。</p>\n<div class=\"code-example\"><pre class=\"brush: cpp notranslate\"><code><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"emscripten.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"src/webp/encode.h\"</span></span>\n\nEMSCRIPTEN_KEEPALIVE\n<span class=\"token keyword\">int</span> <span class=\"token function\">version</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">WebPGetEncoderVersion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これは libwebp のソースコードをコンパイルできるかテストするのに適したシンプルなプログラムです。この関数を呼び出すのに引数や複雑なデータ構造は必要ありません。</p>\n<p>このプログラムをコンパイルするには、コンパイラーに <code>-I</code> フラグを使って libwebp のヘッダーファイルがどこにあるか指示し、さらに libwebp の必要な C ファイルをすべて渡す必要があります。コンパイラーに<strong>すべての</strong> C ファイルを渡し、コンパイラーが不要なものをすべて取り除いてくれるようにすると便利です。これはこのライブラリーではうまくいくようです。</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>$ emcc -O3 -s <span class=\"token assign-left variable\">WASM</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> -s <span class=\"token assign-left variable\">EXTRA_EXPORTED_RUNTIME_METHODS</span><span class=\"token operator\">=</span><span class=\"token string\">'[\"cwrap\"]'</span> <span class=\"token punctuation\">\\</span>\n    -I libwebp <span class=\"token punctuation\">\\</span>\n    webp.c <span class=\"token punctuation\">\\</span>\n    libwebp/src/<span class=\"token punctuation\">{</span>dec,dsp,demux,enc,mux,utils<span class=\"token punctuation\">}</span>/*.c\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> この方法はすべての C プロジェクトでうまくいく訳ではありません。多くのプロジェクトでは、コンパイルの前にシステム固有のコードを生成するため、 autoconf/automake に依存しています。 Emscripten は、これらのコマンドをラップして適切な引数を注入するための <code>emconfigure</code> と <code>emmake</code> を提供しています。詳細は <a href=\"https://emscripten.org/docs/compiling/Building-Projects.html\" class=\"external\" rel=\" noopener\">Emscripten のドキュメント</a>を読んでください。</p>\n</div>\n<p>これで、新しいモジュールを読み込むために必要なのは HTML と JavaScript だけになりました。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./a.out.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  Module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onRuntimeInitialized</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> api <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">version</span><span class=\"token operator\">:</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">cwrap</span><span class=\"token punctuation\">(</span><span class=\"token string\">'version'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">.</span><span class=\"token function\">version</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>そして、正しいバージョン番号が<a href=\"https://googlechrome.github.io/samples/webassembly/version.html\" class=\"external\" rel=\" noopener\">出力</a>されます。</p>\n<p>\n  <img src=\"/en-US/docs/WebAssembly/existing_C_to_wasm/version.png\" alt=\"正しいバージョン番号を示すデベロッパーツールのコンソールのスクリーンショット\" width=\"1024\" height=\"498\" loading=\"lazy\">\n</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> libwebp は現在のバージョン a.b.c を 16 進数の 0xabc で返します。例えば、v0.6.1 は 0x000601 = 1537 としてエンコードされています。</p>\n</div>"}},{"type":"prose","value":{"id":"javascript_から_wasm_に画像を取得する","title":"JavaScript から Wasm に画像を取得する","isH3":true,"content":"<p>エンコーダーのバージョン番号を取得するのは素晴らしいことですが、画像をエンコードした方が印象的です。どうすればいいのでしょうか？</p>\n<p>最初に答えなければならない質問は、どうやって画像を wasm に入れるのかということです。libwebp の <a href=\"https://developers.google.com/speed/webp/docs/api#simple_encoding_api\" class=\"external\" rel=\" noopener\">Encoding API</a> を見ると、RGB、RGBA、BGR、BGRA のバイト列を期待していることがわかります。幸いにも Canvas API には <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CanvasRenderingContext2D/getImageData\"><code>CanvasRenderingContext2D.getImageData</code> <small>(en-US)</small></a> があり、RGBA の画像データを含む <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\"><code>Uint8ClampedArray</code></a>が得られます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">loadImage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">src</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Load image</span>\n  <span class=\"token keyword\">const</span> imgBlob <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resp</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> resp<span class=\"token punctuation\">.</span><span class=\"token function\">blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> img <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">createImageBitmap</span><span class=\"token punctuation\">(</span>imgBlob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Make canvas same size as image</span>\n  <span class=\"token keyword\">const</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'canvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  canvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n  canvas<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Draw image onto canvas</span>\n  <span class=\"token keyword\">const</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getImageData</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> img<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> img<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これで、残った「唯一の」問題は、 JavaScript から wasm にデータをコピーすることだけです。そのためには、追加で 2 つの関数を公開する必要があります。 1 つは、 wasm 内で画像のためのメモリーを確保する関数、もう 1 つは、それを再び解放する関数です。</p>\n<div class=\"code-example\"><pre class=\"brush: cpp notranslate\"><code><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span> <span class=\"token comment\">// required for malloc definition</span></span>\n\nEMSCRIPTEN_KEEPALIVE\n<span class=\"token keyword\">uint8_t</span><span class=\"token operator\">*</span> <span class=\"token function\">create_buffer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>width <span class=\"token operator\">*</span> height <span class=\"token operator\">*</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint8_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nEMSCRIPTEN_KEEPALIVE\n<span class=\"token keyword\">void</span> <span class=\"token function\">destroy_buffer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint8_t</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>create_buffer()</code> 関数は RGBA 画像用です。したがって、ピクセル当たり 4 バイトのバッファーを確保します。 malloc() が返すポインターは、そのバッファーの最初のメモリーセルのアドレスです。ポインターが JavaScript に返されると、それは単なる数値として扱われます。この関数を cwrap を使って JavaScript に公開した後、その数値を使ってバッファーの開始点を見つけ、画像データをコピーすることができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> api <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">version</span><span class=\"token operator\">:</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">cwrap</span><span class=\"token punctuation\">(</span><span class=\"token string\">'version'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">create_buffer</span><span class=\"token operator\">:</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">cwrap</span><span class=\"token punctuation\">(</span><span class=\"token string\">'create_buffer'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">destroy_buffer</span><span class=\"token operator\">:</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">cwrap</span><span class=\"token punctuation\">(</span><span class=\"token string\">'destroy_buffer'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'number'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">encode</span><span class=\"token operator\">:</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">cwrap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"encode\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">free_result</span><span class=\"token operator\">:</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">cwrap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"free_result\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">get_result_pointer</span><span class=\"token operator\">:</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">cwrap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get_result_pointer\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">get_result_size</span><span class=\"token operator\">:</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">cwrap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get_result_size\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> image <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">loadImage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./image.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">create_buffer</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nModule<span class=\"token punctuation\">.</span><span class=\"token constant\">HEAP8</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ... call encoder ...</span>\napi<span class=\"token punctuation\">.</span><span class=\"token function\">destroy_buffer</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"画像をエンコードする","title":"画像をエンコードする","isH3":true,"content":"<p>wasm で画像を使えるようになりました。いよいよ WebP エンコーダーを呼び出して動かす時が来ました。<a href=\"https://developers.google.com/speed/webp/docs/api#simple_encoding_api\" class=\"external\" rel=\" noopener\">WebP のドキュメント</a>を見ると、<code>WebPEncodeRGBA</code>がふさわしいようです。この関数は、入力画像へのポインターと画像の寸法、そして 0 から 100 の間の品質オプションを受け取ります。また、出力バッファーを確保するので、 WebP 画像の処理が終わったら <code>WebPFree()</code> を使って解放する必要があります。</p>\n<p>エンコード処理の結果は、出力バッファーとその長さになります。C 言語の関数は（メモリーを動的に確保しない限り）返値の型として配列を使うことができないため、この例では静的なグローバル配列を使用しています。これはクリーンな C 言語とは言えないかもしれません。実際、これは wasm ポインターが 32 ビット幅であることに依存しています。しかし、これは話を単純にするための公正な手段です。</p>\n<div class=\"code-example\"><pre class=\"brush: cpp notranslate\"><code><span class=\"token keyword\">int</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nEMSCRIPTEN_KEEPALIVE\n<span class=\"token keyword\">void</span> <span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint8_t</span><span class=\"token operator\">*</span> img_in<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> quality<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">uint8_t</span><span class=\"token operator\">*</span> img_out<span class=\"token punctuation\">;</span>\n  size_t size<span class=\"token punctuation\">;</span>\n\n  size <span class=\"token operator\">=</span> <span class=\"token function\">WebPEncodeRGBA</span><span class=\"token punctuation\">(</span>img_in<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> width <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> quality<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>img_out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>img_out<span class=\"token punctuation\">;</span>\n  result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nEMSCRIPTEN_KEEPALIVE\n<span class=\"token keyword\">void</span> <span class=\"token function\">free_result</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint8_t</span><span class=\"token operator\">*</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">WebPFree</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nEMSCRIPTEN_KEEPALIVE\n<span class=\"token keyword\">int</span> <span class=\"token function\">get_result_pointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nEMSCRIPTEN_KEEPALIVE\n<span class=\"token keyword\">int</span> <span class=\"token function\">get_result_size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これで、エンコーディング関数を呼び出し、ポインターと画像サイズを取得し、それをあなたの JavaScript バッファーに格納し、プロセス中で確保されたすべての wasm バッファーを解放することができるようになりました。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>api<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> resultPointer <span class=\"token operator\">=</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">get_result_pointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> resultSize <span class=\"token operator\">=</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">get_result_size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> resultView <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>Module<span class=\"token punctuation\">.</span><span class=\"token constant\">HEAP8</span><span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">,</span> resultPointer<span class=\"token punctuation\">,</span> resultSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>resultView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napi<span class=\"token punctuation\">.</span><span class=\"token function\">free_result</span><span class=\"token punctuation\">(</span>resultPointer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> <code>new Uint8Array(someBuffer)</code> は同じメモリーチャンク上に新しいビューを作成し、 <code>new Uint8Array(someTypedArray)</code> はデータをコピーします。</p>\n</div>\n<p>画像のサイズによっては、 wasm が入力画像と出力画像を格納するためのメモリーを十分に大きくすることができないというエラーが発生する可能性があります。</p>\n<p>\n  <img src=\"/en-US/docs/WebAssembly/existing_C_to_wasm/error.png\" alt=\"Screenshot of the DevTools console showing an error.\" width=\"1024\" height=\"132\" loading=\"lazy\">\n</p>\n<p>幸いにも、この問題の解決策はエラーメッセージの中にあります。コンパイルコマンドに <code>-s ALLOW_MEMORY_GROWTH=1</code> を追加するだけです。</p>\n<p>これで完了です。 WebP エンコーダーをコンパイルし、 JPEG 画像を WebP にトランスコードしました。うまくいったことを証明するために、結果のバッファーを blob にして<code>&lt;img&gt;</code>要素で使用してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'image/webp'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> blobURL <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> img <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nimg<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> blobURL<span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>見よ、新しい WebP 画像の栄光を。</p>\n<p><a href=\"https://googlechrome.github.io/samples/webassembly/image.html\" class=\"external\" rel=\" noopener\">デモ</a> | <a href=\"https://web.dev/emscripting-a-c-library/\" class=\"external\" rel=\" noopener\">原著</a></p>\n<p>\n  <img src=\"/en-US/docs/WebAssembly/existing_C_to_wasm/result.jpg\" alt=\" デベロッパーツールのネットワークパネルと生成された画像。\" width=\"1024\" height=\"540\" loading=\"lazy\">\n</p>"}}],"toc":[],"summary":"WebAssembly の主な用途は、既存の C ライブラリーのエコシステムを取得し、開発者がウェブ上でそれらを利用できるようにすることです。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Compiling an Existing C Module to WebAssembly","locale":"en-US","native":"English (US)"},{"title":"Compiling an Existing C Module to WebAssembly","locale":"ko","native":"한국어"}],"source":{"folder":"ja/webassembly/existing_c_to_wasm","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/webassembly/existing_c_to_wasm/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/WebAssembly","title":"WebAssembly"},{"uri":"/ja/docs/WebAssembly/existing_C_to_wasm","title":"既存の C モジュールから WebAssembly へのコンパイル"}],"pageTitle":"既存の C モジュールから WebAssembly へのコンパイル - WebAssembly | MDN","noIndexing":false}}