{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Primitive (プリミティブ)","mdn_url":"/ja/docs/Glossary/Primitive","locale":"ja","native":"日本語","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/ja/docs/Glossary/JavaScript\">JavaScript</a> において、<strong>プリミティブ</strong> (primitive、プリミティブ値、プリミティブデータ型) は<a href=\"/ja/docs/Glossary/Object\">オブジェクト</a>でなく、<a href=\"/ja/docs/Glossary/Method\">メソッド</a>を持たないデータのことです。 6 種類のプリミティブデータ型があります。<a href=\"/ja/docs/Glossary/String\">文字列</a>、<a href=\"/ja/docs/Glossary/Number\">数値</a>、<a href=\"/ja/docs/Glossary/BigInt\">BigInt</a>、<a href=\"/ja/docs/Glossary/Boolean\">真偽値</a>、<a href=\"/ja/docs/Glossary/undefined\">undefined</a>、そして<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">シンボル</a> (<a href=\"/ja/docs/Glossary/ECMAScript\">ECMAScript</a> 2016 で追加) です。また、プリミティブに見える <a href=\"/ja/docs/Glossary/Null\">null</a> もありますが、実際にはすべての <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> の特殊なケースです。そして、構造化された型はすべてプロトタイプチェーンによって <code>null</code> から派生しています。</p>\n<p>多くの場合、プリミティブ値は、その言語実装の最下層にて直接的に表現されます。</p>\n<p>すべてのプリミティブ値は、<strong>イミュータブル</strong> (immutable) 、つまり変更できません。変数には新しい値を再割り当てすることができますが、既存の値については、オブジェクト、配列、関数が変更できるのに対して、プリミティブ値は変更することができません。</p>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":"<p>この例は、プリミティブ値が<strong>変更不可</strong>である事実を理解するために役立つでしょう。</p>"}},{"type":"prose","value":{"id":"javascript","title":"JavaScript","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 文字列のメソッドを使用しても文字列は変更されない</span>\n<span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token string\">\"baz\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// baz</span>\nbar<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// baz</span>\n\n<span class=\"token comment\">// 配列のメソッドを使用すると配列が変更される</span>\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// []</span>\nfoo<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"plugh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// [\"plugh\"]</span>\n\n<span class=\"token comment\">// プリミティブ値を代入することで新しい (変更されたわけではない) 値になる</span>\nbar <span class=\"token operator\">=</span> bar<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// BAZ</span>\n</code></pre></div>\n<p>プリミティブ値は置き換えることができますが、直接変更することはできません。</p>"}},{"type":"prose","value":{"id":"他の例_手順を追って_","title":"他の例 [ 手順を追って ]","isH3":false,"content":"<p>以下の例は JavaScript がプリミティブ値をどのように扱うかを概観するのに役立つでしょう。</p>"}},{"type":"prose","value":{"id":"javascript_2","title":"JavaScript","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// プリミティブ値</span>\n<span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// プリミティブ値を変更する関数を定義</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">addTwo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   num <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 同じことをしようとする第二の関数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">addTwo_v2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">foo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   foo <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 最初の関数を、プリミティブ値を引数として呼び出す</span>\n<span class=\"token function\">addTwo</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 現在のプリミティブ値を取得</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 5</span>\n\n<span class=\"token comment\">// 第二の関数を呼び出してみる...</span>\n<span class=\"token function\">addTwo_v2</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 5</span>\n</code></pre></div>\n<p><code>5</code> ではなく <code>7</code> になると思いませんでしたか？そう思った場合は、このコードがどのように実行されるかを見てください。</p>\n<ul>\n  <li><code>addTwo</code> および <code>addTwo_v2</code> の両関数の呼び出しにおいて、 JavaScript は <code>foo</code> 識別子の値を探します。最初の文で確立された変数が見つかります。</li>\n  <li>見つかったら、式が評価されて <code>foo</code> が 5 で置き換えられ、 JavaScript エンジンはその値を関数に引数として渡します。</li>\n  <li>関数本体の中の文を実行する前に、 <strong>JavaScript は渡された引数のコピーを取り</strong> (すなわちプリミティブ値)、ローカルのコピーを生成します。これらのコピーは、関数のスコープの中でしか存在せず、関数定義の中で指定された識別子でアクセスすることができます (<code>addTwo</code> では <code>num</code>、 <code>addTwo_v2</code> では <code>foo</code>)</li>\n  <li>それから関数内の文が実行されます。\n    <ul>\n      <li>最初の関数では、ローカル変数 <code>num</code> が生成されます。この値を 2 つ増加させますが、元の <code>foo</code> の値ではありません。</li>\n      <li>二番目の関数では、ローカル変数 <code>foo</code> が生成されます。この値を 2 つ増加させますが、元の (外部の) <code>foo</code> の値ではありません。このような場合、外部変数 <code>foo</code> は直接アクセスすることができません。これは JavaScript の語彙スコープであり、結果的に変数を見えなくするためです。ローカルの <code>foo</code> が外側の <code>foo</code> を隠します。詳しくは、<a href=\"/ja/docs/Web/JavaScript/Closures\">クロージャー</a>をご覧ください。 (なお、 <code>window.foo</code> を使用して外部変数 <code>foo</code> へアクセスすることができます。)</li>\n    </ul>\n  </li>\n  <li>結果として、関数内で変更を行っても<strong>コピー</strong>に対して作業をすることになるので、元の <code>foo</code> にはまったく影響<strong>しません</strong>。</li>\n</ul>\n<p>これが、プリミティブ値が変更不可である理由です - 直接作業するのではなく、<em>元の値に影響せずにコピーで</em>作業しています。</p>"}},{"type":"prose","value":{"id":"javascript_のプリミティブラッパーオブジェクト","title":"JavaScript のプリミティブラッパーオブジェクト","isH3":false,"content":"<p><code>null</code> と <code>undefined</code> を除くすべてのプリミティブ値には、そのプリミティブ値を内包する等価のラッパーオブジェクトがあります。</p>\n<ul>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a>: 文字列プリミティブ用。</li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>: 数値プリミティブ用</li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a>: 巨大整数プリミティブ用。</li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a>: <a href=\"/ja/docs/Glossary/Boolean\">真偽値</a>プリミティブ用。</li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a>: <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">シンボル</a>プリミティブ用。</li>\n</ul>\n<p>ラッパーの <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>valueOf()</code></a> メソッドは、そのプリミティブ値を返します。</p>"}},{"type":"prose","value":{"id":"詳細情報","title":"詳細情報","isH3":false,"content":""}},{"type":"prose","value":{"id":"基礎知識","title":"基礎知識","isH3":true,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/JavaScript/Data_structures\">JavaScript のデータ構造</a></li>\n  <li>Wikipedia の <a title=\"プリミティブ型\" href=\"https://ja.wikipedia.org/wiki/プリミティブ型\" class=\"external\" rel=\" noopener\">プリミティブ型</a> の記事</li>\n</ul>\n<ol>\n  <li><a href=\"/ja/docs/Glossary\">用語集</a>\n    <ol>\n      <li><a href=\"/ja/docs/Glossary/JavaScript\">JavaScript</a></li>\n      <li><a href=\"/ja/docs/Glossary/String\">文字列</a></li>\n      <li><a href=\"/ja/docs/Glossary/Number\">number</a></li>\n      <li><a href=\"/ja/docs/Glossary/BigInt\">bigint</a></li>\n      <li><a href=\"/ja/docs/Glossary/Boolean\">boolean</a></li>\n      <li><a href=\"/ja/docs/Glossary/Null\">null</a></li>\n      <li><a href=\"/ja/docs/Glossary/undefined\">undefined</a></li>\n      <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">symbol</a></li>\n    </ol>\n  </li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Data_structures\">JavaScript のデータ型</a></li>\n</ol>"}}],"toc":[{"text":"例","id":"例"},{"text":"他の例 [ 手順を追って ]","id":"他の例_手順を追って_"},{"text":"JavaScript のプリミティブラッパーオブジェクト","id":"javascript_のプリミティブラッパーオブジェクト"},{"text":"詳細情報","id":"詳細情報"}],"summary":"JavaScript において、プリミティブ (primitive、プリミティブ値、プリミティブデータ型) はオブジェクトでなく、メソッドを持たないデータのことです。 6 種類のプリミティブデータ型があります。文字列、数値、BigInt、真偽値、undefined、そしてシンボル (ECMAScript 2016 で追加) です。また、プリミティブに見える null もありますが、実際にはすべての Object の特殊なケースです。そして、構造化された型はすべてプロトタイプチェーンによって null から派生しています。","popularity":0.0005,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Primitive","locale":"en-US","native":"English (US)"},{"title":"Primitivo","locale":"es","native":"Español"},{"title":"Primitive","locale":"fr","native":"Français"},{"title":"원시 값","locale":"ko","native":"한국어"},{"title":"Primitivo","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Primitive","locale":"ru","native":"Русский"},{"title":"基本类型","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/glossary/primitive","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/glossary/primitive/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Glossary","title":"MDN Web Docs 用語集: ウェブ関連用語の定義"},{"uri":"/ja/docs/Glossary/Primitive","title":"Primitive (プリミティブ)"}],"pageTitle":"Primitive (プリミティブ) - MDN Web Docs 用語集: ウェブ関連用語の定義 | MDN","noIndexing":false}}