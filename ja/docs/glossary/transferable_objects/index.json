{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Transferable objects (移譲可能オブジェクト)","mdn_url":"/ja/docs/Glossary/Transferable_objects","locale":"ja","native":"日本語","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>\n  <strong>移譲可能オブジェクト</strong> は、あるコンテキストから別のコンテキストへ _移譲_することができるリソースを自分自身で所有するオブジェクトで、そのリソースが一度に1つのコンテキストでのみ利用できることを保証するものです。\n  移譲が終わると、元のオブジェクトはもう使えません。移譲されたリソースをもう指しておらず、オブジェクトの読み書きをしようとすると例外が発生します。\n</p>\n<p>\n  移譲可能なオブジェクトは一般的に、一度に単一のJavaScriptスレッドにしか安全に公開されないリソースを共有するために使用されます。\n  例えば、<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> はメモリーブロックを自分自身で所有する移譲可能なオブジェクトです。\n  このようなバッファーがスレッド間で転送されるとき、関連するメモリーリソースは元のバッファーから切り離され、新しいスレッドで作成されたバッファーオブジェクトに装着されます。\n  元のスレッドのバッファーオブジェクトは、もはやメモリリソースを所有していないため、使用できなくなります。\n</p>\n<p>\n  移譲は <a href=\"/ja/docs/Web/API/structuredClone\"><code>structuredClone()</code></a> でオブジェクトのディープコピーを作成するときにも使用されるかもしれません。\n  複製操作の後に、移譲されたリソースは、コピーされたオブジェクトにコピーされるのではなく、移動されます。\n</p>\n<p>\n  オブジェクトのリソースを移譲するために使用されるメカニズムは、オブジェクトに依存します。\n  例えば、 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> がスレッド間で移譲されるとき、それが指すメモリーリソースは高速で効率の良いゼロコピー操作により、文字通りコンテキスト間で移動されます。\n  他にも、関連するリソースをコピーして、古いコンテキストから削除することで、オブジェクトを移譲することができる場合もあります。\n</p>\n<p>\n  すべてのオブジェクトが移譲可能なわけではありません。\n  移譲可能なオブジェクトの一覧は<a href=\"#%E5%AF%BE%E5%BF%9C%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88\">下記の通りです</a>。\n</p>"}},{"type":"prose","value":{"id":"オブジェクトのスレッド間の移譲","title":"オブジェクトのスレッド間の移譲","isH3":false,"content":"<p>\n  以下のコードは、メインスレッドから <a href=\"/ja/docs/Web/API/Web_Workers_API\" title=\"ウェブワーカースレッド\">ウェブワーカースレッド</a> にメッセージを送信する際に、転送がどのように動作するのかを示しています。\n  <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a> は、バッファーが移譲されている間、ワーカー内でコピーされます（複製されます）。\n  転送後、メインスレッドから <code>uInt8Array</code> を読み書きしようとするとエラーが発生しますが、<code>byteLength</code> を調べるとゼロになったことが確認できます。\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 8MB の \"file\" を作成して中身を埋めます。 8MB = 1024 * 1024 * 8 B</span>\n<span class=\"token keyword\">const</span> uInt8Array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>uInt8Array<span class=\"token punctuation\">.</span>byteLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 8388608</span>\n\n<span class=\"token comment\">// 下層のバッファーからワーカーに移譲する</span>\nworker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>uInt8Array<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>uInt8Array<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>uInt8Array<span class=\"token punctuation\">.</span>byteLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect1\">\n  <p>\n    <strong>Note:</strong> <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">型付き配列</a> <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a> や <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a> は<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Glossary/Serializable_object\">シリアライズ可能 <small>(en-US)</small></a>ですが、転送は行えません。\n    しかし、その下にあるバッファーは <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> であり、これは移譲可能なオブジェクトです。\n    data 引数に <code>uInt8Array.buffer</code> を設定しても、転送配列に <code>uInt8Array</code> を保有しなくても、送ることができます。\n  </p>\n</div>"}},{"type":"prose","value":{"id":"複製操作中の移譲について","title":"複製操作中の移譲について","isH3":true,"content":"<p>以下のコードは、 <a href=\"/ja/docs/Web/API/structuredClone\"><code>structuredClone()</code></a> 操作で、基礎となるバッファーが元のオブジェクトから複製にコピーされる様子を示しています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> original <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> clone <span class=\"token operator\">=</span> <span class=\"token function\">structuredClone</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">.</span>byteLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1024</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>clone<span class=\"token punctuation\">.</span>byteLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1024</span>\n\noriginal<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>clone<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n\n<span class=\"token comment\">// Uint8Array を移譲すると、移譲可能なオブジェクトではないため、例外が発生します。</span>\n<span class=\"token comment\">// const transferred = structuredClone(original, {transfer: [original]});</span>\n\n<span class=\"token comment\">// Uint8Array.buffer ならば移譲できます。</span>\n<span class=\"token keyword\">const</span> transferred <span class=\"token operator\">=</span> <span class=\"token function\">structuredClone</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">transfer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>original<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>transferred<span class=\"token punctuation\">.</span>byteLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1024</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>transferred<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n\n<span class=\"token comment\">// Uint8Array.buffer は移譲した後は使用することができません。</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">.</span>byteLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"対応しているオブジェクト","title":"対応しているオブジェクト","isH3":false,"content":"<p>各種仕様書が示す委譲可能な項目は以下の通りです。</p>\n<ul>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a></li>\n  <li><a href=\"/ja/docs/Web/API/MessagePort\"><code>MessagePort</code></a></li>\n  <li><a href=\"/ja/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a></li>\n  <li><a href=\"/ja/docs/Web/API/WritableStream\"><code>WritableStream</code></a></li>\n  <li><a href=\"/ja/docs/Web/API/TransformStream\"><code>TransformStream</code></a></li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioData\"><code>AudioData</code> <small>(en-US)</small></a></li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ImageBitmap\"><code>ImageBitmap</code> <small>(en-US)</small></a></li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VideoFrame\"><code>VideoFrame</code> <small>(en-US)</small></a></li>\n  <li><a href=\"/ja/docs/Web/API/OffscreenCanvas\"><code>OffscreenCanvas</code></a></li>\n  <li><a href=\"/ja/docs/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a></li>\n</ul>\n<p>\n  ブラウザーの対応は、それぞれのオブジェクトの互換性情報の <code>transferable</code> サブ機能で示す必要があります（例として <a href=\"/ja/docs/Web/API/RTCDataChannel#%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%83%BC%E3%81%AE%E4%BA%92%E6%8F%9B%E6%80%A7\"><code>RTCDataChannel</code></a> を参照してください）。\n  この記事を書いている時点では、すべての移譲可能なオブジェクトがこの情報に更新されているわけではありません。\n</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> 移譲可能なオブジェクトは <a href=\"https://github.com/w3c/webref/tree/main/ed/idl\" class=\"external\" rel=\" noopener\">Web IDL ファイル</a> の中で <code>[Transferable]</code> という属性でマークアップされます。</p>\n</div>"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"https://developer.chrome.com/blog/transferable-objects-lightning-fast/\" class=\"external\" rel=\" noopener\">Transferable Objects: Lightning Fast!</a></li>\n  <li><a href=\"/ja/docs/Web/API/Web_Workers_API/Using_web_workers\">ウェブワーカーの使用</a></li>\n  <li><a href=\"https://html.spec.whatwg.org/multipage/structured-data.html#transferable-objects\" class=\"external\" rel=\" noopener\">Transferable objects in the HTML specification</a></li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DedicatedWorkerGlobalScope/postMessage\"><code>DedicatedWorkerGlobalScope.postMessage()</code> <small>(en-US)</small></a></li>\n</ul>"}}],"toc":[{"text":"オブジェクトのスレッド間の移譲","id":"オブジェクトのスレッド間の移譲"},{"text":"対応しているオブジェクト","id":"対応しているオブジェクト"},{"text":"関連情報","id":"関連情報"}],"summary":"移譲可能オブジェクト は、あるコンテキストから別のコンテキストへ _移譲_することができるリソースを自分自身で所有するオブジェクトで、そのリソースが一度に1つのコンテキストでのみ利用できることを保証するものです。\n  移譲が終わると、元のオブジェクトはもう使えません。移譲されたリソースをもう指しておらず、オブジェクトの読み書きをしようとすると例外が発生します。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Transferable objects","locale":"en-US","native":"English (US)"}],"source":{"folder":"ja/glossary/transferable_objects","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/glossary/transferable_objects/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Glossary","title":"MDN Web Docs 用語集: ウェブ関連用語の定義"},{"uri":"/ja/docs/Glossary/Transferable_objects","title":"Transferable objects (移譲可能オブジェクト)"}],"pageTitle":"Transferable objects (移譲可能オブジェクト) - MDN Web Docs 用語集: ウェブ関連用語の定義 | MDN","noIndexing":false}}