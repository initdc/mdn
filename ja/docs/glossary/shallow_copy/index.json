{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Shallow copy (シャローコピー)","mdn_url":"/ja/docs/Glossary/Shallow_copy","locale":"ja","native":"日本語","sidebarHTML":"\n  <ol>\n    <li><a href=\"/ja/docs/MDN/About\">MDN について</a></li>\n    <li class=\"toggle\">\n        <details>\n            <summary>MDN の改善に貢献する</summary>\n            <ol>\n                <li><a href=\"/ja/docs/MDN/Contribute/Getting_started\">MDN を始めよう</a></li>\n                <li><a href=\"/ja/docs/MDN/Contribute\">MDN の改善に貢献する</a></li>\n                <li><a href=\"/ja/docs/MDN/Contribute/Howto\">あなたにできること</a></li>\n                <li><a href=\"/ja/docs/MDN/Contribute/Localize\">MDN でのローカライズ</a></li>\n                <li><a href=\"/ja/docs/MDN/Guidelines\">Guidelines</a></li>\n                <li><a href=\"/ja/docs/MDN/Structures\">文書の構造</a></li>\n             </ol>\n        </details>\n    </li>\n  </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>オブジェクトの<strong>シャローコピー</strong>とは、コピーがコピー元のオブジェクトとプロパティにおいて同じ参照を共有する（同じ基礎値を指す）コピーのことを指します。その結果、コピー元とコピー先のどちらかを変更すると、もう一方のオブジェクトも変更される可能性があります。そのため、意図せずにコピー元やコピー先に予期しない変更が発生してしまう可能性があります。この挙動は、ソースとコピーが完全に独立している<a href=\"/ja/docs/Glossary/Deep_copy\">ディープコピー</a>の挙動とは対照的です。</p>\n<p>シャローコピーでは、オブジェクトの既存の要素にある共有プロパティの値を選択的に変更することは、既存の要素に完全に新しい値を割り当てることとは異なるということを理解することが重要です。</p>\n<p>例えば、配列オブジェクトの <code>copy</code> という名前のシャローコピーにおいて、 <code>copy[0]</code> 要素の値が <code>{\"list\":[\"butter\",\"flour\"]}</code> であるとき、 <code>copy[0].list = [\"oil\",\"flour\"]</code> を実行すると、元のオブジェクト内の対応する要素も変化します。これは、元のオブジェクトとシャローコピーの両方で共有しているオブジェクトのプロパティを選択的に変更したためです。</p>\n<p>しかし、代わりに <code>copy[0] = {\"list\":[\"oil\",\"flour\"]}</code> とすると、元のオブジェクト内の対応する要素は<strong>変化しません</strong>。それはこの場合、シャローコピーが元のオブジェクトと共有している既存の配列要素のプロパティを選択的に変更するのではなく、シャローコピー側にだけ、 <code>copy[0]</code> の配列要素に全く新しい値を割り当てていることになるからです。</p>\n<p>JavaScript では、すべての標準組込みオブジェクトのコピー操作（<a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">スプレッド構文</a>, <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\"><code>Array.prototype.concat()</code></a>, <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\"><code>Array.prototype.slice()</code></a>, <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/from\"><code>Array.from()</code></a>, <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"><code>Object.assign()</code></a>, <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/create\"><code>Object.create()</code></a>）において、ディープコピーではなくシャローコピーを生成します。</p>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":"<p>次の例では、配列オブジェクト <code>ingredients_list</code> を作成し、その <code>ingredients_list</code> オブジェクトをコピーして <code>ingredients_list_copy</code> オブジェクトを作成する場合を考えてみましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> ingredients_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"noodles\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">list</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"eggs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"flour\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"water\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> ingredients_list_copy <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>ingredients_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>ingredients_list_copy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"noodles\",{\"list\":[\"eggs\",\"flour\",\"water\"]}]</span>\n</code></pre></div>\n<p><code>ingredients_list_copy</code> の <code>list</code> プロパティの値を変更すると、 <code>ingredients_list</code> 元のオブジェクト内の <code>list</code> プロパティも変更されます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>ingredients_list_copy<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"rice flour\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"water\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ingredients_list<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Array [ \"rice flour\", \"water\" ]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>ingredients_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"noodles\",{\"list\":[\"rice flour\",\"water\"]}]</span>\n</code></pre></div>\n<p><code>ingredients_list_copy</code> の最初の要素に完全に新しい値を代入しても、 <code>ingredients_list</code> ソースオブジェクト内の最初の要素には何の変更も発生しません。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>ingredients_list_copy<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"rice noodles\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ingredients_list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// noodles</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>ingredients_list_copy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"rice noodles\",{\"list\":[\"rice flour\",\"water\"]}]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>ingredients_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"noodles\",{\"list\":[\"rice flour\",\"water\"]}]</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Glossary/Deep_copy\">ディープコピー</a></li>\n</ul>"}}],"toc":[{"text":"例","id":"例"},{"text":"関連情報","id":"関連情報"}],"summary":"オブジェクトのシャローコピーとは、コピーがコピー元のオブジェクトとプロパティにおいて同じ参照を共有する（同じ基礎値を指す）コピーのことを指します。その結果、コピー元とコピー先のどちらかを変更すると、もう一方のオブジェクトも変更される可能性があります。そのため、意図せずにコピー元やコピー先に予期しない変更が発生してしまう可能性があります。この挙動は、ソースとコピーが完全に独立しているディープコピーの挙動とは対照的です。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Shallow copy","locale":"en-US","native":"English (US)"}],"source":{"folder":"ja/glossary/shallow_copy","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/glossary/shallow_copy/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Glossary","title":"MDN Web Docs 用語集: ウェブ関連用語の定義"},{"uri":"/ja/docs/Glossary/Shallow_copy","title":"Shallow copy (シャローコピー)"}],"pageTitle":"Shallow copy (シャローコピー) - MDN Web Docs 用語集: ウェブ関連用語の定義 | MDN","noIndexing":false}}