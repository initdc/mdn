{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Hoisting (巻き上げ、ホイスティング)","mdn_url":"/ja/docs/Glossary/Hoisting","locale":"ja","native":"日本語","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>巻き上げ (Hoisting) は、<a href=\"https://www.ecma-international.org/ecma-262/6.0/index.html\" class=\"external\" rel=\" noopener\">ECMAScript® 2015 言語仕様</a>より前には、どんな規範的な仕様書にもなかったものです。巻き上げは JavaScript の実行コンテキスト (特に作成と実行のフェーズで) では一般的な方法と考えられていました。しかし、巻き上げの概念は誤解に繋がる可能性があります。</p>\n<p>概念的には、例えば、厳密な定義では、変数や関数の宣言が物理的にコードの先頭に移動されることを示唆していますが、実際にはそうではありません。変数や関数の宣言は<em>コンパイル</em>時にメモリに格納されますが、コード内で入力された場所は変わりません。</p>"}},{"type":"prose","value":{"id":"詳細情報","title":"詳細情報","isH3":false,"content":""}},{"type":"prose","value":{"id":"技術的な例","title":"技術的な例","isH3":true,"content":"<p>JavaScript で関数宣言がコード領域を実行する前にメモリーに配置される利点は、コードで関数を定義する前に使うことができることです。例えば:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">catName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"My cat's name is \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">catName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tiger\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n上記のコードの結果: \"My cat's name is Tiger\"\n*/</span>\n</code></pre></div>\n<p>上記のコード断片はコードが動作するように書いたよう期待する方法です。今度は、関数を書く前に関数を呼び出したらどうでしょう。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">catName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Chloe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">catName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"My cat's name is \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*\n上記のコードの結果は: \"My cat's name is Chloe\"\n*/</span>\n</code></pre></div>\n<p>コード内で関数を書く前に、関数呼び出しを最初に書いても、コードは動作します。これは JavaScript でコンテキスト実行が動作するためです。</p>\n<p>巻き上げはその他のデータ型や変数でも同様に動作します。変数は定義の前に初期化して使うことができます。しかし初期化しないと使うことができません。</p>"}},{"type":"prose","value":{"id":"定義のみが巻き上げられる","title":"定義のみが巻き上げられる","isH3":true,"content":"<p>JavaScript では定義のみが巻き上げられ、初期化はそうでありません。変数が使用された後に定義や初期化された場合、値は undefined になります。例えば次のようになります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined を返す。宣言のみが巻き上げられ、この段階では初期化が行われないため</span>\n<span class=\"token keyword\">var</span> num<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 宣言</span>\nnum <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初期化</span>\n</code></pre></div>\n<p>以下の例では初期化のみが行われています。巻き上げが行われませんので、変数を読み取ろうとすると ReferenceError 例外が発生します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError 例外が発生</span>\nnum <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初期化</span>\n</code></pre></div>\n<p>巻き上げの例をもっと示します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 例 1</span>\n<span class=\"token comment\">// y のみが巻き上げられる</span>\n\nx <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// x を初期化し、まだ定義されていない場合は、定義する - ただし、文中に var がないので巻き上げは行われない。</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '1 undefined'</span>\n<span class=\"token comment\">// JavaScript は宣言のみを巻き上げるので、 y の値の表示はこうなる。</span>\n<span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// y の宣言と初期化</span>\n\n\n<span class=\"token comment\">// 例 2</span>\n<span class=\"token comment\">// 巻き上げは行われないが、初期化は (まだ宣言されていない場合は) 宣言も行うので、変数は利用できる。</span>\n\na <span class=\"token operator\">=</span> <span class=\"token string\">'Cran'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Initialize a</span>\nb <span class=\"token operator\">=</span> <span class=\"token string\">'berry'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Initialize b</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Cranberry'</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"技術リファレンス","title":"技術リファレンス","isH3":true,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/var\">var 宣言</a> — MDN</li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/function\">関数 宣言</a> — MDN</li>\n</ul>"}}],"toc":[{"text":"詳細情報","id":"詳細情報"}],"summary":"巻き上げ (Hoisting) は、ECMAScript® 2015 言語仕様より前には、どんな規範的な仕様書にもなかったものです。巻き上げは JavaScript の実行コンテキスト (特に作成と実行のフェーズで) では一般的な方法と考えられていました。しかし、巻き上げの概念は誤解に繋がる可能性があります。","popularity":0.0003,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Hoisting","locale":"en-US","native":"English (US)"},{"title":"Hoisting","locale":"es","native":"Español"},{"title":"Hoisting","locale":"fr","native":"Français"},{"title":"호이스팅","locale":"ko","native":"한국어"},{"title":"Hoisting","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Поднятие","locale":"ru","native":"Русский"},{"title":"Hoisting（变量提升）","locale":"zh-CN","native":"中文 (简体)"},{"title":"提升（Hoisting）","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ja/glossary/hoisting","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/glossary/hoisting/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Glossary","title":"MDN Web Docs 用語集: ウェブ関連用語の定義"},{"uri":"/ja/docs/Glossary/Hoisting","title":"Hoisting (巻き上げ、ホイスティング)"}],"pageTitle":"Hoisting (巻き上げ、ホイスティング) - MDN Web Docs 用語集: ウェブ関連用語の定義 | MDN","noIndexing":false}}