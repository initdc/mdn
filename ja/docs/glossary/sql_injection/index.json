{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"SQL Injection (SQLインジェクション)","mdn_url":"/ja/docs/Glossary/SQL_Injection","locale":"ja","native":"日本語","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>SQL インジェクションはユーザーからの入力の検証が十分でない・行っていないウェブアプリケーションに対して利用されます。悪意のあるクラッカーは、SQL コマンドをウェブアプリケーションに渡し、バックエンドのデータベースにそれを実行させて攻撃します。</p>\n<p>SQL インジェクションはデータベースへの不正アクセスを行ったり、データベースから直接情報を取得することが可能です。多くのデータ侵害は SQL インジェクションによるものです。</p>\n<p><a href=\"http://www.acunetix.com/wp-content/uploads/2010/09/sql_inj_xss.gif\" class=\"external\" rel=\" noopener\"><img src=\"/en-US/docs/Glossary/SQL_Injection/sql_inj_xss.gif\" alt=\"\" width=\"500\" height=\"275\" loading=\"lazy\"></a></p>"}},{"type":"prose","value":{"id":"攻撃動作","title":"攻撃動作","isH3":false,"content":"<p>\n  <img src=\"/en-US/docs/Glossary/SQL_Injection/updates_loginscreen.png\" alt=\"\" width=\"293\" height=\"309\" loading=\"lazy\">\n</p>\n<p>Username と Password を入力した後、GUI の裏では次の SQL クエリが実行されます。</p>\n<pre class=\"notranslate\">\"SELECT Count(*) FROM Users WHERE Username=' \" + txt.User.Text+\" ' AND Password=' \"+ txt.Password.Text+\" ' \";\n</pre>\n<p>例えばユーザーが Username に\"admin\"、Password に\"passwd123\"を入力し、Log in ボタンをクリックします。すると以下の SQL クエリが実行されます。</p>\n<pre class=\"notranslate\">\"SELECT Count(*) FROM Users WHERE Username=' admin ' AND Password=' passwd123 ' \";\n</pre>\n<p>入力した認証情報が正しければユーザーはログインが許可されます。このようにとてもシンプル(にして脆弱)な構造です。攻撃者はこの脆弱な構造を使って不正アクセスを行います。</p>\n<p>攻撃者は下記のようなシンプルな魔法の文字列を入力します。</p>\n<p><strong>Username: <em>admin</em></strong></p>\n<p><strong>Password: <em>anything 'or'1'='1</em></strong></p>\n<p>そして log in ボタンをクリックすると、以下の SQL クエリが実行されます。</p>\n<pre class=\"notranslate\">\"SELECT Count(*) FROM Users WHERE Username=' admin ' AND Password=' anything 'or'1'='1 ' \";\n</pre>\n<p>上記のクエリの Password 部分をよく見てみましょう。</p>\n<pre class=\"notranslate\">Password=' anything 'or'1'='1 '\n</pre>\n<p>パスワードは\"anything\"ではないので、Password='anything'の結果は偽になります。ですが'1'='1'は真になります。そして OR 演算子によって、(偽 OR 真)は真になります。結果としてうまく認証を回避できてしまいました。このような単純な文字列(魔法の文字列)によって、データベース全体が危険にさらされます。</p>"}},{"type":"prose","value":{"id":"対策","title":"対策","isH3":false,"content":"<p>ユーザーの入力から SQL クエリを実行する前に、ユーザーの入力に以下のような変更を加えてみましょう。</p>\n<pre class=\"notranslate\">$id = $_GET['id']\n\n(1) $id = stripslashes($id)\n\n(2) $id = mysql_real_escape_string($id)\n</pre>\n<p>(1) によって、入力文字内のシングルクォート (') はダブルクォート (\")に置換されて、(2) によって、すべての (') の前に (/)が追加されます。改訂された魔法の文字列は、認証回避に失敗して、データベースは安全なままに保たれています。</p>"}},{"type":"prose","value":{"id":"関連項目","title":"関連項目","isH3":false,"content":""}},{"type":"prose","value":{"id":"一般知識","title":"一般知識","isH3":true,"content":"<ul>\n  <li>Wikipedia の <a title=\"SQL injection\" href=\"https://ja.wikipedia.org/wiki/SQL_injection\" class=\"external\" rel=\" noopener\">SQL injection</a></li>\n  <li><a href=\"https://www.owasp.org/index.php/SQL_Injection\" class=\"external\" rel=\" noopener\">Explanation of SQL injection</a> on OWASP (Open Web Application Security Project)</li>\n</ul>"}}],"toc":[{"text":"攻撃動作","id":"攻撃動作"},{"text":"対策","id":"対策"},{"text":"関連項目","id":"関連項目"}],"summary":"SQL インジェクションはユーザーからの入力の検証が十分でない・行っていないウェブアプリケーションに対して利用されます。悪意のあるクラッカーは、SQL コマンドをウェブアプリケーションに渡し、バックエンドのデータベースにそれを実行させて攻撃します。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"SQL Injection","locale":"en-US","native":"English (US)"},{"title":"Injection SQL","locale":"fr","native":"Français"},{"title":"SQL 注入","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ja/glossary/sql_injection","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/glossary/sql_injection/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Glossary","title":"MDN Web Docs 用語集: ウェブ関連用語の定義"},{"uri":"/ja/docs/Glossary/SQL_Injection","title":"SQL Injection (SQLインジェクション)"}],"pageTitle":"SQL Injection (SQLインジェクション) - MDN Web Docs 用語集: ウェブ関連用語の定義 | MDN","noIndexing":false}}