{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"ローカルにテスト用サーバーを用意するには？","mdn_url":"/ja/docs/Learn/Common_questions/set_up_a_local_testing_server","locale":"ja","native":"日本語","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>この記事では、マシン上に簡単なローカルテストサーバーを設定する方法と、その使い方の基本について説明します。</p>\n<table>\n  <tbody>\n    <tr>\n      <th scope=\"row\">前提条件:</th>\n      <td><a href=\"/ja/docs/Learn/Common_questions/How_does_the_Internet_work\">インターネットの仕組み</a>および<a href=\"/ja/docs/Learn/Common_questions/What_is_a_web_server\">ウェブサーバーとは何かを</a>知っておく必要があります。</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">目標:</th>\n      <td>ローカルのテストサーバーを設定する方法を学習します。</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"ローカルファイルとリモートファイル","title":"ローカルファイルとリモートファイル","isH3":false,"content":"<p>ほとんどの学習領域では、ブラウザーでサンプルを直接開くだけで済みます。 HTML ファイルをダブルクリックするか、ブラウザーウィンドウにドラッグ＆ドロップするか、ファイル &gt; 開く...を選択して HTML ファイルを選択するなどです。これを達成する方法はたくさんあります。</p>\n<p>ウェブアドレスのパスが <code>file://</code> で始まり、その後にローカルハードドライブのファイルへのパスが続く場合、ローカルファイルが使用されています。対照的に、 GitHub でホストされている例 (または他のリモートサーバーの例) を見ると、ウェブアドレスは <code>http://</code> または <code>https://</code> で始まっており、ファイルが HTTP 経由で受信されたことを示します。</p>"}},{"type":"prose","value":{"id":"ローカルファイルのテストに関する問題","title":"ローカルファイルのテストに関する問題","isH3":false,"content":"<p>一部のサンプルはローカルファイルとして開くと実行されません。これにはさまざまな理由があります。最も可能性が高いのは、</p>\n<ul>\n  <li><strong>非同期リクエストを特徴としている</strong>。 一部のブラウザー (Chrome を含む) は、ローカルファイルからサンプルを実行するだけでは非同期リクエストは実行しません (<a href=\"/ja/docs/Learn/JavaScript/Client-side_web_APIs/Fetching_data\">サーバーからのデータの取得</a>を参照)。これはセキュリティ上の制限があるためです (ウェブセキュリティの詳細については、<a href=\"/ja/docs/Learn/Server-side/First_steps/Website_security\">ウェブサイトのセキュリティ</a>を参照してください)</li>\n  <li><strong>サーバー側の言語を使用している</strong>。 サーバー側の言語 (PHP や Python など) では、コードを解釈して結果を提供する特別なサーバーが必要です。</li>\n  <li>\n    <strong>他のファイルをインクルードしている</strong>。 ブラウザーは通常、<code>file://</code> スキーマを使用してリソースを読み込むリクエストをオリジン間リクエストとして扱います。\n    そのため、他のローカルファイルを入れることができるローカルファイルを読み込むと、 <a href=\"/ja/docs/Glossary/CORS\">CORS</a> エラーが発生することがあります。\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"シンプルなローカル_http_サーバーの実行","title":"シンプルなローカル HTTP サーバーの実行","isH3":false,"content":"<p>\n  非同期リクエストの問題を回避するには、ローカルウェブサーバーを介して実行することによって、そのようなサンプルをテストする必要があります。\n  私たちの目的のためにこれを行う最も簡単な方法の 1 つは、 Python の <code>http.server</code> モジュールを使用することです。\n</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> 古いバージョンの Python (バージョン 2.7 まで) では、<code>SimpleHTTPServer</code> という名前の似たようなモジュールが提供されていました。Python 2.x を使用している場合、<code>http.server</code> の使用をすべて <code>SimpleHTTPServer</code> に置き換えることで、このガイドを実行することができます。しかし、最新バージョンの Python を使用することをお勧めします。</p>\n</div>\n<p>このためには次のようにします。</p>\n<ol>\n  <li>Python をインストールします。 Linux または Mac OS X を使用している場合は、既にシステム上で使用可能になっているはずです。 Windows ユーザーの方は、 Python ホームページからインストーラーを入手し、インストーラーの指示に従ってインストールすることができます。\n    <ul>\n      <li><a href=\"https://www.python.org/\" class=\"external\" rel=\" noopener\">python.org</a> に進みます</li>\n      <li>ダウンロードセクションの下で、 Python \"3.xxx\" のリンクをクリックします</li>\n      <li>ページ下部の <em>Windows Installer</em> を選択してダウンロードします</li>\n      <li>ダウンロードしたら、実行します</li>\n      <li>インストーラーの最初のページで、 \"Add Python 3.xxx to PATH\" チェックボックスをオンにします</li>\n      <li>[インストール]をクリックし、インストールが完了したら[閉じる]をクリックします</li>\n    </ul>\n  </li>\n  <li>コマンドプロンプト (Windows)/ターミナル (OS X/Linux) を開きます。 Python がインストールされていることを確認するには、次のコマンドを入力してください。\n    <div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>python -V\n<span class=\"token comment\"># If the above fails, try:</span>\npython3 -V\n<span class=\"token comment\"># Or, if the \"py\" command is available, try:</span>\npy -V\n</code></pre></div>\n  </li>\n  <li>これによりバージョン番号が返されます。 OK の場合は、<code>cd</code> コマンドを使用してサンプルが入っているディレクトリーに移動します\n    <div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token comment\"># include the directory name to enter it, for example</span>\n<span class=\"token builtin class-name\">cd</span> Desktop\n<span class=\"token comment\"># use two dots to jump up one directory level if you need to</span>\n<span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>\n</code></pre></div>\n  </li>\n  <li>そのディレクトリーにあるサーバーを起動するコマンドを入力します。\n    <div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token comment\"># If Python version returned above is 3.X</span>\n<span class=\"token comment\"># On Windows, try \"python -m http.server\" or \"py -3 -m http.server\"</span>\npython3 -m http.server\n<span class=\"token comment\"># If Python version returned above is 2.X</span>\npython -m SimpleHTTPServer\n</code></pre></div>\n  </li>\n  <li>既定では、これはローカルウェブサーバー上のディレクトリーの内容を 8000 番ポート上で実行します。このサーバーにアクセスするには、ウェブブラウザーで <code>localhost:8000</code> の URL に移動します。ここにディレクトリーの内容が表示されるので、実行する HTML ファイルをクリックしてください。</li>\n</ol>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> すでに 8000 番ポートで何かが稼働している場合は、 server コマンドを実行して別のポート番号を選択することができます。例えば <code>python3 -m http.server 7800</code> (Python 3.x) または <code>python -m SimpleHTTPServer 7800</code> (Python 2.x) です。これで <code>localhost:7800</code> でコンテンツにアクセスできます。</p>\n</div>"}},{"type":"prose","value":{"id":"サーバー側の言語をローカルで実行する","title":"サーバー側の言語をローカルで実行する","isH3":false,"content":"<p>Python の <code>http.server</code> （Python 2.0 では <code>SimpleHTTPServer</code>）モジュールは便利ですが、単なる静的ファイルサーバーに過ぎません。 Python、PHP、JavaScript などの言語で書かれたコードの実行方法はわかりません。これを処理するには、必要なことがあります。必要なのは、実行しようとしているサーバー側の言語に依存します。いくつかの例があります。</p>\n<ul>\n  <li>Python のサーバー側コードを実行するには、Python ウェブフレームワークを使用する必要があります。 Python のウェブフレームワークには、 Django（<a href=\"/ja/docs/Learn/Server-side/Django\">ガイド</a>が利用できます）、<a href=\"https://flask.palletsprojects.com/\" class=\"external\" rel=\" noopener\">Flask</a>、<a href=\"https://trypyramid.com\" class=\"external\" rel=\" noopener\">Pyramid</a> など人気のものが多く存在します。</li>\n  <li>Node.js (JavaScript) サーバー側コードを実行するには、生のノードまたはその上に構築されたフレームワークを使用する必要があります。 Express は良い選択です - <a href=\"/ja/docs/Learn/Server-side/Express_Nodejs\">Express Web Framework (Node.js/JavaScript)</a> を参照してください</li>\n  <li>PHP サーバー側コードを実行するには、<a href=\"http://php.net/manual/ja/features.commandline.webserver.php\" class=\"external\" rel=\" noopener\">PHP の組み込み開発サーバー</a>を起動してください。\n    <div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token builtin class-name\">cd</span> path/to/your/php/code\nphp -S localhost:8000\n</code></pre></div>\n  </li>\n</ul>"}}],"toc":[{"text":"ローカルファイルとリモートファイル","id":"ローカルファイルとリモートファイル"},{"text":"ローカルファイルのテストに関する問題","id":"ローカルファイルのテストに関する問題"},{"text":"シンプルなローカル HTTP サーバーの実行","id":"シンプルなローカル_http_サーバーの実行"},{"text":"サーバー側の言語をローカルで実行する","id":"サーバー側の言語をローカルで実行する"}],"summary":"この記事では、マシン上に簡単なローカルテストサーバーを設定する方法と、その使い方の基本について説明します。","popularity":0.0004,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"How do you set up a local testing server?","locale":"en-US","native":"English (US)"},{"title":"¿Cómo se configura un servidor de prueba local?","locale":"es","native":"Español"},{"title":"Comment configurer un serveur de test local ?","locale":"fr","native":"Français"},{"title":"로컬 테스트 서버 설치하기","locale":"ko","native":"한국어"},{"title":"Como configurar um servidor de testes local","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Как настроить локальный сервер для тестирования?","locale":"ru","native":"Русский"},{"title":"如何设置一个本地测试服务器？","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/learn/common_questions/set_up_a_local_testing_server","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/learn/common_questions/set_up_a_local_testing_server/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Learn","title":"ウェブ開発を学ぶ"},{"uri":"/ja/docs/Learn/Common_questions","title":"よくある質問"},{"uri":"/ja/docs/Learn/Common_questions/set_up_a_local_testing_server","title":"ローカルにテスト用サーバーを用意するには？"}],"pageTitle":"ローカルにテスト用サーバーを用意するには？ - ウェブ開発を学ぶ | MDN","noIndexing":false}}