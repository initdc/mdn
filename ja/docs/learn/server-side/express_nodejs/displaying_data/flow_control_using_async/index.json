{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"async を使用した非同期フロー制御","mdn_url":"/ja/docs/Learn/Server-side/Express_Nodejs/Displaying_data/flow_control_using_async","locale":"ja","native":"日本語","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><em>LocalLibrary</em> 中のいくつかのコントローラーのコードは、複数の非同期リクエストの結果に依存しています。そのため、操作を特定の順序もしくは並列して実行することが必要になる場合があります。フロー制御を管理して、必要となるすべての情報を取得した後でページをレンダリングするために、ここでは人気のある node <a href=\"https://www.npmjs.com/package/async\" class=\"external\" rel=\" noopener\">async</a> を使うことにします。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> JavaScript で非同期動作やフロー制御を管理する手法には <a href=\"/ja/docs/Web/JavaScript/Guide/Using_promises\">Promises</a> のような比較的最近 JavaScript に導入された言語機能を含め、他にもあります。</p>\n</div>\n<p>async には多くの便利なメソッドがあります（詳しくは<a href=\"https://caolan.github.io/async/v3/docs.html\" class=\"external\" rel=\" noopener\">ドキュメント (en-US)</a> を参照してください）。ここでは重要ないくつかの関数を紹介します。</p>\n<ul>\n  <li><a href=\"https://caolan.github.io/async/v3/docs.html#parallel\" class=\"external\" rel=\" noopener\"><code>async.parallel()</code></a> は、並列して行う必要のある操作を実行する場合に使用します。</li>\n  <li><a href=\"https://caolan.github.io/async/v3/docs.html#series\" class=\"external\" rel=\" noopener\"><code>async.series()</code></a> は、非同期操作が直列に実行される必要がある場合に使用します。</li>\n  <li><a href=\"https://caolan.github.io/async/v3/docs.html#waterfall\" class=\"external\" rel=\" noopener\"><code>async.waterfall()</code></a> は、直列に実行する必要がある操作の中でも、各操作が前の操作の結果に依存する場合に使用します。</li>\n</ul>"}},{"type":"prose","value":{"id":"なぜ非同期フロー制御が必要なのか？","title":"なぜ非同期フロー制御が必要なのか？","isH3":false,"content":"<p><em>Express</em> で使用するメソッドの多くは非同期です。なので実行する操作を指定して、コールバックを渡します。メソッドはすぐに戻り、そしてコールバックは要求された操作が完了したときに呼び出されます。<em>Express</em> の慣例として、コールバック関数は第 1 引数にエラー値 (成功時には <code>null</code>)、第 2 引数には関数からの結果 (存在する場合のみ) を渡します。</p>\n<p>もしコントローラーがページのレンダリングに必要な情報を得るために <strong>1 つの非同期操作</strong>を実行するだけならば、実装は簡単です。コールバックでテンプレートをレンダリングするだけです。以下のコードでは、<code>SomeModel</code> モデルのカウントをレンダリングする関数 (Mongoose の <a href=\"https://mongoosejs.com/docs/api.html#model_Model.countDocuments\" class=\"external\" rel=\" noopener\"><code>countDocuments</code></a> メソッドを使用) を示しています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">some_model_count</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  SomeModel<span class=\"token punctuation\">.</span><span class=\"token function\">countDocuments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a_model_field</span><span class=\"token operator\">:</span> <span class=\"token string\">'match_value'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> count</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ... エラーが発生した場合</span>\n\n    <span class=\"token comment\">// 成功したら count を render 関数に渡して結果をレンダリングする (ここでは変数 'data')</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'the_template'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> count <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>では<strong>複数</strong>の非同期クエリーを実行する必要があり、すべての操作が完了するまでページをレンダリングできない場合はどうすればよいでしょうか？甘い考えで実装するとリクエストを「デイジーチェーン」して、前のリクエストのコールバックで後続のリクエストを開始し、最後のコールバックでレスポンスを受け取ってレンダリングすることができます。この方法の問題点は並列で実行した方が効率的である場合でも、リクエストを直列で実行する必要がある点です。これにより一般的に<a href=\"http://callbackhell.com/\" class=\"external\" rel=\" noopener\">コールバック地獄</a>と呼ばれる複雑にネストされたコードになる可能性があります。</p>\n<p>より良い解決策はすべてのリクエストを並列で実行して、すべてのクエリーが完了したときに実行される単一のコールバックを持つことです。そして、そのようなフロー操作を簡単に行うことができるのが <em>async</em> モジュールなのです！</p>"}},{"type":"prose","value":{"id":"非同期操作の並列化","title":"非同期操作の並列化","isH3":false,"content":"<p><a href=\"https://caolan.github.io/async/v3/docs.html#parallel\" class=\"external\" rel=\" noopener\"><code>async.parallel()</code></a> メソッドは、複数の非同期処理を並列で実行するために使用されます。</p>\n<p><code>async.parallel()</code> の第 1 引数は実行する非同期関数 (配列、オブジェクト、またはその他の反復可能なもの) のコレクションです。各関数には <code>callback(err, result)</code> が渡され、完了時にはエラー <code>err</code> (もしくは <code>null</code>) と任意で <code>results</code> 値を指定して呼び出す必要があります。</p>\n<p><code>async.parallel()</code> の任意の第 2 引数は、第 1 引数のすべての関数が完了したときに実行されるコールバックです。このコールバックはエラー引数と個々の非同期操作の results を含む result コレクションを使用して呼び出されます。result コレクションは最初の引数と同じ型です (つまり非同期関数の配列を渡す場合、最終的なコールバックは results の配列で呼び出されます)。並列関数のいずれかがエラーを返した場合、コールバックは (エラー値とともに) 早期に呼び出されます。</p>\n<p>以下の例では第 1 引数にオブジェクトを渡した場合の動作を示しています。この例から分かるように results は渡された元の関数と同じプロパティ名を持つオブジェクトで<strong>返されます</strong>。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>async<span class=\"token punctuation\">.</span><span class=\"token function\">parallel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">one</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">two</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token function-variable function\">something_else</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 任意のコールバック</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> results</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 'results' が {one: 1, two: 2, ..., something_else: some_value} になりました</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>代わりに関数の配列を第 1 引数として渡すと、results は配列になります (results に入る配列の順序は関数が完了した順番ではなく、関数が宣言された元の順番と一致します)。</p>"}},{"type":"prose","value":{"id":"非同期操作の直列化","title":"非同期操作の直列化","isH3":false,"content":"<p><a href=\"https://caolan.github.io/async/v3/docs.html#series\" class=\"external\" rel=\" noopener\"><code>async.series()</code></a> メソッドは、後続の関数が以前の出力に依存しない場合において、複数の非同期操作を順番に実行するために使用されます。基本的には <code>async.parallel()</code> と同じように宣言され、同じように動作します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>async<span class=\"token punctuation\">.</span><span class=\"token function\">series</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">one</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">two</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token function-variable function\">something_else</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 最後の非同期関数が完了した後に、任意のコールバックを返します</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> results</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 'results' が {one: 1, two: 2, ..., something_else: some_value} になりました</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> ECMAScript (JavaScript) の言語仕様ではオブジェクトの列挙順序は未定義であると規定されているため、すべてのプラットフォームで指定したのと同じ順序で関数の呼び出しが行われない可能性があります。もし順序が本当に重要な場合、以下のようにオブジェクトではなく配列を渡す必要があります。</p>\n</div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>async<span class=\"token punctuation\">.</span><span class=\"token function\">series</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 何かを行う...</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'one'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// さらに何かを行う...</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 任意のコールバック</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> results</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// results は ['one', 'two'] になりました</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"依存性のある直列の非同期操作","title":"依存性のある直列の非同期操作","isH3":false,"content":"<p><a href=\"https://caolan.github.io/async/v3/docs.html#waterfall\" class=\"external\" rel=\" noopener\"><code>async.waterfall()</code></a> メソッドは、各操作が前の操作の結果に依存している場合において、複数の非同期操作を順番に実行するために使用されます。</p>\n<p>各非同期関数から呼び出されるコールバックは、第 1 引数に <code>null</code> を含み、それ以降の引数には結果が含まれます。直列の各関数は、最初の引数として直前のコールバックの結果を引数として受け取り、次にコールバック関数を受け取ります。すべての操作が完了すると、最後の操作の結果とともに最終的なコールバックが呼び出されます。これがどのように機能するかは、以下のコードの一部分をもとに考えるとより明確になります (この例は <em>async</em> のドキュメントにもあります)。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>async<span class=\"token punctuation\">.</span><span class=\"token function\">waterfall</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// arg1 は 'one' に、arg2 は 'two' になりました</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'three'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg1<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// arg1 が 'three' になりました</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'done'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// result が 'done' になりました</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"async_のインストール","title":"async のインストール","isH3":false,"content":"<p>NPM を使用して async モジュールのインストールを行い、コードで使用できるようにします。これは <em>LocalLibrary</em> のルートでプロンプトを開いて、下記のコマンドを入力するという通常の手法で行います。</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> async\n</code></pre></div>"}},{"type":"prose","value":{"id":"次のステップ","title":"次のステップ","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Learn/Server-side/Express_Nodejs/Displaying_data\">Express チュートリアル Part 5: ライブラリデータの表示</a> へ戻る。</li>\n  <li>Part 5: 次の小項目「<a href=\"/ja/docs/Learn/Server-side/Express_Nodejs/Displaying_data/Template_primer\">テンプレートプライマー</a>」に進む。</li>\n</ul>"}}],"toc":[{"text":"なぜ非同期フロー制御が必要なのか？","id":"なぜ非同期フロー制御が必要なのか？"},{"text":"非同期操作の並列化","id":"非同期操作の並列化"},{"text":"非同期操作の直列化","id":"非同期操作の直列化"},{"text":"依存性のある直列の非同期操作","id":"依存性のある直列の非同期操作"},{"text":"async のインストール","id":"async_のインストール"},{"text":"次のステップ","id":"次のステップ"}],"summary":"LocalLibrary 中のいくつかのコントローラーのコードは、複数の非同期リクエストの結果に依存しています。そのため、操作を特定の順序もしくは並列して実行することが必要になる場合があります。フロー制御を管理して、必要となるすべての情報を取得した後でページをレンダリングするために、ここでは人気のある node async を使うことにします。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Asynchronous flow control using async","locale":"en-US","native":"English (US)"},{"title":"Controle de fluxo assíncrono usando async","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Асинхронное управление потоками при помощи async","locale":"ru","native":"Русский"},{"title":"使用 async 进行非同步流控制","locale":"zh-CN","native":"中文 (简体)"},{"title":"使用 async 進行非同步流控制","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ja/learn/server-side/express_nodejs/displaying_data/flow_control_using_async","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/learn/server-side/express_nodejs/displaying_data/flow_control_using_async/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Learn","title":"ウェブ開発を学ぶ"},{"uri":"/ja/docs/Learn/Server-side","title":"サーバサイド Web サイトプログラミング"},{"uri":"/ja/docs/Learn/Server-side/Express_Nodejs","title":"Express Web フレームワーク (Node.js/JavaScript)"},{"uri":"/ja/docs/Learn/Server-side/Express_Nodejs/Displaying_data","title":"Express チュートリアル Part 5: ライブラリデータの表示"},{"uri":"/ja/docs/Learn/Server-side/Express_Nodejs/Displaying_data/flow_control_using_async","title":"async を使用した非同期フロー制御"}],"pageTitle":"async を使用した非同期フロー制御 - ウェブ開発を学ぶ | MDN","noIndexing":false}}