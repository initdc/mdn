{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"読み込みが速い HTML ページを作成するための豆知識","mdn_url":"/ja/docs/Learn/HTML/Howto/Author_fast-loading_HTML_pages","locale":"ja","native":"日本語","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>これらの豆知識は、一般の知識や実験に基づくものです。</p>\n<p>ウェブページを最適化すると、訪問者に対して応答性のよいサイトを提供するだけでなく、ウェブサーバーやインターネット接続の負荷を低減する効果もあります。これは大規模なサイトや、緊急事態で通信量が急増するニュース速報のようなサイトでは重要でしょう。</p>\n<p>ページの読み込みパフォーマンスの最適化は、低速なダイヤルアップ接続やモバイルデバイスの利用者向けコンテンツのためだけではありません。ブロードバンド向けコンテンツでも重要であり、高速接続の利用者であっても劇的な改善につながるでしょう。</p>"}},{"type":"prose","value":{"id":"豆知識","title":"豆知識","isH3":false,"content":""}},{"type":"prose","value":{"id":"ページの量の削減","title":"ページの量の削減","isH3":true,"content":"<p>ページの量は、ページ読み込みパフォーマンスにおいて断然重要な要素です。</p>\n<p>最小化として知られる不要なホワイトスペースやコメントの削除、インラインのスクリプトや CSS の外部ファイルへの移動によりページの量を削減することで、ページの構造変更を最小限にしてダウンロードの性能を向上できるでしょう。</p>\n<p><a href=\"https://www.html-tidy.org\" class=\"external\" rel=\" noopener\">HTML Tidy</a> のようなツールを利用すると、妥当な HTML ソースから行頭のホワイトスペースや過剰な空行を自動的に取り除くことができます。他に JavaScript ソースを、書式変更や難読化および長い識別子を短いものに置き換えることで 「圧縮」するツールもあります。</p>"}},{"type":"prose","value":{"id":"ファイル数の最少化","title":"ファイル数の最少化","isH3":true,"content":"<p>ウェブページが参照するファイル数を削減することで、ページのダウンロードに必要な <a href=\"/ja/docs/Web/HTTP\">HTTP</a> コネクションの数が減り、それによってリクエストを送信したり、レスポンスを受け取ったりする時間が短縮できます。</p>\n<p>ブラウザーのキャッシュ設定によっては、ブラウザーが各ファイルの <a href=\"/ja/docs/Web/HTTP/Headers/If-Modified-Since\"><code>If-Modified-Since</code></a> ヘッダーで、ファイルが最後にダウンロードされてから変更されているかどうかを確認するリクエストを送信することがあります。ページをレンダリングする前に、ブラウザーがこれらの各ファイルの変更時刻をチェックする必要があるため、参照されたファイルの最終変更時刻をチェックするのに時間がかかり過ぎると、ウェブページの初期表示が遅くなることがあります。</p>\n<p>CSS で多数の背景画像を使用している場合は、画像スプライトと呼ばれる方法でで画像を 1 つに結合することで必要な HTTP による参照の数を減らすことができます。すなわち、背景として用いる画像ファイルは毎回同じものを適用し、それを適切な x/y 座標に調整します。これは寸法が限られている要素について最善の方法ですが、適用できない場合もあるでしょう。しかし、HTTP リクエストを少なくしてキャッシュする画像を単一にすることで、ページの読み込み時間を削減できます。</p>"}},{"type":"prose","value":{"id":"コンテンツ配信ネットワーク_cdn_を使用する","title":"コンテンツ配信ネットワーク (CDN) を使用する","isH3":true,"content":"<p>この記事の目的のために、CDN はサーバーと訪問者の間の物理的な距離を縮めるための手段です。サーバーの起点と訪問者の間の距離が長くなると、読み込み時間が長くなります。ウェブサイトのサーバーがアメリカにあり、インドからの訪問者がいるとします。米国からの訪問者と比較して、ページの読み込み時間はインドの訪問者の方がはるかに長くなります。</p>\n<p>CDN は地理的に分散したサーバーネットワークで、ユーザーとウェブサイトの距離を縮めるために連携して機能します。CDN はキャッシュされたウェブサイトのバージョンを保存し、それらをユーザーに最も近いネットワークノードを介して訪問者に提供するので、<a href=\"http://www.webperformancetoday.com/2012/04/02/latency-101-what-is-latency-and-why-is-it-such-a-big-deal/\" class=\"external\" rel=\" noopener\">待ち時間</a>が短縮されます。</p>\n<p>参考文献:</p>\n<ul>\n  <li><a href=\"https://www.incapsula.com/cdn-guide/what-is-cdn-how-it-works.html\" class=\"external\" rel=\" noopener\">Understanding CDNs</a></li>\n</ul>"}},{"type":"prose","value":{"id":"ドメイン検索の削減","title":"ドメイン検索の削減","isH3":true,"content":"<p>ドメインが分かれていると DNS の参照に時間がかかるため、CSS の link や JavaScript や画像の src に多数のドメインが現れるほど、ページの読み込み時間が長くなるでしょう。</p>\n<p>現実的でない場合があるかもしれませんが、ページがあるドメインと異なるドメインの使用数は必要最低限にするよう注意すべきです。</p>"}},{"type":"prose","value":{"id":"再利用されるコンテンツのキャッシュ","title":"再利用されるコンテンツのキャッシュ","isH3":true,"content":"<p>どんなコンテンツでも、キャッシュできるか、キャッシュされているか、キャッシュ期限が適切であるかを確認してください。</p>\n<p>特に、<code>Last-Modified</code> ヘッダーに注意してください。これは、効率のよいページのキャッシュができるようにします。このヘッダーは、ファイルを読み込もうとしているユーザーエージェントに、ファイルがいつ更新されたかなどの情報を伝えます。多くのウェブサーバーは、静的なページ (<code>.html</code>、<code>.css</code> など) にはファイルシステムに格納されている最終更新日に基づいて、自動的に <code>Last-Modified</code> ヘッダーを追加します。もちろん、動的なページ (<code>.php</code>、<code>.aspx</code> など) については取得できないので、ヘッダーを送信しません。</p>\n<p>そのため、特に動的に生成されるページについては、この件について調べてみると有益です。少し厄介ですが、通常キャッシュできないページのリクエストを大幅に節約できるでしょう。</p>\n<p>詳細情報:</p>\n<ol>\n  <li><a href=\"https://fishbowl.pastiche.org/2002/10/21/http_conditional_get_for_rss_hackers\" class=\"external\" rel=\" noopener\">HTTP Conditional Get for RSS Hackers</a></li>\n  <li><a href=\"https://annevankesteren.nl/archives/2005/05/http-304\" class=\"external\" rel=\" noopener\">HTTP 304: Not Modified</a></li>\n  <li><a href=\"https://ja.wikipedia.org/wiki/HTTP_ETag\" class=\"external\" rel=\" noopener\">Wikipedia の HTTP ETag の記事</a></li>\n  <li><a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html\" class=\"external\" rel=\" noopener\">Caching in HTTP</a></li>\n</ol>"}},{"type":"prose","value":{"id":"ページのコンポーネントの最適な順序","title":"ページのコンポーネントの最適な順序","isH3":true,"content":"<p>最初の表示に必要な CSS または JavaScript と共に、ページコンテンツをまずダウンロードすると、ページの読み込み中にユーザーに最もすばやくページを表示させることができます。このコンテンツは通常テキストであるため、転送中のテキスト圧縮の効率が良く、ユーザーへの反応がもっと早くなります。</p>\n<p>使用される前にページの読み込みが完了する必要がある動的機能は、最初は無効にしておき、ページの読み込みが完了した後でのみ有効にするようにしましょう。これにより、JavaScript がページコンテンツの後に読み込まれるようになり、ページ読み込み時に全体が表示されるまでの時間が短縮されます。</p>"}},{"type":"prose","value":{"id":"インラインスクリプト数の削減","title":"インラインスクリプト数の削減","isH3":true,"content":"<p>インラインスクリプトがあると、インラインスクリプトのパース中にページの構造が変わる可能性があるとパーサーが想定しなければならないため、ページの読み込みにおいて重荷になることがあります。一般的にはインラインスクリプトの使用を減らし、また特に <code>document.write()</code> を用いたコンテンツの出力を減らすことで、ページ読み込みのパフォーマンスが向上するでしょう。 <code>document.write()</code> に基づく旧来のコンテンツ操作方法ではなく、最新のブラウザー向けの方法である <a href=\"/ja/docs/Web/Guide/AJAX\">AJAX</a> を使用してください。</p>"}},{"type":"prose","value":{"id":"最新の_css_と正しいマークアップの使用","title":"最新の CSS と正しいマークアップの使用","isH3":true,"content":"<p>最新の CSS を用いるとマークアップの量を削減し、レイアウトの点で (スペーサーの) 画像使用を減らし、また多くの場合スタイル付けした文字列の画像を置き換えることが可能です。画像は CSS と文字列の組み合わせに比べ、多大なコストがかかります。</p>\n<p>正しいマークアップを使用することは、ほかにも利点があります。第一に、ブラウザーが HTML を解釈する際にエラー訂正を行う必要がなくなります (ユーザーの記述法の多様性を認めるかどうかという哲学的な問題とは別です。厳密な、許容範囲のない書式を強制するというより、プログラム的に「正しく」または正規化しましょう)</p>\n<p>さらに、正しいマークアップをすることによって、ウェブページを<em>プリプロセス</em>ができる他のツールが自由に利用できるようになります。例えば、<a href=\"http://tidy.sourceforge.net/\" class=\"external\" rel=\" noopener\">HTML Tidy</a> はホワイトスペースや省略可能な終了タグを除去することができます。しかし、重大なマークアップの誤りがあるページではツールを実行できません。</p>"}},{"type":"prose","value":{"id":"コンテンツをまとめる","title":"コンテンツをまとめる","isH3":true,"content":"<p>テーブルをレイアウトのために使うのは陳腐化した方法であり、もはや使うべきではありません。レイアウトを行うには、代わりに<a href=\"/ja/docs/Learn/CSS/CSS_layout/Floats\">浮動要素</a>、<a href=\"/ja/docs/Learn/CSS/CSS_layout/Positioning\">位置指定</a>、<a href=\"/ja/docs/Learn/CSS/CSS_layout/Flexbox\">フレックスボックス</a>、<a href=\"/ja/docs/Learn/CSS/CSS_layout/Grids\">グリッド</a>を使用してください。</p>\n<p>テーブルは現在でも妥当なマークアップと考えられていますが、表形式のデータを表示するために用いるべきです。ブラウザーがページを迅速に表示するためには、テーブルを入れ子にしないようにしてください。</p>\n<p>以下のように深い入れ子のテーブルを使用する代わりに、</p>\n<pre class=\"notranslate\">&lt;table&gt;\n  &lt;table&gt;\n    &lt;table&gt;\n          ...\n    &lt;/table&gt;\n  &lt;/table&gt;\n&lt;/table&gt;\n</pre>\n<p>以下のように入れ子にしないテーブルや div を用いてください。</p>\n<pre class=\"notranslate\">&lt;table&gt;...&lt;/table&gt;\n&lt;table&gt;...&lt;/table&gt;\n&lt;table&gt;...&lt;/table&gt;\n</pre>\n<p><a href=\"https://www.w3.org/TR/css-flexbox-1/\" class=\"external\" rel=\" noopener\">CSS Flexible Box Layout</a> と <a href=\"https://www.w3.org/TR/css-grid-1/\" class=\"external\" rel=\" noopener\">CSS Grid Layout</a> の仕様書も参照してください。</p>"}},{"type":"prose","value":{"id":"svg_の資産を最小化し圧縮する","title":"SVG の資産を最小化し圧縮する","isH3":true,"content":"<p>多くの描画アプリケーションで作成された SVG は、不必要なメタデータを含んでいることが多く、削除することができます。サーバーで SVG 資産を gzip で圧縮するよう設定しましょう。</p>"}},{"type":"prose","value":{"id":"画像を縮小して圧縮する","title":"画像を縮小して圧縮する","isH3":true,"content":"<p>画像が大きいと、ページの読み込みに時間がかかります。画像をページに追加する前に、圧縮することを検討してください。 <a href=\"https://compressjpeg.com/\" class=\"external\" rel=\" noopener\">Compress Jpeg</a>、<a href=\"https://tinypng.com\" class=\"external\" rel=\" noopener\">Tiny PNG</a>、その他多くのツールがオンラインで利用可能です。photoshop などのオフラインツールも使用できます。</p>"}},{"type":"prose","value":{"id":"画像やテーブルのサイズ指定","title":"画像やテーブルのサイズ指定","isH3":true,"content":"<p>ブラウザーが直ちに画像やテーブルの高さや幅を決めることができれば、ブラウザーはコンテンツの再配置を行うことなくウェブページを表示できます。これはページの表示を高速化するだけでなく、ページの読み込みが完了するまでにレイアウトが不安定に変化することを防ぎます。よって、可能な限り画像には <code>height</code> と <code>width</code> を指定するべきです。</p>\n<p>テーブルは以下のセレクターとプロパティの組み合わせを用いるべきです:</p>\n<pre class=\"notranslate\">  table-layout: fixed;\n</pre>\n<p>そして、 <a href=\"/ja/docs/Web/HTML/Element/col\"><code>&lt;col&gt;</code></a> 要素および <a href=\"/ja/docs/Web/HTML/Element/colgroup\"><code>&lt;colgroup&gt;</code></a> 要素を用いて列の幅を指定しましょう。</p>"}},{"type":"prose","value":{"id":"画像の遅延読み込みを使用する","title":"画像の遅延読み込みを使用する","isH3":true,"content":"<p>既定では、画像は<strong>熱心に</strong>読み込まれます。つまり、 HTML で処理されると同時に画像が読み込まれ、表示されます。熱心に読み込まれた画像は、文書の <a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>load</code></a> イベントが送られる前に表示されます。画像の遅延読み込みに切り替えるとブラウザーは、<a href=\"/ja/docs/Glossary/Visual_Viewport\">視覚的ビューポート</a>の描画に必要になるまで、画像の読み込みを保留します。</p>\n<p>画像に遅延読み込みのマークを付けるには、 <a href=\"/ja/docs/Web/HTML/Element/img#attr-loading\"><code>loading</code></a> 属性に <code>lazy</code> という値を指定してください。この設定により、画像は必要なときにのみ読み込まれます。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./images/footerlogo.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">loading</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lazy<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>ただし、遅延読み込みされた画像は、 <code>load</code> イベントが発生した時点では利用できない場合があります。画像がロードされているかどうかは、論理プロパティの <a href=\"/ja/docs/Web/API/HTMLImageElement/complete\" title=\"complete\"><code>complete</code></a> の値が <code>true</code> であるかどうかを確認することで判断できます。</p>"}},{"type":"prose","value":{"id":"ユーザーエージェント要件の賢い選択","title":"ユーザーエージェント要件の賢い選択","isH3":true,"content":"<p>ページデザインを最大限に改善するには、プロジェクトのユーザーエージェントの要件を合理的なものにしましょう。すべてのブラウザー、特に古いバージョンのブラウザーでコンテンツがピクセル単位で正確に見えるように要求しないでください。</p>\n<p>理想的には、適切な標準仕様に対応している最新のブラウザーを最低要件にするよう考慮するべきです。これには、最近のバージョンの Firefox、Internet Explorer、Google Chrome、Opera、Safari が含まれます。</p>\n<p>ただし、この記事に記載している秘訣の多くはあらゆるユーザーエージェントに適用できる汎用的なテクニックであり、かつブラウザーの対応要件にかかわらずどのようなウェブページにでも適用できます。</p>"}},{"type":"prose","value":{"id":"可能なら_async_や_defer_を使用する","title":"可能なら async や defer を使用する","isH3":true,"content":"<p><a href=\"/ja/docs/Web/HTML/Element/script#attributes\">async</a> と <a href=\"/ja/docs/Web/HTML/Element/script#attributes\">defer</a> 属性の両方と互換性のある JavaScript を使用し、特に、複数の script 要素がある場合、可能ならば <a href=\"/ja/docs/Web/HTML/Element/script#attributes\">async</a> をいつでも使用してください。</p>\n<p>これにより、ページで JavaScript が読み込み中である間はレンダリングを中断できます。さもなければ、ブラウザーはこれらの属性を持たない script 要素の後にあるコンテンツをレンダリングしないでしょう。</p>\n<p>注意: これらの属性が初回のページ読み込みに大きな効果があるとしても、属性は使用するべきですがすべてのブラウザーで動作するとは考えないようにしてください。よい JavaScript コードを作るためのガイドラインすべてに従っていれば、コードを変更する必要はありません。</p>"}},{"type":"prose","value":{"id":"ページ構造の例","title":"ページ構造の例","isH3":false,"content":"<p>· <code><a href=\"/ja/docs/Web/HTML/Element/html\"><code>&lt;html&gt;</code></a></code></p>\n<dl>\n  <dt id=\"·\">· <code><a href=\"/ja/docs/Web/HTML/Element/head\"><code>&lt;head&gt;</code></a></code></dt>\n  <dd>\n    <p></p>\n    <dl>\n      <dt id=\"·_2\">· <code><a href=\"/ja/docs/Web/HTML/Element/link\"><code>&lt;link&gt;</code></a></code> ...</dt>\n      <dd>\n        <p>ページの外観に必要な CSS ファイルです。管理しやすくするため、関連性のない CSS は別のファイルに分けるとともに、パフォーマンスのためにファイル数は最小限にしてください。</p>\n      </dd>\n      <dt id=\"·_3\">· <code><a href=\"/ja/docs/Web/HTML/Element/script\"><code>&lt;script&gt;</code></a></code> ...</dt>\n      <dd>\n        <p>\n          ページの読み込み中に<strong>必要な</strong>機能の JavaScript ファイルですが、ページの読み込み後にしか実行しない対話操作に関するものは含めないようにしてください。\n          管理のために関連性のない JavaScript は別のファイルに分けるとともに、パフォーマンスのためにファイル数は最小限にしてください。\n        </p>\n      </dd>\n    </dl>\n  </dd>\n  <dt id=\"·_4\">· <code><a href=\"/ja/docs/Web/HTML/Element/body\"><code>&lt;body&gt;</code></a></code></dt>\n  <dd>\n    <p>· ユーザーが閲覧可能なページコンテンツを小さな塊 ( <code><a href=\"/ja/docs/Web/HTML/Element/header\"><code>&lt;header&gt;</code></a></code>/ <code><a href=\"/ja/docs/Web/HTML/Element/main\"><code>&lt;main&gt;</code></a>/</code> <code><a href=\"/ja/docs/Web/HTML/Element/table\"><code>&lt;table&gt;</code></a></code>) にまとめると、ページ全体のダウンロードを待たずに表示できるようにすることができる。</p>\n    <dl>\n      <dt id=\"·_5\">· <code><a href=\"/ja/docs/Web/HTML/Element/script\"><code>&lt;script&gt;</code></a></code> ...</dt>\n      <dd>\n        <p>\n          対話操作を実行するのに用いるスクリプトです。対話操作のスクリプトはたいてい、ページが完全に読み込まれて必要なオブジェクトがすべて初期化された後にのみ実行されます。よって、ページのコンテンツより先に読み込む必要はありません。先に読み込むと、ページが最初に表示されるのが遅くなります。\n          管理のために関連性のない JavaScript は別のファイルに分けるとともに、パフォーマンスのためにファイル数は最小限にしてください。\n          ロールオーバー効果で用いる画像がある場合は、ページのコンテンツをダウンロードした後に画像の先読みをしておきましょう。\n        </p>\n      </dd>\n    </dl>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"関連リンク","title":"関連リンク","isH3":false,"content":"<ul>\n  <li>書籍: <a href=\"http://www.websiteoptimization.com/\" class=\"external\" rel=\" noopener\">\"Speed Up Your Site\" by Andy King</a> (英語)</li>\n  <li>Yahoo! によるすばらしい完成された <a href=\"https://developer.yahoo.com/performance/rules.html\" class=\"external\" rel=\" noopener\">ウェブサイト高速化のためのベストプラクティス</a> (英語)</li>\n  <li>パフォーマンス解析・最適化向けツール: <a href=\"https://developers.google.com/speed/pagespeed/\" class=\"external\" rel=\" noopener\">Google PageSpeed Tools</a></li>\n  <li><a href=\"https://firefox-source-docs.mozilla.org/devtools-user/paint_flashing_tool/index.html\" class=\"external\" rel=\" noopener\">Paint Flashing Tool</a></li>\n</ul>"}}],"toc":[{"text":"豆知識","id":"豆知識"},{"text":"ページ構造の例","id":"ページ構造の例"},{"text":"関連リンク","id":"関連リンク"}],"summary":"これらの豆知識は、一般の知識や実験に基づくものです。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Tips for authoring fast-loading HTML pages","locale":"en-US","native":"English (US)"},{"title":"Consejos para la creación de páginas HTML de carga rápida","locale":"es","native":"Español"},{"title":"Astuces de création de pages HTML à affichage rapide","locale":"fr","native":"Français"},{"title":"Tips for Authoring Fast-loading HTML Pages","locale":"ko","native":"한국어"},{"title":"Dicas para criar páginas HTML de carregamento rápido","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Tips for authoring fast-loading HTML pages","locale":"ru","native":"Русский"},{"title":"小贴士：如何制作快速加载的 HTML 页面","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/learn/html/howto/author_fast-loading_html_pages","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/learn/html/howto/author_fast-loading_html_pages/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Learn","title":"ウェブ開発を学ぶ"},{"uri":"/ja/docs/Learn/HTML","title":"HTML の学習: ガイドとチュートリアル"},{"uri":"/ja/docs/Learn/HTML/Howto","title":"一般的な問題解決に HTML を使う"},{"uri":"/ja/docs/Learn/HTML/Howto/Author_fast-loading_HTML_pages","title":"読み込みが速い HTML ページを作成するための豆知識"}],"pageTitle":"読み込みが速い HTML ページを作成するための豆知識 - ウェブ開発を学ぶ | MDN","noIndexing":false}}