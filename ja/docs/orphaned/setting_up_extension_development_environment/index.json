{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Setting up extension development environment","mdn_url":"/ja/docs/orphaned/Setting_up_extension_development_environment","locale":"ja","native":"日本語","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>この記事では、あなたの Mozilla アプリケーションにおいて拡張機能の開発を容易にするためのノウハウを提案します。</p>"}},{"type":"prose","value":{"id":"開発用の設定","title":"開発用の設定","isH3":true,"content":"<p>これらの設定はパフォーマンスの低下と引き換えにデバッグを簡単にします。</p>\n<p>設定を変更するための情報は <a href=\"https://www.mozilla.org/support/firefox/edit\" class=\"external\" rel=\" noopener\">設定ファイルの編集</a> を参照して下さい。これらの設定の中にはデフォルトで <code>about:config</code> にリストアップされていないものもあり、新しい (真偽値) エントリを作成しなければならない場合があるので注意して下さい。</p>\n<p>これらの変更を行う前に、下記の「開発用のプロファイル」を参考にして別個の開発用プロファイルを作成してください。</p>\n<ul>\n  <li><strong>javascript.options.showInConsole</strong> = <strong>true</strong>。chrome ファイルでのエラーを <a href=\"ja/Error_Console\">エラーコンソール</a> に出力します。</li>\n  <li><strong>nglayout.debug.disable_xul_cache</strong> = <strong>true</strong>。XUL キャッシュを無効にして、再起動しなくてもウィンドウとダイアログの変更が反映されるようにします。これは <a href=\"#using_directories_rather_than_jars\">JAR ファイルの代わりにディレクトリを使用</a> している事が前提です。この設定が有効であっても、XUL オーバーレイに対する変更を反映させるにはオーバーレイされているドキュメントを再読み込みする必要があります。</li>\n  <li><strong>browser.dom.window.dump.enabled</strong> = <strong>true</strong>。標準コンソールへの出力をする為の dump() 文の使用を可能にします。詳しくは <a href=\"/ja/docs/Web/API/Window/dump\"><code>window.dump</code></a> を参照してください。特権スクリプトからならば <code>nsIConsoleService</code> を使用することも出来ます。</li>\n  <li><strong>javascript.options.strict</strong> = <strong>true</strong>。エラーコンソールでの厳密な警告を有効にします。開発の際にこの設定を無効にしている人は多いので、あなた自身の拡張機能の警告に加えて彼らのコードによる警告が大量に表示されるようになるでしょうから注意が必要です。<a href=\"https://addons.mozilla.org/en-US/firefox/addon/1815\" class=\"external\" rel=\" noopener\">Console2</a> を使えばそれらをフィルタリングできます。</li>\n</ul>"}},{"type":"prose","value":{"id":"開発のための拡張機能","title":"開発のための拡張機能","isH3":true,"content":"<p>これらの拡張機能はあなたの開発の手助けとなるでしょう。</p>\n<ul>\n  <li>カスタムインストールで追加できる DOM Inspector</li>\n  <li>JavaScript デバッガ <a href=\"https://addons.mozilla.org/en-US/firefox/addon/216\" class=\"external\" rel=\" noopener\">Venkman</a></li>\n  <li><a href=\"https://ted.mielczarek.org/code/mozilla/extensiondev/\" class=\"external\" rel=\" noopener\">Extension Developer's Extension</a></li>\n  <li><a href=\"https://addons.mozilla.org/en-US/firefox/addon/1815\" class=\"external\" rel=\" noopener\">Console2</a></li>\n  <li><a href=\"https://addons.mozilla.org/firefox/4453\" class=\"external\" rel=\" noopener\">Chrome List</a></li>\n  <li><a href=\"https://addons.mozilla.org/en-US/firefox/addon/1843\" class=\"external\" rel=\" noopener\">Firebug</a></li>\n  <li><a href=\"https://addons.mozilla.org/de/firefox/addon/1729\" class=\"external\" rel=\" noopener\">Execute JS</a></li>\n  <li><a href=\"http://xpcomviewer.mozdev.org\" class=\"external\" rel=\" noopener\">XPCOMViewer</a>, XPCOM インスペクタ</li>\n</ul>"}},{"type":"prose","value":{"id":"開発用のプロファイル","title":"開発用のプロファイル","isH3":true,"content":"<p>開発用の設定や開発用の拡張機能によるパフォーマンスの低下や、個人データの漏洩を防ぐためには、開発作業のための別個のプロファイルを作成するのがいいでしょう。</p>\n<p><code>-no-remote</code> パラメータを付けて Firefox を起動すると、別々のプロファイルを使った二つの Firefox インスタンスを起動させることが出来ます。例えば、次のコマンドを使うことで、「通常の」 Firefox がすでに起動しているかどうかに関わらず、開発用のプロファイルで Firefox を起動させることが出来ます。 (あなたの開発用プロファイルの名前が \"dev\" であると仮定しています)</p>\n<pre class=\"notranslate\">start \"\" \"%ProgramFiles%\\Mozilla Firefox\\firefox.exe\" -no-remote -P dev\n</pre>\n<p>既定のプロファイルで Firefox を起動させるには、通常どおり \"firefox\" または \"firefox -P default\" を実行します。</p>"}},{"type":"prose","value":{"id":"コード置き場の変更","title":"コード置き場の変更","isH3":true,"content":"<p>変更を加えるたびに拡張機能を何度も再インストールしたり、アンインストールの際に誤ってソースファイルを削除してしまうのを防ぐために、ソースファイルをプロファイルの外の任意の場所に置く事が出来ます。</p>\n<ol>\n  <li>拡張機能に含まれる install.rdf から拡張機能の ID を見つける</li>\n  <li>プロファイルディレクトリ/extensions/ に、ファイル名をその ID にしたファイルを作成する (例: `your_profile_directory/extensions/{46D1B3C0-DB7A-4b1a-863A-6EE6F77ECB58}`) (<a href=\"http://kb.mozillazine.org/Profile_folder\" class=\"external\" rel=\" noopener\">http://kb.mozillazine.org/Profile_folder</a> プロファイルディレクトリの場所])</li>\n  <li>そのファイルの内容に install.rdf ファイルを格納するフォルダへのパスを書き込む (例: `/full/path/to/yourExtension` Windows ユーザはスラッシュではなくバックスラッシュを使ってください。 例: `\\full\\path\\to\\yourExtension`)</li>\n  <li>ファイルをプロファイルの extensions フォルダに置いて、アプリケーションを再起動する</li>\n</ol>"}},{"type":"prose","value":{"id":"jar_ファイルの代わりにディレクトリを使用","title":"JAR ファイルの代わりにディレクトリを使用","isH3":true,"content":"<p>拡張機能の chrome を JAR ファイルとディレクトリのどちらにパッケージングするかは自由ですが、ディレクトリを使った方が開発は簡単です。リリースする時のために JAR 構造を選んだとしても、chrome.manifest ファイルを編集すればディレクトリ構造で開発することが出来ます。例えばこうなっているのを</p>\n<pre class=\"notranslate\">content myExtension jar:chrome/myExtension.jar!/content/\n</pre>\n<p>こうします。</p>\n<pre class=\"notranslate\">content myExtension chrome/content/\n</pre>"}}],"toc":[],"summary":"この記事では、あなたの Mozilla アプリケーションにおいて拡張機能の開発を容易にするためのノウハウを提案します。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","source":{"folder":"ja/orphaned/setting_up_extension_development_environment","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/orphaned/setting_up_extension_development_environment/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"pageTitle":"Setting up extension development environment | MDN","noIndexing":true}}