{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"New in JavaScript 1.8","mdn_url":"/ja/docs/orphaned/New_in_JavaScript_1.8","locale":"ja","native":"日本語","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>JavaScript 1.8 は（<a href=\"/ja/docs/Mozilla/Firefox/Releases/3\">Firefox 3</a> に組み込まれている） Gecko 1.9 の一部分です。これは <a href=\"/ja/docs/Web/JavaScript/New_in_JavaScript/1.7\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">JavaScript 1.7</a> よりは大きな更新ではありませんが、ECMAScript 4/JavaScript 2 の進歩に追随するための更新がいくつか含まれています。このリリースは <a href=\"/ja/docs/Web/JavaScript/New_in_JavaScript/1.6\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">JavaScript 1.6</a> および <a href=\"/ja/docs/Web/JavaScript/New_in_JavaScript/1.7\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">JavaScript 1.7</a> で仕様化された新機能の全てを含んでいます。</p>\n<p>JavaScript 1.8 の開発状況を追うためには、<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=380236\" class=\"external\" rel=\" noopener\">バグ&nbsp;380236</a> を参照してください。この文書の地位については <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=421027\" class=\"external\" rel=\" noopener\">バグ&nbsp;421027</a> を参照してください。</p>"}},{"type":"prose","value":{"id":"javascript_1.8_の使用","title":"JavaScript 1.8 の使用","isH3":false,"content":"<p>JavaScript 1.8 のいくつかの新機能を HTML で使用するためには、以下のようにしてください:</p>\n<pre class=\"notranslate\">&lt;script type=\"application/javascript;version=1.8\"&gt; ... あなたのコード ... &lt;/script&gt;\n</pre>\n<p>もう 1 つの（推奨されない）方法として、<code>&lt;script&gt;</code> の非推奨の language 属性を使い、\"JavaScript1.8\" と定義することでもできます。</p>\n<p><a href=\"/ja/docs/Introduction_to_the_JavaScript_shell\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">JavaScript shell</a> や JavaScript XPCOM コンポーネント、XUL の <code>&lt;script&gt;</code> 要素を使うときは、JS の最新バージョン（Mozilla 1.9 では JS1.8）が自動的に使われます（<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=381031\" class=\"external\" rel=\" noopener\">バグ&nbsp;381031</a>, <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=385159\" class=\"external\" rel=\" noopener\">バグ&nbsp;385159</a>）。</p>\n<p>新たなキーワードである \"yield\" と \"let\" を使う必要がある機能は、バージョン 1.7 以上を指定しなければなりません。 なぜなら、既存のコードがそれらのキーワードを変数や関数の名前として使っているかもしれないからです。新しいキーワードを導入していない機能（例えばジェネレータ式）は、JavaScript のバージョンを指定することなく使うことができます。</p>"}},{"type":"prose","value":{"id":"式クロージャ","title":"式クロージャ","isH3":false,"content":"<p>この追加機能は、典型的な <a href=\"http://en.wikipedia.org/wiki/Lambda_calculus#Lambda_calculus_and_programming_languages\" class=\"external\" rel=\" noopener\">ラムダ記法</a>（<a href=\"http://ja.wikipedia.org/wiki/%E3%83%A9%E3%83%A0%E3%83%80%E8%A8%88%E7%AE%97#.E3.83.A9.E3.83.A0.E3.83.80.E8.A8.88.E7.AE.97.E3.81.A8.E3.83.97.E3.83.AD.E3.82.B0.E3.83.A9.E3.83.9F.E3.83.B3.E3.82.B0.E8.A8.80.E8.AA.9E\" class=\"external\" rel=\" noopener\">日本語版</a>）に似た表現を与える、単純な関数を書くための簡略表現に過ぎません。</p>\n<p><a href=\"/ja/docs/Web/JavaScript/New_in_JavaScript/1.7\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">JavaScript 1.7</a> 以前:</p>\n<pre class=\"notranslate\">function(x) { return x * x; }\n</pre>\n<p>JavaScript 1.8:</p>\n<pre class=\"notranslate\">function(x) x * x\n</pre>\n<p>この構文を使うことによって、中括弧と 'return' 文を省くことができます（それらは暗黙的に補われます）。この方式でコードを書くことには、コードを構文的に短くするメリットしかありません。</p>\n<p><strong>例:</strong></p>\n<p>イベントリスナーを渡す簡略表現:</p>\n<pre class=\"notranslate\">document.addEventListener(\"click\", function() false, true);\n</pre>\n<p><a href=\"/ja/docs/Web/JavaScript/New_in_JavaScript/1.6\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">JavaScript 1.6</a> からの array のメソッドである some とともにこの記法を使うと:</p>\n<pre class=\"notranslate\">elems.some(function(elem) elem.type == \"text\");\n</pre>"}},{"type":"prose","value":{"id":"ジェネレータ式","title":"ジェネレータ式","isH3":false,"content":"<p>この追加により、ジェネレータ（<a href=\"/ja/docs/Web/JavaScript/New_in_JavaScript/1.7\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">JavaScript 1.7</a> で導入されたものです）を簡単に作成することが可能になります。ジェネレータを生成するには、通常は内部に yield を含むカスタム関数を作成しなければなりませんでしたが、この追加により、配列内包に似た構文を使って同じ性質のジェネレータ文を作成することができるようになります。</p>\n<p><a href=\"/ja/docs/Web/JavaScript/New_in_JavaScript/1.7\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">JavaScript 1.7</a> では、あるオブジェクトのためのカスタムジェネレータを作成するために、以下のようなものを書くことでしょう:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">add3</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">let</span> i <span class=\"token keyword\">in</span> obj <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">yield</span> i <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> it <span class=\"token operator\">=</span> <span class=\"token function\">add3</span><span class=\"token punctuation\">(</span>someObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;br&gt;\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err <span class=\"token keyword\">if</span> err <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">StopIteration</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"End of record.&lt;br&gt;\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>JavaScript 1.8 では、ジェネレータ式を代わりに使うことで、カスタムジェネレータ関数を作成する必要性が無くなります:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> it <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">3</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">in</span> someObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;br&gt;\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err <span class=\"token keyword\">if</span> err <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">StopIteration</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"End of record.&lt;br&gt;\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ジェネレータ式は、関数に値として渡すこともできます。これは配列があらかじめ生成される典型的な配列内包の場合と違って、本当に必要とされるまでジェネレータが実行されないので、特に注目に値します。その違いの例を挙げます:</p>\n<p>JavaScript 1.7 の配列内包を使った場合</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">handleResults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> i <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token keyword\">in</span> obj <span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">&gt;</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">handleResults</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">results</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">let</span> i <span class=\"token keyword\">in</span> results <span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>JavaScript 1.8 のジェネレータ式を使った場合</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">handleResults</span><span class=\"token punctuation\">(</span> i <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token keyword\">in</span> obj <span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">&gt;</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">handleResults</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">results</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">let</span> i <span class=\"token keyword\">in</span> results <span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>この 2 つの例の大きな違いは、配列内包を使った場合には配列を内包するときと繰り返し処理を行うときの 2 度 \"obj\" 構造に対してループが実行されるのに対して、ジェネレータ式を使った場合には 1 度しかループが実行されずに済むという点です。</p>"}},{"type":"prose","value":{"id":"さらなる_array_の拡張","title":"さらなる Array の拡張","isH3":false,"content":"<p>JavaScript 1.8 では、 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> オブジェクトに 2 つの新しい繰り返しのメソッドが導入されました:</p>\n<ul>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\"><code>reduce()</code></a> - 配列の全ての要素に関数を実行し、直前の呼び出しから結果を収集します。</li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight\"><code>reduceRight()</code></a> - 配列の全ての要素に関数を実行し、直前の呼び出しから結果を収集しますが、逆から実行します。</li>\n</ul>"}},{"type":"prose","value":{"id":"for..in_の分配方法の変更","title":"for..in の分配方法の変更","isH3":false,"content":"<p>JavaScript 1.8 のリリースで生じた変更に、JavaScript 1.7 で導入された配列のキー/値の組への<a href=\"/ja/docs/Web/JavaScript/New_in_JavaScript/1.7\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">分割代入</a>に関連するバグ修正があります。これまでは for ( var [key, value] in array ) を使うことで、配列のキー/値の組を分割代入することができました。しかしこのせいで、配列の配列において値を分割代入することが不可能になっていました。現在この問題は解決しています。(<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=366941\" class=\"external\" rel=\" noopener\">バグ&nbsp;366941</a>)</p>"}}],"toc":[{"text":"JavaScript 1.8 の使用","id":"javascript_1.8_の使用"},{"text":"式クロージャ","id":"式クロージャ"},{"text":"ジェネレータ式","id":"ジェネレータ式"},{"text":"さらなる Array の拡張","id":"さらなる_array_の拡張"},{"text":"for..in の分配方法の変更","id":"for..in_の分配方法の変更"}],"summary":"JavaScript 1.8 は（Firefox 3 に組み込まれている） Gecko 1.9 の一部分です。これは JavaScript 1.7 よりは大きな更新ではありませんが、ECMAScript 4/JavaScript 2 の進歩に追随するための更新がいくつか含まれています。このリリースは JavaScript 1.6 および JavaScript 1.7 で仕様化された新機能の全てを含んでいます。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","source":{"folder":"ja/orphaned/new_in_javascript_1.8","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/orphaned/new_in_javascript_1.8/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"pageTitle":"New in JavaScript 1.8 | MDN","noIndexing":true}}