{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"正規表現パターンの記述","mdn_url":"/ja/docs/orphaned/Web/JavaScript/Guide/Writing_a_Regular_Expression_Pattern","locale":"ja","native":"日本語","sidebarHTML":"","body":[{"type":"prose","value":{"id":"正規表現パターンを書く","title":"正規表現パターンを書く","isH3":true,"content":"<p>正規表現パターンは、<code>/abc/</code> のような単純な文字、または <code>/ab*c/</code> や <code>/Chapter (\\d+)\\.\\d*/</code> のような単純な文字と特殊文字との組み合わせからなります。最後の例では記憶装置として使われている丸括弧が含まれています。パターンのこの部分でなされたマッチは後で使用できるように記憶されます。詳しくは <a href=\"/ja/docs/JavaScript/Guide/Working_with_Regular_Expressions/Using_Parenthesized_Substring_Matches\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">括弧で囲まれた部分文字列のマッチの使用</a> を参照してください。</p>\n<h4 id=\"単純なパターンの使用\">単純なパターンの使用</h4>\n<p>単純なパターンは、直接マッチしている部分を見つけたい文字で構成されます。例えば、/abc/ というパターンは、実際に 'abc' という文字が一緒にその順で存在しているときにだけ、文字列中の文字の組み合わせにマッチします。\"Hi, do you know your abc's?\" や \"The latest airplane designs evolved from slabcraft.\" といった文字列でのマッチは成功します。どちらの場合でも 'abc' という部分文字列にマッチします。\"Grab crab\" という文字列では 'abc' という部分文字列が含まれていないためマッチしません。</p>\n<h4 id=\"特殊文字の使用\">特殊文字の使用</h4>\n<p>1 つ以上の b を見つけたり、ホワイトスペースを見つけたりといった直接マッチより高度なマッチの検索では、パターンに特殊文字を使用します。例えば <code>/ab*c/</code> というパターンでは 1 つの 'a' とその後ろに続く 0 個以上の 'b'（* は直前のアイテムの 0 回以上の出現を意味する）とそのすぐ後ろに続く 'c' からなる文字の組み合わせにマッチします。\"cbbabbbbcdebc\" という文字列ではこのパターンは 'abbbbc' という部分文字列にマッチします。</p>\n<p>以下の表で正規表現で使用できる特殊文字とその意味を詳しく説明します。</p>\n<table class=\"fullwidth-table\">\n  <tbody>\n    <tr>\n      <th>文字</th>\n      <th>意味</th>\n    </tr>\n    <tr>\n      <td>\\</td>\n      <td>次のうちのどちらか。\n        <ul>\n          <li>\n            通常は文字どおり扱われる文字に対して、次の文字は特殊であり、文字どおりに解釈すべきではないと指示する。例えば、<code>/b/ </code>は 'b' という文字にマッチする。b\n            の前にバックスラッシュを置き、<code>/\\b/</code>\n            とすると、その文字は単語の区切りにマッチすることを意味する特殊文字になる。\n          </li>\n          <li>\n            通常は特殊文字として扱われる文字に対して、次の文字は特殊ではなく、文字どおりに解釈すべきであると指示する。例えば、*\n            は直前のアイテムの 0\n            回以上の出現にマッチさせることを意味する特殊文字である。つまり、例えば\n            <code>/a*/</code> は a の 0 文字以上の a へのマッチを意味する。*\n            という文字そのものにマッチさせるには、その直前にバックスラッシュを置く。例えば、<code>/a\\*/</code>\n            は 'a*' にマッチする。\n          </li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td>^</td>\n      <td>\n        入力の先頭にマッチする。複数行フラグが true\n        にセットされている場合は、改行文字直後にもマッチする。 例えば、<code>/^A/</code>\n        は \"an A\" の 'A' にはマッチしないが、\"An A\" の最初の 'A'\n        にはマッチする。\n      </td>\n    </tr>\n    <tr>\n      <td>$</td>\n      <td>\n        入力の末尾にマッチする。複数行フラグが true\n        にセットされている場合は、改行文字直前にもマッチする。 例えば、<code>/t$/</code>\n        は \"eater\" の 't' にはマッチしないが、\"eat\" の 't' にはマッチする。\n      </td>\n    </tr>\n    <tr>\n      <td>*</td>\n      <td>\n        直前の文字の 0 回以上の繰り返しにマッチする。 例えば、<code>/bo*/</code>\n        は \"A ghost booooed\" の 'boooo' や \"A bird warbled\" の 'b'\n        にはマッチするが、\"A goat grunted\" ではマッチしない。\n      </td>\n    </tr>\n    <tr>\n      <td>+</td>\n      <td>\n        直前の文字の 1 回以上の繰り返しにマッチする。{1,} と同等。 例えば、<code>/a+/</code>\n        は \"candy\" の 'a' や、\"caaaaaaandy\" のすべての a にマッチする。\n      </td>\n    </tr>\n    <tr>\n      <td>?</td>\n      <td>\n        直前の文字の 0 回か 1 回の繰り返しにマッチする。\n        <p>\n          例えば、<code>/e?le?/</code> は \"angel\" の 'el' や \"angle\" の 'le'\n          にマッチする。\n        </p>\n        <p>\n          *、+、?、{}\n          といった量指定子の直後に使用した場合、その量指定子をスキップ優先（最小回数にマッチ）にする。これはデフォルトとは逆であり、デフォルトは繰り返し優先（最大回数にマッチ）。例えば、/\\d+/\n          は非グローバルで \"123abc\" の \"123\" にマッチするが、/\\d+?/ の場合、\"1\"\n          だけにマッチする。\n        </p>先読み表現内でも使用できるが、これはこの表の x(?=y) および x(?!y)\n        にて説明。\n      </td>\n    </tr>\n    <tr>\n      <td>.</td>\n      <td>\n        小数点は改行文字以外のどの 1 文字にもマッチする。 例えば、<code>/.n/</code>\n        は \"nay, an apple is on the tree\" の 'an' や 'on'\n        にはマッチするが、'nay' にはマッチしない。\n      </td>\n    </tr>\n    <tr>\n      <td>(x)</td>\n      <td>\n        'x'\n        にマッチし、マッチしたものを記憶しておく。これはキャプチャする括弧と呼ぶ。\n        例えば、<code>/(foo)/</code> は \"foo bar\" の 'foo'\n        にマッチし、これを記憶する。マッチした部分文字列は結果として生成される配列の要素\n        1, ..., b から参照できる。\n      </td>\n    </tr>\n    <tr>\n      <td>(?:x)</td>\n      <td>\n        'x'\n        にマッチするが、マッチしたものは記憶しない。これはキャプチャしない括弧と呼ぶ。マッチした部分文字列は先程のような配列の要素\n        1, ..., n から参照することはできない。\n      </td>\n    </tr>\n    <tr>\n      <td>x(?=y)</td>\n      <td>\n        'x' に 'y' が続く場合のみ 'x' にマッチする。例えば、<code>/Jack(?=Sprat)/</code>\n        は 'Jack' の後ろに 'Sprat' が続く場合のみ 'Jack' にマッチする。<code>/Jack(?=Sprat|Frost)/</code>\n        は 'Jack' の後ろに 'Sprat' または 'Frost' が続く場合のみ 'Jack'\n        にマッチする。しかしながら、'Sprat' も 'Frost'\n        もマッチの結果には現れない。\n      </td>\n    </tr>\n    <tr>\n      <td>x(?!y)</td>\n      <td>\n        'x' に 'y' が続かない場合のみ 'x' にマッチする。例えば、<code>/\\d+(?!\\.)/</code>\n        はある数に小数点が続かない場合のみその数にマッチする。正規表現\n        <code>/\\d+(?!\\.)/.exec(\"3.141\")</code> は 141 にはマッチするが 3.141\n        にはマッチしない。\n      </td>\n    </tr>\n    <tr>\n      <td>x|y</td>\n      <td>\n        'x' または 'y' にマッチする。 例えば、<code>/green|red/</code> は \"green\n        apple\" の \"green' や \"red apple\" の 'red' にマッチする。\n      </td>\n    </tr>\n    <tr>\n      <td>{n}</td>\n      <td>\n        n には正の整数が入る。直前の文字がちょうど n\n        回出現するものにマッチする。 例えば、<code>/a{2}/</code> は \"candy\" の\n        'a' にはマッチしないが、\"caandy\" の すべての a\n        にマッチする。また、\"caaandy\" の最初の 2 つの a にマッチする。\n      </td>\n    </tr>\n    <tr>\n      <td>{n,}</td>\n      <td>\n        n には正の整数が入る。直前の文字が少なくとも n\n        回出現するものにマッチする。 例えば、<code>/a{2,}/</code> は \"candy\" の\n        'a' にはマッチしないが、\"caandy\" や \"caaaaaaandy\" の すべての a\n        にマッチする。\n      </td>\n    </tr>\n    <tr>\n      <td>{n,m}</td>\n      <td>\n        n および m には正の整数が入る。直前の文字が少なくとも n 回、多くとも m\n        回出現するものにマッチする。 例えば、<code>/a{1,3}/</code> は \"cndy\"\n        ではマッチせず、\"candy\" の 'a'、\"caandy\" の最初の 2 つの\n        a、\"caaaaaaandy\" の最初の 3 つの a にマッチする。\"caaaaaaandy\"\n        では元の文字列に a が 4 つ以上あるが、マッチするのは \"aaa\"\n        であることに注意。\n      </td>\n    </tr>\n    <tr>\n      <td>[xyz]</td>\n      <td>\n        文字の集合。囲まれた文字のどれにでもマッチする。ハイフンを用いて文字の範囲を指定することも可能。\n        例えば、<code>/[abcd]/</code> は <code>/[a-d]/</code> と同じ。これは\n        \"brisket\" の 'b' や \"city\" の 'c' にマッチする。\n      </td>\n    </tr>\n    <tr>\n      <td>[^xyz]</td>\n      <td>\n        文字の集合の否定または補集合。角括弧で囲まれていないものにマッチする。ハイフンを用いて文字の範囲を指定することも可能。\n        例えば、<code>/[^abc]/</code> は <code>/[^a-c]/</code> と同じ。これは\n        \"brisket\" の 'r' や \"chop\" の 'h' にマッチする。\n      </td>\n    </tr>\n    <tr>\n      <td>[\\b]</td>\n      <td>後退にマッチする。（\\b と混同してはならない。）</td>\n    </tr>\n    <tr>\n      <td>\\b</td>\n      <td>\n        スペースや改行文字のような単語の区切りにマッチする。（[\\b]\n        と混同してはならない。） 例えば、<code>/\\bn\\w/</code> は \"noonday\" の\n        'no' にマッチする。また、<code>/\\wy\\b/</code> は \"possibly yesterday\" の\n        'ly' にマッチする。\n      </td>\n    </tr>\n    <tr>\n      <td>\\B</td>\n      <td>\n        単語の区切り以外の文字にマッチする。 例えば、<code>/\\w\\Bn/</code> は\n        \"noonday\" の 'on' にマッチする。また、<code>/y\\B\\w/</code> は \"possibly\n        yesterday\" の 'ye' にマッチする。\n      </td>\n    </tr>\n    <tr>\n      <td>\\cX</td>\n      <td>\n        X には制御文字が入る。文字列中の制御文字にマッチする。 例えば、<code>/\\cM/</code>\n        は文字列中の control-M にマッチする。\n      </td>\n    </tr>\n    <tr>\n      <td>\\d</td>\n      <td>\n        数字にマッチする。<code>[0-9]</code> と同等。 例えば、<code>/\\d/</code>\n        や <code>/[0-9]/</code> は \"B2 is the suite number\" の '2'\n        にマッチする。\n      </td>\n    </tr>\n    <tr>\n      <td>\\D</td>\n      <td>\n        数字以外の文字にマッチする。<code>[^0-9]</code> と同等。 例えば、<code>/\\D/</code>\n        や <code>/[^0-9]/</code> は \"B2 is the suite number\" の 'B'\n        にマッチする。\n      </td>\n    </tr>\n    <tr>\n      <td>\\f</td>\n      <td>改ページにマッチする。</td>\n    </tr>\n    <tr>\n      <td>\\n</td>\n      <td>改行にマッチする。</td>\n    </tr>\n    <tr>\n      <td>\\r</td>\n      <td>復帰にマッチする。</td>\n    </tr>\n    <tr>\n      <td>\\s</td>\n      <td>\n        スペース、タブ、改ページ、改行を含む、1\n        つのホワイトスペース文字にマッチする。\n        <code>[\n\\f\\n\\r\\t\\v\\u00A0\\u1680\\u180E\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]</code>\n        と同等。 例えば、<code>/\\s\\w*/</code> は \"foo bar\" の ' bar'\n        にマッチする。\n      </td>\n    </tr>\n    <tr>\n      <td>\\S</td>\n      <td>\n        ホワイトスペース以外の 1 文字にマッチする。<code>[^\n\\f\\n\\r\\t\\v\\u00A0\\u1680\\u180E\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]</code>\n        と同等。 例えば、<code>/\\S\\w*/</code> は \"foo bar\" の 'foo'\n        にマッチする。\n      </td>\n    </tr>\n    <tr>\n      <td>\\t</td>\n      <td>タブにマッチする。</td>\n    </tr>\n    <tr>\n      <td>\\v</td>\n      <td>垂直タブにマッチする。</td>\n    </tr>\n    <tr>\n      <td>\\w</td>\n      <td>\n        アンダースコアを含むどの英数字にもマッチする。<code>[A-Za-z0-9_]</code>\n        と同等。 例えば、<code>/\\w/</code> は \"apple\" の 'a' や \"$5.28\" の '5'\n        や \"3D\" の '3' にマッチする。\n      </td>\n    </tr>\n    <tr>\n      <td>\\W</td>\n      <td>\n        前述以外の文字にマッチする。<code>[^A-Za-z0-9_]</code> と同等。\n        例えば、<code>/\\W/</code> や <code>/[^$A-Za-z0-9_]/</code> は \"50%\" の\n        '%' にマッチする。\n      </td>\n    </tr>\n    <tr>\n      <td>\\n</td>\n      <td>\n        n には正の整数が入る。その正規表現の n\n        番目の括弧の部分にマッチする最後の部分文字列への後方参照（左括弧をカウントする）。\n        例えば、<code>/apple(,)\\sorange\\1/</code> は \"apple, orange, cherry,\n        peach\" の 'apple, orange,' にマッチする。\n      </td>\n    </tr>\n    <tr>\n      <td>\\0</td>\n      <td>NUL 文字にマッチする。この後ろに他の数字を続けてはならない。</td>\n    </tr>\n    <tr>\n      <td>\\xhh</td>\n      <td>hh（2 桁の 16 進数）というコードを持つ文字にマッチする。</td>\n    </tr>\n    <tr>\n      <td>\\uhhhh</td>\n      <td>hhhh（4 桁の 16 進数）というコードを持つ文字にマッチする。</td>\n    </tr>\n  </tbody>\n</table>\n<p><strong>表 4.1 正規表現における特殊文字</strong></p>\n<h4 id=\"括弧の使用\">括弧の使用</h4>\n<p>正規表現パターンの一部分を括弧で囲むことで、マッチした部分文字列のその部分を記憶しておくことができます。一度記憶すると、後からその部分文字列を呼び戻すことができます。これに関しては <a href=\"/ja/Core_JavaScript_1.5_Guide/Working_with_Regular_Expressions/Using_Parenthesized_Substring_Matches\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">括弧で囲まれた部分文字列のマッチの使用</a> で説明しています。</p>\n<p>例えば、<code>/Chapter (\\d+)\\.\\d*/</code> というパターンでは、エスケープされた文字と特殊文字の部分がその例で、その部分を記憶するように指示しています。これは 'Chapter ' という文字列、それに続く 1 文字以上の数字（\\d はいずれかの数字を意味し、+ は 1 回以上の繰り返しを意味する）、それに続く小数点（それ自体は特殊文字であり、小数点の前の \\ はパターンが '.' という文字そのものを探すようにすることを意味する）、それに続く 0 文字以上の数字（\\d は数字を意味し、* は 0 回以上の繰り返しを意味する）にマッチします。さらに、括弧を使うことで最初のマッチした数値を記憶させます。</p>\n<p>このパターンは \"Open Chapter 4.3, paragraph 6\" という文字列で見つかり、'4' が記憶されます。このパターンは \"Chapter 3 and 4\" では見つかりません。この文字列は '3' の後ろにピリオドがないためです。</p>\n<p>マッチした部分を記憶させることなく部分文字列にマッチさせたい場合は、その括弧においてパターンの前に <code>?:</code> を付けてください。例えば、<code>(?:\\d+)</code> は 1 文字以上の数字にマッチしますが、マッチした文字は記憶されません。</p><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ja/docs/orphaned/Web/JavaScript/Guide/Creating_a_Regular_Expression\">« 前のページ</a></li>\n    <li><a class=\"button minimal page-not-created\" href=\"/ja/docs/JavaScript/Guide/Working_with_Regular_Expressions\" title=\"This is a link to an unwritten page\">次のページ »</a></li>\n</ul>"}}],"toc":[],"summary":"正規表現パターンは、/abc/ のような単純な文字、または /ab*c/ や /Chapter (\\d+)\\.\\d*/ のような単純な文字と特殊文字との組み合わせからなります。最後の例では記憶装置として使われている丸括弧が含まれています。パターンのこの部分でなされたマッチは後で使用できるように記憶されます。詳しくは 括弧で囲まれた部分文字列のマッチの使用 を参照してください。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","source":{"folder":"ja/orphaned/web/javascript/guide/writing_a_regular_expression_pattern","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/orphaned/web/javascript/guide/writing_a_regular_expression_pattern/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"pageTitle":"正規表現パターンの記述 | MDN","noIndexing":true}}