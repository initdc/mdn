{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"イベントと DOM","mdn_url":"/ja/docs/orphaned/Web/API/Document_Object_Model/Events","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/Document_Object_Model\">Document Object Model</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>ガイド</summary><ol><li><a href=\"/ja/docs/Web/API/Document_Object_Model/Introduction\">Introduction to the DOM</a></li><li><a href=\"/ja/docs/Web/API/Document_object_model/Using_the_W3C_DOM_Level_1_Core\">Using the W3C DOM Level 1 Core</a></li><li><a href=\"/ja/docs/Web/API/Document_Object_Model/Traversing_an_HTML_table_with_JavaScript_and_DOM_Interfaces\">Traversing an HTML table with JavaScript and DOM Interfaces</a></li><li><a href=\"/ja/docs/Web/API/Document_object_model/Locating_DOM_elements_using_selectors\">Locating DOM elements using selectors</a></li><li><a href=\"/ja/docs/Web/API/Document_object_model/How_to_create_a_DOM_tree\">How to create a DOM tree</a></li><li><a href=\"/ja/docs/Learn/JavaScript/Building_blocks/Events\">Introduction to events</a></li><li><a href=\"/ja/docs/Web/API/Document_Object_Model/Whitespace\">How whitespace is handled by HTML, CSS, and in the DOM</a></li><li><a href=\"/ja/docs/Web/API/Document_Object_Model/Examples\">Examples of web and XML development using the DOM</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>インターフェイス</summary><ol><li><a href=\"/ja/docs/Web/API/AbortController\"><code>AbortController</code></a></li><li><a href=\"/ja/docs/Web/API/AbortSignal\"><code>AbortSignal</code></a></li><li><a href=\"/ja/docs/Web/API/AbstractRange\"><code>AbstractRange</code></a></li><li><a href=\"/ja/docs/Web/API/Attr\"><code>Attr</code></a></li><li><a href=\"/ja/docs/Web/API/CDATASection\"><code>CDATASection</code></a></li><li><a href=\"/ja/docs/Web/API/CharacterData\"><code>CharacterData</code></a></li><li><a href=\"/ja/docs/Web/API/Comment\"><code>Comment</code></a></li><li><a href=\"/ja/docs/Web/API/CustomEvent\"><code>CustomEvent</code></a></li><li><a href=\"/ja/docs/Web/API/Document\"><code>Document</code></a></li><li><a href=\"/ja/docs/Web/API/DocumentFragment\"><code>DocumentFragment</code></a></li><li><a href=\"/ja/docs/Web/API/DocumentType\"><code>DocumentType</code></a></li><li><a href=\"/ja/docs/Web/API/DOMError\"><code>DOMError</code></a></li><li><a href=\"/ja/docs/Web/API/DOMException\"><code>DOMException</code></a></li><li><a href=\"/ja/docs/Web/API/DOMImplementation\"><code>DOMImplementation</code></a></li><li><a href=\"/ja/docs/Web/API/DOMParser\"><code>DOMParser</code></a></li><li><a href=\"/ja/docs/Web/API/DOMPoint\"><code>DOMPoint</code></a></li><li><a href=\"/ja/docs/Web/API/DOMPointReadOnly\"><code>DOMPointReadOnly</code></a></li><li><a href=\"/ja/docs/Web/API/DOMRect\"><code>DOMRect</code></a></li><li><a href=\"/ja/docs/Web/API/DOMTimeStamp\"><code>DOMTimeStamp</code></a></li><li><a href=\"/ja/docs/Web/API/DOMTokenList\"><code>DOMTokenList</code></a></li><li><a href=\"/ja/docs/Web/API/Element\"><code>Element</code></a></li><li><a href=\"/ja/docs/Web/API/Event\"><code>Event</code></a></li><li><a href=\"/ja/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLCollection\"><code>HTMLCollection</code></a></li><li><a href=\"/ja/docs/Web/API/MutationObserver\"><code>MutationObserver</code></a></li><li><a href=\"/ja/docs/Web/API/NamedNodeMap\"><code>NamedNodeMap</code></a></li><li><a href=\"/ja/docs/Web/API/Node\"><code>Node</code></a></li><li><a href=\"/ja/docs/Web/API/NodeIterator\"><code>NodeIterator</code></a></li><li><a href=\"/ja/docs/Web/API/NodeList\"><code>NodeList</code></a></li><li><a href=\"/ja/docs/Web/API/ProcessingInstruction\"><code>ProcessingInstruction</code></a></li><li><a href=\"/ja/docs/Web/API/Range\"><code>Range</code></a></li><li><a href=\"/ja/docs/Web/API/StaticRange\"><code>StaticRange</code></a></li><li><a href=\"/ja/docs/Web/API/Text\"><code>Text</code></a></li><li><a href=\"/ja/docs/Web/API/TextDecoder\"><code>TextDecoder</code></a></li><li><a href=\"/ja/docs/Web/API/TextEncoder\"><code>TextEncoder</code></a></li><li><a href=\"/ja/docs/Web/API/TimeRanges\"><code>TimeRanges</code></a></li><li><a href=\"/ja/docs/Web/API/TreeWalker\"><code>TreeWalker</code></a></li><li><a href=\"/ja/docs/Web/API/XMLDocument\"><code>XMLDocument</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":"はじめに","title":"はじめに","isH3":false,"content":"<p>この章では DOM のイベントモデルを説明します。この <a href=\"https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-Event\" class=\"external\" rel=\" noopener\">Event</a> インターフェイス自身は、 DOM のノード上にイベントを登録する為のインターフェイスと同様であり、<a href=\"/ja/docs/Web/API/EventTarget/addEventListener\">イベントリスナー</a>であるとも言えます。いくつかの長い例は、様々な Event インターフェイスがどのように他と関連するかを示します。</p>\n<p><a href=\"https://www.w3.org/TR/DOM-Level-3-Events/#dom-event-architecture\" class=\"external\" rel=\" noopener\">DOM レベル 3 イベントの原案</a>に、DOM を通して 3 つのフェーズから構成されるイベントフローを明確に説明した素晴らしい説明図があります。</p>\n<p>また、イベントが DOM 内をどのように伝播するかについては更に詳細なコード例、<a href=\"/ja/docs/Web/API/Document_Object_Model/Examples#example_5.3a_event_propagation\">例 5: イベント伝播 (propagation)</a> を参照してください。</p>"}},{"type":"prose","value":{"id":"イベントリスナーの登録","title":"イベントリスナーの登録","isH3":false,"content":"<p>DOM の要素にイベントハンドラーを登録する方法は 3 つあります。</p>"}},{"type":"prose","value":{"id":"eventtarget.addeventlistener","title":"<a href=\"/ja/docs/Web/API/EventTarget/addEventListener\"><code>EventTarget.addEventListener</code></a>","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// myButton は button 要素だと仮定します</span>\nmyButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> greet<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// print and have a look at the event object</span>\n    <span class=\"token comment\">// always print arguments in case of overlooking any other arguments</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'greet:'</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これが最近のウェブページで使われる方法です。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> Internet Explorer 6 から 8 はこの方法をサポートせず、 <a href=\"/ja/docs/Web/API/EventTarget/addEventListener\"><code>EventTarget.attachEvent</code></a> という似た API を代わりにサポートします。ブラウザー間の互換性を確保するには、数多くある JavaScript ライブラリのうちの一つを使用してください。</p>\n</div>\n<p>さらに詳細を知りたい場合は <a href=\"/ja/docs/Web/API/EventTarget/addEventListener\"><code>EventTarget.addEventListener</code></a> のリファレンスを参照してください。</p>","titleAsText":"EventTarget.addEventListener"}},{"type":"prose","value":{"id":"html_属性","title":"<a href=\"/ja/docs/Learn/JavaScript/Building_blocks/Events\">HTML 属性</a>","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello world!'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>HTML 属性に書かれたこの JavaScript コードには、 <code>event</code> 引数を通してイベントオブジェクトが渡されます。<a href=\"https://dev.w3.org/html5/spec/webappapis.html#the-event-handler-processing-algorithm\" class=\"external\" rel=\" noopener\">返値は HTML の仕様で定義された特別な方法で処理されます</a>。</p>\n<div class=\"notecard warning\" id=\"sect2\">\n  <p><strong>Warning:</strong> この方法は避けてください。これはマークアップを増加させ、可読性を下げます。コンテンツと振る舞いが正しく分離されておらず、バグの発見が困難になります。</p>\n</div>","titleAsText":"HTML 属性"}},{"type":"prose","value":{"id":"dom_要素のプロパティ","title":"DOM 要素のプロパティ","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// myButton は button 要素と仮定します</span>\nmyButton<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>この関数は 1 つの <code>event</code> 引数を取るように定義できます。<a href=\"https://dev.w3.org/html5/spec/webappapis.html#the-event-handler-processing-algorithm\" class=\"external\" rel=\" noopener\">返り値は HTML の仕様で定義された特別な方法で処理されます</a>。</p>\n<p>この書き方の問題は、各要素の各イベント毎に 1 つだけしかハンドラーを設定できないことです。</p>"}},{"type":"prose","value":{"id":"event_インターフェイスへのアクセス","title":"Event インターフェイスへのアクセス","isH3":false,"content":"<p>イベントハンドラーは (DOM 要素や文書、 <a href=\"/ja/docs/Web/API/Window\"><code>window</code></a> オブジェクト等を含めた) 様々なオブジェクトに追加されるでしょう。イベントが発生すると、イベントオブジェクトが生成され順番にイベントリスナーが呼ばれます。</p>\n<p><a href=\"/ja/docs/Web/API/Event\"><code>Event</code></a> インターフェイスは、イベントハンドラーの内部からアクセス可能で、第 1 引数としてイベントオブジェクトを介して渡されます。以下のシンプルな例は、イベントハンドラーにどのようにイベントオブジェクトが渡され、その中でどのように使われるかを示します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// evt 引数は自動的にイベントオブジェクトに割り当てられます</span>\n  <span class=\"token comment\">// console.log と alert の違いに注意してください</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'print:'</span><span class=\"token punctuation\">,</span> evt<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>evt<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// どの関数も意味を持つ適切な名前を付けてください</span>\ntable_el<span class=\"token punctuation\">.</span>onclick <span class=\"token operator\">=</span> print\n</code></pre></div>"}},{"type":"prose","value":{"id":"subnav","title":"Subnav","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/API/Document_Object_Model\">DOM リファレンス</a></li>\n  <li><a href=\"/ja/docs/Web/API/Document_Object_Model/Introduction\">DOM への導入</a></li>\n  <li><a href=\"/ja/docs/orphaned/Web/API/Document_Object_Model/Events\">イベントと DOM</a></li>\n  <li><a href=\"/ja/docs/Web/API/Document_Object_Model/Examples\">例</a></li>\n</ul>"}}],"toc":[{"text":"はじめに","id":"はじめに"},{"text":"イベントリスナーの登録","id":"イベントリスナーの登録"},{"text":"Event インターフェイスへのアクセス","id":"event_インターフェイスへのアクセス"},{"text":"Subnav","id":"subnav"}],"summary":"この章では DOM のイベントモデルを説明します。この Event インターフェイス自身は、 DOM のノード上にイベントを登録する為のインターフェイスと同様であり、イベントリスナーであるとも言えます。いくつかの長い例は、様々な Event インターフェイスがどのように他と関連するかを示します。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","source":{"folder":"ja/orphaned/web/api/document_object_model/events","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/orphaned/web/api/document_object_model/events/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"pageTitle":"イベントと DOM | MDN","noIndexing":true}}