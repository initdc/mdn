{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"フレームタイミング API の使用","mdn_url":"/ja/docs/orphaned/Web/API/Frame_Timing_API/Using_the_Frame_Timing_API","locale":"ja","native":"日本語","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard experimental\" id=\"sect1\"><p><strong>Experimental:</strong> <strong>これは<a href=\"/ja/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">実験的な機能</a>です。</strong><br>本番で使用する前に<a href=\"#browser_compatibility\">ブラウザー互換性一覧表</a>をチェックしてください。</p></div>\n<p>The <strong><code>PerformanceFrameTiming</code></strong> interface provides <em>frame</em> timing data about the browser's event loop. A <em>frame</em> represents the amount of work a browser does in <a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#processing-model-8\" class=\"external\" rel=\" noopener\">one event loop iteration</a> such as processing DOM events, resizing, scrolling, rendering, CSS animations, etc. A <em>frame rate</em> of 60 fps (frames per second) for a 60 Hz refresh rate is a common target for a good <em>responsive</em> user experience. This means the browser should process a frame in about 16.7ms.</p>\n<p>An application can register a <a href=\"/ja/docs/Web/API/PerformanceObserver\"><code>PerformanceObserver</code></a> for \"<code>frame</code>\" <a href=\"/ja/docs/Web/API/PerformanceEntry\" title=\"performance entry types\"><code>performance entry types</code></a> and the observer will have data about the duration of each frame event. This data can be used to help identify areas that take too long to provide a good user experience.</p>\n<p>This document describes how to use the <a href=\"/ja/docs/orphaned/Web/API/PerformanceFrameTiming\"><code>PerformanceFrameTiming</code></a> interfaces including example code. For an overview of these interfaces see <a href=\"/docs/Web/API/Frame_Timing_API\">Frame Timing API</a>.</p>"}},{"type":"prose","value":{"id":"フレームオブザーバー","title":"フレームオブザーバー","isH3":false,"content":"<p><svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg>The <em>performance observer</em> interfaces allow an application to register an <em>observer</em> for specific <a href=\"/ja/docs/Web/API/PerformanceEntry\" title=\"performance event types\"><code>performance event types</code></a>. When one of those event types is added to the browser's <em>performance timeline</em>, the application is notified of the event via the observer's callback function that was specified when the observer was created.</p>"}},{"type":"prose","value":{"id":"オブザーバーを作成する","title":"オブザーバーを作成する","isH3":false,"content":"<p>To observe \"<code>frame</code>\" performance entry types, the application first creates a <a href=\"/ja/docs/Web/API/PerformanceObserver\"><code>PerformanceObserver</code></a> object with a specific frame observer callback. In the following example, two observers for the \"<code>frame</code>\" <a href=\"/ja/docs/Web/API/PerformanceEntry/entryType\" title=\"performance entry type\"><code>performance entry type</code></a> are created and the first observer constructor uses inline function syntax.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">create_frame_observer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>PerformanceObserver <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Register the performance observer</span>\n  <span class=\"token keyword\">var</span> observe_frame <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PerformanceObserver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">list</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Log the frame entries</span>\n    <span class=\"token keyword\">var</span> perfEntries <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">getEntriesByType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"frame\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> perfEntries<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OBS #1: [\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\"] = \"</span> <span class=\"token operator\">+</span> perfEntries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Only observe 'frame' events</span>\n  observe_frame<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">entryTypes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'frame'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">init</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">create_frame_observer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> obs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PerformanceObserver</span><span class=\"token punctuation\">(</span>frame_observer_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  obs<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">entryTypes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'frame'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">frame_observer_2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">list</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Log the frame entries</span>\n  <span class=\"token keyword\">var</span> perfEntries <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">getEntriesByType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"frame\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> perfEntries<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OBS #2: [\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\"] = \"</span> <span class=\"token operator\">+</span> perfEntries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">&lt;</span>body onload<span class=\"token operator\">=</span><span class=\"token string\">\"init(event)\"</span><span class=\"token operator\">&gt;</span>\n</code></pre></div>\n<p>When the browser adds a new \"<code>frame</code>\" entry to the performance timeline, both of the observer callbacks will be invoked.</p>"}},{"type":"prose","value":{"id":"通知を登録する","title":"通知を登録する","isH3":false,"content":"<p>After an observer is created, the next step is to use the <a href=\"/ja/docs/Web/API/PerformanceObserver/observe\"><code>PerformanceObserver.observe()</code></a> method to specify the set of performance events to observe. In the following example, the observer only registers for \"<code>frame</code>\" <a href=\"/ja/docs/Web/API/PerformanceEntry/entryType\" title=\"performance entry\"><code>performance entry</code></a> notifications.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code> <span class=\"token keyword\">var</span> observe_frame <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PerformanceObserver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">list</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// Process the frame ...</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// Only observe 'frame' events</span>\n observe_frame<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">entryTypes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'frame'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>In the following example, the observer registers to be notified when several different <a href=\"/ja/docs/Web/API/PerformanceEntry/entryType\" title=\"performance entry types\"><code>performance entry types</code></a> are added to the performance timeline.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code> <span class=\"token keyword\">var</span> observe_all <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PerformanceObserver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">list</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">var</span> perfEntries <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">getEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> perfEntries<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>perfEntries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>entryType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">case</span> <span class=\"token string\">\"frame\"</span><span class=\"token operator\">:</span> <span class=\"token function\">process_frame</span><span class=\"token punctuation\">(</span>perfEntries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">case</span> <span class=\"token string\">\"mark\"</span><span class=\"token operator\">:</span> <span class=\"token function\">process_mark</span><span class=\"token punctuation\">(</span>perfEntries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">case</span> <span class=\"token string\">\"measure\"</span><span class=\"token operator\">:</span> <span class=\"token function\">process_measure</span><span class=\"token punctuation\">(</span>perfEntries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">case</span> <span class=\"token string\">\"resource\"</span><span class=\"token operator\">:</span> <span class=\"token function\">process_resource</span><span class=\"token punctuation\">(</span>perfEntries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unexpected performance entry type: \"</span> <span class=\"token operator\">+</span> perfEntries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>entryType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// Observe frame, mark, measure and resource events</span>\n observe_frame<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">entryTypes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'frame'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mark'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'measure'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'resource'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"フレームデータへのアクセス","title":"フレームデータへのアクセス","isH3":false,"content":"<p>When a frame <a href=\"/ja/docs/Web/API/PerformanceObserver\" title=\"observer\"><code>observer</code></a> is invoked, the observer callback is given one argument that is a <a href=\"/ja/docs/Web/API/PerformanceObserverEntryList\"><code>PerformanceObserverEntryList</code></a> object. This object has three methods to retrieve frame data:</p>\n<dl>\n  <dt id=\"performanceobserverentrylist.getentries_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PerformanceObserverEntryList/getEntries\"><code>PerformanceObserverEntryList.getEntries()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>Returns a list of explicitly <em>observed</em> <a href=\"/ja/docs/Web/API/PerformanceEntry\"><code>PerformanceEntry</code></a> objects based on the list of entry types given to <a href=\"/ja/docs/Web/API/PerformanceObserver/observe\"><code>PerformanceObserver.observe()</code></a>.</p>\n  </dd>\n  <dt id=\"performanceobserverentrylist.getentriesbytype_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PerformanceObserverEntryList/getEntriesByType\"><code>PerformanceObserverEntryList.getEntriesByType()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>Returns a list of explicitly <em>observed</em> <a href=\"/ja/docs/Web/API/PerformanceEntry\"><code>PerformanceEntry</code></a> objects of the given <em>entry type</em>.</p>\n  </dd>\n  <dt id=\"performanceobserverentrylist.getentriesbyname_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PerformanceObserverEntryList/getEntriesByName\"><code>PerformanceObserverEntryList.getEntriesByName()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>Returns a list of explicitly <em>observed</em> <a href=\"/ja/docs/Web/API/PerformanceEntry\"><code>PerformanceEntry</code></a> objects based on the given <em>name</em> and <em>entry type</em>.</p>\n  </dd>\n</dl>\n<p>In the following example, the observer only processes \"<code>frame</code>\" entries.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> <span class=\"token constant\">THRESHOLD</span> <span class=\"token operator\">=</span> <span class=\"token number\">1500</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> observe_frame <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PerformanceObserver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">list</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> perfEntries <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">getEntriesByType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"frame\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> perfEntries<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>perfEntries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>duration <span class=\"token operator\">&gt;</span> <span class=\"token constant\">THRESHOLD</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Warning: frame '\"</span> <span class=\"token operator\">+</span> <span class=\"token constant\">THRESHOLD</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"' exceeded!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobserve_frame<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">entryTypes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'frame'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"ツールが助けになります！","title":"ツールが助けになります！","isH3":false,"content":"<p>First, perhaps using <em>the tools will save you</em> is a <em>bit too strong</em> but performance tools can certainly help identify code that is not conformant to some expected time threshold. This section briefly describes the web performance tools for the Firefox and Chrome/Canary browsers.</p>"}},{"type":"prose","value":{"id":"firefox_performance_tool","title":"Firefox performance tool","isH3":true,"content":"<p>Firefox's performance tool allows the developer to <em>record</em> a piece of the user's interaction and the data obtained during the recording is used to create a <em>profile</em> of the browser's activity. The profile includes a <em><a href=\"https://firefox-source-docs.mozilla.org/devtools-user/performance/waterfall/index.html\" class=\"external\" rel=\" noopener\">waterfall</a></em> of the activity such as event handling, layout, painting, scripting, etc.</p>\n<p>Firefox's performance tool also includes a <em><a href=\"https://firefox-source-docs.mozilla.org/devtools-user/performance/frame_rate/index.html\" class=\"external\" rel=\" noopener\">frame rate graph</a></em> which provides timestamps for each frame including the average frame rate and the minimum and maximum rates (for a specific recording session). This data, along with the waterfall data, gives an indication of where a site might be having frame related performance problems (for example, by correlating the recording's minimum rates with their respective waterfall events).</p>\n<p>The performance tool's <em><a href=\"https://firefox-source-docs.mozilla.org/devtools-user/performance/flame_chart/index.html\" class=\"external\" rel=\" noopener\">flame chart</a></em> and <em><a href=\"https://firefox-source-docs.mozilla.org/devtools-user/performance/call_tree/index.html\" class=\"external\" rel=\" noopener\">call tree</a></em> tabs provide data to help analyze the site's JavaScript usage. The call tree shows where the application is spending most of its time, whereas the flame chart shows the state of the JavaScript stack for the code at every millisecond during the performance profile. This provides a way to know exactly which function was executing at any point during the recording, how long it ran, and where it was called from.</p>"}},{"type":"prose","value":{"id":"chrome_performance_tool","title":"Chrome performance tool","isH3":true,"content":"<p>The Chrome (and Canary) browsers also have a performance tool with similar functions as Firefox. See <a href=\"https://developer.chrome.com/devtools/docs/timeline\" class=\"external\" rel=\" noopener\">Performance profiling with the Timeline</a> for more information about this tool.</p>"}},{"type":"prose","value":{"id":"あわせて参照","title":"あわせて参照","isH3":false,"content":"<ul>\n  <li><a href=\"https://firefox-source-docs.mozilla.org/devtools-user/performance/frame_rate/index.html\" class=\"external\" rel=\" noopener\">Frame Rate (Firefox Performance Tool)</a></li>\n  <li><a href=\"https://w3c.github.io/frame-timing/\" class=\"external\" rel=\" noopener\">Frame Timing</a>; W3C Editor's Draft</li>\n</ul>"}}],"toc":[{"text":"フレームオブザーバー","id":"フレームオブザーバー"},{"text":"オブザーバーを作成する","id":"オブザーバーを作成する"},{"text":"通知を登録する","id":"通知を登録する"},{"text":"フレームデータへのアクセス","id":"フレームデータへのアクセス"},{"text":"ツールが助けになります！","id":"ツールが助けになります！"},{"text":"あわせて参照","id":"あわせて参照"}],"summary":"The PerformanceFrameTiming interface provides frame timing data about the browser's event loop. A frame represents the amount of work a browser does in one event loop iteration such as processing DOM events, resizing, scrolling, rendering, CSS animations, etc. A frame rate of 60 fps (frames per second) for a 60 Hz refresh rate is a common target for a good responsive user experience. This means the browser should process a frame in about 16.7ms.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","source":{"folder":"ja/orphaned/web/api/frame_timing_api/using_the_frame_timing_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/orphaned/web/api/frame_timing_api/using_the_frame_timing_api/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/orphaned/Web/API/Frame_Timing_API","title":"Frame Timing API"},{"uri":"/ja/docs/orphaned/Web/API/Frame_Timing_API/Using_the_Frame_Timing_API","title":"フレームタイミング API の使用"}],"pageTitle":"フレームタイミング API の使用 | MDN","noIndexing":true}}