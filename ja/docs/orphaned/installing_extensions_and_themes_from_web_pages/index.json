{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Web ページから拡張機能とテーマをインストールする","mdn_url":"/ja/docs/orphaned/Installing_Extensions_and_Themes_From_Web_Pages","locale":"ja","native":"日本語","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"ja/Extension\">拡張機能</a> と <a href=\"ja/Themes\">テーマ</a> を Web ページからインストールするには、XPI ファイルに直接リンクしたり、<a href=\"ja/XPInstall_API_Reference/InstallTrigger_Object\">InstallTrigger</a> オブジェクトを使用するなど様々な方法があります。</p>\n<p>拡張機能と Web ページの作者はユーザに対して最高の経験を提供するように、以下にかかれた方法で XPI をインストールできるようにすることを奨励します。</p>"}},{"type":"prose","value":{"id":"web_スクリプトの例","title":"Web スクリプトの例","isH3":true,"content":"<pre class=\"notranslate\">&lt;script type=\"application/x-javascript\"&gt;\n&lt;!--\nfunction install (aEvent)\n{\n  var params = {\n    \"Foo\": { URL: aEvent.target.href,\n             IconURL: aEvent.target.getAttribute(\"iconURL\"),\n             Hash: aEvent.target.getAttribute(\"hash\"),\n             toString: function () { return this.URL; }\n    }\n  };\n  InstallTrigger.install(params);\n\n  return false;\n}\n--&gt;\n&lt;/script&gt;\n\n&lt;a href=\"http://www.example.com/foo.xpi\"\n  iconURL=\"http://www.example.com/foo.png\"\n  hash=\"sha1:28857e60d043447c5f4550853f2d40770b326a13\"\n  onclick=\"return install(event);\"&gt;拡張機能をインストール!&lt;/a&gt;\n</pre>\n<p>それでは、一つずつ見ていきましょう。HTML の &lt;a&gt; タグはインストールリンクです。href 属性は拡張機能の XPI ファイルへ直接リンクしており、リンクをマウスでポイントしたときにリンク先がロケーションバーに表示されます。ユーザは、リンクを右クリックして \"名前を付けてリンク先を保存...\" を選び、簡単に XPI ファイルを保存することができます。</p>\n<p>リンクがクリックされると <code>install</code> 関数が呼び出され、パラメータがイベントオブジェクトに渡されます。</p>\n<p>install 関数は、はじめにパラメータブロックを作成します:</p>\n<pre class=\"notranslate\">var params = {\n  \"Foo\": { URL: aEvent.target.href,\n           IconURL: aEvent.target.getAttribute(\"iconURL\"),\n           Hash: aEvent.target.getAttribute(\"hash\"),\n           toString: function () { return this.URL; }\n};\n</pre>\n<p>これは、確認ダイアログで使用するディスプレイ名(Foo) および拡張機能への URL(<code>href</code> で再び呼び出されるリンク)、確認ダイアログで表示するためのアイコンへの URL(IconURL)、xpi ファイルコンテンツの(改変されたダウンロードを防ぐための)ハッシュ、このコードを Firefox 0.8 以前で動作させるための <code>toString</code> 関数を指定しています。また、確認ダイアログで使用するアイコンが無いときなど、古いスタイルのパラメータブロック(<code>{ \"Foo\": aEvent.target.href }</code>) を使用することもできます。</p>\n<p><code>InstallTrigger.install</code> は拡張機能をインストールするときにパラメータブロックと共に呼び出されます。</p>\n<pre class=\"notranslate\">return false;\n</pre>\n<p>この最後の部分は最も重要です。リンクをクリックしてスクリプトが実行されリンク先が見つからないとき、install 関数は <code>false</code> を返さなくてはなりません。この手順を省略した場合、ユーザは二つのインストールダイアログを見ることになります。実際、インストールを二度要求されます)。一つは <code>InstallTrigger</code> によって、もう一つは XPI ファイルを直接読み込もうとすることによってです。</p>"}},{"type":"prose","value":{"id":"インストールオブジェクトに利用可能なパラメータ","title":"インストールオブジェクトに利用可能なパラメータ","isH3":true,"content":"<p><code>InstallTrigger.install</code> メソッドは、オブジェクトのインストール時に使用される、いくつかのプロパティを持つ JavaScript オブジェクトをパラメータとして受け入れます。</p>\n<h4 id=\"url\">URL</h4>\n<p><code>URL</code> プロパティは、インストールする XPI ファイルの URL を指定します。このプロパティは必須です。</p>\n<h4 id=\"iconurl\">IconURL</h4>\n<p><code>IconURL</code> プロパティは、インストールダイアログ内に表示されるアイコンを指定します。このプロパティは任意です。アイコンを指定ない場合は、デフォルトのアイコン(普通は緑色のパズルピース) が使用されます。アイコンは Firefox でサポートされた画像形式で、32×32 ピクセルの大きさにします。</p>\n<h4 id=\"hash\">Hash</h4>\n<p><code>Hash</code> プロパティは XPI ファイルコンテンツのハッシュ値を指定します。これはダウンロードしたファイルを検証し、例えば、ミラーサーバによって改変されたファイルが供給されるのを防ぐために使用されます。<a href=\"ja/NsICryptoHash\">nsICryptoHash</a> によってサポートされた任意のハッシュ関数を使用することができます。ハッシュ値は <code>hash function:hash value</code> の書式で、例えば、<code>sha1:28857e60d043447c5f4550853f2d40770b326a13</code> のように指定します。</p>\n<h4 id=\"tostring\">toString()</h4>\n<p><code>toString()</code> プロパティは、Firefox 1.0 よりも古いバージョンとの互換性のため、また Seamonkey などの他のアプリケーションのために、XPI ファイルの URL を返すべきです。</p>"}},{"type":"prose","value":{"id":"テーマ","title":"テーマ","isH3":true,"content":"<p>テーマの適用については、<code>installChrome</code> 関数の使用を除き、ほとんどすべてのことを書きました。多くのサイトは拡張機能のインストールを、XPI ファイルに直接リンクしてインストールの確認 UI を表示する方法に頼っており、また多くのサイトがテーマの JAR ファイルも同様の (正しくない) 方法でインストールしようとするため、なぜ自動的に検出されインストールされないのか不思議に思っています。XPI ファイルは Mozilla 仕様の拡張なので特別にそれを扱うことができますが、JAR ファイルはそうではありません。すべての .jar ファイルが Firefox のテーマではないため、.jar ファイルへのリンクをクリックしても、名前を付けて保存ダイアログが表示されるだけです。そういうわけで、テーマのインストールにはいつも <code>InstallTrigger</code> API を使用しなければなりません。</p>"}},{"type":"prose","value":{"id":"updateenabled_についての注意","title":"updateEnabled() についての注意","isH3":true,"content":"<p><code>InstallTrigger</code> は、<code>InstallTrigger.install</code> を呼び出す前に <code>updateEnabled</code> 関数を呼び出します。これは <code>updateEnabled</code> 自身が内部で呼び出されるため、インストールには必要ありません。さらに、あなたの配布サイトがユーザのホワイトリストに無い場合、 <code>updateEnabled</code> を呼び出すことによって問題を起こすかもしれません。Firefox はインストール時や <code>installChrome</code> が呼び出されたとき、XPI ファイルが読み込まれたときに \"インストール拒否\" メッセージだけを表示します。次のようなコードが含まれ、あなたのサイトがホワイトリストに無い場合:</p>\n<pre class=\"notranslate\">if (InstallTrigger.updateEnabled())\n  InstallTrigger.install({\"Foo\": \"foo.xpi\"});\n</pre>\n<p>ユーザがこのコードを呼び出すと、<code>updateEnabled</code> は <code>false</code> を返します。<code>updateEnabled</code> はあなたのサイトがホワイトリストに無いことを見つけ、ユーザに何の通知もせず、インストールを呼び出しません。</p>\n<p>従って <code>updateEnabled</code> は、ソフトウェアのインストールが無効になっていること、またはあなたのサイトがホワイトリストに無いことを知らせる内容をページに表示するためだけに使用するべきです。また、ホワイトリストのインストールコードパスにはあなたのサイトを含めないでください。</p>\n<p>(* ぜひとも、より大掛かりなインストールシステムの開発を止めようとはしないでください。私は、より多くの拡張機能の配布者が様々なケースでこれらを扱うことができるようにするためのガイドとして、このドキュメントを提供しています。)</p>"}}],"toc":[],"summary":"拡張機能 と テーマ を Web ページからインストールするには、XPI ファイルに直接リンクしたり、InstallTrigger オブジェクトを使用するなど様々な方法があります。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","source":{"folder":"ja/orphaned/installing_extensions_and_themes_from_web_pages","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/orphaned/installing_extensions_and_themes_from_web_pages/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"pageTitle":"Web ページから拡張機能とテーマをインストールする | MDN","noIndexing":true}}