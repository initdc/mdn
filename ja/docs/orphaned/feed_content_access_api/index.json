{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Feed content access API","mdn_url":"/ja/docs/orphaned/Feed_content_access_API","locale":"ja","native":"日本語","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"ja/Firefox_2\">Firefox 2</a> と Thunderbird 2 は拡張製作者に RSS と Atom フィードへのアクセスを簡単にする一連のインターフェースを導入します。</p>"}},{"type":"prose","value":{"id":"フィードインタフェース","title":"フィードインタフェース","isH3":false,"content":"<dl>\n  <dt id=\"nsifeed\"><a href=\"ja/NsIFeed\"><code>nsIFeed</code></a></dt>\n  <dd>\n    <p>RSS あるいは Atom フィードを表します。</p>\n  </dd>\n  <dt id=\"nsifeedcontainer\"><a href=\"ja/NsIFeedContainer\"><code>nsIFeedContainer</code></a></dt>\n  <dd>\n    <p>サブクラスされたフィード関連の様々なインタフェースのベースクラス。</p>\n  </dd>\n  <dt id=\"nsifeedelementbase\"><a href=\"ja/NsIFeedElementBase\"><code>nsIFeedElementBase</code></a></dt>\n  <dd>\n    <p>サブクラスされたフィード関連の他の様々なインタフェースのベースクラス。</p>\n  </dd>\n  <dt id=\"nsifeedentry\"><a href=\"ja/NsIFeedEntry\"><code>nsIFeedEntry</code></a></dt>\n  <dd>\n    <p>RSS あるいは Atom フィードの単一のエントリを表します。</p>\n  </dd>\n  <dt id=\"nsifeedgenerator\"><a href=\"ja/NsIFeedGenerator\"><code>nsIFeedGenerator</code></a></dt>\n  <dd>\n    <p>RSS あるいは Atom フィードを生成したソフトウェアを記述します。</p>\n  </dd>\n  <dt id=\"nsifeedperson\"><a href=\"ja/NsIFeedPerson\"><code>nsIFeedPerson</code></a></dt>\n  <dd>\n    <p>人を表します。人の名前とメールアドレス及びホームページアドレスを含んでいます。</p>\n  </dd>\n  <dt id=\"nsifeedprocessor\"><a href=\"ja/NsIFeedProcessor\"><code>nsIFeedProcessor</code></a></dt>\n  <dd>\n    <p>RSS と Atom フィードをパースします。</p>\n  </dd>\n  <dt id=\"nsifeedprogresslistener\"><a href=\"ja/NsIFeedProgressListener\"><code>nsIFeedProgressListener</code></a></dt>\n  <dd>\n    <p>パース処理中にメッセージを受け取るために RSS あるいは Atom フィードをパースしたいプログラムによって実装されます。</p>\n  </dd>\n  <dt id=\"nsifeedresult\"><a href=\"ja/NsIFeedResult\"><code>nsIFeedResult</code></a></dt>\n  <dd>\n    <p>フィードのパースの結果を表現します。</p>\n  </dd>\n  <dt id=\"nsifeedresultlistener\"><a href=\"ja/NsIFeedResultListener\"><code>nsIFeedResultListener</code></a></dt>\n  <dd>\n    <p>パースが完了したときに通知を受け取るために RSS あるいは Atom フィードをパースしたいプログラムによって実装されます。</p>\n  </dd>\n  <dt id=\"nsifeedtextconstruct\"><a href=\"ja/NsIFeedTextConstruct\"><code>nsIFeedTextConstruct</code></a></dt>\n  <dd>\n    <p>フィードのテキストを表します: テキストをプレーンテキストあるいは HTML でフェッチするための関数を含んでいます。</p>\n  </dd>\n  <dt id=\"nsiscriptableunescapehtml\"><a href=\"ja/NsIScriptableUnescapeHTML\"><code>nsIScriptableUnescapeHTML</code></a></dt>\n  <dd>\n    <p>HTML 文字列をアンエスケープするためのユーティリティクラス。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"例_web_からフィードを読む","title":"例: Web からフィードを読む","isH3":false,"content":"<p>フィードを読み込みパースすることは本当に簡単です。 フィードを読み込むために <a href=\"ja/XMLHttpRequest\"><code>XMLHttpRequest</code></a> を使い、次にフィードをパースするためにその文字列を <a href=\"ja/NsIFeedProcessor\"><code>nsIFeedProcessor</code></a> に渡します。</p>\n<p>フィードを読み込み、パーサにそれを渡すことはこのようなコードを使って行うことができます:</p>\n<pre class=\"notranslate\">  fetch: function(feedUrl)\n  {\n    var httpRequest = null;\n\n    function infoReceived() {\n      var data = httpRequest.responseText;\n\n      var ioService = Components.classes['@mozilla.org/network/io-service;1']\n                                         .getService(Components.interfaces.nsIIOService);\n      var uri = ioService.newURI(feedUrl, null, null);\n\n      if (data.length) {\n        var parser = Components.classes[\"@mozilla.org/feed-processor;1\"]\n                                        .createInstance(Components.interfaces.nsIFeedProcessor);\n        var listener = new FeedTestResultListener();\n        try {\n          parser.listener = listener;\n          parser.parseFromString(data, uri);\n        }\n        catch(e) {\n          alert(\"フィードのパースでエラーが発生しました。\");\n        }\n      }\n    }\n\n    httpRequest = new XMLHttpRequest();\n\n    httpRequest.open(\"GET\", feedUrl, true);\n    try {\n      httpRequest.onload = infoReceived;\n      httpRequest.send(null);\n    }\n    catch(e) {\n      alert(e);\n    }\n  }\n</pre>\n<p><a href=\"ja/NsIFeedProcessor\"><code>nsIFeedProcessor</code></a> インタフェースであなたはいくつかの可能なソースからフィードデータをパースできます; この場合、ドキュメントを文字列に読み込み、次に <code>parseFromString()</code> メソッドを使ってパースしています。しかし <code>parseFromStream()</code> を使ってファイルから、<code>parseAsync()</code> を使って直接 URL からパースすることもできます。</p>\n<p>パースされたフィードの実際の処理は <code>FeedTestResultListener</code> オブジェクトの <code>handleResult()</code> を使って行われます。そのコードはこのようになります:</p>\n<pre class=\"notranslate\">    FeedTestResultListener.prototype = {\n      handleResult: function(result) {\n        var feed = result.doc;\n\n        feed.QueryInterface(Components.interfaces.nsIFeed);\n\n        // 新しいウィンドウを開く\n\n        var win = window.open(\"\", \"FeedTest_Window\");\n        var doc = win.document.wrappedJSObject;\n\n        doc.open();\n\n        // HTML ヘッダとページタイトルを書き込む\n\n        doc.write(\"&lt;html&gt;&lt;head&gt;&lt;title&gt;Feed: \" + feed.title.text + \"&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\");\n        doc.write(\"&lt;h1&gt;\" + feed.title.text + \"&lt;/h1&gt;&lt;p&gt;\");\n\n        var itemArray = feed.items;\n        var numItems = itemArray.length;\n\n        // 記事の情報を書き込む\n\n        if (!numItems) {\n          doc.write(\"&lt;i&gt;便りのないのは良い便り!&lt;/i&gt;\");\n        }\n        else {\n          var i;\n          var theEntry;\n          var theUrl;\n          var info;\n\n          for (i=0; i&lt;numItems; i++) {\n            theEntry = itemArray.queryElementAt(i, Components.interfaces.nsIFeedEntry);\n\n            if (theEntry) {\n              theUrl =\n              doc.write('&lt;b&gt;&lt;a href=\"' + theEntry.link.resolve(\"\") + '\"&gt;' + theEntry.title.text + '&lt;/a&gt;&lt;/b&gt;&lt;br&gt;');\n              if (theEntry.summary) {\n                info = theEntry.summary.text + \"&lt;/p&gt;&lt;hr&gt;&lt;p&gt;\";\n              }\n              else {\n                info = theEntry.content.text + \"&lt;/p&gt;&lt;hr&gt;&lt;p&gt;\";\n              }\n              doc.write(\"&lt;blockquote&gt;\" + info);\n              doc.write(\"&lt;/blockquote&gt;&lt;p&gt;\");\n            }\n          }\n        }\n\n        // ドキュメントを閉じる; 完了!\n\n        doc.write(\"&lt;/body&gt;&lt;/html&gt;\");\n        doc.close();\n      }\n    }\n</pre>\n<p><code>handleResult()</code> 関数はフィードを表現している <a href=\"ja/NsIFeedResult\"><code>nsIFeedResult</code></a> を引数として受け取ります。<code>doc</code> プロパティは全てのフィードデータを含んだ <a href=\"ja/NsIFeed\"><code>nsIFeed</code></a> です。</p>\n<p>フィードのタイトルを得るためには、<code>feed.title</code> プロパティを見てください。タイトルは様々なフォーマットのテキストを表す <a href=\"ja/NsIFeedTextConstruct\"><code>nsIFeedTextConstruct</code></a> です。HTML エンコードされたテキストとしてフィードのタイトルを得るために、その <code>text</code> プロパティを取得します。代りに <code>plainText()</code> メソッドを使うことで、プレーンテキストに変換されたタイトルのコピーを得ることができます。</p>\n<p>次に、<code>feed.items</code> <a href=\"ja/NsIArray\"><code>nsIArray</code></a> を見ることでフィードのアイテムの配列をスキャンしています。この配列はそれぞれのフィードアイテムを表す <a href=\"ja/NsIFeedEntry\"><code>nsIFeedEntry</code></a> オブジェクトを含んでいます。</p>\n<p>それぞれのアイテムの title と link、summary そして content プロパティをみることでドキュメントのコンテンツを作り上げています。 link の完全な URL は link の <code>resolve()</code> メソッドを使うことで得ることができます。</p>\n<p>フィードのフェッチを初期化するには、単に <code>fetch(url)</code> と呼びます。これはフィードコンテンツを含む新しいウィンドウを開ききます。それはそれぞれのアイテムのタイトル(記事自体へのクリック可能なリンクを持っています)を持っています。</p>\n<p>フィードアクセスインタフェースそれぞれの詳細は、個別のリファレンスページを見てください。</p>"}}],"toc":[{"text":"フィードインタフェース","id":"フィードインタフェース"},{"text":"例: Web からフィードを読む","id":"例_web_からフィードを読む"}],"summary":"Firefox 2 と Thunderbird 2 は拡張製作者に RSS と Atom フィードへのアクセスを簡単にする一連のインターフェースを導入します。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","source":{"folder":"ja/orphaned/feed_content_access_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/orphaned/feed_content_access_api/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"pageTitle":"Feed content access API | MDN","noIndexing":true}}