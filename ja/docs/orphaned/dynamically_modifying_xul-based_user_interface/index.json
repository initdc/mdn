{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Dynamically modifying XUL-based user interface","mdn_url":"/ja/docs/orphaned/Dynamically_modifying_XUL-based_user_interface","locale":"ja","native":"日本語","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>\n  この記事では、<a href=\"ja/DOM\">DOM</a> やその他の API を使って <a href=\"ja/XUL\">XUL</a> インターフェイスを操作する方法について検討します。まず DOM\n  <em>ドキュメント</em>\n  の概念について説明し、DOM の呼び出しを使ってドキュメントを操作する基本的な方法の例を幾つか実演したのち、 Mozilla 固有のメソッドを使って\n  <em>匿名 <a href=\"ja/XBL\">XBL</a> コンテント</em>\n  を操作する方法を実演します。\n</p>\n<p>この記事は XUL 開発の初心者から中級者を対象にしており、読者が XUL と JavaScript の基本的な知識を持っていることを想定しています。<a href=\"ja/About_the_Document_Object_Model\">Document Object Model について</a> の記事や <a href=\"ja/Gecko_DOM_Reference\">Gecko DOM リファレンス</a> の <a href=\"ja/Gecko_DOM_Reference/Introduction\">導入ページ</a> といった DOM に関する入門記事も必要があればお読み下さい。</p>"}},{"type":"prose","value":{"id":"はじめに","title":"はじめに","isH3":true,"content":"<p>ご存知の通り、<a href=\"ja/XUL\">XUL</a> は Firefox や Thunderbird のような様々な Mozilla ベースのアプリケーションでユーザーインターフェイスを記述するのに使われている <a href=\"ja/XML\">XML</a> 言語です。XUL アプリケーションでは動作を定義するのに <a href=\"ja/JavaScript\">JavaScript</a> が使われており、その中では XUL ドキュメントにアクセスするのに <a href=\"ja/Gecko_DOM_Reference\">DOM API</a> を使っています。</p>\n<p>では <strong>D</strong>ocument <strong>O</strong>bject <strong>M</strong>odel API とは何なのでしょうか？</p>\n<p>DOM API はスクリプトとドキュメント間で行われるやり取りのあらゆる所で使われるインターフェイスです。一度でも XUL (または HTML) ドキュメントとやり取りするスクリプトを書いた事があるなら、あなたは既に DOM 呼び出しを使っています。最も有名な DOM メソッドはおそらく <a href=\"ja/DOM/document.getElementById\"><code>document.getElementById()</code></a> で、これは与えられた <code>id</code> に対応する要素を返します。あなたはそれ以外にも <a href=\"ja/DOM/element.setAttribute\"><code>element.setAttribute()</code></a> や、拡張機能を書いた事があるなら <a href=\"ja/DOM/element.addEventListener\"><code>addEventListener()</code></a> といった呼び出しを使った事があるかもしれません。これらは全て DOM で定義されているものです。</p>\n<p>\n  DOM メソッドには、ドキュメントに要素を作成したり、動かしたり、削除するものもあります。これらは後のセクションで実演します。まずは、\n  <em>ドキュメント</em>\n  とは何なのかについて学びましょう。\n</p>"}},{"type":"prose","value":{"id":"ドキュメントとは何か？","title":"ドキュメントとは何か？","isH3":true,"content":"<p>ドキュメントは DOM API を使って操作できるデータ構造です。あらゆるドキュメントの論理的な構造はツリー状になっており、ノードとしての要素、属性、処理命令、コメントなどで出来ています。ドキュメントのツリー表現を見るには <a href=\"ja/DOM_Inspector\">DOM Inspector</a> を使ってください。Todo: XUL ドキュメントとツリーの簡単な例</p>\n<p>ドキュメントは、妥当な HTML や整形式の (XHTML や XUL 等の) XML の、メモリ内部の表現とみなす事が出来ます。</p>\n<p>異なるウェブページは (同じウェブページの異なるインスタンスであっても) 異なるドキュメントに対応しているということを覚えておく事が重要です。それぞれの XUL ウィンドウはそれ自身の独自のドキュメントを持っており、<a href=\"ja/XUL/iframe\"><code>&lt;iframe&gt;</code></a> や <a href=\"ja/XUL/browser\"><code>&lt;browser&gt;</code></a> 、<a href=\"ja/XUL/tabbrowser\"><code>&lt;tabbrowser&gt;</code></a> 要素を持っている場合には一つのウィンドウにさらに幾つかの異なるドキュメントがあるということになります。このため、扱っているのが適切なドキュメントなのかを常に確認する必要があります。 (詳しくは <a href=\"ja/Working_with_windows_in_chrome_code\">chrome コードでウィンドウを扱う</a> を参照。) スクリプトが <a href=\"ja/XUL/script\"><code>&lt;script&gt;</code></a> タグを使って読み込まれているなら、<code>document</code> プロパティはそのスクリプトが含まれる DOM ドキュメントを参照します。</p>"}},{"type":"prose","value":{"id":"dom_メソッドの使用例","title":"DOM メソッドの使用例","isH3":true,"content":"<p>このセクションでは DOM メソッドの <a href=\"ja/DOM/element.appendChild\"><code>appendChild()</code></a> 、<a href=\"ja/DOM/document.createElement\"><code>createElement()</code></a> 、<a href=\"ja/DOM/element.insertBefore\"><code>insertBefore()</code></a> 、<a href=\"ja/DOM/element.removeChild\"><code>removeChild()</code></a> の使い方を実演します。</p>\n<h4 id=\"ある要素の子要素を全て削除する\">ある要素の子要素を全て削除する</h4>\n<p>この例では、id=<code>someElement</code> である要素の全ての子要素を現在のドキュメントから削除するために、<a href=\"ja/DOM/element.removeChild\"><code>removeChild()</code></a> メソッドを呼び出して子要素が全てなくなるまで最初の子要素を削除しています。</p>\n<p><a href=\"ja/DOM/element.hasChildNodes\"><code>hasChildNodes()</code></a> と <a href=\"ja/DOM/element.firstChild\"><code>firstChild</code></a> も DOM API の一部です。</p>\n<pre class=\"notranslate\">var element = document.getElementById(\"someElement\");\n  while(element.hasChildNodes()){\n    element.removeChild(element.firstChild);\n  }\n</pre>\n<h4 id=\"メニューにメニューアイテムを挿入する\">メニューにメニューアイテムを挿入する</h4>\n<p>この例では <a href=\"ja/XUL/menupopup\"><code>&lt;menupopup&gt;</code></a> の最初と最後に二つの新しいメニューアイテムを追加します。アイテムを作成するのには <a href=\"ja/DOM/document.createElementNS\"><code>document.createElementNS()</code></a> メソッドを使用しており、作成された xml 要素を <a href=\"ja/DOM/element.insertBefore\"><code>insertBefore()</code></a> と <a href=\"ja/DOM/element.appendChild\"><code>appendChild()</code></a> を使ってドキュメントに挿入しています。</p>\n<p>注:</p>\n<ul>\n  <li><a href=\"ja/DOM/document.createElementNS\"><code>document.createElementNS()</code></a> は要素を作成しますが、ドキュメントのどこにもそれを設置しません。新しく作成された要素をドキュメントに挿入するには、<a href=\"ja/DOM/element.appendChild\"><code>appendChild()</code></a> のような他の DOM メソッドを使う必要があります。</li>\n  <li><a href=\"ja/DOM/element.appendChild\"><code>appendChild()</code></a> はノードを他の全てのノードの後ろに追加するのに対し、<a href=\"ja/DOM/element.insertBefore\"><code>insertBefore()</code></a> はノードを 2 つ目のパラメータで参照されたノードの前に挿入します。</li>\n</ul>\n<pre class=\"notranslate\">function createMenuItem(aLabel) {\n  const XUL_NS = \"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\";\n  var item = document.createElementNS(XUL_NS, \"menuitem\"); // 新しい XUL メニューアイテムを作成する\n  item.setAttribute(\"label\", aLabel);\n  return item;\n}\nvar popup = document.getElementById(\"myPopup\"); // &lt;menupopup&gt; 要素\nvar first = createMenuItem(\"First item\");\nvar last = createMenuItem(\"Last item\");\npopup.insertBefore(first, popup.firstChild);\npopup.appendChild(last);\n</pre>\n<p><a href=\"ja/DOM/element.appendChild\"><code>appendChild()</code></a> や <a href=\"ja/DOM/element.insertBefore\"><code>insertBefore()</code></a> は存在している要素を動かすのにも使えます。例えば次の文を上の例の最後の行に追加すれば、 \"First item\" とラベルが付けられたアイテムをポップアップの最後に動かす事が出来ます。</p>\n<pre class=\"notranslate\">popup.appendChild(first);\n</pre>\n<p>この文はノードをドキュメントの現在の位置から削除して、ポップアップの最後に再び挿入します。</p>"}},{"type":"prose","value":{"id":"匿名コンテント_xbl","title":"匿名コンテント (XBL)","isH3":true,"content":"<p>\n  <a href=\"ja/XBL\">XBL</a> は Mozilla で新しいウィジェットを定義するのに使用される言語です。XBL で定義されたウィジェットは、バインディングが設定される時に、バインドされた要素に挿入するコンテントを定義する事ができます。このコンテントは、\n  <em>匿名コンテント</em>\n  と呼ばれ、通常の DOM メソッドによってアクセスする事は出来ません。\n</p>\n<p>代わりに、<a href=\"ja/NsIDOMDocumentXBL\"><code>nsIDOMDocumentXBL</code></a> インターフェイスのメソッドを使う必要があります。例えば</p>\n<pre class=\"notranslate\">// 与えられたノードの最初の匿名子要素を取得する\ndocument.getAnonymousNodes(node)[0];\n\n// anonid 属性が el1 である匿名要素のノードリストを返す\ndocument.getAnonymousElementByAttribute(node, \"anonid\", \"el1\");\n</pre>\n<p>より多くの情報を得るには XBL リファレンスの <a href=\"ja/XBL/XBL_1.0_Reference/DOM_Interfaces#getAnonymousNodes\">getAnonymousNodes</a> と <a href=\"ja/XBL/XBL_1.0_Reference/DOM_Interfaces#getAnonymousElementByAttribute\">getAnonymousElementByAttribute</a> を参照して下さい。</p>\n<p>匿名ノードを得さえすえば、通常の DOM メソッドを使ってバインディングの残りのノードを操作したり処理する事が出来ます。</p>"}},{"type":"prose","value":{"id":"参照","title":"参照","isH3":true,"content":"<ul>\n  <li><a href=\"ja/XUL_Tutorial/Document_Object_Model\">DOM についての関連する章</a></li>\n  <li><a href=\"ja/XUL_Tutorial/Modifying_a_XUL_Interface\">XUL チュートリアル: XUL インターフェイスを変更する</a></li>\n</ul>"}}],"toc":[],"summary":"この記事では、DOM やその他の API を使って XUL インターフェイスを操作する方法について検討します。まず DOM\n  ドキュメント\n  の概念について説明し、DOM の呼び出しを使ってドキュメントを操作する基本的な方法の例を幾つか実演したのち、 Mozilla 固有のメソッドを使って\n  匿名 XBL コンテント\n  を操作する方法を実演します。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","source":{"folder":"ja/orphaned/dynamically_modifying_xul-based_user_interface","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/orphaned/dynamically_modifying_xul-based_user_interface/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"pageTitle":"Dynamically modifying XUL-based user interface | MDN","noIndexing":true}}