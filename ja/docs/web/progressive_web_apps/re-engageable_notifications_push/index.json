{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"通知とプッシュを利用して PWA を再エンゲージ可能にするには","mdn_url":"/ja/docs/Web/Progressive_web_apps/Re-engageable_Notifications_Push","locale":"ja","native":"日本語","sidebarHTML":"\n<ol><li><a href=\"/ja/docs/Web/Progressive_web_apps/Installable_PWAs\">PWA をインストール可能にするには</a></li><li><a href=\"/ja/docs/Web/Progressive_web_apps/Offline_Service_workers\">サービスワーカーで PWA をオフラインで動作させる</a></li><li><a href=\"/ja/docs/Web/Progressive_web_apps/App_structure\">プログレッシブウェブアプリの構造</a></li><li><a href=\"/ja/docs/Web/Progressive_web_apps/Structural_overview\">プログレッシブウェブアプリの構造的な概要</a></li><li><a href=\"/ja/docs/Web/Progressive_web_apps/Introduction\">プログレッシブウェブアプリの紹介</a></li><li><a href=\"/ja/docs/Web/Progressive_web_apps/Loading\">プログレッシブ読み込み</a></li><li><a href=\"/ja/docs/Web/Progressive_web_apps/Add_to_home_screen\">ホーム画面に追加</a></li><li><a href=\"/ja/docs/Web/Progressive_web_apps/Re-engageable_Notifications_Push\">通知とプッシュを利用して PWA を再エンゲージ可能にするには</a></li></ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ja/docs/Web/Progressive_web_apps/Installable_PWAs\"> 前のページ </a></li>\n    <li><a class=\"button minimal\" href=\"/ja/docs/Web/Progressive_web_apps\"> Overview: Progressive web apps</a></li>\n    <li><a class=\"button minimal\" href=\"/ja/docs/Web/Progressive_web_apps/Loading\"> 次のページ  </a></li>\n</ul>\n<p>アプリのコンテンツをキャッシュできるようにしてオフラインで動作させるのは、すばらしい機能です。 ユーザーがホーム画面にウェブアプリをインストールできるようにすることは、もっと良いことです。 しかし、ユーザーの操作のみに頼らず、プッシュメッセージと通知を使用すれば、さらに自動的に再エンゲージを行い新しいコンテンツが利用できるようになるたびに配信することができるようになります。</p>"}},{"type":"prose","value":{"id":"二つの_api_と一つの目標","title":"二つの API と一つの目標","isH3":false,"content":"<p><a href=\"/ja/docs/Web/API/Push_API\">Push API</a> と <a href=\"/ja/docs/Web/API/Notifications_API\">Notifications API</a> は 2 つの別々の API ですが、アプリで魅力的な機能を提供したい場合には、それらは一緒にうまく機能します。 プッシュは、クライアント側の介入なしにサーバーからアプリに新しいコンテンツを配信するために使用され、その操作はアプリのサービスワーカーによって処理されます。 サービスワーカーは、通知を使用して新しい情報をユーザーに表示するか、少なくとも何かが更新されたときにアラートすることができます。</p>\n<p>それらはサービスワーカーと同じようにブラウザーウィンドウの外側で機能するため、アプリのページにフォーカスが合っていないときや閉じているときにも更新をプッシュして通知を表示できます。</p>"}},{"type":"prose","value":{"id":"通知","title":"通知","isH3":false,"content":"<p>通知（notifications）から始めましょう — プッシュがなくても機能しますが、それらを組み合わせると非常に便利です。 はじめはそれらを個別に見てみましょう。</p>"}},{"type":"prose","value":{"id":"パーミッションの要求","title":"パーミッションの要求","isH3":true,"content":"<p>通知を表示するには、まずパーミッション（permission）を要求する必要があります。 ただちに通知を表示する代わりに、次のようにユーザーがボタンをクリックして要求したときにポップアップを表示することをお勧めします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> button <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"notifications\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbutton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Notification<span class=\"token punctuation\">.</span><span class=\"token function\">requestPermission</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">===</span> <span class=\"token string\">'granted'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">randomNotification</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これは、次のようにオペレーティングシステム独自の通知サービスを使ったポップアップを表示します。</p>\n<p>\n  <img src=\"/en-US/docs/Web/Progressive_web_apps/Re-engageable_Notifications_Push/js13kpwa-notification.png\" alt=\"Notification of js13kPWA.\" width=\"360\" height=\"640\" loading=\"lazy\">\n</p>\n<p>ユーザーが通知を受け取ることを確認すると、アプリはそれらを表示できます。 ユーザー操作の結果は、デフォルト（<code>default</code>）、許可（<code>granted</code>）、または拒否（<code>denied</code>）になります。 ユーザーが後で選択する場合はデフォルトの選択肢が選択され、ユーザーがそれぞれ「はい」または「いいえ」をクリックすると他の 2 つが設定されます。</p>\n<p>承認されると、パーミッションは通知とプッシュの両方に機能します。</p>"}},{"type":"prose","value":{"id":"通知の作成","title":"通知の作成","isH3":true,"content":"<p>サンプルアプリでは、利用可能なデータから通知を作成します — ゲームはランダムに選択され、選択されたものがコンテンツと共に通知を送ります — それは次のようにゲームの名前をタイトルとして設定し、本文で作者に言及し、そしてアイコンとして画像を表示します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">randomNotification</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> randomItem <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>games<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> notifTitle <span class=\"token operator\">=</span> games<span class=\"token punctuation\">[</span>randomItem<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> notifBody <span class=\"token operator\">=</span> <span class=\"token string\">'Created by '</span><span class=\"token operator\">+</span>games<span class=\"token punctuation\">[</span>randomItem<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>author<span class=\"token operator\">+</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> notifImg <span class=\"token operator\">=</span> <span class=\"token string\">'data/img/'</span><span class=\"token operator\">+</span>games<span class=\"token punctuation\">[</span>randomItem<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>slug<span class=\"token operator\">+</span><span class=\"token string\">'.jpg'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> notifBody<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">icon</span><span class=\"token operator\">:</span> notifImg\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> notif <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Notification</span><span class=\"token punctuation\">(</span>notifTitle<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>randomNotification<span class=\"token punctuation\">,</span> <span class=\"token number\">30000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>迷惑すぎてユーザーによって無効にされるまで、新しいランダム通知が 30 秒ごとに作成されます — 実際のアプリの場合、通知はそれほど頻繁ではなく、より便利であるべきです。 Notifications API の利点は、オペレーティングシステムの通知機能を使用することです。 つまり、ウェブアプリを見ていなくてもユーザーに通知を表示でき、その通知はネイティブアプリで表示されるものと似ています。</p>"}},{"type":"prose","value":{"id":"プッシュ","title":"プッシュ","isH3":false,"content":"<p>プッシュは通知よりも複雑です — データをアプリに送り返すサーバーを購読（subscribe）する必要があります。 アプリのサービスワーカーはプッシュサーバーからデータを受け取ります。 このデータは通知システム、または必要に応じて別のメカニズムを使用して表示できます。</p>\n<p>技術はまだ非常に初期段階にあります — いくつかの実用的な例は Google Cloud Messaging プラットフォームを使用しますが、<a href=\"https://blog.mozilla.org/services/2016/08/23/sending-vapid-identified-webpush-notifications-via-mozillas-push-service/\" class=\"external\" rel=\" noopener\">VAPID</a>（Voluntary Application Server Identification、自発的アプリケーションサーバー識別）をサポートするように書き直されています。 <a href=\"https://serviceworke.rs/push-payload.html\" class=\"external\" rel=\" noopener\">サービスワーカークックブックの例</a>（英語）を調べたり、<a href=\"https://firebase.google.com/\" class=\"external\" rel=\" noopener\">Firebase</a> を使用してプッシュメッセージングサーバーをセットアップしたり、（例えば Node.js を使用して）独自のサーバーを構築したりすることができます。</p>\n<p>前述のように、プッシュメッセージを受信できるようにするには、サービスワーカーが必要です。 その基本については、<a href=\"/ja/docs/Web/Progressive_web_apps/Offline_Service_workers\">サービスワーカーで PWA をオフラインで動作させる</a>の記事で既に説明しています。 サービスワーカーの内部には、プッシュサービス購読機構（push service subscription mechanism）が作成されています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>registration<span class=\"token punctuation\">.</span>pushManager<span class=\"token punctuation\">.</span><span class=\"token function\">getSubscription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ユーザーが購読すると、サーバーからプッシュ通知を受け取ることができます。</p>\n<p>サーバー側からは、セキュリティ上の理由からプロセス全体を公開鍵と秘密鍵で暗号化する必要があります — アプリを使用してセキュリティ保護されていないプッシュメッセージをだれでも送信できるようにするのは恐ろしい考えです。 サーバーのセキュリティ保護の詳細については、<a href=\"https://jrconlin.github.io/WebPushDataTestPage/\" class=\"external\" rel=\" noopener\">ウェブプッシュデータ暗号化テストページ</a>（英語）を参照してください。 サーバーは、ユーザーが購読したときに受信したすべての情報を保存するので、メッセージは後で必要なときに送信できます。</p>\n<p>プッシュメッセージを受信するために、次のようにサービスワーカーファイルの <a href=\"/ja/docs/Web/API/ServiceWorkerGlobalScope/push_event\" title=\"push\"><code>push</code></a> イベントを監視できます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>self<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'push'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>データを取得してすぐにユーザーへの通知として表示できます。 これは、例えば、何かをユーザーに思い出させるために使用したり、アプリで利用可能な新しいコンテンツについてユーザーに知らせたりするために使用できます。</p>"}},{"type":"prose","value":{"id":"プッシュの例","title":"プッシュの例","isH3":true,"content":"<p>プッシュにはサーバー部分が機能する必要があるため、静的ファイルのみのホスティングを提供する GitHub Pages でホスティングされる js13kPWA の例に含めることはできません。 それはすべて<a href=\"https://serviceworke.rs/\" class=\"external\" rel=\" noopener\">サービスワーカークックブック</a>（英語）で説明されています — <a href=\"https://serviceworke.rs/push-payload.html\" class=\"external\" rel=\" noopener\">Push Payload Demo</a> を参照してください。</p>\n<p>このデモは 3 つのファイルで構成されています。</p>\n<ul>\n  <li><a href=\"https://github.com/mozilla/serviceworker-cookbook/blob/master/push-payload/index.js\" class=\"external\" rel=\" noopener\">index.js</a> — アプリのソースコードが含まれています。</li>\n  <li><a href=\"https://github.com/mozilla/serviceworker-cookbook/blob/master/push-payload/server.js\" class=\"external\" rel=\" noopener\">server.js</a> — サーバー部分が含まれています（Node.js で書かれています）。</li>\n  <li><a href=\"https://github.com/mozilla/serviceworker-cookbook/blob/master/push-payload/service-worker.js\" class=\"external\" rel=\" noopener\">service-worker.js</a> — サービスワーカー固有のコードが含まれています。</li>\n</ul>\n<p>これらすべてを探りましょう。</p>\n<h4 id=\"index.js\">index.js</h4>\n<p><code>index.js</code> ファイルは、次のようにサービスワーカーを登録することから始まります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>navigator<span class=\"token punctuation\">.</span>serviceWorker<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token string\">'service-worker.js'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">registration</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> registration<span class=\"token punctuation\">.</span>pushManager<span class=\"token punctuation\">.</span><span class=\"token function\">getSubscription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">subscription</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// registration part</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">subscription</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// subscription part</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><a href=\"https://mdn.github.io/pwa-examples/js13kpwa/\" class=\"external\" rel=\" noopener\">js13kPWA デモ</a>で見たサービスワーカーよりも少し複雑です。 この特定のケースでは、登録後、登録オブジェクト（registration object）を使用して購読し、次に結果として得られた購読オブジェクト（subscription object）を使用してプロセス全体を完了します。</p>\n<p>登録部分（registration part）では、コードは次のようになります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>subscription<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> subscription<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ユーザーが既に購読している場合は、購読オブジェクトを返して購読部分（subscription part）に移ります。 そうでない場合は、次のように新しい購読を初期化します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./vapidPublicKey'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> vapidPublicKey <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> convertedVapidKey <span class=\"token operator\">=</span> <span class=\"token function\">urlBase64ToUint8Array</span><span class=\"token punctuation\">(</span>vapidPublicKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>アプリはサーバーの公開鍵を取得してレスポンスをテキストに変換します。 それから Uint8Array に変換する必要があります（Chrome をサポートするため）。 VAPID キーの詳細については、<a href=\"https://blog.mozilla.org/services/2016/08/23/sending-vapid-identified-webpush-notifications-via-mozillas-push-service/\" class=\"external\" rel=\" noopener\">VAPID で識別した WebPush 通知を Mozilla のプッシュサービス経由で送信する</a>（英語）のブログ投稿を読むことができます。</p>\n<p>アプリは <a href=\"/ja/docs/Web/API/PushManager\"><code>PushManager</code></a> を使用して新しいユーザーの購読をすることができます。 <a href=\"/ja/docs/Web/API/PushManager/subscribe\"><code>PushManager.subscribe()</code></a> メソッドに渡される 2 つのオプションがあります — 1 つ目は <code>userVisibleOnly：true</code> で、これはユーザーに送信されたすべての通知が表示されることを意味します。 2 つ目は <code>applicationServerKey</code> で、これには、取得と変換に成功した VAPID キーが含まれます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">return</span> registration<span class=\"token punctuation\">.</span>pushManager<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">userVisibleOnly</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">applicationServerKey</span><span class=\"token operator\">:</span> convertedVapidKey\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>それでは購読部分（subscription part）に移りましょう — アプリは最初に Fetch を使って購読の詳細を JSON としてサーバーに送ります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./register'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string-property property\">'Content-type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">subscription</span><span class=\"token operator\">:</span> subscription\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>次に、[Request sending a notification!（通知の送信依頼）] ボタンの <a href=\"/ja/docs/Web/API/Element/click_event\" title=\"onclick\"><code>onclick</code></a> 関数を定義します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'doIt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> payload <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'notification-payload'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> delay <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'notification-delay'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> ttl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'notification-ttl'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./sendNotification'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string-property property\">'Content-type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">subscription</span><span class=\"token operator\">:</span> subscription<span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">payload</span><span class=\"token operator\">:</span> payload<span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">delay</span><span class=\"token operator\">:</span> delay<span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">ttl</span><span class=\"token operator\">:</span> ttl<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>このボタンがクリックされると、<code>fetch</code> はサーバーに与えられたパラメータで通知を送るように要求します — <code>payload</code> は通知に表示されるテキストで、<code>delay</code> は通知が表示されるまでの遅延を秒単位で定義し、<code>ttl</code> は指定された期間サーバー上で通知を利用できるようにする存続時間（time-to-live）の設定で、これも秒単位で定義します。</p>\n<p>それでは、次の JavaScript ファイルに進みましょう。</p>\n<h4 id=\"server.js\">server.js</h4>\n<p>サーバー部分は Node.js で書かれており、適切な場所にホストする必要があります。 これは、まったく別の記事の主題です。 ここでは大まかな概要のみを説明します。</p>\n<p><a href=\"https://www.npmjs.com/package/web-push\" class=\"external\" rel=\" noopener\">web-push モジュール</a>（英語）は VAPID キーを設定するために使用され、それらがまだ利用できない場合は必要に応じて生成します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> webPush <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'web-push'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">VAPID_PUBLIC_KEY</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">VAPID_PRIVATE_KEY</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You must set the VAPID_PUBLIC_KEY and VAPID_PRIVATE_KEY \"</span><span class=\"token operator\">+</span>\n    <span class=\"token string\">\"environment variables. You can use the following ones:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>webPush<span class=\"token punctuation\">.</span><span class=\"token function\">generateVAPIDKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nwebPush<span class=\"token punctuation\">.</span><span class=\"token function\">setVapidDetails</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'https://serviceworke.rs/'</span><span class=\"token punctuation\">,</span>\n  process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">VAPID_PUBLIC_KEY</span><span class=\"token punctuation\">,</span>\n  process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">VAPID_PRIVATE_KEY</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>次に、モジュールはアプリが処理する必要があるすべてのルートを定義してエクスポートします — VAPID 公開鍵の取得、登録、そして通知の送信です。 使用されている <code>index.js</code> ファイルの変数（<code>payload</code>、<code>delay</code>、および <code>ttl</code>）を見ることができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">app<span class=\"token punctuation\">,</span> route</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>route <span class=\"token operator\">+</span> <span class=\"token string\">'vapidPublicKey'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">VAPID_PUBLIC_KEY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>route <span class=\"token operator\">+</span> <span class=\"token string\">'register'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">sendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">201</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>route <span class=\"token operator\">+</span> <span class=\"token string\">'sendNotification'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> subscription <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>subscription<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> payload <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token constant\">TTL</span><span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>ttl\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      webPush<span class=\"token punctuation\">.</span><span class=\"token function\">sendNotification</span><span class=\"token punctuation\">(</span>subscription<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">sendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">201</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">sendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>delay <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"service-worker.js\">service-worker.js</h4>\n<p>最後に取り上げるファイルは、サービスワーカーです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>self<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'push'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> payload <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>data <span class=\"token operator\">?</span> event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token string\">'no payload'</span><span class=\"token punctuation\">;</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span>\n        self<span class=\"token punctuation\">.</span>registration<span class=\"token punctuation\">.</span><span class=\"token function\">showNotification</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ServiceWorker Cookbook'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> payload<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><a href=\"/ja/docs/Web/API/ServiceWorkerGlobalScope/push_event\" title=\"push\"><code>push</code></a> イベントのリスナーを追加し、データから取得したテキストからなる <code>payload</code> 変数を作成し（またはデータが空の場合に使用する文字列を作成し）、通知がユーザーに表示されるまで待ちます。</p>\n<p>それらがどのように処理されるかを知りたい場合は、<a href=\"https://serviceworke.rs/\" class=\"external\" rel=\" noopener\">サービスワーカークックブック</a>（英語）の残りの例を調べてください — <a href=\"https://github.com/mozilla/serviceworker-cookbook/\" class=\"external\" rel=\" noopener\">完全なソースコードは GitHub で入手できます</a>。 一般的な使い方だけでなく、ウェブプッシュ、キャッシュ戦略、パフォーマンス、オフラインでの作業など、多数の実用的な例があります。</p><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ja/docs/Web/Progressive_web_apps/Installable_PWAs\"> 前のページ </a></li>\n    <li><a class=\"button minimal\" href=\"/ja/docs/Web/Progressive_web_apps\"> Overview: Progressive web apps</a></li>\n    <li><a class=\"button minimal\" href=\"/ja/docs/Web/Progressive_web_apps/Loading\"> 次のページ  </a></li>\n</ul>"}}],"toc":[{"text":"二つの API と一つの目標","id":"二つの_api_と一つの目標"},{"text":"通知","id":"通知"},{"text":"プッシュ","id":"プッシュ"}],"summary":"アプリのコンテンツをキャッシュできるようにしてオフラインで動作させるのは、すばらしい機能です。 ユーザーがホーム画面にウェブアプリをインストールできるようにすることは、もっと良いことです。 しかし、ユーザーの操作のみに頼らず、プッシュメッセージと通知を使用すれば、さらに自動的に再エンゲージを行い新しいコンテンツが利用できるようになるたびに配信することができるようになります。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"How to make PWAs re-engageable using Notifications and Push","locale":"en-US","native":"English (US)"},{"title":"Cómo hacer que las PWAs se puedan volver a conectar usando Notificaciones y Push","locale":"es","native":"Español"},{"title":"Comment faire pour que les PWAs relancent les utilisateurs en utilisant des notifications et des messages poussés","locale":"fr","native":"Français"},{"title":"알림과 푸시를 사용해 PWA를 재참여(re-engageable)가능하게 만드는 방법","locale":"ko","native":"한국어"},{"title":"通过通知推送让 PWA 可重用","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/progressive_web_apps/re-engageable_notifications_push","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/progressive_web_apps/re-engageable_notifications_push/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/Progressive_web_apps","title":"プログレッシブウェブアプリ (PWA)"},{"uri":"/ja/docs/Web/Progressive_web_apps/Re-engageable_Notifications_Push","title":"通知とプッシュを利用して PWA を再エンゲージ可能にするには"}],"pageTitle":"通知とプッシュを利用して PWA を再エンゲージ可能にするには - プログレッシブウェブアプリ (PWA) | MDN","noIndexing":false}}