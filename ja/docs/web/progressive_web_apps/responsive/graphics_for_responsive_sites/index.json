{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"レスポンシブサイトのグラフィックデザイン","mdn_url":"/ja/docs/Web/Progressive_web_apps/Responsive/Graphics_for_responsive_sites","locale":"ja","native":"日本語","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>1996 年当時、ウェブ構築に携わっていた多くの人々は、 20 年も経たないうちに、携帯電話やタブレット、テレビ、さらには自動車や家庭用照明でも機能するウェブサイトが開発されるようになると言ったら、笑っていたでしょう。しかし、今日、それは非常に現実的なものとなっています。この記事では、グラフィックニーズに最適なオプションを選択するための高水準の議論を行います。</p>\n<p>テキストのボックスはもともとレスポンシブ対応なので、テキストコンテンツは問題ありませんが、グラフィックや複雑なレイアウトをページに含めるようになると、絵が醜くなり始めます — 特に、それらのグラフィックやレイアウトが様々な画面に適応する必要がある場合は、なおさらです。そのため、これらのトピックを扱うドキュメントの章を用意しました（現在表示されている章と<a href=\"/ja/docs/Web/Apps/app_layout\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">アプリレイアウト</a>）。</p>\n<p>さらに最近では、地味な BMP、JPG、GIF、PNG 以外にも、非常に多くの技術から選択することができます。では、何を選べばよいのでしょうか。これは、どのような端末に対応しなければならないか、グラフィックがどれほど複雑である必要があるか、グラフィックがどれほどのインタラクティブ性を必要とするかによります。</p>"}},{"type":"prose","value":{"id":"css_によって画像を選択的に提供する","title":"CSS によって画像を選択的に提供する","isH3":false,"content":"<p>一般的に、レスポンシブデザインでは、様々なレイアウトでほぼ同じグラフィック資産を使用しますが、状況に応じて若干異なる資産を含めることもあります。例えば、デスクトップ用のレイアウトに大きなヘッダーグラフィックといくらかのプログラムグラフィック（CSS3 のドロップシャドウやグラデーションなど）が含まれている場合、モバイル用のレイアウトでは特定の資産を簡素化したり削除したり、小さな画面に合わせてより小さな資産を用意したりすることができます。これは、一般的にモバイル端末の処理能力や利用可能な帯域幅が小さいため、処理やダウンロード量を減らしたいと考えるからです。また、モバイル端末は画面サイズが小さいので、モバイルレイアウトでは視覚的な混乱を減らすのが理にかなっています。</p>\n<p><a href=\"/ja/docs/Web/CSS/Media_Queries/Using_media_queries\">CSS メディアクエリー</a>を使うと、ビューポートの大きさに応じて異なる CSS ルールを提供することができますが、可能な限り<a href=\"https://www.peachpit.com/articles/article.aspx?p=1960918\" class=\"external\" rel=\" noopener\">モバイルファーストメディアクエリー</a>の使用を検討すべきです。つまり、 CSS 内でメディアクエリーが検出される前の既定のレイアウトは、大きな画面/デスクトップ用のレイアウトではなく、小さな画面/モバイル用のレイアウトにします。そのため、モバイル端末でページが読み込まれた場合はモバイル用の資産のみをダウンロードし、デスクトップ用のリソース資産はダウンロードしなくなります。</p>\n<p><a href=\"/ja/docs/Web/HTML/Element/img\">HTML の <code>&lt;img&gt;</code></a> をレスポンシブにするのは、それほど簡単ではありません。いくつかの回避策がありますが、どれも今のところ完璧ではありません。どのようなものがあるのかについては、<a href=\"https://mobile.smashingmagazine.com/2013/07/08/choosing-a-responsive-image-solution/\" class=\"external\" rel=\" noopener\">Choosing a responsive image solution</a> をご覧ください。</p>"}},{"type":"prose","value":{"id":"異なる解決策への対応","title":"異なる解決策への対応","isH3":false,"content":"<p>この節では、様々な解像度のデバイスで画像を動作させるための様々な戦略について説明します。ここで問題となるのは、ラスター画像を高解像度のデバイスで表示すると、同じ数のピクセルがはるかに小さな画面スペースに表示されるため、小さく見えてしまうということです。ほとんどの高解像度端末では、ウェブページ全体に既定の拡大率が適用され、コンテンツが少しでも読みやすくなるようになっていますが、この場合は、拡大された画像がピクセル化されて醜く見えてしまうことが欠点です。</p>\n<ul>\n  <li>高解像度と低解像度の画像を用意する\n    <ul>\n      <li>高解像度画像と低解像度画像を作成し、<a href=\"/ja/docs/Web/CSS/resolution\">resolution メディアクエリー</a>を使用して、高解像度画像を高解像度端末にのみ提供するという方法があります。</li>\n    </ul>\n  </li>\n  <li>プログラム的な画像\n    <ul>\n      <li>プログラム／ベクターグラフィックスは、理論的に無限に拡大できるため、高解像度でも鮮明な画像が得られます。CSS3 プロパティを使用すると、<a href=\"/ja/docs/Web/CSS/box-shadow\">ドロップシャドウ</a>、<a href=\"/ja/docs/Web/CSS/CSS_Images/Using_CSS_gradients\">グラデーション</a>、<a href=\"/ja/docs/Web/CSS/border-radius\">角丸</a>などの効果を生成することができます。また、他の UI 要素には、ラスターグラフィックス形式ではなく、<a href=\"/ja/docs/Web/SVG\">SVG</a>を使用することも検討できます。ただし、 CSS3 プロパティや SVG は IE6-8 などの古いブラウザーでは動作しないこと（ポリフィルがありますので、代替策を組み込むことは可能です）、 SVG は写真などの高精細な画像には適していないことなどの欠点があります。</li>\n    </ul>\n  </li>\n  <li>アイコンにフォントを使う\n    <ul>\n      <li>もうひとつの手法として、アイコンに<a href=\"/ja/docs/Web/CSS/@font-face\">ウェブフォント</a>を使用することも考えられます。テキストはウェブ上で無限に拡張可能であり、また、 <a href=\"/ja/docs/Web/CSS/text-shadow\">text-shadow</a> や <a href=\"/ja/docs/Learn/CSS/Building_blocks/Values_and_units#color\">color</a> などの CSS のテキストプロパティを使って、ウェブフォントのアイコンを装飾することもできます。自分でフォントファイルを作るのは少し面倒ですが、 <a href=\"https://fortawesome.github.io/Font-Awesome/\" class=\"external\" rel=\" noopener\">font awesome</a> のような優れたアイコンフォントサービスが数多くあります。</li>\n    </ul>\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"インタラクティブな画像","title":"インタラクティブな画像","isH3":false,"content":"<p>リンクやクリック可能なエリア、アニメーションなど、画像にある程度のインタラクティブ性を持たせる必要がある場合は、さまざまなオプションが用意されています。</p>\n<dl>\n  <dt id=\"css\">CSS</dt>\n  <dd>\n    <p>CSS3 では、グラフィカルな効果をリンク（やその他の必要な場所）に加える場合に、プログラムによる方法だけでなく、宣言的な<a href=\"/ja/docs/Web/CSS/CSS_Animations/Using_CSS_animations\">アニメーション</a>や<a href=\"/ja/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions\">トランジション</a>を書くことができます。これらは、 IE6-8 のような古いブラウザーでは対応していないかもしれませんが、一般的にはグレイスフルデグラデーションをかなり簡単に書くことができ、 JavaScript や他の技術と組み合わせることで、より柔軟で強力なものになります。</p>\n  </dd>\n  <dt id=\"javascript\">JavaScript</dt>\n  <dd>\n    <p><a href=\"/ja/docs/Web/JavaScript\">JavaScript</a> には、アニメーションをはじめとしたあらゆる種類のインタラクティブ機能を実現する機能があります。他の技術と組み合わせることで非常に強力な機能を発揮しますが、その複雑さが開発者以外の人には障害となります。</p>\n  </dd>\n  <dt id=\"svg\">SVG</dt>\n  <dd>\n    <p><a href=\"/ja/docs/Web/SVG\">SVG</a>は、<a href=\"/ja/docs/Web/HTML\">HTML</a>/<a href=\"/ja/docs/Web/CSS\">CSS</a>と同様に、 JavaScript で操作することができます。ですから、インタラクティブ性を持たせることは難しくありません。また、 SVG に直接リンクを貼ることもできますし、<a href=\"/ja/docs/Web/SVG/SVG_animation_with_SMIL\">SMIL</a> (Synchronized Multimedia Intergration Language) を使ってアニメーションを作成することもできます。</p>\n  </dd>\n  <dt id=\"webglcanvas\">WebGL/Canvas</dt>\n  <dd>\n    <p>HTMLの &lt;canvas&gt; 要素を使って、インタラクティブなグラフィックを描くためのキャンバスを作成し、 Canvas API を使って図形や線を作成したり、画像ファイルを読み込んだり、テキストを作成したり、合成操作を行ったりすることができます。そして、標準的な JavaScript を使用して、画像出力のアニメーションなどを行うことができます。通常の 2D Canvas コンテキストを使用して 2D 画像を作成することも、より新しい <a href=\"/ja/docs/Web/API/WebGL_API\">WebGL API</a> を使用して 3D 画像を作成することもできます。</p>\n    <p>キャンバスは非常に強力ですが、注意して使用する必要があります。ゲームのビジュアルや複雑なデータの視覚化には適していますが、標準的なユーザーインターフェース要素にはあまり効率的ではありません。また、キャンバスは単なるラスター画像なので、その中で作成されたテキストにはアクセスできず、さらに拡大にも向いていません。</p>\n  </dd>\n</dl>"}}],"toc":[{"text":"CSS によって画像を選択的に提供する","id":"css_によって画像を選択的に提供する"},{"text":"異なる解決策への対応","id":"異なる解決策への対応"},{"text":"インタラクティブな画像","id":"インタラクティブな画像"}],"summary":"1996 年当時、ウェブ構築に携わっていた多くの人々は、 20 年も経たないうちに、携帯電話やタブレット、テレビ、さらには自動車や家庭用照明でも機能するウェブサイトが開発されるようになると言ったら、笑っていたでしょう。しかし、今日、それは非常に現実的なものとなっています。この記事では、グラフィックニーズに最適なオプションを選択するための高水準の議論を行います。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Graphic design for responsive sites","locale":"en-US","native":"English (US)"}],"source":{"folder":"ja/web/progressive_web_apps/responsive/graphics_for_responsive_sites","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/progressive_web_apps/responsive/graphics_for_responsive_sites/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/Progressive_web_apps","title":"プログレッシブウェブアプリ (PWA)"},{"uri":"/ja/docs/Web/Progressive_web_apps/Responsive/Graphics_for_responsive_sites","title":"レスポンシブサイトのグラフィックデザイン"}],"pageTitle":"レスポンシブサイトのグラフィックデザイン - プログレッシブウェブアプリ (PWA) | MDN","noIndexing":false}}