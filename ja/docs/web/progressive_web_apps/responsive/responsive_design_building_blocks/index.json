{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"レスポンシブデザインの構成要素","mdn_url":"/ja/docs/Web/Progressive_web_apps/Responsive/responsive_design_building_blocks","locale":"ja","native":"日本語","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>この記事では、レスポンシブデザインの主な基本要素について説明し、必要に応じてさらなる情報へのリンクを紹介します。</p>\n<p>ウェブ開発者にとって、サイトにアクセスするブラウザーや端末に応じてユーザーインターフェイスを変化させ、使い勝手を最適にするウェブサイトやアプリを作成することは、かなり一般的になっています。そのためには、プラットフォームやブラウザーごとに異なるバージョンのサイトやアプリを作成し、どのブラウザーやプラットフォームからサイトが見られているかを検知した上で、適切なサービスを提供するという方法があります。しかし、これはどんどん非効率的になりあｍす。ブラウザーを検知させることは、本質的にエラーが発生しやすく、コードの複数のコピーを維持することは悪夢のような作業になりかねません。</p>\n<p>通常は、サイトにアクセスするブラウザーやプラットフォームを気にせず、機能テストを用いてブラウザーがサポートするコード機能や特定のブラウザー機能の値を調べ、適切にコードを調整する単一バージョンのコードを作成する方がはるかに優れています。これを「レスポンシブデザイン」または「アダプティブデザイン」と呼んでいます。これらは関連していますが異なるアプローチです。この 2 つのアプローチの違いについては、<a href=\"/ja/docs/Web/Apps/app_layout/Responsive_design_versus_adaptive_design\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">レスポンシブデザインとアダプティブデザイン</a>を参照してください。</p>\n<p>こちらの方が、より信頼性が高く、保守性も高く、将来性もあります。新しいブラウザーやプラットフォームの登場に合わせてサイトのバージョンを上げたり、既存のブラウザーの機能サポートの変更に合わせてコードを調整しなければならないという状況に陥ることもありません。</p>\n<p>この方法にはデメリットもあります。コンテンツやレイアウト、機能を端末ごとに大きく変える必要がある場合は、あまり良い方法ではないかもしれません。また、既存のサイトにレスポンシブデザインを追加してモバイル/タブレットに対応させると、個別にモバイルサイトやアプリを作成するよりもはるかに手間がかかる場合もあります。詳しくは<a href=\"/ja/docs/Web/Progressive_web_apps\">レスポンシブデザインのメリット・デメリット</a>を参照してください。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> もっと背景の情報と基本について知りたいのであれば、<a href=\"/ja/docs/Web/Progressive_web_apps\">レスポンシブデザイン</a>の基本についての解説を参照してください。</p>\n</div>"}},{"type":"prose","value":{"id":"流動グリッド","title":"流動グリッド","isH3":false,"content":"<p>まずは、アプリケーションのレイアウトを流動的にすることから始めましょう。基本的には、ピクセルなどの固定幅ではなく、パーセント値や em/rem を組み合わせてコンテナーやテキストの寸法を決めることです。これには、さまざまなビューポートの大きさに合わせてレイアウトを変更できるという、多くの利点があります。例を見てみましょう。</p>\n<p>このアプリケーションは、ウェブカメラからビデオストリームを取得し（<a href=\"/ja/docs/Web/API/Navigator/getUserMedia\" title=\"getUserMedia()\"><code>getUserMedia()</code></a> を使用）、そのビデオストリームから静止画をキャプチャして（HTML5 <a href=\"/ja/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a> を使用）、ギャラリーに保存します。その後、以前に撮影した画像を表示したり、削除したりすることができます。機能については他の記事で詳しく説明しますが、ここではレイアウトに注目します。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> <a href=\"https://github.com/chrisdavidmills/snapshot\" class=\"external\" rel=\" noopener\">Snapshot app on Github</a> では、 [Snapshot app] が公開されています。コードをチェックして、改善に役立ててください。また、 <a href=\"https://chrisdavidmills.github.io/snapshot/\" class=\"external\" rel=\" noopener\">Snapshot のライブ実行</a>もご覧いただけます。なお、 <code>getUserMedia()</code> は実験的な技術であり、現在は Google Chrome と Firefox デスクトップでしか動作しません。将来的には、より多くの機能を追加したり、 Snapshot のスタイルを整理したりする予定です。</p>\n</div>\n<p>Snapshot のデスクトップレイアウトは 3 列で、それぞれカメラビューアー、画像キャプチャビュー、ギャラリーが配置されています。</p>\n<p>\n  <img src=\"/en-US/docs/Web/Progressive_web_apps/Responsive/responsive_design_building_blocks/desktop-layout.png\" alt=\"\" width=\"600\" height=\"184\" loading=\"lazy\">\n</p>\n<p>マークアップは次の通りです。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>x-deck</span> <span class=\"token attr-name\">selected-index</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>x-card</span><span class=\"token punctuation\">&gt;</span></span>\n    …\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>x-card</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>x-card</span><span class=\"token punctuation\">&gt;</span></span>\n    …\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>x-card</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>x-card</span><span class=\"token punctuation\">&gt;</span></span>\n    …\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>x-card</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>x-deck</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> この x- で始まる要素は見慣れないかもしれませんが、 Mozilla のモバイルウェブアプリ用 UI 要素ライブラリである <a href=\"https://mozbrick.github.io/\" class=\"external\" rel=\" noopener\">Brick</a> の一部です。私たちは Brick を使って Snapshot のモバイルレイアウトを作成しましたが、その詳細については後述します。</p>\n</div>\n<p>並んで配置するために、以下のルールを採用しました。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">x-card</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">x-card:nth-child(1), x-card:nth-child(2)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 30%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 2rem<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">x-card:nth-child(3)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 40%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 2rem<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>そこで、最初の 2 列の <a href=\"/ja/docs/Web/CSS/width\"><code>width</code></a> を <code>30%</code> とし、3 列目の <code>width</code> を <code>40%</code> にして、すべての列を左に浮動させています。このようにすると横に並んだ状態になり、ブラウザーのウィンドウの大きさが変わっても、その比率は変わりません。これは簡単なグリッドの例ですが、必要に応じてこの原理をより複雑なグリッドレイアウトに応用することができます。</p>"}},{"type":"prose","value":{"id":"寸法を_border-box_とする","title":"寸法を border-box とする","isH3":true,"content":"<p>すべての要素の <a href=\"/ja/docs/Web/CSS/box-sizing\"><code>box-sizing</code></a> を <code>border-box</code> に設定しているため、パディングを設定してもコンテナーの幅や高さに影響しません。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">*, *:before, *:after</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">-webkit-box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-moz-box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これは基本的に、 <a href=\"/ja/docs/Web/CSS/width\"><code>width</code></a> および <a href=\"/ja/docs/Web/CSS/height\"><code>height</code></a> がコンテンツだけでなく、境界を含む要素全体の寸法を設定することを意味します。ですから、 <code>width: 40%</code> と設定すると、ボックスの幅は常に親の <code>40%</code> となり、 <a href=\"/ja/docs/Web/CSS/padding\"><code>padding</code></a> と <a href=\"/ja/docs/Web/CSS/border\"><code>border</code></a> の幅がコンテンツの幅に追加されるのではなく、差し引かれることになります。とても便利ですね。詳しくは、 <a href=\"https://www.paulirish.com/2012/box-sizing-border-box-ftw/\" class=\"external\" rel=\" noopener\">* { Box-sizing: Border-box } FTW</a> (Paul Irish) を参照してください。</p>"}},{"type":"prose","value":{"id":"柔軟な置換要素","title":"柔軟な置換要素","isH3":false,"content":"<p>現在はかなりうまくいっていますが、まだいくつかの問題が残っています。まず最初に、 <a href=\"/ja/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a> と <a href=\"/ja/docs/Web/HTML/Element/img\"><code>&lt;img&gt;</code></a> 要素を、裸でスタイルのない最初の 2 つの列の中に入れるとどうなるかを見てみましょう。</p>\n<p>\n  <img src=\"/en-US/docs/Web/Progressive_web_apps/Responsive/responsive_design_building_blocks/broken-images.png\" alt=\"\" width=\"480\" height=\"316\" loading=\"lazy\">\n</p>\n<p>置換要素の大きさは、その要素に挿入されたメディアの大きさによって決まり、メディアの大きさは固定されているため、置換要素は包含要素からはみ出し、レイアウトを乱してしまいます。これは非常に恐ろしいことですが、一般的にこの種の問題は簡単な CSS で簡単に解決できます。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">img, video</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これにより、置換要素は、何があってもコンテナーの幅に収まるようになります。ただし、コンテナーの幅に満たない場合は、コンテナーを埋めるために伸長されることはありません。スナップショットの例では、若干異なるコードになりました。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">x-card:nth-child(1) video, x-card:nth-child(2) img</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    …\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これは <a href=\"/ja/docs/Web/CSS/max-width\"><code>max-width</code></a> とは微妙に異なりますが、重要な違いです。つまり、常に同じ大きさになるようにしたいのです。動画は常に動的にリサイズされますが、そこから撮影された画面キャプチャはリサイズされません。そのため、 <code>max-width: 100%</code> を使用すると画面のリサイズ時に、次のように異なる大きさの要素を含む厄介なレイアウトになってしまう可能性がありました。</p>\n<p>\n  <img src=\"/en-US/docs/Web/Progressive_web_apps/Responsive/responsive_design_building_blocks/broken-max-width-layout.png\" alt=\"\" width=\"480\" height=\"220\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"メディアクエリー","title":"メディアクエリー","isH3":false,"content":"<p>流動グリッドは素晴らしいスタートですが、特定のポイント（ブレイクポイントと呼ばれる）でレイアウトが崩れ始めることに気づくでしょう。これらのポイントでは、レイアウトの問題を修正するためにレイアウトを変更したいと思うでしょうが、これはメディアクエリーを使って行うことができます。</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>Note:</strong> メディアクエリーとは、 CSS3 の機能の一つで、メディア特性の検査結果に応じて CSS を選択的に適用することができるものです。基本的なことについては、<a href=\"/ja/docs/Web/CSS/Media_Queries/Using_media_queries\">メディアクエリー</a>を参照してください。</p>\n</div>"}},{"type":"prose","value":{"id":"典型的なデスクトップレイアウト","title":"典型的なデスクトップレイアウト","isH3":true,"content":"<p>今回の例では、すでに見たようにデスクトップレイアウトを採用しています。これは、スタイルシートの先頭に含まれる CSS ルールを使って作成されており、メディアクエリーが発生する前に作成されています。</p>\n<p>\n  <img src=\"/en-US/docs/Web/Progressive_web_apps/Responsive/responsive_design_building_blocks/desktop-layout.png\" alt=\"\" width=\"600\" height=\"184\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"中間の幅のレイアウト","title":"中間の幅のレイアウト","isH3":true,"content":"<p>タブレットや狭いノートパソコンの画面でも動作するように、中間の幅のレイアウトも用意します。これは、最初のメディアクエリー内のすべての CSS によって作成されています。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token atrule\"><span class=\"token rule\">@media</span> all <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 1024px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">x-card:nth-child(1), x-card:nth-child(2)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token selector\">x-card:nth-child(3)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">clear</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token selector\">x-card:nth-child(3) img</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 20%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ここでは、列の幅を変更し、 3 列目の浮動を削除しています（浮動のおかしな動きを防ぐためにクリアを追加しています）。また、3 つ目のコンテナー（もはやカラムではなく、これはギャラリーです）内の画像の幅を変更し、1 行に 5 枚の画像を表示するようにしました（以前は 1 行に 3 枚でした）。</p>\n<p>\n  <img src=\"/en-US/docs/Web/Progressive_web_apps/Responsive/responsive_design_building_blocks/middle-layout.png\" alt=\"\" width=\"480\" height=\"390\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"狭い画面／モバイルのレイアウト","title":"狭い画面／モバイルのレイアウト","isH3":true,"content":"<p>続いて、モバイルアプリやオープンウェブアプリに適した狭い画面のレイアウトです。これは複数のパーツで構成されています。まず、予想通り、メインの CSS にメディアクエリーがあります。これはかなり重いので、部分的に見ていきましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token atrule\"><span class=\"token rule\">@media</span> all <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 480px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">x-card:nth-child(1), x-card:nth-child(2), x-card:nth-child(3)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token selector\">button</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token selector\">x-card:nth-child(1) video, x-card:nth-child(2) img</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 0px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>この最初のブロックでは、モバイルアプリでは必要のなかった広い画面のレイアウトのさまざまな項目がリセットされています。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code>  <span class=\"token selector\">x-card:nth-child(1) video, x-card:nth-child(2) img, x-card:nth-child(3)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 17.5vw<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token selector\">x-card:nth-child(1) button, x-card:nth-child(2) button</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token selector\">x-card:nth-child(2) button:nth-of-type(2)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> 5.9rem<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token selector\">x-card:nth-child(1) button</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 7vw<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token selector\">x-card:nth-child(2) button</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 7vw<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>次のルールでは、最初の 2 枚のカード内のボタンの大きさを調整し、すべてのカードのコンテンツに上の余白を与えて、ナビゲーションボタンの下にコンテンツが隠れてしまわないようにしています（以下参照）。これは、 Mozilla Brick （下記参照)）がコンポーネントを画面の幅と高さの 100% にすることを強制するために必要でした。これらに <code>vw</code> (viewport width) の単位を使用しました。 <code>1vw</code> はビューポート幅の 1% に相当します。これにより、ビューポート幅に合わせて寸法がうまく拡大縮小されます。このセクションの最後に、すべてのボタンをカードの下部に配置することで、さまざまなビューポートの大きさでもレイアウトが問題なく表示されるようにしました。さらに、カードの第 2 ボタンを、ボタンの幅分だけ上に配置するルールを追加しました。ギャラリーで画像をクリックすると、カードの削除やキャンセルのオプションが表示されますが、 2 つのボタンを重ねて配置したくありません。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">x-card:nth-child(3) img</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>このルールにより、ギャラリー画像の幅が変更され、 1 行に 2 枚の画像が表示されるようになりました。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code>  <span class=\"token selector\">nav</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 1000<span class=\"token punctuation\">;</span>\n\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> -webkit-flex<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> -moz-flex<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> -ms-flexbox<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token selector\">nav button</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 6.8vw<span class=\"token punctuation\">;</span>\n\n    <span class=\"token property\">-webkit-flex</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">-moz-flex</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">-ms-flex</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">flex</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n\n    <span class=\"token property\">border-left</span><span class=\"token punctuation\">:</span> 1px solid <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>100<span class=\"token punctuation\">,</span>100<span class=\"token punctuation\">,</span>100<span class=\"token punctuation\">,</span>0.4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token selector\">nav button:first-child</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">border-left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>この最後のルールでは、 <a href=\"/ja/docs/Web/HTML/Element/nav\"><code>&lt;nav&gt;</code></a> の表示値を <code>flex</code> に変更して表示させます（他のビューでは必要ないため、スタイルシートの先頭にある既定の CSS では <code>none</code> に設定されていました）。次に、絶対配置指定と <a href=\"/ja/docs/Web/CSS/z-index\"><code>z-index</code></a> を使用して、文書フローの中で空間を取らないようにして、 x カードの上に配置します（x カードに上端マージンを与えたのはこのためです）。</p>\n<p>次に、ボタンの <code>font-size</code> を <code>6.8vw</code> に設定しています。なぜでしょう？それは、先ほど x カードのトップマージンを <code>17vw</code> に設定したからです。アプリ内のすべてのボタンは、スタイルシートの一番上にある既定の CSS で、 <code>line-height</code> が 2.5 に設定されています（信じられない方は確認してみてください）。そして、 6.8 x 2.5 = 17 です。</p>\n<p>最後に<code>flex: 1;</code>を使って、ボタンが常に同じ割合でライン上に配置されるようにしています。それでは、下の画像のようなモバイルレイアウトを見てみましょう。</p>\n<p>\n  <img src=\"/en-US/docs/Web/Progressive_web_apps/Responsive/responsive_design_building_blocks/mobile-layout.png\" alt=\"モバイルアプリ表示用の 1 列レイアウトで、カード間を移動するための 3 つのボタン、画像ビューアー、ボタンには「Save Picture」ボタンを配置しています。\" width=\"304\" height=\"417\" loading=\"lazy\">しかし、このモバイルアプリのレイアウトには、まだまだ仕掛けがあります。前述したように、モバイルアプリのレイアウトには、すぐに使えるモバイル UI コンポーネントの集合体である <a href=\"https://mozilla.github.io/brick/\" class=\"external\" rel=\" noopener\">Mozilla Brick</a> を使用しました。特に、 <a href=\"https://mozilla.github.io/brick/docs.html#deck\" class=\"external\" rel=\" noopener\">deck</a> コンポーネントは、ボタンが押されたときにカードの間に素敵なトランジション効果を与えるために使用しました。 Brick の使い方については、 <a href=\"/ja/docs/Web/Apps/app_layout/Mozilla_Brick_ready_made_UI_components\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">Mozilla Brick: ready made UI components</a> をご覧ください。\n</p>\n<p>今回の記事に関連するのは、モバイルアプリのビューを見るとき以外は、 Brick CSS と JavaScript ファイルをマークアップに適用しないようにしたことです。これを実現するために、ブリック CSS を <code>media</code> 属性を持つ別の <a href=\"/ja/docs/Web/HTML/Element/link\"><code>&lt;link&gt;</code></a> 要素を使ってページに適用しました。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dist/brick.css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>all and (max-width: 480px)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>これは、ビューポート幅が 480px 以下でないと、スタイルシート全体が HTML にリンクされないというものです。 JavaScript の話に移りますが、 <a href=\"/ja/docs/Web/HTML/Element/script\"><code>&lt;script&gt;</code></a> 要素は <code>media</code> 属性を受け付けないので、別の方法で行う必要がありました。幸いなことに、<a href=\"/ja/docs/Web/API/Window/matchMedia\"><code>window.matchMedia()</code></a>という JavaScript の構造があり、メディアクエリーが <code>true</code> を返すかどうかに応じて、条件付きで JavaScript の構造を実行することができます。そこで、 <code>brick.js</code> ファイルを開き、全体を以下のようにまとめました。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span><span class=\"token function\">matchMedia</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(max-width: 480px)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>matches<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// The whole of brick.js goes here!</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これにより、ビューポートの幅が 480px 以下でないと、 <code>brick.js</code> ファイル内の何も実行されません。問題は解決しました。</p>"}},{"type":"prose","value":{"id":"本当に広い画面","title":"本当に広い画面","isH3":true,"content":"<p>ひとつ気になるのは、ビューポートが（シネマディスプレイのように）非常に広くなると、レイアウトの幅が広がらなくなり、利用可能な空間の中央に配置されるということです。これを実現するのはとても簡単です。 <code>min-width</code> のメディアクエリーを使って、 <a href=\"/ja/docs/Web/HTML/Element/body\"><code>&lt;body&gt;</code></a> の幅をある一定の位置で固定することができます。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token atrule\"><span class=\"token rule\">@media</span> all <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 1400px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 1400px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 auto<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>しかし、実際には、代わりに次のルールを設定して、メディアクエリーを完全に削除する方が簡単です。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 1400px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 auto<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"向きの不具合","title":"向きの不具合","isH3":true,"content":"<p>モバイルアプリのレイアウトは縦向きに設計されているため、横向きの端末で見るとひどいことになっていました。この問題を解決するために、メディアクエリーを追加しました。このメディアクエリーは、デバイスが横向きに表示されているときにのみ、その内容をマークアップに適用します。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token atrule\"><span class=\"token rule\">@media</span> all <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 480px<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">orientation</span><span class=\"token punctuation\">:</span> landscape<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">nav</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n\n    <span class=\"token property\">-webkit-flex-direction</span><span class=\"token punctuation\">:</span> column<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">-moz-flex-direction</span><span class=\"token punctuation\">:</span> column<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">-ms-flex-direction</span><span class=\"token punctuation\">:</span> column<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> column<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token selector\">nav button</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 6.8vh<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token selector\">nav button</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">border-left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token selector\">x-card:nth-child(1) video, x-card:nth-child(2) img, x-card:nth-child(3)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token selector\">x-card:nth-child(1) button, x-card:nth-child(2) button</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 2rem<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これは以下のことを行います。</p>\n<ul>\n  <li>ナビボタンを調整し、フレックスボックスのレイアウト方向を変更し、フォントサイズと境界を変更して、水平方向ではなく垂直方向に配置します。</li>\n  <li>x-card のコンテンツから上部のマージンを削除し、横向きモードで画面の上部に見苦しい隙間ができないようにします。</li>\n  <li>制御ボタン（<em>Take Picture</em>、<em>Delete Photo</em> など）のサイズを変更し、大きすぎないようにして、画面に適切に収まるようにしました。</li>\n</ul>\n<p>その結果、以下のようなレイアウトになりました。</p>\n<p>\n  <img src=\"/en-US/docs/Web/Progressive_web_apps/Responsive/responsive_design_building_blocks/viewport-fail-fixed.png\" alt=\"\" width=\"479\" height=\"320\" loading=\"lazy\">\n</p>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>Note:</strong> 向きに関する別の解決策は、アプリの向きを縦か横に固定することです。インストールされたアプリで作業している場合は、<a href=\"/ja/docs/Web/Apps/Build/Manifest#orientation\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">マニフェストの orientation フィールド</a>を使って簡単に行うことができます。一般的なウェブアプリで動作する解決策を求めるのであれば、 <a href=\"/ja/docs/Web/API/CSS_Object_Model/Managing_screen_orientation#locking_the_screen_orientation\">Screen orientation API</a> を使用したり、間違った方向を使用している場合にユーザーに画面の回転を求めるメッセージを表示したりすることができます（例えば、 <code>window.innerWidth</code> が <code>window.innerHeight</code> よりも大きい場合、ゲームが横向きモードであると仮定して、「回転してください」というメッセージを表示します）。</p>\n</div>"}},{"type":"prose","value":{"id":"ビューポート","title":"ビューポート","isH3":false,"content":"<p>このアプリの例で最後に挙げられる問題は、モバイルブラウザーとメディアクエリーに関するものです。このアプリの例をモバイルブラウザーで表示した場合、せっかくのモバイルレイアウトが表示されません。代わりに以下のような画像が表示されます。</p>\n<p>\n  <img src=\"/en-US/docs/Web/Progressive_web_apps/Responsive/responsive_design_building_blocks/viewport-fail.png\" alt=\"\" width=\"320\" height=\"569\" loading=\"lazy\">これは本当に私たちが望んでいたものではないということに同意していただけると思いますが、なぜこのようなことが起こるのでしょうか？要するに、モバイルブラウザーは嘘をつきます。モバイルブラウザーは、ウェブページを本来のビューポートの幅で表示しません。代わりに、想定される高いビューポート幅（ノートパソコンの画面に近いもの）でページをレンダリングし、その結果をモバイル画面内に収まるように縮小して表示します。これは賢明な防御メカニズムです。メディアクエリーを使用していない旧来のサイトのほとんどは、例えば 320px や 480px の幅でレンダリングされるとひどい状態になります。しかし、これでは私たち責任あるウェブ開発者は、メディアクエリーを使って CSS に小さな画面のレイアウトを記述し、それをモバイル端末に表示させたいと思っても、どうにもなりません。\n</p>\n<p>このモバイルレンダリングの動作を上書きする方法として、 <a href=\"/ja/docs/Web/HTML/Element/meta\"><code>&lt;meta&gt;</code></a> タグの形で HTML ページに挿入される viewport があります。この例では、 HTML の <a href=\"/ja/docs/Web/HTML/Element/head\"><code>&lt;head&gt;</code></a> に以下を追加してみましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=480<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>これにより、ブラウザーはモバイルアプリのレイアウトを適切にレンダリングします。 <code>width=480</code> はブラウザーに「このマークアップを 480 ピクセル幅でレンダリングしてください」と伝え、その結果、メディアクエリーが適切に機能するようになります。 viewport meta タグには、他にも多くのオプションがあり、<a href=\"/ja/docs/Mozilla/Mobile/Viewport_meta_tag\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">viewport meta タグを使ってモバイルブラウザーでのレイアウトを制御する</a>で紹介されています。</p>\n<div class=\"notecard note\" id=\"sect6\">\n  <p><strong>Note:</strong> <a href=\"https://dev.w3.org/csswg/css-device-adapt/\" class=\"external\" rel=\" noopener\">device adaptation</a> という仕様があり、同じ機能を CSS で、 <code>@viewport</code> アットルールを使用して定義しています。これはおそらく、そのような情報を置くのにより合理的な場所ですが、この仕様は viewport meta タグほど対応されていないので、今のところはそちらを使うべきでしょう。</p>\n</div>"}},{"type":"prose","value":{"id":"レスポンシブな画像や動画","title":"レスポンシブな画像や動画","isH3":false,"content":"<p>また、最近増えているのが、画像や動画のウェイト（KB 単位のサイズ）と、画面上の画像の寸法をレスポンシブにすることです。デスクトップでもモバイルでも、画像はアプリの UI 内に収めたいものですが、モバイルアプリはデスクトップアプリに比べて利用可能なビューポートの寸法がはるかに小さいことも考慮する必要がありますので、モバイルデバイスにはより小さな画像をダウンロードさせるようにしなければなりません。また、一般的にモバイル端末は、デスクトップ端末に比べて帯域幅が狭く、使用できるメモリーも少ないため、キロバイト単位で増えることは影響が大きくなります。</p>\n<p>もうひとつの課題は、高解像度の画面への対応です。低解像度用にデザインされたラスターグラフィックは、高解像度の画面に表示されると小さく見えてしまう危険性があります。端末はこの問題を回避するために、レンダリングされたページに既定のズーム係数を適用します。この場合、問題となるのは、ラスター画像が拡大され、その結果、ピクセル化されたように表示されてしまうことです。</p>"}},{"type":"prose","value":{"id":"css_背景画像","title":"CSS 背景画像","isH3":true,"content":"<p>CSS の背景画像については、これはかなり簡単に解決できる問題です。<a href=\"/ja/docs/Web/Progressive_web_apps/Responsive/Mobile_first\">モバイルファースト</a>の手法を用いた場合、メディアクエリーが適用される前に、既定で CSS 内でモバイルレイアウトが作成されます。メディアクエリーは、ビューポートが一定の幅以上の場合にのみマークアップに適用される CSS を提供します。簡単な例を見てみましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">header</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>images/small-header.jpg<span class=\"token punctuation\">)</span></span> center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> all <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 480px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">header</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>images/large-header.jpg<span class=\"token punctuation\">)</span></span> center<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これは、モバイルブラウザーがダウンロードするのはモバイル用の背景画像資産だけで、デスクトップ用のモバイル資産はダウンロードしないということです。また、次のように、解像度メディアクエリーを使用して、高解像度の端末により大きなグラフィックを提供することもできます。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">button</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>images/low-res-header.jpg<span class=\"token punctuation\">)</span></span> 1rem center <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token keyword\">only</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">-webkit-min-device-pixel-ratio</span><span class=\"token punctuation\">:</span> 2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n       <span class=\"token keyword\">only</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span> <span class=\"token property\">min-resolution</span><span class=\"token punctuation\">:</span> 192dpi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n       <span class=\"token keyword\">only</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span> <span class=\"token property\">min-resolution</span><span class=\"token punctuation\">:</span> 2dppx<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">button</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>images/high-res-header.jpg<span class=\"token punctuation\">)</span></span> 1rem center <span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これはかなり複雑に見えますが、実際にはそうではありません。現時点では、ブラウザーごとに異なる解像度のメディアクエリーの種類や単位に対応しているため、いくつかのメディアクエリーオプションを提供しています。 Brett Jankord 氏が <a href=\"https://www.brettjankord.com/2012/11/28/cross-browser-retina-high-resolution-media-queries/\" class=\"external\" rel=\" noopener\">Cross Browser Retina/High Resolution Media Queries</a> で良い説明をしています。</p>"}},{"type":"prose","value":{"id":"video","title":"&lt;video&gt;","isH3":true,"content":"<p>HTML5 の動画は、レスポンシブ対応の面でもかなり充実しています。必要であれば、 <a href=\"/ja/docs/Web/HTML/Element/source\"><code>&lt;source&gt;</code></a> 属性で複数の動画ファイルを指定し、それぞれにソースと MIME タイプを指定することもできます。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video</span> <span class=\"token attr-name\">controls</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>videos/720/crystal720.mp4<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>video/mp4<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>videos/720/crystal720.webm<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>video/webm<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>しかし、もう一歩踏み込むことができます。 <code>&lt;source&gt;</code> 要素の <code>media</code> 属性にメディアクエリーを指定することができます。ブラウザーで読み込まれる動画は、ブラウザーが対応しているフォーマットと、メディア検査の結果の両方に依存します。例を挙げます。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video</span> <span class=\"token attr-name\">controls</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>videos/320/crystal320.mp4<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>video/mp4<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>all and (max-width: 480px)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>videos/320/crystal320.webm<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>video/webm<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>all and (max-width: 480px)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>videos/720/crystal720.mp4<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>video/mp4<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>all and (min-width: 481px)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>videos/720/crystal720.webm<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>video/webm<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>all and (min-width: 481px)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>これにより、サイトは利用可能な空間に基づいて様々な動画ファイルを提供し、ユーザーの体験を最適化することができます。</p>","titleAsText":"<video>"}},{"type":"prose","value":{"id":"img","title":"&lt;img&gt;","isH3":true,"content":"<p>HTML の画像はさらに難しい問題です。 HTML 画像には、ビューポートの大きさに応じて異なる画像ファイルを提供する仕組みがありません。また、ブラウザの動作には厄介な点がいくつもあるため、解決策を模索するのは想像以上に困難です。 W3C の <a href=\"https://www.w3.org/community/respimg/\" class=\"external\" rel=\" noopener\">Responsive Images Community Group</a> はこの問題を何年も議論し、 <a href=\"https://www.w3.org/TR/html-picture-element/\" class=\"external\" rel=\" noopener\">&lt;picture&gt;</a> という要素にたどり着きました。この要素は <a href=\"/ja/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a> と同様のマークアップ構造を提供し、 <a href=\"/ja/docs/Web/HTML/Element/source\"><code>&lt;source&gt;</code></a> はメディアクエリーの結果で選択可能です。もう一つの提案、 <a href=\"https://www.w3.org/html/wg/drafts/srcset/w3c-srcset/\" class=\"external\" rel=\" noopener\">srcset</a> は、アップル社によって提唱されたもので、若干異なるアプローチをとっています。その代わりに、 <a href=\"/ja/docs/Web/HTML/Element/img\"><code>&lt;img&gt;</code></a> のための新しい <code>srcset</code> 属性を提供し、その中に画像の参照を、ブラウザーがビューポートの大きさや解像度などを考慮して、どの画像を表示するのが最適かを判断するために使用できる「ヒント」とともに配置します。これらは相互に排他的であることを意図していません。</p>\n<p>これは良いことだと思います。どちらも標準化の初期段階にあり、ブラウザー間での対応もありません。現在のところ、様々なポリフィルやその他のソリューションに頼らざるを得ませんが、どれもすべての状況に対応できる完璧なものではありませんので、自分の特定の状況にどれが適しているかを判断する必要があります。利用可能なソリューションには以下のようなものがあります。</p>\n<dl>\n  <dt id=\"hisrc\"><a href=\"https://github.com/teleject/hisrc\" class=\"external\" rel=\" noopener\">HiSRC</a></dt>\n  <dd>\n    <p><a href=\"https://jquery.com\" class=\"external\" rel=\" noopener\">jQuery</a> のプラグインで、画像の小・中・大バージョンを作成し、ブラウザーの解像度や利用可能なネットワーク速度に応じて、適切なものを提供することができます。</p>\n  </dd>\n  <dt id=\"mobify.js_capturing\"><a href=\"http://www.mobify.com/mobifyjs/v2/docs/capturing/\" class=\"external\" rel=\" noopener\">Mobify.js capturing</a></dt>\n  <dd>\n    <p>Mozilla の非常に巧妙なテクニックで、ページが解析される前に、そのソースをキャプチャすることができます。これにより、ブラウザーの機能に応じて画像の <code>src</code> 値を JavaScript で置き換えることができ、ブラウザーの先読みの問題を回避することができます。これは有望ですが、古いブラウザーではあまりうまく機能しません。</p>\n  </dd>\n  <dt id=\"picturefill\"><a href=\"https://github.com/scottjehl/picturefill\" class=\"external\" rel=\" noopener\">Picturefill</a></dt>\n  <dd>\n    <p>JavaScript ベースの <code>&lt;picture&gt;</code> のポリフィルで、うまく機能していますが、多くのカスタムマークアップが必要になります。</p>\n  </dd>\n  <dt id=\"adaptive_images\"><a href=\"http://adaptive-images.com/\" class=\"external\" rel=\" noopener\">Adaptive images</a></dt>\n  <dd>\n    <p>サーバーサイドのソリューションで、ビューポートの大きさをクッキーに記録し、 PHP と <code>.htaccess</code> の組み合わせで画像を適切な大きさに変更します。これはマークアップやスクリプトを必要としませんが、いくつかの制限があります。</p>\n  </dd>\n</dl>","titleAsText":"<img>"}},{"type":"prose","value":{"id":"svg_およびその他のベクターグラフィック","title":"SVG およびその他のベクターグラフィック","isH3":true,"content":"<p>一部の画像要件（写真ではなく、アイコンやユーザーインターフェイス要素が適しています）では、ベクターグラフィックスを使用することが良い解決策となります。ベクター画像は、画像の各ピクセルに個別のデータが含まれているのではなく、数学的なアルゴリズムに基づいて計算されているため、ファイルサイズが小さくなる傾向があります。また、高解像度の端末でズームしたり表示したりした場合に、無限に拡張することができます（少なくとも理論上は）。また、モバイルアプリのパフォーマンスのもう一つの重要な要素である HTTP リクエストの数を抑えるためにも、いくつかの考えがあります。</p>\n<ul>\n  <li><a href=\"/ja/docs/Web/CSS/CSS3\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">CSS3</a> の機能を使って、画像ファイルに頼らず、可能な限りプログラムでグラフィック効果を生成するようにしましょう。これらの機能には、角丸、グラデーション、ドロップシャドウなどがあります。これらの機能は、解像度の変更やブラウザーのズームに合わせて拡張されます。 Internet Explorer 6-8 などの古いブラウザーではあまり対応されていませんが、最新の端末向けのインターフェイスを作成している場合はあまり気になりませんし、グレイスフルデグラデーションをする傾向があります。</li>\n  <li><a href=\"/ja/docs/Web/SVG\">SVG</a> を使ってインターフェイス要素を作成することもできます。 SVG はベクターグラフィックスで、最近のブラウザーでは十分に対応されて、古いブラウザーの対応にはポリフィルが用意されています。</li>\n  <li>アイコンの表示に<a href=\"/ja/docs/Web/CSS/@font-face\">ウェブフォント</a>を使用すると、ファイルサイズと HTTP リクエストを抑えるための効果的であり、現在のブラウザーと古いブラウザーの両方で対応しています。</li>\n</ul>"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/Guide\">ウェブ開発</a></li>\n  <li><a href=\"/ja/docs/Web/Guide/Mobile\">モバイルウェブ開発</a></li>\n</ul>"}}],"toc":[{"text":"流動グリッド","id":"流動グリッド"},{"text":"柔軟な置換要素","id":"柔軟な置換要素"},{"text":"メディアクエリー","id":"メディアクエリー"},{"text":"ビューポート","id":"ビューポート"},{"text":"レスポンシブな画像や動画","id":"レスポンシブな画像や動画"},{"text":"関連情報","id":"関連情報"}],"summary":"この記事では、レスポンシブデザインの主な基本要素について説明し、必要に応じてさらなる情報へのリンクを紹介します。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"The building blocks of responsive design","locale":"en-US","native":"English (US)"},{"title":"Adaptative","locale":"fr","native":"Français"},{"title":"响应式设计的基础","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/progressive_web_apps/responsive/responsive_design_building_blocks","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/progressive_web_apps/responsive/responsive_design_building_blocks/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/Progressive_web_apps","title":"プログレッシブウェブアプリ (PWA)"},{"uri":"/ja/docs/Web/Progressive_web_apps/Responsive/responsive_design_building_blocks","title":"レスポンシブデザインの構成要素"}],"pageTitle":"レスポンシブデザインの構成要素 - プログレッシブウェブアプリ (PWA) | MDN","noIndexing":false}}