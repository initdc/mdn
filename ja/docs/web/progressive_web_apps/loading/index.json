{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"プログレッシブ読み込み","mdn_url":"/ja/docs/Web/Progressive_web_apps/Loading","locale":"ja","native":"日本語","sidebarHTML":"\n<ol><li><a href=\"/ja/docs/Web/Progressive_web_apps/Installable_PWAs\">PWA をインストール可能にするには</a></li><li><a href=\"/ja/docs/Web/Progressive_web_apps/Offline_Service_workers\">サービスワーカーで PWA をオフラインで動作させる</a></li><li><a href=\"/ja/docs/Web/Progressive_web_apps/App_structure\">プログレッシブウェブアプリの構造</a></li><li><a href=\"/ja/docs/Web/Progressive_web_apps/Structural_overview\">プログレッシブウェブアプリの構造的な概要</a></li><li><a href=\"/ja/docs/Web/Progressive_web_apps/Introduction\">プログレッシブウェブアプリの紹介</a></li><li><a href=\"/ja/docs/Web/Progressive_web_apps/Loading\">プログレッシブ読み込み</a></li><li><a href=\"/ja/docs/Web/Progressive_web_apps/Add_to_home_screen\">ホーム画面に追加</a></li><li><a href=\"/ja/docs/Web/Progressive_web_apps/Re-engageable_Notifications_Push\">通知とプッシュを利用して PWA を再エンゲージ可能にするには</a></li></ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ja/docs/Web/Progressive_web_apps/Re-engageable_Notifications_Push\"> 前のページ </a></li>\n    <li><a class=\"button minimal\" href=\"/ja/docs/Web/Progressive_web_apps\"> Overview: Progressive web apps</a></li>\n    \n</ul>\n<p>前回の記事では、<a href=\"https://mdn.github.io/pwa-examples/js13kpwa/\" class=\"external\" rel=\" noopener\">js13kPWA</a> の例をプログレッシブウェブアプリケーションにするのに役立つ API について説明しました — <a href=\"/ja/docs/Web/Progressive_web_apps/Offline_Service_workers\">サービスワーカー</a>、<a href=\"/ja/docs/Web/Progressive_web_apps/Installable_PWAs\">ウェブマニフェスト</a>、<a href=\"/ja/docs/Web/Progressive_web_apps/Re-engageable_Notifications_Push\">通知、およびプッシュ</a>です。 この記事では、リソースを徐々に読み込せて、アプリのパフォーマンスをさらに向上させます。</p>"}},{"type":"prose","value":{"id":"first_meaningful_paint_—_最初の意味のあるペイント","title":"First meaningful paint — 最初の意味のあるペイント","isH3":false,"content":"<p>できるだけ早く意味のあるものをユーザーに提供することが重要です — ページが読み込まれるのを待つ時間が長いほど、すべてが完了するのを待つ前にユーザーが離れる可能性が大きくなります。 少なくとも見たいページの基本的なビューだけでなく、最終的により多くのコンテンツが読み込まれる場所にプレースホルダーを表示することもできるはずです。</p>\n<p>これはプログレッシブ読み込み (progressive loading) によっても達成できます — <a href=\"https://ja.wikipedia.org/wiki/%E9%81%85%E5%BB%B6%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF\" class=\"external\" rel=\" noopener\">遅延読み込み</a> (Lazy loading) としても知られています。 これは、できるだけ多くのリソース (HTML、CSS、JavaScript) の読み込みを遅らせること、そして最初のエクスペリエンスに本当に必要なものだけをすぐに読み込むことです。</p>"}},{"type":"prose","value":{"id":"バンドリングと分割","title":"バンドリングと分割","isH3":false,"content":"<p>多くの訪問者はウェブサイトのすべての単一ページを通過するわけではありません、それでも通常のアプローチは持っているすべての機能を一つの大きなファイルに束ねることです。 <code>bundle.js</code> ファイルは数メガバイトになる可能性があり、単一の <code>style.css</code> の束には、基本的な CSS 構造定義から、（モバイル、タブレット、デスクトップ、印刷専用など）サイトのすべてのバージョンで可能なすべてのスタイルまですべてを含めることができます。</p>\n<p>すべての情報をたくさんの小さなファイルではなく 1 つのファイルとして読み込むほうが速いのですが、最初にユーザーがすべてを必要としていない場合は、重要なものだけを読み込み、必要に応じて他のリソースを管理できます。</p>"}},{"type":"prose","value":{"id":"レンダリングをブロックするリソース","title":"レンダリングをブロックするリソース","isH3":false,"content":"<p>バンドリングは問題です — ブラウザーはレンダリングされた結果を画面に表示する前に、HTML、CSS、および JavaScript を読み込む必要があるためです。 最初のウェブサイトへのアクセスから読み込みが完了するまでの数秒間に、ユーザーは空白のページを見ますが、これは悪いエクスペリエンスです。</p>\n<p>これを修正するために、例えば、JavaScript ファイルに次のように <code>defer</code> を追加することができます。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">defer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>それらは文書自体が解析された<em>後</em>にダウンロードされて実行されるので、それは HTML 構造のレンダリングをブロックしません。 CSS ファイルを分割して次のようにメディア種別を追加することもできます。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>style.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>print.css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>print<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>これは、条件が満たされた場合にのみそれらを読み込むようブラウザーに指示します。</p>\n<p>js13kPWA デモアプリでは、CSS はそれらをどのように読み込むかに関して特別な規則なしで単一のファイルにすべてを残すのに十分に単純です。 さらに進んで、<code>style.css</code> から <code>index.html</code> の <code>&lt;head&gt;</code> 内の <code>&lt;style&gt;</code> タグにすべてを移動することもできます — これによりパフォーマンスがさらに向上しますが、例を読みやすくするために、このアプローチもスキップします。</p>"}},{"type":"prose","value":{"id":"画像","title":"画像","isH3":false,"content":"<p>JavaScript と CSS 以外にも、ウェブサイトには多くの画像が含まれているでしょう。 HTML に <a href=\"/ja/docs/Web/HTML/Element/img\"><code>&lt;img&gt;</code></a> 要素を含めると、最初にウェブサイトにアクセスしたときに、参照されているすべての画像が取得されてダウンロードされます。 サイトの準備が整ったことをアナウンスする前にダウンロードするメガバイトの画像データを持っているのは珍しいことではありませんが、これもまたパフォーマンスに対する悪い認識を生み出します。 サイトを閲覧する最初の段階で、可能な限り最高の品質のすべての画像を必要とするわけではありません。</p>\n<p>これは最適化することができます。 まず第一に、<a href=\"https://tinypng.com/\" class=\"external\" rel=\" noopener\">TinyPNG</a> に似たツールやサービスを使うべきで、それはあまり品質を変えずに画像のファイルサイズを減らすでしょう。 その点を過ぎていれば、JavaScript を使って画像の読み込みを最適化することを考え始めることができます。 以下で説明します。</p>"}},{"type":"prose","value":{"id":"プレースホルダー画像","title":"プレースホルダー画像","isH3":true,"content":"<p><code>&lt;img&gt;</code> 要素の <code>src</code> 属性で参照されるゲームのすべてのスクリーンショットを自動的にダウンロードするようにする代わりに、JavaScript で選択的に実行できます。 js13kPWA アプリは代わりにプレースホルダー画像を使用し、これは小さくて軽量です。 一方、ターゲット画像への最終パスは次のように <code>data-src</code> 属性に格納されます。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>data/img/placeholder.png<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">data-src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>data/img/SLUG.jpg<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>NAME<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>これらの画像は、サイトが HTML 構造の構築を完了した<em>後</em>に JavaScript で読み込まれます。 プレースホルダー画像は元の画像と同じ方法で拡大縮小されるため、同じスペースを占有し、画像の読み込み時にレイアウトが再描画されることはありません。</p>"}},{"type":"prose","value":{"id":"javascript_による読み込み","title":"JavaScript による読み込み","isH3":true,"content":"<p><code>app.js</code> ファイルは <code>data-src</code> 属性を次のように処理します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> imagesToLoad <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img[data-src]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">loadImages</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">image</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  image<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  image<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    image<span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>imagesToLoad</code> 変数にはすべての画像への参照が含まれ、<code>loadImages</code> 関数はパスを <code>data-src</code> から <code>src</code> に移動します。 各画像が実際に読み込まれると、もう必要ではなくなったので、<code>data-src</code> 属性を削除します。 それから次のように各画像をループして読み込みます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>imagesToLoad<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">img</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">loadImages</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"css_でのぼかし","title":"CSS でのぼかし","isH3":true,"content":"<p>プロセス全体を視覚的により魅力的にするために、プレースホルダーは CSS で、ぼかしています。</p>\n<p>\n  <img src=\"/en-US/docs/Web/Progressive_web_apps/Loading/js13kpwa-placeholders.png\" alt=\"js13kPWA アプリのプレースホルダー画像のスクリーンショット\" width=\"675\" height=\"684\" loading=\"lazy\">\n</p>\n<p>最初にぼかしを付けて画像をレンダリングするので、シャープな画像に遷移することができます。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">article img[data-src]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">filter</span><span class=\"token punctuation\">:</span> <span class=\"token function\">blur</span><span class=\"token punctuation\">(</span>0.2em<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">article img</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">filter</span><span class=\"token punctuation\">:</span> <span class=\"token function\">blur</span><span class=\"token punctuation\">(</span>0em<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> filter 0.5s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これにより、0.5 秒以内にぼかし効果が取り除かれます。 これは、「読み込み」効果としては十分に効果的です。</p>"}},{"type":"prose","value":{"id":"オンデマンドで読み込む","title":"オンデマンドで読み込む","isH3":false,"content":"<p>上のセクションで説明した画像読み込みメカニズムは問題なく動作します — HTML 構造をレンダリングした後に画像を読み込むし、その過程で素晴らしい遷移効果を適用します。 問題はユーザーがページを読み込んでも最初の 2 つか 3 つしか見えないにもかかわらず、まだ<em>すべて</em>の画像を一度に読み込むことです。</p>\n<p>この問題は新しい <a href=\"/ja/docs/Web/API/Intersection_Observer_API\">Intersection Observer API</a> で解決できます — これを使用すると、ビューポートに表示されたときにのみ画像が読み込まれるようになります。</p>"}},{"type":"prose","value":{"id":"intersection_observer","title":"Intersection Observer","isH3":true,"content":"<p>これは、以前に動作していた例に対するプログレッシブエンハンスメントです — <a href=\"/ja/docs/Web/API/Intersection_Observer_API\">Intersection Observer</a>（交差監視）は、ユーザーが下にスクロールしたときにのみターゲット画像を読み込んで、ビューポートに表示させるようにします。</p>\n<p>関連するコードは次のようになります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">'IntersectionObserver'</span> <span class=\"token keyword\">in</span> window<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">items<span class=\"token punctuation\">,</span> observer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    items<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>isIntersecting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">loadImages</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        observer<span class=\"token punctuation\">.</span><span class=\"token function\">unobserve</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  imagesToLoad<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">img</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    observer<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  imagesToLoad<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">img</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">loadImages</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><a href=\"/ja/docs/Web/API/IntersectionObserver\"><code>IntersectionObserver</code></a> オブジェクトがサポートされている場合、アプリはその新しいインスタンスを作成します。 パラメータとして渡される関数は、1 つ以上の <code>items</code> が <code>observer</code> と交差している（つまり、ビューポート内に表示されている）場合を処理します。 それぞれの場合を繰り返してそれに応じて反応することができます — 画像が見えるときは、正しい画像を読み込み、監視する必要がなくなるので監視を中止します。</p>\n<p>プログレッシブエンハンスメントについての前述の説明をもう一度繰り返しましょう。 このコードは、Intersection Observer がサポートされているかどうかにかかわらずアプリが機能するように作成されています。 されていない場合は、先ほど説明したより基本的な方法を使用して画像を読み込みます。</p>"}},{"type":"prose","value":{"id":"改良点","title":"改良点","isH3":false,"content":"<p>読み込み時間を最適化するには多くの方法があり、この例ではそのうちの 1 つのアプローチのみを検討していることを忘れないでください。 JavaScript を使わずに動作させることでアプリをより安全なものにすることができます — <a href=\"/ja/docs/Web/HTML/Element/noscript\"><code>&lt;noscript&gt;</code></a> を使用して既に割り当てられた最後の <code>src</code> で画像を表示するか、<a href=\"/ja/docs/Web/HTML/Element/a\"><code>&lt;a&gt;</code></a> 要素でターゲット画像を指す <code>&lt;img&gt;</code> タグをラップすることでユーザーは必要に応じてクリックしてアクセスできます。</p>\n<p>アプリ自体は JavaScript に依存しているので、これを行いません — それがないと、ゲームのリストが読み込まれず、サービスワーカーのコードも実行されません。</p>\n<p>画像だけでなく、詳しい説明とリンクからなる完全な項目を読み込むように読み込み処理を書き直すことができます。 これは無限スクロールのように機能します — ユーザーがページを下にスクロールしたときにだけリストの項目を読み込みます。 そうすれば、初期の HTML 構造は最小限になり、読み込み時間はさらに短くなり、パフォーマンス上の利点もさらに大きくなります。</p>"}},{"type":"prose","value":{"id":"まとめ","title":"まとめ","isH3":false,"content":"<p>最初に読み込むファイルが少ない、モジュールに分割される小さいファイル、プレースホルダーを使用する、さらにオンデマンドでより多くのコンテンツを読み込む — これは初期読み込み時間を短縮するのに役立ち、アプリ作成者にメリットをもたらし、ユーザーにスムーズなエクスペリエンスを提供します。</p>\n<p>プログレッシブエンハンスメントのアプローチを忘れないでください — デバイスやプラットフォームに関係なく使用可能な製品を提供しますが、最新のブラウザーを使用しているユーザーにはエクスペリエンスを豊かなものにするようにしてください。</p>"}},{"type":"prose","value":{"id":"最終的な考え","title":"最終的な考え","isH3":false,"content":"<p>このチュートリアルのシリーズではこれですべてです — <a href=\"https://github.com/mdn/pwa-examples/tree/master/js13kpwa\" class=\"external\" rel=\" noopener\">js13kPWA サンプルアプリのソースコード</a>を調べて、<a href=\"/ja/docs/Web/Progressive_web_apps/Introduction\">紹介</a>、<a href=\"/ja/docs/Web/Progressive_web_apps/App_structure\">PWA の構造</a>、<a href=\"/ja/docs/Web/Progressive_web_apps/Offline_Service_workers\">サービスワーカーでのオフライン可用性</a>、<a href=\"/ja/docs/Web/Progressive_web_apps/Installable_PWAs\">インストール可能な PWA</a>、そして最後に<a href=\"/ja/docs/Web/Progressive_web_apps/Re-engageable_Notifications_Push\">通知</a>など、プログレッシブウェブアプリ機能の使用方法について学びました。 また、<a href=\"https://serviceworke.rs/\" class=\"external\" rel=\" noopener\">サービスワーカークックブック</a>（英語）の助けを借りてプッシュを説明しました。 そしてこの記事では、<a href=\"/ja/docs/Web/API/Intersection_Observer_API\">Intersection Observer API</a> を利用した興味深い例を含めて、プログレッシブ読み込みの概念を調べました。</p>\n<p>コードを試したり、PWA 機能を使用して既存のアプリを拡張したり、まったく新しいものを自分で作成したりしてください。 PWA は通常のウェブアプリよりも大きな利点をもたらします。</p><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ja/docs/Web/Progressive_web_apps/Re-engageable_Notifications_Push\"> 前のページ </a></li>\n    <li><a class=\"button minimal\" href=\"/ja/docs/Web/Progressive_web_apps\"> Overview: Progressive web apps</a></li>\n    \n</ul>"}}],"toc":[{"text":"First meaningful paint — 最初の意味のあるペイント","id":"first_meaningful_paint_—_最初の意味のあるペイント"},{"text":"バンドリングと分割","id":"バンドリングと分割"},{"text":"レンダリングをブロックするリソース","id":"レンダリングをブロックするリソース"},{"text":"画像","id":"画像"},{"text":"オンデマンドで読み込む","id":"オンデマンドで読み込む"},{"text":"改良点","id":"改良点"},{"text":"まとめ","id":"まとめ"},{"text":"最終的な考え","id":"最終的な考え"}],"summary":"前回の記事では、js13kPWA の例をプログレッシブウェブアプリケーションにするのに役立つ API について説明しました — サービスワーカー、ウェブマニフェスト、通知、およびプッシュです。 この記事では、リソースを徐々に読み込せて、アプリのパフォーマンスをさらに向上させます。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Progressive loading","locale":"en-US","native":"English (US)"},{"title":"Carga progresiva","locale":"es","native":"Español"},{"title":"Chargement progressif","locale":"fr","native":"Français"},{"title":"渐进式加载","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/progressive_web_apps/loading","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/progressive_web_apps/loading/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/Progressive_web_apps","title":"プログレッシブウェブアプリ (PWA)"},{"uri":"/ja/docs/Web/Progressive_web_apps/Loading","title":"プログレッシブ読み込み"}],"pageTitle":"プログレッシブ読み込み - プログレッシブウェブアプリ (PWA) | MDN","noIndexing":false}}