{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"サービスワーカーで PWA をオフラインで動作させる","mdn_url":"/ja/docs/Web/Progressive_web_apps/Offline_Service_workers","locale":"ja","native":"日本語","sidebarHTML":"\n<ol><li><a href=\"/ja/docs/Web/Progressive_web_apps/Installable_PWAs\">PWA をインストール可能にするには</a></li><li><a href=\"/ja/docs/Web/Progressive_web_apps/Offline_Service_workers\">サービスワーカーで PWA をオフラインで動作させる</a></li><li><a href=\"/ja/docs/Web/Progressive_web_apps/App_structure\">プログレッシブウェブアプリの構造</a></li><li><a href=\"/ja/docs/Web/Progressive_web_apps/Structural_overview\">プログレッシブウェブアプリの構造的な概要</a></li><li><a href=\"/ja/docs/Web/Progressive_web_apps/Introduction\">プログレッシブウェブアプリの紹介</a></li><li><a href=\"/ja/docs/Web/Progressive_web_apps/Loading\">プログレッシブ読み込み</a></li><li><a href=\"/ja/docs/Web/Progressive_web_apps/Add_to_home_screen\">ホーム画面に追加</a></li><li><a href=\"/ja/docs/Web/Progressive_web_apps/Re-engageable_Notifications_Push\">通知とプッシュを利用して PWA を再エンゲージ可能にするには</a></li></ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ja/docs/Web/Progressive_web_apps/App_structure\"> 前のページ </a></li>\n    <li><a class=\"button minimal\" href=\"/ja/docs/Web/Progressive_web_apps\"> Overview: Progressive web apps</a></li>\n    <li><a class=\"button minimal\" href=\"/ja/docs/Web/Progressive_web_apps/Installable_PWAs\"> 次のページ  </a></li>\n</ul>\n<p>js13kPWA の構造と、基本シェルが起動し実行させる様子を見てきたので、サービスワーカーを使用したオフライン機能の実装方法を見てみましょう。 この記事では、 <a href=\"https://mdn.github.io/pwa-examples/js13kpwa/\" class=\"external\" rel=\" noopener\">js13kPWA の例</a> (<a href=\"https://github.com/mdn/pwa-examples/tree/master/js13kpwa\" class=\"external\" rel=\" noopener\">ソースコードはこちら</a>) で使用されている実現方法を見てみましょう。 どのようにオフライン機能を追加するのかを学習します。</p>"}},{"type":"prose","value":{"id":"サービスワーカーの説明","title":"サービスワーカーの説明","isH3":false,"content":"<p>サービスワーカー（Service Workers）は、ブラウザーとネットワーク間の仮想プロキシです。 これらはついにフロントエンド開発者が長年にわたって苦労してきた問題を修正します — 最も注目に値するのは、ウェブサイトのアセットを適切にキャッシュし、ユーザーのデバイスがオフラインのときにそれらを利用できるようにする方法です。</p>\n<p>これらは、ページのメインの JavaScript コードとは別のスレッドで実行され、DOM 構造にアクセスすることはできません。 これは、従来のウェブプログラミングとは異なるアプローチを取り入れています — API はノンブロッキングで、異なるコンテキスト間で通信を送受信できます。 あなたはサービスワーカーに取り組むべき何かを与え、約束（<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a>）ベースのアプローチを使用して準備ができているときはいつでも結果を受け取ることができます。</p>\n<p>通知の処理、別のスレッドでの大量の計算など、オフライン機能を提供するだけではありません。 サービスワーカーは、ネットワーク要求を制御したり、それらを変更したり、キャッシュから取得したカスタム応答を提供したり、応答を完全に合成したりできるので、非常に強力です。</p>"}},{"type":"prose","value":{"id":"セキュリティ","title":"セキュリティ","isH3":true,"content":"<p>サービスワーカーは非常に強力であるため、安全なコンテキスト（HTTPS を意味する）でしか実行できません。 コードを本番環境に移行する前に最初に試してみたい場合は、いつでも localhost でテストするか GitHub Pages を設定することができます。 どちらも HTTPS をサポートしています。</p>"}},{"type":"prose","value":{"id":"オフライン優先","title":"オフライン優先","isH3":false,"content":"<p>「オフライン優先」または「キャッシュ優先」のパターンは、コンテンツをユーザーに提供するための最も一般的な戦略です。 リソースがキャッシュされてオフラインで利用可能な場合は、サーバーからダウンロードする前に最初にそれを返します。 まだキャッシュに入っていない場合は、ダウンロードして将来の使用に備えてキャッシュします。</p>"}},{"type":"prose","value":{"id":"pwa_における「プログレッシブ」","title":"PWA における「プログレッシブ」","isH3":false,"content":"<p>プログレッシブエンハンスメントとして適切に実装されている場合、サービスワーカーは、オフラインサポートを提供することで API をサポートする最新のブラウザーを使用しているユーザーにメリットをもたらすことができますが、従来のブラウザを使用しているユーザーにとっては何もだめになりません。</p>"}},{"type":"prose","value":{"id":"js13kpwa_アプリのサービスワーカー","title":"js13kPWA アプリのサービスワーカー","isH3":false,"content":"<p>十分な理論 — いくつかのソースコードを見てみましょう！</p>"}},{"type":"prose","value":{"id":"サービスワーカーの登録","title":"サービスワーカーの登録","isH3":true,"content":"<p>app.js ファイルで、新しいサービスワーカーを登録するコードを見ることから始めます。</p>\n<p><strong>注</strong> : ここでは <a href=\"http://es6-features.org/\" class=\"external\" rel=\" noopener\">es6</a> の<strong>アロー関数</strong>の構文をサービスワーカーの実装に使用しています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">'serviceWorker'</span> <span class=\"token keyword\">in</span> navigator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    navigator<span class=\"token punctuation\">.</span>serviceWorker<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./pwa-examples/js13kpwa/sw.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><a href=\"/ja/docs/Web/API/Service_Worker_API\">Service Worker API</a> をブラウザーがサポートしている場合は、<a href=\"/ja/docs/Web/API/ServiceWorkerContainer/register\"><code>ServiceWorkerContainer.register()</code></a> メソッドを使用してサイトに対して登録します。 その内容は <code>sw.js</code> ファイルにあり、登録が成功した後に実行できます。 これが <code>app.js</code> ファイルの中にある唯一のサービスワーカーのコードで、それ以外のサービスワーカー固有のものはすべて <code>sw.js</code> ファイル自体にあります。</p>"}},{"type":"prose","value":{"id":"サービスワーカーのライフサイクル","title":"サービスワーカーのライフサイクル","isH3":true,"content":"<p>登録が完了すると、<code>sw.js</code> ファイルが自動的にダウンロードされてからインストールされ、最後にアクティブになります。</p>\n<h4 id=\"インストール\">インストール</h4>\n<p>API を使用すると、関心のある重要なイベントのイベントリスナーを追加できます — 最初のものは <code>install</code> イベントです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>self<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'install'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[Service Worker] Install'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>install</code> リスナーで、キャッシュを初期化し、オフラインで使用するためにファイルをキャッシュに追加することができます。 js13kPWA アプリはまさにそれを行います。</p>\n<p>まず、キャッシュ名を格納するための変数が作成され、アプリシェル（app shell）のファイルが 1 つの配列にリストされます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> cacheName <span class=\"token operator\">=</span> <span class=\"token string\">'js13kPWA-v1'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> appShellFiles <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">'/pwa-examples/js13kpwa/'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/pwa-examples/js13kpwa/index.html'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/pwa-examples/js13kpwa/app.js'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/pwa-examples/js13kpwa/style.css'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/pwa-examples/js13kpwa/fonts/graduate.eot'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/pwa-examples/js13kpwa/fonts/graduate.ttf'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/pwa-examples/js13kpwa/fonts/graduate.woff'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/pwa-examples/js13kpwa/favicon.ico'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/pwa-examples/js13kpwa/img/js13kgames.png'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/pwa-examples/js13kpwa/img/bg.png'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/pwa-examples/js13kpwa/icons/icon-32.png'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/pwa-examples/js13kpwa/icons/icon-64.png'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/pwa-examples/js13kpwa/icons/icon-96.png'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/pwa-examples/js13kpwa/icons/icon-128.png'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/pwa-examples/js13kpwa/icons/icon-168.png'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/pwa-examples/js13kpwa/icons/icon-192.png'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/pwa-examples/js13kpwa/icons/icon-256.png'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/pwa-examples/js13kpwa/icons/icon-512.png'</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>次に、<code>data/games.js</code> ファイルからのコンテンツとともにロードされる画像へのリンクが 2 番目の配列に生成されます。 その後、両方の配列は <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\"><code>Array.prototype.concat()</code></a> 関数を使ってマージされます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> gamesImages <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>games<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  gamesImages<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data/img/'</span><span class=\"token operator\">+</span>games<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>slug<span class=\"token operator\">+</span><span class=\"token string\">'.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> contentToCache <span class=\"token operator\">=</span> appShellFiles<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>gamesImages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>それから、<code>install</code> イベント自体を管理できます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>self<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'install'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[Service Worker] Install'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  e<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span>\n    caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>cacheName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cache</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[Service Worker] Caching all: app shell and content'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>contentToCache<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ここで説明が必要なことが 2 つあります — <a href=\"/ja/docs/Web/API/ExtendableEvent/waitUntil\"><code>ExtendableEvent.waitUntil</code></a> が行うことと、<a href=\"/ja/docs/Web/API/Cache\" title=\"caches\"><code>caches</code></a> オブジェクトとは何か。</p>\n<p>サービスワーカーは、<code>waitUntil</code> 内のコードが実行されるまでインストールされません。 それは約束（promise）を返します — インストールにはしばらく時間がかかるかもしれないので完了するまで待つこのアプローチが必要です。</p>\n<p><code>caches</code> は特定のサービスワーカーの範囲内でデータの保存を可能にする特別な <a href=\"/ja/docs/Web/API/CacheStorage\"><code>CacheStorage</code></a> オブジェクトです — <a href=\"/ja/docs/Web/API/Web_Storage_API\">ウェブストレージ</a>は同期的であるため、ウェブストレージへの保存は機能しません。 サービスワーカーでは、代わりに Cache API を使用します。</p>\n<p>ここでは、指定した名前でキャッシュを開き、アプリが使用するすべてのファイルをキャッシュに追加するので、次回のロード時に利用可能になります（要求 URL で識別されます）。</p>\n<h4 id=\"アクティベーション\">アクティベーション</h4>\n<p><code>activate</code> イベントもあり、これは <code>install</code> と同じ方法で使用されます。 このイベントは通常、不要になったファイルを削除し、一般的にアプリの後にクリーンアップするために使用されます。 私たちのアプリでそれをする必要はないので、それをスキップします。</p>"}},{"type":"prose","value":{"id":"フェッチへの応答","title":"フェッチへの応答","isH3":true,"content":"<p>また、自由に使える <code>fetch</code> イベントもあり、これは HTTP 要求がアプリから発するたびに発生します。 これは要求を傍受してカスタム応答でそれらに応答することを可能にするので非常に便利です。 これは簡単な使用例です。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>self<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fetch'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[Service Worker] Fetched resource '</span><span class=\"token operator\">+</span>e<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>応答は望むものなら何でも構いません — 要求されたファイル、そのキャッシュされたコピー、または特定のことを実行する JavaScript コードの一部 — 可能性は無限大です。</p>\n<p>このサンプルアプリでは、リソースが実際にキャッシュ内にある限り、ネットワークではなくキャッシュからコンテンツを提供します。 アプリがオンラインかオフラインかに関係なく、これを行います。 ファイルがキャッシュにない場合、アプリはそれを提供する前にまずそこに追加します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>self<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fetch'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  e<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>\n    caches<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[Service Worker] Fetching resource: '</span><span class=\"token operator\">+</span>e<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> r <span class=\"token operator\">||</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>cacheName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cache</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[Service Worker] Caching new resource: '</span><span class=\"token operator\">+</span>e<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          cache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ここでは、キャッシュ内のリソースを見つけ、存在する場合は応答を返そうとする関数を使用して、<code>fetch</code> イベントに応答します。 存在しない場合は、別のフェッチ要求を使用してネットワークからそれをフェッチし、次に応答がキャッシュに格納されるので、次に要求されたときに応答が使用可能になります。</p>\n<p><a href=\"/ja/docs/Web/API/FetchEvent/respondWith\"><code>FetchEvent.respondWith</code></a> メソッドが制御を引き継ぎます — これは、アプリとネットワークの間のプロキシサーバーとして機能する部分です。 これにより、すべての要求に対して、必要な応答を返すことができます — サービスワーカーによって準備され、キャッシュから取得され、必要に応じて変更された。</p>\n<p>それでおしまい！ 私たちのアプリはインストール時にそのリソースをキャッシュしてキャッシュからのフェッチでそれらを提供しているので、ユーザーがオフラインであっても機能します。 追加されるたびに新しいコンテンツもキャッシュします。</p>"}},{"type":"prose","value":{"id":"更新","title":"更新","isH3":false,"content":"<p>まだカバーしておくべき 1 つのポイントがあります — 新しいアセットを含むアプリの新しいバージョンが利用可能になったときにどのようにサービスワーカーをアップグレードするのでしょうか？ これには、キャッシュ名のバージョン番号が重要です。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> cacheName <span class=\"token operator\">=</span> <span class=\"token string\">'js13kPWA-v1'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これが v2 に更新されるとき、新しいキャッシュに（新しいファイルを含む）すべてのファイルを追加することができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>contentToCache<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/pwa-examples/js13kpwa/icons/icon-32.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...</span>\n\nself<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'install'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  e<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span>\n    caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'js13kPWA-v2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cache</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>contentToCache<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>新しいサービスワーカーがバックグラウンドでインストールされ、前のバージョン（v1）はそれを使用するページがなくなるまで正しく動作します — 新しいサービスワーカーがアクティブになり、古いページからページの管理を引き継ぎます。</p>"}},{"type":"prose","value":{"id":"キャッシュのクリア","title":"キャッシュのクリア","isH3":false,"content":"<p>スキップした <code>activate</code> イベントを覚えていますか？ これは、不要になった古いキャッシュを消去するために使用できます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>self<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'activate'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  e<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span>\n    caches<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">keyList</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>keyList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">!==</span> cacheName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これにより、必要なファイルだけがキャッシュに保存されるので、ゴミが残ることはありません — <a href=\"/ja/docs/Web/API/IndexedDB_API/Browser_storage_limits_and_eviction_criteria\">ブラウザーで利用可能なキャッシュスペースは限られている</a>ので、後で自分でクリーンアップすることをお勧めします。</p>"}},{"type":"prose","value":{"id":"その他のユースケース","title":"その他のユースケース","isH3":false,"content":"<p>サービスワーカーが提供する機能は、キャッシュからファイルを提供することだけではありません。 大量の計算が必要な場合は、メインスレッドからそれらをオフロードしてワーカーで実行し、使用可能になったらすぐに結果を受け取ることができます。 パフォーマンス面では、今は必要ではないが近い将来にある可能性があるリソースをプリフェッチすることができるため、実際にそれらのリソースが必要な場合はアプリの速度が速くなります。</p>"}},{"type":"prose","value":{"id":"まとめ","title":"まとめ","isH3":false,"content":"<p>この記事では、PWA をサービスワーカーとオフラインで連携させる方法について簡単に説明しました。 <a href=\"/ja/docs/Web/API/Service_Worker_API\">Service Worker API</a> の背後にある概念と、それをより詳細に使用する方法についてもっと知りたい場合は、さらに詳しい資料をチェックしてください。</p>\n<p><a href=\"/ja/docs/Web/API/Push_API\">プッシュ通知</a>を処理するときにもサービスワーカーを使用します — これについては後の記事で説明します。</p><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ja/docs/Web/Progressive_web_apps/App_structure\"> 前のページ </a></li>\n    <li><a class=\"button minimal\" href=\"/ja/docs/Web/Progressive_web_apps\"> Overview: Progressive web apps</a></li>\n    <li><a class=\"button minimal\" href=\"/ja/docs/Web/Progressive_web_apps/Installable_PWAs\"> 次のページ  </a></li>\n</ul>"}}],"toc":[{"text":"サービスワーカーの説明","id":"サービスワーカーの説明"},{"text":"オフライン優先","id":"オフライン優先"},{"text":"PWA における「プログレッシブ」","id":"pwa_における「プログレッシブ」"},{"text":"js13kPWA アプリのサービスワーカー","id":"js13kpwa_アプリのサービスワーカー"},{"text":"更新","id":"更新"},{"text":"キャッシュのクリア","id":"キャッシュのクリア"},{"text":"その他のユースケース","id":"その他のユースケース"},{"text":"まとめ","id":"まとめ"}],"summary":"js13kPWA の構造と、基本シェルが起動し実行させる様子を見てきたので、サービスワーカーを使用したオフライン機能の実装方法を見てみましょう。 この記事では、 js13kPWA の例 (ソースコードはこちら) で使用されている実現方法を見てみましょう。 どのようにオフライン機能を追加するのかを学習します。","popularity":0.0003,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Making PWAs work offline with Service workers","locale":"en-US","native":"English (US)"},{"title":"Hacer que las PWAs trabajen desconectadas con servicio workers","locale":"es","native":"Español"},{"title":"Faire fonctionner les PWAs en mode déconnecté grâce aux Service workers","locale":"fr","native":"Français"},{"title":"Service worker를 사용해 PWA를 오프라인에서 동작하게 만들기","locale":"ko","native":"한국어"},{"title":"通过 Service workers 让 PWA 离线工作","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/progressive_web_apps/offline_service_workers","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/progressive_web_apps/offline_service_workers/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/Progressive_web_apps","title":"プログレッシブウェブアプリ (PWA)"},{"uri":"/ja/docs/Web/Progressive_web_apps/Offline_Service_workers","title":"サービスワーカーで PWA をオフラインで動作させる"}],"pageTitle":"サービスワーカーで PWA をオフラインで動作させる - プログレッシブウェブアプリ (PWA) | MDN","noIndexing":false}}