{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"NDEFRecord.toRecords()","mdn_url":"/ja/docs/Web/API/NDEFRecord/toRecords","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/NDEFRecord\"><code>NDEFRecord</code></a></strong></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard secure\" id=\"sect1\"><p><strong>安全なコンテキスト用:</strong> この機能は一部またはすべての<a href=\"#browser_compatibility\">対応しているブラウザー</a>において、<a href=\"/ja/docs/Web/Security/Secure_Contexts\">安全なコンテキスト</a> (HTTPS) でのみ利用できます。</p></div><div class=\"notecard experimental\" id=\"sect2\"><p><strong>Experimental:</strong> <strong>これは<a href=\"/ja/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">実験的な機能</a>です。</strong><br>本番で使用する前に<a href=\"#browser_compatibility\">ブラウザー互換性一覧表</a>をチェックしてください。</p></div>\n<p><strong><code>toRecords()</code></strong> は <a href=\"/ja/docs/Web/API/NDEFRecord\"><code>NDEFRecord</code></a> インターフェイスのメソッドで、 <a href=\"/ja/docs/Web/API/NDEFRecord/data\"><code>NDEFRecord.data</code></a> を <a href=\"/ja/docs/Web/API/NDEFRecord/recordType\"><code>NDEFRecord.recordType</code></a> に基づいた一連のレコードに変換し、その結果を返すものです。これにより、スマートポスターや外部型レコードなど、ネストしたレコードを含む可能性のあるレコード型のペイロードを解釈することができます。</p>"}},{"type":"prose","value":{"id":"構文","title":"構文","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>NDEFRecord<span class=\"token punctuation\">.</span><span class=\"token function\">toRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"引数","title":"引数","isH3":true,"content":"<p>なし。</p>"}},{"type":"prose","value":{"id":"返値","title":"返値","isH3":true,"content":"<p><a href=\"/ja/docs/Web/API/NDEFRecord\"><code>NDEFRecord</code></a> のリストです。</p>"}},{"type":"prose","value":{"id":"例外","title":"例外","isH3":false,"content":"<dl>\n  <dt id=\"domexception\"><a href=\"/ja/docs/Web/API/DOMException\"><code>DOMException</code></a> <code>\"NotSupported\"</code></dt>\n  <dd>\n    <p><a href=\"/ja/docs/Glossary/User_agent\">ユーザーエージェント</a>が <a href=\"/ja/docs/Web/API/NDEFRecord/data\"><code>NDEFRecord.data</code></a> と <a href=\"/ja/docs/Web/API/NDEFRecord/recordType\"><code>NDEFRecord.recordType</code></a> のこの組み合わせを解釈する方法を知らないことを示します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":"<p>NDEF メッセージをペイロードとする外部レコードを読み取ります。</p>\n<p>\n  この例では、外部型レコードを使用して、アプリケーション定義のレコードを作成します。\n  これらのレコードはペイロードとして <a href=\"/ja/docs/Web/API/NDEFMessage\"><code>NDEFMessage</code></a> を含むことができ、アプリケーションのコンテキストで使用されるローカル型を含む独自の <a href=\"/ja/docs/Web/API/NDEFRecord\"><code>NDEFRecord</code></a> オブジェクトが含まれます。スマートポスターレコード型は、ペイロードとして NDEF メッセージも含んでいることに注意してください。\n</p>\n<p>NDEF はレコードの順序を保証しないので、ペイロードとして NDEF メッセージを持つ外部型レコードを使用することは、関連するデータをカプセル化するのに便利です。</p>\n<p>この例は、ソーシャルポストの外部レコードを読み取る方法を示しています。このレコードは <a href=\"/ja/docs/Web/API/NDEFMessage\"><code>NDEFMessage</code></a> を含み、テキストレコードとローカル型 \"act\" (action) のレコードを含み、定義はスマートポスターから借用しますがローカルアプリケーションコンテキストで使用されます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> ndefReader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NDEFReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">await</span> ndefReader<span class=\"token punctuation\">.</span><span class=\"token function\">scan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nndefReader<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreading</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> externalRecord <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">.</span>records<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">record</span> <span class=\"token operator\">=&gt;</span> record<span class=\"token punctuation\">.</span>type <span class=\"token operator\">==</span> <span class=\"token string\">\"example.com:smart-poster\"</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> action<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> record <span class=\"token keyword\">of</span> externalRecord<span class=\"token punctuation\">.</span><span class=\"token function\">toRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">.</span>recordType <span class=\"token operator\">==</span> <span class=\"token string\">\"text\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> decoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextDecoder</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">.</span>encoding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      text <span class=\"token operator\">=</span> decoder<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">.</span>recordType <span class=\"token operator\">==</span> <span class=\"token string\">\":act\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      action <span class=\"token operator\">=</span> record<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">getUint8</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token comment\">// do the action</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Post \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>text<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" to timeline</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token comment\">// save for later</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Save \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>text<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" as a draft</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token comment\">// open for editing</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Show editable post with \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>text<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"仕様書","id":"仕様書","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/web-nfc/#dom-ndefrecord-torecords","title":"Web NFC API"}],"query":"api.NDEFRecord.toRecords"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"query":"api.NDEFRecord.toRecords","dataURL":"/ja/docs/Web/API/NDEFRecord/toRecords/bcd.json"}}],"toc":[{"text":"構文","id":"構文"},{"text":"例外","id":"例外"},{"text":"例","id":"例"},{"text":"仕様書","id":"仕様書"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"}],"summary":"toRecords() は NDEFRecord インターフェイスのメソッドで、 NDEFRecord.data を NDEFRecord.recordType に基づいた一連のレコードに変換し、その結果を返すものです。これにより、スマートポスターや外部型レコードなど、ネストしたレコードを含む可能性のあるレコード型のペイロードを解釈することができます。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"NDEFRecord.toRecords()","locale":"en-US","native":"English (US)"}],"source":{"folder":"ja/web/api/ndefrecord/torecords","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/ndefrecord/torecords/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/NDEFRecord","title":"NDEFRecord"},{"uri":"/ja/docs/Web/API/NDEFRecord/toRecords","title":"NDEFRecord.toRecords()"}],"pageTitle":"NDEFRecord.toRecords() - Web API | MDN","noIndexing":false}}