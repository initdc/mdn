{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"JavaScript で queueMicrotask() によるマイクロタスクの使用","mdn_url":"/ja/docs/Web/API/HTML_DOM_API/Microtask_guide","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/HTML_DOM_API\">HTML DOM API</a></strong></li><li><strong><a href=\"/ja/docs/Web/API/HTML_DOM_API\"><code>HTML_DOM_API</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>HTML DOM に関連するページ</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/BeforeUnloadEvent\"><code>BeforeUnloadEvent</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/API/DOMStringMap\"><code>DOMStringMap</code></a></li><li><a href=\"/ja/docs/Web/API/ErrorEvent\"><code>ErrorEvent</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLAnchorElement\"><code>HTMLAnchorElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLAreaElement\"><code>HTMLAreaElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLAudioElement\"><code>HTMLAudioElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLBRElement\"><code>HTMLBRElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLBaseElement\"><code>HTMLBaseElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLBodyElement\"><code>HTMLBodyElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLButtonElement\"><code>HTMLButtonElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLCanvasElement\"><code>HTMLCanvasElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLContentElement\"><code>HTMLContentElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLDListElement\"><code>HTMLDListElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLDataElement\"><code>HTMLDataElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLDataListElement\"><code>HTMLDataListElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLDialogElement\"><code>HTMLDialogElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLDivElement\"><code>HTMLDivElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLDocument\"><code>HTMLDocument</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLElement\"><code>HTMLElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLEmbedElement\"><code>HTMLEmbedElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLFieldSetElement\"><code>HTMLFieldSetElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLFormControlsCollection\"><code>HTMLFormControlsCollection</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLFormElement\"><code>HTMLFormElement</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLFrameSetElement\"><code>HTMLFrameSetElement</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/API/HTMLHRElement\"><code>HTMLHRElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLHeadElement\"><code>HTMLHeadElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLHeadingElement\"><code>HTMLHeadingElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLHtmlElement\"><code>HTMLHtmlElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLIFrameElement\"><code>HTMLIFrameElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLImageElement\"><code>HTMLImageElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLInputElement\"><code>HTMLInputElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLKeygenElement\"><code>HTMLKeygenElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLLIElement\"><code>HTMLLIElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLLabelElement\"><code>HTMLLabelElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLLegendElement\"><code>HTMLLegendElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLLinkElement\"><code>HTMLLinkElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLMapElement\"><code>HTMLMapElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLMediaElement\"><code>HTMLMediaElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLMetaElement\"><code>HTMLMetaElement</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLMeterElement\"><code>HTMLMeterElement</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/API/HTMLModElement\"><code>HTMLModElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLOListElement\"><code>HTMLOListElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLObjectElement\"><code>HTMLObjectElement</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLOptGroupElement\"><code>HTMLOptGroupElement</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/API/HTMLOptionElement\"><code>HTMLOptionElement</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLOptionsCollection\"><code>HTMLOptionsCollection</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/API/HTMLOutputElement\"><code>HTMLOutputElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLParagraphElement\"><code>HTMLParagraphElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLPictureElement\"><code>HTMLPictureElement</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLPreElement\"><code>HTMLPreElement</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLProgressElement\"><code>HTMLProgressElement</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/API/HTMLQuoteElement\"><code>HTMLQuoteElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLScriptElement\"><code>HTMLScriptElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLSelectElement\"><code>HTMLSelectElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLShadowElement\"><code>HTMLShadowElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLSourceElement\"><code>HTMLSourceElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLSpanElement\"><code>HTMLSpanElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLStyleElement\"><code>HTMLStyleElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLTableCaptionElement\"><code>HTMLTableCaptionElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLTableCellElement\"><code>HTMLTableCellElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLTableColElement\"><code>HTMLTableColElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLTableElement\"><code>HTMLTableElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLTableRowElement\"><code>HTMLTableRowElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLTableSectionElement\"><code>HTMLTableSectionElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLTemplateElement\"><code>HTMLTemplateElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLTextAreaElement\"><code>HTMLTextAreaElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLTimeElement\"><code>HTMLTimeElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLTitleElement\"><code>HTMLTitleElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLTrackElement\"><code>HTMLTrackElement</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLUListElement\"><code>HTMLUListElement</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/API/HTMLUnknownElement\"><code>HTMLUnknownElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLVideoElement\"><code>HTMLVideoElement</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HashChangeEvent\"><code>HashChangeEvent</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/API/History\"><code>History</code></a></li><li><a href=\"/ja/docs/Web/API/ImageData\"><code>ImageData</code></a></li><li><a href=\"/ja/docs/Web/API/Location\"><code>Location</code></a></li><li><a href=\"/ja/docs/Web/API/MessageChannel\"><code>MessageChannel</code></a></li><li><a href=\"/ja/docs/Web/API/MessageEvent\"><code>MessageEvent</code></a></li><li><a href=\"/ja/docs/Web/API/MessagePort\"><code>MessagePort</code></a></li><li><a href=\"/ja/docs/Web/API/Navigator\"><code>Navigator</code></a></li><li><a href=\"/ja/docs/Web/API/PageTransitionEvent\"><code>PageTransitionEvent</code></a></li><li><a href=\"/ja/docs/Web/API/Plugin\"><code>Plugin</code></a></li><li><a href=\"/ja/docs/Web/API/PluginArray\"><code>PluginArray</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PopStateEvent\"><code>PopStateEvent</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/API/PromiseRejectionEvent\"><code>PromiseRejectionEvent</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RadioNodeList\"><code>RadioNodeList</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/API/ValidityState\"><code>ValidityState</code></a></li><li><a href=\"/ja/docs/Web/API/Window\"><code>Window</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong>マイクロタスク</strong>は、それを作成した関数やプログラムが終了した後、 <a href=\"/ja/docs/Web/JavaScript/EventLoop#stack\">JavaScript 実行スタック</a>が空の場合にのみ実行され、<a href=\"/ja/docs/Glossary/User_agent\">ユーザーエージェント</a>がスクリプトの実行環境を動かすために使用しているイベントループにコントロールを返す前に実行される短い関数です。</p>\n<p>このイベントループは、ブラウザーのメインイベントループか、<a href=\"/ja/docs/Web/API/Web_Workers_API\">ウェブワーカー</a>を駆動するイベントループのどちらかです。これにより、他のスクリプトの実行を妨げるリスクなしに与えられた関数を実行することができ、同時に、ユーザーエージェントがマイクロタスクによって行われるアクションに反応する機会を得る前に、マイクロタスクが確実に実行されるようにします。</p>\n<p>JavaScript の<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise\">プロミス</a>と<a href=\"/ja/docs/Web/API/MutationObserver\">変更監視 API</a> は、どちらもコールバック実行にマイクロタスクキューを使用しますが、現在のイベントループパスがラップされるまで作業を遅延する能力がある他の場合があります。サードパーティのライブラリー、フレームワーク、ポリフィルによってマイクロタスクが使用できるようにするために、 <a href=\"/ja/docs/Web/API/queueMicrotask\"><code>queueMicrotask()</code></a> メソッドが <a href=\"/ja/docs/Web/API/Window\"><code>Window</code></a> と <a href=\"/ja/docs/Web/API/Worker\"><code>Worker</code></a> インターフェイスで公開されています。</p>"}},{"type":"prose","value":{"id":"タスクとマイクロタスク","title":"タスクとマイクロタスク","isH3":false,"content":"<p>マイクロタスクについて正しく議論するためには、まず JavaScript のタスクとは何か、マイクロタスクはタスクとどう違うのかを知っておくと便利です。これは簡単で単純な説明ですが、より詳細を知りたい場合は、記事 <a href=\"/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide/In_depth\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">徹底解説: マイクロタスクと JavaScript ランタイム環境 (en-US)</a> の情報を読んでみてください。</p>"}},{"type":"prose","value":{"id":"タスク","title":"タスク","isH3":true,"content":"<p><strong>タスク</strong>とは、プログラムの初期実行、イベントコールバックの実行、インターバルやタイムアウトの発生など、標準的なメカニズムによって実行がスケジュールされる JavaScript コードのことです。これらはすべて<strong>タスクキュー</strong>にスケジューリングされます。</p>\n<p>タスクは、以下の場合にタスクキューに追加されます。</p>\n<ul>\n  <li>新しい JavaScript プログラムやサブプログラムが（コンソールから、あるいは <a href=\"/ja/docs/Web/HTML/Element/script\"><code>&lt;script&gt;</code></a> 要素内のコードを実行して）直接実行されたとき。</li>\n  <li>イベントが発生し、イベントのコールバック関数がタスクキューに追加された場合。</li>\n  <li><a href=\"/ja/docs/Web/API/setTimeout\"><code>setTimeout()</code></a> または <a href=\"/ja/docs/Web/API/setInterval\"><code>setInterval()</code></a> で作成したタイムアウトまたはインターバルに達すると、対応するコールバックがタスクキューに追加されます。</li>\n</ul>\n<p>コードを駆動するイベントループは、これらのタスクがキューに入れられた順番に次々と処理します。タスクキューで最も古い実行可能なタスクは、イベントループの 1 回の反復の間に実行されます。その後、マイクロタスクはマイクロタスクキューが空になるまで実行され、ブラウザーはレンダリングの更新を選択できます。その後、ブラウザーはイベントループの次の反復処理に移行します。</p>"}},{"type":"prose","value":{"id":"マイクロタスク","title":"マイクロタスク","isH3":true,"content":"<p>最初、マイクロタスクとタスクの違いは小さいように見えます。どちらもキューに入れられ、適切なタイミングで実行される JavaScript のコードで構成されています。しかし、イベントループは反復が始まったときにキューに存在したタスクだけを次々と実行するのに対し、マイクロタスクのキューはとても異なる方法で処理されます。</p>\n<p>主な違いは 2 つあります。</p>\n<p>まず、タスクが終了するたびに、イベントループは、タスクが他の JavaScript コードに制御を返しているかどうかをチェックします。もしそうでなければ、マイクロタスクキューにあるすべてのマイクロタスクを実行します。マイクロタスクキューは、イベントや他のコールバックを処理した後を含め、イベントループの反復ごとに複数回処理されます。</p>\n<p>次に、マイクロタスクが <a href=\"/ja/docs/Web/API/queueMicrotask\"><code>queueMicrotask()</code></a> を呼び出してキューにさらにマイクロタスクを追加すると、それらの新しく追加されたマイクロタスクは次のタスクが実行される前に<em>実行</em>されます。これは、イベントループが、たとえ追加され続けても、キューに何も残らなくなるまでマイクロタスクを呼び続けるからです。</p>\n<div class=\"notecard warning\" id=\"sect1\">\n  <p><strong>Warning:</strong> マイクロタスクはそれ自身がさらにマイクロタスクをキューに入れることができ、イベントループはキューが空になるまでマイクロタスクを処理し続けるので、イベントループがマイクロタスクを延々と処理し続けるという現実的なリスクが存在します。再帰的にマイクロタスクを追加する方法には注意が必要です。</p>\n</div>"}},{"type":"prose","value":{"id":"マイクロタスクの使用","title":"マイクロタスクの使用","isH3":false,"content":"<p>この話を進める前に、ほとんどの開発者はマイクロタスクをあまり使わないであろうということを、もう一度書いておきます。マイクロタスクは、最近のブラウザーベースの JavaScript 開発における非常に特殊な機能で、ユーザーのコンピューターで発生することを待つ長い一連の作業の中で、他の作業の前にジャンプするコードをスケジュールすることを可能にします。この機能を乱用すると、パフォーマンスの問題につながります。</p>"}},{"type":"prose","value":{"id":"マイクロタスクのキュー挿入","title":"マイクロタスクのキュー挿入","isH3":true,"content":"<p>そのため、通常、マイクロタスクは他に解決策がない場合、または実装している機能を作るためにマイクロタスクを使う必要があるフレームワークやライブラリーを作る場合にのみ、使用すべきです。これまでもマイクロタスクをキューに挿入するためのトリックはありましたが（すぐに解決するプロミスを作るなど）、<a href=\"/ja/docs/Web/API/queueMicrotask\"><code>queueMicrotask()</code></a> メソッドの追加により、トリックなしで安全にマイクロタスクを導入するための標準的な方法が追加されました。</p>\n<p><code>queueMicrotask()</code> を導入することで、マイクロタスクを作成するためにプロミスを使用してこっそり行うときに発生する癖を回避することができます。例えば、マイクロタスクを作成するためにプロミスを使用する場合、コールバックによって投げられた例外は標準的な例外として報告されるのではなく、プロミスが拒否されたものとして報告されます。また、プロミスの作成と破棄は、マイクロタスクを適切にキューに挿入する関数が回避する、時間とメモリの両方において追加のオーバーヘッドを取ります。</p>\n<p>コンテキストがマイクロタスクを処理している間に呼び出す JavaScript 関数 (<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a>) を <code>queueMicrotask()</code> メソッドに渡します。このメソッドは、現在の実行コンテキストに応じて <a href=\"/ja/docs/Web/API/Window\"><code>Window</code></a> または <a href=\"/ja/docs/Web/API/Worker\"><code>Worker</code></a> インターフェイスによって定義されたグローバルコンテキストで公開されます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">queueMicrotask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ここにマイクロタスク内で実行されるコードを置く */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>マイクロタスク関数自体は、引数を取らず、値も返しません。</p>"}},{"type":"prose","value":{"id":"マイクロタスクを使用すべき時","title":"マイクロタスクを使用すべき時","isH3":true,"content":"<p>この節では、マイクロタスクが特に有用であるシナリオを紹介します。一般的には、 JavaScript の実行コンテキストの本体が終了した後、イベントハンドラー、タイムアウトやインターバル、その他のコールバックが処理される前に、結果をキャプチャしたりチェックしたり、クリーンアップを実行したりすることを指します。</p>\n<p>それはいつ役に立つのでしょうか？</p>\n<p>マイクロタスクを使用する主な理由は次のとおりです。結果やデータが同期的に利用できる場合でも、タスクの一貫した順序付けを保証すると同時に、ユーザーが識別できる操作の遅れのリスクを低減するためです。</p>\n<h4 id=\"プロミスの条件付き使用に関する並べ替えの確保\">プロミスの条件付き使用に関する並べ替えの確保</h4>\n<p>マイクロタスクが実行順序が常に一貫していることを保証するために使われる 1 つの状況は、プロミスが <code>if...else</code> 文（または他の条件文）の 1 つの節で使われ、他の節では使われないときです。次のようなコードを考えてみてください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>customElement<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getData</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">url</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Event</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=&gt;</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">arrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Event</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ここで紹介する問題は、 <code>if...else</code> 文の 1 つのブランチでタスクを使い（画像がキャッシュにある場合）、 <code>else</code> 節でプロミスを使用することにより、例えば以下のように、処理の順序が異なる状況が発生することです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>element<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Loaded data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fetching data...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nelement<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Data fetched\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>このコードを 2 回連続で実行すると、以下のような結果になります。</p>\n<p>データをキャッシュしていない場合</p>\n<pre class=\"notranslate\">Fetching data\nData fetched\nLoaded data\n</pre>\n<p>データをキャッシュしている場合</p>\n<pre class=\"notranslate\">Fetching data\nLoaded data\nData fetched\n</pre>\n<p>さらに悪いことに、このコードの実行が終了するまでに、要素の <code>data</code> プロパティが設定されることもあれば、設定されないこともあります。</p>\n<p>この 2 つの節のバランスをとるために、 <code>if</code> 節でマイクロタスクを使用することで、これらの操作の一貫した順序を保証することができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>customElement<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getData</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">url</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">queueMicrotask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Event</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=&gt;</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">arrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Event</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これは、マイクロタスク内で <code>data</code> の設定と <code>load</code> イベントの発行の両方を処理させることで、節のバランスを取っています（<code>if</code> 節では <code>queueMicrotask()</code> を使い、 <code>else</code> 節では <a href=\"/ja/docs/Web/API/fetch\"><code>fetch()</code></a> が使うプロミスを使用する）。</p>\n<h4 id=\"操作のバッチ化\">操作のバッチ化</h4>\n<p>また、マイクロタスクを使用して、様々なソースからの複数のリクエストを単一のバッチに収集し、同じ種類の作業を処理するために複数の呼び出しに伴う可能性のあるオーバーヘッドを回避することができます。</p>\n<p>以下のスニペットは、複数のメッセージを配列にバッチする関数を作成し、コンテキストが終了したときにそれらを単一のオブジェクトとして送信するためにマイクロタスクを使用します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> messageQueue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">sendMessage</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">message</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  messageQueue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>messageQueue<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">queueMicrotask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> json <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>messageQueue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      messageQueue<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url-of-receiver\"</span><span class=\"token punctuation\">,</span> json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>sendMessage()</code> が呼び出されると、まず指定されたメッセージがメッセージキューの配列にプッシュされます。それからが面白いのです。</p>\n<p>配列に追加したメッセージが最初のものであれば、バッチを送信するマイクロタスクをキューに入れます。マイクロタスクは、いつものように、 JavaScript の実行パスが最上位に達したとき、コールバックを実行する直前に実行されます。つまり、その間に行われる <code>sendMessage()</code> のさらなる呼び出しは、メッセージをメッセージキューにプッシュしますが、マイクロタスクを追加する前に配列の長さをチェックするため、新しいマイクロタスクはキューに入れません。</p>\n<p>マイクロタスクが実行されるとき、それは潜在的に多くのメッセージが待っている配列を持っています。それは、 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a> メソッドを使用して JSON としてそれをエンコードすることから始まります。その後、配列の内容が不要になったので、 <code>messageQueue</code> 配列を空にします。最後に、<a href=\"/ja/docs/Web/API/fetch\"><code>fetch()</code></a> メソッドを用いて、 JSON 文字列をサーバーに送信します。</p>\n<p>これにより、イベントループの同じイテレーションの中で行われる <code>sendMessage()</code> のすべての呼び出しが、タイムアウトなどの他のタスクによって送信が遅れる可能性を排除して、同じ <code>fetch()</code> 操作にメッセージを追加することができます。</p>\n<p>サーバーは JSON 文字列を受信し、おそらくそれをデコードして、結果の配列の中で見つけたメッセージを処理します。</p>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":""}},{"type":"prose","value":{"id":"単純なマイクロタスクの例","title":"単純なマイクロタスクの例","isH3":true,"content":"<p>この単純な例では、マイクロタスクをキューに入れるすることで、この最上位スクリプトの本体が実行され終わった後に、マイクロタスクのコールバックが実行されることがわかります。</p>\n<div class=\"code-example\"><pre class=\"brush: html hidden notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pre</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>log<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pre</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<h4 id=\"javascript\">JavaScript</h4>\n<div class=\"code-example\"><pre class=\"brush: js hidden notranslate\"><code><span class=\"token keyword\">let</span> logElem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">log</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">s</span> <span class=\"token operator\">=&gt;</span> logElem<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">+=</span> s <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;br&gt;\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>次のコードでは、マイクロタスクの実行をスケジュールするために <a href=\"/ja/docs/Web/API/queueMicrotask\"><code>queueMicrotask()</code></a> を呼び出しています。この呼び出しは、画面にテキストを出力するカスタム関数である <code>log()</code> への呼び出しで括られています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Before enqueueing the microtask\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">queueMicrotask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The microtask has run.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"After enqueueing the microtask\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"結果\">結果</h4><iframe class=\"sample-code-frame\" title=\"単純なマイクロタスクの例\" id=\"frame_simple_microtask_example\" width=\"640\" height=\"80\" src=\"https://yari-demos.prod.mdn.mozit.cloud/ja/docs/Web/API/HTML_DOM_API/Microtask_guide/_sample_.simple_microtask_example.html\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"タイムアウトとマイクロタスクの例","title":"タイムアウトとマイクロタスクの例","isH3":true,"content":"<p>この例では、タイムアウトは 0 ミリ秒後に（または「できるだけ早く」）発生するようにスケジュールされています。これは、新しいタスクをスケジューリングするとき（例えば <code>setTimeout()</code>）とマイクロタスクを使うときの「できるだけ早く」が何を意味するかの違いを示しています。</p>\n<div class=\"code-example\"><pre class=\"brush: html hidden notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pre</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>log<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pre</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<h4 id=\"javascript_2\">JavaScript</h4>\n<div class=\"code-example\"><pre class=\"brush: js hidden notranslate\"><code><span class=\"token keyword\">let</span> logElem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">log</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">s</span> <span class=\"token operator\">=&gt;</span> logElem<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">+=</span> s <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;br&gt;\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>次のコードでは、マイクロタスクの実行をスケジュールするために <a href=\"/ja/docs/Web/API/queueMicrotask\"><code>queueMicrotask()</code></a> を呼び出しています。この呼び出しは、画面にテキストを出力するカスタム関数である <code>log()</code> への呼び出しで括られています。</p>\n<p>以下のコードでは、 0 ミリ秒後にタイムアウトが発生するようにスケジュールし、マイクロタスクをキューに入れています。これは、追加のメッセージを出力するために <code>log()</code> を呼び出すことで括られています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Regular timeout callback has run\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">urgentCallback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*** Oh noes! An urgent callback has run!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main program started\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">queueMicrotask</span><span class=\"token punctuation\">(</span>urgentCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main program exiting\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"結果_2\">結果</h4><iframe class=\"sample-code-frame\" title=\"タイムアウトとマイクロタスクの例\" id=\"frame_timeout_and_microtask_example\" width=\"640\" height=\"100\" src=\"https://yari-demos.prod.mdn.mozit.cloud/ja/docs/Web/API/HTML_DOM_API/Microtask_guide/_sample_.timeout_and_microtask_example.html\" loading=\"lazy\"></iframe>\n<p>メインプログラム本体から記録された出力が最初に表示され、次にマイクロタスクからの出力、そしてタイムアウトのコールバックの順に表示されることに注意してください。これは、メインプログラムの実行を処理しているタスクが終了するとき、タイムアウトのコールバックがあるタスクキューよりもマイクロタスクキューの方が先に処理されるからです。タスクとマイクロタスクは別々のキューに保存され、マイクロタスクが最初に実行されることを覚えておくと、この点を整理するのに役立ちます。</p>"}},{"type":"prose","value":{"id":"関数からマイクロタスク","title":"関数からマイクロタスク","isH3":true,"content":"<p>この例では、いくつかの作業を行う関数を追加することで、前の例を少し拡張しています。この関数は <code>queueMicrotask()</code> を使ってマイクロタスクのスケジューリングを行っています。この例で重要なことは、マイクロタスクは関数が終了するときに処理されるのではなく、メインプログラムが終了するときに処理されるということです。</p>\n<div class=\"code-example\"><pre class=\"brush: html hidden notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pre</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>log<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pre</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<h4 id=\"javascript_3\">JavaScript</h4>\n<div class=\"code-example\"><pre class=\"brush: js hidden notranslate\"><code><span class=\"token keyword\">let</span> logElem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">log</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">s</span> <span class=\"token operator\">=&gt;</span> logElem<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">+=</span> s <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;br&gt;\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>メインプログラムのコードは以下の通りです。ここで <code>doWork()</code> 関数は <code>queueMicrotask()</code> を呼び出しますが、それでもマイクロタスクはプログラム全体が終了するまで起動しません。なぜなら、タスクが終了して実行スタック上に何もなくなったときがそうだからです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Regular timeout callback has run\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">urgentCallback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*** Oh noes! An urgent callback has run!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">doWork</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">queueMicrotask</span><span class=\"token punctuation\">(</span>urgentCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result <span class=\"token operator\">*=</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main program started\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">10! equals </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">doWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main program exiting\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Regular timeout callback has run\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"結果_3\">結果</h4><iframe class=\"sample-code-frame\" title=\"関数からマイクロタスク\" id=\"frame_microtask_from_a_function\" width=\"640\" height=\"100\" src=\"https://yari-demos.prod.mdn.mozit.cloud/ja/docs/Web/API/HTML_DOM_API/Microtask_guide/_sample_.microtask_from_a_function.html\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide/In_depth\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">徹底解説: マイクロタスクと JavaScript ランタイム環境 (en-US)</a></li>\n  <li><a href=\"/ja/docs/Web/API/queueMicrotask\"><code>queueMicrotask()</code></a></li>\n  <li><a href=\"/ja/docs/Learn/JavaScript/Asynchronous\">非同期 JavaScript</a>\n    <ul>\n      <li><a href=\"/ja/docs/Learn/JavaScript/Asynchronous\">非同期プログラミングの一般的概念</a></li>\n      <li><a href=\"/en-US/docs/Learn/JavaScript/Asynchronous/Introducing\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">非同期 JavaScript 入門 (en-US)</a></li>\n      <li><a href=\"/en-US/docs/Learn/JavaScript/Asynchronous\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">強調的非同期 JavaScript: タイムアウトとインターバル (en-US)</a></li>\n      <li><a href=\"/en-US/docs/Learn/JavaScript/Asynchronous/Promises\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">プロミスによる礼儀正しい非同期プログラミング (en-US)</a></li>\n      <li><a href=\"/en-US/docs/Learn/JavaScript/Asynchronous\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">正しいアプローチの選択 (en-US)</a></li>\n    </ul>\n  </li>\n</ul>"}}],"toc":[{"text":"タスクとマイクロタスク","id":"タスクとマイクロタスク"},{"text":"マイクロタスクの使用","id":"マイクロタスクの使用"},{"text":"例","id":"例"},{"text":"関連情報","id":"関連情報"}],"summary":"マイクロタスクは、それを作成した関数やプログラムが終了した後、 JavaScript 実行スタックが空の場合にのみ実行され、ユーザーエージェントがスクリプトの実行環境を動かすために使用しているイベントループにコントロールを返す前に実行される短い関数です。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using microtasks in JavaScript with queueMicrotask()","locale":"en-US","native":"English (US)"},{"title":"JavaScript의 queueMicrotask()와 함께 마이크로태스크 사용하기","locale":"ko","native":"한국어"},{"title":"在 JavaScript 中通过 queueMicrotask() 使用微任务","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/html_dom_api/microtask_guide","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/html_dom_api/microtask_guide/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/HTML_DOM_API","title":"HTML DOM API"},{"uri":"/ja/docs/Web/API/HTML_DOM_API/Microtask_guide","title":"JavaScript で queueMicrotask() によるマイクロタスクの使用"}],"pageTitle":"JavaScript で queueMicrotask() によるマイクロタスクの使用 - Web API | MDN","noIndexing":false}}