{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"履歴 API の操作","mdn_url":"/ja/docs/Web/API/History_API/Working_with_the_History_API","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/History_API\">History API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>ガイド</summary><ol><li><a href=\"/ja/docs/Web/API/History_API/Working_with_the_History_API\">Working with the History API</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>インターフェイス</summary><ol><li><a href=\"/ja/docs/Web/API/History\"><code>History</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>\n  </p>\n  HTML5 では、履歴項目を追加および変更するための <a href=\"/ja/docs/Web/API/History/pushState\" title=\"pushState()\"><code>pushState()</code></a> および <a href=\"/ja/docs/Web/API/History/replaceState\" title=\"replaceState()\"><code>replaceState()</code></a> メソッドをそれぞれ導入しています。これらのメソッドは <a href=\"/ja/docs/Web/API/Window/popstate_event\" title=\"popstate\"><code>popstate</code></a> イベントと一緒に動作します。\n<p></p>"}},{"type":"prose","value":{"id":"履歴項目の追加と修正","title":"履歴項目の追加と修正","isH3":false,"content":"<p><a href=\"/ja/docs/Web/API/History/pushState\" title=\"pushState()\"><code>pushState()</code></a> を使うことで、履歴の状態を変更した後に生成される <a href=\"/ja/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a>&nbsp;オブジェクトの HTTP ヘッダー中のリファラも変更されます。リファラは <a href=\"/ja/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a>&nbsp;オブジェクトが生成された時点での <code>this</code> となるウィンドウの持つドキュメントの URL となります。</p>"}},{"type":"prose","value":{"id":"pushstate_の例","title":"pushState() の例","isH3":true,"content":"<p>以下の JavaScript が <code>https://mozilla.org/foo.html</code> で実行されると想定してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> stateObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nhistory<span class=\"token punctuation\">.</span><span class=\"token function\">pushState</span><span class=\"token punctuation\">(</span>stateObj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"page 2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar.html\"</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>これにより URL バーには <code>https://mozilla.org/bar.html</code> と表示されますが、ブラウザーは&nbsp;<code>bar.html</code>&nbsp;を読み込むことはなくまたその存在をチェックすることはありません。</p>\n<p>ユーザーが <code>https://google.com</code> へ移動し、それから<strong>戻る</strong>ボタンをクリックしたとします。このとき、 URL バーは <code>https://mozilla.org/bar.html</code> を表示し、<code>history.state</code>&nbsp;は&nbsp;<code>stateObj</code>&nbsp;になります。<code>popstate</code> イベントはページが再読み込みされたために発行されません。ページそれ自体は <code>bar.html</code> のように見えます。</p>\n<p>再び<strong>戻る</strong>ボタンをクリックすると、URL は <code>https://mozilla.org/foo.html</code> へ変化し、 <code>popstate</code> イベントが発行され、状態は null オブジェクトとなります。ここでもまた、<code>popstate</code>&nbsp;イベントを受け取って手動でコンテンツを変更することは可能ですが、戻るという操作によって戻る前のコンテンツが変更されるわけではありません。</p>"}},{"type":"prose","value":{"id":"pushstate_メソッド","title":"pushState()&nbsp;メソッド","isH3":true,"content":"<p><code>pushState()</code> は、 <strong>状態オブジェクト</strong>、<strong>title</strong> （今は無視されます）、（任意で） <strong>URL</strong> の 3 つの引数を使用します。</p>\n<p>これら 3 つの引数について詳細に見ていきましょう。</p>\n<dl>\n  <dt id=\"状態オブジェクト\"><strong>状態オブジェクト</strong></dt>\n  <dd>\n    <p>\n      状態オブジェクトは JavaScript のオブジェクトで、 <code>pushState()</code> によって作成された新しい履歴項目と関連付けられています。ユーザーが新しい状態に遷移するたびに <code>popstate</code> イベントが発行され、そのイベントの <code>state</code> プロパティに履歴項目の状態オブジェクトのコピーが格納されます。\n      状態オブジェクトはシリアライズ可能なものであれば何でも構いません。Firefox は状態オブジェクトをユーザーのディスクに保存し、ユーザーがブラウザーを再起動した後に復元できるようにするため、状態オブジェクトのシリアライズ表現に 640k 文字というサイズ制限を課しています。もし、シリアライズされた表現がこれより大きい状態オブジェクトを <code>pushState()</code> に渡すと、このメソッドは例外を発生します。これ以上の領域が必要な場合は、 <code>sessionStorage</code> や <code>localStorage</code> を使用することをおすすめします。\n    </p>\n  </dd>\n  <dt id=\"title\"><strong>title</strong></dt>\n  <dd>\n    <p><a href=\"https://github.com/whatwg/html/issues/2174\" class=\"external\" rel=\" noopener\">Safari 以外のすべてのブラウザーは、現在この引数を無視しています</a>。ただし、将来的には使用する可能性があります。ここで空文字列を渡せば、将来このメソッドが変更されても安全です。あるいは、移動先の状態を表す短いタイトルを渡すこともできます。</p>\n  </dd>\n  <dt id=\"url\"><strong>URL</strong></dt>\n  <dd>\n    <p>新しい履歴項目の URL はこの引数で与えられます。ブラウザーは <code>pushState()</code> の呼び出しの後にはこの URL を読み込もうとしませんが、例えばユーザーがブラウザーを再起動した後などには URL を読み込もうとする可能性があることに注意してください。新しい URL は絶対的である必要はありません。相対的である場合、現在の URL に対して相対的に解決されます。新しい URL は現在の URL と同じオリジンでなければなりません。そうでない場合、<code>pushState()</code> は例外を発生します。この引数はオプションです。指定しなかった場合、文書の現在の URL が設定されます。</p>\n  </dd>\n</dl>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> Gecko 2.0 (Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1) から Gecko 5.0 (Firefox 5.0 / Thunderbird 5.0 / SeaMonkey 2.2) までの間では、渡されたオブジェクトは JSON を使用してシリアライズされます。 Gecko 6.0 (Firefox 6.0 / Thunderbird 6.0 / SeaMonkey 2.3) より、オブジェクトは<a href=\"/ja/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\">構造化複製アルゴリズム</a>を使用してシリアライズされます。これにより多種多様なオブジェクトを安全に渡せるようになります。</p>\n</div>\n<p>ある意味では、<code>pushState()</code> の呼び出しは <code>window.location = \"#foo\"</code> と設定するのと似ています。どちらも、現在の文書に関連する別の履歴項目の生成と有効化を行います。</p>\n<p>しかし、 <code>pushState()</code> にはいくらかの利点があります。</p>\n<ul>\n  <li>新しい URL は、現在の URL と同じオリジンであればどの URL にもなることができます。対照的に、 <code>window.location</code> では同じ <a href=\"/ja/docs/Web/API/Document\"><code>document</code></a> のままで、ハッシュの変更のみが可能です。</li>\n  <li>必ずしも URL を変更する必要はありません。逆に、 <code>window.location = \"#foo\";</code> では、現在のハッシュが <code>#foo</code> でない場合、新しい履歴項目の作成以外のことはできません。</li>\n  <li>新しい履歴項目に任意のデータを関連付けることができます。ハッシュを基にしたアプローチでは、関連するデータを含めた短い文字列を全てエンコードする必要があります。</li>\n  <li>その後、 <code>title</code> がブラウザーで使用された場合、このデータを（例えばハッシュとは関係なく）使用することができます。</li>\n</ul>\n<p>新しい URL が古い URL とハッシュだけ異なっていても、 <code>pushState()</code> は決して <code>hashchange</code> イベントを発行させないことに注意してください。</p>\n<p>他の文書では、 <code>null</code> の名前空間 URI を持つ要素を作成します。</p>","titleAsText":"pushState() メソッド"}},{"type":"prose","value":{"id":"replacestate_メソッド","title":"replaceState()&nbsp;メソッド","isH3":true,"content":"<p><code>history.replaceState()</code> はちょうど <code>history.pushState()</code> のように動作しますが、 <code>replaceState()</code> は新しく履歴項目を作成するのではなく、現在の履歴項目を修正します。ただし、グローバルなブラウザー履歴に新しい項目が作成されるのを防ぐものではありません。</p>\n<p>具体的には、何らかのユーザーのアクションを受け、現在の履歴項目の URL または 状態オブジェクトを更新したい場合に <code>replaceState()</code> が役立ちます。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> Gecko 2.0 (Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1) から Gecko 5.0 (Firefox 5.0 / Thunderbird 5.0 / SeaMonkey 2.2) までの間では、渡されたオブジェクトは JSON を使用してシリアライズされます。 Gecko 6.0 (Firefox 6.0 / Thunderbird 6.0 / SeaMonkey 2.3) より、オブジェクトは<a href=\"/ja/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\">構造化複製アルゴリズム</a>を使用してシリアライズされます。これにより多種多様なオブジェクトを安全に渡せるようになります。</p>\n</div>","titleAsText":"replaceState() メソッド"}},{"type":"prose","value":{"id":"replacestate_の例","title":"replaceState() の例","isH3":true,"content":"<p><code>https://mozilla.org/foo.html</code> で次の JavaScript を実行したとします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> stateObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bar\"</span> <span class=\"token punctuation\">}</span>\nhistory<span class=\"token punctuation\">.</span><span class=\"token function\">pushState</span><span class=\"token punctuation\">(</span>stateObj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"page 2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar.html\"</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>上記2行の説明は、上記の <em><a href=\"#pushstate_%E3%81%AE%E4%BE%8B\">pushState() メソッドの例</a></em> の部分で得ることができます。</p>\n<p>次に、<code>https://mozilla.org/bar.html</code> で次の JavaScript を実行したとします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>history<span class=\"token punctuation\">.</span><span class=\"token function\">replaceState</span><span class=\"token punctuation\">(</span>stateObj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"page 3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar2.html\"</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>これによって URL バーには&nbsp;<code>https://mozilla.org/bar2.html</code>&nbsp;が表示されますが、ブラウザーは <code>bar2.html</code>&nbsp;の読み込みを行わず、 <code>bar2.html</code>&nbsp;が存在するかどうかもチェックしません。</p>\n<p>仮に今、ユーザーが&nbsp;<code>https://www.microsoft.com</code>&nbsp;へ移動し、<strong>戻る</strong>ボタンを押したとします。この時点で URL バーには&nbsp;<code>https://mozilla.org/bar2.html</code>&nbsp;が表示されています。もしユーザーが再び<strong>戻る</strong>ボタンを押すと、 URL バーには&nbsp;<code>https://mozilla.org/foo.html</code>&nbsp;が表示され、<code>bar.html</code>&nbsp;を完全に回避します。</p>"}},{"type":"prose","value":{"id":"popstate_イベント","title":"popstate イベント","isH3":true,"content":"<p>アクティブな履歴項目が変更される度にウィンドウへと <code>popstate</code> イベントが発行されます。<code>pushState</code> の呼び出しまたは <code>replaceState</code> の呼び出しの影響によって、アクティベートされた履歴項目が作成された場合、<code>popstate</code> イベントの <code>state</code> プロパティは履歴項目の 状態オブジェクトのコピーを含みます。</p>\n<p>使い方の例は <a href=\"/ja/docs/Web/API/Window/popstate_event\" title=\"popstate\"><code>popstate</code></a> を参照してください。</p>"}},{"type":"prose","value":{"id":"現在の状態を読み取る","title":"現在の状態を読み取る","isH3":true,"content":"<p>ページが読み込まれたとき、 ページには null ではない状態オブジェクトがあるかもしれません。これが起こるのは、例えば、（<a href=\"/ja/docs/Web/API/History/pushState\" title=\"pushState()\"><code>pushState()</code></a> または <a href=\"/ja/docs/Web/API/History/replaceState\" title=\"replaceState()\"><code>replaceState()</code></a>) の使用によって）ページに状態オブジェクトが設定されており、ユーザーがブラウザーを再起動した場合です。ページを再読み込みした際にページは <code>onload</code> イベントを受け取りますが <code>popstate</code> イベントは受け取られません。しかしながら <a href=\"/ja/docs/Web/API/History/state\" title=\"history.state\"><code>history.state</code></a> プロパティを読み取った場合、<code>popstate</code> が発行された際に取得できるであろう状態オブジェクトを得ることができるでしょう。</p>\n<p>このように <a href=\"/ja/docs/Web/API/History/state\" title=\"history.state\"><code>history.state</code></a> プロパティを用いることで、 <code>popstate</code> イベントを待つことなく現在の履歴項目の状態を読み取ることができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> currentState <span class=\"token operator\">=</span> history<span class=\"token punctuation\">.</span>state\n</code></pre></div>"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/API/History_API\">履歴 API</a></li>\n  <li><a href=\"/ja/docs/Web/API/History_API/Example\">Ajax ナビゲーションの例</a></li>\n  <li><a href=\"/ja/docs/Web/API/Window/history\"><code>window.history</code></a></li>\n</ul>"}}],"toc":[{"text":"履歴項目の追加と修正","id":"履歴項目の追加と修正"},{"text":"関連情報","id":"関連情報"}],"summary":"pushState() を使うことで、履歴の状態を変更した後に生成される XMLHttpRequest オブジェクトの HTTP ヘッダー中のリファラも変更されます。リファラは XMLHttpRequest オブジェクトが生成された時点での this となるウィンドウの持つドキュメントの URL となります。","popularity":0.0002,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Working with the History API","locale":"en-US","native":"English (US)"},{"title":"Работа с History API","locale":"ru","native":"Русский"},{"title":"Working with the History API","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/history_api/working_with_the_history_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/history_api/working_with_the_history_api/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/History_API","title":"History API"},{"uri":"/ja/docs/Web/API/History_API/Working_with_the_History_API","title":"履歴 API の操作"}],"pageTitle":"履歴 API の操作 - Web API | MDN","noIndexing":false}}