{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Storage Access API","mdn_url":"/ja/docs/Web/API/Storage_Access_API","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/Storage_Access_API\">Storage Access API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>ガイド</summary><ol><li><a href=\"/ja/docs/Web/API/Storage_Access_API/Using\">Using the Storage Access API</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>メソッド</summary><ol><li><a href=\"/ja/docs/Web/API/Document/hasStorageAccess\"><code>Document.hasStorageAccess()</code></a></li><li><a href=\"/ja/docs/Web/API/Document/requestStorageAccess\"><code>Document.requestStorageAccess()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard experimental\" id=\"sect1\"><p><strong>Experimental:</strong> <strong>これは<a href=\"/ja/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">実験的な機能</a>です。</strong><br>本番で使用する前に<a href=\"#browser_compatibility\">ブラウザー互換性一覧表</a>をチェックしてください。</p></div>\n<p>Storage Access API（ストレージアクセス API）は、埋め込まれたクロスオリジンのコンテンツが、通常はファーストパーティのコンテキストでのみアクセスできるストレージ（これをオリジンの<em>ファーストパーティ</em>ストレージと呼びます）に無制限にアクセスする方法を提供します。 API は、埋め込まれたリソースがファーストパーティストレージに現在アクセスできるかどうかを確認し、ユーザーエージェントからファーストパーティストレージへのアクセスを要求できるメソッドを提供します。</p>"}},{"type":"prose","value":{"id":"概念と使用方法","title":"概念と使用方法","isH3":false,"content":"<p>ほとんどのブラウザーは、埋め込まれたクロスオリジンリソースのクッキーおよびサイトデータへのアクセスを制限する多くのストレージアクセスポリシーを実装しています。 これらの制限は、各最上位オリジンの下に埋め込まれたリソースに一意のストレージスペースを与えることから、サードパーティのコンテキストでリソースが読み込まれたときのストレージアクセスの完全なブロックにまで及びます。</p>\n<p>特にサードパーティのクッキーブロックポリシーに関する意味論はブラウザーごとに異なりますが、コア機能は似ています: サードパーティのコンテキストに埋め込まれたクロスオリジンリソースには、ファーストパーティのコンテキストで読み込まれたときにアクセスできるのと同じクッキーとサイトストレージへのアクセスが与えられません。</p>\n<p>これらのクッキーブロックポリシーは、ファーストパーティストレージへのアクセスを必要とする埋め込まれたクロスオリジンコンテンツを中断することが知られています。 例として、フェデレーションログイン（federated login、複数組織にまたがったログイン）では、ファーストパーティストレージに保存されている認証クッキーへのアクセスが必要になることが多く、これらのクッキーが利用できない場合、ユーザーは各サイトに個別にサインインする（または完全に中断する）必要があります。 中断した場合、サイト所有者は、ユーザーにサイトを例外として追加するか、ポリシーを完全に無効にすることを推奨することがよくあります。 結果として、埋め込まれたコンテンツとのやり取りを継続することを希望するユーザーは、すべての埋め込まれたオリジンおよびおそらくすべてのウェブサイトから読み込まれたリソースのブロックポリシーを大幅に緩和する必要があります。</p>\n<p>Storage Access API は、この問題を解決することを目的としています。 埋め込まれたクロスオリジンのコンテンツは、<a href=\"/ja/docs/Web/API/Document/requestStorageAccess\"><code>Document.requestStorageAccess()</code></a> メソッドを介してサイトごとにファーストパーティストレージへの無制限のアクセスを要求し、<a href=\"/ja/docs/Web/API/Document/hasStorageAccess\"><code>Document.hasStorageAccess()</code></a> メソッドを介して既にアクセス権があるかどうかを確認できます。</p>\n<p>さらに、セキュリティ上の理由から、サンドボックス化した <a href=\"/ja/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code></a> にはデフォルトでストレージアクセスを許可できません。 そのため、API は、<code>allow-storage-access-by-user-activation</code> <a href=\"/ja/docs/Web/HTML/Element/iframe#attr-sandbox\">sandbox トークン</a>も追加します。 次のように、埋め込まれたウェブサイトは、これを追加してストレージアクセス要求が成功することを許可するとともに、<code>allow-scripts</code> と <code>allow-same-origin</code> を使用して API の呼び出しを許可し、クッキーを持つことができるオリジンで実行します。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">sandbox</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>allow-storage-access-by-user-activation\n                 allow-scripts\n                 allow-same-origin<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  ...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>API は、潜在的なストレージの例外を、ユーザーがやり取りする意図を示したオリジンに制限するように設計されています。 これは、次の制約によって実施されます。</p>\n<ul>\n  <li>埋め込まれたコンテンツがタップやクリックなどのユーザージェスチャーを現在処理していない限り、アクセス要求は自動的に拒否されます。 これにより、ページに埋め込まれたコンテンツが過剰なアクセス要求でブラウザーまたはユーザーにスパムすることも防止されます。</li>\n  <li>ファーストパーティとしてやり取りしたことがないオリジンには、ファーストパーティストレージの概念がありません。 ユーザーの観点から見ると、そのオリジンとサードパーティの関係性しかありません。 ブラウザーが、ユーザーがファーストパーティのコンテキストで埋め込まれたコンテンツと最近やり取りしていないことをブラウザーが検出した場合、アクセス要求は自動的に拒否されます（Firefox では、「最近」は「30 日以内」です）。</li>\n</ul>\n<p>ブラウザーは、到来するストレージアクセス要求を許可するかどうかの決定にユーザーを関与させることを決定する場合があります。 ストレージ許可の存続期間とブラウザーがユーザーに通知することを決定する状況に関する詳細は現在作業中であり、準備ができ次第発表されます。</p>"}},{"type":"prose","value":{"id":"ユーザープロンプト","title":"ユーザープロンプト","isH3":false,"content":"<p>埋め込まれたクロスオリジンの文書によって <code>requestStorageAccess()</code> が呼び出されると、ユーザーエージェントは、要求オリジンにストレージアクセスを許可するかどうかの決定にユーザーを関与させることを選択できます。 現在、プロンプトヒューリスティック（Prompting heuristics、プロンプトするべきかを決める発見的方法）は Storage Access API の 2 つの実装者によって異なります。 Safari は、以前にストレージアクセスを受け取っていないすべての埋め込まれた追跡コンテンツにプロンプトを表示します。 Firefox は、追跡オリジンがサイトのしきい値数を超えてストレージアクセスを要求した後にのみユーザーにプロンプトします。 詳細については、<a href=\"/ja/docs/Web/API/Document/requestStorageAccess\"><code>Document.requestStorageAccess()</code></a> を参照してください。</p>"}},{"type":"prose","value":{"id":"safari_の実装との違い","title":"Safari の実装との違い","isH3":false,"content":"<p>API の表面は同じですが、Storage Access API を使用するウェブサイトは、Firefox と Safari の間で受け取るストレージアクセスのレベルと範囲に違いがあることを予期する必要があります。 これは、2 つのブラウザーに実装されているストレージアクセスポリシーの違いが原因です。 Firefox に固有の設計プロパティを以下に要約します。</p>\n<ul>\n  <li>埋め込まれたオリジン <code>tracker.example</code> が最上位オリジン <code>foo.example</code> でファーストパーティストレージへのアクセスを既に取得しており、ユーザーが <code>foo.example</code> からのページに埋め込まれた <code>tracker.example</code> からのページに、30 日以内に再度訪問した場合、埋め込まれたオリジンは、読み込まれるとすぐにストレージにアクセスできます。</li>\n  <li>最上位オリジン <code>foo.example</code> のページに <code>tracker.example</code> の複数の <a href=\"/ja/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code></a> が埋め込まれ、それらの <code>&lt;iframe&gt;</code> の 1 つが Storage Access API を使用してストレージアクセスを正常に取得した場合、<code>foo.example</code> 最上位オリジン上の <code>tracker.example</code> からの他のすべての iframe は、requestStorageAccess() を個別に呼び出す必要なく、すぐにストレージアクセスを取得します。</li>\n  <li><code>tracker.example</code> から埋め込まれたページが以前に最上位オリジン <code>foo.example</code> でストレージアクセスを正常に取得していた場合、<code>foo.example</code> 上の <code>tracker.example</code> からのすべての埋め込まれたサブリソース（スクリプト、画像、スタイルシートなど）がファーストパーティストレージにアクセスして読み込まれます。 つまり、Cookie ヘッダーを送って、到来する <a href=\"/ja/docs/Web/HTTP/Headers/Set-Cookie\"><code>Set-Cookie</code></a> ヘッダーを尊重する可能性があります。</li>\n  <li>Firefox では、<code>requestStorageAccess()</code> から返された Promise が解決されると、埋め込まれたページは、クッキーだけでなく、ファーストパーティストレージ全体にアクセスできます。 これには、<a href=\"/ja/docs/Web/API/Web_Storage_API\">Web Storage</a>、<a href=\"/ja/docs/Web/API/IndexedDB_API\">IndexedDB</a>、<a href=\"/ja/docs/Web/API/Cache\">DOM Cache</a> などの API へのアクセスが含まれます。</li>\n  <li>Firefox では、ストレージアクセス許可は 30 暦日が経過すると段階的に廃止されますが、Safari では、ブラウザーの使用がユーザーの操作なしで 30 日が経過するとストレージアクセス許可が段階的に廃止されます。 これは現在、Firefox 実装の制限であり、将来のバージョンで対処する可能性があります。 Safari では、Storage Access API を正常に使用すると、このカウンターがリセットされます。</li>\n</ul>\n<p>追跡クッキーをブロックするための Firefox の新しいストレージアクセスポリシーの文書には、ストレージアクセス許可の範囲の<a href=\"/en-US/docs/Web/Privacy/Storage_Access_Policy#storage_access_grants\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">詳細な説明 (en-US)</a>が含まれています。</p>"}},{"type":"prose","value":{"id":"storage_access_api_のメソッド","title":"Storage Access API のメソッド","isH3":false,"content":"<p>Storage Access API のメソッドは、<a href=\"/ja/docs/Web/API/Document\"><code>Document</code></a> インターフェイスに実装されます。</p>\n<dl>\n  <dt id=\"document.hasstorageaccess\"><a href=\"/ja/docs/Web/API/Document/hasStorageAccess\"><code>Document.hasStorageAccess()</code></a></dt>\n  <dd>\n    <p>文書がファーストパーティストレージにアクセスできるかどうかを示すブール値で解決される <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> を返します。</p>\n  </dd>\n  <dt id=\"document.requeststorageaccess\"><a href=\"/ja/docs/Web/API/Document/requestStorageAccess\"><code>Document.requestStorageAccess()</code></a></dt>\n  <dd>\n    <p>ファーストパーティストレージへのアクセスが許可された場合に解決し、アクセスが拒否された場合に拒否する <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> を返します。</p>\n  </dd>\n</dl>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> ユーザーとのやり取りは、これらの両方のメソッドによって返される Promise に伝播し、呼び出し元は、ユーザーからの 2 回目のクリックを必要とせずに、ユーザーとのやり取りを必要とするアクションを実行できます。 例えば、呼び出し元は、Firefox のポップアップブロッカーをトリガーせずに、解決した Promise からポップアップウィンドウを開くことができます。</p>\n</div>"}},{"type":"prose","value":{"id":"iframe_サンドボックスの拡張","title":"&lt;iframe&gt; サンドボックスの拡張","isH3":false,"content":"<p><a href=\"/ja/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code></a> 要素の <code>sandbox</code> 属性には新しいトークン <code>allow-storage-access-by-user-activation</code> があり、サンドボックス化した <code>&lt;iframe&gt;</code> は Storage Access API を使用してストレージアクセスを要求できます。</p>","titleAsText":"<iframe> サンドボックスの拡張"}},{"type":"prose","value":{"id":"仕様","title":"仕様","isH3":false,"content":"<p>API は現在、提案段階にあり、標準化プロセスはまだ開始されていません。 現在、Apple の <a href=\"https://webkit.org/blog/8124/introducing-storage-access-api/\" class=\"external\" rel=\" noopener\">Introducing Storage Access API</a> ブログ投稿、および <a href=\"https://github.com/whatwg/html/issues/3338\" class=\"external\" rel=\" noopener\">WHATWG HTML issue 3338 — Proposal: Storage Access API</a> で API の仕様の詳細を見つけることができます。</p>"}},{"type":"prose","value":{"id":"ブラウザーの互換性","title":"ブラウザーの互換性","isH3":false,"content":""}},{"type":"browser_compatibility","value":{"title":null,"id":null,"isH3":false,"query":"api.Document.hasStorageAccess","dataURL":"/ja/docs/Web/API/Storage_Access_API/bcd.json"}},{"type":"browser_compatibility","value":{"title":null,"id":null,"isH3":false,"query":"api.Document.requestStorageAccess","dataURL":"/ja/docs/Web/API/Storage_Access_API/bcd-2.json"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<p><a href=\"/ja/docs/Web/API/Storage_Access_API/Using\">Storage Access API の使用</a></p>"}}],"toc":[{"text":"概念と使用方法","id":"概念と使用方法"},{"text":"ユーザープロンプト","id":"ユーザープロンプト"},{"text":"Safari の実装との違い","id":"safari_の実装との違い"},{"text":"Storage Access API のメソッド","id":"storage_access_api_のメソッド"},{"text":"&lt;iframe&gt; サンドボックスの拡張","id":"iframe_サンドボックスの拡張"},{"text":"仕様","id":"仕様"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"Storage Access API（ストレージアクセス API）は、埋め込まれたクロスオリジンのコンテンツが、通常はファーストパーティのコンテキストでのみアクセスできるストレージ（これをオリジンのファーストパーティストレージと呼びます）に無制限にアクセスする方法を提供します。 API は、埋め込まれたリソースがファーストパーティストレージに現在アクセスできるかどうかを確認し、ユーザーエージェントからファーストパーティストレージへのアクセスを要求できるメソッドを提供します。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Storage Access API","locale":"en-US","native":"English (US)"},{"title":"Storage Access API","locale":"ru","native":"Русский"}],"source":{"folder":"ja/web/api/storage_access_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/storage_access_api/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/Storage_Access_API","title":"Storage Access API"}],"pageTitle":"Storage Access API - Web API | MDN","noIndexing":false}}