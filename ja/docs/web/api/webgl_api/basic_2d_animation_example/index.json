{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"基本的な 2D WebGL アニメーションの例","mdn_url":"/ja/docs/Web/API/WebGL_API/Basic_2D_animation_example","locale":"ja","native":"日本語","sidebarHTML":"\n <ol>\n  <li><a href=\"/ja/docs/Web/API/WebGL_API\"><strong>WebGL API</strong></a></li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>WebGL tutorial</summary>\n      <ol>\n        <li><a href=\"/ja/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL\">Getting started with WebGL</a></li>\n        <li><a href=\"/ja/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context\">Adding 2D content to a WebGL context</a></li>\n        <li><a href=\"/ja/docs/Web/API/WebGL_API/Tutorial/Using_shaders_to_apply_color_in_WebGL\">Using shaders to apply color in WebGL</a></li>\n        <li><a href=\"/ja/docs/Web/API/WebGL_API/Tutorial/Animating_objects_with_WebGL\">Animating objects with WebGL</a></li>\n        <li><a href=\"/ja/docs/Web/API/WebGL_API/Tutorial/Creating_3D_objects_using_WebGL\">Creating 3D objects using WebGL</a></li>\n        <li><a href=\"/ja/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL\">Using textures in WebGL</a></li>\n        <li><a href=\"/ja/docs/Web/API/WebGL_API/Tutorial/Lighting_in_WebGL\">Lighting in WebGL</a></li>\n        <li><a href=\"/ja/docs/Web/API/WebGL_API/Tutorial/Animating_textures_in_WebGL\">Animating textures in WebGL</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Examples and articles</summary>\n      <ol>\n        <li><a href=\"/ja/docs/Web/API/WebGL_API/Matrix_math_for_the_web\">Matrix math for the web</a></li>\n        <li><a href=\"/ja/docs/Web/API/WebGL_API/WebGL_model_view_projection\">WebGL model view projection</a></li>\n        <li><a href=\"/ja/docs/Web/API/WebGL_API/WebGL_best_practices\">WebGL best practices</a></li>\n        <li><a href=\"/ja/docs/Web/API/WebGL_API/Using_Extensions\">Using WebGL extensions</a></li>\n        <li><a href=\"/ja/docs/Web/API/WebGL_API/Basic_2D_animation_example\">A basic 2D WebGL animation example</a></li>\n        <li><a href=\"/ja/docs/Web/API/WebGL_API/By_example\">WebGL by example</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Interfaces</summary>\n      <ol>\n        <li><a href=\"/ja/docs/Web/API/WebGLRenderingContext\"><code>WebGLRenderingContext</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGL2RenderingContext\"><code>WebGL2RenderingContext</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLActiveInfo\"><code>WebGLActiveInfo</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLBuffer\"><code>WebGLBuffer</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLContextEvent\"><code>WebGLContextEvent</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLFramebuffer\"><code>WebGLFramebuffer</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLProgram\"><code>WebGLProgram</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLQuery\"><code>WebGLQuery</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLRenderbuffer\"><code>WebGLRenderbuffer</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLSampler\"><code>WebGLSampler</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLShader\"><code>WebGLShader</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLShaderPrecisionFormat\"><code>WebGLShaderPrecisionFormat</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLSync\"><code>WebGLSync</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLTexture\"><code>WebGLTexture</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLTransformFeedback\"><code>WebGLTransformFeedback</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLUniformLocation\"><code>WebGLUniformLocation</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLVertexArrayObject\"><code>WebGLVertexArrayObject</code> <small>(en-US)</small></a></li>\n      </ol>\n    </details>\n  </li>\n\n  <li><strong><a href=\"/ja/docs/MDN\">Documentation:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Contribute</summary>\n      <ol>\n        <li><a href=\"/ja/docs/MDN\">The MDN project</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>この WebGL の例では、キャンバスを作成し、その中に WebGL を使用して回転する四角形をレンダリングします。シーンを表すために使用する座標系は、キャンバスの座標系と同じです。つまり、(0, 0) は左上隅にあり、右下隅は (600, 460) となります。</p>"}},{"type":"prose","value":{"id":"頂点シェーダー","title":"頂点シェーダー","isH3":false,"content":"<p>まず頂点シェーダーを見てみましょう。いつものように、シーンに使用している座標をクリップスペース座標に変換することです (つまり (0, 0) がコンテキストの中心にあり、コンテキストの実際のサイズに関係なく各軸が -1.0 から 1.0 に伸びるシステムです)</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>vertex-shader<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>x-shader/x-vertex<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  attribute vec2 aVertexPosition<span class=\"token punctuation\">;</span>\n\n  uniform vec2 uScalingFactor<span class=\"token punctuation\">;</span>\n  uniform vec2 uRotationVector<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    vec2 rotatedPosition <span class=\"token operator\">=</span> <span class=\"token function\">vec2</span><span class=\"token punctuation\">(</span>\n      aVertexPosition<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> uRotationVector<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span>\n            aVertexPosition<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> uRotationVector<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span>\n      aVertexPosition<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> uRotationVector<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span>\n            aVertexPosition<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> uRotationVector<span class=\"token punctuation\">.</span>x\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    gl_Position <span class=\"token operator\">=</span> <span class=\"token function\">vec4</span><span class=\"token punctuation\">(</span>rotatedPosition <span class=\"token operator\">*</span> uScalingFactor<span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>メインプログラムは属性 <code>aVertexPosition</code> を共有します。これは使用している座標系の頂点の位置です。位置の両方のコンポーネントが -1.0 から 1.0 の範囲になるように、これらの値を変換する必要があります。これは、コンテキストのアスペクト比に基づいたスケーリング係数を掛けることで簡単に実行できます。この計算については、後ほど説明します。</p>\n<p>形状も回転し、変換を適用することでそれを行うことができます。最初にそれを行います。頂点の回転位置は、JavaScript コードによって計算された均一な <code>uRotationVector</code> にある回転ベクトルを適用して計算されます。</p>\n<p>次に、<code>uScalingFactor</code> の JavaScript コードによって提供されるスケーリングベクトルを回転位置に乗算することにより、最終位置が計算されます。2D で描画しているため、<code>z</code> と <code>w</code> の値はそれぞれ 0.0 と 1.0 に固定されています。</p>\n<p>次に、標準 WebGL グローバル変数の <code>gl_Position</code> へ変換および回転された頂点の位置を設定します。</p>"}},{"type":"prose","value":{"id":"フラグメントシェーダー","title":"フラグメントシェーダー","isH3":false,"content":"<p>次はフラグメントシェーダーです。その役割はレンダリングされる形状の各ピクセルの色を返すことです。ライティングが適用されていない、テクスチャのないソリッドオブジェクトを描画しているため、これは非常に簡単です:</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fragment-shader<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>x-shader/x-fragment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  #ifdef <span class=\"token constant\">GL_ES</span>\n    precision highp float<span class=\"token punctuation\">;</span>\n  #endif\n\n  uniform vec4 uGlobalColor<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    gl_FragColor <span class=\"token operator\">=</span> uGlobalColor<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>これは必要に応じて <code>float</code> 型の精度を指定することから始まります次に uniform 修飾子付きの <code>uGlobalColor</code> の値をグローバル変数 <code>gl_FragColor</code> へ設定します。これは、JavaScript コードにより正方形の描画に使用される色に設定されます。</p>"}},{"type":"prose","value":{"id":"html","title":"HTML","isH3":false,"content":"<p>HTML は、WebGL コンテキストを取得する <a href=\"/ja/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a> のみで構成されています。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>canvas</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>glcanvas<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>600<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>460<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  Oh no! Your browser doesn't support canvas!\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>canvas</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"javascript","title":"JavaScript","isH3":false,"content":""}},{"type":"prose","value":{"id":"グローバル変数と初期化","title":"グローバル変数と初期化","isH3":true,"content":"<p>まず、グローバル変数。ここではこれらについては説明しません。代わりに、今後のコードで使用される場合について説明します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> gl <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> glCanvas <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Aspect ratio and coordinate system</span>\n<span class=\"token comment\">// details</span>\n\n<span class=\"token keyword\">let</span> aspectRatio<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> currentRotation <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> currentScale <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Vertex information</span>\n\n<span class=\"token keyword\">let</span> vertexArray<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> vertexBuffer<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> vertexNumComponents<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> vertexCount<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Rendering data shared with the</span>\n<span class=\"token comment\">// scalers.</span>\n\n<span class=\"token keyword\">let</span> uScalingFactor<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> uGlobalColor<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> uRotationVector<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> aVertexPosition<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Animation timing</span>\n\n<span class=\"token keyword\">let</span> previousTime <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> degreesPerSecond <span class=\"token operator\">=</span> <span class=\"token number\">90.0</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>プログラムの初期化は <code>startup()</code> と呼ばれる <code><a href=\"/ja/docs/Web/API/Window/load_event\" title=\"/ja/docs/Web/Reference/Events/load\">load</a></code> イベントハンドラーによって処理します:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span> startup<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">startup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  glCanvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"glcanvas\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl <span class=\"token operator\">=</span> glCanvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"webgl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> shaderSet <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">VERTEX_SHADER</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vertex-shader\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">FRAGMENT_SHADER</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fragment-shader\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  shaderProgram <span class=\"token operator\">=</span> <span class=\"token function\">buildShaderProgram</span><span class=\"token punctuation\">(</span>shaderSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  aspectRatio <span class=\"token operator\">=</span> glCanvas<span class=\"token punctuation\">.</span>width<span class=\"token operator\">/</span>glCanvas<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n  currentRotation <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  currentScale <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> aspectRatio<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  vertexArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float32Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      <span class=\"token operator\">-</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>\n      <span class=\"token operator\">-</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.5</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  vertexBuffer <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">createBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindBuffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> vertexBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">bufferData</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> vertexArray<span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">STATIC_DRAW</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  vertexNumComponents <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  vertexCount <span class=\"token operator\">=</span> vertexArray<span class=\"token punctuation\">.</span>length<span class=\"token operator\">/</span>vertexNumComponents<span class=\"token punctuation\">;</span>\n\n  currentAngle <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n  rotationRate <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">animateScene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>WebGL コンテキスト <code>gl</code> を取得し、シェーダープログラムを構築することから始める必要があります。ここでは、プログラムに複数のシェーダーを非常に簡単に追加できるように設計されたコードを使用しています。配列 <code>shaderSet</code> にはオブジェクトのリストが含まれ、各オブジェクトはプログラムにコンパイルされる 1 つのシェーダー関数を記述しています。各関数には、タイプ (<code>gl.VERTEX_SHADER</code> または <code>gl.FRAGMENT_SHADER</code> のいずれか) と ID (シェーダーのコードを含む <a href=\"/ja/docs/Web/HTML/Element/script\"><code>&lt;script&gt;</code></a> 要素の ID)。</p>\n<p>シェーダーセットは <code>buildShaderProgram()</code> 関数に渡され、コンパイルされリンクされたシェーダープログラムを返します。次にこれがどのように機能するかを見ていきます。</p>\n<p>シェーダープロシェグラムが構築し、幅を高さで割ってからコンテキストのアスペクト比を計算します。次に、アニメーションの現在の回転ベクトルを <code>[0, 1]</code> に設定し、スケーリングベクトルを <code>[1.0, aspectRatio]</code> に設定します。頂点シェーダーで見たスケーリングベクトルは、-1.0 から 1.0 の範囲に合うように座標をスケーリングするために使用されます。</p>\n<p>次に頂点の配列が <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\"><code>Float32Array</code></a> として作成され、三角形ごとに 6 つの座標 (3 つの 2D 頂点) が描画され、合計 12 個の値が作成されます。</p>\n<p>ご覧のとおり、各軸に -1.0 〜 1.0 の座標系を使用しています。なぜ調整する必要があるのでしょうか？これは単にコンテキストが正方形ではないためです。幅 600 ピクセル、高さ 460 のコンテキストを使用しています。これらの各ディメンションは、-1.0 〜 1.0 の範囲にマッピングされます。2 つの軸は同じ長さではないため、2 つの軸のいずれかの値を調整しないと、正方形は一方または他方に引き伸ばされます。したがって、これらの値を正規化する必要があります。</p>\n<p>頂点配列が作成されたら、<a href=\"/ja/docs/Web/API/WebGLRenderingContext/createBuffer\" title=\"gl.createBuffer()\"><code>gl.createBuffer()</code></a> を呼び出し、それらを含む新しい GL バッファーを作成します。<a href=\"/ja/docs/Web/API/WebGLRenderingContext/bindBuffer\" title=\"gl.bindBuffer()\"><code>gl.bindBuffer()</code></a> を呼び出して標準の WebGL 配列バッファー参照をバインドし、<a href=\"/ja/docs/Web/API/WebGLRenderingContext/bufferData\" title=\"gl.bufferData()\"><code>gl.bufferData()</code></a> を使用して頂点データをバッファーにコピーします。<code>gl.STATIC_DRAW</code> の使用法が指定されており、データは 1 回だけ設定され、変更されることはありませんが、繰り返し使用されることを WebGL に伝えます。これにより、WebGL は、その情報に基づいてパフォーマンスを向上させる可能性のある、適用可能な最適化を検討します。</p>\n<p>WebGL に提供される頂点データを使用して、<code>vertexNumComponents</code> を各頂点のコンポーネントの数 (2D 頂点であるため 2) に設定し、<code>vertexCount</code> を頂点リストの頂点の数に設定します。</p>\n<p>次に、まだ回転を実行していないため、現在の回転角度 (度) を 0.0 に設定し、回転速度 (画面の更新期間ごとの度、通常 60 FPS) を 6 に設定します。</p>\n<p>最後に、<code>animateScene()</code> が呼び出されて、最初のフレームをレンダリングし、アニメーションの次のフレームのレンダリングをスケジュールします。</p>"}},{"type":"prose","value":{"id":"シェーダープログラムのコンパイルとリンク","title":"シェーダープログラムのコンパイルとリンク","isH3":true,"content":"<h4 id=\"プログラムの構築とリンク\">プログラムの構築とリンク</h4>\n<p><code>buildShaderProgram()</code> 関数は、シェーダープログラムにコンパイルおよびリンクされるシェーダー関数のセットを記述するオブジェクトの配列を入力として受け取り、ビルドおよびリンク後にシェーダープログラムを返します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">buildShaderProgram</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">shaderInfo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> program <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">createProgram</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  shaderInfo<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">desc</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> shader <span class=\"token operator\">=</span> <span class=\"token function\">compileShader</span><span class=\"token punctuation\">(</span>desc<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      gl<span class=\"token punctuation\">.</span><span class=\"token function\">attachShader</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> shader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">linkProgram</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>gl<span class=\"token punctuation\">.</span><span class=\"token function\">getProgramParameter</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">LINK_STATUS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error linking shader program:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token function\">getProgramInfoLog</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> program<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>まず、<a href=\"/ja/docs/Web/API/WebGLRenderingContext/createProgram\" title=\"gl.createProgram()\"><code>gl.createProgram()</code></a> は新しい空の GLSL プログラムを作成するために呼び出されます。</p>\n<p>次に、指定されたシェーダーのリスト内の各シェーダーに対して、<code>compileShader()</code> 関数を呼び出してコンパイルし、ビルドするシェーダー関数の ID とタイプを渡します。前述のように、これらの各オブジェクトには、シェーダーコードが存在する <code>&lt;script&gt;</code> 要素の ID とシェーダーのタイプが含まれます。コンパイルされたシェーダーは、<a href=\"/ja/docs/Web/API/WebGLRenderingContext/attachShader\" title=\"gl.attachShader()\"><code>gl.attachShader()</code></a> へ渡すことでシェーダープログラムにアタッチされます。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> 実際には、ここよりさらに一歩進んで、<code>&lt;script&gt;</code> 要素の <code>type</code> 属性の値を見て、シェーダーのタイプを判断できます。</p>\n</div>\n<p>すべてのシェーダーがコンパイルされると、<a href=\"/ja/docs/Web/API/WebGLRenderingContext/linkProgram\" title=\"gl.linkProgram()\"><code>gl.linkProgram()</code></a> を使用してプログラムがリンクされます。</p>\n<p>プログラムのリンク中にエラーが発生した場合、エラーメッセージはコンソールに記録されます。</p>\n<p>最後に、コンパイルされたプログラムが呼び出し元に返されます。</p>\n<h4 id=\"個々のシェーダーをコンパイルする\">個々のシェーダーをコンパイルする</h4>\n<p>以下の <code>compileShader()</code> 関数は、単一のシェーダーをコンパイルするために <code>buildShaderProgram()</code> によって呼び出されます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">compileShader</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> code <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">.</span>nodeValue<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> shader <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">createShader</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">shaderSource</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">,</span> code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">compileShader</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>gl<span class=\"token punctuation\">.</span><span class=\"token function\">getShaderParameter</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">COMPILE_STATUS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Error compiling </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>type <span class=\"token operator\">===</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">VERTEX_SHADER</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"vertex\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"fragment\"</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> shader:</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token function\">getShaderInfoLog</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> shader<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>コードは指定された ID を持つ <a href=\"/ja/docs/Web/HTML/Element/script\"><code>&lt;script&gt;</code></a> 要素内に含まれるテキストノードの値を取得することにより、HTML ドキュメントから取得されます。次に <a href=\"/ja/docs/Web/API/WebGLRenderingContext/createShader\" title=\"gl.createShader()\"><code>gl.createShader()</code></a> を使用して、指定されたタイプの新しいシェーダーが作成されます。</p>\n<p>ソースコードは <a href=\"/ja/docs/Web/API/WebGLRenderingContext/shaderSource\" title=\"gl.shaderSource()\"><code>gl.shaderSource()</code></a> を通して新しいシェーダーに送信され、そのときシェーダーは <a href=\"/ja/docs/Web/API/WebGLRenderingContext/compileShader\" title=\"gl.compileShader()\"><code>gl.compileShader()</code></a> を使用してコンパイルされます。</p>\n<p>コンパイルエラーはコンソールに記録されます。生成されるメッセージに正しいシェーダータイプの文字列を挿入するための<a href=\"/ja/docs/Web/JavaScript/Reference/Template_literals\">テンプレートリテラル</a>文字列の使用に注意してください。実際のエラーの詳細は、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLRenderingContext/getShaderInfoLog\"><code>gl.getShaderInfoLog()</code> <small>(en-US)</small></a>を呼び出すことによって取得されます。</p>\n<p>最後に、コンパイルされたシェーダーが呼び出し元 (<code>buildShaderProgram()</code> 関数) へ返します。</p>"}},{"type":"prose","value":{"id":"シーンの描画とアニメーション化","title":"シーンの描画とアニメーション化","isH3":true,"content":"<p><code>animateScene()</code> 関数は各アニメーションフレームをレンダリングするために呼び出されます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">animateScene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">viewport</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> glCanvas<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> glCanvas<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">clearColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">COLOR_BUFFER_BIT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> radians <span class=\"token operator\">=</span> currentAngle <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">/</span> <span class=\"token number\">180.0</span><span class=\"token punctuation\">;</span>\n  currentRotation<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>radians<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  currentRotation<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>radians<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">useProgram</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  uScalingFactor <span class=\"token operator\">=</span>\n      gl<span class=\"token punctuation\">.</span><span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">\"uScalingFactor\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  uGlobalColor <span class=\"token operator\">=</span>\n      gl<span class=\"token punctuation\">.</span><span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">\"uGlobalColor\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  uRotationVector <span class=\"token operator\">=</span>\n      gl<span class=\"token punctuation\">.</span><span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">\"uRotationVector\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">uniform2fv</span><span class=\"token punctuation\">(</span>uScalingFactor<span class=\"token punctuation\">,</span> currentScale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">uniform2fv</span><span class=\"token punctuation\">(</span>uRotationVector<span class=\"token punctuation\">,</span> currentRotation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">uniform4fv</span><span class=\"token punctuation\">(</span>uGlobalColor<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindBuffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> vertexBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  aVertexPosition <span class=\"token operator\">=</span>\n      gl<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">\"aVertexPosition\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">enableVertexAttribArray</span><span class=\"token punctuation\">(</span>aVertexPosition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">vertexAttribPointer</span><span class=\"token punctuation\">(</span>aVertexPosition<span class=\"token punctuation\">,</span> vertexNumComponents<span class=\"token punctuation\">,</span>\n        gl<span class=\"token punctuation\">.</span><span class=\"token constant\">FLOAT</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">drawArrays</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TRIANGLES</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> vertexCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentTime</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> deltaAngle <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>currentTime <span class=\"token operator\">-</span> previousTime<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000.0</span><span class=\"token punctuation\">)</span>\n          <span class=\"token operator\">*</span> degreesPerSecond<span class=\"token punctuation\">;</span>\n\n    currentAngle <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>currentAngle <span class=\"token operator\">+</span> deltaAngle<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">360</span><span class=\"token punctuation\">;</span>\n\n    previousTime <span class=\"token operator\">=</span> currentTime<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">animateScene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>アニメーションのフレームを描画するために最初に行う必要があるのは、背景を目的の色にクリアすることです。この場合、<a href=\"/ja/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a> のサイズに基づいてビューポートを設定し、<a href=\"/ja/docs/Web/API/WebGLRenderingContext/clearColor\" title=\"clearColor()\"><code>clearColor()</code></a> を呼び出して使用する色を設定します。コンテンツをクリアするとき、<a href=\"/ja/docs/Web/API/WebGLRenderingContext/clear\" title=\"clear()\"><code>clear()</code></a> でバッファーをクリアします。</p>\n<p>次に、現在の回転ベクトルは、現在の回転角度 (<code>currentAngle</code>) を <a title=\"ラジアン\" href=\"https://ja.wikipedia.org/wiki/ラジアン\" class=\"external\" rel=\" noopener\">ラジアン</a> に変換し、回転ベクトルの最初のコンポーネントを <a title=\"sin\" href=\"https://ja.wikipedia.org/wiki/三角関数\" class=\"external\" rel=\" noopener\">sin</a> に設定し、2 番目のコンポーネントを <a title=\"cos\" href=\"https://ja.wikipedia.org/wiki/三角関数\" class=\"external\" rel=\" noopener\">cos</a> へ設定します。<code>currentRotation</code> ベクトルは、現在の角度 <code>currentAngle</code> にある <a title=\"単位円\" href=\"https://ja.wikipedia.org/wiki/単位円\" class=\"external\" rel=\" noopener\">単位円</a> 上のポイントの位置です。</p>\n<p><a href=\"/ja/docs/Web/API/WebGLRenderingContext/useProgram\" title=\"useProgram()\"><code>useProgram()</code></a> は、以前に確立した GLSL シェーディングプログラムをアクティブにするために呼び出されます。次に、JavaScript コードとシェーダー間 (<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLRenderingContext/getUniformLocation\"><code>getUniformLocation()</code> <small>(en-US)</small></a> を使用) で情報を共有するために使用される各 uniform の位置を取得します。</p>\n<p><code>uScalingFactor</code> という名前の uniform は、以前に計算された <code>currentScale</code> 値に設定されます。覚えているかもしれませんが、これはコンテキストのアスペクト比に基づいて座標系を調整するために使用される値です。これは <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLRenderingContext/uniform\"><code>uniform2fv()</code> <small>(en-US)</small></a> を使用して行われます (これは 2 値の浮動小数点ベクトルであるため)。</p>\n<p><code>uRotationVector</code> は、同じく <code>uniform2fv()</code> を使用して、現在の回転ベクトル (<code>currentRotation</code>) に設定されます。</p>\n<p><code>uGlobalColor</code> は <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLRenderingContext/uniform\"><code>uniform4fv()</code> <small>(en-US)</small></a> を使用して、正方形を描画するときに使用する色に設定されます。これは 4 コンポーネントの浮動小数点ベクトルです (赤、緑、青、およびアルファごとに 1 つのコンポーネント)。</p>\n<p>これですべてが終ったので、頂点バッファーを設定して形状を描画できます。まず、<a href=\"/ja/docs/Web/API/WebGLRenderingContext/bindBuffer\" title=\"bindBuffer()\"><code>bindBuffer()</code></a> を呼び出すことにより、形状の三角形の描画に使用される頂点のバッファーを設定します。次に、<a href=\"/ja/docs/Web/API/WebGLRenderingContext/getAttribLocation\" title=\"getAttribLocation()\"><code>getAttribLocation()</code></a> を呼び出して、シェーダープログラムから頂点位置属性のインデックスを取得します。</p>\n<p>頂点位置属性のインデックスが <code>aVertexPosition</code> で利用可能になったので、<code>enableVertexAttribArray()</code> を呼び出して位置属性を有効にし、シェーダープログラム (特に頂点シェーダー) で使用できるようにします。</p>\n<p>次に、<a href=\"/ja/docs/Web/API/WebGLRenderingContext/vertexAttribPointer\" title=\"vertexAttribPointer()\"><code>vertexAttribPointer()</code></a> を呼び出すことにより、頂点バッファーが <code>aVertexPosition</code> 属性にバインドされます。このステップはほとんど副作用であるため、このステップは明らかではありません。ただし、結果として、<code>aVertexPosition</code> にアクセスすると、頂点バッファーからデータを取得するようになります。</p>\n<p>シェイプの頂点バッファーと頂点を 1 つずつ頂点シェーダーに配信するために使用される <code>aVertexPosition</code> 属性との間に関連付けがあれば、<a href=\"/ja/docs/Web/API/WebGLRenderingContext/drawArrays\" title=\"drawArrays()\"><code>drawArrays()</code></a> を呼び出してシェイプを描画する準備が整います。</p>\n<p>この時点で、フレームが描画されました。あとは、次の描画をスケジュールするだけです。ここでは <a href=\"/ja/docs/Web/API/Window/requestAnimationFrame\" title=\"requestAnimationFrame()\"><code>requestAnimationFrame()</code></a> を呼び出して、ブラウザーが画面を更新する準備ができたときにコールバック関数を実行するように要求します。</p>\n<p><code>requestAnimationFrame()</code> コールバックは、フレーム描画が開始された時間を指定する単一のパラメーター <code>currentTime</code> を入力として受け取ります。それと、最後のフレームが描画された保存時間、<code>previousTime</code>、および正方形が回転する 1 秒あたりの度数 (<code>degreesPerSecond</code>) を使用して、<code>currentAngle</code> の新しい値を計算します。次に、<code>previousTime</code> の値が更新され、<code>animateScene()</code> を呼び出して次のフレームを描画します (そして、次のフレームが描画されるように無限にスケジュールします )。</p>"}},{"type":"prose","value":{"id":"結果","title":"結果","isH3":false,"content":"<p>これは 1 つの単純なオブジェクトを描画しているだけの非常に単純な例ですが、ここで使用されている概念ははるかに複雑なアニメーションに拡張されます。</p><iframe class=\"sample-code-frame\" title=\"live-sample sample\" id=\"frame_live-sample\" width=\"660\" height=\"500\" src=\"https://yari-demos.prod.mdn.mozit.cloud/ja/docs/Web/API/WebGL_API/Basic_2D_animation_example/_sample_.live-sample.html\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"参照","title":"参照","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/API/WebGL_API\">WebGL API</a></li>\n  <li><a href=\"/ja/docs/Web/API/WebGL_API/Tutorial\">WebGL チュートリアル</a></li>\n</ul>"}}],"toc":[{"text":"頂点シェーダー","id":"頂点シェーダー"},{"text":"フラグメントシェーダー","id":"フラグメントシェーダー"},{"text":"HTML","id":"html"},{"text":"JavaScript","id":"javascript"},{"text":"結果","id":"結果"},{"text":"参照","id":"参照"}],"summary":"この WebGL の例では、キャンバスを作成し、その中に WebGL を使用して回転する四角形をレンダリングします。シーンを表すために使用する座標系は、キャンバスの座標系と同じです。つまり、(0, 0) は左上隅にあり、右下隅は (600, 460) となります。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"A basic 2D WebGL animation example","locale":"en-US","native":"English (US)"},{"title":"一个 2D WebGL 动画的基础示例","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/webgl_api/basic_2d_animation_example","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/webgl_api/basic_2d_animation_example/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/WebGL_API","title":"WebGL: ウェブの 2D および 3D グラフィック"},{"uri":"/ja/docs/Web/API/WebGL_API/Basic_2D_animation_example","title":"基本的な 2D WebGL アニメーションの例"}],"pageTitle":"基本的な 2D WebGL アニメーションの例 - Web API | MDN","noIndexing":false}}