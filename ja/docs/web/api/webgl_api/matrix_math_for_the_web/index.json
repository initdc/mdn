{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"ウェブの行列計算","mdn_url":"/ja/docs/Web/API/WebGL_API/Matrix_math_for_the_web","locale":"ja","native":"日本語","sidebarHTML":"\n <ol>\n  <li><a href=\"/ja/docs/Web/API/WebGL_API\"><strong>WebGL API</strong></a></li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>WebGL tutorial</summary>\n      <ol>\n        <li><a href=\"/ja/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL\">Getting started with WebGL</a></li>\n        <li><a href=\"/ja/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context\">Adding 2D content to a WebGL context</a></li>\n        <li><a href=\"/ja/docs/Web/API/WebGL_API/Tutorial/Using_shaders_to_apply_color_in_WebGL\">Using shaders to apply color in WebGL</a></li>\n        <li><a href=\"/ja/docs/Web/API/WebGL_API/Tutorial/Animating_objects_with_WebGL\">Animating objects with WebGL</a></li>\n        <li><a href=\"/ja/docs/Web/API/WebGL_API/Tutorial/Creating_3D_objects_using_WebGL\">Creating 3D objects using WebGL</a></li>\n        <li><a href=\"/ja/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL\">Using textures in WebGL</a></li>\n        <li><a href=\"/ja/docs/Web/API/WebGL_API/Tutorial/Lighting_in_WebGL\">Lighting in WebGL</a></li>\n        <li><a href=\"/ja/docs/Web/API/WebGL_API/Tutorial/Animating_textures_in_WebGL\">Animating textures in WebGL</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Examples and articles</summary>\n      <ol>\n        <li><a href=\"/ja/docs/Web/API/WebGL_API/Matrix_math_for_the_web\">Matrix math for the web</a></li>\n        <li><a href=\"/ja/docs/Web/API/WebGL_API/WebGL_model_view_projection\">WebGL model view projection</a></li>\n        <li><a href=\"/ja/docs/Web/API/WebGL_API/WebGL_best_practices\">WebGL best practices</a></li>\n        <li><a href=\"/ja/docs/Web/API/WebGL_API/Using_Extensions\">Using WebGL extensions</a></li>\n        <li><a href=\"/ja/docs/Web/API/WebGL_API/Basic_2D_animation_example\">A basic 2D WebGL animation example</a></li>\n        <li><a href=\"/ja/docs/Web/API/WebGL_API/By_example\">WebGL by example</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Interfaces</summary>\n      <ol>\n        <li><a href=\"/ja/docs/Web/API/WebGLRenderingContext\"><code>WebGLRenderingContext</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGL2RenderingContext\"><code>WebGL2RenderingContext</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLActiveInfo\"><code>WebGLActiveInfo</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLBuffer\"><code>WebGLBuffer</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLContextEvent\"><code>WebGLContextEvent</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLFramebuffer\"><code>WebGLFramebuffer</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLProgram\"><code>WebGLProgram</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLQuery\"><code>WebGLQuery</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLRenderbuffer\"><code>WebGLRenderbuffer</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLSampler\"><code>WebGLSampler</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLShader\"><code>WebGLShader</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLShaderPrecisionFormat\"><code>WebGLShaderPrecisionFormat</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLSync\"><code>WebGLSync</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLTexture\"><code>WebGLTexture</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLTransformFeedback\"><code>WebGLTransformFeedback</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLUniformLocation\"><code>WebGLUniformLocation</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLVertexArrayObject\"><code>WebGLVertexArrayObject</code> <small>(en-US)</small></a></li>\n      </ol>\n    </details>\n  </li>\n\n  <li><strong><a href=\"/ja/docs/MDN\">Documentation:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Contribute</summary>\n      <ol>\n        <li><a href=\"/ja/docs/MDN\">The MDN project</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>行列は、空間内のオブジェクトの変換を表すために使用でき、画像を構築したり、ウェブ上でデータを視覚化したりするときに、多くの主要な種類の計算を実行するために使用されます。 この記事では、行列を作成する方法と、<a href=\"/ja/docs/Web/CSS/CSS_Transforms/Using_CSS_transforms\">CSS transform</a> および <code>matrix3d</code> transform 型でそれらを使用する方法について説明します。</p>\n<p>この記事では <a href=\"/ja/docs/Web/CSS\">CSS</a> を使用して説明を簡略化しますが、行列は <a href=\"/ja/docs/Web/API/WebGL_API\">WebGL</a>、<a href=\"/ja/docs/Web/API/WebXR_Device_API\">WebXR</a>（VR および AR）API、<a href=\"/ja/docs/Games/Techniques/3D_on_the_web/GLSL_Shaders\">GLSL シェーダー</a>などのさまざまなテクノロジーで使用されるコアコンセプトです。 この記事は、<a href=\"https://github.com/TatumCreative/mdn-matrix-math\" class=\"external\" rel=\" noopener\">MDN コンテンツキット</a>としても入手できます。 実際の例では、<code>MDN</code> という名前のグローバルオブジェクトで使用できる<a href=\"https://github.com/TatumCreative/mdn-webgl\" class=\"external\" rel=\" noopener\">ユーティリティ関数</a>のコレクションを使用しています。</p>"}},{"type":"prose","value":{"id":"変換行列","title":"変換行列","isH3":false,"content":"<p>行列には多くの種類がありますが、私たちが興味を持っているのは 3D 変換行列です。 これらの行列は、4x4 のグリッドに配置された 16 個の値のセットで構成されています。 <a href=\"/ja/docs/Web/JavaScript\">JavaScript</a> では、行列を配列として表すのは簡単です。</p>\n<p>まず、<strong>単位行列</strong>（identity matrix）について検討します。 これは特別な変換行列であり、スカラー乗算での 1 と同じように機能します。 n * 1 = n と同様に、任意の行列に単位行列を乗算すると、元の行列と値が一致する結果の行列が得られます。</p>\n<p>単位行列は JavaScript では次のようになります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> identityMatrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>単位行列の乗算とはどのようなものでしょうか？ 最も簡単な例は、単一の点に単位行列を乗算することです。 3D の点に必要なのは 3 つの値（x、y、z）だけであり、変換行列は 4x4 の値の行列なので、点には 4 番目の次元を追加する必要があります。 慣例により、この次元は<strong>パースペクティブ</strong>（perspective）と呼ばれ、文字 w で表されます。 一般的には、w を 1 に設定すると、計算がうまくいきます。</p>\n<p>w 成分を点に追加した後、行列と点がどのようにきれいに並んでいるかに注目してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\">// Point at [x, y, z, w]</span>\n</code></pre></div>\n<p>w 成分には、この記事の範囲外のいくつかの追加の用途があります。 <a href=\"/ja/docs/Web/API/WebGL_API/WebGL_model_view_projection\">WebGL モデルビュー投影</a>に関する記事を調べて、どのように役立つかを覗いてみてください。</p>"}},{"type":"prose","value":{"id":"行列と点の乗算","title":"行列と点の乗算","isH3":true,"content":"<p>このサンプルコードでは、行列と点を乗算する関数 <code>multiplyMatrixAndPoint()</code> を定義しています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 点 • 行列</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">multiplyMatrixAndPoint</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">matrix<span class=\"token punctuation\">,</span> point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 行列の各部分に、列 c、行 r の番号で単純な変数名を付けます</span>\n  <span class=\"token keyword\">let</span> c0r0 <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> c1r0 <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> c2r0 <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> c3r0 <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> c0r1 <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> c1r1 <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> c2r1 <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> c3r1 <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> c0r2 <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> c1r2 <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> c2r2 <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> c3r2 <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> c0r3 <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> c1r3 <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> c2r3 <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> c3r3 <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 次に、点にある単純な名前を設定します</span>\n  <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> point<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> point<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> z <span class=\"token operator\">=</span> point<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> w <span class=\"token operator\">=</span> point<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 1番目の列の各部分に対して点を乗算し、次に合計します</span>\n  <span class=\"token keyword\">let</span> resultX <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> c0r0<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">*</span> c0r1<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>z <span class=\"token operator\">*</span> c0r2<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>w <span class=\"token operator\">*</span> c0r3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 2番目の列の各部分に対して点を乗算し、次に合計します</span>\n  <span class=\"token keyword\">let</span> resultY <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> c1r0<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">*</span> c1r1<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>z <span class=\"token operator\">*</span> c1r2<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>w <span class=\"token operator\">*</span> c1r3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 3番目の列の各部分に対して点を乗算し、次に合計します</span>\n  <span class=\"token keyword\">let</span> resultZ <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> c2r0<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">*</span> c2r1<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>z <span class=\"token operator\">*</span> c2r2<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>w <span class=\"token operator\">*</span> c2r3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 4番目の列の各部分に対して点を乗算し、次に合計します</span>\n  <span class=\"token keyword\">let</span> resultW <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> c3r0<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">*</span> c3r1<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>z <span class=\"token operator\">*</span> c3r2<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>w <span class=\"token operator\">*</span> c3r3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>resultX<span class=\"token punctuation\">,</span> resultY<span class=\"token punctuation\">,</span> resultZ<span class=\"token punctuation\">,</span> resultW<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>上記の関数を使用して、点に行列を掛けることができます。 単位行列を使用すると、元の行列と同じ行列が返されます。 これは、単位行列を掛けた行列は常にそれ自体と等しいためです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// identityResult を [4,3,2,1] に設定します</span>\n<span class=\"token keyword\">let</span> identityResult <span class=\"token operator\">=</span> <span class=\"token function\">multiplyMatrixAndPoint</span><span class=\"token punctuation\">(</span>identityMatrix<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>同じ点を返すことはあまり役に立ちませんが、点に対して便利な操作を実行できる他の種類の行列があります。 次のセクションでは、これらの行列のいくつかを示します。</p>"}},{"type":"prose","value":{"id":"2_つの行列の乗算","title":"2 つの行列の乗算","isH3":true,"content":"<p>行列と点を乗算することに加えて、2 つの行列を乗算することもできます。 上記の関数は、このプロセスを支援するために再利用できます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 行列B • 行列A</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">multiplyMatrices</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">matrixA<span class=\"token punctuation\">,</span> matrixB</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 2番目の行列を行にスライスします</span>\n  <span class=\"token keyword\">let</span> row0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>matrixB<span class=\"token punctuation\">[</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> matrixB<span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> matrixB<span class=\"token punctuation\">[</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> matrixB<span class=\"token punctuation\">[</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> row1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>matrixB<span class=\"token punctuation\">[</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> matrixB<span class=\"token punctuation\">[</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> matrixB<span class=\"token punctuation\">[</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> matrixB<span class=\"token punctuation\">[</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> row2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>matrixB<span class=\"token punctuation\">[</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> matrixB<span class=\"token punctuation\">[</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> matrixB<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> matrixB<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> row3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>matrixB<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> matrixB<span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> matrixB<span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> matrixB<span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 各行に行列Aを掛けます</span>\n  <span class=\"token keyword\">let</span> result0 <span class=\"token operator\">=</span> <span class=\"token function\">multiplyMatrixAndPoint</span><span class=\"token punctuation\">(</span>matrixA<span class=\"token punctuation\">,</span> row0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> result1 <span class=\"token operator\">=</span> <span class=\"token function\">multiplyMatrixAndPoint</span><span class=\"token punctuation\">(</span>matrixA<span class=\"token punctuation\">,</span> row1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> result2 <span class=\"token operator\">=</span> <span class=\"token function\">multiplyMatrixAndPoint</span><span class=\"token punctuation\">(</span>matrixA<span class=\"token punctuation\">,</span> row2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> result3 <span class=\"token operator\">=</span> <span class=\"token function\">multiplyMatrixAndPoint</span><span class=\"token punctuation\">(</span>matrixA<span class=\"token punctuation\">,</span> row3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 結果の行を単一の行列に戻します</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n    result0<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> result0<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> result0<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> result0<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    result1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> result1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> result1<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> result1<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    result2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> result2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> result2<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> result2<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    result3<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> result3<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> result3<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> result3<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>この関数の動作を見てみましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> someMatrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">let</span> identityMatrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// someMatrix と同等の新しい配列を返します</span>\n<span class=\"token keyword\">let</span> someMatrixResult <span class=\"token operator\">=</span> <span class=\"token function\">multiplyMatrices</span><span class=\"token punctuation\">(</span>identityMatrix<span class=\"token punctuation\">,</span> someMatrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard warning\" id=\"sect1\">\n  <p><strong>Warning:</strong> これらの行列関数は、説明を明確にするために書かれており、速度やメモリ管理のためには書かれていません。 これらの関数は多くの新しい配列を作成しますが、これはガベージコレクションのために、リアルタイム操作に特にコストがかかる可能性があります。 実際の製品コードでは、最適化された関数を使用するのが最善です。 <a href=\"https://glmatrix.net/\" class=\"external\" rel=\" noopener\">glMatrix</a> は、速度とパフォーマンスに重点を置いたライブラリーの例です。 glMatrix ライブラリーの焦点は、更新ループの前に割り当てられるターゲット配列を持つことです。</p>\n</div>"}},{"type":"prose","value":{"id":"平行移動行列","title":"平行移動行列","isH3":false,"content":"<p><strong>平行移動行列</strong>（translation matrix）は単位行列に基づいており、3D グラフィックスで使用され、3 つの方向（x、y、z）の 1 つまたは複数に点またはオブジェクトを移動します。 平行移動を考える最も簡単な方法は、コーヒーカップを手に取るようなものです。 コーヒーがこぼれないように、コーヒーカップは直立させ、同じ方向に向ける必要があります。 それは、テーブルから離れて空中をあちこちと移動できます。</p>\n<p>コーヒーを口の中に注ぐには、カップを傾けたり回転させたりする必要があるため、実際には平行移動行列だけを使用してコーヒーを飲むことはできません。 これを行うために使用する行列の種類（巧妙に**<a href=\"#rotation_matrix\">回転行列</a>**と呼ばれます）を後で見ていきます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> z <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> translationMatrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>    <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>    <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    x<span class=\"token punctuation\">,</span>    y<span class=\"token punctuation\">,</span>    z<span class=\"token punctuation\">,</span>   <span class=\"token number\">1</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>3 つの軸に沿った距離を平行移動行列の対応する位置に配置し、3D 空間を移動するために必要な点または行列に掛けます。</p>"}},{"type":"prose","value":{"id":"行列で_dom_を操作する","title":"行列で DOM を操作する","isH3":false,"content":"<p>行列を使い始める本当に簡単な方法は、CSS <a href=\"/ja/docs/Web/CSS/transform-function/matrix3d\"><code>matrix3d()</code></a> <a href=\"/ja/docs/Web/CSS/transform\"><code>transform</code></a> を使用することです。 まず、コンテンツを含む単純な <a href=\"/ja/docs/Web/HTML/Element/div\"><code>&lt;div&gt;</code></a> を設定します。 スタイルは示しませんが、幅と高さが固定され、ページの中央に配置されます。 <code>&lt;div&gt;</code> には transform 用の遷移セットがあるため、何が行われているかを簡単に確認できるように行列がアニメーション化されます。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>move-me<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>transformable<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>Move me with a matrix<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>Lorem ipsum dolor sit amet, consectetur adipisicing elit...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>最後に、各例で 4x4 マトリックスを生成し、<code>&lt;div&gt;</code> のスタイルを更新して、transform を適用し、<code>matrix3d</code> に設定します。 行列が 4 行 4 列で構成されている場合でも、行列は 16 個の値の 1 行につぶされていることに注意してください。 行列は常に JavaScript の 1 次元のリストに格納されます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 行列の配列から matrix3d スタイルプロパティを作成します</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">matrixArrayToCssMatrix</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'matrix3d('</span> <span class=\"token operator\">+</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// DOM 要素を取得します</span>\n<span class=\"token keyword\">let</span> moveMe <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'move-me'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 次のような結果を返します: \"matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 50, 100, 0, 1);\"</span>\n<span class=\"token keyword\">let</span> matrix3dRule <span class=\"token operator\">=</span> <span class=\"token function\">matrixArrayToCssMatrix</span><span class=\"token punctuation\">(</span>translationMatrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// transform を設定します</span>\nmoveMe<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> matrix3dRule<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><a href=\"https://jsfiddle.net/g24mgw6y\" class=\"external\" rel=\" noopener\">JSFiddle で観る</a></p>\n<p>\n  <img src=\"https://mdn.mozillademos.org/files/11409/matrix-translation.jpg\" alt=\"行列による平行移動の例\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"拡大縮小行列","title":"拡大縮小行列","isH3":false,"content":"<p><strong>拡大縮小行列</strong>（scale matrix）は、幅、高さ、奥行きの 3 つの次元の 1 つ以上で何かを大きくまたは小さくします。 典型的な（デカルト）座標では、これによりオブジェクトが対応する方向に伸縮します。</p>\n<p>幅、高さ、奥行きのそれぞれに適用する変更の量は、左上隅から右下に向かって斜めに配置されます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> w <span class=\"token operator\">=</span> <span class=\"token number\">1.5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// width  (x)</span>\n<span class=\"token keyword\">let</span> h <span class=\"token operator\">=</span> <span class=\"token number\">0.7</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// height (y)</span>\n<span class=\"token keyword\">let</span> d <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// depth  (z)</span>\n\n<span class=\"token keyword\">let</span> scaleMatrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    w<span class=\"token punctuation\">,</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>    h<span class=\"token punctuation\">,</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>    d<span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">1</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><a href=\"https://jsfiddle.net/fndd6e1b\" class=\"external\" rel=\" noopener\">JSFiddle で観る</a></p>\n<p>\n  <img src=\"https://mdn.mozillademos.org/files/11407/matrix-scale.jpg\" alt=\"行列による拡大縮小の例\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"回転行列","title":"回転行列","isH3":false,"content":"<p><strong>回転行列</strong>（rotation matrix）は、点またはオブジェクトを回転させるために使用します。 回転行列は、拡大縮小行列や平行移動行列よりも少し複雑に見えます。 これは、三角関数を使用して回転を実行します。 このセクションでは、手順を完全な詳細に分解しませんが（<a href=\"https://mathworld.wolfram.com/RotationMatrix.html\" class=\"external\" rel=\" noopener\">Wolfram MathWorld のこの記事</a>を調べてください）、説明のためにこの例を取り上げます。</p>\n<p>まず、行列を使用せずに原点を中心に点を回転させるコードを次に示します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 行列なしで原点を中心に手動で点を回転</span>\n<span class=\"token keyword\">let</span> point <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 原点からの距離を計算します</span>\n<span class=\"token keyword\">let</span> distance <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> point<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> point<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> point<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ラジアンで60度に相当</span>\n<span class=\"token keyword\">let</span> rotationInRadians <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> transformedPoint <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  Math<span class=\"token punctuation\">.</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>rotationInRadians<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> distance<span class=\"token punctuation\">,</span>\n  Math<span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>rotationInRadians<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> distance\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これらのタイプのステップを行列にエンコードし、x、y、z の各次元に対してそれを行うことができます。 以下は、X 軸を中心とした回転の表現です。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> sin <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span>sin<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> cos <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span>cos<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 注: これらの変換にはパースペクティブがないため、</span>\n<span class=\"token comment\">//     この時点での回転は div を縮小するためにのみ示されます</span>\n\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ラジアンでの回転量</span>\n\n<span class=\"token comment\">// Z 軸を中心に回転</span>\n<span class=\"token keyword\">let</span> rotateZMatrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n       <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>       <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>    <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n       <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>       <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>    <span class=\"token number\">1</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><a href=\"https://jsfiddle.net/9vr2dorz\" class=\"external\" rel=\" noopener\">JSFiddle で観る</a></p>\n<p>\n  <img src=\"https://mdn.mozillademos.org/files/11405/matrix-rotation.jpg\" alt=\"\" loading=\"lazy\">\n</p>\n<p>3 つの軸のそれぞれを中心に回転するための回転行列を返す関数のセットを次に示します。 大きな注意点の 1 つは、パースペクティブが適用されていないため、まだとても 3D に感じられない可能性があることです。 平面度（flatness）は、カメラが遠くのオブジェクトにズームインで非常に接近したときと同じです — 遠近感（sense of perspective）がなくなります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">rotateAroundXAxis</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n       <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>       <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>        <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>     <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n       <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token operator\">-</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>     <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n       <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>   <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>     <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n       <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>       <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>        <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>     <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">rotateAroundYAxis</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n     <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n          <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>      <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">-</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n          <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>      <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">rotateAroundZAxis</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n         <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>       <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>    <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n         <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>       <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>    <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><a href=\"https://jsfiddle.net/tk072doc\" class=\"external\" rel=\" noopener\">JSFiddle で観る</a></p>"}},{"type":"prose","value":{"id":"行列合成","title":"行列合成","isH3":false,"content":"<p>行列の本当の力は、<strong>行列合成</strong>（matrix composition）に由来します。 特定のクラスの行列を掛け合わせると、変換の履歴が保持され、元に戻すことができます。 つまり、平行移動、回転、拡大縮小の行列がすべて組み合わされている場合、行列の順序を逆にして再適用すると、元の点が返されます。</p>\n<p>行列を乗算する順序は重要です。 数値を乗算する場合、a * b = c と b * a = c はどちらも真です。 例えば、3 * 4 = 12 と 4 * 3 = 12 です。 数学では、これらの数値は<strong>可換</strong>（commutative）であると説明されます。 順序が入れ替わった場合、行列では同じであることが保証されないため、行列は<strong>非可換</strong>（non-commutative）です。</p>\n<p>もう 1 つのマインドベンダーは、WebGL および CSS での行列乗算は、操作が直感的に発生するのとは逆の順序で発生する必要があることです。 例えば、何かを 80％縮小し、200 ピクセル下に移動してから、原点を中心に 90 度回転すると、疑似コードでは次のようになります。</p>\n<pre class=\"notranslate\">  transformation = rotate * translate * scale\n</pre>"}},{"type":"prose","value":{"id":"複数の変換の合成","title":"複数の変換の合成","isH3":true,"content":"<p>行列の合成に使用する関数は <code>multiplyArrayOfMatrices()</code> です。 これは、この記事の冒頭で紹介した<a href=\"https://github.com/TatumCreative/mdn-webgl\" class=\"external\" rel=\" noopener\">ユーティリティ関数</a>のセットの一部です。 行列の配列を取り、それらを掛け合わせて結果を返します。 WebGL シェーダーコードでは、これは言語に組み込まれており、<code>*</code> 演算子を使用できます。 さらに、この例では、上で定義した行列を返す <code>scale()</code> 関数と <code>translate()</code> 関数を使用しています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> transformMatrix <span class=\"token operator\">=</span> <span class=\"token constant\">MDN</span><span class=\"token punctuation\">.</span><span class=\"token function\">multiplyArrayOfMatrices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token function\">rotateAroundZAxis</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// ステップ 3: 90度回転</span>\n  <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>                <span class=\"token comment\">// ステップ 2: 100ピクセル下に移動</span>\n  <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>                <span class=\"token comment\">// ステップ 1: 縮小</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><a href=\"https://jsfiddle.net/qxxg3yvc\" class=\"external\" rel=\" noopener\">JSFiddle で観る</a></p>\n<p>\n  <img src=\"https://mdn.mozillademos.org/files/11403/matrix-composition.jpg\" alt=\"行列合成の例\" loading=\"lazy\">\n</p>\n<p>最後に、行列がどのように機能するかを示す楽しい手順は、手順を逆にして、行列を元の単位行列に戻すことです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> transformMatrix <span class=\"token operator\">=</span> <span class=\"token constant\">MDN</span><span class=\"token punctuation\">.</span><span class=\"token function\">multiplyArrayOfMatrices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>             <span class=\"token comment\">// ステップ 6: 縮小を元に戻す</span>\n  <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>               <span class=\"token comment\">// ステップ 5: 移動を元に戻す</span>\n  <span class=\"token function\">rotateAroundZAxis</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// ステップ 4: 回転を元に戻す</span>\n  <span class=\"token function\">rotateAroundZAxis</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// ステップ 3: 90度回転</span>\n  <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>                <span class=\"token comment\">// ステップ 2: 100ピクセル下に移動</span>\n  <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>                <span class=\"token comment\">// ステップ 1: 縮小</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"行列が重要な理由","title":"行列が重要な理由","isH3":false,"content":"<p>行列は、空間での幅広い変換を表すことができる数の小さなセットで構成されるため、重要です。 それらはプログラム内で簡単に共有できます。 さまざまな座標空間を行列で記述できます。 一部の行列乗算では、1 つのデータのセットを 1 つの座標空間から別の座標空間に移動します。 行列は、それらを生成するために使用された以前の変形のすべての部分を効果的に記憶します。</p>\n<p>WebGL で使用する場合、グラフィックスカードは、空間内の多数の点に行列を乗算するのに特に適しています。 点の配置、照明の計算、アニメのキャラクターのポーズなどのさまざまな操作はすべて、この基本的なツールに依存しています。</p>"}}],"toc":[{"text":"変換行列","id":"変換行列"},{"text":"平行移動行列","id":"平行移動行列"},{"text":"行列で DOM を操作する","id":"行列で_dom_を操作する"},{"text":"拡大縮小行列","id":"拡大縮小行列"},{"text":"回転行列","id":"回転行列"},{"text":"行列合成","id":"行列合成"},{"text":"行列が重要な理由","id":"行列が重要な理由"}],"summary":"行列は、空間内のオブジェクトの変換を表すために使用でき、画像を構築したり、ウェブ上でデータを視覚化したりするときに、多くの主要な種類の計算を実行するために使用されます。 この記事では、行列を作成する方法と、CSS transform および matrix3d transform 型でそれらを使用する方法について説明します。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Matrix math for the web","locale":"en-US","native":"English (US)"},{"title":"Matrix math for the web","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/webgl_api/matrix_math_for_the_web","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/webgl_api/matrix_math_for_the_web/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/WebGL_API","title":"WebGL: ウェブの 2D および 3D グラフィック"},{"uri":"/ja/docs/Web/API/WebGL_API/Matrix_math_for_the_web","title":"ウェブの行列計算"}],"pageTitle":"ウェブの行列計算 - Web API | MDN","noIndexing":false}}