{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Cache","mdn_url":"/ja/docs/Web/API/Cache","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/Service_Worker_API\">Service Worker API</a></strong></li><li><strong><a href=\"/ja/docs/Web/API/Cache\"><code>Cache</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>メソッド</summary><ol><li><a href=\"/ja/docs/Web/API/Cache/add\"><code>add()</code></a></li><li><a href=\"/ja/docs/Web/API/Cache/addAll\"><code>addAll()</code></a></li><li><a href=\"/ja/docs/Web/API/Cache/delete\"><code>delete()</code></a></li><li><a href=\"/ja/docs/Web/API/Cache/keys\"><code>keys()</code></a></li><li><a href=\"/ja/docs/Web/API/Cache/match\"><code>match()</code></a></li><li><a href=\"/ja/docs/Web/API/Cache/matchAll\"><code>matchAll()</code></a></li><li><a href=\"/ja/docs/Web/API/Cache/put\"><code>put()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Service Workers API に関連するページ</summary><ol><li><a href=\"/ja/docs/Web/API/CacheStorage\"><code>CacheStorage</code></a></li><li><a href=\"/ja/docs/Web/API/Client\"><code>Client</code></a></li><li><a href=\"/ja/docs/Web/API/Clients\"><code>Clients</code></a></li><li><a href=\"/ja/docs/Web/API/ExtendableEvent\"><code>ExtendableEvent</code></a></li><li><a href=\"/ja/docs/Web/API/FetchEvent\"><code>FetchEvent</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/InstallEvent\"><code>InstallEvent</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/API/Navigator/serviceWorker\"><code>Navigator.serviceWorker</code></a></li><li><a href=\"/ja/docs/Web/API/NotificationEvent\"><code>NotificationEvent</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PeriodicSyncEvent\"><code>PeriodicSyncEvent</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PeriodicSyncManager\"><code>PeriodicSyncManager</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/API/ServiceWorker\"><code>ServiceWorker</code></a></li><li><a href=\"/ja/docs/Web/API/ServiceWorkerContainer\"><code>ServiceWorkerContainer</code></a></li><li><a href=\"/ja/docs/Web/API/ServiceWorkerGlobalScope\"><code>ServiceWorkerGlobalScope</code></a></li><li><a href=\"/ja/docs/Web/API/ServiceWorkerRegistration\"><code>ServiceWorkerRegistration</code></a></li><li><a href=\"/ja/docs/Web/API/SyncEvent\"><code>SyncEvent</code></a></li><li><a href=\"/ja/docs/Web/API/SyncManager\"><code>SyncManager</code></a></li><li><a href=\"/ja/docs/Web/API/WindowClient\"><code>WindowClient</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>Cache</code></strong> インターフェイスは、<a href=\"http://fetch.spec.whatwg.org/#request\" class=\"external\" rel=\" noopener\"><code>Request</code></a> / <a href=\"http://fetch.spec.whatwg.org/#response\" class=\"external\" rel=\" noopener\"><code>Response</code></a> オブジェクトのペアのためのストレージの仕組みを提供します。例えば、 <a href=\"/ja/docs/Web/API/ServiceWorker\"><code>ServiceWorker</code></a> のライフサイクルの一部としてこれらをキャッシュします。なお、 <code>Cache</code> インターフェイスは、ワーカーだけでなくウィンドウスコープにも公開されています。サービスワーカーの仕様書で定義されているものですが、必ずしもサービスワーカーとの組み合わせで使用する必要はありません。</p>\n<p>単一のオリジンが、複数の名前付き <code>Cache</code> オブジェクトを持つことができます。 (例えば <a href=\"/ja/docs/Web/API/ServiceWorker\"><code>ServiceWorker</code></a> の中などで) スクリプトがどのように <code>Cache</code> を更新するかを実装する必要があります。 <code>Cache</code> 内のアイテムは、明示的に要求しない限り更新されませんし、削除しない限り有効期限はありません。 <a href=\"/ja/docs/Web/API/CacheStorage/open\" title=\"CacheStorage.open()\"><code>CacheStorage.open()</code></a> を使用して特定の名前付き <code>Cache</code> オブジェクトを開き、それから任意の <code>Cache</code> のメソッドを呼び出して <code>Cache</code> を管理します。</p>\n<p>また、定期的にキャッシュエントリを一掃する必要があります。各ブラウザーは、指定されたオリジンが使用できるキャッシュストレージの総量に厳しい制限を設けています。キャッシュ容量の概算の使用量は <a href=\"/ja/docs/conflicting/Web/API/StorageManager/estimate\"><code>StorageEstimate</code></a> API を用いて確認することができます。ブラウザーはディスク容量の管理に最善を尽くしますが、あるオリジンのキャッシュストレージを削除することがあります。ブラウザーはふつう、あるオリジンのデータをすべて削除するか、まったく削除しないかのいずれかです。名前を用いてキャッシュをバージョン管理し、安全に操作できるスクリプトのバージョンからのみキャッシュを使用するようにしてください。詳細は、<a href=\"/ja/docs/Web/API/Service_Worker_API/Using_Service_Workers#deleting_old_caches\">古いキャッシュの削除</a>を確認してください。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> キーの照合アルゴリズムは、値の中にある <a href=\"https://www.fastly.com/blog/best-practices-for-using-the-vary-header\" class=\"external\" rel=\" noopener\">VARY ヘッダー</a>に依存しています。そのため、新しいキーを照合するには、キャッシュ内のエントリのキーと値の両方を調べる必要があります。</p>\n</div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> キャッシュ API は HTTP のキャッシュヘッダーを尊重しません。</p>\n</div>"}},{"type":"prose","value":{"id":"メソッド","title":"メソッド","isH3":false,"content":"<dl>\n  <dt id=\"cache.matchrequest_options\"><a href=\"/ja/docs/Web/API/Cache/match\" title=\"Cache.match(request, options)\"><code>Cache.match(request, options)</code></a></dt>\n  <dd>\n    <p><code>Cache</code> オブジェクトで最初に一致したリクエストに関連するレスポンスで解決する <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> を返します。</p>\n  </dd>\n  <dt id=\"cache.matchallrequest_options\"><a href=\"/ja/docs/Web/API/Cache/matchAll\" title=\"Cache.matchAll(request, options)\"><code>Cache.matchAll(request, options)</code></a></dt>\n  <dd>\n    <p><code>Cache</code> オブジェクトで一致するすべてのリクエストの配列で解決する <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> を返します。</p>\n  </dd>\n  <dt id=\"cache.addrequest\"><a href=\"/ja/docs/Web/API/Cache/add\" title=\"Cache.add(request)\"><code>Cache.add(request)</code></a></dt>\n  <dd>\n    <p>URL を受け取り、それを取得して、指定されたキャッシュに結果のレスポンスオブジェクトを追加します。機能的には <code>fetch()</code> を呼び出してから、 <code>put()</code> を使用してキャッシュに結果を追加するのと同等です。</p>\n  </dd>\n  <dt id=\"cache.addallrequests\"><a href=\"/ja/docs/Web/API/Cache/addAll\" title=\"Cache.addAll(requests)\"><code>Cache.addAll(requests)</code></a></dt>\n  <dd>\n    <p>URL の配列を受け取り、それらを取得して指定されたキャッシュに結果のレスポンスオブジェクトを追加します。</p>\n  </dd>\n  <dt id=\"cache.putrequest_response\"><a href=\"/ja/docs/Web/API/Cache/put\" title=\"Cache.put(request, response)\"><code>Cache.put(request, response)</code></a></dt>\n  <dd>\n    <p>リクエストとそのレスポンスの両方を受け取り、指定されたキャッシュへ追加します。</p>\n  </dd>\n  <dt id=\"cache.deleterequest_options\"><a href=\"/ja/docs/Web/API/Cache/delete\" title=\"Cache.delete(request, options)\"><code>Cache.delete(request, options)</code></a></dt>\n  <dd>\n    <p>キーがリクエストである <code>Cache</code> エントリを探し、見つかった場合は <a href=\"/ja/docs/Web/API/Cache\" aria-current=\"page\"><code>Cache</code></a> エントリを削除して、 <code>true</code> で解決する <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> を返します。 <a href=\"/ja/docs/Web/API/Cache\" aria-current=\"page\"><code>Cache</code></a> エントリが見つからない場合、Promise は <code>false</code> で解決します。</p>\n  </dd>\n  <dt id=\"cache.keysrequest_options\"><a href=\"/ja/docs/Web/API/Cache/keys\" title=\"Cache.keys(request, options)\"><code>Cache.keys(request, options)</code></a></dt>\n  <dd>\n    <p><code>Cache</code> キーの配列で解決する <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> を返します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":"<p>このコードスニペットは、<a href=\"https://github.com/GoogleChrome/samples/blob/gh-pages/service-worker/selective-caching/service-worker.js\" class=\"external\" rel=\" noopener\">service worker selective caching sample</a> からのものです (<a href=\"https://googlechrome.github.io/samples/service-worker/selective-caching/\" class=\"external\" rel=\" noopener\">selective caching をライブで</a>見る)。このコードでは <a href=\"/ja/docs/Web/API/CacheStorage/open\"><code>CacheStorage.open()</code></a> を使用して、 <code>font/</code> で始まる <code>Content-Type</code> ヘッダー用の <code>Cache</code> オブジェクトを開きます。</p>\n<p>そしてこのコードは、 <a href=\"/ja/docs/Web/API/Cache/match\"><code>Cache.match()</code></a> を使用してすでにキャッシュ内に一致するフォントがあるかどうかを確認し、もしあれば、それを返します。一致するフォントがなかった場合は、コードはネットワークからフォントを取得して、 <a href=\"/ja/docs/Web/API/Cache/put\"><code>Cache.put()</code></a> を用いて取得したリソースをキャッシュします。</p>\n<p>このコードは <a href=\"/ja/docs/Web/API/fetch\" title=\"fetch()\"><code>fetch()</code></a> の操作で発生する例外を処理します。なお、 HTTP のエラーレスポンス (404 など) はこの例外を発生させません。適切なエラーコードを持つ通常のレスポンスオブジェクトを返します。</p>\n<p>このコードスニペットでは、サービスワーカーで使用されるバージョン付きキャッシュのベストプラクティスも示しています。この例ではキャッシュが 1 つしかありませんが、キャッシュが複数でも同じアプローチが利用できます。これはキャッシュの一括指定識別子を、具体的なバージョン付けされたキャッシュ名に対応させます。このコードはまた、 <code>CURRENT_CACHES</code> で名前が指定されていないキャッシュをすべて削除します。</p>\n<p>このコード例において、 <code>caches</code> は <a href=\"/ja/docs/Web/API/ServiceWorkerGlobalScope\"><code>ServiceWorkerGlobalScope</code></a> のプロパティです。これは <code>CacheStorage</code> オブジェクトを保持し、 <a href=\"/ja/docs/Web/API/CacheStorage\"><code>CacheStorage</code></a> インターフェイスでアクセスすることができます。これは <a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>WindowOrWorkerGlobalScope</code></a> ミックスインを実装したものです。</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> Chrome では、 <code>chrome://inspect/#service-workers</code> にアクセスして、登録されたサービスワーカーの下の \"inspect\" リンクをクリックすると、 <a href=\"https://github.com/GoogleChrome/samples/blob/gh-pages/service-worker/selective-caching/service-worker.js\" class=\"external\" rel=\" noopener\"><code>service-worker.js</code></a> スクリプトが行う様々なアクションのログ状態を見ることができます。</p>\n</div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> <span class=\"token constant\">CACHE_VERSION</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token constant\">CURRENT_CACHES</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">font</span><span class=\"token operator\">:</span> <span class=\"token string\">'font-cache-v'</span> <span class=\"token operator\">+</span> <span class=\"token constant\">CACHE_VERSION</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nself<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'activate'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// CURRENT_CACHES で指定されていないすべてのキャッシュを削除します。</span>\n  <span class=\"token comment\">// この例ではキャッシュは1つしかありませんが、同じロジックが</span>\n  <span class=\"token comment\">// 複数のバージョン化されたキャッシュがある場合を処理します。</span>\n  <span class=\"token keyword\">var</span> expectedCacheNamesSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CURRENT_CACHES</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span>\n    caches<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cacheNames</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>\n        cacheNames<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cacheName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>expectedCacheNamesSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>cacheName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// このキャッシュ名が「予期される」キャッシュ名のセットに存在しない場合は、削除します。</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Deleting out of date cache:'</span><span class=\"token punctuation\">,</span> cacheName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>cacheName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nself<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fetch'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Handling fetch event for'</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>\n    caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CURRENT_CACHES</span><span class=\"token punctuation\">.</span>font<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cache</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// event.request のエントリがキャッシュにある場合、レスポンスが定義され、それを返すことができます。</span>\n          <span class=\"token comment\">// この例では、フォントリソースのみがキャッシュされることに注意してください。</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">' Found response in cache:'</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n          <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// それ以外の場合、event.request のエントリがキャッシュにない場合、</span>\n        <span class=\"token comment\">// レスポンスは undefined となり、リソースを fetch() する必要があります。</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">' No response for %s found in cache. About to fetch '</span> <span class=\"token operator\">+</span>\n          <span class=\"token string\">'from network...'</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 後で cache.put() の呼び出しで使用する可能性があるため、リクエストで .clone() を呼び出します。</span>\n        <span class=\"token comment\">// fetch() とcache.put() の両方がリクエストを「消費」するため、コピーを作成する必要があります。</span>\n        <span class=\"token comment\">// （https://fetch.spec.whatwg.org/#dom-request-clone を参照）</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'  Response for %s from network is: %O'</span><span class=\"token punctuation\">,</span>\n            event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;</span> <span class=\"token number\">400</span> <span class=\"token operator\">&amp;&amp;</span>\n              response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'content-type'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n              response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'content-type'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^font\\/</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// これにより、エラーであることがわかっているレスポンス（つまり、HTTP ステータスコード 4xx または 5xx）のキャッシュが回避されます。</span>\n            <span class=\"token comment\">// また、フォントに対応するレスポンスのみをキャッシュする必要があります。</span>\n            <span class=\"token comment\">// つまり、\"font/\" で始まる Content-Type レスポンスヘッダーを持ちます。</span>\n            <span class=\"token comment\">// 不透明なフィルタされたレスポンス（https://fetch.spec.whatwg.org/#concept-filtered-response-opaque）の場合、</span>\n            <span class=\"token comment\">// レスポンスヘッダーにアクセスできないので、このチェックは常に失敗し、フォントはキャッシュされないことに注意してください。</span>\n            <span class=\"token comment\">// すべての Google Web Fonts は CORS をサポートするドメインから提供されるため、ここでは問題になりません。</span>\n            <span class=\"token comment\">// ただし、CORS をサポートしていないクロスオリジンドメインから他のリソースをキャッシュしようとしている場合は、注意が必要です。</span>\n            <span class=\"token comment\">// レスポンスで .clone() を呼び出して、そのコピーをキャッシュに保存します。</span>\n            <span class=\"token comment\">// そうすることで、制御されたページに戻る元のレスポンスオブジェクトを保持できます。</span>\n            <span class=\"token comment\">// （https://fetch.spec.whatwg.org/#dom-response-clone を参照）</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'  Caching the response to'</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            cache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'  Not caching the response to'</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n\n          <span class=\"token comment\">// 元のレスポンスオブジェクトを返します。これは、リソース要求を満たすために使用されます。</span>\n          <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// この catch() は、match() または fetch() 操作から発生する例外を処理します。</span>\n        <span class=\"token comment\">// HTTP エラーレスポンス（404 など）は例外をトリガーしないことに注意してください。</span>\n        <span class=\"token comment\">// 適切なエラーコードが設定された通常のレスポンスオブジェクトを返します。</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'  Error in fetch handler:'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"クッキーのキャッシュへの格納","title":"クッキーのキャッシュへの格納","isH3":true,"content":"<p><a href=\"/ja/docs/Web/API/Fetch_API\">Fetch API</a> では <a href=\"/ja/docs/Web/HTTP/Headers/Set-Cookie\"><code>Set-Cookie</code></a> ヘッダーを、 <a href=\"/ja/docs/Web/API/Response\"><code>Response</code></a> オブジェクトを <a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>fetch()</code></a> から返す前に削除する必要があります。したがって、キャッシュに含まれる <code>Response</code> はヘッダーを含みません。</p>"}},{"type":"prose","value":{"id":"仕様書","title":"仕様書","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>仕様書</th>\n      <th>状態</th>\n      <th>備考</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://w3c.github.io/ServiceWorker/#cache\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">Service Workers<br><small lang=\"ja\">Cache の定義</small></a></td>\n      <td><span class=\"spec-wd\">草案</span></td>\n      <td>初回定義</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"query":"api.Cache","dataURL":"/ja/docs/Web/API/Cache/bcd.json"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/API/Service_Worker_API/Using_Service_Workers\">サービスワーカーの使用</a></li>\n  <li><a href=\"https://github.com/mdn/sw-test\" class=\"external\" rel=\" noopener\">サービスワーカーの基本的なコード例</a>（英語）</li>\n  <li><a href=\"https://jakearchibald.github.io/isserviceworkerready/\" class=\"external\" rel=\" noopener\">ServiceWorker の準備はできていますか？</a>（英語）</li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a></li>\n  <li><a href=\"/ja/docs/Web/API/Web_Workers_API/Using_web_workers\">ウェブワーカーの使用</a></li>\n</ul>"}}],"toc":[{"text":"メソッド","id":"メソッド"},{"text":"例","id":"例"},{"text":"仕様書","id":"仕様書"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"Cache インターフェイスは、Request / Response オブジェクトのペアのためのストレージの仕組みを提供します。例えば、 ServiceWorker のライフサイクルの一部としてこれらをキャッシュします。なお、 Cache インターフェイスは、ワーカーだけでなくウィンドウスコープにも公開されています。サービスワーカーの仕様書で定義されているものですが、必ずしもサービスワーカーとの組み合わせで使用する必要はありません。","popularity":0.0003,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Cache","locale":"en-US","native":"English (US)"},{"title":"Cache","locale":"fr","native":"Français"},{"title":"Cache","locale":"ko","native":"한국어"},{"title":"Cache","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Cache","locale":"ru","native":"Русский"},{"title":"Cache","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/cache","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/cache/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/Cache","title":"Cache"}],"pageTitle":"Cache - Web API | MDN","noIndexing":false}}