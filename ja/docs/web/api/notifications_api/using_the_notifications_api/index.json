{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"通知 API の使用","mdn_url":"/ja/docs/Web/API/Notifications_API/Using_the_Notifications_API","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/Notifications_API\">Notifications API</a></strong></li><li><strong><a href=\"/ja/docs/Web/API/Notifications_API\"><code>Notifications_API</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Web Notifications に関連するページ</summary><ol><li><a href=\"/ja/docs/Web/API/Notification\"><code>Notification</code></a></li><li><a href=\"/ja/docs/Web/API/NotificationEvent\"><code>NotificationEvent</code></a></li><li><a href=\"/ja/docs/Web/API/ServiceWorkerRegistration/getNotifications\"><code>ServiceWorkerRegistration.getNotifications()</code></a></li><li><a href=\"/ja/docs/Web/API/ServiceWorkerRegistration/showNotification\"><code>ServiceWorkerRegistration.showNotification()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>注:</strong> この機能は <a href=\"/ja/docs/Web/API/Web_Workers_API\">Web Worker</a> 内で利用可能です</p>\n</div><div class=\"notecard secure\" id=\"sect2\"><p><strong>安全なコンテキスト用:</strong> この機能は一部またはすべての<a href=\"#browser_compatibility\">対応しているブラウザー</a>において、<a href=\"/ja/docs/Web/Security/Secure_Contexts\">安全なコンテキスト</a> (HTTPS) でのみ利用できます。</p></div>\n<p><a href=\"/ja/docs/Web/API/Notifications_API\">通知 API</a> は、ウェブページやアプリからシステムレベルでページ外部に表示される通知を送ることを可能にします。これにより、アプリケーションがアイドルやバックグラウンドの状態であっても、アプリからユーザーに情報を送信することができます。この記事では、アプリで API を使用する方法の基本を見ていきます。</p>\n<p>一般的にシステム通知とは、オペレーティングシステムの標準的な通知メカニズムを指します。一般的なデスクトップシステムやモバイル端末が、通知を行う方法の実例を思い出しましょう。</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/Notifications_API/Using_the_Notifications_API/android-notification.png\" alt=\"\" width=\"300\" height=\"184\" loading=\"lazy\">\n</p>\n<p>当然ながらシステム通知の仕組みはプラットフォームやブラウザーによって異なりますが問題はなく、通知 API はほとんどのシステム通知に対して十分な互換性を持つようになっています。</p>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":"<p>ウェブ通知の最も顕著な用途の一つが、ウェブベースのメールや IRC アプリケーションにおいて、新しいメッセージを受信したときに、ユーザーがほかのアプリケーションで何かをしていても通知をする必要がある場合です。これには数多くの事例が存在し、例えば <a href=\"https://slack.com/\" class=\"external\" rel=\" noopener\">Slack</a> などがあります。</p>\n<p>ウェブ通知がどのように利用できるのかの考えを深めるために、実世界の例を — To-do リストアプリ — を書いてみました。これは <a href=\"/ja/docs/Web/API/IndexedDB_API\">IndexedDB</a> を使用してローカルにデータを格納し、タスクの期限が来たときにシステム通知を使用してユーザーに通知します。 <a href=\"https://github.com/mdn/to-do-notifications/tree/gh-pages\" class=\"external\" rel=\" noopener\">To-do リストのコードをダウンロード</a>するか、<a href=\"https://mdn.github.io/to-do-notifications/\" class=\"external\" rel=\" noopener\">ライブで実行するアプリを見る</a>かしてみましょう。</p>"}},{"type":"prose","value":{"id":"許可の要求","title":"許可の要求","isH3":false,"content":"<p>アプリが通知を送信できるようになる前に、ユーザーはアプリがそれを行う権限を認めなければなりません。これは API がウェブページの外部にあるものと対話しようとする際の一般的な要件です。ユーザは少なくとも 1 回はアプリケーションが通知を送ることを認めなければならず、これによりどのアプリやサイトが通知を表示してよいかをユーザーが制御することができます。</p>\n<p>過去にプッシュ通知が悪用されることがあったため、ウェブブラウザーや開発者はこの問題を緩和するための対策を実装し始めています。通知を表示することの許可を求めるのは、ユーザーの操作 (ボタンをクリックするなど) の反応として行うべきです。ユーザーが同意していない通知でユーザーに迷惑をかけるべきではないので、これはベストプラクティスであるだけでなく、今後ブラウザーはユーザーの操作によって起動されたものではない通知の許可の要求を明示的に拒否するようになるでしょう。例えば、 Firefox はバージョン72からすでにこれを行っており、 Safari もしばらく前からこれを行っています。</p>\n<p>加えて、 Chrome と Firefox では、サイトが安全なコンテキスト (すなわち HTTPS) ではない限り通知を要求することができず、また別オリジンの <a href=\"/ja/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code></a> から要求された通知を許可することができなくなりました。</p>"}},{"type":"prose","value":{"id":"現在の許可状態を確認する","title":"現在の許可状態を確認する","isH3":true,"content":"<p>読取専用の <a href=\"/ja/docs/Web/API/Notification/permission\"><code>Notification.permission</code></a> プロパティの値を調べると、すでに許可を得ているかを確認できます。このプロパティは、3 種類のいずれかの値を取ります。</p>\n<dl>\n  <dt id=\"default\"><code>default</code></dt>\n  <dd>\n    <p>ユーザーはまだ許可を求められたことがなく、したがって通知は表示されない。</p>\n  </dd>\n  <dt id=\"granted\"><code>granted</code></dt>\n  <dd>\n    <p>ユーザーは以前に通知表示の許可を求められており、許可した。</p>\n  </dd>\n  <dt id=\"denied\"><code>denied</code></dt>\n  <dd>\n    <p>ユーザーは、通知を表示することを明示的に拒否した。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"許可を得る","title":"許可を得る","isH3":true,"content":"<p>通知を表示する許可をまだ得ていない場合は、アプリケーションは <a href=\"/ja/docs/Web/API/Notification/requestPermission\"><code>Notification.requestPermission()</code></a> メソッドを使用してユーザーに要求する必要があります。もっとも簡単な形では、次のようなものがあります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>Notification<span class=\"token punctuation\">.</span><span class=\"token function\">requestPermission</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これはメソッドのプロミスベースの版を使用しています。古いバージョンに対応したい場合は、次のように古いコールバック版を使用する必要があります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>Notification<span class=\"token punctuation\">.</span><span class=\"token function\">requestPermission</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>コールバック版はオプションで、ユーザーが表示を許可する要求に答えた時に呼び出されるコールバック関数を受け入れます。</p>"}},{"type":"prose","value":{"id":"例_2","title":"例","isH3":true,"content":"<p>To-do リストのデモでは、 \"Enable notifications\" ボタンを配置し、押されたときにアプリの通知を要求します。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>enable<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Enable notifications<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>これをクリックすると、 <code>askNotificationPermission()</code> 関数が呼び出されます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">askNotificationPermission</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// function to actually ask the permissions</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handlePermission</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">permission</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// set the button to shown or hidden, depending on what the user answers</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Notification<span class=\"token punctuation\">.</span>permission <span class=\"token operator\">===</span> <span class=\"token string\">'denied'</span> <span class=\"token operator\">||</span> Notification<span class=\"token punctuation\">.</span>permission <span class=\"token operator\">===</span> <span class=\"token string\">'default'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      notificationBtn<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">'block'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      notificationBtn<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Let's check if the browser supports notifications</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Notification'</span> <span class=\"token keyword\">in</span> window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This browser does not support notifications.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkNotificationPromise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      Notification<span class=\"token punctuation\">.</span><span class=\"token function\">requestPermission</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">permission</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">handlePermission</span><span class=\"token punctuation\">(</span>permission<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      Notification<span class=\"token punctuation\">.</span><span class=\"token function\">requestPermission</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">permission</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">handlePermission</span><span class=\"token punctuation\">(</span>permission<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>最初に 2 番目のメインブロックを見てみると、まず最初に通知に対応しているかどうかチェックしているのが分かります。もし対応していれば、次に <code>Notification.requestPermission()</code> のプロミスベース版に対応しているかどうかチェックします。対応している場合は、プロミスベース版 (Safari 以外で対応) を実行し、対応していない場合は古いコールバックベース版 (Safari で対応) を実行します。</p>\n<p>コードの重複を避けるために、このスニペットの最初のメインブロックである <code>handlePermission()</code> 関数の中に、多少のハウスキーピングコードを格納しています。この内部では、 <code>Notification.permission</code> の値を明示的に設定し (古いバージョンの Chrome では自動的に設定できないものがありました)、ユーザーが許可ダイアログで選択した内容に応じてボタンを表示・非表示にしています。すでに許可されている場合は表示したくありませんが、ユーザーが許可を拒否することを選択した場合は、後で変更できるようにしたいと考えています。</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> バージョン 37 より前の Chrome では、 <a href=\"/ja/docs/Web/API/Notification/requestPermission\"><code>Notification.requestPermission()</code></a> を <code>load</code> イベントのハンドラー内で呼び出すことを許可していませんでした (<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=274284\" class=\"external\" rel=\" noopener\">issue 274284</a> をご覧ください)。</p>\n</div>"}},{"type":"prose","value":{"id":"requestpermission_プロミスの機能検出","title":"requestPermission() プロミスの機能検出","isH3":true,"content":"<p>前に、ブラウザーがプロミス版の <code>Notification.requestPermission()</code> に対応しているかどうかをチェックする必要があると言いました。これは以下のようにして行います。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">checkNotificationPromise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      Notification<span class=\"token punctuation\">.</span><span class=\"token function\">requestPermission</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>基本的には、 <code>.then()</code> メソッドが <code>requestPermission()</code> で利用できるかどうかを確認します。成功した場合は <code>true</code> を返します。失敗した場合は、 <code>false</code> を <code>catch() {}</code> ブロック内で返します。</p>"}},{"type":"prose","value":{"id":"creating_a_notification","title":"通知の作成","isH3":false,"content":"<p>通知の作成は簡単です。 <a href=\"/ja/docs/Web/API/Notification\"><code>Notification</code></a> コンストラクターを使用するだけです。このコンストラクターは通知内に表示するタイトルと、通知を拡張するためのアイコン (<a href=\"/ja/docs/Web/API/Notification/icon\" title=\"icon\"><code>icon</code></a>) やテキスト本文 (<a href=\"/ja/docs/Web/API/Notification/body\" title=\"body\"><code>body</code></a>) などのオプションを受け取ります。</p>\n<p>例えば To-do リストの例では必要に応じて以下のスニペットを使用して通知を作成します (<code>createNotification()</code> 内にあります)。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> img <span class=\"token operator\">=</span> <span class=\"token string\">'/to-do-notifications/img/icon-128.png'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token string\">'HEY! Your task \"'</span> <span class=\"token operator\">+</span> title <span class=\"token operator\">+</span> <span class=\"token string\">'\" is now overdue.'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> notification <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Notification</span><span class=\"token punctuation\">(</span><span class=\"token string\">'To do list'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> text<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">icon</span><span class=\"token operator\">:</span> img <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"通知を閉じる","title":"通知を閉じる","isH3":false,"content":"<p><a href=\"/ja/docs/Web/API/Notification/close\" title=\"close()\"><code>close()</code></a> を使用して、ユーザーに関係がなくなった通知を除去します (例えば、メッセージアプリなどで、ユーザーが既にウェブページ上の通知を読んだ場合や、音楽アプリですでに次の曲が始まっているため、曲の変更を行うための通知を閉じるなど)。最近のブラウザーの多くは、数秒 (約 4 秒) 経過すると通知を自動的に解除しますが、これはユーザーやユーザーエージェントの判断に委ねられているため、一般的には気にする必要はありません。通知の削除はオペレーティングシステムレベルでも発生する可能性があり、ユーザーが制御できるようにしておく必要があります。古いバージョンの Chrome は通知を自動的に削除しないので、他のブラウザーの通知トレイから通知を削除しないように、古いバージョンのブラウザーでのみ <a href=\"/ja/docs/Web/API/setTimeout\"><code>setTimeout()</code></a> の後に削除してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Notification</span><span class=\"token punctuation\">(</span><span class=\"token string\">'My Great Song'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'visibilitychange'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>visibilityState <span class=\"token operator\">===</span> <span class=\"token string\">'visible'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The tab has become visible so clear the now-stale Notification.</span>\n    n<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>Note:</strong> この API は、 (現代のブラウザーで) 一定時間経過後に通知を画面から消去するだけのために使用すべきではありません。通知が最初に表示された後にユーザーがそれとやりとりすることを防ぐため、このメソッドは通知トレイからも通知を削除するためです。</p>\n</div>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>Note:</strong> \"close\" イベントを受け取ったとき、それが通知を閉じたユーザーであるという保証はありません。これは仕様書に準拠しており、以下のように記載されています。「通知が基礎となる通知プラットフォームによって、またはユーザーによって閉じられるとき、その通知のための閉じるステップを実行しなければなりません。」</p>\n</div>"}},{"type":"prose","value":{"id":"notification_イベント","title":"Notification イベント","isH3":false,"content":"<p>Notifications API の仕様では、<a href=\"/ja/docs/Web/API/Notification\"><code>Notification</code></a> のインスタンスで発生するイベントを 2 つ定義しています:</p>\n<dl>\n  <dt id=\"click\"><code>click</code></dt>\n  <dd>\n    <p>ユーザーが通知をクリックしたときに発生します。</p>\n  </dd>\n  <dt id=\"close\"><code>close</code></dt>\n  <dd>\n    <p>通知が閉じられたときに一度発生します。</p>\n  </dd>\n  <dt id=\"error\"><code>error</code></dt>\n  <dd>\n    <p>通知で問題が発生したときに発生します。通常、なんらかの理由で通知が表示されなかったためです。</p>\n  </dd>\n  <dt id=\"show\"><code>show</code></dt>\n  <dd>\n    <p>通知がユーザーに表示されたときに発生します。</p>\n  </dd>\n</dl>\n<p>これらのイベントは <a href=\"/ja/docs/Web/API/Notification/click_event\" title=\"onclick\"><code>onclick</code></a>, <a href=\"/ja/docs/Web/API/Notification/close_event\" title=\"onclose\"><code>onclose</code></a>, <a href=\"/ja/docs/Web/API/Notification/error_event\" title=\"onerror\"><code>onerror</code></a>, <a href=\"/ja/docs/Web/API/Notification/show_event\" title=\"onshow\"><code>onshow</code></a> の各ハンドラーを使用して追跡することができます。 <a href=\"/ja/docs/Web/API/Notification\"><code>Notification</code></a> は <a href=\"/ja/docs/Web/API/EventTarget\"><code>EventTarget</code></a> も継承していますので <a href=\"/ja/docs/Web/API/EventTarget/addEventListener\" title=\"addEventListener()\"><code>addEventListener()</code></a> メソッドも使用することができます。</p>"}},{"type":"prose","value":{"id":"既存の通知を置き換える","title":"既存の通知を置き換える","isH3":false,"content":"<p>ユーザーが短期間に多くの通知を受け取ることは、通常望ましくありません。例えばメッセンジャーアプリがメッセージを受け取るたびに通知を行って、それが大量になったらどうなるでしょうか。大量の通知によるスパム状態を避けるため、準備中の通知キューを変更して 1 つ以上の未表示通知を新た通知で置き換えることができます。</p>\n<p>これを行うために、任意の新たな通知にタグ付けすることができます。すでに同じタグがついている通知がまだ表示されていない場合は、新しい通知が以前の通知を置き換えます。同じタグがついている通知がすでに表示されている場合は、前の通知が閉じられて新しい通知が表示されます。</p>"}},{"type":"prose","value":{"id":"タグの例","title":"タグの例","isH3":true,"content":"<p>以下の基本的な HTML を想定してください。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">&gt;</span></span>Notify me!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>以下の方法で、複数の通知を扱うことが可能です。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'load'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>self <span class=\"token operator\">!==</span> window<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Ensure that if our document is in a frame, we get the user</span>\n    <span class=\"token comment\">// to first open it in its own tab or window. Otherwise, it</span>\n    <span class=\"token comment\">// won't be able to request permission to send notifications.</span>\n    button<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">\"View live result of the example code above\"</span><span class=\"token punctuation\">;</span>\n    button<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  button<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// If the user agreed to get notified</span>\n    <span class=\"token comment\">// Let's try to send ten notifications</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>Notification <span class=\"token operator\">&amp;&amp;</span> Notification<span class=\"token punctuation\">.</span>permission <span class=\"token operator\">===</span> <span class=\"token string\">\"granted\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// Using an interval cause some browsers (including Firefox) are blocking notifications if there are too much in a certain time.</span>\n      <span class=\"token keyword\">const</span> interval <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Thanks to the tag, we should only see the \"Hi! 9\" notification</span>\n        <span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Notification</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi! \"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span> <span class=\"token string\">'soManyNotification'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">++</span> <span class=\"token operator\">==</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          window<span class=\"token punctuation\">.</span><span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// If the user hasn't told if they want to be notified or not</span>\n    <span class=\"token comment\">// Note: because of Chrome, we are not sure the permission property</span>\n    <span class=\"token comment\">// is set, therefore it's unsafe to check for the \"default\" value.</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>Notification <span class=\"token operator\">&amp;&amp;</span> Notification<span class=\"token punctuation\">.</span>permission <span class=\"token operator\">!==</span> <span class=\"token string\">\"denied\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      Notification<span class=\"token punctuation\">.</span><span class=\"token function\">requestPermission</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// If the user said okay</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">===</span> <span class=\"token string\">\"granted\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\">// Using an interval cause some browsers (including Firefox) are blocking notifications if there are too much in a certain time.</span>\n          <span class=\"token keyword\">const</span> interval <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Thanks to the tag, we should only see the \"Hi! 9\" notification</span>\n            <span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Notification</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi! \"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span> <span class=\"token string\">'soManyNotification'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">++</span> <span class=\"token operator\">==</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              window<span class=\"token punctuation\">.</span><span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Otherwise, we can fallback to a regular modal alert</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// ユーザが通知を拒否している場合</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 通常型の alert にフォールバックできます</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>結果は以下のとおりです。</p><iframe class=\"sample-code-frame\" title=\"タグの例\" id=\"frame_tag_example\" width=\"100%\" height=\"60\" src=\"https://yari-demos.prod.mdn.mozit.cloud/ja/docs/Web/API/Notifications_API/Using_the_Notifications_API/_sample_.tag_example.html\" loading=\"lazy\"></iframe>"}},{"type":"specifications","value":{"title":"仕様書","id":"仕様書","isH3":false,"specifications":[{"bcdSpecificationURL":"https://notifications.spec.whatwg.org/#api","title":"Notifications API Standard"}],"query":"api.Notification"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"query":"api.Notification","dataURL":"/ja/docs/Web/API/Notifications_API/Using_the_Notifications_API/bcd.json"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/API/Notification\"><code>Notification</code></a></li>\n</ul>"}}],"toc":[{"text":"例","id":"例"},{"text":"許可の要求","id":"許可の要求"},{"text":"通知の作成","id":"creating_a_notification"},{"text":"通知を閉じる","id":"通知を閉じる"},{"text":"Notification イベント","id":"notification_イベント"},{"text":"既存の通知を置き換える","id":"既存の通知を置き換える"},{"text":"仕様書","id":"仕様書"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"通知 API は、ウェブページやアプリからシステムレベルでページ外部に表示される通知を送ることを可能にします。これにより、アプリケーションがアイドルやバックグラウンドの状態であっても、アプリからユーザーに情報を送信することができます。この記事では、アプリで API を使用する方法の基本を見ていきます。","popularity":0.0003,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using the Notifications API","locale":"en-US","native":"English (US)"},{"title":"Usando la API de Notificaciones","locale":"es","native":"Español"},{"title":"Utilisation de l'API Notifications","locale":"fr","native":"Français"},{"title":"알림 API 사용하기","locale":"ko","native":"한국어"},{"title":"使用 Web Notifications","locale":"zh-CN","native":"中文 (简体)"},{"title":"使用 Web Notifications","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ja/web/api/notifications_api/using_the_notifications_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/notifications_api/using_the_notifications_api/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/Notifications_API","title":"通知 API"},{"uri":"/ja/docs/Web/API/Notifications_API/Using_the_Notifications_API","title":"通知 API の使用"}],"pageTitle":"通知 API の使用 - Web API | MDN","noIndexing":false}}