{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"MediaStream Recording API","mdn_url":"/ja/docs/Web/API/MediaStream_Recording_API","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/MediaStream_Recording_API\">MediaStream Recording API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>ガイド</summary><ol><li><a href=\"/ja/docs/Web/API/MediaStream_Recording_API/Using_the_MediaStream_Recording_API\">Using the MediaStream Recording API</a></li><li><a href=\"/ja/docs/Web/API/MediaStream_Recording_API/Recording_a_media_element\">Recording a media element</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>インターフェイス</summary><ol><li><a href=\"/ja/docs/Web/API/MediaRecorder\"><code>MediaRecorder</code></a></li><li><a href=\"/ja/docs/Web/API/MediaRecorderErrorEvent\"><code>MediaRecorderErrorEvent</code></a></li><li><a href=\"/ja/docs/Web/API/BlobEvent\"><code>BlobEvent</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong>MediaStream Recording API</strong> は、単に <em>Media Recording API</em> または <em>MediaRecorder API</em> と呼ばれることもありますが、<a href=\"/ja/docs/Web/API/Media_Capture_and_Streams_API\">Media Capture and Streams API</a> および <a href=\"/ja/docs/Web/API/WebRTC_API\">WebRTC API</a> と密接に関係しています。 MediaStream Recording API を使用すると、<a href=\"/ja/docs/Web/API/MediaStream\"><code>MediaStream</code></a> オブジェクトまたは <a href=\"/ja/docs/Web/API/HTMLMediaElement\"><code>HTMLMediaElement</code></a> オブジェクトによって生成されたデータを分析、処理、またはディスクへの保存のためにキャプチャすることができます。 また、驚くほど簡単に作業できます。</p>"}},{"type":"prose","value":{"id":"基本概念","title":"基本概念","isH3":false,"content":"<p>MediaStream Recording API は、<a href=\"/ja/docs/Web/API/MediaRecorder\"><code>MediaRecorder</code></a> という 1 つの主要なインターフェイスで構成されています。 <code>MediaRecorder</code> は、<a href=\"/ja/docs/Web/API/MediaStream\"><code>MediaStream</code></a> からデータを取得して処理のためにユーザーに配信するというすべての作業を行います。 データは、<code>MediaRecorder</code> の作成時にすでに指定した形式で、一連の <code><a href=\"/ja/docs/Web/Reference/Events/dataavailable\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">dataavailable</a></code> イベントによって配信されます。 その後、データをさらに処理するか、必要に応じてファイルに書き込むことができます。</p>"}},{"type":"prose","value":{"id":"記録プロセスの概要","title":"記録プロセスの概要","isH3":true,"content":"<p>ストリームを記録（recording、録音、録画）するプロセスは簡単です。</p>\n<ol>\n  <li>メディアデータのソースとして機能する <a href=\"/ja/docs/Web/API/MediaStream\"><code>MediaStream</code></a> または <a href=\"/ja/docs/Web/API/HTMLMediaElement\"><code>HTMLMediaElement</code></a>（<a href=\"/ja/docs/Web/HTML/Element/audio\"><code>&lt;audio&gt;</code></a> 要素または <a href=\"/ja/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a> 要素の形式）を設定します。</li>\n  <li>ソースストリームと必要なオプション（コンテナの MIME タイプやトラックの必要なビットレートなど）を指定して、<a href=\"/ja/docs/Web/API/MediaRecorder\"><code>MediaRecorder</code></a> オブジェクトを作成します。</li>\n  <li><a href=\"/ja/docs/Web/API/MediaRecorder/dataavailable_event\"><code>MediaRecorder.ondataavailable</code></a> に <code><a href=\"/ja/docs/Web/Reference/Events/dataavailable\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">dataavailable</a></code> イベントのイベントハンドラを設定します。 データが利用可能になるたびにこれが呼び出されます。</li>\n  <li>ソースメディアが再生され、動画を録画する準備が整ったら、<a href=\"/ja/docs/Web/API/MediaRecorder/start\"><code>MediaRecorder.start()</code></a> を呼び出して録画を開始します。</li>\n  <li><code><a href=\"/ja/docs/Web/Reference/Events/dataavailable\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">dataavailable</a></code> イベントハンドラは準備ができたデータがあるたびに呼ばれます。 イベントは、<code>data</code> 属性を持ち、その値はメディアデータを含む <a href=\"/ja/docs/Web/API/Blob\"><code>Blob</code></a> です。 あなたは <code>dataavailable</code> イベントを発生させることができ、それによって最新のサウンドをあなたに届けるので、それをフィルターにかけたり、それを保存したりすることができます。</li>\n  <li>ソースメディアの再生が停止すると、録画は自動的に停止します。</li>\n  <li><a href=\"/ja/docs/Web/API/MediaRecorder/stop\"><code>MediaRecorder.stop()</code></a> を呼び出すことで、いつでも録画を停止できます。</li>\n</ol>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> 記録されたメディアのスライスを含む個々の <a href=\"/ja/docs/Web/API/Blob\"><code>Blob</code></a> は、必ずしも個別に再生できるわけではありません。 再生する前にメディアを組み立て直す必要があります。</p>\n</div>\n<p>記録中に問題が発生した場合は、<code><a href=\"/ja/docs/Web/API/Element/error_event\" title=\"/ja/docs/Web/Reference/Events/error\">error</a></code> イベントが <code>MediaRecorder</code> に送られます。 <a href=\"/ja/docs/Web/API/MediaRecorder/error_event\" title=\"onerror\"><code>onerror</code></a> イベントハンドラを設定することで <code>error</code> イベントを監視できます。</p>\n<p>ここでの例では、<a href=\"/ja/docs/Web/API/MediaStream\"><code>MediaStream</code></a>のソースとして HTML Canvas を利用し、9 秒後に録画を停止します。</p>\n<pre class=\"notranslate\">var canvas = document.querySelector(\"canvas\");\n\n// Optional frames per second argument.\nvar stream = canvas.captureStream(25);\nvar recordedChunks = [];\n\nconsole.log(stream);\nvar options = { mimeType: \"video/webm; codecs=vp9\" };\nmediaRecorder = new MediaRecorder(stream, options);\n\nmediaRecorder.ondataavailable = handleDataAvailable;\nmediaRecorder.start();\n\nfunction handleDataAvailable(event) {\n  console.log(\"data-available\");\n  if (event.data.size &gt; 0) {\n    recordedChunks.push(event.data);\n    console.log(recordedChunks);\n    download();\n  } else {\n    // ...\n  }\n}\nfunction download() {\n  var blob = new Blob(recordedChunks, {\n    type: \"video/webm\"\n  });\n  var url = URL.createObjectURL(blob);\n  var a = document.createElement(\"a\");\n  document.body.appendChild(a);\n  a.style = \"display: none\";\n  a.href = url;\n  a.download = \"test.webm\";\n  a.click();\n  window.URL.revokeObjectURL(url);\n}\n\n// demo: to download after 9sec\nsetTimeout(event =&gt; {\n  console.log(\"stopping\");\n  mediaRecorder.stop();\n}, 9000);\n</pre>"}},{"type":"prose","value":{"id":"レコーダーの状態を調べて制御する","title":"レコーダーの状態を調べて制御する","isH3":true,"content":"<p><code>MediaRecorder</code> オブジェクトのプロパティを使用して記録プロセスの状態を決定したり、<a href=\"/ja/docs/Web/API/MediaRecorder/pause\" title=\"pause()\"><code>pause()</code></a> および <a href=\"/ja/docs/Web/API/MediaRecorder/resume\" title=\"resume()\"><code>resume()</code></a> メソッドを使用してソースメディアの記録を一時停止したり再開したりすることもできます。</p>\n<p>特定の MIME タイプがサポートされているかどうかを確認する必要がある場合は、それも可能です。 <a href=\"/ja/docs/Web/API/MediaRecorder/isTypeSupported\"><code>MediaRecorder.isTypeSupported()</code></a> を呼び出すだけです。</p>"}},{"type":"prose","value":{"id":"見込みがある入力ソースの調査","title":"見込みがある入力ソースの調査","isH3":true,"content":"<p>カメラやマイクの入力を記録することが目的の場合は、<code>MediaRecorder</code> の構築プロセスを開始する前に、使用可能な入力デバイスを調べてください。 そのためには、<a href=\"/ja/docs/Web/API/MediaDevices/enumerateDevices\" title=\"navigator.mediaDevices.enumerateDevices()\"><code>navigator.mediaDevices.enumerateDevices()</code></a> を呼び出して利用可能なメディアデバイスのリストを取得する必要があります。 その後、そのリストを調べて見込みがある入力ソースを特定し、さらに必要な基準に基づいてリストをフィルタリングすることもできます。</p>\n<p>このコードスニペットでは、<code>enumerateDevices()</code> を使用して使用可能な入力デバイスを調べ、音声入力デバイスであるものを見つけて、<a href=\"/ja/docs/Web/HTML/Element/option\"><code>&lt;option&gt;</code></a> 要素を作成し、それを入力ソースピッカーを表す <a href=\"/ja/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a> 要素に追加します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function\">enumerateDevices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">devices</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  devices<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">device</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> menu <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inputdevices\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">.</span>kind <span class=\"token operator\">==</span> <span class=\"token string\">\"audioinput\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> item <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"option\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      item<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> device<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">;</span>\n      item<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> device<span class=\"token punctuation\">.</span>deviceId<span class=\"token punctuation\">;</span>\n      menu<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これと同じようなコードを使用して、ユーザーが使用したいデバイスのセットを制限することができます。</p>"}},{"type":"prose","value":{"id":"詳細については","title":"詳細については","isH3":true,"content":"<p>MediaStream Recording API の使用方法の詳細については、<a href=\"/ja/docs/Web/API/MediaStream_Recording_API/Using_the_MediaStream_Recording_API\">MediaStream Recording API の使用</a>を参照してください。 これは、API を使用してオーディオクリップを記録する方法を示します。 2 番目の記事の<a href=\"/ja/docs/Web/API/MediaStream_Recording_API/Recording_a_media_element\">メディア要素の記録</a>では、<a href=\"/ja/docs/Web/HTML/Element/audio\"><code>&lt;audio&gt;</code></a> 要素または <a href=\"/ja/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a> 要素からストリームを受信してキャプチャしたストリームを使用する方法（この場合は記録してローカルディスクに保存する方法）について説明します。</p>"}},{"type":"prose","value":{"id":"参照","title":"参照","isH3":false,"content":"<dl>\n  <dt id=\"blobevent\"><a href=\"/ja/docs/Web/API/BlobEvent\"><code>BlobEvent</code></a></dt>\n  <dd>\n    <p>メディアデータのチャンク（chunk、大きな塊）が記録され終えるたびに、<code>dataavailable</code> 型の <a href=\"/ja/docs/Web/API/BlobEvent\"><code>BlobEvent</code></a> を使用して <a href=\"/ja/docs/Web/API/Blob\"><code>Blob</code></a> 形式で消費者に配信されます。</p>\n  </dd>\n  <dt id=\"mediarecorder\"><a href=\"/ja/docs/Web/API/MediaRecorder\"><code>MediaRecorder</code></a></dt>\n  <dd>\n    <p>MediaStream Recording API を実装する主要インタフェース。</p>\n  </dd>\n  <dt id=\"mediarecordererrorevent\"><a href=\"/ja/docs/Web/API/MediaRecorderErrorEvent\"><code>MediaRecorderErrorEvent</code></a></dt>\n  <dd>\n    <p>MediaStream Recording API によって投げられたエラーを表すインターフェース。 その <a href=\"/ja/docs/Web/API/MediaRecorderErrorEvent/error\" title=\"error\"><code>error</code></a> プロパティは、エラーが発生したことを示す <a href=\"/ja/docs/Web/API/DOMException\"><code>DOMException</code></a> です。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"仕様","title":"仕様","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>仕様</th>\n      <th>状態</th>\n      <th>コメント</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://w3c.github.io/mediacapture-record/#MediaRecorderAPI\" hreflang=\"en\" lang=\"en\" class=\"external\" title=\"MediaStream Recordingの仕様書\" rel=\" noopener\">MediaStream Recording</a></td>\n      <td><span class=\"spec-wd\">草案</span></td>\n      <td>初期定義</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"ブラウザー実装状況","title":"ブラウザー実装状況","isH3":false,"content":""}},{"type":"browser_compatibility","value":{"title":"MediaRecorder","id":"mediarecorder_2","isH3":true,"query":"api.MediaRecorder","dataURL":"/ja/docs/Web/API/MediaStream_Recording_API/bcd.json"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/API/MediaStream_Recording_API/Using_the_MediaStream_Recording_API\">MediaStream Recording API の使用</a></li>\n  <li><a href=\"/ja/docs/Web/API/MediaStream_Recording_API/Recording_a_media_element\">メディア要素の記録</a></li>\n  <li><a href=\"https://simpl.info/mediarecorder/\" class=\"external\" rel=\" noopener\">simpl.info の MediaStream Recording のデモ</a>、<a href=\"https://twitter.com/sw12\" class=\"external\" rel=\" noopener\">Sam Dutton</a> 著（英語）</li>\n  <li><a href=\"/ja/docs/Web/API/MediaDevices/getUserMedia\" title=\"navigator.mediaDevices.getUserMedia()\"><code>navigator.mediaDevices.getUserMedia()</code></a></li>\n  <li><a href=\"https://addpipe.com/blog/mediarecorder-api/\" class=\"external\" rel=\" noopener\">Chrome および Firefox で動作中の HTML5 の Media Recorder API</a>（英語）</li>\n  <li>Safari および Edge 用の <a href=\"https://github.com/ai/audio-recorder-polyfill\" class=\"external\" rel=\" noopener\">MediaRecorder ポリフィル</a>（英語）</li>\n  <li><a href=\"https://github.com/chrisjohndigital/TutorRoom\" class=\"external\" rel=\" noopener\">TutorRoom</a>: getUserMedia および MediaRecorder API を使用した HTML5 動画のキャプチャ/再生/ダウンロード（<a href=\"https://github.com/chrisjohndigital/TutorRoom\" class=\"external\" rel=\" noopener\">GitHub のソース</a>）（英語）</li>\n  <li><a href=\"https://codepen.io/anon/pen/gpmPzm\" class=\"external\" rel=\" noopener\">簡単な動画録画デモ</a></li>\n  <li><a href=\"https://quickblox.github.io/javascript-media-recorder/sample/\" class=\"external\" rel=\" noopener\">高度なメディアストリームレコーダーのサンプル</a>（英語）</li>\n  <li><a href=\"https://github.com/chrisjohndigital/OpenLang\" class=\"external\" rel=\" noopener\">OpenLang</a>: MediaDevices と MediaStream Recording API を動画の録画に使用する HTML5 動画言語ラボウェブアプリ（<a href=\"https://github.com/chrisjohndigital/OpenLang\" class=\"external\" rel=\" noopener\">GitHub のソース</a>）（英語）</li>\n  <li><a href=\"https://addpipe.com/blog/safari-technology-preview-73-adds-limited-mediastream-recorder-api-support/\" class=\"external\" rel=\" noopener\">Safari 技術プレビュー 73 で MediaStream Recorder API が利用可能に</a>（英語）</li>\n</ul>"}}],"toc":[{"text":"基本概念","id":"基本概念"},{"text":"参照","id":"参照"},{"text":"仕様","id":"仕様"},{"text":"ブラウザー実装状況","id":"ブラウザー実装状況"},{"text":"関連情報","id":"関連情報"}],"summary":"MediaStream Recording API は、単に Media Recording API または MediaRecorder API と呼ばれることもありますが、Media Capture and Streams API および WebRTC API と密接に関係しています。 MediaStream Recording API を使用すると、MediaStream オブジェクトまたは HTMLMediaElement オブジェクトによって生成されたデータを分析、処理、またはディスクへの保存のためにキャプチャすることができます。 また、驚くほど簡単に作業できます。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"MediaStream Recording API","locale":"en-US","native":"English (US)"},{"title":"MediaStream Recording API","locale":"ru","native":"Русский"},{"title":"MediaStream Recording API","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/mediastream_recording_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/mediastream_recording_api/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/MediaStream_Recording_API","title":"MediaStream Recording API"}],"pageTitle":"MediaStream Recording API - Web API | MDN","noIndexing":false}}