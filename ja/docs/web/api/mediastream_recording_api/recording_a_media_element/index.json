{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"メディア要素の記録","mdn_url":"/ja/docs/Web/API/MediaStream_Recording_API/Recording_a_media_element","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/MediaStream_Recording_API\">MediaStream Recording API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>ガイド</summary><ol><li><a href=\"/ja/docs/Web/API/MediaStream_Recording_API/Using_the_MediaStream_Recording_API\">Using the MediaStream Recording API</a></li><li><a href=\"/ja/docs/Web/API/MediaStream_Recording_API/Recording_a_media_element\">Recording a media element</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>インターフェイス</summary><ol><li><a href=\"/ja/docs/Web/API/MediaRecorder\"><code>MediaRecorder</code></a></li><li><a href=\"/ja/docs/Web/API/MediaRecorderErrorEvent\"><code>MediaRecorderErrorEvent</code></a></li><li><a href=\"/ja/docs/Web/API/BlobEvent\"><code>BlobEvent</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>MediaStream Recording API の使用の記事では、 <a href=\"/ja/docs/Web/API/MediaDevices/getUserMedia\" title=\"navigator.mediaDevices.getUserMedia()\"><code>navigator.mediaDevices.getUserMedia()</code></a> から返されるように、<a href=\"/ja/docs/Web/API/MediaRecorder\"><code>MediaRecorder</code></a> インターフェイスを使用してハードウェアデバイスによって生成された <a href=\"/ja/docs/Web/API/MediaStream\"><code>MediaStream</code></a> をキャプチャする方法について説明しましたが、記録する <code>MediaStream</code> のソースとして HTML メディア要素（<a href=\"/ja/docs/Web/HTML/Element/audio\"><code>&lt;audio&gt;</code></a> または <a href=\"/ja/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a>）も使用できます。 この記事では、それを実現する例を見ていきます。</p>"}},{"type":"prose","value":{"id":"メディア要素の録画の例","title":"メディア要素の録画の例","isH3":false,"content":""}},{"type":"prose","value":{"id":"html","title":"HTML","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: html hidden notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>Click the \"Start Recording\" button to begin video recording for a few seconds. You can stop\n   recording by clicking the \"Stop Recording\" button. The \"Download\"\n   button will download the received data (although it's in a raw, unwrapped form\n   that isn't very useful).\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>まずは HTML の要点を見てみましょう。 これ以上のものはありませんが、アプリのコア操作の一部ではなく、単なる情報提供です。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>startButton<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    Start Recording\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>Preview<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>preview<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>160<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>120<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">autoplay</span> <span class=\"token attr-name\">muted</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>2 つの欄で主要なインターフェースを提示します。 左欄には、Start（開始）ボタンと動画プレビューを表示する <a href=\"/ja/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a> 要素があります。 これは、ユーザーのカメラが見ている動画です。 <a href=\"/ja/docs/Web/HTML/Element/video#attr-autoplay\"><code>autoplay</code></a> 属性は、カメラからストリームが到着したらすぐに表示するために使用し、<a href=\"/ja/docs/Web/HTML/Element/video#attr-muted\"><code>muted</code></a> 属性は、ユーザーのマイクからの音声をスピーカーに出力しないように使用していることに注意してください。 出力すると醜いフィードバックループ（ハウリング）を引き起こします。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stopButton<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    Stop Recording\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>Recording<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>recording<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>160<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>120<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">controls</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>downloadButton<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    Download\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>右欄には、Stop（停止）ボタンと録画された動画の再生に使用する <code>&lt;video&gt;</code> 要素があります。 再生パネルには <code>autoplay</code> を設定せずに（メディアが到着しても再生が開始されない）、<a href=\"/ja/docs/Web/HTML/Element/video#attr-controls\"><code>controls</code></a> を設定して、再生や一時停止などのユーザーコントロールを表示するように指示しています。</p>\n<p>再生要素の下には、録画した動画をダウンロードするためのボタンがあります。</p>\n<div class=\"code-example\"><pre class=\"brush: html hidden notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bottom<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pre</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>log<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pre</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: css hidden notranslate\"><code><span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font</span><span class=\"token punctuation\">:</span> 14px <span class=\"token string\">\"Open Sans\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Arial\"</span><span class=\"token punctuation\">,</span> sans-serif<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">video</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 2px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid black<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.button</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> pointer<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 160px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid black<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 16px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-top</span><span class=\"token punctuation\">:</span> 2px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-bottom</span><span class=\"token punctuation\">:</span> 4px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> darkgreen<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-decoration</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">h2</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 4px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.left</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">margin-right</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 160px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.right</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 160px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.bottom</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">clear</span><span class=\"token punctuation\">:</span> both<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-top</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>それでは、JavaScript コードを見てみましょう。 結局のところ、これがアクションの大部分が起こるところです！</p>"}},{"type":"prose","value":{"id":"グローバル変数の設定","title":"グローバル変数の設定","isH3":true,"content":"<p>必要なグローバル変数をいくつか設定することから始めます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> preview <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"preview\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> recording <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recording\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> startButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"startButton\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> stopButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stopButton\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> downloadButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"downloadButton\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> logElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> recordingTimeMS <span class=\"token operator\">=</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これらのほとんどは、私たちが取り組む必要がある要素への参照です。 最後の <code>recordingTimeMS</code> は 5000 ミリ秒（5 秒）に設定されています。 これは、録画する動画の長さを指定します。</p>"}},{"type":"prose","value":{"id":"ユーティリティ関数","title":"ユーティリティ関数","isH3":true,"content":"<p>次に、後で使用するユーティリティ関数をいくつか作成します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  logElement<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>msg<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>log()</code> 関数は、ユーザーと情報を共有できるように、テキスト文字列を <a href=\"/ja/docs/Web/HTML/Element/div\"><code>&lt;div&gt;</code></a> に出力するために使用します。 それほどきれいではありませんが、この仕事は私たちの目的のために行われます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">delayInMS</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> delayInMS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>wait()</code> 関数は、指定したミリ秒数が経過すると解決する新しい <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> を返します。 タイムアウトハンドラ関数として promise の解決ハンドラを指定して、<a href=\"/ja/docs/Web/API/setTimeout\"><code>window.setTimeout()</code></a> を呼び出す<a href=\"/ja/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">アロー関数</a>を使用して動作します。 これにより、タイムアウトを使用するときに promise 構文を使用できます。 これは、後で説明するように、promise を連鎖させるときに非常に便利です。</p>"}},{"type":"prose","value":{"id":"メディア録画の開始","title":"メディア録画の開始","isH3":true,"content":"<p><code>startRecording()</code> 関数は録画プロセスの開始を処理します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">startRecording</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">stream<span class=\"token punctuation\">,</span> lengthInMS</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> recorder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MediaRecorder</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  recorder<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">ondataavailable</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  recorder<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>recorder<span class=\"token punctuation\">.</span>state<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> for </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>lengthInMS <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> seconds…</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> stopped <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    recorder<span class=\"token punctuation\">.</span>onstop <span class=\"token operator\">=</span> resolve<span class=\"token punctuation\">;</span>\n    recorder<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> recorded <span class=\"token operator\">=</span> <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>lengthInMS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>recorder<span class=\"token punctuation\">.</span>state <span class=\"token operator\">===</span> <span class=\"token string\">\"recording\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        recorder<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    stopped<span class=\"token punctuation\">,</span>\n    recorded\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>startRecording()</code> は 2 つの入力パラメータを取ります。 録画元の <a href=\"/ja/docs/Web/API/MediaStream\"><code>MediaStream</code></a> と記録するミリ秒単位の長さです。 指定されたミリ秒数以下のメディアを常に録画しますが、その時間に達する前にメディアが停止すると、<a href=\"/ja/docs/Web/API/MediaRecorder\"><code>MediaRecorder</code></a> も自動的に録画を停止します。</p>\n<dl>\n  <dt id=\"2_行目\">2 行目</dt>\n  <dd>\n    <p>入力ストリーム（<code>stream</code>）の録画を処理する <code>MediaRecorder</code> を作成します。</p>\n  </dd>\n  <dt id=\"3_行目\">3 行目</dt>\n  <dd>\n    <p>空の配列 <code>data</code> を作成します。 これは、<a href=\"/ja/docs/Web/API/MediaRecorder/dataavailable_event\" title=\"ondataavailable\"><code>ondataavailable</code></a> イベントハンドラに提供されたメディアデータの <a href=\"/ja/docs/Web/API/Blob\"><code>Blob</code></a> を保持するために使用します。</p>\n  </dd>\n  <dt id=\"5_行目\">5 行目</dt>\n  <dd>\n    <p><code><a href=\"/ja/docs/Web/Reference/Events/dataavailable\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">dataavailable</a></code> イベントのハンドラを設定します。 受信したイベントの <code>data</code> プロパティはメディアデータを含む <a href=\"/ja/docs/Web/API/Blob\"><code>Blob</code></a> です。 イベントハンドラは単純に <code>Blob</code> を <code>data</code> 配列にプッシュ（末尾に追加）します。</p>\n  </dd>\n  <dt id=\"6〜7_行目\">6〜7 行目</dt>\n  <dd>\n    <p><a href=\"/ja/docs/Web/API/MediaRecorder/start\" title=\"recorder.start()\"><code>recorder.start()</code></a> を呼び出して録画処理を開始し、<code>recorder</code> の更新された状態と録画される秒数とともにメッセージをログに出力します。</p>\n  </dd>\n  <dt id=\"9〜12_行目\">9〜12 行目</dt>\n  <dd>\n    <p><code>stopped</code> という名前の新しい <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> を作成します。 これは、<code>MediaRecorder</code> の <a href=\"/ja/docs/Web/API/MediaRecorder/stop_event\" title=\"onstop\"><code>onstop</code></a> イベントハンドラが呼び出されると解決し、<code>MediaRecorder</code> の <a href=\"/ja/docs/Web/API/MediaRecorder/error_event\" title=\"onerror\"><code>onerror</code></a> イベントハンドラが呼び出されると拒否します。 拒否ハンドラは、発生したエラーの名前を入力として受け取ります。</p>\n  </dd>\n  <dt id=\"14〜16_行目\">14〜16 行目</dt>\n  <dd>\n    <p><code>recorded</code> という名前の新しい <code>Promise</code> を作成します。 これは、指定されたミリ秒数が経過すると解決します。 解決すると、<code>MediaRecorder</code> が録画中の場合は停止します。</p>\n  </dd>\n  <dt id=\"18〜22_行目\">18〜22 行目</dt>\n  <dd>\n    <p>これらの行は、2 つの <code>Promise</code>（<code>stopped</code> と <code>recorded</code>）の両方が解決したときに満たされる新しい <code>Promise</code> を作成します。 それが解決すると、配列データは <code>startRecording(</code>) によってその呼び出し元に返されます。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"入力ストリームの停止","title":"入力ストリームの停止","isH3":true,"content":"<p><code>stop()</code> 関数は単に入力メディアを停止します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">stream</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  stream<span class=\"token punctuation\">.</span><span class=\"token function\">getTracks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">track</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> track<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これは <a href=\"/ja/docs/Web/API/MediaStream/getTracks\"><code>MediaStream.getTracks()</code></a> を呼び出し、<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"><code>forEach()</code></a> を使用してストリーム内の各トラックの <a href=\"/ja/docs/Web/API/MediaStreamTrack/stop\"><code>MediaStreamTrack.stop()</code></a> を呼び出すことによって機能します。</p>"}},{"type":"prose","value":{"id":"入力ストリームを取得してレコーダーを設定","title":"入力ストリームを取得してレコーダーを設定","isH3":true,"content":"<p>それでは、この例で最も複雑なコードを見てみましょう。 開始ボタンをクリックしたときのイベントハンドラです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>startButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">stream</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    preview<span class=\"token punctuation\">.</span>srcObject <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">;</span>\n    downloadButton<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">;</span>\n    preview<span class=\"token punctuation\">.</span>captureStream <span class=\"token operator\">=</span> preview<span class=\"token punctuation\">.</span>captureStream <span class=\"token operator\">||</span> preview<span class=\"token punctuation\">.</span>mozCaptureStream<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> preview<span class=\"token punctuation\">.</span>onplaying <span class=\"token operator\">=</span> resolve<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">startRecording</span><span class=\"token punctuation\">(</span>preview<span class=\"token punctuation\">.</span><span class=\"token function\">captureStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> recordingTimeMS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">recordedChunks</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> recordedBlob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span>recordedChunks<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"video/webm\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    recording<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>recordedBlob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    downloadButton<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> recording<span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">;</span>\n    downloadButton<span class=\"token punctuation\">.</span>download <span class=\"token operator\">=</span> <span class=\"token string\">\"RecordedVideo.webm\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Successfully recorded </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>recordedBlob<span class=\"token punctuation\">.</span>size<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> bytes of </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>recordedBlob<span class=\"token punctuation\">.</span>type<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> media.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">\"NotFoundError\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Camera or microphone not found. Can't record.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code><a href=\"/ja/docs/Web/API/Element/click_event\" title=\"/ja/docs/Web/Reference/Events/click\">click</a></code> イベントが発生すると、次のようになります。</p>\n<dl>\n  <dt id=\"2〜4_行目\">2〜4 行目</dt>\n  <dd>\n    <p><a href=\"/ja/docs/Web/API/MediaDevices/getUserMedia\" title=\"navigator.mediaDevices.getUserMedia()\"><code>navigator.mediaDevices.getUserMedia()</code></a> は、動画トラックと音声トラックの両方を持つ新しい <a href=\"/ja/docs/Web/API/MediaStream\"><code>MediaStream</code></a> を要求するために呼び出します。 これが録画するストリームです。</p>\n  </dd>\n  <dt id=\"5〜9_行目\">5〜9 行目</dt>\n  <dd>\n    <p><code>getUserMedia()</code> から返された Promise が解決すると、プレビューの <a href=\"/ja/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a> 要素の <a href=\"/ja/docs/Web/API/HTMLMediaElement/srcObject\" title=\"srcObject\"><code>srcObject</code></a> プロパティを入力ストリームに設定し、ユーザーのカメラでキャプチャしている動画をプレビューボックスに表示します。 <code>&lt;video&gt;</code> 要素はミュートしているので、音声は再生しません。 Download（ダウンロード）ボタンのリンクも、ストリームを参照するように設定します。 次に、8 行目で、<a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>MediaRecorder.captureStream()</code></a> メソッドがなければ接頭辞が付いた <code>preview.mozCaptureStream()</code> を呼び出すように <code>preview.captureStream()</code> を設定して、コードが Firefox で機能するようにします。 その後、プレビュー動画の再生開始時に解決する新しい <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> を作成して返します。</p>\n  </dd>\n  <dt id=\"10_行目\">10 行目</dt>\n  <dd>\n    <p>プレビュー動画の再生が開始されると、録画するメディアがあることがわかります。 したがって、先ほど作成した <a href=\"#starting_media_recording\"><code>startRecording()</code></a> 関数を呼び出し、プレビュー動画ストリーム（録画するソースメディアとして）と、<code>recordingTimeMS</code>（録画するメディアのミリ秒数として）を渡します。 前述のように、<code>startRecording()</code> は、録画が完了すると、解決ハンドラが呼び出される <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>（録画されたメディアデータのチャンクを含む <a href=\"/ja/docs/Web/API/Blob\"><code>Blob</code></a> オブジェクトの配列を入力として受け取る）を返します。</p>\n  </dd>\n  <dt id=\"11〜15_行目\">11〜15 行目</dt>\n  <dd>\n    <p>録画プロセスの解決ハンドラは、ローカルに <code>recordedChunks</code> として知られるメディアデータの <code>Blob</code> の配列を入力として受け取ります。 最初にすることは、<a href=\"/ja/docs/Web/API/Blob/Blob\" title=\"Blob()\"><code>Blob()</code></a> コンストラクターがオブジェクトの配列を 1 つのオブジェクトに連結するという事実を利用して、チャンクを MIME タイプが <code>\"video/webm\"</code> の単一の <a href=\"/ja/docs/Web/API/Blob\"><code>Blob</code></a> にマージすることです。 次に、<a href=\"/ja/docs/Web/API/URL/createObjectURL\"><code>URL.createObjectURL()</code></a> を使用して <code>Blob</code> を参照する URL を作成します。 これは、ダウンロードされた動画再生要素の <a href=\"/ja/docs/Web/HTML/Element/video#attr-src\"><code>src</code></a> 属性の値（<code>Blob</code> から動画を再生できるようにする）とダウンロードボタンのリンクのターゲットになります。</p>\n    <p>その後、ダウンロードボタンの <code>download</code> 属性が設定されます。 <a href=\"/ja/docs/Web/HTML/Element/a#attr-download\"><code>download</code></a> 属性は <code>Boolean</code> にすることができますが、ダウンロードするファイルの名前として使用する文字列に設定することもできます。 そのため、ダウンロードリンクの <code>download</code> 属性を <code>\"RecordedVideo.webm\"</code> に設定することで、ボタンをクリックすると内容が録画された動画である <code>\"RecordedVideo.webm\"</code> という名前のファイルをダウンロードするようにブラウザーに指示します。</p>\n  </dd>\n  <dt id=\"17〜18_行目\">17〜18 行目</dt>\n  <dd>\n    <p>記録されたメディアのサイズと種類は、2 つの動画とダウンロードボタンの下のログ領域に出力されます。</p>\n  </dd>\n  <dt id=\"20_行目\">20 行目</dt>\n  <dd>\n    <p>すべての <code>Promise</code> の <code>catch()</code> は、<code>log()</code> 関数を呼び出すことによってエラーをロギング領域に出力します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"停止ボタンの取り扱い","title":"停止ボタンの取り扱い","isH3":true,"content":"<p>最後のコードでは、<a href=\"/ja/docs/Web/API/EventTarget/addEventListener\" title=\"addEventListener()\"><code>addEventListener()</code></a> を使用して停止ボタンの <code><a href=\"/ja/docs/Web/API/Element/click_event\" title=\"/ja/docs/Web/Reference/Events/click\">click</a></code> イベントのハンドラを追加します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>stopButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>preview<span class=\"token punctuation\">.</span>srcObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これは先ほど説明した <a href=\"#stopping_the_input_stream\"><code>stop()</code></a> 関数を呼び出すだけです。</p>"}},{"type":"prose","value":{"id":"結果","title":"結果","isH3":true,"content":"<p>残りの HTML と上に示されていない CSS をすべてまとめると、次のようになり、動作します。</p><iframe class=\"sample-code-frame\" title=\"メディア要素の録画の例\" id=\"frame_example_of_recording_a_media_element\" width=\"600\" height=\"440\" src=\"https://yari-demos.prod.mdn.mozit.cloud/ja/docs/Web/API/MediaStream_Recording_API/Recording_a_media_element/_sample_.example_of_recording_a_media_element.html\" allow=\"camera;microphone\" loading=\"lazy\"></iframe>\n<p>API がどのように使用されているかの説明には重要ではないため上で隠されている部分も含めて、<a href=\"https://yari-demos.prod.mdn.mozit.cloud/ja/docs/Web/API/MediaStream_Recording_API/Recording_a_media_element/_sample_.Example.html\" class=\"external\" rel=\" noopener\">すべてのコードを見る</a>ことができます。</p>"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/API/MediaStream_Recording_API\">MediaStream Recording API</a></li>\n  <li><a href=\"/ja/docs/Web/API/MediaStream_Recording_API/Using_the_MediaStream_Recording_API\">Media​Stream Recording API の使用</a></li>\n  <li><a href=\"/ja/docs/Web/API/Media_Capture_and_Streams_API\">Media Capture and Streams API</a></li>\n</ul>"}}],"toc":[{"text":"メディア要素の録画の例","id":"メディア要素の録画の例"},{"text":"関連情報","id":"関連情報"}],"summary":"MediaStream Recording API の使用の記事では、 navigator.mediaDevices.getUserMedia() から返されるように、MediaRecorder インターフェイスを使用してハードウェアデバイスによって生成された MediaStream をキャプチャする方法について説明しましたが、記録する MediaStream のソースとして HTML メディア要素（<audio> または <video>）も使用できます。 この記事では、それを実現する例を見ていきます。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Recording a media element","locale":"en-US","native":"English (US)"},{"title":"Запись медиа элемента","locale":"ru","native":"Русский"}],"source":{"folder":"ja/web/api/mediastream_recording_api/recording_a_media_element","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/mediastream_recording_api/recording_a_media_element/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/MediaStream_Recording_API","title":"MediaStream Recording API"},{"uri":"/ja/docs/Web/API/MediaStream_Recording_API/Recording_a_media_element","title":"メディア要素の記録"}],"pageTitle":"メディア要素の記録 - Web API | MDN","noIndexing":false}}