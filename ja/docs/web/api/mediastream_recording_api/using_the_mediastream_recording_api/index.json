{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Media​Stream Recording API の使用","mdn_url":"/ja/docs/Web/API/MediaStream_Recording_API/Using_the_MediaStream_Recording_API","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/MediaStream_Recording_API\">MediaStream Recording API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>ガイド</summary><ol><li><a href=\"/ja/docs/Web/API/MediaStream_Recording_API/Using_the_MediaStream_Recording_API\">Using the MediaStream Recording API</a></li><li><a href=\"/ja/docs/Web/API/MediaStream_Recording_API/Recording_a_media_element\">Recording a media element</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>インターフェイス</summary><ol><li><a href=\"/ja/docs/Web/API/MediaRecorder\"><code>MediaRecorder</code></a></li><li><a href=\"/ja/docs/Web/API/MediaRecorderErrorEvent\"><code>MediaRecorderErrorEvent</code></a></li><li><a href=\"/ja/docs/Web/API/BlobEvent\"><code>BlobEvent</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/ja/docs/Web/API/MediaStream_Recording_API\">MediaStream Recording API</a> を使用すると、音声や動画のストリームを簡単に記録できます。 <a href=\"/ja/docs/Web/API/MediaDevices/getUserMedia\" title=\"navigator.mediaDevices.getUserMedia()\"><code>navigator.mediaDevices.getUserMedia()</code></a> と一緒に使用すると、ユーザーの入力デバイスから記録して結果を即座にウェブアプリで使用するための簡単な方法が提供されます。 音声と動画の両方を別々にまたは一緒に記録することができます。 この記事では、この API を提供する <code>MediaRecorder</code> インターフェースの使用方法に関する基本的なガイドを提供することを目的としています。</p>"}},{"type":"prose","value":{"id":"サンプルアプリ_ウェブディクタフォン","title":"サンプルアプリ: ウェブディクタフォン","isH3":false,"content":"<p>\n  <img src=\"/en-US/docs/Web/API/MediaStream_Recording_API/Using_the_MediaStream_Recording_API/web-dictaphone.png\" alt=\"ウェブディクタフォンのサンプルアプリの画像 - 正弦波のサウンドの視覚化、次に録音と停止ボタン、そして再生可能な録音済みトラックの音声ジュークボックス。\" width=\"320\" height=\"480\" loading=\"lazy\">\n</p>\n<p>MediaRecorder API の基本的な使い方を説明するために、ウェブベースのディクタフォン（dictaphone）を作りました。 それは音声の断片を録音してからそれらを再生することを可能にします。 Web Audio API を使用して、デバイスのサウンド入力を視覚化することもできます。 この記事では録音と再生の機能に集中します。</p>\n<p>この<a href=\"https://mdn.github.io/web-dictaphone/\" class=\"external\" rel=\" noopener\">デモがライブで実行</a>されているのを見ることも、GitHub で<a href=\"https://github.com/mdn/web-dictaphone\" class=\"external\" rel=\" noopener\">ソースコードを入手</a>することもできます。</p>"}},{"type":"prose","value":{"id":"css_のおいしいところ","title":"CSS のおいしいところ","isH3":false,"content":"<p>このアプリでは HTML は非常に単純なので、ここでは説明しません。 言及する価値がある、もう少し興味深い CSS がいくつかありますので、それらについて以下で説明します。 CSS に興味がなく、JavaScript に直行したいのであれば、<a href=\"#basic_app_setup\">基本的なアプリの設定</a>のセクションに進んでください。</p>"}},{"type":"prose","value":{"id":"calc_で、デバイスの高さに関係なく、インタフェースをビューポートに制限","title":"calc() で、デバイスの高さに関係なく、インタフェースをビューポートに制限","isH3":true,"content":"<p><a href=\"/ja/docs/Web/CSS/calc\"><code>calc</code></a> 関数は、CSS でまとめられた便利で小さなユーティリティ機能の 1 つで、最初はあまり見かけませんが、すぐに「うわー、以前これがなかったのはなぜ？ CSS2 のレイアウトが厄介だったのはなぜ？」とあなたに考えさせ始めます。 それはプロセスで異なる単位を混合して、CSS 単位の計算値を決定するための計算をすることを可能にします。</p>\n<p>例えば、ウェブディクタフォンには、3 つの主要な UI 領域が縦に積み重ねられています。 最初の 2 つ（ヘッダーとコントロール）の高さを固定したいと思いました。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">header</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 70px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.main-controls</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">padding-bottom</span><span class=\"token punctuation\">:</span> 0.7rem<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 170px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ただし、デバイスの高さに関係なく、3 番目の領域（再生できる録音済みサンプルが含まれている領域）に、残っているスペースをすべて確保したいと考えました。 フレックスボックスがここでの答えかもしれませんが、それはそのような単純なレイアウトのために少しやり過ぎです。 代わりに、次のように 3 番目のコンテナーの高さを親の高さの 100% から、他の 2 つの高さとパディングを引いたものに等しくすることで、問題を解決しました。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">.sound-clips</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> inset 0 3px 4px <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0.7<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0.1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>100% - 240px - 0.7rem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> scroll<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> <code>calc()</code> は、最近のブラウザーでも、Internet Explorer 9 に戻っても十分にサポートされています。</p>\n</div>"}},{"type":"prose","value":{"id":"表示非表示のチェックボックスのハック","title":"表示/非表示のチェックボックスのハック","isH3":true,"content":"<p>これはすでにかなりよく文書化されていますが、チェックボックスのハックについて言及したいと思います。 これは、チェックボックスの <a href=\"/ja/docs/Web/HTML/Element/label\"><code>&lt;label&gt;</code></a> をクリックしてオン/オフを切り替えることができるという事実を乱用します。 ウェブディクタフォンでは、これにより情報画面が表示され、この画面は、右上隅にある疑問符アイコンをクリックすると表示/非表示になります。 まず最初に、次のように <code>&lt;label&gt;</code> を好きなようにスタイルして、他の要素の上に常に収まるように十分な <code>z-index</code> があり、したがってフォーカス可能/クリック可能になるようにします。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">label</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'NotoColorEmoji'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 3rem<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 2px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> 3px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 5<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> pointer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>次に、次のように実際のチェックボックスを非表示にします。 これは、UI を混乱させたくないためです。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">input[type=checkbox]</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n   <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> -100px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>次に、（<a href=\"/ja/docs/Web/HTML/Element/aside\"><code>&lt;aside&gt;</code></a> 要素で囲まれた）情報画面に希望のスタイルを設定し、レイアウトフローに表示されずメイン UI に影響しないように固定の位置を指定し、デフォルトで収まって欲しい位置に変換し、スムーズな表示/非表示のための遷移を与えます。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">aside</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> fixed<span class=\"token punctuation\">;</span>\n   <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n   <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n   <span class=\"token property\">text-shadow</span><span class=\"token punctuation\">:</span> 1px 1px 1px black<span class=\"token punctuation\">;</span>\n   <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n   <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n   <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span>100%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> 0.6s all<span class=\"token punctuation\">;</span>\n   <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #999<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">linear-gradient</span><span class=\"token punctuation\">(</span>to top right<span class=\"token punctuation\">,</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0.5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>最後に、チェックボックスをオンにすると（ラベルをクリックまたはフォーカスすると）、隣接する <code>&lt;aside&gt;</code> 要素の水平方向の平行移動値が変更され、スムーズにビューに遷移するという規則を書きます。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">input[type=checkbox]:checked ~ aside</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"基本的なアプリの設定","title":"基本的なアプリの設定","isH3":false,"content":"<p>キャプチャしたいメディアストリームを入手するには、<code>getUserMedia()</code> を使用します。 その後、MediaRecorder API を使用してストリームを記録し、記録された各スニペットを生成された <a href=\"/ja/docs/Web/HTML/Element/audio\"><code>&lt;audio&gt;</code></a> 要素のソースに出力して、再生できるようにします。</p>\n<p>次のように録音ボタンと停止ボタン、および生成された音声プレーヤーを含む <a href=\"/ja/docs/Web/HTML/Element/article\"><code>&lt;article&gt;</code></a> の変数をいくつか宣言します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> record <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.record'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> stop <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.stop'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> soundClips <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.sound-clips'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>このセクションの最後に、次のように基本的な <code>getUserMedia</code> 構造体を設定します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>navigator<span class=\"token punctuation\">.</span>mediaDevices <span class=\"token operator\">&amp;&amp;</span> navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span>getUserMedia<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'getUserMedia supported.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function\">getUserMedia</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token comment\">// constraints - only audio needed for this app</span>\n      <span class=\"token punctuation\">{</span>\n         <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token comment\">// Success callback</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">stream</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token comment\">// Error callback</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The following getUserMedia error occured: '</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'getUserMedia not supported on your browser!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>他のことを実行する前に、すべてが <code>getUserMedia</code> がサポートされているかどうかをチェックするテストに包まれています。 次に、<code>getUserMedia()</code> を呼び出し、その内部で次のように定義します。</p>\n<ul>\n  <li><strong>constraints</strong>: 音声だけがディクタフォンにキャプチャされます。</li>\n  <li><strong>Success callback</strong>: このコードは、<code>getUserMedia</code> の呼び出しが正常に完了した後に実行されます。</li>\n  <li><strong>Error callback</strong>: 何らかの理由で <code>getUserMedia</code> の呼び出しが失敗した場合、このコードが実行されます。</li>\n</ul>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> 以下のコードはすべて <code>getUserMedia</code> の Success callback 内にあります。</p>\n</div>"}},{"type":"prose","value":{"id":"メディアストリームのキャプチャ","title":"メディアストリームのキャプチャ","isH3":false,"content":"<p><code>getUserMedia</code> がメディアストリームを正常に作成したら、<code>MediaRecorder()</code> コンストラクタを使用して新しい Media Recorder インスタンスを作成し、それに直接ストリーム（<code>stream</code>）を渡します。 これが MediaRecorder API を使用するためのエントリポイントです。 これで、ストリームをブラウザーのデフォルトのエンコード形式で <a href=\"/ja/docs/Web/API/Blob\"><code>Blob</code></a> にキャプチャする準備ができました。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> mediaRecorder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MediaRecorder</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><a href=\"/ja/docs/Web/API/MediaRecorder\"><code>MediaRecorder</code></a> インターフェイスには、メディアストリームの記録を制御できる一連のメソッドがあります。 ウェブディクタフォンでは、その内の 2 つを利用して、いくつかのイベントをリスンしています。 まず、録音ボタンを押すと <a href=\"/ja/docs/Web/API/MediaRecorder/start\"><code>MediaRecorder.start()</code></a> を使用してストリームの録音を開始します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>record<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  mediaRecorder<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mediaRecorder<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recorder started\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  record<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>background <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">;</span>\n  record<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">\"black\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>MediaRecorder</code> が録音しているとき、<a href=\"/ja/docs/Web/API/MediaRecorder/state\"><code>MediaRecorder.state</code></a> プロパティは <code>\"recording\"</code> の値を返します。</p>\n<p>録音が進むにつれて、音声データを収集する必要があります。 <a href=\"/ja/docs/Web/API/MediaRecorder/dataavailable_event\"><code>mediaRecorder.ondataavailable</code></a> を使用してこれを行うためのイベントハンドラーを登録します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> chunks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nmediaRecorder<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">ondataavailable</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  chunks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> ブラウザーは必要に応じて <code>dataavailable</code> イベントを発生させますが、この間隔を制御するために <code>start()</code> メソッドを呼び出すときにタイムスライス（例えば <code>start(10000)</code> ）を含めることも、必要なときに <a href=\"/ja/docs/Web/API/MediaRecorder/requestData\"><code>MediaRecorder.requestData()</code></a> を呼び出してイベントを発生させることもできます。</p>\n</div>\n<p>最後に、停止ボタンが押されたときに <a href=\"/ja/docs/Web/API/MediaRecorder/stop\"><code>MediaRecorder.stop()</code></a> メソッドを使用して録音を停止し、アプリの他の場所で使用できるように <a href=\"/ja/docs/Web/API/Blob\"><code>Blob</code></a> を完成させます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>stop<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  mediaRecorder<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mediaRecorder<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recorder stopped\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  record<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>background <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  record<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>メディアストリームが終了すると（例えば、曲のトラックを入手してトラックが終了した場合や、ユーザーがマイクの共有を停止した場合）、録音も自然に停止することがあることに注意してください。</p>"}},{"type":"prose","value":{"id":"blob_を入手して使う","title":"blob を入手して使う","isH3":false,"content":"<p>録音が停止すると、<code>state</code> プロパティは <code>\"inactive\"</code> の値を返し、<code>stop</code> イベントが発生します。 <a href=\"/ja/docs/Web/API/MediaRecorder/stop_event\"><code>mediaRecorder.onstop</code></a> を使用してこれのイベントハンドラーを登録し、受け取ったすべてのチャンク（<code>chunks</code>）から <code>blob</code> を確定します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>mediaRecorder<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onstop</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recorder stopped\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> clipName <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Enter a name for your sound clip'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> clipContainer <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'article'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> clipLabel <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> audio <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'audio'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> deleteButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  clipContainer<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clip'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  audio<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'controls'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  deleteButton<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"Delete\"</span><span class=\"token punctuation\">;</span>\n  clipLabel<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> clipName<span class=\"token punctuation\">;</span>\n\n  clipContainer<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>audio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  clipContainer<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>clipLabel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  clipContainer<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>deleteButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  soundClips<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>clipContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span>chunks<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'type'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'audio/ogg; codecs=opus'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  chunks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> audioURL <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  audio<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> audioURL<span class=\"token punctuation\">;</span>\n\n  deleteButton<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> evtTgt <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">;</span>\n    evtTgt<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>evtTgt<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>上記のコードを見て、何が起こっているのかを見てみましょう。</p>\n<p>まず、ユーザーにクリップに名前を付けるように求めるプロンプトを表示します。</p>\n<p>次に、次のような HTML 構造を作成し、それをクリップコンテナーに挿入します。 これは <a href=\"/ja/docs/Web/HTML/Element/article\"><code>&lt;article&gt;</code></a> 要素です。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>article</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clip<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>audio</span> <span class=\"token attr-name\">controls</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>audio</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>your clip name<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">&gt;</span></span>Delete<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>article</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>その後、録音した音声チャンクから結合された <a href=\"/ja/docs/Web/API/Blob\"><code>Blob</code></a> を作成し、それを指すオブジェクト URL を <code>window.URL.createObjectURL(blob)</code> を使用して作成します。 次に、<a href=\"/ja/docs/Web/HTML/Element/audio\"><code>&lt;audio&gt;</code></a> 要素の <a href=\"/ja/docs/Web/HTML/Element/audio#attr-src\"><code>src</code></a> 属性の値をオブジェクト URL に設定して、音声プレーヤーの再生ボタンが押されたときに <code>Blob</code> を再生するようにします。</p>\n<p>最後に、削除ボタンに <code>onclick</code> ハンドラーを設定して、クリップの HTML 構造全体を削除する関数にします。</p>"}},{"type":"prose","value":{"id":"仕様書","title":"仕様書","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>仕様書</th>\n      <th>状態</th>\n      <th>備考</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://w3c.github.io/mediacapture-record/#MediaRecorderAPI\" hreflang=\"en\" lang=\"en\" class=\"external\" title=\"MediaStream Recordingの仕様書\" rel=\" noopener\">MediaStream Recording</a></td>\n      <td><span class=\"spec-wd\">草案</span></td>\n      <td>初回定義</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"ブラウザーの互換性","title":"ブラウザーの互換性","isH3":false,"content":""}},{"type":"browser_compatibility","value":{"title":"MediaRecorder","id":"mediarecorder","isH3":true,"query":"api.MediaRecorder","dataURL":"/ja/docs/Web/API/MediaStream_Recording_API/Using_the_MediaStream_Recording_API/bcd.json"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/API/MediaStream_Recording_API\">MediaRecorder API</a> のランディングページ</li>\n  <li><code><a href=\"/ja/docs/Web/API/Navigator/getUserMedia\"><code>Navigator.getUserMedia()</code></a></code></li>\n  <li><a href=\"https://addpipe.com/blog/media-recorder-api-is-now-supported-by-65-of-all-desktop-internet-users/\" class=\"external\" rel=\" noopener\">MediaRecorder API がウェブサイトのユーザーの 65% でサポートされるようになりました</a>（英語）</li>\n</ul>"}}],"toc":[{"text":"サンプルアプリ: ウェブディクタフォン","id":"サンプルアプリ_ウェブディクタフォン"},{"text":"CSS のおいしいところ","id":"css_のおいしいところ"},{"text":"基本的なアプリの設定","id":"基本的なアプリの設定"},{"text":"メディアストリームのキャプチャ","id":"メディアストリームのキャプチャ"},{"text":"blob を入手して使う","id":"blob_を入手して使う"},{"text":"仕様書","id":"仕様書"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"MediaStream Recording API を使用すると、音声や動画のストリームを簡単に記録できます。 navigator.mediaDevices.getUserMedia() と一緒に使用すると、ユーザーの入力デバイスから記録して結果を即座にウェブアプリで使用するための簡単な方法が提供されます。 音声と動画の両方を別々にまたは一緒に記録することができます。 この記事では、この API を提供する MediaRecorder インターフェースの使用方法に関する基本的なガイドを提供することを目的としています。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using the MediaStream Recording API","locale":"en-US","native":"English (US)"},{"title":"Использование интерфейса записи медиапотока","locale":"ru","native":"Русский"},{"title":"使用 MediaStream 的录制 API","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/mediastream_recording_api/using_the_mediastream_recording_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/mediastream_recording_api/using_the_mediastream_recording_api/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/MediaStream_Recording_API","title":"MediaStream Recording API"},{"uri":"/ja/docs/Web/API/MediaStream_Recording_API/Using_the_MediaStream_Recording_API","title":"Media​Stream Recording API の使用"}],"pageTitle":"Media​Stream Recording API の使用 - Web API | MDN","noIndexing":false}}