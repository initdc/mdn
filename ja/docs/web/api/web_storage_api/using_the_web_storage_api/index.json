{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Web Storage API の使用","mdn_url":"/ja/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/Web_Storage_API\">Web Storage API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>ガイド</summary><ol><li><a href=\"/ja/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API\">Using the Web Storage API</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>インターフェイス</summary><ol><li><a href=\"/ja/docs/Web/API/Storage\"><code>Storage</code></a></li><li><a href=\"/ja/docs/Web/API/StorageEvent\"><code>StorageEvent</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>プロパティ</summary><ol><li><a href=\"/ja/docs/Web/API/Window/sessionStorage\"><code>Window.sessionStorage</code></a></li><li><a href=\"/ja/docs/Web/API/Window/localStorage\"><code>Window.localStorage</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>イベント</summary><ol><li><a href=\"/ja/docs/Web/API/Window/storage_event\"><code>Window</code>: <code>storage</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Web Storage API は、ブラウザーがキーと値のペアを安全に保存できる仕組みを提供します。</p>\n<p>この記事は、この技術を利用する方法のチュートリアルを提供します。</p>"}},{"type":"prose","value":{"id":"基本概念","title":"基本概念","isH3":false,"content":"<p>Storage オブジェクトはシンプルなキーと値の組み合わせを保存しており、オブジェクトに似ていますが、これらは何度ページを読み込んでも存在し続けます。キーは常に文字列です (なお、オブジェクトと同様、整数のキーは自動的に文字列に変換されます)。これらの値にアクセスするにはオブジェクトと同様に、または <a href=\"/ja/docs/Web/API/Storage/getItem\"><code>Storage.getItem()</code></a> と <a href=\"/ja/docs/Web/API/Storage/setItem\"><code>Storage.setItem()</code></a> メソッドを使用して行います。以下の 3 行はすべて、(同じ) colorSetting という項目を設定します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>localStorage<span class=\"token punctuation\">.</span>colorSetting <span class=\"token operator\">=</span> <span class=\"token string\">'#a4509b'</span><span class=\"token punctuation\">;</span>\nlocalStorage<span class=\"token punctuation\">[</span><span class=\"token string\">'colorSetting'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'#a4509b'</span><span class=\"token punctuation\">;</span>\nlocalStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'colorSetting'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'#a4509b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> Web Storage API (<code>setItem</code>, <code>getItem</code>, <code>removeItem</code>, <code>key</code>, <code>length</code>) の使用が推奨されており、これは単純なオブジェクトをキーバリューストアとして使うという<a href=\"https://www.2ality.com/2012/01/objects-as-maps.html\" class=\"external\" rel=\" noopener\">落とし穴</a>を防ぐためです。</p>\n</div>\n<p>Web Storage には、以下の 2 種類の仕組みがあります。</p>\n<ul>\n  <li>セッションストレージ (<strong><code>sessionStorage</code></strong>) は、各オリジン毎に分割された保存領域を管理し、これはページセッションの間 (ブラウザーを開いている間、ページの再読み込みや復元を含む) に使用可能です。</li>\n  <li>ローカルストレージ (<strong><code>localStorage</code></strong>) も同様ですが、こちらはブラウザーを閉じたり再び開いたりしても持続します。</li>\n</ul>\n<p>これらの仕組みは <a href=\"/ja/docs/Web/API/Window/sessionStorage\"><code>Window.sessionStorage</code></a> および <a href=\"/ja/docs/Web/API/Window/localStorage\"><code>Window.localStorage</code></a> プロパティ (正確には、対応しているブラウザーは <code>Window</code> オブジェクトが <code>WindowLocalStorage</code> および <code>WindowSessionStorage</code> オブジェクトを実装しており、これらに <code>localStorage</code> および <code>sessionStorage</code> プロパティがあります) を通して使用でき、いずれかのプロパティを使用すると <a href=\"/ja/docs/Web/API/Storage\"><code>Storage</code></a> オブジェクトのインスタンスを生成して、データアイテムの保存、取り出し、削除ができます。同じ生成元に対して <code>sessionStorage</code> と <code>localStorage</code> は、別の Storage オブジェクトを使用します。これらは別々に制御されて機能します。</p>\n<p>よって例えば、始めに文書上で <code>localStorage</code> を呼び出すと <a href=\"/ja/docs/Web/API/Storage\"><code>Storage</code></a> が返ります。その後に文書上で <code>sessionStorage</code> を呼び出すと、別の <a href=\"/ja/docs/Web/API/Storage\"><code>Storage</code></a> オブジェクトが返ります。どちらも同じ方法で操作することができますが、操作は個別に行われます。</p>"}},{"type":"prose","value":{"id":"localstorage_の機能検出","title":"localStorage の機能検出","isH3":false,"content":"<p>ローカルストレージを利用できるようにするには、まず対応済みであり、現在のブラウザーセッションで利用可能であるかを確かめるべきです。</p>"}},{"type":"prose","value":{"id":"利用可能かどうかのを検証","title":"利用可能かどうかのを検証","isH3":true,"content":"<p>ローカルストレージに対応しているブラウザーは、 window オブジェクトに localStorage という名称のプロパティを持っています。しかしさまざまな理由で、プロパティが存在すると主張するだけで例外が発生する可能性があります。ローカルストレージが存在していたとしても、さまざまなブラウザーがローカルストレージを無効化する設定を設けていますので、ローカルストレージが利用できる保証はありません。よってブラウザーがローカルストレージに<em>対応していても</em>、ページ上のスクリプトでは<em>利用できる状態ではない</em>場合があります。</p>\n<p>例えば Safari はプライベートブラウジングモードでは、容量が 0 で空のローカルストレージを提供しますので、事実上使用できません。逆に、正規の QuotaExceededError が発生した場合、これはストレージ領域を使い切ったことを意味しますが、ストレージは実際に<em>利用可能</em>です。機能検出時には、これらのシナリオを考慮に入れるべきです。</p>\n<p>ローカルストレージに対応済みかつ使用可能であるかどうかを検出する関数を、以下に示します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">storageAvailable</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> storage<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        storage <span class=\"token operator\">=</span> window<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">'__storage_test__'</span><span class=\"token punctuation\">;</span>\n        storage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        storage<span class=\"token punctuation\">.</span><span class=\"token function\">removeItem</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> e <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">DOMException</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token comment\">// everything except Firefox</span>\n            e<span class=\"token punctuation\">.</span>code <span class=\"token operator\">===</span> <span class=\"token number\">22</span> <span class=\"token operator\">||</span>\n            <span class=\"token comment\">// Firefox</span>\n            e<span class=\"token punctuation\">.</span>code <span class=\"token operator\">===</span> <span class=\"token number\">1014</span> <span class=\"token operator\">||</span>\n            <span class=\"token comment\">// test name field too, because code might not be present</span>\n            <span class=\"token comment\">// everything except Firefox</span>\n            e<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'QuotaExceededError'</span> <span class=\"token operator\">||</span>\n            <span class=\"token comment\">// Firefox</span>\n            e<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'NS_ERROR_DOM_QUOTA_REACHED'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n            <span class=\"token comment\">// acknowledge QuotaExceededError only if there's something already stored</span>\n            <span class=\"token punctuation\">(</span>storage <span class=\"token operator\">&amp;&amp;</span> storage<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>また、この関数の使い方は以下のとおりです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">storageAvailable</span><span class=\"token punctuation\">(</span><span class=\"token string\">'localStorage'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// やったあ! ローカルストレージをちゃんと利用できます</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 残念、ローカルストレージは利用できません</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>storageAvailable('sessionStorage')</code> を呼び出すと、代わりにセッションストレージを確認できます。</p>\n<p><a href=\"https://gist.github.com/paulirish/5558557\" class=\"external\" rel=\" noopener\">ローカルストレージの機能を検出する方法の略歴</a>をご覧ください。</p>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":"<p>ウェブストレージの典型的な使用法を示すため、想像力豊かに <strong>Web Storage Demo</strong> と名づけたシンプルな例を作成しました。<a href=\"https://mdn.github.io/dom-examples/web-storage/\" class=\"external\" rel=\" noopener\">ランディングページ</a> には、色、フォント、装飾画像をカスタマイズするためのコントロールがあります:</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API/landing.png\" alt=\"\" width=\"700\" height=\"482\" loading=\"lazy\">別の選択肢を選ぶと、即座にページが更新されます。さらに、選択内容を <code>localStorage</code> に保存しますので、別のページに移動した後に再びこのページを読み込むと、選択内容が維持されています。\n</p>\n<p>また、 <a href=\"https://mdn.github.io/dom-examples/web-storage/event.html\" class=\"external\" rel=\" noopener\">event output ページ</a>も提供します。このページを別のタブで開くと、ランディングページで選択肢を変更したときに <a href=\"/ja/docs/Web/API/StorageEvent\"><code>StorageEvent</code></a> が発生するのに応じて、更新されたストレージの情報が出力されるのを確認できます。</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API/event-output.png\" alt=\"\" width=\"700\" height=\"482\" loading=\"lazy\">\n</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> 上記のリンクから実際のページを参照することができます。また、<a href=\"https://github.com/mdn/dom-examples/tree/master/web-storage\" class=\"external\" rel=\" noopener\">ソースコードも確認できます</a>。</p>\n</div>"}},{"type":"prose","value":{"id":"ストレージが存在しているかを確認する","title":"ストレージが存在しているかを確認する","isH3":true,"content":"<p>始めに <a href=\"https://github.com/mdn/dom-examples/blob/master/web-storage/main.js\" class=\"external\" rel=\" noopener\">main.js</a> で、ストレージオブジェクトがすでに存在しているか (すなわち、過去にページへアクセスしていたか) を確認します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bgcolor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">populateStorage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setStyles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><a href=\"/ja/docs/Web/API/Storage/getItem\"><code>Storage.getItem()</code></a> メソッドは、ストレージからデータアイテムを取得するために使用します。この例では、 <code>bgcolor</code> アイテムが存在するかを確認しています。アイテムが存在しなければ、既存のカスタマイズ値をストレージへ追加するために <code>populateStorage()</code> を実行します。すでに値が存在する場合は、ページのスタイルを保存済みの値で更新するために <code>setStyles()</code> を実行します。</p>\n<p><strong>メモ</strong>: <a href=\"/ja/docs/Web/API/Storage/length\"><code>Storage.length</code></a> を使用して、ストレージオブジェクトが空であるかを確認することもできます。</p>"}},{"type":"prose","value":{"id":"ストレージから値を取得する","title":"ストレージから値を取得する","isH3":true,"content":"<p>前述のとおり <a href=\"/ja/docs/Web/API/Storage/getItem\"><code>Storage.getItem()</code></a> を使用して、ストレージから値を取り出すことができます。これはデータアイテムのキーが引数であり、またデータの値を返します。例えば以下のようにします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">setStyles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> currentColor <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bgcolor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> currentFont <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'font'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> currentImage <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bgcolor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> currentColor<span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'font'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> currentFont<span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> currentImage<span class=\"token punctuation\">;</span>\n\n  htmlElem<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">'#'</span> <span class=\"token operator\">+</span> currentColor<span class=\"token punctuation\">;</span>\n  pElem<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>fontFamily <span class=\"token operator\">=</span> currentFont<span class=\"token punctuation\">;</span>\n  imgElem<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> currentImage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>この例で、最初の 3 行はローカルストレージから値を取得しています。次に、フォーム要素で表示する値をこれらの値に更新して、ページを再読み込みしたときに同期するようにします。最後に、ページのスタイルや装飾画像を更新して、再読み込み時にカスタマイズ設定を復元します。</p>"}},{"type":"prose","value":{"id":"ストレージに値を設定する","title":"ストレージに値を設定する","isH3":true,"content":"<p><a href=\"/ja/docs/Web/API/Storage/setItem\"><code>Storage.setItem()</code></a> は新たなデータアイテムを作成するため、および (データアイテムがすでに存在していれば) 既存の値を更新するために使用します。これは引数が 2 つあり、ひとつは作成または変更するデータアイテムのキー、もうひとつはデータアイテムに保存する値です。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">populateStorage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bgcolor'</span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bgcolor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'font'</span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'font'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image'</span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">setStyles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>populateStorage()</code> 関数は、背景色、フォント、画像のパスの 3 つのアイテムをローカルストレージに保存します。そして、ページのスタイルなどを更新するために <code>setStyles()</code> 関数を実行します。</p>\n<p>また、それぞれのフォーム要素に <code>onchange</code> ハンドラーを含めておき、フォームの値が変更されるたびにデータやスタイルを更新します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>bgcolorForm<span class=\"token punctuation\">.</span>onchange <span class=\"token operator\">=</span> populateStorage<span class=\"token punctuation\">;</span>\nfontForm<span class=\"token punctuation\">.</span>onchange <span class=\"token operator\">=</span> populateStorage<span class=\"token punctuation\">;</span>\nimageForm<span class=\"token punctuation\">.</span>onchange <span class=\"token operator\">=</span> populateStorage<span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"storageevent_を使用してストレージの変更に反応する","title":"StorageEvent を使用してストレージの変更に反応する","isH3":true,"content":"<p><a href=\"/ja/docs/Web/API/StorageEvent\"><code>StorageEvent</code></a> は、<a href=\"/ja/docs/Web/API/Storage\"><code>Storage</code></a> オブジェクトが変更されるたびに発生します (sessionStorage の変更では発生しません) 。これは、変更を行ったページ上では効果がないでしょう。実際は、ストレージを使用するドメイン上の別のページで、ストレージの変更に同期するための手段です。別のドメイン上のページは、前述のストレージオブジェクトにアクセスできません。</p>\n<p>イベントページ (<a href=\"https://github.com/mdn/dom-examples/blob/master/web-storage/event.js\" class=\"external\" rel=\" noopener\">events.js</a> をご覧ください) には、以下の JavaScript しかありません。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'storage'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-key'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-old'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>oldValue<span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-new'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>newValue<span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-url'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-storage'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>storageArea<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ここでは <code>window</code> オブジェクトに、現在のオリジンに関連付けられた <a href=\"/ja/docs/Web/API/Storage\"><code>Storage</code></a> オブジェクトが変更されたときに発生するイベントリスナを追加しています。上記の例でわかるとおり、このイベントに関連付けられたイベントオブジェクトは、変更されたデータのキー、変更前の古い値、変更後の新しい値、ストレージを変更した文書の URL、ストレージオブジェクト自体 (その中身を見えるように文字化しています) といった、役に立つ情報を含んでいるいくつものプロパティを持っています。</p>"}},{"type":"prose","value":{"id":"データレコードの削除","title":"データレコードの削除","isH3":true,"content":"<p>ウェブストレージには、データを削除するためのシンプルなメソッドが 2 つあります。このデモでは使用していませんが、プロジェクトへとても簡単に追加できます:</p>\n<ul>\n  <li><a href=\"/ja/docs/Web/API/Storage/removeItem\"><code>Storage.removeItem()</code></a> は引数が 1 つあり、削除したいデータアイテムのキーです。これは、当該ドメインのストレージオブジェクトからデータアイテムを削除します。</li>\n  <li><a href=\"/ja/docs/Web/API/Storage/clear\"><code>Storage.clear()</code></a> は引数がなく、当該ドメインのストレージオブジェクト全体を空にします。</li>\n</ul>"}},{"type":"prose","value":{"id":"仕様書","title":"仕様書","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>仕様書</th>\n      <th>状態</th>\n      <th>備考</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://html.spec.whatwg.org/multipage/webstorage.html#webstorage\" hreflang=\"en\" lang=\"en\" class=\"external\" title=\"HTML Living Standardの仕様書\" rel=\" noopener\">HTML Living Standard</a></td>\n      <td><span class=\"spec-living\">現行の標準</span></td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"ブラウザーの互換性","title":"ブラウザーの互換性","isH3":false,"content":""}},{"type":"browser_compatibility","value":{"title":"Window.localStorage","id":"window.localstorage","isH3":true,"query":"api.Window.localStorage","dataURL":"/ja/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API/bcd.json"}},{"type":"browser_compatibility","value":{"title":"Window.sessionStorage","id":"window.sessionstorage","isH3":true,"query":"api.Window.sessionStorage","dataURL":"/ja/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API/bcd-2.json"}},{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>すべてのブラウザーで、ローカルストレージおよびセッションストレージが受け入れる容量は異なります。<a href=\"http://dev-test.nemikor.com/web-storage/support-test/\" class=\"external\" rel=\" noopener\">さまざまなブラウザーのストレージ容量を報告しているページ</a>があります。</p>"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/API/Web_Storage_API\">Web Storage API のランディングページ</a></li>\n</ul>"}}],"toc":[{"text":"基本概念","id":"基本概念"},{"text":"localStorage の機能検出","id":"localstorage_の機能検出"},{"text":"例","id":"例"},{"text":"仕様書","id":"仕様書"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"Web Storage API は、ブラウザーがキーと値のペアを安全に保存できる仕組みを提供します。","popularity":0.0004,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using the Web Storage API","locale":"en-US","native":"English (US)"},{"title":"Usando la API de almacenamiento web","locale":"es","native":"Español"},{"title":"Utiliser l'API Web Storage","locale":"fr","native":"Français"},{"title":"Web Storage API 사용하기","locale":"ko","native":"한국어"},{"title":"Usando a API Web Storage","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Использование Web Storage API","locale":"ru","native":"Русский"},{"title":"使用 Web Storage API","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/web_storage_api/using_the_web_storage_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/web_storage_api/using_the_web_storage_api/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/Web_Storage_API","title":"Web Storage API"},{"uri":"/ja/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API","title":"Web Storage API の使用"}],"pageTitle":"Web Storage API の使用 - Web API | MDN","noIndexing":false}}