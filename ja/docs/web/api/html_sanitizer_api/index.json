{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"HTML Sanitizer API","mdn_url":"/ja/docs/Web/API/HTML_Sanitizer_API","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/HTML_Sanitizer_API\">HTML Sanitizer API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>インターフェイス</summary><ol><li><a href=\"/ja/docs/Web/API/Sanitizer\"><code>Sanitizer</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard experimental\" id=\"sect1\"><p><strong>Experimental:</strong> <strong>これは<a href=\"/ja/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">実験的な機能</a>です。</strong><br>本番で使用する前に<a href=\"#browser_compatibility\">ブラウザー互換性一覧表</a>をチェックしてください。</p></div><div class=\"notecard secure\" id=\"sect2\"><p><strong>安全なコンテキスト用:</strong> この機能は一部またはすべての<a href=\"#browser_compatibility\">対応しているブラウザー</a>において、<a href=\"/ja/docs/Web/Security/Secure_Contexts\">安全なコンテキスト</a> (HTTPS) でのみ利用できます。</p></div>\n<p><strong>HTML Sanitizer API</strong> は、信頼できない HTML 文字列と <a href=\"/ja/docs/Web/API/Document\"><code>Document</code></a> または <a href=\"/ja/docs/Web/API/DocumentFragment\"><code>DocumentFragment</code></a> オブジェクトを受け取り、それらを安全にドキュメントの DOM に挿入するためのサニタイズ処理を行うことができます。</p>"}},{"type":"prose","value":{"id":"概念と使用方法","title":"概念と使用方法","isH3":false,"content":"<p>例えば、クライアントサイドのテンプレート化ソリューションの一部として、またはユーザー生成コンテンツをレンダリングするために、あるいは他のサイトからのフレームにデータを含めるときに、ウェブアプリケーションはしばしばクライアントサイドで信頼できない HTML を扱う必要があります。Sanitizer API を使用すると、このような潜在的に信頼できない HTML を安全な方法でレンダリングすることができます。</p>\n<p>API にアクセスするには、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Sanitizer/Sanitizer\"><code>Sanitizer()</code> <small>(en-US)</small></a> コンストラクターを使用して <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Sanitizer\"><code>Sanitizer</code> <small>(en-US)</small></a> インスタンスを作成し、設定することになります。設定オプションのパラメーターで、許可する要素や許可しない要素、属性を指定し、カスタム要素やコメントを有効にすることができます。</p>\n<p>最も一般的なユースケースである XSS の防止は、デフォルトの設定によって処理されます。カスタム設定による <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Sanitizer/Sanitizer\"><code>Sanitizer()</code> <small>(en-US)</small></a> の作成は、アプリケーション固有のユースケースを追加で扱う場合にのみ必要です。</p>\n<p>API には、データをサニタイズするための主要な 3 つのメソッドがあります。</p>\n<ol>\n  <li><a href=\"/ja/docs/Web/API/Element/setHTML\"><code>Element.setHTML()</code></a> は、HTML の文字列を解析してサニタイズし、現在の要素の子として DOM に即座にそれを挿入します。これは本質的に <a href=\"/ja/docs/Web/API/Element/innerHTML\"><code>Element.innerHTML</code></a> の「安全」バージョンであり、信頼できないデータを挿入する際には innerHTML の代わりに使用されるべきものです。</li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Sanitizer/sanitizeFor\"><code>Sanitizer.sanitizeFor()</code> <small>(en-US)</small></a> は、後で DOM に挿入するために HTML の文字列を解析しサニタイズします。これは文字列のターゲット要素が、常に更新の準備ができている／利用可能である、とは限らない場合に使用されるかもしれません。</li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Sanitizer/sanitize\"><code>Sanitizer.sanitize()</code> <small>(en-US)</small></a> は、<a href=\"/ja/docs/Web/API/Document\"><code>Document</code></a> または <a href=\"/ja/docs/Web/API/DocumentFragment\"><code>DocumentFragment</code></a> 内にあるデータをサニタイズします。これは、例えば、フレーム内の <a href=\"/ja/docs/Web/API/Document\"><code>Document</code></a> インスタンスをサニタイズするために使用されるかもしれません。</li>\n</ol>"}},{"type":"prose","value":{"id":"文字列のパースとサニタイズ","title":"文字列のパースとサニタイズ","isH3":true,"content":"<p>HTML の文字列をパースした結果は、それが挿入されるコンテキスト／要素に依存します。</p>\n<p>例えば、<a href=\"/ja/docs/Web/HTML/Element/td\"><code>&lt;td&gt;</code></a> 要素を含む HTML 文字列は、<a href=\"/ja/docs/Web/HTML/Element/table\"><code>&lt;table&gt;</code></a> 要素の下に挿入すれば有効ですが、<a href=\"/ja/docs/Web/HTML/Element/div\"><code>&lt;div&gt;</code></a> 要素の中に挿入すると落とされます。同様に、<a href=\"/ja/docs/Web/HTML/Element/em\"><code>&lt;em&gt;</code></a> 要素は <a href=\"/ja/docs/Web/HTML/Element/div\"><code>&lt;div&gt;</code></a> の中では有効なノードですが、<a href=\"/ja/docs/Web/HTML/Element/textarea\"><code>&lt;textarea&gt;</code></a> の中で使われるとタグはエスケープされます。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token comment\">&lt;!-- \"&lt;em&gt;bla&lt;/em&gt;\" inserted into &lt;div&gt; --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>em</span><span class=\"token punctuation\">&gt;</span></span>bla<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>em</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token comment\">&lt;!-- \"&lt;em&gt;bla&lt;/em&gt;\" inserted into &lt;textarea&gt; --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>textarea</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token entity named-entity\" title=\"<\">&amp;lt;</span>em<span class=\"token entity named-entity\" title=\">\">&amp;gt;</span>bla<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>textarea</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>したがって、パーサーの実行時にターゲットとなる要素が分かっている必要があり、結果のサブツリーは DOM 内の同じ種類の要素に挿入されなければならず、さもなければ結果は不正確なものとなります。</p>\n<p>このため、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Sanitizer/sanitizeFor\"><code>Sanitizer.sanitizeFor()</code> <small>(en-US)</small></a> を使用する場合、開発者は最終的なターゲット要素のタグをパラメーターとして指定する必要があり、メソッドは解析された文字列を子として一致する HTML 要素を返します（例えば、ターゲットタグ <code>\"div\"</code> は <a href=\"/ja/docs/Web/API/HTMLDivElement\"><code>HTMLDivElement</code></a> のインスタンスであるオブジェクトを返します）。この戻り値の型により、DOM に挿入されるオブジェクトのコンテキストをユーザーは常に持つことが保証されます。</p>\n<p><a href=\"/ja/docs/Web/API/Element/setHTML\"><code>Element.setHTML()</code></a> は特定の要素で呼び出されるため、この配慮は重要ではなく、コンテキストも暗黙的なものになります。</p>\n<p>パーサーは、入力文字列に対して正規化処理を行うこともあります。その結果、HTML が妥当でありサニタイザーメソッドが何もしない場合でも、サニタイズされた出力がサニタイズされていない入力と正確に一致しないことがあります。これは、両方のメソッドに適用されます。</p>"}},{"type":"prose","value":{"id":"インターフェイス","title":"インターフェイス","isH3":false,"content":"<dl>\n  <dt id=\"sanitizer_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Sanitizer\"><code>Sanitizer</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>サニタイザーの構成を定義する機能、後で DOM に挿入するための信頼できない HTML 文字列をサニタイズする機能、および <a href=\"/ja/docs/Web/API/Document\"><code>Document</code></a> と <a href=\"/ja/docs/Web/API/DocumentFragment\"><code>DocumentFragment</code></a> オブジェクトをサニタイズする機能を提供します。</p>\n  </dd>\n  <dt id=\"element.sethtml\"><a href=\"/ja/docs/Web/API/Element/setHTML\" title=\"Element.setHTML()\"><code>Element.setHTML()</code></a></dt>\n  <dd>\n    <p>HTML の文字列をノードのサブツリーにパースし、<code>Sanitizer</code> オブジェクトを使用してそれをサニタイズし、そして現在の要素の子としてそれを設定します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":"<p>以下の例では、デフォルトのサニタイザーを使用して Sanitizer API を使用する方法を示します（執筆時点では、設定操作はまだサポートされていません）。</p>"}},{"type":"prose","value":{"id":"文字列を即座にサニタイズする","title":"文字列を即座にサニタイズする","isH3":true,"content":"<p>以下のコードは、<a href=\"/ja/docs/Web/API/Element/setHTML\" title=\"Element.setHTML()\"><code>Element.setHTML()</code></a> を使って HTML の文字列をサニタイズし、それを <code>target</code> という id を持つ <code>Element</code> に挿入する方法を示しています。</p>\n<p><code>script</code> 要素はデフォルトのサニタイザーで許可されていないため alert は削除されます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> unsanitized_string <span class=\"token operator\">=</span> <span class=\"token string\">\"abc &lt;script&gt;alert(1)&lt;\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"/script&gt; def\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// サニタイズされていない文字列</span>\n\n<span class=\"token keyword\">const</span> sanitizer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sanitizer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// デフォルトのサニタイザー</span>\n\n<span class=\"token comment\">// id が \"target\" の要素を取得し、サニタイズした文字列をセットする</span>\n<span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"target\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntarget<span class=\"token punctuation\">.</span><span class=\"token function\">setHTML</span><span class=\"token punctuation\">(</span>unsanitized_string<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> sanitizer <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"abc  def\"</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"遅延使用のための文字列のサニタイズ","title":"遅延使用のための文字列のサニタイズ","isH3":true,"content":"<p>以下の例では <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Sanitizer/sanitizeFor\"><code>Sanitizer.sanitizeFor()</code> <small>(en-US)</small></a> メソッドを使用して同じサニタイズ処理を行い、後で返された要素を <code>&lt;div&gt;</code> 要素に挿入することを意図しています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> unsanitized_string <span class=\"token operator\">=</span> <span class=\"token string\">\"abc &lt;script&gt;alert(1)&lt;\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"/script&gt; def\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// サニタイズされていない文字列</span>\n<span class=\"token keyword\">const</span> sanitizer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sanitizer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// デフォルトのサニタイザー</span>\n\n<span class=\"token comment\">// 文字列をサニタイズする</span>\n<span class=\"token keyword\">const</span> sanitizedDiv <span class=\"token operator\">=</span> sanitizer<span class=\"token punctuation\">.</span><span class=\"token function\">sanitizeFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">,</span> unsanitized_string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 返された要素の型を調べて、サニタイズされた HTML を文字列で表示する</span>\n<span class=\"token comment\">//We can verify the returned element type, and view sanitized HTML in string form:</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sanitizedDiv <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">HTMLDivElement</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sanitizedDiv<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// \"abc  def\"</span>\n\n<span class=\"token comment\">// その後に処理をする…</span>\n\n<span class=\"token comment\">// 更新する要素を取得する。要素は sanitizeFor() のコンテキストと一致するように div である必要がある</span>\n<span class=\"token comment\">// サニタイズされた要素の子となるように内容をセットする</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div#target\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceChildren</span><span class=\"token punctuation\">(</span>sanitizedDiv<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> どうしても文字列から文字列への操作を行いたい場合は <code>innerHTML</code> を使って文字列を抽出することができますが、文字列が適用されるときに正しいコンテキストを使用することを忘れてはいけません。</p>\n  <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> unsanitized_string <span class=\"token operator\">=</span> <span class=\"token string\">\"abc &lt;script&gt;alert(1)&lt;\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"/script&gt; def\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> sanitizedString <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sanitizer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sanitizeFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">,</span> unsanitized_string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">;</span>\n</code></pre></div>\n</div>"}},{"type":"prose","value":{"id":"フレームのサニタイズ","title":"フレームのサニタイズ","isH3":true,"content":"<p>id が <code>userFrame</code> である <a href=\"/ja/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code></a> からのデータをサニタイズします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> sanitizer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sanitizer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// デフォルトのサニタイザー</span>\n\n<span class=\"token comment\">// frame の要素とその document オブジェクトを取得する</span>\n<span class=\"token keyword\">const</span> frame_element <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userFrame\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> unsanitized_frame_tree <span class=\"token operator\">=</span> frame_element<span class=\"token punctuation\">.</span>contentWindow<span class=\"token punctuation\">.</span>document<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ドキュメントツリーをサニタイズし、frame を更新する</span>\n<span class=\"token keyword\">const</span> sanitized_frame_tree <span class=\"token operator\">=</span> sanitizer<span class=\"token punctuation\">.</span><span class=\"token function\">sanitize</span><span class=\"token punctuation\">(</span>unsanitized_frame_tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nframe_element<span class=\"token punctuation\">.</span><span class=\"token function\">replaceChildren</span><span class=\"token punctuation\">(</span>sanitized_frame_tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"仕様書","id":"仕様書","isH3":false,"specifications":[{"bcdSpecificationURL":"https://wicg.github.io/sanitizer-api/#sanitizer-api","title":"HTML Sanitizer API"}],"query":"api.Sanitizer"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"query":"api.Sanitizer","dataURL":"/ja/docs/Web/API/HTML_Sanitizer_API/bcd.json"}}],"toc":[{"text":"概念と使用方法","id":"概念と使用方法"},{"text":"インターフェイス","id":"インターフェイス"},{"text":"例","id":"例"},{"text":"仕様書","id":"仕様書"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"}],"summary":"HTML Sanitizer API は、信頼できない HTML 文字列と Document または DocumentFragment オブジェクトを受け取り、それらを安全にドキュメントの DOM に挿入するためのサニタイズ処理を行うことができます。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"HTML Sanitizer API","locale":"en-US","native":"English (US)"}],"source":{"folder":"ja/web/api/html_sanitizer_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/html_sanitizer_api/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/HTML_Sanitizer_API","title":"HTML Sanitizer API"}],"pageTitle":"HTML Sanitizer API - Web API | MDN","noIndexing":false}}