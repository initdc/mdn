{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"CSS 型付きオブジェクトモデルの使用","mdn_url":"/ja/docs/Web/API/CSS_Typed_OM_API/Guide","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/CSS_Typed_OM_API\">CSS Typed OM API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>ガイド</summary><ol><li><a href=\"/ja/docs/Web/API/CSS_Typed_OM_API/Guide\">Using the CSS Typed Object Model</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>インターフェイス</summary><ol><li><a href=\"/ja/docs/Web/API/CSSKeywordValue\"><code>CSSKeywordValue</code></a></li><li><a href=\"/ja/docs/Web/API/CSSImageValue\"><code>CSSImageValue</code></a></li><li><a href=\"/ja/docs/Web/API/CSSNumericValue\"><code>CSSNumericValue</code></a></li><li><a href=\"/ja/docs/Web/API/CSSStyleValue\"><code>CSSStyleValue</code></a></li><li><a href=\"/ja/docs/Web/API/CSSPositionValue\"><code>CSSPositionValue</code></a></li><li><a href=\"/ja/docs/Web/API/CSSTransformValue\"><code>CSSTransformValue</code></a></li><li><a href=\"/ja/docs/Web/API/CSSUnparsedValue\"><code>CSSUnparsedValue</code></a></li><li><a href=\"/ja/docs/Web/API/StylePropertyMap\"><code>StylePropertyMap</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><a href=\"/ja/docs/Web/API/CSS_Typed_OM_API\">CSS 型付きオブジェクトモデル API</a></strong> は、 CSS 値を型付き JavaScript オブジェクトとして公開し、その値を効率的に操作できるようにします。</p>\n<p><a href=\"/ja/docs/Web/API/CSS_Object_Model\">CSS オブジェクトモデル</a>の値の文字列を、意味のある型付けされた JavaScript 表現に変換して戻す（<a href=\"/ja/docs/Web/API/HTMLElement\"><code>HTMLElement</code></a> 経由）には大きなパフォーマンスのオーバーヘッドが発生する可能性があります。</p>\n<p>CSS 型付きオブジェクトモデルは、（CSSOM の文字列操作ではなく）オブジェクト機能を提供し、型へのアクセス、メソッド、 CSS 値のオブジェクトモデルを提供することで、 CSS 操作をより論理的かつ効率的にします。</p>\n<p>この記事では、その主要な機能のすべてを紹介します。</p>"}},{"type":"prose","value":{"id":"computedstylemap","title":"computedStyleMap()","isH3":false,"content":"<p>CSS 型付きオブジェクトモデル APIを使用すると、要素に影響を与えるすべての CSS プロパティと値（カスタムプロパティを含む）にアクセスすることができます。最初の例を作成し、 <a href=\"/ja/docs/Web/API/Element/computedStyleMap\" title=\"computedStyleMap()\"><code>computedStyleMap()</code></a> を探索し、これがどのように機能するかを見てみましょう。</p>"}},{"type":"prose","value":{"id":"すべてのプロパティと値の取得","title":"すべてのプロパティと値の取得","isH3":true,"content":"<h4 id=\"html\">HTML</h4>\n<p>まず、いくつかの HTML を用意します。リンクのある段落と、すべての CSS プロパティと値のペアを追加する定義リストです。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://example.com<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Link<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dl</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>regurgitation<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dl</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<h4 id=\"javascript\">JavaScript</h4>\n<p>JavaScript を追加してスタイルのないリンクを取得し、<code>computedStyleMap()</code> を使ってリンクに影響を与えるすべての既定の CSS プロパティの値の定義リストを返します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 要素を取得する</span>\n<span class=\"token keyword\">const</span> myElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 注目する &lt;dl&gt; を取得する</span>\n<span class=\"token keyword\">const</span> stylesList <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#regurgitation'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// computedStyleMap() ですべてのスタイルの計算値を取得する</span>\n<span class=\"token keyword\">const</span> defaultComputedStyles <span class=\"token operator\">=</span> myElement<span class=\"token punctuation\">.</span><span class=\"token function\">computedStyleMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// すべてのプロパティと値のマップを繰り返し、それぞれに&lt;dt&gt;と&lt;dd&gt;を追加する。</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> defaultComputedStyles<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// プロパティ</span>\n  <span class=\"token keyword\">const</span> cssProperty <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  cssProperty<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  stylesList<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>cssProperty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 値</span>\n  <span class=\"token keyword\">const</span> cssValue <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dd'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  cssValue<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  stylesList<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>cssValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>computedStyleMap()</code> メソッドは <a href=\"/ja/docs/Web/API/StylePropertyMapReadOnly\"><code>StylePropertyMapReadOnly</code></a> オブジェクトを返し、この <a href=\"/ja/docs/Web/API/StylePropertyMapReadOnly/size\"><code>size</code></a> プロパティはマップ内にいくつプロパティを持つかを示します。スタイルマップを反復処理し、それぞれのプロパティと値に対して <a href=\"/ja/docs/Web/HTML/Element/dt\"><code>&lt;dt&gt;</code></a> と <a href=\"/ja/docs/Web/HTML/Element/dd\"><code>&lt;dd&gt;</code></a> をそれぞれ作成します。</p>\n<h4 id=\"結果\">結果</h4>\n<p><a href=\"/ja/docs/Web/API/Element/computedStyleMap#%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%83%BC%E3%81%AE%E4%BA%92%E6%8F%9B%E6%80%A7\"><code>computedStyleMap()</code> に対応しているブラウザー</a>では、全ての CSS プロパティと値のリストが表示されます。それ以外のブラウザーでは、リンクが表示されるだけです。</p><iframe class=\"sample-code-frame\" title=\"すべてのプロパティと値の取得\" id=\"frame_getting_all_the_properties_and_values\" width=\"120\" height=\"300\" src=\"https://yari-demos.prod.mdn.mozit.cloud/ja/docs/Web/API/CSS_Typed_OM_API/Guide/_sample_.getting_all_the_properties_and_values.html\" loading=\"lazy\"></iframe>\n<p>リンクの既定の CSS プロパティがいくつもあることが分かりましたか？ JavaScript の 2 行目を更新して、 <a href=\"/ja/docs/Web/HTML/Element/a\"><code>&lt;a&gt;</code></a> ではなく <a href=\"/ja/docs/Web/HTML/Element/p\"><code>&lt;p&gt;</code></a> を選択するようにしてみてください。 <a href=\"/ja/docs/Web/CSS/margin-top\"><code>margin-top</code></a> と <a href=\"/ja/docs/Web/CSS/margin-bottom\"><code>margin-bottom</code></a> の既定の計算値の違いに気が付くでしょう。</p>"}},{"type":"prose","value":{"id":".get_メソッド_カスタムプロパティ","title":".get() メソッド / カスタムプロパティ","isH3":true,"content":"<p>この例では、いくつかのプロパティと値のみを取得するように更新してみましょう。まず、このサンプルに、カスタムプロパティと継承可能なプロパティなど、いくつかの CSS を追加することから始めましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">p</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> bold<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">a</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>すべてのプロパティを取得するのではなく、関心のあるプロパティの配列を作成し、 <a href=\"/ja/docs/Web/API/StylePropertyMapReadOnly/get\"><code>StylePropertyMapReadOnly.get()</code></a> メソッドを使用してそれぞれの値を取得しています。</p>\n<div class=\"code-example\"><pre class=\"brush: html hidden notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://example.com<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Link<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dl</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>regurgitation<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dl</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 要素を取得する</span>\n<span class=\"token keyword\">const</span> myElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 注目する &lt;dl&gt; を取得する</span>\n<span class=\"token keyword\">const</span> stylesList <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#regurgitation'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// computedStyleMap() ですべてのスタイルの計算値を取得する</span>\n<span class=\"token keyword\">const</span> allComputedStyles <span class=\"token operator\">=</span> myElement<span class=\"token punctuation\">.</span><span class=\"token function\">computedStyleMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 注目するプロパティの配列</span>\n<span class=\"token keyword\">const</span> ofInterest <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'font-weight'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'border-left-color'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'color'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'--color'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 注目するプロパティを反復処理する</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> value <span class=\"token keyword\">of</span> ofInterest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// プロパティ</span>\n  <span class=\"token keyword\">const</span> cssProperty <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  cssProperty<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  stylesList<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>cssProperty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 値</span>\n  <span class=\"token keyword\">const</span> cssValue <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dd'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  cssValue<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span>allComputedStyles<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  stylesList<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>cssValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><iframe class=\"sample-code-frame\" title=\".get() メソッド / カスタムプロパティ\" id=\"frame_.get_method_custom_properties\" width=\"120\" height=\"300\" src=\"https://yari-demos.prod.mdn.mozit.cloud/ja/docs/Web/API/CSS_Typed_OM_API/Guide/_sample_..get_method_custom_properties.html\" loading=\"lazy\"></iframe>\n<p>実験のために <a href=\"/ja/docs/Web/CSS/border-left-color\"><code>border-left-color</code></a> を入れましたが、すべてのプロパティを含めた場合、すべての値が既定値の <a href=\"/ja/docs/Web/CSS/color_value\"><code>currentcolor</code></a> となり（<a href=\"/ja/docs/Web/CSS/caret-color\"><code>caret-color</code></a>, <a href=\"/ja/docs/Web/CSS/outline-color\"><code>outline-color</code></a>, <a href=\"/ja/docs/Web/CSS/text-decoration-color\"><code>text-decoration-color</code></a>, <a href=\"/ja/docs/Web/CSS/column-rule-color\"><code>column-rule-color</code></a> 等を含む）、 <code>rgb(255, 0, 0)</code> を返します。リンクは段落のスタイルから <code>font-weight: bold;</code> を継承し、<code>font-weight: 700</code> としてリストアップされています。カスタムプロパティは、私たちの <code>--color: red</code> のように、プロパティです。そのため、 <code>get()</code> でアクセスすることができます。</p>\n<p>カスタムプロパティはスタイルシートに書かれている通りの値を保持しますが、計算されたスタイルは計算値として表示されることに注意してください。 <a href=\"/ja/docs/Web/CSS/color\"><code>color</code></a> は <a href=\"/ja/docs/Web/CSS/color_value\"><code>rgb()</code></a> 値として表示され、 <a href=\"/ja/docs/Web/CSS/font-weight\"><code>font-weight</code></a> は <a href=\"/ja/docs/Web/CSS/color_value\"><code>named color</code></a> を使用しても <code>bold</code> を使用しても <code>700</code> と返されます。</p>"}},{"type":"prose","value":{"id":"cssunitvalue_と_csskeywordvalue","title":"CSSUnitValue と CSSKeywordValue","isH3":true,"content":"<p>CSS 型付きオブジェクトモデルの威力は、値が単位から分離されていることです。文字列の値を解釈したり、連結したりすることは、過去のものになるかもしれません。スタイルマップ内のすべての CSS プロパティは値を保有します。値がキーワードの場合、返されるオブジェクトは <a href=\"/en-US/docs/Web/API/CSSKeywordValue\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">CSSKeywordValue (en-US)</a> となります。値が数値の場合、 <a href=\"/en-US/docs/Web/API/CSSUnitValue\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">CSSUnitValue (en-US)</a> が返されます。</p>\n<p><code>CSSKeywordValue</code> は <code>inherit</code>, <code>initial</code>, <code>unset</code> などのキーワードや、 <code>auto</code> や <code>grid</code> などの引用符のない文字列を定義するためのクラスです。このサブクラスは <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CSSKeywordValue/value\"><code>cssKeywordValue.value</code> <small>(en-US)</small></a> を通じて <code>value</code> プロパティを提供します。</p>\n<p>値が単位の型である場合は <code>CSSUnitValue</code> が返されます。これは、 <code>20px</code>、<code>40%</code>、<code>200ms</code>、<code>7</code> のような単位を持つ数値を定義するクラスです。これは、 <code>value</code> と <code>unit</code> という2つのプロパティで返される。この型を使うと、数値 - <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CSSUnitValue/value\"><code>cssUnitValue.value</code> <small>(en-US)</small></a> - とその単位 - <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CSSUnitValue/unit\"><code>cssUnitValue.unit</code> <small>(en-US)</small></a> にアクセスすることができます。</p>\n<p>プレーンな段落を書き、スタイルを適用せず、単位と数値の表を返して、その CSS プロパティのいくつかを調べてみましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n   これは、いくらかの内容を持つ段落です。この例を Codepen や JSFiddle で開き、いくつかの特徴を変更してみてください。この段落の幅を指定したり、 ofInterest 配列に CSS プロパティを追加するなどして、いくつかの CSS を追加してみてください。\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>regurgitation<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>thead</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">&gt;</span></span>プロパティ<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">&gt;</span></span>値<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">&gt;</span></span>単位<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>注目しているそれぞれのプロパティについて、プロパティの名前をリストアップし、 <code>.get(propertyName).value</code> を使用して値を返します。そして、 <code>get()</code> が返すオブジェクトが <code>CSSUnitValue</code> である場合、 <code>.get(propertyName).unit</code> で取得した単位の型をリストアップしています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 調べたい要素を得る</span>\n<span class=\"token keyword\">const</span> myElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 出力先の表を取得する</span>\n<span class=\"token keyword\">const</span> stylesTable <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#regurgitation'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// computedStyleMap() ですべてのスタイルの計算値を取得する</span>\n<span class=\"token keyword\">const</span> allComputedStyles <span class=\"token operator\">=</span> myElement<span class=\"token punctuation\">.</span><span class=\"token function\">computedStyleMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 注目するプロパティの配列</span>\n<span class=\"token keyword\">const</span> ofInterest <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'padding-top'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'margin-bottom'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'font-size'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'font-stretch'</span><span class=\"token punctuation\">,</span>\n     <span class=\"token string\">'animation-duration'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'animation-iteration-count'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'width'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'height'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 注目するプロパティを反復処理</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> value <span class=\"token keyword\">of</span> ofInterest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// create a row</span>\n  <span class=\"token keyword\">const</span> row <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tr'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// プロパティ名を追加</span>\n  <span class=\"token keyword\">const</span> cssProperty <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'td'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  cssProperty<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  row<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>cssProperty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 単位のない値</span>\n  <span class=\"token keyword\">const</span> cssValue <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'td'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 長い小数値は小数点以下第 1 位に縮小</span>\n  <span class=\"token keyword\">let</span> propVal <span class=\"token operator\">=</span> allComputedStyles<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  propVal <span class=\"token operator\">=</span> propVal <span class=\"token operator\">%</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> propVal<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> propVal<span class=\"token punctuation\">;</span>\n  cssValue<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span>propVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  row<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>cssValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 単位の種類</span>\n  <span class=\"token keyword\">const</span> cssUnit <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'td'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  cssUnit<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span>allComputedStyles<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  row<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>cssUnit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 表に行を追加</span>\n  stylesTable<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><iframe class=\"sample-code-frame\" title=\"CSSUnitValue と CSSKeywordValue\" id=\"frame_cssunitvalue_and_csskeywordvalue\" width=\"120\" height=\"300\" src=\"https://yari-demos.prod.mdn.mozit.cloud/ja/docs/Web/API/CSS_Typed_OM_API/Guide/_sample_.cssunitvalue_and_csskeywordvalue.html\" loading=\"lazy\"></iframe>\n<p>未対応のブラウザーをお使いの向けに、上記の出力結果を示しておきます。</p>\n<table>\n  <thead>\n    <tr>\n      <th>プロパティ</th>\n      <th>値</th>\n      <th>単位</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/ja/docs/Web/CSS/padding-top\"><code>padding-top</code></a></td>\n      <td>0</td>\n      <td><code>px</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/CSS/margin-bottom\"><code>margin-bottom</code></a></td>\n      <td>16</td>\n      <td><code>px</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/CSS/font-size\"><code>font-size</code></a></td>\n      <td>16</td>\n      <td><code>px</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/CSS/font-stretch\"><code>font-stretch</code></a></td>\n      <td>100</td>\n      <td><code>%</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/CSS/animation-duration\"><code>animation-duration</code></a></td>\n      <td>0</td>\n      <td><code>px</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/CSS/animation-iteration-count\"><code>animation-iteration-count</code></a></td>\n      <td>1</td>\n      <td><em>number</em></td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/CSS/width\"><code>width</code></a></td>\n      <td>auto</td>\n      <td><em>undefined</em></td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/CSS/height\"><code>height</code></a></td>\n      <td>auto</td>\n      <td><em>undefined</em></td>\n    </tr>\n  </tbody>\n</table>\n<p>返される <a href=\"/ja/docs/Web/CSS/length\"><code>&lt;length&gt;</code></a> の単位は <code>px</code> で、<a href=\"/ja/docs/Web/CSS/percentage\"><code>&lt;percentage&gt;</code></a> の単位は <code>percent</code> で、<a href=\"/ja/docs/Web/CSS/time\"><code>&lt;time&gt;</code></a> の単位は <code>s</code> （秒）、単位なしの <a href=\"/ja/docs/Web/CSS/number\"><code>&lt;number&gt;</code></a> の単位は <code>number</code> となっていることが分かると思います。</p>\n<p>段落の <a href=\"/ja/docs/Web/CSS/width\"><code>width</code></a> や <a href=\"/ja/docs/Web/CSS/height\"><code>height</code></a> は既定の <code>auto</code> なので、 <a href=\"/en-US/docs/Web/API/CSSUnitValue\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">CSSUnitValue (en-US)</a> ではなく <a href=\"/en-US/docs/Web/API/CSSKeywordValue\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">CSSKeywordValue (en-US)</a> として返されます。 <code>CSSKeywordValue</code> は unit プロパティを持たないので、このような場合には <code>get().unit</code> は <code>undefined</code> を返します。</p>\n<p>もし <code>width</code> や <code>height</code> が <code>&lt;length&gt;</code> や <code>&lt;percent&gt;</code> で定義されていた場合は、 <a href=\"/en-US/docs/Web/API/CSSUnitValue\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">CSSUnitValue (en-US)</a> の単位はそれぞれ <code>px</code> や <code>percent</code> となるはずです。</p>\n<p>他にも型があります。</p>\n<ul>\n  <li><a href=\"/ja/docs/Web/CSS/image\"><code>&lt;image&gt;</code></a> は <a href=\"/ja/docs/Web/API/CSSImageValue\"><code>CSSImageValue</code></a> を返します。</li>\n  <li><a href=\"/ja/docs/Web/CSS/color_value\"><code>&lt;color&gt;</code></a> は <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CSSStyleValue\"><code>CSSStyleValue</code> <small>(en-US)</small></a> を返します。</li>\n  <li><a href=\"/ja/docs/Web/CSS/transform\"><code>transform</code></a> は <code>CSSTransformValue</code> を返します。</li>\n  <li><a href=\"/ja/docs/Web/CSS/--*\">カスタムプロパティ</a>は <a href=\"/ja/docs/Web/API/CSSUnparsedValue\"><code>CSSUnparsedValue</code></a> を返します。</li>\n</ul>\n<p><code>CSSUnitValue</code> や <code>CSSKeywordValue</code> を使って、他のオブジェクトを作成することもできます。</p>"}},{"type":"prose","value":{"id":"cssstylevalue","title":"CSSStyleValue","isH3":false,"content":"<p><code>CSSStyleValue</code> は <a href=\"/ja/docs/Web/API/CSS_Object_Model#css_typed_object_model\">CSS 型付きオブジェクトモデル API</a> のインターフェイスで、型付きオブジェクトモデル API を通してアクセスできる全ての CSS 値、例えば、 <a href=\"/ja/docs/Web/API/CSSImageValue\"><code>CSSImageValue</code></a>, <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CSSKeywordValue\"><code>CSSKeywordValue</code> <small>(en-US)</small></a>, <a href=\"/ja/docs/Web/API/CSSNumericValue\"><code>CSSNumericValue</code></a>, <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CSSPositionValue\"><code>CSSPositionValue</code> <small>(en-US)</small></a>, <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CSSTransformValue\"><code>CSSTransformValue</code> <small>(en-US)</small></a>, <a href=\"/ja/docs/Web/API/CSSUnparsedValue\"><code>CSSUnparsedValue</code></a> の基底クラスです。</p>\n<p>2 つのメソッドがあります。</p>\n<ul>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CSSStyleValue/parse\"><code>CSSStyleValue.parse()</code> <small>(en-US)</small></a></li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CSSStyleValue/parseAll\"><code>CSSStyleValue.parseAll()</code> <small>(en-US)</small></a></li>\n</ul>\n<p>前述の通り、 <code>StylePropertyMapReadOnly.get('-customProperty')</code>は <a href=\"/ja/docs/Web/API/CSSUnparsedValue\"><code>CSSUnparsedValue</code></a> を返します。CSSUnparsedValue` オブジェクトのインスタンスは、継承された <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CSSStyleValue/parse\"><code>CSSStyleValue.parse()</code> <small>(en-US)</small></a> と <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CSSStyleValue/parseAll\"><code>CSSStyleValue.parseAll()</code> <small>(en-US)</small></a> メソッドで解釈することが可能です。</p>\n<p>いくつかのカスタムプロパティ、座標変換、<code>calc()</code>、その他の機能を持つ CSS の例を見てみましょう。ここでは、 <a href=\"/ja/docs/Web/API/console/log\"><code>console.log()</code></a> に出力される短い JavaScript スニペットを用いて、それらの型が何であるかを見ていきます。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">:root</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">--mainColor</span><span class=\"token punctuation\">:</span> <span class=\"token function\">hsl</span><span class=\"token punctuation\">(</span>198<span class=\"token punctuation\">,</span> 43%<span class=\"token punctuation\">,</span> 42%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">--black</span><span class=\"token punctuation\">:</span> <span class=\"token function\">hsl</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span> 0%<span class=\"token punctuation\">,</span> 16%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">--white</span><span class=\"token punctuation\">:</span> <span class=\"token function\">hsl</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span>0%<span class=\"token punctuation\">,</span>97%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">--unit</span><span class=\"token punctuation\">:</span> 1.2rem<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">button</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--mainColor</span><span class=\"token punctuation\">:</span> <span class=\"token function\">hsl</span><span class=\"token punctuation\">(</span>198<span class=\"token punctuation\">,</span> 100%<span class=\"token punctuation\">,</span> 66%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--unit<span class=\"token punctuation\">)</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--unit<span class=\"token punctuation\">)</span>*2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>30% + 20px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> no-repeat 5% center <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>magicwand.png<span class=\"token punctuation\">)</span></span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--mainColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 4px solid <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--mainColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 2px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--unit<span class=\"token punctuation\">)</span>*2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--white<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> pointer<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>0.95<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ボタン（何もしないボタン）にクラスを追加してみましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">&gt;</span></span>Styled Button<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: js hidden notranslate\"><code><span class=\"token comment\">// get the element</span>\n<span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Retrieve all computed styles with computedStyleMap()</span>\n<span class=\"token keyword\">const</span> allComputedStyles <span class=\"token operator\">=</span> button<span class=\"token punctuation\">.</span><span class=\"token function\">computedStyleMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// CSSMathSum Example</span>\n<span class=\"token keyword\">let</span> btnWidth <span class=\"token operator\">=</span> allComputedStyles<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'width'</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>btnWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// CSSMathSum</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>btnWidth<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// CSSNumericArray {0: CSSUnitValue, 1: CSSUnitValue, length: 2}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>btnWidth<span class=\"token punctuation\">.</span>operator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'sum'</span>\n\n<span class=\"token comment\">// CSSTransformValue</span>\n<span class=\"token keyword\">let</span> transform <span class=\"token operator\">=</span> allComputedStyles<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'transform'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// CSSTransformValue {0: CSSScale, 1: CSSTranslate, length: 2, is2D: true}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// CSSScale {x: CSSUnitValue, y: CSSUnitValue, z: CSSUnitValue, is2D: true}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// CSSUnitValue {value: 0.95, unit: \"number\"}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// CSSUnitValue {value: 0.95, unit: \"number\"}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// CSSUnitValue {value: 1, unit: \"number\"}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">.</span>is2D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// CSSImageValue</span>\n<span class=\"token keyword\">let</span> bgImage <span class=\"token operator\">=</span> allComputedStyles<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'background-image'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bgImage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// CSSImageValue</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bgImage<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// url(\"magicwand.png\")</span>\n\n<span class=\"token comment\">// CSSUnparsedValue</span>\n<span class=\"token keyword\">let</span> unit <span class=\"token operator\">=</span> allComputedStyles<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--unit'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> parsedUnit <span class=\"token operator\">=</span> CSSNumericValue<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>parsedUnit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>parsedUnit<span class=\"token punctuation\">.</span>unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>parsedUnit<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>次の JavaScript で <code>StylePropertyMapReadOnly</code> を取得します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> allComputedStyles <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">computedStyleMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>以下の例では、 <code>allComputedStyles</code> を参照しています。</p>"}},{"type":"prose","value":{"id":"cssunparsedvalue","title":"CSSUnparsedValue","isH3":true,"content":"<p><a href=\"/ja/docs/Web/API/CSSUnparsedValue\"><code>CSSUnparsedValue</code></a> は<a href=\"/ja/docs/Web/CSS/Using_CSS_custom_properties\">カスタムプロパティ</a>を表しています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// CSSUnparsedValue</span>\n<span class=\"token keyword\">const</span> unit <span class=\"token operator\">=</span> allComputedStyles<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--unit'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// CSSUnparsedValue {0: \" 1.2rem\", length: 1}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>unit<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \" 1.2rem\"</span>\n</code></pre></div>\n<p><code>get()</code> を呼び出すと、 <code>CSSUnparsedValue</code> 型でカスタムプロパティが返されます。 <code>1.2rem</code> の前にスペースがあることに注意してください。単位と値を取得するには、 <code>CSSUnitValue</code> が必要です。これは <code>CSSStyleValue.parse()</code> メソッドを使って <code>CSSUnparsedValue</code> を取得できます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> parsedUnit <span class=\"token operator\">=</span> CSSNumericValue<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>parsedUnit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// CSSUnitValue {value: 1.2, unit: \"rem\"}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>parsedUnit<span class=\"token punctuation\">.</span>unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// \"rem\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>parsedUnit<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1.2</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"cssmathsum","title":"CSSMathSum","isH3":true,"content":"<p><a href=\"/ja/docs/Web/HTML/Element/button\"><code>&lt;button&gt;</code></a> 要素は既定ではインライン要素ですが、サイズ調整を可能にするために <a href=\"/ja/docs/Web/CSS/CSS_Display\"><code>display: inline-block;</code></a> を追加しています。 CSS では、<code>width: calc(30% + 20px);</code> を指定していますが、これは <a href=\"/ja/docs/Web/CSS/calc\"><code>calc()</code></a> という関数で幅を定義しています。</p>\n<p>この <code>width</code> を <code>get()</code> すると、<a href=\"/en-US/docs/Web/API/CSSMathSum\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">CSSMathSum (en-US)</a> が返されます。 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CSSMathSum/values\"><code>CSSMathSum.values</code> <small>(en-US)</small></a> は <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CSSNumericArray\"><code>CSSNumericArray</code> <small>(en-US)</small></a> で、 2 つの <code>CSSUnitValues</code> があります。</p>\n<p><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CSSMathValue/operator\"><code>CSSMathValue.operator</code> <small>(en-US)</small></a> の値は <code>sum</code> です。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> btnWidth <span class=\"token operator\">=</span> allComputedStyles<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'width'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>btnWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// CSSMathSum</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>btnWidth<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// CSSNumericArray {0: CSSUnitValue, 1: CSSUnitValue, length: 2}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>btnWidth<span class=\"token punctuation\">.</span>operator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 'sum'</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"csstransformvalue_に_cssscale_を付ける","title":"CSSTransformValue に CSSScale を付ける","isH3":true,"content":"<p>また、 <a href=\"/ja/docs/Web/CSS/CSS_Display\"><code>display: inline-block;</code></a> により座標変換もできるようになります。私たちの CSS では、 <code>transform: scale(0.95);</code> が <a href=\"/ja/docs/Web/CSS/transform\"><code>transform</code></a> 関数です。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> transform <span class=\"token operator\">=</span> allComputedStyles<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'transform'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// CSSTransformValue {0: CSSScale, 1: CSSTranslate, length: 2, is2D: true}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// CSSScale {x: CSSUnitValue, y: CSSUnitValue, z: CSSUnitValue, is2D: true}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// CSSUnitValue {value: 0.95, unit: \"number\"}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// CSSUnitValue {value: 0.95, unit: \"number\"}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// CSSUnitValue {value: 1, unit: \"number\"}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">.</span>is2D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p><code>transform</code> プロパティを <code>get()</code> すると、 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CSSTransformValue\"><code>CSSTransformValue</code> <small>(en-US)</small></a> を取得します。 <code>length</code> プロパティで座標変換関数の長さ（数）を問い合わせることができます。</p>\n<p>長さが <code>1</code> であることから、 1 つの座標変換関数を表し、最初のオブジェクトを出力して <code>CSSScale</code> オブジェクトを取得します。 <code>x</code>、<code>y</code>、<code>z</code> の拡大率を問い合わせると、<code>CSSUnitValues</code> を取得できます。このシナリオでは、読み取り専用の <code>CSSScale.is2D</code> プロパティが <code>true</code> になっています。</p>\n<p>もし、 <code>translate()</code>, <code>skew()</code>, <code>rotate()</code> の座標変換関数を追加すれば、長さは <code>4</code> になり、それぞれが <code>x</code>, <code>y</code>, <code>z</code> の値を持ち、 <code>.is2D</code> プロパティを持ったものになるでしょう。例えば、<code>transform: translate3d(1px, 1px, 3px)</code> が含まれていた場合、 <code>.get('transform')</code> は <code>CSSTranslate</code> を返し、その <code>CSSUnitValues</code> には <code>x</code>, <code>y</code>, <code>z</code> があり、読み取り専用の <code>.is2D</code> 属性は <code>false</code> になるでしょう。</p>"}},{"type":"prose","value":{"id":"cssimagevalue","title":"CSSImageValue","isH3":true,"content":"<p>ボタンの背景画像は、魔法の杖の 1 種類です。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> bgImage <span class=\"token operator\">=</span> allComputedStyles<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'background-image'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bgImage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// CSSImageValue</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bgImage<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// url(\"magicwand.png\")</span>\n</code></pre></div>\n<p><code>'background-image'</code> を <code>get()</code> すると、 <a href=\"/ja/docs/Web/API/CSSImageValue\"><code>CSSImageValue</code></a> が返されます。 CSS の <a href=\"/ja/docs/Web/CSS/background\"><code>background</code></a> 一括指定プロパティを使っていますが、継承された <a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>Object.prototype.toString()</code></a> メソッドは、画像 <code>'url(\"magicwand.png\")'</code> のみを返していることが分かります。</p>\n<p>元の <code>url()</code> が相対パスであったとしても、返される値は画像への絶対パスであることに注意してください。背景画像がグラデーションや複数の背景画像でった場合、 <code>.get('background-image')</code> は <code>CSSStyleValue</code> を返すでしょう。 <code>CSSImageValue</code> は、単一の画像が存在し、その単一の画像宣言が URL である場合にのみ返されます。</p>"}},{"type":"prose","value":{"id":"まとめ","title":"まとめ","isH3":true,"content":"<p>これで、 CSS 型付きオブジェクトモデルを理解することができるはずです。さらに学ぶために<a href=\"/ja/docs/Web/API/CSS_Typed_OM_API/Guide\" aria-current=\"page\">CSS 型付きオブジェクトモデル</a>の全てのインターフェイスを見てみてください。</p>"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/API/CSS_Painting_API/Guide\">CSS 描画 API の使用</a></li>\n</ul>"}}],"toc":[{"text":"computedStyleMap()","id":"computedstylemap"},{"text":"CSSStyleValue","id":"cssstylevalue"},{"text":"関連情報","id":"関連情報"}],"summary":"CSS 型付きオブジェクトモデル API は、 CSS 値を型付き JavaScript オブジェクトとして公開し、その値を効率的に操作できるようにします。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using the CSS Typed Object Model","locale":"en-US","native":"English (US)"}],"source":{"folder":"ja/web/api/css_typed_om_api/guide","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/css_typed_om_api/guide/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/CSS_Typed_OM_API","title":"CSS 型付きオブジェクトモデル API"},{"uri":"/ja/docs/Web/API/CSS_Typed_OM_API/Guide","title":"CSS 型付きオブジェクトモデルの使用"}],"pageTitle":"CSS 型付きオブジェクトモデルの使用 - Web API | MDN","noIndexing":false}}