{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"ReadableStreamDefaultController","mdn_url":"/ja/docs/Web/API/ReadableStreamDefaultController","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/Streams_API\">Streams API</a></strong></li><li><strong><a href=\"/ja/docs/Web/API/ReadableStreamDefaultController\"><code>ReadableStreamDefaultController</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>プロパティ</summary><ol><li><a href=\"/ja/docs/Web/API/ReadableStreamDefaultController/desiredSize\"><code>desiredSize</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>メソッド</summary><ol><li><a href=\"/ja/docs/Web/API/ReadableStreamDefaultController/close\"><code>close()</code></a></li><li><a href=\"/ja/docs/Web/API/ReadableStreamDefaultController/enqueue\"><code>enqueue()</code></a></li><li><a href=\"/ja/docs/Web/API/ReadableStreamDefaultController/error\"><code>error()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Streams に関連するページ</summary><ol><li><a href=\"/ja/docs/Web/API/ByteLengthQueuingStrategy\"><code>ByteLengthQueuingStrategy</code></a></li><li><a href=\"/ja/docs/Web/API/CountQueuingStrategy\"><code>CountQueuingStrategy</code></a></li><li><a href=\"/ja/docs/Web/API/ReadableByteStreamController\"><code>ReadableByteStreamController</code></a></li><li><a href=\"/ja/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a></li><li><a href=\"/ja/docs/Web/API/ReadableStreamBYOBReader\"><code>ReadableStreamBYOBReader</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ReadableStreamBYOBRequest\"><code>ReadableStreamBYOBRequest</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/API/ReadableStreamDefaultReader\"><code>ReadableStreamDefaultReader</code></a></li><li><a href=\"/ja/docs/Web/API/Response/body\"><code>Response.body</code></a></li><li><a href=\"/ja/docs/Web/API/WritableStream\"><code>WritableStream</code></a></li><li><a href=\"/ja/docs/Web/API/WritableStreamDefaultController\"><code>WritableStreamDefaultController</code></a></li><li><a href=\"/ja/docs/Web/API/WritableStreamDefaultWriter\"><code>WritableStreamDefaultWriter</code></a></li><li><a href=\"/ja/docs/Web/API/fetch\"><code>fetch()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/ja/docs/Web/API/Streams_API\">Streams API</a> の <strong><code>ReadableStreamDefaultController</code></strong> インターフェイスは、<a href=\"/ja/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> の状態と内部キューを制御できるコントローラーを表します。 デフォルトのコントローラーは、バイトストリームではないストリーム用です。</p>"}},{"type":"prose","value":{"id":"コンストラクター","title":"コンストラクター","isH3":false,"content":"<p>なし。 <code>ReadableStreamDefaultController</code> インスタンスは、<code>ReadableStream</code> の構築中に自動的に作成されます。</p>"}},{"type":"prose","value":{"id":"プロパティ","title":"プロパティ","isH3":false,"content":"<dl>\n  <dt id=\"readablestreamdefaultcontroller.desiredsize\"><a href=\"/ja/docs/Web/API/ReadableStreamDefaultController/desiredSize\"><code>ReadableStreamDefaultController.desiredSize</code></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">読取専用 </span></dt>\n  <dd>\n    <p>ストリームの内部キューを満たすために必要な希望サイズを返します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"メソッド","title":"メソッド","isH3":false,"content":"<dl>\n  <dt id=\"readablestreamdefaultcontroller.close\"><a href=\"/ja/docs/Web/API/ReadableStreamDefaultController/close\"><code>ReadableStreamDefaultController.close()</code></a></dt>\n  <dd>\n    <p>関連するストリームを閉じます。</p>\n  </dd>\n  <dt id=\"readablestreamdefaultcontroller.enqueue\"><a href=\"/ja/docs/Web/API/ReadableStreamDefaultController/enqueue\"><code>ReadableStreamDefaultController.enqueue()</code></a></dt>\n  <dd>\n    <p>所与のチャンクを関連するストリームのキューに入れます。</p>\n  </dd>\n  <dt id=\"readablestreamdefaultcontroller.error\"><a href=\"/ja/docs/Web/API/ReadableStreamDefaultController/error\"><code>ReadableStreamDefaultController.error()</code></a></dt>\n  <dd>\n    <p>関連するストリームとの今後のやり取りでエラーを発生させます。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":"<p>次の単純な例では、コンストラクターを使用してカスタムの <code>ReadableStream</code> を作成します（完全なコードについては、<a href=\"https://mdn.github.io/dom-examples/streams/simple-random-stream/\" class=\"external\" rel=\" noopener\">単純なランダムストリームの例</a>を参照）。 <code>start()</code> 関数は、1 秒ごとにテキストのランダムな文字列を生成し、それをストリームのキューに入れます。 <a href=\"/ja/docs/Web/API/ReadableStream/cancel\"><code>ReadableStream.cancel()</code></a> が何らかの理由で呼び出された場合、生成を停止するための <code>cancel()</code> 関数も提供します。</p>\n<p><a href=\"/ja/docs/Web/API/ReadableStreamDefaultController\" aria-current=\"page\"><code>ReadableStreamDefaultController</code></a> オブジェクトは、<code>start()</code> 関数および <code>pull()</code> 関数のパラメーターとして提供されることに注意してください。</p>\n<p>ボタンが押されると、生成を停止し、<a href=\"/ja/docs/Web/API/ReadableStreamDefaultController/close\"><code>ReadableStreamDefaultController.close()</code></a> を使用してストリームを閉じ、ストリームからデータを読み取る別の関数を実行します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReadableStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    interval <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> string <span class=\"token operator\">=</span> <span class=\"token function\">randomChars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// ストリームに文字列を追加</span>\n      controller<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// それを画面に表示</span>\n      <span class=\"token keyword\">let</span> listItem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      listItem<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> string<span class=\"token punctuation\">;</span>\n      list1<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>listItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    button<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">fetchStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      controller<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">pull</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// この例では実際には pull は必要ありません</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// リーダーがキャンセルされた場合に呼び出されるため、</span>\n    <span class=\"token comment\">// 文字列の生成を停止する必要があります</span>\n    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"仕様","title":"仕様","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>仕様</th>\n      <th>状態</th>\n      <th>コメント</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://streams.spec.whatwg.org/#rs-default-controller-class\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">Streams<br><small lang=\"ja\">ReadableStreamDefaultController の定義</small></a></td>\n      <td><span class=\"spec-living\">現行の標準</span></td>\n      <td>初期定義</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"query":"api.ReadableStreamDefaultController","dataURL":"/ja/docs/Web/API/ReadableStreamDefaultController/bcd.json"}}],"toc":[{"text":"コンストラクター","id":"コンストラクター"},{"text":"プロパティ","id":"プロパティ"},{"text":"メソッド","id":"メソッド"},{"text":"例","id":"例"},{"text":"仕様","id":"仕様"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"}],"summary":"Streams API の ReadableStreamDefaultController インターフェイスは、ReadableStream の状態と内部キューを制御できるコントローラーを表します。 デフォルトのコントローラーは、バイトストリームではないストリーム用です。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"ReadableStreamDefaultController","locale":"en-US","native":"English (US)"},{"title":"ReadableStreamDefaultController","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/readablestreamdefaultcontroller","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/readablestreamdefaultcontroller/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/ReadableStreamDefaultController","title":"ReadableStreamDefaultController"}],"pageTitle":"ReadableStreamDefaultController - Web API | MDN","noIndexing":false}}