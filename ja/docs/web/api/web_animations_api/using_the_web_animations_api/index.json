{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Web Animations API を利用する","mdn_url":"/ja/docs/Web/API/Web_Animations_API/Using_the_Web_Animations_API","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/Web_Animations_API\">Web Animations API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>ガイド</summary><ol><li><a href=\"/ja/docs/Web/API/Web_Animations_API/Using_the_Web_Animations_API\">Using the Web Animations API</a></li><li><a href=\"/ja/docs/Web/API/Web_Animations_API/Web_Animations_API_Concepts\">Web Animations API Concepts</a></li><li><a href=\"/ja/docs/Web/API/Web_Animations_API/Keyframe_Formats\">Keyframe Formats</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>インターフェイス</summary><ol><li><a href=\"/ja/docs/Web/API/Animation\"><code>Animation</code></a></li><li><a href=\"/ja/docs/Web/API/AnimationEffect\"><code>AnimationEffect</code></a></li><li><a href=\"/ja/docs/Web/API/AnimationEvent\"><code>AnimationEvent</code></a></li><li><a href=\"/ja/docs/Web/API/AnimationTimeline\"><code>AnimationTimeline</code></a></li><li><a href=\"/ja/docs/Web/API/AnimationPlaybackEvent\"><code>AnimationPlaybackEvent</code></a></li><li><a href=\"/ja/docs/Web/API/DocumentTimeline\"><code>DocumentTimeline</code></a></li><li><a href=\"/ja/docs/Web/API/KeyframeEffect\"><code>KeyframeEffect</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>プロパティ</summary><ol><li><a href=\"/ja/docs/Web/API/Document/timeline\"><code>Document.timeline</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>メソッド</summary><ol><li><a href=\"/ja/docs/Web/API/Document/getAnimations\"><code>Document.getAnimations()</code></a></li><li><a href=\"/ja/docs/Web/API/Element/animate\"><code>Element.animate()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Web Animations API は JavaScript を使い、アニメーションを構築したりプレイバックを制御することが出来ます。この記事では「ふしぎの国のアリス」を利用した楽しいデモとチュートリアルで正しい利用方法を説明します。</p>"}},{"type":"prose","value":{"id":"web_animations_api_との出会い","title":"Web Animations API との出会い","isH3":false,"content":"<p><a href=\"/ja/docs/Web/API/Web_Animations_API\">Web Animations API</a> はブラウザ内のアニメーションエンジンを開発者にオープンにして JavaScript で制御します。この API は <a href=\"/ja/docs/Web/CSS/CSS_Animations\">CSS アニメーション</a> と <a href=\"/ja/docs/Web/CSS/CSS_Transitions\">CSS トランジション</a> の両方の実装基盤となるように設計されており、将来のアニメーション効果への扉を開いた状態にしています。これは現在サポートされているアニメーションを実行する中で、ハックや強制や <a href=\"/ja/docs/Web/API/Window/requestAnimationFrame\"><code>Window.requestAnimationFrame()</code></a> を利用しない最もパフォーマンスの高い方法の 1 つです。</p>\n<p>Web Animations API を利用すると、インタラクティブなアニメーションをスタイルシートから JavaScript に移管し、表現と動作を分離できます。CSS プロパティを記述したり、再生方向を制御するためにエレメントにクラスを追加するなどの DOM を多用する手法に依存する必要がなくなりました。また、純粋な宣言した CSS とは異なり、JavaScript ではプロパティからアニメーション時間を動的に設定することが出来ます。カスタムされたアニメーションライブラリを構築し、インタラクティブなアニメーションを作るために、Web Animations API が最適なツールになることでしょう。では Web Animations API で何が出来るか説明しましょう。</p>"}},{"type":"prose","value":{"id":"ブラウザサポート","title":"ブラウザサポート","isH3":false,"content":"<p>この記事で説明する基本的な Web Animations API の機能は、Firefox 48 以降および Chrome 36 以降で標準機能として利用可能です。WebKit と Edge はこの API をそれぞれ TODO リストに移行しましたが、全てのブラウザでサポートされるまで、機能サポートをテストするために追加する <a href=\"https://github.com/web-animations/web-animations-js\" class=\"external\" rel=\" noopener\">polyfill</a> があるので必要に応じて追加します。</p>"}},{"type":"prose","value":{"id":"web_animation_api_を利用して_css_アニメーションを構築する","title":"Web Animation API を利用して CSS アニメーションを構築する","isH3":false,"content":"<p>Web Animations API を学習するためのより身近な手法は、多くの Web 開発者が以前に使用したことのある CSS アニメーションから始めることです。CSS アニメーションには、デモ目的でうまくブレイクダウンする使い慣れた構文を持っています。</p>"}},{"type":"prose","value":{"id":"css_バージョン","title":"CSS バージョン","isH3":true,"content":"<p>アリスがうさぎの穴から落ちてワンダーランドに導かれる様子を示した CSS で書かれている転がり落ちるアニメーションです。(完全な <a href=\"https://codepen.io/rachelnabors/pen/QyOqqW\" class=\"external\" rel=\" noopener\">Codepen のコード</a> を参照してください)</p>\n<p><a href=\"https://codepen.io/rachelnabors/pen/rxpmJL\" class=\"external\" rel=\" noopener\"><img src=\"https://mdn.mozillademos.org/files/13843/tumbling-alice_optimized.gif\" alt=\"Alice Tumbling down the rabbit's hole.\" loading=\"lazy\"></a></p>\n<p>背景が移動しながら、アリスが回転し、回転からのオフセットで色が変化することに注目してください。このチュートリアルでは、アリスのみに焦点を当てます。アリスのアニメーションを制御する簡単な CSS は次のとおりです。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">#alice</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> aliceTumbling infinite 3s linear<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> aliceTumbling</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">0%</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #000<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">)</span> <span class=\"token function\">translate3D</span><span class=\"token punctuation\">(</span>-50%<span class=\"token punctuation\">,</span> -50%<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">30%</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #431236<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">100%</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #000<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>360deg<span class=\"token punctuation\">)</span> <span class=\"token function\">translate3D</span><span class=\"token punctuation\">(</span>-50%<span class=\"token punctuation\">,</span> -50%<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これによって、アリスの色とトランスフォーム回転が 3 秒間にわたって一定(線形)で変化し、それを無限にループします。<a href=\"/ja/docs/Web/CSS/@keyframes\">@keyframes</a> ブロックで、各ループの 30% (約 0.9 秒) でアリスの色が黒から濃いワイン色に変わり、ループが終わるときにもとに戻ることが分かります。</p>"}},{"type":"prose","value":{"id":"javascript_に移行する","title":"JavaScript に移行する","isH3":true,"content":"<p>次に Web Animations API を利用して同じアニメーションを作成してみましょう。</p>\n<h4 id=\"キーフレームを表現する\">キーフレームを表現する</h4>\n<p>最初に必要なことは、CSS の <a href=\"/ja/docs/Web/CSS/@keyframes\">@keyframes</a> ブロックに対応する <a href=\"/en-US/docs/Web/API/Web_Animations_API/Keyframe_Formats\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Keyframe オブジェクト (en-US)</a> を作成することです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> aliceTumbling <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span> <span class=\"token string\">'rotate(0) translate3D(-50%, -50%, 0)'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'#000'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'#431236'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">offset</span><span class=\"token operator\">:</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span> <span class=\"token string\">'rotate(360deg) translate3D(-50%, -50%, 0)'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'#000'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ここでは、複数のオブジェクトを含む配列を使用しています。各オブジェクトは、オリジナルの CSS のキーを表現しています。ただし、CSS とは異なって Web Animations API には、表示される各キーのアニメーションに沿ったパーセンテージを明示的に伝える必要がありません。指定したキーの数に基き、アニメーションが自動的に均等な部分に分割します。つまり、3 つのキーを持つ Keyframe オブジェクトは、特に指定がない限り、アニメーションの各ループの途中で中間キーを 50 %として再生します。</p>\n<p>キーのオフセットを他のキーから明示的に設定する場合は、カンマで CSS キーの宣言と区切ったオフセットを直接オブジェクトに指定できます。上記の例では、色の変化に対してアリスの色が 30% (50% ではない) で変化するために <code>offset: 0.3</code> を指定しています。</p>\n<p>少なくとも 2 つのキーフレームを指定する必要があります。 (アニメーションシーケンスの開始状態・終了状態の 2 つを示す)キーフレームに 1 つのエントリーしか無い場合、<a href=\"/ja/docs/Web/API/Element/animate\"><code>Element.animate()</code></a> は <code>NotSupportedError</code> 例外をスローします。</p>\n<p>予約すると、キーのオフセットを指定しない限り、デフォルトでキーは等間隔になります。便利でしょうか？</p>\n<h4 id=\"タイミング_プロパティ_の表現\">タイミング プロパティ の表現</h4>\n<p>また、アリスのアニメーションの値に対応するタイミングプロパティのオブジェクト (<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/KeyframeEffect/KeyframeEffect\"><code>AnimationEffectTimingProperties</code> <small>(en-US)</small></a>) を作成する必要があります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> aliceTiming <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">duration</span><span class=\"token operator\">:</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">iterations</span><span class=\"token operator\">:</span> <span class=\"token number\">Infinity</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>CSS で同等の値の表現方法との違いに気がつくでしょう。</p>\n<ul>\n  <li>1 つ目は間隔時間はミリ秒単位で表現されています。3 秒という指定ではなく、3000 ミリ秒です。<a href=\"/ja/docs/Web/API/setTimeout\"><code>WindowTimers.setTimeout()</code></a> や <a href=\"/ja/docs/Web/API/Window/requestAnimationFrame\"><code>Window.requestAnimationFrame()</code></a> と同じように Web Animations API はミリ秒しか値を取りません。</li>\n  <li>もう 1 つは <code>iteration-count</code> ではなく <code>iterations</code> ということです。</li>\n</ul>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> CSS アニメーションで使用される用語と Web Animations で利用される用語とではいくつか小さな違いがあります。例えば、Web Animations は <code>\"infinite\"</code> という文字列を利用しない代わりに JavaScript の予約語である <code>Infinity</code> を利用します。そして、 <code>timing-function</code> の代わりに <code>easing</code> を利用します。デフォルトの <a href=\"/ja/docs/Web/CSS/animation-timing-function\">animation-timing-function</a> が簡単な <code>ease</code> である CSS アニメーションとは異なり、Web Animation API ではデフォルトのイージングは <code>linear</code> (線形)であるため、ここではイージング値をリストにしていません。</p>\n</div>\n<h4 id=\"パーツをまとめる\">パーツをまとめる</h4>\n<p>次は <a href=\"/ja/docs/Web/API/Element/animate\"><code>Element.animate()</code></a> メソッドを利用して今までの 2 つの要素をまとめます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"alice\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span>\n  aliceTumbling<span class=\"token punctuation\">,</span>\n  aliceTiming\n<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>アニメーションの再生が開始されます！(<a href=\"https://codepen.io/rachelnabors/pen/rxpmJL\" class=\"external\" rel=\" noopener\">Codepen の完成バージョン</a>を参照してください。)</p>\n<p><code>animate()</code> メソッドは、CSS でアニメーション化出来る DOM 要素を用いて呼び出し可能です。そして、それはいくつかの方法で書くことが出来ます。キーフレームとタイミングプロパティを作成する代わりに、次のように直接渡すことが出来ます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"alice\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span> <span class=\"token string\">'rotate(0) translate3D(-50%, -50%, 0)'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'#000'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'#431236'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">offset</span><span class=\"token operator\">:</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span> <span class=\"token string\">'rotate(360deg) translate3D(-50%, -50%, 0)'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'#000'</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">duration</span><span class=\"token operator\">:</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">iterations</span><span class=\"token operator\">:</span> <span class=\"token number\">Infinity</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>さらに、アニメーションの間隔時間のみを指定し、繰り返さないアニメーションを指定する場合、ミリ秒だけを指定することが出来ます(デフォルトではアニメーションを 1 回だけ繰り返します)</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"alice\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span> <span class=\"token string\">'rotate(0) translate3D(-50%, -50%, 0)'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'#000'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'#431236'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">offset</span><span class=\"token operator\">:</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span> <span class=\"token string\">'rotate(360deg) translate3D(-50%, -50%, 0)'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'#000'</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"play_pause_reverse_playbackrate_を使って再生制御する","title":"Play() / pause() / reverse() / playbackRate を使って再生制御する","isH3":false,"content":"<p>\n  Web Animation API を使用して CSS アニメーションを作成することが可能ですが、API が本当に役立つ時はアニメーションの再生を制御するときです。Web Animation API は、再生を制御するための便利ないくつかのメソッドを提供しています。アリスが拡大/縮小するゲームでのアニメーションの一時停止と再生を見てみましょう( <a href=\"https://codepen.io/rachelnabors/pen/PNYGZQ\" class=\"external\" rel=\" noopener\">Codepen の完全なコード</a>をご覧ください。)\n  <a href=\"https://codepen.io/rachelnabors/pen/PNYGZQ?editors=0010\" class=\"external\" rel=\" noopener\"><img src=\"https://mdn.mozillademos.org/files/13845/growing-shrinking_article_optimized.gif\" alt=\"Playing the growing and shrinking game with Alice.\" loading=\"lazy\"></a>\n</p>\n<p>このゲームでは、アリスは小さなボトルから大きなボトルに移動するアニメーションを使用しており、ボトルとカップケーキを使い制御します。どちらにも独自のアニメーションがあります。</p>"}},{"type":"prose","value":{"id":"アニメーションの一時停止と再生","title":"アニメーションの一時停止と再生","isH3":true,"content":"<p>アリスのアニメーションについては後で詳しく説明します。まずはカップケーキのアニメーションを見てみましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> nommingCake <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'eat-me_sprite'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span> <span class=\"token string\">'translateY(0)'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span> <span class=\"token string\">'translateY(-80%)'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">fill</span><span class=\"token operator\">:</span> <span class=\"token string\">'forwards'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">easing</span><span class=\"token operator\">:</span> <span class=\"token string\">'steps(4, end)'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">duration</span><span class=\"token operator\">:</span> aliceChange<span class=\"token punctuation\">.</span>effect<span class=\"token punctuation\">.</span>timing<span class=\"token punctuation\">.</span>duration <span class=\"token operator\">/</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><a href=\"/ja/docs/Web/API/Element/animate\"><code>Element.animate()</code></a> メソッドは、呼び出された直後に実行されます。ユーザーがクリックする前にケーキが食べられないように、次のように定義された <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Animation/pause\"><code>Animation.pause()</code> <small>(en-US)</small></a> をすぐに呼び出します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>nommingCake<span class=\"token punctuation\">.</span><span class=\"token function\">pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Animation/play\"><code>Animation.play()</code> <small>(en-US)</small></a> メソッドを用いて準備出来たらいつでもアニメーションを実行できます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>nommingCake<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>具体的には、カップケーキが食べられるにつれて、アリスのアニメーションにリンクしてアリスが大きくなるようにします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">growAlice</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// Play Alice's animation.</span>\n  aliceChange<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Play the cake's animation.</span>\n  nommingCake<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ユーザーがマウスを押したままにするか、タッチスクリーン上のケーキを指で押すと、<code>growAlice</code> を呼び出してアニメーションを再生できるようにしました。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>cake<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mousedown\"</span><span class=\"token punctuation\">,</span> growAlice<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncake<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"touchstart\"</span><span class=\"token punctuation\">,</span> growAlice<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"その他の便利なメソッド","title":"その他の便利なメソッド","isH3":true,"content":"<p>一時停止と再生に加えて、次のアニメーションメソッドを利用することが出来ます。</p>\n<ul>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Animation/finish\"><code>Animation.finish()</code> <small>(en-US)</small></a> はアニメーションの最後までスキップします。</li>\n  <li><a href=\"/ja/docs/Web/API/Animation/cancel\"><code>Animation.cancel()</code></a> はアニメーションを中止し、そのエフェクトを削除します。</li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Animation/reverse\"><code>Animation.reverse()</code> <small>(en-US)</small></a> を実行すると (<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Animation/playbackRate\"><code>Animation.playbackRate</code> <small>(en-US)</small></a> に負数を設定し、アニメーションの再生方向を逆方向にします。</li>\n</ul>\n<p>最初に <code>playbackRate</code> を見てみましょう。負数の playbackRate はアニメーションを逆に実行させます。アリスがボトルから飲むと彼女は小さくうなります。これは、ボトルが彼女のアニメーションの playbackRate を 1 から -1 に変更するためです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">shrinkAlice</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  aliceChange<span class=\"token punctuation\">.</span>playbackRate <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  aliceChange<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbottle<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mousedown\"</span><span class=\"token punctuation\">,</span> shrinkAlice<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbottle<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"touchstart\"</span><span class=\"token punctuation\">,</span> shrinkAlice<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><a href=\"https://ja.wikipedia.org/wiki/%E9%8F%A1%E3%81%AE%E5%9B%BD%E3%81%AE%E3%82%A2%E3%83%AA%E3%82%B9\" class=\"external\" rel=\" noopener\">鏡の国のアリス</a>では、アリスは走り続けなければならない世界に移動します。レッドクイーンのレースの例では、アリスとレッドクイーンが所定の位置にとどまっています。(<a href=\"https://codepen.io/rachelnabors/pen/PNGGaV\" class=\"external\" rel=\" noopener\">Codepen の</a> 完全なコードを参照してください。)</p>\n<p><a href=\"https://codepen.io/rachelnabors/pen/PNGGaV\" class=\"external\" rel=\" noopener\"><img src=\"https://mdn.mozillademos.org/files/13847/red-queen-race_optimized.gif\" alt=\"Alice and the Red Queen race to get to the next square in this game.\" loading=\"lazy\"></a></p>\n<p>小さな子どもたちは、オートマトンのチェスのコマとは異なり、疲れやすいのでアリスは常に速度を落としています。彼女のアニメーションの <code>playbackRate</code> に衰えを設定することでコードでこれを表現しました。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// Make sure the playback rate never falls below .4</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>redQueen_alice<span class=\"token punctuation\">.</span>playbackRate <span class=\"token operator\">&gt;</span> <span class=\"token number\">.4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    redQueen_alice<span class=\"token punctuation\">.</span>playbackRate <span class=\"token operator\">*=</span> <span class=\"token number\">.9</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>しかし、クリックまたはタップして彼らを励ますと、playbackRate を乗算しているのでスピードアップします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">goFaster</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  redQueen_alice<span class=\"token punctuation\">.</span>playbackRate <span class=\"token operator\">*=</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> goFaster<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"touchstart\"</span><span class=\"token punctuation\">,</span> goFaster<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>また、背景要素にはクリックまたはタップしたときに影響を受ける<code>playbackRate</code> を設定しています。アリスとレッドクイーンを 2 倍早く走らせたらどうなると思いますか？速度を落とすとどうなると思いますか？</p>"}},{"type":"prose","value":{"id":"アニメーションから情報を取得する","title":"アニメーションから情報を取得する","isH3":false,"content":"<p>サイト全体のアニメーションを遅くすることで前庭障害のあるユーザーのアクセシビリティを改善するなど、playbackRate を使用する他の方法を想像してみてください。すべての CSS ルールで期間を再計算することなく CSS で全てを行うことは不可能ですが、Web Animations API では次の <a href=\"/ja/docs/Web/API/Document/getAnimations\"><code>document.getAnimations()</code></a> メソッド(まだブラウザーでの完全なサポートではないですが) を使用して次のようにページ上の各アニメーションをループして <code>playbackRate</code> を半分にします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>document<span class=\"token punctuation\">.</span><span class=\"token function\">getAnimations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">animation</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    animation<span class=\"token punctuation\">.</span>playbackRate <span class=\"token operator\">*=</span> <span class=\"token number\">.5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Web Animations API を利用すると、変更する必要があるのは 1 つの小さなプロパティだけです！</p>\n<p>CSS アニメーションだけでは難しいのは、他のアニメーションが提供する値に依存するときです。例えばアリスの拡大/縮小ゲームの例では、ケーキの間隔時間について奇妙な事に気づいたかもしれません。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token literal-property property\">duration</span><span class=\"token operator\">:</span> aliceChange<span class=\"token punctuation\">.</span>effect<span class=\"token punctuation\">.</span>timing<span class=\"token punctuation\">.</span>duration <span class=\"token operator\">/</span> <span class=\"token number\">2</span>\n</code></pre></div>\n<p>ここで何がおこっているか理解するために、アリスのアニメーションを見てみましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> aliceChange <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'alice'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span> <span class=\"token string\">'translate(-50%, -50%) scale(.5)'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span> <span class=\"token string\">'translate(-50%, -50%) scale(2)'</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">duration</span><span class=\"token operator\">:</span> <span class=\"token number\">8000</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">easing</span><span class=\"token operator\">:</span> <span class=\"token string\">'ease-in-out'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">fill</span><span class=\"token operator\">:</span> <span class=\"token string\">'both'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>アリスのアニメーションでは、8 秒かけてサイズが半分から 2 倍になります。その後、彼女のエフェクトを停止します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>aliceChange<span class=\"token punctuation\">.</span><span class=\"token function\">pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>アニメーションの最初に一時停止したままにすると、ボトル全体を既に飲んでいるかのようにフルサイズの半分から始めてしまいます。彼女のアニメーションの \"playhead\" を中央に設定したいので、彼女は既に半分終わっています。次のようにアリスの <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Animation/currentTime\"><code>Animation.currentTime</code> <small>(en-US)</small></a> を 4 秒に設定することでこれを設定することが出来ます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>aliceChange<span class=\"token punctuation\">.</span>currentTime <span class=\"token operator\">=</span> <span class=\"token number\">4000</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>しかし、アニメーションの作業中にアリスの間隔時間を大幅に変更する可能性があります。アリスの <code>currentTime</code> を動的に設定するとよいのではないでしょうか。従って、一度に 2 つの更新を行う必要はありません。実際のところ、aliceChange の <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Animation/effect\"><code>Animation.effect</code> <small>(en-US)</small></a> プロパティを参照することでこれを実行できます。プロパティはアクティブなエフェクトの全ての詳細を含むオブジェクトを返します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>aliceChange<span class=\"token punctuation\">.</span>currentTime <span class=\"token operator\">=</span> aliceChange<span class=\"token punctuation\">.</span>effect<span class=\"token punctuation\">.</span>timing<span class=\"token punctuation\">.</span>duration <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>\n  <code>effect</code> を利用すると、アニメーションの <code>keyframe</code> と <code>timing</code> オブジェクトにアクセスできます。<code>aliceChange.effect.timing</code> はアリスのタイミングオブジェクト(<a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>AnimationEffectTimingReadOnly</code></a>) 型) を示します。これには、<a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>AnimationEffectTimingReadOnly.duration</code></a> も含まれます。\n  アニメーションのタイムラインの中間点を取得するために、アリスの長さを半分に分割し、通常の身長に設定できます。アリスのアニメーションを逆再生して、どちらの方向にも再生したり、小さくしたり、大きくしたり出来ます！\n</p>\n<p>また、ボトルとケーキの再生時間を設定するときにも同じことが出来ます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> drinking <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'liquid'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token string\">'100%'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token string\">'0'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">fill</span><span class=\"token operator\">:</span> <span class=\"token string\">'forwards'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">duration</span><span class=\"token operator\">:</span> aliceChange<span class=\"token punctuation\">.</span>effect<span class=\"token punctuation\">.</span>timing<span class=\"token punctuation\">.</span>duration <span class=\"token operator\">/</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndrinking<span class=\"token punctuation\">.</span><span class=\"token function\">pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これで、3 つのアニメーションすべてが 1 つの間隔時間に繋がり、1 つの場所から簡単に変更することが出来ます。</p>\n<p>Web Animation API を利用して、アニメーションの現在の時刻を把握することも出来ます。ケーキを食べてなくなったり、ボトルが空になるとゲームが終了します。アリスが大きすぎてドアを通らなかったり、小さすぎてドアノブに届かなかったかはアリスのアニメーションによって表現されプレイヤーの操作に依存します。アリスのアニメーションの<a href=\"/ja/docs/Web/API/Animation/currentTime\"><code>currentTime</code></a> を取得して、彼女の <code>activeDuration</code> で割ることで彼女の大きさを把握できます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">endGame</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// get Alice's timeline's playhead location</span>\n  <span class=\"token keyword\">var</span> alicePlayhead <span class=\"token operator\">=</span> aliceChange<span class=\"token punctuation\">.</span>currentTime<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> aliceTimeline <span class=\"token operator\">=</span> aliceChange<span class=\"token punctuation\">.</span>effect<span class=\"token punctuation\">.</span>activeDuration<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// stops Alice's and other animations</span>\n  <span class=\"token function\">stopPlayingAlice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// depending on which third it falls into</span>\n  <span class=\"token keyword\">var</span> aliceHeight <span class=\"token operator\">=</span> alicePlayhead<span class=\"token operator\">/</span>aliceTimeline<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>aliceHeight <span class=\"token operator\">&lt;=</span> <span class=\"token number\">.333</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Alice got smaller!</span>\n    <span class=\"token operator\">...</span>\n\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>aliceHeight <span class=\"token operator\">&gt;=</span> <span class=\"token number\">.666</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Alice got bigger!</span>\n    <span class=\"token operator\">...</span>\n\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Alice didn't change significantly</span>\n    <span class=\"token operator\">...</span>\n\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> <strong>注意:</strong><code>getAnimations()</code> と <code>effect</code> はこの記事執筆時点では完全にサポートされていませんが polyfill は今現在サポートしています。</p>\n</div>"}},{"type":"prose","value":{"id":"コールバックと_promise","title":"コールバックと Promise","isH3":false,"content":"<p>CSS アニメーションとトランジションには独自のイベントリスナーがあり、これらは Web Animations API でも利用可能です。</p>\n<ul>\n  <li><a href=\"/ja/docs/Web/API/Animation/onfinish\"><code>onfinish</code></a> は終了イベントハンドラーであり、<a href=\"/ja/docs/Web/API/Animation/finish\"><code>finish()</code></a> メソッドを使用して手動でトリガー出来ます。</li>\n  <li><a href=\"/ja/docs/Web/API/Animation/oncancel\"><code>oncancel</code></a> は <code>cancel</code> のイベントハンドラーであり、<a href=\"/ja/docs/Web/API/Animation/cancel\"><code>cancel()</code></a> メソッドを使用してトリガーできます。</li>\n</ul>\n<p>ここでは、ケーキ・ボトル・アリスのコールバックを設定して、<code>endGame</code> 関数を起動します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// When the cake or runs out...</span>\nnommingCake<span class=\"token punctuation\">.</span>onfinish <span class=\"token operator\">=</span> endGame<span class=\"token punctuation\">;</span>\ndrinking<span class=\"token punctuation\">.</span>onfinish <span class=\"token operator\">=</span> endGame<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...or Alice reaches the end of her animation</span>\naliceChange<span class=\"token punctuation\">.</span>onfinish <span class=\"token operator\">=</span> endGame<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>さらに良いことに、Web Animations API ではアニメーション終了時に解決されるか、またはキャンセル時に拒否される <a href=\"/en-US/docs/Web/API/Animation/finished\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">finished (en-US)</a> プロミスを提供しています。</p>"}},{"type":"prose","value":{"id":"まとめ","title":"まとめ","isH3":false,"content":"<p>これらの機能は Web Animations API の基本機能であって、その殆どは Firefox と Chrome の最新バージョンで既にサポートされています。これで、ブラウザ上で「うさぎの穴を飛び降りる」アニメーション化の準備は整い、独自のアニメーション実験を作成する準備が出来ました。API を使用して共有したい場合は、#WAAPI ハッシュタグを使ってみてください。サポートのつながりによっては、さらなる機能をカバーするチュートリアルを書いていくのでチェックしてください！</p>"}},{"type":"prose","value":{"id":"参考","title":"参考","isH3":false,"content":"<ul>\n  <li><a href=\"https://codepen.io/collection/bpEza/\" class=\"external\" rel=\" noopener\">Codepen の不思議の国のアリス</a> を使い、フォーク・シェアしてください。</li>\n  <li><a href=\"https://hacks.mozilla.org/2016/08/animating-like-you-just-dont-care-with-element-animate/\" class=\"external\" rel=\" noopener\">Element.animate を気にしないようにアニメーションする方法</a>：Web Animations API の作られた背景・他のアニメーション手法よりパフォーマンスが優れている理由を説明した秀逸な記事です。</li>\n  <li><a href=\"https://github.com/web-animations/web-animations-js\" class=\"external\" rel=\" noopener\">web-animations-js</a> ： Web Animations API の polyfill です。</li>\n</ul>"}}],"toc":[{"text":"Web Animations API との出会い","id":"web_animations_api_との出会い"},{"text":"ブラウザサポート","id":"ブラウザサポート"},{"text":"Web Animation API を利用して CSS アニメーションを構築する","id":"web_animation_api_を利用して_css_アニメーションを構築する"},{"text":"Play() / pause() / reverse() / playbackRate を使って再生制御する","id":"play_pause_reverse_playbackrate_を使って再生制御する"},{"text":"アニメーションから情報を取得する","id":"アニメーションから情報を取得する"},{"text":"コールバックと Promise","id":"コールバックと_promise"},{"text":"まとめ","id":"まとめ"},{"text":"参考","id":"参考"}],"summary":"Web Animations API は JavaScript を使い、アニメーションを構築したりプレイバックを制御することが出来ます。この記事では「ふしぎの国のアリス」を利用した楽しいデモとチュートリアルで正しい利用方法を説明します。","popularity":0.0003,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using the Web Animations API","locale":"en-US","native":"English (US)"},{"title":"Usando a Web Animations API","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Using the Web Animations API","locale":"ru","native":"Русский"},{"title":"Using the Web Animations API","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/web_animations_api/using_the_web_animations_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/web_animations_api/using_the_web_animations_api/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/Web_Animations_API","title":"ウェブアニメーション API"},{"uri":"/ja/docs/Web/API/Web_Animations_API/Using_the_Web_Animations_API","title":"Web Animations API を利用する"}],"pageTitle":"Web Animations API を利用する - Web API | MDN","noIndexing":false}}