{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Media Source Extensions のためのアセットのトランスコード","mdn_url":"/ja/docs/Web/API/Media_Source_Extensions_API/Transcoding_assets_for_MSE","locale":"ja","native":"日本語","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Media Source Extensions を使用する場合、アセットをストリーミングする前に調整する必要がある可能性があります。 この記事では、要件を説明し、アセットを適切にエンコードするために使用できるツールチェーンを示します。</p>"}},{"type":"prose","value":{"id":"入門","title":"入門","isH3":false,"content":"<ol>\n  <li>最初で最も重要な手順は、ユーザーのブラウザーがサポートするコンテナとコーデックでファイルを構成することです。</li>\n  <li>コーデックによっては、<a href=\"https://www.w3.org/TR/mse-byte-stream-format-isobmff/\" class=\"external\" rel=\" noopener\">ISO BMFF 仕様</a>に準拠するためにファイルを断片化する必要がある場合があります。</li>\n  <li>（オプション）Dynamic Adaptive Streaming over HTTP（DASH、HTTP を介した動的適応的ストリーミング）を使用した適応的ビットレートストリーミングを使用する場合、アセットを複数の解像度にトランスコードする必要があります。 ほとんどの DASH クライアントは、対応する Media Presentation Description（MPD）マニフェストファイルを期待しています。 これは通常、複数の解像度のアセットファイルを生成するときに生成されます。</li>\n</ol>\n<p>以下では、これらのすべての手順を説明しますが、最初にこれをかなり簡単に行うために使用できるツールチェーンを見てみましょう。</p>"}},{"type":"prose","value":{"id":"サンプルメディア","title":"サンプルメディア","isH3":true,"content":"<p>ここにリストされている手順を実行したいが、実験するメディアがない場合は、Big Buck Bunny の予告編 [0] を<a href=\"https://wayback.archive.org/web/20161102172252id_/http://video.blendertestbuilds.de/download.php?file=download.blender.org/peach/trailer_1080p.mov\" class=\"external\" rel=\" noopener\">ここ</a>で入手できます。 Big Buck Bunny は、<a href=\"https://creativecommons.org/licenses/by/3.0/\" class=\"external\" rel=\" noopener\">Creative Commons Attribution 3.0</a> ライセンスの下でライセンスされています。 このチュートリアル全体を通して、ダウンロードしたファイル名 <code>trailer_1080p.mov</code> を参照します。</p>\n<p>[0] (c) Copyright 2008, Blender Foundation / <a href=\"http://www.bigbuckbunny.org\" class=\"external\" rel=\" noopener\">www.bigbuckbunny.org</a> / <a href=\"https://peach.blender.org/about/\" class=\"external\" rel=\" noopener\">https://peach.blender.org/about/</a></p>"}},{"type":"prose","value":{"id":"必要なツール","title":"必要なツール","isH3":true,"content":"<p>MSE を使用する場合、次のツールが必要です。</p>\n<ol>\n  <li><a href=\"https://ffmpeg.org/\" class=\"external\" rel=\" noopener\">ffmpeg</a> — メディアを必要な形式にトランスコードするためのコマンドラインユーティリティ。 <a href=\"https://ffmpeg.org/download.html\" class=\"external\" rel=\" noopener\">Download FFmpeg のページ</a>であなたのシステムのバージョンをダウンロードできます。 アーカイブファイルから実行可能ファイルを抽出し、その場所を PATH ステートメントに追加します。 OSX ユーザーは、<a href=\"https://brew.sh/\" class=\"external\" rel=\" noopener\">homebrew</a> を使用して ffmpeg をインストールすることもできます。</li>\n  <li><a href=\"https://github.com/axiomatic-systems/Bento4\" class=\"external\" rel=\" noopener\">Bento4</a> — アセットのメタデータを取得し、DASH のコンテンツを作成するための一連のコマンドラインユーティリティ。 インストールするには、OS と設定に応じて、提供されたプロジェクトファイル/ソースファイルからアプリを自分でビルド/コンパイルする必要があります。 詳細については、<a href=\"https://github.com/axiomatic-systems/Bento4#building\" class=\"external\" rel=\" noopener\">構築手順</a>を参照してください。 構築済みファイルが<a href=\"https://www.bento4.com/downloads/\" class=\"external\" rel=\" noopener\">ここ</a>にあります。 <code>bin</code> ディレクトリの内容を ffmpeg と同じ場所に入れておきます。</li>\n  <li>python2 — Bento4 が使います。</li>\n</ol>\n<p>次のステップに進む前に、これらを正常にインストールしてください。</p>\n<p>サンプルメディアは、Bento4 の <code>utils</code> ディレクトリに入れておき、ここで作業します。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> 構築済みの ffmpeg には、ライセンスの関係で libfdk_aac が組み込まれていません。 これを Bento4 がデフォルトで使うので、必要なら、ffmpeg をコンパイルする必要があります。 必要なければ、<code>mp4-dash-encode.py</code> のコマンドラインに <code>--audio-codec=aac</code> を追加してください。</p>\n</div>"}},{"type":"prose","value":{"id":"コンテナとコーデックのサポート","title":"コンテナとコーデックのサポート","isH3":true,"content":"<p><a href=\"https://www.w3.org/TR/media-source/#goals\" class=\"external\" rel=\" noopener\">MSE 仕様のセクション 1.1: Goals</a> で指定されているように、MSE は特定のメディア形式またはコーデックのサポートを必要としないように設計されています。 これは紙の上では事実ですが、ブラウザーのサポートは特定のコンテナ/コーデックの組み合わせによって異なります。</p>\n<p>ブラウザーが特定のコンテナをサポートしているかどうかを確認するには、次のように MIME タイプの文字列を <a href=\"/ja/docs/Web/API/MediaSource/isTypeSupported\"><code>MediaSource.isTypeSupported</code></a> メソッドに渡します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>MediaSource<span class=\"token punctuation\">.</span><span class=\"token function\">isTypeSupported</span><span class=\"token punctuation\">(</span><span class=\"token string\">'audio/mp3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nMediaSource<span class=\"token punctuation\">.</span><span class=\"token function\">isTypeSupported</span><span class=\"token punctuation\">(</span><span class=\"token string\">'video/mp4'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nMediaSource<span class=\"token punctuation\">.</span><span class=\"token function\">isTypeSupported</span><span class=\"token punctuation\">(</span><span class=\"token string\">'video/mp4; codecs=\"avc1.4D4028, mp4a.40.2\"'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>文字列はコンテナの MIME タイプであり、オプションでコーデックのリストが続きます。 MIME タイプは簡単に把握できますが、<a href=\"http://nickdesaulniers.github.io/mp4info/\" class=\"external\" rel=\" noopener\">mp4info</a> ユーティリティを使用してコーデック文字列を取得できます。</p>\n<p>現在、H.264 動画コーデックと AAC 音声コーデックを備えた MP4 コンテナは、すべての最新ブラウザーでサポートされていますが、他のブラウザーではサポートされていません。</p>\n<p>サンプルメディアを QuickTime MOV コンテナから MP4 コンテナに変換するには、ffmpeg を使用できます。 MOV コンテナの音声コーデックは既に AAC であり、動画コーデックは H.264 であるため、トランスコードを実行しないように ffmpeg に指示できます。 代わりに、トランスコードを実行せずに音声トラックと動画トラックをコピーするだけです。 これは、トランスコードするよりも比較的高速です。</p>\n<pre class=\"notranslate\">$ ffmpeg -i trailer_1080p.mov -c:v copy -c:a copy bunny.mp4\n$ ls\nbunny.mp4         trailer_1080p.mov\n</pre>"}},{"type":"prose","value":{"id":"断片化の確認","title":"断片化の確認","isH3":true,"content":"<p>MP4 を適切にストリーミングするには、アセットが <a href=\"https://www.w3.org/TR/mse-byte-stream-format-isobmff/\" class=\"external\" rel=\" noopener\">ISO BMF</a> 形式の MP4 である必要があります。 適切な断片化がなければ、特定の MP4 ファイルは MSE での動作が保証されません。 これは、コンテナ内にメタデータが分散され、まとめられていないことを意味します。</p>\n<p>MP4 ファイルが適切な MP4 ストリームであるかどうかを確認するには、<a href=\"http://nickdesaulniers.github.io/mp4info/\" class=\"external\" rel=\" noopener\">mp4info</a> ユーティリティを再度使用して MP4 のアトムを一覧表示できます。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> 断片化されたバージョンは、追加のメタデータがファイル全体に広がるため、元のバージョンよりわずかに大きくなります。 これは通常、ファイルサイズの 1% 以下の増加です。</p>\n</div>"}},{"type":"prose","value":{"id":"断片化","title":"断片化","isH3":true,"content":"<p>まだ MP4 ではないアセットがある場合、ffmpeg は次のように <code>-movflags frag_keyframe+empty_moov</code> コマンドラインフラグを使用して、トランスコードプロセス中に適切に断片化された MP4 の発行を処理できます。</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>ffmpeg -i trailer_1080p.mov -c:v copy -c:a copy -movflags frag_keyframe+empty_moov bunny_fragmented.mp4\n</code></pre></div>\n<p>すでに MP4 を持っているが、適切に断片化されていない場合は、ffmpeg を改めて使用できます。</p>\n<pre class=\"notranslate\">ffmpeg -i non_fragmented.mp4 -movflags frag_keyframe+empty_moov fragmented.mp4\n</pre>\n<p>どちらの場合でも、Chrome は次の追加のムービーフラグを設定する必要がある場合があります。</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>-movflags frag_keyframe+empty_moov+default_base_moof\n</code></pre></div>\n<p>適切に断片化された MP4 ファイルを用意するだけで開始できます。 適応的ビットレートストリーミングを使用する場合は、複数の解像度でエンコードを作成する必要があります。 MSE は柔軟に実装できるほど柔軟性がありますが、DASH は明確に指定されたアプリケーションプロトコルであるため、既存の DASH クライアントを使用することを強くお勧めします。</p>"}},{"type":"prose","value":{"id":"dash_用のコンテンツの作成","title":"DASH 用のコンテンツの作成","isH3":true,"content":"<p>$PATH を介して ffmpeg と Bento4 のユーティリティにアクセスできる場合、Bento4 の <code>mp4-dash-encode.py</code> Python スクリプトを実行して、さまざまな解像度でコンテンツの複数のエンコーディングを生成できます。 Bento4 の <code>mp4-dash.py</code> Python スクリプトを使用して、クライアントが必要とする対応する MPD ファイルを生成できます。</p>\n<p>次のコマンドを実行します（サンプル出力付き）。</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>$ python mp4-dash-encode.py -b <span class=\"token number\">5</span> -v bunny_fragmented.mp4\nEncoding <span class=\"token number\">5</span> bitrates, min bitrate <span class=\"token operator\">=</span> <span class=\"token number\">500.0</span> max bitrate <span class=\"token operator\">=</span> <span class=\"token number\">2000.0</span>\nMedia Source: Video: <span class=\"token assign-left variable\">resolution</span><span class=\"token operator\">=</span>640x360\nENCODING bitrate: <span class=\"token number\">500</span>, resolution: 256x144\nENCODING bitrate: <span class=\"token number\">875</span>, resolution: 384x216\nENCODING bitrate: <span class=\"token number\">1250</span>, resolution: 480x270\nENCODING bitrate: <span class=\"token number\">1625</span>, resolution: 560x316\nENCODING bitrate: <span class=\"token number\">2000</span>, resolution: 640x360\n\n$ python mp4-dash.py video_0*\nParsing media <span class=\"token function\">file</span> <span class=\"token number\">1</span>: video_00500.mp4\nParsing media <span class=\"token function\">file</span> <span class=\"token number\">2</span>: video_00875.mp4\nParsing media <span class=\"token function\">file</span> <span class=\"token number\">3</span>: video_01250.mp4\nParsing media <span class=\"token function\">file</span> <span class=\"token number\">4</span>: video_01625.mp4\nParsing media <span class=\"token function\">file</span> <span class=\"token number\">5</span>: video_02000.mp4\nSplitting media <span class=\"token function\">file</span> <span class=\"token punctuation\">(</span>audio<span class=\"token punctuation\">)</span> video_00500.mp4\nSplitting media <span class=\"token function\">file</span> <span class=\"token punctuation\">(</span>video<span class=\"token punctuation\">)</span> video_00500.mp4\nSplitting media <span class=\"token function\">file</span> <span class=\"token punctuation\">(</span>video<span class=\"token punctuation\">)</span> video_00875.mp4\nSplitting media <span class=\"token function\">file</span> <span class=\"token punctuation\">(</span>video<span class=\"token punctuation\">)</span> video_01250.mp4\nSplitting media <span class=\"token function\">file</span> <span class=\"token punctuation\">(</span>video<span class=\"token punctuation\">)</span> video_01625.mp4\nSplitting media <span class=\"token function\">file</span> <span class=\"token punctuation\">(</span>video<span class=\"token punctuation\">)</span> video_02000.mp4\n\n$ tree -L <span class=\"token number\">2</span> output\noutput\n├── audio\n│   └── und\n├── stream.mpd\n└── video\n    ├── <span class=\"token number\">1</span>\n    ├── <span class=\"token number\">2</span>\n    ├── <span class=\"token number\">3</span>\n    ├── <span class=\"token number\">4</span>\n    └── <span class=\"token number\">5</span>\n\n<span class=\"token number\">8</span> directories, <span class=\"token number\">1</span> <span class=\"token function\">file</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> <code>mp4-dash-encode.py</code> は、ffmpeg のエラーメッセージを表示しないようにしています。 <code>-d</code> オプションを指定することで、それを見ることができます。</p>\n</div>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>Note:</strong> エラーメッセージとして <code>\"Invalid duration specification for force_key_frames: 'expr:eq(mod(n\"</code> が表示されたら、<code>mp4-dash-encode.py</code> を修正して <code>\"-force_key_frames 'expr:eq(mod(n,%d),0)'\"</code> から <code>\"'\"</code> を 2 つ取り除きます。</p>\n</div>"}},{"type":"prose","value":{"id":"まとめ","title":"まとめ","isH3":false,"content":"<p>動画が適切にエンコードされ、適応的ビットレートメディアが生成されると、DASH と MSE を使用して Web で適応的ビットレートストリーミングを開始する準備が整いました。</p>"}}],"toc":[{"text":"入門","id":"入門"},{"text":"まとめ","id":"まとめ"}],"summary":"Media Source Extensions を使用する場合、アセットをストリーミングする前に調整する必要がある可能性があります。 この記事では、要件を説明し、アセットを適切にエンコードするために使用できるツールチェーンを示します。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Transcoding assets for Media Source Extensions","locale":"en-US","native":"English (US)"}],"source":{"folder":"ja/web/api/media_source_extensions_api/transcoding_assets_for_mse","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/media_source_extensions_api/transcoding_assets_for_mse/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/Media_Source_Extensions_API","title":"Media Source Extensions API"},{"uri":"/ja/docs/Web/API/Media_Source_Extensions_API/Transcoding_assets_for_MSE","title":"Media Source Extensions のためのアセットのトランスコード"}],"pageTitle":"Media Source Extensions のためのアセットのトランスコード - Web API | MDN","noIndexing":false}}