{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"サービスワーカーの使用","mdn_url":"/ja/docs/Web/API/Service_Worker_API/Using_Service_Workers","locale":"ja","native":"日本語","sidebarHTML":"\n <ol>\n  <li><a href=\"/ja/docs/Web/API/Service_Worker_API\"><strong>Service Worker API</strong></a></li>\n  <li class=\"toggle\">\n    <details open=\"\">\n        <summary>Service Worker guides</summary>\n        <ol>\n          <li><a href=\"/ja/docs/Web/API/Service_Worker_API/Using_Service_Workers\">Using Service Workers</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n        <summary>Interfaces</summary>\n        <ol>\n          <li><a href=\"/ja/docs/Web/API/Cache\"><code>Cache</code></a></li>\n          <li><a href=\"/ja/docs/Web/API/CacheStorage\"><code>CacheStorage</code></a></li>\n          <li><a href=\"/ja/docs/Web/API/Client\"><code>Client</code></a></li>\n          <li><a href=\"/ja/docs/Web/API/Clients\"><code>Clients</code></a></li>\n          <li><a href=\"/ja/docs/Web/API/ExtendableEvent\"><code>ExtendableEvent</code></a></li>\n          <li><a href=\"/ja/docs/Web/API/FetchEvent\"><code>FetchEvent</code></a></li>\n          <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/InstallEvent\"><code>InstallEvent</code> <small>(en-US)</small></a></li>\n          <li><a href=\"/ja/docs/Web/API/Navigator/serviceWorker\"><code>Navigator.serviceWorker</code></a></li>\n          <li><a href=\"/ja/docs/Web/API/NotificationEvent\"><code>NotificationEvent</code></a></li>\n          <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PeriodicSyncEvent\"><code>PeriodicSyncEvent</code> <small>(en-US)</small></a></li>\n          <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PeriodicSyncManager\"><code>PeriodicSyncManager</code> <small>(en-US)</small></a></li>\n          <li><a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>PeriodicSyncRegistration</code></a></li>\n          <li><a href=\"/ja/docs/Web/API/ServiceWorker\"><code>ServiceWorker</code></a></li>\n          <li><a href=\"/ja/docs/Web/API/ServiceWorkerContainer\"><code>ServiceWorkerContainer</code></a></li>\n          <li><a href=\"/ja/docs/Web/API/ServiceWorkerGlobalScope\"><code>ServiceWorkerGlobalScope</code></a></li>\n          <li><a href=\"/ja/docs/Web/API/ServiceWorkerRegistration\"><code>ServiceWorkerRegistration</code></a></li>\n          <li><a href=\"/ja/docs/Web/API/SyncEvent\"><code>SyncEvent</code></a></li>\n          <li><a href=\"/ja/docs/Web/API/SyncManager\"><code>SyncManager</code></a></li>\n          <li><a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>SyncRegistration</code></a></li>\n          <li><a href=\"/ja/docs/Web/API/WindowClient\"><code>WindowClient</code></a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n        <summary>Related APIs</summary>\n        <ol>\n          <li><a href=\"/ja/docs/Web/API/Channel_Messaging_API\">Channel Messaging API</a></li>\n          <li><a href=\"/ja/docs/Web/API/Notifications_API\">Notifications API</a></li>\n          <li><a href=\"/ja/docs/Web/API/Push_API\">Push API</a></li>\n          <li><a href=\"/ja/docs/Web/API/Web_Workers_API\">Web Workers API</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/ja/docs/MDN\">Documentation:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Contribute</summary>\n        <ol>\n          <li><a href=\"/ja/docs/MDN\">The MDN project</a></li>\n        </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>この記事はサービスワーカーを使い始めるための情報を提供するページです。基本的な構造、サービスワーカーの登録、新しいサービスワーカーのインストールと有効化のプロセス、サービスワーカーの更新、キャッシュや応答の操作を含めた、オフラインで動作するシンプルなアプリケーションの機能についてです。</p>"}},{"type":"prose","value":{"id":"サービスワーカーの前提条件","title":"サービスワーカーの前提条件","isH3":false,"content":"<p>ウェブユーザーが長年苦しめられてきた主要な問題の一つは、接続を失うことです。世界中の最高のウェブアプリは、ダウンロードできないときの使い勝手が最悪でした。これまでにも、この問題を解決するための技術を生み出す試みはさまざまに行われ、いくつかの問題は解決されてきました。しかし、一番の問題は、資産のキャッシュとカスタムネットワークリクエストのための優れた全体的な制御メカニズムがまだ存在しないことです。</p>\n<p>以前の取り組み、 <em>AppCache</em> は、キャッシュする資産をとても簡単に指定することができたため、良いアイディアに見えました。しかしながら、 利用において数多くの取り決めがあり、アプリケーションが完全に取り決めに従わない場合は壊れてしまいました。さらに詳しいことは Jake Archibald の <a href=\"https://alistapart.com/article/application-cache-is-a-douchebag\" class=\"external\" rel=\" noopener\">Application Cache is a Douchebag</a> にをお読みください。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> Firefox 84 以降では、 AppCache は取り除かれました（<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1619673\" class=\"external\" rel=\" noopener\">バグ&nbsp;1619673</a>）。 Chromium 90 でも削除が計画されており、 Safari でも非推奨になっています。</p>\n</div>\n<p>サービスワーカーは最終的にこれらの問題を解決するでしょう。サービスワーカーの構文は AppCache の構文と比べて複雑です。しかし、代わりに JavaScript を使用して AppCache で動作させていたような振る舞いをより細かく制御し、この問題やその他の多くのことを扱うことができるようになります。サービスワーカーを使用することで、アプリケーションがはじめにキャッシュされた資産を使用するよう簡単に設定することができます。そのため、一度ネットワークからデータを取得しておけば、オフラインでも既定の機能を提供できます（<a href=\"http://offlinefirst.org/\" class=\"external\" rel=\" noopener\">オフラインファースト</a>として一般的に知られています）。このようなオフラインの機能はネイティブアプリでは既に使用可能であり、ネイティブアプリがウェブアプリを差し置いて選ばれる理由の一つです。</p>"}},{"type":"prose","value":{"id":"サービスワーカーを実行するための設定","title":"サービスワーカーを実行するための設定","isH3":false,"content":"<p>最近では、最近のブラウザーではすべて、サービスワーカーが既定で有効になっています。サービスワーカーを使用してコードを実行するには、コードを HTTPS で提供する必要があります。サービスワーカーは、セキュリティ上の理由から HTTPS での実行に制限されています。そのため、 HTTPS に対応している GitHub は実験をホストするのに適した場所です。ローカルでの開発を容易にするために、 <code>localhost</code> はブラウザーによって安全なオリジンとみなされます。</p>"}},{"type":"prose","value":{"id":"基本構造","title":"基本構造","isH3":false,"content":"<p>サービスワーカーでは、基本的なセットアップの際に下記のステップが一般的に見られます。</p>\n<ol>\n  <li>サービスワーカーの URL が呼び出され、 <a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>serviceWorker.register()</code></a> を通して登録されます。</li>\n  <li>成功した場合、サービスワーカーは <a href=\"/ja/docs/Web/API/ServiceWorkerGlobalScope\"><code>ServiceWorkerGlobalScope</code></a> で実行されます。これは根本的に特殊なワーカーコンテキストで、メインスレッドから独立しており、 DOM へのアクセスもありません。</li>\n  <li>サービスワーカーはイベントの処理ができる状態になります。</li>\n  <li>サービスワーカーにコントロールされたページが今後アクセスされた時、ワーカーのインストールが試みられます。インストールのイベントは常に最初にサービスワーカーへ送られます（このイベントは IndexedDB の設定やサイト資産のキャッシュに使用することができます）。これはネイティブアプリや Firefox OS アプリのインストールと全く同じ種類の - 全てをオフラインで使用できるようにするための - 処理です。</li>\n  <li><code>oninstall</code> ハンドラーが完了すると、サービスワーカーはインストールされたと考えられます。</li>\n  <li>次のステップは有効化です。サービスワーカーがインストールされると、次に有効化イベントを受け取ります。 <code>onactivate</code> の基本的な使用法は、以前のバージョンのサービスワーカースクリプトで使用したリソースのクリーンアップです。</li>\n  <li>現在サービスワーカーはページを制御しているでしょう。しかし <code>register()</code> が成功した後に開かれたページのみです。例えば、文書はサービスワーカーがあろうとなかろうと実行され、実行されている間はその状態を保ちます。つまり、文書が実際に制御されるには、再読み込みされる必要があるでしょう。</li>\n</ol>\n<p>\n  <img src=\"/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers/sw-lifecycle.png\" alt=\"\" width=\"579\" height=\"867\" loading=\"lazy\">\n</p>\n<p>以下の図は、利用可能なサービスワーカーのイベントの概要を示しています。</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers/sw-events.png\" alt=\"インストール、起動、メッセージ、フェッチ、同期、プッシュ\" width=\"573\" height=\"167\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"プロミス","title":"プロミス","isH3":true,"content":"<p>サービスワーカーの登録とインストールのごく基本的なことを示すために、 <a href=\"https://github.com/mdn/sw-test\" class=\"external\" rel=\" noopener\">sw-test</a> というシンプルなデモを作成しました。これは、シンプルなスターウォーズレゴの画像ギャラリーです。これは、プロミスを利用した関数で、 JSON オブジェクトから画像データを読み込み、 Ajax で画像を読み込んでから、ページの下に画像を並べて表示するものです。今のところ静的でシンプルなものにしています。また、サービスワーカーを登録、インストール、アクティブ化し、ブラウザーがより多くの仕様に対応するようになったら、必要なファイルをすべてキャッシュしてオフラインで動作するようにします。</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers/demo-screenshot.png\" alt=\"\" width=\"480\" height=\"410\" loading=\"lazy\">\n</p>\n<p><a href=\"https://github.com/mdn/sw-test/\" class=\"external\" rel=\" noopener\">GitHub 上のソースコード</a>を確認し、<a href=\"https://mdn.github.io/sw-test/\" class=\"external\" rel=\" noopener\">例をライブで表示</a>してみましょう。</p>"}},{"type":"prose","value":{"id":"ワーカーの登録","title":"ワーカーの登録","isH3":true,"content":"<p>このアプリの JavaScript ファイルである <code>app.js</code> の最初のコードブロックは、以下の通りです。これは、サービスワーカーを使用するためのエントリーポイントです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">registerServiceWorker</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'serviceWorker'</span> <span class=\"token keyword\">in</span> navigator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> registration <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>serviceWorker<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">'/sw-test/sw.js'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">scope</span><span class=\"token operator\">:</span> <span class=\"token string\">'/sw-test/'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>registration<span class=\"token punctuation\">.</span>installing<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Service worker installing'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>registration<span class=\"token punctuation\">.</span>waiting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Service worker installed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>registration<span class=\"token punctuation\">.</span>active<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Service worker active'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Registration failed with </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>error<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token function\">registerServiceWorker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<ol>\n  <li>if ブロックは、登録を試みる前にサービスワーカーに対応しているか確認する機能検出試験を行います。</li>\n  <li>次に、 <a href=\"/ja/docs/Web/API/ServiceWorkerContainer/register\"><code>ServiceWorkerContainer.register()</code></a> 関数を使って、アプリ内にある単なる JavaScript ファイルであるサービスワーカーをこのサイトに登録します（なお、これはオリジンからのファイルの相対 URL であって、それを参照している JS ファイルではありません）。</li>\n  <li><code>scope</code> 引数はオプションで、サービスワーカーが制御するコンテンツのサブセットを指定することができます。このケースでは <code>'/sw-test/'</code> を指定しており、アプリのオリジン配下のすべてのコンテンツを意味しています。もしこれを指定しなくてもこの値が既定値になりますが、指定方法を示すために使用しています。</li>\n</ol>\n<p>これは、ワーカーのコンテキストで実行されるサービスワーカーを登録しているため、 DOM にはアクセスしていません。続いて、通常ページの外側のサービスワーカーでロードを制御するためにコードを実行します。</p>\n<p>1 つのサービスワーカーで、多数のページを制御することができます。スコープ内のページが読み込まれるたびに、サービスワーカーはそのページにインストールされて動作します。そのため、サービスワーカースクリプト内でのグローバル変数の扱いには注意が必要だということを心にとどめておいてください。各ページが固有のワーカーを持つわけではありません。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> サービスワーカー関数は、プロキシサーバーのようにリクエストやレスポンスを書き換えたり、独自のキャッシュの項目で置き換えたりすることができます。</p>\n</div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> サービスワーカーの良いところは、以上で見てきたような機能の検出をすることで、サービスワーカーに対応していないブラウザーでもオンラインで期待通りの流儀でアプリを使用することができることです。さらに、同一のページで AppCache とサービスワーカーを使用すると、サービスワーカーに対応していないが AppCache に対応しているブラウザーは AppCache を使用し、両方に対応しているブラウザーは AppCache を無視してサービスワーカーを優先させることができます。</p>\n</div>\n<h4 id=\"サービスワーカーの登録に失敗する理由\">サービスワーカーの登録に失敗する理由</h4>\n<p>次の可能性が考えられます。</p>\n<ol>\n  <li>HTTPS を使用してアプリケーションを実行していない。</li>\n  <li>サービスワーカーファイルへのパスが正しく書かれていない。 — アプリのルートディレクトリではなく、アプリのオリジンからの相対パスで書く必要があります。上記の例では、ワーカーが <code>https://mdn.github.io/sw-test/sw.js</code> にあり、アプリのルートは <code>https://mdn.github.io/sw-test/</code> です。しかし、パスは <code>/sw-test/sw.js</code> と書く必要があり、 <code>/sw.js</code> ではありません。</li>\n  <li>指定されているサービスワーカーがアプリとは異なるオリジンにある。これは許可されていません。</li>\n</ol>\n<p>\n  <img src=\"/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers/important-notes.png\" alt=\"\" width=\"574\" height=\"277\" loading=\"lazy\">\n</p>\n<p>他のメモです。</p>\n<ul>\n  <li>サービスワーカーはサービスワーカーのスコープ内にあるクライアントからのリクエストのみを取得します。</li>\n  <li>サービスワーカーの最大スコープは、ワーカーのある場所です。</li>\n  <li>サービスワーカーが <code>Service-Worker-Allowed</code> ヘッダーから提供されたクライアント上で起動する場合、そのワーカーの最大スコープのリストを指定することができます。</li>\n  <li>Firefox では、ユーザーが<a href=\"https://support.mozilla.org/ja/kb/private-browsing-use-firefox-without-history\" class=\"external\" rel=\" noopener\">プライベートブラウジングモード</a>にいるときは、サービスワーカー API は隠され使用することができません。</li>\n</ul>"}},{"type":"prose","value":{"id":"インストールと起動_キャッシュの作成","title":"インストールと起動: キャッシュの作成","isH3":true,"content":"<p>サービスワーカーを登録した後、ブラウザーはページ/サイト上でサービスワーカーをインストールおよび起動しようとします。</p>\n<p>インストールが成功裡に完了したとき、 install イベントが発行されます。通常、 install イベントはオフラインで実行する必要のある資産を、ブラウザーのオフラインキャッシュ領域に配置するために使われます。これをするために、サービスワーカーのストレージ API— <a href=\"/ja/docs/Web/API/Cache\"><code>cache</code></a> — を使用します。キャッシュはサービスワーカーのグローバルオブジェクトで、レスポンスによって配信された資産を、そのリクエストをキーにして保存することができます。この API はブラウザーの標準キャッシュと同じように動作しますが、そのドメインに特化しています。キャッシュが不要であることを再度伝えるまで持続します。これも、すべてを制御できます。</p>\n<p>サービスワーカーが <code>install</code> イベントを扱う方法の例です。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addResourcesToCache</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resources</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> cache <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>resources<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nself<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"install\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">addResourcesToCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"/sw-test/\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"/sw-test/index.html\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"/sw-test/style.css\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"/sw-test/app.js\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"/sw-test/image-list.js\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"/sw-test/star-wars-logo.jpg\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"/sw-test/gallery/bountyHunters.jpg\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"/sw-test/gallery/myLittleVader.jpg\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"/sw-test/gallery/snowTroopers.jpg\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<ol>\n  <li>ここでは サービスワーカー（thisによって）にイベントリスナーを追加して、イベントに<a href=\"/ja/docs/Web/API/ExtendableEvent/waitUntil\"><code>ExtendableEvent.waitUntil()</code></a> メソッドをチェーンしています ― これは <code>waitUntil()</code> の内部のコードが成功裡に実行されるまで、サービスワーカーがインストールされないことを保証します。</li>\n  <li><code>addResourcesToCache</code> の内部で、 <a href=\"/ja/docs/Web/API/CacheStorage/open\"><code>caches.open()</code></a> を使用して、 <code>v1</code> と呼ばれる新しいキャッシュを作成します。これはサイトリソースキャッシュのバージョン 1 となります。次に、作成されたキャッシュに対して <code>addAll()</code> を呼び出す関数を呼び出します。この関数の引数には、キャッシュしたいすべてのリソースのオリジンからの相対 URL の配列が渡されます。</li>\n  <li>プロミスが拒否された場合、インストールが失敗し、ワーカーは何もしません。これは、コードを修正し、次に登録が発生したときに再試行することができるので、問題ありません。</li>\n  <li>インストールに成功すると、サービスワーカーがアクティブになります。これは、サービスワーカーの初回インストール/アクティベーション時にはあまり明確な用途はありませんが、サービスワーカーが更新された時にはより大きな意味を持ちます（後の <a href=\"#%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%83%AF%E3%83%BC%E3%82%AB%E3%83%BC%E3%81%AE%E6%9B%B4%E6%96%B0\">サービスワーカーの更新</a>の節を参照してください）。</li>\n</ol>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>Note:</strong> <a href=\"/ja/docs/Web/API/Web_Storage_API\">localStorage</a> はサービスワーカーキャッシュと同じように動作しますが、同期処理であるため、サービスワーカー内では許可されていません。</p>\n</div>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>Note:</strong> 必要であれば、 <a href=\"/ja/docs/Web/API/IndexedDB_API\">IndexedDB</a> をサービスワーカー内でデータ保存のために使用することができます。</p>\n</div>"}},{"type":"prose","value":{"id":"要求に対するカスタム応答","title":"要求に対するカスタム応答","isH3":true,"content":"<p>サイトの資産がキャッシュされたので、サービスワーカーにキャッシュされたコンテンツを使って何かするように指示する必要があります。これは <code>fetch</code> イベントを使って簡単に実現できます。</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers/sw-fetch.png\" alt=\"\" width=\"579\" height=\"494\" loading=\"lazy\">\n</p>\n<p><code>fetch</code> イベントが発行されるたび、指定されたスコープ内の文書とこれらの文書が参照するすべてのリソースを含む、サービスワーカーによって制御されたリソースの取得します（例えば、<code>index.html</code> が画像を埋め込むためにオリジン間要求を行うと、サービスワーカーを通過します）。</p>\n<p><code>fetch</code> イベントリスナーをサービスワーカーに割り当てると、そのイベント上で <code>respondWith()</code> を呼び出すことで、 HTTP レスポンスを乗っ取って更新するというマジックを行うことができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>self<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fetch'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// magic goes here</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>それぞれのケースで、ネットワークリクエストの URL と一致するリソースで応答することから始めることができる。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>self<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fetch'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>\n    caches<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>caches.match(event.request)</code> は、ネットワークから要求された各リソースを、キャッシュにある同等のリソースが利用可能であれば、マッチングさせることができるようにします。マッチングは、通常の HTTP リクエストと同様に、URL と様々なヘッダーを介して行われます。</p>\n<p>マジックを定義するときに、他のいくつかのオプションを見てみましょう（<a href=\"/ja/docs/Web/API/Request\"><code>Request</code></a> と <a href=\"/ja/docs/Web/API/Response\"><code>Response</code></a> オブジェクトについての詳細な情報は、 <a href=\"/ja/docs/Web/API/Fetch_API\">フェッチ API ドキュメント</a> を参照してください）。</p>\n<ol>\n  <li><code><a href=\"/ja/docs/Web/API/Response/Response\" title=\"Response()\"><code>Response()</code></a></code> コンストラクターを使用すると、独自のレスポンスを作成することができます。この例では、単純なテキストデータを返却します。\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello from your friendly neighborhood service worker!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n  <li>以下のより複雑な <code>Response</code> は、オプションで標準的な HTTP レスポンスヘッダーを模したヘッダー群を渡すことができることを示しています。ここでは、合成レスポンスのコンテントタイプをブラウザーに伝えているだけです。\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;p&gt;Hello from your friendly neighborhood service worker!&lt;/p&gt;'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/html'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n  <li>キャッシュに一致するものがなかった場合、そのリソースに対する既定のネットワークリクエストを <a href=\"/ja/docs/Web/API/fetch\"><code>fetch()</code></a> で読み取るようにブラウザーに指示し、新しいリソースが利用可能であればネットワークから取得するようにすることができます。\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n  <li>もしキャッシュに一致するものが見つからず、ネットワークも利用できない場合は、 <a href=\"/ja/docs/Web/API/CacheStorage/match\" title=\"match()\"><code>match()</code></a> を使ってレスポンスとしてある種の既定の代替ページでリクエストに一致させればよいでしょう、例えばこのようにします。\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>caches<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./fallback.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n  <li><a href=\"/ja/docs/Web/API/FetchEvent\"><code>FetchEvent</code></a> が返す <a href=\"/ja/docs/Web/API/Request\"><code>Request</code></a> オブジェクトの引数を呼び出すことで、それぞれのリクエストに関する多くの情報を取得することができます。\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>url\nevent<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>method\nevent<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>headers\nevent<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>body\n</code></pre></div>\n  </li>\n</ol>"}},{"type":"prose","value":{"id":"失敗した要求の復旧","title":"失敗した要求の復旧","isH3":false,"content":"<p>では、 <code>caches.match(event.request)</code> はサービスワーカーのキャッシュに一致するものがある場合は良いのですが、一致しない場合はどうでしょうか？もし、何らかの失敗処理を提供しなければ、プロミスは <code>undefined</code> で解決され、何も返されないでしょう。</p>\n<p>幸いなことに、サービスワーカーのプロミスベースの構造により、成功に向けた更なるオプションを提供することは些細なことです。こんなことができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">cacheFirst</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> responseFromCache <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>responseFromCache<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> responseFromCache<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nself<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fetch'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token function\">cacheFirst</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>キャッシュにないリソースは、ネットワークからリクエストされます。</p>\n<p>もし本当に賢いのであれば、ネットワークからリソースをリクエストするだけでなく、キャッシュに保存して、そのリソースに対する後の要求がオフラインでも取得できるようにします つまり、 Star Wars のギャラリーに新しい画像が追加された場合、アプリは自動的にその画像を取得してキャッシュすることができるのです。以下のようになります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">putInCache</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> cache <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">cacheFirst</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> responseFromCache <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>responseFromCache<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> responseFromCache<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> responseFromNetwork <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">putInCache</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> responseFromNetwork<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> responseFromNetwork<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nself<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fetch'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token function\">cacheFirst</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>リクエスト URL がキャッシュにない場合、 <code>await fetch(request)</code> でネットワークリクエストからリソースをリクエストします。その後、レスポンスのクローンをキャッシュに格納します。 <code>putInCache</code> 関数は <code>caches.open('v1')</code> と <code>cache.put()</code> を使用して、リソースをキャッシュに追加します。本来のレスポンスはブラウザーに返され、それを呼び出したページに渡されます。</p>\n<p>リクエストストリームとレスポンスストリームは一度しか読み込めないので、レスポンスの複製を作成する必要があります。ブラウザーにレスポンスを返してキャッシュに入れるには、それを複製する必要があります。つまり、オリジナルはブラウザーに返され、クローンはキャッシュに送られます。これらはそれぞれ一度だけ読み込まれます。</p>\n<p>少し奇妙に見えるのは、 <code>putInCache</code> が返すプロミスが待ち状態でないことです。しかしその理由は、レスポンスクローンがキャッシュに追加されるまで、レスポンスを返すのを待ちたくないからです。</p>\n<p>今ある唯一の問題は、リクエストがキャッシュに何も一致せず、ネットワークも利用できない場合、やはりリクエストは失敗してしまうということです。何が起こっても、ユーザーは少なくとも何かを得ることができるように、既定の代替処理を提供することにしましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">putInCache</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> cache <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">cacheFirst</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> preloadResponsePromise<span class=\"token punctuation\">,</span> fallbackUrl <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// First try to get the resource from the cache</span>\n  <span class=\"token keyword\">const</span> responseFromCache <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>responseFromCache<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> responseFromCache<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Next try to get the resource from the network</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> responseFromNetwork <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// response may be used only once</span>\n    <span class=\"token comment\">// we need to save clone to put one copy in cache</span>\n    <span class=\"token comment\">// and serve second one</span>\n    <span class=\"token function\">putInCache</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> responseFromNetwork<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> responseFromNetwork<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> fallbackResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>fallbackUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fallbackResponse<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> fallbackResponse<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// when even the fallback response is not available,</span>\n    <span class=\"token comment\">// there is nothing we can do, but we must always</span>\n    <span class=\"token comment\">// return a Response object</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Network error happened'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span> <span class=\"token number\">408</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/plain'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nself<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fetch\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">cacheFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">request</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">fallbackUrl</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/sw-test/gallery/myLittleVader.jpg\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>この代替画像を選択したのは、失敗する可能性のあるアップデートは新しい画像だけで、他のすべては先に見た <code>install</code> イベントのリスナーでのインストールに依存しているためです。</p>"}},{"type":"prose","value":{"id":"サービスワーカーのナビゲーション先読み","title":"サービスワーカーのナビゲーション先読み","isH3":false,"content":"<p>\n  有効にすると、<a href=\"/ja/docs/Web/API/NavigationPreloadManager\">ナビゲーション先読み</a>機能は、フェッチ要求がなされるとすぐに、サービスワーカーの起動と並行してリソースのダウンロードを開始します。\n  これにより、サービスワーカーが起動するまで待つ必要がなく、ページへのナビゲーションですぐにダウンロードが開始されるようになります。\n  この遅延は比較的稀にしか発生しませんが、発生した場合は避けられないものであり、重大なものになる可能性があります。\n</p>\n<p>まず、サービスワーカー起動時に <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/NavigationPreloadManager/enable\"><code>registration.navigationPreload.enable()</code> <small>(en-US)</small></a> を使ってこの機能を有効にする必要があります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">enableNavigationPreload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>registration<span class=\"token punctuation\">.</span>navigationPreload<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Enable navigation preloads!</span>\n    <span class=\"token keyword\">await</span> self<span class=\"token punctuation\">.</span>registration<span class=\"token punctuation\">.</span>navigationPreload<span class=\"token punctuation\">.</span><span class=\"token function\">enable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nself<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'activate'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span><span class=\"token function\">enableNavigationPreload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>そして、<a href=\"/ja/docs/Web/API/FetchEvent/PreloadResponse\" title=\"event.preloadResponse\"><code>event.preloadResponse</code></a> を使って <code>fetch</code> イベントハンドラーの中で先読みされたリソースのダウンロードが終了するのを待ちます。</p>\n<p>前の節の例に引き続き、キャッシュチェックの後に先読みされたリソースを待機し、成功しなかった場合はネットワークから取得するコードを挿入します。</p>\n<p>新しい処理は次の通りです。</p>\n<ol>\n  <li>キャッシュをチェック</li>\n  <li>\n    <code>event.preloadResponse</code> を待ちます。これは <code>preloadResponsePromise</code> として <code>cacheFirst</code> 関数に渡されます。\n    結果が返ってきたら、それをキャッシュします。\n  </li>\n  <li>どちらも定義されていない場合は、ネットワークに行きます。</li>\n</ol>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addResourcesToCache</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resources</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> cache <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'v1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>resources<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">putInCache</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> cache <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'v1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">cacheFirst</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> preloadResponsePromise<span class=\"token punctuation\">,</span> fallbackUrl <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// First try to get the resource from the cache</span>\n  <span class=\"token keyword\">const</span> responseFromCache <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>responseFromCache<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> responseFromCache<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Next try to use (and cache) the preloaded response, if it's there</span>\n  <span class=\"token keyword\">const</span> preloadResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> preloadResponsePromise<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preloadResponse<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">'using preload response'</span><span class=\"token punctuation\">,</span> preloadResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">putInCache</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> preloadResponse<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> preloadResponse<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Next try to get the resource from the network</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> responseFromNetwork <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// response may be used only once</span>\n    <span class=\"token comment\">// we need to save clone to put one copy in cache</span>\n    <span class=\"token comment\">// and serve second one</span>\n    <span class=\"token function\">putInCache</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> responseFromNetwork<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> responseFromNetwork<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> fallbackResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>fallbackUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fallbackResponse<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> fallbackResponse<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// when even the fallback response is not available,</span>\n    <span class=\"token comment\">// there is nothing we can do, but we must always</span>\n    <span class=\"token comment\">// return a Response object</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Network error happened'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span> <span class=\"token number\">408</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/plain'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Enable navigation preload</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">enableNavigationPreload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>registration<span class=\"token punctuation\">.</span>navigationPreload<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Enable navigation preloads!</span>\n    <span class=\"token keyword\">await</span> self<span class=\"token punctuation\">.</span>registration<span class=\"token punctuation\">.</span>navigationPreload<span class=\"token punctuation\">.</span><span class=\"token function\">enable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nself<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'activate'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span><span class=\"token function\">enableNavigationPreload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nself<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'install'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">addResourcesToCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      <span class=\"token string\">'/sw-test/'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'/sw-test/index.html'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'/sw-test/style.css'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'/sw-test/app.js'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'/sw-test/image-list.js'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'/sw-test/star-wars-logo.jpg'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'/sw-test/gallery/bountyHunters.jpg'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'/sw-test/gallery/myLittleVader.jpg'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'/sw-test/gallery/snowTroopers.jpg'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nself<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fetch'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">cacheFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">request</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">preloadResponsePromise</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>preloadResponse<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">fallbackUrl</span><span class=\"token operator\">:</span> <span class=\"token string\">'/sw-test/gallery/myLittleVader.jpg'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>\n  この例では、リソースを「通常」ダウンロードしても先読みしても、同じデータをダウンロードしてキャッシュすることに注意してください。\n  代わりに、先読み時に別のリソースをダウンロードし、キャッシュするように選択することもできます。\n  詳細については、<a href=\"/ja/docs/Web/API/NavigationPreloadManager#%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B9\"><code>NavigationPreloadManager</code> &gt; カスタムレスポンス</a>を参照してください。\n</p>"}},{"type":"prose","value":{"id":"サービスワーカーの更新","title":"サービスワーカーの更新","isH3":false,"content":"<p>サービスワーカーが以前にインストールされているが、ページの更新や読み込みの時に新しいバージョンのワーカーが利用できる場合、新しいバージョンはバックグラウンドでインストールされますが、まだ起動しません。まだ古いサービスワーカーを使用している読み込まれたページがなくなったら、新しいサービスワーカーが起動します。</p>\n<p>新しいサービスワーカーで、 <code>install</code> イベントリスナーをこのようなもの（新しいバージョン番号を通知するもの）に更新したくなるでしょう。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addResourcesToCache</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resources</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> cache <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'v2'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>resources<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nself<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'install'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span><span class=\"token function\">addResourcesToCache</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">'./sw-test/'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'./sw-test/index.html'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'./sw-test/style.css'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'./sw-test/app.js'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'./sw-test/image-list.js'</span><span class=\"token punctuation\">,</span>\n\n      …\n\n       <span class=\"token comment\">// 新しいバージョンのための新しい他のリソースを入れてください...</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これが発生している間、以前のバージョンはまだ fetch に対して応答します。新しいバージョンは、バックグラウンドでインストールされています。以前の <code>v1</code> キャッシュを妨げないように、新しいキャッシュを <code>v2</code> と呼んでいます。</p>\n<p>どのページも現在のバージョンを使用していないとき、新しいワーカーが有効化し、 fetch に応答するようになります。</p>"}},{"type":"prose","value":{"id":"古いキャッシュの削除","title":"古いキャッシュの削除","isH3":true,"content":"<p><code>activate</code> イベントを取得することもできます。これは一般的に、実行中の以前のバージョンを破壊するために使われます。たとえば、古いキャッシュを取り除きます。これはディスクスペースがいっぱいになることを防ぐために、もはや不要なデータを削除するのにも役立ちます — それぞれのブラウザーはサービスワーカーが使うために与えられたキャッシュストレージの容量に対して厳しい制限があります。ブラウザーはディスクスペースを管理するために最善を尽くしていますが、オリジンのためのキャッシュストレージを削除するかもしれません。 一般的にブラウザーはオリジンのためのデータをすべて削除するか、オリジンのためのデータを持っていません。</p>\n<p><code>waitUntil()</code> に渡されたプロミスは、完了するまで他のイベントをブロックするので、新しいキャッシュ上で初めての <code>fetch</code> イベントを取得するときには、クリーンアップ操作が完了していると確信できます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">deleteCache</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">key</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">deleteOldCaches</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> cacheKeepList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'v2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">const</span> keyList <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">const</span> cachesToDelete <span class=\"token operator\">=</span> keyList<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">!</span>cacheKeepList<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>cachesToDelete<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>deleteCache<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nself<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'activate'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span><span class=\"token function\">deleteOldCaches</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"開発ツール","title":"開発ツール","isH3":false,"content":"<p>Chrome には、現在サービスワーカーのアクティビティや端末上のストレージを示す <code>chrome://inspect/#service-workers</code> があり、また、より詳細な情報の表示や、ワーカープロセスを開始/停止/デバッグできる <code>chrome://serviceworker-internals</code> があります。将来的には、不良または存在しない接続をエミュレートするスロットリング/オフラインモードを実装する予定です。これは本当に素晴らしい機能です。</p>\n<p>Firefox もサービスワーカーに関する便利なツールを実装し始めています。</p>\n<ul>\n  <li><a href=\"https://firefox-source-docs.mozilla.org/devtools-user/about_colon_debugging/index.html\" class=\"external\" rel=\" noopener\"><code>about:debugging</code></a> を開くと、サービスワーカーで何が登録されているかを見たり、更新/削除したりすることができます。</li>\n  <li>テストを行う場合、 <a href=\"https://firefox-source-docs.mozilla.org/devtools-user/settings/index.html\" class=\"external\" rel=\" noopener\">Firefox 開発者ツール設定</a>で、\"HTTP による Service Worker を有効化 (ツールボックスを開いたとき)\" をチェックすることで、 HTTPS 制約を回避できます。</li>\n  <li>Firefox のカスタマイズオプションで利用できる \"Forget\" ボタンで、サービスワーカーおよびそのキャッシュを消去することができます (<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1252998\" class=\"external\" rel=\" noopener\">バグ&nbsp;1252998</a>)。</li>\n</ul>\n<div class=\"notecard note\" id=\"sect6\">\n  <p><strong>Note:</strong> ローカルでの開発のために、 <code>http://localhost</code> から（例えば <code>me@localhost:/my/app$ python -m SimpleHTTPServer</code> を使用して）アプリのサービスを行うことができます。<a href=\"https://www.w3.org/TR/service-workers/#security-considerations\" class=\"external\" rel=\" noopener\">セキュリティの考慮事項</a>を参照してください。</p>\n</div>"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"http://blog.88mph.io/2017/07/28/understanding-service-workers/\" class=\"external\" rel=\" noopener\">Understanding Service Workers</a> (英語)</li>\n  <li><a href=\"https://github.com/mozilla/serviceworker-cookbook\" class=\"external\" rel=\" noopener\">The Service Worker Cookbook</a> (英語)</li>\n  <li><a href=\"https://jakearchibald.github.io/isserviceworkerready/\" class=\"external\" rel=\" noopener\">Is ServiceWorker ready?</a> (英語)</li>\n  <li><a href=\"sw101.png\">Service Workers 101 cheatsheet</a> をダウンロード (英語)</li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise\">プロミス</a></li>\n  <li><a href=\"/ja/docs/Web/API/Web_Workers_API/Using_web_workers\">ウェブワーカーの使用</a></li>\n</ul>"}}],"toc":[{"text":"サービスワーカーの前提条件","id":"サービスワーカーの前提条件"},{"text":"サービスワーカーを実行するための設定","id":"サービスワーカーを実行するための設定"},{"text":"基本構造","id":"基本構造"},{"text":"失敗した要求の復旧","id":"失敗した要求の復旧"},{"text":"サービスワーカーのナビゲーション先読み","id":"サービスワーカーのナビゲーション先読み"},{"text":"サービスワーカーの更新","id":"サービスワーカーの更新"},{"text":"開発ツール","id":"開発ツール"},{"text":"関連情報","id":"関連情報"}],"summary":"この記事はサービスワーカーを使い始めるための情報を提供するページです。基本的な構造、サービスワーカーの登録、新しいサービスワーカーのインストールと有効化のプロセス、サービスワーカーの更新、キャッシュや応答の操作を含めた、オフラインで動作するシンプルなアプリケーションの機能についてです。","popularity":0.0005,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using Service Workers","locale":"en-US","native":"English (US)"},{"title":"Usar Service Workers","locale":"es","native":"Español"},{"title":"Utiliser les Service Workers","locale":"fr","native":"Français"},{"title":"Using Service Workers","locale":"ko","native":"한국어"},{"title":"Usando Service Workers","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Использование Service Worker","locale":"ru","native":"Русский"},{"title":"使用 Service Workers","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/service_worker_api/using_service_workers","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/service_worker_api/using_service_workers/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/Service_Worker_API","title":"サービスワーカー API"},{"uri":"/ja/docs/Web/API/Service_Worker_API/Using_Service_Workers","title":"サービスワーカーの使用"}],"pageTitle":"サービスワーカーの使用 - Web API | MDN","noIndexing":false}}