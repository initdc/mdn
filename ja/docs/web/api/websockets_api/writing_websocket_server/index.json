{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"C# で WebSocket サーバーを記述する","mdn_url":"/ja/docs/Web/API/WebSockets_API/Writing_WebSocket_server","locale":"ja","native":"日本語","sidebarHTML":"","body":[{"type":"prose","value":{"id":"はじめに","title":"はじめに","isH3":false,"content":"<p>WebSocket API を使用したい場合は、サーバーを所有していると便利です。この記事では、C# で記述する方法を説明します。どんなサーバーサイドの言語でも行うことができますが、わかりやすく理解しやすいように、 Microsoft の言語を選択しました。</p>\n<p>このサーバーは <a href=\"https://tools.ietf.org/html/rfc6455\" class=\"external\" rel=\" noopener\">RFC 6455</a> に準拠しているため、Chrome バージョン 16、Firefox 11、IE 10 以上の接続のみを処理します。</p>"}},{"type":"prose","value":{"id":"最初のステップ","title":"最初のステップ","isH3":false,"content":"<p>WebSocket は <a href=\"http://en.wikipedia.org/wiki/Transmission_Control_Protocol\" class=\"external\" rel=\" noopener\">TCP (伝送制御プロトコル)</a> 接続を介して通信します。幸いにも、C# には <a href=\"https://msdn.microsoft.com/library/system.net.sockets.tcplistener.aspx\" class=\"external\" rel=\" noopener\">TcpListener</a> クラスがあり、その名前が示すようにします。これは System.Net.Sockets 名前空間にあります。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> 書く量を減らすために名前空間を <code>using</code> キーワードに含めることをお勧めします。毎回完全な名前空間を入力することなく、名前空間のクラスを使用できます。</p>\n</div>"}},{"type":"prose","value":{"id":"tcplistener","title":"TcpListener","isH3":true,"content":"<p>コンストラクター:</p>\n<div class=\"code-example\"><pre class=\"brush: cs notranslate\">TcpListener(System.Net.IPAddress localaddr, int port)\n</pre></div>\n<p><code>localaddr</code> はリスナーの IP を指定し、<code>port</code> はポートを指定します。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> <code>string</code> から <code>IPAddress</code> オブジェクトを作成するには、 <code>IPAddress</code> の静的メソッド <code>Parse</code> を使用してください。</p>\n</div>\n<p>メソッド:</p>\n<ul>\n  <li><code>Start()</code></li>\n  <li>\n    <code>System.Net.Sockets.TcpClient AcceptTcpClient()</code>\n    TCP 接続を待ち、それを受け取り、TcpClient オブジェクトとして返します。\n  </li>\n</ul>\n<p>ベアボーンサーバーの実装は次のとおりです。</p>\n<div class=\"code-example\"><pre class=\"brush: cs notranslate\">using System.Net.Sockets;\nusing System.Net;\nusing System;\n\nclass Server {\n    public static void Main() {\n        TcpListener server = new TcpListener(IPAddress.Parse(\"127.0.0.1\"), 80);\n\n        server.Start();\n        Console.WriteLine(\"Server has started on 127.0.0.1:80.{0}Waiting for a connection...\", Environment.NewLine);\n\n        TcpClient client = server.AcceptTcpClient();\n\n        Console.WriteLine(\"A client connected.\");\n    }\n}\n</pre></div>"}},{"type":"prose","value":{"id":"tcpclient","title":"TcpClient","isH3":true,"content":"<p>メソッド:</p>\n<ul>\n  <li>\n    <code>System.Net.Sockets.NetworkStream GetStream()</code>\n    通信チャネルであるストリームを取得します。チャンネルの両側には読み書き機能があります。\n  </li>\n</ul>\n<p>プロパティ:</p>\n<ul>\n  <li>\n    <code>int Available</code>\n    このプロパティは送信されたデータのバイト数を示します。値は <code>NetworkStream.DataAvailable</code> が <em>true</em> になるまでゼロです。\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"networkstream","title":"NetworkStream","isH3":true,"content":"<p>メソッド:</p>\n<ul>\n  <li>\n    <div class=\"code-example\"><pre class=\"brush: cs notranslate\">Write(Byte[] buffer, int offset, int size)\n</pre></div>buffer からバイトを書き込み、offset と size はメッセージの長さを決定します。\n  </li>\n  <li>\n    <div class=\"code-example\"><pre class=\"brush: cs notranslate\">Read(Byte[] buffer, int offset, int size)\n</pre></div>buffer を読み込みます。offset と size はメッセージの長さを決定します。\n  </li>\n</ul>\n<p>例を拡張してみましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: cs notranslate\">TcpClient client = server.AcceptTcpClient();\n\nConsole.WriteLine(\"A client connected.\");\n\nNetworkStream stream = client.GetStream();\n\n//enter to an infinite cycle to be able to handle every change in stream\nwhile (true) {\n    while (!stream.DataAvailable);\n\n    Byte[] bytes = new Byte[client.Available];\n\n    stream.Read(bytes, 0, bytes.Length);\n}\n</pre></div>"}},{"type":"prose","value":{"id":"ハンドシェイク","title":"ハンドシェイク","isH3":false,"content":"<p>クライアントがサーバーに接続すると、単純な HTTP リクエストから WebSocket への接続をアップグレードするための GET リクエストが送信されます。これはハンドシェイクと呼ばれます。</p>\n<p>このサンプルコードはクライアントから GET を検出できます。これは、メッセージの最初の 3 バイトが利用可能になるまでブロックされることに注意してください。運用環境では、代替ソリューションを検討する必要があります。</p>\n<div class=\"code-example\"><pre class=\"brush: cs notranslate\">using System.Text;\nusing System.Text.RegularExpressions;\n\nwhile(client.Available &lt; 3)\n{\n   // wait for enough bytes to be available\n}\n\nByte[] bytes = new Byte[client.Available];\n\nstream.Read(bytes, 0, bytes.Length);\n\n//translate bytes of request to string\nString data = Encoding.UTF8.GetString(bytes);\n\nif (Regex.IsMatch(data, \"^GET\")) {\n\n} else {\n\n}\n</pre></div>\n<p>リクエストは簡単に作成できますが、理解するのは少し難しいかもしれません。サーバーのハンドシェイクの完全な説明は RFC 6455 の 4.2.2 項にあります。目的のために、簡単なレスポンスを作成します。</p>\n<p>やらなければならないことは次の通りです。</p>\n<ol>\n  <li>先行または後続空白なしで \"Sec-WebSocket-Key\" リクエストヘッダーの値を取得します</li>\n  <li>それを \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\" (RFC 6455 で指定された特別な GUID)</li>\n  <li>新しい値の SHA-1 および Base64 ハッシュを計算します</li>\n  <li>HTTP レスポンスの \"Sec-WebSocket-Accept\" レスポンスヘッダーの値としてハッシュを書き戻します</li>\n</ol>\n<div class=\"code-example\"><pre class=\"brush: cs notranslate\"> if (new System.Text.RegularExpressions.Regex(\"^GET\").IsMatch(data))\n{\n    const string eol = \"\\r\\n\"; // HTTP/1.1 defines the sequence CR LF as the end-of-line marker\n\n    Byte[] response = Encoding.UTF8.GetBytes(\"HTTP/1.1 101 Switching Protocols\" + eol\n        + \"Connection: Upgrade\" + eol\n        + \"Upgrade: websocket\" + eol\n        + \"Sec-WebSocket-Accept: \" + Convert.ToBase64String(\n            System.Security.Cryptography.SHA1.Create().ComputeHash(\n                Encoding.UTF8.GetBytes(\n                    new System.Text.RegularExpressions.Regex(\"Sec-WebSocket-Key: (.*)\").Match(data).Groups[1].Value.Trim() + \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\"\n                )\n            )\n        ) + eol\n        + eol);\n\n    stream.Write(response, 0, response.Length);\n}\n</pre></div>"}},{"type":"prose","value":{"id":"メッセージのデコード","title":"メッセージのデコード","isH3":false,"content":"<p>ハンドシェイクが成功すると、クライアントはエンコードされたメッセージをサーバーに送信します。</p>\n<p>\"MDN\" を送信すると、次のバイト列が得られます。</p>\n<pre class=\"notranslate\">129 131 61 84 35 6 112 16 109\n</pre>\n<p>これらのバイト列の意味を見てみましょう。</p>\n<p>現在 129 の値を持つ最初のバイトは、次のように分解するビットフィールドです。</p>\n<table>\n  <thead>\n    <tr>\n      <th>FIN (Bit 0)</th>\n      <th>RSV1 (Bit 1)</th>\n      <th>RSV2 (Bit 2)</th>\n      <th>RSV3 (Bit 3)</th>\n      <th>Opcode (Bit 4:7)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0x1=0001</td>\n    </tr>\n  </tbody>\n</table>\n<ul>\n  <li>FIN ビット: このビットは完全なメッセージがクライアントから送信されたかどうかを示します。メッセージはフレームで送信されるかもしれませんが、今のところ単純なものにします。</li>\n  <li>RSV1, RSV2, RSV3: エクステンションがネゴシエートされない限り、これらのビットは 0 でなくてはなりません。</li>\n  <li>Opcode: これらのビットは受信したメッセージの種類を記述します。 Opcode 0x1 は、これがテキストメッセージであることを意味します。 <a href=\"https://datatracker.ietf.org/doc/html/rfc6455#section-5.2\" class=\"external\" rel=\" noopener\">Opcode の完全なリスト</a></li>\n</ul>\n<p>現在 131 の値を持つ 2 番目のバイトは、次のように分解する別のビットフィールドです。</p>\n<table>\n  <thead>\n    <tr>\n      <th>MASK (Bit 0)</th>\n      <th>ペイロード長 (Bit 1:7)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1</td>\n      <td>0x83=0000011</td>\n    </tr>\n  </tbody>\n</table>\n<ul>\n  <li>MASK ビット: \"ペイロードデータ\" がマスクされているかどうかを定義します。1 に設定すると、マスキングキーが Masking-Key にあり、これは \"ペイロードデータ\" のマスクを解除するために使用されます。クライアントからサーバーへのすべてのメッセージはこのビットが設定されています。</li>\n  <li>ペイロードの長さ: この値が 0〜125 の場合、メッセージの長さになります。 126 の場合、次の 2 バイト (16 ビットの符号なし整数) が長さになります。127 の場合、次の 8 バイト (64ビットの符号なし整数) が長さになります。</li>\n</ul>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> 最初のビットはクライアントからサーバーへのメッセージでは常に 1 なので、このバイトから 128 を引いて MASK ビットを取り除くことができます。</p>\n</div>\n<p>メッセージに MASK ビットが設定されていることに注意してください。これは次の 4 バイト (61、84、35、6) がメッセージのデコードに使用されるマスクバイトであることを意味します。これらのバイトはすべてのメッセージとともに変化します。</p>\n<p>残りのバイトはエンコードされたメッセージペイロードです。</p>"}},{"type":"prose","value":{"id":"デコードアルゴリズム","title":"デコードアルゴリズム","isH3":false,"content":"<p><em>D_i</em> = <em>E_i</em> XOR <em>M</em>_(<em>i</em> mod 4)</p>\n<p>D は復号されたメッセージ配列、E は符号化されたメッセージ配列、M はマスクバイト配列、i はデコードするメッセージバイトの位置です。</p>\n<p>C# の例です。</p>\n<div class=\"code-example\"><pre class=\"brush: cs notranslate\">Byte[] decoded = new Byte[3];\nByte[] encoded = new Byte[3] {112, 16, 109};\nByte[] mask = new Byte[4] {61, 84, 35, 6};\n\nfor (int i = 0; i &lt; encoded.Length; i++) {\n    decoded[i] = (Byte)(encoded[i] ^ mask[i % 4]);\n}\n</pre></div>"}},{"type":"prose","value":{"id":"全体像","title":"全体像","isH3":false,"content":""}},{"type":"prose","value":{"id":"wsserver.cs","title":"wsserver.cs","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: cs notranslate\">//\n// csc wsserver.cs\n// wsserver.exe\n\nusing System;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Text;\nusing System.Text.RegularExpressions;\n\nclass Server {\n    public static void Main() {\n        string ip = \"127.0.0.1\";\n        int port = 80;\n        var server = new TcpListener(IPAddress.Parse(ip), port);\n\n        server.Start();\n        Console.WriteLine(\"Server has started on {0}:{1}, Waiting for a connection...\", ip, port);\n\n        TcpClient client = server.AcceptTcpClient();\n        Console.WriteLine(\"A client connected.\");\n\n        NetworkStream stream = client.GetStream();\n\n        // enter to an infinite cycle to be able to handle every change in stream\n        while (true) {\n            while (!stream.DataAvailable);\n            while (client.Available &lt; 3); // match against \"get\"\n\n            byte[] bytes = new byte[client.Available];\n            stream.Read(bytes, 0, client.Available);\n            string s = Encoding.UTF8.GetString(bytes);\n\n            if (Regex.IsMatch(s, \"^GET\", RegexOptions.IgnoreCase)) {\n                Console.WriteLine(\"=====Handshaking from client=====\\n{0}\", s);\n\n                // 1. Obtain the value of the \"Sec-WebSocket-Key\" request header without any leading or trailing whitespace\n                // 2. Concatenate it with \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\" (a special GUID specified by RFC 6455)\n                // 3. Compute SHA-1 and Base64 hash of the new value\n                // 4. Write the hash back as the value of \"Sec-WebSocket-Accept\" response header in an HTTP response\n                string swk = Regex.Match(s, \"Sec-WebSocket-Key: (.*)\").Groups[1].Value.Trim();\n                string swka = swk + \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\";\n                byte[] swkaSha1 = System.Security.Cryptography.SHA1.Create().ComputeHash(Encoding.UTF8.GetBytes(swka));\n                string swkaSha1Base64 = Convert.ToBase64String(swkaSha1);\n\n                // HTTP/1.1 defines the sequence CR LF as the end-of-line marker\n                byte[] response = Encoding.UTF8.GetBytes(\n                    \"HTTP/1.1 101 Switching Protocols\\r\\n\" +\n                    \"Connection: Upgrade\\r\\n\" +\n                    \"Upgrade: websocket\\r\\n\" +\n                    \"Sec-WebSocket-Accept: \" + swkaSha1Base64 + \"\\r\\n\\r\\n\");\n\n                stream.Write(response, 0, response.Length);\n            } else {\n                bool fin = (bytes[0] &amp; 0b10000000) != 0,\n                    mask = (bytes[1] &amp; 0b10000000) != 0; // must be true, \"All messages from the client to the server have this bit set\"\n\n                int opcode = bytes[0] &amp; 0b00001111, // expecting 1 - text message\n                    msglen = bytes[1] - 128, // &amp; 0111 1111\n                    offset = 2;\n\n                if (msglen == 126) {\n                    // was ToUInt16(bytes, offset) but the result is incorrect\n                    msglen = BitConverter.ToUInt16(new byte[] { bytes[3], bytes[2] }, 0);\n                    offset = 4;\n                } else if (msglen == 127) {\n                    Console.WriteLine(\"TODO: msglen == 127, needs qword to store msglen\");\n                    // i don't really know the byte order, please edit this\n                    // msglen = BitConverter.ToUInt64(new byte[] { bytes[5], bytes[4], bytes[3], bytes[2], bytes[9], bytes[8], bytes[7], bytes[6] }, 0);\n                    // offset = 10;\n                }\n\n                if (msglen == 0)\n                    Console.WriteLine(\"msglen == 0\");\n                else if (mask) {\n                    byte[] decoded = new byte[msglen];\n                    byte[] masks = new byte[4] { bytes[offset], bytes[offset + 1], bytes[offset + 2], bytes[offset + 3] };\n                    offset += 4;\n\n                    for (int i = 0; i &lt; msglen; ++i)\n                        decoded[i] = (byte)(bytes[offset + i] ^ masks[i % 4]);\n\n                    string text = Encoding.UTF8.GetString(decoded);\n                    Console.WriteLine(\"{0}\", text);\n                } else\n                    Console.WriteLine(\"mask bit not set\");\n\n                Console.WriteLine();\n            }\n        }\n    }\n}\n</pre></div>"}},{"type":"prose","value":{"id":"client.html","title":"client.html","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">doctype</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token style\"><span class=\"token language-css\">\n    <span class=\"token selector\">textarea</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">vertical-align</span><span class=\"token punctuation\">:</span> bottom<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token selector\">#output</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token selector\">#output &gt; p</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">overflow-wrap</span><span class=\"token punctuation\">:</span> break-word<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token selector\">#output span</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token selector\">#output span.error</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>WebSocket Test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>textarea</span> <span class=\"token attr-name\">cols</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>60</span> <span class=\"token attr-name\">rows</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>6</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>textarea</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">&gt;</span></span>send<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>output</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token comment\">// http://www.websocket.org/echo.html</span>\n\n    <span class=\"token keyword\">var</span> button <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        output <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#output\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        textarea <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"textarea\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// wsUri = \"ws://echo.websocket.org/\",</span>\n        wsUri <span class=\"token operator\">=</span> <span class=\"token string\">\"ws://127.0.0.1/\"</span><span class=\"token punctuation\">,</span>\n        websocket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span>wsUri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    button<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> onClickButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    websocket<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onopen</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">writeToScreen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CONNECTED\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">doSend</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WebSocket rocks\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    websocket<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclose</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">writeToScreen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DISCONNECTED\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    websocket<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">writeToScreen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;span&gt;RESPONSE: \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>data <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;/span&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    websocket<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">writeToScreen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;span class=error&gt;ERROR:&lt;/span&gt; \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">doSend</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">writeToScreen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SENT: \"</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        websocket<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">writeToScreen</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        output<span class=\"token punctuation\">.</span><span class=\"token function\">insertAdjacentHTML</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"afterbegin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;p&gt;\"</span> <span class=\"token operator\">+</span> message <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;/p&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">onClickButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> text <span class=\"token operator\">=</span> textarea<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n\n        text <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">doSend</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        textarea<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        textarea<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/API/WebSockets_API/Writing_WebSocket_servers\">WebSocket サーバーの記述</a></li>\n</ul>"}}],"toc":[{"text":"はじめに","id":"はじめに"},{"text":"最初のステップ","id":"最初のステップ"},{"text":"ハンドシェイク","id":"ハンドシェイク"},{"text":"メッセージのデコード","id":"メッセージのデコード"},{"text":"デコードアルゴリズム","id":"デコードアルゴリズム"},{"text":"全体像","id":"全体像"},{"text":"関連情報","id":"関連情報"}],"summary":"WebSocket API を使用したい場合は、サーバーを所有していると便利です。この記事では、C# で記述する方法を説明します。どんなサーバーサイドの言語でも行うことができますが、わかりやすく理解しやすいように、 Microsoft の言語を選択しました。","popularity":0.0003,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Writing a WebSocket server in C#","locale":"en-US","native":"English (US)"},{"title":"Escribiendo un servidor WebSocket en C#","locale":"es","native":"Español"},{"title":"Escrevendo um servidor WebSocket em C #","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"用 C＃来编写 WebSocket 服务器","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/websockets_api/writing_websocket_server","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/websockets_api/writing_websocket_server/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/WebSockets_API","title":"WebSocket API (WebSockets)"},{"uri":"/ja/docs/Web/API/WebSockets_API/Writing_WebSocket_server","title":"C# で WebSocket サーバーを記述する"}],"pageTitle":"C# で WebSocket サーバーを記述する - Web API | MDN","noIndexing":false}}