{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"WebSocket API (WebSockets)","mdn_url":"/ja/docs/Web/API/WebSockets_API","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/Websockets_API\">Websockets API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>ガイド</summary><ol><li><a href=\"/ja/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications\">Writing WebSocket client applications</a></li><li><a href=\"/ja/docs/Web/API/WebSockets_API/Writing_WebSocket_servers\">Writing WebSocket servers</a></li><li><a href=\"/ja/docs/Web/API/WebSockets_API/Writing_WebSocket_server\">Writing a WebSocket server in C#</a></li><li><a href=\"/ja/docs/Web/API/WebSockets_API/Writing_a_WebSocket_server_in_Java\">Writing a WebSocket server in Java</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>インターフェイス</summary><ol><li><a href=\"/ja/docs/Web/API/WebSocket\"><code>WebSocket</code></a></li><li><a href=\"/ja/docs/Web/API/CloseEvent\"><code>CloseEvent</code></a></li><li><a href=\"/ja/docs/Web/API/MessageEvent\"><code>MessageEvent</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong>WebSocket API</strong> は、ユーザーのブラウザーとサーバー間で対話的な通信セッションを開くことができる先進技術です。この API によって、サーバーにメッセージを送信したり、応答をサーバーにポーリングすることなく、イベント駆動型のレスポンスを受信したりすることができます。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> WebSocket のコネクションは機能的にどこか標準 Unix スタイルのソケットに似ていますが、関連はありません。</p>\n</div>"}},{"type":"prose","value":{"id":"インターフェイス","title":"インターフェイス","isH3":false,"content":"<dl>\n  <dt id=\"websocket\"><a href=\"/ja/docs/Web/API/WebSocket\"><code>WebSocket</code></a></dt>\n  <dd>\n    <p>WebSocket サーバーに接続し、その接続を通じてデータを送受信するための主要インターフェイス</p>\n  </dd>\n  <dt id=\"closeevent\"><a href=\"/ja/docs/Web/API/CloseEvent\"><code>CloseEvent</code></a></dt>\n  <dd>\n    <p>接続が閉じた時に WebSocket オブジェクトによって送信されるイベントです。</p>\n  </dd>\n  <dt id=\"messageevent\"><a href=\"/ja/docs/Web/API/MessageEvent\"><code>MessageEvent</code></a></dt>\n  <dd>\n    <p>サーバーからメッセージを受信した時に WebSocket オブジェクトによって送信されるイベント</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"ガイド","title":"ガイド","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications\">WebSocket クライアントアプリケーションの記述</a></li>\n  <li><a href=\"/ja/docs/Web/API/WebSockets_API/Writing_WebSocket_servers\">WebSocket サーバーの記述</a></li>\n  <li><a href=\"/ja/docs/Web/API/WebSockets_API/Writing_WebSocket_server\">WebSocket サーバーを C# で書く</a></li>\n  <li><a href=\"/ja/docs/Web/API/WebSockets_API/Writing_a_WebSocket_server_in_Java\">WebSocket サーバーを Java で書く</a></li>\n</ul>"}},{"type":"prose","value":{"id":"ツール","title":"ツール","isH3":false,"content":"<ul>\n  <li><a href=\"https://www.asyncapi.com/\" class=\"external\" rel=\" noopener\">AsyncAPI</a>: WebSocket のようなイベントドリブン型アーキテクチャを記述するための仕様です。 OpenAPI 仕様で REST API を記述するのと同じように、 WebSocket ベースの API を記述するために使用することができます。 <a href=\"https://www.asyncapi.com/blog/websocket-part1\" class=\"external\" rel=\" noopener\">WebSocket で AsyncAPI の利用を検討すべき理由</a>と<a href=\"https://www.asyncapi.com/blog/websocket-part2\" class=\"external\" rel=\" noopener\">利用する方法</a>を紹介します。</li>\n  <li><a href=\"https://hacks.mozilla.org/2017/06/introducing-humblenet-a-cross-platform-networking-library-that-works-in-the-browser/\" class=\"external\" rel=\" noopener\">HumbleNet</a>: ブラウザーで動作するクロスプラットフォームのネットワークライブラリです。ブラウザー間の違いを抽象化する WebSocket や WebRTC の C ラッパー、ゲームやその他のアプリで複数ユーザーのネットワーク機能を作成するものから成ります。</li>\n  <li><a href=\"https://github.com/uWebSockets/uWebSockets\" class=\"external\" rel=\" noopener\">µWebSockets</a>: <a href=\"https://isocpp.org/\" class=\"external\" rel=\" noopener\">C++11</a> および <a href=\"https://nodejs.org\" class=\"external\" rel=\" noopener\">Node.js</a> で書かれた可用性の高い WebSocket サーバーとクライアントの実装です。</li>\n  <li><a href=\"https://github.com/ClusterWS/ClusterWS\" class=\"external\" rel=\" noopener\">ClusterWS</a>: <a href=\"https://nodejs.org\" class=\"external\" rel=\" noopener\">Node.js</a> でスケーラブルな WebSocket アプリケーションを構築する、軽量で高速で強力なフレームワークです。</li>\n  <li><a href=\"https://github.com/ClusterWS/cWS\" class=\"external\" rel=\" noopener\">CWS</a>: Node.js のための高速な C++ による WebSocket の実装です (uWebSockets v0.14 のフォーク)</li>\n  <li><a href=\"https://socket.io\" class=\"external\" rel=\" noopener\">Socket.IO</a>: 長いポーリングと WevSocket ベースのサードバーティ―の <a href=\"https://nodejs.org\" class=\"external\" rel=\" noopener\">Node.js</a> 用転送プロトコルです。</li>\n  <li><a href=\"https://socketcluster.io/\" class=\"external\" rel=\" noopener\">SocketCluster</a>: スケーラビリティに焦点を当てた <a href=\"https://nodejs.org\" class=\"external\" rel=\" noopener\">Node.js</a> 用の pub/sub WebSocket フレームワークです。</li>\n  <li><a href=\"https://github.com/Worlize/WebSocket-Node\" class=\"external\" rel=\" noopener\">WebSocket-Node</a>: <a href=\"https://nodejs.org\" class=\"external\" rel=\" noopener\">Node.js</a> 用の WebSocket サーバー API 実装です。</li>\n  <li><a href=\"https://www.totaljs.com\" class=\"external\" rel=\" noopener\">Total.js</a>: <a href=\"https://www.nodejs.org\" class=\"external\" rel=\" noopener\">Node.js</a> 用の ウェブアプリケーションフレームワーク(使用例: <a href=\"https://github.com/totaljs/examples/tree/master/websocket\" class=\"external\" rel=\" noopener\">WebSocket chat</a>)</li>\n  <li><a href=\"https://www.npmjs.com/package/faye-websocket\" class=\"external\" rel=\" noopener\">Faye</a>: <a href=\"https://nodejs.org\" class=\"external\" rel=\" noopener\">Node.js</a> 用の <a href=\"/ja/docs/Web/API/WebSockets_API\" aria-current=\"page\">WebSocket</a> (双方向接続) と <a href=\"/ja/docs/Web/API/EventSource\">EventSource</a> (片方向接続) サーバーおよびクライアント</li>\n  <li><a href=\"https://signalr.net/\" class=\"external\" rel=\" noopener\">SignalR</a>: SignalR は単一のコードだけで、もし WebSockets が使用可能な場合、基盤として WebSockets を使用し、そうでない場合はほかの代替技術にフォールバックします。</li>\n  <li><a href=\"https://caddyserver.com/docs/websocket\" class=\"external\" rel=\" noopener\">Caddy</a>: WebSocket として任意のコマンド (stdin/stdout) を中継することができるウェブサーバーです。</li>\n  <li><a href=\"https://github.com/websockets/ws\" class=\"external\" rel=\" noopener\">ws</a>: <a href=\"https://nodejs.org/\" class=\"external\" rel=\" noopener\">Node.js</a> のための有名な WebSocket クライアント＆サーバーライブラリです。</li>\n  <li><a href=\"https://github.com/bigstepinc/jsonrpc-bidirectional\" class=\"external\" rel=\" noopener\">jsonrpc-bidirectional</a>: 非同期の RPC で、単一の接続を用いて、サーバー上にエクスポートされた機能と、同時にクライアント上のものがあります (クライアントがサーバーを呼び出すことができ、サーバーもクライアントを呼び出すことができます)。</li>\n  <li><a href=\"https://github.com/ninenines/cowboy\" class=\"external\" rel=\" noopener\">cowboy</a>: Cowboy は高速で最新の HTTP サーバーで、 Erlang/OTP のためのものであり、 WebSocket に対応しています。</li>\n  <li><a href=\"https://websocketking.com\" class=\"external\" rel=\" noopener\">WebSocket King</a>: WebSocket サーバーの開発、テスト、作業を支援するクライアントツールです。</li>\n  <li><a href=\"https://github.com/napengam/phpWebSocketServer\" class=\"external\" rel=\" noopener\">PHP WebSocket Server</a>: WebSockset の wss:// または ws:// および通常ソケットの ssl://, tcp:// を介して接続を処理するために PHP で書かれたサーバーです。</li>\n  <li><a href=\"https://channels.readthedocs.io/en/stable/index.html\" class=\"external\" rel=\" noopener\">Channels</a>: WebSocket（および長時間動作する非同期接続を必要とする他のプロトコル）の対応を追加する Django ライブラリーです。</li>\n  <li><a href=\"https://flask-socketio.readthedocs.io/en/latest/\" class=\"external\" rel=\" noopener\">Flask-SocketIO</a>: Flask アプリケーションに、クライアントとサーバー間の低遅延な双方向通信を提供します。</li>\n  <li><a href=\"https://pkg.go.dev/github.com/gorilla/websocket\" class=\"external\" rel=\" noopener\">Gorilla WebSocket</a>: Gorilla WebSocket は、WebSocket プロトコルの <a href=\"https://golang.org/\" class=\"external\" rel=\" noopener\">Go</a> による実装です。</li>\n</ul>"}},{"type":"prose","value":{"id":"関連トピック","title":"関連トピック","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/Guide/AJAX\">AJAX</a></li>\n  <li><a href=\"/ja/docs/Web/JavaScript\">JavaScript</a></li>\n</ul>"}},{"type":"prose","value":{"id":"仕様書","title":"仕様書","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>仕様書</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://html.spec.whatwg.org/multipage/web-sockets.html#network\" class=\"external\" rel=\" noopener\">HTML Living Standard # network</a></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://datatracker.ietf.org/doc/html/rfc6455\" class=\"external\" rel=\" noopener\">RFC 6455, The WebSocket Protocol</a></td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"query":"api.WebSocket","dataURL":"/ja/docs/Web/API/WebSockets_API/bcd.json"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"https://datatracker.ietf.org/doc/html/rfc6455\" class=\"external\" rel=\" noopener\">RFC 6455 — The WebSocket Protocol</a></li>\n  <li><a href=\"https://www.w3.org/TR/websockets/\" class=\"external\" rel=\" noopener\">WebSocket API Specification</a></li>\n  <li><a href=\"/ja/docs/Web/API/Server-sent_events\">サーバー送信イベント</a></li>\n</ul>"}}],"toc":[{"text":"インターフェイス","id":"インターフェイス"},{"text":"ガイド","id":"ガイド"},{"text":"ツール","id":"ツール"},{"text":"関連トピック","id":"関連トピック"},{"text":"仕様書","id":"仕様書"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"WebSocket API は、ユーザーのブラウザーとサーバー間で対話的な通信セッションを開くことができる先進技術です。この API によって、サーバーにメッセージを送信したり、応答をサーバーにポーリングすることなく、イベント駆動型のレスポンスを受信したりすることができます。","popularity":0.0011,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"The WebSocket API (WebSockets)","locale":"en-US","native":"English (US)"},{"title":"WebSockets","locale":"es","native":"Español"},{"title":"WebSockets","locale":"fr","native":"Français"},{"title":"웹 소켓","locale":"ko","native":"한국어"},{"title":"WebSockets","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"WebSockets","locale":"ru","native":"Русский"},{"title":"WebSockets","locale":"zh-CN","native":"中文 (简体)"},{"title":"WebSockets","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ja/web/api/websockets_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/websockets_api/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/WebSockets_API","title":"WebSocket API (WebSockets)"}],"pageTitle":"WebSocket API (WebSockets) - Web API | MDN","noIndexing":false}}