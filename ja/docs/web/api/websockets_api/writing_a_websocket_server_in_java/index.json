{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Java で WebSocket サーバーを記述する","mdn_url":"/ja/docs/Web/API/WebSockets_API/Writing_a_WebSocket_server_in_Java","locale":"ja","native":"日本語","sidebarHTML":"","body":[{"type":"prose","value":{"id":"はじめに","title":"はじめに","isH3":false,"content":"<p>この例では、Oracle Java を使用して WebSocket API サーバーを作成する方法を示します。</p>\n<p>他のサーバーサイドの言語を使用して WebSocket サーバーを作成することもできますが、この例では Oracle Java を使用してサンプルコードを簡略化しています。</p>\n<p>このサーバーは <a href=\"https://datatracker.ietf.org/doc/html/rfc6455rfc6455\" class=\"external\" rel=\" noopener\">RFC 6455</a> に準拠しているため、 Chrome バージョン 16、Firefox 11、IE 10 以降の接続のみを処理します。</p>"}},{"type":"prose","value":{"id":"最初のステップ","title":"最初のステップ","isH3":false,"content":"<p>WebSocket は <a href=\"http://en.wikipedia.org/wiki/Transmission_Control_Protocol\" class=\"external\" rel=\" noopener\">TCP (伝送制御プロトコル)</a> 接続を介して通信します。 Java の <a href=\"https://docs.oracle.com/javase/jp/8/docs/api/java/net/ServerSocket.html\" class=\"external\" rel=\" noopener\">ServerSocket</a> クラスは java.net パッケージにあります。</p>"}},{"type":"prose","value":{"id":"serversocket","title":"ServerSocket","isH3":true,"content":"<p>コンストラクター:</p>\n<p>ServerSocket<code>(int port)</code></p>\n<p>ServerSocket クラスをインスタンス化すると、port 引数で指定したポート番号にバインドされます。</p>\n<p>こちらが実装を部品に分割したものです。</p>\n<div class=\"code-example\"><pre class=\"brush: java notranslate\"><code><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStream</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">OutputStream</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServerSocket</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Socket</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MessageDigest</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NoSuchAlgorithmException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Base64</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>regex<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Matcher</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>regex<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WebSocket</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchAlgorithmException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ServerSocket</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerSocket</span><span class=\"token punctuation\">(</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Server has started on 127.0.0.1:80.\\r\\nWaiting for a connection...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">Socket</span> client <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A client connected.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"socket","title":"Socket","isH3":true,"content":"<p>メソッド:</p>\n<ul>\n  <li>\n    <code>java.net.</code><a href=\"https://docs.oracle.com/javase/jp/8/docs/api/java/net/Socket.html\" class=\"external\" rel=\" noopener\">Socket</a> <code>getInputStream()</code>\n    このソケットの入力ストリームを返します。\n  </li>\n  <li>\n    <code>java.net.</code><a href=\"https://docs.oracle.com/javase/jp/8/docs/api/java/net/Socket.html\" class=\"external\" rel=\" noopener\">Socket</a> <code>getOutputStream</code>\n    このソケットの出力ストリームを返します。\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"outputstream","title":"OutputStream","isH3":true,"content":"<p>メソッド:</p>\n<div class=\"code-example\"><pre class=\"brush: java notranslate\"><code><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> off<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>指定された byte 配列からオフセット <em><code>off</code></em> で始まる <em><code>len</code></em> バイトをこの出力ストリームに書き込みます。</p>"}},{"type":"prose","value":{"id":"inputstream","title":"InputStream","isH3":true,"content":"<p>メソッド:</p>\n<div class=\"code-example\"><pre class=\"brush: cpp notranslate\"><code><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>byte<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> off<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>最大 len バイトのデータを入力ストリームからバイト配列に読み込みます。</p>\n<p>例を拡張してみましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: java notranslate\"><code><span class=\"token class-name\">InputStream</span> in <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">OutputStream</span> out <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Scanner</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"ハンドシェイク","title":"ハンドシェイク","isH3":false,"content":"<p>クライアントがサーバーに接続すると、単純な HTTP リクエストから WebSocket への接続をアップグレードするための GET リクエストが送信されます。 これはハンドシェイクと呼ばれます。</p>\n<div class=\"code-example\"><pre class=\"brush: java notranslate\"><code><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">String</span> data <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">useDelimiter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\r\\\\n\\\\r\\\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Matcher</span> get <span class=\"token operator\">=</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"^GET\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">matcher</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>このようにしなければならない理由を理解するよりも、レスポンスを作成する方が簡単です。</p>\n<p>次のことをやらなければなりません。</p>\n<ol>\n  <li>先頭と末尾の空白なしで Sec-WebSocket-Key リクエストヘッダーの値を取得します</li>\n  <li>\"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\" とリンクします</li>\n  <li>SHA-1 と Base64 のコードを計算します</li>\n  <li>Sec-WebSocket-Accept レスポンスヘッダーの値を HTTP レスポンスの一部として書き戻します</li>\n</ol>\n<div class=\"code-example\"><pre class=\"brush: java notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>get<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Matcher</span> match <span class=\"token operator\">=</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sec-WebSocket-Key: (.*)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">matcher</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  match<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> response <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"HTTP/1.1 101 Switching Protocols\\r\\n\"</span>\n    <span class=\"token operator\">+</span> <span class=\"token string\">\"Connection: Upgrade\\r\\n\"</span>\n    <span class=\"token operator\">+</span> <span class=\"token string\">\"Upgrade: websocket\\r\\n\"</span>\n    <span class=\"token operator\">+</span> <span class=\"token string\">\"Sec-WebSocket-Accept: \"</span>\n    <span class=\"token operator\">+</span> <span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">encodeToString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageDigest</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SHA-1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">digest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">+</span> <span class=\"token string\">\"\\r\\n\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  out<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"メッセージのデコード","title":"メッセージのデコード","isH3":false,"content":"<p>ハンドシェイクが成功した後、クライアントはサーバーにメッセージを送信できますが、これはエンコードされています。</p>\n<p>\"abcdef\" を送信すると、次のバイトが得られます。</p>\n<pre class=\"notranslate\">129 134 167 225 225 210 198 131 130 182 194 135\n</pre>\n<p>- 129:</p>\n<table>\n  <thead>\n    <tr>\n      <th>FIN (これがメッセージ全体であるかどうか)</th>\n      <th>RSV1</th>\n      <th>RSV2</th>\n      <th>RSV3</th>\n      <th>Opcode</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0x1=0001</td>\n    </tr>\n  </tbody>\n</table>\n<p>\n  FIN: メッセージをフレームで送ることができますが、単純化します。\n  Opcode <em>0x1</em> はテキストであることを意味します。 <a href=\"https://datatracker.ietf.org/doc/html/rfc6455#section-5.2\" class=\"external\" rel=\" noopener\">Opcode の完全なリスト</a>\n</p>\n<p>- 134:</p>\n<p>2 番目のバイトから 128 を引いた値が 0 〜 125 の場合、これはメッセージの長さです。 126 の場合は、次の 2 バイト (16 ビット符号なし整数)、127 の場合、次の 8 バイト (64 ビット符号なし整数、最上位ビットは 0 でなければならない) が長さです。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> 最初のビットは常に 1 なので、 128 を取ることができます。</p>\n</div>\n<ul>\n  <li>167、225、225、および 210 はデコードするキーのバイトです。それは毎回変わります。</li>\n  <li>残りの符号化されたバイトはメッセージです。</li>\n</ul>"}},{"type":"prose","value":{"id":"デコードアルゴリズム","title":"デコードアルゴリズム","isH3":true,"content":"<p>デコードされたバイト = エンコードされたバイト XOR (エンコードされたバイトの位置 BITWISE および 0x3) バイト目のキー</p>\n<p>Java の例です。</p>\n<div class=\"code-example\"><pre class=\"brush: java notranslate\"><code>          <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> decoded <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> encoded <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token number\">198</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token number\">131</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token number\">130</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token number\">182</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token number\">194</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token number\">135</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> key <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token number\">167</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token number\">225</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token number\">225</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token number\">210</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> encoded<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            decoded<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>encoded<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> key<span class=\"token punctuation\">[</span>i <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n      server<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/API/WebSockets_API/Writing_WebSocket_servers\">WebSocket サーバーの記述</a></li>\n</ul>"}}],"toc":[{"text":"はじめに","id":"はじめに"},{"text":"最初のステップ","id":"最初のステップ"},{"text":"ハンドシェイク","id":"ハンドシェイク"},{"text":"メッセージのデコード","id":"メッセージのデコード"},{"text":"関連情報","id":"関連情報"}],"summary":"この例では、Oracle Java を使用して WebSocket API サーバーを作成する方法を示します。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Writing a WebSocket server in Java","locale":"en-US","native":"English (US)"},{"title":"Écrire un serveur WebSocket en Java","locale":"fr","native":"Français"},{"title":"Writing a WebSocket server in Java","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/websockets_api/writing_a_websocket_server_in_java","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/websockets_api/writing_a_websocket_server_in_java/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/WebSockets_API","title":"WebSocket API (WebSockets)"},{"uri":"/ja/docs/Web/API/WebSockets_API/Writing_a_WebSocket_server_in_Java","title":"Java で WebSocket サーバーを記述する"}],"pageTitle":"Java で WebSocket サーバーを記述する - Web API | MDN","noIndexing":false}}