{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"WebSocket サーバーの記述","mdn_url":"/ja/docs/Web/API/WebSockets_API/Writing_WebSocket_servers","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/WebSockets_API\">Websockets API</a></strong></li><li><strong><a href=\"/ja/docs/Web/API/WebSockets_API\"><code>WebSockets_API</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Websockets API に関連するページ</summary><ol><li><a href=\"/ja/docs/Web/API/CloseEvent\"><code>CloseEvent</code></a></li><li><a href=\"/ja/docs/Web/API/MessageEvent\"><code>MessageEvent</code></a></li><li><a href=\"/ja/docs/Web/API/WebSocket\"><code>WebSocket</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>WebSocket サーバーは、特定のプロトコルに従うサーバーの任意のポートを待ち受けする TCP アプリケーションに他なりません。カスタムサーバーを作成する作業は人々を悩ませる傾向があります。ただし、選択したプラットフォームに簡単な WebSocket サーバーを実装するのは簡単です。</p>\n<p>WebSocket サーバーは、 <a href=\"https://en.wikipedia.org/wiki/Berkeley_sockets\" class=\"external\" rel=\" noopener\">Berkeley sockets</a> が利用可能なサーバーサイドプログラミング言語、例えば C(++)、Python、<a href=\"/ja/docs/Glossary/PHP\">PHP</a>、<a href=\"/ja/docs/Learn/Server-side/Node_server_without_framework\">サーバーサイド JavaScript</a> などで記述することができます。これは特定の言語のチュートリアルではありませんが、独自のサーバーの作成を容易にするガイドとして役立ちます。</p>\n<p>この記事は、既に <a href=\"/ja/docs/Glossary/HTTP\">HTTP</a> の仕組みに精通しており、中程度のプログラミング経験があることを前提に書かれています。言語によっては、 TCP ソケットの知識が必要な場合があります。このガイドの範囲は、 WebSocket サーバーを書くために必要な最小限の知識を提示することです。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> 最新の公式 WebSockets 仕様である <a href=\"https://datatracker.ietf.org/doc/rfc6455/?include_text=1\" class=\"external\" rel=\" noopener\">RFC 6455</a> を参照してください。第 1 章と第 4-7 章はサーバー実装者にとって特に興味深いものです。第 10 章ではセキュリティについて説明しています。サーバーを公開する前にセキュリティを正しく理解する必要があります。</p>\n</div>\n<p>ここでは WebSocket サーバーについて非常に低水準で説明しています。WebSocket サーバーは多くの場合、<a href=\"https://ja.wikipedia.org/wiki/%E3%83%AA%E3%83%90%E3%83%BC%E3%82%B9%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7\" class=\"external\" rel=\" noopener\">リバースプロキシー</a>（通常の HTTP サーバーなど）を使用して WebSocket ハンドシェイクを検出、事前処理し、それらのクライアントを実際の WebSocket サーバーに送信します。つまり、（例えば）クッキーと認証ハンドラーを使用してサーバー側のコードを膨らませる必要はありません。</p>"}},{"type":"prose","value":{"id":"websocket_ハンドシェイク","title":"WebSocket ハンドシェイク","isH3":false,"content":"<p>まず、サーバーは標準の TCP ソケットを使用して着信ソケット接続を待ち受ける必要があります。プラットフォームによっては、すでに処理されている可能性があります。たとえば、サーバーが <code>example.com</code>、 8000 番ポートで待ち受けしているとし、ソケットサーバーが <code>example.com/chat</code> に対する <a href=\"/ja/docs/Web/HTTP/Methods/GET\"><code>GET</code></a> リクエストに応答したとします。</p>\n<div class=\"notecard warning\" id=\"sect2\">\n  <p><strong>Warning:</strong> サーバーは選択したポートで待ち受けしますが、80 または 443 以外のポートを選択すると、ファイアウォールやプロキシーの問題が発生する可能性があります。ブラウザーは WebSocket の接続に安全な接続を必要としますが、ローカル機器では例外を設けている可能性があります。</p>\n</div>\n<p>ハンドシェイクは WebSockets の \"Web\" です。それは HTTP から WS への橋渡しです。ハンドシェイクでは、接続の詳細がネゴシエートされ、いずれの当事者も条件が悪い場合には完了前に取り消すことができます。 サーバーはクライアントがリクエストするすべてをのものを理解するように注意する必要があります。そうしないとセキュリティの問題が発生します。</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> request-uri （ここでは <code>/chat</code>）の意味は仕様書では定義されていません。多くの人がこれを使用して、 1 つのサーバーが複数の WebSocket アプリケーションを処理できるようにします。たとえば、<code>example.com/chat</code> はマルチユーザチャットアプリを呼び出すことができ、同じサーバーの <code>/game</code> はマルチプレイヤーゲームを呼び出すことができるようにするなどです。</p>\n</div>"}},{"type":"prose","value":{"id":"クライアントハンドシェイクリクエスト","title":"クライアントハンドシェイクリクエスト","isH3":true,"content":"<p>サーバーを構築していても、クライアントは WebSocket ハンドシェイクプロセスを開始する必要があります。したがってクライアントのリクエストをどのように解釈するかを知っておく必要があります。<strong>クライアント</strong>は次のようなかなり標準的な HTTP リクエスト (HTTP バージョンは 1.1 以上<strong>でなければならず</strong>、メソッドは<code>GET</code> <strong>でなければなりません</strong>) を送信します。</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>GET /chat HTTP/1.1\nHost: example.com:8000\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Key: <span class=\"token assign-left variable\">dGhlIHNhbXBsZSBub25jZQ</span><span class=\"token operator\">==</span>\nSec-WebSocket-Version: <span class=\"token number\">13</span>\n</code></pre></div>\n<p>クライアントはここで拡張子やサブプロトコルを求めることができます。詳細は「<a href=\"#%E3%81%9D%E3%81%AE%E4%BB%96\">その他</a>」を参照してください。また <a href=\"/ja/docs/Web/HTTP/Headers/User-Agent\"><code>User-Agent</code></a>、<a href=\"/ja/docs/Web/HTTP/Headers/Referer\"><code>Referer</code></a>、<a href=\"/ja/docs/Web/HTTP/Headers/Cookie\"><code>Cookie</code></a>、認証ヘッダーなどの一般的なヘッダーも存在する可能性があります。これらに対しては何をしても構いません。 WebSocket には直接関係しません。それらを無視することも安全です。多くの一般的な設定では、リバースプロキシーは既にそれらを処理しています。</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>Note:</strong> すべての<strong>ブラウザー</strong>は <a href=\"/ja/docs/Web/HTTP/CORS#origin\"><code>Origin</code> ヘッダー</a>を送信します。このヘッダーをセキュリティ（同一オリジンのチェック、ホワイトリスト/ブラックリストなど) に使用し、見せたくなければ <a href=\"/ja/docs/Web/HTTP/Status#403\">403 Forbidden</a> を送ることができます。ただし、ブラウザー以外のエージェントは、偽の <code>Origin</code> を送信するだけであることに注意してください。ほとんどのアプリケーションは、このヘッダーのないリクエストを拒否します。</p>\n</div>\n<p>ヘッダーが解釈されていないか値が正しくない場合、サーバーは <a href=\"/ja/docs/Web/HTTP/Status/400\"><code>400</code></a> (\"Bad Request\") を送信し、すぐにソケットを閉じる必要があります。通常は、HTTP レスポンス本体でハンドシェイクが失敗した理由を示すかもしれませんが、メッセージは表示されないかもしれません（ブラウザーは表示しません）。 サーバーが WebSocket のバージョンを認識しない場合、サーバーは解釈可能なバージョンを含む <a href=\"/ja/docs/Web/HTTP/Headers/Sec-WebSocket-Version\" class=\"page-not-created\" title=\"This is a link to an unwritten page\"><code>Sec-WebSocket-Version</code></a> ヘッダーを返す必要があります。上記の例では、 WebSocket プロトコル 13 版であることを示しています。</p>\n<p>ここで、最も興味深いヘッダーは <a href=\"/ja/docs/Web/HTTP/Headers/Sec-WebSocket-Key\" class=\"page-not-created\" title=\"This is a link to an unwritten page\"><code>Sec-WebSocket-Key</code></a> です。次に見てみましょう。</p>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>Note:</strong> <a href=\"/ja/docs/Web/HTTP/Status\">通常の HTTP ステータスコード</a>は、ハンドシェイクの前にのみ使用できます。ハンドシェイクが成功したら、別のコードセット (仕様の 7.4 節で定義されている) を使用する必要があります。</p>\n</div>"}},{"type":"prose","value":{"id":"サーバーハンドシェイクレスポンス","title":"サーバーハンドシェイクレスポンス","isH3":true,"content":"<p><strong>サーバー</strong>がハンドシェイクリクエストを受け取ると、プロトコルが HTTP から WebSocket に変更されることを示す特別なレスポンスを送り返す必要があります。そのヘッダーは次のようなものです（各ヘッダー行は <code>\\r\\n</code> で終わり、ヘッダーの終わりを示すために最後の行の後に追加の <code>\\r\\n</code> を置くことを忘れないでください）。</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>HTTP/1.1 <span class=\"token number\">101</span> Switching Protocols\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo<span class=\"token operator\">=</span>\n</code></pre></div>\n<p>さらに、サーバーはここで拡張/サブプロトコルのリクエストを決定することができます。詳しくは<a href=\"#%E3%81%9D%E3%81%AE%E4%BB%96\">その他</a>を参照してください。 <code>Sec-WebSocket-Accept</code> ヘッダーは、クライアントが送信した <a href=\"/ja/docs/Web/HTTP/Headers/Sec-WebSocket-Key\" class=\"page-not-created\" title=\"This is a link to an unwritten page\"><code>Sec-WebSocket-Key</code></a> からサーバーが導き出す必要がある点で重要です。これを得るには、クライアントの <code>Sec-WebSocket-Key</code> と \"<code>258EAFA5-E914-47DA-95CA-C5AB0DC85B11</code>\" という文字列（これは「<a href=\"https://en.wikipedia.org/wiki/Magic_string\" class=\"external\" rel=\" noopener\">マジック文字列</a>」）を連結して、その結果の <a href=\"https://en.wikipedia.org/wiki/SHA-1\" class=\"external\" rel=\" noopener\">SHA-1 hash</a> をとり、そのハッシュの <a href=\"https://en.wikipedia.org/wiki/Base64\" class=\"external\" rel=\" noopener\">base64</a> エンコーディング値を返せばいいのです。</p>\n<div class=\"notecard note\" id=\"sect6\">\n  <p><strong>Note:</strong> この一見複雑すぎるプロセスは、サーバーが WebSocket に対応しているかどうかをクライアントに明らかにするために存在します。これは、サーバーが WebSockets 接続を受け入れても、データを HTTP リクエストとして解釈する場合にセキュリティ問題が発生する可能性があるため、重要なことです。</p>\n</div>\n<p>したがって、 Key が \"<code>dGhlIHNhbXBsZSBub25jZQ==</code>\" だった場合、 Accept は \"<code>s3pPLMBiTxaQ9kYGzzhZRbK+xOo=</code>\" になります。サーバーがこれらのヘッダーを送信すると、ハンドシェイクは完了し、データのスワップを開始できます。</p>\n<div class=\"notecard note\" id=\"sect7\">\n  <p><strong>Note:</strong> サーバーは、 <a href=\"/ja/docs/Web/HTTP/Headers/Set-Cookie\"><code>Set-Cookie</code></a> のような他のヘッダーを送信したり、レスポンスハンドシェイクを送信する前に他のステータスコードで認証またはリダイレクトを要求したりすることができます。</p>\n</div>"}},{"type":"prose","value":{"id":"クライアントの追跡","title":"クライアントの追跡","isH3":true,"content":"<p>これは WebSocket プロトコルとは直接関係ありませんが、ここで触れておく価値があります。サーバーはクライアントのソケットを追跡する必要があるので、すでにハンドシェイクを完了したクライアントと再びハンドシェイクを続ける必要はありません。同じクライアントの IP アドレスは何度も接続を試みることができます。しかし、サーバーは <a href=\"https://ja.wikipedia.org/wiki/DoS%E6%94%BB%E6%92%83\" class=\"external\" rel=\" noopener\">DoS 攻撃</a>から身を守るために、あまりにも多くの接続が試みられた場合、拒否することがあります。</p>\n<p>例えば、ユーザー名や ID 番号を、対応する <a href=\"/ja/docs/Web/API/WebSocket\"><code>WebSocket</code></a> やその接続に関連付ける必要のあるデータと一緒に表にしておくとよいでしょう。</p>"}},{"type":"prose","value":{"id":"データフレームの交換","title":"データフレームの交換","isH3":false,"content":"<p>クライアントとサーバーのどちらもがいつでもメッセージを送信することができます。これが WebSocket の魔法です。しかし、これらのいわゆる「フレーム」のデータから情報を抽出することはあまり魔法のような経験ではありません。すべてのフレームは同じ特定のフォーマットに従いますが、クライアントからサーバーに向かうデータは <a href=\"https://en.wikipedia.org/wiki/XOR_cipher\" class=\"external\" rel=\" noopener\">XOR 暗号化</a>（32 ビットキー）を使用してマスクされます。本明細書の第 5 節でこれについて詳細に説明する。</p>"}},{"type":"prose","value":{"id":"フォーマット","title":"フォーマット","isH3":true,"content":"<p>各データフレーム（クライアントからサーバーへ、またはその逆）は、次の同じ形式に従います。</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>Frame format:\n\n      <span class=\"token number\">0</span>                   <span class=\"token number\">1</span>                   <span class=\"token number\">2</span>                   <span class=\"token number\">3</span>\n      <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">5</span> <span class=\"token number\">6</span> <span class=\"token number\">7</span> <span class=\"token number\">8</span> <span class=\"token number\">9</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">5</span> <span class=\"token number\">6</span> <span class=\"token number\">7</span> <span class=\"token number\">8</span> <span class=\"token number\">9</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">5</span> <span class=\"token number\">6</span> <span class=\"token number\">7</span> <span class=\"token number\">8</span> <span class=\"token number\">9</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span>\n     +-+-+-+-+-------+-+-------------+-------------------------------+\n     <span class=\"token operator\">|</span>F<span class=\"token operator\">|</span>R<span class=\"token operator\">|</span>R<span class=\"token operator\">|</span>R<span class=\"token operator\">|</span> opcode<span class=\"token operator\">|</span>M<span class=\"token operator\">|</span> Payload len <span class=\"token operator\">|</span>    Extended payload length    <span class=\"token operator\">|</span>\n     <span class=\"token operator\">|</span>I<span class=\"token operator\">|</span>S<span class=\"token operator\">|</span>S<span class=\"token operator\">|</span>S<span class=\"token operator\">|</span>  <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">|</span>A<span class=\"token operator\">|</span>     <span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>     <span class=\"token operator\">|</span>             <span class=\"token punctuation\">(</span><span class=\"token number\">16</span>/64<span class=\"token punctuation\">)</span>           <span class=\"token operator\">|</span>\n     <span class=\"token operator\">|</span>N<span class=\"token operator\">|</span>V<span class=\"token operator\">|</span>V<span class=\"token operator\">|</span>V<span class=\"token operator\">|</span>       <span class=\"token operator\">|</span>S<span class=\"token operator\">|</span>             <span class=\"token operator\">|</span>   <span class=\"token punctuation\">(</span>if payload <span class=\"token assign-left variable\">len</span><span class=\"token operator\">==</span><span class=\"token number\">126</span>/127<span class=\"token punctuation\">)</span>   <span class=\"token operator\">|</span>\n     <span class=\"token operator\">|</span> <span class=\"token operator\">|</span><span class=\"token number\">1</span><span class=\"token operator\">|</span><span class=\"token number\">2</span><span class=\"token operator\">|</span><span class=\"token number\">3</span><span class=\"token operator\">|</span>       <span class=\"token operator\">|</span>K<span class=\"token operator\">|</span>             <span class=\"token operator\">|</span>                               <span class=\"token operator\">|</span>\n     +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +\n     <span class=\"token operator\">|</span>     Extended payload length continued, <span class=\"token keyword\">if</span> payload len <span class=\"token operator\">==</span> <span class=\"token number\">127</span>  <span class=\"token operator\">|</span>\n     + - - - - - - - - - - - - - - - +-------------------------------+\n     <span class=\"token operator\">|</span>                               <span class=\"token operator\">|</span>Masking-key, <span class=\"token keyword\">if</span> MASK <span class=\"token builtin class-name\">set</span> to <span class=\"token number\">1</span>  <span class=\"token operator\">|</span>\n     +-------------------------------+-------------------------------+\n     <span class=\"token operator\">|</span> Masking-key <span class=\"token punctuation\">(</span>continued<span class=\"token punctuation\">)</span>       <span class=\"token operator\">|</span>          Payload Data         <span class=\"token operator\">|</span>\n     +-------------------------------- - - - - - - - - - - - - - - - +\n     <span class=\"token builtin class-name\">:</span>                     Payload Data continued <span class=\"token punctuation\">..</span>.                <span class=\"token builtin class-name\">:</span>\n     + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +\n     <span class=\"token operator\">|</span>                     Payload Data continued <span class=\"token punctuation\">..</span>.                <span class=\"token operator\">|</span>\n     +---------------------------------------------------------------+\n</code></pre></div>\n<p>MASK ビットはメッセージがエンコードされているかどうかを示します。クライアントからのメッセージはマスクされている必要がありますので、サーバーはこのビットが 1 であることを確認する必要があります。（実際、<a href=\"https://datatracker.ietf.org/doc/html/rfc6455#section-5.1\" class=\"external\" rel=\" noopener\">仕様書の第 5.1 節</a>では、クライアントがマスクされていないメッセージを送信する場合、サーバーはクライアントから切断する必要があります。）フレームをクライアントに戻すときは、マスクしたりマスクビットを設定しないでください。後でマスキングについて説明します。注意：セキュアソケットを使用している場合でも、メッセージをマスクする必要があります。RSV1-3 は無視することができますが、それは拡張のためのものです。</p>\n<p>opcode フィールドは、ペイロードデータをどのように解釈するかを定義します。継続の場合 <code>0x0</code>、テキスト (UTF-8 で常にエンコードされる) の場合は <code>0x1</code>、バイナリの場合は <code>0x2</code>、およびその他のいわゆる「制御コード」については後で説明します。この版の WebSocket では、<code>0x3</code> 〜 <code>0x7</code> および <code>0xB</code> 〜<code>0xF</code> は意味を持ちません。</p>\n<p>FIN ビットは、これがシリーズ内の最後のメッセージであるかどうかを示します。0 の場合、サーバーはメッセージのより多くの部分をリスニングし続けます。それ以外の場合、サーバーは配信されたメッセージを考慮する必要があります。これについては後で詳しく説明します。</p>"}},{"type":"prose","value":{"id":"ペイロード長のデコード","title":"ペイロード長のデコード","isH3":true,"content":"<p>ペイロードデータを読み取るには、いつ読み終えるべきかを知っておく必要があります。そのためペイロードの長さを知ることが重要です。残念ながら、これはやや複雑です。それを読むには、次の手順を実行します。</p>\n<ol>\n  <li>ビット 9 から 15 までを読み取り、それを符号なし整数として解釈します。それが 125 以下であれば、それが長さです。これで<strong>完了</strong>です。 126 の場合は手順 2 に、 127 の場合は手順 3 に進んでください。</li>\n  <li>次の 16 ビットを読み取り、それを符号なし整数として解釈します。これで<strong>完了</strong>です。</li>\n  <li>次の 64 ビットを読み取り、それを符号なし整数として解釈します（最上位ビットは<em>必ず</em> 0 になります）。これで<strong>完了</strong>です。</li>\n</ol>"}},{"type":"prose","value":{"id":"データの読み込みとマスク解除","title":"データの読み込みとマスク解除","isH3":true,"content":"<p>MASK ビットがセットされていた場合は（クライアントからサーバーへのメッセージではそうあるべきです）、次の 4 オクテット（32 ビット）を読み込みます。これがマスキングキーです。ペイロード長とマスキングキーがデコードされたら、ソケットからそのバイト数を読み取ることができます。データを <strong>ENCODED</strong>、キーを <strong>MASK</strong> 呼ぶことにします。 <strong>DECODED</strong> を取得するには、<strong>ENCODED</strong> のオクテット（バイト列、すなわちテキストデータの文字の列）をループし、オクテットを MASK の（i モジュロ 4）番目のオクテットを使用して XOR します。擬似コードで表してみます（JavaScript が有効な場合）。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> <span class=\"token constant\">DECODED</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ENCODED</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">DECODED</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">ENCODED</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token constant\">MASK</span><span class=\"token punctuation\">[</span>i <span class=\"token operator\">%</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これで、アプリケーションに応じて <strong>DECODED</strong> が何を意味するのかを理解することができます。</p>"}},{"type":"prose","value":{"id":"メッセージフラグメンテーション","title":"メッセージフラグメンテーション","isH3":true,"content":"<p>FIN フィールドとオペコードフィールドは連携して、別々のフレームに分割されたメッセージを送信します。これはメッセージフラグメンテーションと呼ばれます。フラグメンテーションは、オペコード <code>0x0</code> 〜 <code>0x2</code> でのみ使用できます。</p>\n<p>オペコードはフレームの意味を示しています。<code>0x1</code> の場合、ペイロードはテキストです。<code>0x2</code> の場合、ペイロードはバイナリデータです。ただし、<code>0x0</code> の場合、フレームは継続フレームです。つまりサーバーはフレームのペイロードをそのクライアントから受信した最後のフレームに連結する必要があります。ここでは、サーバーがテキストメッセージを送信するクライアントに反応する概略を示します。第 1 のメッセージは単一のフレームで送信され、第 2 のメッセージは3つのフレームにわたって送信されます。FIN とオペコードの詳細は、クライアントに対してのみ表示されます。</p>\n<pre class=\"notranslate\">Client: FIN=1, opcode=0x1, msg=\"hello\"\nServer: (process complete message immediately) Hi.\nClient: FIN=0, opcode=0x1, msg=\"and a\"\nServer: (listening, new message containing text started)\nClient: FIN=0, opcode=0x0, msg=\"happy new\"\nServer: (listening, payload concatenated to previous message)\nClient: FIN=1, opcode=0x0, msg=\"year!\"\nServer: (process complete message) Happy new year to you too!\n</pre>\n<p>最初のフレームにメッセージ全体が含まれていることに注意してください (<code>FIN=1</code> および <code>opcode!=0x0</code>)、それによりサーバーは適切に処理または応答できます。クライアントが送信した 2 番目のフレームにはテキストペイロード (<code>opcode=0x1</code>) がありますが、メッセージ全体がまだ到着していません (<code>FIN=0</code>)。そのメッセージの残りの部分はすべて継続フレーム (<code>opcode=0x0</code>) と共に送信され、メッセージの最終フレームは <code>FIN=1</code> でマークされます。<a href=\"https://datatracker.ietf.org/doc/html/rfc6455#section-5.4\" class=\"external\" rel=\" noopener\">仕様書の 5.4 節</a>では、メッセージフラグメンテーションについて説明があります。</p>"}},{"type":"prose","value":{"id":"ping_と_pong_websockets_の鼓動","title":"Ping と Pong: WebSockets の鼓動","isH3":false,"content":"<p>ハンドシェイク後の任意の時点で、クライアントまたはサーバーのどちらかが、相手に ping を送信することを選択できます。 ping が受信されると、受信者はできるだけ早く pong を返さなければなりません。 これを使用して、たとえばクライアントがまだ接続されていることを確認できます。</p>\n<p>ping や pong は単なる通常のフレームですが、<strong>制御フレーム</strong>です。ping のオペコードは <code>0x9</code>、pong のオペコードは <code>0xA</code> です。ping を取得したら、ping と同じペイロードデータを持つ pong を送ります（ping と pong の場合、最大ペイロード長は 125 です）。ping を送信することなく pong を取得することもできます。その場合はこれを無視してください。</p>\n<div class=\"notecard note\" id=\"sect8\">\n  <p><strong>Note:</strong> pong を送信する機会を得る前に複数の ping を受信した場合でも、送信する pong は 1 つだけです。</p>\n</div>"}},{"type":"prose","value":{"id":"接続を閉じる","title":"接続を閉じる","isH3":false,"content":"<p>クライアントまたはサーバーの接続を閉じるには指定した制御シーケンスを含むデータの制御フレームを送信して、終了ハンドシェイクを開始します (<a href=\"https://datatracker.ietf.org/doc/html/rfc6455#section-5.5.1\" class=\"external\" rel=\" noopener\">5.5.1 項</a>を参照)。このようなフレームを受信すると、もう１つのピアはレスポンスとしてクローズフレームを送信します。最初のピアは接続を閉じます。接続の終了後に受信されたそれ以上のデータは、その後破棄されます。</p>"}},{"type":"prose","value":{"id":"その他","title":"その他","isH3":false,"content":"<div class=\"notecard note\" id=\"sect9\">\n  <p><strong>Note:</strong> WebSocket のコード、拡張機能、サブプロトコルなどは、<a href=\"https://www.iana.org/assignments/websocket/websocket.xml\" class=\"external\" rel=\" noopener\">IANA WebSocket プロトコルレジストリー</a>に登録されています。</p>\n</div>\n<p>WebSocket の拡張機能とサブプロトコルは、ハンドシェイク中にヘッダーを介して交渉されます。拡張機能とサブプロトコルはとても似ていますが、明確な区別があります。拡張機能は WebSocket <strong>フレーム</strong>を制御し、ペイロードを<strong>変更</strong>しますが、サブプロトコルは WebSocket <strong>ペイロード</strong>を構造化し、<strong>何も変更しません</strong>。拡張機能は任意のもので一般化されています（圧縮など）。サブプロトコルは必須のもので、ローカライズされています（チャットや MMORPG ゲームなど）。</p>"}},{"type":"prose","value":{"id":"拡張機能","title":"拡張機能","isH3":false,"content":"<p>拡張機能はファイルを誰かに電子メールで送る前に圧縮していると考えてください。あなたが何をしても、同じデータをさまざまな形で送信しています。受信者は最終的にローカルコピーと同じデータを得ることができますが、別の方法で送信されます。それが拡張機能の機能です。 WebSockets はプロトコルとデータを送信する簡単な方法を定義しますが、圧縮などの拡張機能では同じデータを短い形式で送信することができます。</p>\n<div class=\"notecard note\" id=\"sect10\">\n  <p><strong>Note:</strong> 拡張機能については、仕様書の 5.8, 9, 11.3.2, 11.4 節で説明しています。</p>\n</div>"}},{"type":"prose","value":{"id":"サブプロトコル","title":"サブプロトコル","isH3":true,"content":"<p>サブプロトコルをカスタム <a href=\"https://en.wikipedia.org/wiki/XML_schema\" class=\"external\" rel=\" noopener\">XML スキーマ</a>または <a href=\"https://en.wikipedia.org/wiki/Document_Type_Definition\" class=\"external\" rel=\" noopener\">doctype 宣言</a>と考えてください。あなたはまだ XML とその構文を使用していますが、あなたが合意した構造によってさらに制限されます。WebSocket のサブプロトコルはまさにそのようなものです。それらは空想的な何かを導入しておらず、構造を確立するだけです。doctype やスキーマと同様に、両者はサブプロトコルに同意しなければなりません。doctype やスキーマとは異なり、サブプロトコルはサーバー上に実装されており、クライアントから外部参照することはできません。</p>\n<div class=\"notecard note\" id=\"sect11\">\n  <p><strong>Note:</strong> サブプロトコルは、仕様のセクション 1.9、4.2、11.3.4、11.5 で説明されています。</p>\n</div>\n<p>クライアントは特定のサブプロトコルを要求する必要があります。 これを行うには、<strong>元のハンドシェイクの一部として</strong>次のようなものを送ります。</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>GET /chat HTTP/1.1\n<span class=\"token punctuation\">..</span>.\nSec-WebSocket-Protocol: soap, wamp\n</code></pre></div>\n<p>次のものも同等です。</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token punctuation\">..</span>.\nSec-WebSocket-Protocol: soap\nSec-WebSocket-Protocol: wamp\n</code></pre></div>\n<p>これでサーバーはクライアントが提案して対応しているプロトコルの 1 つを選択する必要があります。複数ある場合は、クライアントが送信した最初のものを送信します。サーバーが <code>soap</code> と <code>wamp</code> の両方を使用できると想像してください。 次に、レスポンスハンドシェイクで次のメッセージが送信されます。</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>Sec-WebSocket-Protocol: soap\n</code></pre></div>\n<div class=\"notecard warning\" id=\"sect12\">\n  <p>\n    <strong>Warning:</strong> サーバーは複数の <code>Sec-Websocket-Protocol</code> ヘッダーを送信できません。\n    サーバーがサブプロトコルを使用したくない場合、 <strong><code>Sec-WebSocket-Protocol</code> ヘッダーを送信してはいけません</strong>。空白のヘッダーを送信するのは間違いです。クライアントは、必要なサブプロトコルを取得できない場合に接続を閉じることがあります。\n  </p>\n</div>\n<p>サーバーが特定のサブプロトコルに従うようにしたいのであれば、必然的にサーバー上に特別なコードが必要になります。 <code>json</code> サブプロトコルを使用しているとしましょう。このサブプロトコルではすべてのデータが <a href=\"https://en.wikipedia.org/wiki/JSON\" class=\"external\" rel=\" noopener\">JSON</a> として渡されます。クライアントがこのプロトコルを要求し、サーバーがそれを使用したい場合、サーバーは JSON パーサーを持つ必要があります。実際に言えば、これはライブラリの一部になりますが、サーバーはデータを渡す必要があります。</p>\n<div class=\"notecard note\" id=\"sect13\">\n  <p><strong>Note:</strong> 名前の競合を避けるため、サブプロトコル名をドメイン文字列の一部にすることをお勧めします。Example Inc. 専用の独自の形式を使用するカスタムチャットアプリを構築する場合は、次のように使用します: <code>Sec-WebSocket-Protocol: chat.example.com</code>。これは必須ではないことに注意してください。これは単なるオプションです。任意の文字列を使用できます。</p>\n</div>"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications\">WebSocket クライアントアプリケーションの記述</a></li>\n  <li><a href=\"/ja/docs/Web/API/WebSockets_API/Writing_WebSocket_server\">チュートリアル: C# で WebSocket サーバーを記述する</a></li>\n  <li><a href=\"/ja/docs/Web/API/WebSockets_API/Writing_a_WebSocket_server_in_Java\">チュートリアル: Java で WebSocket サーバーを記述する</a></li>\n</ul>"}}],"toc":[{"text":"WebSocket ハンドシェイク","id":"websocket_ハンドシェイク"},{"text":"データフレームの交換","id":"データフレームの交換"},{"text":"Ping と Pong: WebSockets の鼓動","id":"ping_と_pong_websockets_の鼓動"},{"text":"接続を閉じる","id":"接続を閉じる"},{"text":"その他","id":"その他"},{"text":"拡張機能","id":"拡張機能"},{"text":"関連情報","id":"関連情報"}],"summary":"WebSocket サーバーは、特定のプロトコルに従うサーバーの任意のポートを待ち受けする TCP アプリケーションに他なりません。カスタムサーバーを作成する作業は人々を悩ませる傾向があります。ただし、選択したプラットフォームに簡単な WebSocket サーバーを実装するのは簡単です。","popularity":0.0006,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Writing WebSocket servers","locale":"en-US","native":"English (US)"},{"title":"Escribir servidores WebSocket","locale":"es","native":"Español"},{"title":"Écriture de serveurs WebSocket","locale":"fr","native":"Français"},{"title":"웹소켓 서버 작성하기","locale":"ko","native":"한국어"},{"title":"Escrevendo um servidor WebSocket","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"编写 WebSocket 服务器","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/websockets_api/writing_websocket_servers","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/websockets_api/writing_websocket_servers/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/WebSockets_API","title":"WebSocket API (WebSockets)"},{"uri":"/ja/docs/Web/API/WebSockets_API/Writing_WebSocket_servers","title":"WebSocket サーバーの記述"}],"pageTitle":"WebSocket サーバーの記述 - Web API | MDN","noIndexing":false}}