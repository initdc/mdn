{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"WebSocket クライアントアプリケーションの記述","mdn_url":"/ja/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/WebSockets_API\">Websockets API</a></strong></li><li><strong><a href=\"/ja/docs/Web/API/WebSockets_API\"><code>WebSockets_API</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Websockets API に関連するページ</summary><ol><li><a href=\"/ja/docs/Web/API/CloseEvent\"><code>CloseEvent</code></a></li><li><a href=\"/ja/docs/Web/API/MessageEvent\"><code>MessageEvent</code></a></li><li><a href=\"/ja/docs/Web/API/WebSocket\"><code>WebSocket</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>WebSocket クライアントアプリケーションは <a href=\"/ja/docs/Web/API/WebSockets_API\">WebSocket API</a> を使用して、 WebSocket プロトコルを経由して <a href=\"/ja/docs/Web/API/WebSockets_API/Writing_WebSocket_servers\">WebSocket サーバー</a>と通信します。</p><div class=\"notecard note\" id=\"sect1\">\n  <p><strong>注:</strong> この機能は <a href=\"/ja/docs/Web/API/Web_Workers_API\">Web Worker</a> 内で利用可能です</p>\n</div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> この記事のサンプルスニペットは WebSocket チャットクライアント/サーバーサンプルから取得したものです。<a href=\"https://github.com/mdn/samples-server/tree/master/s/websocket-chat\" class=\"external\" rel=\" noopener\">コードはこちらからご覧ください</a>。</p>\n</div>"}},{"type":"prose","value":{"id":"websocket_オブジェクトの作成","title":"WebSocket オブジェクトの作成","isH3":false,"content":"<p>WebSocket プロトコルを使用して通信するには、 <a href=\"/ja/docs/Web/API/WebSocket\"><code>WebSocket</code></a> オブジェクトを作成する必要があります。これにより自動的にサーバーへの接続が開かれます。</p>\n<p>WebSocket のコンストラクターは、必須 1 つ、任意 1 つの引数を受け取ります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>webSocket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> protocols<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<dl>\n  <dt id=\"url\"><code>url</code></dt>\n  <dd>\n    <p>接続先 URL。これは、 WebSocket サーバーが応答する URL である必要があります。これは URL スキームに <code>wss://</code> を使用するべきですが、ソフトウェアによってはローカル接続用に安全ではない <code>ws://</code> を使用することを許可していることがあります。</p>\n  </dd>\n  <dt id=\"protocols\"><code>protocols</code> <span class=\"badge inline optional\">省略可</span></dt>\n  <dd>\n    <p>単一のプロトコル文字列または一連のプロトコル文字列。これらの文字列はサブプロトコルを示すのに使用されるため、単一のサーバーで複数の WebSocket サブプロトコルを実装できます（たとえば、特定の <code>protocol</code> に応じて 1 つのサーバーで異なる種類の対話を処理できるようにする）。プロトコル文字列を指定しない場合、空文字列であると仮定されます。</p>\n  </dd>\n</dl>\n<p>コンストラクターは、接続先がアクセスを許可していない場合に <code>SecurityError</code> 例外を発生させます。これは安全ではない接続を利用しようとしたときに発生することがあります（ほとんどの<a href=\"/ja/docs/Glossary/User_agent\">ユーザーエージェント</a>は、同じ機器か、可能であれば同じネットワークでない限り、すべての WebSocket 接続に安全なリンクを要求します）。</p>"}},{"type":"prose","value":{"id":"接続エラー","title":"接続エラー","isH3":true,"content":"<p>接続中にエラーが発生した場合、最初に <code>error</code> という名前の単純なイベントが <a href=\"/ja/docs/Web/API/WebSocket\"><code>WebSocket</code></a> オブジェクトに送信され（その結果、その <a href=\"/ja/docs/Web/API/WebSocket/error_event\" title=\"onerror\"><code>onerror</code></a> ハンドラーが呼び出されます）、次に <a href=\"/ja/docs/Web/API/CloseEvent\"><code>CloseEvent</code></a> が <code>WebSocket</code> オブジェクトに送信され（<a href=\"/ja/docs/Web/API/WebSocket/close_event\" title=\"onclose\"><code>onclose</code></a> ハンドラーが呼び出されます）接続の終了の理由を示します。</p>\n<p>ブラウザーは <a href=\"/ja/docs/Web/API/CloseEvent\"><code>CloseEvent</code></a> 経由で、コンソールにも [RFC 6455 第 7.4 節]で定義されている終了コードと同時に、もっと説明的なエラーメッセージを出力するができます。</p>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":true,"content":"<p>この簡単な例では新しい WebSocket を作成し、 <code>wss://www.example.com/socketserver</code> のサーバーに接続します。この例では、ソケットのリクエストで \"protocolOne\" のカスタムプロトコルが指定されていますが、省略することもできます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> exampleSocket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wss://www.example.com/socketserver\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"protocolOne\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>返されると、 <a href=\"/ja/docs/Web/API/WebSocket/readyState\" title=\"exampleSocket.readyState\"><code>exampleSocket.readyState</code></a> は <code>CONNECTING</code> です。 <code>readyState</code> は接続がデータを転送する準備ができたら <code>OPEN</code>になります。</p>\n<p>接続を開き、サポートしているプロトコルについて柔軟に対応したい場合は、プロトコルの配列を指定することができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> exampleSocket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wss://www.example.com/socketserver\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"protocolOne\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"protocolTwo\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>接続が確立されると（つまり <code>readyState</code> が <code>OPEN</code>）、 <a href=\"/ja/docs/Web/API/WebSocket/protocol\" title=\"exampleSocket.protocol\"><code>exampleSocket.protocol</code></a> は、サーバーが選択したプロトコルを通知します。</p>\n<p>WebSocket を確立するには、 <a href=\"/ja/docs/Web/HTTP/Protocol_upgrade_mechanism\">HTTP アップグレードメカニズム</a>が必要です。したがって、 HTTP サーバーを <code>ws://www.example.com</code> または <code>wss://www.example.com</code> としてアドレス指定すると、プロトコルのアップグレードのためのリクエストが暗黙的に行われます。</p>"}},{"type":"prose","value":{"id":"サーバーへのデータの送信","title":"サーバーへのデータの送信","isH3":false,"content":"<p>接続を開くと、サーバーにデータを送信することができます。 これを行うには、送信するメッセージごとに <code>WebSocket</code> オブジェクトの <a href=\"/ja/docs/Web/API/WebSocket/send\" title=\"send()\"><code>send()</code></a> メソッドを呼び出します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>exampleSocket<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Here's some text that the server is urgently awaiting!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>データは文字列、 <a href=\"/ja/docs/Web/API/Blob\"><code>Blob</code></a>、 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> のいずれかで送信することができます。</p>\n<p>接続の確立は非同期であり、失敗しやすいため、 <code>send()</code> メソッドの呼び出しが WebSocket オブジェクトの作成直後に成功するという保証はありません。データの送信を試みるのは、少なくともいったん接続が確立してからでなければならないので、作業を行うための <a href=\"/ja/docs/Web/API/WebSocket/open_event\" title=\"onopen\"><code>onopen</code></a> イベントハンドラーを定義してその中で行います。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>exampleSocket<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onopen</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  exampleSocket<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Here's some text that the server is urgently awaiting!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"json_を使用したオブジェクトの送信","title":"JSON を使用したオブジェクトの送信","isH3":true,"content":"<p>サーバーに複雑なデータを合理的に送信するのに手軽な方法の一つとして、 <a href=\"/ja/docs/Glossary/JSON\">JSON</a> を使用する方法があります。たとえば、チャットプログラムがサーバーとやり取りするのに、 JSON でカプセル化されたデータのパケットを使用して実装されたプロトコルを使用することができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Send text to all users through the server</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sendText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Construct a msg object containing the data the server needs to process the message from the chat client.</span>\n  <span class=\"token keyword\">var</span> msg <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span>   clientID<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Send the msg object as a JSON-formatted string.</span>\n  exampleSocket<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Blank the text input element, ready to receive the next line of text from the user.</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"サーバーからのメッセージの受信","title":"サーバーからのメッセージの受信","isH3":false,"content":"<p>WebSockets はイベント駆動型 API です。メッセージを受信すると、 <code>message</code> イベント <code>WebSocket</code> オブジェクトに送信されます。これを処理するには、 <code>message</code> イベントのイベントリスナーを追加するか、 <a href=\"/ja/docs/Web/API/WebSocket/message_event\" title=\"onmessage\"><code>onmessage</code></a> イベントハンドラーを使用するかします。受信データの待ち受けを開始するには、次のようにします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>exampleSocket<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"json_オブジェクトの受信と解釈","title":"JSON オブジェクトの受信と解釈","isH3":true,"content":"<p>まず<a href=\"#json_%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%9F%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E9%80%81%E4%BF%A1\">JSON を使用したオブジェクトの送信</a>で述べられているチャットクライアントアプリケーションを考えてみましょう。クライアントが受信するデータパケットの種類は次のとおりです。</p>\n<ul>\n  <li>ログインハンドシェイク</li>\n  <li>メッセージテキスト</li>\n  <li>ユーザーリストの更新</li>\n</ul>\n<p>これらの受信メッセージを解釈するコードは、次のようになります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>exampleSocket<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chatbox\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>contentDocument<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> msg <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> time <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> timeStr <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span>\n      clientID <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"username\"</span><span class=\"token operator\">:</span>\n      text <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;b&gt;User &lt;em&gt;\"</span> <span class=\"token operator\">+</span> msg<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;/em&gt; signed in at \"</span> <span class=\"token operator\">+</span> timeStr <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;/b&gt;&lt;br&gt;\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"message\"</span><span class=\"token operator\">:</span>\n      text <span class=\"token operator\">=</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">+</span> timeStr <span class=\"token operator\">+</span> <span class=\"token string\">\") &lt;b&gt;\"</span> <span class=\"token operator\">+</span> msg<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;/b&gt;: \"</span> <span class=\"token operator\">+</span> msg<span class=\"token punctuation\">.</span>text <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;br&gt;\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"rejectusername\"</span><span class=\"token operator\">:</span>\n      text <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;b&gt;Your username has been set to &lt;em&gt;\"</span> <span class=\"token operator\">+</span> msg<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;/em&gt; because the name you chose is in use.&lt;/b&gt;&lt;br&gt;\"</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"userlist\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">var</span> ul <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> msg<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ul <span class=\"token operator\">+=</span> msg<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;br&gt;\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userlistbox\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> ul<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    f<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chatbox\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>contentWindow<span class=\"token punctuation\">.</span><span class=\"token function\">scrollByPages</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ここで <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\"><code>JSON.parse()</code></a> を使用して JSON オブジェクトを元のオブジェクトに変換し、その内容を調べて処理します。</p>"}},{"type":"prose","value":{"id":"テキストデータ形式","title":"テキストデータ形式","isH3":true,"content":"<p>WebSocket 接続を介して受信されるテキストは、 UTF-8 形式です。</p>"}},{"type":"prose","value":{"id":"接続を閉じる","title":"接続を閉じる","isH3":false,"content":"<p>WebSocket 接続の使用を終了したら、 WebSocket のメソッド <a href=\"/ja/docs/Web/API/WebSocket/close\" title=\"close()\"><code>close()</code></a> を呼び出します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>exampleSocket<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>接続を閉じようとする前に、ソケットの <a href=\"/ja/docs/Web/API/WebSocket/bufferedAmount\" title=\"bufferedAmount\"><code>bufferedAmount</code></a> 属性を確認して、データがネットワーク上でまだ送信されていないかどうかを判断すると有用かもしれません。この値が 0 ではない場合、まだ待ち状態のデータがあるので、接続を閉じる前に待ったほうが良いかもしれません。</p>"}},{"type":"prose","value":{"id":"セキュリティの考慮事項","title":"セキュリティの考慮事項","isH3":false,"content":"<p>混合コンテンツ環境では WebSocket を使用しないでください。つまり、 HTTPS を使用もしくはそうでない方法でもロードされたページから、セキュアでない WebSocket 接続を開くべきではありません。最近のブラウザーは安全な WebSocket 接続のみを許可し、また安全ではないコンテキストでの使用には対応しなくなってきています。</p>"}}],"toc":[{"text":"WebSocket オブジェクトの作成","id":"websocket_オブジェクトの作成"},{"text":"サーバーへのデータの送信","id":"サーバーへのデータの送信"},{"text":"サーバーからのメッセージの受信","id":"サーバーからのメッセージの受信"},{"text":"接続を閉じる","id":"接続を閉じる"},{"text":"セキュリティの考慮事項","id":"セキュリティの考慮事項"}],"summary":"WebSocket クライアントアプリケーションは WebSocket API を使用して、 WebSocket プロトコルを経由して WebSocket サーバーと通信します。","popularity":0.001,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Writing WebSocket client applications","locale":"en-US","native":"English (US)"},{"title":"Escribiendo aplicaciones con WebSockets","locale":"es","native":"Español"},{"title":"Ecrire des applications client WebSocket","locale":"fr","native":"Français"},{"title":"WebSocket을 이용하여 클라이언트 애플리케이션 작성하기","locale":"ko","native":"한국어"},{"title":"Escrevendo aplicações cliente WebSocket","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Написание клиентских приложений с помощью веб-сокетов","locale":"ru","native":"Русский"},{"title":"编写 WebSocket 客户端应用","locale":"zh-CN","native":"中文 (简体)"},{"title":"製作 WebSocket 客戶端應用程式","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ja/web/api/websockets_api/writing_websocket_client_applications","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/websockets_api/writing_websocket_client_applications/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/WebSockets_API","title":"WebSocket API (WebSockets)"},{"uri":"/ja/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications","title":"WebSocket クライアントアプリケーションの記述"}],"pageTitle":"WebSocket クライアントアプリケーションの記述 - Web API | MDN","noIndexing":false}}