{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Fetch の使用","mdn_url":"/ja/docs/Web/API/Fetch_API/Using_Fetch","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/Fetch_API\">Fetch API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>ガイド</summary><ol><li><a href=\"/ja/docs/Web/API/Fetch_API/Using_Fetch\">Using the Fetch API</a></li><li><a href=\"/ja/docs/Web/API/Fetch_API/Basic_concepts\">Fetch basic concepts</a></li><li><a href=\"/ja/docs/Web/API/Fetch_API/Cross-global_fetch_usage\">Cross-global fetch usage</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>インターフェイス</summary><ol><li><a href=\"/ja/docs/Web/API/Headers\"><code>Headers</code></a></li><li><a href=\"/ja/docs/Web/API/Request\"><code>Request</code></a></li><li><a href=\"/ja/docs/Web/API/Response\"><code>Response</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>メソッド</summary><ol><li><a href=\"/ja/docs/Web/API/fetch\"><code>fetch()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/ja/docs/Web/API/Fetch_API\">Fetch API</a> は、リクエストやレスポンスといった HTTP のパイプラインを操作する要素にアクセスするための JavaScript インターフェイスです。グローバルの <a href=\"/ja/docs/Web/API/fetch\"><code>fetch()</code></a> メソッドも提供しており、簡単で論理的な方法で、非同期にネットワーク越しでリソースを取得することができます。</p>\n<p>従来、このような機能は <a href=\"/ja/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a> を使用して実現されてきました。フェッチはそれのより良い代替となるもので、<a href=\"/ja/docs/Web/API/Service_Worker_API\" title=\"サービスワーカー\">サービスワーカー</a>のような他の技術から簡単に利用することができます。フェッチは <a href=\"/ja/docs/Web/HTTP/CORS\">CORS</a> や HTTP への拡張のような HTTP に関連する概念をまとめて定義する場所でもあります。</p>\n<p><code>fetch</code> の仕様は、 <code>jQuery.ajax()</code> とは特に以下の点で異なっています。</p>\n<ul>\n  <li><code>fetch()</code> から返されるプロミス (<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>) は、レスポンスが HTTP 404 や 500 を返す <strong>HTTP エラーステータスの場合でも拒否されません</strong>。サーバーがヘッダーで応答すると、プロミスは直ちに正常に解決します（レスポンスが 200-299 の範囲にない場合は、レスポンスの <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Response/ok\"><code>ok</code> <small>(en-US)</small></a> プロパティが false に設定されます）。拒否されるのは、ネットワーク障害があった場合や、何かがリクエストの完了を妨げた場合のみです。</li>\n  <li><code>fetch()</code> は <a href=\"/ja/docs/Web/API/fetch#parameters\">init オプション</a>で資格情報を設定しない限り、<strong>オリジンをまたぐクッキーを送信しません</strong>。（<a href=\"https://github.com/whatwg/fetch/pull/585\" class=\"external\" rel=\" noopener\">2018 年 4 月以降</a>。仕様では、既定の資格情報ポリシーを <code>same-origin</code> に変更しました。 Firefox は 61.0b13 から変更しました。）</li>\n</ul>\n<p>基本的なフェッチリクエストは、本当に簡単に設定できます。以下のコードを見てください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://example.com/movies.json'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=&gt;</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これはネットワーク越しに JSON ファイルを取得してコンソールに出力するスクリプトです。 <code>fetch()</code> の最も簡単な使い方は 1 つの引数 — fetch で取得したいリソースへのパス — のみをとり、 <a href=\"/ja/docs/Web/API/Response\"><code>Response</code></a> オブジェクトで解決するプロミスを返します。</p>\n<p><a href=\"/ja/docs/Web/API/Response\"><code>Response</code></a> は、実際の JSON レスポンス本体を直接持っているのではなく、 HTTP レスポンス全体を表現するものです。 <a href=\"/ja/docs/Web/API/Response\"><code>Response</code></a> オブジェクトから JSON の本文の内容を抽出するには、 <a href=\"/ja/docs/Web/API/Response/json\" title=\"json()\"><code>json()</code></a> メソッドを使用します。これはレスポンス本文のテキストを JSON として解釈した結果で解決する第 2 のプロミスを返します。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> 本文の内容が他の形式である場合に展開する同様の方法は、 <a href=\"#body\">Body</a> の節を参照してください。</p>\n</div>\n<p>Fetch リクエストは、受け取るリソースからの指示ではなく、<a href=\"/ja/docs/Web/HTTP/Headers/Content-Security-Policy\">コンテンツセキュリティポリシー</a>の <code>connect-src</code> ディレクティブによって制御されます。</p>"}},{"type":"prose","value":{"id":"リクエストオプションの適用","title":"リクエストオプションの適用","isH3":true,"content":"<p><code>fetch()</code> メソッドには 2 つ目の引数を適用することができ、 <code>init</code> オブジェクトで様々な種類の設定を制御することができます。</p>\n<p>すべての設定可能なオプションや詳しい説明については、 <a href=\"/ja/docs/Web/API/fetch\"><code>fetch()</code></a> を参照してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// POST メソッドの実装の例</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">postData</span><span class=\"token punctuation\">(</span>url <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 既定のオプションには * が付いています</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// *GET, POST, PUT, DELETE, etc.</span>\n    <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'cors'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// no-cors, *cors, same-origin</span>\n    <span class=\"token literal-property property\">cache</span><span class=\"token operator\">:</span> <span class=\"token string\">'no-cache'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// *default, no-cache, reload, force-cache, only-if-cached</span>\n    <span class=\"token literal-property property\">credentials</span><span class=\"token operator\">:</span> <span class=\"token string\">'same-origin'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// include, *same-origin, omit</span>\n    <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span>\n      <span class=\"token comment\">// 'Content-Type': 'application/x-www-form-urlencoded',</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">redirect</span><span class=\"token operator\">:</span> <span class=\"token string\">'follow'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// manual, *follow, error</span>\n    <span class=\"token literal-property property\">referrerPolicy</span><span class=\"token operator\">:</span> <span class=\"token string\">'no-referrer'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url</span>\n    <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 本文のデータ型は \"Content-Type\" ヘッダーと一致させる必要があります</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// JSON のレスポンスをネイティブの JavaScript オブジェクトに解釈</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">postData</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://example.com/answer'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">answer</span><span class=\"token operator\">:</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// `data.json()` の呼び出しで解釈された JSON データ</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>なお、 <code>mode: \"no-cors\"</code> はリクエスト中の限られたヘッダーにしか許可されていません。</p>\n<ul>\n  <li><code>Accept</code></li>\n  <li><code>Accept-Language</code></li>\n  <li><code>Content-Language</code></li>\n  <li><code>Content-Type</code> のうち、値が <code>application/x-www-form-urlencoded</code>, <code>multipart/form-data</code>, <code>text/plain</code> のいずれかのもの</li>\n</ul>"}},{"type":"prose","value":{"id":"認証情報つきのリクエストの送信","title":"認証情報つきのリクエストの送信","isH3":true,"content":"<p>ブラウザーに認証情報のついたリクエストを送るようにするには、同一オリジンの場合もオリジン間の呼び出しの場合も、 <code>credentials: 'include'</code> を <code>init</code> オブジェクトに追加して <code>fetch()</code> メソッドに渡してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://example.com'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">credentials</span><span class=\"token operator\">:</span> <span class=\"token string\">'include'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> <code>Access-Control-Allow-Origin</code> は <code>credentials: 'include'</code> を含むリクエストでは、ワイルドカードを使用することを禁止しています。このような場合、正確なオリジンを提供する必要があります。 CORS unblocker 拡張を使用している場合でも、リクエストは失敗します。</p>\n</div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> この設定に関係なく、ブラウザーはプリフライトリクエストで資格情報を送信しないようにしてください。詳細については、 <a href=\"/ja/docs/Web/HTTP/CORS#%E8%B3%87%E6%A0%BC%E6%83%85%E5%A0%B1%E3%82%92%E5%90%AB%E3%82%80%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88\">CORS &gt; 資格情報を含むリクエスト</a>を参照してください。</p>\n</div>\n<p>リクエスト URL が呼び出しスクリプトと同一オリジンの場合だけ資格情報を送りたい場合、 <code>credentials: 'same-origin'</code> を追加します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// オリジン 'https://example.com' で呼び出すスクリプトです。</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://example.com'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">credentials</span><span class=\"token operator\">:</span> <span class=\"token string\">'same-origin'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ブラウザーがリクエストに資格情報を含めないことを保証するには、代わりに <code>credentials: 'omit'</code> を使用してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://example.com'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">credentials</span><span class=\"token operator\">:</span> <span class=\"token string\">'omit'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"json_データのアップロード","title":"JSON データのアップロード","isH3":true,"content":"<p><a href=\"/ja/docs/Web/API/fetch\" title=\"fetch()\"><code>fetch()</code></a> を使って JSON エンコードしたデータを POST します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">'example'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://example.com/profile'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// or 'PUT'</span>\n  <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=&gt;</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Success:'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error:'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"ファイルのアップロード","title":"ファイルのアップロード","isH3":true,"content":"<p>ファイルは HTML の <code>&lt;input type=\"file\" /&gt;</code> input 要素と、<a href=\"/ja/docs/Web/API/FormData/FormData\" title=\"FormData()\"><code>FormData()</code></a> と <a href=\"/ja/docs/Web/API/fetch\"><code>fetch()</code></a> を使ってアップロードできます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> formData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fileField <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input[type=\"file\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nformData<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'abc123'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nformData<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'avatar'</span><span class=\"token punctuation\">,</span> fileField<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://example.com/profile/avatar'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'PUT'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> formData\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=&gt;</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Success:'</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error:'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"複数のファイルのアップロード","title":"複数のファイルのアップロード","isH3":true,"content":"<p>ファイルのアップロードは、 HTML の <code>&lt;input type=\"file\" multiple /&gt;</code> 入力要素と <a href=\"/ja/docs/Web/API/FormData/FormData\" title=\"FormData()\"><code>FormData()</code></a> と <a href=\"/ja/docs/Web/API/fetch\"><code>fetch()</code></a> を使用して行うことができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> formData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> photos <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input[type=\"file\"][multiple]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nformData<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'My Vegas Vacation'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> photos<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  formData<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">photos_</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> photos<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://example.com/posts'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> formData<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=&gt;</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Success:'</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error:'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"テキストファイルの_1_行ずつの処理","title":"テキストファイルの 1 行ずつの処理","isH3":true,"content":"<p>レスポンスから読み込まれる塊は、行の境界できれいに分割されておらず、文字列ではなく Uint8Arrays になっています。テキストファイルを読み取って一行ずつ処理したい場合、これらの複雑な処理を行うのはあなた次第です。次の例は、行イテレーターを作成することでこれを行う方法の一つを示しています (簡単にするため、テキストは UTF-8 であると仮定しており、読み取りエラーは処理していません)。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">makeTextFileLineIterator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fileURL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> utf8Decoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextDecoder</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>fileURL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> reader <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">getReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> chunk<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">done</span><span class=\"token operator\">:</span> readerDone <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  chunk <span class=\"token operator\">=</span> chunk <span class=\"token operator\">?</span> utf8Decoder<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\n|\\r|\\r\\n</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">gm</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> startIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> result<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>readerDone<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">let</span> remainder <span class=\"token operator\">=</span> chunk<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>startIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> chunk<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">done</span><span class=\"token operator\">:</span> readerDone <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      chunk <span class=\"token operator\">=</span> remainder <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>chunk <span class=\"token operator\">?</span> utf8Decoder<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      startIndex <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>lastIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">yield</span> chunk<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>startIndex<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    startIndex <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>lastIndex<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>startIndex <span class=\"token operator\">&lt;</span> chunk<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// last line didn't end in a newline char</span>\n    <span class=\"token keyword\">yield</span> chunk<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>startIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> line <span class=\"token keyword\">of</span> <span class=\"token function\">makeTextFileLineIterator</span><span class=\"token punctuation\">(</span>urlOfFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">processLine</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"フェッチが成功したかの確認","title":"フェッチが成功したかの確認","isH3":true,"content":"<p><a href=\"/ja/docs/Web/API/fetch\"><code>fetch()</code></a> のプロミスは、ネットワークエラーに遭遇したりサーバー側の CORS の設定（通常はアクセス権の問題など）が間違っていたりすると、 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> で拒否されます。例えば、 404 はネットワークエラーにはなりません。 <code>fetch()</code> が成功したかどうかを正確に判定するには、プロミスが解決された後で、 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Response/ok\"><code>Response.ok</code> <small>(en-US)</small></a> プロパティが true になっているかを確認してください。次のようなコードになるでしょう。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flowers.jpg'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Network response was not OK'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">myBlob</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    myImage<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>myBlob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'There has been a problem with your fetch operation:'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"独自のリクエストオブジェクトの提供","title":"独自のリクエストオブジェクトの提供","isH3":true,"content":"<p><code>fetch()</code> の呼び出しに、リクエストしたいリソースへのパスを渡す代わりに、<a href=\"/ja/docs/Web/API/Request/Request\" title=\"Request()\"><code>Request()</code></a> コンストラクターを使用して Request オブジェクトを作成し、 <code>fetch()</code> メソッドの引数として渡すこともできます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> myHeaders <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> myRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flowers.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> myHeaders<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'cors'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">cache</span><span class=\"token operator\">:</span> <span class=\"token string\">'default'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>myRequest<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=&gt;</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">myBlob</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    myImage<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>myBlob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>Request()</code> は、 <code>fetch()</code> メソッドとまったく同じ引数を受け入れます。既存のリクエストオブジェクトを渡して、コピーを作成することもできます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> anotherRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span>myRequest<span class=\"token punctuation\">,</span> myInit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これは、リクエストとレスポンスの本文を 1 つだけ使用するのでとても有用です。必要であれば、<code>init</code> オプションを変化させながらリクエスト/レスポンスを再利用できるようにコピーします。コピーは body が読まれる前でなければならず、コピーの中の body を読むと、オリジナルのリクエストも既読にマークされます。</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>Note:</strong> <a href=\"/ja/docs/Web/API/Request/clone\" title=\"clone()\"><code>clone()</code></a> メソッドを利用してコピーを生成することもできます。これには、ほかのコピーメソッドと若干異なる意味があります — 古いリクエストの body がすでに読み込まれていた場合、前者は失敗しますが、<code>clone()</code> は失敗しません (レスポンスでも同じです)。</p>\n</div>"}},{"type":"prose","value":{"id":"headers","title":"Headers","isH3":false,"content":"<p><a href=\"/ja/docs/Web/API/Headers\"><code>Headers</code></a> インターフェースでは、 <a href=\"/ja/docs/Web/API/Headers/Headers\" title=\"Headers()\"><code>Headers()</code></a> コンストラクターを使用して、ヘッダーオブジェクトを作成することができます。ヘッダーオブジェクトは、シンプルな複数の名前と値のマップです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> myHeaders <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'text/plain'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Length'</span><span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'X-Custom-Header'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ProcessThisImmediately'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>コンストラクターに配列の配列またはオブジェクトリテラルを渡すことで、同じことが実現できます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> myHeaders <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/plain'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">'Content-Length'</span><span class=\"token operator\">:</span> content<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">'X-Custom-Header'</span><span class=\"token operator\">:</span> <span class=\"token string\">'ProcessThisImmediately'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ヘッダーの中身を見たり、検索することができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Set-Cookie'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nmyHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'text/html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'X-Custom-Header'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'AnotherValue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Length'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 11</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'X-Custom-Header'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['ProcessThisImmediately', 'AnotherValue']</span>\n\nmyHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'X-Custom-Header'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'X-Custom-Header'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null</span>\n</code></pre></div>\n<p>いくつかの操作は<a href=\"/ja/docs/Web/API/Service_Worker_API\" title=\"サービスワーカー\">サービスワーカー</a>でしか役立ちませんが、ヘッダーを操作するためのより良い API を提供しています。</p>\n<p>Headers のメソッドはすべて、有効な HTTP ヘッダーではない名前が渡されたときは <code>TypeError</code> が発生します。 immutable ガード (<a href=\"#%E3%82%AC%E3%83%BC%E3%83%89\">下記参照</a>) がかかっている場合に変更操作を行った場合も <code>TypeError</code> が発生します。それ以外の場合は、暗黙に失敗します。例を示します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> myResponse <span class=\"token operator\">=</span> Response<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  myResponse<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Origin'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://mybank.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"銀行のふりをしないで下さい！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ヘッダーの良い使用方法としては、以下のように、処理を行う前に、コンテンツタイプが正しいかどうか判定する等の使い方があります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>myRequest<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">const</span> contentType <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'content-type'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>contentType <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>contentType<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'application/json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Oops, we haven't got JSON!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/* process your data further */</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"ガード","title":"ガード","isH3":true,"content":"<p>ヘッダーは、リクエストで送信でき、レスポンスで受信できます。また、どの情報が変更できる（または、すべき）かといったさまざまな制限があります。そのため、ヘッダーには <em>guard</em> プロパティがあります。これはリクエストやレスポンスに含まれませんが、ヘッダーオブジェクトでできる変更操作に影響を与えます。</p>\n<p>設定できるガード値には以下のものがあります。</p>\n<ul>\n  <li><code>none</code>: 既定値です。</li>\n  <li><code>request</code>: リクエストから得たヘッダーオブジェクト (<a href=\"/ja/docs/Web/API/Request/headers\"><code>Request.headers</code></a>) を保護します。</li>\n  <li><code>request-no-cors</code>: <a href=\"/ja/docs/Web/API/Request/mode\"><code>Request.mode</code></a> が <code>no-cors</code> で生成されたリクエストから得たヘッダーオブジェクトを保護します。</li>\n  <li><code>response</code>: レスポンスから得たヘッダーオブジェクト (<a href=\"/ja/docs/Web/API/Response/headers\"><code>Response.headers</code></a>) を保護します。</li>\n  <li><code>immutable</code>: ヘッダーを読み取り専用にします。主にサービスワーカーで使用されます。</li>\n</ul>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>Note:</strong> <code>response</code> のガードされたヘッダーオブジェクトに <code>Content-Length</code> ヘッダーを追加したり設定したりすることはできません。同様に、レスポンスヘッダーに <code>Set-Cookie</code> を挿入することもできません。サービスワーカーは合成されたレスポンスでクッキーを設定することはできません。</p>\n</div>"}},{"type":"prose","value":{"id":"response_オブジェクト","title":"Response オブジェクト","isH3":false,"content":"<p>すでに見てきたように、 <a href=\"/ja/docs/Web/API/Response\"><code>Response</code></a> インスタンスは、 <code>fetch()</code> プロミスが解決 (resolve) されたときに返値として渡されます。</p>\n<p>使用できる主なレスポンスプロパティには、以下のものがあります。</p>\n<ul>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Response/status\"><code>Response.status</code> <small>(en-US)</small></a> — 整数値 (既定値は 200) で、 HTTP ステータスコードが入ります。</li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Response/statusText\"><code>Response.statusText</code> <small>(en-US)</small></a> — HTTP ステータスコードに対応するメッセージの文字列 (既定値は \"\")。なお、 HTTP/2 ではステータスメッセージに<a href=\"https://fetch.spec.whatwg.org/#concept-response-status-message\" class=\"external\" rel=\" noopener\">対応していません</a>。</li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Response/ok\"><code>Response.ok</code> <small>(en-US)</small></a> — 上述の例で使用したように、これは HTTP ステータスコードが 200-299 の範囲にあるかどうかをチェックする略記法です。これは論理値を返します。</li>\n</ul>\n<p>Response オブジェクトは JavaScript で動的に作ることもできます。これは<a href=\"/ja/docs/Web/API/Service_Worker_API\" title=\"サービスワーカー\">サービスワーカー</a>で非常に役立ちます。例えばリクエストを受け取ったときに <a href=\"/ja/docs/Web/API/FetchEvent/respondWith\" title=\"respondWith()\"><code>respondWith()</code></a> メソッドによってカスタマイズされたレスポンスを返すようなときに役立ちます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> myBody <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fetch'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ServiceWorker intercepting a fetch</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span>myBody<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/plain'</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><a href=\"/ja/docs/Web/API/Response/Response\" title=\"Response()\"><code>Response()</code></a> コンストラクターは、オプションとして 2 つの引数をとることができます。レスポンス本文と初期化オブジェクトです。 (<a href=\"/ja/docs/Web/API/Request/Request\" title=\"Request()\"><code>Request()</code></a> が受け取れるものと似ています。)</p>\n<div class=\"notecard note\" id=\"sect6\">\n  <p><strong>Note:</strong> 静的メソッド <a href=\"/ja/docs/Web/API/Response/error\" title=\"error()\"><code>error()</code></a> は単純にエラーレスポンスを返します。同様に <a href=\"/ja/docs/Web/API/Response/redirect\" title=\"redirect()\"><code>redirect()</code></a> メソッドも 指定した URL にリダイレクトするレスポンスを返します。これらはサービスワーカーにのみ関連しています。</p>\n</div>"}},{"type":"prose","value":{"id":"body","title":"Body","isH3":false,"content":"<p>リクエストにもレスポンスにも本文データが含まれています。本文は以下のタイプのいずれかのインスタンスです。</p>\n<ul>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a></li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>ArrayBufferView</code> <small>(en-US)</small></a> (Uint8Array など)</li>\n  <li><a href=\"/ja/docs/Web/API/Blob\"><code>Blob</code></a>/File</li>\n  <li>文字列</li>\n  <li><a href=\"/ja/docs/Web/API/URLSearchParams\"><code>URLSearchParams</code></a></li>\n  <li><a href=\"/ja/docs/Web/API/FormData\"><code>FormData</code></a></li>\n</ul>\n<p><a href=\"/ja/docs/Web/API/Request\"><code>Request</code></a> および <a href=\"/ja/docs/Web/API/Response\"><code>Response</code></a> インターフェイスは本文を展開するために以下のメソッドを持っています。これらはすべて最終的に実際の内容で解決されるプロミスを返します。</p>\n<ul>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/arrayBuffer\"><code>Request.arrayBuffer()</code> <small>(en-US)</small></a> / <a href=\"/ja/docs/Web/API/Response/arrayBuffer\"><code>Response.arrayBuffer()</code></a></li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/blob\"><code>Request.blob()</code> <small>(en-US)</small></a> / <a href=\"/ja/docs/Web/API/Response/blob\"><code>Response.blob()</code></a></li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/formData\"><code>Request.formData()</code> <small>(en-US)</small></a> / <a href=\"/ja/docs/Web/API/Response/formData\"><code>Response.formData()</code></a></li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/json\"><code>Request.json()</code> <small>(en-US)</small></a> / <a href=\"/ja/docs/Web/API/Response/json\"><code>Response.json()</code></a></li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/text\"><code>Request.text()</code> <small>(en-US)</small></a> / <a href=\"/ja/docs/Web/API/Response/text\"><code>Response.text()</code></a></li>\n</ul>\n<p>これらはテキストでないデータを XHR よりはるかに楽に扱うことができます。</p>\n<p>リクエスト本文は、body 引数を渡すことによって設定することができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> form <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'login-form'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/login'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> form\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>リクエストとレスポンス (および <code>fetch()</code> 関数の拡張) は、自動的にコンテンツタイプを決定しようとします。リクエストもまた、指定されていなければ自動で <code>Content-Type</code> ヘッダーを設定しようとします。</p>"}},{"type":"prose","value":{"id":"使用可能かどうかの判別","title":"使用可能かどうかの判別","isH3":false,"content":"<p>Fetch API が利用できるかどうかは、<a href=\"/ja/docs/Web/API/Headers\"><code>Headers</code></a>、<a href=\"/ja/docs/Web/API/Request\"><code>Request</code></a>、<a href=\"/ja/docs/Web/API/Response\"><code>Response</code></a>、<a href=\"/ja/docs/Web/API/fetch\"><code>fetch()</code></a> のいずれかが <a href=\"/ja/docs/Web/API/Window\"><code>Window</code></a> もしくは <a href=\"/ja/docs/Web/API/Worker\"><code>Worker</code></a> のスコープで参照できるかどうかによって判断できます。例を挙げます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>fetch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ここで fetch リクエストを実行</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// XMLHttpRequest で何か実行する？</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"ポリフィル","title":"ポリフィル","isH3":false,"content":"<p>対応していないブラウザーでフェッチを使用するには、非対応ブラウザー用の機能を再生成する <a href=\"https://github.com/github/fetch\" class=\"external\" rel=\" noopener\">Fetch ポリフィル</a>が利用できます。</p>"}},{"type":"prose","value":{"id":"仕様書","title":"仕様書","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>仕様書</th>\n      <th>状態</th>\n      <th>備考</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://fetch.spec.whatwg.org/\" hreflang=\"en\" lang=\"en\" class=\"external\" title=\"Fetchの仕様書\" rel=\" noopener\">Fetch</a></td>\n      <td><span class=\"spec-living\">現行の標準</span></td>\n      <td>初回定義</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"query":"api.fetch","dataURL":"/ja/docs/Web/API/Fetch_API/Using_Fetch/bcd.json"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/API/Service_Worker_API\">ServiceWorker API</a></li>\n  <li><a href=\"/ja/docs/Web/HTTP/CORS\">HTTP アクセス制御 (CORS)</a></li>\n  <li><a href=\"/ja/docs/Web/HTTP\">HTTP</a></li>\n  <li><a href=\"https://github.com/github/fetch\" class=\"external\" rel=\" noopener\">Fetch polyfill</a></li>\n  <li><a href=\"https://github.com/mdn/fetch-examples/\" class=\"external\" rel=\" noopener\">Fetch examples on Github</a></li>\n</ul>"}}],"toc":[{"text":"Headers","id":"headers"},{"text":"Response オブジェクト","id":"response_オブジェクト"},{"text":"Body","id":"body"},{"text":"使用可能かどうかの判別","id":"使用可能かどうかの判別"},{"text":"ポリフィル","id":"ポリフィル"},{"text":"仕様書","id":"仕様書"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"Fetch API は、リクエストやレスポンスといった HTTP のパイプラインを操作する要素にアクセスするための JavaScript インターフェイスです。グローバルの fetch() メソッドも提供しており、簡単で論理的な方法で、非同期にネットワーク越しでリソースを取得することができます。","popularity":0.0064,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using the Fetch API","locale":"en-US","native":"English (US)"},{"title":"Uso de Fetch","locale":"es","native":"Español"},{"title":"Utiliser Fetch","locale":"fr","native":"Français"},{"title":"Fetch 사용하기","locale":"ko","native":"한국어"},{"title":"Usando Fetch","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Использование Fetch","locale":"ru","native":"Русский"},{"title":"使用 Fetch","locale":"zh-CN","native":"中文 (简体)"},{"title":"Using Fetch","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ja/web/api/fetch_api/using_fetch","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/fetch_api/using_fetch/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/Fetch_API","title":"Fetch API"},{"uri":"/ja/docs/Web/API/Fetch_API/Using_Fetch","title":"Fetch の使用"}],"pageTitle":"Fetch の使用 - Web API | MDN","noIndexing":false}}