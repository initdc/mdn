{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Node","mdn_url":"/ja/docs/Web/API/Node","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/Document_Object_Model\">Document Object Model</a></strong></li><li><strong><a href=\"/ja/docs/Web/API/Node\"><code>Node</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>プロパティ</summary><ol><li><a href=\"/ja/docs/Web/API/Node/baseURI\"><code>baseURI</code></a></li><li><a href=\"/ja/docs/Web/API/Node/childNodes\"><code>childNodes</code></a></li><li><a href=\"/ja/docs/Web/API/Node/firstChild\"><code>firstChild</code></a></li><li><a href=\"/ja/docs/Web/API/Node/isConnected\"><code>isConnected</code></a></li><li><a href=\"/ja/docs/Web/API/Node/lastChild\"><code>lastChild</code></a></li><li><a href=\"/ja/docs/Web/API/Node/nextSibling\"><code>nextSibling</code></a></li><li><a href=\"/ja/docs/Web/API/Node/nodeName\"><code>nodeName</code></a></li><li><a href=\"/ja/docs/Web/API/Node/nodeType\"><code>nodeType</code></a></li><li><a href=\"/ja/docs/Web/API/Node/nodeValue\"><code>nodeValue</code></a></li><li><a href=\"/ja/docs/Web/API/Node/ownerDocument\"><code>ownerDocument</code></a></li><li><a href=\"/ja/docs/Web/API/Node/parentElement\"><code>parentElement</code></a></li><li><a href=\"/ja/docs/Web/API/Node/parentNode\"><code>parentNode</code></a></li><li><a href=\"/ja/docs/Web/API/Node/previousSibling\"><code>previousSibling</code></a></li><li><a href=\"/ja/docs/Web/API/Node/textContent\"><code>textContent</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>メソッド</summary><ol><li><a href=\"/ja/docs/Web/API/Node/appendChild\"><code>appendChild()</code></a></li><li><a href=\"/ja/docs/Web/API/Node/cloneNode\"><code>cloneNode()</code></a></li><li><a href=\"/ja/docs/Web/API/Node/compareDocumentPosition\"><code>compareDocumentPosition()</code></a></li><li><a href=\"/ja/docs/Web/API/Node/contains\"><code>contains()</code></a></li><li><a href=\"/ja/docs/Web/API/Node/getRootNode\"><code>getRootNode()</code></a></li><li><a href=\"/ja/docs/Web/API/Node/hasChildNodes\"><code>hasChildNodes()</code></a></li><li><a href=\"/ja/docs/Web/API/Node/insertBefore\"><code>insertBefore()</code></a></li><li><a href=\"/ja/docs/Web/API/Node/isDefaultNamespace\"><code>isDefaultNamespace()</code></a></li><li><a href=\"/ja/docs/Web/API/Node/isEqualNode\"><code>isEqualNode()</code></a></li><li><a href=\"/ja/docs/Web/API/Node/isSameNode\"><code>isSameNode()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/API/Node/isSupported\"><code>isSupported()</code></a></li><li><a href=\"/ja/docs/Web/API/Node/lookupNamespaceURI\"><code>lookupNamespaceURI()</code></a></li><li><a href=\"/ja/docs/Web/API/Node/lookupPrefix\"><code>lookupPrefix()</code></a></li><li><a href=\"/ja/docs/Web/API/Node/normalize\"><code>normalize()</code></a></li><li><a href=\"/ja/docs/Web/API/Node/removeChild\"><code>removeChild()</code></a></li><li><a href=\"/ja/docs/Web/API/Node/replaceChild\"><code>replaceChild()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>イベント</summary><ol><li><a href=\"/ja/docs/Web/API/Node/selectstart_event\"><code>selectstart</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>継承</summary><ol><li><a href=\"/ja/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>DOM に関連するページ</summary><ol><li><a href=\"/ja/docs/Web/API/AbortController\"><code>AbortController</code></a></li><li><a href=\"/ja/docs/Web/API/AbortSignal\"><code>AbortSignal</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AbstractRange\"><code>AbstractRange</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/API/Attr\"><code>Attr</code></a></li><li><a href=\"/ja/docs/Web/API/CDATASection\"><code>CDATASection</code></a></li><li><a href=\"/ja/docs/Web/API/CharacterData\"><code>CharacterData</code></a></li><li><a href=\"/ja/docs/Web/API/Comment\"><code>Comment</code></a></li><li><a href=\"/ja/docs/Web/API/CustomEvent\"><code>CustomEvent</code></a></li><li><a href=\"/ja/docs/Web/API/DOMError\"><code>DOMError</code></a></li><li><a href=\"/ja/docs/Web/API/DOMException\"><code>DOMException</code></a></li><li><a href=\"/ja/docs/Web/API/DOMImplementation\"><code>DOMImplementation</code></a></li><li><a href=\"/ja/docs/Web/API/DOMParser\"><code>DOMParser</code></a></li><li><a href=\"/ja/docs/Web/API/DOMPoint\"><code>DOMPoint</code></a></li><li><a href=\"/ja/docs/Web/API/DOMPointReadOnly\"><code>DOMPointReadOnly</code></a></li><li><a href=\"/ja/docs/Web/API/DOMRect\"><code>DOMRect</code></a></li><li><a href=\"/ja/docs/Web/API/DOMTimeStamp\"><code>DOMTimeStamp</code></a></li><li><a href=\"/ja/docs/Web/API/DOMTokenList\"><code>DOMTokenList</code></a></li><li><a href=\"/ja/docs/Web/API/Document\"><code>Document</code></a></li><li><a href=\"/ja/docs/Web/API/DocumentFragment\"><code>DocumentFragment</code></a></li><li><a href=\"/ja/docs/Web/API/DocumentType\"><code>DocumentType</code></a></li><li><a href=\"/ja/docs/Web/API/Element\"><code>Element</code></a></li><li><a href=\"/ja/docs/Web/API/Event\"><code>Event</code></a></li><li><a href=\"/ja/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLCollection\"><code>HTMLCollection</code></a></li><li><a href=\"/ja/docs/Web/API/MutationObserver\"><code>MutationObserver</code></a></li><li><a href=\"/ja/docs/Web/API/NamedNodeMap\"><code>NamedNodeMap</code></a></li><li><a href=\"/ja/docs/Web/API/NodeIterator\"><code>NodeIterator</code></a></li><li><a href=\"/ja/docs/Web/API/NodeList\"><code>NodeList</code></a></li><li><a href=\"/ja/docs/Web/API/ProcessingInstruction\"><code>ProcessingInstruction</code></a></li><li><a href=\"/ja/docs/Web/API/Range\"><code>Range</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/StaticRange\"><code>StaticRange</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/API/Text\"><code>Text</code></a></li><li><a href=\"/ja/docs/Web/API/TextDecoder\"><code>TextDecoder</code></a></li><li><a href=\"/ja/docs/Web/API/TextEncoder\"><code>TextEncoder</code></a></li><li><a href=\"/ja/docs/Web/API/TimeRanges\"><code>TimeRanges</code></a></li><li><a href=\"/ja/docs/Web/API/TreeWalker\"><code>TreeWalker</code></a></li><li><a href=\"/ja/docs/Web/API/XMLDocument\"><code>XMLDocument</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/ja/docs/Glossary/DOM\">DOM</a> の <strong><code>Node</code></strong> インターフェイスは、他の多くの DOM API オブジェクトのベースとなる抽象的な基底クラスです。したがって、これらのオブジェクト型と類似しており、しばしば交換して使用することができます。抽象クラスであるため、単なる <code>Node</code> オブジェクトというものは存在しません。 <code>Node</code> の機能を実装しているオブジェクトはすべて、何れかのサブクラスに基づいています。最も注目すべきものは、 <a href=\"/ja/docs/Web/API/Document\"><code>Document</code></a>, <a href=\"/ja/docs/Web/API/Element\"><code>Element</code></a>, <a href=\"/ja/docs/Web/API/DocumentFragment\"><code>DocumentFragment</code></a> です。</p>\n<p>それに加えて、あらゆる種類の DOM ノードが <code>Node</code> を基底とするインターフェイスで表現されます。これには、 <a href=\"/ja/docs/Web/API/Attr\"><code>Attr</code></a>, <a href=\"/ja/docs/Web/API/CharacterData\"><code>CharacterData</code></a> (<a href=\"/ja/docs/Web/API/Text\"><code>Text</code></a>, <a href=\"/ja/docs/Web/API/Comment\"><code>Comment</code></a>, <a href=\"/ja/docs/Web/API/CDATASection\"><code>CDATASection</code></a>, <a href=\"/ja/docs/Web/API/ProcessingInstruction\"><code>ProcessingInstruction</code></a> がすべて基底とするもの), <a href=\"/ja/docs/Web/API/DocumentType\"><code>DocumentType</code></a> があります。</p>\n<p>場合によっては、ベースとなる <code>Node</code> インターフェイスの特定の機能が子インターフェイスに適用されないことがあります。この場合、継承するノードは状況に応じて <code>null</code> を返したり、例外を投げたりします。例えば、子を持てないノード型に子を追加しようとすると、例外が発生します。</p><svg viewBox=\"-1 -1 650 42\" preserveAspectRatio=\"xMinYMin meet\">\n  <a style=\"text-decoration: none;\" xlink:href=\"/ja/docs/Web/API/EventTarget\">\n    <rect x=\"0\" y=\"0\" width=\"88\" height=\"25\" fill=\"#fff\" stroke=\"#D4DDE4\" stroke-width=\"2px\"></rect>\n    <text x=\"44\" y=\"16\" font-size=\"10px\" fill=\"#4D4E53\" text-anchor=\"middle\">\n      EventTarget\n    </text>\n  </a>\n  <line x1=\"88\" y1=\"14\" x2=\"118\" y2=\"14\" stroke=\"#D4DDE4\" \"=\"\"></line>\n  <polyline points=\"88,14 98,9 98,19 88,14\" stroke=\"#D4DDE4\" fill=\"#fff\"></polyline>\n  <a style=\"text-decoration: none;\" xlink:href=\"/ja/docs/Web/API/Node\" aria-current=\"page\">\n    <rect x=\"118\" y=\"0\" width=\"75\" height=\"25\" fill=\"#F4F7F8\" stroke=\"#D4DDE4\" stroke-width=\"2px\"></rect>\n    <text x=\"155.5\" y=\"16\" font-size=\"10px\" fill=\"#4D4E53\" text-anchor=\"middle\">\n      Node\n    </text>\n  </a></svg>"}},{"type":"prose","value":{"id":"プロパティ","title":"プロパティ","isH3":false,"content":"<p><em>以下のプロパティに加え、 <code>Node</code> は親である <a href=\"/ja/docs/Web/API/EventTarget\"><code>EventTarget</code></a> からプロパティを継承しています</em>。</p>\n<dl>\n  <dt id=\"node.baseuri\"><a href=\"/ja/docs/Web/API/Node/baseURI\"><code>Node.baseURI</code></a><span title=\"This value may not be changed.\" class=\"badge inline readonly\">読取専用 </span></dt>\n  <dd>\n    <p>この <code>Node</code> を持つ文書のベース URL を表す文字列を返します。</p>\n  </dd>\n  <dt id=\"node.childnodes\"><a href=\"/ja/docs/Web/API/Node/childNodes\"><code>Node.childNodes</code></a><span title=\"This value may not be changed.\" class=\"badge inline readonly\">読取専用 </span></dt>\n  <dd>\n    <p>このノードのすべての子孫（要素、テキスト、コメント）を持つ、生きた <a href=\"/ja/docs/Web/API/NodeList\"><code>NodeList</code></a> を返します。 <a href=\"/ja/docs/Web/API/NodeList\"><code>NodeList</code></a> が生きているとは、<code>Node</code> の子が変化すれば自動的に <a href=\"/ja/docs/Web/API/NodeList\"><code>NodeList</code></a> オブジェクトが更新されることを意味します。</p>\n  </dd>\n  <dt id=\"node.firstchild\"><a href=\"/ja/docs/Web/API/Node/firstChild\"><code>Node.firstChild</code></a><span title=\"This value may not be changed.\" class=\"badge inline readonly\">読取専用 </span></dt>\n  <dd>\n    <p>ノードの直下の最初の子ノードを表す <code>Node</code> を返します。子が存在しなければ <code>null</code> を返します。</p>\n  </dd>\n  <dt id=\"node.isconnected\"><a href=\"/ja/docs/Web/API/Node/isConnected\"><code>Node.isConnected</code></a><span title=\"This value may not be changed.\" class=\"badge inline readonly\">読取専用 </span></dt>\n  <dd>\n    <p>論理値で、ノードが (直接/間接的に) コンテキストオブジェクト、例えば、通常の DOM の場合は <a href=\"/ja/docs/Web/API/Document\"><code>Document</code></a> オブジェクト、あるいはシャドウ DOM の場合は <a href=\"/ja/docs/Web/API/ShadowRoot\"><code>ShadowRoot</code></a> に接続されているかどうかを示します。</p>\n  </dd>\n  <dt id=\"node.lastchild\"><a href=\"/ja/docs/Web/API/Node/lastChild\"><code>Node.lastChild</code></a><span title=\"This value may not be changed.\" class=\"badge inline readonly\">読取専用 </span></dt>\n  <dd>\n    <p>ノードの直下の最後の子ノードを表す <code>Node</code> を返します。子が存在しなければ <code>null</code> を返します。</p>\n  </dd>\n  <dt id=\"node.nextsibling\"><a href=\"/ja/docs/Web/API/Node/nextSibling\"><code>Node.nextSibling</code></a><span title=\"This value may not be changed.\" class=\"badge inline readonly\">読取専用 </span></dt>\n  <dd>\n    <p>ツリー構造で次のノードを表す <code>Node</code> を返します。該当するノードがない場合は <code>null</code> を返します。</p>\n  </dd>\n  <dt id=\"node.nodename\"><a href=\"/ja/docs/Web/API/Node/nodeName\"><code>Node.nodeName</code></a><span title=\"This value may not be changed.\" class=\"badge inline readonly\">読取専用 </span></dt>\n  <dd>\n    <p><code>Node</code> の名前を持つ文字列を返します。名前の構造は、ノードの型によって異なります。例えば、<a href=\"/ja/docs/Web/API/HTMLElement\"><code>HTMLElement</code></a> は <a href=\"/ja/docs/Web/API/HTMLAudioElement\"><code>HTMLAudioElement</code></a> に対して <code>'audio'</code> というように対応するタグの名前、 <a href=\"/ja/docs/Web/API/Text\"><code>Text</code></a> ノードは <code>'#text'</code> という文字列、 <a href=\"/ja/docs/Web/API/Document\"><code>Document</code></a> ノードは <code>'#document'</code> という文字列になります。</p>\n  </dd>\n  <dt id=\"node.nodetype\"><a href=\"/ja/docs/Web/API/Node/nodeType\"><code>Node.nodeType</code></a><span title=\"This value may not be changed.\" class=\"badge inline readonly\">読取専用 </span></dt>\n  <dd>\n    <p>ノードの型を表す <code>unsigned short</code> を返します。使用できる値は次の通りです。</p>\n    <table>\n      <thead>\n        <tr>\n          <th>名前</th>\n          <th>値</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td><code>ELEMENT_NODE</code></td>\n          <td><code>1</code></td>\n        </tr>\n        <tr>\n          <td><code>ATTRIBUTE_NODE</code></td>\n          <td><code>2</code></td>\n        </tr>\n        <tr>\n          <td><code>TEXT_NODE</code></td>\n          <td><code>3</code></td>\n        </tr>\n        <tr>\n          <td><code>CDATA_SECTION_NODE</code></td>\n          <td><code>4</code></td>\n        </tr>\n        <tr>\n          <td><code>PROCESSING_INSTRUCTION_NODE</code></td>\n          <td><code>7</code></td>\n        </tr>\n        <tr>\n          <td><code>COMMENT_NODE</code></td>\n          <td><code>8</code></td>\n        </tr>\n        <tr>\n          <td><code>DOCUMENT_NODE</code></td>\n          <td><code>9</code></td>\n        </tr>\n        <tr>\n          <td><code>DOCUMENT_TYPE_NODE</code></td>\n          <td><code>10</code></td>\n        </tr>\n        <tr>\n          <td><code>DOCUMENT_FRAGMENT_NODE</code></td>\n          <td><code>11</code></td>\n        </tr>\n      </tbody>\n    </table>\n  </dd>\n  <dt id=\"node.nodevalue\"><a href=\"/ja/docs/Web/API/Node/nodeValue\"><code>Node.nodeValue</code></a></dt>\n  <dd>\n    <p>現在のノードの値を取得または設定します。</p>\n  </dd>\n  <dt id=\"node.ownerdocument\"><a href=\"/ja/docs/Web/API/Node/ownerDocument\"><code>Node.ownerDocument</code></a><span title=\"This value may not be changed.\" class=\"badge inline readonly\">読取専用 </span></dt>\n  <dd>\n    <p>ノードが所属する文書を <a href=\"/ja/docs/Web/API/Document\"><code>Document</code></a> で返します。ノードが文書自身の場合は、<code>null</code> を返します。</p>\n  </dd>\n  <dt id=\"node.parentnode\"><a href=\"/ja/docs/Web/API/Node/parentNode\"><code>Node.parentNode</code></a><span title=\"This value may not be changed.\" class=\"badge inline readonly\">読取専用 </span></dt>\n  <dd>\n    <p>このノードの親の <code>Node</code> を返します。ノードがツリーの最上位である、あるいはツリーに加わっていないなど、親が存在しない場合は <code>null</code> を返します。</p>\n  </dd>\n  <dt id=\"node.parentelement\"><a href=\"/ja/docs/Web/API/Node/parentElement\"><code>Node.parentElement</code></a><span title=\"This value may not be changed.\" class=\"badge inline readonly\">読取専用 </span></dt>\n  <dd>\n    <p>このノードの親の要素を <a href=\"/ja/docs/Web/API/Element\"><code>Element</code></a> で返します。ノードに親が存在しない、あるいは親が <a href=\"/ja/docs/Web/API/Element\"><code>Element</code></a> ではない場合は、<code>null</code> を返します。</p>\n  </dd>\n  <dt id=\"node.previoussibling\"><a href=\"/ja/docs/Web/API/Node/previousSibling\"><code>Node.previousSibling</code></a><span title=\"This value may not be changed.\" class=\"badge inline readonly\">読取専用 </span></dt>\n  <dd>\n    <p>ツリー構造で前のノードを表す <code>Node</code> を返します。該当するノードがない場合は <code>null</code> を返します。</p>\n  </dd>\n  <dt id=\"node.textcontent\"><a href=\"/ja/docs/Web/API/Node/textContent\"><code>Node.textContent</code></a></dt>\n  <dd>\n    <p>要素や要素のすべての子孫のテキストコンテンツを取得または設定します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"メソッド","title":"メソッド","isH3":false,"content":"<p><em>以下のプロパティに加えて、親である <a href=\"/ja/docs/Web/API/EventTarget\"><code>EventTarget</code></a> からメソッドを継承しています。</em></p>\n<dl>\n  <dt id=\"node.appendchild\"><a href=\"/ja/docs/Web/API/Node/appendChild\"><code>Node.appendChild()</code></a></dt>\n  <dd>\n    <p>\n      指定された <code>childNode</code> 引数を、現在のノードの最後の子として追加します。\n      引数が DOM ツリー上の既存のノードを参照している場合は、ノードが現在の位置から外されて新しい位置に追加されます。\n    </p>\n  </dd>\n  <dt id=\"node.clonenode\"><a href=\"/ja/docs/Web/API/Node/cloneNode\"><code>Node.cloneNode()</code></a></dt>\n  <dd>\n    <p><code>Node</code> を複製します。また、すべての内容物を複製することもできます。既定で、ノードの内容物を複製します。</p>\n  </dd>\n  <dt id=\"node.comparedocumentposition\"><a href=\"/ja/docs/Web/API/Node/compareDocumentPosition\"><code>Node.compareDocumentPosition()</code></a></dt>\n  <dd>\n    <p>現在のノードの位置を、他の文書内の別のノードと比較します。</p>\n  </dd>\n  <dt id=\"node.contains\"><a href=\"/ja/docs/Web/API/Node/contains\"><code>Node.contains()</code></a></dt>\n  <dd>\n    <p>ノードが指定したノードの子孫であるか否かを <code>true</code> または <code>false</code> の値で返します。</p>\n  </dd>\n  <dt id=\"node.getrootnode\"><a href=\"/ja/docs/Web/API/Node/getRootNode\"><code>Node.getRootNode()</code></a></dt>\n  <dd>\n    <p>コンテキストオブジェクトのルートを返します。任意で、シャドウルートが使用可能である場合にそれを含めることができます。</p>\n  </dd>\n  <dt id=\"node.haschildnodes\"><a href=\"/ja/docs/Web/API/Node/hasChildNodes\"><code>Node.hasChildNodes()</code></a></dt>\n  <dd>\n    <p>要素が子ノードを持っているか否かを示す論理値を返します。</p>\n  </dd>\n  <dt id=\"node.insertbefore\"><a href=\"/ja/docs/Web/API/Node/insertBefore\"><code>Node.insertBefore()</code></a></dt>\n  <dd>\n    <p>現在のノードの子として、参照先ノードの前に <code>Node</code> を挿入します。</p>\n  </dd>\n  <dt id=\"node.isdefaultnamespace\"><a href=\"/ja/docs/Web/API/Node/isDefaultNamespace\"><code>Node.isDefaultNamespace()</code></a></dt>\n  <dd>\n    <p>引数として名前空間の URI を受け入れて、名前空間が指定したノードの既定の名前空間であれば <code>true</code>、そうでない場合は <code>false</code> である論理値を返します。</p>\n  </dd>\n  <dt id=\"node.isequalnode\"><a href=\"/ja/docs/Web/API/Node/isEqualNode\"><code>Node.isEqualNode()</code></a></dt>\n  <dd>\n    <p>2 つのノードが同じ型であり、定義されているすべてのデータポイントが一致するか否かを表す 論理値を返します。</p>\n  </dd>\n  <dt id=\"node.issamenode\"><a href=\"/ja/docs/Web/API/Node/isSameNode\"><code>Node.isSameNode()</code></a></dt>\n  <dd>\n    <p>2 つのノードが同じである（すなわち、同じオブジェクトを参照している）か否かを示す論理値を返します。</p>\n  </dd>\n  <dt id=\"node.lookupprefix\"><a href=\"/ja/docs/Web/API/Node/lookupPrefix\"><code>Node.lookupPrefix()</code></a></dt>\n  <dd>\n    <p>指定した名前空間 URI の接頭辞があれば、その接頭辞を含む <a href=\"/ja/docs/Glossary/String\"><code>DOMString</code></a> を返します。接頭辞がない場合は <code>null</code> を返します。複数の接頭辞があった場合の結果は実装依存です。</p>\n  </dd>\n  <dt id=\"node.lookupnamespaceuri\"><a href=\"/ja/docs/Web/API/Node/lookupNamespaceURI\"><code>Node.lookupNamespaceURI()</code></a></dt>\n  <dd>\n    <p>接頭辞を受け入れて、指定したノードで接頭辞が関連付けられた名前空間が見つかった場合は名前空間の URI を返します (見つからない場合は <code>null</code> を返します)。接頭辞として <code>null</code> を与えると、既定の名前空間を返します。</p>\n  </dd>\n  <dt id=\"node.normalize\"><a href=\"/ja/docs/Web/API/Node/normalize\"><code>Node.normalize()</code></a></dt>\n  <dd>\n    <p>要素内のすべてのテキストノードをクリーンアップ（隣接ノードを統合し、空のノードを削除）します。</p>\n  </dd>\n  <dt id=\"node.removechild\"><a href=\"/ja/docs/Web/API/Node/removeChild\"><code>Node.removeChild()</code></a></dt>\n  <dd>\n    <p>現在の要素から子ノードを削除します。そのノードは現在のノードの子であることが必要です。</p>\n  </dd>\n  <dt id=\"node.replacechild\"><a href=\"/ja/docs/Web/API/Node/replaceChild\"><code>Node.replaceChild()</code></a></dt>\n  <dd>\n    <p>現在のノードの子 <code>Node</code> のひとつを、引数で指定した別のノードで置き換えます。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"廃止されたメソッド","title":"廃止されたメソッド","isH3":true,"content":"<dl>\n  <dt id=\"node.issupported\"><a href=\"/ja/docs/Web/API/Node/isSupported\"><code>Node.isSupported()</code></a> <svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg></dt>\n  <dd>\n    <p>DOM 実装が特定の機能を実装しており、またその機能が指定したノードで対応しているかを確認して、その結果を <code>true</code> または <code>false</code> で返します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":""}},{"type":"prose","value":{"id":"ノード内にあるすべての子を削除","title":"ノード内にあるすべての子を削除","isH3":true,"content":"<p>この関数は、ある要素の最初の子を、一つも残らなくなるまで削除します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">removeAllChildren</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    element<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>この関数の使用は単一の呼び出しです。こちらでは、文書の本文を空にします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">removeAllChildren</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>他の方法として、 textContent に空文字列を設定すること (<code>document.body.textContent = \"\"</code>) も可能です。</p>"}},{"type":"prose","value":{"id":"すべての子ノードの走査","title":"すべての子ノードの走査","isH3":true,"content":"<p>次の関数は、ルートノードに含まれる（ルートノード自身も含めた）すべてのノードに対してコールバック関数を再帰的に呼び出します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">eachNode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rootNode<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> nodes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token function\">eachNode</span><span class=\"token punctuation\">(</span>rootNode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      nodes<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> nodes\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">===</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>rootNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">hasChildNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> nodes <span class=\"token operator\">=</span> rootNode<span class=\"token punctuation\">.</span>childNodes\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> l <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">===</span> <span class=\"token function\">eachNode</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>この関数は、 <code>rootNode</code> のそれぞれの子孫ノードに対して（ルート自身も含め）再帰的に関数を呼び出します。</p>\n<p><code>callback</code> が省略された場合、この関数は代わりに <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> を返し、そこには <code>rootNode</code> とその中に含まれるすべてのノードが含まれます。</p>\n<p><code>callback</code> が提供され、 <code>false</code> を返した場合、現在の再帰レベルは中止され、関数は最後の親のレベルから実行を再開します。これは、（特定の文字列を含むテキストノードを検索するなどして）ノードが見つかった時点でループを中止するために利用できます。</p>\n<p>この関数には 2 つの引数があります。</p>\n<dl>\n  <dt id=\"rootnode\"><code>rootNode</code></dt>\n  <dd>\n    <p>再帰的に子孫の走査を行う <code>Node</code> オブジェクトです。</p>\n  </dd>\n  <dt id=\"callback\"><code>callback</code> <span class=\"badge inline optional\">省略可</span></dt>\n  <dd>\n    <p>省略可能なコールバック<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function\">関数</a>で、単一の <code>Node</code> を引数として受け取るものです。省略された場合、 <code>eachNode</code> は <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> で、 <code>rootNode</code> の中に含まれる (ルート自身も含む) ノードの一覧を返します。</p>\n  </dd>\n</dl>\n<p>次の例は <code>eachNode()</code> 関数の現実世界での使用方法として、ウェブページ上のテキストの検索を示します。</p>\n<p>検索には <code>grep</code> というラッパー関数を使用しています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">grep</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parentNode<span class=\"token punctuation\">,</span> pattern</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> matches <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> endScan <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n  <span class=\"token function\">eachNode</span><span class=\"token punctuation\">(</span>parentNode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>endScan<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Ignore anything which isn't a text node</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>nodeType <span class=\"token operator\">!==</span> Node<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXT_NODE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> pattern <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">!==</span> node<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        matches<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pattern<span class=\"token punctuation\">.</span>global<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        endScan <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n        matches <span class=\"token operator\">=</span> node\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        matches<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> matches\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"仕様書","id":"仕様書","isH3":false,"specifications":[{"bcdSpecificationURL":"https://dom.spec.whatwg.org/#interface-node","title":"DOM Standard"}],"query":"api.Node"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"query":"api.Node","dataURL":"/ja/docs/Web/API/Node/bcd.json"}}],"toc":[{"text":"プロパティ","id":"プロパティ"},{"text":"メソッド","id":"メソッド"},{"text":"例","id":"例"},{"text":"仕様書","id":"仕様書"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"}],"summary":"DOM の Node インターフェイスは、他の多くの DOM API オブジェクトのベースとなる抽象的な基底クラスです。したがって、これらのオブジェクト型と類似しており、しばしば交換して使用することができます。抽象クラスであるため、単なる Node オブジェクトというものは存在しません。 Node の機能を実装しているオブジェクトはすべて、何れかのサブクラスに基づいています。最も注目すべきものは、 Document, Element, DocumentFragment です。","popularity":0.0009,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Node","locale":"en-US","native":"English (US)"},{"title":"Node","locale":"es","native":"Español"},{"title":"Node","locale":"fr","native":"Français"},{"title":"Node","locale":"ko","native":"한국어"},{"title":"Node","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Node","locale":"ru","native":"Русский"},{"title":"Node","locale":"zh-CN","native":"中文 (简体)"},{"title":"Node","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ja/web/api/node","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/node/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/Node","title":"Node"}],"pageTitle":"Node - Web API | MDN","noIndexing":false}}