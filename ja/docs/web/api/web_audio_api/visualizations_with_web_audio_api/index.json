{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Visualizations with Web Audio API","mdn_url":"/ja/docs/Web/API/Web_Audio_API/Visualizations_with_Web_Audio_API","locale":"ja","native":"日本語","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Web Audio API の最も興味深い機能の 1 つは、オーディオソースから周波数、波形、その他のデータを抽出し、それを使用してビジュアライゼーションを作成する機能です。この記事では、方法について説明し、いくつかの基本的な使用例を示します。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> すべてのコードスニペットの実際の例は、<a href=\"https://mdn.github.io/voice-change-o-matic/\" class=\"external\" rel=\" noopener\">Voice-change-O-matic</a> のデモでご覧いただけます。</p>\n</div>"}},{"type":"prose","value":{"id":"基本的な概念","title":"基本的な概念","isH3":false,"content":"<p>オーディオソースからデータを抽出するには <a href=\"/ja/docs/Web/API/BaseAudioContext/createAnalyser\"><code>AudioContext.createAnalyser()</code></a> メソッドを使用して作成された <a href=\"/ja/docs/Web/API/AnalyserNode\"><code>AnalyserNode</code></a> が必要です。 例:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> audioCtx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>AudioContext <span class=\"token operator\">||</span> window<span class=\"token punctuation\">.</span>webkitAudioContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> analyser <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createAnalyser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>このノードは、ソースと destination の間のある時点でオーディオソースに接続されます。例:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>source <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createMediaStreamSource</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsource<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>analyser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nanalyser<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>distortion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndistortion<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>audioCtx<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> 入力がソースに対し、直接または別のノードを介して接続されているかぎり、アナライザの出力を別のノードに接続する必要はありません。</p>\n</div>\n<p>アナライザノードは、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AnalyserNode/fftSize\"><code>AnalyserNode.fftSize</code> <small>(en-US)</small></a>プロパティ値（指定されていない場合は、デフォルトは 2048 です）として指定する内容に応じて、特定の周波数ドメインで高速フーリエ変換（fft）を使用してオーディオデータをキャプチャします。</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AnalyserNode/minDecibels\"><code>AnalyserNode.minDecibels</code> <small>(en-US)</small></a>と<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AnalyserNode/maxDecibels\"><code>AnalyserNode.maxDecibels</code> <small>(en-US)</small></a>を使用して、fft データスケーリング範囲の最小値と最大値を指定することもできます。<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AnalyserNode/smoothingTimeConstant\"><code>AnalyserNode.smoothingTimeConstant</code> <small>(en-US)</small></a>。それらの使い方の詳細については、それらのページをお読みください。</p>\n</div>\n<p>データを取得するには、周波数データを取得するために<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AnalyserNode/getFloatFrequencyData\"><code>AnalyserNode.getFloatFrequencyData()</code> <small>(en-US)</small></a>および<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AnalyserNode/getByteFrequencyData\"><code>AnalyserNode.getByteFrequencyData()</code> <small>(en-US)</small></a>メソッドを使用する必要があります。<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AnalyserNode/getByteTimeDomainData\"><code>AnalyserNode.getByteTimeDomainData()</code> <small>(en-US)</small></a>と<a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code> AnalyserNode.getFloatTimeDomainData()</code></a>を使用して波形データを取得します。</p>\n<p>これらのメソッドはデータを指定された配列にコピーするので、データを受け取る前に新しい配列を作成して呼び出す必要があります。最初のものは 32 ビットの浮動小数点数を生成し、2 番目と 3 番目のものは 8 ビットの符号なし整数を生成するため、標準の JavaScript 配列ではなく、扱うデータに応じて<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\"><code>Float32Array</code> <small>(en-US)</small></a>または <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code> <small>(en-US)</small></a>配列を使う必要があります。</p>\n<p>たとえば、2048 の fft サイズを扱っているとします、fft の半分である<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AnalyserNode/frequencyBinCount\"><code>AnalyserNode.frequencyBinCount</code> <small>(en-US)</small></a>の値を返し、frequencyBinCount を引数として Uint8Array()を呼び出します。これがその fft サイズで収集するデータポイントの数です。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>analyser<span class=\"token punctuation\">.</span>fftSize <span class=\"token operator\">=</span> <span class=\"token number\">2048</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> bufferLength <span class=\"token operator\">=</span> analyser<span class=\"token punctuation\">.</span>frequencyBinCount<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> dataArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>bufferLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>実際にデータを取得して配列にコピーするには、配列を引数として渡して、必要なデータ収集メソッドを呼び出します。 例:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>analyser<span class=\"token punctuation\">.</span><span class=\"token function\">getByteTimeDomainData</span><span class=\"token punctuation\">(</span>dataArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>オーディオデータを配列に取り込んだ時点で可視化することができます。たとえば、HTML5 <a href=\"/ja/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a>にプロットすることができます。</p>\n<p>いくつかの具体例を見てみましょう。</p>"}},{"type":"prose","value":{"id":"波形オシロスコープの作成","title":"波形/オシロスコープの作成","isH3":false,"content":"<p>オシロスコープのビジュアライゼーション（ <a href=\"https://github.com/mdn/voice-change-o-matic/blob/gh-pages/scripts/app.js#L123-L167\" class=\"external\" rel=\" noopener\">Voice-change-O-matic</a> の元のコードの <a href=\"https://soledadpenades.com/\" class=\"external\" rel=\" noopener\">Soledad Penadés</a> に感謝します）を作成するには、前のセクションで説明した標準パターンに従って、バッファを設定します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>analyser<span class=\"token punctuation\">.</span>fftSize <span class=\"token operator\">=</span> <span class=\"token number\">2048</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> bufferLength <span class=\"token operator\">=</span> analyser<span class=\"token punctuation\">.</span>frequencyBinCount<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> dataArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>bufferLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>次に、新しいビジュアライゼーションディスプレイの準備をするために、先に描画されたキャンバスをクリアします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>canvasCtx<span class=\"token punctuation\">.</span><span class=\"token function\">clearRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">WIDTH</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">HEIGHT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ここで <code>draw()</code> 関数を定義します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</code></pre></div>\n<p>ここで <code>requestAnimationFrame()</code> を使用して、描画関数が開始後にループを維持します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> drawVisual <span class=\"token operator\">=</span> <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>draw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>次に、TimeDomainData を取得し、配列にコピーします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>analyser<span class=\"token punctuation\">.</span><span class=\"token function\">getByteTimeDomainData</span><span class=\"token punctuation\">(</span>dataArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>次に、初期値としてキャンバスを単色で塗りつぶします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>canvasCtx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">'rgb(200, 200, 200)'</span><span class=\"token punctuation\">;</span>\ncanvasCtx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">WIDTH</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">HEIGHT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>描画する波の線幅と線の色を設定し、パスを描画します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>canvasCtx<span class=\"token punctuation\">.</span>lineWidth <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\ncanvasCtx<span class=\"token punctuation\">.</span>strokeStyle <span class=\"token operator\">=</span> <span class=\"token string\">'rgb(0, 0, 0)'</span><span class=\"token punctuation\">;</span>\ncanvasCtx<span class=\"token punctuation\">.</span><span class=\"token function\">beginPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>キャンバスの幅を配列の長さ(先ほど定義した frequencyBinCount と等しい)で除算することによって描かれる線の各セグメントの幅を決定し、次に、変数 x を定義して、パスの各セグメントを描画するために移動する位置を定義します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> sliceWidth <span class=\"token operator\">=</span> <span class=\"token constant\">WIDTH</span> <span class=\"token operator\">*</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> bufferLength<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>次にループを実行して、バッファ内の各ポイントの波の小さなセグメントの位置を、配列からのデータポイント値に基づいて特定の高さに定義し、線を次の波セグメントが描画されるべき場所に移動させます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> bufferLength<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">var</span> v <span class=\"token operator\">=</span> dataArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> <span class=\"token number\">128.0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> v <span class=\"token operator\">*</span> <span class=\"token constant\">HEIGHT</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          canvasCtx<span class=\"token punctuation\">.</span><span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          canvasCtx<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        x <span class=\"token operator\">+=</span> sliceWidth<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>最後に、キャンバスの右端の途中で線を終え、次に定義した線を描画します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>      canvasCtx<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>height<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      canvasCtx<span class=\"token punctuation\">.</span><span class=\"token function\">stroke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>このコードの最後では、 <code>draw()</code> 関数を呼び出してプロセス全体を開始します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>    <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これにより、1 秒に数回更新する素晴らしい波形表示が得られます。</p>\n<p>\n  <img src=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Visualizations_with_Web_Audio_API/wave.png\" alt=\"a black oscilloscope line, showing the waveform of an audio signal\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"周波数棒グラフの作成","title":"周波数棒グラフの作成","isH3":false,"content":"<p>次に作成する素敵な小さなサウンドビジュアライゼーションは、Winamp のような周波数棒グラフの 1 つです。私たちは Voice-change-O-matic で入手できるものを持っています。それがどのように行われたかを見てみましょう。</p>\n<p>まず、アナライザとデータ配列を設定し、<code>clearRect()</code> で現在のキャンバス表示を消去します。これまでの唯一の違いは、fft サイズをもっと小さくすることです。これは、グラフの各バーを細い一筋ではなくバーのように見えるほど大きくするためです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>analyser<span class=\"token punctuation\">.</span>fftSize <span class=\"token operator\">=</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> bufferLength <span class=\"token operator\">=</span> analyser<span class=\"token punctuation\">.</span>frequencyBinCount<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bufferLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> dataArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>bufferLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncanvasCtx<span class=\"token punctuation\">.</span><span class=\"token function\">clearRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">WIDTH</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">HEIGHT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>次に、<code>draw()</code> 関数をオフにし、<code>requestAnimationFrame()</code> でループを設定して、表示されたデータが更新されるようにしてから、各アニメーションフレームで表示をクリアします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>    <span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      drawVisual <span class=\"token operator\">=</span> <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>draw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      analyser<span class=\"token punctuation\">.</span><span class=\"token function\">getByteFrequencyData</span><span class=\"token punctuation\">(</span>dataArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      canvasCtx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">'rgb(0, 0, 0)'</span><span class=\"token punctuation\">;</span>\n      canvasCtx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">WIDTH</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">HEIGHT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>今度はバーの幅をキャンバスの幅をバーの数で割った値（バッファの長さ）に等しくなるように設定します。しかし、その幅を 2.5 倍にしています。なぜなら、毎日聞いている音の大部分が特定の低い周波数帯にあるので、ほとんどの周波数がその中にオーディオを持たないものとして戻ってくるからです。空の棒グラフを表示したくないので、棒の位置をずらして、意味のある高さを持つものでキャンバスの表示を埋めます。</p>\n<p>そして、変数 <code>barHeight</code> と、現在のバーを描画する画面上の横位置を記録する変数 <code>x</code> を設定します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> barWidth <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">WIDTH</span> <span class=\"token operator\">/</span> bufferLength<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2.5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> barHeight<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>前と同じように、for ループを開始し、<code>dataArray</code> の各値について繰り返します。それぞれの値について、<code>barHeight</code> を配列の値に設定し、<code>barHeight</code> に基づいて塗りつぶしの色を設定し（高めのバーは明るくなります）、<code>barWidth</code> の幅および <code>barHeight/2</code> の高さを持つ棒を、キャンバスの水平方向 <code>x</code> ピクセルの位置に描画します（我々は最終的に各バーを半分にカットすることにしたので、キャンバスにすべて収まるようになりました）。</p>\n<p>各バーを描画する垂直オフセット位置については説明が必要でしょう。<code>HEIGHT-barHeight/2</code> です。私は、垂直位置を 0 に設定した場合のように各バーが上から下に表示されるのではなく、キャンバスの下から出すようにしたいため、これを実行しています。そのため、毎回垂直位置に、キャンバスの高さから <code>barHeight/2</code> を引いたものをセットしています。したがって、各バーは、キャンバスの途中から下まで描画されます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> bufferLength<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        barHeight <span class=\"token operator\">=</span> dataArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n        canvasCtx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">'rgb('</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>barHeight<span class=\"token operator\">+</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">',50,50)'</span><span class=\"token punctuation\">;</span>\n        canvasCtx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token constant\">HEIGHT</span><span class=\"token operator\">-</span>barHeight<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>barWidth<span class=\"token punctuation\">,</span>barHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        x <span class=\"token operator\">+=</span> barWidth <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ここでも、コードの最後に <code>draw()</code> 関数を呼び出して、プロセス全体を動かすように設定します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>このコードでは、次のような結果が得られます。</p>\n<p>\n  <img src=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Visualizations_with_Web_Audio_API/bar-graph.png\" alt=\"a series of red bars in a bar graph, showing intensity of different frequencies in an audio signal\" loading=\"lazy\">\n</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>Note:</strong> この記事に記載されている例では、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AnalyserNode/getByteFrequencyData\"><code>AnalyserNode.getByteFrequencyData()</code> <small>(en-US)</small></a>と<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AnalyserNode/getByteTimeDomainData\"><code>AnalyserNode.getByteTimeDomainData()</code> <small>(en-US)</small></a>で使用法が示されています。実際の例は<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AnalyserNode/getFloatFrequencyData\"><code>AnalyserNode.getFloatFrequencyData()</code> <small>(en-US)</small></a>と<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AnalyserNode/getFloatTimeDomainData\"><code>AnalyserNode.getFloatTimeDomainData()</code> <small>(en-US)</small></a>にあるので、私たちの <a href=\"https://mdn.github.io/voice-change-o-matic-float-data/\" class=\"external\" rel=\" noopener\">Voice-change-O-matic-float-data</a> デモを参照してください（<a href=\"https://github.com/mdn/voice-change-o-matic-float-data\" class=\"external\" rel=\" noopener\">ソースコード</a>も参照してください）— これは、元の <a href=\"https://mdn.github.io/voice-change-o-matic/\" class=\"external\" rel=\" noopener\">Voice-change-O-matic</a> とまったく同じですが、符号なしバイトデータではなく、Float データを使用しています。</p>\n</div>"}}],"toc":[{"text":"基本的な概念","id":"基本的な概念"},{"text":"波形/オシロスコープの作成","id":"波形オシロスコープの作成"},{"text":"周波数棒グラフの作成","id":"周波数棒グラフの作成"}],"summary":"Web Audio API の最も興味深い機能の 1 つは、オーディオソースから周波数、波形、その他のデータを抽出し、それを使用してビジュアライゼーションを作成する機能です。この記事では、方法について説明し、いくつかの基本的な使用例を示します。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Visualizations with Web Audio API","locale":"en-US","native":"English (US)"},{"title":"Visualisations avec la Web Audio API","locale":"fr","native":"Français"},{"title":"Web Audio API로 시각화하기","locale":"ko","native":"한국어"},{"title":"Визуализация с Web Audio API","locale":"ru","native":"Русский"},{"title":"基于 Web Audio API 实现音频可视化效果","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/web_audio_api/visualizations_with_web_audio_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/web_audio_api/visualizations_with_web_audio_api/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/Web_Audio_API","title":"Web Audio API"},{"uri":"/ja/docs/Web/API/Web_Audio_API/Visualizations_with_Web_Audio_API","title":"Visualizations with Web Audio API"}],"pageTitle":"Visualizations with Web Audio API - Web API | MDN","noIndexing":false}}