{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Web Audio API の使用","mdn_url":"/ja/docs/Web/API/Web_Audio_API/Using_Web_Audio_API","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/Web_Audio_API\">Web Audio API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>ガイド</summary><ol><li><a href=\"/ja/docs/Web/API/Web_Audio_API/Using_Web_Audio_API\">Using the Web Audio API</a></li><li><a href=\"/ja/docs/Web/API/Web_Audio_API/Basic_concepts_behind_Web_Audio_API\">Basic concepts behind Web Audio API</a></li><li><a href=\"/ja/docs/Web/API/Web_Audio_API/Best_practices\">Web Audio API best practices</a></li><li><a href=\"/ja/docs/Web/API/Web_Audio_API/Advanced_techniques\">Advanced techniques: Creating and sequencing audio</a></li><li><a href=\"/ja/docs/Web/API/Web_Audio_API/Using_AudioWorklet\">Background audio processing using AudioWorklet</a></li><li><a href=\"/ja/docs/Web/API/Web_Audio_API/Controlling_multiple_parameters_with_ConstantSourceNode\">Controlling multiple parameters with ConstantSourceNode</a></li><li><a href=\"/ja/docs/Web/API/Web_Audio_API/Migrating_from_webkitAudioContext\">Migrating from webkitAudioContext</a></li><li><a href=\"/ja/docs/Web/API/Web_Audio_API/Simple_synth\">Example and tutorial: Simple synth keyboard</a></li><li><a href=\"/ja/docs/Web/API/Web_Audio_API/Tools\">Tools for analyzing Web Audio usage</a></li><li><a href=\"/ja/docs/Web/API/Web_Audio_API/Using_IIR_filters\">Using IIR filters</a></li><li><a href=\"/ja/docs/Web/API/Web_Audio_API/Visualizations_with_Web_Audio_API\">Visualizations with Web Audio API</a></li><li><a href=\"/ja/docs/Web/API/Web_Audio_API/Web_audio_spatialization_basics\">Web audio spatialization basics</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>インターフェイス</summary><ol><li><a href=\"/ja/docs/Web/API/AnalyserNode\"><code>AnalyserNode</code></a></li><li><a href=\"/ja/docs/Web/API/AudioBuffer\"><code>AudioBuffer</code></a></li><li><a href=\"/ja/docs/Web/API/AudioBufferSourceNode\"><code>AudioBufferSourceNode</code></a></li><li><a href=\"/ja/docs/Web/API/AudioContext\"><code>AudioContext</code></a></li><li><a href=\"/ja/docs/Web/API/AudioDestinationNode\"><code>AudioDestinationNode</code></a></li><li><a href=\"/ja/docs/Web/API/AudioListener\"><code>AudioListener</code></a></li><li><a href=\"/ja/docs/Web/API/AudioNode\"><code>AudioNode</code></a></li><li><a href=\"/ja/docs/Web/API/AudioParam\"><code>AudioParam</code></a></li><li><a href=\"/ja/docs/Web/API/AudioProcessingEvent\"><code>AudioProcessingEvent</code></a></li><li><a href=\"/ja/docs/Web/API/AudioScheduledSourceNode\"><code>AudioScheduledSourceNode</code></a></li><li><a href=\"/ja/docs/Web/API/AudioWorklet\"><code>AudioWorklet</code></a></li><li><a href=\"/ja/docs/Web/API/AudioWorkletGlobalScope\"><code>AudioWorkletGlobalScope</code></a></li><li><a href=\"/ja/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a></li><li><a href=\"/ja/docs/Web/API/AudioWorkletProcessor\"><code>AudioWorkletProcessor</code></a></li><li><a href=\"/ja/docs/Web/API/BaseAudioContext\"><code>BaseAudioContext</code></a></li><li><a href=\"/ja/docs/Web/API/BiquadFilterNode\"><code>BiquadFilterNode</code></a></li><li><a href=\"/ja/docs/Web/API/ChannelMergerNode\"><code>ChannelMergerNode</code></a></li><li><a href=\"/ja/docs/Web/API/ChannelSplitterNode\"><code>ChannelSplitterNode</code></a></li><li><a href=\"/ja/docs/Web/API/ConstantSourceNode\"><code>ConstantSourceNode</code></a></li><li><a href=\"/ja/docs/Web/API/ConvolverNode\"><code>ConvolverNode</code></a></li><li><a href=\"/ja/docs/Web/API/DelayNode\"><code>DelayNode</code></a></li><li><a href=\"/ja/docs/Web/API/DynamicsCompressorNode\"><code>DynamicsCompressorNode</code></a></li><li><a href=\"/ja/docs/Web/API/GainNode\"><code>GainNode</code></a></li><li><a href=\"/ja/docs/Web/API/IIRFilterNode\"><code>IIRFilterNode</code></a></li><li><a href=\"/ja/docs/Web/API/MediaElementAudioSourceNode\"><code>MediaElementAudioSourceNode</code></a></li><li><a href=\"/ja/docs/Web/API/MediaStreamAudioDestinationNode\"><code>MediaStreamAudioDestinationNode</code></a></li><li><a href=\"/ja/docs/Web/API/MediaStreamAudioSourceNode\"><code>MediaStreamAudioSourceNode</code></a></li><li><a href=\"/ja/docs/Web/API/OfflineAudioCompletionEvent\"><code>OfflineAudioCompletionEvent</code></a></li><li><a href=\"/ja/docs/Web/API/OfflineAudioContext\"><code>OfflineAudioContext</code></a></li><li><a href=\"/ja/docs/Web/API/OscillatorNode\"><code>OscillatorNode</code></a></li><li><a href=\"/ja/docs/Web/API/PannerNode\"><code>PannerNode</code></a></li><li><a href=\"/ja/docs/Web/API/PeriodicWave\"><code>PeriodicWave</code></a></li><li><a href=\"/ja/docs/Web/API/WaveShaperNode\"><code>WaveShaperNode</code></a></li><li><a href=\"/ja/docs/Web/API/StereoPannerNode\"><code>StereoPannerNode</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/ja/docs/Web/API/Web_Audio_API\">Web Audio API</a> の入門を見てみましょう。ここではいくつかの概念を短く確認してから、簡単な boombox の例で、音声トラックの読み込み、再生と一時停止、音量やステレオ位置の変更の方法を学びましょう。</p>\n<p>Web Audio API は <a href=\"/ja/docs/Web/HTML/Element/audio\"><code>&lt;audio&gt;</code></a> メディア要素を置き換えるものではなく、むしろその機能を補完するものであり、 <a href=\"/ja/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a> が <a href=\"/ja/docs/Web/HTML/Element/img\"><code>&lt;img&gt;</code></a> 要素と並行して存在するのと似ています。どちらを利用するかは、その目的によります。音声トラックの再生を制御したいだけであれば、 <code>&lt;audio&gt;</code> メディア要素の方がよりよく、 Web Audio API よりも早く解決できるでしょう。再生だけでなくもっと複雑な音声処理が必要であれば、 Web Audio API ははるかに強力な制御を行うことができます。</p>\n<p>Web Audio API の強力な要素の一つは、厳格な「音声の呼び出しの制限」がないことです。例えば、同時に 32 音や 64 音などの上限はありません。プロセッサーの能力があれば、1,000 以上の音を詰まることなく再生することもできます。</p>"}},{"type":"prose","value":{"id":"コード例","title":"コード例","isH3":false,"content":"<p>boombox の外見は次の通りです。</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API/boombox.png\" alt=\"boombox の外見で、再生、パン、音量コントロールがあります\" width=\"1200\" height=\"646\" loading=\"lazy\">\n</p>\n<p>これは古いカセットデッキで、再生ボタンがあり、音量とステレオ位置を変更することができる音量とパンのスライダーがあります。なお、もっと複雑にすることもできますが、この段階で簡単に学ぶには理想的なものです。</p>\n<p><a href=\"https://codepen.io/Rumyra/pen/qyMzqN/\" class=\"external\" rel=\" noopener\">こちらから最終的なデモを Codepen で確認する</a>か、<a href=\"https://github.com/mdn/webaudio-examples/tree/master/audio-basics\" class=\"external\" rel=\" noopener\">ソースコードを GitHub で</a>見るかしてください。</p>"}},{"type":"prose","value":{"id":"ブラウザーの対応","title":"ブラウザーの対応","isH3":false,"content":"<p>最新のブラウザーは Web Audio API のほとんどの機能によく対応しています。 API の機能はたくさんありますので、もっと正確な情報は、各リファレンスページのブラウザー互換性一覧表をチェックする必要があるでしょう。</p>"}},{"type":"prose","value":{"id":"音声グラフ","title":"音声グラフ","isH3":false,"content":"<p>Web Audio API の中にあるすべてのものは音声グラフの概念に基づいており、ノードから成っています。</p>\n<p>Web Audio API は<strong>音声コンテキスト</strong>に含まれる音声操作を扱い、<strong>モジューラールーティング</strong>が作れるように設計されています。基本的な音声の編集は<strong>音声ノード</strong>で行われ、それは互いに結びつき、<strong>音声ルーティンググラフ</strong>を構成します。加工する音を入力する入力ノード、望み通りに音を加工する加工ノード、音を保存したり聴いたりすることができる出力ノード (出力先) から成ります。</p>\n<p>それぞれの音声ソースは、単一のコンテキストであっても、異なるチャンネルレイアウトに対応しています。このモジュラー設計によって、動的な効果を持つ複雑なオーディオ関数を作成することができます。</p>"}},{"type":"prose","value":{"id":"音声コンテキスト","title":"音声コンテキスト","isH3":false,"content":"<p>Web Audio API で何かをすることができるようにするには、音声コンテキストのインスタンスを作成する必要があります。この後で、 API のすべての機能にアクセスすることができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 古いブラウザー向け</span>\n<span class=\"token keyword\">const</span> AudioContext <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>AudioContext <span class=\"token operator\">||</span> window<span class=\"token punctuation\">.</span>webkitAudioContext<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> audioContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AudioContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これを実行するとどうなるのでしょうか。 <a href=\"/ja/docs/Web/API/BaseAudioContext\"><code>BaseAudioContext</code></a> が自動的に生成され、オンライン音声コンテキストに拡張されます。これを行うのは、ライブサウンドを再生しようとしているからです。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> 音声データを処理したいだけ、例えば、バッファリングとストリーミングのみを行い再生するのでなければ、 <a href=\"/ja/docs/Web/API/OfflineAudioContext\"><code>OfflineAudioContext</code></a> を作成するようにしたほうが良いかもしれません。</p>\n</div>"}},{"type":"prose","value":{"id":"音声の読み込み","title":"音声の読み込み","isH3":false,"content":"<p>作成した音声コンテキストには、そこで再生する音声が必要になります。これを行う API は少ししかありません。簡単な方法で始めてみましょう — boombox を使うと、曲のトラック全体を再生するのが普通です。また、アクセシビリティのために、そのトラックを DOM に公開したほうがいいしょう。このページの曲を公開するために <a href=\"/ja/docs/Web/HTML/Element/audio\"><code>&lt;audio&gt;</code></a> 要素を使用します。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>audio</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myCoolTrack.mp3<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>audio/mpeg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>audio</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> 読み込もうとしている音声ファイルが別なドメインにある場合は、 <code>crossorigin</code> 属性を使用する必要があるでしょう。詳しくは<a href=\"/ja/docs/Web/HTTP/CORS\">オリジン間リソース共有 (CORS)</a> を参照してください。</p>\n</div>\n<p>Web Audio API を使用してできるすばらしいことをすべて利用するためには、この要素で入力元をつかみ、作成したコンテキストに<em>送り込む</em>ことが必要です。幸いにもちょうどこれを行うメソッド — <a href=\"/ja/docs/Web/API/AudioContext/createMediaElementSource\"><code>AudioContext.createMediaElementSource</code></a> が存在します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// get the audio element</span>\n<span class=\"token keyword\">const</span> audioElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'audio'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// pass it into the audio context</span>\n<span class=\"token keyword\">const</span> track <span class=\"token operator\">=</span> audioContext<span class=\"token punctuation\">.</span><span class=\"token function\">createMediaElementSource</span><span class=\"token punctuation\">(</span>audioElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> 上記の <code>&lt;audio&gt;</code> 要素は DOM 内では <a href=\"/ja/docs/Web/API/HTMLMediaElement\"><code>HTMLMediaElement</code></a> 型のオブジェクトで表され、これは独自の機能のセットを持っています。これらはすべてそのままです。 Web Audio API で音声を利用できるようにするだけです。</p>\n</div>"}},{"type":"prose","value":{"id":"音声の制御","title":"音声の制御","isH3":false,"content":"<p>ウェブ上で音声を再生するとき、ユーザーが制御できるようにすることが重要です。目的によって無数の選択肢がありますが、ここでは音声の再生と一時停止、トラックの音量と左右のパンの変更の機能を提供します。</p>\n<p>JavaScript コードからプログラム的に音声を制御することは、ブラウザーの自動再生の対応方針の影響を受けますので、ユーザー (またはホワイトリスト) の許可がないとブロックされる場合があります。自動再生の方針は通常、明示的な許可かスクリプトが音声を再生できるようになる前のユーザーのページへの反応を必要とします。</p>\n<p>これらの特別な要件が基本的に設定されているのは、予想外の音が迷惑で邪魔になり、アクセシビリティの問題を引き起こす可能性があるためです。これについては、記事<a href=\"/ja/docs/Web/Media/Autoplay_guide\">メディアと Web Audio API の自動再生ガイド</a>をご覧ください。</p>\n<p>このスクリプトはユーザー入力イベント (例えば再生ボタンのクリック) への応答で音声を再生しているため、良い形であり自動再生ブロックの問題はないでしょう。ですから、再生や一時停止機能についての話を始めましょう。再生ボタンはトラックの再生中には一時停止ボタンに変わります。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">data-playing</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>switch<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">aria-checked</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">&gt;</span></span>Play/Pause<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>トラックを再生する前に、音声グラフを音声ソースまたは入力ノードから出力先へ接続する必要があります。</p>\n<p>既に入力ノードについては、 audio 要素を API に渡すことで作成しました。ほとんどの場合は、出力ノード作成する必要はなく、他のノードを <a href=\"/ja/docs/Web/API/BaseAudioContext/destination\"><code>BaseAudioContext.destination</code></a> へ接続するだけです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>track<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>audioContext<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これらのノードを図示するのによい方法は、音声グラフを描画することです。これは現在の音声グラフの見え方を表します。</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API/graph1.jpg\" alt=\"an audio graph with an audio element source connected to the default destination\" width=\"1426\" height=\"486\" loading=\"lazy\">\n</p>\n<p>これで再生と一時停止機能を追加できるようになりました。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// select our play button</span>\n<span class=\"token keyword\">const</span> playButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nplayButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// check if context is in suspended state (autoplay policy)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>audioContext<span class=\"token punctuation\">.</span>state <span class=\"token operator\">===</span> <span class=\"token string\">'suspended'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        audioContext<span class=\"token punctuation\">.</span><span class=\"token function\">resume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// play or pause track depending on state</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>playing <span class=\"token operator\">===</span> <span class=\"token string\">'false'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        audioElement<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>playing <span class=\"token operator\">=</span> <span class=\"token string\">'true'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>playing <span class=\"token operator\">===</span> <span class=\"token string\">'true'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        audioElement<span class=\"token punctuation\">.</span><span class=\"token function\">pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>playing <span class=\"token operator\">=</span> <span class=\"token string\">'false'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>また、トラックの再生が終了したらどうするかを考慮しておく必要があります。 <code>HTMLMediaElement</code> は <code>ended</code> イベントを再生終了時に一度発生させるので、これを待ち受けして関連するコードを実行します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>audioElement<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ended'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    playButton<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>playing <span class=\"token operator\">=</span> <span class=\"token string\">'false'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"音の加工","title":"音の加工","isH3":false,"content":"<p>基本的な加工ノードを追加して、音を変化させてみましょう。これは Web Audio API が本当に役立ち始めるところです。まず最初に、音量を変化させてみましょう。これは音の波がどれだけ大きいかを表す <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/GainNode\"><code>GainNode</code> <small>(en-US)</small></a> を使用すれば実現できます。</p>\n<p>Web Audio API でノードを作成することができる方法は二通りあります。コンテキスト自身のファクトリメソッド (例えば <code>audioContext.createGain()</code>) を使用するか、ノードのコンストラクター (例えば <code>new GainNode()</code>) です。ここではファクトリメソッドを使用します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> gainNode <span class=\"token operator\">=</span> audioContext<span class=\"token punctuation\">.</span><span class=\"token function\">createGain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>音声グラフを以前のものから更新する必要があり、入力を gain に接続してから、 gain ノードを出力先に接続します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>track<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>gainNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>audioContext<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これで音声グラフはこのようになります。</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API/graph2.jpg\" alt=\"an audio graph with an audio element source, connected to a gain node that modifies the audio source, and then going to the default destination\" width=\"1774\" height=\"550\" loading=\"lazy\">\n</p>\n<p>gain の既定値は 1 です。これは現在の音量を同じに維持します。 gain は最小値がおよそ-3.4 で最大値はおよそ 3.4 です。ここで boombox は gain を最大 2 (元の音量の倍)、最小 0 (結果的に音声をミュートします) の範囲で動かせるようにします。</p>\n<p>ユーザーがこれを制御できるようにしましょう。 — <a href=\"/ja/docs/Web/HTML/Element/input/range\">range 入力</a>を使用します。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>range<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>volume<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">min</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">max</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">step</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0.01<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>Note:</strong> range 入力は、音声ノードの値を更新するのに実に手軽な入力型です。 range の値を音声ノードの引数に直接設定したり、使用したりすることができます。</p>\n</div>\n<p>それでは、ユーザーが値を変更したときに入力された値を取得して gain の値を更新するようにしましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> volumeControl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#volume'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nvolumeControl<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    gainNode<span class=\"token punctuation\">.</span>gain<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>Note:</strong> ノードオブジェクトの値 (例えば <code>GainNode.gain</code>) は単純な値ではなく、実際には <a href=\"/ja/docs/Web/API/AudioParam\"><code>AudioParam</code></a> 型のオブジェクト — これが引数と呼ばれています。なぜかといえば、 <code>GainNode.gain</code> の <code>value</code> プロパティを設定しなければならず、 <code>gain</code> を直接設定するだけではないからです。これによってはるかに柔軟になり、例えば特定の値のセットを引数で渡して、一定の期間にわたって変化させたりすることができます。</p>\n</div>\n<p>素晴らしい、ユーザーがトラックの音量を追更新できるようになりました。ミュート機能を追加したい場合も gain ノードは完全なノードです。</p>"}},{"type":"prose","value":{"id":"アプリにステレオ位置を追加","title":"アプリにステレオ位置を追加","isH3":false,"content":"<p>学んだことを練習するために、もう一つの加工ノードを追加してみましょう。</p>\n<p>ユーザーがステレオ機能を持っている場合、左右のスピーカーの間で音のバランスを変更する <a href=\"/ja/docs/Web/API/StereoPannerNode\"><code>StereoPannerNode</code></a> ノードがあります。</p>\n<p><code>StereoPannerNode</code> は、左右間のステレオパンを行う単純な用途のためのものです。 <a href=\"/ja/docs/Web/API/PannerNode\"><code>PannerNode</code></a> というものもあり、こちらはもっと複雑な効果を生成するための、 3D 空間や音声の<em>空間化</em>などを大幅に制御することができます。これはゲームや 3D アプリなどで使用され、例えば頭上を飛ぶ鳥や、ユーザーの背後から聞こえる音などを生成します。</p>\n<p>図示すると、音声グラフは次のようになります。</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API/graphPan.jpg\" alt=\"入力ノード、2つの加工ノード (gain ノードと stereo panner ノード)、出力ノードを示した音声グラフを表す図です。\" width=\"2236\" height=\"532\" loading=\"lazy\">\n</p>\n<p>今回はノードを作成するコンストラクターメソッドを使用しましょう。この方法では、コンテキストとその特定のノードが取るオプションを渡す必要があります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> pannerOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">pan</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> panner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StereoPannerNode</span><span class=\"token punctuation\">(</span>audioContext<span class=\"token punctuation\">,</span> pannerOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect6\">\n  <p><strong>Note:</strong> ノードを作成するコンストラクターメソッドは、いまのところすべてのブラウザーで対応されている訳ではありません。古いファクトリメソッドの方がより広く対応されています。</p>\n</div>\n<p>個々の値の範囲は -1 (はるか左) と 1 (はるか右) の間です。今回も range 型の入力でこの引数を変更できるようにしましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>range<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>panner<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">min</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">max</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">step</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0.01<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>以前行ったのと同じ方法で、この入力から得た値を使ってパンの値を調整します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> pannerControl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#panner'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\npannerControl<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    panner<span class=\"token punctuation\">.</span>pan<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>また音声グラフを調整して、すべてのノードを互いに接続しましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>track<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>gainNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>panner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>audioContext<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>アプリに行うべき残りの作業はについては、<a href=\"https://codepen.io/Rumyra/pen/qyMzqN/\" class=\"external\" rel=\" noopener\">こちらから Codepen 上で最終的なデモを確認して</a>みてください。</p>"}},{"type":"prose","value":{"id":"まとめ","title":"まとめ","isH3":false,"content":"<p>素晴らしい！ boombox が出来上がり、「テープ」を再生したり、音量やステレオ位置を調整したりできるようにするために、かなり基本的な音声グラフの作業を行いました。</p>\n<p>これは、音声をウェブサイトやウェブアプリに追加するために始める必要がある基本事項のかなりの部分を構成しています。 Web Audio API にはさらに多くの機能がありますが、ノードの概念を把握し、音声グラフをまとめると、より複雑な機能を見に行くことができます。</p>"}},{"type":"prose","value":{"id":"他の例","title":"他の例","isH3":false,"content":"<p>Web Audio API についてもっと学ぶことができる他の例があります。</p>\n<p><a href=\"https://github.com/mdn/voice-change-o-matic\" class=\"external\" rel=\" noopener\">Voice-change-O-matic</a> は、楽しい音声加工および音の視覚化を行うウェブアプリで、様々な効果や視覚化を選択することができます。このアプリケーションはかなり初歩的ですが、 Web Audio API の複数の機能を同時に使用する例を示しています。 (<a href=\"https://mdn.github.io/voice-change-o-matic/\" class=\"external\" rel=\" noopener\">Voice-change-O-matic をライブで実行</a>)</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API/voice-change-o-matic.png\" alt=\"音の波が表示され、音声効果や視覚化を選択することができるユーザーインターフェイス。\" width=\"640\" height=\"500\" loading=\"lazy\">\n</p>\n<p>他にも特に Web Audio API を紹介するために開発されたアプリケーションとして <a href=\"https://mdn.github.io/violent-theremin/\" class=\"external\" rel=\" noopener\">Violent Theremin</a> があり、これはマウスポインターを動かすことで音高や音量を変更することができるシンプルなウェブアプリケーションです。これはサイケデリックなライトショーも提供します。 (<a href=\"https://github.com/mdn/violent-theremin\" class=\"external\" rel=\" noopener\">Violent Theremin のソースコードを見る</a>)</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API/violent-theremin.png\" alt=\"虹色に埋め尽くされたページで、 Clear screen と mute と書かれた2つのボタンがあります。\" width=\"640\" height=\"458\" loading=\"lazy\">\n</p>\n<p>他にも例としては <a href=\"https://github.com/mdn/webaudio-examples\" class=\"external\" rel=\" noopener\">webaudio-examples リポジトリ</a>を参照してください。</p>"}}],"toc":[{"text":"コード例","id":"コード例"},{"text":"ブラウザーの対応","id":"ブラウザーの対応"},{"text":"音声グラフ","id":"音声グラフ"},{"text":"音声コンテキスト","id":"音声コンテキスト"},{"text":"音声の読み込み","id":"音声の読み込み"},{"text":"音声の制御","id":"音声の制御"},{"text":"音の加工","id":"音の加工"},{"text":"アプリにステレオ位置を追加","id":"アプリにステレオ位置を追加"},{"text":"まとめ","id":"まとめ"},{"text":"他の例","id":"他の例"}],"summary":"Web Audio API の入門を見てみましょう。ここではいくつかの概念を短く確認してから、簡単な boombox の例で、音声トラックの読み込み、再生と一時停止、音量やステレオ位置の変更の方法を学びましょう。","popularity":0.0002,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using the Web Audio API","locale":"en-US","native":"English (US)"},{"title":"Utiliser la Web Audio API","locale":"fr","native":"Français"},{"title":"Web Audio API 사용하기","locale":"ko","native":"한국어"},{"title":"Используем Web Audio API","locale":"ru","native":"Русский"},{"title":"Web Audio API 的运用","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/web_audio_api/using_web_audio_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/web_audio_api/using_web_audio_api/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/Web_Audio_API","title":"Web Audio API"},{"uri":"/ja/docs/Web/API/Web_Audio_API/Using_Web_Audio_API","title":"Web Audio API の使用"}],"pageTitle":"Web Audio API の使用 - Web API | MDN","noIndexing":false}}