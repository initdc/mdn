{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"MediaRecorder.mimeType","mdn_url":"/ja/docs/Web/API/MediaRecorder/mimeType","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/MediaStream_Recording_API\">MediaStream Recording API</a></strong></li><li><strong><a href=\"/ja/docs/Web/API/MediaRecorder\"><code>MediaRecorder</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>コンストラクター</summary><ol><li><a href=\"/ja/docs/Web/API/MediaRecorder/MediaRecorder\"><code>MediaRecorder()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>プロパティ</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaRecorder/audioBitsPerSecond\"><code>audioBitsPerSecond</code> <small>(en-US)</small></a></li><li><em><code>mimeType</code></em></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaRecorder/warning_event\"><code>onwarning</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/API/MediaRecorder/state\"><code>state</code></a></li><li><a href=\"/ja/docs/Web/API/MediaRecorder/stream\"><code>stream</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaRecorder/videoBitsPerSecond\"><code>videoBitsPerSecond</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>メソッド</summary><ol><li><a href=\"/ja/docs/Web/API/MediaRecorder/isTypeSupported\"><code>isTypeSupported()</code></a></li><li><a href=\"/ja/docs/Web/API/MediaRecorder/pause\"><code>pause()</code></a></li><li><a href=\"/ja/docs/Web/API/MediaRecorder/requestData\"><code>requestData()</code></a></li><li><a href=\"/ja/docs/Web/API/MediaRecorder/resume\"><code>resume()</code></a></li><li><a href=\"/ja/docs/Web/API/MediaRecorder/start\"><code>start()</code></a></li><li><a href=\"/ja/docs/Web/API/MediaRecorder/stop\"><code>stop()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>イベント</summary><ol><li><a href=\"/ja/docs/Web/API/MediaRecorder/dataavailable_event\"><code>dataavailable</code></a></li><li><a href=\"/ja/docs/Web/API/MediaRecorder/error_event\"><code>error</code></a></li><li><a href=\"/ja/docs/Web/API/MediaRecorder/pause_event\"><code>pause</code></a></li><li><a href=\"/ja/docs/Web/API/MediaRecorder/resume_event\"><code>resume</code></a></li><li><a href=\"/ja/docs/Web/API/MediaRecorder/start_event\"><code>start</code></a></li><li><a href=\"/ja/docs/Web/API/MediaRecorder/stop_event\"><code>stop</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>継承</summary><ol><li><a href=\"/ja/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>MediaStream Recording に関連するページ</summary><ol><li><a href=\"/ja/docs/Web/API/BlobEvent\"><code>BlobEvent</code></a></li><li><a href=\"/ja/docs/Web/API/MediaRecorderErrorEvent\"><code>MediaRecorderErrorEvent</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>MediaRecorder.mimeType</code></strong> 読み取り専用プロパティは、作成時に記録コンテナとして使用する MIME タイプを返します。 これは、記録したすべてのデータをディスクに書き込むことによって生じるファイルのファイル形式です。 もちろん、個々のトラックに関連付けられているファイル形式とコーデックはまったく異なるものであることに注意してください。 WebM ビデオでうまく機能するトラックを MP4 ラッパーに書き込んでも、どこにでも再生できるファイルにならない可能性があります。</p>"}},{"type":"prose","value":{"id":"構文","title":"構文","isH3":false,"content":"<pre class=\"notranslate\">var mimeType = MediaRecorder.mimeType\n</pre>"}},{"type":"prose","value":{"id":"値","title":"値","isH3":true,"content":"<p>記録したメディアのコンテナ形式として使用する MIME タイプ（<a href=\"/ja/docs/Glossary/String\"><code>DOMString</code></a> 形式）。</p>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token operator\">...</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'getUserMedia supported.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> constraints <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> chunks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span>constraints<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">stream</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">audioBitsPerSecond</span> <span class=\"token operator\">:</span> <span class=\"token number\">128000</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">videoBitsPerSecond</span> <span class=\"token operator\">:</span> <span class=\"token number\">2500000</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">mimeType</span> <span class=\"token operator\">:</span> <span class=\"token string\">'video/mp4'</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">var</span> mediaRecorder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MediaRecorder</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">,</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      m <span class=\"token operator\">=</span> mediaRecorder<span class=\"token punctuation\">;</span>\n\n      m<span class=\"token punctuation\">.</span>mimeType<span class=\"token punctuation\">;</span> <span class=\"token comment\">// would return 'video/mp4'</span>\n      <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"仕様","title":"仕様","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>仕様</th>\n      <th>状態</th>\n      <th>コメント</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://w3c.github.io/mediacapture-record/#widl-MediaRecorder-mimeType\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">MediaStream Recording<br><small lang=\"ja\">MediaRecorder.mimeType の定義</small></a></td>\n      <td><span class=\"spec-wd\">草案</span></td>\n      <td>初期定義</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"query":"api.MediaRecorder.mimeType","dataURL":"/ja/docs/Web/API/MediaRecorder/mimeType/bcd.json"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/API/MediaStream_Recording_API/Using_the_MediaStream_Recording_API\">Media​Stream Recording API の使用</a></li>\n  <li><a href=\"https://mdn.github.io/web-dictaphone/\" class=\"external\" rel=\" noopener\">ウェブディクタフォン</a>: MediaRecorder + getUserMedia + Web Audio API 可視化デモ、<a href=\"https://twitter.com/chrisdavidmills\" class=\"external\" rel=\" noopener\">Chris Mills</a> 著（<a href=\"https://github.com/mdn/web-dictaphone/\" class=\"external\" rel=\" noopener\">Github のソース</a>）。（英語）</li>\n  <li><a href=\"https://simpl.info/mediarecorder/\" class=\"external\" rel=\" noopener\">simpl.info の MediaStream Recording のデモ</a>、<a href=\"https://twitter.com/sw12\" class=\"external\" rel=\" noopener\">Sam Dutton</a> 著。（英語）</li>\n  <li><a href=\"/ja/docs/Web/API/MediaDevices/getUserMedia\"><code>MediaDevices.getUserMedia</code></a></li>\n</ul>"}}],"toc":[{"text":"構文","id":"構文"},{"text":"例","id":"例"},{"text":"仕様","id":"仕様"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"MediaRecorder.mimeType 読み取り専用プロパティは、作成時に記録コンテナとして使用する MIME タイプを返します。 これは、記録したすべてのデータをディスクに書き込むことによって生じるファイルのファイル形式です。 もちろん、個々のトラックに関連付けられているファイル形式とコーデックはまったく異なるものであることに注意してください。 WebM ビデオでうまく機能するトラックを MP4 ラッパーに書き込んでも、どこにでも再生できるファイルにならない可能性があります。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"MediaRecorder.mimeType","locale":"en-US","native":"English (US)"}],"source":{"folder":"ja/web/api/mediarecorder/mimetype","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/mediarecorder/mimetype/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/MediaRecorder","title":"MediaRecorder"},{"uri":"/ja/docs/Web/API/MediaRecorder/mimeType","title":"MediaRecorder.mimeType"}],"pageTitle":"MediaRecorder.mimeType - Web API | MDN","noIndexing":false}}