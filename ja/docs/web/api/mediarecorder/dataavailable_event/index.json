{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"MediaRecorder.ondataavailable","mdn_url":"/ja/docs/Web/API/MediaRecorder/dataavailable_event","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/MediaStream_Recording_API\">MediaStream Recording API</a></strong></li><li><strong><a href=\"/ja/docs/Web/API/MediaRecorder\"><code>MediaRecorder</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>コンストラクター</summary><ol><li><a href=\"/ja/docs/Web/API/MediaRecorder/MediaRecorder\"><code>MediaRecorder()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>プロパティ</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaRecorder/audioBitsPerSecond\"><code>audioBitsPerSecond</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/API/MediaRecorder/mimeType\"><code>mimeType</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaRecorder/warning_event\"><code>onwarning</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/API/MediaRecorder/state\"><code>state</code></a></li><li><a href=\"/ja/docs/Web/API/MediaRecorder/stream\"><code>stream</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaRecorder/videoBitsPerSecond\"><code>videoBitsPerSecond</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>メソッド</summary><ol><li><a href=\"/ja/docs/Web/API/MediaRecorder/isTypeSupported\"><code>isTypeSupported()</code></a></li><li><a href=\"/ja/docs/Web/API/MediaRecorder/pause\"><code>pause()</code></a></li><li><a href=\"/ja/docs/Web/API/MediaRecorder/requestData\"><code>requestData()</code></a></li><li><a href=\"/ja/docs/Web/API/MediaRecorder/resume\"><code>resume()</code></a></li><li><a href=\"/ja/docs/Web/API/MediaRecorder/start\"><code>start()</code></a></li><li><a href=\"/ja/docs/Web/API/MediaRecorder/stop\"><code>stop()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>イベント</summary><ol><li><em><code>dataavailable</code></em></li><li><a href=\"/ja/docs/Web/API/MediaRecorder/error_event\"><code>error</code></a></li><li><a href=\"/ja/docs/Web/API/MediaRecorder/pause_event\"><code>pause</code></a></li><li><a href=\"/ja/docs/Web/API/MediaRecorder/resume_event\"><code>resume</code></a></li><li><a href=\"/ja/docs/Web/API/MediaRecorder/start_event\"><code>start</code></a></li><li><a href=\"/ja/docs/Web/API/MediaRecorder/stop_event\"><code>stop</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>継承</summary><ol><li><a href=\"/ja/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>MediaStream Recording に関連するページ</summary><ol><li><a href=\"/ja/docs/Web/API/BlobEvent\"><code>BlobEvent</code></a></li><li><a href=\"/ja/docs/Web/API/MediaRecorderErrorEvent\"><code>MediaRecorderErrorEvent</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>MediaRecorder.ondataavailable</code></strong> イベントハンドラ（<a href=\"/ja/docs/Web/API/MediaStream_Recording_API\">MediaStream Recording API</a> の一部）は <code><a href=\"/ja/docs/Web/Reference/Events/dataavailable\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">dataavailable</a></code> イベントを処理します。 これにより、<a href=\"/ja/docs/Web/API/Blob\"><code>Blob</code></a> データが使用可能になったことに応じてコードを実行できます。</p>\n<p><code>dataavailable</code> イベントは、<code>MediaRecorder</code> がメディアデータをアプリで使用するために引き渡すときに発生します。 データはデータを含む <a href=\"/ja/docs/Web/API/Blob\"><code>Blob</code></a> オブジェクトで提供されます。 これは次の 4 つの状況で発生します。</p>\n<ul>\n  <li>メディアストリームが終了すると、<code>ondataavailable</code> ハンドラにまだ引き渡されていないメディアデータはすべて単一の <a href=\"/ja/docs/Web/API/Blob\"><code>Blob</code></a> で渡されます。</li>\n  <li><a href=\"/ja/docs/Web/API/MediaRecorder/stop\"><code>MediaRecorder.stop()</code></a> を呼び出すと、記録を開始してから、または最後に <code>dataavailable</code> イベントが発生してからキャプチャされたすべてのメディアデータが <a href=\"/ja/docs/Web/API/Blob\"><code>Blob</code></a> で引き渡されます。 この後、キャプチャは終了します。</li>\n  <li><a href=\"/ja/docs/Web/API/MediaRecorder/requestData\"><code>MediaRecorder.requestData()</code></a> を呼び出すと、記録を開始してから、または最後に <code>dataavailable</code> イベントが発生してからキャプチャされたすべてのメディアデータが引き渡されます。 その後、新しい <code>Blob</code> が作成され、メディアのキャプチャがその blob に対して続行されます。</li>\n  <li>メディアキャプチャを開始した <a href=\"/ja/docs/Web/API/MediaRecorder/start\"><code>MediaRecorder.start()</code></a> メソッドに <code>timeslice</code> プロパティを渡した場合は、<code>timeslice</code> ミリ秒ごとに <code>dataavailable</code> イベントが発生します。 つまり、各 blob は特定の期間を持つことになります（最後の blob を除いてで、最後のイベント以降に残っているものは何でもということになるので、これはもっと短いかもしれません）。 そのため、メソッド呼び出しが次のようになっていれば — <code>recorder.start(1000);</code> — <code>dataavailable</code> イベントはメディアキャプチャの毎秒後に発生し、イベントハンドラは一秒の長さのメディアデータの blob で毎秒呼ばれるでしょう。 <a href=\"/ja/docs/Web/API/MediaRecorder/stop\"><code>MediaRecorder.stop()</code></a> および <a href=\"/ja/docs/Web/API/MediaRecorder/requestData\"><code>MediaRecorder.requestData()</code></a> と共に <code>timeslice</code> を使用して、複数の同じ長さの blob と他の短い blob を生成することもできます。</li>\n</ul>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> メディアデータを含む <a href=\"/ja/docs/Web/API/Blob\"><code>Blob</code></a> は、<code><a href=\"/ja/docs/Web/Reference/Events/dataavailable\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">dataavailable</a></code> イベントの <code>data</code> プロパティで利用できます。</p>\n</div>"}},{"type":"prose","value":{"id":"構文","title":"構文","isH3":false,"content":"<pre class=\"notranslate\">MediaRecorder.ondataavailable = function(event) { ... }\nMediaRecorder.addEventListener('dataavailable', function(event) { ... })\n</pre>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token operator\">...</span>\n  <span class=\"token keyword\">var</span> chunks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  mediaRecorder<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onstop</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MediaRecorder.stop() 呼び出し後に利用可能なデータ。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> audio <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'audio'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    audio<span class=\"token punctuation\">.</span>controls <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span>chunks<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'type'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'audio/ogg; codecs=opus'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> audioURL <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    audio<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> audioURL<span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"レコーダー停止\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  mediaRecorder<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">ondataavailable</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    chunks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">...</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"仕様","title":"仕様","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>仕様</th>\n      <th>状態</th>\n      <th>コメント</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://w3c.github.io/mediacapture-record/#widl-MediaRecorder-ondataavailable\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">MediaStream Recording<br><small lang=\"ja\">MediaRecorder.ondataavailable の定義</small></a></td>\n      <td><span class=\"spec-wd\">草案</span></td>\n      <td>初期定義</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"query":"api.MediaRecorder.ondataavailable","dataURL":"/ja/docs/Web/API/MediaRecorder/dataavailable_event/bcd.json"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/API/MediaStream_Recording_API\">Using the MediaStream Recording API</a></li>\n  <li><a href=\"https://mdn.github.io/web-dictaphone/\" class=\"external\" rel=\" noopener\">ウェブディクタフォン</a>: MediaRecorder + getUserMedia + Web Audio API 可視化デモ、<a href=\"https://twitter.com/chrisdavidmills\" class=\"external\" rel=\" noopener\">Chris Mills</a> 著（<a href=\"https://github.com/mdn/web-dictaphone/\" class=\"external\" rel=\" noopener\">Github のソース</a>）。（英語）</li>\n  <li><a href=\"https://simpl.info/mediarecorder/\" class=\"external\" rel=\" noopener\">simpl.info の MediaStream Recording のデモ</a>、<a href=\"https://twitter.com/sw12\" class=\"external\" rel=\" noopener\">Sam Dutton</a> 著。（英語）</li>\n  <li><a href=\"/ja/docs/Web/API/MediaDevices/getUserMedia\"><code>MediaDevices.getUserMedia</code></a></li>\n</ul>"}}],"toc":[{"text":"構文","id":"構文"},{"text":"例","id":"例"},{"text":"仕様","id":"仕様"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"MediaRecorder.ondataavailable イベントハンドラ（MediaStream Recording API の一部）は dataavailable イベントを処理します。 これにより、Blob データが使用可能になったことに応じてコードを実行できます。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"MediaRecorder: dataavailable event","locale":"en-US","native":"English (US)"},{"title":"MediaRecorder.ondataavailable","locale":"ru","native":"Русский"},{"title":"MediaRecorder.ondataavailable","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/mediarecorder/dataavailable_event","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/mediarecorder/dataavailable_event/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/MediaRecorder","title":"MediaRecorder"},{"uri":"/ja/docs/Web/API/MediaRecorder/dataavailable_event","title":"MediaRecorder.ondataavailable"}],"pageTitle":"MediaRecorder.ondataavailable - Web API | MDN","noIndexing":false}}