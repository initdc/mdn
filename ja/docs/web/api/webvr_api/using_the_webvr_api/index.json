{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"WebVR APIの使い方","mdn_url":"/ja/docs/Web/API/WebVR_API/Using_the_WebVR_API","locale":"ja","native":"日本語","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/ja/docs/Web/API/WebVR_API\">WebVR API</a> はウェブ開発者のツールキットへのすばらしい追加機能で、<a href=\"https://developer.oculus.com/\" class=\"external\" rel=\" noopener\">Oculus Rift</a> のようなバーチャルリアリティハードウェアへのアクセスが可能となります。そして出力された動きや向きはウェブアプリの描画更新に変換されます。しかし VR アプリを開発はどのようにやればいいのでしょうか？ この記事では、それに関する基礎的な解説を行います。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> WebVR は現在実験的な段階にあります（<a href=\"http://mozvr.github.io/webvr-spec/webvr.html\" class=\"external\" rel=\" noopener\">最新の仕様はこちら</a>にあります); 今の段階でもっとも正常に動作するのは Firefox Nightly/Developer Edition で、一部の機能は Google Chrome でも動作します。詳細は Brandon Jones の <a href=\"http://blog.tojicode.com/2014/07/bringing-vr-to-chrome.html\" class=\"external\" rel=\" noopener\">Bringing VR to Chrome</a> を参照してください。</p>\n</div>"}},{"type":"prose","value":{"id":"始めるには","title":"始めるには","isH3":false,"content":"<p>WebVR を始めるには，VR ハードウェアのマニュアルに従ったセットアップと、<a href=\"/ja/docs/Web/API/WebVR_API/WebVR_environment_setup\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">WebVR environment setup</a> に示されているコンピュータへの設定が必要になります、スムースな動作には専用 GPU が推奨されます。</p>\n<p><a href=\"https://nightly.mozilla.org/\" class=\"external\" rel=\" noopener\">Firefox Nightly</a> (または <a href=\"https://www.mozilla.org/en-US/firefox/developer/\" class=\"external\" rel=\" noopener\">Developer Edition</a>) のインストールと合わせて <a href=\"http://www.mozvr.com/downloads/webvr-addon-0.1.0.xpi\" class=\"external\" rel=\" noopener\">WebVR Enabler Add-on</a> も必要となります。</p>\n<p>いちど環境が設定できたら、テストのために私たちの <a href=\"http://mozvr.com/projects/\" class=\"external\" rel=\" noopener\">MozVR projects</a> を開いて、[Enter VR**]** ボタンをクリックすることを試してください。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> より深い情報のために，<a href=\"/ja/docs/Web/API/WebVR_API/WebVR_environment_setup\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">WebVR environment setup</a> をチェックしてください。</p>\n</div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> モバイルデバイスを HMD として用いるような安価な選択肢もあります。この場合，位置センサは利用できませんので、代わりに <a href=\"/ja/docs/Web/Apps/Build/gather_and_modify_data/responding_to_device_orientation_changes\">deviceorientation API</a> を用いて擬似的な向きデータを使う必要があるかもしれません。</p>\n</div>"}},{"type":"prose","value":{"id":"簡単なデモ","title":"簡単なデモ","isH3":false,"content":"<p>WebVR のデモは <a href=\"https://github.com/MozVR/\" class=\"external\" rel=\" noopener\">MozVR team repo</a> や <a href=\"https://github.com/mdn/webvr-tests\" class=\"external\" rel=\" noopener\">MDN webvr-tests repo</a> にたくさんありますが、この記事では、主に<a href=\"https://github.com/mdn/webvr-tests/tree/gh-pages/positionsensorvrdevice\" class=\"external\" rel=\" noopener\">positionsensorvrdevice</a> について (<a href=\"https://mdn.github.io/webvr-tests/positionsensorvrdevice/\" class=\"external\" rel=\" noopener\">動作しているデモ</a>) を例に解説します。</p>\n<p>\n  <img src=\"https://mdn.mozillademos.org/files/10797/vrpositionsensor-demo.png\" alt=\"\" loading=\"lazy\">\n</p>\n<p>これは簡単な 2.5D のデモで，<a href=\"/ja/docs/Web/HTML/Element/canvas\">HTML5 Canvas</a> にレンダリングされた Firefox ロゴが右目と左目のビューに表示されるものです．VR HMD でデモを見ているときにキャンバスをクリックすると、デモはフルスクリーンになり、Firefox ロゴに近づけるようになります。あなたが動くと頭の動きに合わせて上下左右や回転してリアルに動きます。</p>\n<p>あなたが WebVR のコードがどう動いているかを簡単に確認できるように、デモは意図的にシンプルになるよう保持されています。API は十分シンプルであるため，単純な DOM ベースインターフェイスでも複雑な WebGL シーンでも、好きなアプリに WebVR 制御の移動を簡単に適用できます。</p>"}},{"type":"prose","value":{"id":"アプリはどう動く","title":"アプリはどう動く?","isH3":false,"content":"<p>このセクションでは、アプリを動作させるために必要なコードの変更箇所を通じて、基礎的なレベルで何が必要かを知ることができます。</p>"}},{"type":"prose","value":{"id":"vr_デバイスへのアクセス","title":"VR デバイスへのアクセス","isH3":true,"content":"<p>最初にコンピュータに接続中の VR ハードウェアへのプログラム的な参照を取得します。それには接続中の全 VR デバイスの配列へと解決できるプロミスを返す <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Navigator/getVRDisplays\"><code>Navigator.getVRDevices</code> <small>(en-US)</small></a> を使います。</p>\n<p>返される可能性のあるオブジェクトが 2 種類あります:</p>\n<ul>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PositionSensorVRDevice\"><code>PositionSensorVRDevice</code> <small>(en-US)</small></a>: 位置センサカメラ。</li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HMDVRDevice\"><code>HMDVRDevice</code> <small>(en-US)</small></a>: VR ヘッドマウントディスプレイ。</li>\n</ul>\n<p><a href=\"https://github.com/mdn/webvr-tests/tree/gh-pages/vrdevice\" class=\"external\" rel=\" noopener\">vrdevice demo</a> で基本的なデバイス情報を表示するための非常に簡単なコードを見ることができます。</p>\n<p>本当に欲しいものはデバイスのペアを取得するものです (将来のマルチプレイヤ VR ゲームでは複数のペアになるかもですが)。WebVR 仕様からもってきた（そして <a href=\"https://github.com/mdn/webvr-tests/tree/gh-pages/positionsensorvrdevice\" class=\"external\" rel=\" noopener\">positionsensorvrdevice</a> デモでも使っている）次のコードはかなりよく使うトリックです:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> gHMD<span class=\"token punctuation\">,</span> gPositionSensor<span class=\"token punctuation\">;</span>\n\nnavigator<span class=\"token punctuation\">.</span><span class=\"token function\">getVRDevices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">devices</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> devices<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>devices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">HMDVRDevice</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      gHMD <span class=\"token operator\">=</span> devices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>gHMD<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> devices<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>devices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">PositionSensorVRDevice</span> <span class=\"token operator\">&amp;&amp;</span> devices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>hardwareUnitId <span class=\"token operator\">===</span> gHMD<span class=\"token punctuation\">.</span>hardwareUnitId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        gPositionSensor <span class=\"token operator\">=</span> devices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>最初に見つかった <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HMDVRDevice\"><code>HMDVRDevice</code> <small>(en-US)</small></a> のインスタンスを取得し、それを <code>gHMD</code> 変数へ保存します．次に見つかった <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PositionSensorVRDevice\"><code>PositionSensorVRDevice</code> <small>(en-US)</small></a> のインスタンスを取得して <code>gPositionSensor</code> 変数に代入していますが，それは先ほど取得した <code>gHMD</code> オブジェクトの <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRDisplay\"><code>VRDevice.hardWareUnitId</code> <small>(en-US)</small></a> プロパティが一致するものだけを対象にしています。同一のハードウェアは複数のデバイスとして取得されますが、それらはハードウェアユニット ID を共有しています — これは取得した 2 つのデバイスの参照がマッチングしているかをチェックする方法です。</p>"}},{"type":"prose","value":{"id":"アプリの初期化","title":"アプリの初期化","isH3":true,"content":"<p>シーンを描画する <a href=\"/ja/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a> 要素を次のように作成し、配置します:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myCanvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'canvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> myCanvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> body <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbody<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>myCanvas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>次に、新しい <a href=\"/ja/docs/Web/API/HTMLImageElement\">image</a> を作成し、アプリの <a href=\"/ja/docs/Games/Anatomy#building_a_main_loop_in_javascript\">main loop</a> である<code>draw()</code> を実行する前に <code>image</code> が ロードされているかをチェックするために` <code><a href=\"/ja/docs/Web/API/Window/load_event\" title=\"/ja/docs/Web/Reference/Events/load\">load</a></code> イベントを使います:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> image <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nimage<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">'firefox.png'</span><span class=\"token punctuation\">;</span>\nimage<span class=\"token punctuation\">.</span>onload <span class=\"token operator\">=</span> draw<span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"メインループ","title":"メインループ","isH3":true,"content":"<p><code>draw()</code> は次のように実装します:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">WIDTH</span> <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">;</span>\n  <span class=\"token constant\">HEIGHT</span> <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>innerHeight<span class=\"token punctuation\">;</span>\n  lCtrOffset <span class=\"token operator\">=</span> <span class=\"token constant\">WIDTH</span><span class=\"token operator\">*</span><span class=\"token number\">0.25</span><span class=\"token punctuation\">;</span>\n  rCtrOffset <span class=\"token operator\">=</span> <span class=\"token constant\">WIDTH</span><span class=\"token operator\">*</span><span class=\"token number\">0.25</span><span class=\"token punctuation\">;</span>\n\n  myCanvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token constant\">WIDTH</span><span class=\"token punctuation\">;</span>\n  myCanvas<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token constant\">HEIGHT</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">setView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">drawImages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">drawCrosshairs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>draw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><a href=\"/ja/docs/Web/API/Window\">window</a> の <code>WIDTH</code> と <code>HEIGHT</code> は各フレームでリサンプリングされ，次の設定に使われます:</p>\n<ul>\n  <li>左右の目のビュー中心からの相対的に描画される画像を維持するのに使われる左右のオフセット値です。半分の幅のシーンのコピーを描画するので、各コピーの中心はそれぞれ、エッジの端から端までのキャンバス全体幅のちょうど 1/4 の幅になります。</li>\n  <li>キャンバスの <a href=\"/en-US/docs/Web/API/HTMLCanvasElement/width\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">width (en-US)</a> と <a href=\"/en-US/docs/Web/API/HTMLCanvasElement/height\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">height (en-US)</a>。</li>\n</ul>\n<p>これによってブラウザウィンドウがリサイズされたとしても、シーンが正しくリサイズされます。</p>\n<p>次にメインループの中で 3 つの関数を実行しています:</p>\n<ul>\n  <li><code>setView()</code> は，VR ハードウェアから位置と向きの情報を受け取り，シーン内の更新された画像位置の描画に使用する準備をします。</li>\n  <li><code>drawImages()</code> はシーンを更新された位置で実際に描画します。</li>\n  <li><code>drawCrosshairs()</code> は常にシーンの中央にある十字線を描画します。</li>\n</ul>\n<p>これらの詳細は、後ほど解説します。</p>\n<p>ループの最後に <a href=\"/ja/docs/Web/API/Window/requestAnimationFrame\">requestAnimationFrame(draw)</a> を実行し<code>、draw()</code> ループが連続して呼び出されるようにします。</p>"}},{"type":"prose","value":{"id":"位置と向き情報の受取り","title":"位置と向き情報の受取り","isH3":true,"content":"<p>では <code>setView()</code> 関数の詳細を見ていきましょう。コードの各部分を順に追って、そこで何をしているかを説明します:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">setView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> posState <span class=\"token operator\">=</span> gPositionSensor<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>位置センサへの参照を使って <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PositionSensorVRDevice/getState\"><code>PositionSensorVRDevice.getState</code> <small>(en-US)</small></a> を呼び出します。このメソッドは、あなたが知りたい現在の HMD の状態のすべてを返します — <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRPose\"><code>VRPositionState</code> <small>(en-US)</small></a> オブジェクトへのアクセスを通じて — 位置、向き、そして速度/ 加速度や角速度 / 角加速度のようなより高度な情報を含んでいます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>posState<span class=\"token punctuation\">.</span>hasPosition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    posPara<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'Position: x'</span> <span class=\"token operator\">+</span> <span class=\"token function\">roundToTwo</span><span class=\"token punctuation\">(</span>posState<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" y\"</span>\n                                <span class=\"token operator\">+</span> <span class=\"token function\">roundToTwo</span><span class=\"token punctuation\">(</span>posState<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" z\"</span>\n                                <span class=\"token operator\">+</span> <span class=\"token function\">roundToTwo</span><span class=\"token punctuation\">(</span>posState<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    xPos <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>posState<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> <span class=\"token constant\">WIDTH</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    yPos <span class=\"token operator\">=</span> posState<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> <span class=\"token constant\">HEIGHT</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>posState<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>z <span class=\"token operator\">&gt;</span> <span class=\"token number\">0.01</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      zPos <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>posState<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      zPos <span class=\"token operator\">=</span> <span class=\"token number\">0.01</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>HMD のスイッチが OFF にされたり位置センサを向いていなかったりした場合など、アプリがエラーになったり停止したりしないように、 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRPose/position\"><code>VRPositionState.hasPosition</code> <small>(en-US)</small></a> を使って HMD の正常な位置情報が利用可能かを確認する方法をチェックします。</p>\n<p>そして通知を目的として、アプリの UI 内のパラグラフへ現在の位置情報を出力します。読みやすくするために、カスタム関数を使って小数点以下 2 桁に丸めています。</p>\n<p>最後に <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRPose/position\"><code>VRPositionState.position</code> <small>(en-US)</small></a> に格納されている位置情報に関して、<code>xPos</code>、 <code>yPos</code>、<code>zPos</code> 変数に代入します。<code>zPos</code> の値を 0.01 以上にするのに <code>if ... else</code> ブロックが利用されていることに気付くでしょう — このアプリは 0 以下になると例外を投げていました。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>posState<span class=\"token punctuation\">.</span>hasOrientation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    orientPara<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'Orientation: x'</span> <span class=\"token operator\">+</span> <span class=\"token function\">roundToTwo</span><span class=\"token punctuation\">(</span>posState<span class=\"token punctuation\">.</span>orientation<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" y\"</span>\n                                <span class=\"token operator\">+</span> <span class=\"token function\">roundToTwo</span><span class=\"token punctuation\">(</span>posState<span class=\"token punctuation\">.</span>orientation<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" z\"</span>\n                                <span class=\"token operator\">+</span> <span class=\"token function\">roundToTwo</span><span class=\"token punctuation\">(</span>posState<span class=\"token punctuation\">.</span>orientation<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    xOrient <span class=\"token operator\">=</span> posState<span class=\"token punctuation\">.</span>orientation<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> <span class=\"token constant\">WIDTH</span><span class=\"token punctuation\">;</span>\n    yOrient <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>posState<span class=\"token punctuation\">.</span>orientation<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> <span class=\"token constant\">HEIGHT</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    zOrient <span class=\"token operator\">=</span> posState<span class=\"token punctuation\">.</span>orientation<span class=\"token punctuation\">.</span>z <span class=\"token operator\">*</span> <span class=\"token number\">180</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>次に同じような処理をして、HMD の向きに応じてシーンの更新処理をします — <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRPose/orientation\"><code>VRPositionState.hasOrientation</code> <small>(en-US)</small></a> を使って有効な向きデータかをチェックして，向きのデータを通知用の UI に表示し、<code>xOrient</code>、<code>yOrient</code>、<code>zOrient</code> の値を <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRPose/orientation\"><code>VRPositionState.orientation</code> <small>(en-US)</small></a> に格納されている値から設定します．</p>\n<pre class=\"notranslate\">  timePara.textContent = 'Timestamp: ' + Math.floor(posState.timeStamp);\n}\n</pre>\n<p>最後に <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRPose/timeStamp\"><code>VRPositionState.timeStamp</code> <small>(en-US)</small></a> に格納されている現在のタイムスタンプを通知 UI に出力します。この値は位置データが更新済みか、どんな順序で更新が発生したかを判断するのに役立ちます。</p>"}},{"type":"prose","value":{"id":"シーンの更新","title":"シーンの更新","isH3":true,"content":"<p><code>setView()</code> で取得された <code>xPos</code>、<code>yPos</code>、<code>zPos</code>、<code>xOrient</code>、<code>yOrient</code>、<code>zOrient</code> の値は、<code>drawImages()</code> で行われるシーン病がの更新のための変更値として使用されます。どうやっているかを見ていきますが、左目のビューの描画コードだけをウォークスルーしていきます。右目については、右にオーバーシフトしている以外はほぼ同じです:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">drawImages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  ctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">'white'</span><span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token constant\">WIDTH</span><span class=\"token punctuation\">,</span><span class=\"token constant\">HEIGHT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>最初に次のフレームが描画される前にシーンをクリアするため、白い <a href=\"/ja/docs/Web/API/CanvasRenderingContext2D/fillRect\" title=\"fillRect()\"><code>fillRect()</code></a> を描画します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">beginPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">translate</span><span class=\"token punctuation\">(</span><span class=\"token constant\">WIDTH</span><span class=\"token operator\">/</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token constant\">HEIGHT</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">rect</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token constant\">WIDTH</span><span class=\"token operator\">/</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token constant\">HEIGHT</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token constant\">WIDTH</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token constant\">HEIGHT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>次に左目のビューを別の画像として扱って右目のビューに影響を与えないコードにするので、 <a href=\"/ja/docs/Web/API/CanvasRenderingContext2D/save\" title=\"save()\"><code>save()</code></a> でコンテキスト状態を保存します。</p>\n<p>そして <a href=\"/ja/docs/Web/API/CanvasRenderingContext2D/beginPath\" title=\"pathを開始し\"><code>pathを開始し</code></a>, <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CanvasRenderingContext2D/translate\"><code>canvasを変換します</code> <small>(en-US)</small></a>、これによって原点を左目の中心（全体の 1/4 幅で半分の高さ）に移動させます。回転を正しく動かすためにもこれは必要です。回転は canvas の原点が中心となります。そして左目のビュー全体を覆うように <a href=\"/ja/docs/Web/API/CanvasRenderingContext2D/rect\" title=\"rect()\"><code>rect()</code></a> を描画します。</p>\n<p><code>rect()</code> はマイナスの 1/4 幅，マイナスの 1/2 高さから描画し始めていることに注意してください。これは原点が既に移動しているためです。</p>\n<pre class=\"notranslate\">  ctx.clip();\n</pre>\n<p>canvas を <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CanvasRenderingContext2D/clip\"><code>clip()</code> <small>(en-US)</small></a> します。<code>rect()</code> が描画された直後にこれを呼ぶので、キャンバス上に対して行うことは <code>rect() の内側に制限され</code>、<code>restore()</code> が呼び出されるまですべてのオーバーフローは隠蔽されます（後述）。これは左ビュー全体が右ビューから独立したままであることを保証します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>zOrient <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">/</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>頭の回転と同じようにシーンを回転させるために、zOrient の値に従った回転が画像に適用します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token constant\">WIDTH</span><span class=\"token operator\">/</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>lCtrOffset<span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>zPos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>xPos<span class=\"token operator\">-</span>yOrient<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>zPos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>yPos<span class=\"token operator\">+</span>xOrient<span class=\"token punctuation\">,</span>image<span class=\"token punctuation\">.</span>width<span class=\"token operator\">*</span>zPos<span class=\"token punctuation\">,</span>image<span class=\"token punctuation\">.</span>height<span class=\"token operator\">*</span>zPos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>実際に画像を描画しましょう! この少し厄介なコードを、ここでは引数ごとに分解してみましょう:</p>\n<ul>\n  <li><code>image</code>: 描画する画像</li>\n  <li><code>-(WIDTH/4)+lCtrOffset-((image.width)/(2*(1/zPos)))+xPos-yOrient</code>: 画像原点の水平座標。前に行った平行移動を打ち消すために <code>WIDTH/4</code> を引きます．そして中心に戻すために左中心オフセットを加えて，画像幅を <code>zPos</code> の逆数の 2 倍で割ったものを引きます— 描画する画像が小さい（大きい）ほど減算値が小さい（大きい）くなり，画像中心が保持されます．最後に，HMD の水平方向の動きや回転にあわせて画像位置を更新するために <code>xPos</code> を加えて，<code>yOrient</code> を引きます（y 軸周りの回転が画像を水平方向に移動します)。</li>\n  <li><code>-((image.height)/(2*(1/zPos)))+yPos+xOrient</code>: 画像原点の垂直方向の座標です。これは In this case the \"HEIGHT/2 の減算\"と\"右中心オフセットの追加\"は、ちょうどお互いにキャンセルされるので、計算式から取り除きます。計算式の残りは上と同じように、zPos の逆数の 2 倍で画像幅を割ったものを減算することによる画像中心を保持と、<code>yPos</code> と <code>xOrient</code> による描画位置の修正です。</li>\n  <li><code>image.width*zPos</code>: 画像を描画する幅; 近いものほど大きく描画されるように <code>zPos</code> で修正します。</li>\n  <li><code>image.height*zPos</code>: 画像を描画する高さ; 近いものほど大きく描画されるように <code>zPos</code> で修正します。</li>\n</ul>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  ctx<span class=\"token punctuation\">.</span>strokeStyle <span class=\"token operator\">=</span> <span class=\"token string\">\"black\"</span><span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">stroke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>左目ビューの周囲に黒い <a href=\"/ja/docs/Web/API/CanvasRenderingContext2D/stroke\" title=\"stroke()\"><code>stroke()</code></a> を描画します。これはビューの分離をちょっとだけわかりやすくする手助けとなります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">restore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>右目ビューの描画の実施に移行するため、キャンバスの復元を <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CanvasRenderingContext2D/restore\"><code>restore()</code> <small>(en-US)</small></a> で行います。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>Note:</strong> ここである種のチートをしていて，2D キャンバスを使って 3D シーンを擬似的に表現しています。学習目的の場合、物事を簡単にすることができます。WEB テクノロジで作成された任意のアプリで、ビューレンダリングを修正するために上述した位置と向きのデータを使うことができます。例えば <a href=\"https://github.com/mdn/webvr-tests/tree/gh-pages/3Dpositionorientation\" class=\"external\" rel=\" noopener\">3Dpositionorientation</a> デモでは、<a href=\"https://threejs.org/\" class=\"external\" rel=\" noopener\">Three.js</a> を使って作成された WebGL シーンのビューを制御するために上述の方法と非常によく似たコードを使っています。</p>\n</div>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>Note:</strong> <a href=\"https://github.com/mdn/webvr-tests/blob/gh-pages/positionsensorvrdevice/index.html#L106-L119\" class=\"external\" rel=\" noopener\"><code>drawCrosshairs() のコード</code></a> は <code>drawImages()と比較して</code>非常にシンプルですので、もし興味があるなら自分自身で勉強することをおすすめします!</p>\n</div>"}},{"type":"prose","value":{"id":"フルスクリーン表示","title":"フルスクリーン表示","isH3":true,"content":"<p>VR エフェクトはアプリを <a href=\"/en-US/docs/Web/API/Fullscreen_API\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">フルスクリーンモード (en-US)</a> で実行すると非常に効果的です。ディスプレイのダブルクリックやボタンの押下のような、特定のイベントが発生した時に <a href=\"/ja/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a> 要素をフルスクリーンにするための一般的な設定を説明します。</p>\n<p>シンプルさを保つために、ここではキャンバスのクリック時に <code>fullScreen()</code> 関数を実行します:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>myCanvas<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span>fullScreen<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>fullScreen()</code> 関数は、できるだけ互換性を保つために、ブラウザによって異なるキャンバスに実装されている <code>requestFullscreen()</code> メソッドのバージョンをチェックして、見つかった適切な関数を呼び出します:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">fullScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myCanvas<span class=\"token punctuation\">.</span>requestFullscreen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    myCanvas<span class=\"token punctuation\">.</span><span class=\"token function\">requestFullscreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myCanvas<span class=\"token punctuation\">.</span>msRequestFullscreen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    myCanvas<span class=\"token punctuation\">.</span><span class=\"token function\">msRequestFullscreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myCanvas<span class=\"token punctuation\">.</span>mozRequestFullScreen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    myCanvas<span class=\"token punctuation\">.</span><span class=\"token function\">mozRequestFullScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myCanvas<span class=\"token punctuation\">.</span>webkitRequestFullscreen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    myCanvas<span class=\"token punctuation\">.</span><span class=\"token function\">webkitRequestFullscreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"fov_とデバイスのキャリブレーション","title":"FOV とデバイスのキャリブレーション","isH3":false,"content":"<p>現在のデモではあまり考えませんでしたが，商用アプリでは，ユーザが持っている VR ハードウェアを正しく動作させるためにユーザキャリブレーションをする必要があるでしょう．WebVR API はそれを手助けする多くの機能があります。</p>\n<p>HMD の位置と姿勢をリセットするために <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PositionSensorVRDevice/resetSensor\"><code>PositionSensorVRDevice.resetSensor</code> <small>(en-US)</small></a> メソッドを利用できます。実行すると、現在のヘッドセットの位置/向きが 0 にセットされます。実行前に，ヘッドセットが検知可能な位置にあることを保証する必要があります。positionsensorvrdevice demo では、[Reset Sensor] ボタンでそれを実行することができます:</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">&gt;</span></span>Reset Sensor<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  gPositionSensor<span class=\"token punctuation\">.</span><span class=\"token function\">resetSensor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>他にもヘッドセットの視野角 (FOV) を、シーン内で上，右，下，左方向に見える範囲がどの程度かキャリブレーションします。それぞれの目のパラメータを別々に返す <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HMDVRDevice/getEyeParameters\"><code>HMDVRDevice.getEyeParameters</code> <small>(en-US)</small></a> メソッドを呼ぶと、両目それぞれの情報を個別に受け取ることができます。なお左目用パラメータで 1 回、右目用で 1 回の計 2 回の呼出しが必要です。それぞれの目用に <a href=\"/ja/docs/Web/API/VREyeParameters\"><code>VREyeParameters</code></a> オブジェクトを返します。</p>\n<p>一例として、 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VREyeParameters/fieldOfView\"><code>VREyeParameters.currentFieldOfView</code> <small>(en-US)</small></a> を用いて片目分の現在の FOV を受け取れます。これは次の 4 つのプロパティを持つ <a href=\"/ja/docs/Web/API/VRFieldOfView\"><code>VRFieldOfView</code></a> オブジェクトを返します:</p>\n<ul>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRFieldOfView/upDegrees\"><code>upDegrees</code> <small>(en-US)</small></a>: FOV の上方向へ広がる角度の値．</li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRFieldOfView/rightDegrees\"><code>rightDegrees</code> <small>(en-US)</small></a>: FOV の右方向へ広がる角度の値．</li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRFieldOfView/downDegrees\"><code>downDegrees</code> <small>(en-US)</small></a>: FOV の下方向へ広がる角度の値．</li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRFieldOfView/leftDegrees\"><code>leftDegrees</code> <small>(en-US)</small></a>: FOV の左方向へ広がる角度の値．</li>\n</ul>\n<p>FOV は眼を頂点としたピラミッド形になっています．</p>\n<p>あなたのアプリに適切な FOV をユーザが持っているかをチェックし，もしそうでないなら <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HMDVRDevice/setFieldOfView\"><code>HMDVRDevice.setFieldOfView</code> <small>(en-US)</small></a> メソッドを使って新しい FOV を設定します．これを扱う簡単な関数は次のような感じです:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">setCustomFOV</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">up<span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">,</span>down<span class=\"token punctuation\">,</span>left</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> testFOV <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VRFieldOfView</span><span class=\"token punctuation\">(</span>up<span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">,</span>down<span class=\"token punctuation\">,</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  gHMD<span class=\"token punctuation\">.</span><span class=\"token function\">setFieldOfView</span><span class=\"token punctuation\">(</span>testFOV<span class=\"token punctuation\">,</span>testFOV<span class=\"token punctuation\">,</span><span class=\"token number\">0.01</span><span class=\"token punctuation\">,</span><span class=\"token number\">10000.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>この関数は引数として 4 つの角度を受け取り、VRFieldOfView() コンストラクタを用いて新しい <a href=\"/ja/docs/Web/API/VRFieldOfView\"><code>VRFieldOfView</code></a> オブジェクトを作成します。これを <code>setFieldOfView()</code> の最初の 2 つの引数（左目と右目の FOV）として渡します。第 3、4 引数は，FOV のオブジェクト可視領域を定義する眼からの最短、最大距離を示す <code>zNear</code> と <code>zFar</code> です．</p>"}}],"toc":[{"text":"始めるには","id":"始めるには"},{"text":"簡単なデモ","id":"簡単なデモ"},{"text":"アプリはどう動く?","id":"アプリはどう動く"},{"text":"FOV とデバイスのキャリブレーション","id":"fov_とデバイスのキャリブレーション"}],"summary":"WebVR API はウェブ開発者のツールキットへのすばらしい追加機能で、Oculus Rift のようなバーチャルリアリティハードウェアへのアクセスが可能となります。そして出力された動きや向きはウェブアプリの描画更新に変換されます。しかし VR アプリを開発はどのようにやればいいのでしょうか？ この記事では、それに関する基礎的な解説を行います。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using the WebVR API","locale":"en-US","native":"English (US)"},{"title":"Uso de la API de WebVR","locale":"es","native":"Español"},{"title":"Using the WebVR API","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Использование WebVR API","locale":"ru","native":"Русский"},{"title":"Using the WebVR API","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/webvr_api/using_the_webvr_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/webvr_api/using_the_webvr_api/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/WebVR_API","title":"WebVR API"},{"uri":"/ja/docs/Web/API/WebVR_API/Using_the_WebVR_API","title":"WebVR APIの使い方"}],"pageTitle":"WebVR APIの使い方 - Web API | MDN","noIndexing":false}}