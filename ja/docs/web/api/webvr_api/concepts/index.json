{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"WebVR concepts","mdn_url":"/ja/docs/Web/API/WebVR_API/Concepts","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/WebVR_API\">WebVR API</a></strong></li><li><strong><a href=\"/ja/docs/Web/API/WebVR_API\"><code>WebVR_API</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>WebVR API に関連するページ</summary><ol><li><a href=\"/ja/docs/Web/API/Gamepad/displayId\"><code>Gamepad.displayId</code></a></li><li><a href=\"/ja/docs/Web/API/Navigator/activeVRDisplays\"><code>Navigator.activeVRDisplays</code></a></li><li><a href=\"/ja/docs/Web/API/Navigator/getVRDisplays\"><code>Navigator.getVRDisplays()</code></a></li><li><a href=\"/ja/docs/Web/API/VRDisplay\"><code>VRDisplay</code></a></li><li><a href=\"/ja/docs/Web/API/VRDisplayCapabilities\"><code>VRDisplayCapabilities</code></a></li><li><a href=\"/ja/docs/Web/API/VRDisplayEvent\"><code>VRDisplayEvent</code></a></li><li><a href=\"/ja/docs/Web/API/VREyeParameters\"><code>VREyeParameters</code></a></li><li><a href=\"/ja/docs/Web/API/VRFieldOfView\"><code>VRFieldOfView</code></a></li><li><a href=\"/ja/docs/Web/API/VRFrameData\"><code>VRFrameData</code></a></li><li><a href=\"/ja/docs/Web/API/VRLayerInit\"><code>VRLayerInit</code></a></li><li><a href=\"/ja/docs/Web/API/VRPose\"><code>VRPose</code></a></li><li><a href=\"/ja/docs/Web/API/VRStageParameters\"><code>VRStageParameters</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>この文書は，バーチャルリアリティ(VR)の背景にある概念と理論について述べています．もしあなたがこの分野の初学者なら，コードを書き始める前に，これらのトピックを理解すると役に立つでしょう．</p>"}},{"type":"prose","value":{"id":"vr_の歴史","title":"VR の歴史","isH3":false,"content":"<p>VR は全く新しいというわけではありません —その概念は 2012 年の Oculus Rift Kickstartar キャンペーンよりずっと前にさかのぼります．人々は数十年の間その実験を続けてきました．</p>\n<p>1939 年 <a href=\"https://en.wikipedia.org/wiki/View-Master\" class=\"external\" rel=\" noopener\">View-Master device</a> が作られ，3D ピクチャを見ることができるようになりました．そのデバイスは，ステレオ立体視の小さなカラー写真のペアを持つ厚紙のディスクに記録された画像を表示していました．数年の開発ののち，軍はそのテクノロジーの使用に興味を，持ち，そして Headsight プロジェクトが 1961 年に生まれました — これはビデオスクリーンとヘッドトラッキングシステムを合体させたヘルメットに影響を与えました．</p>\n<p>\n  <img src=\"http://end3r.com/tmp/vr/view-master.jpg\" alt=\"\" loading=\"lazy\">\n</p>\n<p>その後の数十年，さまざまな実験がなされましたが，もはや科学ラボや戦場に限定されませんでした．最終的に，映画監督がバーチャルリアリティのビジョンを示すポップカルチャーに引き継がれました．Tron (1982) や The Matrix (1999) のような映画が制作され，そこではまったく新しいサイバー世界へ転送されたり，サイバー世界と知ることなくとらわれてそれを現実世界として受け入れる世界が描かれました．</p>\n<p>\n  <img src=\"http://end3r.com/tmp/vr/matrix.jpg\" alt=\"\" loading=\"lazy\">\n</p>\n<p>最初の VR ゲームの試みは大きく高価なものでした — 1991 年， Virtuality Group はゴーグルを持つ VR レディなアーケードマシンを作成し，パックマンのような人気のタイトルを VR へ移植しました．セガは VR グラスを 1993 年の CES(Consumer Electronics Show )で発表しました．企業は実験をしていましたが，市場や消費者を納得させられませんでした — 実際に成功した VR プロジェクトの事例を見るには 2012 年まで待つ必要がありました．</p>"}},{"type":"prose","value":{"id":"最近の_vr","title":"最近の VR","isH3":true,"content":"<p>では何が新しいのでしょう？ 十分なユーザ体験を提供するには，VR ハードウェアは高精度，低レイテンシでデータを届ける必要があります; VR アプリケーションを動かすコンピュータはこれらすべての情報を扱うため，十分強力でなければなりません．そのような精度とパワーがあったとしても，手頃な価格で利用できるようになったのは最近のことです．早期の VR プロトタイプは何万ドルもコストがかかりましたが，<a href=\"https://www.vive.com/uk/\" class=\"external\" rel=\" noopener\">HTC VIVE</a>や<a href=\"https://www.oculus.com/rift/\" class=\"external\" rel=\" noopener\">Oculus Rift</a>、<a href=\"https://www.playstation.com/en-us/explore/playstation-vr/\" class=\"external\" rel=\" noopener\">Playstation VR</a> のような近年の HMD は数百ドルで利用でき，さらに <a href=\"https://www.samsung.com/global/galaxy/gear-vr/\" class=\"external\" rel=\" noopener\">Gear VR</a> や <a href=\"https://www.google.com/get/cardboard/\" class=\"external\" rel=\" noopener\">Google Cardboard</a> のようなモバイルベースのソリューションみたいに，もっと安価なソリューションもあります．</p>\n<p>ソフトウェアの面では、Valve は、VIVE や他のソリューションで互換性のある <a href=\"https://store.steampowered.com/universe/vr\" class=\"external\" rel=\" noopener\">SteamVR</a> を作成し、利用しやすい VR UI のようなソフトウェアへのアクセスを提供しています。</p>\n<p>テクノロジー自体はすでにあるので，将来的には，より高価なヘッドセットが時間をかけて安価になっていき，多くの人々が VR 体験できるようになります．</p>"}},{"type":"prose","value":{"id":"入力デバイス","title":"入力デバイス","isH3":true,"content":"<p>VR アプリケーションの入力を扱うことは興味深いトピックです — それは専用のユーザインターフェイスがデザインされなければならないのでまったく新しい体験となります．現時点でも古典的なキーボードとマウスから，Leap Motion や VIVE コントローラのような新しいものまで様々なアプローチがあります．これは特定の状況でどのように動作するかそしてあなたのゲームタイプにはどのような入力が最適なのかを確認する試行錯誤の事柄です．\n  <img src=\"http://end3r.com/tmp/vr/oculus-touch.jpg\" alt=\"\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"vr_ハードウェアのセットアップ","title":"VR ハードウェアのセットアップ","isH3":false,"content":"<p>主に，モバイルタイプとコンピュータ接続タイプの 2 種類のセットアップがあります．最小のハードウェアセットアップは次のようなものです:</p>\n<ul>\n  <li>モバイル: Google Cardboard のように VR マウントにスマートフォン — スマートフォンは VR ディスプレイとして機能する — をマウントして作られるヘッドマウントディスプレイ (HMD) で，モバイルスクリーンをステレオビジョンへ投影するのに必要なレンズが含まれています．\n    <img src=\"https://mdn.mozillademos.org/files/11085/mobileBasedVRSetup.png\" alt=\"Mobile based VR setup\" loading=\"lazy\">\n  </li>\n  <li>コンピュータ接続: コンピュータに接続する VR セットアップです — 右目と左目の両方に表示される映像を映す高解像度の横向きスクリーンを持つ HMD で構成されています．HMD は右目と左目のシーン（ステレオビジョン）を分割するためのレンズも備えています．セットアップは分離型の位置センサも含まれています．位置センサは頭の位置/向き/速度/加速度を取得して，コンピュータへ絶えずその情報を渡します．\n    <img src=\"https://mdn.mozillademos.org/files/11089/computerBasedVRSetup.png\" alt=\"Computer based VR Setup\" loading=\"lazy\">\n  </li>\n</ul>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> コンピュータ接続システムは位置センサーを含んでいない場合もありますが，通常は含まれています．</p>\n</div>\n<p>その他の VR 体験を補うハードウェア:</p>\n<ul>\n  <li><strong>手認識センサ</strong>: 手の位置と動きをトラッキングするセンサで，あなたの手を興味深いコントローラや VR ゲーム世界内のオブジェクトにすることができます．もっとも先進的なものは <a href=\"https://www.leapmotion.com/\" class=\"external\" rel=\" noopener\">Leap Motion</a> で，（Oculus Rift と接続した）コンピュータ上で動作し，（実験的な段階ですが）モバイルデバイスと接続して使うことも可能です．</li>\n  <li><strong>ゲームパッド</strong>: XBox コントローラおよびその類似コントローラをブラウザ内でキーボードとして動作するように設定できます．これは VR ウェブページとのインタラクションの可能性を広げます．<a href=\"https://www.mergevr.com/\" class=\"external\" rel=\" noopener\">MergeVR headset</a> のようなモバイル環境で使えるゲームパッドも存在しますが，それらは Bluetooth 接続であるため，WebVR では動作しません．</li>\n  <li><strong>アイトラッキングセンサ（実験的）</strong>: FOVE プロジェクトは，眼球のかすかな動きを読み取る最初のヘッドセットです．</li>\n  <li>顔の表情追跡（実験的）: 南カリフォルニア大学や Facebook の Oculus 部門の研究者は，表情をトラッキングして，バーチャルキャラクタの表情へ適用する新しい方法をテストしています．</li>\n  <li><strong>もっと複雑な位置センサシステム</strong>: 1 つの例といて、HTC VIVE は空間の対角上に配置した 2 つの位置センサを備えており、マッピングをしているので、最大 5m x 5m までの空間で VR 体験を楽しむことができます。</li>\n</ul>"}},{"type":"prose","value":{"id":"位置，向き，速度，加速度","title":"位置，向き，速度，加速度","isH3":false,"content":"<p>前述のように，位置センサは HMD に関する情報を検出して常にそれを出力しているので，頭の動きや回転などに追従してシーンを連続的に更新することができます．しかしその情報とは正確には何でしょうか？</p>\n<p>\n  <img src=\"https://mdn.mozillademos.org/files/11083/positionOrientationVR.png\" alt=\"Position and Orientation VR setup\" loading=\"lazy\">\n</p>\n<p>出力情報は，4 つのカテゴリに分類できます:</p>\n<ol>\n  <li>位置 — 3D 空間の 3 つの座標軸に沿った HMD の位置です．位置センサから見て，x は左右，y は上下，z は前後となります．WebVR では、x, y, z 座標は <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRPose/position\"><code>VRPose.position</code> <small>(en-US)</small></a> 内の配列として表現されます．</li>\n  <li>\n    向き — 3D 空間の 3 つの座標軸周りの HMD の回転です．ピッチは x 軸周り，ヨーは y 軸周り，ロールは z 軸周りの回転を意味します．WebVR では ピッチ、ヨー、ロールは\n    <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRPose/orientation\"><code>VRPose.orientation</code> <small>(en-US)</small></a> 内の配列の最初の 3 要素で表されます．\n  </li>\n  <li>速度 — VR で考慮する速度は 2 種類あります:\n    <ul>\n      <li>速度（線速度） — 任意の 1 つの軸に沿った HMD の移動速度です．この情報は <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRPose/linearVelocity\"><code>VRPose.linearVelocity</code> <small>(en-US)</small></a> を用いて取得できます．</li>\n      <li>角速度 — 任意の 1 つの軸周りの HMD の回転速度です．この情報は <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRPose/angularVelocity\"><code>VRPose.angularVelocity</code> <small>(en-US)</small></a> を用いて取得できます．</li>\n    </ul>\n  </li>\n  <li>加速度 — VR で考慮する加速度は 2 種類あります:\n    <ul>\n      <li>加速度（線加速度） — 任意の 1 つの軸に沿った HMD の移動の加速度です．この情報には <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRPose/linearAcceleration\"><code>VRPose.linearAcceleration</code> <small>(en-US)</small></a> を用いてアクセスできます．</li>\n      <li>角加速度 — 任意の 1 つの軸周りの HMD の回転加速度です．この情報には <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRPose/angularAcceleration\"><code>VRPose.angularAcceleration</code> <small>(en-US)</small></a> を用いてアクセスできます．</li>\n    </ul>\n  </li>\n</ol>"}},{"type":"prose","value":{"id":"視界","title":"視界","isH3":false,"content":"<p>視界 (FOV; field of view) は，ユーザの各目で見られる（と期待されている）範囲です．その形状は，おおよそピラミッド型になっていて，（前後の）側面はユーザの頭の内部を頂点として，残りはユーザの目の位置から広がっています（訳注； 原文では eminate と書かれていますが，emanate の誤字と判断しました）． それぞれの目は固有の FOV を持っていて，もう一方にわずかに重なっています．</p>\n<p>\n  <img src=\"https://mdn.mozillademos.org/files/11091/FOVrelatedProperties.png\" alt=\"FOV related properties\" loading=\"lazy\">\n</p>\n<p>FOV は次の値で定義されています:</p>\n<ul>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRFieldOfView/upDegrees\"><code>VRFieldOfView.upDegrees</code> <small>(en-US)</small></a>: FOV の上方へ広げる角度値です．</li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRFieldOfView/rightDegrees\"><code>VRFieldOfView.rightDegrees</code> <small>(en-US)</small></a>: FOV の右側へ広げる角度値です．</li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRFieldOfView/downDegrees\"><code>VRFieldOfView.downDegrees</code> <small>(en-US)</small></a>: FOV を下方へ広げる角度値です．</li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRFieldOfView/leftDegrees\"><code>VRFieldOfView.leftDegrees</code> <small>(en-US)</small></a>: FOV を左側へ広げる角度値です．</li>\n  <li>zNear <a href=\"/ja/docs/Web/API/VRDisplay/depthNear\"><code>VRDisplay.depthNear</code></a>: ユーザの頭の中央から FOV の可視範囲開始まで距離．</li>\n  <li>zFar <a href=\"/ja/docs/Web/API/VRDisplay/depthFar\"><code>VRDisplay.depthFar</code></a>: ユーザの頭の中央から FOV の可視範囲末端までの距離．</li>\n</ul>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> The user can potentially see all the way around them, which is a brand new concept for apps and games. Try to give people a reason to look around and see what's behind them — make them reach out and find things that are not visible at the very beginning. Describe what's behind their backs.</p>\n</div>\n<p>これらのプロパティのデフォルト値は，VR ハードウェアによって微妙に異なりますが，上下方向は 53°，左右方向は 47°，zNear と zFar はそれぞれ 0.1m から 10000m くらいになっています．</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> ユーザは潜在的に周囲全体を見渡すことができます．それはまったく新しいアプリやゲームのコンセプトです．人々が見回したり背後にある何かを見たりする理由を与えることにトライしてみましょう — 最初は見えていないものを見つける手助けをしてあげてください．背後になにがあるか説明しましょう．</p>\n</div>"}},{"type":"prose","value":{"id":"vr_アプリのための概念","title":"VR アプリのための概念","isH3":false,"content":"<p>このセクションでは，通常のモバイルやデスクトップを開発するときにはほとんど考慮する必要がないけれど，VR アプリを開発するときに知っておきたい概念について説明します．</p>"}},{"type":"prose","value":{"id":"立体視_stereoscopic_vision","title":"立体視 Stereoscopic vision","isH3":true,"content":"<p>立体視は，人間や（おそらく）動物が持つ通常のビジョンで，（両目のそれぞれから見える）僅かに異なる 2 つの画像を 1 つの画像として知覚するものです．結果として奥行きを認識でき，見事な 3D の世界を見る手助けをしています．VR アプリでこれを再現するには，ユーザが HMD を使っている時に左右の目のそれぞれに与える，本当にわずかに異なるビューを横に並べた画像をレンダリングする必要があります．</p>\n<p>\n  <img src=\"https://mdn.mozillademos.org/files/11095/createStereoscopicImages.png\" alt=\"How to create stereoscopic 3D images\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"ヘッドトラッキング_head_tracking","title":"ヘッドトラッキング Head tracking","isH3":true,"content":"<p>\n  360° シーンの臨場感をつくりだす主要なテクノロジは，HMD に搭載されているジャイロスコープや加速度センサ，磁気センサ（コンパス）によって実現されています．\n  それによって目が球面上のスクリーンの前にいると信じることができるので，アプリのキャンバス内に現実的な没入感を与えることができます．\n</p>"}},{"type":"prose","value":{"id":"眼精疲労_eye_strain","title":"眼精疲労 Eye strain","isH3":true,"content":"<p>HMD のメジャーな障害として VR でよく使われる用語です．私たちはアプリキャンバス内で見せ続けることで常に目を欺いていますが，通常よりも眼を酷使することになるため，VR アプリを長時間利用し続けると眼精疲労を招きます．</p>\n<p>望ましくない影響を最小化するするために，つぎのようなことが必要です:</p>\n<ul>\n  <li>異なる深さへの焦点合わせを避ける（例: たくさんのパーティクルを異なる深度（奥行き）に使うのを避ける）．</li>\n  <li>eye convergion を避ける（例: もしカメラに向かってくる物体があると，目はそれを追って 1 点に集中してしまいます）</li>\n  <li>できるだけ落ち着いた色の暗い背景を使う; 明るいスクリーンは目の疲れが増えます．</li>\n  <li>明度の激しい変化を避ける．</li>\n  <li>大量のテキストを読ませることを避ける．目（カメラ）の位置と読ませたいテキストとの距離にも注意しなければいけません．0.5m は近すぎて不快で，2m 以上だと立体効果が感じられないので，その間に配置することをお勧めします．</li>\n  <li>一般に，物体とカメラと距離には注意してください，Oculus は，フォーカスの最小距離として 0.75m を推奨しています．</li>\n  <li>シーン内のオブジェクトとのインタラクションが必要なときは，ポインタを使います．これは少ない労力で正しく物体を指定するのに役立つでしょう．</li>\n</ul>\n<p>一般に，ビジュアルエフェクトが少ないほど，ユーザに与える疲れは軽減されます．</p>"}},{"type":"prose","value":{"id":"モーション酔い_motion_sickness","title":"モーション酔い Motion sickness","isH3":true,"content":"<p>開発者が細心の注意を払っていないと，VR アプリはユーザの気分の悪化を実際に引き起こします．これは，目から受け取る刺激と，体が受け取る（と期待するもの）が違う場合に発生します．</p>\n<p>ユーザのモーション酔いの発生を避けるために（あるいは最小化するために），次のことが必要です:</p>\n<ul>\n  <li>常にヘッドトラッキングを維持する（これは最も重要です，特に体験の最中で発生する場合）．</li>\n  <li>一定の速度を使う; 加速や減速するようなカメラの動きを避ける（線形の加速度を使い，できるだけ easing を避ける）．</li>\n  <li>高フレームレートを維持する（30fps 以下は不快です）．</li>\n  <li>急激な，あるいは予期できないカメラの回転を避ける．</li>\n  <li>固定オブジェクト用の固定点を追加する（そうしなければ，ユーザはそれらが移動していると感じてしまいます）</li>\n  <li>どこに焦点を合わせていいか分からなくなるので，DoF (Depth of Feild; 被写界深度)やモーションブラーのポスト処理を使用しない．</li>\n  <li>明るさの変化を避ける（スムースに照明を変化させるため，低周波のテクスチャやフォグエフェクトを使います）．</li>\n</ul>\n<p>全体的に，体に反射的な行動を引き起こすような信号を目が脳に送るべきではありません．</p>"}},{"type":"prose","value":{"id":"遅延_latency","title":"遅延 Latency","isH3":true,"content":"<p>遅延は，物理的な頭の動きと，HMD スクリーンが更新されて表示が目に届くまでの間にかかる時間のことです．これは現実感の体験を提供する上で最も重要な要素のひとつです．人間は非常に小さな遅延を検出することができ，知覚させないためには遅延を 20 ミリ秒以下を維持する必要があります（例えば 60Hz のモニタは 16 ミリ秒で応答します）．</p>\n<p>Oculus Rift ヘッドセットの遅延は 20 ミリ秒以下ですが，モバイル・デバイスベースの環境ではスマートフォンの CPU パワーやその他の性能に大きく依存します．</p>"}},{"type":"prose","value":{"id":"フレームレート_framerate_frames_per_second_fps_","title":"フレームレート Framerate ( Frames per second / FPS )","isH3":true,"content":"<p>Wikipedia の定義に基づくと，フレームレートは，連続した別々の画像（フレームと呼ぶ）をイメージングデバイスが生成する周波数のことです．60fps は，スムースなユーザ体験のために許容できるフレームレートですが，アプリが動作しているマシン性能や見せたいコンテンツの複雑さによっては，急激に低下する可能性があります．30fps 未満では，一般にジッタがあると考えられていて，ユーザーをいらだたせます。</p>\n<p>最も困難なタスクの 1 つは，一定の高フレームレートを維持することで，それを実現するために，可能なかぎり効率的に動作するようにコードを最適化しなければなりません．一定のフレームレートを保てなかったり急激にフレームレートが変化するようなことが無いよう，適切なフレームレートにすることが好ましいです； このために，シーンに配置するオブジェクトを必要最小限にしたり，(WebGL の場合では)ドローコールを削減することが必要となります．</p>"}},{"type":"prose","value":{"id":"瞳孔間距離_interpupillary_distance_ipd_","title":"瞳孔間距離 Interpupillary distance ( IPD )","isH3":true,"content":"<p>Wikipedia の定義に基づくと，IPD は両目の瞳孔の中心間の距離です．IPD は両眼目視装置の設計においてクリティカルで，両目の瞳孔とも目視装置の射出ひとみ(exit pupils)に位置合わせする必要があります．</p>\n<p>WebVR においては，IPD は <a href=\"/ja/docs/Web/API/VREyeParameters/offset\"><code>VREyeParameters.offset</code></a> を使って算出でき、これは IPD のちょうど半分の値になっています．</p>\n<p>この値は HMD によって返され，60mm から 70mm くらいでしょう； Oculus Rift のようないくつかの HMD では，ユーザ固有の IPD をセット可能です．通常この値は変化しませんが，シーン全体のスケールを変更するためにそれを実施するかもしれません．例えば，IPD が 6000mm にセットされていると，小人の世界を見る巨人のように，ユーザはシーンを見るでしょう．</p>"}},{"type":"prose","value":{"id":"自由度_degrees_of_freedom_dof_","title":"自由度 Degrees of Freedom ( DoF )","isH3":true,"content":"<p>DoF は空間内の剛体の動きを示します．この用語の値を作る決まった方法はありません — 3DoF という記述は，ヘッドトラッキングで回転のみを検出するセンサの文脈で発見でき，6DoF という記述を，位置と回転を同時に制御できる入力について書かれている文脈で見つけることができます．ジャイロセンサ，加速度センサ，コンパスのような 3 つのセンサを持つハードウェアで，9DoF という記述がされていることがありますが，3 x 3 DoF の結果として得られるものは，実際には 6 自由度のトラッキングとなります．</p>\n<p>DoF は ユーザの頭の動きのトラッキングに直接関係します．</p>"}},{"type":"prose","value":{"id":"フォーカスコーン_cone_of_focus","title":"フォーカスコーン Cone of focus","isH3":true,"content":"<p>私たちの実際の FOV は非常に広いですが（約 180°），シンボルを感じ取れる範囲（中心 60°）やテキストを読める範囲（中心 10°）は小さな部分だけだと知っておく必要があります．視線追跡センサを備えていない場合，ユーザの目がフォーカスしている場所をスクリーンの中心であると仮定します．</p>\n<p>アプリキャンバス上のどこに映像要素を配置するかを決定する際に，この制限を考慮することが重要となります．フォーカスコーンの端っこが遠すぎる場合は，非常に急速な眼精疲労につながります．MozVR.com に，これに関する興味深い記事が（他のものに混ざってですが）あります — <a href=\"http://mozvr.com/posts/quick-vr-prototypes/\" class=\"external\" rel=\" noopener\">Quick VR Mockups with Illustrator</a> を参照してください．</p>"}},{"type":"prose","value":{"id":"立体音響_3d_positional_audio","title":"立体音響 3D Positional Audio","isH3":true,"content":"<p>立体音響は，3 次元空間内でどのように音が聞こえるかをシミュレーションするための音響操作エフェクトです．</p>\n<p>これは <a href=\"/ja/docs/Web/API/Web_Audio_API\">Web Audio API</a> と直接関係していて，キャンバス内にあるオブジェクト上にサウンドを配置したり，ユーザの移動方向や見ているシーンの部分に応じてオーティオを再生することが可能です．</p>"}}],"toc":[{"text":"VR の歴史","id":"vr_の歴史"},{"text":"VR ハードウェアのセットアップ","id":"vr_ハードウェアのセットアップ"},{"text":"位置，向き，速度，加速度","id":"位置，向き，速度，加速度"},{"text":"視界","id":"視界"},{"text":"VR アプリのための概念","id":"vr_アプリのための概念"}],"summary":"この文書は，バーチャルリアリティ(VR)の背景にある概念と理論について述べています．もしあなたがこの分野の初学者なら，コードを書き始める前に，これらのトピックを理解すると役に立つでしょう．","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"WebVR concepts","locale":"en-US","native":"English (US)"},{"title":"WebVR concepts","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/webvr_api/concepts","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/webvr_api/concepts/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/WebVR_API","title":"WebVR API"},{"uri":"/ja/docs/Web/API/WebVR_API/Concepts","title":"WebVR concepts"}],"pageTitle":"WebVR concepts - Web API | MDN","noIndexing":false}}