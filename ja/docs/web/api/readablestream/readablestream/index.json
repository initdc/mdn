{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"ReadableStream()","mdn_url":"/ja/docs/Web/API/ReadableStream/ReadableStream","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/Streams_API\">Streams API</a></strong></li><li><strong><a href=\"/ja/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>コンストラクター</summary><ol><li><em><code>ReadableStream()</code></em></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>プロパティ</summary><ol><li><a href=\"/ja/docs/Web/API/ReadableStream/locked\"><code>locked</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>メソッド</summary><ol><li><a href=\"/ja/docs/Web/API/ReadableStream/cancel\"><code>cancel()</code></a></li><li><a href=\"/ja/docs/Web/API/ReadableStream/getReader\"><code>getReader()</code></a></li><li><a href=\"/ja/docs/Web/API/ReadableStream/pipeThrough\"><code>pipeThrough()</code></a></li><li><a href=\"/ja/docs/Web/API/ReadableStream/pipeTo\"><code>pipeTo()</code></a></li><li><a href=\"/ja/docs/Web/API/ReadableStream/tee\"><code>tee()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Streams に関連するページ</summary><ol><li><a href=\"/ja/docs/Web/API/ByteLengthQueuingStrategy\"><code>ByteLengthQueuingStrategy</code></a></li><li><a href=\"/ja/docs/Web/API/CountQueuingStrategy\"><code>CountQueuingStrategy</code></a></li><li><a href=\"/ja/docs/Web/API/ReadableByteStreamController\"><code>ReadableByteStreamController</code></a></li><li><a href=\"/ja/docs/Web/API/ReadableStreamBYOBReader\"><code>ReadableStreamBYOBReader</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ReadableStreamBYOBRequest\"><code>ReadableStreamBYOBRequest</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/API/ReadableStreamDefaultController\"><code>ReadableStreamDefaultController</code></a></li><li><a href=\"/ja/docs/Web/API/ReadableStreamDefaultReader\"><code>ReadableStreamDefaultReader</code></a></li><li><a href=\"/ja/docs/Web/API/Response/body\"><code>Response.body</code></a></li><li><a href=\"/ja/docs/Web/API/WritableStream\"><code>WritableStream</code></a></li><li><a href=\"/ja/docs/Web/API/WritableStreamDefaultController\"><code>WritableStreamDefaultController</code></a></li><li><a href=\"/ja/docs/Web/API/WritableStreamDefaultWriter\"><code>WritableStreamDefaultWriter</code></a></li><li><a href=\"/ja/docs/Web/API/fetch\"><code>fetch()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>ReadableStream()</code></strong> コンストラクターは、指定されたハンドラーから読み取り可能なストリームのオブジェクトを作成して返します。</p>\n<p>すべての引数は技術的にオプションですが、 <code>underlyingSource</code> を省略すると、ソースを持たないストリームになり、そこから読み込むことができなくなることに注意してください（リーダーは決して解決されないプロミスを返します）。</p>"}},{"type":"prose","value":{"id":"構文","title":"構文","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js-nolint notranslate\">new ReadableStream()\nnew ReadableStream(underlyingSource)\nnew ReadableStream(underlyingSource, queuingStrategy)\n</pre></div>"}},{"type":"prose","value":{"id":"引数","title":"引数","isH3":true,"content":"<dl>\n  <dt id=\"underlyingsource\"><code>underlyingSource</code> <span class=\"badge inline optional\">省略可</span></dt>\n  <dd>\n    <p>構築されたストリームのインスタンスの動作を定義するメソッドとプロパティを含むオブジェクト。 <code>underlyingSource</code> には次のものを含めることができます。</p>\n    <dl>\n      <dt id=\"start\"><code>start</code>(controller) <span class=\"badge inline optional\">省略可</span></dt>\n      <dd>\n        <p>これは、オブジェクトが構築されるとすぐに呼び出されるメソッドです。 このメソッドの内容は開発者が定義し、ストリームのソースへのアクセスを取得し、ストリーム機能を設定するために必要な他のすべての操作を行う必要があります。 このプロセスを非同期で実行する場合、成功または失敗を通知するプロミスを返すことができます。このメソッドに渡される <code>controller</code> 引数は、 <a href=\"/ja/docs/Web/API/ReadableStreamDefaultController\"><code>ReadableStreamDefaultController</code></a> または <a href=\"/ja/docs/Web/API/ReadableByteStreamController\"><code>ReadableByteStreamController</code></a> を <code>type</code> プロパティの値に応じて指定します。開発者はこれを使用して、セットアップ中にストリームを制御できます。</p>\n      </dd>\n      <dt id=\"pull\"><code>pull</code>(controller) <span class=\"badge inline optional\">省略可</span></dt>\n      <dd>\n        <p>このメソッドは、開発者が定義し、ストリームの内部にあるチャンクのキューがいっぱいになっていない場合、最高水準点に達するまで繰り返し呼び出されます。 <code>pull()</code> がプロミスを返す場合、そのプロミスが満たされるまで再び呼び出されません。プロミスが拒否された場合、ストリームはエラーになります。このメソッドに渡される <code>controller</code> 引数は、 <a href=\"/ja/docs/Web/API/ReadableStreamDefaultController\"><code>ReadableStreamDefaultController</code></a> または <a href=\"/ja/docs/Web/API/ReadableByteStreamController\"><code>ReadableByteStreamController</code></a> を <code>type</code> プロパティの値に応じて指定します。開発者はこれを使用して、より多くのチャンクが読み取られるようストリームを制御できます。</p>\n      </dd>\n      <dt id=\"cancel\"><code>cancel</code>(reason) <span class=\"badge inline optional\">省略可</span></dt>\n      <dd>\n        <p>このメソッドは、開発者が定義し、ストリームがキャンセルされることをアプリが通知した場合に呼び出されます（例えば、<a href=\"/ja/docs/Web/API/ReadableStream/cancel\"><code>ReadableStream.cancel()</code></a> が呼び出された場合）。 内容は、ストリームのソースへのアクセスを解放するために必要なことを行う必要があります。 このプロセスが非同期の場合、成功または失敗を通知するプロミスを返すことができます。 <code>reason</code> 引数には、ストリームがキャンセルされた理由を説明する文字列が含まれています。</p>\n      </dd>\n      <dt id=\"type\"><code>type</code> <span class=\"badge inline optional\">省略可</span></dt>\n      <dd>\n        <p>このプロパティは、どの種類の読み取り可能なストリームが処理されるかを制御します。 <code>\"bytes\"</code> に設定された値が含まれている場合、渡されるコントローラーオブジェクトは、 BYOB （独自のバッファーを持ち込む）/バイトストリームを処理できる <a href=\"/ja/docs/Web/API/ReadableByteStreamController\"><code>ReadableByteStreamController</code></a> になります。 含まれていない場合、渡されるコントローラーは <a href=\"/ja/docs/Web/API/ReadableStreamDefaultController\"><code>ReadableStreamDefaultController</code></a> になります。</p>\n      </dd>\n      <dt id=\"autoallocatechunksize\"><code>autoAllocateChunkSize</code> <span class=\"badge inline optional\">省略可</span></dt>\n      <dd>\n        <p>\n          バイトストリームの場合、開発者は <code>autoAllocateChunkSize</code> に正の整数値を設定して、ストリームの自動割り当て機能をオンにできます。\n          これを設定すると、ストリームの実装は、必要なときに自動的に <a href=\"/ja/docs/Web/API/ReadableByteStreamController/byobRequest\"><code>ReadableByteStreamController.byobRequest</code></a> に指定したサイズのビューバッファーを確保するようになります。\n        </p>\n        <p>\n          既定の <a href=\"/ja/docs/Web/API/ReadableStreamDefaultReader\"><code>ReadableStreamDefaultReader</code></a> でゼロコピー転送を使用するためには、この設定をしなければなりません。\n          設定されていない場合、既定のリーダーはデータをストリームしますが、 <a href=\"/ja/docs/Web/API/ReadableByteStreamController/byobRequest\"><code>ReadableByteStreamController.byobRequest</code></a> は常に <code>null</code> となり、コンシューマーへの転送はストリーム内のキューを経由しなければなりません。\n        </p>\n      </dd>\n    </dl>\n  </dd>\n  <dt id=\"queuingstrategy\"><code>queuingStrategy</code> <span class=\"badge inline optional\">省略可</span></dt>\n  <dd>\n    <p>オプションでストリームのキューイング戦略を定義するオブジェクト。 これには次の 2 つの引数が必要です。</p>\n    <dl>\n      <dt id=\"highwatermark\"><code>highWaterMark</code></dt>\n      <dd>\n        <p>負でない整数 — これは、バックプレッシャーが適用される前に内部キューに含めることができるチャンクの総数を定義します。</p>\n      </dd>\n      <dt id=\"sizechunk\"><code>size(chunk)</code></dt>\n      <dd>\n        <p>引数 <code>chunk</code> を含むメソッド — これは、各チャンクに使用するサイズをバイト単位で示します。</p>\n      </dd>\n    </dl>\n    <div class=\"notecard note\" id=\"sect1\">\n      <p><strong>Note:</strong> 独自のカスタム <code>queuingStrategy</code> を定義するか、このオブジェクト値に <a href=\"/ja/docs/Web/API/ByteLengthQueuingStrategy\"><code>ByteLengthQueuingStrategy</code></a> または <a href=\"/ja/docs/Web/API/CountQueuingStrategy\"><code>CountQueuingStrategy</code></a> のインスタンスを使用できます。 <code>queuingStrategy</code> が指定されていない場合、使用される既定値は、最高水準点が 1 の <code>CountQueuingStrategy</code> と同じです。</p>\n    </div>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"返値","title":"返値","isH3":true,"content":"<p><a href=\"/ja/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> オブジェクトのインスタンス。</p>"}},{"type":"prose","value":{"id":"例外","title":"例外","isH3":true,"content":"<dl>\n  <dt id=\"rangeerror\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a></dt>\n  <dd>\n    <p>指定された <code>type</code> 値が、 <code>\"bytes\"</code> でも <code>undefined</code> でもない場合に発生します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":"<p>次の単純な例では、コンストラクターを使用して独自の <code>ReadableStream</code> を作成します（完全なコードについては、<a href=\"https://mdn.github.io/dom-examples/streams/simple-random-stream/\" class=\"external\" rel=\" noopener\">単純なランダムストリームの例</a>を参照）。 <code>start()</code> 関数は、1 秒ごとにランダムなテキスト文字列を生成し、それをストリームのキューに入れます。 <a href=\"/ja/docs/Web/API/ReadableStream/cancel\"><code>ReadableStream.cancel()</code></a> が何らかの理由で呼び出された場合、生成を停止するために <code>cancel()</code> 関数も提供します。</p>\n<p>ボタンを押すと、生成を停止し、<a href=\"/ja/docs/Web/API/ReadableStreamDefaultController/close\"><code>ReadableStreamDefaultController.close()</code></a> を使用してストリームを閉じ、ストリームからデータを読み取る別の関数を実行します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReadableStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    interval <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> string <span class=\"token operator\">=</span> <span class=\"token function\">randomChars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// ストリームに文字列を追加</span>\n      controller<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// それを画面に表示</span>\n      <span class=\"token keyword\">let</span> listItem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      listItem<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> string<span class=\"token punctuation\">;</span>\n      list1<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>listItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    button<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">fetchStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      controller<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">pull</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// この例では実際には pull は必要ありません</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// リーダーがキャンセルされた場合に呼び出されるため、</span>\n    <span class=\"token comment\">// 文字列の生成を停止する必要があります</span>\n    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"仕様書","id":"仕様書","isH3":false,"specifications":[{"bcdSpecificationURL":"https://streams.spec.whatwg.org/#ref-for-rs-constructor⑤","title":"Streams Standard"}],"query":"api.ReadableStream.ReadableStream"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"query":"api.ReadableStream.ReadableStream","dataURL":"/ja/docs/Web/API/ReadableStream/ReadableStream/bcd.json"}}],"toc":[{"text":"構文","id":"構文"},{"text":"例","id":"例"},{"text":"仕様書","id":"仕様書"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"}],"summary":"ReadableStream() コンストラクターは、指定されたハンドラーから読み取り可能なストリームのオブジェクトを作成して返します。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"ReadableStream()","locale":"en-US","native":"English (US)"},{"title":"ReadableStream.ReadableStream()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/readablestream/readablestream","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/readablestream/readablestream/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/ReadableStream","title":"ReadableStream"},{"uri":"/ja/docs/Web/API/ReadableStream/ReadableStream","title":"ReadableStream()"}],"pageTitle":"ReadableStream() - Web API | MDN","noIndexing":false}}