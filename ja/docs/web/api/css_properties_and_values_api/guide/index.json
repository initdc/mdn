{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"CSS properties and values API の使用","mdn_url":"/ja/docs/Web/API/CSS_Properties_and_Values_API/guide","locale":"ja","native":"日本語","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p></p><div class=\"notecard experimental\" id=\"sect1\"><p><strong>Experimental:</strong> <strong>これは<a href=\"/ja/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">実験的な機能</a>です。</strong><br>本番で使用する前に<a href=\"#browser_compatibility\">ブラウザー互換性一覧表</a>をチェックしてください。</p></div> <strong>CSS Properties and Values API</strong>（<a href=\"/ja/docs/Web/Guide/Houdini\">CSS Houdini</a> API の傘の一部）は、<a href=\"/ja/docs/Web/CSS/--*\"><code>css カスタムプロパティ</code></a>の登録を可能にし、プロパティ型のチェック、デフォルト値、および値を継承するまたは継承しないプロパティを許可します。<p></p>"}},{"type":"prose","value":{"id":"カスタムプロパティの登録","title":"カスタムプロパティの登録","isH3":false,"content":"<p>カスタムプロパティを登録すると、カスタムプロパティの振る舞い（許可される型、カスタムプロパティがその値を継承するかどうか、カスタムプロパティのデフォルト値は何か）をブラウザーに指示できます。 プロパティを登録するには、JavaScript と CSS の 2 つの方法があります。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> JavaScript オプションには使える実装があります。 CSS オプションにはありません。</p>\n</div>"}},{"type":"prose","value":{"id":"css.registerproperty","title":"CSS.registerProperty","isH3":true,"content":"<p>次の例では、<a href=\"/ja/docs/Web/API/CSS/RegisterProperty\"><code>CSS.registerProperty</code></a> を使用して、<a href=\"/ja/docs/Web/CSS/--*\"><code>css カスタムプロパティ</code></a> <code>--my-prop</code> を色として登録し、デフォルト値を指定し、その値を継承しないようにします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>window<span class=\"token punctuation\">.</span><span class=\"token constant\">CSS</span><span class=\"token punctuation\">.</span><span class=\"token function\">registerProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'--my-prop'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">syntax</span><span class=\"token operator\">:</span> <span class=\"token string\">'&lt;color&gt;'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">inherits</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">initialValue</span><span class=\"token operator\">:</span> <span class=\"token string\">'#c0ffee'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"property","title":"@property","isH3":true,"content":"<p>CSS で同じ登録を行うことができます。 次の例では、<a href=\"/ja/docs/Web/CSS/@property\"><code>@property</code></a> を使用して、<a href=\"/ja/docs/Web/CSS/--*\"><code>css カスタムプロパティ</code></a> <code>--my-prop</code> を色として登録し、デフォルト値を指定し、その値を継承しないようにします。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token atrule\"><span class=\"token rule\">@property</span> --my-prop</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">syntax</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'&lt;color&gt;'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">inherits</span><span class=\"token punctuation\">:</span> false<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">initial-value</span><span class=\"token punctuation\">:</span> #c0ffee<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"登録したカスタムプロパティの使用","title":"登録したカスタムプロパティの使用","isH3":false,"content":"<p>プロパティを登録することの利点の 1 つは、遷移（transition）などを通してカスタムプロパティを処理する方法をブラウザーが認識できるようになったことです！ プロパティが登録されていない場合、ブラウザーはその処理方法を知らず、任意の値を使用できるため、アニメーション化できないものと見なされます。 しかし、プロパティに構文（syntax）が登録されている場合、ブラウザーは、それをアニメーション化できるなど、その構文を中心に最適化できます！</p>\n<p>この例では、カスタムプロパティ <code>--registered</code> を構文 <code>&lt;color&gt;</code> を使用して登録し、線形グラデーションで使用しています。 そのプロパティは、ホバーまたはフォーカスで別の色に遷移します。 登録されたプロパティでは遷移が機能しますが、未登録のプロパティでは機能しないことに注意してください！</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">.registered</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--registered</span><span class=\"token punctuation\">:</span> #c0ffee<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">linear-gradient</span><span class=\"token punctuation\">(</span>to right<span class=\"token punctuation\">,</span> #fff<span class=\"token punctuation\">,</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--registered<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> --registered 1s ease-in-out<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.registered:hover,\n.registered:focus</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--registered</span><span class=\"token punctuation\">:</span> #b4d455<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.unregistered</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--unregistered</span><span class=\"token punctuation\">:</span> #c0ffee<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">linear-gradient</span><span class=\"token punctuation\">(</span>to right<span class=\"token punctuation\">,</span> #fff<span class=\"token punctuation\">,</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--unregistered<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> --unregistered 1s ease-in-out<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.unregistered:hover,\n.unregistered:focus</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--unregistered</span><span class=\"token punctuation\">:</span> #b4d455<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: html hidden notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>registered<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Background Registered<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>unregistered<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Background Not Registered<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: css hidden notranslate\"><code><span class=\"token selector\">.registered</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--registered</span><span class=\"token punctuation\">:</span> #c0ffee<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">linear-gradient</span><span class=\"token punctuation\">(</span>to right<span class=\"token punctuation\">,</span> #fff<span class=\"token punctuation\">,</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--registered<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> --registered 1s ease-in-out<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.registered:hover,\n.registered:focus</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--registered</span><span class=\"token punctuation\">:</span> #b4d455<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.unregistered</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--unregistered</span><span class=\"token punctuation\">:</span> #c0ffee<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">linear-gradient</span><span class=\"token punctuation\">(</span>to right<span class=\"token punctuation\">,</span> #fff<span class=\"token punctuation\">,</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--unregistered<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> --unregistered 1s ease-in-out<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.unregistered:hover,\n.unregistered:focus</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--unregistered</span><span class=\"token punctuation\">:</span> #b4d455<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">button</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 40vh<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 3vw<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: js hidden notranslate\"><code>window<span class=\"token punctuation\">.</span><span class=\"token constant\">CSS</span><span class=\"token punctuation\">.</span><span class=\"token function\">registerProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'--registered'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">syntax</span><span class=\"token operator\">:</span> <span class=\"token string\">'&lt;color&gt;'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">inherits</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">initialValue</span><span class=\"token operator\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><iframe class=\"sample-code-frame\" title=\"登録したカスタムプロパティの使用\" id=\"frame_registered\" width=\"320\" height=\"320\" src=\"https://yari-demos.prod.mdn.mozit.cloud/ja/docs/Web/API/CSS_Properties_and_Values_API/guide/_sample_.registered.html\" loading=\"lazy\"></iframe>\n<p>機能的には正確ではありませんが、上記の例の未登録のプロパティと登録されたプロパティの違いを考える良い方法は、<a href=\"/ja/docs/Web/CSS/height\"><code>height</code></a> をアニメーション化する際の <a href=\"/ja/docs/Web/CSS/custom-ident\"><code>custom-ident</code></a> と数値の違いです。 ブラウザーは、計算されるまで <code>auto</code> の値がわからないため、<code>auto</code> から数値に遷移またはアニメーション化することはできません。 未登録のプロパティを使用すると、ブラウザーは計算されるまで値が<em>何であるか</em>を同様に認識しません。 そのため、ある値から別の値への遷移を設定できません。 ただし、登録すると、ブラウザーにどのような種類の値を期待するかを伝えており、それを知っているため、遷移を適切に設定できます。</p>"}},{"type":"prose","value":{"id":"落とし穴","title":"落とし穴","isH3":false,"content":"<p>プロパティの登録には 2 つの落とし穴があります。 1 つ目は、プロパティを一度登録すると更新する方法がなく、JavaScript で再登録しようとすると、プロパティが既に定義されていることを示すエラーがスローされることです。</p>\n<p>2 つ目は、標準のプロパティとは異なり、登録されたプロパティは解析時に検証されません。 むしろ、計算時に検証されます。 つまり、要素のプロパティを検査するときに無効な値が無効として表示されないことと、有効なプロパティの後に無効なプロパティを含めることは、有効なプロパティにフォールバックしないことを意味します。 ただし、無効なプロパティは、登録されているデフォルトにフォールバックします。</p>"}}],"toc":[{"text":"カスタムプロパティの登録","id":"カスタムプロパティの登録"},{"text":"登録したカスタムプロパティの使用","id":"登録したカスタムプロパティの使用"},{"text":"落とし穴","id":"落とし穴"}],"summary":"カスタムプロパティを登録すると、カスタムプロパティの振る舞い（許可される型、カスタムプロパティがその値を継承するかどうか、カスタムプロパティのデフォルト値は何か）をブラウザーに指示できます。 プロパティを登録するには、JavaScript と CSS の 2 つの方法があります。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using the CSS properties and values API","locale":"en-US","native":"English (US)"}],"source":{"folder":"ja/web/api/css_properties_and_values_api/guide","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/css_properties_and_values_api/guide/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/CSS_Properties_and_Values_API","title":"CSS Properties and Values API"},{"uri":"/ja/docs/Web/API/CSS_Properties_and_Values_API/guide","title":"CSS properties and values API の使用"}],"pageTitle":"CSS properties and values API の使用 - Web API | MDN","noIndexing":false}}