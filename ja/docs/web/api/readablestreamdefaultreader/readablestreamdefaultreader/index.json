{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"ReadableStreamDefaultReader.ReadableStreamDefaultReader()","mdn_url":"/ja/docs/Web/API/ReadableStreamDefaultReader/ReadableStreamDefaultReader","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/Streams_API\">Streams API</a></strong></li><li><strong><a href=\"/ja/docs/Web/API/ReadableStreamDefaultReader\"><code>ReadableStreamDefaultReader</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>コンストラクター</summary><ol><li><em><code>ReadableStreamDefaultReader()</code></em></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>プロパティ</summary><ol><li><a href=\"/ja/docs/Web/API/ReadableStreamDefaultReader/closed\"><code>closed</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>メソッド</summary><ol><li><a href=\"/ja/docs/Web/API/ReadableStreamDefaultReader/cancel\"><code>cancel()</code></a></li><li><a href=\"/ja/docs/Web/API/ReadableStreamDefaultReader/read\"><code>read()</code></a></li><li><a href=\"/ja/docs/Web/API/ReadableStreamDefaultReader/releaseLock\"><code>releaseLock()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Streams に関連するページ</summary><ol><li><a href=\"/ja/docs/Web/API/ByteLengthQueuingStrategy\"><code>ByteLengthQueuingStrategy</code></a></li><li><a href=\"/ja/docs/Web/API/CountQueuingStrategy\"><code>CountQueuingStrategy</code></a></li><li><a href=\"/ja/docs/Web/API/ReadableByteStreamController\"><code>ReadableByteStreamController</code></a></li><li><a href=\"/ja/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a></li><li><a href=\"/ja/docs/Web/API/ReadableStreamBYOBReader\"><code>ReadableStreamBYOBReader</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ReadableStreamBYOBRequest\"><code>ReadableStreamBYOBRequest</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/API/ReadableStreamDefaultController\"><code>ReadableStreamDefaultController</code></a></li><li><a href=\"/ja/docs/Web/API/Response/body\"><code>Response.body</code></a></li><li><a href=\"/ja/docs/Web/API/WritableStream\"><code>WritableStream</code></a></li><li><a href=\"/ja/docs/Web/API/WritableStreamDefaultController\"><code>WritableStreamDefaultController</code></a></li><li><a href=\"/ja/docs/Web/API/WritableStreamDefaultWriter\"><code>WritableStreamDefaultWriter</code></a></li><li><a href=\"/ja/docs/Web/API/fetch\"><code>fetch()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>ReadableStreamDefaultReader()</code></strong> コンストラクターは、<code>ReadableStreamDefaultReader</code> オブジェクトのインスタンスを作成して返します。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> 通常、このコンストラクターを手動で使用することはありません。 代わりに、<a href=\"/ja/docs/Web/API/ReadableStream/getReader\"><code>ReadableStream.getReader()</code></a>) メソッドを使用します。</p>\n</div>"}},{"type":"prose","value":{"id":"構文","title":"構文","isH3":false,"content":"<pre class=\"notranslate\">var readableStreamDefaultReader = new ReadableStreamDefaultReader(stream);\n</pre>"}},{"type":"prose","value":{"id":"パラメーター","title":"パラメーター","isH3":true,"content":"<dl>\n  <dt id=\"stream\">stream</dt>\n  <dd>\n    <p>読み取られる <a href=\"/ja/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a>。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"戻り値","title":"戻り値","isH3":true,"content":"<p><a href=\"/ja/docs/Web/API/ReadableStreamDefaultReader\"><code>ReadableStreamDefaultReader</code></a> オブジェクトのインスタンス。</p>"}},{"type":"prose","value":{"id":"例外","title":"例外","isH3":true,"content":"<dl>\n  <dt id=\"typeerror\">TypeError</dt>\n  <dd>\n    <p>指定された <code>stream</code> パラメーターは <a href=\"/ja/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> ではないか、別のリーダーによる読み取りのために既にロックされています。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":"<p>次の簡単な例では、<code>getReader()</code> を使用して作成した <a href=\"/ja/docs/Web/API/ReadableStreamDefaultReader\"><code>ReadableStreamDefaultReader</code></a> を使用して、以前に作成したカスタムの <code>ReadableStream</code> を読み取ります（完全なコードについては、<a href=\"https://mdn.github.io/dom-examples/streams/simple-random-stream/\" class=\"external\" rel=\" noopener\">単純なランダムストリームの例</a>を参照）。 各チャンクを順番に読み取り、ストリームの読み取りが完了するまで UI に出力します。 ストリームの読み取りが完了すると、再帰関数から戻り、ストリーム全体を UI の別の部分に出力します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">fetchStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> reader <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">getReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> charsReceived <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// read() は、値を受け取ったときに解決する promise を返します</span>\n  reader<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">processText</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> done<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 結果オブジェクトには2つのプロパティが含まれます。</span>\n    <span class=\"token comment\">// done  - ストリームがすべてのデータを既に提供している場合は true。</span>\n    <span class=\"token comment\">// value - 一部のデータ。 done が true の場合、常に undefined。</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stream complete\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      para<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// フェッチしたストリームの値は Uint8Array です</span>\n    charsReceived <span class=\"token operator\">+=</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> chunk <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> listItem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    listItem<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'Received '</span> <span class=\"token operator\">+</span> charsReceived <span class=\"token operator\">+</span> <span class=\"token string\">' characters so far. Current chunk = '</span> <span class=\"token operator\">+</span> chunk<span class=\"token punctuation\">;</span>\n    list2<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>listItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    result <span class=\"token operator\">+=</span> chunk<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// さらに読み、この関数を再度呼び出します</span>\n    <span class=\"token keyword\">return</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>processText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"仕様","title":"仕様","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>仕様</th>\n      <th>状態</th>\n      <th>コメント</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://streams.spec.whatwg.org/#default-reader-constructor\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">Streams<br><small lang=\"ja\">ReadableStreamDefaultReader() の定義</small></a></td>\n      <td><span class=\"spec-living\">現行の標準</span></td>\n      <td>初期定義</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"query":"api.ReadableStreamDefaultReader.ReadableStreamDefaultReader","dataURL":"/ja/docs/Web/API/ReadableStreamDefaultReader/ReadableStreamDefaultReader/bcd.json"}}],"toc":[{"text":"構文","id":"構文"},{"text":"例","id":"例"},{"text":"仕様","id":"仕様"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"}],"summary":"ReadableStreamDefaultReader() コンストラクターは、ReadableStreamDefaultReader オブジェクトのインスタンスを作成して返します。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"ReadableStreamDefaultReader()","locale":"en-US","native":"English (US)"},{"title":"ReadableStreamDefaultReader()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/readablestreamdefaultreader/readablestreamdefaultreader","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/readablestreamdefaultreader/readablestreamdefaultreader/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/ReadableStreamDefaultReader","title":"ReadableStreamDefaultReader"},{"uri":"/ja/docs/Web/API/ReadableStreamDefaultReader/ReadableStreamDefaultReader","title":"ReadableStreamDefaultReader.ReadableStreamDefaultReader()"}],"pageTitle":"ReadableStreamDefaultReader.ReadableStreamDefaultReader() - Web API | MDN","noIndexing":false}}