{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"バイナリデータの送信と受信","mdn_url":"/ja/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a></strong></li><li><strong><a href=\"/ja/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>コンストラクター</summary><ol><li><a href=\"/ja/docs/Web/API/XMLHttpRequest/XMLHttpRequest\"><code>XMLHttpRequest()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>プロパティ</summary><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ja/docs/Web/API/XMLHttpRequest/channel\"><code>channel</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ja/docs/Web/API/XMLHttpRequest/mozAnon\"><code>mozAnon</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ja/docs/Web/API/XMLHttpRequest/mozBackgroundRequest\"><code>mozBackgroundRequest</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ja/docs/Web/API/XMLHttpRequest/mozSystem\"><code>mozSystem</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XMLHttpRequest/msCaching\"><code>msCaching</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/API/XMLHttpRequest/readyState\"><code>readyState</code></a></li><li><a href=\"/ja/docs/Web/API/XMLHttpRequest/response\"><code>response</code></a></li><li><a href=\"/ja/docs/Web/API/XMLHttpRequest/responseText\"><code>responseText</code></a></li><li><a href=\"/ja/docs/Web/API/XMLHttpRequest/responseType\"><code>responseType</code></a></li><li><a href=\"/ja/docs/Web/API/XMLHttpRequest/responseURL\"><code>responseURL</code></a></li><li><a href=\"/ja/docs/Web/API/XMLHttpRequest/responseXML\"><code>responseXML</code></a></li><li><a href=\"/ja/docs/Web/API/XMLHttpRequest/status\"><code>status</code></a></li><li><a href=\"/ja/docs/Web/API/XMLHttpRequest/statusText\"><code>statusText</code></a></li><li><a href=\"/ja/docs/Web/API/XMLHttpRequest/timeout\"><code>timeout</code></a></li><li><a href=\"/ja/docs/Web/API/XMLHttpRequest/upload\"><code>upload</code></a></li><li><a href=\"/ja/docs/Web/API/XMLHttpRequest/withCredentials\"><code>withCredentials</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>メソッド</summary><ol><li><a href=\"/ja/docs/Web/API/XMLHttpRequest/abort\"><code>abort()</code></a></li><li><a href=\"/ja/docs/Web/API/XMLHttpRequest/getAllResponseHeaders\"><code>getAllResponseHeaders()</code></a></li><li><a href=\"/ja/docs/Web/API/XMLHttpRequest/getResponseHeader\"><code>getResponseHeader()</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XMLHttpRequest/msCachingEnabled\"><code>msCachingEnabled()</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/API/XMLHttpRequest/open\"><code>open()</code></a></li><li><a href=\"/ja/docs/Web/API/XMLHttpRequest/overrideMimeType\"><code>overrideMimeType()</code></a></li><li><a href=\"/ja/docs/Web/API/XMLHttpRequest/send\"><code>send()</code></a></li><li><a href=\"/ja/docs/Web/API/XMLHttpRequest/setRequestHeader\"><code>setRequestHeader()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>イベント</summary><ol><li><a href=\"/ja/docs/Web/API/XMLHttpRequest/abort_event\"><code>abort</code></a></li><li><a href=\"/ja/docs/Web/API/XMLHttpRequest/error_event\"><code>error</code></a></li><li><a href=\"/ja/docs/Web/API/XMLHttpRequest/load_event\"><code>load</code></a></li><li><a href=\"/ja/docs/Web/API/XMLHttpRequest/loadend_event\"><code>loadend</code></a></li><li><a href=\"/ja/docs/Web/API/XMLHttpRequest/loadstart_event\"><code>loadstart</code></a></li><li><a href=\"/ja/docs/Web/API/XMLHttpRequest/progress_event\"><code>progress</code></a></li><li><a href=\"/ja/docs/Web/API/XMLHttpRequest/readystatechange_event\"><code>readystatechange</code></a></li><li><a href=\"/ja/docs/Web/API/XMLHttpRequest/timeout_event\"><code>timeout</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>継承</summary><ol><li><a href=\"/ja/docs/Web/API/XMLHttpRequestEventTarget\"><code>XMLHttpRequestEventTarget</code></a></li><li><a href=\"/ja/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>XMLHttpRequest に関連するページ</summary><ol><li><a href=\"/ja/docs/Web/API/FormData\"><code>FormData</code></a></li><li><a href=\"/ja/docs/Web/API/ProgressEvent\"><code>ProgressEvent</code></a></li><li><a href=\"/ja/docs/Web/API/XMLHttpRequestEventTarget\"><code>XMLHttpRequestEventTarget</code></a></li><li><a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>XMLHttpRequestUpload</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":"javascript_型付き配列を使ったバイナリデータの受信","title":"JavaScript 型付き配列を使ったバイナリデータの受信","isH3":false,"content":"<p>XMLHttpRequest オブジェクトの <code>responseType</code> プロパティで、サーバーに期待する応答の種類を変更することができます。設定可能な値は空文字列 (既定), <code>\"arraybuffer\"</code>, <code>\"blob\"</code>, <code>\"document\"</code>, <code>\"json\"</code>, <code>\"text\"</code> です。 <code>response</code> プロパティにはエンティティの本体が <code>responseType</code> に応じて <code>ArrayBuffer</code>, <code>Blob</code>, <code>Document</code>, <code>JSON</code> または文字列で格納されます。要求が不完全であったり成功しなかった場合は <code>null</code> になります。</p>\n<p>このサンプルでは画像をバイナリファイルとして読み込み、生のバイト列から８ビット符号なし整数値の配列を作成します。なお、これは画像をデコードしてピクセルを読み取ることは行いません。そのためには <a href=\"https://github.com/devongovett/png.js/\" class=\"external\" rel=\" noopener\">png decoding library</a> が必要になるでしょう。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> oReq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/myfile.png\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noReq<span class=\"token punctuation\">.</span>responseType <span class=\"token operator\">=</span> <span class=\"token string\">\"arraybuffer\"</span><span class=\"token punctuation\">;</span>\n\noReq<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">oEvent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> arrayBuffer <span class=\"token operator\">=</span> oReq<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">;</span> <span class=\"token comment\">// メモ: oReq.responseText ではない</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arrayBuffer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> byteArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>arrayBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> byteArray<span class=\"token punctuation\">.</span>byteLength<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// do something with each byte in the array</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>上記の方法の代わりに <a href=\"/ja/docs/Web/API/Blob\"><code>Blob</code></a> インタフェースを利用して arraybuffer データから直接 <code>Blob</code> を構築します｡</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> oReq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/myfile.png\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noReq<span class=\"token punctuation\">.</span>responseType <span class=\"token operator\">=</span> <span class=\"token string\">\"blob\"</span><span class=\"token punctuation\">;</span>\n\noReq<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">oEvent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> blob <span class=\"token operator\">=</span> oReq<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"古いブラウザーでのバイナリデータの受信","title":"古いブラウザーでのバイナリデータの受信","isH3":false,"content":"<p>下に示す <code>load_binary_resource()</code> 関数は、指定した URL からロードしたバイナリデータを関数の呼び元に返します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">load_binary_resource</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> req <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  req<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//XHR binary charset opt by Marcus Granado 2006 [http://mgran.blogspot.com]</span>\n  req<span class=\"token punctuation\">.</span><span class=\"token function\">overrideMimeType</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text\\/plain; charset=x-user-defined'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  req<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>status <span class=\"token operator\">!=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> req<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>マジックは５行目で、 MIME タイプを上書きしてブラウザーに強制的に、ユーザー定義の文字セットを使用したプレインテキストとして扱わせます。これにより、ブラウザーはこれを解釈せず、未処理のままバイト列を通します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> filestream <span class=\"token operator\">=</span> <span class=\"token function\">load_binary_resource</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> abyte <span class=\"token operator\">=</span> filestream<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// throw away high-order byte (f7)</span>\n</code></pre></div>\n<p>上記のサンプルでは、ロードしたバイナリデータ内のオフセット <code>x</code> のバイトを取得します。 <code>x</code> の有効範囲は 0 から <code>filestream.length-1</code> です。</p>\n<p>詳細な説明は <a href=\"http://mgran.blogspot.com/2006/08/downloading-binary-streams-with.html\" class=\"external\" rel=\" noopener\">downloading binary streams with XMLHttpRequest</a> を見て下さい。また <a href=\"/ja/docs/Code_snippets/Downloading_Files\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">downloading files</a> も見て下さい。</p>"}},{"type":"prose","value":{"id":"バイナリデータの送信","title":"バイナリデータの送信","isH3":false,"content":"<p>XMLHttpRequest の <code>send</code> メソッドが拡張され、 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_objects/ArrayBuffer\"><code>ArrayBuffer</code></a>, <a href=\"/ja/docs/Web/API/Blob\"><code>Blob</code></a>, または <a href=\"/ja/docs/Web/API/File\"><code>File</code></a> オブジェクトを受け付ける事でバイナリデータの送信が容易になりました.</p>\n<p>続くサンプルはその場で作ったテキストファイルを <code>POST</code> メソッドで \"file\" をサーバーに送信します。このサンプルはプレインテキストを使っていますが、代わりにデータがバイナリファイルだとイメージする事も出来ます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> oReq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noReq<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">oEvent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Uploaded.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'abc123'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/plain'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"バイナリデータとして型付き配列を送信","title":"バイナリデータとして型付き配列を送信","isH3":false,"content":"<p>同等にバイナリデータとして JavaScript の型付き配列を送信することもできます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> longInt8View <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>myArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// いくらかのデータを作成</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span> longInt8View<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  longInt8View<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">%</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>myArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これは 8 ビット整数の 512 バイトの配列を構築して送信します。勿論、好きな任意のバイナリデータで使えます。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> <strong>メモ:</strong> XMLHttpRequest を使った <a href=\"/ja/docs/Web/JavaScript/Reference/Global_objects/ArrayBuffer\"><code>ArrayBuffer</code></a> オブジェクトの送信サポートは Gecko 9.0 (Firefox 9.0 / Thunderbird 9.0 / SeaMonkey 2.6)で追加されました。<strong>他のブラウザーのサポート情報をここに追記して下さい。</strong></p>\n</div>"}},{"type":"prose","value":{"id":"フォーム送信とファイルアップロード","title":"フォーム送信とファイルアップロード","isH3":false,"content":"<p><a href=\"/ja/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#submitting_forms_and_uploading_files\">この節</a>をお読み下さい。</p>"}},{"type":"prose","value":{"id":"firefox_独自のサンプル","title":"Firefox 独自のサンプル","isH3":false,"content":"<p>このサンプルでは非同期にバイナリコンテンツを送信するのに <code>POST</code> メソッドと Firefox にある非標準の <code>sendAsBinary()</code> を使います。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> req <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// set headers and mime-type appropriately</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Length\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">741</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">sendAsBinary</span><span class=\"token punctuation\">(</span>aBody<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>4 行目で Content-Length ヘッダに 741 をセットするのは、データが 741 バイト長である事を示します。送信データの実際のサイズに応じてこの値を変更する必要があります。</p>\n<p>５行目では <code>sendAsBinary()</code> メソッドを使ってリクエストをはじめます。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> <strong>メモ:</strong> この <code>sendAsBinary</code> メソッドは標準外であり、 Gecko 31 (Firefox 31 / Thunderbird 31 / SeaMonkey 2.28) で非推奨扱いになって、まもなく削除されるでしょう。上で説明したように、標準の <code>send(Blob data)</code> メソッドを使用することができます。</p>\n</div>\n<p>また、<code>nsIFileInputStream</code> のインスタンスの <a href=\"/ja/docs/Web/API/XMLHttpRequest#send()\" title=\"XMLHttpRequest#send()\"><code>send()</code></a> を通す事でバイナリコンテンツを送信できます。この場合は、あなた自身が <code>Content-Length</code> ヘッダセットしてはならず、この情報はストリームから自動的に取得されます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// ファイルからストリームを作成する。</span>\n<span class=\"token keyword\">var</span> stream <span class=\"token operator\">=</span> Components<span class=\"token punctuation\">.</span>classes<span class=\"token punctuation\">[</span><span class=\"token string\">\"@mozilla.org/network/file-input-stream;1\"</span><span class=\"token punctuation\">]</span>\n                       <span class=\"token punctuation\">.</span><span class=\"token function\">createInstance</span><span class=\"token punctuation\">(</span>Components<span class=\"token punctuation\">.</span>interfaces<span class=\"token punctuation\">.</span>nsIFileInputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstream<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> <span class=\"token number\">0x04</span> <span class=\"token operator\">|</span> <span class=\"token number\">0x08</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0644</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x04</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// file is an nsIFile instance</span>\n\n<span class=\"token comment\">// ファイルの MIME タイプを特定しようとする</span>\n<span class=\"token keyword\">var</span> mimeType <span class=\"token operator\">=</span> <span class=\"token string\">\"text\\/plain\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> mimeService <span class=\"token operator\">=</span> Components<span class=\"token punctuation\">.</span>classes<span class=\"token punctuation\">[</span><span class=\"token string\">\"@mozilla.org/mime;1\"</span><span class=\"token punctuation\">]</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">getService</span><span class=\"token punctuation\">(</span>Components<span class=\"token punctuation\">.</span>interfaces<span class=\"token punctuation\">.</span>nsIMIMEService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  mimeType <span class=\"token operator\">=</span> mimeService<span class=\"token punctuation\">.</span><span class=\"token function\">getTypeFromFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// file is an nsIFile instance</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>oEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* eat it; just use text/plain */</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 送信</span>\n<span class=\"token keyword\">var</span> req <span class=\"token operator\">=</span> Components<span class=\"token punctuation\">.</span>classes<span class=\"token punctuation\">[</span><span class=\"token string\">\"@mozilla.org/xmlextras/xmlhttprequest;1\"</span><span class=\"token punctuation\">]</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">createInstance</span><span class=\"token punctuation\">(</span>Components<span class=\"token punctuation\">.</span>interfaces<span class=\"token punctuation\">.</span>nsIXMLHttpRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'PUT'</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* synchronous! */</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> mimeType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}}],"toc":[{"text":"JavaScript 型付き配列を使ったバイナリデータの受信","id":"javascript_型付き配列を使ったバイナリデータの受信"},{"text":"古いブラウザーでのバイナリデータの受信","id":"古いブラウザーでのバイナリデータの受信"},{"text":"バイナリデータの送信","id":"バイナリデータの送信"},{"text":"バイナリデータとして型付き配列を送信","id":"バイナリデータとして型付き配列を送信"},{"text":"フォーム送信とファイルアップロード","id":"フォーム送信とファイルアップロード"},{"text":"Firefox 独自のサンプル","id":"firefox_独自のサンプル"}],"summary":"XMLHttpRequest オブジェクトの responseType プロパティで、サーバーに期待する応答の種類を変更することができます。設定可能な値は空文字列 (既定), \"arraybuffer\", \"blob\", \"document\", \"json\", \"text\" です。 response プロパティにはエンティティの本体が responseType に応じて ArrayBuffer, Blob, Document, JSON または文字列で格納されます。要求が不完全であったり成功しなかった場合は null になります。","popularity":0.0009,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Sending and Receiving Binary Data","locale":"en-US","native":"English (US)"},{"title":"Отправка и получение бинарных данных","locale":"ru","native":"Русский"},{"title":"发送和接收二进制数据","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/xmlhttprequest/sending_and_receiving_binary_data","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/xmlhttprequest/sending_and_receiving_binary_data/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/XMLHttpRequest","title":"XMLHttpRequest"},{"uri":"/ja/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data","title":"バイナリデータの送信と受信"}],"pageTitle":"バイナリデータの送信と受信 - Web API | MDN","noIndexing":false}}