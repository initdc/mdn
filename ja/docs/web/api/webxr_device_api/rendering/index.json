{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"レンダリングと WebXR フレームアニメーションコールバック","mdn_url":"/ja/docs/Web/API/WebXR_Device_API/Rendering","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/WebXR_Device_API\">WebXR Device API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>ガイド</summary><ol><li><a href=\"/ja/docs/Web/API/WebXR_Device_API/Fundamentals\">Fundamentals of WebXR</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>インターフェイス</summary><ol><li><a href=\"/ja/docs/Web/API/XRAnchor\"><code>XRAnchor</code></a></li><li><a href=\"/ja/docs/Web/API/XRBoundedReferenceSpace\"><code>XRBoundedReferenceSpace</code></a></li><li><a href=\"/ja/docs/Web/API/XRCPUDepthInformation\"><code>XRCPUDepthInformation</code></a></li><li><a href=\"/ja/docs/Web/API/XRDepthInformation\"><code>XRDepthInformation</code></a></li><li><a href=\"/ja/docs/Web/API/XRFrame\"><code>XRFrame</code></a></li><li><a href=\"/ja/docs/Web/API/XRInputSource\"><code>XRInputSource</code></a></li><li><a href=\"/ja/docs/Web/API/XRInputSourceArray\"><code>XRInputSourceArray</code></a></li><li><a href=\"/ja/docs/Web/API/XRInputSourceEvent\"><code>XRInputSourceEvent</code></a></li><li><a href=\"/ja/docs/Web/API/XRInputSourcesChangeEvent\"><code>XRInputSourcesChangeEvent</code></a></li><li><a href=\"/ja/docs/Web/API/XRPose\"><code>XRPose</code></a></li><li><a href=\"/ja/docs/Web/API/XRReferenceSpace\"><code>XRReferenceSpace</code></a></li><li><a href=\"/ja/docs/Web/API/XRReferenceSpaceEvent\"><code>XRReferenceSpaceEvent</code></a></li><li><a href=\"/ja/docs/Web/API/XRRenderState\"><code>XRRenderState</code></a></li><li><a href=\"/ja/docs/Web/API/XRRigidTransform\"><code>XRRigidTransform</code></a></li><li><a href=\"/ja/docs/Web/API/XRSession\"><code>XRSession</code></a></li><li><a href=\"/ja/docs/Web/API/XRSessionEvent\"><code>XRSessionEvent</code></a></li><li><a href=\"/ja/docs/Web/API/XRSpace\"><code>XRSpace</code></a></li><li><a href=\"/ja/docs/Web/API/XRSystem\"><code>XRSystem</code></a></li><li><a href=\"/ja/docs/Web/API/XRView\"><code>XRView</code></a></li><li><a href=\"/ja/docs/Web/API/XRViewerPose\"><code>XRViewerPose</code></a></li><li><a href=\"/ja/docs/Web/API/XRViewport\"><code>XRViewport</code></a></li><li><a href=\"/ja/docs/Web/API/XRWebGLBinding\"><code>XRWebGLBinding</code></a></li><li><a href=\"/ja/docs/Web/API/XRWebGLDepthInformation\"><code>XRWebGLDepthInformation</code></a></li><li><a href=\"/ja/docs/Web/API/XRWebGLLayer\"><code>XRWebGLLayer</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>プロパティ</summary><ol><li><a href=\"/ja/docs/Web/API/Navigator/xr\"><code>Navigator.xr</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>メソッド</summary><ol><li><a href=\"/ja/docs/Web/API/WebGLRenderingContext/makeXRCompatible\"><code>WebGLRenderingContext.makeXRCompatible()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>イベント</summary><ol><li><a href=\"/ja/docs/Web/API/XRReferenceSpace/reset_event\"><code>XRReferenceSpace</code>: <code>reset</code></a></li><li><a href=\"/ja/docs/Web/API/XRSession/end_event\"><code>XRSession</code>: <code>end</code></a></li><li><a href=\"/ja/docs/Web/API/XRSession/inputsourceschange_event\"><code>XRSession</code>: <code>inputsourceschange</code></a></li><li><a href=\"/ja/docs/Web/API/XRSession/select_event\"><code>XRSession</code>: <code>select</code></a></li><li><a href=\"/ja/docs/Web/API/XRSession/selectend_event\"><code>XRSession</code>: <code>selectend</code></a></li><li><a href=\"/ja/docs/Web/API/XRSession/selectstart_event\"><code>XRSession</code>: <code>selectstart</code></a></li><li><a href=\"/ja/docs/Web/API/XRSession/visibilitychange_event\"><code>XRSession</code>: <code>visibilitychange</code></a></li><li><a href=\"/ja/docs/Web/API/XRSystem/devicechange_event\"><code>XRSystem</code>: <code>devicechange</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>WebXR 環境をセットアップし、進行中の XR 環境セッションを表す <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRSession\"><code>XRSession</code> <small>(en-US)</small></a> を作成したら、レンダリングのためにシーンのフレームを XR デバイスに提供する必要があります。 この記事では、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRSession\"><code>XRSession</code> <small>(en-US)</small></a> を使用して各フレームを表す <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRFrame\"><code>XRFrame</code> <small>(en-US)</small></a> オブジェクトを取得し、それを使用して、XR デバイスに配信するためのフレームバッファーを準備し、レンダリングループで XR シーンのフレームをデバイスに駆動するプロセスについて説明します。</p>\n<p>仮想環境をレンダリングする前に、<a href=\"/en-US/docs/Web/API/XRSystem/requestSession\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">navigator.xr.requestSession() (en-US)</a> メソッドを使用して <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRSession\"><code>XRSession</code> <small>(en-US)</small></a> を作成することにより、WebXR セッションを確立する必要があります。 また、セッションをフレームバッファーに関連付けて、他のセットアップタスクを実行する必要もあります。 これらのセットアップタスクについては、<a href=\"/ja/docs/Web/API/WebXR_Device_API/Startup_and_shutdown\">WebXR セッションの起動と停止</a>の記事で説明されています。</p>"}},{"type":"prose","value":{"id":"レンダラーの準備","title":"レンダラーの準備","isH3":false,"content":"<p>XR セッションをセットアップし、WebGL フレームバッファーを接続し、WebGL をシーンをレンダリングするために必要なデータで準備したら、レンダラーをセットアップして実行を開始できます。 これは、描画する参照空間を取得することから始まります。 その原点と方向は、ビューアーの開始位置と視線方向に設定します。 それが手に入ったら、次にシーンをレンダリングするためにフレームバッファーが必要になったときにブラウザーがあなたのレンダリング関数を呼び出すように要求します。 これは、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRSession\"><code>XRSession</code> <small>(en-US)</small></a> メソッドの <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRSession/requestAnimationFrame\"><code>requestAnimationFrame()</code> <small>(en-US)</small></a> を呼び出すことによって行います。</p>\n<p>したがって、レンダラーの手はじめは次のようになります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> worldRefSpace<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">runXR</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">xrSession</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  worldRefSpace <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> xrSession<span class=\"token punctuation\">.</span><span class=\"token function\">requestReferenceSpace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"immersive-vr\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>worldRefSpace<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    viewerRefSpace <span class=\"token operator\">=</span> worldRefSpace<span class=\"token punctuation\">.</span><span class=\"token function\">getOffsetReferenceSpace</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">XRRigidTransform</span><span class=\"token punctuation\">(</span>viewerStartPosition<span class=\"token punctuation\">,</span> viewerStartOrientation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    animationFrameRequestID <span class=\"token operator\">=</span> xrSession<span class=\"token punctuation\">.</span><span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>myDrawFrame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>没入型世界の参照空間を取得した後、これは、その位置と方向を表す <a href=\"/ja/docs/Web/API/XRRigidTransform\"><code>XRRigidTransform</code></a> を作成し、<a href=\"/ja/docs/Web/API/XRReferenceSpace\"><code>XRReferenceSpace</code></a> のメソッド <a href=\"/ja/docs/Web/API/XRReferenceSpace/getOffsetReferenceSpace\" title=\"getOffsetReferenceSpace()\"><code>getOffsetReferenceSpace()</code></a> を呼び出すことにより、ビューアーの位置と方向を表すオフセット参照空間を作成します。</p>\n<p>次に、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRSession\"><code>XRSession</code> <small>(en-US)</small></a> のメソッド <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRSession/requestAnimationFrame\"><code>requestAnimationFrame()</code> <small>(en-US)</small></a> を呼び出して最初のアニメーションフレームをスケジュールし、フレームをレンダリングするためのコールバック関数 <code>myDrawFrame()</code> を提供します。</p>\n<p>このコードにはループがないことに注意してください！ 代わりに、フレームレンダリングコード（この場合は <code>myDrawFrame()</code> という関数）が、もう一度 <code>requestAnimationFrame()</code> を呼び出して別のフレームを描画する時刻をスケジュールします。</p>"}},{"type":"prose","value":{"id":"リフレッシュレートとフレームレート","title":"リフレッシュレートとフレームレート","isH3":false,"content":"<p>画面が最後にリフレッシュされてから <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRSession\"><code>XRSession</code> <small>(en-US)</small></a> のメソッド <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRSession/requestAnimationFrame\"><code>requestAnimationFrame()</code> <small>(en-US)</small></a> を呼び出したとすると、ブラウザーは、アプリまたはサイトウィンドウを再描画する準備ができるたびにフレームレンダリングコールバックを呼び出します。 このコンテキストでは、「再描画」とは、画面に表示されるコンテンツが、DOM およびその中の要素が現時点で提示しようとしているものと一致することを保証するプロセスを意味します。</p>"}},{"type":"prose","value":{"id":"ハードウェア垂直リフレッシュレート","title":"ハードウェア垂直リフレッシュレート","isH3":true,"content":"<p>ブラウザーは、WebXR コンテンツが表示されている <a href=\"/ja/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a> をリフレッシュする準備ができると、フレームレンダリングコールバックを呼び出します。 このコールバックは、指定されたタイムスタンプと、モデルやテクスチャーなどの他の関連データ、およびアプリケーションの状態を使用して、指定された時刻に表示されるように、シーンを WebGL バックバッファーにレンダリングします。 コールバックが戻ると、ブラウザーは最後に画面がリフレッシュされてから変更されたものと共に、そのバックバッファーをディスプレイまたは XR デバイスに転送します。</p>\n<p>歴史的に、ディスプレイは毎秒 60 回リフレッシュされています。 これは、タイミングを合わせるために、米国では 1 秒あたり 60 回（ヨーロッパでは 50 回）循環する AC 配電網の電流フロー波形を使用した初期のディスプレイによるものです。 次のように、このことはいくつかの異なる名前で示されていますが、それらはすべて同等またはほぼ同じです。</p>\n<ul>\n  <li>リフレッシュレート（Refresh rate）</li>\n  <li>垂直リフレッシュレート（Vertical refresh rate）</li>\n  <li>垂直帰線消去レート（Vertical blanking rate、VBL）</li>\n  <li>垂直同期レート（Vertical sync rate）</li>\n</ul>\n<p>他にも同様の用語が使用されていますが、それが何と呼ばれるかに関係なく、適用される測定単位はヘルツ（Hz）です。 1 秒あたり 60 回リフレッシュするディスプレイには、60 Hz のリフレッシュレートがあります。 つまり、1 秒間に表示できるフレームの最大数は 60 です。 それを超える 1 秒あたりのフレーム数に関係なく、1 秒の間に 60 フレームしか画面に表示されません。</p>\n<p>ただし、すべてのディスプレイが 60 Hz で動作するわけではありません。 最近では、より高性能のディスプレイがはるかに高いリフレッシュレートを使用し始めています。 例えば、120 Hz、つまり 120 フレーム/秒のディスプレイは、ますます一般的になっています。 ブラウザーは常にディスプレイと同じレートでリフレッシュを試みます。 つまり、一部のコンピューターでは、コールバックは 1 秒あたり最大 60 回実行されますが、他のコンピューターでは、フレームレートによって異なり 1 秒あたり 90 または 120 回、あるいはそれ以上呼び出される場合があります。</p>"}},{"type":"prose","value":{"id":"各フレームのレンダリングに利用できる時間","title":"各フレームのレンダリングに利用できる時間","isH3":true,"content":"<p>これにより、フレーム間で利用可能なほとんどの時間を使用することが重要になります。 ユーザーのデバイスが 60 Hz のディスプレイを使用している場合、コールバックは 1 秒あたり最大 60 回呼び出され、それよりも頻繁に呼び出されることはないので、確実にできることをすることが目標です。 これを実現するには、メインスレッド外で可能な限り実行し、フレームレンダリングのコールバックをできるだけ効率的にします。 以下の図は、時間の 60 Hz ブロックへの分割を示しています。 各ブロックは、少なくとも部分的にシーンのレンダリングに使用されています。</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/WebXR_Device_API/Rendering/frames-and-refresh-rate.svg\" alt=\"フレーム期間あたりのレンダラー実行時間\" width=\"881\" height=\"179\" loading=\"lazy\">\n</p>\n<p>コンピュータのビジー状態が増すにつれて、コールバックをフレームごとに正確に呼び出すことができなくなり、フレームをスキップしなければならない場合があるため、これは重要です。 これを<strong>コマ落ち</strong>（dropping frames）と呼びます。 これは、レンダリングが遅延したため、またはレンダリング自体に使用可能な時間よりも長い時間がかかったために、フレームのレンダリングにかかる時間がフレーム間で使用可能な時間を超えると発生します。</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/WebXR_Device_API/Rendering/dropped-frames-timing.svg\" alt=\"フレーム期間あたりのレンダラー実行時間\" width=\"881\" height=\"198\" loading=\"lazy\">\n</p>\n<p>上の図では、フレーム 3 がペイントされる予定になるまでフレーム 2 がレンダリングを完了しなかったため、フレーム 3 はコマ落ちしています。 次に描画されるフレームはフレーム 4 になります。 これは、レンダリングコールバックに渡されるタイムスタンプが役立つもう 1 つの理由です。 フレーム番号ではなく時間に基づいてシーンを構成することにより、レンダリングされたフレームが遅れることなく、期待したものと一致することを保証できます。</p>\n<p>フレームがコマ落ちすると、影響を受ける表示領域のコンテンツは、フレームループを通過しても変更されません。 そのため、ときどきフレームがコマ落ちすることは通常あまり目立ちませんが、頻繁に発生し始めた場合（特に、非常に短い時間に複数のフレームがコマ落ちした場合）は、不快になり、ディスプレイが使用できなくなる可能性があります。</p>\n<p>幸い、フレーム間で使用できる時間を <code>1/refreshRate</code> 秒として簡単に計算できます。 つまり、1 をディスプレイのリフレッシュレートで除算します。 結果の値は、フレームがコマ落ちしないようにするために、各フレームをレンダリングするのに使用できる時間です。 例えば、60 Hz のディスプレイでは、1 フレームのレンダリングに 1/60 秒、つまり 0.0166667 秒が使用されます。 また、デバイスのリフレッシュレートが 120 Hz の場合、コマ落ちを避けたい場合、各フレームをレンダリングするのに必要な時間は 0.00883333 秒しかありません。</p>\n<p>ただし、ハードウェアが実際には 120 Hz である場合でも、毎秒 60 回リフレッシュするだけで十分であり、通常はそれをターゲットとすることをお勧めします。 60 FPS はすでに、ほとんどの人がアニメーションが単なる高速の一連の静止画像ではないことを簡単に検出できるポイントを超えています。 つまり、判別がつかないときは、ディスプレイが 60 Hz でリフレッシュされていると想定できます。 コードが適切に記述されている限り、すべてが問題なく動作します。</p>"}},{"type":"prose","value":{"id":"レンダラーのパフォーマンスの問題","title":"レンダラーのパフォーマンスの問題","isH3":true,"content":"<p>明らかに、フレームごとにシーンをレンダリングする時間はほとんどありません。 それだけでなく、レンダラー自体がその時間よりも長く実行されると、フレームがコマ落ちするだけでなく、その時間が完全に無駄になり、他のコードがそのフレームに対してまったく実行されなくなる可能性があります。</p>\n<p>それだけでなく、レンダリングが垂直リフレッシュ境界をまたぐ場合、<strong>ティアリング</strong>効果（tearing effect）が発生する可能性があります。 ティアリングは、前のフレームがまだ画面に描画されている間にディスプレイハードウェアが次のリフレッシュサイクルを開始すると発生します。 その結果、画面の上部に新しいフレームが表示されますが、フレームの下部には、前のフレームと場合によってはその前のフレームの組み合わせが表示される視覚効果となります。</p>\n<p>したがって、あなたの使命は、利用可能な時間を超過したり、コマ落ちやメインスレッドの過度の悪用を引き起こしたりしないように、コードを十分にタイトかつ軽量に保つことです。</p>\n<p>これらの理由により、レンダラーがかなり小さくて軽量で、ほとんど何もすることがないのでない限り、ブラウザーが他の処理を行う間に次のフレームを計算できるように、できる限りすべてをワーカーにオフロードすることを検討する必要があります。 フレームが実際に呼び出される前に計算とデータを準備するだけで、サイトまたはアプリをより効率的にレンダリングし、メインスレッドのパフォーマンスを向上させ、一般的にユーザーエクスペリエンスを向上させることができます。</p>\n<p>幸い、レンダリングのニーズが特に重い場合は、影響をさらに減らし、パフォーマンスを最適化するために使用できるいくつかのトリックがあります。 <a href=\"/en-US/docs/Web/API/WebXR_Device_API/Performance\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">WebXR パフォーマンスガイド (en-US)</a>を参照して、パフォーマンスをできる限り向上させるための推奨事項とヒントを確認してください。</p>"}},{"type":"prose","value":{"id":"webxr_フレーム","title":"WebXR フレーム","isH3":false,"content":"<p>フレームレンダリングコールバック関数は、2 つのパラメーターを入力として受け取ります。 フレームが対応する時刻と、その時刻のシーンの状態を記述する <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRFrame\"><code>XRFrame</code> <small>(en-US)</small></a> オブジェクトです。</p>"}},{"type":"prose","value":{"id":"3d_の光学","title":"3D の光学","isH3":true,"content":"<p>私たちが 2 つの目を持つには理由があります。 2 つの目を持つことで、それぞれが本質的にわずかに異なる角度から世界を見ることができます。 それらは既知の固定距離だけ離れているため、私たちの脳は基本的な幾何学と三角法を実行し、その情報から 3D の実在の本質を理解できます。 また、遠近法（perspective）、大きさの違い、さらには通常、3 番目の次元の詳細を理解するために物事がどのように見えるかについての理解も利用します。 これらの要因は、とりわけ、私たちの奥行き知覚（<a href=\"https://en.wikipedia.org/wiki/Depth_perception\" class=\"external\" rel=\" noopener\">depth perception</a>）の源です。</p>\n<p>グラフィックスをレンダリングするときに 3 次元の幻想を作成するには、これらの要因をできるだけ多くシミュレートする必要があります。 これらをシミュレートするほど、そして正確に行うほど、人間の脳をだまして 3D で画像を知覚させることができます。 XR の利点は、古典的な単眼テクニックを使用して 3D グラフィックス（遠近法、大きさ、シミュレートされた視差）をシミュレートできるだけでなく、アニメーションのフレームごとに、各目につき 1 回ずつシーンを 2 回レンダリングすることで、両眼視（つまり、2 つの目を使用した視覚）をシミュレートできることです。</p>\n<p>典型的な人間の瞳孔間距離（<a href=\"https://en.wikipedia.org/wiki/Pupillary_distance\" class=\"external\" rel=\" noopener\">pupillary distance</a>、瞳孔の中心間の距離）は、54 〜 74 ミリメートル（0.054 〜 0.074 メートル）です。 したがって、ビューアーの頭の中心が <code>[0.0, 2.0, 0.0]</code>（水平方向の空間の中心で地上レベルの約 2 メートル）にある場合、まず <code>[-0.032, 2.0, 0.0]</code>（中心から左に 32 mm）からシーンをレンダリングし、次に <code>[0.032, 2.0, 0.0]</code>（中心から右に 32 mm）で再びレンダリングする必要があります。 このようにして、ビューアーの目の位置を人間の平均瞳孔距離 64 mm に配置します。</p>\n<p>その距離（または XR システムが使用するように構成されている瞳孔間距離）は、網膜歪覚（各網膜の見え方の違い）と視差効果によって脳がオブジェクトまでの距離とオブジェクトの奥行きを計算できるようにするために、私たちの心に十分な違いを見せるのに十分です。 これにより、網膜が 2D 表面にすぎないにもかかわらず、3 次元を知覚できるようになります。</p>\n<p>これは下の図に示されています。 下の図では、それぞれの目がビューアーの真正面にあるさいころをどのように認識するかを示しています。 この図では、説明のために一部の点で効果を誇張していますが、概念は同じです。 各目は、境界が目の前の円弧を形成する領域を見ます。 それぞれの目は頭の中心線の片側または反対側にオフセットされ、それぞれの目はほぼ同じ視野を見るので、その結果、それぞれの目は、その前にある世界のわずかに異なる部分を別の角度から見ることができます。</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/WebXR_Device_API/Rendering/binocular-vision.svg\" alt=\"両眼視のしくみを示す図\" width=\"550\" height=\"720\" loading=\"lazy\">\n</p>\n<p>左目はさいころを中央から少し左に見、右目はさいころを中央から少し右に見ます。 その結果、左目はオブジェクトの左側が少しだけ見え、右側が少し見えません。 逆も同様です。 これらの 2 つの画像は網膜に焦点が合わせられ、結果の信号は視神経を介して後頭葉の後部にある脳の視覚皮質に送信されます。</p>\n<p>脳はこれらの信号を左目と右目から受け取り、ビューアーの脳内に世界の単一の統一された 3D 画像を構成し、その画像を見ます。 また、左目と右目で見られるものの違いにより、脳はオブジェクトの奥行きや大きさなどに関する多くの情報を推測できます。 推測された奥行き情報を、遠近法、影、これらの関係の意味の記憶などの他の手がかりと組み合わせることで、私たちの周りの世界について多くを理解することができます。</p>"}},{"type":"prose","value":{"id":"フレーム、ポーズ、ビュー、フレームバッファー","title":"フレーム、ポーズ、ビュー、フレームバッファー","isH3":true,"content":"<p>シーンのある瞬間の状態を表す <code>XRFrame</code> を取得したら、ビューアーを基準にしてシーン内のオブジェクトの位置を決定し、レンダリングできるようにする必要があります。 参照空間に対するビューアーの位置と方向は、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRFrame\"><code>XRFrame</code> <small>(en-US)</small></a> のメソッド <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRFrame/getViewerPose\"><code>getViewerPose()</code> <small>(en-US)</small></a> を呼び出して取得した <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRViewerPose\"><code>XRViewerPose</code> <small>(en-US)</small></a> で表されます。</p>\n<p><code>XRFrame</code> は、あなたの世界内のオブジェクトの位置または方向を直接追跡しません。 代わりに、位置と方向をシーンの座標系に変換する方法を提供し、ビューアーの位置と方向のデータを XR ハードウェアから収集し、あなたが構成した参照空間に変換して、フレームレンダリングコードにタイムスタンプ付きで配信します。 そのタイムスタンプとあなた独自のデータを使用して、シーンのレンダリング方法を決定します。</p>\n<p>シーンを 2 回レンダリングした後（フレームバッファーの左半分に 1 回、フレームバッファーの右半分に 1 回）、フレームバッファーは XR ハードウェアに送信され、フレームバッファーの各半分が対応する目に表示されます。 これは、多くの場合（常にではありません）、画像を 1 つの画面に描画し、レンズを使用してその画像の正しい半分を各目に転送します。</p>\n<p>3D が WebXR によってどのように表現されるかについて詳しくは、<a href=\"/ja/docs/Web/API/WebXR_Device_API/Cameras\">視点とビューアー: WebXR でのカメラのシミュレーション</a>の <a href=\"/ja/docs/Web/API/WebXR_Device_API/Cameras#representing_3d_with_webxr\">WebXR による 3D の表現</a>をご覧ください。</p>"}},{"type":"prose","value":{"id":"シーンを描く","title":"シーンを描く","isH3":false,"content":"<p>ブラウザーがシーンの次のフレームをペイントできるようにフレームバッファーを準備するときが来たら、<code>requestAnimationFrame()</code> に指定した関数が呼び出されます。 それは、描画するフレームの時刻と、レンダリングする必要のあるフレームのシーンの状態に関する詳細を提供する <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRFrame\"><code>XRFrame</code> <small>(en-US)</small></a> オブジェクトを入力として受け取ります。</p>\n<p>理想的には、このコードを 60 FPS のフレームレートに十分か可能な限りそれに近い速さを維持することが必要です。 この 1 つの関数にはあなたのコードだけではないことを思い出してください。 メインスレッドがフレーム自体の持続時間よりもフレームあたりの時間を長く実行する必要がないことを確認する必要があります。</p>"}},{"type":"prose","value":{"id":"基本的なレンダラー","title":"基本的なレンダラー","isH3":true,"content":"<p>このバージョンの WebXR レンダリングコールバックでは、比較的単純なプロジェクトに最適な非常に単純なアプローチを使用しています。 この疑似コードは、そのプロセスの概要を示しています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">for</span> each view <span class=\"token keyword\">in</span> the pose's views list<span class=\"token operator\">:</span>\n  <span class=\"token keyword\">get</span> the WebXR <span class=\"token constant\">GL</span> layer's viewport\n  <span class=\"token keyword\">set</span> the WebGL viewport to match\n  <span class=\"token keyword\">for</span> each object <span class=\"token keyword\">in</span> the scene\n    <span class=\"token function\">bindProgram</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">bindVertices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">bindMatrices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">bindUniforms</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">bindBuffers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">bindTextures</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">drawMyObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>簡単に言えば、この形式のレンダラーは<strong>ビュー優先順</strong>（view-first order）を使用しています。 すべてのオブジェクトを 1 つのビューに描画してから、同じオブジェクトのセットを他のビューにレンダリングして、XR デバイスのディスプレイを構成する 2 つのビューのそれぞれを続けてレンダリングします。 その結果、オブジェクトを描画するために必要なデータの多くは、フレームごとに 2 回 GPU に送信されるため、多くの複製された作業があります。 ただし、これは既存の WebGL コードの移植を簡略化し、多くの場合、この作業を行うのに十分なほど優れているため、最初にこの方法を見ていきます。</p>\n<p>そのフレームのシーンを構成する次のオブジェクトに進む前に、各オブジェクトを各目に対して 1 回ずつ、2 回続けてレンダリングする（つまり、<strong>オブジェクト優先順</strong>（object-first order）でレンダリングする）代替アプローチについては、<a href=\"/ja/docs/Web/API/WebXR_Device_API/Rendering#Optimizing_by_rendering_in_object-first_order\" aria-current=\"page\">オブジェクト優先順でレンダリングすることによる最適化</a>を参照してください。</p>\n<h4 id=\"レンダリングコールバックのサンプル\">レンダリングコールバックのサンプル</h4>\n<p>この基本的なパターンに従う実際のコードを見てみましょう。 上記の例では、この関数に <code>myDrawFrame()</code> という名前を付けたので、ここでは引き続きこれを使用します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> lastFrameTime <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">myDrawFrame</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentFrameTime<span class=\"token punctuation\">,</span> frame</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> session <span class=\"token operator\">=</span> frame<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> viewerPose<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 時間が来たらペイントされる次のフレームをスケジュールします。</span>\n\n  animationFrameRequestID <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>myDrawFrame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ビューアーの位置と方向を表す XRViewerPose を取得します。</span>\n  <span class=\"token comment\">// 成功した場合、フレームをレンダリングします。</span>\n\n  viewerPose <span class=\"token operator\">=</span> frame<span class=\"token punctuation\">.</span><span class=\"token function\">getViewerPose</span><span class=\"token punctuation\">(</span>viewerRefSpace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>viewerPose<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> glLayer <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>renderState<span class=\"token punctuation\">.</span>baseLayer<span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindFrameBuffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">FRAMEBUFFER</span><span class=\"token punctuation\">,</span> glLayer<span class=\"token punctuation\">.</span>framebuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// まず、色と奥行きのフレームバッファーを消去します。</span>\n\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">clearColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">clearDepth</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">COLOR_BUFFER_BIT</span> <span class=\"token operator\">|</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">DEPTH_BUFFER_BIT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 最後のフレームがレンダリングされてからの経過時間を計算します。</span>\n    <span class=\"token comment\">// この値を使用して、アニメーションが意図したとおりの速度で実行されるようにします。</span>\n\n    <span class=\"token keyword\">const</span> deltaTime <span class=\"token operator\">=</span> currentFrameTime <span class=\"token operator\">-</span> lastFrameTime<span class=\"token punctuation\">;</span>\n    lastFrameTime <span class=\"token operator\">=</span> currentFrameTime<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 次に、セッションのビューごとにシーンレンダリングコードを1回呼び出します。</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> view <span class=\"token keyword\">of</span> viewerPose<span class=\"token punctuation\">.</span>views<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> viewport <span class=\"token operator\">=</span> glLayer<span class=\"token punctuation\">.</span><span class=\"token function\">getViewport</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      gl<span class=\"token punctuation\">.</span><span class=\"token function\">viewport</span><span class=\"token punctuation\">(</span>viewport<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> viewport<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> viewport<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> viewport<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">myDrawSceneIntoView</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">,</span> deltaTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>myDrawFrame()</code> 関数は、<code>frame</code> パラメーターで指定された <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRFrame\"><code>XRFrame</code> <small>(en-US)</small></a> オブジェクトから <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRSession\"><code>XRSession</code> <small>(en-US)</small></a> を取得し、セッションの <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRSession/requestAnimationFrame\"><code>requestAnimationFrame()</code> <small>(en-US)</small></a> メソッドを呼び出して、次のフレームのレンダリングをすぐにスケジュールします。 これにより、すぐにキューに入ることが保証され、<code>myDrawFrame()</code> 関数のこの反復で費やされた残りの時間は、次のフレームを描画するタイミングにカウントされます。</p>\n<p>次に、フレームの <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRFrame/getViewerPose\"><code>getViewerPose()</code> <small>(en-US)</small></a> メソッドを使用して、ビューアーのポーズ（その位置と方向）を表す <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRViewerPose\"><code>XRViewerPose</code> <small>(en-US)</small></a> オブジェクトを取得し、<a href=\"/ja/docs/Web/API/WebXR_Device_API/Rendering#Preparing_the_renderer\" aria-current=\"page\">WebXR セッションのセットアップ中</a>に以前に取得した <code>viewerRefSpace</code> からビューアーの参照空間を渡します。</p>\n<p>ビューアーのポーズを手にすると、フレームのレンダリングを開始できます。 最初のステップは、WebXR デバイスがフレームを描画したいフレームバッファーへのアクセスを取得することです。 これは、セッションの <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRSession/renderState\"><code>renderState</code> <small>(en-US)</small></a> オブジェクトの <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRRenderState/baseLayer\"><code>baseLayer</code> <small>(en-US)</small></a> プロパティからターゲット WebGL レイヤーを取得してから、その <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRWebGLLayer\"><code>XRWebGLLayer</code> <small>(en-US)</small></a> オブジェクトから <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRWebGLLayer/framebuffer\"><code>framebuffer</code> <small>(en-US)</small></a> を取得することによって行われます。 次に、<a href=\"/en-US/docs/Web/API/WebGLRenderingContext/bindFramebuffer\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">gl.bindFrameBuffer() (en-US)</a> を呼び出して、今後のすべての描画コマンドのターゲットとしてそのフレームバッファーをバインドします。</p>\n<p>次のステップは、フレームバッファーを消去することです。 <em>レンダリングコードがフレームバッファー内のすべてのピクセルを書き込むことが保証されている場合に限り</em>、理論上はこのステップをスキップできますが、パフォーマンスの全てを最後まで出し切る必要がない限り、とにかくすべてのピクセルに触れていることを確実にするために、描画を開始する前にそれをクリアして、描画を開始するのが一般的に最も安全です。 背景色は、<a href=\"/ja/docs/Web/API/WebGLRenderingContext/clearColor\"><code>gl.clearColor()</code></a> を使用して完全に不透明な黒に設定します。 奥行きのクリアは、<a href=\"/ja/docs/Web/API/WebGLRenderingContext/clearDepth\"><code>gl.cleardepth()</code></a> を呼び出して 1.0 に設定します。 これにより、ピクセルが属するオブジェクトがどれだけ離れているかに関係なく、すべてのピクセルがクリアされます。 最後に、フレームのピクセルバッファーと奥行きバッファーは、<code>COLOR_BUFFER_BIT</code> と <code>DEPTH_BUFFER_BIT</code> の両方を設定したビットマスクを渡して <a href=\"/ja/docs/Web/API/WebGLRenderingContext/clear\"><code>gl.clear()</code></a> を呼び出して両方とも消去します。</p>\n<p>WebXR はすべてのビューに単一のフレームバッファーを使用し、ビュー上のビューポートはフレームバッファー内の各目の視点を分離するために使用されるため、各目（または他の視点）を個別にクリアするのではなく、単一のフレームバッファーをクリアするだけで済みます。</p>\n<p>次に、前のフレームがレンダリングされてからの経過時間は、<code>currentFrameTime</code> パラメーターで指定された現在の時刻から、最後のフレームがレンダリングされた保存時刻 <code>lastFrameTime</code> を差し引いて計算されます。 結果は、最後のフレームがレンダリングされてから経過したミリ秒数を示す <a href=\"/ja/docs/Web/API/DOMHighResTimeStamp\"><code>DOMHighResTimeStamp</code></a> 値です。 シーンの描画中にこの値を使用して、コールバックが一貫したフレームレートで起動されると想定するのではなく、実際の経過時間を考慮して適切な距離ですべてを移動できるようにします。 この経過時間は変数 <code>deltaTime</code> に保存され、<code>lastFrameTime</code> の値はこのフレームの時刻に置き換えられ、次のフレームの差分を計算する準備が整います。</p>\n<p>それでは、実際にそれぞれの目に対してシーンをレンダリングする時が来ました。 ビューアーのポーズの <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRViewerPose/views\"><code>views</code> <small>(en-US)</small></a> 配列内のビューを反復処理します。 シーンに対する目のパースペクティブ（perspective）を表すこれらの <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRView\"><code>XRView</code> <small>(en-US)</small></a> オブジェクトのそれぞれについて、描画を現在の目の可視画像を表すフレームバッファーの領域に制限することから始める必要があります。</p>\n<p><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRWebGLLayer\"><code>XRWebGLLayer</code> <small>(en-US)</small></a> のメソッド <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRWebGLLayer/getViewport\"><code>getViewport()</code> <small>(en-US)</small></a> を呼び出して、現在の目の画像用に予約されているフレームバッファー内の領域に描画を制限するビューポートを取得することにより、目のコンテンツをレンダリングする WebGL を準備することから始めます。 次に、ビューポートの X 原点と Y 原点を、幅と高さとともに <a href=\"/en-US/docs/Web/API/WebGLRenderingContext/viewport\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">gl.viewport() (en-US)</a> に渡して、WebGL ビューポートを一致するように設定します。</p>\n<p>最後に、メソッド <code>myDrawSceneIntoView()</code> を呼び出して、実際に WebGL を使用してシーンをレンダリングします。 これには、描画する目を表す <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRView\"><code>XRView</code> <small>(en-US)</small></a>（透視マッピング（perspective mapping）などを実行するため）と <code>deltaTime</code> を渡します。 これにより、シーン描画コードは、時間とともに移動するオブジェクトの位置を決定するときに経過時間を正確に表すことができます。</p>\n<p>ビューを反復するループが終了すると、ビューアーにシーンを提示するために必要なすべての画像がレンダリングされ、戻ると、フレームバッファーは GPU を経由して、最終的には XR デバイスのディスプレイに到達します。 関数の上部で <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRSession/requestAnimationFrame\"><code>requestAnimationFrame()</code> <small>(en-US)</small></a> を呼び出してあるので、シーンのアニメーションの次のフレームをレンダリングするときに、コールバックがもう一度呼び出されます。</p>\n<h4 id=\"このアプローチの欠点\">このアプローチの欠点</h4>\n<p>この関数に費やす時間をできるだけ最小限に抑えることが重要であるため、状態変化の処理に費やす時間が長いほど、実際に描画する時間が短くなります。 このテクニックは少数のオブジェクトに対して非常にうまく機能しますが、各オブジェクトのすべてのデータを 2 回（左目に対して 1 回、右目に対して 1 回）再バインドする必要があるため、状態の調整、バッファーとテクスチャーのアップロードなどに、多くの時間を費やしています。 次のセクションでは、これらの状態の変化を大幅に減らし、特にオブジェクト数が増えるにつれて、はるかに高速なレンダリングアプローチを提供する、変更されたアプローチについて説明します。</p>"}},{"type":"prose","value":{"id":"オブジェクト優先でレンダリングすることによる最適化","title":"オブジェクト優先でレンダリングすることによる最適化","isH3":true,"content":"<p>単一の WebGL フレームバッファーを使用して、左目と右目の両方のビューを単一のフレームバッファーに含めるという WebXR のアプローチの利点は、処理の順序を再配置することにより、レンダリングパフォーマンスを大幅に向上できることです。 特定のビュー（左目など）のビューポートを設定し、左目で見えるすべてのオブジェクトを 1 つずつレンダリングし、各オブジェクトに行ったらバッファーを再構成する代わりに、各オブジェクトをそれぞれの目に 1 回ずつ、2 回続けてレンダリングします。 したがって、両方の目に対してバッファー、ユニフォームなどを 1 回セットアップするだけで済みます。</p>\n<p>結果の疑似コードは次のようになります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">for</span> each object <span class=\"token keyword\">in</span> the scene\n  <span class=\"token function\">bindProgram</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">bindUniforms</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">bindBuffers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">bindTextures</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> each view <span class=\"token keyword\">in</span> the pose's views list\n    <span class=\"token keyword\">get</span> the XRWebGLLayer's viewport\n    <span class=\"token keyword\">set</span> the WebGL viewport to match\n    <span class=\"token function\">bindVertices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">bindMatrices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">drawMyObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>このように変更することにより、プログラム、ユニフォーム、バッファー、テクスチャー、その他の可能性のあるものだけを、シーン内の各オブジェクトに対して 2 回ではなく、フレームごとに 1 回だけバインドします。 これにより、潜在的に非常に大きなマージンでオーバーヘッドが削減されます。</p>"}},{"type":"prose","value":{"id":"フレームレートの制限","title":"フレームレートの制限","isH3":true,"content":"<p>他のコードを実行するためにより多くの時間を確保しながら、維持しようとするベースラインのフレームレートを確立するために、意図的にフレームレートを制限する必要がある場合は、フレームを意図的に定期的にスキップすることができます。</p>\n<p>例えば、フレームレートを 50% 下げるには、1 フレームおきにスキップします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> tick <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">drawFrame</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time<span class=\"token punctuation\">,</span> frame</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  animationFrameRequestID <span class=\"token operator\">=</span> frame<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>drawFrame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>tick <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* シーンを描く */</span>\n  <span class=\"token punctuation\">}</span>\n  tick<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>このバージョンのレンダリングコールバックは、<code>tick</code> カウンターを維持します。 <code>tick</code> が偶数の値である場合にのみ、フレームがレンダリングされます。 このようにして、ひとつおきのフレームのみをレンダリングします。</p>\n<p>同様に、<code>!(tick % 4)</code> を使用して、4 フレームごとにレンダリングする等々ができます。</p>"}},{"type":"prose","value":{"id":"アニメーションを経過時間に合わせる","title":"アニメーションを経過時間に合わせる","isH3":true,"content":"<p>レンダリングコールバックは、正当な理由で <code>time</code> パラメータを受け取ります。 この <a href=\"/ja/docs/Web/API/DOMHighResTimeStamp\"><code>DOMHighResTimeStamp</code></a> 値は、フレームのレンダリングがスケジュールされた時刻を示す浮動小数点値です。 コールバックの実行は正確に 1/60 秒間隔で発生しないため — そして実際、ユーザーのディスプレイのフレームレートが異なる場合、他のレートで発生する可能性があるため — コードが実行されているという単純な事実に頼って、最後のフレームから 1/60 秒であると想定することはできません。</p>\n<p>そのため、アニメーションが目的の速度で正確にレンダリングされるように、提供されているタイムスタンプを使用する必要があります。 これを行うには、最初に行う必要があるのは、最後のフレームがレンダリングされてから経過した時間を計算することです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> lastFrameTime <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">drawFrame</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time<span class=\"token punctuation\">,</span> frame</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... 次のフレームのスケジュール、バッファーの準備など ... */</span>\n\n  <span class=\"token keyword\">const</span> deltaTime <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>time <span class=\"token operator\">-</span> lastFrameTime<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.001</span><span class=\"token punctuation\">;</span>\n  lastFrameTime <span class=\"token operator\">=</span> time<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> view <span class=\"token keyword\">of</span> pose<span class=\"token punctuation\">.</span>views<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* 各ビューのレンダリング */</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これは、前のフレームのレンダリング時間を含む <code>lastFrameTime</code> と呼ばれるグローバル（またはオブジェクトプロパティ）を維持します。 この場合、時間の値はミリ秒単位で格納されるため、0.001 を掛けて時間を秒に変換します。 場合によっては、これにより後で時間を節約できます。 他の状況では、ミリ秒単位の時間が必要なため、何も変更する必要はありません。</p>\n<p>経過時間を手に入れれば、レンダリングコードは、すべての移動オブジェクトが経過時間内にどれだけ移動したかを計算する手段を持ちます。 例えば、オブジェクトが回転している場合、次のように回転を適用できます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> xDeltaRotation <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>xRotationDegreesPerSecond <span class=\"token operator\">*</span> <span class=\"token constant\">RADIANS_PER_DEGREE</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> deltaTime<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> yDeltaRotation <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>yRotationDegreesPerSecond <span class=\"token operator\">*</span> <span class=\"token constant\">RADIANS_PER_DEGREE</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> deltaTime<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> zDeltaRotation <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>zRotationDegreesPerSecond <span class=\"token operator\">*</span> <span class=\"token constant\">RADIANS_PER_DEGREE</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> deltaTime<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これは、フレームが最後に描画されてからオブジェクトが 3 つの軸のそれぞれを中心に回転した量を計算します。 これがないと、経過時間に関係なく、シェイプはフレームごとに指定された量だけ回転します。 これにより、多くの場合、かなりのつっかえが発生します。</p>\n<p>単に回転するのではなく、移動するオブジェクトに適用される同様の概念では、次のようになります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> xDistanceMoved <span class=\"token operator\">=</span> xSpeedPerSecond <span class=\"token operator\">*</span> deltaTime<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> yDistanceMoved <span class=\"token operator\">=</span> ySpeedPerSecond <span class=\"token operator\">*</span> deltaTime<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ZDistanceMoved <span class=\"token operator\">=</span> zSpeedPerSecond <span class=\"token operator\">*</span> deltaTime<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>xSpeedPerSecond</code>、<code>ySpeedPerSecond</code>、<code>zSpeedPerSecond</code> は、それぞれのオブジェクトの速度の軸の成分を含みます。 つまり、<code>[xDistanceMoved, yDistanceMoved, zDistanceMoved]</code> は、オブジェクトの速度を表すベクトルです。</p>"}},{"type":"prose","value":{"id":"シーンのアニメーションに関連する追加のタスク","title":"シーンのアニメーションに関連する追加のタスク","isH3":false,"content":"<p>もちろん、レンダラーを通過するたびに発生する可能性のある他のこともあります。 最も一般的な 2 つは、<a href=\"/en-US/docs/Web/API/WebXR_Device_API/Inputs\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">ユーザー入力の処理 (en-US)</a>と、シーン内のオブジェクトのユーザー制御状態やアニメーションパスなどの既知の要因に基づいて、オブジェクト（またはビューアー）の位置を更新することです。</p>"}},{"type":"prose","value":{"id":"ユーザー制御入力の処理","title":"ユーザー制御入力の処理","isH3":true,"content":"<p>WebXR アプリケーションの使用中にユーザーが入力を提供する方法は 3 つあります。 まず、WebXR は、XR ハードウェア自体に統合されているコントローラーからの入力の直接処理をサポートしています。 これらの入力ソースには、ハンドコントローラー、光学追跡システム、加速度計と磁力計などのデバイス、およびそのような他のデバイスが含まれます。</p>\n<p>2 番目のタイプの入力は、XR システムを介して接続されたゲームパッドです。 これは、<a href=\"/ja/docs/Web/API/Gamepad_API\">Gamepad API</a> から継承されたインターフェイスを使用しますが、WebXR を介してそれらを操作します。</p>\n<p>3 番目の最後のタイプの入力は、キーボード、マウス、トラックパッド、タッチスクリーン、非 XR ゲームパッドおよびジョイスティックなどの従来の非 XR 入力デバイスです。</p>\n<p>XR ハードウェアから直接収集できる方向と位置の情報は、自動的に適用されます。 したがって、自分で処理する必要があるのは他の種類の入力です。</p>\n<ul>\n  <li>ポインティングデバイスのターゲットとボタンの押下</li>\n  <li>ゲームパッドの入力</li>\n  <li>非 XR 入力デバイスの入力</li>\n</ul>\n<p>WebXR を使用してシーンを表示する際にユーザー入力を処理する方法の詳細については、<a href=\"/en-US/docs/Web/API/WebXR_Device_API/Inputs\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">入力と入力ソース (en-US)</a>の記事を参照してください。</p>"}},{"type":"prose","value":{"id":"オブジェクトの位置の更新","title":"オブジェクトの位置の更新","isH3":true,"content":"<p>ほとんどの（すべてではありませんが）シーンには、何らかの形のアニメーションが含まれています。 アニメーションでは、物事が適切に動き、互いに反応します。</p>\n<p>例えば、仮想現実や拡張現実のゲームでは、敵の非プレイヤーキャラクター（NPC）がコンピューターに制御され、シーン内を移動する場合があります。 時間の経過とともに世界での位置が変化するだけでなく、各 NPC には相互に関連して移動するボディパーツまたはコンポーネントがある可能性があります。 クリーチャーが歩くと腕と足が揺れ、頭が素早く上下したり回転し、髪が跳ねたり揺れたりし、キャラクターが呼吸すると胴体は拡張収縮します。</p>\n<p>さらに、動いている物体や構造物があるかもしれません。 スポーツゲームでは、空中で弧を描くボールがあり、その動きをシミュレートする必要があります。 レーシングゲームでは、車やその他の乗り物があり、車輪を含めてアニメーションする可動部品があります。 シーンに水がある場合、波紋または波がリアルに見えるようにする必要があります。 （一部のタイプのゲームの場合）ドア、壁、床など、構造の一部が動いている場合があります。</p>\n<p>モーションのもう 1 つの一般的なソースは、プレイヤー自身です。 コントロールからの入力を解釈した後（XR 所属とそれ以外の両方）、ユーザーの動きをシミュレートするために、それらの変更をシーンに適用する必要があります。 詳細とこれがどのように機能するかの完全な例については、<a href=\"/ja/docs/Web/API/WebXR_Device_API/Movement_and_motion\">移動、向き、モーション</a>の記事を参照してください。</p>"}},{"type":"prose","value":{"id":"次のステップ","title":"次のステップ","isH3":false,"content":"<p>レンダラーを作成したら — または、完成していなくても機能するものがあれば — カメラとそのシーン全体の動きを処理することができます。 これについては、WebXR の<a href=\"/ja/docs/Web/API/WebXR_Device_API/Cameras\">視点とビューアー</a>に関する記事で説明しています。</p>"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/API/WebXR_Device_API/Geometry\">WebXR の幾何学と参照空間</a></li>\n  <li><a href=\"/en-US/docs/Web/API/WebXR_Device_API/Spatial_tracking\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">WebXR での空間追跡 (en-US)</a></li>\n  <li><a href=\"/ja/docs/Web/API/WebXR_Device_API/Cameras\">視点とビューアー: WebXR でのカメラのシミュレーション</a></li>\n  <li><a href=\"/ja/docs/Web/API/WebXR_Device_API/Movement_and_motion\">移動、向き、モーション: WebXR の例</a></li>\n  <li><a href=\"/en-US/docs/Web/API/WebXR_Device_API/Performance\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">WebXR パフォーマンスガイド (en-US)</a></li>\n</ul>"}}],"toc":[{"text":"レンダラーの準備","id":"レンダラーの準備"},{"text":"リフレッシュレートとフレームレート","id":"リフレッシュレートとフレームレート"},{"text":"WebXR フレーム","id":"webxr_フレーム"},{"text":"シーンを描く","id":"シーンを描く"},{"text":"シーンのアニメーションに関連する追加のタスク","id":"シーンのアニメーションに関連する追加のタスク"},{"text":"次のステップ","id":"次のステップ"},{"text":"関連情報","id":"関連情報"}],"summary":"WebXR 環境をセットアップし、進行中の XR 環境セッションを表す XRSession (en-US) を作成したら、レンダリングのためにシーンのフレームを XR デバイスに提供する必要があります。 この記事では、XRSession (en-US) を使用して各フレームを表す XRFrame (en-US) オブジェクトを取得し、それを使用して、XR デバイスに配信するためのフレームバッファーを準備し、レンダリングループで XR シーンのフレームをデバイスに駆動するプロセスについて説明します。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Rendering and the WebXR frame animation callback","locale":"en-US","native":"English (US)"}],"source":{"folder":"ja/web/api/webxr_device_api/rendering","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/webxr_device_api/rendering/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/WebXR_Device_API","title":"WebXR Device API"},{"uri":"/ja/docs/Web/API/WebXR_Device_API/Rendering","title":"レンダリングと WebXR フレームアニメーションコールバック"}],"pageTitle":"レンダリングと WebXR フレームアニメーションコールバック - Web API | MDN","noIndexing":false}}