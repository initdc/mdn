{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"移動、向き、モーション: WebXR の例","mdn_url":"/ja/docs/Web/API/WebXR_Device_API/Movement_and_motion","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/WebXR_Device_API\">WebXR Device API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>ガイド</summary><ol><li><a href=\"/ja/docs/Web/API/WebXR_Device_API/Fundamentals\">Fundamentals of WebXR</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>インターフェイス</summary><ol><li><a href=\"/ja/docs/Web/API/XRAnchor\"><code>XRAnchor</code></a></li><li><a href=\"/ja/docs/Web/API/XRBoundedReferenceSpace\"><code>XRBoundedReferenceSpace</code></a></li><li><a href=\"/ja/docs/Web/API/XRCPUDepthInformation\"><code>XRCPUDepthInformation</code></a></li><li><a href=\"/ja/docs/Web/API/XRDepthInformation\"><code>XRDepthInformation</code></a></li><li><a href=\"/ja/docs/Web/API/XRFrame\"><code>XRFrame</code></a></li><li><a href=\"/ja/docs/Web/API/XRInputSource\"><code>XRInputSource</code></a></li><li><a href=\"/ja/docs/Web/API/XRInputSourceArray\"><code>XRInputSourceArray</code></a></li><li><a href=\"/ja/docs/Web/API/XRInputSourceEvent\"><code>XRInputSourceEvent</code></a></li><li><a href=\"/ja/docs/Web/API/XRInputSourcesChangeEvent\"><code>XRInputSourcesChangeEvent</code></a></li><li><a href=\"/ja/docs/Web/API/XRPose\"><code>XRPose</code></a></li><li><a href=\"/ja/docs/Web/API/XRReferenceSpace\"><code>XRReferenceSpace</code></a></li><li><a href=\"/ja/docs/Web/API/XRReferenceSpaceEvent\"><code>XRReferenceSpaceEvent</code></a></li><li><a href=\"/ja/docs/Web/API/XRRenderState\"><code>XRRenderState</code></a></li><li><a href=\"/ja/docs/Web/API/XRRigidTransform\"><code>XRRigidTransform</code></a></li><li><a href=\"/ja/docs/Web/API/XRSession\"><code>XRSession</code></a></li><li><a href=\"/ja/docs/Web/API/XRSessionEvent\"><code>XRSessionEvent</code></a></li><li><a href=\"/ja/docs/Web/API/XRSpace\"><code>XRSpace</code></a></li><li><a href=\"/ja/docs/Web/API/XRSystem\"><code>XRSystem</code></a></li><li><a href=\"/ja/docs/Web/API/XRView\"><code>XRView</code></a></li><li><a href=\"/ja/docs/Web/API/XRViewerPose\"><code>XRViewerPose</code></a></li><li><a href=\"/ja/docs/Web/API/XRViewport\"><code>XRViewport</code></a></li><li><a href=\"/ja/docs/Web/API/XRWebGLBinding\"><code>XRWebGLBinding</code></a></li><li><a href=\"/ja/docs/Web/API/XRWebGLDepthInformation\"><code>XRWebGLDepthInformation</code></a></li><li><a href=\"/ja/docs/Web/API/XRWebGLLayer\"><code>XRWebGLLayer</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>プロパティ</summary><ol><li><a href=\"/ja/docs/Web/API/Navigator/xr\"><code>Navigator.xr</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>メソッド</summary><ol><li><a href=\"/ja/docs/Web/API/WebGLRenderingContext/makeXRCompatible\"><code>WebGLRenderingContext.makeXRCompatible()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>イベント</summary><ol><li><a href=\"/ja/docs/Web/API/XRReferenceSpace/reset_event\"><code>XRReferenceSpace</code>: <code>reset</code></a></li><li><a href=\"/ja/docs/Web/API/XRSession/end_event\"><code>XRSession</code>: <code>end</code></a></li><li><a href=\"/ja/docs/Web/API/XRSession/inputsourceschange_event\"><code>XRSession</code>: <code>inputsourceschange</code></a></li><li><a href=\"/ja/docs/Web/API/XRSession/select_event\"><code>XRSession</code>: <code>select</code></a></li><li><a href=\"/ja/docs/Web/API/XRSession/selectend_event\"><code>XRSession</code>: <code>selectend</code></a></li><li><a href=\"/ja/docs/Web/API/XRSession/selectstart_event\"><code>XRSession</code>: <code>selectstart</code></a></li><li><a href=\"/ja/docs/Web/API/XRSession/visibilitychange_event\"><code>XRSession</code>: <code>visibilitychange</code></a></li><li><a href=\"/ja/docs/Web/API/XRSystem/devicechange_event\"><code>XRSystem</code>: <code>devicechange</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>この記事では、<a href=\"/ja/docs/Web/API/WebXR_Device_API\">WebXR</a> チュートリアルシリーズの以前の記事で紹介した情報を利用して、ユーザーが VR ヘッドセット、キーボード、マウスを使用して自由に移動できる回転立方体をアニメーション化する例を作成します。 これは、3D グラフィックスと VR の幾何学がどのように機能するかについての理解を深めるのに役立つだけでなく、XR レンダリング中に使用される関数とデータがどのように連携するかを確実に理解するのに役立ちます。</p>\n<p>\n  <strong>この例の実際のスクリーンショット</strong>\n  <img src=\"/en-US/docs/Web/API/WebXR_Device_API/Movement_and_motion/xr-sample.png\" alt=\"ユーザーが動きまわることができるテクスチャー付き立方体を示す例のスクリーンショット\" width=\"1400\" height=\"2315\" loading=\"lazy\">\n</p>\n<p>この例のコアである、回転するテクスチャー付きで照明付きの立方体は、WebGL チュートリアルシリーズから抜粋したものです。 つまり、シリーズの最後から 2 番目の記事の <a href=\"/ja/docs/Web/API/WebGL_API/Tutorial/Lighting_in_WebGL\">WebGL でのライティング</a>をカバーします。</p>\n<p>この記事と付随するソースコードを読むときは、3D ヘッドセットのディスプレイが半分に分割された単一の画面であることを覚えておくと役に立ちます。 画面の左半分は左目でのみ表示され、右半分は右目でのみ表示されます。 没入型プレゼンテーションのためにシーンをレンダリングするには、各目の視点から 1 回ずつ、シーンを複数回レンダリングする必要があります。</p>\n<p>左目をレンダリングする場合、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRWebGLLayer\"><code>XRWebGLLayer</code> <small>(en-US)</small></a> の <a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>viewport</code></a> は、描画を描画面の左半分に制限するように構成されています。 逆に、右目をレンダリングする場合、ビューポートは描画を描画面の右半分に制限するように設定されます。</p>\n<p>この例では、XR デバイスを使用して没入型ディスプレイとしてシーンを提示する場合でも、画面上のキャンバスに表示することでこれを示しています。</p>"}},{"type":"prose","value":{"id":"依存関係","title":"依存関係","isH3":false,"content":"<p>この例では、<a href=\"https://threejs.org/\" class=\"external\" rel=\" noopener\"><code>three.js</code></a> などの 3D グラフィックフレームワークに依存しませんが、行列演算には過去に他の例で使用している <a href=\"https://glmatrix.net/\" class=\"external\" rel=\" noopener\"><code>glMatrix</code></a> ライブラリーを使用します。 この例では、WebXR API の仕様を担当するチームである Immersive Web Working Group によって管理されている <a href=\"https://github.com/immersive-web/webxr-polyfill/\" class=\"external\" rel=\" noopener\">WebXR ポリフィル</a>もインポートします。 このポリフィルをインポートすることで、WebXR がまだ実装されていない多くのブラウザーでこの例を機能させることができ、WebXR 仕様のまだ実験的な日々の間に発生する仕様からの一時的な逸脱を滑らかにします。</p>"}},{"type":"prose","value":{"id":"オプション","title":"オプション","isH3":false,"content":"<p>この例には、ブラウザーにロードする前に定数の値を調整することで構成できるいくつかのオプションがあります。 コードは次のようになります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> xRotationDegreesPerSecond <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> yRotationDegreesPerSecond <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> zRotationDegreesPerSecond <span class=\"token operator\">=</span> <span class=\"token number\">35</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> enableRotation <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> allowMouseRotation <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> allowKeyboardMotion <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> enableForcePolyfill <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//const SESSION_TYPE = \"immersive-vr\";</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">SESSION_TYPE</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"inline\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">MOUSE_SPEED</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.003</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<dl>\n  <dt id=\"xrotationdegreespersecond\"><code>xRotationDegreesPerSecond</code></dt>\n  <dd>\n    <p>X 軸を中心に回転させる 1 秒あたりの度数。</p>\n  </dd>\n  <dt id=\"yrotationdegreespersecond\"><code>yRotationDegreesPerSecond</code></dt>\n  <dd>\n    <p>Y 軸を中心に回転させる 1 秒あたりの度数。</p>\n  </dd>\n  <dt id=\"zrotationdegreespersecond\"><code>zRotationDegreesPerSecond</code></dt>\n  <dd>\n    <p>Z 軸を中心に回転させる 1 秒あたりの度数。</p>\n  </dd>\n  <dt id=\"enablerotation\"><code>enableRotation</code></dt>\n  <dd>\n    <p>立方体の回転を有効にするかどうかを示すブール値。</p>\n  </dd>\n  <dt id=\"allowmouserotation\"><code>allowMouseRotation</code></dt>\n  <dd>\n    <p><code>true</code> の場合、マウスを使用して視野角をピッチ（上下）したりヨー（左右）したりできます。</p>\n  </dd>\n  <dt id=\"allowkeyboardmotion\"><code>allowKeyboardMotion</code></dt>\n  <dd>\n    <p><code>true</code> の場合、W、A、S、D キーはビューアーを上、左、下、右に移動し、上下の矢印キーは前後に移動します。 <code>false</code> の場合、ビューへの XR デバイスの変更のみを許可します。</p>\n  </dd>\n  <dt id=\"enableforcepolyfill\"><code>enableForcePolyfill</code></dt>\n  <dd>\n    <p>このブール値が <code>true</code> の場合、ブラウザーが実際に WebXR をサポートしている場合でも、この例では WebXR ポリフィルの使用を試みます。 <code>false</code> の場合、ブラウザーが <a href=\"/ja/docs/Web/API/Navigator/xr\"><code>navigator.xr</code></a> を実装していない場合にのみポリフィルを使用します。</p>\n  </dd>\n  <dt id=\"session_type\"><code>SESSION_TYPE</code></dt>\n  <dd>\n    <p>作成する XR セッションのタイプ: ドキュメントのコンテキストで提示するインラインセッションの <code>inline</code> と、シーンを没入型 VR ヘッドセットに提示する <code>immersive-vr</code>。</p>\n  </dd>\n  <dt id=\"mouse_speed\"><code>MOUSE_SPEED</code></dt>\n  <dd>\n    <p>ピッチとヨーの制御に使用するマウスからの入力をスケーリングするために使用される乗数。</p>\n  </dd>\n  <dt id=\"move_distance\"><code>MOVE_DISTANCE</code></dt>\n  <dd>\n    <p>シーン内でビューアーを移動するために使用するキーのいずれかに応答して移動する距離。</p>\n  </dd>\n</dl>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> この例では、<code>immersive-vr</code> モードを使用している場合でも、常に画面にレンダリングされる内容が表示されます。 これにより、2 つのモード間のレンダリングの違いを比較でき、ヘッドセットがない場合でも没入型モードからの出力を確認できます。</p>\n</div>"}},{"type":"prose","value":{"id":"セットアップおよびユーティリティ関数","title":"セットアップおよびユーティリティ関数","isH3":false,"content":"<p>次に、WebGL および WebXR 固有の情報を格納するために使用されるものから始めて、アプリケーション全体で使用される変数と定数を宣言します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> polyfill <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> xrSession <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> xrInputSources <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> xrReferenceSpace <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> xrButton <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> gl <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> animationFrameRequestID <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> shaderProgram <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> programInfo <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> buffers <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> texture <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> mouseYaw <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> mousePitch <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>この後に一連の定数が続きます。 これには主に、シーンのレンダリング中に使用されるさまざまなベクトルと行列が含まれます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> viewerStartPosition <span class=\"token operator\">=</span> vec3<span class=\"token punctuation\">.</span><span class=\"token function\">fromValues</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> viewerStartOrientation <span class=\"token operator\">=</span> vec3<span class=\"token punctuation\">.</span><span class=\"token function\">fromValues</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> cubeOrientation <span class=\"token operator\">=</span> vec3<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> cubeMatrix <span class=\"token operator\">=</span> mat4<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mouseMatrix <span class=\"token operator\">=</span> mat4<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> inverseOrientation <span class=\"token operator\">=</span> quat<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">RADIANS_PER_DEGREE</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">/</span> <span class=\"token number\">180.0</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>最初の 2 つ（<code>viewerStartPosition</code> と <code>viewerStartOrientation</code>）は、空間の中心に対してビューアーが配置される場所と、最初に見る方向を示します。 <code>cubeOrientation</code> は立方体の現在の方向を格納し、<code>cubeMatrix</code> と <code>mouseMatrix</code> はシーンのレンダリング中に使用される行列のストレージです。 <code>inverseOrientation</code> は、レンダリングされるフレーム内のオブジェクトの参照空間に適用する回転を表すために使用されるクォータニオンです。</p>\n<p><code>RADIANS_PER_DEGREEE</code> は、角度をラジアンに変換するために度単位の角度を乗算する値です。</p>\n<p>宣言された最後の 4 つの変数は、ユーザーに行列を見せるための出力先の <a href=\"/ja/docs/Web/HTML/Element/div\"><code>&lt;div&gt;</code></a> 要素を参照するためのストレージです。</p>"}},{"type":"prose","value":{"id":"エラーのロギング","title":"エラーのロギング","isH3":true,"content":"<p><code>LogGLError()</code> と呼ばれる関数は、WebGL 関数の実行中に発生したエラーのログ情報を出力するための簡単にカスタマイズされた方法を提供するために実装されています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">LogGLError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">where</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> err <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">WebGL error returned by </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>where<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>err<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これは、プログラムのどの部分がエラーを生成したかを示すために使用される文字列 <code>where</code> を唯一の入力として受け取ります。 これは、同様のエラーが複数の状況で発生する可能性があるためです。</p>"}},{"type":"prose","value":{"id":"頂点シェーダーとフラグメントシェーダー","title":"頂点シェーダーとフラグメントシェーダー","isH3":true,"content":"<p>頂点シェーダーとフラグメントシェーダーはどちらも、<a href=\"/ja/docs/Web/API/WebGL_API/Tutorial/Lighting_in_WebGL\">WebGL でのライティング</a>の記事の例で使用されているものとまったく同じです。 ここで使用されている基本的なシェーダーの <a href=\"/en-US/docs/Web/API/WebGL_API/By_example/Hello_GLSL\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">GLSL (en-US)</a> ソースコードに興味がある場合は、<a href=\"/ja/docs/Web/API/WebGL_API/Tutorial/Lighting_in_WebGL#update_the_shaders\">それを参照</a>してください。</p>\n<p>頂点シェーダーは、各頂点の初期位置と、ビューアーの現在の位置と方向をシミュレートするためにそれらを変換するために適用する必要のある変換を指定して、各頂点の位置を計算するとだけ言っておきましょう。 フラグメントシェーダーは、テクスチャーで見つかった値から必要に応じて補間し、照明効果を適用して各頂点の色を返します。</p>"}},{"type":"prose","value":{"id":"webxr_の起動と停止","title":"WebXR の起動と停止","isH3":false,"content":"<p>スクリプトを最初にロードするときに、<a href=\"/ja/docs/Web/API/Window/load_event\" title=\"load\"><code>load</code></a> イベントのハンドラーをインストールして、初期化を実行できるようにします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span> onLoad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">onLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  xrButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#enter-xr\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  xrButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> onXRButtonClick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  projectionMatrixOut <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#projection-matrix div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  modelMatrixOut <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#model-view-matrix div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  cameraMatrixOut <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#camera-matrix div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  mouseMatrixOut <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#mouse-matrix div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>navigator<span class=\"token punctuation\">.</span>xr <span class=\"token operator\">||</span> enableForcePolyfill<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Using the polyfill\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    polyfill <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebXRPolyfill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">setupXRButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>load</code> イベントハンドラーは、WebXR のオンとオフを切り替えるボタンへの参照を <code>xrButton</code> に取得し、<a href=\"/ja/docs/Web/API/Element/click_event\" title=\"click\"><code>click</code></a> イベントのハンドラーを追加します。 次に、4 つの <a href=\"/ja/docs/Web/HTML/Element/div\"><code>&lt;div&gt;</code></a> ブロックへの参照を取得します。 このブロックには、シーンの実行中に情報提供の目的で、手がかりとなる行列それぞれの現在の内容が出力されます。</p>\n<p>次に、<a href=\"/ja/docs/Web/API/Navigator/xr\"><code>navigator.xr</code></a> が定義されているかどうかを確認します。 そうでない場合、および/または <code>enableForcePolyfill</code> 構成定数が <code>true</code> に設定されている場合は、<code>WebXRPolyfill</code> クラスをインスタンス化して WebXR ポリフィルをインストールします。</p>"}},{"type":"prose","value":{"id":"起動と停止の_ui_の処理","title":"起動と停止の UI の処理","isH3":true,"content":"<p>次に、<code>setupXRButton()</code> 関数を呼び出します。 この関数は、<code>SESSION_TYPE</code> 定数で指定されたセッションタイプに対する WebXR サポートの有無により、必要に応じて \"Enter/Exit WebXR\" ボタンを有効または無効にするための構成を処理します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">setupXRButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>navigator<span class=\"token punctuation\">.</span>xr<span class=\"token punctuation\">.</span>isSessionSupported<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    navigator<span class=\"token punctuation\">.</span>xr<span class=\"token punctuation\">.</span><span class=\"token function\">isSessionSupported</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SESSION_TYPE</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">supported</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      xrButton<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>supported<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    navigator<span class=\"token punctuation\">.</span>xr<span class=\"token punctuation\">.</span><span class=\"token function\">supportsSession</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SESSION_TYPE</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      xrButton<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      xrButton<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ボタンのラベルは、実際に WebXR セッションの開始と停止を処理するコードで調整されます。 以下にそれを示します。</p>\n<p>WebXR セッションは、ボタンの <a href=\"/ja/docs/Web/API/Element/click_event\" title=\"click\"><code>click</code></a> イベントのハンドラーによってオンとオフが切り替えられ、ボタンのラベルは、\"Enter WebXR\" または \"Exit WebXR\" に適切に設定されます。 これは、<code>onXRButtonClick()</code> イベントハンドラーによって行われます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">onXRButtonClick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>xrSession<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    navigator<span class=\"token punctuation\">.</span>xr<span class=\"token punctuation\">.</span><span class=\"token function\">requestSession</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SESSION_TYPE</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>sessionStarted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> xrSession<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xrSession<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">sessionEnded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これは、<code>xrSession</code> の値を調べて、進行中の WebXR セッションを表す <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRSession\"><code>XRSession</code> <small>(en-US)</small></a> オブジェクトがすでにあるかどうかを確認することから始まります。 ない場合は、クリックは WebXR モードを有効にする要求を表しているので、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRSystem/requestSession\"><code>requestSession()</code> <small>(en-US)</small></a> を呼び出して、目的の WebXR セッションタイプの WebXR セッションを要求し、次に <code>sessionStarted()</code> を呼び出して、その WebXR セッションでシーンの実行を開始します。</p>\n<p>一方、進行中のセッションがすでにある場合は、その <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRSession/end\"><code>end()</code> <small>(en-US)</small></a> メソッドを呼び出してセッションを停止します。</p>\n<p>このコードで最後に行うことは、<code>xrSession</code> がまだ非 <code>NULL</code> かどうかを確認することです。 そうである場合は、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRSession/end_event\"><code>end</code> <small>(en-US)</small></a> イベントのハンドラーである <code>sessionEnded()</code> を呼び出します。 このコードは必要ないはずですが、少なくとも一部のブラウザーが <code>end</code> イベントを正しく発火しないという問題があるようです。 イベントハンドラーを直接実行することにより、この状況で終了プロセスを手動で完了します。</p>"}},{"type":"prose","value":{"id":"webxr_セッションの開始","title":"WebXR セッションの開始","isH3":true,"content":"<p><code>sessionStarted()</code> 関数は、イベントハンドラーを設定し、頂点シェーダーとフラグメントシェーダーの GLSL コードをコンパイルしてインストールし、レンダリングループを開始する前に WebGL レイヤーを WebXR セッションにアタッチすることにより、実際のセッションの設定と開始を処理します。 これは、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRSystem/requestSession\"><code>requestSession()</code> <small>(en-US)</small></a> によって返される promise のハンドラーとして呼び出されます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">sessionStarted</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">session</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> refSpaceType<span class=\"token punctuation\">;</span>\n\n  xrSession <span class=\"token operator\">=</span> session<span class=\"token punctuation\">;</span>\n  xrButton<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> <span class=\"token string\">\"Exit WebXR\"</span><span class=\"token punctuation\">;</span>\n  xrSession<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end\"</span><span class=\"token punctuation\">,</span> sessionEnded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"canvas\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"webgl\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">xrCompatible</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>allowMouseRotation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    canvas<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pointermove\"</span><span class=\"token punctuation\">,</span> handlePointerMove<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    canvas<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"contextmenu\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>allowKeyboardMotion<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"keydown\"</span><span class=\"token punctuation\">,</span> handleKeyDown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  shaderProgram <span class=\"token operator\">=</span> <span class=\"token function\">initShaderProgram</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> vsSource<span class=\"token punctuation\">,</span> fsSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  programInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">program</span><span class=\"token operator\">:</span> shaderProgram<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">attribLocations</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">vertexPosition</span><span class=\"token operator\">:</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">'aVertexPosition'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">vertexNormal</span><span class=\"token operator\">:</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">'aVertexNormal'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">textureCoord</span><span class=\"token operator\">:</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">'aTextureCoord'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">uniformLocations</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">projectionMatrix</span><span class=\"token operator\">:</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">'uProjectionMatrix'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">modelViewMatrix</span><span class=\"token operator\">:</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">'uModelViewMatrix'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">normalMatrix</span><span class=\"token operator\">:</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">'uNormalMatrix'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">uSampler</span><span class=\"token operator\">:</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">'uSampler'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  buffers <span class=\"token operator\">=</span> <span class=\"token function\">initBuffers</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  texture <span class=\"token operator\">=</span> <span class=\"token function\">loadTexture</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> <span class=\"token string\">'https://cdn.glitch.com/a9381af1-18a9-495e-ad01-afddfd15d000%2Ffirefox-logo-solid.png?v=1575659351244'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  xrSession<span class=\"token punctuation\">.</span><span class=\"token function\">updateRenderState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">baseLayer</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XRWebGLLayer</span><span class=\"token punctuation\">(</span>xrSession<span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">SESSION_TYPE</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"immersive-vr\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    refSpaceType <span class=\"token operator\">=</span> <span class=\"token string\">\"local\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    refSpaceType <span class=\"token operator\">=</span> <span class=\"token string\">\"viewer\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  mat4<span class=\"token punctuation\">.</span><span class=\"token function\">fromTranslation</span><span class=\"token punctuation\">(</span>cubeMatrix<span class=\"token punctuation\">,</span> viewerStartPosition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  vec3<span class=\"token punctuation\">.</span><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>cubeOrientation<span class=\"token punctuation\">,</span> viewerStartOrientation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  xrSession<span class=\"token punctuation\">.</span><span class=\"token function\">requestReferenceSpace</span><span class=\"token punctuation\">(</span>refSpaceType<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">refSpace</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    xrReferenceSpace <span class=\"token operator\">=</span> refSpace<span class=\"token punctuation\">.</span><span class=\"token function\">getOffsetReferenceSpace</span><span class=\"token punctuation\">(</span>\n          <span class=\"token keyword\">new</span> <span class=\"token class-name\">XRRigidTransform</span><span class=\"token punctuation\">(</span>viewerStartPosition<span class=\"token punctuation\">,</span> cubeOrientation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    animationFrameRequestID <span class=\"token operator\">=</span> xrSession<span class=\"token punctuation\">.</span><span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>drawFrame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> xrSession<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>新しく作成した <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRSession\"><code>XRSession</code> <small>(en-US)</small></a> オブジェクトを <code>xrSession</code> に保存した後、ボタンのラベルを \"Exit WebXR\" に設定して、シーンの開始後の新しい機能を示します。 また、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRSession/end_event\"><code>end</code> <small>(en-US)</small></a> イベントのハンドラーをインストールしているため、<code>XRSession</code> の終了が通知されます。</p>\n<p>次に、HTML にある <a href=\"/ja/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a> への参照とその WebGL レンダリングコンテキストを取得します。 これは、シーンの描画面として使用されます。 <code>xrCompatible</code> プロパティは、要素で <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLCanvasElement/getContext\"><code>getContext()</code> <small>(en-US)</small></a> を呼び出して、キャンバスの WebGL レンダリングコンテキストにアクセスするときに要求されます。 これにより、コンテキストが WebXR レンダリングのソースとして使用できるように構成されます。</p>\n<p>次に、<a href=\"/ja/docs/Web/API/Element/mousemove_event\" title=\"mousemove\"><code>mousemove</code></a> と <a href=\"/ja/docs/Web/API/Element/contextmenu_event\" title=\"contextmenu\"><code>contextmenu</code></a> のイベントハンドラーを追加しますが、<code>allowMouseRotation</code> 定数が <code>true</code> の場合に限ります。 <code>mousemove</code> ハンドラーは、マウスの動きに基づいてビューのピッチとヨーを処理します。 「マウスルック」機能はマウスの右ボタンを押している間のみ機能し、マウスの右クリックでコンテキストメニューがトリガーされるため、<code>contextmenu</code> イベントのハンドラーをキャンバスに追加して、ユーザーが最初にマウスのドラッグを開始したときにコンテキストメニューが表示されないようにします。</p>\n<p>次に、シェーダープログラムをコンパイルし、その変数への参照を取得し、各位置の配列を格納するバッファーを初期化し、各頂点の位置テーブルへのインデックス、頂点法線、各頂点のテクスチャー座標を格納します。 これはすべて WebGL サンプルコードから直接取得されているため、<a href=\"/ja/docs/Web/API/WebGL_API/Tutorial/Lighting_in_WebGL\">WebGL でのライティング</a>とその前の記事の <a href=\"/ja/docs/Web/API/WebGL_API/Tutorial/Creating_3D_objects_using_WebGL\">WebGL を用いた 3D オブジェクトの作成</a>および <a href=\"/ja/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL\">WebGL でのテクスチャーの使用</a>を参照してください。 次に、<code>loadTexture()</code> 関数を呼び出して、テクスチャーファイルをロードします。</p>\n<p>レンダリング構造とデータがロードされたので、<code>XRSession</code> を実行する準備を開始します。 <code>baseLayer</code> を新しい <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRWebGLLayer\"><code>XRWebGLLayer</code> <small>(en-US)</small></a> に設定して <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRSession/updateRenderState\"><code>XRSession.updateRenderState()</code> <small>(en-US)</small></a> を呼び出すことにより、セッションを WebGL レイヤーに接続して、レンダリング面として何を使用するかを認識します。</p>\n<p>次に、<code>SESSION_TYPE</code> 定数の値を調べて、WebXR コンテキストを没入型にするかインラインにするかを確認します。 没入型セッションは <code>local</code> 参照空間を使用し、インラインセッションは <code>viewer</code> 参照空間を使用します。</p>\n<p><code>glMatrix</code> ライブラリーの 4x4 行列用の <code>fromTranslation()</code> 関数は、<code>viewerStartPosition</code> 定数で指定されたビューアーの開始位置を変換行列 <code>cubeMatrix</code> に変換するために使用します。 ビューアーの開始方向である <code>viewerStartOrientation</code> 定数は、<code>cubeOrientation</code> にコピーして、時間の経過に伴う立方体の回転を追跡するために使用します。</p>\n<p><code>sessionStarted()</code> は、セッションの <a href=\"/ja/docs/Web/API/XRSession/requestReferenceSpace\" title=\"requestReferenceSpace()\"><code>requestReferenceSpace()</code></a> メソッドを呼び出して、オブジェクトを作成する空間を記述する参照空間オブジェクトを取得することで仕上げます。 返された promise が <a href=\"/ja/docs/Web/API/XRReferenceSpace\"><code>XRReferenceSpace</code></a> オブジェクトに解決されると、その <a href=\"/ja/docs/Web/API/XRReferenceSpace/getOffsetReferenceSpace\" title=\"getOffsetReferenceSpace\"><code>getOffsetReferenceSpace</code></a> メソッドを呼び出して、オブジェクトの座標系を表す参照空間オブジェクトを取得します。 新しい空間の原点は、<code>viewerStartPosition</code> で指定された世界座標にあり、その方向は <code>cubeOrientation</code> に設定されています。 次に、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRSession/requestAnimationFrame\"><code>requestAnimationFrame()</code> <small>(en-US)</small></a> メソッドを呼び出して、フレームを描画する準備ができたことをセッションに通知します。 後でリクエストをキャンセルする必要がある場合に備えて、返されたリクエスト ID を記録します。</p>\n<p>最後に、<code>sessionStarted()</code> は、ユーザーの WebXR セッションを表す <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRSession\"><code>XRSession</code> <small>(en-US)</small></a> を返します。</p>"}},{"type":"prose","value":{"id":"セッション終了時","title":"セッション終了時","isH3":true,"content":"<p>（ユーザーによる終了か、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRSession/end\"><code>XRSession.end()</code> <small>(en-US)</small></a> の呼び出しで）WebXR セッションが終了すると、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRSession/end_event\"><code>end</code> <small>(en-US)</small></a> イベントが送信されます。 これを、<code>sessionEnded()</code> という関数を呼び出すように設定しました。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">sessionEnded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  xrButton<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> <span class=\"token string\">\"Enter WebXR\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>animationFrameRequestID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    xrSession<span class=\"token punctuation\">.</span><span class=\"token function\">cancelAnimationFrame</span><span class=\"token punctuation\">(</span>animationFrameRequestID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    animationFrameRequestID <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  xrSession <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>プログラムで WebXR セッションを終了したい場合は、<code>sessionEnded()</code> を直接呼び出すこともできます。 いずれの場合も、ボタンのラベルを更新して、クリックによってセッションが開始されることを示します。 その後、アニメーションフレームに対する保留中のリクエストがある場合は、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRSession/cancelAnimationFrame\"><code>cancelAnimationFrame</code> <small>(en-US)</small></a> を呼び出してキャンセルします。</p>\n<p>それが完了すると、<code>xrSession</code> の値を <code>NULL</code> に変更して、セッションが終了したことを示します。</p>"}},{"type":"prose","value":{"id":"コントロールの実装","title":"コントロールの実装","isH3":false,"content":"<p>それでは、キーボードとマウスのイベントを WebXR シナリオでアバターを制御するために使用できるものに変換するコードを見てみましょう。</p>"}},{"type":"prose","value":{"id":"キーボードを使用した移動","title":"キーボードを使用した移動","isH3":true,"content":"<p>空間を移動するための入力を備えた WebXR デバイスがなくても、ユーザーが 3D 世界を移動できるようにするために、<a href=\"/ja/docs/Web/API/Element/keydown_event\" title=\"keydown\"><code>keydown</code></a> のハンドラーである <code>handleKeyDown()</code> は、押されたキーに基づいてオブジェクトの原点からのオフセットを更新することで応答します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">handleKeyDown</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"w\"</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"W\"</span><span class=\"token operator\">:</span>\n      verticalDistance <span class=\"token operator\">-=</span> <span class=\"token constant\">MOVE_DISTANCE</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"s\"</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"S\"</span><span class=\"token operator\">:</span>\n      verticalDistance <span class=\"token operator\">+=</span> <span class=\"token constant\">MOVE_DISTANCE</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"A\"</span><span class=\"token operator\">:</span>\n      transverseDistance <span class=\"token operator\">+=</span> <span class=\"token constant\">MOVE_DISTANCE</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"d\"</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"D\"</span><span class=\"token operator\">:</span>\n      transverseDistance <span class=\"token operator\">-=</span> <span class=\"token constant\">MOVE_DISTANCE</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"ArrowUp\"</span><span class=\"token operator\">:</span>\n      axialDistance <span class=\"token operator\">+=</span> <span class=\"token constant\">MOVE_DISTANCE</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"ArrowDown\"</span><span class=\"token operator\">:</span>\n      axialDistance <span class=\"token operator\">-=</span> <span class=\"token constant\">MOVE_DISTANCE</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"r\"</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"R\"</span><span class=\"token operator\">:</span>\n      transverseDistance <span class=\"token operator\">=</span> axialDistance <span class=\"token operator\">=</span> verticalDistance <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      mouseYaw <span class=\"token operator\">=</span> mousePitch <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>キーとその効果は次のとおりです。</p>\n<ul>\n  <li>\n    <kbd>W</kbd>\n    キーは、ビューアーを <code>MOVE_DISTANCE</code> だけ上に移動します。\n  </li>\n  <li>\n    <kbd>S</kbd>\n    キーは、ビューアーを <code>MOVE_DISTANCE</code> だけ下に移動します。\n  </li>\n  <li>\n    <kbd>A</kbd>\n    キーは、ビューアーを <code>MOVE_DISTANCE</code> だけ左にスライドさせます。\n  </li>\n  <li>\n    <kbd>D</kbd>\n    キーは、ビューアーを <code>MOVE_DISTANCE</code> だけ右にスライドさせます。\n  </li>\n  <li>\n    上矢印キー\n    <kbd>↑</kbd>\n    は、ビューアーを <code>MOVE_DISTANCE</code> だけ前方にスライドさせます。\n  </li>\n  <li>\n    下矢印キー\n    <kbd>↓</kbd>\n    は、ビューアーを <code>MOVE_DISTANCE</code> だけ後方にスライドさせます。\n  </li>\n  <li>\n    <kbd>R</kbd>\n    キーは、入力オフセットをすべて 0 にリセットすることにより、ビューアーを開始位置と方向にリセットします。\n  </li>\n</ul>\n<p>これらのオフセットは、次のフレームの描画からレンダラーによって適用されます。</p>"}},{"type":"prose","value":{"id":"マウスによるピッチとヨー","title":"マウスによるピッチとヨー","isH3":true,"content":"<p>また、マウスの右ボタンが押されているかどうかを確認する <a href=\"/ja/docs/Web/API/Element/mousemove_event\" title=\"mousemove\"><code>mousemove</code></a> イベントハンドラーがあり、押されている場合は、その次に定義されている <code>rotateViewBy()</code> 関数を呼び出して、新しいピッチ（上下を見る）とヨー（左右を見る）の値を計算して保存します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">handlePointerMove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>buttons <span class=\"token operator\">&amp;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">rotateViewBy</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>movementX<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>movementY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>新しいピッチとヨーの値の計算は、次の <code>rotateViewBy()</code> 関数で処理します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">rotateViewBy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dx<span class=\"token punctuation\">,</span> dy</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  mouseYaw <span class=\"token operator\">-=</span> dx <span class=\"token operator\">*</span> <span class=\"token constant\">MOUSE_SPEED</span><span class=\"token punctuation\">;</span>\n  mousePitch <span class=\"token operator\">-=</span> dy <span class=\"token operator\">*</span> <span class=\"token constant\">MOUSE_SPEED</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mousePitch <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span>Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    mousePitch <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mousePitch <span class=\"token operator\">&gt;</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    mousePitch <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>入力としてマウス移動量の <code>dx</code> と <code>dy</code> が与えられると、新しいヨー値は、<code>mouseYaw</code> の現在の値から <code>dx</code> と <code>MOUSE_SPEED</code> スケーリング定数の積を引くことで計算します。 そして、<code>MOUSE_SPEED</code> の値を増やすことで、マウスの応答性を制御できます。</p>"}},{"type":"prose","value":{"id":"フレームの描画","title":"フレームの描画","isH3":false,"content":"<p><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRSession/requestAnimationFrame\"><code>XRSession.requestAnimationFrame()</code> <small>(en-US)</small></a> のコールバックは、以下に示す <code>drawFrame()</code> 関数に実装されています。 その仕事は、ビューアーの参照空間を取得し、最後のフレームからの経過時間を考慮して、アニメーション化されたオブジェクトに適用する必要のある動きの量を計算し、ビューアーの <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRPose\"><code>XRPose</code> <small>(en-US)</small></a> によって指定された各ビューをレンダリングすることです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> lastFrameTime <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">drawFrame</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time<span class=\"token punctuation\">,</span> frame</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> session <span class=\"token operator\">=</span> frame<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> adjustedRefSpace <span class=\"token operator\">=</span> xrReferenceSpace<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> pose <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  animationFrameRequestID <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>drawFrame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  adjustedRefSpace <span class=\"token operator\">=</span> <span class=\"token function\">applyViewerControls</span><span class=\"token punctuation\">(</span>xrReferenceSpace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  pose <span class=\"token operator\">=</span> frame<span class=\"token punctuation\">.</span><span class=\"token function\">getViewerPose</span><span class=\"token punctuation\">(</span>adjustedRefSpace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pose<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> glLayer <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>renderState<span class=\"token punctuation\">.</span>baseLayer<span class=\"token punctuation\">;</span>\n\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindFramebuffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">FRAMEBUFFER</span><span class=\"token punctuation\">,</span> glLayer<span class=\"token punctuation\">.</span>framebuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">LogGLError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bindFrameBuffer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">clearColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">clearDepth</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// Clear everything</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">COLOR_BUFFER_BIT</span> <span class=\"token operator\">|</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">DEPTH_BUFFER_BIT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">LogGLError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"glClear\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> deltaTime <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>time <span class=\"token operator\">-</span> lastFrameTime<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.001</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Convert to seconds</span>\n    lastFrameTime <span class=\"token operator\">=</span> time<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> view <span class=\"token keyword\">of</span> pose<span class=\"token punctuation\">.</span>views<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> viewport <span class=\"token operator\">=</span> glLayer<span class=\"token punctuation\">.</span><span class=\"token function\">getViewport</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      gl<span class=\"token punctuation\">.</span><span class=\"token function\">viewport</span><span class=\"token punctuation\">(</span>viewport<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> viewport<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> viewport<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> viewport<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">LogGLError</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Setting viewport for eye: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>view<span class=\"token punctuation\">.</span>eye<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      gl<span class=\"token punctuation\">.</span>canvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> viewport<span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> pose<span class=\"token punctuation\">.</span>views<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n      gl<span class=\"token punctuation\">.</span>canvas<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> viewport<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">renderScene</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> view<span class=\"token punctuation\">,</span> programInfo<span class=\"token punctuation\">,</span> buffers<span class=\"token punctuation\">,</span> texture<span class=\"token punctuation\">,</span> deltaTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>最初に行うことは、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRSession/requestAnimationFrame\"><code>requestAnimationFrame()</code> <small>(en-US)</small></a> を呼び出して、次のフレームをレンダリングするために <code>drawFrame()</code> を再度呼び出すように要求することです。 次に、オブジェクトの参照空間を <code>applyViewerControls()</code> 関数に渡します。 この関数は、キーボードとマウスを使用してユーザーが適用した移動、ピッチ、ヨーを考慮してオブジェクトの位置と方向を変換する、改訂された <a href=\"/ja/docs/Web/API/XRReferenceSpace\"><code>XRReferenceSpace</code></a> を返します。 いつものように、ビューアーではなく、世界のオブジェクトを、移動し、方向を変更することを忘れないでください。 返された参照空間により、それを簡単に行うことができます。</p>\n<p>新しい参照空間が手元にあると、ビューアーの両目の視点を表す <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRViewerPose\"><code>XRViewerPose</code> <small>(en-US)</small></a> が得られます。 それが成功した場合は、セッションで使用されている <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRWebGLLayer\"><code>XRWebGLLayer</code> <small>(en-US)</small></a> を取得し、そのフレームバッファーを WebGL フレームバッファーとして使用するようにバインドすることでレンダリングの準備を開始します（WebGL のレンダリングはレイヤーに描画することで、XR デバイスのディスプレイに描画されます）。 XR デバイスにレンダリングするように WebGL が構成されたので、フレームを黒にクリアして、レンダリングを開始する準備が整いました。</p>\n<p>最後のフレームがレンダリングされてからの経過時間（秒単位）は、<code>time</code> パラメーターで指定された現在の時刻から前のフレームのタイムスタンプ <code>lastFrameTime</code> を減算し、0.001 を掛けてミリ秒を秒に変換することで計算します。 次に、現在の時刻を <code>lastFrameTime</code> に保存します。</p>\n<p><code>drawFrame()</code> 関数は、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRViewerPose\"><code>XRViewerPose</code> <small>(en-US)</small></a> で見つかったすべてのビューを反復処理し、ビューのビューポートを設定し、<code>renderScene()</code> を呼び出してフレームをレンダリングすることで終了します。 各ビューのビューポートを設定することにより、各目のビューがそれぞれ WebGL フレームの半分にレンダリングされる典型的なシナリオを処理します。 次に、XR ハードウェアは、各目がその目向けの画像の部分のみを表示するように処理します。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> この例では、XR デバイスと画面の両方にフレームを視覚的に表示しています。 画面上のキャンバスがこれを実行できる適切なサイズであることを確認するために、その幅を個々の <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRView\"><code>XRView</code> <small>(en-US)</small></a> の幅にビューの数を掛けたものに等しくなるように設定します。 キャンバスの高さは常にビューポートの高さと同じです。 キャンバスサイズを調整する 2 行のコードは、通常の WebXR レンダリングループでは必要ありません。</p>\n</div>"}},{"type":"prose","value":{"id":"ユーザー入力の適用","title":"ユーザー入力の適用","isH3":true,"content":"<p>何かをレンダリングし始める前に <code>drawFrame()</code> によって呼び出される <code>applyViewerControls()</code> 関数は、ユーザーがキーを押したり、マウスの右ボタンを押したままマウスをドラッグしたときに <code>handleKeyDown()</code> 関数と <code>handlePointerMove()</code> 関数によって記録された 3 方向のそれぞれのオフセット、ヨーオフセット、およびピッチオフセットを取得します。 オブジェクトのベース参照空間を入力として受け取り、入力の結果と一致するようにオブジェクトの位置と方向を変更する新しい参照空間を返します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">applyViewerControls</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">refSpace</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mouseYaw <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>mousePitch <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>axialDistance <span class=\"token operator\">&amp;&amp;</span>\n      <span class=\"token operator\">!</span>transverseDistance <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>verticalDistance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> refSpace<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  quat<span class=\"token punctuation\">.</span><span class=\"token function\">identity</span><span class=\"token punctuation\">(</span>inverseOrientation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  quat<span class=\"token punctuation\">.</span><span class=\"token function\">rotateX</span><span class=\"token punctuation\">(</span>inverseOrientation<span class=\"token punctuation\">,</span> inverseOrientation<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>mousePitch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  quat<span class=\"token punctuation\">.</span><span class=\"token function\">rotateY</span><span class=\"token punctuation\">(</span>inverseOrientation<span class=\"token punctuation\">,</span> inverseOrientation<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>mouseYaw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> newTransform <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XRRigidTransform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> transverseDistance<span class=\"token punctuation\">,</span>\n                                           <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> verticalDistance<span class=\"token punctuation\">,</span>\n                                           <span class=\"token literal-property property\">z</span><span class=\"token operator\">:</span> axialDistance<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                         <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> inverseOrientation<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> inverseOrientation<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                          <span class=\"token literal-property property\">z</span><span class=\"token operator\">:</span> inverseOrientation<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">w</span><span class=\"token operator\">:</span> inverseOrientation<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  mat4<span class=\"token punctuation\">.</span><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>mouseMatrix<span class=\"token punctuation\">,</span> newTransform<span class=\"token punctuation\">.</span>matrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> refSpace<span class=\"token punctuation\">.</span><span class=\"token function\">getOffsetReferenceSpace</span><span class=\"token punctuation\">(</span>newTransform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>すべての入力オフセットがゼロの場合、元の参照空間を返すだけです。 それ以外の場合は、<code>mousePitch</code> と <code>mouseYaw</code> の方向の変更から、その方向の逆を指定するクォータニオンを作成します。 これにより、<code>inverseOrientation</code> を立方体に適用すると、ビューアーの動きが正しく表示されます。</p>\n<p>次に、移動または方向変更されたオブジェクトの新しい <a href=\"/ja/docs/Web/API/XRReferenceSpace\"><code>XRReferenceSpace</code></a> を作成するために使用する変換を表す新しい <a href=\"/ja/docs/Web/API/XRRigidTransform\"><code>XRRigidTransform</code></a> オブジェクトを作成します。 位置は、<code>x</code>、<code>y</code>、<code>z</code> がこれらの各軸に沿って移動したオフセットに対応する新しいベクトルです。 方向は、<code>inverseOrientation</code> クォータニオンです。</p>\n<p>変換の <a href=\"/ja/docs/Web/API/XRRigidTransform/matrix\" title=\"matrix\"><code>matrix</code></a> を <code>mouseMatrix</code> にコピーします。 これは、後でマウス追跡行列（Mouse tracking matrix）をユーザーに表示するために使用します（したがって、これは通常スキップできる手順です）。 最後に、<code>XRRigidTransform</code> をオブジェクトの現在の <a href=\"/ja/docs/Web/API/XRReferenceSpace\"><code>XRReferenceSpace</code></a> に渡して、この変換を統合し、ユーザーの動きを考慮したユーザーに対する立方体の配置を表す参照空間を取得します。 その新しい参照空間を呼び出し元に返します。</p>"}},{"type":"prose","value":{"id":"シーンのレンダリング","title":"シーンのレンダリング","isH3":true,"content":"<p><code>renderScene()</code> 関数は、ユーザーがその瞬間に見える世界の部分を実際にレンダリングするために呼び出されます。 XR ギアに必要な 3D 効果を確立するために、それぞれの目でわずかに異なる位置を使用し、それぞれの目に対して 1 回ずつ呼び出されます。</p>\n<p>このコードのほとんどは、<a href=\"/ja/docs/Web/API/WebGL_API/Tutorial/Lighting_in_WebGL\">WebGL でのライティング</a>の記事の <code>drawScene()</code> 関数から直接取得した典型的な WebGL レンダリングコードであり、この例の WebGL レンダリング部分の詳細についてはそこを参照してください（<a href=\"https://github.com/mdn/webgl-examples/blob/gh-pages/tutorial/sample7/webgl-demo.js\" class=\"external\" rel=\" noopener\">GitHub でコードを見る</a>）。 しかし、ここでは、この例に固有のコードから始まっているので、その部分について詳しく見ていきます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> normalMatrix <span class=\"token operator\">=</span> mat4<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> modelViewMatrix <span class=\"token operator\">=</span> mat4<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">renderScene</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">gl<span class=\"token punctuation\">,</span> view<span class=\"token punctuation\">,</span> programInfo<span class=\"token punctuation\">,</span> buffers<span class=\"token punctuation\">,</span> texture<span class=\"token punctuation\">,</span> deltaTime</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> xRotationForTime <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>xRotationDegreesPerSecond <span class=\"token operator\">*</span> <span class=\"token constant\">RADIANS_PER_DEGREE</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> deltaTime<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> yRotationForTime <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>yRotationDegreesPerSecond <span class=\"token operator\">*</span> <span class=\"token constant\">RADIANS_PER_DEGREE</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> deltaTime<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> zRotationForTime <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>zRotationDegreesPerSecond <span class=\"token operator\">*</span> <span class=\"token constant\">RADIANS_PER_DEGREE</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> deltaTime<span class=\"token punctuation\">;</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">enable</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">DEPTH_TEST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// Enable depth testing</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">depthFunc</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">LEQUAL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// Near things obscure far things</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>enableRotation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    mat4<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>cubeMatrix<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// destination matrix</span>\n                cubeMatrix<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// matrix to rotate</span>\n                zRotationForTime<span class=\"token punctuation\">,</span>     <span class=\"token comment\">// amount to rotate in radians</span>\n                <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// axis to rotate around (Z)</span>\n    mat4<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>cubeMatrix<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// destination matrix</span>\n                cubeMatrix<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// matrix to rotate</span>\n                yRotationForTime<span class=\"token punctuation\">,</span> <span class=\"token comment\">// amount to rotate in radians</span>\n                <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// axis to rotate around (Y)</span>\n    mat4<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>cubeMatrix<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// destination matrix</span>\n                cubeMatrix<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// matrix to rotate</span>\n                xRotationForTime<span class=\"token punctuation\">,</span> <span class=\"token comment\">// amount to rotate in radians</span>\n                <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// axis to rotate around (X)</span>\n  <span class=\"token punctuation\">}</span>\n\n  mat4<span class=\"token punctuation\">.</span><span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span>modelViewMatrix<span class=\"token punctuation\">,</span> view<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>inverse<span class=\"token punctuation\">.</span>matrix<span class=\"token punctuation\">,</span> cubeMatrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  mat4<span class=\"token punctuation\">.</span><span class=\"token function\">invert</span><span class=\"token punctuation\">(</span>normalMatrix<span class=\"token punctuation\">,</span> modelViewMatrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  mat4<span class=\"token punctuation\">.</span><span class=\"token function\">transpose</span><span class=\"token punctuation\">(</span>normalMatrix<span class=\"token punctuation\">,</span> normalMatrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">displayMatrix</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">.</span>projectionMatrix<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> projectionMatrixOut<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">displayMatrix</span><span class=\"token punctuation\">(</span>modelViewMatrix<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> modelMatrixOut<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">displayMatrix</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>matrix<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> cameraMatrixOut<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">displayMatrix</span><span class=\"token punctuation\">(</span>mouseMatrix<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> mouseMatrixOut<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> numComponents <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> type <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">FLOAT</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> normalize <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> stride <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindBuffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> buffers<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">vertexAttribPointer</span><span class=\"token punctuation\">(</span>\n        programInfo<span class=\"token punctuation\">.</span>attribLocations<span class=\"token punctuation\">.</span>vertexPosition<span class=\"token punctuation\">,</span>\n        numComponents<span class=\"token punctuation\">,</span>\n        type<span class=\"token punctuation\">,</span>\n        normalize<span class=\"token punctuation\">,</span>\n        stride<span class=\"token punctuation\">,</span>\n        offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">enableVertexAttribArray</span><span class=\"token punctuation\">(</span>\n        programInfo<span class=\"token punctuation\">.</span>attribLocations<span class=\"token punctuation\">.</span>vertexPosition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> numComponents <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> type <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">FLOAT</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> normalize <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> stride <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindBuffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> buffers<span class=\"token punctuation\">.</span>textureCoord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">vertexAttribPointer</span><span class=\"token punctuation\">(</span>\n        programInfo<span class=\"token punctuation\">.</span>attribLocations<span class=\"token punctuation\">.</span>textureCoord<span class=\"token punctuation\">,</span>\n        numComponents<span class=\"token punctuation\">,</span>\n        type<span class=\"token punctuation\">,</span>\n        normalize<span class=\"token punctuation\">,</span>\n        stride<span class=\"token punctuation\">,</span>\n        offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">enableVertexAttribArray</span><span class=\"token punctuation\">(</span>\n        programInfo<span class=\"token punctuation\">.</span>attribLocations<span class=\"token punctuation\">.</span>textureCoord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> numComponents <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> type <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">FLOAT</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> normalize <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> stride <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindBuffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> buffers<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">vertexAttribPointer</span><span class=\"token punctuation\">(</span>\n        programInfo<span class=\"token punctuation\">.</span>attribLocations<span class=\"token punctuation\">.</span>vertexNormal<span class=\"token punctuation\">,</span>\n        numComponents<span class=\"token punctuation\">,</span>\n        type<span class=\"token punctuation\">,</span>\n        normalize<span class=\"token punctuation\">,</span>\n        stride<span class=\"token punctuation\">,</span>\n        offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">enableVertexAttribArray</span><span class=\"token punctuation\">(</span>\n        programInfo<span class=\"token punctuation\">.</span>attribLocations<span class=\"token punctuation\">.</span>vertexNormal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindBuffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ELEMENT_ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> buffers<span class=\"token punctuation\">.</span>indices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">useProgram</span><span class=\"token punctuation\">(</span>programInfo<span class=\"token punctuation\">.</span>program<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">uniformMatrix4fv</span><span class=\"token punctuation\">(</span>\n      programInfo<span class=\"token punctuation\">.</span>uniformLocations<span class=\"token punctuation\">.</span>projectionMatrix<span class=\"token punctuation\">,</span>\n      <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      view<span class=\"token punctuation\">.</span>projectionMatrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">uniformMatrix4fv</span><span class=\"token punctuation\">(</span>\n      programInfo<span class=\"token punctuation\">.</span>uniformLocations<span class=\"token punctuation\">.</span>modelViewMatrix<span class=\"token punctuation\">,</span>\n      <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      modelViewMatrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">uniformMatrix4fv</span><span class=\"token punctuation\">(</span>\n      programInfo<span class=\"token punctuation\">.</span>uniformLocations<span class=\"token punctuation\">.</span>normalMatrix<span class=\"token punctuation\">,</span>\n      <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      normalMatrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">activeTexture</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindTexture</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_2D</span><span class=\"token punctuation\">,</span> texture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">uniform1i</span><span class=\"token punctuation\">(</span>programInfo<span class=\"token punctuation\">.</span>uniformLocations<span class=\"token punctuation\">.</span>uSampler<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> vertexCount <span class=\"token operator\">=</span> <span class=\"token number\">36</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> type <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">UNSIGNED_SHORT</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">drawElements</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TRIANGLES</span><span class=\"token punctuation\">,</span> vertexCount<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>renderScene()</code> は、前のフレームがレンダリングされてから経過した時間内に、3 つの軸のそれぞれの周りで発生する回転量を計算することから始まります。 これらの値により、アニメーションする立方体の回転を適切な量に調整して、システムの負荷によって発生する可能性のあるフレームレートの変動に関係なく、その移動速度が一定に保たれるようにすることができます。 これらの値は、経過時間を指定して適用する回転のラジアン数として計算して、定数の <code>xRotationForTime</code>、<code>yRotationForTime</code>、<code>zRotationForTime</code> に格納します。</p>\n<p>奥行きテストを有効にして構成した後、<code>enableRotation</code> 定数の値をチェックして、立方体の回転が有効になっているかどうかを確認します。 そうである場合は、glMatrix を使用して、3 つの軸を中心に <code>cubeMatrix</code>（世界空間に対する立方体の現在の方向を表す）を回転させます。 立方体のグローバルな方向が確立されたら、それをビューの変換行列の逆行列で乗算して、最終的なモデルビュー行列を取得します。 この行列は、オブジェクトに適用して、アニメーションの目的でそれを回転させるだけでなく、それを移動したり方向を変えたりして、空間を介したビューアーのモーションをシミュレートすることもします。</p>\n<p>次に、モデルビュー行列を取得して反転（逆行列を計算）し、転置（列と行を入れ替える）することで、ビューの正規行列を計算します。</p>\n<p>この例で追加されたコードの最後の数行は、ユーザーによる分析のために行列の内容を表示する関数である <code>displayMatrix()</code> への 4 つの呼び出しです。 関数の残りの部分は、このコードの派生元である古い WebGL サンプルと同一または本質的に同一です。</p>"}},{"type":"prose","value":{"id":"行列の表示","title":"行列の表示","isH3":true,"content":"<p>この例では、説明のために、シーンのレンダリング中に使用している重要な行列の内容を表示しています。 これには、<code>displayMatrix()</code> 関数を使用します。 この関数は MathML を使用して行列をレンダリングし、MathML がユーザーのブラウザーでサポートされていない場合は、より配列に近い形式にフォールバックします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">displayMatrix</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mat<span class=\"token punctuation\">,</span> rowLength<span class=\"token punctuation\">,</span> target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> outHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mat <span class=\"token operator\">&amp;&amp;</span> rowLength <span class=\"token operator\">&amp;&amp;</span> rowLength <span class=\"token operator\">&lt;=</span> mat<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> numRows <span class=\"token operator\">=</span> mat<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> rowLength<span class=\"token punctuation\">;</span>\n    outHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;math xmlns='http://www.w3.org/1998/Math/MathML' display='block'&gt;\\n&lt;mrow&gt;\\n&lt;mo&gt;[&lt;/mo&gt;\\n&lt;mtable&gt;\\n\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> y<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">&lt;</span>numRows<span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      outHTML <span class=\"token operator\">+=</span> <span class=\"token string\">\"&lt;mtr&gt;\\n\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">&lt;</span>rowLength<span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        outHTML <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;mtd&gt;&lt;mn&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>mat<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>rowLength<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/mn&gt;&lt;/mtd&gt;\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      outHTML <span class=\"token operator\">+=</span> <span class=\"token string\">\"&lt;/mtr&gt;\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    outHTML <span class=\"token operator\">+=</span> <span class=\"token string\">\"&lt;/mtable&gt;\\n&lt;mo&gt;]&lt;/mo&gt;\\n&lt;/mrow&gt;\\n&lt;/math&gt;\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  target<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> outHTML<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これにより、<code>target</code> で指定された要素の内容が、4x4 行列を含む新しく作成された <code><a href=\"/ja/docs/Web/MathML/Element/math\" title=\"<math>\">&lt;math&gt;</a></code> 要素に置き換えられます。 各エントリーは、小数点以下 2 桁まで表示します。</p>"}},{"type":"prose","value":{"id":"ほかのすべて","title":"ほかのすべて","isH3":true,"content":"<p>残りのコードは、前の例で見つかったものと同じです。</p>\n<dl>\n  <dt id=\"initshaderprogram\"><code>initShaderProgram()</code></dt>\n  <dd>\n    <p>GLSL シェーダープログラムを初期化し、<code>loadShader()</code> を呼び出して各シェーダーのプログラムをロードおよびコンパイルしてから、各シェーダーを WebGL コンテキストにアタッチします。 それらがコンパイルされると、プログラムはリンクされ、呼び出し元に返されます。</p>\n  </dd>\n  <dt id=\"loadshader\"><code>loadShader()</code></dt>\n  <dd>\n    <p>シェーダーオブジェクトを作成し、指定されたソースコードをそのオブジェクトにロードしてから、コードをコンパイルし、コンパイラが成功したことを確認してから、新しくコンパイルされたシェーダーを呼び出し元に返します。 エラーが発生した場合は、代わりに <code>NULL</code> を返します。</p>\n  </dd>\n  <dt id=\"initbuffers\"><code>initBuffers()</code></dt>\n  <dd>\n    <p>WebGL に渡すデータを含んだバッファーを初期化します。 これらのバッファーには、頂点位置の配列、頂点法線の配列、立方体の各面のテクスチャー座標、および頂点インデックスの配列（頂点リストのどのエントリーが立方体のそれそれの角を表すかを指定）が含まれます。</p>\n  </dd>\n  <dt id=\"loadtexture\"><code>loadTexture()</code></dt>\n  <dd>\n    <p>指定された URL で画像をロードし、そこから WebGL テクスチャーを作成します。 画像の寸法が両方とも 2 の累乗でない場合（<code>isPowerOf2()</code> 関数を参照）、ミップマップを無効とし、ラッピングをエッジに固定します。 これは、ミップマップテクスチャーの最適化されたレンダリングが、WebGL 1 の 2 の累乗の寸法のテクスチャーに対してのみ機能するためです。 WebGL 2 は、ミップマップに任意の寸法のテクスチャーをサポートしています。</p>\n  </dd>\n  <dt id=\"ispowerof2\"><code>isPowerOf2()</code></dt>\n  <dd>\n    <p>指定された値が 2 の累乗の場合、<code>true</code> を返します。 それ以外の場合は <code>false</code> を返します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"すべてをまとめる","title":"すべてをまとめる","isH3":true,"content":"<p>このコードをすべて取得して、上記に含まれていない HTML およびその他の JavaScript コードを追加すると、この例を <a href=\"https://webxr-experiment.glitch.me/\" class=\"external\" rel=\" noopener\">Glitch で試した</a>ときに表示されるものが得られます。 覚えておいてください、歩き回って迷子になったら、<kbd>R</kbd> キーを押すだけで最初に戻ることができます。</p>\n<p>ヒント: XR デバイスをお持ちでない場合は、顔を画面に非常に近づけて、キャンバス内の左目と右目の画像の境界に沿って鼻を中央に配置すると、3D 効果を得ることができるかもしれません。 画面を通して画像に注意深く焦点を合わせ、ゆっくりと前後に動くことで、最終的に 3D 画像に焦点を合わせることができるはずです。 これには練習が必要で、視力の鋭さによっては、文字通り鼻が画面に触れているかもしれません。</p>\n<p>この例を出発点として、できることはたくさんあります。 世界にオブジェクトを追加したり、移動コントロールを改善してよりリアルに移動してみてください。 壁、天井、床を追加して、無限に見える宇宙に迷うのではなく、空間に閉じ込めます。 衝突テストやヒットテスト、または立方体の各面のテクスチャーを変更する機能を追加します。</p>\n<p>自分で設定すれば、できることに制限はほとんどありません。</p>"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"http://learnwebgl.brown37.net/#\" class=\"external\" rel=\" noopener\">WebGL を学ぶ</a>（英語、カメラの優れた視覚化と、それが仮想世界とどのように関連しているかを含む）</li>\n  <li><a href=\"https://webglfundamentals.org/webgl/lessons/ja/\" class=\"external\" rel=\" noopener\">WebGL の基本</a></li>\n  <li><a href=\"https://learnopengl.com/\" class=\"external\" rel=\" noopener\">OpenGL を学ぶ</a>（英語）</li>\n</ul>"}}],"toc":[{"text":"依存関係","id":"依存関係"},{"text":"オプション","id":"オプション"},{"text":"セットアップおよびユーティリティ関数","id":"セットアップおよびユーティリティ関数"},{"text":"WebXR の起動と停止","id":"webxr_の起動と停止"},{"text":"コントロールの実装","id":"コントロールの実装"},{"text":"フレームの描画","id":"フレームの描画"},{"text":"関連情報","id":"関連情報"}],"summary":"この記事では、WebXR チュートリアルシリーズの以前の記事で紹介した情報を利用して、ユーザーが VR ヘッドセット、キーボード、マウスを使用して自由に移動できる回転立方体をアニメーション化する例を作成します。 これは、3D グラフィックスと VR の幾何学がどのように機能するかについての理解を深めるのに役立つだけでなく、XR レンダリング中に使用される関数とデータがどのように連携するかを確実に理解するのに役立ちます。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Movement, orientation, and motion: A WebXR example","locale":"en-US","native":"English (US)"}],"source":{"folder":"ja/web/api/webxr_device_api/movement_and_motion","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/webxr_device_api/movement_and_motion/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/WebXR_Device_API","title":"WebXR Device API"},{"uri":"/ja/docs/Web/API/WebXR_Device_API/Movement_and_motion","title":"移動、向き、モーション: WebXR の例"}],"pageTitle":"移動、向き、モーション: WebXR の例 - Web API | MDN","noIndexing":false}}