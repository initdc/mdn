{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"視点とビューアー: WebXR でのカメラのシミュレーション","mdn_url":"/ja/docs/Web/API/WebXR_Device_API/Cameras","locale":"ja","native":"日本語","hasMathML":true,"sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/WebXR_Device_API\">WebXR Device API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>ガイド</summary><ol><li><a href=\"/ja/docs/Web/API/WebXR_Device_API/Fundamentals\">Fundamentals of WebXR</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>インターフェイス</summary><ol><li><a href=\"/ja/docs/Web/API/XRAnchor\"><code>XRAnchor</code></a></li><li><a href=\"/ja/docs/Web/API/XRBoundedReferenceSpace\"><code>XRBoundedReferenceSpace</code></a></li><li><a href=\"/ja/docs/Web/API/XRCPUDepthInformation\"><code>XRCPUDepthInformation</code></a></li><li><a href=\"/ja/docs/Web/API/XRDepthInformation\"><code>XRDepthInformation</code></a></li><li><a href=\"/ja/docs/Web/API/XRFrame\"><code>XRFrame</code></a></li><li><a href=\"/ja/docs/Web/API/XRInputSource\"><code>XRInputSource</code></a></li><li><a href=\"/ja/docs/Web/API/XRInputSourceArray\"><code>XRInputSourceArray</code></a></li><li><a href=\"/ja/docs/Web/API/XRInputSourceEvent\"><code>XRInputSourceEvent</code></a></li><li><a href=\"/ja/docs/Web/API/XRInputSourcesChangeEvent\"><code>XRInputSourcesChangeEvent</code></a></li><li><a href=\"/ja/docs/Web/API/XRPose\"><code>XRPose</code></a></li><li><a href=\"/ja/docs/Web/API/XRReferenceSpace\"><code>XRReferenceSpace</code></a></li><li><a href=\"/ja/docs/Web/API/XRReferenceSpaceEvent\"><code>XRReferenceSpaceEvent</code></a></li><li><a href=\"/ja/docs/Web/API/XRRenderState\"><code>XRRenderState</code></a></li><li><a href=\"/ja/docs/Web/API/XRRigidTransform\"><code>XRRigidTransform</code></a></li><li><a href=\"/ja/docs/Web/API/XRSession\"><code>XRSession</code></a></li><li><a href=\"/ja/docs/Web/API/XRSessionEvent\"><code>XRSessionEvent</code></a></li><li><a href=\"/ja/docs/Web/API/XRSpace\"><code>XRSpace</code></a></li><li><a href=\"/ja/docs/Web/API/XRSystem\"><code>XRSystem</code></a></li><li><a href=\"/ja/docs/Web/API/XRView\"><code>XRView</code></a></li><li><a href=\"/ja/docs/Web/API/XRViewerPose\"><code>XRViewerPose</code></a></li><li><a href=\"/ja/docs/Web/API/XRViewport\"><code>XRViewport</code></a></li><li><a href=\"/ja/docs/Web/API/XRWebGLBinding\"><code>XRWebGLBinding</code></a></li><li><a href=\"/ja/docs/Web/API/XRWebGLDepthInformation\"><code>XRWebGLDepthInformation</code></a></li><li><a href=\"/ja/docs/Web/API/XRWebGLLayer\"><code>XRWebGLLayer</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>プロパティ</summary><ol><li><a href=\"/ja/docs/Web/API/Navigator/xr\"><code>Navigator.xr</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>メソッド</summary><ol><li><a href=\"/ja/docs/Web/API/WebGLRenderingContext/makeXRCompatible\"><code>WebGLRenderingContext.makeXRCompatible()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>イベント</summary><ol><li><a href=\"/ja/docs/Web/API/XRReferenceSpace/reset_event\"><code>XRReferenceSpace</code>: <code>reset</code></a></li><li><a href=\"/ja/docs/Web/API/XRSession/end_event\"><code>XRSession</code>: <code>end</code></a></li><li><a href=\"/ja/docs/Web/API/XRSession/inputsourceschange_event\"><code>XRSession</code>: <code>inputsourceschange</code></a></li><li><a href=\"/ja/docs/Web/API/XRSession/select_event\"><code>XRSession</code>: <code>select</code></a></li><li><a href=\"/ja/docs/Web/API/XRSession/selectend_event\"><code>XRSession</code>: <code>selectend</code></a></li><li><a href=\"/ja/docs/Web/API/XRSession/selectstart_event\"><code>XRSession</code>: <code>selectstart</code></a></li><li><a href=\"/ja/docs/Web/API/XRSession/visibilitychange_event\"><code>XRSession</code>: <code>visibilitychange</code></a></li><li><a href=\"/ja/docs/Web/API/XRSystem/devicechange_event\"><code>XRSystem</code>: <code>devicechange</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>アプリケーションで視点とカメラを管理するためのコードを検討する際に理解する最初で最も重要なことは、<em>WebXR にカメラがないこと</em>です。 <a href=\"/ja/docs/Web/API/WebGL_API\">WebGL</a> または WebXR API によって提供される、回転して移動するだけで画面に表示されるものを自動的に変更できるビューアーを表す魔法のオブジェクトはありません。 このガイドでは、カメラを動かさずに <a href=\"/ja/docs/Web/API/WebGL_API\">WebGL</a> を使用してカメラの動きをシミュレートする方法を示します。 これらの手法は、任意の WebGL（または WebXR）プロジェクトで使用できます。</p>\n<p>3D グラフィックスのアニメーション化は、コンピューターサイエンス、数学、芸術、グラフィックデザイン、運動学、解剖学、生理学、物理学、および映画撮影における複数の分野を統合するソフトウェア開発の領域です。 私たちは実際のカメラを持っていないので、実際にユーザーをシーン内で動かすことなく、カメラを持っているかのような<em>効果</em>を再現するカメラを想像します。</p>\n<p>WebGL と WebXR の背後にある基本的な数学、幾何学、およびその他の概念についての記事がいくつかあります。 これは、この記事を読む前または読んでいるときに役立つかもしれません。</p>\n<ul>\n  <li><a href=\"/ja/docs/Games/Techniques/3D_on_the_web/Basic_theory\">基本の 3D 理論の説明</a></li>\n  <li><a href=\"/ja/docs/Web/API/WebGL_API/Matrix_math_for_the_web\">ウェブの行列計算</a></li>\n  <li><a href=\"/ja/docs/Web/API/WebGL_API/WebGL_model_view_projection\">WebGL モデル ビュー 射影</a></li>\n  <li><a href=\"/ja/docs/Web/API/WebXR_Device_API/Geometry\">WebXR の幾何学と参照空間</a></li>\n</ul>\n<p><em>編注: この記事で使用されているほとんどの図は、標準的な動作を実行しながらカメラがどのように動くかを示すために、<a href=\"https://filmmakeriq.com/2016/09/the-importance-and-not-so-importance-of-film-terminology/\" class=\"external\" rel=\" noopener\">FilmmakerIQ ウェブサイトの記事</a>から取られました。 つまり、ウェブ全体で見られる<a href=\"https://filmmakeriq.com/wp-content/uploads/2016/09/Pan-Tilt.png\" class=\"external\" rel=\" noopener\">この画像</a>からです。 それらは頻繁に再利用されるため、許可されたライセンスの下で利用できると想定しているため、所有権は不明です。 私たちはそれが自由に使えることを望みます。 そうでない場合で、あなたが所有者である場合はお知らせください。 新しい図を検索または作成します。 または、画像の使用を継続してよろしければ、適切にクレジットできるようにお知らせください。</em></p>"}},{"type":"prose","value":{"id":"カメラと相対運動","title":"カメラと相対運動","isH3":false,"content":"<p>古典的な実写映画を撮影する時は、俳優はセットにいて、演技しながらセットを動きまわり、1 台以上のカメラでその動きを見守ります。 カメラは固定することもできますが、動き回るように設定したり、パフォーマーの動きを追跡したり、ドリーイン/アウトして感情的な影響を与えたりすることもできます。</p>"}},{"type":"prose","value":{"id":"仮想カメラ","title":"仮想カメラ","isH3":true,"content":"<p>WebGL（そして、拡張によって、WebXR）では、移動および回転できるカメラオブジェクトがないため、これらの動きのふりをする方法を見つける必要があります。 カメラがないので、そのふりをする方法を見つけなければなりません。 幸いなことに、ガリレオ、ニュートン、ローレンツ、アインシュタインのような物理学者は私たちに**<a title=\"相対性原理\" href=\"https://ja.wikipedia.org/wiki/相対性原理\" class=\"external\" rel=\" noopener\">相対性原理</a>**を与えてくれました。 それは物理学の法則がすべての参照系で同じ形であると述べています。 つまり、どこに立っていても、物理法則は同じように機能します。</p>\n<p>つまり、あなたと他の人が固い石の何もないフィールドに立っていて、目に見える限り他のものが見えない場合、あなたが他の人に向かって 3 メートル移動すると、他の人があなたに向かって 3 メートル移動した場合と<em>同じ</em>結果になります。 どちらにも違いを見分ける方法はありません。 第三者は違いを見分けることができますが、2 人にはできません。 カメラの場合は、カメラを動かすか、<em>カメラの周りのすべてを動かす</em>ことで、同じ視覚結果を得ることができます。</p>\n<p>そしてそれが私たちの解決策です。 カメラを動かすことができないので、カメラの周りの世界を動かします。 レンダラーは、カメラがどこにあると想像するかを知っている必要があります。 次に、すべての可視オブジェクトの位置を変更して、その位置と方向をシミュレートします。 したがって、実際のカメラオブジェクトを参照する代わりに、WebGL および WebXR プログラミングでは<strong>カメラ</strong>（camera）という用語を使用して、3D 空間に実際のオブジェクトが存在するかどうかにかかわらず、シーンの仮定のビューアーの位置と視線方向を表すオブジェクトを参照します。</p>"}},{"type":"prose","value":{"id":"視点","title":"視点","isH3":true,"content":"<p>カメラは仮想オブジェクトであり、必ずしも仮想世界の物理的なオブジェクトを表すのではなく、ビューアーの位置と視線方向を表すため、カメラの使用を必要とする状況の種類について考えることは役立ちます。 ゲーム関連の状況は、多くの場合ゲーム固有の特殊なケースであるため、個別にリストされていますが、これらのパースペクティブのいずれも 3D グラフィックシーンに適用される場合があります。</p>\n<h4 id=\"一般化されたカメラ\">一般化されたカメラ</h4>\n<p>一般に、仮想カメラはシーン内の物理オブジェクトに組み込まれる場合と組み込まれない場合があります。 実際、3D ゲームの範囲外では、カメラがシーンに表示されるオブジェクトとまったく対応しない可能性がはるかに高くなります。 次が 3D カメラの使用例です。</p>\n<ul>\n  <li>アニメーションをレンダリングするとき — 映画制作のために、またはプレゼンテーションやゲームのコンテキスト内で使用するために — 仮想カメラは、実世界のフィルムカメラのように使用されます。 視聴者（ビューアー）はおそらくそれらの手法を使用して映画を鑑賞して成長しており、映画やアニメーションがそれらの方法に従うという潜在意識の期待があるため、可能な限り、<a href=\"/ja/docs/Web/API/WebXR_Device_API/Cameras#Simulating_classic_cinematography\" aria-current=\"page\">標準の映画撮影手法</a>が使用されます。 それらから逸脱すると、視聴者をその瞬間から引き離すことができます。</li>\n  <li>ビジネスアプリケーションでは、3D カメラを使用して、グラフやチャートなどをレンダリングするときに、見かけの大きさとパースペクティブを簡単に設定できます。</li>\n  <li>地図アプリケーションでは、カメラをシーンの真上に配置するか、さまざまな角度を使用してパースペクティブを表現できます。 3D GPS ソリューションの場合、カメラはユーザーの周囲の領域を表示するように配置され、ディスプレイの大部分はユーザーの移動経路の前方の領域を示します。</li>\n  <li>WebGL を使用して 2D グラフィックス描画を高速化する場合、通常、カメラはシーンの中心の真上に配置され、距離と視野はシーン全体を表示できるように設定されます。</li>\n  <li>ビットマップグラフィックスを高速化する場合、レンダラーは 2D 画像を WebGL テクスチャーのバッファーに描画し、テクスチャーを再描画して画面をリフレッシュします。 これは基本的に、2D グラフィックアプリケーションでマルチプルバッファリング（<a href=\"https://en.wikipedia.org/wiki/Multiple_buffering\" class=\"external\" rel=\" noopener\">multiple buffering</a>）を実行するためのバックバッファーとしてテクスチャーを使用します。</li>\n</ul>\n<h4 id=\"ゲームにおけるカメラ\">ゲームにおけるカメラ</h4>\n<p>ゲームにはさまざまな種類があり、カメラをゲームで使用するにはいくつかの方法があります。 一般的な状況は次のとおりです。</p>\n<ul>\n  <li>ファーストパーソンゲームでは、カメラはプレイヤーのアバターの頭の中にあり、アバターの目と同じ方向を向いています。 このようにして、プレイヤーの画面またはヘッドセットに表示されるビューは、アバターが見るものです。</li>\n  <li>一部のサードパーソンゲームでは、カメラがプレイヤーのアバターや乗り物の後ろの少し離れたところにあり、ゲームの世界を移動するときに後ろから見ています。 これは、多くのマルチプレイヤーオンラインロールプレイングゲーム、特定のシューティングゲームなどで使用されます。 人気のある例には、<em>World of Warcraft</em>、<em>トゥームレイダー</em>、<em>フォートナイト</em> などがあります。 このカテゴリーには、カメラがプレイヤーの肩の真上に配置されるゲームも含まれます。</li>\n  <li>一部の 3D ゲームは、フライトシミュレーターで航空機のさまざまなウィンドウを見る、またはステージ（game level）内のすべての防犯カメラからのビューを見るなど、視点を変更する能力を提供します（スパイとステルスベースのゲームの一般的な機能）。 この能力は、スコープ付きの武器を提供するゲームでも使用されます。 この場合、ビューは、もはや頭の位置に完全に基づいていません。</li>\n  <li>3D ゲームは、目に見えない種類のアバターを配置するか、固定の仮想カメラを選択して監視することにより、非プレイヤーがアクションを観察する能力も提供します。</li>\n  <li>高度な 3D ゲームでは、カメラまたはカメラのようなオブジェクトを使用して、プレイヤーキャラクターが使用できるものと同じレンダリングエンジンおよび物理エンジンによって、非プレイヤーキャラクターが何を見ることができるかを決定できます。</li>\n  <li>シングルスクリーン 2D ゲームでは、カメラはプレイヤーやゲーム内の他のキャラクターに直接関連付けられていませんが、代わりにゲームプレイエリアの上または横に固定されているか、アクションがスクロールするゲーム世界を動き回るときにアクションに従います。 例えば、<em>パックマン</em>などの古典的なアーケードゲームは固定されたゲームマップ上で行われるため、カメラはマップ上の設定距離に固定され、常にゲームの世界を真下に向けます。</li>\n  <li><em>スーパーマリオブラザーズ</em>などの横スクロールゲームまたは縦スクロールゲームでは、カメラは左右（または上下、あるいはその両方）に沿って移動するため、ステージがビューポートよりはるかに大きくても、アクションは表示されたままになります。</li>\n</ul>"}},{"type":"prose","value":{"id":"カメラの配置","title":"カメラの配置","isH3":true,"content":"<p>WebGL または WebXR には標準のカメラオブジェクトがないため、カメラを自分でシミュレートする必要があります。 そうする前に、そしてカメラの動きをシミュレートする前に、実際に仮想カメラとその動きを最も基本的なレベルで見てみましょう。 すべてのものと同様に、空間内のオブジェクトの<strong>位置</strong>（position）は、たとえ仮想空間であっても、原点を基準にした位置を示す 3 つの数値を使用して表すことができ、原点の位置は (0, 0, 0) と定義されています。</p>\n<p>オブジェクトと空間の原点との空間関係には、考慮する必要のある別の側面があります。 それは<strong>パースペクティブ</strong>（perspective）です。 パースペクティブは、シーン内のオブジェクトに適切に適用されると、通常の 2D 画面と同じくらい平面に見えるシーンを取り、まるで 3D であるかのように飛び出させることができます。 パースペクティブにはいくつかの種類があります。 それらは定義されており、それらの数学は <a href=\"/ja/docs/Web/API/WebGL_API/WebGL_model_view_projection\">WebGL モデル ビュー 射影</a>の記事で説明されています。 重要なのは、ベクトルに対するパースペクティブの効果は、ベクトルに <code>w</code> と呼ばれる 4 番目のパースペクティブ成分を追加することによって表すことができるということです。</p>\n<p><code>w</code> の値は、他の 3 つの成分のそれぞれをそれで除算することによって適用され、最終的な位置またはベクトルを取得します。 つまり、(<code>x</code>, <code>y</code>, <code>z</code>, <code>w</code>) として与えられた座標の場合、3D 空間の点は実際には (<code>x</code>/<code>w</code>, <code>y</code>/<code>w</code>, <code>z</code>/<code>w</code>, 1) または単に (<code>x</code>/<code>w</code>, <code>y</code>/<code>w</code>, <code>z</code>/<code>w</code>) です。 パースペクティブを使用していない場合、<code>w</code> は常に 1 です。 その場合、(1, 0, 3) にあるオブジェクトの完全な座標は (1, 0, 3, 1) になります。</p>\n<p>ただし、3D 空間のオブジェクトを表現するには、場所だけでは不十分です。 なぜなら、空間内のオブジェクトの状態は、その位置だけでなく、その回転（rotation）または向き（facing direction）としても知られる<strong>方向</strong>（orientation）に関するものだからです。 方向は 3D ベクトルを使用して表すことができ、これは通常、長さが 1.0 になるように正規化されています。 例えば、オブジェクトが (3, 1, -2) にあるオブジェクトに向いている場合、つまり、原点から 3 メートル右、1 メートル上、2 メートル向こうに離れているオブジェクトに向いている場合、結果は次のようになります。</p>\n<p>\n  <math display=\"block\">\n    <semantics>\n      <mrow>\n        <mo>[</mo>\n        <mtable rowspacing=\"0.5ex\">\n          <mtr>\n            <mtd>\n              <mn>3</mn>\n            </mtd>\n          </mtr>\n          <mtr>\n            <mtd>\n              <mn>1</mn>\n            </mtd>\n          </mtr>\n          <mtr>\n            <mtd>\n              <mo>-</mo>\n              <mn>2</mn>\n            </mtd>\n          </mtr>\n        </mtable>\n        <mo>]</mo>\n      </mrow>\n      <annotation encoding=\"TeX\">\\left [ \\begin{matrix} 3 \\ 1 \\ -2 \\end{matrix} \\right ]</annotation>\n    </semantics>\n  </math>\n</p>\n<p>これは次のように配列として表すこともできます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> directionVector <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>座標と向きのベクトルの両方を含む操作を実行するために、ベクトルには <code>w</code> 成分を含める必要があります。 ベクトルの <code>w</code> の値は常に 0 であるため、前述のベクトルは <code>[3, 1, -2, 0]</code> または次のように表すこともできます。</p>\n<p>\n  <math display=\"block\">\n    <semantics>\n      <mrow>\n        <mo>[</mo>\n        <mtable rowspacing=\"0.5ex\">\n          <mtr>\n            <mtd>\n              <mn>3</mn>\n            </mtd>\n          </mtr>\n          <mtr>\n            <mtd>\n              <mn>1</mn>\n            </mtd>\n          </mtr>\n          <mtr>\n            <mtd>\n              <mo>-</mo>\n              <mn>2</mn>\n            </mtd>\n          </mtr>\n          <mtr>\n            <mtd>\n              <mn>0</mn>\n            </mtd>\n          </mtr>\n        </mtable>\n        <mo>]</mo>\n      </mrow>\n      <annotation encoding=\"TeX\">\\left [ \\begin{matrix} 3 \\ 1 \\ -2 \\ 0 \\end{matrix} \\right ]</annotation>\n    </semantics>\n  </math>\n</p>\n<p>WebXR は、ベクトルを 1 メートルの長さに自動的に正規化します。 ただし、正規化を繰り返し実行する必要はないため、計算のパフォーマンスを向上させるなど、さまざまな理由で自分で行う方が理にかなっている場合があります。</p>\n<p>カメラにさせたい動きの組み合わせを表す行列を決定したら、カメラは動かせないため、それを逆にする必要があります。 実際にはカメラ以外のすべてのものを移動しているので、変換行列の逆行列を取って、逆変換行列を取得します。 次に、この逆行列を世界のオブジェクトに適用して、オブジェクトの位置と方向を変更し、希望するカメラ位置をシミュレートできます。</p>\n<p>これが、WebXR が変換を表すために使用する <a href=\"/ja/docs/Web/API/XRRigidTransform\"><code>XRRigidTransform</code></a> オブジェクトに、<a href=\"/ja/docs/Web/API/XRRigidTransform/inverse\" title=\"inverse\"><code>inverse</code></a> プロパティが含まれている理由です。 <code>inverse</code> プロパティは、親変換の逆行列である別の <code>XRRigidTransform</code> オブジェクトです。 ビューを表す <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRView\"><code>XRView</code> <small>(en-US)</small></a> には、カメラビューを提供する <code>XRRigidTransform</code> である <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRView/transform\"><code>transform</code> <small>(en-US)</small></a> プロパティがあるため、次のように、モデルビュー行列（世界を移動して目的のカメラ位置をシミュレートするために必要な変換行列）を取得できます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> viewMatrix <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>inverse<span class=\"token punctuation\">.</span>matrix<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>使用しているライブラリが <code>XRRigidTransform</code> オブジェクトを直接受け入れる場合は、ビュー行列を表す配列だけを取り出すのではなく、代わりに <code>view.transform.inverse</code> を取得できます。</p>"}},{"type":"prose","value":{"id":"複数の変換の合成","title":"複数の変換の合成","isH3":true,"content":"<p>カメラが同時にズームやパンなどの複数の変換を実行する必要がある場合は、変換行列を乗算して、両方の変更を一度に適用する単一の行列に合成できます。 これを実行する明確で読みやすい関数については、<a href=\"/ja/docs/Web/API/WebGL_API/Matrix_math_for_the_web\">ウェブの行列計算</a>の記事の<a href=\"/ja/docs/Web/API/WebGL_API/Matrix_math_for_the_web#multiplying_two_matrices\">2 つの行列の乗算</a>を参照してください。 あるいは、<a href=\"https://glmatrix.net/\" class=\"external\" rel=\" noopener\">glMatrix</a> などのお好みの行列計算ライブラリを使用して処理してください。</p>\n<p>乗算が可換である（つまり、左から右に乗算しても右から左に乗算しても同じ答えが得られる）典型的な算術とは異なり、行列の乗算は<em>可換ではない</em>ことに注意してください！ これは、各変換がオブジェクトの位置と、場合によっては座標系自体に影響を与え、実行される次の操作の結果を劇的に変える可能性があるためです。 そのため、複合変換を作成するとき（または変換を順番に直接適用するとき）は、変換を適用する順序に注意する必要があります。</p>"}},{"type":"prose","value":{"id":"変換の適用","title":"変換の適用","isH3":true,"content":"<p>変換を適用するには、点またはベクトルに変換または変換の合成を掛けます。</p>\n<p>これは、物理的な場所、方向または向き、およびパースペクティブの観点から見た位置の概念の概要です。 このテーマの詳細については、<a href=\"/ja/docs/Web/API/WebXR_Device_API/Geometry\">幾何学と参照空間</a>、<a href=\"/ja/docs/Web/API/WebGL_API/WebGL_model_view_projection\">WebGL モデル ビュー 射影</a>、および<a href=\"/ja/docs/Web/API/WebGL_API/Matrix_math_for_the_web\">ウェブの行列計算</a>の記事を参照してください。</p>"}},{"type":"prose","value":{"id":"古典的な映画撮影のシミュレーション","title":"古典的な映画撮影のシミュレーション","isH3":false,"content":"<p>映画撮影は、カメラの動きを設計、計画、そして実行することで、アニメーションまたはフィルムのシーンに望ましい外観と感情を生み出す芸術です。 主にカメラの動きについて理解するのに役立つ用語がいくつかありますが、これらの用語を、仮想カメラを使って設計された視点の変更を説明するために使用します。 これらの動きを同時に複数実行することも完全に可能です。 例えば、シーンをズームインしながらカメラをパンできます。</p>\n<p>カメラの動きの大部分は、カメラの参照空間を基準にして記述されていることに注意してください。</p>\n<p>行列を格納するための形式は、通常、列優先でフラット化された配列です。 つまり、行列の値は、左上隅から下に向かって書き込まれ、次に右に 1 行移動して、すべての値が配列になるまで繰り返されます。</p>\n<p>したがって、次のような行列になります。</p>\n<p>\n  <math display=\"block\">\n    <semantics>\n      <mrow>\n        <mo>[</mo>\n        <mtable rowspacing=\"0.5ex\">\n          <mtr>\n            <mtd>\n              <msub>\n                <mi>a</mi>\n                <mn>1</mn>\n              </msub>\n            </mtd>\n            <mtd>\n              <msub>\n                <mi>a</mi>\n                <mn>5</mn>\n              </msub>\n            </mtd>\n            <mtd>\n              <msub>\n                <mi>a</mi>\n                <mn>9</mn>\n              </msub>\n            </mtd>\n            <mtd>\n              <msub>\n                <mi>a</mi>\n                <mn>13</mn>\n              </msub>\n            </mtd>\n          </mtr>\n          <mtr>\n            <mtd>\n              <msub>\n                <mi>a</mi>\n                <mn>2</mn>\n              </msub>\n            </mtd>\n            <mtd>\n              <msub>\n                <mi>a</mi>\n                <mn>6</mn>\n              </msub>\n            </mtd>\n            <mtd>\n              <msub>\n                <mi>a</mi>\n                <mn>10</mn>\n              </msub>\n            </mtd>\n            <mtd>\n              <msub>\n                <mi>a</mi>\n                <mn>14</mn>\n              </msub>\n            </mtd>\n          </mtr>\n          <mtr>\n            <mtd>\n              <msub>\n                <mi>a</mi>\n                <mn>3</mn>\n              </msub>\n            </mtd>\n            <mtd>\n              <msub>\n                <mi>a</mi>\n                <mn>7</mn>\n              </msub>\n            </mtd>\n            <mtd>\n              <msub>\n                <mi>a</mi>\n                <mn>11</mn>\n              </msub>\n            </mtd>\n            <mtd>\n              <msub>\n                <mi>a</mi>\n                <mn>15</mn>\n              </msub>\n            </mtd>\n          </mtr>\n          <mtr>\n            <mtd>\n              <msub>\n                <mi>a</mi>\n                <mn>4</mn>\n              </msub>\n            </mtd>\n            <mtd>\n              <msub>\n                <mi>a</mi>\n                <mn>8</mn>\n              </msub>\n            </mtd>\n            <mtd>\n              <msub>\n                <mi>a</mi>\n                <mn>12</mn>\n              </msub>\n            </mtd>\n            <mtd>\n              <msub>\n                <mi>a</mi>\n                <mn>16</mn>\n              </msub>\n            </mtd>\n          </mtr>\n        </mtable>\n        <mo>]</mo>\n      </mrow>\n      <annotation encoding=\"TeX\">\\left [ \\begin{matrix} a_{1} &amp; a_{5} &amp; a_{9} &amp; a_{13} \\ a_{2} &amp; a_{6} &amp; a_{10} &amp; a_{14} \\ a_{3} &amp; a_{7} &amp; a_{11} &amp; a_{15} \\ a_{4} &amp; a_{8} &amp; a_{12} &amp; a_{16} \\end{matrix} \\right ]</annotation>\n    </semantics>\n  </math>\n</p>\n<p>これは、次のように配列形式で表されます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> matrixArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>a1<span class=\"token punctuation\">,</span> a2<span class=\"token punctuation\">,</span> a3<span class=\"token punctuation\">,</span> a4<span class=\"token punctuation\">,</span> a5<span class=\"token punctuation\">,</span> a6<span class=\"token punctuation\">,</span> a7<span class=\"token punctuation\">,</span> a8<span class=\"token punctuation\">,</span>\n                   a9<span class=\"token punctuation\">,</span> a10<span class=\"token punctuation\">,</span> a11<span class=\"token punctuation\">,</span> a12<span class=\"token punctuation\">,</span> a13<span class=\"token punctuation\">,</span> a14<span class=\"token punctuation\">,</span> a15<span class=\"token punctuation\">,</span> a16<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>この配列では、左端の列にエントリ a1、a2、a3、a4 が含まれています。 一番上の行には、エントリ a1、a5、a9、a13 が含まれています。</p>\n<p>ほとんどの WebGL および WebXR のプログラミングは、サードパーティライブラリを使用して行われることを覚えておいてください。 サードパーティライブラリは、コアとなる行列やその他の操作だけでなく、多くの場合、これらの標準的な映画撮影手法のシミュレーションをより簡単にするルーチンを追加することにより、WebGL の基本機能を拡張します。 WebGL を直接使用するのではなく、その 1 つを使用することを強くお勧めします。 このガイドでは WebGL を直接使用しています。 これは、その裏で何が行われているのかをある程度理解し、ライブラリの開発を支援したり、コードを最適化するのに役立つためです。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> 「カメラを動かす」などのフレーズを使用していますが、実際に行っているのは、カメラの周りの世界全体を動かすことです。 これは、特定の値が機能する方法に影響を与えます。 これらの値については、後で説明します。</p>\n</div>"}},{"type":"prose","value":{"id":"ズーム","title":"ズーム","isH3":true,"content":"<p>最もよく知られているカメラ効果には、ズーム（zoom）があります。 ズームは、レンズの焦点距離を変更することにより、物理的なカメラで実行されます。 これは、レンズ自体の中心とカメラの光センサーの間の距離です。 したがって、ズームは実際にはカメラを動かすことをまったく含みません。 代わりに、ズームショットは、時間の経過とともにカメラの倍率を変化させて、実際にカメラを物理的に動かさなくても、焦点領域がビューアーに近づいたり遠ざかったりするように見せます。 ゆっくりとした動きはシーンに動き、気軽さ、または集中の感覚をもたらすことができ、急速なズームは不安、驚き、または緊張の感覚を生み出すことができます。</p>\n<p>ズームはカメラの位置を動かさないので、結果として生じる効果は不自然です。 人間の目にはズームレンズがありません。 物を遠ざけたり、近づけたりして、物を小さくしたり大きくしたりします。 映画撮影では、それは<a href=\"#dolly\">ドリーショット</a>と呼ばれます。</p>\n<p>3D グラフィックスにも 2 つの手法があり、同一ではありませんが類似した結果を作成でき、その方法はさまざまな状況でより簡単に適用できます。</p>\n<h4 id=\"視野調整によるズーム\">視野調整によるズーム</h4>\n<p>カメラの<strong>視野</strong>（field of view、<strong>FOV</strong>）を変更することで、真の「ズーム」に似たことができます。 視野とは、一度に見る必要のある、カメラを囲む可視領域全体の円弧の長さを定義する角度です。 これは実際のカメラの焦点距離の効果であり、真のカメラがないため、FOV を変更することは無難な代案です。</p>\n<p>円の円周は 2π⋅r ラジアン（360°）であることを思い出してください。 そのため、これは理論上の最大 FOV です。 ただし、現実的には、人間の目はそこまで見えないだけでなく、モニターや VR ゴーグルなどの表示デバイスを使用すると、視野がさらに狭くなる傾向があります。 人間の目は通常、約 135°（約 2.356 ラジアン）の水平視野と約 180°（π または約 3.142 ラジアン）の垂直視野を持っています。</p>\n<p>カメラの FOV を小さくすると、ビューポートに含まれる弧が減少し、ビューにレンダリングされるときにそのコンテンツが拡大します。 これと光学ズーム効果の間には違いがありますが、一般的には仕事を完了するのに十分近い結果です。</p>\n<p>次の関数は、指定された視野角と指定されたニアクリッピングプレーンおよびファークリッピングプレーンの距離を統合する透視射影行列を返します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">createPerspectiveMatrix</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">viewport<span class=\"token punctuation\">,</span> fovDegrees<span class=\"token punctuation\">,</span> nearClip<span class=\"token punctuation\">,</span> farClip</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> fovRadians <span class=\"token operator\">=</span> fovDegrees <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">/</span> <span class=\"token number\">180.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> aspectRatio <span class=\"token operator\">=</span> viewport<span class=\"token punctuation\">.</span>width <span class=\"token operator\">/</span> viewport<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> transform <span class=\"token operator\">=</span> mat4<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  mat4<span class=\"token punctuation\">.</span><span class=\"token function\">perspective</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">,</span> fovRadians<span class=\"token punctuation\">,</span> aspectRatio<span class=\"token punctuation\">,</span>\n                   nearClip<span class=\"token punctuation\">,</span> farClip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> transform<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>FOV 角度 <code>fovDegrees</code> を度数からラジアンに変換し、<code>viewport</code> パラメーターで指定された <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRViewport\"><code>XRViewport</code> <small>(en-US)</small></a> のアスペクト比を計算した後、この関数は <a href=\"https://glmatrix.net/\" class=\"external\" rel=\" noopener\">glMatrix</a> ライブラリーの <a href=\"https://glmatrix.net/docs/module-mat4.html#.perspective\" class=\"external\" rel=\" noopener\"><code>mat4.perspective()</code></a> 関数を使用して、透視行列を計算します。</p>\n<p>透視行列は、視野（厳密に言えば、これは<em>垂直方向</em>の視野です）、アスペクト比、およびニアクリッピングプレーンおよびファークリッピングプレーンを 4x4 行列の <code>transform</code> でカプセル化し、呼び出し元に返します。</p>\n<p>ニアクリッピングプレーンは、ディスプレイ面に平行なプレーン（平面）からの距離をメートル単位で表したもので、それよりも近くにあるものは何も描画されません。 そのプレーンのカメラ側に横たわる頂点は描画されません。 逆に、ファークリッピングプレーンは、その先には頂点が描画されないプレーンまでのメートル単位の距離です。</p>\n<p>拡大縮小係数（scaling factor）またはパーセントを使用してズームするには、1 倍（通常のサイズの 100%）を許可する FOV の最大値にマップし（これにより、ほとんどのコンテンツが表示されます）、最大倍率をサポートしたい FOV の最大値にマップし、その間の対応する値をマップします。</p>\n<p>透視行列を計算することによって各フレームのレンダリングパスを開始する場合、フレームの目的のジオメトリーを生成するために適用する必要がある他のすべての変換をその行列にまとめることができます。 例えば、次のようにです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> transform <span class=\"token operator\">=</span> <span class=\"token function\">createPerspectiveMatrix</span><span class=\"token punctuation\">(</span>viewport<span class=\"token punctuation\">,</span> <span class=\"token number\">130</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> translateVec <span class=\"token operator\">=</span> vec3<span class=\"token punctuation\">.</span><span class=\"token function\">fromValues</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>trackDistance<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>craneDistance<span class=\"token punctuation\">,</span> pushDistance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmat4<span class=\"token punctuation\">.</span><span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">,</span> transform<span class=\"token punctuation\">,</span> translateVec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これは、130° の垂直視野を表す透視行列から始まり、次に、<a href=\"/ja/docs/Web/API/WebXR_Device_API/Cameras#Trucking_Moving_left_or_right\" aria-current=\"page\">トラック</a>、<a href=\"/ja/docs/Web/API/WebXR_Device_API/Cameras#Pedestaling_Moving_up_or_down\" aria-current=\"page\">クレーン</a>、および<a href=\"/ja/docs/Web/API/WebXR_Device_API/Cameras#Dollying_Moving_in_or_out\" aria-current=\"page\">プッシュ</a>の動きを含むやり方でカメラを動かす平行移動を適用します。</p>\n<h4 id=\"拡大縮小変換\">拡大縮小変換</h4>\n<p>真の「ズーム」とは異なり、<strong>拡大縮小</strong>（scaling）では、位置または頂点の <code>x</code>、<code>y</code>、<code>z</code> 座標値のそれぞれに、その軸の拡大縮小係数を掛けます。 これらは各軸で同一である場合と、必ずしも同一ではない場合もありますが、ズーム効果に最も近い結果は、それぞれに同じ値を使用する必要があります。 これは、シーン内のすべての頂点に（理想的には頂点シェーダーで）適用する必要があります。</p>\n<p>2 倍に拡大する場合は、各成分に 2.0 を掛ける必要があります。 同じ量だけ縮小するには、-2.0 を掛けます。 行列の用語では、これは次のように拡大縮小係数された変換行列を使用して実行されます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> scaleTransform <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  Sx<span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> Sy<span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> Sz<span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>この行列は、<code>(Sx, Sy, Sz)</code> で示される係数で拡大または縮小する変換を表します。 <code>Sx</code> は X 軸に沿った拡大縮小係数、<code>Sy</code> は Y 軸に沿った拡大縮小係数、<code>Sz</code> は Z 軸の係数です。 これらの値のいずれかが他の値と異なる場合、結果は一部の次元で他と比較して異なる伸縮になります。</p>\n<p>すべての方向に同じ拡大縮小係数を適用する場合は、単純な関数を作成して拡大縮小変換行列を生成できます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">createScalingMatrix</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n    f<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>変換行列を取得したら、変換 <code>scaleTransform</code> をベクトル（または頂点）<code>myVector</code> に適用するだけです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> myVector <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> scaleTransform <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nvec4<span class=\"token punctuation\">.</span><span class=\"token function\">transformMat4</span><span class=\"token punctuation\">(</span>myVector<span class=\"token punctuation\">,</span> myVector<span class=\"token punctuation\">,</span> scaleTransform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>または、上記の <code>createScalingMatrix()</code> 関数を使用して、同じ係数ですべての軸に沿った拡大縮小を使用します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> myVector <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nvec4<span class=\"token punctuation\">.</span><span class=\"token function\">transformMat4</span><span class=\"token punctuation\">(</span>myVector<span class=\"token punctuation\">,</span> myVector<span class=\"token punctuation\">,</span> <span class=\"token function\">createScalingMatrix</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"パン（左または右へのヨー）","title":"パン（左または右へのヨー）","isH3":true,"content":"<p><strong>パン</strong>（pan）または<strong>ヨー</strong>（yaw）とは、カメラの左から右への回転または右から左への回転であり、それ以外はベースに固定されています。 空間内でのカメラの位置は変化せず、見ている方向のみが変化します。 そして、その方向は水平方向以外に変わりません。 パンは、広大な空間内や広大なオブジェクト上で設定を確立したり、範囲の感覚を提供したりするのに最適です。 あるいは、没入型または VR のシナリオでプレイヤーが頭を回すのをシミュレートするように、左右を見るだけです。</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/WebXR_Device_API/Cameras/camera-pan.png\" alt=\"左右にパンするカメラを示す図\" width=\"317\" height=\"311\" loading=\"lazy\">\n</p>\n<p>これを行うには、Y 軸を中心に回転して、カメラの左右の回転をシミュレートする必要があります。 これまでに使用した <a href=\"https://glmatrix.net/\" class=\"external\" rel=\" noopener\">glMatrix</a> ライブラリーを使用すると、これは、標準の 4x4 行列を表す <code>mat4</code> クラスの <code>rotateY()</code> メソッドを使用して実行できます。 行列 <code>viewMatrix</code> で定義された視点 を <code>panAngle</code> ラジアンで回転するには、次のようにします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>mat4<span class=\"token punctuation\">.</span><span class=\"token function\">rotateY</span><span class=\"token punctuation\">(</span>viewMatrix<span class=\"token punctuation\">,</span> viewMatrix<span class=\"token punctuation\">,</span> panAngle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>panAngle</code> が正の場合、この変換はカメラを右にパンします。 <code>panAngle</code> の負の値は左にパンします。</p>"}},{"type":"prose","value":{"id":"ティルト（上または下へのピッチ）","title":"ティルト（上または下へのピッチ）","isH3":true,"content":"<p>カメラを<strong>ティルト</strong>（tilt）または<strong>ピッチ</strong>（pitch）すると、カメラの水平部分をまったく変更せずに、カメラの垂直方向の向きを変更しながら、同じ座標で空間に固定したままにします。 単に上下を指す方向を調整するだけです。 ティルトは、森や山などの背の高いオブジェクトやシーンの範囲をキャプチャするのに適していますが、重要なキャラクターやロケールを紹介したり、畏敬の念を起こさせたりする一般的な方法でもあります。 もちろん、プレイヤーが上下を見るサポートを実装するのにも役立ちます。</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/WebXR_Device_API/Cameras/camera-tilt.png\" alt=\"上下にティルトするカメラを示す図\" width=\"277\" height=\"265\" loading=\"lazy\">\n</p>\n<p>したがって、カメラをティルトすることは、X 軸を中心にカメラを回転させることで実現できます。 これは、glMatrix の <code>mat4</code> クラスの <code>rotateX()</code> メソッドなど、行列計算ライブラリーの適切なメソッドを使用して実行できます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>mat4<span class=\"token punctuation\">.</span><span class=\"token function\">rotateX</span><span class=\"token punctuation\">(</span>viewMatrix<span class=\"token punctuation\">,</span> viewMatrix<span class=\"token punctuation\">,</span> angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>angle</code> の正の値はカメラを下に傾け、<code>angle</code> の負の値は上に傾けます。</p>"}},{"type":"prose","value":{"id":"ドリー（前または後ろへの移動）","title":"ドリー（前または後ろへの移動）","isH3":true,"content":"<p><strong>ドリー</strong>（dolly）ショットは、カメラ全体が前後に移動するショットです。 古典的な映画制作では、これは通常、カメラをトラック（track）上または移動中の車両に取り付けて行われます。 結果のモーションは、特にショットの焦点である人物またはオブジェクトと一緒に移動する場合に、印象的で滑らかな効果を作成できます。</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/WebXR_Device_API/Cameras/camera-dolly.png\" alt=\"ドリーショットのカメラの動きを示す図\" width=\"288\" height=\"238\" loading=\"lazy\">\n</p>\n<p>ドリーショットとズームはほぼ同じように見えるはずですが、実際はそうではありません。 ズームがカメラの焦点距離を変更するという事実は、ターゲットがフレーム内で大きくなったり小さくなったりしても、ターゲットとその周囲との間の空間関係が変化しないことを意味します。 一方、ドリーショットは、実際にカメラを動かすことで、物理的な動きの感覚を再現し、シーン内のオブジェクトの関係を、ショットのターゲットに近づいたり遠ざかったりしながらオブジェクトを通り過ぎていく中で、期待通りにシフトさせます。</p>\n<p>ドリー操作を実行するには、カメラビューを Z 軸に沿って前後に平行移動します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>mat4<span class=\"token punctuation\">.</span><span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>viewMatrix<span class=\"token punctuation\">,</span> viewMatrix<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> dollyDistance<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ここで、<code>[0, 0, dollyDistance]</code> はベクトルで、<code>dollyDistance</code> はカメラをドリーする距離です。 これはカメラの周りの世界全体を動かすことで機能するため、ここで実際に起こるのは、カメラに対して相対的に <code>dollyDistance</code> メートルだけ世界全体が Z 軸に沿って動くということです。 <code>dollyDistance</code> が正の場合、世界はその量だけユーザーに向かって移動し、カメラがシーンに近づきます。 反対に、<code>dollyDistance</code> の負の値は、ユーザーから世界を遠ざけ、カメラがターゲットから後方に動いて見えるようにします。</p>"}},{"type":"prose","value":{"id":"トラック（左または右への移動）","title":"トラック（左または右への移動）","isH3":true,"content":"<p>物理的なカメラを使用した<strong>トラック</strong>（truck）は、ドリーと同じ種類の索具装置を使用しますが、カメラを前後に移動するのではなく、左から右またはその逆に移動します。 カメラはまったく回転しないため、ショットの焦点が画面からゆっくりと外に出ます。 これは、シーンで感情を確立しようとするときに、集中、時間の経過、または熟考を暗示することができます。 また、カメラがキャラクターと一緒にすべるように動き、シーンを歩いていく、「歩きながら話す」シーンでも頻繁に使用されます。</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/WebXR_Device_API/Cameras/camera-truck.png\" alt=\"カメラが左右にトラックする様子を示す図\" width=\"292\" height=\"230\" loading=\"lazy\">\n</p>\n<p>カメラを左右に移動するには、目的のカメラの動きとは反対の方向に、X 軸に沿ってビュー行列を移動します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>mat4<span class=\"token punctuation\">.</span><span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>viewMatrix<span class=\"token punctuation\">,</span> viewMatrix<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>truckDistance<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ベクトル <code>[-truckDistance, 0, 0]</code> に注意してください。 これは、トラックの操作がカメラではなく世界を動かすことによって機能するという事実を補います。 全世界を <code>truckDistance</code> によって示される方向とは反対の方向に移動することにより、カメラを予想される方向に移動する効果が得られます。 このように、<code>truckDistance</code> の正の値は、カメラを右に移動し（世界を左に移動することにより）、<code>truckDistance</code> の負の値は、カメラを左に移動します（世界を右に移動することにより）。</p>"}},{"type":"prose","value":{"id":"ペデスタル（上または下への移動）","title":"ペデスタル（上または下への移動）","isH3":true,"content":"<p><strong>ペデスタル</strong>（pedestal、台座）ショットは、カメラを床に対して水平に固定したまま、まっすぐ上下に動かしたものです。 背が高くなったり低くなったりする台座（またはポール）の上のカメラで撮影します。 これは、背が高くなったり低くなったり、椅子から立ち上がったり座ったりしている、あるいは単にまっすぐ上下に動いている被写体を追跡するときに役立ちます。</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/WebXR_Device_API/Cameras/camera-pedestal.png\" alt=\"ペデスタルモーションを使用してカメラが上下に移動する様子を示す図\" width=\"279\" height=\"282\" loading=\"lazy\">\n</p>\n<p>これは、クレーンに取り付けられたカメラを上下に動かす<strong>クレーン</strong>（crane）ショットに似ています。 ペデスタルまたはクレーンのモーションを実行するには、ビューを Y 軸に沿って、カメラを移動する方向とは反対の方向に移動します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>mat4<span class=\"token punctuation\">.</span><span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>viewMatrix<span class=\"token punctuation\">,</span> viewMatrix<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>pedestalDistance<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>pedestalDistance</code> の値を反転することで、実際にはカメラではなく世界を動かしているという事実を補正します。 したがって、<code>pedestalDistance</code> の正の値はカメラを上に移動し、負の値は下に移動します。</p>"}},{"type":"prose","value":{"id":"カント（左右へのロール）","title":"カント（左右へのロール）","isH3":true,"content":"<p><strong>カント</strong>（cant）または<strong>ロール</strong>（roll）は、ロール軸を中心としたカメラの回転です。 つまり、カメラは空間に固定されたままで、同じ位置に向けられたままですが、カメラの上部が別の方向に向けられるように回転します。</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/WebXR_Device_API/Cameras/camera-roll.png\" alt=\"左右にロールするカメラを示す図\" width=\"232\" height=\"239\" loading=\"lazy\">\n</p>\n<p>これは、手のひらを下にして、手を開いた状態で腕を前に出すことで視覚化できます。 自分の手がカメラで、手の甲がカメラの上部を表しているとします。 「カメラ」が上下逆になるように手を回転させます。 これが、ロール軸の周りに手をカントしたところです。 映画撮影では、カントを使用して、波や乱気流などのさまざまなタイプの非定常モーションをシミュレートできますが、劇的な効果を得るためにも使用できます。</p>\n<p>glMatrix を使用して Z 軸を中心にこの回転を実行するには、次のようにします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>mat4<span class=\"token punctuation\">.</span><span class=\"token function\">rotateZ</span><span class=\"token punctuation\">(</span>viewMatrix<span class=\"token punctuation\">,</span> viewMatrix<span class=\"token punctuation\">,</span> cantAngle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"動きを組み合わせる","title":"動きを組み合わせる","isH3":false,"content":"<p>パンしながらズームしたり、同時にティルトしたりカントしたりするなど、複数の動作を同時に実行できます。</p>"}},{"type":"prose","value":{"id":"複数の軸に沿った平行移動","title":"複数の軸に沿った平行移動","isH3":true,"content":"<p>複数の軸に沿った平行移動は非常に簡単です。 以前は、次のような平行移動を行っていました。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>mat4<span class=\"token punctuation\">.</span><span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>viewMatrix<span class=\"token punctuation\">,</span> viewMatrix<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>truckDistance<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmat4<span class=\"token punctuation\">.</span><span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>viewMatrix<span class=\"token punctuation\">,</span> viewMatrix<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>pedestalDistance<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmat4<span class=\"token punctuation\">.</span><span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>viewMatrix<span class=\"token punctuation\">,</span> viewMatrix<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> dollyDistance<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ここでの解決策は明白です。 平行移動は、各軸に沿って移動する距離を提供するベクトルとして表現されるため、次のようにそれらを組み合わせることができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>mat4<span class=\"token punctuation\">.</span><span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>viewMatrix<span class=\"token punctuation\">,</span> viewMatrix<span class=\"token punctuation\">,</span>\n     <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>truckDistance<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>pedestalDistance<span class=\"token punctuation\">,</span> dollyDistance<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これにより、行列 <code>viewMatrix</code> の原点が各軸に沿って指定された量だけシフトします。</p>"}},{"type":"prose","value":{"id":"複数の軸を中心に回転","title":"複数の軸を中心に回転","isH3":true,"content":"<p>複数の軸の周りの回転を、回転の共有軸を表すクォータニオンの周りの単一の回転に結合することもできます。 回転を個別に実行するには、<a href=\"https://ja.wikipedia.org/wiki/%E3%82%AA%E3%82%A4%E3%83%A9%E3%83%BC%E8%A7%92\" class=\"external\" rel=\" noopener\">オイラー角</a>（<a href=\"https://en.wikipedia.org/wiki/Euler_angles\" class=\"external\" rel=\" noopener\">Euler angles</a>、各軸の周りの別々の角度）を使用して、次のようにピッチ、ヨー、ロールを適用します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>mat4<span class=\"token punctuation\">.</span><span class=\"token function\">rotateX</span><span class=\"token punctuation\">(</span>viewMatrix<span class=\"token punctuation\">,</span> viewMatrix<span class=\"token punctuation\">,</span> pitchAngle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmat4<span class=\"token punctuation\">.</span><span class=\"token function\">rotateY</span><span class=\"token punctuation\">(</span>viewMatrix<span class=\"token punctuation\">,</span> viewMatrix<span class=\"token punctuation\">,</span> yawAngle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmat4<span class=\"token punctuation\">.</span><span class=\"token function\">rotateZ</span><span class=\"token punctuation\">(</span>viewMatrix<span class=\"token punctuation\">,</span> viewMatrix<span class=\"token punctuation\">,</span> rollAngle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>代わりに、次のようにオイラー角から回転軸を組み合わせた<a href=\"/ja/docs/Glossary/Quaternion\">クォータニオン</a>を作成し、乗算を使用して行列を回転させることができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> axisQuat <span class=\"token operator\">=</span> quat<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> rotateMatrix <span class=\"token operator\">=</span> mat4<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nquat<span class=\"token punctuation\">.</span><span class=\"token function\">fromEuler</span><span class=\"token punctuation\">(</span>axisQuat<span class=\"token punctuation\">,</span> pitchAngle<span class=\"token punctuation\">,</span> yawAngle<span class=\"token punctuation\">,</span> rollAngle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmat4<span class=\"token punctuation\">.</span><span class=\"token function\">fromQuat</span><span class=\"token punctuation\">(</span>rotateMatrix<span class=\"token punctuation\">,</span> axisQuat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmat4<span class=\"token punctuation\">.</span><span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span>viewMatrix<span class=\"token punctuation\">,</span> viewMatrix<span class=\"token punctuation\">,</span> rotateMatrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これにより、ピッチ、ヨー、ロールのオイラー角が 3 つの回転すべてを表すクォータニオンに変換されます。 次に、これは回転変換行列に変換されます。 そして最後に、ビュー行列に回転変換を掛けて、回転を完了します。</p>"}},{"type":"prose","value":{"id":"webxr_で_3d_を表現","title":"WebXR で 3D を表現","isH3":false,"content":"<p>WebXR は 3D グラフィックスをさらに一歩進め、ゴーグルやヘッドセットなどの特別なビジュアルハードウェアを使用して 3D グラフィックスを提示し、実際に 3 次元で存在するように見える 3D グラフィックスを作成できるようにします。 これは、現実世界のコンテキスト内にある可能性があります（拡張現実の場合）。</p>\n<p>奥行きを知覚するには、シーンに 2 つのパースペクティブが必要です。 2 つのビューを比較することにより、オブジェクトの奥行き、ひいてはビューアーと見ているオブジェクトの間の距離を認識することができます。 これが、わずかに間隔を空けて 2 つの目がある理由です。 一度に片方の目を閉じ、2 つの目を交互に切り替えると、この事実を思い出すことができます。 左目は鼻の左側を見ることができますが、右側は見えませんし、右目は鼻の右側を見ることができますが、左側は見えません。 これは、それぞれの目に見える違いの 1 つにすぎません。</p>\n<p>私たちの脳は、視野全体の光レベルと波長に関する 2 つのデータをそれぞれの目から受け取ります。 脳はこのデータを使用して、2 つのパースペクティブ間のわずかな違いを使用して奥行きと距離を把握し、心の中でシーンを構築します。</p>"}},{"type":"prose","value":{"id":"シーンのレンダリング","title":"シーンのレンダリング","isH3":true,"content":"<p>XR（仮想現実（VR）と拡張現実（AR）の両方を含む省略表現）のヘッドセットは、2 つの目で得られるビューと同じように、シーンの 2 つのビューを互いに少しずらして描画することで、3D 画像を提示します。 これらのビューは、それぞれの目に別々に送られ、脳が心の中で 3D 画像を構築するために必要とするデータを収集できるようにします。</p>\n<p>これを行うために、WebXR はレンダラーに、動画の各フレームに対して 2 回（各目に 1 回）シーンを描画するように要求します。 2 つのビューは、同じフレームバッファーにレンダリングされます。 ビューの 1 つは左側にあり、もう 1 つは右側にあります。 XR デバイスは、画面とレンズを使用して、生成された画像の左半分を左目に提示し、右半分を右目に提示します。</p>\n<p>例えば、2560x1440 ピクセルのフレームバッファーを使用するデバイスを考えてみます。 これを 2 つの部分に分割すると（各目に対して半分）、各目のビューが 1280x1440 ピクセルの解像度で描画されます。 概念的には次のようになります。</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/WebXR_Device_API/Cameras/twoviewsoneframebuffer.svg\" alt=\"フレームバッファーが2つの目の視点間でどのように分割されるかを示す図\" width=\"751\" height=\"504\" loading=\"lazy\">\n</p>\n<p>コードは、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRSession\"><code>XRSession</code> <small>(en-US)</small></a> のメソッド <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRSession/requestAnimationFrame\"><code>requestAnimationFrame()</code> <small>(en-US)</small></a> を呼び出して次のアニメーションフレームを提供することを WebXR エンジンに通知し、アニメーションのフレームをレンダリングするコールバック関数を提供します。 ブラウザーがシーンをレンダリングする必要がある場合、ブラウザーはコールバックを呼び出し、入力パラメーターとして現在の時刻と正しいフレームをレンダリングするために必要なデータをカプセル化した <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRFrame\"><code>XRFrame</code> <small>(en-US)</small></a> を提供します。</p>\n<p>この情報には、シーン内のビューアーの位置と向きを説明する <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRViewerPose\"><code>XRViewerPose</code> <small>(en-US)</small></a> と、それぞれがシーンの 1 つのパースペクティブを表す <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRView\"><code>XRView</code> <small>(en-US)</small></a> オブジェクトのリストが含まれます。 現在の WebXR 実装では、このリストには 3 つ以上のエントリはありません。 1 つは左目の位置と視野角を示し、もう 1 つは右目に対して同じことを行います。 与えられた <code>XRView</code> がどの目を表すかは、その <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRView/eye\"><code>eye</code> <small>(en-US)</small></a> プロパティの値（<code>left</code> または <code>right</code> の文字列）を確認することでわかります（3 番目の可能な値 <code>none</code> は、理論的には別の視点を表すために使用できますが、これは現在の API では完全には利用できません）。</p>"}},{"type":"prose","value":{"id":"フレームコールバックの例","title":"フレームコールバックの例","isH3":true,"content":"<p>フレームをレンダリングするためのかなり基本的な（ただし典型的な）コールバックは次のようになります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">myAnimationFrameCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time<span class=\"token punctuation\">,</span> frame</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> adjustedRefSpace <span class=\"token operator\">=</span> <span class=\"token function\">applyPositionOffsets</span><span class=\"token punctuation\">(</span>xrReferenceSpace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> pose <span class=\"token operator\">=</span> frame<span class=\"token punctuation\">.</span><span class=\"token function\">getViewerPose</span><span class=\"token punctuation\">(</span>adjustedRefSpace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  animationFrameRequestID <span class=\"token operator\">=</span> frame<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>myAnimationFrameCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pose<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> glLayer <span class=\"token operator\">=</span> frame<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>renderState<span class=\"token punctuation\">.</span>baseLayer<span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindFramebuffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">FRAMEBUFFER</span><span class=\"token punctuation\">,</span> glLayer<span class=\"token punctuation\">.</span>framebuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">CheckGLError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Binding the framebuffer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">clearColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">clearDepth</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">COLOR_BUFFER_BIT</span> <span class=\"token operator\">|</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">DEPTH_BUFFER_BIT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">CheckGLError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Clearing the framebuffer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> deltaTime <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>time <span class=\"token operator\">-</span> lastFrameTime<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.001</span><span class=\"token punctuation\">;</span>\n    lastFrameTime <span class=\"token operator\">=</span> time<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> view <span class=\"token keyword\">of</span> pose<span class=\"token punctuation\">.</span>views<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> viewport <span class=\"token operator\">=</span> glLayer<span class=\"token punctuation\">.</span><span class=\"token function\">getViewport</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      gl<span class=\"token punctuation\">.</span><span class=\"token function\">viewport</span><span class=\"token punctuation\">(</span>viewport<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> viewport<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> viewport<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> viewport<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">CheckGLError</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Setting viewport for eye: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>view<span class=\"token punctuation\">.</span>eye<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token function\">myRenderScene</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> view<span class=\"token punctuation\">,</span> sceneData<span class=\"token punctuation\">,</span> deltaTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>コールバックは、カスタム関数 <code>applyPositionOffsets()</code> を呼び出すことから始まります。 この関数は、参照空間を取り、キーボードやマウスのような WebXR によって制御されていないデバイスからのユーザー入力などを考慮するために必要な変更を変換行列に適用します。 この関数によって返された調整済みの <a href=\"/ja/docs/Web/API/XRReferenceSpace\"><code>XRReferenceSpace</code></a> は、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRFrame\"><code>XRFrame</code> <small>(en-US)</small></a> のメソッド <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRFrame/getViewerPose\"><code>getViewerPose()</code> <small>(en-US)</small></a> に渡されて、ビューアーの位置と視野角を表す <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRViewerPose\"><code>XRViewerPose</code> <small>(en-US)</small></a> を取得します。</p>\n<p>次に、動画の次のフレームをレンダリングするためのリクエストをキューに入れます。 そのためには <code>requestAnimationFrame()</code> を再度呼び出すだけで、後でそれを行うことを心配する必要はありません。</p>\n<p>次に、シーンをレンダリングします。 ポーズの取得に成功した場合、セッションの <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRSession/renderState\"><code>renderState</code> <small>(en-US)</small></a> オブジェクトの <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRRenderState/baseLayer\"><code>baseLayer</code> <small>(en-US)</small></a> プロパティから、レンダリングに使用する必要がある <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRWebGLLayer\"><code>XRWebGLLayer</code> <small>(en-US)</small></a> を取得します。 これを <a href=\"/ja/docs/Web/API/WebGLRenderingContext\"><code>WebGLRenderingContext</code></a> のメソッド <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLRenderingContext/bindFramebuffer\"><code>gl.bindFrameBuffer()</code> <small>(en-US)</small></a> を使用して WebGL の <code>gl.FRAMEBUFFER</code> ターゲットにバインドします。</p>\n<p>次に、レンダーラーがすべてのピクセルに触れるわけではないため、フレームバッファーをクリアして、既知の状態から開始するようにします。 <a href=\"/ja/docs/Web/API/WebGLRenderingContext/clearColor\" title=\"gl.clearColor()\"><code>gl.clearColor()</code></a> を使用してクリアカラーを不透明な黒に設定し、<a href=\"/ja/docs/Web/API/WebGLRenderingContext\"><code>WebGLRenderingContext</code></a> のメソッド <a href=\"/ja/docs/Web/API/WebGLRenderingContext/clearDepth\" title=\"gl.clearDepth()\"><code>gl.clearDepth()</code></a> を呼び出して奥行きバッファーを 1.0 にクリアする値を設定します。 次に、<a href=\"/ja/docs/Web/API/WebGLRenderingContext\"><code>WebGLRenderingContext</code></a> のメソッド <a href=\"/ja/docs/Web/API/WebGLRenderingContext/clear\" title=\"gl.clear()\"><code>gl.clear()</code></a> を呼び出します。 これにより、フレームバッファー（マスクパラメーターに <code>gl.COLOR_BUFFER_BIT</code> が含まれるため）と奥行きバッファー（<code>gl.DEPTH_BUFFER_BIT</code> が含まれるため）がクリアされます。</p>\n<p>次に、フレームの希望するレンダリング時刻と最後のフレームが描画された時刻を比較して、前のフレームがレンダリングされてからの経過時間を判断します。 この値はマイクロ秒単位なので、0.001 を掛けて（または 1000 で割り算して）秒に変換します。</p>\n<p>次に、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRViewerPose\"><code>XRViewerPose</code> <small>(en-US)</small></a> 配列の <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRViewerPose/views\"><code>views</code> <small>(en-US)</small></a> で見つかったポーズのビューをループします。 ビューごとに、使用する適切なビューポートを <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRWebGLLayer\"><code>XRWebGLLayer</code> <small>(en-US)</small></a> に要求し、位置と大きさの情報を <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLRenderingContext/viewport\"><code>gl.viewport()</code> <small>(en-US)</small></a> に渡して、一致するように WebGL ビューポートを構成します。 これによりレンダリングが制限され、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRView/eye\"><code>view.eye</code> <small>(en-US)</small></a> で識別される目で見た画像を表すフレームバッファーの部分にのみ描画できるようになります。</p>\n<p>制約が確立され、必要なすべての準備が整ったら、カスタム関数 <code>myRenderScene()</code> を呼び出して、実際に計算と WebGL レンダリングを実行してフレームをレンダリングします。 この場合、WebGL コンテキストの <code>gl</code>、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XRView\"><code>XRView</code> <small>(en-US)</small></a> の <code>view</code>、<code>sceneData</code> オブジェクト（頂点シェーダー、フラグメントシェーダー、頂点リスト、テクスチャなどを含む）、および <code>deltaTime</code> を渡しています。 <code>deltaTime</code> は、前のフレームからどれだけの時間が経過したかを示します。 これにより、アニメーションをどこまで進めるかがわかります。</p>\n<p>この関数が戻ると、WebXR によって使用されている WebGL フレームバッファーには、シーンの 2 つのコピーがあり、それぞれがフレームの半分を占めています。 1 つは左目用、もう 1 つは右目用です。 これが、XR ソフトウェアとドライバーを介してヘッドセットに到達し、各半分が適切な目に表示されます。</p>"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/API/WebXR_Device_API/Geometry\">幾何学と参照空間</a></li>\n  <li><a href=\"/ja/docs/Web/API/WebGL_API/WebGL_model_view_projection\">WebGL モデル ビュー 射影</a></li>\n  <li><a href=\"/ja/docs/Web/API/WebGL_API/Matrix_math_for_the_web\">ウェブの行列計算</a></li>\n  <li><a href=\"/ja/docs/Web/API/WebXR_Device_API/Movement_and_motion\">移動、向き、モーション: WebXR の例</a></li>\n</ul>"}}],"toc":[{"text":"カメラと相対運動","id":"カメラと相対運動"},{"text":"古典的な映画撮影のシミュレーション","id":"古典的な映画撮影のシミュレーション"},{"text":"動きを組み合わせる","id":"動きを組み合わせる"},{"text":"WebXR で 3D を表現","id":"webxr_で_3d_を表現"},{"text":"関連情報","id":"関連情報"}],"summary":"アプリケーションで視点とカメラを管理するためのコードを検討する際に理解する最初で最も重要なことは、WebXR にカメラがないことです。 WebGL または WebXR API によって提供される、回転して移動するだけで画面に表示されるものを自動的に変更できるビューアーを表す魔法のオブジェクトはありません。 このガイドでは、カメラを動かさずに WebGL を使用してカメラの動きをシミュレートする方法を示します。 これらの手法は、任意の WebGL（または WebXR）プロジェクトで使用できます。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Viewpoints and viewers: Simulating cameras in WebXR","locale":"en-US","native":"English (US)"}],"source":{"folder":"ja/web/api/webxr_device_api/cameras","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/webxr_device_api/cameras/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/WebXR_Device_API","title":"WebXR Device API"},{"uri":"/ja/docs/Web/API/WebXR_Device_API/Cameras","title":"視点とビューアー: WebXR でのカメラのシミュレーション"}],"pageTitle":"視点とビューアー: WebXR でのカメラのシミュレーション - Web API | MDN","noIndexing":false}}