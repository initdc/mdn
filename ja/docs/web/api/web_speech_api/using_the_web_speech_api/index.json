{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Web Speech APIを使う","mdn_url":"/ja/docs/Web/API/Web_Speech_API/Using_the_Web_Speech_API","locale":"ja","native":"日本語","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Web Speech API は、音声認識と音声合成（text to speech または tts としても知られています）という 2 つの異なる分野の機能を提供しており、アクセシビリティと制御メカニズムに興味深い新しい可能性をもたらします。この記事では、両方の分野の簡単な紹介とデモを提供します。</p>"}},{"type":"prose","value":{"id":"音声認識","title":"音声認識","isH3":false,"content":"<p>音声認識ではデバイスのマイクを通して音声を受信し、音声認識サービスによって文法のリスト（基本的には特定のアプリで認識させたいボキャブラリー）と照合されます。単語やフレーズが正常に認識されると、結果（または結果のリスト）がテキスト文字列として返され、その結果としてさらなるアクションを開始することができます。</p>\n<p>Web Speech API には、このための主要なコントローラインターフェイスである <a href=\"/ja/docs/Web/API/SpeechRecognition\"><code>SpeechRecognition</code></a> と、文法や結果などを表現するためのいくつかの密接に関連したインターフェースがあります。一般的には、デバイス上で利用可能なデフォルトの音声認識システムが音声認識に使用されます — 最近のほとんどの OS には音声コマンドを発行するための音声認識システムが搭載されています。macOS の Dictation、iOS の Siri、Windows 10 の Cortana、Android の Speech などを考えてみてください。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> <strong>注釈</strong>: Chrome などの一部のブラウザでは、Web ページで音声認識を使用するためにサーバーベースの認識エンジンが必要です。音声が認識処理のためにウェブサービスに送信されるため、オフラインでは機能しません。</p>\n</div>"}},{"type":"prose","value":{"id":"デモ","title":"デモ","isH3":true,"content":"<p>Web 音声認識の簡単な使い方を示すために、<a href=\"https://github.com/mdn/web-speech-api/tree/master/speech-color-changer\" class=\"external\" rel=\" noopener\">Speech color changer</a>というデモを書いてみました。画面をタップ/クリックし、HTML の色のキーワードを言うと、アプリの背景色がその色に変わります。</p>\n<p>\n  <img src=\"https://mdn.mozillademos.org/files/11975/speech-color-changer.png\" alt=\"The UI of an app titled Speech Color changer. It invites the user to tap the screen and say a color, and then it turns the background of the app that colour. In this case it has turned the background red.\" loading=\"lazy\">\n</p>\n<p>デモを実行するには、それが一部となっている Github リポジトリをクローン（または<a href=\"https://github.com/mdn/web-speech-api/archive/master.zip\" class=\"external\" rel=\" noopener\">直接ダウンロード</a>）し、サポートされているデスクトップブラウザで HTML index ファイルを開くか、Chrome のようなサポートされているモバイルブラウザで<a href=\"https://mdn.github.io/web-speech-api/speech-color-changer/\" class=\"external\" rel=\" noopener\">ライブデモの URL</a>に移動することができます。</p>"}},{"type":"prose","value":{"id":"ブラウザ対応","title":"ブラウザ対応","isH3":true,"content":"<p>Web Speech API 音声認識のサポートは、通常 Chrome for Desktop と Android に限られています — Chrome はバージョン 33 付近からサポートしていますが、プレフィックス付きのインターフェイスを使用しているため、 <code>webkitSpeechRecognition</code> などのプレフィックス付きバージョンを含める必要があります。</p>"}},{"type":"prose","value":{"id":"html_と_css","title":"HTML と CSS","isH3":true,"content":"<p>アプリの HTML と CSS は本当に簡単です。タイトル、説明段落、診断メッセージを出力する div があるだけです。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>Speech color changer<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>Tap/click then say a color to change the background color of the app.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>output<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>em</span><span class=\"token punctuation\">&gt;</span></span>...diagnostic messages<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>em</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>この CSS では、デバイスをまたいでも問題なく見えるように、非常にシンプルなレスポンシブ・スタイリングを提供しています。</p>"}},{"type":"prose","value":{"id":"javascript","title":"JavaScript","isH3":true,"content":"<p>JavaScript をもう少し詳しく見てみましょう。</p>\n<h4 id=\"chrome_対応\">Chrome 対応</h4>\n<p>前述したように、Chrome は現在プレフィックス付きのプロパティで音声認識をサポートしているので、適切なオブジェクトを Chrome に供給し、そして将来的な実装でプレフィックスなしの機能をサポートする可能性も踏まえ、以下の行をコードの最初に追加しています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> SpeechRecognition <span class=\"token operator\">=</span> SpeechRecognition <span class=\"token operator\">||</span> webkitSpeechRecognition\n<span class=\"token keyword\">var</span> SpeechGrammarList <span class=\"token operator\">=</span> SpeechGrammarList <span class=\"token operator\">||</span> webkitSpeechGrammarList\n<span class=\"token keyword\">var</span> SpeechRecognitionEvent <span class=\"token operator\">=</span> SpeechRecognitionEvent <span class=\"token operator\">||</span> webkitSpeechRecognitionEvent\n</code></pre></div>\n<h4 id=\"文法\">文法</h4>\n<p>コードの次の部分では、アプリが認識する文法を定義します。次の変数は文法を保持するために定義されています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'aqua'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'azure'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'beige'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bisque'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'black'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'brown'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'chocolate'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'coral'</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> grammar <span class=\"token operator\">=</span> <span class=\"token string\">'#JSGF V1.0; grammar colors; public &lt;color&gt; = '</span> <span class=\"token operator\">+</span> colors<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' | '</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">' ;'</span>\n</code></pre></div>\n<p>使用されている文法形式は <a href=\"https://www.w3.org/TR/jsgf/\" class=\"external\" rel=\" noopener\">JSpeech Grammar Format</a> (<strong>JSGF</strong>) です — それについての詳細はリンク先の仕様書を参照してください。しかし、今のところは手っ取り早く実行してみましょう。</p>\n<ul>\n  <li>行の区切りは JavaScript と同じようにセミコロンで区切られています。</li>\n  <li>最初の行 — <code>#JSGF V1.0;</code> — は、使用されているフォーマットとバージョンを示します。これは常に最初に含める必要があります。</li>\n  <li>2 行目は認識したい用語のタイプを示します。<code>public</code> はパブリックルールであることを宣言し、角括弧内の文字列はこの用語の認識名 (<code>color</code>) を定義し、等号の後に続く項目のリストは、用語の適切な値として認識され受け入れられる代替値です。それぞれがパイプ文字で区切られていることに注意してください。</li>\n  <li>上記の構造に沿って別の行に好きなだけ多くの用語を定義し、かなり複雑な文法定義を含めることができます。この基本的なデモのために私たちは物事をシンプルにしています。</li>\n</ul>\n<h4 id=\"文法を音声認識にプラグインする\">文法を音声認識にプラグインする</h4>\n<p>次にやるべきことは、アプリケーションの認識を制御する音声認識インスタンスを定義することです。これは <a href=\"/ja/docs/Web/API/SpeechRecognition/SpeechRecognition\" title=\"SpeechRecognition()\"><code>SpeechRecognition()</code></a> コンストラクタを使用して行います。また、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SpeechGrammarList/SpeechGrammarList\"><code>SpeechGrammarList()</code> <small>(en-US)</small></a> コンストラクタを使用して、文法を含む新しい音声文法リストも作成します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> recognition <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SpeechRecognition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> speechRecognitionList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SpeechGrammarList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SpeechGrammarList/addFromString\"><code>SpeechGrammarList.addFromString()</code> <small>(en-US)</small></a> メソッドを使ってリストに <code>grammar</code> を追加します。 このメソッドは追加したい文字列をパラメータとして受けとり、さらにオプションで、リスト内で利用可能な他の文法との関係においてこの文法の重要度を指定する重み値を受け取ります（0 から 1 までの範囲で指定できます）。追加された文法は<a href=\"/ja/docs/Web/API/SpeechGrammar\"><code>SpeechGrammar</code></a> オブジェクトのインスタンスとしてリスト内で利用できます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>speechRecognitionList<span class=\"token punctuation\">.</span><span class=\"token function\">addFromString</span><span class=\"token punctuation\">(</span>grammar<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>次に、 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SpeechGrammarList\"><code>SpeechGrammarList</code> <small>(en-US)</small></a> を <a href=\"/ja/docs/Web/API/SpeechRecognition/grammars\"><code>SpeechRecognition.grammars</code></a> プロパティの値に設定することで、音声認識インスタンスに <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SpeechGrammarList\"><code>SpeechGrammarList</code> <small>(en-US)</small></a> を追加します。次に進む前に、認識インスタンスの他のいくつかのプロパティも設定します。</p>\n<ul>\n  <li><a href=\"/ja/docs/Web/API/SpeechRecognition/continuous\"><code>SpeechRecognition.continuous</code></a>: 認識が開始されるたびに連続した結果をキャプチャする (<code>true</code>) か、または単一の結果だけをキャプチャする (<code>false</code>) かを制御します。</li>\n  <li><a href=\"/ja/docs/Web/API/SpeechRecognition/lang\"><code>SpeechRecognition.lang</code></a>: 認識の言語を設定します。これを設定することは良い習慣であるため、推奨されます。</li>\n  <li><a href=\"/ja/docs/Web/API/SpeechRecognition/interimResults\"><code>SpeechRecognition.interimResults</code></a>: 音声認識システムが中間的な結果を返すか、最終的な結果だけを返すか定義します。このシンプルなデモでは最終的な結果で十分です。</li>\n  <li><a href=\"/ja/docs/Web/API/SpeechRecognition/maxAlternatives\"><code>SpeechRecognition.maxAlternatives</code></a>: 結果ごとに返される代替候補数を設定します。これは、結果が完全に明確ではなく、ユーザーが正しいものを選択できるように代替候補のリストを表示したい場合などに便利な場合があります。しかし、このシンプルなデモでは必要ないのでここでは 1 つだけ指定します（これは実際にはデフォルトです）。</li>\n</ul>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>recognition<span class=\"token punctuation\">.</span>grammars <span class=\"token operator\">=</span> speechRecognitionList<span class=\"token punctuation\">;</span>\nrecognition<span class=\"token punctuation\">.</span>continuous <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\nrecognition<span class=\"token punctuation\">.</span>lang <span class=\"token operator\">=</span> <span class=\"token string\">'en-US'</span><span class=\"token punctuation\">;</span>\nrecognition<span class=\"token punctuation\">.</span>interimResults <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\nrecognition<span class=\"token punctuation\">.</span>maxAlternatives <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"音声認識の開始\">音声認識の開始</h4>\n<p>出力 <a href=\"/ja/docs/Web/HTML/Element/div\"><code>&lt;div&gt;</code></a> と HTML 要素への参照を取得（診断メッセージを出力したり、後でアプリの背景色を更新したりできるようにするため）した後、画面がタップ/クリックされたときに音声認識サービスが開始されるように onclick ハンドラを実装します。これは <a href=\"/ja/docs/Web/API/SpeechRecognition/start\"><code>SpeechRecognition.start()</code></a> を呼び出すことで実現しています。 <code>forEach()</code> メソッドは何色を言っているかを示す色付きインジケータを出力するために使われています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> diagnostic <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.output'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> bg <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> hints <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.hints'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> colorHTML<span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\ncolors<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  colorHTML <span class=\"token operator\">+=</span> <span class=\"token string\">'&lt;span style=\"background-color:'</span> <span class=\"token operator\">+</span> v <span class=\"token operator\">+</span> <span class=\"token string\">';\"&gt; '</span> <span class=\"token operator\">+</span> v <span class=\"token operator\">+</span> <span class=\"token string\">' &lt;/span&gt;'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhints<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'Tap/click then say a color to change the background color of the app. Try '</span> <span class=\"token operator\">+</span> colorHTML <span class=\"token operator\">+</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">;</span>\n\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  recognition<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Ready to receive a color command.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"結果の受け取りとハンドリング\">結果の受け取りとハンドリング</h4>\n<p>音声認識が開始されると、結果やその他の周辺情報を取得するために使用できる多くのイベントハンドラがあります（<a href=\"/ja/docs/Web/API/SpeechRecognition#event_handlers\"><code>SpeechRecognition</code> のイベントハンドラのリスト</a> を参照してください）。最も一般的なものは <a href=\"/ja/docs/Web/API/SpeechRecognition/result_event\"><code>SpeechRecognition.onresult</code></a> で、成功した結果を受信したときに発火されます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>recognition<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onresult</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> color <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>results<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>transcript<span class=\"token punctuation\">;</span>\n  diagnostic<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'Result received: '</span> <span class=\"token operator\">+</span> color <span class=\"token operator\">+</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">;</span>\n  bg<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Confidence: '</span> <span class=\"token operator\">+</span> event<span class=\"token punctuation\">.</span>results<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>confidence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ここの 2 行目はちょっと複雑そうなので、順を追って説明していきましょう。<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SpeechRecognitionEvent/results\"><code>SpeechRecognitionEvent.results</code> <small>(en-US)</small></a>プロパティは、 <a href=\"/ja/docs/Web/API/SpeechRecognitionResult\"><code>SpeechRecognitionResult</code></a> オブジェクトを含む <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SpeechRecognitionResultList\"><code>SpeechRecognitionResultList</code> <small>(en-US)</small></a> オブジェクトを返します。これはゲッターを持っているので配列のようにアクセスでき、最初の<code>[0]</code>は 0 の位置にある<code>SpeechRecognitionResult</code>を返します。各 <code>SpeechRecognitionResult</code> オブジェクトには、個々に認識された単語を含む <a href=\"/ja/docs/Web/API/SpeechRecognitionAlternative\"><code>SpeechRecognitionAlternative</code></a> オブジェクトが含まれています。これらは配列のようにアクセスできるようにゲッターも持っています — 2 番目の<code>[0]</code>は、したがって位置 0 の <code>SpeechRecognitionAlternative</code> を返します。次に、その <code>transcript</code> プロパティを返して個々の認識結果を含む文字列を文字列として取得し、背景色をその色に設定し、認識された色を UI の診断メッセージとして報告します。</p>\n<p>また、 <a href=\"/ja/docs/Web/API/SpeechRecognition/speechend_event\"><code>SpeechRecognition.onspeechend</code></a> ハンドラを使用して音声認識サービスの実行を停止します（1 つの単語が認識され、それが発話され終わったら <a href=\"/ja/docs/Web/API/SpeechRecognition/stop\"><code>SpeechRecognition.stop()</code></a>) を使用します）。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>recognition<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onspeechend</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  recognition<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"エラーや認識されない発話のハンドリング\">エラーや認識されない発話のハンドリング</h4>\n<p>最後の 2 つのハンドラは、定義された文法にない音声が認識されたケースやエラーが発生したケースを処理するためのものです。<a href=\"/ja/docs/Web/API/SpeechRecognition/nomatch_event\"><code>SpeechRecognition.onnomatch</code></a> は最初に言及したケースを処理することになっているようですが、今のところ正しく動作しているようには見えないことに注意してください（とにかく認識されたものを返すだけです）。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>recognition<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onnomatch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  diagnostic<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'I didnt recognise that color.'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><a href=\"/ja/docs/Web/API/SpeechRecognition/error_event\"><code>SpeechRecognition.onerror</code></a> は、認識に成功して実際にエラーが発生したケースを処理します — <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SpeechRecognitionErrorEvent/error\"><code>SpeechRecognitionError.error</code> <small>(en-US)</small></a> プロパティには、返された実際のエラーが含まれます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>recognition<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  diagnostic<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'Error occurred in recognition: '</span> <span class=\"token operator\">+</span> event<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"speech_synthesis","title":"Speech synthesis","isH3":false,"content":"<p>Speech synthesis (aka text-to-speech, or tts) involves receiving synthesising text contained within an app to speech, and playing it out of a device's speaker or audio output connection.</p>\n<p>The Web Speech API has a main controller interface for this — <a href=\"/ja/docs/Web/API/SpeechSynthesis\"><code>SpeechSynthesis</code></a> — plus a number of closely-related interfaces for representing text to be synthesised (known as utterances), voices to be used for the utterance, etc. Again, most OSes have some kind of speech synthesis system, which will be used by the API for this task as available.</p>"}},{"type":"prose","value":{"id":"demo","title":"Demo","isH3":true,"content":"<p>To show simple usage of Web speech synthesis, we've provided a demo called <a href=\"https://mdn.github.io/web-speech-api/speak-easy-synthesis/\" class=\"external\" rel=\" noopener\">Speak easy synthesis</a>. This includes a set of form controls for entering text to be synthesised, and setting the pitch, rate, and voice to use when the text is uttered. After you have entered your text, you can press <kbd>Enter</kbd>/<kbd>Return</kbd> to hear it spoken.</p>\n<p>\n  <img src=\"https://mdn.mozillademos.org/files/11977/speak-easy-synthesis.png\" alt=\"UI of an app called speak easy synthesis. It has an input field in which to input text to be synthesised, slider controls to change the rate and pitch of the speech, and a drop down menu to choose between different voices.\" loading=\"lazy\">\n</p>\n<p>To run the demo, you can clone (or <a href=\"https://github.com/mdn/web-speech-api/archive/master.zip\" class=\"external\" rel=\" noopener\">directly download</a>) the Github repo it is part of, open the HTML index file in a supporting desktop browser, or navigate to the <a href=\"https://mdn.github.io/web-speech-api/speak-easy-synthesis/\" class=\"external\" rel=\" noopener\">live demo URL</a> in a supporting mobile browser like Chrome, or Firefox OS.</p>"}},{"type":"prose","value":{"id":"browser_support","title":"Browser support","isH3":true,"content":"<p>Support for Web Speech API speech synthesis is still getting there across mainstream browsers, and is currently limited to the following:</p>\n<ul>\n  <li>Firefox desktop and mobile support it in Gecko 42+ (Windows)/44+, without prefixes, and it can be turned on by flipping the <code>media.webspeech.synth.enabled</code> flag to <code>true</code> in <code>about:config</code>.</li>\n  <li>Firefox OS 2.5+ supports it, by default, and without the need for any permissions.</li>\n  <li>Chrome for Desktop and Android have supported it since around version 33, without prefixes.</li>\n</ul>"}},{"type":"prose","value":{"id":"html_and_css","title":"HTML and CSS","isH3":true,"content":"<p>The HTML and CSS are again pretty trivial, simply containing a title, some instructions for use, and a form with some simple controls. The <a href=\"/ja/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a> element is initially empty, but is populated with <a href=\"/ja/docs/Web/HTML/Element/option\"><code>&lt;option&gt;</code></a>s via JavaScript (see later on.)</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>Speech synthesiser<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>Enter some text in the input below and press return to hear it. change voices using the dropdown menu.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>txt<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rate<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Rate<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>range<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">min</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0.5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">max</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">step</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0.1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rate<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rate-value<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clearfix<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pitch<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Pitch<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>range<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">min</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">max</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">step</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0.1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pitch<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pitch-value<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clearfix<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"javascript_2","title":"JavaScript","isH3":true,"content":"<p>Let's investigate the JavaScript that powers this app.</p>\n<h4 id=\"setting_variables\">Setting variables</h4>\n<p>First of all, we capture references to all the DOM elements involved in the UI, but more interestingly, we capture a reference to <a href=\"/ja/docs/Web/API/Window/speechSynthesis\"><code>Window.speechSynthesis</code></a>. This is API's entry point — it returns an instance of <a href=\"/ja/docs/Web/API/SpeechSynthesis\"><code>SpeechSynthesis</code></a>, the controller interface for web speech synthesis.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> synth <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>speechSynthesis<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> inputForm <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'form'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> inputTxt <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> voiceSelect <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'select'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> pitch <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#pitch'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> pitchValue <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.pitch-value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> rate <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#rate'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> rateValue <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.rate-value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> voices <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"populating_the_select_element\">Populating the select element</h4>\n<p>To populate the <a href=\"/ja/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a> element with the different voice options the device has available, we've written a <code>populateVoiceList()</code> function. We first invoke <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SpeechSynthesis/getVoices\"><code>SpeechSynthesis.getVoices()</code> <small>(en-US)</small></a>, which returns a list of all the available voices, represented by <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SpeechSynthesisVoice\"><code>SpeechSynthesisVoice</code> <small>(en-US)</small></a> objects. We then loop through this list — for each voice we create an <a href=\"/ja/docs/Web/HTML/Element/option\"><code>&lt;option&gt;</code></a> element, set its text content to display the name of the voice (grabbed from <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SpeechSynthesisVoice/name\"><code>SpeechSynthesisVoice.name</code> <small>(en-US)</small></a>), the language of the voice (grabbed from <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SpeechSynthesisVoice/lang\"><code>SpeechSynthesisVoice.lang</code> <small>(en-US)</small></a>), and <code>-- DEFAULT</code> if the voice is the default voice for the synthesis engine (checked by seeing if <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SpeechSynthesisVoice/default\"><code>SpeechSynthesisVoice.default</code> <small>(en-US)</small></a> returns <code>true</code>.)</p>\n<p>We also create <code>data-</code> attributes for each option, containing the name and language of the associated voice, so we can grab them easily later on, and then append the options as children of the select.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">populateVoiceList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  voices <span class=\"token operator\">=</span> synth<span class=\"token punctuation\">.</span><span class=\"token function\">getVoices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> voices<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> option <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'option'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    option<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> voices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">' ('</span> <span class=\"token operator\">+</span> voices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lang <span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>voices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      option<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">+=</span> <span class=\"token string\">' -- DEFAULT'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    option<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-lang'</span><span class=\"token punctuation\">,</span> voices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    option<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-name'</span><span class=\"token punctuation\">,</span> voices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    voiceSelect<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>option<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>When we come to run the function, we do the following. This is because Firefox doesn't support <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SpeechSynthesis/voiceschanged_event\"><code>SpeechSynthesis.onvoiceschanged</code> <small>(en-US)</small></a>, and will just return a list of voices when <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SpeechSynthesis/getVoices\"><code>SpeechSynthesis.getVoices()</code> <small>(en-US)</small></a> is fired. With Chrome however, you have to wait for the event to fire before populating the list, hence the if statement seen below.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">populateVoiceList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>speechSynthesis<span class=\"token punctuation\">.</span>onvoiceschanged <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  speechSynthesis<span class=\"token punctuation\">.</span>onvoiceschanged <span class=\"token operator\">=</span> populateVoiceList<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"speaking_the_entered_text\">Speaking the entered text</h4>\n<p>Next, we create an event handler to start speaking the text entered into the text field. We are using an <a href=\"/en-US/docs/Web/API/HTMLFormElement/submit_event\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">onsubmit (en-US)</a> handler on the form so that the action happens when <kbd>Enter</kbd>/<kbd>Return</kbd> is pressed. We first create a new <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SpeechSynthesisUtterance/SpeechSynthesisUtterance\"><code>SpeechSynthesisUtterance()</code> <small>(en-US)</small></a> instance using its constructor — this is passed the text input's value as a parameter.</p>\n<p>Next, we need to figure out which voice to use. We use the <a href=\"/ja/docs/Web/API/HTMLSelectElement\"><code>HTMLSelectElement</code></a> <code>selectedOptions</code> property to return the currently selected <a href=\"/ja/docs/Web/HTML/Element/option\"><code>&lt;option&gt;</code></a> element. We then use this element's <code>data-name</code> attribute, finding the <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SpeechSynthesisVoice\"><code>SpeechSynthesisVoice</code> <small>(en-US)</small></a> object whose name matches this attribute's value. We set the matching voice object to be the value of the <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SpeechSynthesisUtterance/voice\"><code>SpeechSynthesisUtterance.voice</code> <small>(en-US)</small></a> property.</p>\n<p>Finally, we set the <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SpeechSynthesisUtterance/pitch\"><code>SpeechSynthesisUtterance.pitch</code> <small>(en-US)</small></a> and <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SpeechSynthesisUtterance/rate\"><code>SpeechSynthesisUtterance.rate</code> <small>(en-US)</small></a> to the values of the relevant range form elements. Then, with all necessary preparations made, we start the utterance being spoken by invoking <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SpeechSynthesis/speak\"><code>SpeechSynthesis.speak()</code> <small>(en-US)</small></a>, passing it the <a href=\"/ja/docs/Web/API/SpeechSynthesisUtterance\"><code>SpeechSynthesisUtterance</code></a> instance as a parameter.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>inputForm<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onsubmit</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> utterThis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SpeechSynthesisUtterance</span><span class=\"token punctuation\">(</span>inputTxt<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> selectedOption <span class=\"token operator\">=</span> voiceSelect<span class=\"token punctuation\">.</span>selectedOptions<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> voices<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>voices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> selectedOption<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      utterThis<span class=\"token punctuation\">.</span>voice <span class=\"token operator\">=</span> voices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  utterThis<span class=\"token punctuation\">.</span>pitch <span class=\"token operator\">=</span> pitch<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  utterThis<span class=\"token punctuation\">.</span>rate <span class=\"token operator\">=</span> rate<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  synth<span class=\"token punctuation\">.</span><span class=\"token function\">speak</span><span class=\"token punctuation\">(</span>utterThis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>In the final part of the handler, we include an <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SpeechSynthesisUtterance/pause_event\"><code>SpeechSynthesisUtterance.onpause</code> <small>(en-US)</small></a> handler to demonstrate how <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SpeechSynthesisEvent\"><code>SpeechSynthesisEvent</code> <small>(en-US)</small></a> can be put to good use. When <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SpeechSynthesis/pause\"><code>SpeechSynthesis.pause()</code> <small>(en-US)</small></a> is invoked, this returns a message reporting the character number and name that the speech was paused at.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>   utterThis<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onpause</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> char <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>utterance<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>charIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Speech paused at character '</span> <span class=\"token operator\">+</span> event<span class=\"token punctuation\">.</span>charIndex <span class=\"token operator\">+</span> <span class=\"token string\">' of \"'</span> <span class=\"token operator\">+</span>\n    event<span class=\"token punctuation\">.</span>utterance<span class=\"token punctuation\">.</span>text <span class=\"token operator\">+</span> <span class=\"token string\">'\", which is \"'</span> <span class=\"token operator\">+</span> char <span class=\"token operator\">+</span> <span class=\"token string\">'\".'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Finally, we call <a href=\"/ja/docs/Web/API/HTMLElement/blur\">blur()</a> on the text input. This is mainly to hide the keyboard on Firefox OS.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  inputTxt<span class=\"token punctuation\">.</span><span class=\"token function\">blur</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"updating_the_displayed_pitch_and_rate_values\">Updating the displayed pitch and rate values</h4>\n<p>The last part of the code simply updates the <code>pitch</code>/<code>rate</code> values displayed in the UI, each time the slider positions are moved.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>pitch<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onchange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  pitchValue<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> pitch<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nrate<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onchange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  rateValue<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> rate<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}}],"toc":[{"text":"音声認識","id":"音声認識"},{"text":"Speech synthesis","id":"speech_synthesis"}],"summary":"Web Speech API は、音声認識と音声合成（text to speech または tts としても知られています）という 2 つの異なる分野の機能を提供しており、アクセシビリティと制御メカニズムに興味深い新しい可能性をもたらします。この記事では、両方の分野の簡単な紹介とデモを提供します。","popularity":0.0003,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using the Web Speech API","locale":"en-US","native":"English (US)"},{"title":"Uso de la Web Speech API","locale":"es","native":"Español"},{"title":"Utiliser l'API Web Speech","locale":"fr","native":"Français"},{"title":"Применение Web Speech API","locale":"ru","native":"Русский"},{"title":"使用 Web Speech API","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/web_speech_api/using_the_web_speech_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/web_speech_api/using_the_web_speech_api/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/Web_Speech_API","title":"Web Speech API"},{"uri":"/ja/docs/Web/API/Web_Speech_API/Using_the_Web_Speech_API","title":"Web Speech APIを使う"}],"pageTitle":"Web Speech APIを使う - Web API | MDN","noIndexing":false}}