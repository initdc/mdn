{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Request()","mdn_url":"/ja/docs/Web/API/Request/Request","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/Request\"><code>Request</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>コンストラクター</summary><ol><li><em><code>Request()</code></em></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>プロパティ</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/body\"><code>body</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/bodyUsed\"><code>bodyUsed</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/API/Request/cache\"><code>cache</code></a></li><li><a href=\"/ja/docs/Web/API/Request/credentials\"><code>credentials</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/destination\"><code>destination</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/API/Request/headers\"><code>headers</code></a></li><li><a href=\"/ja/docs/Web/API/Request/integrity\"><code>integrity</code></a></li><li><a href=\"/ja/docs/Web/API/Request/method\"><code>method</code></a></li><li><a href=\"/ja/docs/Web/API/Request/mode\"><code>mode</code></a></li><li><svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/priority\"><code>priority</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/API/Request/redirect\"><code>redirect</code></a></li><li><a href=\"/ja/docs/Web/API/Request/referrer\"><code>referrer</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/referrerPolicy\"><code>referrerPolicy</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/API/Request/url\"><code>url</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>メソッド</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/arrayBuffer\"><code>arrayBuffer()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/blob\"><code>blob()</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/API/Request/clone\"><code>clone()</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/formData\"><code>formData()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/json\"><code>json()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/text\"><code>text()</code> <small>(en-US)</small></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>Request()</code></strong> コンストラクターは、新しい <a href=\"/ja/docs/Web/API/Request\"><code>Request</code></a> オブジェクトを生成します。</p>"}},{"type":"prose","value":{"id":"構文","title":"構文","isH3":false,"content":"<pre class=\"notranslate\">var myRequest = new Request(input[, init]);\n</pre>"}},{"type":"prose","value":{"id":"引数","title":"引数","isH3":true,"content":"<dl>\n  <dt id=\"input\"><em>input</em></dt>\n  <dd>\n    <p>取得したいリソースを定義します。次のいずれかの値を取ります。</p>\n    <ul>\n      <li>取得したいリソースの直接の URL を含む <a href=\"/ja/docs/Glossary/String\"><code>USVString</code></a>。</li>\n      <li>効率的にコピーを作成するための <a href=\"/ja/docs/Web/API/Request\"><code>Request</code></a> オブジェクト。なお、コンストラクターが例外をスローする可能性を下げるため、セキュリティーを保持するための以下の動作上の更新に注意してください。\n        <ul>\n          <li>このオブジェクトがコンストラクターの呼び出しとは別のオリジンに存在する場合、 <a href=\"/ja/docs/Web/API/Request/referrer\"><code>Request.referrer</code></a> が削除されます。</li>\n          <li>このオブジェクトの <a href=\"/ja/docs/Web/API/Request/mode\"><code>Request.mode</code></a> が <code>navigate</code> である場合、 <code>mode</code> の値が <code>same-origin</code> に変換されます。</li>\n        </ul>\n      </li>\n    </ul>\n  </dd>\n  <dt id=\"init\"><em>init</em> <span class=\"badge inline optional\">省略可</span></dt>\n  <dd>\n    <p>リクエストに適用するカスタム設定を含むオプションオブジェクトです。設定可能なオプションは次の通りです。</p>\n    <ul>\n      <li><code>method</code>: リクエストメソッド、 <code>GET</code>, <code>POST</code> など。</li>\n      <li><code>headers</code>: <a href=\"/ja/docs/Web/API/Headers\"><code>Headers</code></a> オブジェクトか <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>ByteString</code></a> を含む、リクエストに追加するヘッダー。</li>\n      <li><code>body</code>: リクエストに追加する本文で、 <a href=\"/ja/docs/Web/API/Blob\"><code>Blob</code></a>, <a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>BufferSource</code></a>, <a href=\"/ja/docs/Web/API/FormData\"><code>FormData</code></a>, <a href=\"/ja/docs/Web/API/URLSearchParams\"><code>URLSearchParams</code></a>, <a href=\"/ja/docs/Glossary/String\"><code>USVString</code></a>, <a href=\"/ja/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> オブジェクトが使用できます。なお、リクエストが <code>GET</code> 又は <code>HEAD</code> メソッドを使用している場合、本文を持てません。</li>\n      <li><code>mode</code>: リクエストで使用するモード。例えば、 <code>cors</code>, <code>no-cors</code>, <code>same-origin</code>, <code>navigate</code> です。既定値は <code>cors</code> です。 Chrome では、既定値は 47 以前は <code>no-cors</code> でしたが、 47 から <code>same-origin</code> になりました。</li>\n      <li><code>credentials</code>: リクエストで使用するリクエストの資格情報です。 <code>omit</code>, <code>same-origin</code>, <code>include</code> の何れかです。既定値は <code>omit</code> です。 Chrome では、既定値は 47 以前は <code>same-origin</code> でしたが、 47 から <code>include</code> になりました。</li>\n      <li><code>cache</code>: リクエストで使用する <a href=\"/ja/docs/Web/API/Request/cache\">cache モード</a>です。</li>\n      <li><code>redirect</code>: 使用するリダイレクトモードです。 <code>follow</code>, <code>error</code>, <code>manual</code> の何れかです。 Chrome では、既定値は 47 以前は <code>follow</code> でしたが、 47 から <code>manual</code> になりました。</li>\n      <li><code>referrer</code>: <code>no-referrer</code>, <code>client</code> 又は URL を示す <a href=\"/ja/docs/Glossary/String\"><code>USVString</code></a> です。既定値は <code>client</code> です。</li>\n      <li><code>integrity</code>: リクエストの <a href=\"/ja/docs/Web/Security/Subresource_Integrity\">subresource integrity</a> の値です (例えば、 <code>sha256-BpfBw7ivV8q2jLiT13fxDYAe2tJllusRSZ273h2nFSE=</code>)。</li>\n    </ul>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"エラー","title":"エラー","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>型</th>\n      <th>説明</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>TypeError</code></td>\n      <td><a href=\"/ja/docs/Mozilla/Firefox/Releases/43\">Firefox 43</a> 以降、<code>http://user:password@example.com</code> のような認証情報を含む URL だった場合、Request() は TypeError をスローします。</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":"<p><a href=\"https://github.com/mdn/fetch-examples/tree/gh-pages/fetch-request\" class=\"external\" rel=\" noopener\">Fetch Request example</a> (<a href=\"https://mdn.github.io/fetch-examples/fetch-request/\" class=\"external\" rel=\" noopener\">Fetch Request live</a> を参照) では、コンストラクターを使用して新しいリクエストオブジェクトを生成してから、 <a href=\"/ja/docs/Web/API/fetch\"><code>GlobalFetch.fetch</code></a> 呼び出しを使用して取得しています。画像を取得してから、それを適切に処理できるように MIME タイプを設定するため、レスポンスの <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Response/blob\"><code>Body.blob</code> <small>(en-US)</small></a> を実行しています。それから、オブジェクト URL を生成して、 <a href=\"/ja/docs/Web/HTML/Element/img\"><code>&lt;img&gt;</code></a> 要素に表示しています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myImage <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> myRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flowers.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>myRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> objectURL <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  myImage<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> objectURL<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><a href=\"https://github.com/mdn/fetch-examples/tree/master/fetch-request-with-init\" class=\"external\" rel=\" noopener\">Fetch Request with init example</a> (<a href=\"https://mdn.github.io/fetch-examples/fetch-request-with-init/\" class=\"external\" rel=\" noopener\">Fetch Request init live</a> を参照) では、 <code>fetch()</code> を呼び出すときに init オブジェクトを渡している以外は同じです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myImage <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> myHeaders <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'image/jpeg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> myInit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n               <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> myHeaders<span class=\"token punctuation\">,</span>\n               <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'cors'</span><span class=\"token punctuation\">,</span>\n               <span class=\"token literal-property property\">cache</span><span class=\"token operator\">:</span> <span class=\"token string\">'default'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> myRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flowers.jpg'</span><span class=\"token punctuation\">,</span>myInit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>myRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>同様の効果を得るために、 <code>fetch</code> 呼び出しに init オブジェクトを渡せることにも注目してください。例えば次の通りです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>myRequest<span class=\"token punctuation\">,</span>myInit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>init</code> の中の <code>headers</code> としてオブジェクトリテラルを使用することもできます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myInit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n               <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                   <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'image/jpeg'</span>\n               <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n               <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'cors'</span><span class=\"token punctuation\">,</span>\n               <span class=\"token literal-property property\">cache</span><span class=\"token operator\">:</span> <span class=\"token string\">'default'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> myRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flowers.jpg'</span><span class=\"token punctuation\">,</span> myInit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>リクエストのコピーを作成するために、 <code>Request()</code> コンストラクターに <a href=\"/ja/docs/Web/API/Request\"><code>Request</code></a> オブジェクトを渡すこともできます (これは <a href=\"/ja/docs/Web/API/Request/clone\" title=\"clone()\"><code>clone()</code></a> メソッドを呼び出すのと似ています)。</p>\n<pre class=\"notranslate\">var copy = new Request(myRequest);\n</pre>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> 最後の使い方は<a href=\"/ja/docs/Web/API/Service_Worker_API\">サービスワーカー</a>内でのみ使用できます。</p>\n</div>"}},{"type":"prose","value":{"id":"仕様書","title":"仕様書","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>仕様書</th>\n      <th>状態</th>\n      <th>備考</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://fetch.spec.whatwg.org/#dom-request\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">Fetch<br><small lang=\"ja\">Request() の定義</small></a></td>\n      <td><span class=\"spec-living\">現行の標準</span></td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの対応","id":"ブラウザーの対応","isH3":false,"query":"api.Request.Request","dataURL":"/ja/docs/Web/API/Request/Request/bcd.json"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/API/Service_Worker_API\">サービスワーカー API</a></li>\n  <li><a href=\"/en-US/docs/Web/HTTP/CORS\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">HTTP アクセス制御 (CORS) (en-US)</a></li>\n  <li><a href=\"/ja/docs/Web/HTTP\">HTTP</a></li>\n</ul>"}}],"toc":[{"text":"構文","id":"構文"},{"text":"エラー","id":"エラー"},{"text":"例","id":"例"},{"text":"仕様書","id":"仕様書"},{"text":"ブラウザーの対応","id":"ブラウザーの対応"},{"text":"関連情報","id":"関連情報"}],"summary":"Request() コンストラクターは、新しい Request オブジェクトを生成します。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Request()","locale":"en-US","native":"English (US)"},{"title":"Request()","locale":"fr","native":"Français"},{"title":"Request()","locale":"ko","native":"한국어"},{"title":"Request()","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Request()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/request/request","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/request/request/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/Request","title":"Request"},{"uri":"/ja/docs/Web/API/Request/Request","title":"Request()"}],"pageTitle":"Request() - Web API | MDN","noIndexing":false}}