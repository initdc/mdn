{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Request.cache","mdn_url":"/ja/docs/Web/API/Request/cache","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/Request\"><code>Request</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>コンストラクター</summary><ol><li><a href=\"/ja/docs/Web/API/Request/Request\"><code>Request()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>プロパティ</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/body\"><code>body</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/bodyUsed\"><code>bodyUsed</code> <small>(en-US)</small></a></li><li><em><code>cache</code></em></li><li><a href=\"/ja/docs/Web/API/Request/credentials\"><code>credentials</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/destination\"><code>destination</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/API/Request/headers\"><code>headers</code></a></li><li><a href=\"/ja/docs/Web/API/Request/integrity\"><code>integrity</code></a></li><li><a href=\"/ja/docs/Web/API/Request/method\"><code>method</code></a></li><li><a href=\"/ja/docs/Web/API/Request/mode\"><code>mode</code></a></li><li><svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/priority\"><code>priority</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/API/Request/redirect\"><code>redirect</code></a></li><li><a href=\"/ja/docs/Web/API/Request/referrer\"><code>referrer</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/referrerPolicy\"><code>referrerPolicy</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/API/Request/url\"><code>url</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>メソッド</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/arrayBuffer\"><code>arrayBuffer()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/blob\"><code>blob()</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/API/Request/clone\"><code>clone()</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/formData\"><code>formData()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/json\"><code>json()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/text\"><code>text()</code> <small>(en-US)</small></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/ja/docs/Web/API/Request\"><code>Request</code></a> インターフェースの <strong><code>cache</code></strong> 読み取り専用プロパティには、リクエストのキャッシュモードが含まれています。リクエストがブラウザの <a href=\"/ja/docs/Web/HTTP/Caching\">HTTP キャッシュ</a> とどのように相互作用するかを制御します。</p>"}},{"type":"prose","value":{"id":"構文","title":"構文","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> currentCacheMode <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"値","title":"値","isH3":true,"content":"<p><code>RequestCache</code> 使用可能な値は次のとおりです。</p>\n<ul>\n  <li><code>default</code> — ブラウザは、HTTP キャッシュで一致するリクエストを探します。\n    <ul>\n      <li>一致するものが<a href=\"/ja/docs/Web/HTTP/Caching#freshness\">新しい</a>場合、キャッシュから返されます。</li>\n      <li>一致するものが古い場合、ブラウザはリモートサーバーに<a href=\"/ja/docs/Web/HTTP/Conditional_requests\">条件付きリクエスト</a>を送信します。リソースが変更されていないことをサーバーが示した場合、そのリソースはキャッシュから返されます。それ以外の場合、リソースはサーバーからダウンロードされ、キャッシュが更新されます。</li>\n      <li>一致するものがない場合、ブラウザは通常のリクエストを行い、ダウンロードしたリソースでキャッシュを更新します。</li>\n    </ul>\n  </li>\n  <li><code>no-store</code> — ブラウザは、最初にキャッシュを調べずにリモートサーバーからリソースをフェッチし、ダウンロードしたリソースでキャッシュを<em>更新しません</em>。</li>\n  <li><code>reload</code> — ブラウザは、最初にキャッシュを調べずにリモートサーバーからリソースをフェッチし、ダウンロードしたリソースでキャッシュを<em>更新します</em>。</li>\n  <li><code>no-cache</code> — ブラウザは、HTTP キャッシュで一致するリクエストを探します。\n    <ul>\n      <li>一致するものが<em>新しいか古いかを問わず</em>、ブラウザはリモートサーバーに<a href=\"/ja/docs/Web/HTTP/Conditional_requests\">条件付きリクエスト</a>を送信します。リソースが変更されていないことをサーバーが示した場合、そのリソースはキャッシュから返されます。それ以外の場合、リソースはサーバーからダウンロードされ、キャッシュが更新されます。</li>\n      <li>一致するものがない場合、ブラウザは通常のリクエストを行い、ダウンロードしたリソースでキャッシュを更新します。</li>\n    </ul>\n  </li>\n  <li><code>force-cache</code> — ブラウザは、HTTP キャッシュで一致するリクエストを探します。\n    <ul>\n      <li>一致するものが<em>新しいか古いかを問わず</em>、キャッシュから返されます。</li>\n      <li>一致するものがない場合、ブラウザは通常のリクエストを行い、ダウンロードしたリソースでキャッシュを更新します。</li>\n    </ul>\n  </li>\n  <li><code>only-if-cached</code> — ブラウザは、HTTP キャッシュで一致するリクエストを探します。\n    <ul>\n      <li>一致するものが<em>新しいか古いかを問わず</em>、キャッシュから返されます。</li>\n      <li>一致するものがない場合、ブラウザは <a href=\"/ja/docs/Web/HTTP/Status/504\">504 ゲートウェイタイムアウト</a>ステータスで応答します。</li>\n    </ul><code>\"only-if-cached\"</code> モードは、リクエストの<a href=\"/ja/docs/Web/API/Request/mode\"><code>モード</code></a>が <code>\"same-origin\"</code> の場合にのみ使用できます。リクエストの<code>リダイレクト</code>プロパティが <code>\"follow\"</code> であり、リダイレクトが <code>\"same-origin\"</code> モードに違反していない場合、キャッシュされたリダイレクトがフォローされます。\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Download a resource with cache busting, to bypass the cache</span>\n<span class=\"token comment\">// completely.</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"some.json\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">cache</span><span class=\"token operator\">:</span> <span class=\"token string\">\"no-store\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* consume the response */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Download a resource with cache busting, but update the HTTP</span>\n<span class=\"token comment\">// cache with the downloaded resource.</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"some.json\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">cache</span><span class=\"token operator\">:</span> <span class=\"token string\">\"reload\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* consume the response */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Download a resource with cache busting when dealing with a</span>\n<span class=\"token comment\">// properly configured server that will send the correct ETag</span>\n<span class=\"token comment\">// and Date headers and properly handle If-Modified-Since and</span>\n<span class=\"token comment\">// If-None-Match request headers, therefore we can rely on the</span>\n<span class=\"token comment\">// validation to guarantee a fresh response.</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"some.json\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">cache</span><span class=\"token operator\">:</span> <span class=\"token string\">\"no-cache\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* consume the response */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Download a resource with economics in mind!  Prefer a cached</span>\n<span class=\"token comment\">// albeit stale response to conserve as much bandwidth as possible.</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"some.json\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">cache</span><span class=\"token operator\">:</span> <span class=\"token string\">\"force-cache\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* consume the response */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Naive stale-while-revalidate client-level implementation.</span>\n<span class=\"token comment\">// Prefer a cached albeit stale response; but update if it's too old.</span>\n<span class=\"token comment\">// AbortController and signal to allow better memory cleaning.</span>\n<span class=\"token comment\">// In reality; this would be a function that takes a path and a</span>\n<span class=\"token comment\">// reference to the controller since it would need to change the value</span>\n<span class=\"token keyword\">let</span> controller <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AbortController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"some.json\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">cache</span><span class=\"token operator\">:</span> <span class=\"token string\">\"only-if-cached\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">\"same-origin\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">signal</span><span class=\"token operator\">:</span> controller<span class=\"token punctuation\">.</span>signal<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=&gt;</span> e <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">TypeError</span> <span class=\"token operator\">&amp;&amp;</span> e<span class=\"token punctuation\">.</span>message <span class=\"token operator\">===</span> <span class=\"token string\">\"Failed to fetch\"</span> <span class=\"token operator\">?</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span> <span class=\"token number\">504</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token comment\">// Workaround for chrome; which simply fails with a typeerror</span>\n    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">504</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      controller<span class=\"token punctuation\">.</span><span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      controller <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AbortController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"some.json\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">cache</span><span class=\"token operator\">:</span> <span class=\"token string\">\"force-cache\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">\"same-origin\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">signal</span><span class=\"token operator\">:</span> controller<span class=\"token punctuation\">.</span>signal<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> date <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"date\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dt <span class=\"token operator\">=</span> date <span class=\"token operator\">?</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dt <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">86400000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// if older than 24 hours</span>\n      controller<span class=\"token punctuation\">.</span><span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      controller <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AbortController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"some.json\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">cache</span><span class=\"token operator\">:</span> <span class=\"token string\">\"reload\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">\"same-origin\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">signal</span><span class=\"token operator\">:</span> controller<span class=\"token punctuation\">.</span>signal<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Other possible conditions</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dt <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">300000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// If it's older than 5 minutes</span>\n      <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"some.json\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">cache</span><span class=\"token operator\">:</span> <span class=\"token string\">\"no-cache\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">\"same-origin\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// no cancellation or return value.</span>\n    <span class=\"token keyword\">return</span> res\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* consume the (possibly stale) response */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* Can be an AbortError/DOMError or a TypeError */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"specifications","title":"Specifications","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>仕様書</th>\n      <th>状態</th>\n      <th>コメント</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://fetch.spec.whatwg.org/#dom-request-cache\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">Fetch<br><small lang=\"ja\">cache の定義</small></a></td>\n      <td><span class=\"spec-living\">現行の標準</span></td>\n      <td>Initial definition</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"browser_compatibility","value":{"title":"ブラウザの互換性","id":"ブラウザの互換性","isH3":false,"query":"api.Request.cache","dataURL":"/ja/docs/Web/API/Request/cache/bcd.json"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/API/Service_Worker_API\">ServiceWorker API</a></li>\n  <li><a href=\"/en-US/docs/Web/HTTP/CORS\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">HTTP access control (CORS) (en-US)</a></li>\n  <li><a href=\"/ja/docs/Web/HTTP\">HTTP</a></li>\n</ul>"}}],"toc":[{"text":"構文","id":"構文"},{"text":"例","id":"例"},{"text":"Specifications","id":"specifications"},{"text":"ブラウザの互換性","id":"ブラウザの互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"Request インターフェースの cache 読み取り専用プロパティには、リクエストのキャッシュモードが含まれています。リクエストがブラウザの HTTP キャッシュ とどのように相互作用するかを制御します。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Request.cache","locale":"en-US","native":"English (US)"},{"title":"Request.cache","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/request/cache","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/request/cache/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/Request","title":"Request"},{"uri":"/ja/docs/Web/API/Request/cache","title":"Request.cache"}],"pageTitle":"Request.cache - Web API | MDN","noIndexing":false}}