{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"SharedWorker","mdn_url":"/ja/docs/Web/API/SharedWorker","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/Web_Workers_API\">Web Workers API</a></strong></li><li><strong><a href=\"/ja/docs/Web/API/SharedWorker\"><code>SharedWorker</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>コンストラクター</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SharedWorker/SharedWorker\"><code>SharedWorker()</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>プロパティ</summary><ol><li><a href=\"/ja/docs/Web/API/SharedWorker/port\"><code>port</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SharedWorker/error_event\"><code>SharedWorker: error event</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>継承</summary><ol><li><a href=\"/ja/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Web Workers API に関連するページ</summary><ol><li><a href=\"/ja/docs/Web/API/DedicatedWorkerGlobalScope\"><code>DedicatedWorkerGlobalScope</code></a></li><li><a href=\"/ja/docs/Web/API/ServiceWorker\"><code>ServiceWorker</code></a></li><li><a href=\"/ja/docs/Web/API/SharedWorkerGlobalScope\"><code>SharedWorkerGlobalScope</code></a></li><li><a href=\"/ja/docs/Web/API/Worker\"><code>Worker</code></a></li><li><a href=\"/ja/docs/Web/API/WorkerGlobalScope\"><code>WorkerGlobalScope</code></a></li><li><a href=\"/ja/docs/Web/API/WorkerLocation\"><code>WorkerLocation</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WorkerNavigator\"><code>WorkerNavigator</code> <small>(en-US)</small></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>SharedWorker</code></strong> インターフェースは複数のブラウザコンテキストからアクセス可能な Worker を提供します。複数のブラウザコンテキストとは、複数のウィンドウや iframe、Worker などを指します。Dedicated Worker とは異なるインタフェースと、異なるグローバルスコープを持ちます。スコープに関しては <a href=\"/ja/docs/Web/API/SharedWorkerGlobalScope\"><code>SharedWorkerGlobalScope</code></a> を参照してください。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> **付記：**同じオリジン、つまりプロトコル、ホスト名、ポートが全て同じ場合にのみ、SharedWorker は異なるブラウザコンテキスト間で共有されます。</p>\n</div>"}},{"type":"prose","value":{"id":"コンストラクタ","title":"コンストラクタ","isH3":false,"content":"<dl>\n  <dt id=\"sharedworker_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SharedWorker/SharedWorker\"><code>SharedWorker()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>指定された URL のスクリプトを実行する SharedWorker を作成します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"プロパティ","title":"プロパティ","isH3":false,"content":"<p><em><a href=\"/ja/docs/Web/API/EventTarget\"><code>EventTarget</code></a> のプロパティを継承し、 <a href=\"/ja/docs/Web/API/Worker\"><code>AbstractWorker</code></a> で定義されるプロパティを実装しています。</em></p>\n<dl>\n  <dt id=\"abstractworker.onerror\"><a href=\"/ja/docs/Web/API/Worker/error_event\"><code>AbstractWorker.onerror</code></a></dt>\n  <dd>\n    <p>type <code>error</code> である <a href=\"/ja/docs/Web/API/ErrorEvent\"><code>ErrorEvent</code></a> がバブリングした時に呼ばれる <a href=\"/ja/docs/conflicting/Web/API/EventTarget/addEventListener_380cb5f366307beb2c072f74e561ee98\"><code>EventListener</code></a></p>\n  </dd>\n  <dt id=\"sharedworker.port\"><a href=\"/ja/docs/Web/API/SharedWorker/port\"><code>SharedWorker.port</code></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">読取専用 </span></dt>\n  <dd>\n    <p>通信とコントロールに利用される <a href=\"/ja/docs/Web/API/MessagePort\"><code>MessagePort</code></a> オブジェクトを返します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"メソッド","title":"メソッド","isH3":false,"content":"<p><em><a href=\"/ja/docs/Web/API/EventTarget\"><code>EventTarget</code></a> のメソッドを継承し、 <a href=\"/ja/docs/Web/API/Worker\"><code>AbstractWorker</code></a> に定義されるメソッドを実装します。</em></p>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":"<p><a href=\"https://github.com/mdn/simple-shared-worker\" class=\"external\" rel=\" noopener\">SharedWorker の基本利用例</a> (<a href=\"https://mdn.github.io/simple-shared-worker/\" class=\"external\" rel=\" noopener\">ライブデモ</a>) には 2 つの HTML ページがあり、それぞれでは JavaScript で単純な計算を行っています。それぞれのスクリプトは計算を行うために同じ JS ファイルを Worker に実行させています。2 つのページが別のウインドウで動作していたとしても、同じ Worker にアクセスできています。</p>\n<p><code>SharedWorker</code> オブジェクトは <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SharedWorker/SharedWorker\"><code>SharedWorker()</code> <small>(en-US)</small></a> コンストラクタを利用して、次のように作成します：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myWorker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SharedWorker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worker.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>それぞれのスクリプトは <a href=\"/ja/docs/Web/API/MessagePort\"><code>MessagePort</code></a> オブジェクトを通じて Worker にアクセスします。このオブジェクトは <a href=\"/ja/docs/Web/API/SharedWorker/port\"><code>SharedWorker.port</code></a> プロパティから取得できます。addEventListener を読んで onmessage イベントのハンドラを登録したら、<code>start()</code> メソッドを呼んでポートを手動で開始できます：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>myWorker<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ポートが開始されたら、Worker に向けてメッセージを送ったり、送られたメッセージを受け取ったりできます。これらには <code>port.postMessage()</code> と <code>port.onmessage</code> を利用します:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>first<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onchange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    myWorker<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>second<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Message posted to worker'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  second<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onchange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    myWorker<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>second<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Message posted to worker'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  myWorker<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result1<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Message received from worker'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Worker の内部では <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SharedWorkerGlobalScope/connect_event\"><code>SharedWorkerGlobalScope.onconnect</code> <small>(en-US)</small></a> に対してハンドラを設定することで、上述したポートへの接続を処理できます。Worker に関連付けられたポートは <code><a href=\"/ja/docs/Web/Reference/Events/connect\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">connect</a></code> イベントの <code>ports</code> 属性で参照できます。<a href=\"/ja/docs/Web/API/MessagePort\"><code>MessagePort</code></a> <code>の start()</code> メソッドによるポート開始後は、<code>onmessage</code> ハンドラでメインスレッドからのメッセージを処理します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function-variable function\">onconnect</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> port <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>ports<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    port<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> workerResult <span class=\"token operator\">=</span> <span class=\"token string\">'Result: '</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      port<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>workerResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    port<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Required when using addEventListener. Otherwise called implicitly by onmessage setter.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"仕様","title":"仕様","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>仕様</th>\n      <th>状況</th>\n      <th>コメント</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://html.spec.whatwg.org/multipage/#sharedworker\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">HTML Living Standard<br><small lang=\"ja\">SharedWorker の定義</small></a></td>\n      <td><span class=\"spec-living\">現行の標準</span></td>\n      <td><a href=\"about:unknown\" hreflang=\"en\" lang=\"en\" class=\"external\" title=\"Unknownの仕様書\">Unknown</a> との差分なし</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"browser_compatibility","value":{"title":"ブラウザ互換性","id":"ブラウザ互換性","isH3":false,"query":"api.SharedWorker","dataURL":"/ja/docs/Web/API/SharedWorker/bcd.json"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/API/Worker\"><code>Worker</code></a></li>\n  <li><a href=\"/ja/docs/Web/API/Web_Workers_API/Using_web_workers\">Web workers の利用</a></li>\n</ul>"}}],"toc":[{"text":"コンストラクタ","id":"コンストラクタ"},{"text":"プロパティ","id":"プロパティ"},{"text":"メソッド","id":"メソッド"},{"text":"例","id":"例"},{"text":"仕様","id":"仕様"},{"text":"ブラウザ互換性","id":"ブラウザ互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"SharedWorker インターフェースは複数のブラウザコンテキストからアクセス可能な Worker を提供します。複数のブラウザコンテキストとは、複数のウィンドウや iframe、Worker などを指します。Dedicated Worker とは異なるインタフェースと、異なるグローバルスコープを持ちます。スコープに関しては SharedWorkerGlobalScope を参照してください。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"SharedWorker","locale":"en-US","native":"English (US)"},{"title":"SharedWorker","locale":"fr","native":"Français"},{"title":"SharedWorker","locale":"ko","native":"한국어"},{"title":"SharedWorker","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"SharedWorker","locale":"ru","native":"Русский"},{"title":"SharedWorker","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/sharedworker","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/sharedworker/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/SharedWorker","title":"SharedWorker"}],"pageTitle":"SharedWorker - Web API | MDN","noIndexing":false}}