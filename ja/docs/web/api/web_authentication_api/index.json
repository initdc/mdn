{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"ウェブ認証 API","mdn_url":"/ja/docs/Web/API/Web_Authentication_API","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/Web_Authentication_API\">Web Authentication API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>ガイド</summary><ol><li><a href=\"/ja/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>インターフェイス</summary><ol><li><a href=\"/ja/docs/Web/API/CredentialsContainer\"><code>CredentialsContainer</code></a></li><li><a href=\"/ja/docs/Web/API/PublicKeyCredential\"><code>PublicKeyCredential</code></a></li><li><a href=\"/ja/docs/Web/API/AuthenticatorResponse\"><code>AuthenticatorResponse</code></a></li><li><a href=\"/ja/docs/Web/API/AuthenticatorAttestationResponse\"><code>AuthenticatorAttestationResponse</code></a></li><li><a href=\"/ja/docs/Web/API/AuthenticatorAssertionResponse\"><code>AuthenticatorAssertionResponse</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard secure\" id=\"sect1\"><p><strong>安全なコンテキスト用:</strong> この機能は一部またはすべての<a href=\"#browser_compatibility\">対応しているブラウザー</a>において、<a href=\"/ja/docs/Web/Security/Secure_Contexts\">安全なコンテキスト</a> (HTTPS) でのみ利用できます。</p></div>\n<p>ウェブ認証 API は、公開鍵暗号を用いて強力な認証を可能にする<a href=\"/ja/docs/Web/API/Credential_Management_API\">資格情報管理 API</a> の拡張機能で、パスワードレス認証や、 SMS テキストを用いない安全な二要素認証を実現します。</p>"}},{"type":"prose","value":{"id":"ウェブ認証の概念と使い方","title":"ウェブ認証の概念と使い方","isH3":false,"content":"<p>ウェブ認証 API (別名 WebAuthn) は、ウェブサイトで登録、認証、<a title=\"二要素認証\" href=\"https://ja.wikipedia.org/wiki/多要素認証\" class=\"external\" rel=\" noopener\">二要素認証</a>を行うためにパスワードや SMS のテキストを使用するのではなく、<a title=\"公開鍵暗号\" href=\"https://ja.wikipedia.org/wiki/公開鍵暗号\" class=\"external\" rel=\" noopener\">公開鍵暗号</a>を使用します。これにはいくつかの利点があります。</p>\n<ul>\n  <li><strong>フィッシングからの保護:</strong> 偽のログインサイトを作成した攻撃者は、サイトの<a href=\"/ja/docs/Glossary/Origin\">オリジン</a>で署名が変わるため、ユーザーとしてログインすることができません。</li>\n  <li><strong>情報漏洩の影響を軽減:</strong> 開発者は公開鍵をハッシュ化する必要がなく、攻撃者が認証に使用した公開鍵にアクセスしても、秘密鍵が必要なため認証ができません。</li>\n  <li><strong>パスワード攻撃に対して無防備：</strong> ユーザーによってはパスワードを再利用する可能性があり、攻撃者は別のウェブサイト用にユーザーのパスワードを（例えばデータ漏洩を介して）取得する可能性があります。また、テキストのパスワードは、デジタル署名よりもはるかに容易に総当たりすることができます。</li>\n</ul>\n<p>多くのウェブサイトが既にアカウントの登録や作成したアカウントにログインするウェブページを提供しています。ウェブ認証 API はそれらの既存のウェブページの代替または補足として機能します。 <a href=\"/ja/docs/Web/API/Credential_Management_API\">資格情報管理 API</a> の他の形式と同様に、 ウェブ認証 API は登録とログインの 2 つの基本的な機能を持っています。</p>\n<ul>\n  <li><a href=\"/ja/docs/Web/API/CredentialsContainer/create\" title=\"navigator.credentials.create()\"><code>navigator.credentials.create()</code></a> - publicKey オプションと併用すると、新しいアカウントの登録または既存のアカウントへの新しい非対称鍵ペアの関連付けを行うために新しい認証情報を作成します。</li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CredentialsContainer/get\"><code>navigator.credentials.get()</code> <small>(en-US)</small></a> - publicKey オプションと併用すると、サービスに対する認証のために、ログインまたは二要素認証として既存の認証情報セットを使用します。</li>\n</ul>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> <code>create()</code> と <code>get()</code> は両方とも<a href=\"/ja/docs/Web/Security/Secure_Contexts\">安全なコンテキスト</a> （すなわち、サーバーに https で接続している、サーバーがローカルホストの場合）であることを必要とし、ブラウザーが安全なコンテキストで動作していない場合は利用できません。</p>\n</div>\n<p>最も基本的な形式としては、<code>create()</code> と <code>get()</code> の両方が「チャレンジ」と呼ばれる非常に大きな乱数をサーバーから受け取り、秘密鍵によって署名されたチャレンジをサーバーに返します。これにより、ネットワーク上で秘密を明かすことなく、ユーザーが認証に必要な秘密鍵を持っていることをサーバー－に証明することができます。</p>\n<p>create() と get() メソッドが全体像の中でどのように位置づけられるかを理解するためには、ブラウザーの外側にある 2 つのコンポーネントの間に位置づけられることを理解することが重要です。</p>\n<ol>\n  <li><strong>サーバー</strong> - ウェブ認証 API は、サーバー（サービスまたは<a href=\"https://en.wikipedia.org/wiki/Relying_party\" class=\"external\" rel=\" noopener\">署名検証者</a> (署名検証者) とも呼ばれる）に新しい資格情報を登録し、後でその同じサーバーで同じ資格情報を使用してユーザーを認証することを意図しています。</li>\n  <li><strong>認証器 (Authenticator)</strong> - 作成された認証情報は認証器と呼ばれる機器内に格納されます。これは認証における新しい概念です。パスワード認証ではパスワードはユーザーの頭の中に保管され、他の機器は必要ありません。ウェブ認証を用いた認証では、そのパスワードが認証器の中に保管された鍵ペアに置き換えられます。認証器は Windows Hello などのように OS に組み込むこともできますし、 USB や Bluetooth セキュリティキーなどの物理的なトークン機器とすることもできます。</li>\n</ol>"}},{"type":"prose","value":{"id":"登録","title":"登録","isH3":true,"content":"<p>通常の登録過程は、図 1 に示す 6 つの手順を踏みます。この図は、概要を説明するために登録プロセスに必要なデータを簡略化しています。登録リクエストを作成するための必須フィールド、オプションフィールド、およびそれらの意味はすべて <a href=\"/ja/docs/conflicting/Web/API/CredentialsContainer/create_18148a708412fc42b1affe2f08eab270\"><code>PublicKeyCredentialCreationOptions</code></a> 辞書に記載されます。同様に、レスポンスフィールドはすべて <a href=\"/ja/docs/Web/API/PublicKeyCredential\"><code>PublicKeyCredential</code></a> インターフェイスに記載されます（ただし <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PublicKeyCredential/response\"><code>PublicKeyCredential.response</code> <small>(en-US)</small></a> は <a href=\"/ja/docs/Web/API/AuthenticatorAttestationResponse\"><code>AuthenticatorAttestationResponse</code></a> インターフェイスに記載されます）。なお、アプリケーションを作っているほとんどの JavaScript プログラマーが本当に気をつけなければならないのは、 create() が呼び出され、返値が手に入る手順 1 と 5 のみです。しかしながら、ブラウザーと認証器の中で行われる処理やその結果のデータの意味を理解するためには手順 2、3、4 を理解することが不可欠です。</p>\n<p>\n  <img src=\"/ja/docs/Web/API/Web_Authentication_API/webauthn_registration_r4.png\" alt=\"ウェブ認証 API のコンポーネントの登録とデータフロー図\" width=\"1134\" height=\"547\" loading=\"lazy\">\n</p>\n<p><em>図 1 - ウェブ認証による登録手順と各アクションに関連する重要なデータの流れを示す図</em></p>\n<p>まず（図中のステップ 0）、アプリケーションは最初の登録要求を行います。このリクエストのプロトコルとフォーマットは、ウェブ認証 API の範囲外です。</p>\n<p>この後での登録手順は次の通りです。</p>\n<ol>\n  <li><strong>サーバーがチャレンジ・ユーザー情報・署名検証者情報を送信</strong> - サーバーはチャレンジ・ユーザー情報・署名検証者情報を JavaScript プログラムに送信します。このときのプロトコルも特に指定はなく、ウェブ検証 API の範囲外です。通常、サーバーは HTTPS 通信を使って <a href=\"/ja/docs/Glossary/REST\">REST</a> で接続します（恐らく <a href=\"/ja/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a> や <a href=\"/ja/docs/Web/API/Fetch_API\">Fetch</a> を用いるでしょう）が、安全なプロトコルでありさえすれば <a href=\"/ja/docs/Glossary/SOAP\">SOAP</a> や <a href=\"https://datatracker.ietf.org/html/rfc2549\" class=\"external\" rel=\" noopener\">RFC 2549</a> 、その他ほぼどのようなプロトコルを使用しても構いません。サーバーから受け取った引数は <a href=\"/ja/docs/Web/API/CredentialsContainer/create\">create()</a> の呼び出しに渡され、通常ほとんどあるいは全く改変せずに <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a> を返します。これは、 <a href=\"/ja/docs/Web/API/AuthenticatorAttestationResponse\"><code>AuthenticatorAttestationResponse</code></a> を含んだ <a href=\"/ja/docs/Web/API/PublicKeyCredential\"><code>PublicKeyCredential</code></a> を解決するためのものです。 <strong>なお、チャレンジは（16 バイト以上の）ランダムな情報のバッファーであることと、登録過程のセキュリティを確保するために必ずサーバー上で生成することが極めて重要です。</strong></li>\n  <li><strong>ブラウザーが認証器に対して authenticatorMakeCredential() を呼び出す</strong> - 内部的に、ブラウザーは引数を検証し、既定値を整備し、それを <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AuthenticatorResponse/clientDataJSON\"><code>AuthenticatorResponse.clientDataJSON</code> <small>(en-US)</small></a> とします。最も重要な引数の一つは origin であり、これが clientData に保存されるため、後でサーバーが検証することができます。 create() の呼び出しの引数は clientDataJSON の SHA-256 ハッシュ値と共に認証器に渡されます（認証器への接続が低帯域幅の NFC または Bluetooth である可能性があり、認証器は単にハッシュに署名して改ざんされていないことを保証することが目的であるため、ハッシュのみを送信します）。</li>\n  <li><strong>認証器が新しい鍵ペアとアサーションを作成</strong> - 何かをする前に、認証器は通常、何らかの形でユーザー認証を求めます。これは、 PIN の入力、指紋の使用、虹彩スキャンなどであり、ユーザーが存在し、登録に同意していることを証明します。ユーザー認証の後、認証器は新しい非対称鍵ペアを作成し、将来の参照用に秘密鍵を安全に保管します。公開鍵はアサーションの一部となり、認証器は製造工程で組み込まれた秘密鍵で署名し、信頼の根源まで遡って検証できる証明書チェーンを持っています。</li>\n  <li><strong>認証器がブラウザーにデータを返す</strong> - 新しい公開鍵、グローバルに一意な認証 ID、およびその他の認証データがブラウザーに返され、そこで attestationObject となります。</li>\n  <li><strong>ブラウザーが最終的に送信するデータを作成し、アプリケーションがその返値をサーバーに送信</strong> - create() のプロミスが <a href=\"/ja/docs/Web/API/PublicKeyCredential\"><code>PublicKeyCredential</code></a> に解決します。 <a href=\"/ja/docs/Web/API/PublicKeyCredential\"><code>PublicKeyCredential</code></a> は一意の認証 ID である <a href=\"/ja/docs/Web/API/PublicKeyCredential/rawId\"><code>PublicKeyCredential.rawId</code></a> 持っており、 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AuthenticatorResponse/clientDataJSON\"><code>AuthenticatorResponse.clientDataJSON</code> <small>(en-US)</small></a> を含む <a href=\"/ja/docs/Web/API/AuthenticatorAttestationResponse\"><code>AuthenticatorAttestationResponse</code></a> や <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AuthenticatorAttestationResponse/attestationObject\"><code>AuthenticatorAttestationResponse.attestationObject</code> <small>(en-US)</small></a> といったレスポンスと一緒にあります。この <a href=\"/ja/docs/Web/API/PublicKeyCredential\"><code>PublicKeyCredential</code></a> は、何らかの望ましいフォーマットやプロトコルでサーバーに送信されます。（注意として、 ArrayBuffer プロパティは base64 か似たようなものでエンコードされている必要があります。）</li>\n  <li><strong>サーバーが登録を検証・完了させる</strong> - 最終的に、サーバーが一連のチェックを行い、登録が完了して改ざんされていないことを保証することが要求されています。この保証には次の点を含みます。\n    <ol>\n      <li>challenge が送信時と同じものであるかの確認</li>\n      <li>origin が期待通りのオリジンとなっていることの保証</li>\n      <li>clientDataHash の署名と特定モデルの認証器用の証明書チェーンを使った attestation の検証</li>\n    </ol>検証ステップの完全な一覧は <a href=\"https://w3c.github.io/webauthn/#registering-a-new-credential\" class=\"external\" rel=\" noopener\">ウェブ認証 API 仕様書の中にあります</a>。 チェックが上手くいくと、サーバーはユーザーアカウントに紐づいたその新しい公開鍵を保存し、将来の利用に備えます。つまりは、ユーザーが認証のためにその公開鍵を使いたい時は何時でも使えるようにするということです。\n  </li>\n</ol>"}},{"type":"prose","value":{"id":"認証","title":"認証","isH3":false,"content":"<p>ユーザーは、ウェブ認証で登録した後、サービスに対して認証（ログインまたはサインイン）を行うことができます。認証フローは登録フローと似ており、図 2 のアクションの図は、図 1 の登録アクションの図と似ていると思われるかもしれません。登録と認証の主な違いは、次の通りです。1) 認証は、ユーザーまたは署名検証者情報を必要としない。 2) 認証は、製造時に認証器に組み込まれたキーペアを使用して認証を作成するのではなく、サービス用に事前に生成されたキーペアを使用してアサーションを作成する。繰り返しますが、以下の認証に関する説明は、ウェブ認証 API のすべてのオプションや機能に踏み込むのではなく、大まかな概要を説明するものです。認証のための具体的なオプションは <a href=\"/ja/docs/Web/API/PublicKeyCredentialRequestOptions\"><code>PublicKeyCredentialRequestOptions</code></a> 辞書で、結果のデータは <a href=\"/ja/docs/Web/API/PublicKeyCredential\"><code>PublicKeyCredential</code></a> インターフェイス (<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PublicKeyCredential/response\"><code>PublicKeyCredential.response</code> <small>(en-US)</small></a> は <a href=\"/ja/docs/Web/API/AuthenticatorAssertionResponse\"><code>AuthenticatorAssertionResponse</code></a> インターフェイス) で見ることができます。</p>\n<p>\n  <img src=\"/ja/docs/Web/API/Web_Authentication_API/mdn_webauthn_authentication_(r1).png\" alt=\"WebAuthn 認証コンポーネントとデータフロー図\" width=\"1067\" height=\"527\" loading=\"lazy\">\n</p>\n<p><em>図 2 - 図 1 と同様、ウェブ認証による認証手順と各アクションに関連する重要なデータの流れを示している。</em></p>\n<p>まず（図中のステップ 0）、アプリケーションは最初の登録リクエストを行います。このリクエストのプロトコルとフォーマットは、ウェブ認証 API の範囲外です。</p>\n<p>この後、登録のステップになります。</p>\n<ol>\n  <li><strong>サーバーからのチャレンジ送信</strong> - サーバーが JavaScript プログラムに対してチャレンジを送ります。サーバーとのコミュニケーションに用いられるプロトコルに指定はなく、ウェブ認証 API の規定の対象範囲外です。通常、サーバーは HTTPS 通信を使って <a href=\"/ja/docs/Glossary/REST\">REST</a> で接続します（恐らく <a href=\"/ja/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a> や <a href=\"/ja/docs/Web/API/Fetch_API\">Fetch</a>) を用いるでしょう）が、安全なプロトコルでありさえすれば <a href=\"/ja/docs/Glossary/SOAP\">SOAP</a> や <a href=\"https://tools.ietf.org/html/rfc2549\" class=\"external\" rel=\" noopener\">RFC 2549</a>、その他ほぼどのようなプロトコルを使用しても構いません。サーバーから受信した引数はほとんどの場合少しもしくは全く改変されずに <a href=\"/en-US/docs/Web/API/CredentialsContainer/get\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">get() (en-US)</a> の呼び出しに渡されます。<strong>なお、チャレンジは、ランダムな情報のバッファ（少なくとも 16 バイト）であることが絶対に必要であり、認証プロセスのセキュリティを確保するために、サーバー上で生成されなければなりません。</strong></li>\n  <li><strong>ブラウザーによる認証器の authenticatorGetCredential() の呼び出し</strong> - 内部的にブラウザーは引数を検証し、既定値を埋めて <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AuthenticatorResponse/clientDataJSON\"><code>AuthenticatorResponse.clientDataJSON</code> <small>(en-US)</small></a>を作成します。最も重要な引数の一つが origin であり、これはclientDataの一部として記録され、後ほどサーバーによって検証されます。 get() 呼び出し時の引数は、 clientDataJSON の SHA-256 ハッシュと一緒に認証器に渡されます（認証器への接続が低帯域幅の NFC または Bluetooth である可能性があり、認証器は単にハッシュに署名して改ざんされていないことを保証することが目的のため、ハッシュのみを送信します）</li>\n  <li><strong>認証器によるアサーションの生成</strong> - 認証器がこのサービスの認証情報が署名検証者 ID と一致することを確認し、ユーザーに認証の同意を促します。この二つのステップが成功した場合、認証器は登録時に生成された秘密鍵を用いて clientDataHash と authenticatorData に署名を行うことで新しいアサーションを生成します。</li>\n  <li><strong>認証器がブラウザーにデータを返す</strong> - 認証器が authenticatorData とアサーションの署名をブラウザーに返します。</li>\n  <li><strong>ブラウザーが最終的なデータを生成し、アプリケーションがサーバーにレスポンスを送信する</strong> - ブラウザーが <a href=\"/ja/docs/Web/API/AuthenticatorAssertionResponse\"><code>AuthenticatorAssertionResponse</code></a> を含む <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PublicKeyCredential/response\"><code>PublicKeyCredential.response</code> <small>(en-US)</small></a> と一緒に <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a> を <a href=\"/ja/docs/Web/API/PublicKeyCredential\"><code>PublicKeyCredential</code></a> に解決しようとします。サーバーに対してどのようなプロトコル、フォーマットでこのデータを戻すのかについては JavaScript アプリケーションに委ねられています。</li>\n  <li><strong>サーバーによる検証と認証の完了</strong> - 認証要求の結果を受け取り次第、サーバーはレスポンスの検証を行います。この検証は以下のようなものです。\n    <ol>\n      <li>登録リクエスト時に保存された公開鍵を用いて、認証器による署名を検証する。</li>\n      <li>認証器が署名したチャレンジが、サーバーが生成したチャレンジと一致することを確認すること。</li>\n      <li>署名検証者 IDがこのサービスに期待されるものであることを確認する。</li>\n    </ol>\n  </li>\n</ol>\n<p>これらは<a href=\"https://w3c.github.io/webauthn/#verifying-assertion\" class=\"external\" rel=\" noopener\">ウェブ認証 API の仕様で規定されているアサーションの検証手順</a>のすべてです。検証が成功した場合、ユーザーは認証済であると記録します。ウェブ認証による規定の対象範囲外ですが、ひとつの選択肢として新しい Cookie をユーザーのセッションに対して発行することが考えられます。</p>"}},{"type":"prose","value":{"id":"インターフェイス","title":"インターフェイス","isH3":false,"content":"<dl>\n  <dt id=\"credential\"><a href=\"/ja/docs/Web/API/Credential\"><code>Credential</code></a> <svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg></dt>\n  <dd>\n    <p>信頼を決定づける前提条件としてのエンティティに関する情報を提供します。</p>\n  </dd>\n  <dt id=\"credentialscontainer_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CredentialsContainer\"><code>CredentialsContainer</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>ログイン・ログアウトが発生したようなイベントの際、資格情報の要求やユーザーエージェント通知のためのメソッドをエクスポートします。このインターフェイスは <a href=\"/ja/docs/Web/API/Navigator/credentials\"><code>Navigator.credentials</code></a> からアクセス可能です。ウェブ認証の仕様では、 <code>publicKey</code> メンバーを<a href=\"/ja/docs/Web/API/CredentialsContainer/create\" title=\"create()\"><code>create()</code></a> と <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CredentialsContainer/get\"><code>get()</code> <small>(en-US)</small></a> メソッドに追加し、それらのメソッドではそれぞれ、新たな鍵ペアの生成、鍵ペアについての認証取得を行います。</p>\n  </dd>\n  <dt id=\"publickeycredential\"><a href=\"/ja/docs/Web/API/PublicKeyCredential\"><code>PublicKeyCredential</code></a></dt>\n  <dd>\n    <p>公開鍵 / 秘密鍵ペアについての情報を提供し、それはサービスへのログインのための資格情報であり、パスワードの代わりに、フィッシング耐性かつデータ漏洩体制のある非対称鍵ペアを用いています。</p>\n  </dd>\n  <dt id=\"authenticatorresponse\"><a href=\"/ja/docs/Web/API/AuthenticatorResponse\"><code>AuthenticatorResponse</code></a></dt>\n  <dd>\n    <p><a href=\"/ja/docs/Web/API/AuthenticatorAttestationResponse\"><code>AuthenticatorAttestationResponse</code></a> と <a href=\"/ja/docs/Web/API/AuthenticatorAssertionResponse\"><code>AuthenticatorAssertionResponse</code></a>に関するベースのインターフェイスであり、鍵ペアについての信頼の暗号的根幹を提供します。<a href=\"/ja/docs/Web/API/CredentialsContainer/create\"><code>CredentialsContainer.create()</code></a> と <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CredentialsContainer/get\"><code>CredentialsContainer.get()</code> <small>(en-US)</small></a>によって返され、それぞれ、その子インターフェイスはチャレンジ、オリジンのようなブラウザーからの情報を含んでいます。<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PublicKeyCredential/response\"><code>PublicKeyCredential.response</code> <small>(en-US)</small></a>から返されるでしょう。</p>\n  </dd>\n  <dt id=\"authenticatorattestationresponse\"><a href=\"/ja/docs/Web/API/AuthenticatorAttestationResponse\"><code>AuthenticatorAttestationResponse</code></a></dt>\n  <dd>\n    <p><a href=\"/ja/docs/Web/API/PublicKeyCredential\"><code>PublicKeyCredential</code></a> が渡された時 <a href=\"/ja/docs/Web/API/CredentialsContainer/create\"><code>CredentialsContainer.create()</code></a> によって返され、生成された新たな鍵ペアの信頼の暗号的根幹を提供します。</p>\n  </dd>\n  <dt id=\"authenticatorassertionresponse\"><a href=\"/ja/docs/Web/API/AuthenticatorAssertionResponse\"><code>AuthenticatorAssertionResponse</code></a></dt>\n  <dd>\n    <p><a href=\"/ja/docs/Web/API/PublicKeyCredential\"><code>PublicKeyCredential</code></a> が渡された時 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CredentialsContainer/get\"><code>CredentialsContainer.get()</code> <small>(en-US)</small></a> によって返され、鍵ペアを所持しており認証要求が有効かつ承認済みであるという証拠をサービスへ提供します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"オプション","title":"オプション","isH3":false,"content":"<dl>\n  <dt id=\"publickeycredentialcreationoptions\"><a href=\"/ja/docs/conflicting/Web/API/CredentialsContainer/create_18148a708412fc42b1affe2f08eab270\"><code>PublicKeyCredentialCreationOptions</code></a></dt>\n  <dd>\n    <p><a href=\"/ja/docs/Web/API/CredentialsContainer/create\"><code>CredentialsContainer.create()</code></a> へ渡すオプションです。</p>\n  </dd>\n  <dt id=\"publickeycredentialrequestoptions\"><a href=\"/ja/docs/Web/API/PublicKeyCredentialRequestOptions\"><code>PublicKeyCredentialRequestOptions</code></a></dt>\n  <dd>\n    <p><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CredentialsContainer/get\"><code>CredentialsContainer.get()</code> <small>(en-US)</small></a> へ渡すオプションです。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":""}},{"type":"prose","value":{"id":"デモサイト","title":"デモサイト","isH3":true,"content":"<ul>\n  <li><a href=\"https://webauthn.bin.coffee/\" class=\"external\" rel=\" noopener\">Mozilla Demo</a> ウェブサイトとその<a href=\"https://github.com/jcjones/webauthn.bin.coffee\" class=\"external\" rel=\" noopener\">ソースコード</a>。</li>\n  <li><a href=\"https://try-webauthn.appspot.com/\" class=\"external\" rel=\" noopener\">Google Demo</a> ウェブサイトとその<a href=\"https://github.com/google/webauthndemo\" class=\"external\" rel=\" noopener\">ソースコード</a>。</li>\n  <li><a href=\"https://github.com/duo-labs/webauthn.io\" class=\"external\" rel=\" noopener\">https://webauthn.io/ Demo</a> ウェブサイトとその<a href=\"https://github.com/duo-labs/webauthn.io\" class=\"external\" rel=\" noopener\">ソースコード</a>。</li>\n  <li><a href=\"https://github.com/webauthn-open-source\" class=\"external\" rel=\" noopener\">github.com/webauthn-open-source</a> とその<a href=\"https://github.com/webauthn-open-source/webauthn-simple-app\" class=\"external\" rel=\" noopener\">クライアントソースコード</a>と<a href=\"https://github.com/webauthn-open-source/fido2-lib\" class=\"external\" rel=\" noopener\">サーバーソースコード</a></li>\n  <li><a href=\"https://owasp.org/www-project-sso/\" class=\"external\" rel=\" noopener\">OWASP Single Sign-On</a></li>\n</ul>"}},{"type":"prose","value":{"id":"使用法の例","title":"使用法の例","isH3":true,"content":"<div class=\"notecard warning\" id=\"sect3\">\n  <p><strong>Warning:</strong> セキュリティの観点から、ウェブ認証の呼び出し（<a href=\"/ja/docs/Web/API/CredentialsContainer/create\" title=\"create()\"><code>create()</code></a> や <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CredentialsContainer/get\"><code>get()</code> <small>(en-US)</small></a>）が保留されている間にブラウザーウィンドウのフォーカスが失われると、呼び出しはキャンセルされます。</p>\n</div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 登録のサンプル引数</span>\n<span class=\"token keyword\">var</span> createCredentialDefaultArgs <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">publicKey</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 署名検証者 (a.k.a. - Service):</span>\n        <span class=\"token literal-property property\">rp</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Acme\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token comment\">// User:</span>\n        <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"john.p.smith@example.com\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">displayName</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John P. Smith\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token literal-property property\">pubKeyCredParams</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"public-key\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">alg</span><span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">7</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token literal-property property\">attestation</span><span class=\"token operator\">:</span> <span class=\"token string\">\"direct\"</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token literal-property property\">timeout</span><span class=\"token operator\">:</span> <span class=\"token number\">60000</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token literal-property property\">challenge</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token comment\">// サーバーから暗号学的にランダムな値が送られていなければならない</span>\n            <span class=\"token number\">0x8C</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0A</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x26</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x91</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xE9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xB9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x4E</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x2E</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1A</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x98</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x6A</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x73</span><span class=\"token punctuation\">,</span>\n            <span class=\"token number\">0x71</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x9D</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x43</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x48</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xD5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xA7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x6A</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x7E</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x38</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x94</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x52</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x77</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x97</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0F</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xEF</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>buffer\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ログインのサンプル引数</span>\n<span class=\"token keyword\">var</span> getCredentialDefaultArgs <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">publicKey</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">timeout</span><span class=\"token operator\">:</span> <span class=\"token number\">60000</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// allowCredentials: [newCredential] // 下記参照</span>\n        <span class=\"token literal-property property\">challenge</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token comment\">// サーバーから暗号学的にランダムな値が送られていなければならない</span>\n            <span class=\"token number\">0x79</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x71</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xDA</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xEE</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xEE</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xB9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x94</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x67</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x65</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x26</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x22</span><span class=\"token punctuation\">,</span>\n            <span class=\"token number\">0xE3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xF3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xAB</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x3B</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x78</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x2E</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xD5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x6F</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x26</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xE2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xA6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x7D</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x74</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x50</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>buffer\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 新しい認証情報の作成/登録</span>\nnavigator<span class=\"token punctuation\">.</span>credentials<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>createCredentialDefaultArgs<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cred</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NEW CREDENTIAL\"</span><span class=\"token punctuation\">,</span> cred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 通常はサーバーから利用可能なアカウントの認証情報が送られてきますが</span>\n        <span class=\"token comment\">// この例では上からコピーしただけです。</span>\n        <span class=\"token keyword\">var</span> idList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> cred<span class=\"token punctuation\">.</span>rawId<span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">transports</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"usb\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"nfc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ble\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"public-key\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        getCredentialDefaultArgs<span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">.</span>allowCredentials <span class=\"token operator\">=</span> idList<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> navigator<span class=\"token punctuation\">.</span>credentials<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>getCredentialDefaultArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">assertion</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ASSERTION\"</span><span class=\"token punctuation\">,</span> assertion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ERROR\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"仕様書","title":"仕様書","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>仕様書</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://w3c.github.io/webauthn/\" class=\"external\" rel=\" noopener\">Web Authentication: An API for accessing Public Key Credentials</a></td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"ブラウザーの互換性","title":"ブラウザーの互換性","isH3":false,"content":""}},{"type":"browser_compatibility","value":{"title":"Credential","id":"credential_2","isH3":true,"query":"api.Credential","dataURL":"/ja/docs/Web/API/Web_Authentication_API/bcd.json"}},{"type":"browser_compatibility","value":{"title":"CredentialsContainer","id":"credentialscontainer","isH3":true,"query":"api.CredentialsContainer","dataURL":"/ja/docs/Web/API/Web_Authentication_API/bcd-2.json"}},{"type":"browser_compatibility","value":{"title":"PublicKeyCredential","id":"publickeycredential_2","isH3":true,"query":"api.PublicKeyCredential","dataURL":"/ja/docs/Web/API/Web_Authentication_API/bcd-3.json"}},{"type":"browser_compatibility","value":{"title":"AuthenticatorResponse","id":"authenticatorresponse_2","isH3":true,"query":"api.AuthenticatorResponse","dataURL":"/ja/docs/Web/API/Web_Authentication_API/bcd-4.json"}},{"type":"browser_compatibility","value":{"title":"AuthenticatorAttestationResponse","id":"authenticatorattestationresponse_2","isH3":true,"query":"api.AuthenticatorAttestationResponse","dataURL":"/ja/docs/Web/API/Web_Authentication_API/bcd-5.json"}},{"type":"browser_compatibility","value":{"title":"AuthenticatorAssertionResponse","id":"authenticatorassertionresponse_2","isH3":true,"query":"api.AuthenticatorAssertionResponse","dataURL":"/ja/docs/Web/API/Web_Authentication_API/bcd-6.json"}},{"type":"browser_compatibility","value":{"title":"PublicKeyCredentialCreationOptions","id":"publickeycredentialcreationoptions_2","isH3":true,"data":null,"query":"api.PublicKeyCredentialCreationOptions","browsers":null}},{"type":"browser_compatibility","value":{"title":"PublicKeyCredentialRequestOptions","id":"publickeycredentialrequestoptions_2","isH3":true,"data":null,"query":"api.PublicKeyCredentialRequestOptions","browsers":null}}],"toc":[{"text":"ウェブ認証の概念と使い方","id":"ウェブ認証の概念と使い方"},{"text":"認証","id":"認証"},{"text":"インターフェイス","id":"インターフェイス"},{"text":"オプション","id":"オプション"},{"text":"例","id":"例"},{"text":"仕様書","id":"仕様書"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"}],"summary":"ウェブ認証 API は、公開鍵暗号を用いて強力な認証を可能にする資格情報管理 API の拡張機能で、パスワードレス認証や、 SMS テキストを用いない安全な二要素認証を実現します。","popularity":0.0003,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Web Authentication API","locale":"en-US","native":"English (US)"},{"title":"Web Authentication API","locale":"ru","native":"Русский"},{"title":"Web Authentication API","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/web_authentication_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/web_authentication_api/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/Web_Authentication_API","title":"ウェブ認証 API"}],"pageTitle":"ウェブ認証 API - Web API | MDN","noIndexing":false}}