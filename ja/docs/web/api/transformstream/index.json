{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"TransformStream","mdn_url":"/ja/docs/Web/API/TransformStream","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/Media_Capture_and_Streams_API\">Media Capture and Streams API</a></strong></li><li><strong><a href=\"/ja/docs/Web/API/TransformStream\"><code>TransformStream</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>コンストラクター</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/TransformStream/TransformStream\"><code>TransformStream()</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>プロパティ</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/TransformStream/readable\"><code>readable</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/TransformStream/writable\"><code>writable</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Media Capture and Streams に関連するページ</summary><ol><li><a href=\"/ja/docs/Web/API/CanvasCaptureMediaStreamTrack\"><code>CanvasCaptureMediaStreamTrack</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLCanvasElement/captureStream\"><code>HTMLCanvasElement.captureStream()</code></a></li><li><a href=\"/ja/docs/Web/API/MediaDevices\"><code>MediaDevices</code></a></li><li><a href=\"/ja/docs/Web/API/MediaDevices/getUserMedia\"><code>MediaDevices.getUserMedia()</code></a></li><li><a href=\"/ja/docs/Web/API/MediaStream\"><code>MediaStream</code></a></li><li><a href=\"/ja/docs/Web/API/MediaStreamTrack\"><code>MediaStreamTrack</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaStreamTrackEvent\"><code>MediaStreamTrackEvent</code> <small>(en-US)</small></a></li><li><a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>MediaTrackCapabilities</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaTrackConstraints\"><code>MediaTrackConstraints</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaTrackSettings\"><code>MediaTrackSettings</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/API/MediaTrackSupportedConstraints\"><code>MediaTrackSupportedConstraints</code></a></li><li><a href=\"/ja/docs/Web/API/Navigator/mediaDevices\"><code>Navigator.mediaDevices</code></a></li><li><a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>VideoStreamTrack</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><code>TransformStream</code> は <a href=\"/ja/docs/Web/API/Streams_API\">Streams API</a> のインターフェイスで一連の変換可能なデータを表します。</p>"}},{"type":"prose","value":{"id":"コンストラクター","title":"コンストラクター","isH3":false,"content":"<dl>\n  <dt id=\"transformstream_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/TransformStream/TransformStream\"><code>TransformStream()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>指定されたハンドラーから変換ストリームを作成して返却します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"プロパティ","title":"プロパティ","isH3":false,"content":"<dl>\n  <dt id=\"transformstream.readable_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/TransformStream/readable\"><code>TransformStream.readable</code> <small>(en-US)</small></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">読取専用 </span></dt>\n  <dd>\n    <p>TransformStream の <code>readable</code> 側の端点です。</p>\n  </dd>\n  <dt id=\"transformstream.writable_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/TransformStream/writable\"><code>TransformStream.writable</code> <small>(en-US)</small></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">読取専用 </span></dt>\n  <dd>\n    <p>TransformStream の <code>writable</code> 側の端点です。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"メソッド","title":"メソッド","isH3":false,"content":"<p>なし</p>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":""}},{"type":"prose","value":{"id":"何かを_uint8array_に変換するストリーム","title":"何かを uint8array に変換するストリーム","isH3":true,"content":"<p>以下の例では、変換ストリームは受信したすべてのチャンクを <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code> <small>(en-US)</small></a> の値に渡します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> transformContent <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// required.</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk<span class=\"token punctuation\">,</span> controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    chunk <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> chunk\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> chunk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'object'</span><span class=\"token operator\">:</span>\n        <span class=\"token comment\">// just say the stream is done I guess</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>chunk <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> controller<span class=\"token punctuation\">.</span><span class=\"token function\">terminate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ArrayBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">isView</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          controller<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">,</span> chunk<span class=\"token punctuation\">.</span>byteOffset<span class=\"token punctuation\">,</span> chunk<span class=\"token punctuation\">.</span>byteLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> chunk<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          controller<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'function'</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">typeof</span> chunk<span class=\"token punctuation\">.</span>valueOf <span class=\"token operator\">&amp;&amp;</span> chunk<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> chunk<span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> controller<span class=\"token punctuation\">)</span> <span class=\"token comment\">// hack</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'toJSON'</span> <span class=\"token keyword\">in</span> chunk<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> controller<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'symbol'</span><span class=\"token operator\">:</span>\n        controller<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot send a symbol as a chunk part\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'undefined'</span><span class=\"token operator\">:</span>\n        controller<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot send undefined as a chunk part\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        controller<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textencoder<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* do any destructor work here */</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AnyToU8Stream</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TransformStream</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>transformContent<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">textencoder</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"textencoderstream_および_textdecoderstream_の代替","title":"TextEncoderStream および TextDecoderStream の代替","isH3":true,"content":"<p>なお、これはネイティブのコンストラクターを使っているため非推奨です。これは対応していないプラットフォームで代替とすることを意図しています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> tes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>encoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk<span class=\"token punctuation\">,</span> controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    controller<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>encoder<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> _jstes_wm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* info holder */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">JSTextEncoderStream</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TransformStream</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>tes<span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n    _jstes_wm<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">encoding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> _jstes_wm<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encoder<span class=\"token punctuation\">.</span>encoding<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>同様に、 TextDecoderStream は次のように書くことができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> tes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>decoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextDecoder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>encoding<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk<span class=\"token punctuation\">,</span> controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    controller<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>decoder<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> _jstds_wm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* info holder */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">JSTextDecoderStream</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TransformStream</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>encoding <span class=\"token operator\">=</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>options<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>tds<span class=\"token punctuation\">,</span> encoding<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n    _jstes_wm<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">encoding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> _jstds_wm<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decoder<span class=\"token punctuation\">.</span>encoding<span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">fatal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> _jstds_wm<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decoder<span class=\"token punctuation\">.</span>fatal<span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">ignoreBOM</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> _jstds_wm<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decoder<span class=\"token punctuation\">.</span>ignoreBOM<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"複数の_readablestreams_を互いに結合","title":"複数の ReadableStreams を互いに結合","isH3":true,"content":"<p>これは、複数のストリームを結合できる便利なものです。例ではプログレッシブ読み込みやプログレッシブストリーミングを持つ PWA の構築が含まれます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> responses <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token comment\">/* conjoined response tree */</span> <span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>readable<span class=\"token punctuation\">,</span> writable<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TransformStream</span>\n\nresponses<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">pipeTo</span><span class=\"token punctuation\">(</span>writable<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">preventClose</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>これは他への影響に対して耐性がないことに注意してください。</p>"}},{"type":"prose","value":{"id":"仕様書","title":"仕様書","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>仕様書</th>\n      <th>状態</th>\n      <th>備考</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://w3c.github.io/mediacapture-main/#dom-mediastream\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">Media Capture and Streams<br><small lang=\"ja\">MediaStream の定義</small></a></td>\n      <td><span class=\"spec-cr\">勧告候補</span></td>\n      <td>初回定義</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"query":"api.TransformStream","dataURL":"/ja/docs/Web/API/TransformStream/bcd.json"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"https://whatwg-stream-visualizer.glitch.me/\" class=\"external\" rel=\" noopener\">WHATWG Stream Visualiser</a>: 読み取り、書き込み、変換ストリームの基本的な視覚化</li>\n</ul>"}}],"toc":[{"text":"コンストラクター","id":"コンストラクター"},{"text":"プロパティ","id":"プロパティ"},{"text":"メソッド","id":"メソッド"},{"text":"例","id":"例"},{"text":"仕様書","id":"仕様書"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"TransformStream は Streams API のインターフェイスで一連の変換可能なデータを表します。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"TransformStream","locale":"en-US","native":"English (US)"},{"title":"TransformStream","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/transformstream","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/transformstream/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/TransformStream","title":"TransformStream"}],"pageTitle":"TransformStream - Web API | MDN","noIndexing":false}}