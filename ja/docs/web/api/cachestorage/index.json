{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"CacheStorage","mdn_url":"/ja/docs/Web/API/CacheStorage","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/Service_Worker_API\">Service Worker API</a></strong></li><li><strong><a href=\"/ja/docs/Web/API/CacheStorage\"><code>CacheStorage</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>メソッド</summary><ol><li><a href=\"/ja/docs/Web/API/CacheStorage/delete\"><code>delete()</code></a></li><li><a href=\"/ja/docs/Web/API/CacheStorage/has\"><code>has()</code></a></li><li><a href=\"/ja/docs/Web/API/CacheStorage/keys\"><code>keys()</code></a></li><li><a href=\"/ja/docs/Web/API/CacheStorage/match\"><code>match()</code></a></li><li><a href=\"/ja/docs/Web/API/CacheStorage/open\"><code>open()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Service Workers API に関連するページ</summary><ol><li><a href=\"/ja/docs/Web/API/Cache\"><code>Cache</code></a></li><li><a href=\"/ja/docs/Web/API/Client\"><code>Client</code></a></li><li><a href=\"/ja/docs/Web/API/Clients\"><code>Clients</code></a></li><li><a href=\"/ja/docs/Web/API/ExtendableEvent\"><code>ExtendableEvent</code></a></li><li><a href=\"/ja/docs/Web/API/FetchEvent\"><code>FetchEvent</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/InstallEvent\"><code>InstallEvent</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/API/Navigator/serviceWorker\"><code>Navigator.serviceWorker</code></a></li><li><a href=\"/ja/docs/Web/API/NotificationEvent\"><code>NotificationEvent</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PeriodicSyncEvent\"><code>PeriodicSyncEvent</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PeriodicSyncManager\"><code>PeriodicSyncManager</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/API/ServiceWorker\"><code>ServiceWorker</code></a></li><li><a href=\"/ja/docs/Web/API/ServiceWorkerContainer\"><code>ServiceWorkerContainer</code></a></li><li><a href=\"/ja/docs/Web/API/ServiceWorkerGlobalScope\"><code>ServiceWorkerGlobalScope</code></a></li><li><a href=\"/ja/docs/Web/API/ServiceWorkerRegistration\"><code>ServiceWorkerRegistration</code></a></li><li><a href=\"/ja/docs/Web/API/SyncEvent\"><code>SyncEvent</code></a></li><li><a href=\"/ja/docs/Web/API/SyncManager\"><code>SyncManager</code></a></li><li><a href=\"/ja/docs/Web/API/WindowClient\"><code>WindowClient</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>CacheStorage</code></strong> インターフェイスは、<a href=\"/ja/docs/Web/API/Cache\"><code>Cache</code></a> オブジェクトのストレージを表します。</p>\n<p>このインターフェイスは、</p>\n<ul>\n  <li><a href=\"/ja/docs/Web/API/ServiceWorker\"><code>ServiceWorker</code></a> や他のタイプのワーカーまたは <a href=\"/ja/docs/Web/API/Window\"><code>window</code></a> のスコープからアクセスできるすべての名前付きキャッシュのマスターディレクトリを提供します（<a href=\"https://w3c.github.io/ServiceWorker/\" hreflang=\"en\" lang=\"en\" class=\"external\" title=\"Service Workersの仕様書\" rel=\" noopener\">Service Workers</a> の仕様で定義されていても、サービスワーカーでのみの使用に限定されません）。\n    <div class=\"notecard note\" id=\"sect1\">\n      <p><strong>Note:</strong> <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=1026063\" class=\"external\" rel=\" noopener\">Chrome と Safari は、HTTPS を介したウィンドウコンテキストにのみ `CacheStorage` を公開します</a>（英語）。 SSL 証明書が設定されていない限り、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/caches\"><code>window.caches</code> <small>(en-US)</small></a> は <code>undefined</code> になります。</p>\n    </div>\n  </li>\n  <li>対応する <a href=\"/ja/docs/Web/API/Cache\"><code>Cache</code></a> オブジェクトへの文字列名のマッピングを維持します。</li>\n</ul>\n<p><a href=\"/ja/docs/Web/API/CacheStorage/open\"><code>CacheStorage.open()</code></a> を使用して、<a href=\"/ja/docs/Web/API/Cache\"><code>Cache</code></a> インスタンスを取得します。</p>\n<p><a href=\"/ja/docs/Web/API/CacheStorage/match\"><code>CacheStorage.match()</code></a> を使用して、所与の <a href=\"/ja/docs/Web/API/Request\"><code>Request</code></a> が <code>CacheStorage</code> オブジェクトが追跡する <a href=\"/ja/docs/Web/API/Cache\"><code>Cache</code></a> オブジェクトのキーであるかどうかを確認します。</p>\n<p>グローバルな <a href=\"/ja/docs/Web/API/caches\" title=\"caches\"><code>caches</code></a> プロパティを介して <code>CacheStorage</code> にアクセスできます。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> CacheStorage は、信頼されていないオリジン（つまり、この定義は将来より複雑になる可能性がありますが、HTTPS を使用しないオリジン）で <code>SecurityError</code> で常に拒否します。 テストするときは、 Firefox 開発ツールの設定/歯車印メニューの「HTTP による Service Worker を有効化（ツールボックスを開いた時）」オプションをチェックすることで、この問題を回避できます。</p>\n</div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> <a href=\"/ja/docs/Web/API/CacheStorage/match\"><code>CacheStorage.match()</code></a> は便利なメソッドです。 キャッシュエントリと一致する同等の機能を実装するには、<a href=\"/ja/docs/Web/API/CacheStorage/keys\"><code>CacheStorage.keys()</code></a> からキャッシュ名の配列を返し、<a href=\"/ja/docs/Web/API/CacheStorage/open\"><code>CacheStorage.open()</code></a> で各キャッシュを開き、<a href=\"/ja/docs/Web/API/Cache/match\"><code>Cache.match()</code></a> で必要なものと一致させます。</p>\n</div>"}},{"type":"prose","value":{"id":"メソッド","title":"メソッド","isH3":false,"content":"<dl>\n  <dt id=\"cachestorage.match\"><a href=\"/ja/docs/Web/API/CacheStorage/match\"><code>CacheStorage.match()</code></a></dt>\n  <dd>\n    <p>所与の <a href=\"/ja/docs/Web/API/Request\"><code>Request</code></a> が、<a href=\"/ja/docs/Web/API/CacheStorage\" aria-current=\"page\"><code>CacheStorage</code></a> オブジェクトが追跡する <a href=\"/ja/docs/Web/API/Cache\"><code>Cache</code></a> オブジェクトのキーであるかどうかを確認し、その一致で解決する <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> を返します。</p>\n  </dd>\n  <dt id=\"cachestorage.has\"><a href=\"/ja/docs/Web/API/CacheStorage/has\"><code>CacheStorage.has()</code></a></dt>\n  <dd>\n    <p><code>cacheName</code> に一致する <a href=\"/ja/docs/Web/API/Cache\"><code>Cache</code></a> オブジェクトが存在する場合、<code>true</code> に解決される <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> を返します。</p>\n  </dd>\n  <dt id=\"cachestorage.open\"><a href=\"/ja/docs/Web/API/CacheStorage/open\"><code>CacheStorage.open()</code></a></dt>\n  <dd>\n    <p><code>cacheName</code> に一致する <a href=\"/ja/docs/Web/API/Cache\"><code>Cache</code></a> オブジェクトに解決される <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> を返します（まだ存在しない場合は新しいキャッシュが作成されます）。</p>\n  </dd>\n  <dt id=\"cachestorage.delete\"><a href=\"/ja/docs/Web/API/CacheStorage/delete\"><code>CacheStorage.delete()</code></a></dt>\n  <dd>\n    <p><code>cacheName</code> に一致する <a href=\"/ja/docs/Web/API/Cache\"><code>Cache</code></a> オブジェクトを見つけ、見つかった場合は <a href=\"/ja/docs/Web/API/Cache\"><code>Cache</code></a> オブジェクトを削除し、<code>true</code> に解決される <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> を返します。 <a href=\"/ja/docs/Web/API/Cache\"><code>Cache</code></a> オブジェクトが見つからない場合、<code>false</code> に解決されます。</p>\n  </dd>\n  <dt id=\"cachestorage.keys\"><a href=\"/ja/docs/Web/API/CacheStorage/keys\"><code>CacheStorage.keys()</code></a></dt>\n  <dd>\n    <p><a href=\"/ja/docs/Web/API/CacheStorage\" aria-current=\"page\"><code>CacheStorage</code></a> によって追跡されるすべての名前付き <a href=\"/ja/docs/Web/API/Cache\"><code>Cache</code></a> オブジェクトに対応する文字列を含む配列で解決される <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> を返します。 このメソッドを使用して、すべての <a href=\"/ja/docs/Web/API/Cache\"><code>Cache</code></a> オブジェクトのリストを反復処理します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":"<p>このコードスニペットは、MDN の <a href=\"https://github.com/mdn/sw-test/\" class=\"external\" rel=\" noopener\">sw-test の例</a>からのものです（<a href=\"https://mdn.github.io/sw-test/\" class=\"external\" rel=\" noopener\">sw-test をライブで</a>見る）。 このサービスワーカーのスクリプトは、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/InstallEvent\"><code>InstallEvent</code> <small>(en-US)</small></a> が発生するのを待ち、<a href=\"/ja/docs/Web/API/ExtendableEvent/waitUntil\" title=\"waitUntil\"><code>waitUntil</code></a> を実行してアプリのインストールプロセスを処理します。 これは、<a href=\"/ja/docs/Web/API/CacheStorage/open\"><code>CacheStorage.open</code></a> を呼び出して新しいキャッシュを作成し、<a href=\"/ja/docs/Web/API/Cache/addAll\"><code>Cache.addAll</code></a> を使用して一連のアセットを追加することで構成されます。</p>\n<p>2 番目のコードブロックでは、<a href=\"/ja/docs/Web/API/FetchEvent\"><code>FetchEvent</code></a> が発生するのを待ちます。 次のようなカスタムレスポンスを作成します。</p>\n<ol>\n  <li><code>CacheStorage</code> でリクエストに一致するものが見つかったかどうかを確認します。 もしそうなら、それを提供します。</li>\n  <li>そうでない場合は、ネットワークからリクエストを取得し、最初のブロックで作成されたキャッシュも開き、<a href=\"/ja/docs/Web/API/Cache/put\"><code>Cache.put</code></a>（<code>cache.put(event.request, response.clone())</code>）を使用してリクエストのクローンを追加します。</li>\n  <li>これが失敗した場合（例えば、ネットワークがダウンしているため）、フォールバックレスポンスを返します。</li>\n</ol>\n<p>最後に、<a href=\"/ja/docs/Web/API/FetchEvent/respondWith\"><code>FetchEvent.respondWith</code></a> を使用して、カスタムレスポンスが等しくなったものをすべて返します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>self<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'install'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span>\n    caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'v1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cache</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'/sw-test/'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'/sw-test/index.html'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'/sw-test/style.css'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'/sw-test/app.js'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'/sw-test/image-list.js'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'/sw-test/star-wars-logo.jpg'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'/sw-test/gallery/bountyHunters.jpg'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'/sw-test/gallery/myLittleVader.jpg'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'/sw-test/gallery/snowTroopers.jpg'</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nself<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fetch'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>caches<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// caches.match() は常に解決します</span>\n    <span class=\"token comment\">// ただし、成功の場合はレスポンスに値があります</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// レスポンスは1回のみ使用できます</span>\n        <span class=\"token comment\">// クローンを保存して、1番目のコピーをキャッシュに入れ、</span>\n        <span class=\"token comment\">// 2番目のコピーを提供する必要があります</span>\n        <span class=\"token keyword\">let</span> responseClone <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'v1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">cache</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          cache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">,</span> responseClone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/sw-test/gallery/myLittleVader.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>このスニペットは、サービスワーカーのコンテキストの外部で API を使用する方法を示しており、`await` 演算子を使用してより読みやすいコードにしています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// キャッシュからデータを取得しようとしますが、フォールバックしてライブで取得します。</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> cacheVersion <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">const</span> cacheName    <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">myapp-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> cacheVersion <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">const</span> url          <span class=\"token operator\">=</span> <span class=\"token string\">'https://jsonplaceholder.typicode.com/todos/1'</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">let</span> cachedData     <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getCachedData</span><span class=\"token punctuation\">(</span> cacheName<span class=\"token punctuation\">,</span> url <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> cachedData <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'取得したキャッシュデータ'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> cachedData<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'最新データの取得'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">const</span> cacheStorage <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span> cacheName <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">await</span> cacheStorage<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span> url <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   cachedData <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getCachedData</span><span class=\"token punctuation\">(</span> cacheName<span class=\"token punctuation\">,</span> url <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">await</span> <span class=\"token function\">deleteOldCaches</span><span class=\"token punctuation\">(</span> cacheName <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">return</span> cachedData<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// キャッシュからデータを取得します。</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getCachedData</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">cacheName<span class=\"token punctuation\">,</span> url</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> cacheStorage   <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span> cacheName <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">const</span> cachedResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> cacheStorage<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span> url <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span> cachedResponse <span class=\"token operator\">||</span> <span class=\"token operator\">!</span> cachedResponse<span class=\"token punctuation\">.</span>ok <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> cachedResponse<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 古いキャッシュを削除して、ユーザーのディスク容量を尊重します。</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">deleteOldCaches</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">currentCache</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> keys <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> key <span class=\"token keyword\">of</span> keys <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> isOurCache <span class=\"token operator\">=</span> <span class=\"token string\">'myapp-'</span> <span class=\"token operator\">===</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> currentCache <span class=\"token operator\">===</span> key <span class=\"token operator\">||</span> <span class=\"token operator\">!</span> isOurCache <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      caches<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span> key <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span> error <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span> error <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"仕様","title":"仕様","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>仕様</th>\n      <th>状態</th>\n      <th>コメント</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://w3c.github.io/ServiceWorker/#cachestorage\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">Service Workers<br><small lang=\"ja\">CacheStorage の定義</small></a></td>\n      <td><span class=\"spec-wd\">草案</span></td>\n      <td>初期定義</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"query":"api.CacheStorage","dataURL":"/ja/docs/Web/API/CacheStorage/bcd.json"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/API/Service_Worker_API/Using_Service_Workers\">Service worker の使用</a></li>\n  <li><a href=\"/ja/docs/Web/API/Cache\"><code>Cache</code></a></li>\n  <li><a href=\"/ja/docs/Web/API/caches\"><code>WindowOrWorkerGlobalScope.caches</code></a></li>\n</ul>"}}],"toc":[{"text":"メソッド","id":"メソッド"},{"text":"例","id":"例"},{"text":"仕様","id":"仕様"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"CacheStorage インターフェイスは、Cache オブジェクトのストレージを表します。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"CacheStorage","locale":"en-US","native":"English (US)"},{"title":"CacheStorage","locale":"es","native":"Español"},{"title":"CacheStorage","locale":"fr","native":"Français"},{"title":"CacheStorage","locale":"ru","native":"Русский"},{"title":"CacheStorage","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/cachestorage","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/cachestorage/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/CacheStorage","title":"CacheStorage"}],"pageTitle":"CacheStorage - Web API | MDN","noIndexing":false}}