{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"MutationObserver.observe()","mdn_url":"/ja/docs/Web/API/MutationObserver/observe","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/MutationObserver\"><code>MutationObserver</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>コンストラクター</summary><ol><li><a href=\"/ja/docs/Web/API/MutationObserver/MutationObserver\"><code>MutationObserver()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>メソッド</summary><ol><li><a href=\"/ja/docs/Web/API/MutationObserver/disconnect\"><code>disconnect()</code></a></li><li><em><code>observe()</code></em></li><li><a href=\"/ja/docs/Web/API/MutationObserver/takeRecords\"><code>takeRecords()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/ja/docs/Web/API/MutationObserver\"><code>MutationObserver</code></a> の <strong><code>observe()</code></strong> メソッドは、<code>MutationObserver</code> コールバックを設定し、与えられたオプションに適合する DOM への変更の通知の受信を開始します。設定によっては、オブザーバーは DOM ツリー内の単一の <a href=\"/ja/docs/Web/API/Node\" title=\"ノード\"><code>ノード</code></a> を監視したり、そのノードとその子孫ノードの一部またはすべてを監視したりします。</p>\n<p><code>MutationObserver</code> を停止するには、<a href=\"/ja/docs/Web/API/MutationObserver/disconnect\"><code>MutationObserver.disconnect()</code></a> を呼び出してください。(これにより、そのコールバックはそれ以降発生しなくなります。)</p>"}},{"type":"prose","value":{"id":"構文","title":"構文","isH3":false,"content":"<pre class=\"notranslate\">mutationObserver.observe(target, options)\n</pre>"}},{"type":"prose","value":{"id":"引数","title":"引数","isH3":true,"content":"<dl>\n  <dt id=\"target\"><code>target</code></dt>\n  <dd>\n    <p>DOM ツリー内で変更を監視したり、監視するノードのサブツリーのルートになったりする DOM<a href=\"/ja/docs/Web/API/Node\" title=\"ノード\"><code>ノード</code></a> (あるいは、<a href=\"/ja/docs/Web/API/Element\" title=\"要素\"><code>要素</code></a>である可能性もあります。)</p>\n  </dd>\n  <dt id=\"options\"><code>options</code></dt>\n  <dd>\n    <p>どの DOM の変更を<code>mutationObserver</code>の<code>callback</code>に報告するかを記述するオプションを提供する、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MutationObserver/observe\"><code>MutationObserverInit</code> <small>(en-US)</small></a>オブジェクト。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"戻り値","title":"戻り値","isH3":true,"content":"<p><code>undefined</code></p>"}},{"type":"prose","value":{"id":"例外","title":"例外","isH3":true,"content":"<dl>\n  <dt id=\"typeerror\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a></dt>\n  <dd>\n    <p>以下のいずれかの状況でスローされます。</p>\n    <ul>\n      <li>\n        実際には何も監視されないように<code>options</code>が設定されている場合。\n        (例えば、 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MutationObserver/observe\"><code>MutationObserverInit.childList</code> <small>(en-US)</small></a>、 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MutationObserver/observe\"><code>MutationObserverInit.attributes</code> <small>(en-US)</small></a>、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MutationObserver/observe\"><code>MutationObserverInit.characterData</code> <small>(en-US)</small></a> が全て<code>false</code>の場合)\n      </li>\n      <li><code>options.attributes</code> の値が <code>false</code> (これは属性の変更を監視しないことを示す)であるにも関わらず、<code>attributeOldValue</code> は <code>true</code> であるか、または、<code>attributeFilter</code> が存在する場合。</li>\n      <li><a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>characterDataOldValue</code></a> は <code>true</code> であるにも関わらず、 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MutationObserver/observe\"><code>MutationObserverInit.characterData</code> <small>(en-US)</small></a> が <code>false</code> (これは、文字の変更を監視しないことを示す)である場合。</li>\n    </ul>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"使用における注意点","title":"使用における注意点","isH3":false,"content":""}},{"type":"prose","value":{"id":"mutationobserver_の再利用","title":"MutationObserver の再利用","isH3":true,"content":"<p>同一の <code>MutationObserver</code> で、<code>observe()</code> を複数回呼び出すことで、DOM ツリーの異なる部分や異なる種類の変更を監視することができます。ただし、注意すべき点がいくつかあります。</p>\n<ul>\n  <li>同じ<code>MutationObserver</code>で既に監視されているノードで<code>observe()</code>を呼び出すと、新しいオブザーバーがアクティブになる前に、監視されているすべてのターゲットから既存のすべてのオブザーバーが自動的に削除されます。</li>\n  <li>同じ<code>MutationObserver</code>がターゲットで使用されていない場合は、既存のオブザーバーを残して新しいオブザーバーを追加します。</li>\n</ul>"}},{"type":"prose","value":{"id":"ノードの切り離しが行われた際の監視の追従","title":"ノードの切り離しが行われた際の監視の追従","isH3":true,"content":"<p>MutationObserver は、ノード間の直接接続が切断されても、時間の経過とともに目的のノードセットを監視できるようにすることを目的としています。ノードのサブツリーの監視を開始し、そのサブツリーの一部が切り離されて DOM 内の別の場所に移動した場合、切り離されたノードのセグメントを監視し続け、元のサブツリーからノードが切り離される前と同じコールバックを受け取ります。</p>\n<p>つまり、監視しているサブツリーからノードが切り離されたことが通知されるまでは、切り離されたサブツリーとそのノードへの変更の通知を受けます。これにより、接続が切断された後、移動したノードやサブツリーの変更を監視し始める前に発生した変更を見逃してしまうことを防ぐことができます。</p>\n<p>理論的には、発生した変更を記述した <a href=\"/ja/docs/Web/API/MutationRecord\"><code>MutationRecord</code></a> オブジェクトを追跡していれば、変更を「元に戻す」ことができ、DOM を初期状態に戻すことができるはずです。</p>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":"<p>この例では、<a href=\"/ja/docs/Web/API/MutationObserver\"><code>MutationObserver</code></a> のインスタンス上で**<code>observe()</code>** メソッドを呼び出す方法を示します。一度設定したら、ターゲット要素と <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MutationObserver/observe\"><code>MutationObserverInit</code> <small>(en-US)</small></a> オプションオブジェクトを渡します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// identify an element to observe</span>\n<span class=\"token keyword\">const</span> elementToObserve <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#targetElementId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// create a new instance of `MutationObserver` named `observer`,</span>\n<span class=\"token comment\">// passing it a callback function</span>\n<span class=\"token keyword\">const</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MutationObserver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'callback that runs when observer is triggered'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// call `observe()` on that MutationObserver instance,</span>\n<span class=\"token comment\">// passing it the element to observe, and the options object</span>\nobserver<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>elementToObserve<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">subtree</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">childList</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"仕様","title":"仕様","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>Specification</th>\n      <th>Status</th>\n      <th>Comment</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://dom.spec.whatwg.org/#dom-mutationobserver-observe\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">DOM<br><small lang=\"ja\">MutationObserver.observe() の定義</small></a></td>\n      <td><span class=\"spec-living\">現行の標準</span></td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"browser_compatibility","value":{"title":"ブラウザ互換性","id":"ブラウザ互換性","isH3":false,"query":"api.MutationObserver.observe","dataURL":"/ja/docs/Web/API/MutationObserver/observe/bcd.json"}}],"toc":[{"text":"構文","id":"構文"},{"text":"使用における注意点","id":"使用における注意点"},{"text":"例","id":"例"},{"text":"仕様","id":"仕様"},{"text":"ブラウザ互換性","id":"ブラウザ互換性"}],"summary":"MutationObserver の observe() メソッドは、MutationObserver コールバックを設定し、与えられたオプションに適合する DOM への変更の通知の受信を開始します。設定によっては、オブザーバーは DOM ツリー内の単一の ノード を監視したり、そのノードとその子孫ノードの一部またはすべてを監視したりします。","popularity":0.0003,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"MutationObserver.observe()","locale":"en-US","native":"English (US)"},{"title":"MutationObserver.observe()","locale":"es","native":"Español"},{"title":"MutationObserver.observe()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/mutationobserver/observe","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/mutationobserver/observe/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/MutationObserver","title":"MutationObserver"},{"uri":"/ja/docs/Web/API/MutationObserver/observe","title":"MutationObserver.observe()"}],"pageTitle":"MutationObserver.observe() - Web API | MDN","noIndexing":false}}