{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"MutationObserver.MutationObserver()","mdn_url":"/ja/docs/Web/API/MutationObserver/MutationObserver","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/MutationObserver\"><code>MutationObserver</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>コンストラクター</summary><ol><li><em><code>MutationObserver()</code></em></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>メソッド</summary><ol><li><a href=\"/ja/docs/Web/API/MutationObserver/disconnect\"><code>disconnect()</code></a></li><li><a href=\"/ja/docs/Web/API/MutationObserver/observe\"><code>observe()</code></a></li><li><a href=\"/ja/docs/Web/API/MutationObserver/takeRecords\"><code>takeRecords()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong>MutationObserver()</strong> コンストラクタ (<a href=\"/ja/docs/Web/API/MutationObserver\"><code>MutationObserver</code></a> インターフェースの一部) は、指定されたコールバックを DOM イベントが発生したときに実行するオブザーバを作成して返します。DOM の監視はすぐに開始されるわけではありません。最初に <a href=\"/ja/docs/Web/API/MutationObserver/observe\" title=\"observe()\"><code>observe()</code></a> メソッドを呼び出し、DOM のどの部分を監視し、どのような変更を監視するかを決めなければなりません。</p>"}},{"type":"prose","value":{"id":"構文","title":"構文","isH3":false,"content":"<pre class=\"notranslate\">var observer = new MutationObserver(callback);\n</pre>"}},{"type":"prose","value":{"id":"引数","title":"引数","isH3":true,"content":"<dl>\n  <dt id=\"callback\"><code>callback</code></dt>\n  <dd>\n    <p>対象となるノードやサブツリー、および指定されたオプションの条件を満たす DOM の変更が起きるたびに呼び出される関数。このコールバック関数は、２つの引数を受け取ります。発生したそれぞれの変更を記述した <a href=\"/ja/docs/Web/API/MutationRecord\"><code>MutationRecord</code></a> オブジェクトの配列、そしてコールバックを実行した <a href=\"/ja/docs/Web/API/MutationObserver\"><code>MutationObserver</code></a> です。詳細については、以下の<a href=\"#%E4%BE%8B\">例</a>を参照してください。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"戻り値","title":"戻り値","isH3":true,"content":"<p>指定されたコールバックを DOM の変更が発生したときに呼び出すように設定された <a href=\"/ja/docs/Web/API/MutationObserver\"><code>MutationObserver</code></a> オブジェクト。</p>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":"<p>この例では、ノードとそのすべての子において、ツリーへの要素の追加と削除、およびツリー内の要素の属性の変更を監視するように設定された MutationObserver を作成します。</p>"}},{"type":"prose","value":{"id":"コールバック関数","title":"コールバック関数","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mutationList<span class=\"token punctuation\">,</span> observer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  mutationList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mutation</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>mutation<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'childList'</span><span class=\"token operator\">:</span>\n        <span class=\"token comment\">/* ツリーに１つ以上の子が追加されたか、ツリーから削除された。\n           mutation.addedNodes と mutation.removedNodes を参照。 */</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'attributes'</span><span class=\"token operator\">:</span>\n        <span class=\"token comment\">/* Mutation.target の要素の属性値が変更された。\n           属性名は mutation.attributeName にあり、\n           以前の値は mutation.oldValue にある。 */</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>callback() 関数は、<a href=\"/ja/docs/Web/API/MutationObserver/observe\" title=\"observe()\"><code>observe()</code></a> を呼び出して DOM の監視を開始するときに指定された監視リクエストの設定と一致する変更をオブザーバが確認したときに実行されます。</p>\n<p>発生した変更の種類 (子のリストの変更または属性の変更のいずれか) は、<a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>mutation.type</code></a> プロパティを調べることによって判明します。</p>"}},{"type":"prose","value":{"id":"オブザーバの作成と開始","title":"オブザーバの作成と開始","isH3":true,"content":"<p>このコードでは、実際に監視プロセスを設定します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> targetNode <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#someElement\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> observerOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">childList</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">attributes</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">subtree</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 省略するか、false に設定すると、親ノードへの変更のみを監視する。</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MutationObserver</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobserver<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>targetNode<span class=\"token punctuation\">,</span> observerOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>目的のサブツリーは、ID が \"someElement\" の要素を検索することで見つかります。オブザーバのオプションのセットは、observerOptions のレコードで設定します。この中で、childList と attributes の両方に true の値を指定することで、目的の情報を得ることができます。</p>\n<p>そして、callback() 関数を指定して observer をインスタンス化し、対象のノードとオプションのレコードを指定して observe() を呼び出すことで、対象の DOM ノードの監視を開始します。</p>\n<p>この時点から <a href=\"/ja/docs/Web/API/MutationObserver/disconnect\" title=\"disconnect()\"><code>disconnect()</code></a> が呼び出されるまで、targetNode をルートとする DOM ツリーに要素が追加されたり削除されたり、あるいは要素の属性が変更されるたびに <code>callback()</code> が呼び出されます。</p>"}},{"type":"prose","value":{"id":"仕様書","title":"仕様書","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>Specification</th>\n      <th>Status</th>\n      <th>Comment</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://dom.spec.whatwg.org/#dom-mutationobserver-mutationobserver\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">DOM<br><small lang=\"ja\">MutationObserver() の定義</small></a></td>\n      <td><span class=\"spec-living\">現行の標準</span></td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"browser_compatibility","value":{"title":"各ブラウザの対応状況","id":"各ブラウザの対応状況","isH3":false,"query":"api.MutationObserver.MutationObserver","dataURL":"/ja/docs/Web/API/MutationObserver/MutationObserver/bcd.json"}}],"toc":[{"text":"構文","id":"構文"},{"text":"例","id":"例"},{"text":"仕様書","id":"仕様書"},{"text":"各ブラウザの対応状況","id":"各ブラウザの対応状況"}],"summary":"MutationObserver() コンストラクタ (MutationObserver インターフェースの一部) は、指定されたコールバックを DOM イベントが発生したときに実行するオブザーバを作成して返します。DOM の監視はすぐに開始されるわけではありません。最初に observe() メソッドを呼び出し、DOM のどの部分を監視し、どのような変更を監視するかを決めなければなりません。","popularity":0.0002,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"MutationObserver()","locale":"en-US","native":"English (US)"},{"title":"MutationObserver.MutationObserver()","locale":"es","native":"Español"},{"title":"MutationObserver.MutationObserver()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/mutationobserver/mutationobserver","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/mutationobserver/mutationobserver/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/MutationObserver","title":"MutationObserver"},{"uri":"/ja/docs/Web/API/MutationObserver/MutationObserver","title":"MutationObserver.MutationObserver()"}],"pageTitle":"MutationObserver.MutationObserver() - Web API | MDN","noIndexing":false}}