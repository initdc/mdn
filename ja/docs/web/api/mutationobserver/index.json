{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"MutationObserver","mdn_url":"/ja/docs/Web/API/MutationObserver","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/MutationObserver\"><code>MutationObserver</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>コンストラクター</summary><ol><li><a href=\"/ja/docs/Web/API/MutationObserver/MutationObserver\"><code>MutationObserver()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>メソッド</summary><ol><li><a href=\"/ja/docs/Web/API/MutationObserver/disconnect\"><code>disconnect()</code></a></li><li><a href=\"/ja/docs/Web/API/MutationObserver/observe\"><code>observe()</code></a></li><li><a href=\"/ja/docs/Web/API/MutationObserver/takeRecords\"><code>takeRecords()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/ja/docs/Web/API/MutationObserver\" aria-current=\"page\"><code>MutationObserver</code></a> インターフェイスは、 <a href=\"/ja/docs/Web/API/Document_Object_Model\">DOM</a> ツリーへ変更が加えられたことを監視することができる機能を提供します。これは DOM3 Events の仕様で定義されていた <a href=\"/en-US/docs/Web/API/MutationEvent\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Mutation Events (en-US)</a> 機能の置き換えとして設計されたものです。</p>"}},{"type":"prose","value":{"id":"コンストラクター","title":"コンストラクター","isH3":false,"content":"<dl>\n  <dt id=\"mutationobserver\"><a href=\"/ja/docs/Web/API/MutationObserver/MutationObserver\" title=\"MutationObserver()\"><code>MutationObserver()</code></a></dt>\n  <dd>\n    <p>DOM の変更が行われたときに指定されたコールバック関数を呼び出す新しい <code>MutationObserver</code> を生成して返します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"メソッド","title":"メソッド","isH3":false,"content":"<dl>\n  <dt id=\"disconnect\"><a href=\"/ja/docs/Web/API/MutationObserver/disconnect\" title=\"disconnect()\"><code>disconnect()</code></a></dt>\n  <dd>\n    <p><code>MutationObserver</code> のインスタンスが今後の通知を受け取ることを、 <a href=\"/ja/docs/Web/API/MutationObserver/observe\" title=\"observe()\"><code>observe()</code></a> が再び呼び出されるまで停止します。</p>\n  </dd>\n  <dt id=\"observe\"><a href=\"/ja/docs/Web/API/MutationObserver/observe\" title=\"observe()\"><code>observe()</code></a></dt>\n  <dd>\n    <p>指定したオプションに合う DOM の変更が発生したときに、コールバック関数を介して通知を受信し始めるように <code>MutationObserver</code> を構成します。</p>\n  </dd>\n  <dt id=\"takerecords\"><a href=\"/ja/docs/Web/API/MutationObserver/takeRecords\" title=\"takeRecords()\"><code>takeRecords()</code></a></dt>\n  <dd>\n    <p><code>MutationObserver</code> の通知キューから保留中の通知をすべて削除し、 <a href=\"/ja/docs/Web/API/MutationRecord\"><code>MutationRecord</code></a> の新しい配列 (<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>) で返します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"mutation_observer_と_resize_イベントリスナーのカスタマイズとデモ","title":"Mutation Observer と resize イベントリスナーのカスタマイズとデモ","isH3":false,"content":"<p><a href=\"https://codepen.io/webgeeker/full/YjrZgg/\" class=\"external\" rel=\" noopener\">https://codepen.io/webgeeker/full/YjrZgg/</a></p>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":"<p>以下の例は <a href=\"https://hacks.mozilla.org/2012/05/dom-mutationobserver-reacting-to-dom-changes-without-killing-browser-performance/\" class=\"external\" rel=\" noopener\">このブログ記事</a> を参考にしたものです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 変更を監視するノードを選択</span>\n<span class=\"token keyword\">const</span> targetNode <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'some-id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// (変更を監視する) オブザーバーのオプション</span>\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">attributes</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">childList</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">subtree</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 変更が発見されたときに実行されるコールバック関数</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mutationsList<span class=\"token punctuation\">,</span> observer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Use traditional 'for loops' for IE 11</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> mutation <span class=\"token keyword\">of</span> mutationsList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mutation<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'childList'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A child node has been added or removed.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mutation<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'attributes'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The '</span> <span class=\"token operator\">+</span> mutation<span class=\"token punctuation\">.</span>attributeName <span class=\"token operator\">+</span> <span class=\"token string\">' attribute was modified.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// コールバック関数に結びつけられたオブザーバーのインスタンスを生成</span>\n<span class=\"token keyword\">const</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MutationObserver</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 対象ノードの設定された変更の監視を開始</span>\nobserver<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>targetNode<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// その後で、監視を停止することができる</span>\nobserver<span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"仕様書","title":"仕様書","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>仕様書</th>\n      <th>状態</th>\n      <th>備考</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://dom.spec.whatwg.org/#interface-mutationobserver\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">DOM<br><small lang=\"ja\">MutationObserver の定義</small></a></td>\n      <td><span class=\"spec-living\">現行の標準</span></td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"query":"api.MutationObserver","dataURL":"/ja/docs/Web/API/MutationObserver/bcd.json"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/API/PerformanceObserver\"><code>PerformanceObserver</code></a></li>\n  <li><a href=\"/ja/docs/Web/API/ResizeObserver\"><code>ResizeObserver</code></a></li>\n  <li><a href=\"/ja/docs/Web/API/IntersectionObserver\"><code>IntersectionObserver</code></a></li>\n  <li><a href=\"https://updates.html5rocks.com/2012/02/Detect-DOM-changes-with-Mutation-Observers\" class=\"external\" rel=\" noopener\">A brief overview</a></li>\n  <li><a href=\"https://hacks.mozilla.org/2012/05/dom-mutationobserver-reacting-to-dom-changes-without-killing-browser-performance/\" class=\"external\" rel=\" noopener\">A more in-depth discussion</a></li>\n  <li><a href=\"https://www.youtube.com/watch?v=eRZ4pO0gVWw\" class=\"external\" rel=\" noopener\">A screencast by Chromium developer Rafael Weinstein</a></li>\n</ul>"}}],"toc":[{"text":"コンストラクター","id":"コンストラクター"},{"text":"メソッド","id":"メソッド"},{"text":"Mutation Observer と resize イベントリスナーのカスタマイズとデモ","id":"mutation_observer_と_resize_イベントリスナーのカスタマイズとデモ"},{"text":"例","id":"例"},{"text":"仕様書","id":"仕様書"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"MutationObserver インターフェイスは、 DOM ツリーへ変更が加えられたことを監視することができる機能を提供します。これは DOM3 Events の仕様で定義されていた Mutation Events (en-US) 機能の置き換えとして設計されたものです。","popularity":0.0011,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"MutationObserver","locale":"en-US","native":"English (US)"},{"title":"MutationObserver","locale":"es","native":"Español"},{"title":"MutationObserver","locale":"fr","native":"Français"},{"title":"MutationObserver","locale":"ko","native":"한국어"},{"title":"MutationObserver","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"MutationObserver","locale":"ru","native":"Русский"},{"title":"MutationObserver","locale":"zh-CN","native":"中文 (简体)"},{"title":"MutationObserver","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ja/web/api/mutationobserver","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/mutationobserver/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/MutationObserver","title":"MutationObserver"}],"pageTitle":"MutationObserver - Web API | MDN","noIndexing":false}}