{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"MediaDevices.getUserMedia()","mdn_url":"/ja/docs/Web/API/MediaDevices/getUserMedia","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/Media_Capture_and_Streams_API\">Media Capture and Streams API</a></strong></li><li><strong><a href=\"/ja/docs/Web/API/MediaDevices\"><code>MediaDevices</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>メソッド</summary><ol><li><a href=\"/ja/docs/Web/API/MediaDevices/enumerateDevices\"><code>enumerateDevices()</code></a></li><li><a href=\"/ja/docs/Web/API/MediaDevices/getDisplayMedia\"><code>getDisplayMedia()</code></a></li><li><a href=\"/ja/docs/Web/API/MediaDevices/getSupportedConstraints\"><code>getSupportedConstraints()</code></a></li><li><em><code>getUserMedia()</code></em></li><li><svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg><a href=\"/ja/docs/Web/API/MediaDevices/selectAudioOutput\"><code>selectAudioOutput()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>イベント</summary><ol><li><a href=\"/ja/docs/Web/API/MediaDevices/devicechange_event\"><code>devicechange</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>継承</summary><ol><li><a href=\"/ja/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Media Capture and Streams に関連するページ</summary><ol><li><a href=\"/ja/docs/Web/API/CanvasCaptureMediaStreamTrack\"><code>CanvasCaptureMediaStreamTrack</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLCanvasElement/captureStream\"><code>HTMLCanvasElement.captureStream()</code></a></li><li><a href=\"/ja/docs/Web/API/MediaDevices/getUserMedia\"><code>MediaDevices.getUserMedia()</code></a></li><li><a href=\"/ja/docs/Web/API/MediaStream\"><code>MediaStream</code></a></li><li><a href=\"/ja/docs/Web/API/MediaStreamTrack\"><code>MediaStreamTrack</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaStreamTrackEvent\"><code>MediaStreamTrackEvent</code> <small>(en-US)</small></a></li><li><a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>MediaTrackCapabilities</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaTrackConstraints\"><code>MediaTrackConstraints</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaTrackSettings\"><code>MediaTrackSettings</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/API/MediaTrackSupportedConstraints\"><code>MediaTrackSupportedConstraints</code></a></li><li><a href=\"/ja/docs/Web/API/Navigator/mediaDevices\"><code>Navigator.mediaDevices</code></a></li><li><a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>VideoStreamTrack</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard secure\" id=\"sect1\"><p><strong>安全なコンテキスト用:</strong> この機能は一部またはすべての<a href=\"#browser_compatibility\">対応しているブラウザー</a>において、<a href=\"/ja/docs/Web/Security/Secure_Contexts\">安全なコンテキスト</a> (HTTPS) でのみ利用できます。</p></div>\n<p><a href=\"/ja/docs/Web/API/MediaDevices\"><code>MediaDevices</code></a><strong><code>.getUserMedia()</code></strong> メソッドは、要求された種類のメディアを含むトラックを持つ <a href=\"/ja/docs/Web/API/MediaStream\"><code>MediaStream</code></a> を生成するメディア入力を使用する許可をユーザーに求めます。</p>\n<p>このストリームには、例えば、動画トラック（カメラ、ビデオ録画機器、画面共有サービスなどのような、ハードウェアまたは仮想ビデオソースによって生み出されるもの）、音声トラック（同様に、マイク、A/D 変換器などの物理的または仮想オーディオソースによって生み出されるもの）、その他の可能な種別を含めることができます。</p>\n<p>これは <a href=\"/ja/docs/Web/API/MediaStream\"><code>MediaStream</code></a> オブジェクトに解決する <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> を返します。ユーザーが拒否した場合や、一致するメディアが利用できない場合、プロミスはそれぞれ <code>NotAllowedError</code> または <code>NotFoundError</code> の <a href=\"/ja/docs/Web/API/DOMException\"><code>DOMException</code></a> で拒否されます。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> ユーザーが選択する必要が全くなく、リクエストを単純に無視できる場合、返却された Promise が解決または拒否の<em>どちらにもならない</em>可能性があります。</p>\n</div>\n<p>一般的に、 <a href=\"/ja/docs/Web/API/MediaDevices\"><code>MediaDevices</code></a> のシングルトンオブジェクトは以下のように、 <a href=\"/ja/docs/Web/API/Navigator/mediaDevices\"><code>navigator.mediaDevices</code></a> を使用してアクセスします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getMedia</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">constraints</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    stream <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span>constraints<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* ストリームを使用 */</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* エラーを処理 */</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>同様に、生のプロミスを直接使用すると、コードは次のようになります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span>constraints<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">stream</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ストリームを使用 */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* エラーを処理 */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> 現在の文書が安全に読み込まれなかった場合は、 <code>navigator.mediaDevices</code> は <code>undefined</code> になり、 <code>getUserMedia()</code> を使用することはできません。<a href=\"#%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3\">セキュリティ</a>の節に、この件やその他の <code>getUserMedia()</code> の使用に関するセキュリティ問題の詳細があります。</p>\n</div>"}},{"type":"prose","value":{"id":"構文","title":"構文","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span>constraints<span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"引数","title":"引数","isH3":true,"content":"<dl>\n  <dt id=\"constraints\"><code>constraints</code></dt>\n  <dd>\n    <p>オブジェクトで、それぞれの種類のために何らかの要件に沿って要求するメディアの種類を指定します。</p>\n    <p><code>constraints</code> 引数は 2 つのメンバー <code>video</code> および <code>audio</code> を持ち、要求されたメディアの種類を記述します。どちらか、または両方を指定する必要があります。ブラウザーが指定された条件に合う指定された種類を持つすべてのメディアトラックを発見できない場合、返却されたプロミスは <code>NotFoundError</code> の <a href=\"/ja/docs/Web/API/DOMException\"><code>DOMException</code></a> で拒否されます。</p>\n    <p>次の例は特定の要件なしに音声と動画の両方を要求します。</p>\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n</code></pre></div>\n    <p>メディアの種類に <code>true</code> が指定された場合、結果のストリームはそのタイプのトラックが中にある<em>必要</em>があります。何らかの理由で含めることができない場合、 <code>getUserMedia()</code> の呼び出しはエラーが返ります。</p>\n    <p>ユーザーのカメラやマイクについての情報は、プライバシー上の理由からアクセスできませんが、アプリケーションは追加の制約を使用することで、カメラやマイクの能力を必要に応じて要求することができます。次の例は、 1280x720 のカメラ解像度の設定を表しています。</p>\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token number\">1280</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">720</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n    <p>ブラウザーはこれに忠実であろうとしますが、正確に一致するものが使用できない場合や、ユーザーがこれをオーバーライドした場合は、異なる解像度を返すことがあります。</p>\n    <p>機能を<em>必要</em>とするには、 <code>min</code>, <code>max</code>, <code>exact</code> (つまり <code>min == max</code>) の各キーワードが使用してください。次の例は 1280x720 の最小解像度を要求します。</p>\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">min</span><span class=\"token operator\">:</span> <span class=\"token number\">1280</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">min</span><span class=\"token operator\">:</span> <span class=\"token number\">720</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n    <p>この解像度以上のカメラがない場合、返却されたプロミスは <code>OverconstrainedError</code> として拒否され、ユーザーには通知されません。</p>\n    <p>動作に違いが発生する理由は、 <code>min</code>, <code>max</code>, <code>exact</code> の各キーワードが本質的に必須であるためです。それに対して <code>ideal</code> と呼ばれるプレーンな値とキーワードはそうではありません。より充実したサンプルを示します。</p>\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">min</span><span class=\"token operator\">:</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ideal</span><span class=\"token operator\">:</span> <span class=\"token number\">1280</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">max</span><span class=\"token operator\">:</span> <span class=\"token number\">1920</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">min</span><span class=\"token operator\">:</span> <span class=\"token number\">576</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ideal</span><span class=\"token operator\">:</span> <span class=\"token number\">720</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">max</span><span class=\"token operator\">:</span> <span class=\"token number\">1080</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n    <p><code>ideal</code> の値は、使用された場合は重みをもち、つまりブラウザーは ideal の値からみた<a href=\"https://w3c.github.io/mediacapture-main/#dfn-fitness-distance\" class=\"external\" rel=\" noopener\">最適距離</a>が最小になるような設定 (および、複数ある場合はカメラ) を見つけようとすることを意味します。</p>\n    <p>プレインの値は本質的に ideal ですので、これは上記の解像度の例を以下のように書くこともできることを意味します。</p>\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">ideal</span><span class=\"token operator\">:</span> <span class=\"token number\">1280</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">ideal</span><span class=\"token operator\">:</span> <span class=\"token number\">720</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n    <p>すべての constraint が数字とは限りません。例えば、次の例はリアカメラよりもフロントカメラを (利用できるなら) を選好します。</p>\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">facingMode</span><span class=\"token operator\">:</span> <span class=\"token string\">\"user\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n</code></pre></div>\n    <p>リアカメラが<em>必要</em>であれば、次のようにします。</p>\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">facingMode</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">exact</span><span class=\"token operator\">:</span> <span class=\"token string\">\"environment\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n</code></pre></div>\n    <p>他の数値以外の制約として、 <code>deviceId</code> の制約があります。 <code>deviceId</code> が <a href=\"/ja/docs/Web/API/MediaDevices/enumerateDevices\"><code>mediaDevices.enumerateDevices()</code></a> から分かっているのであれば、これを使用して特定の機器を要求することができます。</p>\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">deviceId</span><span class=\"token operator\">:</span> myPreferredCameraDeviceId <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n</code></pre></div>\n    <p>上記のものは要求されたカメラを返しますが、特定したカメラが利用できない場合は別なカメラを返します。また、特定のカメラが<em>必要</em>なのであれば、以下のようにすることができます。</p>\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">deviceId</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">exact</span><span class=\"token operator\">:</span> myExactCameraOrBustDeviceId <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n</code></pre></div>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"返値","title":"返値","isH3":true,"content":"<p>要求されたメディアが正しく取得できたときに <a href=\"/ja/docs/Web/API/MediaStream\"><code>MediaStream</code></a> を受け取るハンドラーを示す <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> を返します。</p>"}},{"type":"prose","value":{"id":"例外","title":"例外","isH3":true,"content":"<dl>\n  <dt id=\"aborterror\"><code>AbortError</code> <a href=\"/ja/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>ユーザーとオペレーティングシステムの両方がハードウェア機器へのアクセスを許可し、<code>NotReadableError</code> <a href=\"/ja/docs/Web/API/DOMException\"><code>DOMException</code></a> を引き起こすようなハードウェアの問題は発生していませんが、機器を使用できない何らかの問題が発生した場合に発生します。</p>\n  </dd>\n  <dt id=\"notallowederror\"><code>NotAllowedError</code> <a href=\"/ja/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>要求されたソース機器の 1 つ以上が現時点で使用できない場合に発生します。これは、閲覧コンテキストが安全でない場合（つまり、ページが HTTPS ではなく HTTP を使って読み込まれた場合）に発生します。また、ユーザーが現在の閲覧インスタンスに機器へのアクセスを許可しないように指定している場合、ユーザーが現在のセッションへのアクセスを拒否している場合、またはユーザーがユーザーメディア機器へのすべてのアクセスをグローバルに拒否している場合にも発生します。<a href=\"/ja/docs/Web/HTTP/Feature_Policy\">機能ポリシー</a>によるメディア権限の管理に対応しているブラウザーでは、機能ポリシーが入力ソースへのアクセスを許可するように設定されていない場合、このエラーが返されます。</p>\n    <div class=\"notecard note\" id=\"sect4\">\n      <p><strong>Note:</strong> 古いバージョンの仕様では、この代わりに <code>SecurityError</code> を使っていました。 <code>SecurityError</code> は新しい意味を持つようになりました。</p>\n    </div>\n  </dd>\n  <dt id=\"notfounderror\"><code>NotFoundError</code> <a href=\"/ja/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>constraint で指定された機能を満たすメディアトラックの種類が見つからない場合に発生します。</p>\n  </dd>\n  <dt id=\"notreadableerror\"><code>NotReadableError</code> <a href=\"/ja/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>ユーザーが一致する機器の使用を許可したにもかかわらず、オペレーティングシステム、ブラウザー、またウェブページレベルでハードウェアエラーが発生し、機器にアクセスできない場合に発生します。</p>\n  </dd>\n  <dt id=\"overconstrainederror\"><code>OverconstrainedError</code> <a href=\"/ja/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>指定された制約の結果、要求された条件を満たす機器の候補がない場合に発生します。このエラーは <code>OverconstrainedError</code> 型のオブジェクトで、満たすことが不可能だった制約の名前を文字列値として持つ <code>constraint</code> プロパティと、問題を説明する人間が読める文字列を含む <code>message</code> プロパティを持っています。</p>\n    <div class=\"notecard note\" id=\"sect5\">\n      <p><strong>Note:</strong> このエラーは、ユーザーが下位機器の使用許可をまだ与えていない場合でも発生するため、フィンガープリントの表面として使用される可能性があります。</p>\n    </div>\n  </dd>\n  <dt id=\"securityerror\"><code>SecurityError</code> <a href=\"/ja/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p><code>getUserMedia()</code>が呼び出された <a href=\"/ja/docs/Web/API/Document\"><code>Document</code></a> において、ユーザーメディアの対応が無効な場合に発生します。ユーザーメディアの対応が有効になったり無効になったりする仕組みは、個々のユーザーエージェントに任されています。</p>\n  </dd>\n  <dt id=\"typeerror\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a></dt>\n  <dd>\n    <p>指定された制約のリストが空であるか、すべての制約が <code>false</code> に設定されている場合に発生します。これは、安全でないコンテキストで <code>getUserMedia()</code> を呼び出そうとした場合にも発生します。これは、<a href=\"/ja/docs/Web/API/Navigator/mediaDevices\"><code>navigator.mediaDevices</code></a> は安全でないコンテキストでは <code>undefined</code> であるからです。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"プライバシーとセキュリティ","title":"プライバシーとセキュリティ","isH3":false,"content":"<p>プライバシーに関わる重要な API として、 <code>getUserMedia()</code> の仕様は、ブラウザーが満たすべきプライバシーとセキュリティに関する広範な要件を規定しています。</p>\n<p><code>getUserMedia()</code> は強力な機能ですが、<a href=\"/ja/docs/Web/Security/Secure_Contexts\">安全なコンテキスト</a>でのみ使用できます。安全なコンテキストでは <code>navigator.mediaDevices</code> は <code>undefined</code> で、 <code>getUserMedia()</code> にアクセスすることができなくなります。安全なコンテキストとは、簡単に言うと、 HTTPS や <code>file:///</code> URL スキームを使って読み込まれたページ、あるいは <code>localhost</code> から読み込まれたページのことです。</p>\n<p>さらに、ユーザーの音声と動画の入力にアクセスするためには、常にユーザーの許可が必要です。有効なオリジンにおけるウィンドウの最上位の文書コンテキストのみが、 <code>getUserMedia()</code> を用いて権限をリクエストすることができます。ただし、最上位のコンテキストが該当する <a href=\"/ja/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code></a> に<a href=\"/ja/docs/Web/HTTP/Feature_Policy\">機能ポリシー</a>を用いてその権限を明示的に許可した場合は例外です。そうでなければ、ユーザーは入力機器を使用する許可を求められることすらありません。</p>\n<p>これらの要件や規則、コードが実行されているコンテキストにそれらがどのように反映されるか、そしてブラウザーがユーザーのプライバシーとセキュリティ問題をどのように管理するかについての詳細は、続きをお読みください。</p>"}},{"type":"prose","value":{"id":"ユーザーのプライバシー","title":"ユーザーのプライバシー","isH3":true,"content":"<p>プライバシーに関わる API として、<code>getUserMedia()</code> はユーザーへの通知と許可管理に関するとても具体的な要件に仕様で拘束されています。まず、<code>getUserMedia()</code>は、ウェブカメラやマイクのような入力を集めるメディアを開く前に、常にユーザーの許可を得なければなりません。ブラウザーはドメインごとに一度だけ許可機能を提供するかもしれませんが、少なくとも最初の一回は許可を求めなければなりませんし、ユーザが継続的な権限を選択する場合は、具体的に許可しなければなりません。</p>\n<p>同様に重要なのは、通知に関する規則です。ブラウザーは、カメラやマイクが使用されていることを示すインジケーターを、ハードウェアのインジケーター以上に表示することが義務付けられています。また、入力用機器の使用が許可されていることを示すインジケーターを、たとえその機器が現在アクティブに記録していない場合でも表示しなければなりません。</p>\n<p>例えば Firefox では、 URL バーに点滅する赤いアイコンが表示され、録画が進行中であることを示しています。権限が設定されているが、現在録画が行われていない場合は、アイコンがグレーになります。機器の物理的なライトは、現在録画がアクティブになっているかどうかを示すために使用されます。カメラをミュートしている場合（いわゆる「フェイスミュート」）、カメラのアクティビティライトが消灯し、ミュート終了後にカメラの使用を再開する許可を破棄せずに、カメラがアクティブに録画していないことを示します。</p>"}},{"type":"prose","value":{"id":"セキュリティ","title":"セキュリティ","isH3":true,"content":"<p><a href=\"/ja/docs/Glossary/User_agent\">ユーザーエージェント</a>のセキュリティ管理と制御が原因で、 <code>getUserMedia()</code> がセキュリティ関連のエラーを返す可能性はいくつかあります。</p>\n<div class=\"notecard note\" id=\"sect6\">\n  <p><strong>Note:</strong> <code>getUserMedia()</code> のセキュリティモデルはまだいくらか流動的です。元々設計されていたセキュリティの仕組みは機能ポリシーに置き換えられつつあるため、様々なブラウザが異なる仕組みを用いて、異なるレベルのセキュリティサポートを提供しています。コードができるだけ広い範囲で互換性があることを確認するために、さまざまな機器やブラウザーで慎重にテストする必要があります。</p>\n</div>\n<h4 id=\"機能ポリシー\">機能ポリシー</h4>\n<p>\n  <a href=\"/ja/docs/Web/HTTP/Feature_Policy\">機能ポリシー</a>は <a href=\"/ja/docs/Glossary/HTTP\">HTTP</a> のセキュリティ管理機能で、ブラウザーへの導入が進んでおり、多くのブラウザーがある程度対応しています（Firefox のように、既定で有効のものばかりとは限りませんが）。 <code>getUserMedia()</code> は、機能ポリシーの使用を必要とするメソッドの一つであり、コードはこれに対処するために準備される必要があります。\n  例えば、<code>getUserMedia()</code> を利用する <a href=\"/ja/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code></a> には <a href=\"/ja/docs/Web/HTML/Element/iframe#attr-allow\"><code>allow</code></a> 属性が必要になるかもしれませんし、 <code>getUserMedia()</code> を利用するページでは最終的に <a href=\"/ja/docs/Web/HTTP/Headers/Feature-Policy\"><code>Feature-Policy</code></a> ヘッダーの提供が必要になるはずです。\n</p>\n<p><code>getUserMedia()</code> に適用される権限は <code>camera</code> と <code>microphone</code> の 2 つです。</p>\n<p>例えば、 HTTP ヘッダーにこの行があると、文書と同じオリジンから読み込まれる埋め込み <a href=\"/ja/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code></a> 要素がカメラを使用できるようになります。</p>\n<pre class=\"notranslate\">Feature-Policy: camera 'self'\n</pre>\n<p>これは、現在のオリジンと特定のオリジン <code>https://developer.mozilla.org</code> のマイクへのアクセスを要求します。</p>\n<pre class=\"notranslate\">Feature-Policy: microphone 'self' https://developer.mozilla.org\n</pre>\n<p>もし <code>getUserMedia()</code> を <code>&lt;iframe&gt;</code> 内で使っているなら、そのフレームだけの許可を求めることができ、これはより一般的な許可を求めるよりも明らかに安全です。ここでは、カメラとマイクの両方を使用する機能が必要であることを示しています。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://mycode.example.net/etc<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">allow</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>camera;microphone<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>仕組みについて学ぶには、<a href=\"/ja/docs/Web/HTTP/Feature_Policy/Using_Feature_Policy\">機能ポリシーの使い方</a>のガイドを読んでください。</p>\n<h4 id=\"暗号化ベースのセキュリティ\">暗号化ベースのセキュリティ</h4>\n<p><code>getUserMedia()</code> メソッドは<a href=\"/ja/docs/Web/Security/Secure_Contexts\">安全なコンテキスト</a>においてのみ利用可能です。安全なコンテキストとは、ブラウザーが HTTPS/TLS を使って安全に読み込まれた文書を含んでいると合理的に確信できるもので、安全でないコンテキストにさらされることは限定されています。文書が安全なコンテキストで読み込まれなかった場合、 <a href=\"/ja/docs/Web/API/Navigator/mediaDevices\"><code>navigator.mediaDevices</code></a> プロパティは <code>undefined</code> となり、 <code>getUserMedia()</code> へのアクセスが不可能になります。</p>\n<p>この状態で <code>getUserMedia()</code> にアクセスしようとすると <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> が発生します。</p>\n<h4 id=\"文書ソースセキュリティ\">文書ソースセキュリティ</h4>\n<p><code>getUserMedia()</code> は、予期せず使用された場合やセキュリティが慎重に管理されていない場合には、明らかにセキュリティ上の問題があるため、安全なコンテキストでのみ使用することができます。次に <code>getUserMedia()</code> を呼び出そうとするような、安全でない方法で文書を読み込む方法はいくつもあります。以下は <code>getUserMedia()</code> を呼び出すことが許されない状況の例です。</p>\n<ul>\n  <li>サンドボックス化された <a href=\"/ja/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code></a> 要素に読み込まれた文書は、 <code>&lt;iframe&gt;</code> の <a href=\"/ja/docs/Web/HTML/Element/iframe#attr-sandbox\"><code>sandbox</code></a> 属性が <code>allow-same-origin</code> に設定されていなければ <code>getUserMedia()</code> を呼び出すことができません。</li>\n  <li>オリジンを持たない <code>data://</code> や <code>blob://</code> の URL を使って読み込まれた文書（例えば、これらの URL のいずれかがユーザーによってアドレスバー入力された場合）は、 <code>getUserMedia()</code> を呼び出すことができません。 JavaScript のコードから読み込まれたこれらの種類の URL は、スクリプトの権限を継承します。</li>\n  <li>その他、 <a href=\"/ja/docs/Web/HTML/Element/iframe#attr-srcdoc\"><code>srcdoc</code></a> 属性でフレームの内容を指定している場合など、オリジンが存在しない場合。</li>\n</ul>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":""}},{"type":"prose","value":{"id":"幅と高さ","title":"幅と高さ","isH3":true,"content":"<p>この例ではカメラの解像度の設定を与えて、結果の <a href=\"/ja/docs/Web/API/MediaStream\"><code>MediaStream</code></a> オブジェクトを video 要素に割り当てます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Prefer camera resolution nearest to 1280x720.</span>\n<span class=\"token keyword\">var</span> constraints <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token number\">1280</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">720</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nnavigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span>constraints<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mediaStream</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> video <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'video'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  video<span class=\"token punctuation\">.</span>srcObject <span class=\"token operator\">=</span> mediaStream<span class=\"token punctuation\">;</span>\n  video<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onloadedmetadata</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    video<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// always check for errors at the end.</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"古いブラウザーでの新しい_api_の使用","title":"古いブラウザーでの新しい API の使用","isH3":true,"content":"<p>古いブラウザーに対処するためのポリフィルで <code>navigator.mediaDevices.getUserMedia()</code> を使用する例です。このポリフィルは、制約の構文におけるレガシーの違いを修正しないので、制約がブラウザー間でうまく機能しないことを意味することに注意してください。代わりに、制約を処理する <a href=\"https://github.com/webrtc/adapter\" class=\"external\" rel=\" noopener\">adapter.js</a> のポリフィルを使用することをお勧めします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Older browsers might not implement mediaDevices at all, so we set an empty object first</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>navigator<span class=\"token punctuation\">.</span>mediaDevices <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  navigator<span class=\"token punctuation\">.</span>mediaDevices <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Some browsers partially implement mediaDevices. We can't just assign an object</span>\n<span class=\"token comment\">// with getUserMedia as it would overwrite existing properties.</span>\n<span class=\"token comment\">// Here, we will just add the getUserMedia property if it's missing.</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span>getUserMedia <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getUserMedia</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">constraints</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// First get ahold of the legacy getUserMedia, if present</span>\n    <span class=\"token keyword\">var</span> getUserMedia <span class=\"token operator\">=</span> navigator<span class=\"token punctuation\">.</span>webkitGetUserMedia <span class=\"token operator\">||</span> navigator<span class=\"token punctuation\">.</span>mozGetUserMedia<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Some browsers just don't implement it - return a rejected promise with an error</span>\n    <span class=\"token comment\">// to keep a consistent interface</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>getUserMedia<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'getUserMedia is not implemented in this browser'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Otherwise, wrap the call to the old navigator.getUserMedia with a Promise</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>navigator<span class=\"token punctuation\">,</span> constraints<span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nnavigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">stream</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> video <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'video'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Older browsers may not have srcObject</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"srcObject\"</span> <span class=\"token keyword\">in</span> video<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    video<span class=\"token punctuation\">.</span>srcObject <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Avoid using this in new browsers, as it is going away.</span>\n    video<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  video<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onloadedmetadata</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    video<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"フレームレート","title":"フレームレート","isH3":true,"content":"<p>帯域幅に制限のある WebRTC 通信のようなケースでは、低フレームレートが望ましいかもしれません。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> constraints <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">frameRate</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">ideal</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">max</span><span class=\"token operator\">:</span> <span class=\"token number\">15</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"フロントカメラとバックカメラ","title":"フロントカメラとバックカメラ","isH3":true,"content":"<p>携帯電話での例です。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> front <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flip-button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> front <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>front<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> constraints <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">facingMode</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>front<span class=\"token operator\">?</span> <span class=\"token string\">\"user\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"environment\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"仕様書","id":"仕様書","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/mediacapture-main/#dom-mediadevices-getusermedia","title":"Media Capture and Streams"}],"query":"api.MediaDevices.getUserMedia"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"query":"api.MediaDevices.getUserMedia","dataURL":"/ja/docs/Web/API/MediaDevices/getUserMedia/bcd.json"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li>より古い <a href=\"/ja/docs/Web/API/Navigator/getUserMedia\"><code>navigator.getUserMedia()</code></a> API</li>\n  <li><a href=\"/ja/docs/Web/API/MediaDevices/enumerateDevices\"><code>mediaDevices.enumerateDevices()</code></a>:利用可能なメディア機器を列挙</li>\n  <li><a href=\"/ja/docs/Web/API/WebRTC_API\">WebRTC API</a></li>\n  <li><a href=\"/ja/docs/Web/API/Media_Capture_and_Streams_API\">メディアキャプチャとストリーム API （メディアストリーム）</a></li>\n  <li><a href=\"/ja/docs/Web/API/Screen_Capture_API\">画面キャプチャ API</a>: 画面の内容を <a href=\"/ja/docs/Web/API/MediaStream\"><code>MediaStream</code></a> としてキャプチャ</li>\n  <li><a href=\"/ja/docs/Web/API/MediaDevices/getDisplayMedia\"><code>mediaDevices.getDisplayMedia()</code></a>: 画面の内容を含むストリームの取得</li>\n  <li><a href=\"/en-US/docs/Web/API/Media_Capture_and_Streams_API/Taking_still_photos\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">ウェブカメラでの写真撮影 (en-US)</a>: 動画ではなく静止画を撮るために <code>getUserMedia()</code> を使用するチュートリアル</li>\n</ul>"}}],"toc":[{"text":"構文","id":"構文"},{"text":"プライバシーとセキュリティ","id":"プライバシーとセキュリティ"},{"text":"例","id":"例"},{"text":"仕様書","id":"仕様書"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"MediaDevices.getUserMedia() メソッドは、要求された種類のメディアを含むトラックを持つ MediaStream を生成するメディア入力を使用する許可をユーザーに求めます。","popularity":0.0012,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"MediaDevices.getUserMedia()","locale":"en-US","native":"English (US)"},{"title":"MediaDevices.getUserMedia()","locale":"es","native":"Español"},{"title":"MediaDevices.getUserMedia()","locale":"fr","native":"Français"},{"title":"MediaDevices.getUserMedia()","locale":"ko","native":"한국어"},{"title":"MediaDevices.getUserMedia()","locale":"ru","native":"Русский"},{"title":"MediaDevices.getUserMedia()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/mediadevices/getusermedia","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/mediadevices/getusermedia/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/MediaDevices","title":"MediaDevices"},{"uri":"/ja/docs/Web/API/MediaDevices/getUserMedia","title":"MediaDevices.getUserMedia()"}],"pageTitle":"MediaDevices.getUserMedia() - Web API | MDN","noIndexing":false}}