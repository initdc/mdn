{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"サーバー送信イベントの使用","mdn_url":"/ja/docs/Web/API/Server-sent_events/Using_server-sent_events","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/Server-sent_events\">Server-sent events</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>ガイド</summary><ol><li><a href=\"/ja/docs/Web/API/Server-sent_events/Using_server-sent_events\">Using server-sent events</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>インターフェイス</summary><ol><li><a href=\"/ja/docs/Web/API/EventSource\"><code>EventSource</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/ja/docs/Web/API/Server-sent_events\">サーバー送信イベント</a> (Server-Sent Events) を使用するウェブアプリケーションの開発は簡単です。サーバー上でフロントエンドへイベントを流すために必要になるコードはわずかですが、クライアント側のコードは<a href=\"/ja/docs/Web/API/WebSockets_API\">ウェブソケット</a>で入ってくるイベントを扱う部分とほぼ同じ動作をします。これは単方向の接続ですので、クライアントからサーバーへイベントを送信することはできません。</p>"}},{"type":"prose","value":{"id":"サーバからのイベントの受信","title":"サーバからのイベントの受信","isH3":false,"content":"<p>サーバー送信イベント API は <a href=\"/ja/docs/Web/API/EventSource\"><code>EventSource</code></a> インターフェイスに含まれています。イベントを受け取るためにサーバへの接続を開始するには、新たな <code>EventSource</code> オブジェクトを作成し、イベントを生成するスクリプトの URI を指定します。例を挙げます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> evtSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ssedemo.php\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>イベントを生成するスクリプトが別のオリジンに存在する場合は、 新しい <code>EventSource</code> オブジェクトを作成し、 URI とオプション辞書の両方を指定する必要があります。例えば、クライアントスクリプトが <code>example.com</code> にある場合は次のようになります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> evtSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"//api.example.com/ssedemo.php\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">withCredentials</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>イベントソースのインスタンスを起動したら、 <a href=\"/ja/docs/Web/API/EventSource/message_event\" title=\"message\"><code>message</code></a> イベントのハンドラーを取り付けて、サーバーからのメッセージを待ち受けすることができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>evtSource<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"li\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> eventList <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  newElement<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">\"message: \"</span> <span class=\"token operator\">+</span> event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n  eventList<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>newElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>このコードは入力メッセージ（すなわち <code>event</code> フィールドを持たない、サーバーからの通知）を受信して、メッセージのテキストを文書の HTML にあるリストへ追加します。</p>\n<p><code>addEventListener()</code> を使用してイベントを待ち受けすることもできます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>evtSource<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ping\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"li\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> eventList <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> time <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">;</span>\n  newElement<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">\"ping at \"</span> <span class=\"token operator\">+</span> time<span class=\"token punctuation\">;</span>\n  eventList<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>newElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>前のコードと似ていますが、<code>event</code> フィールドに \"ping\" が設定されたメッセージがサーバーから送られたときに、自動的に呼び出されることが異なります。こちらは <code>data</code> フィールドの JSON を解釈して、情報を出力します。</p>\n<div class=\"notecard warning\" id=\"sect1\">\n  <p><strong>Warning:</strong> <strong>HTTP/2 上で使用されていない</strong>場合、 SSE は開くことができる接続の最大数に制限を受けます。この制限は<em>ブラウザー単位</em>で設定されており、非常に小さい数 (6) に設定されているため、複数のタブを開くと特に痛みを伴う場合があります。この問題は、 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=275955\" class=\"external\" rel=\" noopener\">Chrome</a> と <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=906896\" class=\"external\" rel=\" noopener\">Firefox</a> で「修正予定なし」と示されています。この制限はブラウザー + ドメインごとに設定されており、<code>www.example1.com</code> への SSE 接続をすべてのタブで 6 つ、 <code>www.example2.com</code> への SSE 接続をさらに 6 つ開くことができることを意味します（<a href=\"https://stackoverflow.com/questions/5195452/websockets-vs-server-sent-events-eventsource/5326159\" class=\"external\" rel=\" noopener\">Stackoverflow</a> によれば）。 HTTP/2 を使用する場合、同時に使用することができる <em>HTTP ストリーム</em>の最大数は、サーバーとクライアントの間で交渉が行われます（既定値は 100 です）。</p>\n</div>"}},{"type":"prose","value":{"id":"サーバからのイベントの送信","title":"サーバからのイベントの送信","isH3":false,"content":"<p>イベントを送信するサーバー側のスクリプトは、 MIME タイプ <code>text/event-stream</code> で応答する必要があります。個々の通知は、 2 つの改行で終わるテキストのブロックとして送信されます。イベントストリームの形式について、詳しくは<a href=\"#%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%82%B9%E3%83%88%E3%83%AA%E3%83%BC%E3%83%A0%E5%BD%A2%E5%BC%8F\">イベントストリーム形式</a>をご覧ください。</p>\n<p>この例で使用している <a href=\"/ja/docs/Glossary/PHP\">PHP</a> は次の通りです。</p>\n<div class=\"code-example\"><pre class=\"brush: php notranslate\"><code><span class=\"token function\">date_default_timezone_set</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"America/New_York\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Cache-Control: no-store\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Content-Type: text/event-stream\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$counter</span> <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// \"ping\" イベントを毎秒送信</span>\n\n  <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"event: ping\\n\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$curDate</span> <span class=\"token operator\">=</span> <span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DATE_ISO8601</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'data: {\"time\": \"'</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$curDate</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'\"}'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"\\n\\n\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// シンプルなメッセージをランダムな間隔で送信</span>\n\n  <span class=\"token variable\">$counter</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$counter</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'data: This is a message at time '</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$curDate</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"\\n\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$counter</span> <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">ob_end_flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// クライアントが接続を中止したら（ページを閉じたら）ループから抜ける</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">connection_aborted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>\n  上記のコードは、イベント種別が \"ping\" のイベントを毎秒生成します。それぞれのイベントのデータは、 JSON オブジェクトで、イベントが生成された時刻を ISO 8601 形式のタイムスタンプで表します。またランダムな間隔で、単純なメッセージ（イベント種別なし）を送信します。\n  ループは接続状態にかかわらず実行し続けられますので、接続が閉じられたとき（例えばクライアントがページを閉じたとき）にループから脱出するためのチェックが含まれています。\n</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> この記事にあるコードを使用した完全な例が GitHub にあります。 <a href=\"https://github.com/mdn/dom-examples/tree/master/server-sent-events\" class=\"external\" rel=\" noopener\">Simple SSE demo using PHP</a> を参照してください。</p>\n</div>"}},{"type":"prose","value":{"id":"エラー処理","title":"エラー処理","isH3":false,"content":"<p>問題が発生した場合（ネットワークのタイムアウトや<a href=\"/ja/docs/Web/HTTP/CORS\">アクセス制御</a>に関する問題など）は、エラーイベントが生成されます。これをプログラムで処理するには、 <code>onerror</code> コールバックを <code>EventSource</code> に実装してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>evtSource<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"EventSource failed:\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"イベントストリームを閉じる","title":"イベントストリームを閉じる","isH3":false,"content":"<p>既定では、クライアントとサーバーの間の接続を閉じると、接続が再起動します。接続は <code>.close()</code> メソッドで終了します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>evtSource<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"イベントストリームの形式","title":"イベントストリームの形式","isH3":false,"content":"<p>イベントストリームは単純なテキストデータのストリームで、 <a href=\"/ja/docs/Glossary/UTF-8\">UTF-8</a> でエンコードされていなければなりません。イベントストリームのメッセージは、 2 つの改行文字で区切られます。行の先頭の文字がコロンであった場合はコメントとみなされ、無視されます。</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> コメント行を使用して、接続がタイムアウトになることを防ぐことができます。サーバーは接続を維持するために、定期的にコメントを送信することがあります。</p>\n</div>\n<p>それぞれのメッセージは、そのメッセージのフィールドを列挙した 1 行以上のテキストで構成されています。各フィールドは、フィールド名、コロン、そのフィールドの値のテキストデータで表現されます。</p>"}},{"type":"prose","value":{"id":"フィールド","title":"フィールド","isH3":true,"content":"<p>受信した各メッセージには、以下のフィールドの組み合わせが、 1 行 1 つで現れます。</p>\n<dl>\n  <dt id=\"event\"><code>event</code></dt>\n  <dd>\n    <p>記述されるイベントの種別を識別する文字列です。指定された場合、イベントはブラウザー内で、指定されたイベント名のイベントリスナーへ送られます。ウェブサイトのソースコードで名前付きイベントを待ち受けするには <code>addEventListener()</code> を使用してください。メッセージにイベント名が指定されなかった場合は、 <code>onmessage</code> ハンドラーが呼び出されます。</p>\n  </dd>\n  <dt id=\"data\"><code>data</code></dt>\n  <dd>\n    <p>メッセージのデータフィールドです。 <code>EventSource</code> が <code>data:</code> で始まる、複数の連続した行を受け取ったときは、<a href=\"https://html.spec.whatwg.org/multipage/#dispatchMessage\" class=\"external\" rel=\" noopener\">それらを連結して</a>各項目の間に改行文字を挿入します。末尾の改行は取り除かれます。</p>\n  </dd>\n  <dt id=\"id\"><code>id</code></dt>\n  <dd>\n    <p><a href=\"/en-US/docs/Web/API/EventSource\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">EventSource (en-US)</a> オブジェクトの最後のイベント ID の値に設定するイベント ID です。</p>\n  </dd>\n  <dt id=\"retry\"><code>retry</code></dt>\n  <dd>\n    <p>再接続時間です。サーバーへの接続が切れた場合、ブラウザーは指定した時間だけ待ってから再接続を試みます。これは整数値でなければならず、再接続時間をミリ秒単位で指定します。整数値以外が指定された場合は、このフィールドは無視されます。</p>\n  </dd>\n</dl>\n<p>他のフィールド名は、すべて無視されます。</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>Note:</strong> 行にコロンが含まれない場合は行全体がフィールド名とし、値は空文字列として扱います。</p>\n</div>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":true,"content":"<h4 id=\"データのみのメッセージ\">データのみのメッセージ</h4>\n<p>以下の例では、3 つのメッセージが送信されています。最初のメッセージはコロン文字から始まっているため、コメントです。前述したように、コメントはメッセージが定期的に送信されない可能性がある場合のキープアライブとして利用できます。</p>\n<p>2 番目のメッセージには data フィールドがあり、その値は \"some text\" です。 3 番目のメッセージは data フィールドで、値は \"another message\\nwith two lines\" です。値に改行文字があることに注意してください。</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token builtin class-name\">:</span> this is a <span class=\"token builtin class-name\">test</span> stream\n\ndata: some text\n\ndata: another message\ndata: with two lines\n</code></pre></div>\n<h4 id=\"名前付きイベント\">名前付きイベント</h4>\n<p>こちらの例では、名前付きイベントをいくつか送信しています。それぞれのイベントではイベント名が <code>event</code> フィールドで指定されており、また <code>data</code> フィールドではクライアントでの処理に必要なデータを含む、適切な JSON 文字列の値が指定されています。もちろん、 <code>data</code> フィールドには任意の文字列データを入れることができます。 JSON である必要はありません。</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>event: userconnect\ndata: <span class=\"token punctuation\">{</span><span class=\"token string\">\"username\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"bobby\"</span>, <span class=\"token string\">\"time\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"02:33:48\"</span><span class=\"token punctuation\">}</span>\n\nevent: usermessage\ndata: <span class=\"token punctuation\">{</span><span class=\"token string\">\"username\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"bobby\"</span>, <span class=\"token string\">\"time\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"02:34:11\"</span>, <span class=\"token string\">\"text\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Hi everyone.\"</span><span class=\"token punctuation\">}</span>\n\nevent: userdisconnect\ndata: <span class=\"token punctuation\">{</span><span class=\"token string\">\"username\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"bobby\"</span>, <span class=\"token string\">\"time\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"02:34:23\"</span><span class=\"token punctuation\">}</span>\n\nevent: usermessage\ndata: <span class=\"token punctuation\">{</span><span class=\"token string\">\"username\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"sean\"</span>, <span class=\"token string\">\"time\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"02:34:36\"</span>, <span class=\"token string\">\"text\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Bye, bobby.\"</span><span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"組み合わせ\">組み合わせ</h4>\n<p>名前なしのメッセージや種類の付いたイベントだけを使用しなければならない訳ではありません。これらを単一のイベントストリーム内で混用することができます。</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>event: userconnect\ndata: <span class=\"token punctuation\">{</span><span class=\"token string\">\"username\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"bobby\"</span>, <span class=\"token string\">\"time\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"02:33:48\"</span><span class=\"token punctuation\">}</span>\n\ndata: Here's a system message of some kind that will get used\ndata: to accomplish some task.\n\nevent: usermessage\ndata: <span class=\"token punctuation\">{</span><span class=\"token string\">\"username\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"bobby\"</span>, <span class=\"token string\">\"time\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"02:34:11\"</span>, <span class=\"token string\">\"text\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Hi everyone.\"</span><span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"query":"api.EventSource","dataURL":"/ja/docs/Web/API/Server-sent_events/Using_server-sent_events/bcd.json"}}],"toc":[{"text":"サーバからのイベントの受信","id":"サーバからのイベントの受信"},{"text":"サーバからのイベントの送信","id":"サーバからのイベントの送信"},{"text":"エラー処理","id":"エラー処理"},{"text":"イベントストリームを閉じる","id":"イベントストリームを閉じる"},{"text":"イベントストリームの形式","id":"イベントストリームの形式"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"}],"summary":"サーバー送信イベント (Server-Sent Events) を使用するウェブアプリケーションの開発は簡単です。サーバー上でフロントエンドへイベントを流すために必要になるコードはわずかですが、クライアント側のコードはウェブソケットで入ってくるイベントを扱う部分とほぼ同じ動作をします。これは単方向の接続ですので、クライアントからサーバーへイベントを送信することはできません。","popularity":0.0003,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using server-sent events","locale":"en-US","native":"English (US)"},{"title":"Utilizando eventos enviados por el servidor (server-sent event)","locale":"es","native":"Español"},{"title":"Utiliser les évènements envoyés par le serveur","locale":"fr","native":"Français"},{"title":"Server-Sent Events 사용하기","locale":"ko","native":"한국어"},{"title":"Using server-sent events","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Using server-sent events","locale":"ru","native":"Русский"},{"title":"使用服务器发送事件","locale":"zh-CN","native":"中文 (简体)"},{"title":"使用 server-sent 事件","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ja/web/api/server-sent_events/using_server-sent_events","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/server-sent_events/using_server-sent_events/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/Server-sent_events","title":"サーバー送信イベント"},{"uri":"/ja/docs/Web/API/Server-sent_events/Using_server-sent_events","title":"サーバー送信イベントの使用"}],"pageTitle":"サーバー送信イベントの使用 - Web API | MDN","noIndexing":false}}