{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"チャンネルメッセージングの使用","mdn_url":"/ja/docs/Web/API/Channel_Messaging_API/Using_channel_messaging","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/Channel_Messaging_API\">Channel Messaging API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>ガイド</summary><ol><li><a href=\"/ja/docs/Web/API/Channel_Messaging_API/Using_channel_messaging\">Using channel messaging</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>インターフェイス</summary><ol><li><a href=\"/ja/docs/Web/API/MessageChannel\"><code>MessageChannel</code></a></li><li><a href=\"/ja/docs/Web/API/MessagePort\"><code>MessagePort</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/ja/docs/Web/API/Channel_Messaging_API\">チャンネルメッセージング API</a> (Channel Messaging API) を使用すると、同じ文書に添付された異なる閲覧コンテキストで実行される 2 つの別々のスクリプト（2 つの IFrame、メイン文書と IFrame、<a href=\"/ja/docs/Web/API/SharedWorker\"><code>SharedWorker</code></a> を介した 2 つの文書など）で直接通信し、両端にポートを持つ双方向チャンネル（またはパイプ）を介して相互にメッセージをやり取りすることができます。</p>\n<p>この記事では、このテクノロジーを使用するための基本を探ります。</p><div class=\"notecard note\" id=\"sect1\">\n  <p><strong>注:</strong> この機能は <a href=\"/ja/docs/Web/API/Web_Workers_API\">Web Worker</a> 内で利用可能です</p>\n</div>"}},{"type":"prose","value":{"id":"用途","title":"用途","isH3":false,"content":"<p>チャンネルメッセージングは​​、ゲーム、アドレス帳、または音楽を個人用に選択したオーディオプレーヤーなど、IFrame を介して他のサイトの機能をメインインターフェイスに埋め込むソーシャルサイトがある場合に主に役立ちます。 これらが独立したユニットとして機能する場合は問題ありませんが、メインサイトと IFrame、または異なる IFrame との間のやり取りが必要な場合は困難になります。 例えば、メインサイトからアドレス帳に連絡先を追加したり、メインプロファイルにゲームのハイスコアを追加したり、オーディオプレーヤーからゲームに新しい BGM の選択肢を追加したりする場合はどうすればよいのでしょうか。 ウェブが使用するセキュリティモデルのため、このようなことは従来のウェブテクノロジーを使用したのでは、それほど簡単ではありません。 オリジンがお互いを信頼しているかどうか、そしてメッセージをどのように渡すのかについて考えなければなりません。</p>\n<p>一方、メッセージチャンネルは、異なる閲覧コンテキスト間でデータを受け渡すことを可能にする安全なチャンネルを提供することができます。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> 詳細情報とアイデアについては、仕様の<a href=\"https://html.spec.whatwg.org/multipage/comms.html#ports-as-the-basis-of-an-object-capability-model-on-the-web\" class=\"external\" rel=\" noopener\">ウェブ上のオブジェクト機能モデルの基礎としてのポート</a>（英語）のセクションが役に立つでしょう。</p>\n</div>"}},{"type":"prose","value":{"id":"簡単な例","title":"簡単な例","isH3":false,"content":"<p>はじめに、Github でいくつかのデモを公開しました。 最初に、ページと埋め込まれた <a href=\"/ja/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code></a> の間の非常に単純な単一メッセージ転送を示す、<a href=\"https://github.com/mdn/dom-examples/tree/master/channel-messaging-basic\" class=\"external\" rel=\" noopener\">チャンネルメッセージングの基本的なデモ</a>をチェックしてください（<a href=\"https://mdn.github.io/dom-examples/channel-messaging-basic/\" class=\"external\" rel=\" noopener\">ライブでも実行してください</a>）。</p>\n<p>次に、メインページと IFrame の間で複数のメッセージを送信できる、もう少し複雑な設定を示す、<a href=\"https://github.com/mdn/dom-examples/tree/master/channel-messaging-multimessage\" class=\"external\" rel=\" noopener\">マルチメッセージデモ</a>を見てください（<a href=\"https://mdn.github.io/dom-examples/channel-messaging-multimessage/\" class=\"external\" rel=\" noopener\">ライブで実行</a>）。</p>\n<p>ここでは、マルチメッセージデモに焦点を当てます。次のような感じです。</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/Channel_Messaging_API/Using_channel_messaging/channel-messaging-demo.png\" alt=\"\" width=\"690\" height=\"744\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"チャンネルの作成","title":"チャンネルの作成","isH3":false,"content":"<p>デモのメインページには、 <a href=\"/ja/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code></a> に送信するメッセージを入力するためのテキスト入力を含む単純なフォームがあります。 また、 <a href=\"/ja/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code></a> から返される確認メッセージを表示するために後で使用する段落もあります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> input <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message-input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> output <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message-output'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> button <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> iframe <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'iframe'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> channel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MessageChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> port1 <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">.</span>port1<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// iframe が読み込まれるのを待ちます</span>\niframe<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span> onLoad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">onLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ボタンのクリックを待ち受けする</span>\n  button<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> onClick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// port1 でメッセージを待ち受けする</span>\n  port1<span class=\"token punctuation\">.</span>onmessage <span class=\"token operator\">=</span> onMessage<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// port2 を iframe に移管する</span>\n  iframe<span class=\"token punctuation\">.</span>contentWindow<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'init'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>channel<span class=\"token punctuation\">.</span>port2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ボタンがクリックされたときに port1 にメッセージを投稿する</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  port1<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// port1 で受信したメッセージを処理する</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">onMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  output<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n  input<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>まず <a href=\"/ja/docs/Web/API/MessageChannel/MessageChannel\" title=\"MessageChannel()\"><code>MessageChannel()</code></a> コンストラクターを使用して新しいメッセージチャンネルを作成します。</p>\n<p>IFrame が読み込まれたら、ボタン用の <code>onclick</code> ハンドラーと <a href=\"/ja/docs/Web/API/MessageChannel/port1\"><code>MessageChannel.port1</code></a> 用の <code>onmessage</code> ハンドラーを登録します。 最後に、 <a href=\"/ja/docs/Web/API/MessageChannel/port2\"><code>MessageChannel.port2</code></a> を<a href=\"/ja/docs/Web/API/Window/postMessage\"><code>window.postMessage</code></a> メソッドで IFrame に移管します。</p>\n<p><code>iframe.contentWindow.postMessage</code> の行の機能をもう少し詳しく調べてみましょう。 これは次の 3 つの引数を取ります。</p>\n<ul>\n  <li>送信するメッセージ。 この初期ポート移管では、このメッセージは空の文字列になる可能性がありますが、この例では <code>'init'</code> に設定しています。</li>\n  <li>メッセージの送信先のオリジン。 <code>*</code> は「任意のオリジン」を意味します。</li>\n  <li>所有権を受信側の閲覧コンテキストに移管するオブジェクト。 この場合、<a href=\"/ja/docs/Web/API/MessageChannel/port2\"><code>MessageChannel.port2</code></a> を IFrame に移管しているので、メインページとの通信に使用できます。</li>\n</ul>\n<p>ボタンをクリックすると、フォームを通常のように送信せず、テキスト入力に入力された値は <a href=\"/ja/docs/Web/API/MessageChannel\"><code>MessageChannel</code></a> を介して IFrame に送信します。</p>"}},{"type":"prose","value":{"id":"iframe_でポートとメッセージの受信","title":"IFrame でポートとメッセージの受信","isH3":false,"content":"<p>IFrame では、次の JavaScript があります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> port2<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 初期ポート移管メッセージを待ち受けする</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> initPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 移管されたポートを設定する</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">initPort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  port2 <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>ports<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  port2<span class=\"token punctuation\">.</span>onmessage <span class=\"token operator\">=</span> onMessage<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// port2 で受信したメッセージを処理する</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">onMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> listItem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  listItem<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n  list<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>listItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  port2<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Message received by IFrame: \"'</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>data <span class=\"token operator\">+</span> <span class=\"token string\">'\"'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>初期メッセージを <a href=\"/ja/docs/Web/API/Window/postMessage\"><code>window.postMessage</code></a> メソッドを介してメインページから受信すると、<code>initPort</code> 関数が実行されます。 これは移管されたポートを保存し、メッセージが <a href=\"/ja/docs/Web/API/MessageChannel\"><code>MessageChannel</code></a> を通過するたびに呼び出される <code>onmessage</code> ハンドラーを登録します。</p>\n<p>メインページからメッセージを受信したら、リスト項目を作成し、それを順序なしリストに挿入し、リスト項目の <a href=\"/ja/docs/Web/API/Node/textContent\" title=\"textContent\"><code>textContent</code></a> をイベントの <code>data</code> 属性と同じ値に設定します（これは実際のメッセージを含みます）。</p>\n<p>次に、最初に IFrame に移管された <a href=\"/ja/docs/Web/API/MessageChannel/port2\"><code>MessageChannel.port2</code></a> で <a href=\"/ja/docs/Web/API/MessagePort/postMessage\"><code>MessagePort.postMessage</code></a> を呼び出して、確認メッセージをメッセージチャンネル経由でメインページに投稿します。</p>"}},{"type":"prose","value":{"id":"メインページで確認を受信する","title":"メインページで確認を受信する","isH3":false,"content":"<p>メインページに戻って、 onmessage ハンドラー関数を見てみましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// port1 で受信したメッセージを処理する</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">onMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  output<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n  input<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>元のメッセージが正常に受信されたことを確認するメッセージが IFrame から返されると、これは単に確認を段落に出力し、テキスト入力を空にして次のメッセージの送信の準備をします。</p>"}},{"type":"specifications","value":{"title":"仕様書","id":"仕様書","isH3":true,"specifications":[{"bcdSpecificationURL":"https://html.spec.whatwg.org/multipage/web-messaging.html#message-channels","title":"HTML Standard"}],"query":"api.MessageChannel"}},{"type":"prose","value":{"id":"ブラウザーの互換性","title":"ブラウザーの互換性","isH3":false,"content":""}},{"type":"browser_compatibility","value":{"title":"MessageChannel","id":"messagechannel","isH3":true,"query":"api.MessageChannel","dataURL":"/ja/docs/Web/API/Channel_Messaging_API/Using_channel_messaging/bcd.json"}},{"type":"browser_compatibility","value":{"title":"MessagePort","id":"messageport","isH3":true,"query":"api.MessagePort","dataURL":"/ja/docs/Web/API/Channel_Messaging_API/Using_channel_messaging/bcd-2.json"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/API/Channel_Messaging_API\">チャンネルメッセージング API</a></li>\n  <li><a href=\"/ja/docs/Web/API/Web_Workers_API\">ウェブワーカー API</a></li>\n  <li><a href=\"/ja/docs/Web/API/Broadcast_Channel_API\">ブロードキャストチャンネル API</a></li>\n</ul>"}}],"toc":[{"text":"用途","id":"用途"},{"text":"簡単な例","id":"簡単な例"},{"text":"チャンネルの作成","id":"チャンネルの作成"},{"text":"IFrame でポートとメッセージの受信","id":"iframe_でポートとメッセージの受信"},{"text":"メインページで確認を受信する","id":"メインページで確認を受信する"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"チャンネルメッセージング API (Channel Messaging API) を使用すると、同じ文書に添付された異なる閲覧コンテキストで実行される 2 つの別々のスクリプト（2 つの IFrame、メイン文書と IFrame、SharedWorker を介した 2 つの文書など）で直接通信し、両端にポートを持つ双方向チャンネル（またはパイプ）を介して相互にメッセージをやり取りすることができます。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using channel messaging","locale":"en-US","native":"English (US)"},{"title":"Using channel messaging","locale":"ko","native":"한국어"},{"title":"使用 channel messaging","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/channel_messaging_api/using_channel_messaging","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/channel_messaging_api/using_channel_messaging/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/Channel_Messaging_API","title":"チャンネルメッセージング API"},{"uri":"/ja/docs/Web/API/Channel_Messaging_API/Using_channel_messaging","title":"チャンネルメッセージングの使用"}],"pageTitle":"チャンネルメッセージングの使用 - Web API | MDN","noIndexing":false}}