{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"TextEncoder.encodeInto()","mdn_url":"/ja/docs/Web/API/TextEncoder/encodeInto","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/Encoding_API\">Encoding API</a></strong></li><li><strong><a href=\"/ja/docs/Web/API/TextEncoder\"><code>TextEncoder</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>コンストラクター</summary><ol><li><a href=\"/ja/docs/Web/API/TextEncoder/TextEncoder\"><code>TextEncoder()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>プロパティ</summary><ol><li><a href=\"/ja/docs/Web/API/TextEncoder/encoding\"><code>encoding</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>メソッド</summary><ol><li><a href=\"/ja/docs/Web/API/TextEncoder/encode\"><code>encode()</code></a></li><li><em><code>encodeInto()</code></em></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Encoding API に関連するページ</summary><ol><li><a href=\"/ja/docs/Web/API/TextDecoder\"><code>TextDecoder</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/TextDecoderStream\"><code>TextDecoderStream</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/TextEncoderStream\"><code>TextEncoderStream</code> <small>(en-US)</small></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard experimental\" id=\"sect1\"><p><strong>Experimental:</strong> <strong>これは<a href=\"/ja/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">実験的な機能</a>です。</strong><br>本番で使用する前に<a href=\"#browser_compatibility\">ブラウザー互換性一覧表</a>をチェックしてください。</p></div>\n<p><strong><code>TextEncoder.encodeInto()</code></strong> メソッドは、エンコードする文字列と、 UTF-8 エンコード後のテキスト格納先となる <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a> を受け取り、エンコードの進行状況を示す辞書オブジェクトを返します。これは古い <code>encode()</code> メソッドよりも潜在的に性能が高く、特にターゲットバッファーが Wasm ヒープへのビューである場合、より効果的です。</p>"}},{"type":"prose","value":{"id":"構文","title":"構文","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">encodeInto</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">,</span> uint8Array<span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"引数","title":"引数","isH3":true,"content":"<dl>\n  <dt id=\"string\"><code>string</code></dt>\n  <dd>\n    <p>エンコードするテキストが入った文字列です。</p>\n  </dd>\n  <dt id=\"uint8array\"><code>uint8Array</code></dt>\n  <dd>\n    <p><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a> オブジェクトのインスタンスで、結果の UTF-8 エンコードされたテキストが入ります。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"返値","title":"返値","isH3":true,"content":"<p>2 つのメンバーを持つオブジェクトです。</p>\n<dl>\n  <dt id=\"read\"><code>read</code></dt>\n  <dd>\n    <p>ソースから UTF-8 へ変換された、 UTF-16 単位のコードの数。これは、 <code>uint8Array</code> に十分なスペースがない場合、 <code>string.length</code> よりも小さくなる可能性があります。</p>\n  </dd>\n  <dt id=\"written\"><code>written</code></dt>\n  <dd>\n    <p>宛先の <code>Uint8Array</code> で変更されたバイト数。書き込まれたバイトは、完全な UTF-8 バイト列を形成することが保証されます。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"特定の位置にエンコード","title":"特定の位置にエンコード","isH3":false,"content":"<p><em>encoder</em>.encodeInto は常に配列の先頭に出力を行います。しかしながら、出力を特定の位置から開始できると便利なことがあります。これは <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray\">TypedArray.prototype.subarray()</a> で解決できます。ご覧ください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> encoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">encodeIntoAtPosition</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">string<span class=\"token punctuation\">,</span> u8array<span class=\"token punctuation\">,</span> position</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> encoder<span class=\"token punctuation\">.</span><span class=\"token function\">encodeInto</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">,</span> position <span class=\"token operator\">?</span> u8array<span class=\"token punctuation\">.</span><span class=\"token function\">subarray</span><span class=\"token punctuation\">(</span>position<span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> u8array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> u8array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">encodeIntoAtPosition</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> u8array<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> u8array<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0,0,104,101,108,108,111,0</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"バッファーの大きさ","title":"バッファーの大きさ","isH3":false,"content":"<p>JavaScript の文字列 <code>s</code> を変換するために、完全な変換に必要な出力領域は <code>s.length</code> バイトより小さくなることはなく、 <code>s.length * 3</code> バイトより大きくなることはありません。もし出力の割り当て（典型的には Wasm ヒープ内）が短時間であることが予想される場合、出力に <code>s.length * 3</code> バイトを割り当てることは理にかなっており、その場合、最初の変換の試行で文字列全体を変換することが保証されています。文字列は 3 バイトに展開されるいくつかの文字でパックされることになるので、 <code>s.length * 3</code> になることはまれであることに注意してください。長いテキストが <code>s.length * 2</code> バイトの長さを超えることはまずないでしょう。したがって、より楽観的なアプローチとしては、 <code>s.length * 2 + 5</code> バイトを割り当てて、楽観的な予測が間違っていたという稀な状況下で再割り当てを実行することでしょう。</p>\n<p>出力結果の寿命が長いと見込まれる場合、最小割り当てサイズ <code>roundUpToBucketSize(s.length)</code> と最大割り当てサイズ <code>s.length * 3</code> を計算し、（メモリー使用量と速度のトレードオフとして）選択した閾値 <code>t</code> を用意し、 <code>roundUpToBucketSize(s.length) + t &gt;= s.length * 3</code> なら、 <code>s.length * 3</code> に対して割り当てるといったことは理にかなっています。そうでない場合は、まず <code>roundUpToBucketSize(s.length)</code> を確保し、変換します。返値の辞書にある <code>read</code> アイテムが <code>s.length</code> であれば、変換は完了です。そうでない場合は、ターゲットバッファーを <code>written + (s.length - read) * 3</code> に再割り当てし、 <code>read</code> の位置から始まる <code>s</code> と <code>written</code> の位置から始まるターゲットバッファーのサブバッファーを取得して、残りを変換する。</p>\n<p>上記の <code>roundUpToBucketSize()</code> はアロケーターのバケットサイズに切り上げる関数です。たとえば、 Wasm のアロケーターが 2 のべき乗のバケットを使うことがわかっている場合、 <code>roundUpToBucketSize()</code> は引数が 2 のべき乗であればそれを返し、そうでなければ次の 2 のべき乗を返すようにします。 Wasm アロケーターの挙動が不明な場合は、 <code>roundUpToBucketSize()</code> を恒等関数にする必要があります。</p>\n<p>\n  アロケーターの挙動が不明な場合、最大で 2 回の再割り当てを行い、最初の再割り当てでは、<em>未変換の残りの</em>長さを 3 倍ではなく 2 倍にすることができます。\n  しかし、この場合、すでに<em>書き込まれた</em>バッファーの長さを 2 倍するような通常の実装は意味がありません。このような場合、 2 回目の再割り当てが発生すると、常に元の長さに 3 倍した長さと比較して割り当て回数が多くなってしまうからです。\n  上記のアドバイスは、ゼロ終端のためのスペースを割り当てる必要がないことを前提としています。つまり、 Wasm 側では Rust の文字列か、ゼロ終端でない C++ のクラスを使っていることになります。 C++ の <code>std::string</code> を使用している場合は、論理長が表示されていても、 アロケーターバケットサイズへの丸めの計算時に余分なターミネータバイトを考慮する必要があります。 C の文字列については、次の節を参照してください。\n</p>"}},{"type":"prose","value":{"id":"ゼロ終端なし","title":"ゼロ終端なし","isH3":false,"content":"<p>\n  入力文字列に U+0000 という文字が含まれている場合、<code>encodeInto()</code> は出力に 0x00 のバイトを書き込みます。\n  <code>encodeInto()</code> は論理出力の後に C 形式の 0x00 終端文字のバイトを書き込み<em>ません</em>。\n</p>\n<p>もし自分の Wasm プログラムが C の文字列を使っているなら、 0x00 の終端文字を書くのは自分の責任で、 JavaScript の文字列が U+0000 を含んでいれば、自分の Wasm プログラムが論理的に切り詰められた文字列として扱うことを防ぐことができません。ご覧ください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> encoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">encodeIntoWithSentinel</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">string<span class=\"token punctuation\">,</span> u8array<span class=\"token punctuation\">,</span> position</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> stats <span class=\"token operator\">=</span> encoder<span class=\"token punctuation\">.</span><span class=\"token function\">encodeInto</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">,</span> position <span class=\"token operator\">?</span> u8array<span class=\"token punctuation\">.</span><span class=\"token function\">subarray</span><span class=\"token punctuation\">(</span>position<span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> u8array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stats<span class=\"token punctuation\">.</span>written <span class=\"token operator\">&lt;</span> u8array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> u8array<span class=\"token punctuation\">[</span>stats<span class=\"token punctuation\">.</span>written<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// append null if room</span>\n    <span class=\"token keyword\">return</span> stats<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>source<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>This is a sample paragraph.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>result<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> sourcePara <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.source'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> resultPara <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.result'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> string <span class=\"token operator\">=</span> sourcePara<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> textEncoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> utf8 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> encodedResults <span class=\"token operator\">=</span> textEncoder<span class=\"token punctuation\">.</span><span class=\"token function\">encodeInto</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">,</span> utf8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresultPara<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">+=</span> <span class=\"token string\">'Bytes read: '</span> <span class=\"token operator\">+</span> encodedResults<span class=\"token punctuation\">.</span>read <span class=\"token operator\">+</span>\n                          <span class=\"token string\">' | Bytes written: '</span> <span class=\"token operator\">+</span> encodedResults<span class=\"token punctuation\">.</span>written <span class=\"token operator\">+</span>\n                          <span class=\"token string\">' | Encoded result: '</span> <span class=\"token operator\">+</span> utf8<span class=\"token punctuation\">;</span>\n</code></pre></div><iframe class=\"sample-code-frame\" title=\"例\" id=\"frame_examples\" src=\"https://yari-demos.prod.mdn.mozit.cloud/ja/docs/Web/API/TextEncoder/encodeInto/_sample_.examples.html\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"ポリフィル","title":"ポリフィル","isH3":false,"content":"<p>以下のポリフィルは、 switch - case 文や Safari のネイティブの TextEncoder.prototype.encode を利用できる場合は利用するので、少し長いかもしれませんが、パフォーマンスが向上するので、長さに見合うだけの価値はあります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">window</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> log <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> <span class=\"token constant\">LN2</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">LN2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> clz32 <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span>clz32 <span class=\"token operator\">||</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token number\">31</span> <span class=\"token operator\">-</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token constant\">LN2</span> <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> fromCharCode <span class=\"token operator\">=</span> String<span class=\"token punctuation\">.</span>fromCharCode<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> patchedU8Array <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>Uint8Array <span class=\"token operator\">||</span> Array<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> TextEncoderPrototype <span class=\"token operator\">=</span> TextEncoder<span class=\"token punctuation\">[</span><span class=\"token string\">\"prototype\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> GlobalTextEncoder <span class=\"token operator\">=</span> window<span class=\"token punctuation\">[</span><span class=\"token string\">\"TextEncoder\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> globalTextEncoderPrototype<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> globalTextEncoderInstance<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//////////////////////////////////////////////////////////////////////////////////////</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">encoderReplacer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nonAsciiChars</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// make the UTF string into a binary UTF-8 encoded string</span>\n        <span class=\"token keyword\">var</span> point <span class=\"token operator\">=</span> nonAsciiChars<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0xD800</span> <span class=\"token operator\">&lt;=</span> point <span class=\"token operator\">&amp;&amp;</span> point <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0xDBFF</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> nextcode <span class=\"token operator\">=</span> nonAsciiChars<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// defaults to 0 when NaN, causing null replacement character</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0xDC00</span> <span class=\"token operator\">&lt;=</span> nextcode <span class=\"token operator\">&amp;&amp;</span> nextcode <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0xDFFF</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">//point = ((point - 0xD800)&lt;&lt;10) + nextcode - 0xDC00 + 0x10000|0;</span>\n                point <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>point<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> nextcode <span class=\"token operator\">-</span> <span class=\"token number\">0x35fdc00</span><span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>point <span class=\"token operator\">&gt;</span> <span class=\"token number\">0xffff</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span>\n                        <span class=\"token punctuation\">(</span><span class=\"token number\">0x1e</span><span class=\"token comment\">/*0b11110*/</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>point<span class=\"token operator\">&gt;&gt;&gt;</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token punctuation\">(</span><span class=\"token number\">0x2</span><span class=\"token comment\">/*0b10*/</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>point<span class=\"token operator\">&gt;&gt;&gt;</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">0x3f</span><span class=\"token comment\">/*0b00111111*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token punctuation\">(</span><span class=\"token number\">0x2</span><span class=\"token comment\">/*0b10*/</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>point<span class=\"token operator\">&gt;&gt;&gt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">0x3f</span><span class=\"token comment\">/*0b00111111*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token punctuation\">(</span><span class=\"token number\">0x2</span><span class=\"token comment\">/*0b10*/</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>point<span class=\"token operator\">&amp;</span><span class=\"token number\">0x3f</span><span class=\"token comment\">/*0b00111111*/</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> point <span class=\"token operator\">=</span> <span class=\"token number\">65533</span><span class=\"token comment\">/*0b1111111111111101*/</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//return '\\xEF\\xBF\\xBD';//fromCharCode(0xef, 0xbf, 0xbd);</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">/*if (point &lt;= 0x007f) return nonAsciiChars;\n        else */</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>point <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0x07ff</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x6</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">|</span><span class=\"token punctuation\">(</span>point<span class=\"token operator\">&gt;&gt;&gt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0x2</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token operator\">|</span><span class=\"token punctuation\">(</span>point<span class=\"token operator\">&amp;</span><span class=\"token number\">0x3f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">(</span><span class=\"token number\">0xe</span><span class=\"token comment\">/*0b1110*/</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>point<span class=\"token operator\">&gt;&gt;&gt;</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">(</span><span class=\"token number\">0x2</span><span class=\"token comment\">/*0b10*/</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>point<span class=\"token operator\">&gt;&gt;&gt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">0x3f</span><span class=\"token comment\">/*0b00111111*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">(</span><span class=\"token number\">0x2</span><span class=\"token comment\">/*0b10*/</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>point<span class=\"token operator\">&amp;</span><span class=\"token number\">0x3f</span><span class=\"token comment\">/*0b00111111*/</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">TextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    TextEncoderPrototype<span class=\"token punctuation\">[</span><span class=\"token string\">\"encode\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">inputString</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 0xc0 =&gt; 0b11000000; 0xff =&gt; 0b11111111; 0xc0-0xff =&gt; 0b11xxxxxx</span>\n        <span class=\"token comment\">// 0x80 =&gt; 0b10000000; 0xbf =&gt; 0b10111111; 0x80-0xbf =&gt; 0b10xxxxxx</span>\n        <span class=\"token keyword\">var</span> encodedString <span class=\"token operator\">=</span> inputString <span class=\"token operator\">===</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span>  <span class=\"token string\">\"\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> inputString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\x80-\\uD7ff\\uDC00-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]?</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> encoderReplacer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> len<span class=\"token operator\">=</span>encodedString<span class=\"token punctuation\">.</span>length<span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">patchedU8Array</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> encodedString<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">polyfill_encodeInto</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">inputString<span class=\"token punctuation\">,</span> u8Arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> encodedString <span class=\"token operator\">=</span> inputString <span class=\"token operator\">===</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span>  <span class=\"token string\">\"\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> inputString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\x80-\\uD7ff\\uDC00-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]?</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> encoderReplacer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> len<span class=\"token operator\">=</span>encodedString<span class=\"token punctuation\">.</span>length<span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> char<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> read<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> u8ArrLen <span class=\"token operator\">=</span> u8Arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> inputLength<span class=\"token operator\">=</span>inputString<span class=\"token punctuation\">.</span>length<span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>u8ArrLen <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span> len<span class=\"token operator\">=</span>u8ArrLen<span class=\"token punctuation\">;</span>\n        <span class=\"token literal-property property\">putChars</span><span class=\"token operator\">:</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            char <span class=\"token operator\">=</span> encodedString<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>char <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span>\n                    read <span class=\"token operator\">=</span> read <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">// extension points:</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">8</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">9</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">10</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">11</span><span class=\"token operator\">:</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">12</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">13</span><span class=\"token operator\">:</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> u8ArrLen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        read <span class=\"token operator\">=</span> read <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">14</span><span class=\"token operator\">:</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> u8ArrLen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        read <span class=\"token operator\">=</span> read <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">15</span><span class=\"token operator\">:</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> u8ArrLen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        read <span class=\"token operator\">=</span> read <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n                    <span class=\"token keyword\">break</span> putChars<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">//read = read + ((char &gt;&gt;&gt; 6) !== 2) |0;</span>\n            u8Arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> char<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string-property property\">\"written\"</span><span class=\"token operator\">:</span> i<span class=\"token punctuation\">,</span> <span class=\"token string-property property\">\"read\"</span><span class=\"token operator\">:</span> inputLength <span class=\"token operator\">&lt;</span> read <span class=\"token operator\">?</span> inputLength <span class=\"token operator\">:</span> read<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    TextEncoderPrototype<span class=\"token punctuation\">[</span><span class=\"token string\">\"encodeInto\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> polyfill_encodeInto<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>GlobalTextEncoder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        window<span class=\"token punctuation\">[</span><span class=\"token string\">\"TextEncoder\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> TextEncoder<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>globalTextEncoderPrototype <span class=\"token operator\">=</span> GlobalTextEncoder<span class=\"token punctuation\">[</span><span class=\"token string\">\"prototype\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"encodeInto\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        globalTextEncoderInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GlobalTextEncoder</span><span class=\"token punctuation\">;</span>\n        globalTextEncoderPrototype<span class=\"token punctuation\">[</span><span class=\"token string\">\"encodeInto\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">string<span class=\"token punctuation\">,</span> u8arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Unfortunately, there's no way I can think of to quickly extract the number of bits written and the number of bytes read and such</span>\n            <span class=\"token keyword\">var</span> strLen <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span>length<span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> u8Len <span class=\"token operator\">=</span> u8arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>strLen <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>u8Len <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// in most circumstances, this means its safe. there are still edge-cases which are possible</span>\n                <span class=\"token comment\">// in many circumstances, we can use the faster native TextEncoder</span>\n                <span class=\"token keyword\">var</span> res8 <span class=\"token operator\">=</span> globalTextEncoderInstance<span class=\"token punctuation\">[</span><span class=\"token string\">\"encode\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">var</span> res8Len <span class=\"token operator\">=</span> res8<span class=\"token punctuation\">.</span>length<span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res8Len <span class=\"token operator\">&lt;</span> u8Len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// if we dont have to worry about read/written</span>\n                    u8arr<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> res8 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token string-property property\">\"read\"</span><span class=\"token operator\">:</span> strLen<span class=\"token punctuation\">,</span>\n                        <span class=\"token string-property property\">\"written\"</span><span class=\"token operator\">:</span> res8<span class=\"token punctuation\">.</span>length<span class=\"token operator\">|</span><span class=\"token number\">0</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">polyfill_encodeInto</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">,</span> u8arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> global <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">typeof</span> self <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">:</span> self <span class=\"token operator\">:</span> global<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>引用元: <a href=\"https://github.com/anonyco/FastestSmallestTextEncoderDecoder\" class=\"external\" rel=\" noopener\">https://github.com/anonyco/FastestSmallestTextEncoderDecoder</a></p>"}},{"type":"specifications","value":{"title":"仕様書","id":"仕様書","isH3":false,"specifications":[{"bcdSpecificationURL":"https://encoding.spec.whatwg.org/#ref-for-dom-textencoder-encodeinto①","title":"Encoding"}],"query":"api.TextEncoder.encodeInto"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"query":"api.TextEncoder.encodeInto","dataURL":"/ja/docs/Web/API/TextEncoder/encodeInto/bcd.json"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li>所属先の <a href=\"/ja/docs/Web/API/TextEncoder\"><code>TextEncoder</code></a> インターフェイス。</li>\n  <li><a href=\"/ja/docs/Web/API/TextEncoder/encode\"><code>TextEncoder.encode()</code></a></li>\n</ul>"}}],"toc":[{"text":"構文","id":"構文"},{"text":"特定の位置にエンコード","id":"特定の位置にエンコード"},{"text":"バッファーの大きさ","id":"バッファーの大きさ"},{"text":"ゼロ終端なし","id":"ゼロ終端なし"},{"text":"例","id":"例"},{"text":"ポリフィル","id":"ポリフィル"},{"text":"仕様書","id":"仕様書"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"TextEncoder.encodeInto() メソッドは、エンコードする文字列と、 UTF-8 エンコード後のテキスト格納先となる Uint8Array を受け取り、エンコードの進行状況を示す辞書オブジェクトを返します。これは古い encode() メソッドよりも潜在的に性能が高く、特にターゲットバッファーが Wasm ヒープへのビューである場合、より効果的です。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"TextEncoder.encodeInto()","locale":"en-US","native":"English (US)"}],"source":{"folder":"ja/web/api/textencoder/encodeinto","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/textencoder/encodeinto/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/TextEncoder","title":"TextEncoder"},{"uri":"/ja/docs/Web/API/TextEncoder/encodeInto","title":"TextEncoder.encodeInto()"}],"pageTitle":"TextEncoder.encodeInto() - Web API | MDN","noIndexing":false}}