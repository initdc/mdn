{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Streams API の概念","mdn_url":"/ja/docs/Web/API/Streams_API/Concepts","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/Streams_API\">Streams API</a></strong></li><li><strong><a href=\"/ja/docs/Web/API/Streams_API\"><code>Streams_API</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Streams に関連するページ</summary><ol><li><a href=\"/ja/docs/Web/API/ByteLengthQueuingStrategy\"><code>ByteLengthQueuingStrategy</code></a></li><li><a href=\"/ja/docs/Web/API/CountQueuingStrategy\"><code>CountQueuingStrategy</code></a></li><li><a href=\"/ja/docs/Web/API/ReadableByteStreamController\"><code>ReadableByteStreamController</code></a></li><li><a href=\"/ja/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a></li><li><a href=\"/ja/docs/Web/API/ReadableStreamBYOBReader\"><code>ReadableStreamBYOBReader</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ReadableStreamBYOBRequest\"><code>ReadableStreamBYOBRequest</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/API/ReadableStreamDefaultController\"><code>ReadableStreamDefaultController</code></a></li><li><a href=\"/ja/docs/Web/API/ReadableStreamDefaultReader\"><code>ReadableStreamDefaultReader</code></a></li><li><a href=\"/ja/docs/Web/API/Response/body\"><code>Response.body</code></a></li><li><a href=\"/ja/docs/Web/API/WritableStream\"><code>WritableStream</code></a></li><li><a href=\"/ja/docs/Web/API/WritableStreamDefaultController\"><code>WritableStreamDefaultController</code></a></li><li><a href=\"/ja/docs/Web/API/WritableStreamDefaultWriter\"><code>WritableStreamDefaultWriter</code></a></li><li><a href=\"/ja/docs/Web/API/fetch\"><code>fetch()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/ja/docs/Web/API/Streams_API\">Streams API</a> は、非常に便利なツールセットを Web プラットフォームに追加し、JavaScript がネットワーク経由で受信したデータのストリームにプログラムでアクセスし、開発者の希望どおりに処理できるようにするオブジェクトを提供します。 ストリームに関連する概念と用語の一部は、初めての場合もあります。 この記事では、それら知っておく必要のあるすべてを説明します。</p>"}},{"type":"prose","value":{"id":"読み取り可能なストリーム","title":"読み取り可能なストリーム","isH3":false,"content":"<p>読み取り可能なストリームは、<strong>基になるソース</strong>（underlying source）から流れる <a href=\"/ja/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> オブジェクトによって JavaScript で表されるデータソースです。 基になるソースは、ネットワーク上のどこか、またはデータを取得するドメインのどこかにあるリソースです。</p>\n<p>基になるソースには、次の 2 つのタイプがあります。</p>\n<ul>\n  <li><strong>プッシュソース</strong>（Push sources）は、アクセスしたときに常にデータをプッシュします。 ストリームへのアクセスを開始、一時停止、またはキャンセルするのはユーザー次第です。 例には、動画ストリームや TCP/<a href=\"/ja/docs/Web/API/WebSockets_API\">Web ソケット</a>が含まれます。</li>\n  <li><strong>プルソース</strong>（Pull sources）では、接続後、明示的にデータを要求する必要があります。 例には、<a href=\"/ja/docs/Web/API/Fetch_API\">Fetch</a> や <a href=\"/ja/docs/Web/API/XMLHttpRequest/XMLHttpRequest\">XHR</a> の呼び出しを介したファイルアクセス操作が含まれます。</li>\n</ul>\n<p>データは、<strong>チャンク</strong>（chunks）と呼ばれる小さな断片で順番に読み取られます。 チャンクは 1 バイトにすることも、特定のサイズの<a href=\"/ja/docs/Web/JavaScript/Typed_arrays\">型付き配列</a>など、より大きなものにすることもできます。 単一のストリームには、さまざまなサイズとタイプのチャンクを含めることができます。</p>\n<p>\n  <img src=\"https://mdn.mozillademos.org/files/15819/Readable%20streams.png\" alt=\"\" loading=\"lazy\">\n</p>\n<p>ストリームに置かれたチャンクは、<strong>キューに入れられた</strong>（enqueued）と言われます。 これは、読み取りの準備ができているキューで待機していることを意味します。 <strong>内部キュー</strong>（internal queue）は、まだ読み取られていないチャンクを追跡します（下の内部キューとキューイング戦略のセクションを参照）。</p>\n<p>ストリーム内のチャンクは<strong>リーダー</strong>（reader）によって読み取られます。 これにより、一度に 1 つのチャンクでデータが処理されるため、ユーザーは任意の種類の操作を実行できます。 リーダーとそれに付随する他の処理コードは、<strong>コンシューマー</strong>（consumer）と呼ばれます。</p>\n<p>また、<strong>コントローラー</strong>（controller）と呼ばれる構造も使用します。 各リーダーには、ストリームを制御する（例えば、必要に応じてキャンセルする）ことができるコントローラーが関連付けられています 。</p>\n<p>一度にストリームを読み取ることができるのは 1 つのリーダーのみです。 リーダーが作成され、ストリームの読み取りを開始すると、ストリームは<strong>アクティブなリーダー</strong>（active reader）に<strong>ロックされている</strong>（locked）と言います。 別のリーダーにストリームの読み取りを開始させる場合は、通常、最初のリーダーをキャンセルしてから他の操作を行う必要があります（ですが、ストリームを <strong>tee</strong> することができます。下のティーイングのセクションを参照）。</p>\n<p>読み取り可能なストリームには 2 つの異なるタイプがあることに注意してください。 従来の読み取り可能なストリームに加えて、バイトストリームと呼ばれるタイプがあります。 これは、基になるバイトソース（BYOB または bring your own buffer（独自のバッファーを持ち込む）とも呼ばれる）のソースを読み取るための従来のストリームの拡張バージョンです。 これにより、開発者が提供するバッファにストリームを直接読み込むことができ、必要なコピーが最小限に抑えられます。 コードが使用する基になるストリーム（そして拡張により、リーダーとコントローラー）は、最初にストリームがどのように作成されたかによって異なります（<a href=\"/ja/docs/Web/API/ReadableStream/ReadableStream\" title=\"ReadableStream()\"><code>ReadableStream()</code></a> コンストラクターのページを参照）。</p>\n<div class=\"notecard warning\" id=\"sect1\">\n  <p><strong>Warning:</strong> バイトストリームは、まだどこにも実装されていません。 仕様の詳細が実装に十分な完成状態にあるかどうかについて疑問が提起されています。 これは時間とともに変化する可能性があります。</p>\n</div>\n<p>フェッチ要求からの <a href=\"/ja/docs/Web/API/Response/body\"><code>Response.body</code></a> などのメカニズムを介して既製の読み取り可能なストリームを使用するか、<a href=\"/ja/docs/Web/API/ReadableStream/ReadableStream\" title=\"ReadableStream()\"><code>ReadableStream()</code></a> コンストラクターを使用して独自のストリームを使用できます。</p>"}},{"type":"prose","value":{"id":"ティーイング","title":"ティーイング","isH3":false,"content":"<p>一度にストリームを読み取ることができるのは 1 つのリーダーだけですが、ストリームを 2 つの同一のコピーに分割し、2 つの別々のリーダーで読み取ることができます。 これを<strong>ティーイング</strong>（teeing）と呼びます。</p>\n<p>JavaScript では、これを <a href=\"/ja/docs/Web/API/ReadableStream/tee\"><code>ReadableStream.tee()</code></a> メソッドを介して実現します — 元の読み取り可能なストリームの 2 つの同一コピーを含む配列を出力し、2 つの別々のリーダーで個別に読み取ることができます。</p>\n<p>例えば、サーバーから応答を取得してブラウザーにストリームしたいが、<a href=\"/ja/docs/Web/API/Service_Worker_API\">ServiceWorker</a> キャッシュにもストリームしたい場合に、ServiceWorker でこれを行うことができます。 応答のボディを複数回使用することはできず、ストリームを一度に複数のリーダーで読み取ることはできないため、これを行うには 2 つのコピーが必要です。</p>\n<p>\n  <img src=\"https://mdn.mozillademos.org/files/15820/tee.png\" alt=\"\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"書き込み可能なストリーム","title":"書き込み可能なストリーム","isH3":false,"content":"<p><strong>書き込み可能なストリーム</strong>（writable stream）は、<a href=\"/ja/docs/Web/API/WritableStream\"><code>WritableStream</code></a> オブジェクトによって JavaScript で表されるデータの書き込み先です。 これは、<strong>基になるシンク</strong>（underlying sink、生データが書き込まれる下位レベルの I/O シンク）の上部の抽象化として機能します。</p>\n<p>データは、<strong>ライター</strong>（writer）を介して一度に 1 つのチャンクでストリームに書き込まれます。 チャンクは、リーダーのチャンクと同様に、多数の形式をとることができます。 任意のコードを使用して、書き込み可能なチャンクを生成できます。 ライターとそれに関連するコードを<strong>プロデューサー</strong>（producer）と呼びます。</p>\n<p>ライターが作成され、ストリームへの書き込みを開始すると、ストリームは<strong>アクティブなライター</strong>（active writer）に<strong>ロックされている</strong>（locked）と言われます。 一度に書き込み可能なストリームに書き込むことができるのは、1 つのライターのみです。 別のライターにストリームへの書き込みを開始させたい場合は、通常、別のライターを取りつける前にそれを中止する必要があります。</p>\n<p><strong>内部キュー</strong>（internal queue）は、ストリームに書き込まれたが、基になるシンクによってまだ処理されていないチャンクを追跡します。</p>\n<p>また、コントローラーと呼ばれる構造も使用します。 各ライターには、ストリームを制御する（例えば、必要に応じてストリームを中止する）ことができるコントローラーが関連付けられています 。</p>\n<p>\n  <img src=\"https://mdn.mozillademos.org/files/15821/writable%20streams.png\" alt=\"\" loading=\"lazy\">\n</p>\n<p><a href=\"/ja/docs/Web/API/WritableStream/WritableStream\" title=\"WritableStream()\"><code>WritableStream()</code></a> コンストラクターを使用して、書き込み可能なストリームを利用できます。 現在、これらのブラウザーでの可用性は非常に限られています。</p>"}},{"type":"prose","value":{"id":"パイプチェーン","title":"パイプチェーン","isH3":false,"content":"<p>Streams API を使用すると、<strong>パイプチェーン</strong>（pipe chain）と呼ばれる構造を使用して、ストリームを相互にパイプすることができます（または、少なくともブラウザーが関連機能を実装する場合はそうなります）。 これを容易にするために、仕様には次の 2 つのメソッドがあります。</p>\n<ul>\n  <li><a href=\"/ja/docs/Web/API/ReadableStream/pipeThrough\"><code>ReadableStream.pipeThrough()</code></a> — <strong>変換ストリーム</strong>（transform stream）を介してストリームをパイプします。 変換ストリームは、データが書き込まれる書き込み可能なストリームと、データが読み取られる読み取り可能なストリームで構成されるペアです。 これは、データを常に取り込み、新しい状態に変換する一種のトレッドミルとして機能します。 事実上、同じストリームに書き込まれ、同じ値が読み取られます。 簡単な例は、生のバイトが書き込まれ、次に文字列が読み取られるテキストデコーダーです。 仕様には、より有用なアイデアと例があります。 アイデアについては、<a href=\"https://streams.spec.whatwg.org/#ts-model\" class=\"external\" rel=\" noopener\">ストリームの変換</a>（英語）と、<a href=\"https://streams.spec.whatwg.org/#example-both\" class=\"external\" rel=\" noopener\">この Web ソケットの例</a>（英語）を参照してください。</li>\n  <li><a href=\"/ja/docs/Web/API/ReadableStream/pipeTo\"><code>ReadableStream.pipeTo()</code></a> — パイプチェーンの終点として機能する書き込み可能なストリームにパイプします。</li>\n</ul>\n<p>パイプチェーンの始まりは<strong>元のソース</strong>（original source）と呼ばれ、終わりは<strong>最終的なシンク</strong>（ultimate sink）と呼ばれます。</p>\n<p>\n  <img src=\"https://mdn.mozillademos.org/files/15818/PipeChain.png\" alt=\"\" loading=\"lazy\">\n</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> この機能はまだ十分に検討されておらず、多くのブラウザーでは利用できません。 ある時点で、仕様作成者は、<code>TransformStream</code> クラスのようなものを追加して、変換ストリームの作成を容易にすることを望んでいます。</p>\n</div>"}},{"type":"prose","value":{"id":"バックプレッシャー","title":"バックプレッシャー","isH3":false,"content":"<p>ストリームの重要な概念は<strong>バックプレッシャー</strong>（backpressure）です。 これは、単一のストリームまたはパイプチェーンが読み取り/書き込みの速度を調整するプロセスです。 チェーンの後半のストリームがまだビジーで、さらに多くのチャンクを受け入れる準備ができていない場合、チェーンを介して信号を逆方向に送信して、より前の変換ストリーム（または元のソース）に必要に応じて配信速度を落とすよう指示し、どこもボトルネックにならないようにします。</p>\n<p><code>ReadableStream</code> でバックプレッシャーを使用するには、コントローラーの <a href=\"/ja/docs/Web/API/ReadableStreamDefaultController/desiredSize\"><code>ReadableStreamDefaultController.desiredSize</code></a> プロパティを照会することで、コンシューマーが希望するチャンクサイズをコントローラーに問い合わせます。 それが低すぎる場合、<code>ReadableStream</code> は、基になるソースにデータの送信を停止するように指示でき、ストリームチェーンに沿ってバックプレッシャーをかけます。</p>\n<p>後でコンシューマが再びデータを受信したい場合は、ストリームの作成で <code>pull</code> メソッドを使用して、データをストリームに与えるよう基になるソースに指示できます。</p>"}},{"type":"prose","value":{"id":"内部キューとキューイング戦略","title":"内部キューとキューイング戦略","isH3":false,"content":"<p>前に述べたように、まだ処理されて終了していないストリーム内のチャンクは、内部キューによって追跡されます。</p>\n<ul>\n  <li>読み取り可能なストリームの場合、これらはキューに入れられたがまだ読み取られていないチャンクです。</li>\n  <li>書き込み可能なストリームの場合、これらは書き込まれたが、基になるシンクによってまだ処理されていないチャンクです。</li>\n</ul>\n<p>内部キューは、<strong>内部キューの状態</strong>（internal queue state）に基づいてバックプレッシャーを通知する方法を決定する<strong>キューイング戦略</strong>（queuing strategy）を採用しています。</p>\n<p>一般に、この戦略では、キュー内のチャンクのサイズを<strong>最高水準点</strong>（high water mark）と呼ばれる値と比較します。これは、キューが現実的に管理できる最大の合計チャンクサイズです。</p>\n<p>実行される計算は次です。</p>\n<pre class=\"notranslate\">最高水準点 - キュー内のチャンクの合計サイズ = 希望サイズ\n</pre>\n<p><strong>希望サイズ</strong>（desired size）は、ストリームの流れを維持するためにストリームが受け入れることができるチャンクのサイズですが、サイズは最高水準点未満です。 計算が実行された後、希望サイズをゼロより大きく保ちながら、ストリームの流れを可能な限り高速に保つために、必要に応じてチャンク生成が減速/高速化されます。 値がゼロ（書き込み可能なストリームの場合はそれ以下）になった場合、ストリームが処理できるよりも速くチャンクが生成されていることを意味し、問題が発生します。</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> ゼロまたは負の希望サイズの場合に何が起こるかは、これまで仕様で実際に定義されていません。 忍耐は美徳なり。</p>\n</div>\n<p>例として、1 のチャンクサイズと 3 の最高水準点を考えてみましょう。 これは、最高水準点に到達してバックプレッシャーが適用される前に、最大 3 つのチャンクをキューに入れることができることを意味します。</p>"}}],"toc":[{"text":"読み取り可能なストリーム","id":"読み取り可能なストリーム"},{"text":"ティーイング","id":"ティーイング"},{"text":"書き込み可能なストリーム","id":"書き込み可能なストリーム"},{"text":"パイプチェーン","id":"パイプチェーン"},{"text":"バックプレッシャー","id":"バックプレッシャー"},{"text":"内部キューとキューイング戦略","id":"内部キューとキューイング戦略"}],"summary":"Streams API は、非常に便利なツールセットを Web プラットフォームに追加し、JavaScript がネットワーク経由で受信したデータのストリームにプログラムでアクセスし、開発者の希望どおりに処理できるようにするオブジェクトを提供します。 ストリームに関連する概念と用語の一部は、初めての場合もあります。 この記事では、それら知っておく必要のあるすべてを説明します。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Streams API concepts","locale":"en-US","native":"English (US)"},{"title":"Streams API 컨셉","locale":"ko","native":"한국어"},{"title":"Conceitos da API Stream","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Streams API 概念","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/streams_api/concepts","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/streams_api/concepts/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/Streams_API","title":"Streams API"},{"uri":"/ja/docs/Web/API/Streams_API/Concepts","title":"Streams API の概念"}],"pageTitle":"Streams API の概念 - Web API | MDN","noIndexing":false}}