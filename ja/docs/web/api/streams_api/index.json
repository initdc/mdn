{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Streams API","mdn_url":"/ja/docs/Web/API/Streams_API","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/Streams_API\">Streams API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>ガイド</summary><ol><li><a href=\"/ja/docs/Web/API/Streams_API/Concepts\">Streams API concepts</a></li><li><a href=\"/ja/docs/Web/API/Streams_API/Using_readable_streams\">Using readable streams</a></li><li><a href=\"/ja/docs/Web/API/Streams_API/Using_readable_byte_streams\">Using readable byte streams</a></li><li><a href=\"/ja/docs/Web/API/Streams_API/Using_writable_streams\">Using writable streams</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>インターフェイス</summary><ol><li><a href=\"/ja/docs/Web/API/ByteLengthQueuingStrategy\"><code>ByteLengthQueuingStrategy</code></a></li><li><a href=\"/ja/docs/Web/API/CountQueuingStrategy\"><code>CountQueuingStrategy</code></a></li><li><a href=\"/ja/docs/Web/API/ReadableByteStreamController\"><code>ReadableByteStreamController</code></a></li><li><a href=\"/ja/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a></li><li><a href=\"/ja/docs/Web/API/ReadableStreamBYOBReader\"><code>ReadableStreamBYOBReader</code></a></li><li><a href=\"/ja/docs/Web/API/ReadableStreamBYOBRequest\"><code>ReadableStreamBYOBRequest</code></a></li><li><a href=\"/ja/docs/Web/API/ReadableStreamDefaultController\"><code>ReadableStreamDefaultController</code></a></li><li><a href=\"/ja/docs/Web/API/ReadableStreamDefaultReader\"><code>ReadableStreamDefaultReader</code></a></li><li><a href=\"/ja/docs/Web/API/WritableStream\"><code>WritableStream</code></a></li><li><a href=\"/ja/docs/Web/API/WritableStreamDefaultController\"><code>WritableStreamDefaultController</code></a></li><li><a href=\"/ja/docs/Web/API/WritableStreamDefaultWriter\"><code>WritableStreamDefaultWriter</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>プロパティ</summary><ol><li><a href=\"/ja/docs/Web/API/Response/body\"><code>Response.body</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>メソッド</summary><ol><li><a href=\"/ja/docs/Web/API/fetch\"><code>fetch()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard experimental\" id=\"sect1\"><p><strong>Experimental:</strong> <strong>これは<a href=\"/ja/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">実験的な機能</a>です。</strong><br>本番で使用する前に<a href=\"#browser_compatibility\">ブラウザー互換性一覧表</a>をチェックしてください。</p></div>\n<p>Streams API を使用すると、JavaScript がネットワーク経由で受信したデータのストリームにプログラムでアクセスし、開発者の希望どおりに処理できます。</p>"}},{"type":"prose","value":{"id":"概念と使用方法","title":"概念と使用方法","isH3":false,"content":"<p>ストリーミングでは、ネットワーク経由で受信するリソースを小さなチャンクに分割し、少しずつ処理します。 これは、ブラウザーがウェブページに表示されるアセットを受信するときにとにかく行うことです — 動画がバッファされて徐々に再生可能になり、画像が読み込まれるにつれて徐々に表示されることもあります。</p>\n<p>しかし、これはこれまで JavaScript で利用できたことはありません。 以前は、何らかの種類のリソース（動画、テキストファイルなど）を処理したい場合は、ファイル全体をダウンロードし、適切な形式にデシリアライズされるのを待ってから、完全に受信した後に全部まとめて処理する必要がありました。</p>\n<p>Streams が JavaScript で利用できるようになったことで、これがすべて変わりました — クライアント側で利用可能になると、バッファ、文字列、または blob を生成せずに、JavaScript で少しずつ生データの処理を開始できます。</p>\n<p>\n  <img src=\"https://mdn.mozillademos.org/files/15817/Concept.png\" alt=\"\" loading=\"lazy\">\n</p>\n<p>さらに利点もあります。 ストリームの開始または終了の検出、ストリームの連鎖、エラー処理と必要に応じたストリームのキャンセル、ストリームの読み取り速度への対応が可能です。</p>\n<p>Streams の基本的な使用法は、応答をストリームとして利用可能にすることにかかっています。 例えば、成功した<a href=\"/ja/docs/Web/API/fetch\">フェッチ要求</a>によって返された応答の <a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>Body</code></a> は、<a href=\"/ja/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> として公開できます。 その後、<a href=\"/ja/docs/Web/API/ReadableStream/getReader\"><code>ReadableStream.getReader()</code></a> で作成したリーダーを使用して読み取り、<a href=\"/ja/docs/Web/API/ReadableStream/cancel\"><code>ReadableStream.cancel()</code></a> でキャンセルできます。</p>\n<p>より複雑な用途では、例えば<a href=\"/ja/docs/Web/API/Service_Worker_API\">サービスワーカー</a>内でデータを処理するために、<a href=\"/ja/docs/Web/API/ReadableStream/ReadableStream\" title=\"ReadableStream()\"><code>ReadableStream()</code></a> コンストラクターを使用して独自のストリームを作成します。</p>\n<p><a href=\"/ja/docs/Web/API/WritableStream\"><code>WritableStream</code></a> を使用してストリームにデータを書き込むこともできます。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> ストリームの理論と実践の詳細については、<a href=\"/ja/docs/Web/API/Streams_API/Concepts\">Streams API の概念</a>、<a href=\"/ja/docs/Web/API/Streams_API/Using_readable_streams\">読み取り可能なストリームの使用</a>、<a href=\"/ja/docs/Web/API/Streams_API/Using_writable_streams\">書き込み可能なストリームの使用</a>の記事をご覧ください。</p>\n</div>"}},{"type":"prose","value":{"id":"ストリームのインターフェイス","title":"ストリームのインターフェイス","isH3":false,"content":""}},{"type":"prose","value":{"id":"読み取り可能なストリーム","title":"読み取り可能なストリーム","isH3":true,"content":"<dl>\n  <dt id=\"readablestream\"><a href=\"/ja/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a></dt>\n  <dd>\n    <p>読み取り可能なデータのストリームを表します。 <a href=\"/ja/docs/Web/API/Fetch_API\">Fetch API</a> の応答ストリーム、または開発者定義のストリーム（カスタムの <a href=\"/ja/docs/Web/API/ReadableStream/ReadableStream\" title=\"ReadableStream()\"><code>ReadableStream()</code></a> コンストラクターなど）を処理するために使用できます。</p>\n  </dd>\n  <dt id=\"readablestreamdefaultreader\"><a href=\"/ja/docs/Web/API/ReadableStreamDefaultReader\"><code>ReadableStreamDefaultReader</code></a></dt>\n  <dd>\n    <p>ネットワークから提供されたストリームデータ（フェッチ要求など）を読み取るために使用できるデフォルトのリーダーを表します。</p>\n  </dd>\n  <dt id=\"readablestreamdefaultcontroller\"><a href=\"/ja/docs/Web/API/ReadableStreamDefaultController\"><code>ReadableStreamDefaultController</code></a></dt>\n  <dd>\n    <p><a href=\"/ja/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> の状態と内部キューの制御を許可するコントローラーを表します。 デフォルトのコントローラーは、バイトストリームではないストリーム用です。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"書き込み可能なストリーム","title":"書き込み可能なストリーム","isH3":true,"content":"<dl>\n  <dt id=\"writablestream\"><a href=\"/ja/docs/Web/API/WritableStream\"><code>WritableStream</code></a></dt>\n  <dd>\n    <p>シンク（sink）と呼ばれる宛先にストリーミングデータを書き込むための標準的な抽象化を提供します。 このオブジェクトには、組み込みのバックプレッシャー（受信側のバッファあふれの予防）とキューイングが付属しています。</p>\n  </dd>\n  <dt id=\"writablestreamdefaultwriter\"><a href=\"/ja/docs/Web/API/WritableStreamDefaultWriter\"><code>WritableStreamDefaultWriter</code></a></dt>\n  <dd>\n    <p>データのチャンクを書き込み可能なストリームに書き込むために使用できるデフォルトの書き込み可能なストリームのライターを表します。</p>\n  </dd>\n  <dt id=\"writablestreamdefaultcontroller\"><a href=\"/ja/docs/Web/API/WritableStreamDefaultController\"><code>WritableStreamDefaultController</code></a></dt>\n  <dd>\n    <p><a href=\"/ja/docs/Web/API/WritableStream\"><code>WritableStream</code></a> の状態の制御を許可するコントローラーを表します。 <code>WritableStream</code> を構築するとき、基になるシンクには、対応する <code>WritableStreamDefaultController</code> インスタンスが与えられて操作します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"関連するストリームの_api_と操作","title":"関連するストリームの API と操作","isH3":true,"content":"<dl>\n  <dt id=\"bytelengthqueuingstrategy\"><a href=\"/ja/docs/Web/API/ByteLengthQueuingStrategy\"><code>ByteLengthQueuingStrategy</code></a></dt>\n  <dd>\n    <p>ストリームを構築するときに使用できる組み込みのバイト長キューイング戦略（byte length queuing strategy）を提供します。</p>\n  </dd>\n  <dt id=\"countqueuingstrategy\"><a href=\"/ja/docs/Web/API/CountQueuingStrategy\"><code>CountQueuingStrategy</code></a></dt>\n  <dd>\n    <p>ストリームを構築するときに使用できる組み込みのチャンクカウントキューイング戦略（chunk counting queuing strategy）を提供します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"他の_api_の拡張","title":"他の API の拡張","isH3":true,"content":"<dl>\n  <dt id=\"request\"><a href=\"/ja/docs/Web/API/Request\"><code>Request</code></a></dt>\n  <dd>\n    <p>新しい <code>Request</code> オブジェクトが構築されると、その <code>RequestInit</code> ディクショナリの <code>body</code> プロパティで <a href=\"/ja/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> を渡すことができます。 次に、この <code>Request</code> を <a href=\"/ja/docs/Web/API/fetch\"><code>WindowOrWorkerGlobalScope.fetch()</code></a> に渡して、ストリームのフェッチを開始できます。</p>\n  </dd>\n  <dt id=\"body\"><a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>Body</code></a></dt>\n  <dd>\n    <p>成功した<a href=\"/ja/docs/Web/API/fetch\">フェッチ要求</a>によって返された応答の <a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>Body</code></a> は、デフォルトで <a href=\"/ja/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> として公開され、リーダーを取りつけることができます。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"bytestream_関連のインターフェイス","title":"ByteStream 関連のインターフェイス","isH3":true,"content":"<div class=\"notecard warning\" id=\"sect3\">\n  <p><strong>Warning:</strong> これらはまだどこにも実装されておらず、仕様の詳細が実装に十分な完成状態にあるかどうかについて疑問が提起されています。 これは時間とともに変化する可能性があります。</p>\n</div>\n<dl>\n  <dt id=\"readablestreambyobreader\"><a href=\"/ja/docs/Web/API/ReadableStreamBYOBReader\"><code>ReadableStreamBYOBReader</code></a></dt>\n  <dd>\n    <p>開発者が提供するストリームデータの読み取りに使用できる BYOB（bring your own buffer、独自のバッファを持ち込む）リーダーを表します（カスタムの <a href=\"/ja/docs/Web/API/ReadableStream/ReadableStream\" title=\"ReadableStream()\"><code>ReadableStream()</code></a> コンストラクターなど）。</p>\n  </dd>\n  <dt id=\"readablebytestreamcontroller\"><a href=\"/ja/docs/Web/API/ReadableByteStreamController\"><code>ReadableByteStreamController</code></a></dt>\n  <dd>\n    <p><a href=\"/ja/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> の状態と内部キューの制御を許可するコントローラーを表します。 バイトストリームコントローラーは、バイトストリーム用です。</p>\n  </dd>\n  <dt id=\"readablestreambyobrequest_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ReadableStreamBYOBRequest\"><code>ReadableStreamBYOBRequest</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p><a href=\"/ja/docs/Web/API/ReadableByteStreamController\"><code>ReadableByteStreamController</code></a> 内のプルインリクエストを表します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":"<p>Streams API のドキュメントに合わせてサンプルのディレクトリを作成しました。 <a href=\"https://github.com/mdn/dom-examples/tree/master/streams\" class=\"external\" rel=\" noopener\">mdn/dom-examples/streams</a> を参照してください。 例は次のとおりです。</p>\n<ul>\n  <li><a href=\"https://mdn.github.io/dom-examples/streams/simple-pump/\" class=\"external\" rel=\" noopener\">Simple stream pump</a>（単純なストリームポンプ）: この例は、<code>ReadableStream</code> を使用してそのデータを別のストリームに渡す方法を示しています。</li>\n  <li><a href=\"https://mdn.github.io/dom-examples/streams/grayscale-png/\" class=\"external\" rel=\" noopener\">Grayscale a PNG</a>（PNG のグレースケール化）: この例は、PNG の <code>ReadableStream</code> をグレースケールに変換する方法を示しています。</li>\n  <li><a href=\"https://mdn.github.io/dom-examples/streams/simple-random-stream/\" class=\"external\" rel=\" noopener\">Simple random stream</a>（単純なランダムストリーム）: この例は、カスタムストリームを使用してランダムな文字列を生成し、それらをチャンクとしてキューに入れてから、再度読み取る方法を示しています。</li>\n  <li><a href=\"https://mdn.github.io/dom-examples/streams/simple-tee-example/\" class=\"external\" rel=\" noopener\">Simple tee example</a>（単純な tee の例）: この例は、単純なランダムストリームの例を拡張したもので、ストリームを tee 化して、両方の結果のストリームの独立して読み取る方法を示しています。</li>\n  <li><a href=\"https://mdn.github.io/dom-examples/streams/simple-writer/\" class=\"external\" rel=\" noopener\">Simple writer</a>（単純なライター）: この例では、書き込み可能なストリームに書き込み、ストリームをデコードして、コンテンツを UI に書き込む方法を示します。</li>\n  <li><a href=\"https://mdn.github.io/dom-examples/streams/png-transform-stream/\" class=\"external\" rel=\" noopener\">Unpack chunks of a PNG</a>（PNG のチャンクをアンパックする）: この例は、PNG ファイルのデータを PNG チャンクのストリームに変換することにより、<a href=\"/ja/docs/Web/API/ReadableStream/pipeThrough\" title=\"pipeThrough()\"><code>pipeThrough()</code></a> を使用して <code>ReadableStream</code> を他のデータ型のストリームに変換する方法を示します。</li>\n</ul>\n<p>他の開発者による例</p>\n<ul>\n  <li><a href=\"https://fetch-progress.anthum.com/\" class=\"external\" rel=\" noopener\">Streams、Service Worker、および Fetch を含む進行状況インジケーター</a>（英語）。</li>\n</ul>"}},{"type":"prose","value":{"id":"仕様書","title":"仕様書","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>仕様書</th>\n      <th>状態</th>\n      <th>備考</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://streams.spec.whatwg.org/\" hreflang=\"en\" lang=\"en\" class=\"external\" title=\"Streamsの仕様書\" rel=\" noopener\">Streams</a></td>\n      <td><span class=\"spec-living\">現行の標準</span></td>\n      <td>初回定義</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"ブラウザーの互換性","title":"ブラウザーの互換性","isH3":false,"content":""}},{"type":"browser_compatibility","value":{"title":"ReadableStream","id":"readablestream_2","isH3":true,"query":"api.ReadableStream","dataURL":"/ja/docs/Web/API/Streams_API/bcd.json"}},{"type":"browser_compatibility","value":{"title":"WritableStream","id":"writablestream_2","isH3":true,"query":"api.WritableStream","dataURL":"/ja/docs/Web/API/Streams_API/bcd-2.json"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/API/Streams_API/Concepts\">Streams API の概念</a></li>\n  <li><a href=\"/ja/docs/Web/API/Streams_API/Using_readable_streams\">読み取り可能なストリームの使用</a></li>\n  <li><a href=\"/ja/docs/Web/API/Streams_API/Using_writable_streams\">書き込み可能なストリームの使用</a></li>\n</ul>"}}],"toc":[{"text":"概念と使用方法","id":"概念と使用方法"},{"text":"ストリームのインターフェイス","id":"ストリームのインターフェイス"},{"text":"例","id":"例"},{"text":"仕様書","id":"仕様書"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"Streams API を使用すると、JavaScript がネットワーク経由で受信したデータのストリームにプログラムでアクセスし、開発者の希望どおりに処理できます。","popularity":0.0002,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Streams API","locale":"en-US","native":"English (US)"},{"title":"Streams API","locale":"fr","native":"Français"},{"title":"Streams API","locale":"ko","native":"한국어"},{"title":"Streams API","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Streams API","locale":"ru","native":"Русский"},{"title":"Stream API","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/streams_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/streams_api/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/Streams_API","title":"Streams API"}],"pageTitle":"Streams API - Web API | MDN","noIndexing":false}}