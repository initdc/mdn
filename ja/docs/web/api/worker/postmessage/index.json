{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Worker.postMessage()","mdn_url":"/ja/docs/Web/API/Worker/postMessage","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/Web_Workers_API\">Web Workers API</a></strong></li><li><strong><a href=\"/ja/docs/Web/API/Worker\"><code>Worker</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>コンストラクター</summary><ol><li><a href=\"/ja/docs/Web/API/Worker/Worker\"><code>Worker()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>メソッド</summary><ol><li><em><code>postMessage()</code></em></li><li><a href=\"/ja/docs/Web/API/Worker/terminate\"><code>terminate()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>イベント</summary><ol><li><a href=\"/ja/docs/Web/API/Worker/error_event\"><code>error</code></a></li><li><a href=\"/ja/docs/Web/API/Worker/message_event\"><code>message</code></a></li><li><a href=\"/ja/docs/Web/API/Worker/messageerror_event\"><code>messageerror</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>継承</summary><ol><li><a href=\"/ja/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Web Workers API に関連するページ</summary><ol><li><a href=\"/ja/docs/Web/API/DedicatedWorkerGlobalScope\"><code>DedicatedWorkerGlobalScope</code></a></li><li><a href=\"/ja/docs/Web/API/ServiceWorker\"><code>ServiceWorker</code></a></li><li><a href=\"/ja/docs/Web/API/SharedWorker\"><code>SharedWorker</code></a></li><li><a href=\"/ja/docs/Web/API/SharedWorkerGlobalScope\"><code>SharedWorkerGlobalScope</code></a></li><li><a href=\"/ja/docs/Web/API/WorkerGlobalScope\"><code>WorkerGlobalScope</code></a></li><li><a href=\"/ja/docs/Web/API/WorkerLocation\"><code>WorkerLocation</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WorkerNavigator\"><code>WorkerNavigator</code> <small>(en-US)</small></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>postMessage()</code></strong> は <a href=\"/ja/docs/Web/API/Worker\"><code>Worker</code></a> インターフェイスのメソッドで、ワーカーの内部スコープにメッセージを送信します。これは、ワーカーに送信するデータを単一の引数として受け取ります。このデータは任意の値、または循環参照を含む場合は<a href=\"/ja/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\">構造化複製</a>アルゴリズムで扱う JavaScript オブジェクトが許可されます。</p>\n<p><a href=\"/ja/docs/Web/API/Worker\"><code>Worker</code></a> の <code>postMessage()</code> メソッドは <a href=\"/ja/docs/Web/API/MessagePort\"><code>MessagePort</code></a> の <a href=\"/ja/docs/Web/API/MessagePort/postMessage\" title=\"postMessage()\"><code>postMessage()</code></a> メソッドに委任して、受信する <a href=\"/ja/docs/Web/API/MessagePort\"><code>MessagePort</code></a> に対応するイベントループのタスクを追加します。</p>\n<p>ワーカーは <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DedicatedWorkerGlobalScope/postMessage\"><code>DedicatedWorkerGlobalScope.postMessage</code> <small>(en-US)</small></a> メソッド使用して自分を起動したスレッドに情報を送り返すことができます。</p>"}},{"type":"prose","value":{"id":"構文","title":"構文","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n<span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> transfer<span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"引数","title":"引数","isH3":true,"content":"<dl>\n  <dt id=\"message\"><code>message</code></dt>\n  <dd>\n    <p>ワーカーに送るオブジェクトです。これは <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DedicatedWorkerGlobalScope/message_event\"><code>DedicatedWorkerGlobalScope.message_event</code> <small>(en-US)</small></a> イベントに配信されるイベントの <code>data</code> フィールドに入ります。このデータは任意の値、または循環参照を含む場合は<a href=\"/ja/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\">構造化複製</a>アルゴリズムで扱う JavaScript オブジェクトが許可されます。</p>\n    <p><code>message</code> 引数が提供されて<em>いない</em>場合は、 <code>TypeError</code> が発生します。ワーカーに渡すデータが重要でない場合は、 <code>null</code> または <code>undefined</code> を明示的に渡すことができます。</p>\n  </dd>\n  <dt id=\"transfer\"><code>transfer</code> <span class=\"badge inline optional\">省略可</span></dt>\n  <dd>\n    <p>オプションで、所有権を移転する<a href=\"/ja/docs/Glossary/Transferable_objects\">移転可能オブジェクト</a>の<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array\">配列</a>です。オブジェクトの所有権が移転されると、そのオブジェクトは送信元のコンテキストでは使用できなくなり、送信先のワーカーのみが使用できるようになります。</p>\n    <p>移転可能オブジェクトは <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>、<a href=\"/ja/docs/Web/API/MessagePort\"><code>MessagePort</code></a>、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ImageBitmap\"><code>ImageBitmap</code> <small>(en-US)</small></a> のような移転可能なクラスのインスタンスです。 <code>null</code> を <code>transfer</code> の値として受け付けることはできません。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"返値","title":"返値","isH3":true,"content":"<p>なし (<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>)。</p>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":"<p>次のコードスニペットは、 <a href=\"/ja/docs/Web/API/Worker/Worker\" title=\"Worker()\"><code>Worker()</code></a> コンストラクターを使用して <a href=\"/ja/docs/Web/API/Worker\"><code>Worker</code></a> オブジェクトを作成しています。2 つのフォーム入力要素 (<code>first</code> と <code>second</code>) のどちらかの値が変更されると、 <a href=\"/ja/docs/Web/API/HTMLElement/change_event\" title=\"change\"><code>change</code></a> イベントによって <code>postMessage()</code> が呼び出され、両方の入力要素の値が現在のワーカーに送信されます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> myWorker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token string\">'worker.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfirst<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onchange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  myWorker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Message posted to worker'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nsecond<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onchange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  myWorker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Message posted to worker'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>完全な例は、<a href=\"https://github.com/mdn/dom-examples/tree/main/web-workers/simple-web-worker\" class=\"external\" rel=\" noopener\">簡単なワーカーの例</a> （<a href=\"https://mdn.github.io/dom-examples/web-workers/simple-web-worker/\" class=\"external\" rel=\" noopener\">例を実行</a>）を参照してください。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> <strong>メモ:</strong> <code>postMessage()</code> は同時に一つしかオブジェクトを送信できません。上記のように、複数の値を渡したい場合は配列を送信してください。</p>\n</div>"}},{"type":"prose","value":{"id":"移転を伴う例","title":"移転を伴う例","isH3":true,"content":"<p>この最小限の例では、 <code>main</code> が <code>ArrayBuffer</code> を作成して <code>myWorker</code> に移転し、次に <code>myWorker</code> がそれを <code>main</code> に再移転して、それぞれの段階で大きさを記録します。</p>\n<h4 id=\"main.js_のコード\">main.js のコード:</h4>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// ワーカーの生成</span>\n<span class=\"token keyword\">const</span> myWorker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myWorker.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// myWorker を待ち受けしてバッファーを main に再移転する</span>\nmyWorker<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handleMessageFromWorker</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message from worker received in main:\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> bufTransferredBackFromWorker <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"buf.byteLength in main AFTER transfer back from worker:\"</span><span class=\"token punctuation\">,</span>\n    bufTransferredBackFromWorker<span class=\"token punctuation\">.</span>byteLength\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// バッファーの生成</span>\n<span class=\"token keyword\">const</span> myBuf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"buf.byteLength in main BEFORE transfer to worker:\"</span><span class=\"token punctuation\">,</span>\n  myBuf<span class=\"token punctuation\">.</span>byteLength\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// myBuf を myWorker に送信し、配下の ArrayBuffer を移転する</span>\nmyWorker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>myBuf<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>myBuf<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"buf.byteLength in main AFTER transfer to worker:\"</span><span class=\"token punctuation\">,</span>\n  myBuf<span class=\"token punctuation\">.</span>byteLength\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"myworker.js_のコード\">myWorker.js のコード</h4>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// main を待ち受けしてバッファーを myWorker に移転する</span>\nself<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handleMessageFromMain</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message from main received in worker:\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> bufTransferredFromMain <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"buf.byteLength in worker BEFORE transfer back to main:\"</span><span class=\"token punctuation\">,</span>\n    bufTransferredFromMain<span class=\"token punctuation\">.</span>byteLength\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// バッファーを main に送信し返し、配下の ArrayBuffer を移転する</span>\n  self<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>bufTransferredFromMain<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>bufTransferredFromMain<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"buf.byteLength in worker AFTER transfer back to main:\"</span><span class=\"token punctuation\">,</span>\n    bufTransferredFromMain<span class=\"token punctuation\">.</span>byteLength\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"ログ出力\">ログ出力</h4>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>buf.byteLength <span class=\"token keyword\">in</span> main BEFORE transfer to worker:        <span class=\"token number\">8</span>                     main.js:19\nbuf.byteLength <span class=\"token keyword\">in</span> main AFTER transfer to worker:         <span class=\"token number\">0</span>                     main.js:27\n\nmessage from main received <span class=\"token keyword\">in</span> worker:                    MessageEvent <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">..</span>. <span class=\"token punctuation\">}</span>  myWorker.js:3\nbuf.byteLength <span class=\"token keyword\">in</span> worker BEFORE transfer back to main:   <span class=\"token number\">8</span>                     myWorker.js:7\nbuf.byteLength <span class=\"token keyword\">in</span> worker AFTER transfer back to main:    <span class=\"token number\">0</span>                     myWorker.js:15\n\nmessage from worker received <span class=\"token keyword\">in</span> main:                    MessageEvent <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">..</span>. <span class=\"token punctuation\">}</span>  main.js:6\nbuf.byteLength <span class=\"token keyword\">in</span> main AFTER transfer back from worker:  <span class=\"token number\">8</span>                     main.js:10\n</code></pre></div>\n<p><code>byteLength</code> は <code>ArrayBuffer</code> が移転されると 0 になります。 <code>ArrayBuffer</code> の移転のより洗練された完全な動作例については、 <a href=\"https://github.com/Noitidart/ChromeWorker/tree/aca57d9cadc4e68af16201bdecbfb6f9a6f9ca6b\" class=\"external\" rel=\" noopener\">GitHub :: ChromeWorker - demo-transfer-arraybuffer</a> の Firefox デモアドオンを参照してください。</p>"}},{"type":"specifications","value":{"title":"仕様書","id":"仕様書","isH3":false,"specifications":[{"bcdSpecificationURL":"https://html.spec.whatwg.org/multipage/workers.html#dom-worker-postmessage-dev","title":"HTML Standard"}],"query":"api.Worker.postMessage"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"query":"api.Worker.postMessage","dataURL":"/ja/docs/Web/API/Worker/postMessage/bcd.json"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li>所属先の <a href=\"/ja/docs/Web/API/Worker\"><code>Worker</code></a> インターフェイス</li>\n</ul>"}}],"toc":[{"text":"構文","id":"構文"},{"text":"例","id":"例"},{"text":"仕様書","id":"仕様書"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"postMessage() は Worker インターフェイスのメソッドで、ワーカーの内部スコープにメッセージを送信します。これは、ワーカーに送信するデータを単一の引数として受け取ります。このデータは任意の値、または循環参照を含む場合は構造化複製アルゴリズムで扱う JavaScript オブジェクトが許可されます。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Worker.postMessage()","locale":"en-US","native":"English (US)"},{"title":"Worker.postMessage()","locale":"fr","native":"Français"},{"title":"Worker.postMessage()","locale":"ko","native":"한국어"},{"title":"Worker.postMessage()","locale":"ru","native":"Русский"},{"title":"Worker.postMessage()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/worker/postmessage","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/worker/postmessage/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/Worker","title":"Worker"},{"uri":"/ja/docs/Web/API/Worker/postMessage","title":"Worker.postMessage()"}],"pageTitle":"Worker.postMessage() - Web API | MDN","noIndexing":false}}