{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Broadcast Channel API","mdn_url":"/ja/docs/Web/API/Broadcast_Channel_API","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/Broadcast_Channel_API\">Broadcast Channel API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>インターフェイス</summary><ol><li><a href=\"/ja/docs/Web/API/BroadcastChannel\"><code>BroadcastChannel</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong>Broadcast Channel API</strong>（放送チャンネル API）を使用すると、<a href=\"/ja/docs/Glossary/Browsing_context\">閲覧コンテキスト</a>（つまり、<em>ウィンドウ</em>、<em>タブ</em>、<em>フレーム</em>、<em>iframe</em>）間で、同じ<a href=\"/ja/docs/Glossary/Origin\">オリジン</a>（通常は同じサイトのページ）を使用して簡単に通信できます。</p><div class=\"notecard note\" id=\"sect1\">\n  <p><strong>注:</strong> この機能は <a href=\"/ja/docs/Web/API/Web_Workers_API\">Web Worker</a> 内で利用可能です</p>\n</div>\n<p>放送チャンネルは、名前が付けられ、特定のオリジンに結びつけられています。</p>\n<p>基になるチャンネルをリッスンしている <a href=\"/ja/docs/Web/API/BroadcastChannel\"><code>BroadcastChannel</code></a> オブジェクトを作成することで、投稿されたメッセージを受信できます。 興味深い点は、通信したい iframe やワーカーへの参照を維持する必要がもうないということです。 それらは単に <a href=\"/ja/docs/Web/API/BroadcastChannel\"><code>BroadcastChannel</code></a> を構築することによって特定のチャンネルを「購読する（subscribe）」ことができ、それらすべての間で全二重（双方向）通信を行うことができます。</p>\n<p>\n  <img src=\"https://mdn.mozillademos.org/files/9945/BroadcastChannel.png\" alt=\"Broadcast Channel API の原理\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"放送チャンネルのインターフェイス","title":"放送チャンネルのインターフェイス","isH3":false,"content":""}},{"type":"prose","value":{"id":"チャンネルの作成または参加","title":"チャンネルの作成または参加","isH3":true,"content":"<p><code>BroadcastChannel</code> インターフェイスは非常に単純です。 クライアントは <a href=\"/ja/docs/Web/API/BroadcastChannel\"><code>BroadcastChannel</code></a> オブジェクトを作成することによって特定の放送チャンネルに参加します。 <a href=\"/ja/docs/Web/API/BroadcastChannel/BroadcastChannel\" title=\"コンストラクタ\"><code>コンストラクタ</code></a>は、それを識別するために使用する単一のパラメーターである、チャネルの<em>名前</em>を取ります。 放送チャンネルに最初に接続した場合は、基になるリソースが作成されます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 放送チャンネルへの接続</span>\n<span class=\"token keyword\">var</span> bc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BroadcastChannel</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test_channel'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"メッセージの送信","title":"メッセージの送信","isH3":true,"content":"<p>メッセージを投稿するのは簡単です。 <code>BroadcastChannel</code> オブジェクトの <a href=\"/ja/docs/Web/API/BroadcastChannel/postMessage\" title=\"postMessage()\"><code>postMessage()</code></a> メソッドを呼び出すだけで十分です。 このメソッドは任意のオブジェクトを引数として取ります。 非常に単純な例は、次のように <a href=\"/ja/docs/Glossary/String\"><code>DOMString</code></a> テキストメッセージです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 非常に単純なメッセージの送信例</span>\nbc<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'This is a test message.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><a href=\"/ja/docs/Glossary/String\"><code>DOMString</code></a> だけでなく、あらゆる種類のオブジェクトを送信できます。 API は意味論をメッセージに関連付けないため、どのような種類のメッセージを想定し、それをどう処理するかを知るのは、チャネルの参加者次第です。</p>"}},{"type":"prose","value":{"id":"メッセージの受信","title":"メッセージの受信","isH3":true,"content":"<p>メッセージが投稿されると、このチャンネルに接続されている各 <a href=\"/ja/docs/Web/API/BroadcastChannel\"><code>BroadcastChannel</code></a> オブジェクトに <code><a href=\"/ja/docs/Web/Reference/Events/message\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">message</a></code> イベントが送出されます。 デフォルトでは何もしませんが、<a href=\"/ja/docs/Web/API/BroadcastChannel/message_event\" title=\"onmessage\"><code>onmessage</code></a> イベントハンドラを使用して新しい関数を実装できます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// イベントをコンソールに記録するだけの</span>\n<span class=\"token comment\">// 単純なイベントハンドラの例</span>\nbc<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ev</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"チャンネルの切断","title":"チャンネルの切断","isH3":true,"content":"<p>チャネルを去るには、オブジェクトの <a href=\"/ja/docs/Web/API/BroadcastChannel/close\" title=\"close()\"><code>close()</code></a> メソッドを呼び出す必要があります。 これにより、オブジェクトと基になるチャネル間のリンクを切断し、ガベージコレクションをすることができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// チャンネルの切断</span>\nbc<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"結び","title":"結び","isH3":false,"content":"<p>Broadcast Channel API は非常に単純な API であり、自己完結型のインターフェイスによってコンテキスト間通信が可能です。 ユーザーがアカウントにログインしたときなど、同じサイトオリジン環境内の他のタブでユーザーの操作を検出するために使用できます。 メッセージングプロトコルは定義されておらず、さまざまなコンテキストのさまざまなドキュメントがそれ自体を実装する必要があります。 ネゴシエーションも仕様からの要件もありません。</p>"}},{"type":"prose","value":{"id":"仕様","title":"仕様","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>仕様</th>\n      <th>状態</th>\n      <th>コメント</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://html.spec.whatwg.org/multipage/comms.html#broadcasting-to-other-browsing-contexts\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">HTML Living Standard<br><small lang=\"ja\">The Broadcast Channel API の定義</small></a></td>\n      <td><span class=\"spec-living\">現行の標準</span></td>\n      <td>初期定義</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"query":"api.BroadcastChannel","dataURL":"/ja/docs/Web/API/Broadcast_Channel_API/bcd.json"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/API/BroadcastChannel\"><code>BroadcastChannel</code></a>: これを実装するインターフェイス。</li>\n</ul>"}}],"toc":[{"text":"放送チャンネルのインターフェイス","id":"放送チャンネルのインターフェイス"},{"text":"結び","id":"結び"},{"text":"仕様","id":"仕様"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"Broadcast Channel API（放送チャンネル API）を使用すると、閲覧コンテキスト（つまり、ウィンドウ、タブ、フレーム、iframe）間で、同じオリジン（通常は同じサイトのページ）を使用して簡単に通信できます。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Broadcast Channel API","locale":"en-US","native":"English (US)"},{"title":"Broadcast Channel API","locale":"fr","native":"Français"},{"title":"Broadcast Channel API","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/broadcast_channel_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/broadcast_channel_api/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/Broadcast_Channel_API","title":"Broadcast Channel API"}],"pageTitle":"Broadcast Channel API - Web API | MDN","noIndexing":false}}