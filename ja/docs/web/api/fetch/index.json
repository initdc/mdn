{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"WindowOrWorkerGlobalScope.fetch()","mdn_url":"/ja/docs/Web/API/fetch","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/Fetch_API\">Fetch API</a></strong></li><li><strong><a href=\"/ja/docs/Web/API/fetch\"><code>Fetch</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Fetch API に関連するページ</summary><ol><li><a href=\"/ja/docs/Web/API/Headers\"><code>Headers</code></a></li><li><a href=\"/ja/docs/Web/API/Request\"><code>Request</code></a></li><li><a href=\"/ja/docs/Web/API/Response\"><code>Response</code></a></li><li><a href=\"/ja/docs/Web/API/fetch\"><code>fetch()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>fetch()</code></strong> は <a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>WindowOrWorkerGlobalScope</code></a> ミックスインのメソッドで、ネットワークからリソースを取得するプロセスを開始し、レスポンスが利用できるようになったら満足するプロミスを返します。このプロミスはリクエストに対するレスポンスを表す <a href=\"/ja/docs/Web/API/Response\"><code>Response</code></a> で解決します。プロミスは HTTP エラーでは拒否されず、ネットワークエラーでのみ拒否されます。 HTTP エラーをチェックするには、 <code>then</code> ハンドラーを使用する必要があります。</p>\n<p><code>WindowOrWorkerGlobalScope</code> は <a href=\"/ja/docs/Web/API/Window\"><code>Window</code></a> と <a href=\"/ja/docs/Web/API/WorkerGlobalScope\"><code>WorkerGlobalScope</code></a> の両方で実装されています。これはつまり <code>fetch()</code> メソッドはあなたがリソースを取得したいと思うような大部分コンテキストで使用可能ということです。</p>\n<p><a href=\"/ja/docs/Web/API/fetch\" title=\"fetch()\" aria-current=\"page\"><code>fetch()</code></a> のプロミスはネットワークエラーが発生した場合 (すなわち普通はパーミッション問題などがあったとき) のみ拒否されます。 <a href=\"/ja/docs/Web/API/fetch\" title=\"fetch()\" aria-current=\"page\"><code>fetch()</code></a> のプロミスは HTTP エラー (<code>404</code> など) では拒否<em>されません</em>。代わりに、 <code>then()</code> ハンドラーで <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Response/ok\"><code>Response.ok</code> <small>(en-US)</small></a> や <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Response/status\"><code>Response.status</code> <small>(en-US)</small></a> プロパティをチェックする必要があります。</p>\n<p><code>fetch()</code> メソッドは取得するリソースのディレクティブではなく <a href=\"/ja/docs/Web/HTTP/Headers/Content-Security-Policy\">Content Security Policy</a> の <code>connect-src</code> ディレクティブによって制御されます。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> <code>fetch()</code> メソッドの引数は <a href=\"/ja/docs/Web/API/Request/Request\" title=\"Request()\"><code>Request()</code></a> コンストラクターと全く同じです。</p>\n</div>"}},{"type":"prose","value":{"id":"構文","title":"構文","isH3":false,"content":"<pre class=\"notranslate\">const fetchResponsePromise = fetch(resource [, init])\n</pre>"}},{"type":"prose","value":{"id":"引数","title":"引数","isH3":true,"content":"<dl>\n  <dt id=\"resource\"><code>resource</code></dt>\n  <dd>\n    <p>取得したいリソースを定義します。以下の 2 つが使用出来ます。</p>\n    <ul>\n      <li>取得したいリソースの直接の URL を含む <a href=\"/ja/docs/Glossary/String\"><code>USVString</code></a>。ブラウザーによってはスキームとして <code>blob:</code> と <code>data:</code> を受け入れます。</li>\n      <li><a href=\"/ja/docs/Web/API/Request\"><code>Request</code></a> オブジェクト。</li>\n    </ul>\n  </dd>\n  <dt id=\"init\"><code>init</code> <span class=\"badge inline optional\">省略可</span></dt>\n  <dd>\n    <p>リクエストに適用したいカスタム設定を含むオブジェクト。可能なオプションは以下の通りです。</p>\n    <dl>\n      <dt id=\"method\"><code>method</code></dt>\n      <dd>\n        <p>\n          リクエストするメソッド、<code>GET</code>、<code>POST</code> など。なお、 <a href=\"/ja/docs/Web/HTTP/Headers/Origin\"><code>Origin</code></a> ヘッダーは <a href=\"/ja/docs/Web/HTTP/Methods/HEAD\"><code>HEAD</code></a> または <a href=\"/ja/docs/Web/HTTP/Methods/GET\"><code>GET</code></a> メソッドの読み取りリクエストでは設定されません。\n          (この動作は Firefox 65 で修正されました — <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1508661\" class=\"external\" rel=\" noopener\">バグ&nbsp;1508661</a> を参照)\n        </p>\n      </dd>\n      <dt id=\"headers\"><code>headers</code></dt>\n      <dd>\n        <p>リクエストに追加したいヘッダーで、<a href=\"/ja/docs/Web/API/Headers\"><code>Headers</code></a> オブジェクトか <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>ByteString</code></a> 値を持つオブジェクトリテラルで指定してください。なお、<a href=\"/ja/docs/Glossary/Forbidden_header_name\">一部の名前は禁止されています</a>。</p>\n      </dd>\n      <dt id=\"body\"><code>body</code></dt>\n      <dd>\n        <p>リクエストに追加したい本文です。これには <a href=\"/ja/docs/Web/API/Blob\"><code>Blob</code></a>, <a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>BufferSource</code></a>, <a href=\"/ja/docs/Web/API/FormData\"><code>FormData</code></a>, <a href=\"/ja/docs/Web/API/URLSearchParams\"><code>URLSearchParams</code></a>, <a href=\"/ja/docs/Glossary/String\"><code>USVString</code></a>, <a href=\"/ja/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> オブジェクトなどが使用できます。メソッドが <code>GET</code> や <code>HEAD</code> の場合使用できないので注意してください。</p>\n      </dd>\n      <dt id=\"mode\"><code>mode</code></dt>\n      <dd>\n        <p>リクエストで使いたいモードです。例: <code>cors</code>, <code>no-cors</code>, <code>same-origin</code></p>\n      </dd>\n      <dt id=\"credentials\"><code>credentials</code></dt>\n      <dd>\n        <p>リクエストに使用したいリクエスト認証情報、 <code>omit</code>, <code>same-origin</code>, <code>include</code> です。現在のドメインの Cookie を自動で送るためにはこのオプションを指定する必要があります。 Chrome 50 から、このプロパティは<a href=\"/ja/docs/Web/API/FederatedCredential\"><code>FederatedCredential</code></a> インスタンスや <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PasswordCredential\"><code>PasswordCredential</code> <small>(en-US)</small></a> インスタンスを受け付けるようになりました。</p>\n      </dd>\n      <dt id=\"cache\"><code>cache</code></dt>\n      <dd>\n        <p>使用したいリクエストの<a href=\"/ja/docs/Web/API/Request/cache\">キャッシュモード</a>です。</p>\n      </dd>\n      <dt id=\"redirect\"><code>redirect</code></dt>\n      <dd>\n        <p>使用するリダイレクトモードです。 <code>follow</code> (自動でリダイレクトに従う)、 <code>error</code> (リダイレクトが起こった場合エラーを伴って中止する)、 <code>manual</code> (手動でリダイレクトを処理する)。Chrome の既定値は <code>follow</code> です (バージョン 47 より前の既定値は <code>manual</code> でした)。</p>\n      </dd>\n      <dt id=\"referrer\"><code>referrer</code></dt>\n      <dd>\n        <p><a href=\"/ja/docs/Glossary/String\"><code>USVString</code></a> でリクエストのリファラーを指定します。これは同じオリジンの URL、 <code>about:client</code>、空文字列のいずれかを取ることができます。</p>\n      </dd>\n      <dt id=\"referrerpolicy\"><code>referrerPolicy</code></dt>\n      <dd>\n        <p>リクエストで使用する<a href=\"https://w3c.github.io/webappsec-referrer-policy/#referrer-policies\" class=\"external\" rel=\" noopener\">リファラーポリシー</a>を指定します。使用可能な値は、 <code>no-referrer</code>, <code>no-referrer-when-downgrade</code>, <code>same-origin</code>, <code>origin</code>, <code>strict-origin</code>, <code>origin-when-cross-origin</code>, <code>strict-origin-when-cross-origin</code>, or <code>unsafe-url</code> のいずれかです。</p>\n      </dd>\n      <dt id=\"integrity\"><code>integrity</code></dt>\n      <dd>\n        <p>リソースに <a href=\"/ja/docs/Web/Security/Subresource_Integrity\">subresource integrity</a> 値を含ませることが出来ます (例：<code>sha256-BpfBw7ivV8q2jLiT13fxDYAe2tJllusRSZ273h2nFSE=</code>)。</p>\n      </dd>\n      <dt id=\"keepalive\"><code>keepalive</code></dt>\n      <dd>\n        <p><code>keepalive</code> オプションはページより長生きするリクエストを許可するのに使われます。<code>keepalive</code> フラグつきの Fetch は<a href=\"/ja/docs/Web/API/Navigator/sendBeacon\"><code>Navigator.sendBeacon()</code></a> API の置き換えです。</p>\n      </dd>\n      <dt id=\"signal\"><code>signal</code></dt>\n      <dd>\n        <p><a href=\"/ja/docs/Web/API/AbortSignal\"><code>AbortSignal</code></a> オブジェクトのインスタンスです。つまり <a href=\"/ja/docs/Web/API/AbortController\"><code>AbortController</code></a> 経由で fetch リクエストと通信したり望む場合には中止したりできます。</p>\n      </dd>\n    </dl>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"返値","title":"返値","isH3":true,"content":"<p><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code> <small>(en-US)</small></a> で、 <a href=\"/ja/docs/Web/API/Response\"><code>Response</code></a> オブジェクトに解決します。</p>"}},{"type":"prose","value":{"id":"例外","title":"例外","isH3":true,"content":"<dl>\n  <dt id=\"aborterror\"><code>AbortError</code></dt>\n  <dd>\n    <p><a href=\"/ja/docs/Web/API/AbortController\"><code>AbortController</code></a> メソッドまたは <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AbortController/abort\"><code>abort()</code> <small>(en-US)</small></a> メソッドの呼び出しによりリクエストが中止された。</p>\n  </dd>\n  <dt id=\"typeerror\"><code>TypeError</code></dt>\n  <dd>\n    <p>指定された URL がユーザー認証情報を含んでいる。この情報は <a href=\"/ja/docs/Web/HTTP/Headers/Authorization\"><code>Authorization</code></a> ヘッダーを用いて提供するべきです。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":"<p><a href=\"https://github.com/mdn/fetch-examples/tree/master/fetch-request\" class=\"external\" rel=\" noopener\">Fetch Request example</a> リポジトリ (デモ: <a href=\"https://mdn.github.io/fetch-examples/fetch-request/\" class=\"external\" rel=\" noopener\">Fetch Request live</a>) では <a href=\"/ja/docs/Web/API/Request\"><code>Request</code></a> オブジェクトを関連するコンストラクターを使って作成しています。その後 <code>fetch()</code> を呼んで取得しています。画像を fetch している時から適切な MIME タイプを与えるために response の <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Response/blob\"><code>Body.blob</code> <small>(en-US)</small></a> を実行し、適切に処理されます。そして ObjectURL を作成し <a href=\"/ja/docs/Web/HTML/Element/img\"><code>&lt;img&gt;</code></a> 要素に追加して表示させています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> myImage <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> myRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flowers.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>myRequest<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">HTTP error! status: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>response<span class=\"token punctuation\">.</span>status<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> objectURL <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  myImage<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> objectURL<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><a href=\"https://github.com/mdn/fetch-examples/tree/gh-pages/fetch-with-init-then-request/index.html\" class=\"external\" rel=\" noopener\">Fetch with init then Request example</a> リポジトリ (デモ: <a href=\"https://mdn.github.io/fetch-examples/fetch-with-init-then-request/\" class=\"external\" rel=\" noopener\">Fetch Request init live</a>) では上記の内容に加えて、<code>fetch()</code> を呼び出すとき、初期化オブジェクト <code>init</code> を渡しています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> myImage <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> myHeaders <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'image/jpeg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> myInit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> myHeaders<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'cors'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">cache</span><span class=\"token operator\">:</span> <span class=\"token string\">'default'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> myRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flowers.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>myRequest<span class=\"token punctuation\">,</span> myInit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>同様に <code>init</code> オブジェクトを <code>Request</code> コンストラクターに渡しても、同じ効果が得られます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> myRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flowers.jpg'</span><span class=\"token punctuation\">,</span> myInit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>init</code> の <code>headers</code> でオブジェクトリテラルを使用することもできます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> myInit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'image/jpeg'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'cors'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">cache</span><span class=\"token operator\">:</span> <span class=\"token string\">'default'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> myRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flowers.jpg'</span><span class=\"token punctuation\">,</span> myInit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"仕様書","title":"仕様書","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>仕様書</th>\n      <th>状態</th>\n      <th>備考</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://fetch.spec.whatwg.org/#fetch-method\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">Fetch<br><small lang=\"ja\">fetch() の定義</small></a></td>\n      <td><span class=\"spec-living\">現行の標準</span></td>\n      <td>最新の仕様では <code>WindowOrWorkerGlobalScope</code> の中で部分的に定義。</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://fetch.spec.whatwg.org/#dom-global-fetch\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">Fetch<br><small lang=\"ja\">fetch() の定義</small></a></td>\n      <td><span class=\"spec-living\">現行の標準</span></td>\n      <td>初回定義</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://w3c.github.io/webappsec-credential-management/\" hreflang=\"en\" lang=\"en\" class=\"external\" title=\"Credential Management Level 1の仕様書\" rel=\" noopener\">Credential Management Level 1</a></td>\n      <td><span class=\"spec-wd\">草案</span></td>\n      <td><a href=\"/ja/docs/Web/API/FederatedCredential\"><code>FederatedCredential</code></a> または <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PasswordCredential\"><code>PasswordCredential</code> <small>(en-US)</small></a> のインスタンスを <code>init.credentials</code> の値として追加。</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"data":null,"query":"api.WindowOrWorkerGlobalScope.fetch","browsers":null}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/API/Fetch_API\">Fetch API</a></li>\n  <li><a href=\"/ja/docs/Web/API/Service_Worker_API\">ServiceWorker API</a></li>\n  <li><a href=\"/ja/docs/Web/HTTP/CORS\">HTTP access control (CORS)</a></li>\n  <li><a href=\"/ja/docs/Web/HTTP\">HTTP</a></li>\n</ul>"}}],"toc":[{"text":"構文","id":"構文"},{"text":"例","id":"例"},{"text":"仕様書","id":"仕様書"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"fetch() は WindowOrWorkerGlobalScope ミックスインのメソッドで、ネットワークからリソースを取得するプロセスを開始し、レスポンスが利用できるようになったら満足するプロミスを返します。このプロミスはリクエストに対するレスポンスを表す Response で解決します。プロミスは HTTP エラーでは拒否されず、ネットワークエラーでのみ拒否されます。 HTTP エラーをチェックするには、 then ハンドラーを使用する必要があります。","popularity":0.001,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"fetch()","locale":"en-US","native":"English (US)"},{"title":"WindowOrWorkerGlobalScope.fetch()","locale":"es","native":"Español"},{"title":"GlobalFetch.fetch()","locale":"fr","native":"Français"},{"title":"fetch()","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"WindowOrWorkerGlobalScope.fetch()","locale":"ru","native":"Русский"},{"title":"fetch()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/fetch","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/fetch/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/fetch","title":"WindowOrWorkerGlobalScope.fetch()"}],"pageTitle":"WindowOrWorkerGlobalScope.fetch() - Web API | MDN","noIndexing":false}}