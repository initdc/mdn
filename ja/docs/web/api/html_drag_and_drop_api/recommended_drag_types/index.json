{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"推奨されるドラッグのデータ型","mdn_url":"/ja/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/HTML_Drag_and_Drop_API\">HTML Drag and Drop API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>ガイド</summary><ol><li><a href=\"/ja/docs/Web/API/HTML_Drag_and_Drop_API/File_drag_and_drop\">File drag and drop</a></li><li><a href=\"/ja/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations\">Drag operations</a></li><li><a href=\"/ja/docs/Web/API/HTML_Drag_and_Drop_API/Multiple_items\">Dragging and Dropping Multiple Items</a></li><li><a href=\"/ja/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types\">Recommended Drag Types</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>インターフェイス</summary><ol><li><a href=\"/ja/docs/Web/API/DataTransfer\"><code>DataTransfer</code></a></li><li><a href=\"/ja/docs/Web/API/DataTransferItem\"><code>DataTransferItem</code></a></li><li><a href=\"/ja/docs/Web/API/DataTransferItemList\"><code>DataTransferItemList</code></a></li><li><a href=\"/ja/docs/Web/API/DragEvent\"><code>DragEvent</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>イベント</summary><ol><li><a href=\"/ja/docs/Web/API/Document/drag_event\"><code>Document</code>: <code>drag</code></a></li><li><a href=\"/ja/docs/Web/API/Document/dragend_event\"><code>Document</code>: <code>dragend</code></a></li><li><a href=\"/ja/docs/Web/API/Document/dragenter_event\"><code>Document</code>: <code>dragenter</code></a></li><li><a href=\"/ja/docs/Web/API/Document/dragleave_event\"><code>Document</code>: <code>dragleave</code></a></li><li><a href=\"/ja/docs/Web/API/Document/dragover_event\"><code>Document</code>: <code>dragover</code></a></li><li><a href=\"/ja/docs/Web/API/Document/dragstart_event\"><code>Document</code>: <code>dragstart</code></a></li><li><a href=\"/ja/docs/Web/API/Document/drop_event\"><code>Document</code>: <code>drop</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>HTML Drag and Drop API は、プレーンテキスト、URL、HTML コード、ファイルなど、さまざまな形式のデータのドラッグをサポートしています。このドキュメントでは、一般的なドラッグ可能なデータ形式のベストプラクティスについて説明しています。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> <code>mozSetDataAt()</code> のような <code>moz</code> プレフィックスを持つこのドキュメントのすべてのメソッドとプロパティは、Gecko ベースのブラウザでのみ動作します。</p>\n</div>"}},{"type":"prose","value":{"id":"テキストのドラッグ","title":"テキストのドラッグ","isH3":false,"content":"<p>テキストをドラッグする時は、<code>text/plain</code> 型を使用します。2 番目の引数には、ドラッグした文字列を指定します。例えば、以下のようになります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>event<span class=\"token punctuation\">.</span>dataTransfer<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text/plain\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"これはドラッグされるテキストです\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Web ページのテキストボックスや選択範囲の文字列のドラッグは、ブラウザが自動的に処理を行うので、自分で処理する必要はありません。</p>\n<p>そのデータが代替テキストでは表現できない物である場合を除いて、他のデータ形式をサポートしないアプリケーションやドロップ対象のためのフォールバック用に、常に <code>text/plain</code> 型のデータを提供することをおすすめします。そのために、データを追加する時には最後に <code>text/plain</code> 型のデータを登録しておいてください。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> 古いコードにおいて、<code>text/unicode</code> や <code>text</code> といった型の記述を見かけることがあるかもしれません。これらはどちらも <code>text/plain</code> と等しく扱われ、プレーンテキスト型のデータとして登録・取得されます。</p>\n</div>"}},{"type":"prose","value":{"id":"リンクのドラッグ","title":"リンクのドラッグ","isH3":false,"content":"<p>ドラッグされたハイパーリンクには、<code>text/uri-list</code> と <code>text/plain</code> の<em>2 種類</em>のデータを含める必要があります。どちらの形式もリンクの URL をデータに使用しなければなりません。例えば、以下のようになります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> dt <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>dataTransfer<span class=\"token punctuation\">;</span>\ndt<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text/uri-list\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://www.mozilla.org\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndt<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text/plain\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://www.mozilla.org\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>text/uri-list</code> 型のフォールバックとして、<code>text/plain</code> 型を最後に設定します。</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> URL 用の型は <code>uri-list</code> で、L ではなく I であることに注意してください。</p>\n</div>\n<p>複数のリンクをドラッグするには、それぞれのリンクを <code>text/uri-list</code> データ内で CRLF 改行で区切ってください。ナンバー記号 (<code>#</code>) で始まる行はコメントで、有効な URL として扱われません。コメントは、リンクの目的を示したり、リンクに関連づけられたタイトルを保持したりする目的で利用できます</p>\n<div class=\"notecard warning\" id=\"sect4\">\n  <p><strong>Warning:</strong> 複数のリンクのための <code>text/plain</code> 型のフォールバックは、すべての URL を含むべきですが、コメントを含めるべきではありません。</p>\n</div>\n<p>例えば、以下のサンプル <code>text/uri-list</code> データには、2 つのリンクと 1 つのコメントが含まれています。</p>\n<pre class=\"notranslate\">http://www.mozilla.org\n#2つ目のリンク\nhttp://www.example.com\n</pre>\n<p>ドロップされたリンクを取得する時は、コメントを含めて複数のリンクをドラッグした場合の処理を確実に行ってください。便宜上、<code>text/uri-list</code> 型のデータ内の最初の有効なリンクを参照するために、特別な型として <code>URL</code> を使用することができます。</p>\n<div class=\"notecard warning\" id=\"sect5\">\n  <p><strong>Warning:</strong> <code>URL</code> 型でデータを追加しないでください - それを行うと、代わりに <code>text/uri-list</code> 型のデータとして登録されます。</p>\n</div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>dataTransfer<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"URL\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Mozilla 特有の型として、<code>text/x-moz-url</code> 型のデータを見かけることがあるかもしれません。この型が表示される場合は、<code>text/uri-list</code> 型の前に表示されるはずです。この型のデータは、リンクの URL に続いてリンクのタイトルが保持されており。例えば、以下のようになります。</p>\n<pre class=\"notranslate\">http://www.mozilla.org\nMozilla\nhttp://www.example.com\nExample\n</pre>"}},{"type":"prose","value":{"id":"html_と_xml_のドラッグ","title":"HTML と XML のドラッグ","isH3":false,"content":"<p>HTML の内容は <code>text/html</code> 型を使用します。この型のデータはドラッグされる HTML をシリアライズしたものであるべきです。具体的には、この型のデータとして登録されるのに適した値は、要素の <code><a href=\"/ja/docs/Web/API/Element/innerHTML\" title=\"innerHTML\"><code>innerHTML</code></a></code> プロパティの値です。</p>\n<p>XML の内容は <code>text/xml</code> 型を使用することができますが、内容は整形式の XML に変換しておくべきです。</p>\n<p>また、<code>text/plain</code> 型を使用して、HTML または XML のプレーンテキストでの表現を提供することもできます。その場合のデータは単純なテキストであるべきで、タグや属性などのソース文字列を含めるべきではありません。例えば、以下のようになります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> dt <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>dataTransfer<span class=\"token punctuation\">;</span>\ndt<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text/html\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"こんにちは、&lt;strong&gt;見知らぬ人&lt;/strong&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndt<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text/plain\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"こんにちは、見知らぬ人\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"ファイルのドラッグ","title":"ファイルのドラッグ","isH3":false,"content":"<p>ローカルのファイルは <code>application/x-moz-file</code> 型で、 <a href=\"/ja/XPCOM_Interface_Reference/nsIFile\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">nsIFile</a> のオブジェクトとしてドラッグされます。特権を持っていない Web ページでは、この型のデータを取得することも変更することもできません。</p>\n<p>ファイルを文字列にはできないため、データを登録するには <a href=\"/ja/docs/Web/API/DataTransfer/mozSetDataAt\" title=\"mozSetDataAt()\"><code>mozSetDataAt()</code></a> メソッドを使用する必要があります。同様に、データを取得するには <a href=\"/ja/docs/Web/API/DataTransfer/mozGetDataAt\" title=\"mozGetDataAt()\"><code>mozGetDataAt()</code></a> メソッドを使わなくてはなりません。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>event<span class=\"token punctuation\">.</span>dataTransfer<span class=\"token punctuation\">.</span><span class=\"token function\">mozSetDataAt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"application/x-moz-file\"</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>可能であれば、<code>text/uri-list</code> 型と <code>text/plain</code> 型の両方を使ってファイルの URL を含めてください。これらの型は最後に登録されるべきで、それによって、 <code>application/x-moz-file</code> 型は優先度の高い、より適切な型となります。</p>\n<p>複数のファイルは、データ転送中に複数のアイテムとしてドロップ中に受信されます。これについての詳細は、<a href=\"/docs/DragDrop/Dragging_and_Dropping_Multiple_Items\">複数の項目のドラッグ＆ドロップ</a>を参照してください。</p>\n<p>以下の例は、ドロップしたファイルを受信するための領域を作成する方法を示しています。</p>\n<div class=\"code-example\"><pre class=\"brush: xml notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>listbox</span> <span class=\"token attr-name\">ondragenter</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>return checkDrag(event)<span class=\"token punctuation\">\"</span></span>\n         <span class=\"token attr-name\">ondragover</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>return checkDrag(event)<span class=\"token punctuation\">\"</span></span>\n         <span class=\"token attr-name\">ondrop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>doDrop(event)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span>\nfunction checkDrag(event) {\n  return event.dataTransfer.types.contains(\"application/x-moz-file\");\n}\n\nfunction doDrop(event) {\n  var file = event.dataTransfer.mozGetDataAt(\"application/x-moz-file\", 0);\n  if (file instanceof Components.interfaces.nsIFile) {\n    event.currentTarget.appendItem(file.leafName);\n  }\n}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>この例では、データ転送に <code>application/x-moz-file</code> 型が含まれている場合にのみ、イベントが false を返します。ドロップイベントの間、ファイル型に関連付けられたデータが取得され、ファイルのファイル名がリストボックスに追加されます。<a href=\"/ja/docs/Web/API/DataTransfer/mozGetDataAt\" title=\"mozGetDataAt()\"><code>mozGetDataAt()</code></a> メソッドは、<code>nsISupports</code> を返すので、nsIFile 型に変換するために、ここでは <code>instanceof</code> 演算子を使用していることに注意してください。これは、誤ってファイルではない型のデータを登録した場合のためのチェックとしても有効です。</p>"}},{"type":"prose","value":{"id":"datatransfer.types_の更新","title":"DataTransfer.types の更新","isH3":true,"content":"<p>最新の仕様では、<a href=\"/ja/docs/Web/API/DataTransfer/types\"><code>DataTransfer.types</code></a> は <a href=\"/ja/docs/Web/API/DOMStringList\"><code>DOMStringList</code></a> ではなく、<a href=\"/ja/docs/Glossary/String\"><code>DOMString</code></a> で固定した配列を返すようになっています（これは Firefox 52 以上でサポートされています）。</p>\n<p>その結果、<a href=\"/ja/docs/Web/API/Node/contains\">contains</a> メソッドはもう機能しません。代わりに <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\">includes</a> メソッドを使用し、以下のようなコードで特定の形式のデータが提供されているかどうかを確認する必要があります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>event<span class=\"token punctuation\">.</span>dataTransfer<span class=\"token punctuation\">.</span>types<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text/html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 実行するコード</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>特徴検出を使用して、どのメソッドがサポートされている<code>型</code>なのかを判断し、適切なコードを実行することができます。</p>"}},{"type":"prose","value":{"id":"画像のドラッグ","title":"画像のドラッグ","isH3":false,"content":"<p>画像の直接のドラッグは一般的ではありません。そのため、Mozilla は Mac と Linux での画像の直接のドラッグをサポートしていません。その代わり、画像は通常その URL としてドラッグされます。そのためには、他の URL と同様に <code>text/uri-list</code> 型を使用します。データは、画像の URL、または画像が Web 上やディスク上に無い場合は <a href=\"/ja/docs/Web/HTTP/Basics_of_HTTP/Data_URLs\">データ URL</a> である必要があります。</p>\n<p>リンクと同様に、<code>text/plain</code> 型のデータには URL も含まれている必要があります。しかし、<a href=\"/ja/docs/Web/HTTP/Basics_of_HTTP/Data_URLs\">データ URL</a> は通常のテキストの内容には有用ではないので、このような状況では <code>text/plain</code> 型のデータを除外した方がよいでしょう。</p>\n<p>Chrome などの特権的なコードでは、画像の種類に応じて、<code>image/jpeg</code>、<code>image/png</code>、<code>image/gif</code> のいずれかの形式を使用することもできます。データは、<a href=\"/ja/XPCOM_Interface_Reference/nsIInputStream\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">nsIInputStream</a> インターフェースを実装したオブジェクトでなければなりません。このストリームが読み込まれる時には、そのファイル形式での画像のデータビットを提供しなければなりません。</p>\n<p>画像がディスク上にある場合は、<code>application/x-moz-file</code> 型も含める必要があります。実際に、これは画像ファイルをドラッグする一般的なやり方です。</p>\n<p>最も適切なデータ形式からそうでない形式まで、正しい順序でデータを登録することが重要です。最初に <code>image/jpeg</code> のような標準的な画像型を設定し、次に <code>application/x-moz-file</code> 型を設定します。次に、<code>text/uri-list</code> 型を設定し、最後に <code>text/plain</code> 型を設定します。例えば、以下のようになります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> dt <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>dataTransfer<span class=\"token punctuation\">;</span>\ndt<span class=\"token punctuation\">.</span><span class=\"token function\">mozSetDataAt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"image/png\"</span><span class=\"token punctuation\">,</span> stream<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndt<span class=\"token punctuation\">.</span><span class=\"token function\">mozSetDataAt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"application/x-moz-file\"</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndt<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text/uri-list\"</span><span class=\"token punctuation\">,</span> imageurl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndt<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text/plain\"</span><span class=\"token punctuation\">,</span> imageurl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><a href=\"/ja/docs/Web/API/DataTransfer/mozGetDataAt\" title=\"mozGetDataAt()\"><code>mozGetDataAt()</code></a> メソッドは、テキスト以外のデータに使用されることに注意してください。内容によっては、これらの型の一部しか含まれていない場合があるので、ドロップされた画像を受信する時には、どの型が利用可能になっているかを確認することが重要です。</p>"}},{"type":"prose","value":{"id":"ノードのドラッグ","title":"ノードのドラッグ","isH3":false,"content":"<p>ドキュメント内のノードや要素は、<code>application/x-moz-node</code> 型を使ってドラッグすることができます。型のデータは DOM ノードでなければなりません。これにより、ドロップ対象はドラッグが開始された実際のノードを受け取ることができます。ノードがドロップされていても、異なるドメインからの呼び出し元はそのノードにアクセスできないことに注意してください。</p>\n<p>ノードの内容は常に <code>text/plain</code> 型の代替文字列で提供するべきです。</p>"}},{"type":"prose","value":{"id":"独自データのドラッグ","title":"独自データのドラッグ","isH3":false,"content":"<p>独自の目的のために、他の型を使うこともできます。そのデータが特定のサイトやアプリケーションに固有のものでない限り、常に <code>text/plain</code> 型の代替文字列を含めるようにしてください。代替テキストを用意しなかった場合は、他の場所にドロップできなくなります。</p>"}},{"type":"prose","value":{"id":"os_のフォルダにファイルをドラッグ","title":"OS のフォルダにファイルをドラッグ","isH3":false,"content":"<p>既存のドラッグイベントセッションにファイルを追加したり、コードが対象フォルダーの場所の通知を受信したときに、オペレーティングシステム内のフォルダーに対してのドロップ操作だった場合、ファイルをディスクに書き出したい場合があります。これは拡張機能（またはその他の特権コード）でのみ動作し、<code>application/moz-file-promise</code> 型を使用する必要があります。次のサンプルでは、この高度なケースの概要を説明します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// currentEvent is an existing drag operation event</span>\n\ncurrentEvent<span class=\"token punctuation\">.</span>dataTransfer<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text/x-moz-url\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncurrentEvent<span class=\"token punctuation\">.</span>dataTransfer<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"application/x-moz-file-promise-url\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncurrentEvent<span class=\"token punctuation\">.</span>dataTransfer<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"application/x-moz-file-promise-dest-filename\"</span><span class=\"token punctuation\">,</span> leafName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncurrentEvent<span class=\"token punctuation\">.</span>dataTransfer<span class=\"token punctuation\">.</span><span class=\"token function\">mozSetDataAt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'application/x-moz-file-promise'</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token keyword\">new</span> <span class=\"token class-name\">dataProvider</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">,</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> Components<span class=\"token punctuation\">.</span>interfaces<span class=\"token punctuation\">.</span>nsISupports<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">dataProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\ndataProvider<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">QueryInterface</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">iid</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>iid<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>Components<span class=\"token punctuation\">.</span>interfaces<span class=\"token punctuation\">.</span>nsIFlavorDataProvider<span class=\"token punctuation\">)</span>\n                  <span class=\"token operator\">||</span> iid<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>Components<span class=\"token punctuation\">.</span>interfaces<span class=\"token punctuation\">.</span>nsISupports<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">throw</span> Components<span class=\"token punctuation\">.</span>results<span class=\"token punctuation\">.</span><span class=\"token constant\">NS_NOINTERFACE</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">getFlavorData</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">aTransferable<span class=\"token punctuation\">,</span> aFlavor<span class=\"token punctuation\">,</span> aData<span class=\"token punctuation\">,</span> aDataLen</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>aFlavor <span class=\"token operator\">==</span> <span class=\"token string\">'application/x-moz-file-promise'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n       <span class=\"token keyword\">var</span> urlPrimitive <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">var</span> dataSize <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n       aTransferable<span class=\"token punctuation\">.</span><span class=\"token function\">getTransferData</span><span class=\"token punctuation\">(</span><span class=\"token string\">'application/x-moz-file-promise-url'</span><span class=\"token punctuation\">,</span> urlPrimitive<span class=\"token punctuation\">,</span> dataSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> urlPrimitive<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">QueryInterface</span><span class=\"token punctuation\">(</span>Components<span class=\"token punctuation\">.</span>interfaces<span class=\"token punctuation\">.</span>nsISupportsString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"URL file orignal is = \"</span> <span class=\"token operator\">+</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n       <span class=\"token keyword\">var</span> namePrimitive <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n       aTransferable<span class=\"token punctuation\">.</span><span class=\"token function\">getTransferData</span><span class=\"token punctuation\">(</span><span class=\"token string\">'application/x-moz-file-promise-dest-filename'</span><span class=\"token punctuation\">,</span> namePrimitive<span class=\"token punctuation\">,</span> dataSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> namePrimitive<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">QueryInterface</span><span class=\"token punctuation\">(</span>Components<span class=\"token punctuation\">.</span>interfaces<span class=\"token punctuation\">.</span>nsISupportsString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n\n       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"target filename is = \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n       <span class=\"token keyword\">var</span> dirPrimitive <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n       aTransferable<span class=\"token punctuation\">.</span><span class=\"token function\">getTransferData</span><span class=\"token punctuation\">(</span><span class=\"token string\">'application/x-moz-file-promise-dir'</span><span class=\"token punctuation\">,</span> dirPrimitive<span class=\"token punctuation\">,</span> dataSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">var</span> dir <span class=\"token operator\">=</span> dirPrimitive<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">QueryInterface</span><span class=\"token punctuation\">(</span>Components<span class=\"token punctuation\">.</span>interfaces<span class=\"token punctuation\">.</span>nsILocalFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"target folder is = \"</span> <span class=\"token operator\">+</span> dir<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n       <span class=\"token keyword\">var</span> file <span class=\"token operator\">=</span> Cc<span class=\"token punctuation\">[</span><span class=\"token string\">'@mozilla.org/file/local;1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">createInstance</span><span class=\"token punctuation\">(</span>Components<span class=\"token punctuation\">.</span>interfaces<span class=\"token punctuation\">.</span>nsILocalFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       file<span class=\"token punctuation\">.</span><span class=\"token function\">initWithPath</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       file<span class=\"token punctuation\">.</span><span class=\"token function\">appendRelativePath</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"output final path is =\"</span> <span class=\"token operator\">+</span> file<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n       <span class=\"token comment\">// now you can write or copy the file yourself…</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/docs/Web/API/HTML_Drag_and_Drop_API\">HTML Drag and Drop API (Overview)</a></li>\n  <li><a href=\"Web/Guide/HTML/Drag_operations\">Drag Operations</a></li>\n  <li><a href=\"/docs/Web/Guide/HTML/Dragging_and_Dropping_Multiple_Items\">Dragging and Dropping Multiple Items</a></li>\n  <li><a href=\"https://html.spec.whatwg.org/multipage/interaction.html#dnd\" class=\"external\" rel=\" noopener\">HTML5 Living Standard: Drag and Drop</a></li>\n</ul>"}}],"toc":[{"text":"テキストのドラッグ","id":"テキストのドラッグ"},{"text":"リンクのドラッグ","id":"リンクのドラッグ"},{"text":"HTML と XML のドラッグ","id":"html_と_xml_のドラッグ"},{"text":"ファイルのドラッグ","id":"ファイルのドラッグ"},{"text":"画像のドラッグ","id":"画像のドラッグ"},{"text":"ノードのドラッグ","id":"ノードのドラッグ"},{"text":"独自データのドラッグ","id":"独自データのドラッグ"},{"text":"OS のフォルダにファイルをドラッグ","id":"os_のフォルダにファイルをドラッグ"},{"text":"関連情報","id":"関連情報"}],"summary":"HTML Drag and Drop API は、プレーンテキスト、URL、HTML コード、ファイルなど、さまざまな形式のデータのドラッグをサポートしています。このドキュメントでは、一般的なドラッグ可能なデータ形式のベストプラクティスについて説明しています。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Recommended Drag Types","locale":"en-US","native":"English (US)"},{"title":"推荐拖动类型","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/html_drag_and_drop_api/recommended_drag_types","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/html_drag_and_drop_api/recommended_drag_types/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/HTML_Drag_and_Drop_API","title":"HTML ドラッグ＆ドロップ API"},{"uri":"/ja/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types","title":"推奨されるドラッグのデータ型"}],"pageTitle":"推奨されるドラッグのデータ型 - Web API | MDN","noIndexing":false}}