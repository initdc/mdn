{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"ホワイトスペースは HTML、 CSS、そして DOM 内でどう扱われるか","mdn_url":"/ja/docs/Web/API/Document_Object_Model/Whitespace","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/Document_Object_Model\">Document Object Model</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>ガイド</summary><ol><li><a href=\"/ja/docs/Web/API/Document_Object_Model/Introduction\">Introduction to the DOM</a></li><li><a href=\"/ja/docs/Web/API/Document_object_model/Using_the_W3C_DOM_Level_1_Core\">Using the W3C DOM Level 1 Core</a></li><li><a href=\"/ja/docs/Web/API/Document_Object_Model/Traversing_an_HTML_table_with_JavaScript_and_DOM_Interfaces\">Traversing an HTML table with JavaScript and DOM Interfaces</a></li><li><a href=\"/ja/docs/Web/API/Document_object_model/Locating_DOM_elements_using_selectors\">Locating DOM elements using selectors</a></li><li><a href=\"/ja/docs/Web/API/Document_object_model/How_to_create_a_DOM_tree\">How to create a DOM tree</a></li><li><a href=\"/ja/docs/Learn/JavaScript/Building_blocks/Events\">Introduction to events</a></li><li><a href=\"/ja/docs/Web/API/Document_Object_Model/Whitespace\">How whitespace is handled by HTML, CSS, and in the DOM</a></li><li><a href=\"/ja/docs/Web/API/Document_Object_Model/Examples\">Examples of web and XML development using the DOM</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>インターフェイス</summary><ol><li><a href=\"/ja/docs/Web/API/AbortController\"><code>AbortController</code></a></li><li><a href=\"/ja/docs/Web/API/AbortSignal\"><code>AbortSignal</code></a></li><li><a href=\"/ja/docs/Web/API/AbstractRange\"><code>AbstractRange</code></a></li><li><a href=\"/ja/docs/Web/API/Attr\"><code>Attr</code></a></li><li><a href=\"/ja/docs/Web/API/CDATASection\"><code>CDATASection</code></a></li><li><a href=\"/ja/docs/Web/API/CharacterData\"><code>CharacterData</code></a></li><li><a href=\"/ja/docs/Web/API/Comment\"><code>Comment</code></a></li><li><a href=\"/ja/docs/Web/API/CustomEvent\"><code>CustomEvent</code></a></li><li><a href=\"/ja/docs/Web/API/Document\"><code>Document</code></a></li><li><a href=\"/ja/docs/Web/API/DocumentFragment\"><code>DocumentFragment</code></a></li><li><a href=\"/ja/docs/Web/API/DocumentType\"><code>DocumentType</code></a></li><li><a href=\"/ja/docs/Web/API/DOMError\"><code>DOMError</code></a></li><li><a href=\"/ja/docs/Web/API/DOMException\"><code>DOMException</code></a></li><li><a href=\"/ja/docs/Web/API/DOMImplementation\"><code>DOMImplementation</code></a></li><li><a href=\"/ja/docs/Web/API/DOMParser\"><code>DOMParser</code></a></li><li><a href=\"/ja/docs/Web/API/DOMPoint\"><code>DOMPoint</code></a></li><li><a href=\"/ja/docs/Web/API/DOMPointReadOnly\"><code>DOMPointReadOnly</code></a></li><li><a href=\"/ja/docs/Web/API/DOMRect\"><code>DOMRect</code></a></li><li><a href=\"/ja/docs/Web/API/DOMTimeStamp\"><code>DOMTimeStamp</code></a></li><li><a href=\"/ja/docs/Web/API/DOMTokenList\"><code>DOMTokenList</code></a></li><li><a href=\"/ja/docs/Web/API/Element\"><code>Element</code></a></li><li><a href=\"/ja/docs/Web/API/Event\"><code>Event</code></a></li><li><a href=\"/ja/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLCollection\"><code>HTMLCollection</code></a></li><li><a href=\"/ja/docs/Web/API/MutationObserver\"><code>MutationObserver</code></a></li><li><a href=\"/ja/docs/Web/API/NamedNodeMap\"><code>NamedNodeMap</code></a></li><li><a href=\"/ja/docs/Web/API/Node\"><code>Node</code></a></li><li><a href=\"/ja/docs/Web/API/NodeIterator\"><code>NodeIterator</code></a></li><li><a href=\"/ja/docs/Web/API/NodeList\"><code>NodeList</code></a></li><li><a href=\"/ja/docs/Web/API/ProcessingInstruction\"><code>ProcessingInstruction</code></a></li><li><a href=\"/ja/docs/Web/API/Range\"><code>Range</code></a></li><li><a href=\"/ja/docs/Web/API/StaticRange\"><code>StaticRange</code></a></li><li><a href=\"/ja/docs/Web/API/Text\"><code>Text</code></a></li><li><a href=\"/ja/docs/Web/API/TextDecoder\"><code>TextDecoder</code></a></li><li><a href=\"/ja/docs/Web/API/TextEncoder\"><code>TextEncoder</code></a></li><li><a href=\"/ja/docs/Web/API/TimeRanges\"><code>TimeRanges</code></a></li><li><a href=\"/ja/docs/Web/API/TreeWalker\"><code>TreeWalker</code></a></li><li><a href=\"/ja/docs/Web/API/XMLDocument\"><code>XMLDocument</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/ja/docs/Web/API/Document_Object_Model\">DOM</a> にホワイトスペースが存在すると、レイアウトの問題が発生したり、ホワイトスペースがある場所によっては、予期せぬ形でコンテンツツリーの操作が困難になることがあります。この記事では、どのような場合に問題が発生するかを探り、その結果生じる問題を軽減するために何ができるかを見ていきます。</p>"}},{"type":"prose","value":{"id":"ホワイトスペースとは","title":"ホワイトスペースとは","isH3":false,"content":"<p>ホワイトスペースとは、スペース、タブ、改行（正確には、CRLF の並び、キャリッジリターン、行送り）のみで構成されたテキストの文字列のことです。これらの文字を使用することで、自分や他の人が読みやすいようにコードを整形することができます。実際、私たちのソースコードの多くはこれらのホワイトスペースであふれており、コードのダウンロードサイズを減らすために、本番のビルド段階でホワイトスペースを取り除く傾向があります。</p>"}},{"type":"prose","value":{"id":"html_はほとんどホワイトスペースを無視するのか","title":"HTML はほとんどホワイトスペースを無視するのか","isH3":true,"content":"<p>HTML の場合、ホワイトスペースはほとんど無視されます。単語間のホワイトスペースは 1 文字として扱われ、要素の開始と終了、要素外のホワイトスペースは無視されます。以下の最小限の例を見てみましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>      Hello      World!     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>このソースコードには、 <code>DOCTYPE</code> の後に 2 つの改行と <code>&lt;h1&gt;</code> 要素の前後と内部にホワイトスペースの束が含まれていますが、ブラウザーはまったく気にしていないようで、これらの文字が全く存在しないかのように \"Hello World!\" という言葉を表示しています。</p><iframe class=\"sample-code-frame\" title=\"HTML はほとんどホワイトスペースを無視するのか\" id=\"frame_html_largely_ignores_whitespace\" src=\"https://yari-demos.prod.mdn.mozit.cloud/ja/docs/Web/API/Document_Object_Model/Whitespace/_sample_.html_largely_ignores_whitespace.html\" loading=\"lazy\"></iframe>\n<p>これは、ホワイトスペースがページのレイアウトに影響を与えないようにするためです。要素の周囲や内部に余白を作るのは CSS の仕事です。</p>"}},{"type":"prose","value":{"id":"ホワイトスペースに何が起こるのか","title":"ホワイトスペースに何が<em>起こる</em>のか","isH3":true,"content":"<p>しかし、ただ消えるだけではありません。</p>\n<p>元の文書で HTML 要素の外にあるホワイトスペースはすべて DOM で表現されます。これは、エディターが文書の書式を保持するために内部的に必要です。これは、次のことを意味します。</p>\n<ul>\n  <li>ホワイトスペースのみを含むテキストノードが存在し、</li>\n  <li>テキストノードによっては先頭や末尾にホワイトスペースを持つことがある。</li>\n</ul>\n<p>例えば、次の文書を見てください。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>My Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>Header<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n    Paragraph\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>この DOM ツリーは次のように見えます。</p>\n<p>\n  <img src=\"https://mdn.mozillademos.org/files/17084/dom-string.png\" alt=\"上記の HTML の例と同等の DOM ツリー\" loading=\"lazy\">\n</p>\n<p>DOM でホワイトスペースを保存することは多くの点で便利ですが、特定のレイアウトを実装するのが難しくなったり、 DOM 内のノードを反復処理したい開発者にとっては問題が生じたりする場所があります。これらの問題と解決策については、後ほど見ていきましょう。</p>","titleAsText":"ホワイトスペースに何が起こるのか"}},{"type":"prose","value":{"id":"css_はホワイトスペースをどのように処理するのか","title":"CSS はホワイトスペースをどのように処理するのか","isH3":true,"content":"<p>ほとんどのホワイトスペースは無視されますが、すべてが無視されるわけではありません。先ほどの例では、\"Hello\" と \"World!\" の間のホワイトスペースの一つは、ブラウザーでページがレンダリングされたときにまだ存在しています。ブラウザーエンジンには、どのホワイトスペースが有用でどれが不要かを決定する規則があります — これらは、少なくとも <a href=\"https://www.w3.org/TR/css-text-3\" class=\"external\" rel=\" noopener\">CSS テキストモジュールレベル 3</a>、特に <a href=\"https://www.w3.org/TR/css-text-3/#white-space-property\" class=\"external\" rel=\" noopener\">CSS の white-space プロパティ</a>と<a href=\"https://www.w3.org/TR/css-text-3/#white-space-processing\" class=\"external\" rel=\" noopener\">ホワイトスペースの処理の詳細</a>についての部分で規定されていますが、以下ではより簡単な説明を提供します。</p>\n<h4 id=\"例\">例</h4>\n<p>もう一つ、本当に簡単な例を挙げてみましょう。分かりやすいように、すべての空白を ◦ で、すべてのタブを ⇥ で、すべての改行を ⏎ で表現します。</p>\n<p>例を示します。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>   Hello\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">&gt;</span></span> World!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token comment\">&lt;!--\n&lt;h1&gt;◦◦◦Hello◦⏎\n⇥⇥⇥⇥&lt;span&gt;◦World!&lt;/span&gt;⇥◦◦&lt;/h1&gt;\n--&gt;</span>\n</code></pre></div>\n<p>これはブラウザーで次のようにレンダリングされます。</p><iframe class=\"sample-code-frame\" title=\"例\" id=\"frame_example\" src=\"https://yari-demos.prod.mdn.mozit.cloud/ja/docs/Web/API/Document_Object_Model/Whitespace/_sample_.example.html\" loading=\"lazy\"></iframe>\n<h4 id=\"解説\">解説</h4>\n<p><code>&lt;h1&gt;</code> 要素はインライン要素のみを含んでいます。実際にはこのようなものを含んでいます。</p>\n<ul>\n  <li>1 つのテキストノード（いくつかの空白、\"Hello\" という語、いくつかのタブから成る）</li>\n  <li>1 つのインライン要素（<code>&lt;span&gt;</code> で、中に空白と \"World!\" という語を含む）</li>\n  <li>もう 1 つのテキストノード（タブと空白のみから成る）</li>\n</ul>\n<p>このため、<a href=\"/en-US/docs/Web/CSS/Inline_formatting_context\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">インライン整形コンテキスト (en-US)</a>と呼ばれるものを確立します。これは、ブラウザーエンジンが作業を行う存在する可能性のあるレイアウトレンダリングコンテキストの一つです。</p>\n<p>このコンテキストの中では、ホワイトスペース文字の処理は次のように要約されます。</p>\n<ol>\n  <li>まず、改行の直前と直後の空白とタブはすべて無視されるので、以前のマークアップの例を参考にして、この最初の規則を適用すると、次のようになります。\n    <div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>◦◦◦Hello⏎\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">&gt;</span></span>◦World!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>⇥◦◦<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n  </li>\n  <li>次に、タブ文字がすべて空白として扱われるので、この例は次のようになります。\n    <div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>◦◦◦Hello⏎\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">&gt;</span></span>◦World!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>◦◦◦<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n  </li>\n  <li>次に、改行が空白に変換されます。\n    <div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>◦◦◦Hello◦<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">&gt;</span></span>◦World!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>◦◦◦<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n  </li>\n  <li>その後で、空白の直後に他の空白がある場合は（2 つが別々なインライン要素をまたぐ場合も含めて）無視されるので、次のようになります。\n    <div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>◦Hello◦<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">&gt;</span></span>World!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>◦<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n  </li>\n  <li>そして、行頭と行末の一連の空白が削除されるので、ようやくこのようになります。\n    <div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>Hello◦<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">&gt;</span></span>World!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n  </li>\n</ol>\n<p>このため、ウェブページを訪れた人は、ひどく字下げされた \"Hello\" に続いてもっとひどく字下げされた \"World!\" をその下の行に見かけるのではなく、ページの先頭にきれいに書かれた \"Hello World!\" という文言を見ることになります。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> <a href=\"https://firefox-source-docs.mozilla.org/devtools-user/index.html\" class=\"external\" rel=\" noopener\">Firefox DevTools</a> ではバージョン 52 以降、テキストノードの強調表示に対応しており、どのノードにホワイトスペース文字が含まれているかを正確に確認できるようになりました。純粋なホワイトスペースノードには \"whitespace\" ラベルが付けられます。</p>\n</div>"}},{"type":"prose","value":{"id":"ブロック整形コンテキストでのホワイトスペース","title":"ブロック整形コンテキストでのホワイトスペース","isH3":true,"content":"<p>上記では、インライン要素を含む要素と、インライン整形コンテキストについて見てきました。要素が少なくとも 1 つのブロック要素を含んでいる場合は、代わりに<a href=\"/ja/docs/Web/Guide/CSS/Block_formatting_context\">ブロック整形コンテキスト</a>と呼ばれるものが確立されます。</p>\n<p>このコンテキストでは、ホワイトスペースはまったく異なるように扱われます。</p>\n<h4 id=\"例_2\">例</h4>\n<p>例を使ってどのようになるかを見てみましょう。前と同じようにホワイトスペース文字をマークしました。</p>\n<p>ここにはホワイトスペースのみを含む 3 つのテキストノードがあります。 <code>&lt;div&gt;</code> の前に 1 つ、 2 つの <code>&lt;div&gt;</code> の間に 1 つ、 2 つ目の <code>&lt;div&gt;</code> の後に 1 つです。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>  Hello  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>  World!   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token comment\">&lt;!--\n&lt;body&gt;⏎\n⇥&lt;div&gt;◦◦Hello◦◦&lt;/div&gt;⏎\n⏎\n◦◦◦&lt;div&gt;◦◦World!◦◦&lt;/div&gt;◦◦⏎\n&lt;/body&gt;\n--&gt;</span>\n</code></pre></div>\n<p>これは次のように表示されます。</p><iframe class=\"sample-code-frame\" title=\"例\" id=\"frame_example_2\" src=\"https://yari-demos.prod.mdn.mozit.cloud/ja/docs/Web/API/Document_Object_Model/Whitespace/_sample_.example_2.html\" loading=\"lazy\"></iframe>\n<h4 id=\"解説_2\">解説</h4>\n<p>ここでのホワイトスペースの扱いをまとめると、次のようになります（ブラウザーによって正確な動作に若干の違いがあるかもしれませんが、基本的にはうまくいきます）。</p>\n<ol>\n  <li>ブロック整形コンテキスト内にいるため、すべてがブロックでなければなりません。ブロックは幅いっぱいに配置され、互いに積み重ねられるので、最終的にはこのブロックのリストで構成されるレイアウトとなります。\n    <div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>block</span><span class=\"token punctuation\">&gt;</span></span>⏎⇥<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>block</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>block</span><span class=\"token punctuation\">&gt;</span></span>◦◦Hello◦◦<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>block</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>block</span><span class=\"token punctuation\">&gt;</span></span>⏎◦◦◦<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>block</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>block</span><span class=\"token punctuation\">&gt;</span></span>◦◦World!◦◦<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>block</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>block</span><span class=\"token punctuation\">&gt;</span></span>◦◦⏎<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>block</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n  </li>\n  <li>そして、これらのブロックにインライン整形コンテキストにおけるホワイトスペースの処理ルールを適用することで、さらに簡素化されます。\n    <div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>block</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>block</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>block</span><span class=\"token punctuation\">&gt;</span></span>Hello<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>block</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>block</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>block</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>block</span><span class=\"token punctuation\">&gt;</span></span>World!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>block</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>block</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>block</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n  </li>\n  <li>できた 3 つの空のブロックは、最終的なレイアウトでは何も含まれないので、ページ内の空間を占有するブロックは 2 つだけになります。このウェブページを見る人には、 \"Hello\" と \"World!\" という言葉が、 2 つの別々の行にあるように見えます。これは 2 つの <code>&lt;div&gt;</code> が並べられた場合の期待通りです。ブラウザーエンジンは、ソースコードに追加されたすべての空白を基本的に無視しています。</li>\n</ol>"}},{"type":"prose","value":{"id":"インライン要素やインラインブロック要素間の空白","title":"インライン要素やインラインブロック要素間の空白","isH3":false,"content":"<p>次に、ホワイトスペースが原因で発生する可能性のある問題と、それに対する対処法について見ていきましょう。まず、インライン要素やインラインブロック要素の間にある空白がどうなるかを見ていきます。実は、最初の例で、インライン整形コンテキスト内でホワイトスペースがどのように処理されるかを説明したときに、すでにこのことを確認しました。</p>\n<p>ほとんどの文字を無視するルールはありますが、単語を区切る文字は残るという話をしました。 <code>&lt;p&gt;</code> のようなブロックレベル要素のみがある状態で、その中に <code>&lt;em&gt;</code>, <code>&lt;strong&gt;</code>, <code>&lt;span&gt;</code> などのインライン要素のみがある場合、ふつうはレイアウトに含まれる余分なホワイトスペースは、文中の単語を区切るのに役立つからです。</p>\n<p><code>inline-block</code> 要素を使い始めるともっと興味深くなります。この要素は外部的にはインライン要素のように振る舞い、内部的にはブロック要素のようにふるまうので、これを使って例えばナビゲーションメニューのように、テキストだけでないもっと複雑な UI 部品を同じ行に横に並べて表示ことができます。</p>\n<p>ブロックなので、そのような挙動を期待される方が多いのですが、実際はそうではありません。隣接するインライン要素の間に書式のホワイトスペースがある場合、テキストの単語間のスペースと同じように、レイアウトにスペースが発生します。</p>"}},{"type":"prose","value":{"id":"例_3","title":"例","isH3":true,"content":"<p>この例を見てみてください（こちらも HTML のコメントの中で HTML のホワイトスペース文字を示しています）。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">.people-list</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">list-style-type</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.people-list li</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 2em<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 2em<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #f06<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>people-list<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token comment\">&lt;!--\n&lt;ul class=\"people-list\"&gt;⏎\n\n◦◦&lt;li&gt;&lt;/li&gt;⏎\n\n◦◦&lt;li&gt;&lt;/li&gt;⏎\n\n◦◦&lt;li&gt;&lt;/li&gt;⏎\n\n◦◦&lt;li&gt;&lt;/li&gt;⏎\n\n◦◦&lt;li&gt;&lt;/li&gt;⏎\n\n&lt;/ul&gt;\n--&gt;</span>\n</code></pre></div>\n<p>これは次のように表示されます。</p><iframe class=\"sample-code-frame\" title=\"例\" id=\"frame_example_3\" src=\"https://yari-demos.prod.mdn.mozit.cloud/ja/docs/Web/API/Document_Object_Model/Whitespace/_sample_.example_3.html\" loading=\"lazy\"></iframe>\n<p>用途にもよりますが（アバターのリストなのか、水平方向のナビボタンなのか）、おそらくブロック間のすき間は欲しくないのではないかと思います。おそらく要素の側面を互いに同じ高さにし、間隔を自分で制御できるようにしたいのではないでしょうか。</p>\n<p>Firefox DevTools の HTML インスペクターではテキストノードを強調表示し、要素がどの領域を占めているかを正確に表示します。</p>\n<p>\n  <img src=\"/ja/docs/Web/API/Document_Object_Model/Whitespace/whitespace-devtools.png\" alt=\"\" width=\"791\" height=\"453\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"解決策","title":"解決策","isH3":true,"content":"<p>この問題を回避する方法は何通りかあります。</p>\n<p>水平方向の項目のリストを生成するのに、 <code>inline-block</code> による解決法よりも<a href=\"/ja/docs/Learn/CSS/CSS_layout/Flexbox\">フレックスボックス</a>を使用します。これは、あなたに代わってすべてを処理するもので、間違いなく望ましい解決策です。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">ul</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">list-style-type</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>inline-block</code> に頼る必要があるのであれば、そのリストの <a href=\"/ja/docs/Web/CSS/font-size\"><code>font-size</code></a> を 0 にしてください。これは、ブロックのサイズが em で設定されていない場合のみ有効です（ブロックのサイズも<code>font-size</code> に基づいているので、結局 0 になってしまいます）。ここでは rem を使用するといいでしょう。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">ul</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  ...\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">li</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 2rem<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 2rem<span class=\"token punctuation\">;</span>\n  ...\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>または、リスト項目に負のマージンを設定する方法もあります。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">li</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 2rem<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 2rem<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-right</span><span class=\"token punctuation\">:</span> -0.25rem<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>また、この問題は、リスト項目をすべてソースの同じ行に配置し、空白のノードが最初に作成されないようにすることで解決することもできます。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"dom_処理とホワイトスペース","title":"DOM 処理とホワイトスペース","isH3":false,"content":"<p><a href=\"/ja/docs/Web/API/Document_Object_Model\">DOM</a> を JavaScript で操作しようとするとき、ホワイトスペースのノードに起因する問題に遭遇する可能性があります。例えば、親ノードへの参照を持っていて <a href=\"/ja/docs/Web/API/Node/firstChild\"><code>Node.firstChild</code></a> を使用して先頭の子要素を走査しようとした場合、親要素の開始タグの直後に不正なホワイトスペースがあると、予期しない結果になります。このテキストノードが走査したい要素の代わりに選択されてしまうからです。</p>\n<p>別の例として、ある要素のサブセットがあり、それらが空であるかどうか（子ノードがないかどうか）を判断して何かをしたい場合、 <a href=\"/ja/docs/Web/API/Node/hasChildNodes\"><code>Node.hasChildNodes()</code></a> などを使用してそれぞれの要素が空であるかを確認することができますが、やはり対象の要素がテキストノードを含んでいれば、誤った結果になってしまう可能性があります。</p>"}},{"type":"prose","value":{"id":"ホワイトスペースヘルパー関数","title":"ホワイトスペースヘルパー関数","isH3":false,"content":"<p>以下の JavaScript のコードでは、 DOM 内の空白を簡単に処理するためのいくつかの関数を定義しています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/**\n * スクリプト全体で、ホワイトスペースを以下のいずれかの文字として定義しています。\n *  \"\\t\" TAB \\u0009\n *  \"\\n\" LF  \\u000A\n *  \"\\r\" CR  \\u000D\n *  \" \"  SPC \\u0020\n *\n * JavaScript の \\s は非改行スペース (および他のいくつかの文字) を含んでいる為\n * このスクリプトでは使用しません。\n */</span>\n\n<span class=\"token comment\">/**\n * ノードのテキスト内容が完全に空白であるか判断\n *\n * @param nod  CharacterData インターフェイスを実装したノード\n *             (例: Text, Comment, CDATASection ノード)\n * @return     nod のテキスト内容がすべてホワイトスペースであれば true\n *             それ以外は false\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">is_all_ws</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">nod</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ECMA-262 第3版 の String および RegExp の機能を使用</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[^\\t\\n\\r ]</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>nod<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * 反復処理関数がノードを無視するべきかどうか判断\n *\n * @param nod  DOM1 の Node インターフェイスを実装したノード\n * @return     ノードが次のいずれかであれば true:\n *                1) すべてホワイトスペースである Text ノード\n *                2) Comment ノード\n *             それ以外は false\n */</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">is_ignorable</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">nod</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span> nod<span class=\"token punctuation\">.</span>nodeType <span class=\"token operator\">==</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token comment\">// コメントノード</span>\n         <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>nod<span class=\"token punctuation\">.</span>nodeType <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">is_all_ws</span><span class=\"token punctuation\">(</span>nod<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 全空白テキストノード</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * 完全に空白あるいはコメントのノードを無視するようにした previousSibling\n * (通常 previousSibling はすべての DOM ノードが持つプロパティのことで、親が\n * 同じで参照ノードの直前にある兄弟ノードを表します)\n *\n * @param sib  参照ノード\n * @return     次のいずれか:\n *               1) is_ignorable 検査で無視できないと判断された sib に\n *                  最も近い前方の兄弟ノード、あるいは\n *               2) 該当するノードがなければ null\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">node_before</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">sib</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>sib <span class=\"token operator\">=</span> sib<span class=\"token punctuation\">.</span>previousSibling<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_ignorable</span><span class=\"token punctuation\">(</span>sib<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> sib<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * 完全に空白あるいはコメントのノードを無視するようにした nextSibling\n *\n * @param sib  参照ノード\n * @return     次のいずれか:\n *               1) is_ignorable 検査で無視できないと判断された sib に\n *                  最も近い後方の兄弟ノード、あるいは\n *               2) 該当するノードがなければ null\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">node_after</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">sib</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>sib <span class=\"token operator\">=</span> sib<span class=\"token punctuation\">.</span>nextSibling<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_ignorable</span><span class=\"token punctuation\">(</span>sib<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> sib<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * 完全に空白あるいはコメントのノードを無視するようにした lastChild\n * (通常 lastChild はすべての DOM ノードが持つプロパティのことで、参照ノードに\n * 直接含まれる最後のノードを表します)\n *\n * @param sib  参照ノード\n * @return     次のいずれか:\n *               1) is_ignorable 検査で無視できないと判断された sib の\n *                  最後の子供ノード、あるいは\n *               2) 該当するノードがなければ null\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">last_child</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">par</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> res<span class=\"token operator\">=</span>par<span class=\"token punctuation\">.</span>lastChild<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_ignorable</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    res <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>previousSibling<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * 完全に空白あるいはコメントのノードを無視するようにした firstChild\n *\n * @param sib  参照ノード\n * @return     次のいずれか:\n *               1) is_ignorable 検査で無視できないと判断された sib の\n *                  最初の子供ノード、あるいは\n *               2) 該当するノードがなければ null\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">first_child</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">par</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> res<span class=\"token operator\">=</span>par<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_ignorable</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    res <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>nextSibling<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * 最初と最後にホワイトスペースを含まず、すべてのホワイトスペースを単一スペースに正規化する\n * ようにした data\n * (通常 data はテキストノードが持つプロパティのことで、ノードのテキストを\n * 表します)\n *\n * @param txt  data が返されるべきテキストノード\n * @return     当該テキストノードの内容が与えるホワイトスペースを纏めた文字列\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">data_of</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">txt</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> txt<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ECMA-262 第3版 の String および RegExp の機能を使用</span>\n  data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\t\\n\\r ]+</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n    data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n    data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"例_4","title":"例","isH3":false,"content":"<p>次のコードは、上記の関数の使い方を示したものです。これは、ある要素の子（その子はすべて要素）を繰り返し、テキストが <code>\"This is the third paragraph\"</code> であるものを見つけ、 class 属性とその段落の内容を変更するものです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> cur <span class=\"token operator\">=</span> <span class=\"token function\">first_child</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">data_of</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"This is the third paragraph.\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    cur<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">\"magic\"</span><span class=\"token punctuation\">;</span>\n    cur<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">\"This is the magic paragraph.\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  cur <span class=\"token operator\">=</span> <span class=\"token function\">node_after</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}}],"toc":[{"text":"ホワイトスペースとは","id":"ホワイトスペースとは"},{"text":"インライン要素やインラインブロック要素間の空白","id":"インライン要素やインラインブロック要素間の空白"},{"text":"DOM 処理とホワイトスペース","id":"dom_処理とホワイトスペース"},{"text":"ホワイトスペースヘルパー関数","id":"ホワイトスペースヘルパー関数"},{"text":"例","id":"例_4"}],"summary":"DOM にホワイトスペースが存在すると、レイアウトの問題が発生したり、ホワイトスペースがある場所によっては、予期せぬ形でコンテンツツリーの操作が困難になることがあります。この記事では、どのような場合に問題が発生するかを探り、その結果生じる問題を軽減するために何ができるかを見ていきます。","popularity":0.0002,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"How whitespace is handled by HTML, CSS, and in the DOM","locale":"en-US","native":"English (US)"},{"title":"Cómo manejan el espacio en blanco HTML, CSS y el DOM","locale":"es","native":"Español"},{"title":"Gestion des espaces dans le DOM","locale":"fr","native":"Français"},{"title":"Whitespace no DOM","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"DOM 中的空白符","locale":"zh-CN","native":"中文 (简体)"},{"title":"DOM 中的空白字元","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ja/web/api/document_object_model/whitespace","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/document_object_model/whitespace/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/Document_Object_Model","title":"ドキュメントオブジェクトモデル (DOM)"},{"uri":"/ja/docs/Web/API/Document_Object_Model/Whitespace","title":"ホワイトスペースは HTML、 CSS、そして DOM 内でどう扱われるか"}],"pageTitle":"ホワイトスペースは HTML、 CSS、そして DOM 内でどう扱われるか - Web API | MDN","noIndexing":false}}