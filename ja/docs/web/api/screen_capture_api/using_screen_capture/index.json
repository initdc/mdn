{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"画面キャプチャ API の使用","mdn_url":"/ja/docs/Web/API/Screen_Capture_API/Using_Screen_Capture","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/API/Screen_Capture_API\">Screen Capture API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>ガイド</summary><ol><li><a href=\"/ja/docs/Web/API/Screen_Capture_API/Using_Screen_Capture\">Using the Screen Capture API</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>プロパティ</summary><ol><li><a href=\"/ja/docs/Web/API/MediaTrackConstraints/cursor\"><code>MediaTrackConstraints.cursor</code></a></li><li><a href=\"/ja/docs/Web/API/MediaTrackConstraints/displaySurface\"><code>MediaTrackConstraints.displaySurface</code></a></li><li><a href=\"/ja/docs/Web/API/MediaTrackConstraints/logicalSurface\"><code>MediaTrackConstraints.logicalSurface</code></a></li><li><a href=\"/ja/docs/Web/API/MediaTrackSettings/cursor\"><code>MediaTrackSettings.cursor</code></a></li><li><a href=\"/ja/docs/Web/API/MediaTrackSettings/displaySurface\"><code>MediaTrackSettings.displaySurface</code></a></li><li><a href=\"/ja/docs/Web/API/MediaTrackSettings/logicalSurface\"><code>MediaTrackSettings.logicalSurface</code></a></li><li><a href=\"/ja/docs/Web/API/MediaTrackSupportedConstraints/cursor\"><code>MediaTrackSupportedConstraints.cursor</code></a></li><li><a href=\"/ja/docs/Web/API/MediaTrackSupportedConstraints/displaySurface\"><code>MediaTrackSupportedConstraints.displaySurface</code></a></li><li><a href=\"/ja/docs/Web/API/MediaTrackSupportedConstraints/logicalSurface\"><code>MediaTrackSupportedConstraints.logicalSurface</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>メソッド</summary><ol><li><a href=\"/ja/docs/Web/API/MediaDevices/getDisplayMedia\"><code>MediaDevices.getDisplayMedia()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>この記事では、画面キャプチャ API とその <a href=\"/ja/docs/Web/API/MediaDevices/getDisplayMedia\" title=\"getDisplayMedia()\"><code>getDisplayMedia()</code></a> メソッドを使用して、 <a href=\"/ja/docs/Web/API/WebRTC_API\">WebRTC</a> 会議セッション中に画面の一部または全部をストリーミング、録音、共有用に取得する方法を検証していきます。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> 最近のバージョンの <a href=\"https://github.com/webrtcHacks/adapter\" class=\"external\" rel=\" noopener\">WebRTC adapter.js shim</a> には <code>getDisplayMedia()</code> の実装が含まれており、画面共有をサポートしているが現在の標準 API を実装していないブラウザーで画面共有を可能にすることができるので便利かもしれません。これは、少なくとも Chrome、Edge、Firefox で動作します。</p>\n</div>"}},{"type":"prose","value":{"id":"画面の内容のキャプチャ","title":"画面の内容のキャプチャ","isH3":false,"content":"<p>画面の内容をライブの <a href=\"/ja/docs/Web/API/MediaStream\"><code>MediaStream</code></a> でキャプチャするには、 <a href=\"/ja/docs/Web/API/MediaDevices/getDisplayMedia\" title=\"navigator.mediaDevices.getDisplayMedia()\"><code>navigator.mediaDevices.getDisplayMedia()</code></a> を呼び出すことで開始され、ライブ画面の内容を含むストリームに解決するプロミスが返されます。</p>"}},{"type":"prose","value":{"id":"画面キャプチャの開始_asyncawait_スタイル","title":"画面キャプチャの開始: <code>async</code>/<code>await</code> スタイル","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">startCapture</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">displayMediaOptions</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> captureStream <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    captureStream <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function\">getDisplayMedia</span><span class=\"token punctuation\">(</span>displayMediaOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error: \"</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> captureStream<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>このコードは、上記のように非同期関数と <a href=\"/ja/docs/Web/JavaScript/Reference/Operators/await\"><code>await</code></a> 演算子を使うか、下記のように <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> を直接使って記述することができます。</p>","titleAsText":"画面キャプチャの開始: async/await スタイル"}},{"type":"prose","value":{"id":"画面キャプチャの開始_promise_スタイル","title":"画面キャプチャの開始: <code>Promise</code> スタイル","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">startCapture</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">displayMediaOptions</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function\">getDisplayMedia</span><span class=\"token punctuation\">(</span>displayMediaOptions<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error:\"</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>いずれにせよ、<a href=\"/ja/docs/Glossary/User_agent\">ユーザーエージェント</a>は、共有する画面領域を選択するようユーザーに促すユーザーインタフェースを提示して応答します。これらの <code>startCapture()</code> の実装はどちらも、キャプチャされた表示画像を含む <a href=\"/ja/docs/Web/API/MediaStream\"><code>MediaStream</code></a> を返します。</p>\n<p>必要な画面の種類を指定する方法と、結果として得られるストリームを調整する他の方法については、以下の<a href=\"#%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%A8%E5%88%B6%E7%B4%84\">オプションと制約</a>を参照してください。</p>","titleAsText":"画面キャプチャの開始: Promise スタイル"}},{"type":"prose","value":{"id":"キャプチャする表示面を選択するウィンドウの例","title":"キャプチャする表示面を選択するウィンドウの例","isH3":true,"content":"<p><a href=\"Chrome-Screen-Capture-Window.png\"><img src=\"/en-US/docs/Web/API/Screen_Capture_API/Using_Screen_Capture/chrome-screen-capture-window.png\" alt=\"Chrome のソース面を選ぶウィンドウの画面ショット\" width=\"1239\" height=\"1041\" loading=\"lazy\"></a></p>\n<p>そして、キャプチャしたストリーム <code>captureStream</code> を、ストリームを入力として受け付けるあらゆるものに使用することができます。以下の<a href=\"#%E4%BE%8B\">例</a>は、ストリームを利用するためのいくつかの方法を示しています。</p>"}},{"type":"prose","value":{"id":"可視、論理表示面","title":"可視、論理表示面","isH3":true,"content":"<p>画面キャプチャ API の用語では、<strong>表示面</strong>は、共有のために API によって選択できる任意のコンテンツオブジェクトです。共有面には、ブラウザータブのコンテンツ、完全なウィンドウ、 1 つの面に結合されたアプリケーションのすべてのウィンドウ、およびモニター（または 1 つの面に結合されたモニターのグループ）が含まれます。</p>\n<p>表示面には 2 種類あります。<strong>可視表示面</strong>とは、最前面のウィンドウやタブ、あるいは画面全体など、画面上で全体が見える表示面です。</p>\n<p><strong>論理的表示面</strong>とは、他のオブジェクトとある程度重なっていたり、完全に隠れていたり、画面外にあったりして、部分的または完全に隠されているものです。画面キャプチャ API でこれらをどのように処理するかは、さまざまです。一般にブラウザーは、論理的な表示面の隠れた部分をぼかしたり、色やパターンに置き換えたりして、何らかの方法で隠蔽した画像を提供します。これはセキュリティ上の理由から行われるもので、ユーザーが見ることのできないコンテンツには、共有したくないデータが含まれている可能性があるからです。</p>\n<p>ユーザーエージェントは，ユーザから許可を得た上で，不明瞭なウィンドウの全コンテンツのキャプチャを許可するかもしれません。この場合，ユーザーエージェントは，ウィンドウの隠された部分の現在の内容を取得することによって，または現在の内容が利用可能でない場合には最も最近表示された内容を提示することによって，隠された内容を含むことができます。</p>"}},{"type":"prose","value":{"id":"オプションと制約","title":"オプションと制約","isH3":true,"content":"<p><a href=\"/ja/docs/Web/API/MediaDevices/getDisplayMedia\" title=\"getDisplayMedia()\"><code>getDisplayMedia()</code></a> に渡される制約オブジェクトは、結果のストリームを設定するために使用されるオブジェクトです。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> メディア API における制約のほとんどの用途とは異なり、ここでは、ストリーム構成を定義するためにのみ使用され、利用可能な選択肢をフィルタリングするために使用されるわけではありません。</p>\n</div>\n<p><a href=\"/en-US/docs/Web/API/MediaTrackConstraints\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">共有画面トラックのプロパティ (en-US)</a>では、 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaTrackConstraints\"><code>MediaTrackConstraints</code> <small>(en-US)</small></a>、<a href=\"/ja/docs/Web/API/MediaTrackSupportedConstraints\"><code>MediaTrackSupportedConstraints</code></a>、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaTrackSettings\"><code>MediaTrackSettings</code> <small>(en-US)</small></a> に追加された画面キャプチャストリームの構成に関する制約について参照できます。</p>\n<p>キャプチャするコンテンツが選択されるまで、どのような制約も適用されません。制約は、結果のストリームに表示される内容を変更します。</p>\n<p>たとえば、動画に <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaTrackConstraints/width\"><code>width</code> <small>(en-US)</small></a> 制約を指定すると、ユーザーが共有する領域を選択した後に動画を拡大縮小することによって適用されます。ソース自体のサイズに制約を設けるものではありません。</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> 制約によって、画面共有 API でキャプチャ可能なソースのリストが変更されることは決してありません。このため、ウェブアプリケーションでは、1 つの項目が残るまでソース リストを制限することによって、ユーザーに特定のコンテンツを共有するように強制することはできません。</p>\n</div>\n<p>表示のキャプチャが行われている間、画面共有を行っているマシンは、共有が行われていることをユーザーに認識させるために、何らかのインジケーターを表示します。</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>Note:</strong> プライバシーとセキュリティ上の理由から、画面共有のソースは <a href=\"/ja/docs/Web/API/MediaDevices/enumerateDevices\" title=\"enumerateDevices()\"><code>enumerateDevices()</code></a> を使って列挙することができないようになっています。これに関連して、<code>getDisplayMedia()</code> で利用できるソースに変更があった場合も、 <a href=\"/ja/docs/Web/API/MediaDevices/devicechange_event\" title=\"devicechange\"><code>devicechange</code></a> イベントは送信されません。</p>\n</div>"}},{"type":"prose","value":{"id":"共有音声のキャプチャ","title":"共有音声のキャプチャ","isH3":true,"content":"<p><a href=\"/ja/docs/Web/API/MediaDevices/getDisplayMedia\" title=\"getDisplayMedia()\"><code>getDisplayMedia()</code></a> は、ユーザーの画面（またはその一部）の動画をキャプチャするために最も一般的に使用されています。しかし、<a href=\"/ja/docs/Glossary/User_agent\">ユーザーエージェント</a>は、動画コンテンツと一緒に音声のキャプチャを許可する場合があります。この音声のソースは、選択されたウィンドウ、コンピューター全体のオーディオシステム、またはユーザーのマイク（または上記のすべての組み合わせ）であるかもしれません。</p>\n<p>音声の共有が必要なプロジェクトを始める前に、 <a href=\"/ja/docs/Web/API/MediaDevices/getDisplayMedia#browser_compatibility\">Browser compatibility</a> in <a href=\"/ja/docs/Web/API/MediaDevices/getDisplayMedia\"><code>MediaDevices.getDisplayMedia()</code></a> を確認し、互換性を希望するブラウザーがキャプチャした画面ストリームに音声のサポートがあるかどうかを確認してください。</p>\n<p>音声を含む画面の共有を要求するには、 <code>getDisplayMedia()</code> に渡すオプションは次のようになります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> gdmOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これにより、ユーザーエージェントが対応する範囲内で、ユーザーが希望するものを自由に選択することができます。これは、 <code>audio</code> と <code>video</code> のそれぞれに追加の情報を指定することで、さらに改良することができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> gdmOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">cursor</span><span class=\"token operator\">:</span> <span class=\"token string\">\"always\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">echoCancellation</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">noiseSuppression</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">sampleRate</span><span class=\"token operator\">:</span> <span class=\"token number\">44100</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>この例では、カーソルは常にキャプチャで表示され、音声トラックはノイズ抑制とエコーキャンセル機能を有効にし、音声のサンプリングレートは 44.1kHz が理想的です。</p>\n<p>音声のキャプチャは常にオプションです。ウェブコンテンツが音声と動画の両方を含むストリームを要求した場合でも、返される <a href=\"/ja/docs/Web/API/MediaStream\"><code>MediaStream</code></a> は、音声なしの 1 つの動画トラックのみとなる場合があります。</p>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>Note:</strong> プロパティによっては広く実装されておらず、エンジンで使用されない場合もあります。例えば <code>cursor</code> は <a href=\"/en-US/docs/Web/API/MediaTrackConstraints#%e3%83%96%e3%83%a9%e3%82%a6%e3%82%b6%e3%83%bc%e3%81%ae%e4%ba%92%e6%8f%9b%e6%80%a7\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">対応が限定されています (en-US)</a>。</p>\n</div>"}},{"type":"prose","value":{"id":"キャプチャしたストリームの使用","title":"キャプチャしたストリームの使用","isH3":false,"content":"<p><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>promise</code></a> が返す <a href=\"/ja/docs/Web/API/MediaDevices/getDisplayMedia\" title=\"getDisplayMedia()\"><code>getDisplayMedia()</code></a> は、画面または画面領域を含む少なくとも一つの動画ストリームを含み、 <code>getDisplayMedia()</code> が呼ばれたときに指定した制約に基づいて調整またはフィルタリングされた <a href=\"/ja/docs/Web/API/MediaStream\"><code>MediaStream</code></a> に解決されます。</p>"}},{"type":"prose","value":{"id":"セキュリティ","title":"セキュリティ","isH3":false,"content":"<p>ネットワーク上でコンテンツを共有する場合は常にそうですが、画面共有のプライバシーと安全性への影響を考慮することが重要です。</p>"}},{"type":"prose","value":{"id":"潜在的なリスク","title":"潜在的なリスク","isH3":true,"content":"<p>画面共有を取り巻くプライバシーとセキュリティの問題は、通常、それほど深刻ではありませんが、実際に存在します。最も大きな潜在的問題は、ユーザーが共有したくないコンテンツを不注意に共有してしまうことです。</p>\n<p>たとえば、ユーザーが自分の画面を共有しているときに、見えている背景のウィンドウにたまたま個人情報が含まれていたり、パスワードマネージャーが共有ストリームに見えていたりすると、プライバシーやセキュリティの侵害が容易に発生します。論理的な表示面をキャプチャする場合、この影響は増幅される可能性があり、ユーザーは見るどころか、全く知らないコンテンツを含んでいる可能性があります。</p>\n<p>プライバシーを真剣に考えるユーザーエージェントは、特にそのコンテンツを共有する権限が与えられていない限り、画面上に実際に表示されていないコンテンツを難読化する必要があります。</p>"}},{"type":"prose","value":{"id":"表示コンテンツのキャプチャの許可","title":"表示コンテンツのキャプチャの許可","isH3":true,"content":"<p>キャプチャした画面コンテンツのストリーミングを開始する前に、<a href=\"/ja/docs/Glossary/User_agent\">ユーザーエージェント</a>は共有の要求を確認し、共有するコンテンツを選択するようユーザーに要求します。</p>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":""}},{"type":"prose","value":{"id":"単純な画面キャプチャ","title":"単純な画面キャプチャ","isH3":true,"content":"<p>この例では、キャプチャした画面領域の内容を、同じページ内の <a href=\"/ja/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a> 要素にストリーミングしています。</p>\n<h4 id=\"javascript\">JavaScript</h4>\n<p>この機能を実現するために必要なコードはそれほど多くありません。 <a href=\"/ja/docs/Web/API/MediaDevices/getUserMedia\" title=\"getUserMedia()\"><code>getUserMedia()</code></a> を使ってカメラから動画を取り込むことに慣れているなら、 <a href=\"/ja/docs/Web/API/MediaDevices/getDisplayMedia\" title=\"getDisplayMedia()\"><code>getDisplayMedia()</code></a> は非常に身近に感じることでしょう。</p>\n<h5 id=\"セットアップ\">セットアップ</h5>\n<p>まず、アクセスする必要のあるページ上の要素を参照するために、いくつかの定数が設定されます。キャプチャされた画面のコンテンツがストリームされる <a href=\"/ja/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a>、ログ出力が描かれるボックス、画面イメージのキャプチャをオン/オフする開始/停止ボタンがあります。</p>\n<p>オブジェクト <code>displayMediaOptions</code> には <code>getDisplayMedia()</code> に渡す制約が含まれています。ここでは <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaTrackConstraints\"><code>cursor</code> <small>(en-US)</small></a> プロパティを <code>always</code> に設定しており、マウスカーソルを常にキャプチャメディアに含めることを指定しています。</p>\n<div class=\"notecard note\" id=\"sect6\">\n  <p><strong>Note:</strong> プロパティによっては広く実装されておらず、エンジンで使用されないかもしれません。例えば <code>cursor</code> は <a href=\"/en-US/docs/Web/API/MediaTrackConstraints#browser_compatibility\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">サポートが限定されています (en-US)</a>.</p>\n</div>\n<p>最後に、イベントリスナーを設定して、スタートボタンとストップボタンに対するユーザーのクリックを検出します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> videoElem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"video\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> logElem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> startElem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"start\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> stopElem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stop\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Options for getDisplayMedia()</span>\n\n<span class=\"token keyword\">var</span> displayMediaOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">cursor</span><span class=\"token operator\">:</span> <span class=\"token string\">\"always\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Set event listeners for the start and stop buttons</span>\nstartElem<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">startCapture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nstopElem<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">stopCapture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h5 id=\"内容のログ出力\">内容のログ出力</h5>\n<p>エラーやその他の問題のログを簡単に取るために、この例では特定の <a href=\"/ja/docs/Web/API/console\"><code>console</code></a> メソッドをオーバーライドして、そのメッセージを ID が <code>log</code> である <a href=\"/ja/docs/Web/HTML/Element/pre\"><code>&lt;pre&gt;</code></a> ブロックに出力しています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">log</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">msg</span> <span class=\"token operator\">=&gt;</span> logElem<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>msg<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;br&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">error</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">msg</span> <span class=\"token operator\">=&gt;</span> logElem<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;span class=\"error\"&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>msg<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/span&gt;&lt;br&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">warn</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">msg</span> <span class=\"token operator\">=&gt;</span> logElem<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;span class=\"warn\"&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>msg<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;span&gt;&lt;br&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">info</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">msg</span> <span class=\"token operator\">=&gt;</span> logElem<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;span class=\"info\"&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>msg<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/span&gt;&lt;br&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これにより、おなじみの <a href=\"/ja/docs/Web/API/console/log\"><code>console.log()</code></a> や <a href=\"/ja/docs/Web/API/console/error\"><code>console.error()</code></a> などを使って、ドキュメント内のログボックスに情報を記録することができるようになります。</p>\n<h5 id=\"画面キャプチャの開始\">画面キャプチャの開始</h5>\n<p>以下の <code>startCapture()</code> メソッドは、ユーザーが画面上で選択した領域から内容を取得する <a href=\"/ja/docs/Web/API/MediaStream\"><code>MediaStream</code></a> のキャプチャを開始するものです。<code>startCapture()</code> は、 \"Start Capture\" ボタンがクリックされたときに呼び出されます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">startCapture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  logElem<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    videoElem<span class=\"token punctuation\">.</span>srcObject <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function\">getDisplayMedia</span><span class=\"token punctuation\">(</span>displayMediaOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dumpOptionsInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error: \"</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>前回の接続の際に残ったテキストを取り除くためにログの内容をクリアした後、<code>startCapture()</code> は <a href=\"/ja/docs/Web/API/MediaDevices/getDisplayMedia\" title=\"getDisplayMedia()\"><code>getDisplayMedia()</code></a> を呼び出し、そこに <code>displayMediaOptions</code> で定義された制約オブジェクトを渡します。jsxref(\"Operators/await\", \"await\")}} を使用して、次のコード行は <code>getDisplayMedia()</code> が返す <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>promise</code></a> が解決するまで実行されません。解決後、プロミスは <a href=\"/ja/docs/Web/API/MediaStream\"><code>MediaStream</code></a> を返し、ユーザが選択した画面、ウィンドウ、その他の領域の内容をストリームとして出力します。</p>\n<p>このストリームは、返された <code>MediaStream</code> を要素の <a href=\"/ja/docs/Web/API/HTMLMediaElement/srcObject\" title=\"srcObject\"><code>srcObject</code></a> に格納することによって <a href=\"/ja/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a> 要素に接続されています。</p>\n<p><code>dumpOptionsInfo()</code> 関数は、後で見ることになりますが、教育的な目的のために、ストリームに関する情報をログボックスにダンプします。</p>\n<p>もし、どれかが失敗したら、 <a href=\"/ja/docs/Web/JavaScript/Reference/Statements/try...catch\"><code>catch()</code></a> 節は、ログボックスにエラーメッセージを出力します。</p>\n<h5 id=\"画面キャプチャの停止\">画面キャプチャの停止</h5>\n<p><code>stopCapture()</code> メソッドは \"Stop Capture\" ボタンがクリックされたときに呼び出されます。これは <a href=\"/ja/docs/Web/API/MediaStream/getTracks\"><code>MediaStream.getTracks()</code></a> を用いてトラックリストを取得し、各トラックの <a href=\"/ja/docs/Web/API/MediaStreamTrack/stop\" title=\"stop()\"><code>stop()</code></a> メソッドを呼び出してストリームを停止させます。それが終わると、 <code>srcObject</code> に <code>null</code> がセットされ、ストリームが接続されていないことが誰にでも分かるようにします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">stopCapture</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> tracks <span class=\"token operator\">=</span> videoElem<span class=\"token punctuation\">.</span>srcObject<span class=\"token punctuation\">.</span><span class=\"token function\">getTracks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  tracks<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">track</span> <span class=\"token operator\">=&gt;</span> track<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  videoElem<span class=\"token punctuation\">.</span>srcObject <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h5 id=\"設定情報のダンプ\">設定情報のダンプ</h5>\n<p>参考までに、上記の <code>startCapture()</code> メソッドは <code>dumpOptions()</code> という名前のメソッドを呼び出し、現在のトラック設定と、ストリームが作成されたときに設定された制約を出力します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">dumpOptionsInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> videoTrack <span class=\"token operator\">=</span> videoElem<span class=\"token punctuation\">.</span>srcObject<span class=\"token punctuation\">.</span><span class=\"token function\">getVideoTracks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Track settings:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>videoTrack<span class=\"token punctuation\">.</span><span class=\"token function\">getSettings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Track constraints:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>videoTrack<span class=\"token punctuation\">.</span><span class=\"token function\">getConstraints</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>トラックリストは、キャプチャした画面の <a href=\"/ja/docs/Web/API/MediaStream\"><code>MediaStream</code></a> で <a href=\"/ja/docs/Web/API/MediaStream/getVideoTracks\" title=\"getVideoTracks()\"><code>getVideoTracks()</code></a> を呼び出すことで取得します。現在有効な設定は <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaStreamTrack/getSettings\"><code>getSettings()</code> <small>(en-US)</small></a> で、設定されている制約は <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaStreamTrack/getConstraints\"><code>getConstraints()</code> <small>(en-US)</small></a> で取得されます。</p>\n<h4 id=\"html\">HTML</h4>\n<p>HTML は簡単な紹介文から始まり、本題に入ります。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>This example shows you the contents of the selected part of your display.\nClick the Start Capture button to begin.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>start<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Start Capture<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token entity named-entity\" title=\"&nbsp;\">&amp;nbsp;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stop<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Stop Capture<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>video<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">autoplay</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">&gt;</span></span>Log:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pre</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>log<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pre</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>HTML の主要な部分は以下の通りです。</p>\n<ol>\n  <li>\"Start Capture\" と書かれた <a href=\"/ja/docs/Web/HTML/Element/button\"><code>&lt;button&gt;</code></a> は、クリックされると <code>startCapture()</code> 関数を呼び出し、画面コンテンツへのアクセスを要求し、キャプチャを開始します。</li>\n  <li>\"Stop Capture\" というラベルの付いた 2 番目のボタンがあり、クリックされると <code>stopCapture()</code> を呼び出して画面のコンテンツのキャプチャを終了します。</li>\n  <li>キャプチャされた画面の内容がストリームされる <a href=\"/ja/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a>。</li>\n  <li><a href=\"/ja/docs/Web/HTML/Element/pre\"><code>&lt;pre&gt;</code></a> ブロック。この中では、インターセプトされた <a href=\"/ja/docs/Web/API/console\"><code>console</code></a> メソッドによってログが記録されます。</li>\n</ol>\n<h4 id=\"css\">CSS</h4>\n<p>この例では、 CSS は完全に外観上のものです。動画には境界線が付けられ、その幅は利用可能な水平方向のスペースのほぼ全体を占めるように設定されています (<code>width: 98%</code>)。 <a href=\"/ja/docs/Web/CSS/max-width\"><code>max-width</code></a> には <code>860px</code> を設定し、動画のサイズに絶対的な上限を設定しています。</p>\n<p><code>error</code>、<code>warn</code>、<code>info</code> クラスは、対応するコンソール出力の種類をスタイル設定するために使用されます。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">#video</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid #999<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 98%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 860px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.error</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.warn</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> orange<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.info</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> darkgreen<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"結果\">結果</h4>\n<p>最終的にはこのようになります。ブラウザーが画面キャプチャ API に対応している場合、\"Start Capture\" をクリックすると、共有する画面、ウィンドウ、タブを選択するための<a href=\"/ja/docs/Glossary/User_agent\">ユーザーエージェント</a>のインターフェイスが表示されます。</p><iframe class=\"sample-code-frame\" title=\"単純な画面キャプチャ\" id=\"frame_simple_screen_capture\" width=\"640\" height=\"680\" src=\"https://yari-demos.prod.mdn.mozit.cloud/ja/docs/Web/API/Screen_Capture_API/Using_Screen_Capture/_sample_.simple_screen_capture.html\" allow=\"display-capture\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"セキュリティ_2","title":"セキュリティ","isH3":false,"content":"<p><a href=\"/ja/docs/Web/HTTP/Feature_Policy\">機能ポリシー</a>が有効なときに機能させるためには、 <code>display-capture</code> 権限が必要です。これは <a href=\"/ja/docs/Web/HTTP/Headers/Feature-Policy\"><code>Feature-Policy</code></a> を用いて行うことができます。または、画面キャプチャ API を <a href=\"/ja/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code></a> 内で使用している場合は、 <code>&lt;iframe&gt;</code> 要素の <a href=\"/ja/docs/Web/HTML/Element/iframe#attr-allow\"><code>allow</code></a> 属性を使用します。</p>\n<p>例えば、 HTTP ヘッダーのこの行は、文書と同じオリジンから読み込まれる埋め込み <a href=\"/ja/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code></a> 要素の画面キャプチャ API を有効にします。</p>\n<pre class=\"notranslate\">Feature-Policy: display-capture 'self'\n</pre>\n<p>もし <code>&lt;iframe&gt;</code> 内で画面キャプチャを行うのであれば、そのフレームに対してのみ許可を要求することができ、より一般的な許可を要求するよりも明らかに安全です。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://mycode.example.net/etc<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">allow</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>display-capture<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"query":"api.MediaDevices.getDisplayMedia","dataURL":"/ja/docs/Web/API/Screen_Capture_API/Using_Screen_Capture/bcd.json"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/API/Screen_Capture_API\">画面キャプチャ API</a></li>\n  <li><a href=\"/ja/docs/Web/API/Media_Capture_and_Streams_API\">メディアキャプチャとストリーム API</a></li>\n  <li><a href=\"/en-US/docs/Web/API/Media_Capture_and_Streams_API/Taking_still_photos\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">WebRTC で静止画の写真を撮影 (en-US)</a></li>\n  <li><a href=\"/ja/docs/Web/API/HTMLCanvasElement/captureStream\"><code>HTMLCanvasElement.captureStream()</code></a> で <a href=\"/ja/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a> のライブコンテンツの <a href=\"/ja/docs/Web/API/MediaStream\"><code>MediaStream</code></a> を取得できる</li>\n</ul>"}}],"toc":[{"text":"画面の内容のキャプチャ","id":"画面の内容のキャプチャ"},{"text":"キャプチャしたストリームの使用","id":"キャプチャしたストリームの使用"},{"text":"セキュリティ","id":"セキュリティ"},{"text":"例","id":"例"},{"text":"セキュリティ","id":"セキュリティ_2"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"この記事では、画面キャプチャ API とその getDisplayMedia() メソッドを使用して、 WebRTC 会議セッション中に画面の一部または全部をストリーミング、録音、共有用に取得する方法を検証していきます。","popularity":0.0003,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using the Screen Capture API","locale":"en-US","native":"English (US)"},{"title":"Использование интерфейса Screen Capture API","locale":"ru","native":"Русский"},{"title":"使用屏幕捕获 API","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/api/screen_capture_api/using_screen_capture","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/api/screen_capture_api/using_screen_capture/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/API","title":"Web API"},{"uri":"/ja/docs/Web/API/Screen_Capture_API","title":"画面キャプチャ API"},{"uri":"/ja/docs/Web/API/Screen_Capture_API/Using_Screen_Capture","title":"画面キャプチャ API の使用"}],"pageTitle":"画面キャプチャ API の使用 - Web API | MDN","noIndexing":false}}