{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"名前空間の速修講座","mdn_url":"/ja/docs/Web/SVG/Namespaces_Crash_Course","locale":"ja","native":"日本語","sidebarHTML":"","body":[{"type":"prose","value":{"id":"導入","title":"導入","isH3":true,"content":"<p><a href=\"/ja/docs/Glossary/XML\">XML</a> の派生言語として、 <a href=\"/ja/docs/Web/SVG\">SVG</a> は名前空間付けられています。もしあなたが SVG コンテンツを作成する予定なら名前空間の概念と使い方を理解することは重要です。 Firefox 1.5 リリースより前の幾つかのバージョンの SVG ビューワは残念ながら名前空間に対して十分な注意を払いませんが、 とても厳格でなくてならない <a href=\"/ja/docs/Glossary/Gecko\">Gecko</a> ベースのブラウザのようなユーザエージェントが複数の XML 派生言語をサポートするために不可欠です。今、名前空間を理解するためにいくらかの時間をとり、将来頭を悩ませる時間を節約しましょう。</p>"}},{"type":"prose","value":{"id":"背景","title":"背景","isH3":true,"content":"<p>異なった種類の XML ベースのコンテンツが同じ XML ファイルの中で一緒に混ざるのを可能にするのことは W3C の長年の目標です。 例えば、SVG と MathML は直接 XHTML ベースの科学ドキュメントに組み込まれるかもしれません。このようなコンテンツ タイプを混ぜることが可能にすることは、多くの利点がありますが、解決するために非常に大問題を要しました。</p>\n<p>当然、それぞれの XML 派生言語は仕様で述べたマークアップタグ名の意味を定義します。 1 つの XML ドキュメントに異なった XML 派生言語のコンテンツを混ぜることによる問題は 別の派生言語が 1 つの派生言語によって定義されたタグと同じ名前のタグを定義するかもしれないということです。 例えば、XHTML と SVG の両方には、<code>&lt;title&gt;</code> タグがあります。 事実、ユーザエージェントはどうやって XML コンテンツが(あらかじめ)知っているものであるとき時に、単なる未知の任意のタグ名を含む無意味な XML ファイルでないと言えますか?</p>\n<p>一般的な意見とは逆に、この質問の答えは「<code>DOCTYPE</code> 宣言から伝えることができる」ではありません。 DTD は混ぜられたコンテンツを念頭におかれて設計されませんでした、そして現在、複雑な混ぜられた DTD を作成する過去の試みが失敗したと考えられます。 XML、およびいくつかの XML 派生言語(SVG を含む)は DOCTYPE 宣言を必要とせず、そして SVG 1.2 は一つも持たないでしょう。<code>DOCTYPE</code> 宣言 が (普通) 一種類のコンテンツ タイプのファイルに一致するという事実は単なる偶然の一致です。DTD は内容の識別ではなく、ヴァリデーションためだけのものです。 <code>DOCTYPE</code> 宣言を使用することで XML コンテンツをだまし、特定するユーザエージェントは害を引き起こします。</p>\n<p>その質問の本当の答えは XML コンテンツがユーザエージェントにどの派生言語にそのタグが属しているかを 明確な「名前空間宣言」をタグに与えるで伝えるというものです。</p>"}},{"type":"prose","value":{"id":"名前空間を宣言する","title":"名前空間を宣言する","isH3":true,"content":"<p>それでは、名前空間宣言はどのように見える、何所におくのでしょうか? 短い例があります。</p>\n<pre class=\"notranslate\">&lt;svg xmlns=\"http://www.w3.org/2000/svg\"&gt;\n  &lt;!-- ここに更なるタグ --&gt;\n&lt;/svg&gt;\n</pre>\n<p>名前空間宣言は <code>xmlns</code> 属性によって提供されます。この属性は <code>&lt;svg&gt;</code> タグとその子供タグは名前空間名'http://www.w3.org/2000/svg'を持っている いずれかの XML 派生言語に属すると言っています。もちろん、それは SVG です。名前空間宣言はルート要素で一度のみ提供されることが必要なことに注意してください。その宣言は <em>標準</em>の名前空間を定義するので、ユーザエージェントは <code>&lt;svg&gt;</code> タグの全ての子孫タグが同じ名前空間に属することが分かります。ユーザエージェントはそのマークアップアップの処理方を知っているか確かめるために名前空間名をチェックします。</p>\n<p>名前空間名はただの文字列であることに注意してください。つまり SVG 名前空間名も URI のように見えますが重要ではありません。 URI は一意なので、一般的に使用されて、どこかに「リンク」する意志はありません。 (実際 URI が非常に頻繁に使用されるので、「名前空間 URI」という用語は「名前空間名」の代わりに一般的に使われます。)</p>\n<h4 id=\"デフォルト名前空間を再宣言する\">デフォルト名前空間を再宣言する</h4>\n<p>もしルートタグの全ての子孫がデフォルト名前空間にあると定義されているなら、他の名前空間のコンテンツを混ぜるにはどうしたら良いのでしょう ? 簡単です。デフォルト名前空間を再定義するだけです。短い例があります</p>\n<pre class=\"notranslate\">&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n  &lt;body&gt;\n    &lt;!-- ここに幾つか XHTML タグ --&gt;\n    &lt;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"300px\" height=\"200px\"&gt;\n      &lt;!-- ここに幾つか SVG タグ --&gt;\n    &lt;/svg&gt;\n    &lt;!--ここに幾つか XHTML タグ --&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>この例でルート <code>&lt;html&gt;</code> タグの <code>xmlns</code> 属性はデフォルト名前空間が XHTML であるように宣言しています。結果として、ユーザエージェントによってそれとその全ての子供のタグは XHTML に属するものとして解釈されます、<code>&lt;svg&gt;</code> タグを除いて。<code>&lt;svg&gt;</code> タグは自身の <code>xmlns</code> 属性を持ち、デフォルト名前空間を再定義することで、ユーザエージェントに <code>&lt;svg&gt;</code> とその子孫(それらが再びデフォルト名前空間を再宣言しない限り)が SVG に属していることを伝えます。</p>\n<p>見て、名前空間って全然難しくないでしょう。</p>\n<h4 id=\"名前空間接頭辞を宣言する\">名前空間接頭辞を宣言する</h4>\n<p>XML 派生言語は自身のタグだけではなく、自身の属性も定義します。 標準では、名前空間を全く持たず、ユニークな名前を持っている要素に現れるので、属性がユニークであるとだけ知られています。 しかし、時々多くの異なった要素の上でそれらを再利用することができるように属性を定義して、それらが使用されている要素に関わらず同じ属性であるとなおも考えられることが必要です。 これのとても良い例は XLink 仕様で定義された <code>href</code> 属性です。 この属性は外部のリソースにリンクする方法として他の XML 派生言語によって一般的に使用されます。 しかし、あなたはどうやってその属性がどの派生言語、この場合 XLink 、 に属するとユーザエージェントに伝えますか? 以下の例を考えてください。</p>\n<pre class=\"notranslate\">&lt;svg xmlns=\"http://www.w3.org/2000/svg\"\n     xmlns:xlink=\"http://www.w3.org/1999/xlink\"&gt;\n  &lt;script xlink:href=\"cool-script.js\" type=\"text/ecmascript\"/&gt;\n&lt;/svg&gt;\n</pre>\n<p>この例はかなり珍しい属性 <code>xmlns:xlink</code> を含んでいます。 最初の 'xmlns' 部分から推測できるように、これは別の名前空間宣言です。しかしながら、デフォルト名前空間を設定する代わりに、この名前空間宣言は「名前空間接頭辞」と呼ばれるものに名前空間を設定します。 この場合、私たちは接頭辞 <code>xlink</code> (2 つめの部分)を使用することを選びました。その接頭辞が XLink に属する属性についてユーザエージェントに伝えるのに使用されるためです。</p>\n<p>名前が示すように、名前空間接頭辞は属性名とタグ名の前に置くのに使用されます。 これは上の例で &lt;script&gt; タグに示されるように属性名より前に名前空間接頭語とコロンを加えることで行われます。 これは特定の属性が名前空間接頭辞(XLink)に割り当てられた名前空間に属すことをユーザエージェントに伝え、他のタグにおいても同じ意味で使用することができる属性です。</p>\n<p>名前空間名に関連付けられていな接頭辞の利用による XML エラーに注意してください。上の例で <code>xmlns:xlink</code> 属性によって作られた関連付けは <code>xlink:href</code> 属性がエラーに引き起こさないために必要不可欠です。この XLink 属性は SVG の <code>&lt;a&gt;</code> と <code>&lt;use&gt;</code>, <code>&lt;image&gt;</code> タグや他のタグでも頻繁に使われるので、常にドキュメントに XLink の宣言を含めることは良い考えです。</p>\n<p>余談として、タグ名に名前空間接頭語を使用することができるのを知っていると役に立ちます。これは特定のタグ(しかし今回の子供ではありません!)が接頭辞に割り当てられた名前空間に属することをユーザエージェントに伝えます。 これを知っていることは、あなたが以下の例のようなマークアップに出くわしたときの混乱を節約するでしょう:</p>\n<pre class=\"notranslate\">&lt;html\n xmlns=\"http://www.w3.org/1999/xhtml\"\n      xmlns:svg=\"http://www.w3.org/2000/svg\"&gt;\n  &lt;body&gt;\n    &lt;h1&gt;XHTML にインラインで埋め込まれた SVG &lt;/h1&gt;\n    &lt;svg:svg width=\"300px\" height=\"200px\"&gt;\n      &lt;svg:circle cx=\"150\" cy=\"100\" r=\"50\" fill=\"#ff0000\"/&gt;\n    &lt;/svg:svg&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p><code>&lt;svg:svg&gt;</code> タグとその子供の <code>&lt;svg:circle&gt;</code> に名前空間接頭辞が使われているので、デフォルト名前空間を再宣言する必要が無いことに注意してください。一般にこの方法で沢山のタグに接頭辞をつけるよりもデフォルト名前空間を再宣言した方が良いです。</p>"}},{"type":"prose","value":{"id":"名前空間付けられた_xml_でのスクリプティング","title":"名前空間付けられた XML でのスクリプティング","isH3":true,"content":"<p>名前空間はマークアップだけでなく、スクリプティングにも影響します。もし SVG のような 名前空間付けられた XML 用のスクリプトを書くなら次をお読みください。</p>\n<p><a href=\"https://www.w3.org/TR/REC-DOM-Level-1/\" class=\"external\" rel=\" noopener\">DOM Level 1</a> 勧告はオリジナルの <a href=\"https://www.w3.org/TR/REC-xml-names/\" class=\"external\" rel=\" noopener\">original Namespaces in XML</a> 勧告がリリースされる前に作られたので、DOM1 は名前空間を認識しません。これは SVG のような 名前空間付けられた XML で問題を引き起こします。それらの問題を解決するために <a href=\"https://www.w3.org/TR/DOM-Level-2-Core/\" class=\"external\" rel=\" noopener\">DOM Level 2 Core</a> は全て DOM Level1 メソッドの適切な名前空間を認識している同等のメソッドを加えました。SVG でスクリプティングをするとき、<a href=\"https://www.w3.org/TR/DOM-Level-2-Core/core.html#Namespaces-Considerations\" class=\"external\" rel=\" noopener\">名前空間を認識しているメソッドを使うことが大切です</a>。下の表は SVG と一緒に使うべきではない DOM 1 メソッドと代わりに使うべき同等な DOM2 の対応するメソッドをリストしています。</p>\n<table>\n  <thead>\n    <tr>\n      <th>DOM1 (使わないで下さい)</th>\n      <th>DOM2 (代わりにこれらを使ってください!)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#method-createAttribute\" class=\"external\" rel=\" noopener\">createAttribute</a></td>\n      <td><a href=\"https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-DocCrAttrNS\" class=\"external\" rel=\" noopener\">createAttributeNS</a></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#method-createElement\" class=\"external\" rel=\" noopener\">createElement</a></td>\n      <td><a href=\"https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-DocCrElNS\" class=\"external\" rel=\" noopener\">createElementNS</a></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#method-getAttributeNode\" class=\"external\" rel=\" noopener\">getAttributeNode</a></td>\n      <td><a href=\"https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-ElGetAtNodeNS\" class=\"external\" rel=\" noopener\">getAttributeNodeNS</a></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#method-getAttribute\" class=\"external\" rel=\" noopener\">getAttribute</a></td>\n      <td><a href=\"https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-ElGetAttrNS\" class=\"external\" rel=\" noopener\">getAttributeNS</a></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#method-getElementsByTagName\" class=\"external\" rel=\" noopener\">getElementsByTagName</a></td>\n      <td><a href=\"https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-getElBTNNS\" class=\"external\" rel=\" noopener\">getElementsByTagNameNS</a> (<a href=\"https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-A6C90942\" class=\"external\" rel=\" noopener\">要素にも追加されました</a>)</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#method-getNamedItem\" class=\"external\" rel=\" noopener\">getNamedItem</a></td>\n      <td><a href=\"https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-getNamedItemNS\" class=\"external\" rel=\" noopener\">getNamedItemNS</a></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#\" class=\"external\" rel=\" noopener\">hasAttribute</a></td>\n      <td><a href=\"https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-ElHasAttrNS\" class=\"external\" rel=\" noopener\">hasAttributeNS</a></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#method-removeAttribute\" class=\"external\" rel=\" noopener\">removeAttribute</a></td>\n      <td><a href=\"https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-ElRemAtNS\" class=\"external\" rel=\" noopener\">removeAttributeNS</a></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#method-removeNamedItem\" class=\"external\" rel=\" noopener\">removeNamedItem</a></td>\n      <td><a href=\"https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-removeNamedItemNS\" class=\"external\" rel=\" noopener\">removeNamedItemNS</a></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#method-setAttribute\" class=\"external\" rel=\" noopener\">setAttribute</a></td>\n      <td><a href=\"https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-ElSetAttrNS\" class=\"external\" rel=\" noopener\">setAttributeNS</a></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#method-setAttributeNode\" class=\"external\" rel=\" noopener\">setAttributeNode</a></td>\n      <td><a href=\"https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-ElSetAtNodeNS\" class=\"external\" rel=\" noopener\">setAttributeNodeNS</a></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#method-setNamedItem\" class=\"external\" rel=\" noopener\">setNamedItem</a></td>\n      <td><a href=\"https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-setNamedItemNS\" class=\"external\" rel=\" noopener\">setNamedItemNS</a></td>\n    </tr>\n  </tbody>\n</table>\n<p>全ての DOM2 の名前空間を認識しているメソッドの最初の引数は問題になっている要素か属性の名前空間名(名前空間 URI としても知らています) で無ければなりません。SVG <strong>要素</strong> のためには、これは 'http://www.w3.org/2000/svg' です。しかし、よく注意してください:<a href=\"https://www.w3.org/TR/xml-names11/#defaulting\" class=\"external\" rel=\" noopener\">Namespaces in XML 1.1</a> 仕様は接頭辞無しの属性の名前空間名は値をもっていません。言い替えると、そのタグの名前空間であっても、そのタグの名前空間を使わないということです。 代わりに<strong>無条件の(接頭辞無し)属性の名前空間名として <code>null</code> を使わなくてはなりません</strong>。つまり <code>document.createElementNS()</code> を使い SVG <code>rect</code> <em>要素</em>を作るには、こう書かなくてはなりません:</p>\n<pre class=\"notranslate\">document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n</pre>\n<p>しかし、SVG の <code>rect</code> 要素の <code>x</code> <em>属性</em>の値を取り出すにはこう書かなくてはなりません:</p>\n<pre class=\"notranslate\">rect.getAttributeNS(null, 'x');\n</pre>\n<p>これは名前空間接頭辞)<em>付き</em>の属性(タグと同じ XML 派生言語に属していない属性)はこの限りではないことに注意してください。xlink:href 属性の様な属性はその接頭辞に割り当てられた名前空間名(XLink は <code>http://www.w3.org/1999/xlink</code>)が必要です。従って SVG の <code>&lt;a&gt;</code> 要素の <code>xlink:href</code> 属性の値を手に入れるにはこう書くでしょう:</p>\n<pre class=\"notranslate\">elt.getAttributeNS('http://www.w3.org/1999/xlink', 'href');\n</pre>\n<p>名前空間を持った属性を設定するときに、後で DOM がより簡単に XML に変換できるように(例えばもしそれをサーバに送り返したいなら)、それらの接頭辞を 2 番目の引数にも含めることが推奨されます(が強制ではありません)。例:</p>\n<pre class=\"notranslate\">elt.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', 'otherdoc.svg');\n</pre>\n<p>最後の例として、どうやってスクリプトを使って &lt;image&gt; 要素を動的に作るべきか実演を示します。</p>\n<pre class=\"notranslate\">var SVG_NS = 'http://www.w3.org/2000/svg';\nvar XLink_NS = 'http://www.w3.org/1999/xlink';\nvar image = document.createElementNS(SVG_NS, 'image');\nimage.setAttributeNS(null, 'width', '100');\nimage.setAttributeNS(null, 'height', '100');\nimage.setAttributeNS(XLink_NS, 'xlink:href', 'flower.png');\n</pre>"}},{"type":"prose","value":{"id":"まとめ","title":"まとめ","isH3":true,"content":"<p>常にあなたの XML ファイルの中で使う名前空間が宣言されているか確認してください。もしそうしていないと、Firefox のようなユーザエージェントはコンテンツを理解せずに単に XML マークアップを表示するか、ユーザに XML の中にエラーが有ることを伝えます。全新しい SVG ファイルを作る時、全ての一般的に使う名前空間宣言を含んだテンプレートを使うことは良い考えです。もしまだ持っていなければ、次のコードで作り始めてください</p>\n<pre class=\"notranslate\">&lt;svg version=\"1.1\"\n     baseProfile=\"full\"\n     xmlns=\"http://www.w3.org/2000/svg\"\n     xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n     xmlns:ev=\"http://www.w3.org/2001/xml-events\"&gt;\n&lt;/svg&gt;\n</pre>\n<p>あなたが特定のドキュメントでそれら全ての名前空間を使用しなくても、名前空間宣言を含んで全く害はありません。 後日、未使用の名前空間の 1 つをコンテンツに結局加えるなら、それはいくつかの煩わしいエラーから救ってくれるかもしれません。</p>"}},{"type":"prose","value":{"id":"完全な例","title":"完全な例","isH3":true,"content":"<p>完全な例は <a href=\"/ja/docs/Web/SVG/Namespaces_Crash_Course/Example\">SVG:Namespaces Crash Course:Example</a> を参照してください。</p>"}}],"toc":[],"summary":"XML の派生言語として、 SVG は名前空間付けられています。もしあなたが SVG コンテンツを作成する予定なら名前空間の概念と使い方を理解することは重要です。 Firefox 1.5 リリースより前の幾つかのバージョンの SVG ビューワは残念ながら名前空間に対して十分な注意を払いませんが、 とても厳格でなくてならない Gecko ベースのブラウザのようなユーザエージェントが複数の XML 派生言語をサポートするために不可欠です。今、名前空間を理解するためにいくらかの時間をとり、将来頭を悩ませる時間を節約しましょう。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Namespaces crash course","locale":"en-US","native":"English (US)"},{"title":"Intensivo de Namespaces","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Namespaces Crash Course","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/svg/namespaces_crash_course","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/svg/namespaces_crash_course/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/SVG","title":"SVG: スケーラブルベクターグラフィック"},{"uri":"/ja/docs/Web/SVG/Namespaces_Crash_Course","title":"名前空間の速修講座"}],"pageTitle":"名前空間の速修講座 - SVG: スケーラブルベクターグラフィック | MDN","noIndexing":false}}