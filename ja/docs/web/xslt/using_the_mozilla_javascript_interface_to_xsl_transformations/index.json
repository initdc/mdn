{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Mozilla JavaScript インターフェイスを使用した XSL 変換","mdn_url":"/ja/docs/Web/XSLT/Using_the_Mozilla_JavaScript_interface_to_XSL_Transformations","locale":"ja","native":"日本語","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>この文書では、 Mozilla 1.2 の JavaScript インターフェイスと XSLT 処理エンジン (TransforMiiX) について説明します。</p>"}},{"type":"prose","value":{"id":"xsltprocessorの作成","title":"XSLTProcessorの作成","isH3":true,"content":"<p>まず、<a href=\"/ja/docs/Web/API/XSLTProcessor\"><code>XSLTProcessor</code></a> オブジェクトを作成する必要があります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> processor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XSLTProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"スタイルシートの指定","title":"スタイルシートの指定","isH3":true,"content":"<p>これを使用するには、 <a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>XSLTProcessor.importStylesheet()</code></a> メソッドを使用してスタイルシートをインポートする必要があります。これには単一の引数があり、インポートする XSLT スタイルシートの DOM ノードを指定します。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> インポートはライブです。つまりインポート後にスタイルシートの DOM を変更すると、処理に反映されます。 DOM を変更するよりも、スタイルシートの引数を使用することが推奨されています。通常より簡単に、より良いパフォーマンスを得ることができます。</p>\n</div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> testTransform <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>implementation<span class=\"token punctuation\">.</span><span class=\"token function\">createDocument</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// just an example to get a transform into a script as a DOM</span>\n<span class=\"token comment\">// XMLDocument.load is asynchronous, so all processing happens in the</span>\n<span class=\"token comment\">// onload handler</span>\ntestTransform<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span> onload<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntestTransform<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test-transform.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">onload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  processor<span class=\"token punctuation\">.</span><span class=\"token function\">importStylesheet</span><span class=\"token punctuation\">(</span>testTransform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>XSLTProcessor.importStylesheet()</code></a> には引数、つまり DOM ノードが 1 つ必要です。そのノードが文書ノードの場合、完全な XSL Transform または<a href=\"https://www.w3.org/TR/xslt/#result-element-stylesheet\" class=\"external\" rel=\" noopener\">リテラル結果要素の変換</a>を渡すことができます。そうでない場合は、 <code>xsl:stylesheet</code> または <code>xsl:transform</code> 要素でなければなりません。</p>"}},{"type":"prose","value":{"id":"文書の変換","title":"文書の変換","isH3":true,"content":"<p><a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>XSLTProcessor.transformToDocument()</code></a> または <a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>XSLTProcessor.transformToFragment()</code></a> メソッドを使用すると、インポートされた XSLT スタイルシートを使用して文書を変換することができます。</p>\n<h4 id=\"transformtodocument\">transformToDocument</h4>\n<p><a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>XSLTProcessor.transformToDocument()</code></a> は変換するソースノードを1つ引数として、変換結果とともに新しい <a href=\"/ja/docs/Web/API/Document\"><code>Document</code></a> を返します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> newDocument <span class=\"token operator\">=</span> processor<span class=\"token punctuation\">.</span><span class=\"token function\">transformToDocument</span><span class=\"token punctuation\">(</span>domToBeTransformed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>結果のオブジェクトはスタイルシートの<a href=\"https://www.w3.org/TR/1999/REC-xslt-19991116/#output\" class=\"external\" rel=\" noopener\">出力メソッド</a>に依存します。</p>\n<ul>\n  <li><strong>html</strong> - <a href=\"/ja/docs/Web/API/HTMLDocument\"><code>HTMLDocument</code></a></li>\n  <li><strong>xml</strong> - <a href=\"/ja/docs/Web/API/XMLDocument\"><code>XMLDocument</code></a></li>\n  <li><strong>text</strong> - <a href=\"/ja/docs/Web/API/XMLDocument\"><code>XMLDocument</code></a> にその子として単一のルート要素 <code>&lt;transformiix:result&gt;</code> がついたもの</li>\n</ul>\n<h4 id=\"transformtofragment\">transformToFragment</h4>\n<p><a href=\"/ja/docs/Web/API/DocumentFragment\"><code>DocumentFragment</code></a> ノードを返す <a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>XSLTProcessor.transformToFragment()</code></a> を使用することもできます。フラグメントを別のノードに追加すると、そのフラグメントのすべての子が透過的に追加され、フラグメント自体はマージされないため、これは便利です。したがってフラグメントは、完全な文書オブジェクトのオーバーヘッドなしにノードを移動して格納するのに便利です。</p>\n<p><a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>XSLTProcessor.transformToFragment()</code></a> は、変換するソース文書（上記）とフラグメントを所有する <a href=\"/ja/docs/Web/API/Document\"><code>Document</code></a> オブジェクトの 2 つの引数をとります（すべてのフラグメントは文書が所有しなければなりません）。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> ownerDocument <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>implementation<span class=\"token punctuation\">.</span><span class=\"token function\">createDocument</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> newFragment <span class=\"token operator\">=</span> processor<span class=\"token punctuation\">.</span><span class=\"token function\">transformToFragment</span><span class=\"token punctuation\">(</span>domToBeTransformed<span class=\"token punctuation\">,</span> ownerDocument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>XSLTProcessor.transformToFragment()</code></a> は、所有文書自体が <a href=\"/ja/docs/Web/API/HTMLDocument\"><code>HTMLDocument</code></a> の場合、またはスタイルシートの出力メソッドが HTML の場合、 HTML DOM オブジェクトを生成します。これは、<a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>XSLTProcessor.transformToFragment()</code></a> がこの要素の作成に使用されることはほとんど<strong>ない</strong>ので、結果の最上位要素のみが <a href=\"/ja/docs/Web/HTML/Element/html\"><code>&lt;html&gt;</code></a> の場合、HTML DOMオブジェクトを生成しません。これをオーバーライドする場合は、通常の方法で出力メソッドを通常どおりに設定できます。</p>\n<h4 id=\"transforming_html\">transforming HTML</h4>\n<p>残念ながら、XSLT を使用して HTML ノードを変換することは現在サポートされていません。パターンや式で小文字のノード名を使用してノードがnull名前空間にあるかのように扱う場合、いくつかのことが成り立ちますが、これはあまりうまくテストされていないため、すべての状況で機能しない可能性があります。これは将来のリリースで変更される可能性もあります。</p>\n<p>しかし XHTML の変換は期待通りに機能するはずです。</p>"}},{"type":"prose","value":{"id":"引数の設定","title":"引数の設定","isH3":true,"content":"<p><a href=\"https://www.w3.org/TR/1999/REC-xslt-19991116/#variables\" class=\"external\" rel=\" noopener\">スタイルシートの引数</a>は <a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>XSLTProcessor.setParameter()</code></a>、<a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>XSLTProcessor.getParameter()</code></a>、<a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>XSLTProcessor.removeParameter()</code></a> の各メソッドを使用して制御することができます。これらはすべて <a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>XSLTProcessor.setParameter()</code></a> が設定する引数の値の 3 分の 1 を使用して、名前空間 URI とローカル名を最初の 2 つの引数として取ります。例については、 <a href=\"/ja/docs/Web/XSLT/XSLT_JS_interface_in_Gecko/Setting_Parameters\">Gecko の XSLT/JavaScript インターフェイス</a>を参照してください。</p>"}},{"type":"prose","value":{"id":"リセット","title":"リセット","isH3":true,"content":"<p><a href=\"/ja/docs/Web/API/XSLTProcessor\"><code>XSLTProcessor</code></a> オブジェクトは、すべてのスタイルシートと引数を削除してプロセッサーを初期状態に戻すために使用できる <a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>XSLTProcessor.reset()</code></a> メソッドも実装しています。このメソッドは Gecko 1.3 以降で実装されています。</p>"}},{"type":"prose","value":{"id":"リソース","title":"リソース","isH3":true,"content":"<p>以下のものは <a href=\"/ja/docs/Web/API/XSLTProcessor\"><code>XSLTProcessor</code></a> オブジェクトのインターフェイスを反映しています。</p>\n<ul>\n  <li><a rel=\"custom noopener\" href=\"https://dxr.mozilla.org/mozilla-central/source/dom/xslt/nsIXSLTProcessor.idl\" class=\"external\">nsIXSLTProcessor.idl</a></li>\n  <li><a rel=\"custom noopener\" href=\"https://dxr.mozilla.org/mozilla-central/source/dom/webidl/XSLTProcessor.webidl\" class=\"external\">XSLTProcessor.webidl</a></li>\n</ul>"}},{"type":"prose","value":{"id":"xpcom_コンポーネントから_xsltprocessor_を使用","title":"XPCOM コンポーネントから XSLTProcessor を使用","isH3":true,"content":"<p>XPCOM コンポーネントから <a href=\"/ja/docs/Web/API/XSLTProcessor\"><code>XSLTProcessor</code></a> をインスタンス化するには、コンストラクターがコンポーネント内で定義されていないため、別の構文が必要です。</p>\n<p>次のようにする代わりに、</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> processor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XSLTProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>次のようにします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> processor <span class=\"token operator\">=</span> Components<span class=\"token punctuation\">.</span>classes<span class=\"token punctuation\">[</span><span class=\"token string\">\"@mozilla.org/document-transformer;1?type=xslt\"</span><span class=\"token punctuation\">]</span>\n                          <span class=\"token punctuation\">.</span><span class=\"token function\">createInstance</span><span class=\"token punctuation\">(</span>Components<span class=\"token punctuation\">.</span>interfaces<span class=\"token punctuation\">.</span>nsIXSLTProcessor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":true,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/XSLT/XSLT_JS_interface_in_Gecko\">Gecko の XSLT/JavaScript インターフェイス</a></li>\n  <li>XML文書の読み込みに関する <a href=\"/en-US/docs/Web/API/XMLDocument/load\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">document.load() (en-US)</a> （上記で使用したもの）</li>\n</ul>"}},{"type":"prose","value":{"id":"原著情報","title":"原著情報","isH3":true,"content":"<ul>\n  <li>著者: Mike Hearn</li>\n  <li>最終更新日: 2005 年 12 月 21 日</li>\n  <li>著作権情報: Copyright (C) Mike Hearn</li>\n</ul>"}}],"toc":[],"summary":"この文書では、 Mozilla 1.2 の JavaScript インターフェイスと XSLT 処理エンジン (TransforMiiX) について説明します。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using the Mozilla JavaScript interface to XSL Transformations","locale":"en-US","native":"English (US)"},{"title":"Utilisation de l'interface JavaScript de Mozilla pour les transformations XSL","locale":"fr","native":"Français"},{"title":"Using the Mozilla JavaScript interface to XSL Transformations","locale":"ko","native":"한국어"}],"source":{"folder":"ja/web/xslt/using_the_mozilla_javascript_interface_to_xsl_transformations","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/xslt/using_the_mozilla_javascript_interface_to_xsl_transformations/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/XSLT","title":"XSLT: 拡張可能なスタイルシートの言語変換"},{"uri":"/ja/docs/Web/XSLT/Using_the_Mozilla_JavaScript_interface_to_XSL_Transformations","title":"Mozilla JavaScript インターフェイスを使用した XSL 変換"}],"pageTitle":"Mozilla JavaScript インターフェイスを使用した XSL 変換 - XSLT: 拡張可能なスタイルシートの言語変換 | MDN","noIndexing":false}}