{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"JavaScript/XSLT バインディング","mdn_url":"/ja/docs/Web/XSLT/XSLT_JS_interface_in_Gecko/JavaScript_XSLT_Bindings","locale":"ja","native":"日本語","sidebarHTML":"","body":[{"type":"prose","value":{"id":"javascriptxslt_バインディング","title":"JavaScript/XSLT バインディング","isH3":false,"content":"<p>JavaScript は <a href=\"/ja/docs/Web/API/XSLTProcessor\"><code>XSLTProcessor</code></a> オブジェクトを通して XSLT 変換を実行できます。インスタンス化されると、<a href=\"/ja/docs/Web/API/XSLTProcessor\"><code>XSLTProcessor</code></a> には変換で使用される XSLT スタイルシートを引数として取る<a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>XSLTProcessor.importStylesheet()</code></a> メソッドがあります。スタイルシートは XML 文書として渡す必要があります。つまり<a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>XSLTProcessor.importStylesheet()</code></a> を呼び出す前に .xsl ファイルをページでロードする必要があります。これは <a href=\"/ja/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a> または <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XMLDocument/load\"><code>XMLDocument.load()</code> <small>(en-US)</small></a> で行うことができます。</p>\n<p><strong>Figure 1 : <a href=\"/ja/docs/Web/API/XSLTProcessor\"><code>XSLTProcessor</code></a> のインスタンス化</strong></p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">var</span> xsltProcessor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XSLTProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Load the xsl file using synchronous (third param is set to false) XMLHttpRequest</span>\n  <span class=\"token keyword\">var</span> myXMLHTTPRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  myXMLHTTPRequest<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"example.xsl\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  myXMLHTTPRequest<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> xslRef <span class=\"token operator\">=</span> myXMLHTTPRequest<span class=\"token punctuation\">.</span>responseXML<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Finally import the .xsl</span>\n  xsltProcessor<span class=\"token punctuation\">.</span><span class=\"token function\">importStylesheet</span><span class=\"token punctuation\">(</span>xslRef<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>実際の変換では、<a href=\"/ja/docs/Web/API/XSLTProcessor\"><code>XSLTProcessor</code></a> には XML ドキュメントが必要です。このドキュメントは、最終的な結果を得るためにインポートされた XSL ファイルと一緒に使用されます。XML ドキュメントは、図 1 に示すようにロードされた別個の XML ファイルでも、既存のページの一部でもかまいません。ページの DOM の一部を処理するには、最初にメモリー内に XML 文書を作成する必要があります。処理対象の DOM が id の <code>example</code>を持つ要素に含まれていると仮定すると、その DOM はメモリ内 XML ドキュメントの <a href=\"/ja/docs/Web/API/Document/importNode\"><code>Document.importNode()</code></a> メソッドを使用して \"複製\"できます。<a href=\"/ja/docs/Web/API/Document/importNode\"><code>Document.importNode()</code></a> は、ドキュメント間（この場合は HTML ドキュメントから XML ドキュメントへ）の DOM フラグメントを転送することを可能にします。最初のパラメータはクローンを作成する DOM ノードを参照します。2 番目のパラメータを \"true\" にすることですべての子孫も同様にクローンします (深いクローン)。複製された DOM は図 2 に示すように、<a href=\"/ja/docs/Web/API/Node/appendChild\"><code>Node.appendChild()</code></a> を使用して簡単に XML ドキュメントに挿入できます。</p>\n<p><strong>Figure 2 : ドキュメントの DOM の一部に基づいて XML ドキュメントを作成する</strong></p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token comment\">// create a new XML document in memory</span>\n  <span class=\"token keyword\">var</span> xmlRef <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>implementation<span class=\"token punctuation\">.</span><span class=\"token function\">createDocument</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// we want to move a part of the DOM from an HTML document to an XML document.</span>\n  <span class=\"token comment\">// importNode is used to clone the nodes we want to process via XSLT - true makes it do a deep clone</span>\n  <span class=\"token keyword\">var</span> myNode <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"example\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> clonedNode <span class=\"token operator\">=</span> xmlRef<span class=\"token punctuation\">.</span><span class=\"token function\">importNode</span><span class=\"token punctuation\">(</span>myNode<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// add the cloned DOM into the XML document</span>\n  xmlRef<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>clonedNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>スタイルシートをインポートしたら、<a href=\"/ja/docs/Web/API/XSLTProcessor\"><code>XSLTProcessor</code></a> は実際の変換に 2 つのメソッド、つまり<a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>XSLTProcessor.transformToDocument()</code></a> と<a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>XSLTProcessor.transformToFragment()</code></a> を実行する必要があります。<a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>XSLTProcessor.transformToDocument()</code></a> は完全な XML ドキュメントを返しますが、<a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>XSLTProcessor.transformToFragment()</code></a> は既存のドキュメントに簡単に追加できるドキュメントフラグメントを返します。どちらも、変換される最初のパラメーターとして XML 文書を取り込みます。 <a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>XSLTProcessor.transformToFragment()</code></a> は第 2 のパラメータ、すなわち生成されたフラグメントを所有するドキュメントオブジェクトを必要とします。生成されたフラグメントが現在の HTML ドキュメントに挿入される場合はドキュメントを渡すだけで十分です。</p>\n<p><strong>Figure 2.1 : 文字列 'XML Soup' からの XML 文書の作成</strong></p>\n<p>IE <code>loadXML</code> メソッドを使用して XML を含む文字列をロードすることができますが、Mozilla で同じことをするためにいくつかの微調整とチューニングを行う必要があります。これは DomParser によって処理されるため、DomParser.no を使用してドキュメントを作成する必要があります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> parser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DOMParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> doc <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span><span class=\"token function\">parseFromString</span><span class=\"token punctuation\">(</span>aStr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><strong>Figure 3 : 変換の実行</strong></p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">var</span> fragment <span class=\"token operator\">=</span> xsltProcessor<span class=\"token punctuation\">.</span><span class=\"token function\">transformToFragment</span><span class=\"token punctuation\">(</span>xmlRef<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}}],"toc":[{"text":"JavaScript/XSLT バインディング","id":"javascriptxslt_バインディング"}],"summary":"JavaScript は XSLTProcessor オブジェクトを通して XSLT 変換を実行できます。インスタンス化されると、XSLTProcessor には変換で使用される XSLT スタイルシートを引数として取るXSLTProcessor.importStylesheet() メソッドがあります。スタイルシートは XML 文書として渡す必要があります。つまりXSLTProcessor.importStylesheet() を呼び出す前に .xsl ファイルをページでロードする必要があります。これは XMLHttpRequest または XMLDocument.load() (en-US) で行うことができます。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"JavaScript/XSLT Bindings","locale":"en-US","native":"English (US)"},{"title":"Les liaisons JavaScript/XSLT","locale":"fr","native":"Français"}],"source":{"folder":"ja/web/xslt/xslt_js_interface_in_gecko/javascript_xslt_bindings","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/xslt/xslt_js_interface_in_gecko/javascript_xslt_bindings/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/XSLT","title":"XSLT: 拡張可能なスタイルシートの言語変換"},{"uri":"/ja/docs/Web/XSLT/XSLT_JS_interface_in_Gecko","title":"Gecko の XSLT/JavaScript インターフェース"},{"uri":"/ja/docs/Web/XSLT/XSLT_JS_interface_in_Gecko/JavaScript_XSLT_Bindings","title":"JavaScript/XSLT バインディング"}],"pageTitle":"JavaScript/XSLT バインディング - XSLT: 拡張可能なスタイルシートの言語変換 | MDN","noIndexing":false}}