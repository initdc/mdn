{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"カスタム要素の使用","mdn_url":"/ja/docs/Web/Web_Components/Using_custom_elements","locale":"ja","native":"日本語","sidebarHTML":"<ol><li class=\"toggle\"><details open=\"\"><summary>ガイド</summary><ol><li><a href=\"/ja/docs/Web/Web_Components/Using_custom_elements\">Using custom elements</a></li><li><a href=\"/ja/docs/Web/Web_Components/Using_shadow_DOM\">Using shadow DOM</a></li><li><a href=\"/ja/docs/Web/Web_Components/Using_templates_and_slots\">Using templates and slots</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>インターフェイス</summary><ol><li><a href=\"/ja/docs/Web/API/CustomElementRegistry\"><code>CustomElementRegistry</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLSlotElement\"><code>HTMLSlotElement</code></a></li><li><a href=\"/ja/docs/Web/API/HTMLTemplateElement\"><code>HTMLTemplateElement</code></a></li><li><a href=\"/ja/docs/Web/API/ShadowRoot\"><code>ShadowRoot</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>プロパティ</summary><ol><li><a href=\"/ja/docs/Web/API/Element/shadowRoot\"><code>Element.shadowRoot</code></a></li><li><a href=\"/ja/docs/Web/API/Element/slot\"><code>Element.slot</code></a></li><li><a href=\"/ja/docs/Web/API/Event/composed\"><code>Event.composed</code></a></li><li><a href=\"/ja/docs/Web/API/Event/composedPath\"><code>Event.composedPath</code></a></li><li><a href=\"/ja/docs/Web/API/Node/isConnected\"><code>Node.isConnected</code></a></li><li><a href=\"/ja/docs/Web/API/Window/customElements\"><code>Window.customElements</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>メソッド</summary><ol><li><a href=\"/ja/docs/Web/API/Document/createElement\"><code>Document.createElement()</code></a></li><li><a href=\"/ja/docs/Web/API/Element/attachShadow\"><code>Element.attachShadow()</code></a></li><li><a href=\"/ja/docs/Web/API/Node/getRootNode\"><code>Node.getRootNode()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>ウェブコンポーネント標準の主な特徴の 1 つは、 HTML ページに機能をカプセル化するカスタム要素を作成できることで、カスタムページの機能を提供する要素の長いネストしたバッチを作成する必要がありません。この記事では、 Custom Elements API の使い方を紹介します。</p>"}},{"type":"prose","value":{"id":"高水準のビュー","title":"高水準のビュー","isH3":false,"content":"<p>ウェブ文書上でカスタム要素を制御するのは <a href=\"/ja/docs/Web/API/CustomElementRegistry\"><code>CustomElementRegistry</code></a> オブジェクトです。 — このオブジェクトで、ページへカスタム要素を登録したり、どのようなカスタム要素が登録されているのかを返したりすることができます。</p>\n<p>ページにカスタム要素を登録するには、 <a href=\"/ja/docs/Web/API/CustomElementRegistry/define\"><code>CustomElementRegistry.define()</code></a> メソッドを使います。引数に次のものを取ります。</p>\n<ul>\n  <li>要素に与える名前を表す <a href=\"/ja/docs/Glossary/String\"><code>DOMString</code></a>。カスタム要素の名前は、<a href=\"https://html.spec.whatwg.org/#valid-custom-element-name\" class=\"external\" rel=\" noopener\">ダッシュが使われている名前</a> (kebab-case) である必要があります。単一の単語にすることはできません。</li>\n  <li>要素の振る舞いを定義した<a href=\"/en-US/docs/Web/JavaScript/Reference/Classes\">クラス</a>のオブジェクト。</li>\n  <li><span class=\"badge inline optional\">省略可</span> <code>extends</code> プロパティを含むオプションオブジェクトです。このプロパティは、もしあれば、要素が継承する組み込み要素を指定します（カスタマイズされた組み込み要素にのみ関係します）。</li>\n</ul>\n<p>例えば、カスタムの <a href=\"https://mdn.github.io/web-components-examples/word-count-web-component/\" class=\"external\" rel=\" noopener\">word-count 要素</a>を定義するには次のようにします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'word-count'</span><span class=\"token punctuation\">,</span> WordCount<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token string\">'p'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>word-count</code> 要素は <code>WordCount</code> クラスのオブジェクトで、 <a href=\"/ja/docs/Web/HTML/Element/p\"><code>&lt;p&gt;</code></a> 要素を拡張します。</p>\n<p>カスタム要素のクラスのオブジェクトは ES 2015 のクラス構文で実装します。例えば、 <code>WordCount</code> は次のように構成します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">WordCount</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLParagraphElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// コンストラクターでは常に super を最初に呼び出してください</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ここに要素の機能を記述します</span>\n\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これはごく簡単な例ですが、ここでできることはもっとあります。クラスの中でライフサイクルコールバックを定義することができ、要素のライフサイクルの特定の時点で実行されます。例えば、<code>connectedCallback</code> はドキュメント接続要素にカスタム要素が追加されるたびに実行されます。一方 <code>attributeChangedCallback</code> はカスタム要素に属性が追加、削除、変更される時に実行されます。</p>\n<p>これらについては、下記の<a href=\"#%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B5%E3%82%A4%E3%82%AF%E3%83%AB%E3%82%B3%E3%83%BC%E3%83%AB%E3%83%90%E3%83%83%E3%82%AF%E3%81%AE%E4%BD%BF%E7%94%A8\">ライフサイクルコールバックの使用</a>の節で詳しく学ぶことができます。</p>\n<p>カスタム要素には 2 つの種類があります。</p>\n<ul>\n  <li>スタンドアロンの<strong>自律カスタム要素</strong> — 標準の HTML 要素を継承しません。 HTML 要素としてページ内で記述して使います。例えば、<code>&lt;popup-info&gt;</code> あるいは <code>document.createElement(\"popup-info\")</code> などです。</li>\n  <li>基礎となる HTML 要素を継承する<strong>カスタマイズされた組み込み要素</strong>。これらを作成するには、どの要素を拡張するかを指定する必要があり（上記の例で示した通り）、基本要素を記述し、カスタム要素の名前を <a href=\"/ja/docs/Web/HTML/Global_attributes#attr-is\"><code>is</code></a> 属性（またはプロパティ）で指定することで使用します。例えば、 <code>&lt;p is=\"word-count\"&gt;</code> や <code>document.createElement(\"p\", { is: \"word-count\" })</code> のようにします。</li>\n</ul>"}},{"type":"prose","value":{"id":"簡単な例での作業","title":"簡単な例での作業","isH3":false,"content":"<p>ここで、もう少し簡単な例で、カスタム要素の作成方法をより詳しく説明しましょう。</p>"}},{"type":"prose","value":{"id":"自律カスタム要素","title":"自律カスタム要素","isH3":true,"content":"<p>自律カスタム要素の例を見てみましょう。<a href=\"https://github.com/mdn/web-components-examples/tree/master/popup-info-box-web-component\" class=\"external\" rel=\" noopener\"><code>&lt;popup-info-box&gt;</code></a> (<a href=\"https://mdn.github.io/web-components-examples/popup-info-box-web-component/\" class=\"external\" rel=\" noopener\">ライブ例</a>も参照) です。これは画像とテキストを受け取り、ページにアイコンを埋め込みます。アイコンにフォーカスすると、テキストをポップアップ情報ボックスに表示し、さらにコンテキスト内の情報を提供します。</p>\n<p>最初に汎用的な <a href=\"/ja/docs/Web/API/HTMLElement\"><code>HTMLElement</code></a> クラスを継承して <code>PopUpInfo</code> というクラスを定義する JavaScript ファイルです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">PopUpInfo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// コンストラクターでは常に super を最初に呼び出してください</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ここに要素の機能を記述します</span>\n\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>前述のコードスニペットはクラスのコンストラクター (<a href=\"/ja/docs/Web/JavaScript/Reference/Classes/constructor\"><code>constructor()</code></a>) の定義を含んでいます。ここでは常に <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/super\"><code>super()</code></a> を最初に呼び出し、正しいプロタイプチェーンが確立されるようにします。</p>\n<p>コンストラクターの内部では、その要素のインスタンスが生成されたときに持つすべての機能を定義します。この場合、カスタム要素にシャドウルートを添付し、いくつかの DOM 操作を使用して要素の内部シャドウ DOM 構造を作成します。それをシャドウルートに添付します。そして最後に、いくつかの CSS をシャドウルートに添付してスタイル付けを行います。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// シャドウルートを生成</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'open'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'this.shadowRoot' を設定して返す</span>\n\n<span class=\"token comment\">// (内部の) span 要素を生成</span>\n<span class=\"token keyword\">const</span> wrapper <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwrapper<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'wrapper'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> icon <span class=\"token operator\">=</span> wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nicon<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'icon'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nicon<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tabindex'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// アイコンを、定義された属性または既定のアイコンから挿入</span>\n<span class=\"token keyword\">const</span> img <span class=\"token operator\">=</span> icon<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nimg<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token string\">'img/default.png'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> info <span class=\"token operator\">=</span> wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninfo<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'info'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 属性の中身を取得し、 info の span の中に入れる</span>\ninfo<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-text'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// CSS を作成しシャドウ DOM に割り当てる</span>\n<span class=\"token keyword\">const</span> style <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'style'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstyle<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'.wrapper {'</span> <span class=\"token operator\">+</span>\n<span class=\"token comment\">// 簡略化のために CSS は省略</span>\n\n<span class=\"token comment\">// 生成された要素をシャドウ DOM に添付する</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shadowRoot<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">,</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>最後に、カスタム要素を <code>CustomElementRegistry</code> に登録します。前述の <code>define()</code> を使用して、引数で要素名とその機能を定義するクラス名を指定します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'popup-info'</span><span class=\"token punctuation\">,</span> PopUpInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これによって要素がページで使えるようになりました。 HTML 中で下記のように使用することができます。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>popup-info</span> <span class=\"token attr-name\">img</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>img/alt.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Your card validation code (CVC)\n  is an extra security feature — it is the last 3 or 4 numbers on the\n  back of your card.<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>popup-info</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> こちらで<a href=\"https://github.com/mdn/web-components-examples/blob/master/popup-info-box-web-component/main.js\" class=\"external\" rel=\" noopener\">完全な JavaScript ソース</a> を見ることができます。</p>\n</div>"}},{"type":"prose","value":{"id":"内部スタイルと外部スタイル","title":"内部スタイルと外部スタイル","isH3":true,"content":"<p>上記の例では <a href=\"/ja/docs/Web/HTML/Element/style\"><code>&lt;style&gt;</code></a> 要素を用いてシャドウ DOM にスタイルを適用しましたが、代わりに完全に <a href=\"/ja/docs/Web/HTML/Element/link\"><code>&lt;link&gt;</code></a> 要素から外部スタイルシートを参照することが可能です。</p>\n<p>例えば、 <a href=\"https://mdn.github.io/web-components-examples/popup-info-box-external-stylesheet/\" class=\"external\" rel=\" noopener\">popup-info-box-external-stylesheet</a> のコードを少し見てみましょう（<a href=\"https://github.com/mdn/web-components-examples/blob/master/popup-info-box-external-stylesheet/main.js\" class=\"external\" rel=\" noopener\">ソースコード</a>はこちら）。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 外部スタイルシートをシャドウ DOM に適用</span>\n<span class=\"token keyword\">const</span> linkElem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'link'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlinkElem<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rel'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'stylesheet'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlinkElem<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'href'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'style.css'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 生成された要素をシャドウ DOM に添付</span>\nshadow<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>linkElem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>なお、 <a href=\"/ja/docs/Web/HTML/Element/link\"><code>&lt;link&gt;</code></a> 要素はシャドウルートの描画をブロックしないので、スタイルシートのロード中にスタイル付けされていないコンテンツ (FOUC) が一瞬表示されるかもしれないことに注意してください。</p>\n<p>最近のブラウザーの多くは、共通のノードからクローンされた、あるいは同一のテキストを持つ <a href=\"/ja/docs/Web/HTML/Element/style\"><code>&lt;style&gt;</code></a> タグに対して、単一のバッキングスタイルシートを共有できるようにする最適化を実装しています。この最適化によって、外部スタイルでも内部スタイルでも性能は同程度になるはずです。</p>"}},{"type":"prose","value":{"id":"カスタマイズされた組み込み要素","title":"カスタマイズされた組み込み要素","isH3":true,"content":"<p>ここで、もう 1 つの組み込み要素の例を見てみましょう。 <a href=\"https://github.com/mdn/web-components-examples/tree/master/expanding-list-web-component\" class=\"external\" rel=\" noopener\">expanding-list</a> (<a href=\"https://mdn.github.io/web-components-examples/expanding-list-web-component/\" class=\"external\" rel=\" noopener\">ライブでも確認してください</a>) です。 これにより番号なしリストが展開・縮小するメニューになります。</p>\n<p>まず始めに、これまでと同様の方法でクラス要素を定義します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">ExpandingList</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLUListElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// コンストラクターでは常に super を最初に呼び出してください</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ここに要素の機能を記述します</span>\n\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ここでは要素の詳細な機能については説明しませんが、ソースコードからどのように動作するのか確認することができます。これまでと唯一違う点は、 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLUListElement\"><code>HTMLUListElement</code> <small>(en-US)</small></a> インターフェースを継承しており、 <a href=\"/ja/docs/Web/API/HTMLElement\"><code>HTMLElement</code></a> ではないことです。そのため、独立した要素ではなく、 <a href=\"/ja/docs/Web/HTML/Element/ul\"><code>&lt;ul&gt;</code></a> 要素の特徴を備えた上に、定義した機能を持ちます。これこそが、自律カスタム要素ではなくカスタマイズされた組み込み要素である理由です。</p>\n<p>次に、以前と同様に <code>define()</code> を用いて要素を登録しますが、今回はこのカスタム要素がどの要素から継承したのかという情報をオプションとして渡しています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'expanding-list'</span><span class=\"token punctuation\">,</span> ExpandingList<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ul\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ウェブ文書内で組み込み要素を使用する場合とはやや異なります。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">is</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>expanding-list<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  ...\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>通常のように <code>&lt;ul&gt;</code> を使用していますが、カスタム要素の名前が <code>is</code> 属性で指定されています。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> 繰り返しますが、完全な <a href=\"https://github.com/mdn/web-components-examples/blob/master/expanding-list-web-component/main.js\" class=\"external\" rel=\" noopener\">JavaScript のソースコード</a>はこちらにあります。</p>\n</div>"}},{"type":"prose","value":{"id":"ライフサイクルコールバックの使用","title":"ライフサイクルコールバックの使用","isH3":false,"content":"<p>カスタム要素のクラス定義内に、いくつかの異なるコールバックを定義できます。これらは要素のライフサイクルのさまざまな時点で起動します。</p>\n<ul>\n  <li><code>connectedCallback</code>: 文書に接続された要素にカスタム要素が追加されるたびに呼び出されます。これはそのノードが移動するために発生するので、要素の内容が完全に解釈される前に発生することがあります。\n    <div class=\"notecard note\" id=\"sect3\">\n      <p><strong>Note:</strong> <code>connectedCallback</code> は要素の接続が終了したときにも呼び出されることがあります。 <a href=\"/ja/docs/Web/API/Node/isConnected\"><code>Node.isConnected</code></a> を使用して確認してください。</p>\n    </div>\n  </li>\n  <li><code>disconnectedCallback</code>: カスタム要素が文書の DOM から切断されるたびに呼び出されます。</li>\n  <li><code>adoptedCallback</code>: カスタム要素が新しい文書に移動するたびに呼び出されます。</li>\n  <li><code>attributeChangedCallback</code>: カスタム要素の属性の 1 つが追加、削除、変更されるたびに呼び出されます。どの属性の変更が通知されたかは、 static get <code>observedAttributes()</code> メソッドで指定されます。</li>\n</ul>\n<p>これらの使用例を見てみましょう。以下のコードは <a href=\"https://github.com/mdn/web-components-examples/tree/master/life-cycle-callbacks\" class=\"external\" rel=\" noopener\">life-cycle-callbacks</a> の例から引用しています (<a href=\"https://mdn.github.io/web-components-examples/life-cycle-callbacks/\" class=\"external\" rel=\" noopener\">実行可能なライブでも確認してください</a>)。これは、ページ上に一定の大きさの色のついた四角形を生成する些細な例です。カスタム要素は次のようなものです。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>custom-square</span> <span class=\"token attr-name\">l</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">c</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>red<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>custom-square</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>クラスのコンストラクターは非常に単純です。ここでは、要素にシャドウ DOM を割り当て、空の <a href=\"/ja/docs/Web/HTML/Element/div\"><code>&lt;div&gt;</code></a> および <a href=\"/ja/docs/Web/HTML/Element/style\"><code>&lt;style&gt;</code></a> 要素をシャドウルートに追加します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> shadow <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'open'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> style <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'style'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nshadow<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nshadow<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>この例の主要な機能は <code>updateStyle()</code> です。これは要素を取得し、シャドウルートを取得し、その <code>&lt;style&gt;</code> 要素を見つけて、<a href=\"/ja/docs/Web/CSS/width\"><code>width</code></a>, <a href=\"/ja/docs/Web/CSS/height\"><code>height</code></a>, および<a href=\"/ja/docs/Web/CSS/background-color\"><code>background-color</code></a> をそのスタイルに追加します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">updateStyle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">elem</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> shadow <span class=\"token operator\">=</span> elem<span class=\"token punctuation\">.</span>shadowRoot<span class=\"token punctuation\">;</span>\n  shadow<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'style'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    div {\n      width: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>elem<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'l'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px;\n      height: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>elem<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'l'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px;\n      background-color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>elem<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n    }\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>実際の更新はすべて、メソッドとしてクラス定義内に配置されているライフサイクルコールバックによって処理されます。 <code>connectedCallback()</code> は、要素が DOM に追加されるたびに実行されます。ここでは、 <code>updateStyle()</code> 関数を実行して、正方形がその属性で定義されたスタイルになっていることを確認します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Custom square element added to page.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">updateStyle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>disconnectedCallback()</code> および <code>adoptedCallback()</code> コールバックは、要素が DOM から削除されるか、別のページに移動されたときに通知する単純なメッセージをコンソールに記録します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">disconnectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Custom square element removed from page.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">adoptedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Custom square element moved to new page.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>attributeChangedCallback()</code> コールバックは、要素の属性の 1 つが何らかの方法で変更されるたびに実行されます。そのプロパティからわかるように、属性、属性の名前、および古い属性値と新しい属性値を個別に操作することができます。ただし、この場合は、 <code>updateStyle()</code> 関数を再度実行して、新しい値に従って正方形のスタイルが更新されるようにします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">attributeChangedCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">,</span> newValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Custom square element attributes changed.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">updateStyle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ある属性が変更されたときに起動する <code>attributeChangedCallback()</code> コールバックを取得するには、その属性を監視する必要があることに注意してください。これは、カスタム要素クラス内で <code>static get observedAttributes()</code> メソッドを定義することによって行われます。これは、監視したい属性の名前を含む配列を返すようにしてください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">observedAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'l'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>この例では、これはコンストラクターの最上部に配置されています。</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>Note:</strong> <a href=\"https://github.com/mdn/web-components-examples/blob/master/life-cycle-callbacks/main.js\" class=\"external\" rel=\" noopener\">完全な JavaScript のソース</a>はこちらから探してください。</p>\n</div>"}},{"type":"prose","value":{"id":"トランスパイラーとクラス","title":"トランスパイラーとクラス","isH3":false,"content":"<p>古いブラウザーを対象とした Babel 6 や TypeScript では、 ES2015 のクラス構文は期待通りにトランスパイルされない可能性があることに注意してください。 Babel 7 もしくは Babel 6 の <a href=\"https://www.npmjs.com/package/babel-plugin-transform-builtin-classes\" class=\"external\" rel=\" noopener\">babel-plugin-transform-builtin-classes</a> を使用すると、 TypeScript で古いブラウザーではなく ES2015 をターゲットとすることができます。</p>"}},{"type":"prose","value":{"id":"ライブラリー","title":"ライブラリー","isH3":false,"content":"<p>カスタム要素を作る際に抽象度を高めることを目的とした、ウェブコンポーネントで実装されたライブラリーがあります。これらのライブラリーには、 <a href=\"https://www.fast.design/docs/fast-element/getting-started\" class=\"external\" rel=\" noopener\">FASTElement</a>, <a href=\"https://github.com/devpunks/snuggsi\" class=\"external\" rel=\" noopener\">snuggsi</a>, <a href=\"https://x-tag.github.io/\" class=\"external\" rel=\" noopener\">X-Tag</a>, <a href=\"https://slimjs.com/\" class=\"external\" rel=\" noopener\">Slim.js</a>, <a href=\"https://lit.dev/\" class=\"external\" rel=\" noopener\">Lit</a>, <a href=\"https://www.htmlelements.com/\" class=\"external\" rel=\" noopener\">Smart</a>, <a href=\"https://stenciljs.com\" class=\"external\" rel=\" noopener\">Stencil</a>, <a href=\"https://github.com/WebReflection/hyperHTML-Element\" class=\"external\" rel=\" noopener\">hyperHTML-Element</a>, <a href=\"https://www.dataformsjs.com/\" class=\"external\" rel=\" noopener\">DataFormsJS</a>, <a href=\"https://tmorin.github.io/ceb/\" class=\"external\" rel=\" noopener\">Custom-Element-Builder</a> などがあります。</p>"}}],"toc":[{"text":"高水準のビュー","id":"高水準のビュー"},{"text":"簡単な例での作業","id":"簡単な例での作業"},{"text":"ライフサイクルコールバックの使用","id":"ライフサイクルコールバックの使用"},{"text":"トランスパイラーとクラス","id":"トランスパイラーとクラス"},{"text":"ライブラリー","id":"ライブラリー"}],"summary":"ウェブコンポーネント標準の主な特徴の 1 つは、 HTML ページに機能をカプセル化するカスタム要素を作成できることで、カスタムページの機能を提供する要素の長いネストしたバッチを作成する必要がありません。この記事では、 Custom Elements API の使い方を紹介します。","popularity":0.0004,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using custom elements","locale":"en-US","native":"English (US)"},{"title":"Usando elementos personalizados","locale":"es","native":"Español"},{"title":"Utilisation d'éléments personnalisés","locale":"fr","native":"Français"},{"title":"사용자 정의 요소 사용하기","locale":"ko","native":"한국어"},{"title":"Usando custom elements","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Использование пользовательских элементов","locale":"ru","native":"Русский"},{"title":"使用 custom elements","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/web_components/using_custom_elements","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/web_components/using_custom_elements/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/Web_Components","title":"ウェブコンポーネント"},{"uri":"/ja/docs/Web/Web_Components/Using_custom_elements","title":"カスタム要素の使用"}],"pageTitle":"カスタム要素の使用 - ウェブコンポーネント | MDN","noIndexing":false}}