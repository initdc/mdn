{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"パフォーマンスの基礎","mdn_url":"/ja/docs/Web/Performance/Fundamentals","locale":"ja","native":"日本語","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>パフォーマンスとは、効率性を意味します。この文書では、オープンウェブアプリの観点から、パフォーマンスとは何か、ブラウザープラットフォームでどのようにパフォーマンスを向上させるか、テストや改善にどのようなツールやプロセスを使用できるかについて一般的な説明をします。.</p>"}},{"type":"prose","value":{"id":"パフォーマンスとは","title":"パフォーマンスとは","isH3":false,"content":"<p>最終的には、ユーザーが知覚したパフォーマンスが唯一のパフォーマンスとなります。ユーザーは、触ったり、動かしたり、話したりして、システムに入力を与えます。その代わり、ユーザーは視覚、触覚、聴覚を通じて出力を知覚します。パフォーマンスとは、ユーザーの入力に応じてシステムが出力するものの品質のことです。</p>\n<p>他の条件が同じであれば、ユーザーが知覚するパフォーマンス (以下、UPP) 以外のターゲットに最適化されたコードは、 UPP に最適化されたコードと競合すると負けてしまいます。ユーザーは、例えば、 1 秒間に 1,000 件しかデータベーストランザクションを処理しないが応答性の高いスムーズに動くアプリの方を、 1 秒間に 100,000,000 件のデータベーストランザクションを処理するカクカクした応答性の低いアプリよりも好みます。もちろん、他の指標を最適化することは決して無意味ではありませんが、実際の UPP ターゲットが最優先です。</p>\n<p>以下の節では、必須のパフォーマンス指標を指摘し、説明します。</p>"}},{"type":"prose","value":{"id":"応答性","title":"応答性","isH3":true,"content":"<p>応答性とは、ユーザーの入力に応じてシステムがどれだけ速く出力 (複数の場合もある) を行うかを意味します。例えば、ユーザーが画面をタップすると、ピクセルが特定の方法で変化することを期待します。この操作の場合、応答性の指標は、タップしてからピクセルが変化するまでの経過時間となります。</p>\n<p>応答性には、複数の段階のフィードバックが含まれることがあります。アプリケーションの起動は、特に重要なケースの一つで、詳しくは後述します。</p>\n<p>応答性が重要なのは、人は無視されるとイライラしたり怒ったりするからです。アプリはユーザーの入力に応答しない間、ユーザーを無視していることになります。</p>"}},{"type":"prose","value":{"id":"フレームレート","title":"フレームレート","isH3":true,"content":"<p>フレームレートとは、システムがユーザーに表示するピクセルを変化させる速度のことです。例えば、毎秒 10 フレームのゲームよりも、毎秒 60 フレームのゲームの方が好きだというのは、理由を説明できなくても、誰もが知っている概念です。</p>\n<p>フレームレートは「サービスの質」の指標としても重要です。コンピューターのディスプレイは、現実を模倣した光子をユーザーの目に届けることで、ユーザーの目を「欺く」ように設計されています。例えば、文字が印刷された紙は、光子をあるパターンでユーザーの目に反射させます。リーダーアプリは、ピクセルを操作することで、同じようなパターンで光子を放出し、ユーザーの目を「騙す」のです。</p>\n<p>脳は考えるとき、動きはギクシャクしたバラバラなものではなく、滑らかに連続して更新されるものだと考えます。 (ストロボはそれを逆手に取り、脳の入力を奪って離散的な現実を錯覚させるから面白いのです）。コンピューターのディスプレイでは、フレームレートが高ければ高いほど、より忠実に現実を再現することができます。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> 人間は通常、60Hz 以上のフレームレートの違いを知覚することができません。そのため、最近の電子ディスプレイは、60Hz で更新するように設計されています。例えばハチドリには、テレビが途切れ途切れで非現実的に見えることでしょう。</p>\n</div>"}},{"type":"prose","value":{"id":"メモリーの使用","title":"メモリーの使用","isH3":true,"content":"<p><strong>メモリーの使用量</strong>も重要な指標です。応答性やフレームレートとは異なり、ユーザーはメモリー使用量を直接知覚することはありませんが、メモリー使用量は「ユーザーの状態」に近いものです。理想的なシステムでは、ユーザーの状態を常に 100% 維持することができます。システム内のすべてのアプリケーションは同時に実行され、すべてのアプリケーションは、ユーザーが最後にアプリケーションを操作したにユーザーが設定した状態を維持します (アプリケーションの状態はコンピュータのメモリーに保存されているため、近似値になるのです)。</p>\n<p>このことから、重要ではあるが直感的ではない副産物が得られます。設計の優れたシステムは、<strong>空き</strong>メモリー量を最大化しません。メモリーは資源であり、空きメモリーは使われていない資源であるからです。むしろ、設計の優れたシステムは、ユーザーの状態を維持するために可能な限り多くのメモリーを使用し、かつ他の UPP 目標を満たすように最適化されています。</p>\n<p>これは、システムがメモリーを<strong>浪費</strong>すべきだという意味ではありません。システムがある特定のユーザーの状態を維持するために必要以上のメモリーを使用すると、システムは他のユーザーの状態を維持するために使用できる資源を浪費していることになります。実際には、すべてのユーザーの状態を維持できるシステムはありません。ユーザーの状態に賢くメモリーを割り当てることは、以下で詳しく説明する重要な問題です。</p>"}},{"type":"prose","value":{"id":"電力使用量","title":"電力使用量","isH3":true,"content":"<p>ここで解説する最後の指標は、<strong>電力使用量</strong>です。メモリー使用量と同様に、ユーザーは、端末が他のすべての UPP 目標を維持できる時間という形で、電力使用量を間接的にしか認識しません。 UPP 目標を達成するためには、システムは必要最小限の電力しか使用しないようにする必要があります。</p>\n<p>この文書の残りの部分では、これらの指標の観点からパフォーマンスについて説明します。</p>"}},{"type":"prose","value":{"id":"プラットフォームのパフォーマンスの最適化","title":"プラットフォームのパフォーマンスの最適化","isH3":false,"content":"<p>この節では、 Firefox/Gecko が、すべてのアプリケーションのレベルよりも下位で、一般的にどのようにパフォーマンスに貢献しているかを簡単に説明します。開発者やユーザーの視点から、「プラットフォームは何をしてくれるのか？」という問いに答えます。</p>"}},{"type":"prose","value":{"id":"ウェブ技術","title":"ウェブ技術","isH3":true,"content":"<p>ウェブプラットフォームには多くのツールが用意されていますが、中には特定の仕事に適したものもあります。アプリケーションロジックはすべて JavaScript で書かれています。グラフィックの表示には、 (高水準の宣言型言語である) HTML や CSS を使用するか、低レベルの命令型インターフェースである <a href=\"/ja/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a> 要素 (<a href=\"/ja/docs/Web/API/WebGL_API\">WebGL</a> を含む) を使用します。 HTML/CSS と Canvas の「中間」に位置するのが <a href=\"/ja/docs/Web/SVG\">SVG</a> で、両者の利点を兼ね備えています。</p>\n<p>HTML や CSS は、フレームレートやピクセルレベルでのレンダリング制御を犠牲にして、生産性を大幅に向上させます。テキストや画像は自動的に再フローされ、 UI 要素には自動的にシステムのテーマが適用されます。また、このシステムは、様々な解像度のディスプレイや右書きの言語など、開発者が最初に思いつかないような使用方法に「組み込み」で対応します。</p>\n<p><code>canvas</code> 要素は、開発者が直接描画できるピクセルバッファーを提供します。これにより、開発者はピクセルレベルでレンダリングを制御し、フレームレートを正確に制御することができますが、複数の解像度や方向、右書きの言語などに対応する必要があります。開発者は、おなじみの 2D 描画 API か、 OpenGL ES 2.0 をほぼ踏襲した「金属に近い」バインディングである WebGL を使用してキャンバスに描画します。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> Firefox OS は、 <a href=\"/ja/docs/Web/HTML\">HTML</a>、<a href=\"/ja/docs/Web/CSS\">CSS</a>、<a href=\"/ja/docs/Web/JavaScript\">JavaScript</a> などのウェブ技術で作られたアプリに最適化されています。一握りの基本的なシステムサービスを除いて、 Firefox OS で動作するすべてのコードはウェブアプリと Gecko エンジンから来ています。 OS のウィンドウマネージャも HTML、CSS、JavaScript で書かれています。コアとなる OS とアプリケーションは同じウェブ技術で構築されているため、これらの技術がどのように機能するかが重要になります。そこには「逃げ道」はありません。これは開発者にとって大きなメリットです。なぜなら、サードパーティのアプリケーションは、 OS が独自に行ったすべての最適化の恩恵を受けることができるからです。プリインストールされたコードだけが利用できる「魔法のパフォーマンスソース」はありません。 Firefox OS に関する詳細は、 <a href=\"/ja/docs/Archive/B2G_OS/Firefox_OS_apps/Performance/Firefox_OS_performance_testing\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">Firefox OS のパフォーマンステスト</a>をご覧ください。</p>\n</div>"}},{"type":"prose","value":{"id":"gecko_のレンダリング","title":"Gecko のレンダリング","isH3":true,"content":"<p>Gecko の JavaScript エンジンは、実行時 (JIT) コンパイルに対応しています。これにより、アプリケーションロジックは、Java 仮想マシンのような他の仮想マシンと同等の性能を発揮し、場合によっては「ネイティブコード」に近い性能を発揮します。</p>\n<p>HTML、CSS、Canvas を支える Gecko のグラフィックパイプラインは、いくつかの方法で最適化されています。 Gecko の HTML/CSS レイアウトおよびグラフィックコードは、スクロールなどの一般的なケースでは、無効化や再描画を削減しますが、開発者はこのサポートを「無料」で受けることができます。 Gecko が「自動的に」描画したり、 <code>canvas</code> へアプリケーションが「手動で」描画したりするピクセルバッファーは、ディスプレイのフレームバッファーに描画される際のコピーを最小限に抑えます。これは、中間サーフェスがオーバーヘッドになるような場所 (他の多くのオペレーティングシステムにおけるアプリケーションごとの「バックバッファー」など) を避け、コンポジターハードウェアが直接アクセスできるグラフィックバッファー用の特別なメモリーを使用することで実現されています。複雑なシーンのレンダリングには、端末の GPU を使用して最大のパフォーマンスを発揮します。電力消費を抑えるために、シンプルなシーンは専用の合成ハードウェアを使ってレンダリングし、 GPU はアイドルまたはオフにしています。</p>\n<p>リッチアプリケーションでは、完全な静的コンテンツは例外です。リッチアプリケーションでは、アニメーションやトランジション効果のある動的コンテンツを使用します。トランジションやアニメーションは、アプリケーションにとって特に重要です。開発者は、 CSS を使用することで、複雑な動作をシンプルで高レベルな構文で宣言することができます。また、 Gecko のグラフィックパイプラインは、一般的なアニメーションを効率的に描画するように高度に最適化されています。良くあるアニメーションは、システムコンポジターにオフロードされ、パフォーマンスと電力効率に優れた方法でレンダリングされます。</p>\n<p>アプリの起動時のパフォーマンスは、実行時のパフォーマンスと同じくらい重要です。 Gecko は、 Web 全体を含むさまざまなコンテンツを効率的に読み込むように最適化されています。並列 HTML 解析、再フローと画像デコーディングのインテリジェントなスケジューリング、巧妙なレイアウトアルゴリズムなど、コンテンツを対象とした長年の改良は、Firefox でのウェブアプリケーションの改良にも同様に反映されます。</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> 起動時のパフォーマンスをさらに向上させるための Firefox OS の仕様についての詳細は、 <a href=\"/ja/docs/Archive/B2G_OS/Firefox_OS_apps/Performance/Firefox_OS_performance_testing\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">Firefox OS パフォーマンステスト</a>を参照してください。</p>\n</div>"}},{"type":"prose","value":{"id":"アプリケーションのパフォーマンス","title":"アプリケーションのパフォーマンス","isH3":false,"content":"<p>この節では、「どうしたらアプリを高速にできるのか」という開発者の問いのためのものです。</p>"}},{"type":"prose","value":{"id":"起動時のパフォーマンス","title":"起動時のパフォーマンス","isH3":true,"content":"<p>アプリケーションの起動は、一般的に 3 つのイベントで構成されています。</p>\n<ul>\n  <li>1 つ目は、アプリケーションの<strong>ファーストペイント</strong> (最初のフレームを描くのに十分なアプリケーションリソースが読み込まれた時点) です。</li>\n  <li>2 つ目は、アプリケーションが操作可能になった時点です。例えば、ユーザーがボタンをタップすると、アプリケーションが反応するようになります。</li>\n  <li>最後のイベントは<strong>完全読み込み</strong>です。たとえば、音楽プレイヤーにユーザーのアルバムをすべて表示された時点です。</li>\n</ul>\n<p>高速な起動の鍵となるのは、 2 つのことを念頭に置くことです。 UPP がすべてであること、そして上記のユーザーが知覚する各イベントには「クリティカルパス」が存在することです。クリティカルパスとは、まさに、そのイベントを発生させるために実行しなければならないコードのことです。</p>\n<p>例えば、アプリケーションの最初のフレームを視覚的に描くためには、いくつかの HTML と、その HTML にスタイル付けする CSS で構成されます。</p>\n<ol>\n  <li>HTML を解釈する必要がある</li>\n  <li>その HTML の DOM を構築する必要がある</li>\n  <li>DOM の一部にある画像などのリソースを読み込み、デコードする必要がある</li>\n  <li>CSS のスタイルをその DOM に適用する必要がある</li>\n  <li>スタイル付けした文書を再フローさせる必要がある</li>\n</ol>\n<p>このリストのどこにも、「一般的でないメニューに必要な JS ファイルの読み込み」や「ハイスコアリスト用の画像の取得とデコード」などは含まれていません。これらの作業項目は、最初のフレームを描くためのクリティカルパスには含まれていません。</p>\n<p>当たり前のようですが、ユーザーが認識する起動イベントに早く到達するためには、<em>クリティカルパス上のコードだけ</em>を実行することが主な「コツ」です。その場面を単純化することで、クリティカルパスを短縮します。</p>\n<p>ウェブプラットフォームは非常にダイナミックです。 JavaScript は動的に型付けされる言語であり、ウェブプラットフォームではコード、HTML、CSS、画像などのリソースを動的に読み込むことができます。これらの機能を利用して、起動後しばらくしてから不要なコンテンツを「遅延して」読み込むことで、クリティカルパスから外れた作業を先送りすることができます。</p>\n<p>起動を遅らせるもう 1 つの問題は、リクエストに対するレスポンス (データベースのロードなど) を待つことで発生するアイドルタイムです。この問題を避けるために、アプリケーションは起動時にできるだけ早くリクエストを発行する必要があります (これを「フロントローディング」と呼びます)。そうすれば、後でデータが必要になったとき、うまくいけばすでに利用可能で、アプリケーションは待つ必要がありません。</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>Note:</strong> 起動時のパフォーマンスを向上させるための詳しい情報は、<a href=\"/en-US/docs/Web/Performance/Optimizing_startup_performance\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">起動時のパフォーマンスを最適化する (en-US)</a>をご覧ください。</p>\n</div>\n<p>また、ローカルにキャッシュされた静的なリソースは、高レイテンシー、低帯域幅のモバイルネットワークを介して取得された動的なデータよりもはるかに速く読み込まれることに注意してください。ネットワークへのリクエストは、アプリケーションの早期起動のためのクリティカルパスであってはなりません。ローカルキャッシュ／オフラインアプリケーションは、<a href=\"/ja/docs/Web/API/Service_Worker_API\">サービスワーカー</a>によって実現できます。その方法については、 <a href=\"/ja/docs/Web/Progressive_web_apps/Offline_Service_workers\">サービスワーカーで PWA をオフライン対応させる</a> を参照してください。</p>"}},{"type":"prose","value":{"id":"フレームレート_2","title":"フレームレート","isH3":true,"content":"<p>高フレームレートを実現するためにまず重要なのは、適切な道具を選ぶことです。静止画やスクロール、アニメーションの頻度が少ないコンテンツの実装には、 HTML と CSS を使用します。レンダリングを厳密にコントロールする必要があり、テーマ性を必要としないゲームのように、高度に動的なコンテンツを実装する場合は、キャンバスを使用します。</p>\n<p>キャンバスで描かれたコンテンツでは、フレームレートの目標値を達成できるかどうかは、開発者次第です。</p>\n<p>HTML と CSS のコンテンツでは、適切なプリミティブを使用することが高フレームレートへの道となります。 Firefox は任意のコンテンツをスクロールするために高度に最適化されているため、通常はこの点を気にする必要はありません。しかし、 CSS の放射状グラデーションの代わりに静的なレンダリングを使用するなど、速度のために汎用性や品質を犠牲にすると、スクロールのフレームレートが目標値を超えてしまうことがよくあります。 CSS の<a href=\"/ja/docs/Web/CSS/Media_Queries/Using_media_queries\">メディアクエリー</a>を使えば、こうした妥協を必要とする端末だけに制限することができます。</p>\n<p>多くのアプリケーションでは、「ページ」や「パネル」を使ったトランジションやアニメーションが使われています。例えば、ユーザーが「設定」ボタンをタップすると、アプリケーションの設定画面に遷移したり、設定メニューが「ポップアップ」したりします。 Firefox は、以下のようなシーンの遷移やアニメーションに高度に最適化されています。</p>\n<ul>\n  <li>端末の画面サイズ以下のページ/パネルを使用する</li>\n  <li>CSS 変換や不透明度のプロパティを使った遷移やアニメーションを使用する</li>\n</ul>\n<p>これらのガイドラインに従った遷移やアニメーションは、システムコンポジターにオフロードされ、最大限効率的に動作します。</p>"}},{"type":"prose","value":{"id":"メモリーと電力の使用量","title":"メモリーと電力の使用量","isH3":true,"content":"<p>メモリーと電力使用量の改善は、スタートアップの高速化と同じような問題です。必要のない作業をしたり、普段使わない UI リソースをダラダラとロードしたりしてはいけません。効率的なデータ構造を使用し、画像などのリソースをしっかりと最適化しましょう。</p>\n<p>最近の CPU は、ほとんどアイドル状態の時に低消費電力モードに入ることができます。常にタイマーを作動させたり、不要なアニメーションを実行し続けるアプリケーションは、 CPU が低電力モードに入るのを妨げます。電力効率の良いアプリケーションは、そのようなことをしてはいけません。</p>\n<p>アプリケーションがバックグラウンドに送られると、その文書に対して <code><a href=\"/ja/docs/Web/API/Document/visibilitychange_event\" title=\"/ja/docs/Web/Reference/Events/visibilitychange\">visibilitychange</a></code> イベントが発行されます。このイベントは開発者の味方です。アプリケーションはこのイベントに耳を傾けるべきです。バックグラウンドに送られたときに、アプリケーションが読み込まれたリソースをできるだけ多く手放すと、メモリー使用量が少なくて済み、 Firefox OS の場合、廃棄される可能性も低くなります (以下のメモを参照)。これはつまり、 (すでに実行されているため) 「起動」が速く、 UPP が良いことを意味します。</p>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>Note:</strong> 前述のとおり、 Firefox OS はできる限り多くのアプリケーションを同時に実行するようにしていますが、通常は端末のメモリーが不足したときにアプリケーションを破棄しなければならないことがあります。Firefox OS がどのようにメモリー使用量を管理し、メモリー不足の問題が発生したときにアプリケーションを終了するかについての詳細は、「<a href=\"/ja/docs/Archive/B2G_OS/Debugging/Debugging_OOMs\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">Debugging out of memory errors on Firefox OS</a>」を参照してください。</p>\n</div>"}},{"type":"prose","value":{"id":"アプリケーションのパフォーマンスのためのコーディングのコツ","title":"アプリケーションのパフォーマンスのためのコーディングのコツ","isH3":true,"content":"<p>以下の実用的なヒントは、前述のアプリケーションのパフォーマンス要因の 1 つまたは複数を改善するのに役立ちます。</p>\n<h4 id=\"css_アニメーションとトランジションを使用する\">CSS アニメーションとトランジションを使用する</h4>\n<p>一部のライブラリーの <code>animate()</code> 関数は、おそらく現在、パフォーマンスが悪い数多くの技術 (例えば <a href=\"/ja/docs/Web/API/setTimeout\"><code>WindowOrWorkerGlobalScope.setTimeout</code></a> や <code>top</code>/<code>left</code> による位置指定) を使用しています。代わりに <a href=\"/ja/docs/Web/CSS/CSS_Animations/Using_CSS_animations\">CSS アニメーション</a>を使用してください。多くの場合、実際には <a href=\"/ja/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions\">CSS トランジション</a>を使って実現することができます。ブラウザーはこれらの効果を最適化するように設計されており、 GPU を使用してプロセッサーのパフォーマンスへの影響を最小限に抑えながらスムーズに処理することができるため、うまく機能します。もう一つの利点は、標準化された構文を使って、アプリの他のルック＆フィールと一緒に CSS でこれらの効果を定義できることです。</p>\n<p>CSS アニメーションでは、 <a href=\"/ja/docs/Web/CSS/@keyframes\">キーフレーム</a>を使って効果を細かく制御することができます。また、アニメーション処理中に発生するイベントを監視して、アニメーション処理中の特定のポイントで実行する必要のある他のタスクを処理することもできます。これらのアニメーションは、 <a href=\"/ja/docs/Web/CSS/:hover\"><code>:hover</code></a>, <a href=\"/ja/docs/Web/CSS/:focus\"><code>:focus</code></a>, <a href=\"/ja/docs/Web/CSS/:target\"><code>:target</code></a> を使ったり、親要素に動的にクラスを追加したり削除したりすることで、簡単に起動することができます。</p>\n<p>アニメーションをその場で作成したり、 <a href=\"/ja/docs/Web/JavaScript\">JavaScript</a> で修正したりしたい場合は、 James Long 氏が <a href=\"https://github.com/jlongster/css-animations.js/\" class=\"external\" rel=\" noopener\">CSS-animations.js</a> というシンプルなライブラリーを作成していますので、そちらをご利用ください。</p>\n<h4 id=\"css_変換を使用する\">CSS 変換を使用する</h4>\n<p>コンテンツの位置やスケールなどを調整するのに、絶対位置を調整したり、すべての計算を自分で行ったりする代わりに、 CSS の <a href=\"/ja/docs/Web/CSS/transform\"><code>transform</code></a> プロパティを使用しましょう。その理由は、繰り返しになりますが、ハードウェアアクセラレーションです。ブラウザーはこれらの作業を GPU で行い、 CPU に他の処理をさせることができます。</p>\n<p>さらに、変換は、他では得られない機能を提供します。 2D 空間の要素を変換するだけでなく、 3 次元に変換したり、斜めにしたり、回転させたりすることができます。 Paul Irish 氏は、パフォーマンスの観点から見た <a href=\"https://paulirish.com/2012/why-moving-elements-with-translate-is-better-than-posabs-topleft/\" class=\"external\" rel=\" noopener\"><code>translate()</code> の利点を詳しく分析</a>しています。しかし、一般的には、 CSS アニメーションを使用する場合と同じメリットがあります。つまり、仕事に適したツールを使用し、最適化はブラウザーに任せることができるのです。また、要素の位置を簡単に拡張できる方法を使用しています。 <code>top</code> と <code>left</code> の位置指定で変換をシミュレートする場合は、多くの追加コードが必要になります。もうひとつの利点は、 <code>canvas</code> 要素で作業するのと同じだということです。</p>\n<div class=\"notecard note\" id=\"sect6\">\n  <p><strong>Note:</strong> プラットフォームによっては、 CSS アニメーションでハードウェアアクセラレーションを利用したい場合、 <code>translateZ(0.1)</code> 変換を割り当てる必要があります。前述のとおり、パフォーマンスが向上しますが、メモリー消費の問題もあります。テストをして、自分のアプリケーションに最適な方法を見つけてみてはいかがでしょうか。</p>\n</div>\n<h4 id=\"requestanimationframe_を_setinterval_の代わりに使用する\"><code>requestAnimationFrame()</code> を <code>setInterval()</code> の代わりに使用する</h4>\n<p><a href=\"/ja/docs/Web/API/setInterval\"><code>WindowOrWorkerGlobalScope.setInterval</code></a> の呼び出しは、現在の状況下で可能かどうかわからない推定フレームレートでコードを実行します。このコードは、ブラウザーが実際に描画していない間、つまりビデオハードウェアが次の表示サイクルに達していない間にも、結果をレンダリングするようブラウザーに指示します。これはプロセッサー時間を浪費し、ユーザーの端末のバッテリー寿命を縮めることにもつながります。</p>\n<p>その代わりに、 <a href=\"/ja/docs/Web/API/Window/requestAnimationFrame\"><code>window.requestAnimationFrame()</code></a> を使うようにしましょう。これは、ブラウザーがアニメーションの次のフレームを作り始める準備ができるまで待機し、ハードウェアが実際に何も描画しない場合は無視します。この API のもう一つの利点は、アプリが画面上に表示されていない間はアニメーションが実行されないことです (バックグラウンドで他のタスクが動作している場合など)。これにより、バッテリーの消費を抑え、ユーザーが夜空に向かってあなたの名前を罵るのを防ぐことができます。</p>\n<h4 id=\"イベントを即時にする\">イベントを即時にする</h4>\n<p>アクセシビリティに配慮した古いタイプのウェブ開発者は、キーボード入力二も対応する click イベントが大好きです。モバイル端末では、これらのイベントは遅すぎます。代わりに <code><a href=\"/en-US/docs/Web/API/Element/touchstart_event\" title=\"Currently only available in English (US)\" class=\"only-in-en-us\">touchstart (en-US)</a></code> と <code><a href=\"/en-US/docs/Web/API/Element/touchend_event\" title=\"Currently only available in English (US)\" class=\"only-in-en-us\">touchend (en-US)</a></code> を使うべきです。これらのイベントには、アプリの操作を鈍くする遅延がないからです。最初にタッチ対応のテストを行えば、アクセシビリティも犠牲にすることはありません。例えば、 Financial Times は、そのために <a href=\"https://github.com/ftlabs/fastclick\" class=\"external\" rel=\" noopener\">fastclick</a> というライブラリーを使用しており、これを利用することができます。</p>\n<h4 id=\"インターフェイスをシンプルに保つ\">インターフェイスをシンプルに保つ</h4>\n<p>HTML5 アプリのパフォーマンスに関する大きな問題のひとつに、たくさんの <a href=\"/ja/docs/Web/API/Document_Object_Model\">DOM</a> 要素を移動させるとすべてが遅くなるということがあります。見た目をシンプルにして、ドラッグ＆ドロップでプロキシー要素を移動させるようにすると非常に有効です。</p>\n<p>たとえば、長い要素のリスト (ツイートとします) がある場合、それらをすべて移動させてはいけません。代わりに、表示されているものと、現在表示されているツイートのセットの両側にいくつかあるものだけを DOM ツリーに残します。残りは隠すか削除します。データを DOM にアクセスするのではなく、 JavaScript のオブジェクトに保持することで、アプリのパフォーマンスが大幅に向上します。表示は、データそのものではなく、データのプレゼンテーションだと考えてください。だからといって、 HTML をそのままソースとして使ってはいけないというわけではありません。 HTML を一度読み込んでから 10 個の要素をスクロールさせ、表示されていない 100 個の要素を動かすのではなく、結果リストの中の自分の位置に応じて最初と最後の要素の内容を変えればいいのです。ゲームでは、スプライトにも同じことが言えます。その代わりに、画面外にスクロールした要素を新しいものが入ってきたときに再利用します。</p>"}},{"type":"prose","value":{"id":"一般的なアプリケーションのパフォーマンス分析","title":"一般的なアプリケーションのパフォーマンス分析","isH3":false,"content":"<p>Firefox や Chrome などのブラウザーには、ページの表示速度が遅いことを診断するためのツールが組み込まれています。特に、 <a href=\"https://firefox-source-docs.mozilla.org/devtools-user/network_monitor/index.html\" class=\"external\" rel=\" noopener\">Firefox のネットワークモニター</a>は、ページ上のそれぞれのネットワークリクエストがいつ発生し、どれくらいの規模で、どれくらいの時間がかかっているかを正確に時系列で表示します。</p>\n<p>\n  <img src=\"/en-US/docs/Web/Performance/Fundamentals/network-monitor.jpg\" alt=\"Firefox のネットワークモニターが、リクエストの取得、複数のファイル、各リソースの読み込みにかかった時間をグラフで表示しているところ。\" width=\"700\" height=\"713\" loading=\"lazy\">\n</p>\n<p>ページに実行に時間がかかる JavaScript コードが含まれている場合、 <a href=\"https://firefox-source-docs.mozilla.org/devtools-user/performance/index.html\" class=\"external\" rel=\" noopener\">JavaScript プロファイラー</a>は最も遅いコードの行を特定します。</p>\n<p>\n  <img src=\"/en-US/docs/Web/Performance/Fundamentals/javascript-profiler.png\" alt=\"Firefox の JavaScript プロファイラーが完成したプロファイル 1 を表示しているところ。\" width=\"896\" height=\"433\" loading=\"lazy\">\n</p>\n<p><a href=\"/ja/docs/Performance/Profiling_with_the_Built-in_Profiler\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">Gecko 内蔵のプロファイラー</a> は、プロファイラーの実行中にブラウザーのコードのどの部分がゆっくりと動作しているかについて、さらに詳細な情報を提供する非常に便利なツールです。これは使用方法が少し複雑ですが、多くの有用な詳細情報を提供してくれます。</p>\n<p>\n  <img src=\"/en-US/docs/Web/Performance/Fundamentals/gecko-profiler.png\" alt=\"Gecko 内蔵プロファイラーウィンドウが多くのネットワーク情報を表示しているところ。\" width=\"896\" height=\"514\" loading=\"lazy\">\n</p>\n<div class=\"notecard note\" id=\"sect7\">\n  <p><strong>Note:</strong> Android のブラウザーで Firefox を起動し、<a href=\"https://firefox-source-docs.mozilla.org/devtools-user/remote_debugging/index.html\" class=\"external\" rel=\" noopener\">リモートデバッグ</a>を有効にすることで、これらのツールを使用することができます。</p>\n</div>\n<p>特に、モバイルブラウザーでは、数十から数百のネットワークリクエストに時間がかかります。また、大きな画像や CSS グラデーションの描画にも時間がかかることがあります。大きなファイルのダウンロードは、高速なネットワークであっても時間がかかることがあります。これは、モバイルハードウェアの速度が遅すぎて、利用可能なすべての帯域幅を活用できない場合があるためです。モバイルウェブのパフォーマンスに関する一般的なヒントについては、 Maximiliano Firtman 氏の <a href=\"https://www.slideshare.net/firt/mobile-web-high-performance\" class=\"external\" rel=\" noopener\">Mobile Web High Performance</a> の談話をご覧ください。</p>"}},{"type":"prose","value":{"id":"テストケースとバグの報告","title":"テストケースとバグの報告","isH3":true,"content":"<p>Firefox や Chrome の開発者ツールで問題が解決しない場合や、ウェブブラウザーが原因と思われる場合は、問題を最大限に分離した縮小版のテストケースを提供してみてください。それが問題の診断に役立つことがよくあります。</p>\n<p>HTML ページの静的なコピー (埋め込まれている画像、スタイルシート、スクリプトを含む) を保存、読み込みすることで問題を再現できるかどうかを確認してください。問題が再現できれば、静的ファイルを編集して個人情報を削除し、他の人に送って助けを求めてください (例えば、 <a href=\"https://bugzilla.mozilla.org/\" class=\"external\" rel=\" noopener\">Bugzilla</a> レポートを提出するか、サーバーでホスティングして URL を共有してください)。また、上述のツールを使って収集したプロファイリング情報も共有してください。</p>"}}],"toc":[{"text":"パフォーマンスとは","id":"パフォーマンスとは"},{"text":"プラットフォームのパフォーマンスの最適化","id":"プラットフォームのパフォーマンスの最適化"},{"text":"アプリケーションのパフォーマンス","id":"アプリケーションのパフォーマンス"},{"text":"一般的なアプリケーションのパフォーマンス分析","id":"一般的なアプリケーションのパフォーマンス分析"}],"summary":"パフォーマンスとは、効率性を意味します。この文書では、オープンウェブアプリの観点から、パフォーマンスとは何か、ブラウザープラットフォームでどのようにパフォーマンスを向上させるか、テストや改善にどのようなツールやプロセスを使用できるかについて一般的な説明をします。.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Performance fundamentals","locale":"en-US","native":"English (US)"},{"title":"Performance fundamentals","locale":"es","native":"Español"},{"title":"Основы производительности","locale":"ru","native":"Русский"}],"source":{"folder":"ja/web/performance/fundamentals","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/performance/fundamentals/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/Performance","title":"ウェブパフォーマンス"},{"uri":"/ja/docs/Web/Performance/Fundamentals","title":"パフォーマンスの基礎"}],"pageTitle":"パフォーマンスの基礎 - ウェブパフォーマンス | MDN","noIndexing":false}}