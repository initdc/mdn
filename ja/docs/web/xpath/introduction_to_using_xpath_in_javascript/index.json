{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"JavaScript での XPath の利用の手引き","mdn_url":"/ja/docs/Web/XPath/Introduction_to_using_XPath_in_JavaScript","locale":"ja","native":"日本語","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>この文書では、拡張機能やウェブサイトから JavaScript 内で <a href=\"/ja/docs/Web/XPath\">XPath</a> を使うためのインターフェイスについて解説します。 Mozilla は <a href=\"https://www.w3.org/TR/DOM-Level-3-XPath/xpath.html\" class=\"external\" rel=\" noopener\">DOM 3 XPath</a> のかなりの部分を実装しており、 HTML 文書と XML 文書のどちらに対しても XPath 式を実行することができます。</p>\n<p>XPath を使用するための主となるインターフェイスは <a href=\"/ja/docs/Web/API/Document\">document</a> オブジェクトの <a href=\"/ja/docs/Web/API/Document/evaluate\">evaluate</a> 関数です。</p>"}},{"type":"prose","value":{"id":"document.evaluate","title":"document.evaluate","isH3":false,"content":"<p>このメソッドは <a href=\"/ja/docs/Web/XPath\">XPath</a> 式を <a href=\"/ja/docs/Glossary/XML\">XML</a> ベースの文書 ( HTML を含む) に対して評価し、 <a href=\"/ja/docs/Web/API/XPathResult\"><code>XPathResult</code></a> オブジェクトを返します。これは単一のノード、もしくはノードの集合になります。このメソッドの既存のドキュメントは <a href=\"/ja/docs/Web/API/Document/evaluate\">document.evaluate</a> ですが、このメソッドの解説のためには内容が薄いため、以下でさらに詳しく説明します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> xpathResult <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span> xpathExpression<span class=\"token punctuation\">,</span> contextNode<span class=\"token punctuation\">,</span> namespaceResolver<span class=\"token punctuation\">,</span> resultType<span class=\"token punctuation\">,</span> result <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"引数","title":"引数","isH3":true,"content":"<p><a href=\"/ja/docs/Web/API/Document/evaluate\">evaluate</a> 関数は 5 つの引数を取ります。</p>\n<ul>\n  <li><code>xpathExpression</code>: 評価する XPath 式を文字列で指定します。</li>\n  <li><code>contextNode</code>: <code>xpathExpression</code> を評価する対象となる文書内のノードを指定します。指定されたノードの全ての子ノードに対しても評価が行われます。もっともよく使用される値は <a href=\"/ja/docs/Web/API/Document\">document</a> ノードです。</li>\n  <li><code>namespaceResolver</code>: <code>xpathExpression</code> に含まれるあらゆる名前空間接頭辞を渡され、その接頭辞に対応する名前空間 URI を表す文字列を返す関数です。この関数により、 XPath 式で使われている接頭辞と文書内で使われている接頭辞が異なっていたとしてもそれを変換することが可能になります。この関数は次のいずれかです。\n    <ul>\n      <li><a href=\"http://www.xulplanet.com/references/objref/XPathEvaluator.html\" class=\"external\" rel=\" noopener\"><code>XPathEvaluator</code></a> オブジェクトの <a href=\"/ja/docs/Web/API/Document/createNSResolver\"><code>createNSResolver</code></a> メソッドにより<a href=\"#%E6%97%A2%E5%AE%9A%E3%81%AE%E5%90%8D%E5%89%8D%E7%A9%BA%E9%96%93%E3%83%AA%E3%82%BE%E3%83%AB%E3%83%90%E3%83%BC%E3%81%AE%E5%AE%9F%E8%A3%85\">作成された</a>もの。ほとんどの場合はこれを使うべきでしょう。</li>\n      <li>HTML 文書の場合や、名前空間接頭辞が使われていない場合は <code>null</code>。 <code>xpathExpression</code> に名前空間接頭辞が含まれている場合は、 <code>DOMException</code> が <code>NAMESPACE_ERR</code> のコードで発生するので注意してください。</li>\n      <li>ユーザー定義のカスタム関数。詳しくは付録の<a href=\"#%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E5%AE%9A%E7%BE%A9%E3%81%AE%E5%90%8D%E5%89%8D%E7%A9%BA%E9%96%93%E3%83%AA%E3%82%BE%E3%83%AB%E3%83%90%E3%83%BC%E3%81%AE%E5%AE%9F%E8%A3%85\">ユーザー定義名前空間リゾルバーの使用</a>の節を参照してください。</li>\n    </ul>\n  </li>\n  <li><code>resultType</code>: 評価の結果返してほしい値の型を示す<a href=\"#xpathresult_%E3%81%AE%E5%AE%9A%E7%BE%A9%E6%B8%88%E3%81%BF%E5%AE%9A%E6%95%B0\">定数</a>です。もっともよく指定される定数は <code>XPathResult.ANY_TYPE</code> で、この場合、指定された XPath 式に対して一番適切な型で結果が返されます。指定できる定数の一覧は付録の<a href=\"#xpathresult_%E3%81%AE%E5%AE%9A%E7%BE%A9%E6%B8%88%E3%81%BF%E5%AE%9A%E6%95%B0\">定数一覧</a>の節を参照してください。それぞれの定数の使い方は「<a href=\"#%E8%BF%94%E5%80%A4%E3%81%AE%E5%9E%8B%E3%81%AE%E6%8C%87%E5%AE%9A\">返値の型の指定</a>」の節を参考にしてください。</li>\n  <li><code>result</code>: 既存の <code>XPathResult</code> オブジェクトが指定された場合には、そのオブジェクトが再利用されます。 <code>null</code> が指定された場合は、新しい <code>XPathResult</code> オブジェクトが生成されます。</li>\n</ul>"}},{"type":"prose","value":{"id":"返値","title":"返値","isH3":true,"content":"<p><code>xpathResult</code> を返します。これは引数 <code>resultType</code> で<a href=\"#%E8%BF%94%E5%80%A4%E3%81%AE%E5%9E%8B%E3%81%AE%E6%8C%87%E5%AE%9A\">指定された</a>の <code>XPathResult</code> 型のオブジェクトです。<code>XPathResult</code> インターフェイスは<a href=\"/ja/docs/Web/API/XPathResult\">ここ</a>で定義されています。</p>"}},{"type":"prose","value":{"id":"既定の名前空間リゾルバーの実装","title":"既定の名前空間リゾルバーの実装","isH3":true,"content":"<p>名前空間リゾルバーを作成するには、普通は <a href=\"/ja/docs/Web/API/Document\">document</a> オブジェクトの <code>createNSResolver</code> メソッドを使います。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> nsResolver <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createNSResolver</span><span class=\"token punctuation\">(</span> contextNode<span class=\"token punctuation\">.</span>ownerDocument <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> contextNode<span class=\"token punctuation\">.</span>documentElement <span class=\"token operator\">:</span> contextNode<span class=\"token punctuation\">.</span>ownerDocument<span class=\"token punctuation\">.</span>documentElement <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>または、 <code>XPathEvaluator</code> オブジェクトの <code>createNSResolver</code> メソッドを使います。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> xpEvaluator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XPathEvaluator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> nsResolver <span class=\"token operator\">=</span> xpEvaluator<span class=\"token punctuation\">.</span><span class=\"token function\">createNSResolver</span><span class=\"token punctuation\">(</span> contextNode<span class=\"token punctuation\">.</span>ownerDocument <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> contextNode<span class=\"token punctuation\">.</span>documentElement <span class=\"token operator\">:</span> contextNode<span class=\"token punctuation\">.</span>ownerDocument<span class=\"token punctuation\">.</span>documentElement <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>それから 変数 <code>nsResolver</code> を引数 <code>namespaceResolver</code> として <code>document.evaluate</code> に渡します。</p>\n<p>注: XPath では接頭辞のない QName は名前空間が null の要素にのみ一致すると定義しています。 XPath には、通常の要素参照に適用される既定の名前空間を取得する手段はありません。 (例: <code>xmlns='http://www.w3.org/1999/xhtml'</code> に対する <code>p[@id='_myid']</code>)。名前空間が null ではない既定の要素に一致させるには、 <code>['namespace-uri()='http://www.w3.org/1999/xhtml' and name()='p' and @id='_myid']</code> のような形を使用して特定の要素を参照するか (<a href=\"#using_xpath_functions_to_reference_elements_with_a_default_namespace\">このアプローチ</a>は名前空間が不明である可能性のある動的な XPath で有効です)、接頭辞つきの名前テストを使用し、その接頭辞を名前空間にマッピングする名前空間リゾルバーを作成する必要があります。詳しくは下記の<a href=\"#%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E5%AE%9A%E7%BE%A9%E3%81%AE%E5%90%8D%E5%89%8D%E7%A9%BA%E9%96%93%E3%83%AA%E3%82%BE%E3%83%AB%E3%83%90%E3%83%BC%E3%81%AE%E5%AE%9F%E8%A3%85\">ユーザー定義の名前空間リゾルバーを作成する</a>方法を参照して下さい。</p>"}},{"type":"prose","value":{"id":"注","title":"注","isH3":true,"content":"<p>任意の DOM ノードを名前空間の解決に適応させると、 <a href=\"/ja/docs/Web/XPath\">XPath</a> 式が文書内に現れたノードのコンテキストに関連して簡単に評価できるようになります。このアダプターは、ノード上の DOM Level 3 メソッド <code>lookupNamespaceURI</code> と同様に動作し、 <code>lookupNamespaceURI</code> が呼び出された時点でノードの階層で利用可能な現在の情報を使用して、指定された接頭辞から <code>namespaceURI</code> を解決します。また、暗黙の <code>xml</code> 接頭辞も正しく解決します。</p>"}},{"type":"prose","value":{"id":"返値の型の指定","title":"返値の型の指定","isH3":true,"content":"<p><code>document.evaluate</code> から返される変数 <code>xpathResult</code> は、単一のノード (<a href=\"#simple_types\">単純型</a>) もしくはノードのコレクション (<a href=\"#node-set_types\">ノード集合型</a>) から成ります。</p>\n<h4 id=\"単純型\">単純型</h4>\n<p><code>resultType</code> で要求された結果型が次のうちのどれかであった場合、</p>\n<ul>\n  <li><code>NUMBER_TYPE</code> - 倍精度浮動小数点数 (double)</li>\n  <li><code>STRING_TYPE</code> - 文字列</li>\n  <li><code>BOOLEAN_TYPE</code> - 論理値</li>\n</ul>\n<p>それぞれ以下の <code>XPathResult</code> オブジェクトのプロパティにアクセスすることで式の返値を得る事ができます。</p>\n<ul>\n  <li><code>numberValue</code></li>\n  <li><code>stringValue</code></li>\n  <li><code>booleanValue</code></li>\n</ul>\n<h5 id=\"例\">例</h5>\n<p>下の例では XPath 式 <a href=\"/ja/docs/Web/XPath/Functions/count\"><code>count(//p)</code></a> によって HTML 文書内の <code>&lt;p&gt;</code> 要素の数を取得しています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> paragraphCount <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'count(//p)'</span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> XPathResult<span class=\"token punctuation\">.</span><span class=\"token constant\">ANY_TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'この文書には '</span> <span class=\"token operator\">+</span> paragraphCount<span class=\"token punctuation\">.</span>numberValue <span class=\"token operator\">+</span> <span class=\"token string\">' 個の段落要素が含まれています'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>JavaScript では数値を表示しようとすると文字列に変換されますが、 XPath インターフェイスは <code>stringValue</code> プロパティを要求しても数値の結果を自動的に変換しないので、下のコードは<strong>動作しません</strong>。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> paragraphCount <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'count(//p)'</span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> XPathResult<span class=\"token punctuation\">.</span><span class=\"token constant\">ANY_TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'この文書には '</span> <span class=\"token operator\">+</span> paragraphCount<span class=\"token punctuation\">.</span>stringValue <span class=\"token operator\">+</span> <span class=\"token string\">' 個の段落要素が含まれています'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これを実行すると <code>NS_DOM_TYPE_ERROR</code> コードの例外が返されます。</p>\n<h4 id=\"ノード集合型\">ノード集合型</h4>\n<p><code>XPathResult</code> オブジェクトが返すノード集合には主として 3 種類の型があります。</p>\n<ul>\n  <li><a href=\"#iterators\">イテレーター</a></li>\n  <li><a href=\"#snapshots\">スナップショット</a></li>\n  <li><a href=\"#first_node\">ファーストノード</a></li>\n</ul>\n<h5 id=\"イテレーター\">イテレーター</h5>\n<p>引数 <code>resultType</code> で指定された結果型が次のどちらかの場合、</p>\n<ul>\n  <li><code>UNORDERED_NODE_ITERATOR_TYPE</code></li>\n  <li><code>ORDERED_NODE_ITERATOR_TYPE</code></li>\n</ul>\n<p>一致したノードのノード集合が <code>XPathResult</code> オブジェクトとして返されます。これはイテレーターのようにふるまい、 <code>XPathResult</code> の <code>iterateNext()</code> メソッドを使ってその中に含まれる個々のノードにアクセスできます。</p>\n<p>一致したノードに対する反復が全て終了すると、 <code>iterateNext()</code> は <code>null</code> を返します。</p>\n<p>ただし、反復処理中に文書が変異した (文書ツリーが改変された) 場合、反復処理は無効化され、<code>XPathResult</code> の <code>invalidIteratorState</code> プロパティが <code>true</code> に設定され、<code>NS_ERROR_DOM_INVALID_STATE_ERR</code> 例外が投げられます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> iterator <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'//phoneNumber'</span><span class=\"token punctuation\">,</span> documentNode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> XPathResult<span class=\"token punctuation\">.</span><span class=\"token constant\">UNORDERED_NODE_ITERATOR_TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> thisNode <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">iterateNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>thisNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> thisNode<span class=\"token punctuation\">.</span>textContent <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    thisNode <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">iterateNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'Error: Document tree modified during iteration '</span> <span class=\"token operator\">+</span> e <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h5 id=\"スナップショット\">スナップショット</h5>\n<p>引数 <code>resultType</code> で指定された結果型が次のどちらかの場合、</p>\n<ul>\n  <li><code>UNORDERED_NODE_SNAPSHOT_TYPE</code></li>\n  <li><code>ORDERED_NODE_SNAPSHOT_TYPE</code></li>\n</ul>\n<p>返される <code>XPathResult</code> オブジェクトは一致したノードの静的な集合となり、 <code>XPathResult</code> オブジェクトの <code>snapshotItem(itemNumber)</code> メソッドによってそれぞれのノードにアクセスできます。<code>itemNumber</code> は取り出すノードのインデックスです。含まれるノードの総数は <code>snapshotLength</code> プロパティから得られます。</p>\n<p>スナップショットは文書が変化しても変更されず、イテレーターと違って無効になることはありませんが、スナップショットは現在の文書に対応しないことがあります。ノードが移動されていたり、既に存在しないノードが含まれていたり、新しいノードが追加されている可能性もあります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> nodesSnapshot <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'//phoneNumber'</span><span class=\"token punctuation\">,</span> documentNode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> XPathResult<span class=\"token punctuation\">.</span><span class=\"token constant\">ORDERED_NODE_SNAPSHOT_TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nodesSnapshot<span class=\"token punctuation\">.</span>snapshotLength<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> nodesSnapshot<span class=\"token punctuation\">.</span><span class=\"token function\">snapshotItem</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h5 id=\"ファーストノード\">ファーストノード</h5>\n<p>引数 <code>resultType</code> で指定された結果型が次のどちらかの場合、</p>\n<ul>\n  <li><code>ANY_UNORDERED_NODE_TYPE</code></li>\n  <li><code>FIRST_ORDERED_NODE_TYPE</code></li>\n</ul>\n<p>返される <code>XPathResult</code> オブジェクトは XPath 式に一致するノードのうち最初に見つかったもののみです。このノードには <code>XPathResult</code> オブジェクトの <code>singleNodeValue</code> プロパティによってアクセスできます。ノード集合が空ならばこのプロパティは <code>null</code> になります。</p>\n<p>ただし、 unordered サブタイプの場合、返される単一のノードは文書順において最初のものではない可能性があるので注意が必要です。 ordered サブタイプの場合は文書順において最初に一致するノードであることが保証されます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> firstPhoneNumber <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'//phoneNumber'</span><span class=\"token punctuation\">,</span> documentNode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> XPathResult<span class=\"token punctuation\">.</span><span class=\"token constant\">FIRST_ORDERED_NODE_TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'The first phone number found is '</span> <span class=\"token operator\">+</span> firstPhoneNumber<span class=\"token punctuation\">.</span>singleNodeValue<span class=\"token punctuation\">.</span>textContent <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"any_type_定数\">ANY_TYPE 定数</h4>\n<p>引数 <code>resultType</code> に指定された結果型が <code>ANY_TYPE</code> である場合、返される <code>XPathResult</code> オブジェクトは、式を評価した結果から導き出される適切な型になります。</p>\n<p>返される結果型は単純型 (<code>NUMBER_TYPE</code>, <code>STRING_TYPE</code>, <code>BOOLEAN_TYPE</code>) のうちのいずれにもなり得ます<strong>が</strong>、もしノード集合であった場合には、<code>UNORDERED_NODE_ITERATOR_TYPE</code> に<strong>しか</strong>なり得ません。</p>\n<p>評価の後に型を判断するには、 <code>XPathResult</code> オブジェクトの <code>resultType</code> プロパティを使います。このプロパティの<a href=\"#xpathresult_%E3%81%AE%E5%AE%9A%E7%BE%A9%E6%B8%88%E3%81%BF%E5%AE%9A%E6%95%B0\">定数</a>値は付録に記載されています。 None Yet =====Any_Type Example===== &lt;pre&gt; &lt;/pre&gt;</p>"}},{"type":"prose","value":{"id":"例_2","title":"例","isH3":false,"content":""}},{"type":"prose","value":{"id":"html_文書内で","title":"HTML 文書内で","isH3":true,"content":"<p>下のコードは、 XPath 式を評価する対象となる HTML 文書の内部や、それにリンクされた JavaScript 内に設置するためのものです。</p>\n<p>XPath を使って HTML 文書内のすべての <code>&lt;h2&gt;</code> 見出し要素を抽出したければ、<code>xpathExpression</code> は単に '<code>//h2</code>' となります。 <code>//</code> は再帰下降演算子 (Recursive Descent Operator) なので、この式は文書ツリー内のあらゆる位置にある、nodeName が <code>h2</code> である要素に一致します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> headings <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'//h2'</span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> XPathResult<span class=\"token punctuation\">.</span><span class=\"token constant\">ANY_TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>HTML には名前空間がないため、引数 <code>namespaceResolver</code> には <code>null</code> を渡している事に注目してください。</p>\n<p>文書全体から見出し要素を探すため、ここでは <a href=\"/ja/docs/Web/API/Document\">document</a> オブジェクト自体を <code>contextNode</code> として使っています。</p>\n<p>この式の結果は <code>XPathResult</code> オブジェクトです。返された結果の型を知りたい場合は、返されたオブジェクトの <code>resultType</code> プロパティを評価してください。この場合は <code>4</code> 、つまり <code>UNORDERED_NODE_ITERATOR_TYPE</code> と評価されるでしょう。これは XPath 式の結果がノード集合であった場合の既定の結果型です。この型はノードに一つずつアクセスすることができ、返されるノードの順序は決まっていません。返されたノードにアクセスするには、返されたオブジェクトの <code>iterateNext()</code> メソッドを使います。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> thisHeading <span class=\"token operator\">=</span> headings<span class=\"token punctuation\">.</span><span class=\"token function\">iterateNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> alertText <span class=\"token operator\">=</span> <span class=\"token string\">'この文書内のレベル 2 の見出しは、\\n'</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>thisHeading<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  alertText <span class=\"token operator\">+=</span> thisHeading<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n  thisHeading <span class=\"token operator\">=</span> headings<span class=\"token punctuation\">.</span><span class=\"token function\">iterateNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>反復によってノードを得られたら、そのノードのすべての標準 DOM インターフェイスにアクセスできます。式によって返される <code>h2</code> 要素に対する反復処理が全て終了すると、それ以降は <code>iterateNext()</code> を何度呼び出しても <code>null</code> が返されます。</p>"}},{"type":"prose","value":{"id":"拡張機能内の_xml_文書に対して評価する","title":"拡張機能内の XML 文書に対して評価する","isH3":true,"content":"<p>例として XML 文書が <code>chrome://yourextension/content/peopleDB.xml</code> にあったとします。</p>\n<div class=\"code-example\"><pre class=\"brush: xml notranslate\"><code><span class=\"token prolog\">&lt;?xml version=\"1.0\"?&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>people</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xul</span> <span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>person</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span> <span class=\"token attr-name\">first</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>george<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">last</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bush<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>address</span> <span class=\"token attr-name\">street</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1600 pennsylvania avenue<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">city</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>washington<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">country</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>usa<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>phoneNumber</span><span class=\"token punctuation\">&gt;</span></span>202-456-1111<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>phoneNumber</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>person</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>person</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span> <span class=\"token attr-name\">first</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tony<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">last</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blair<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>address</span> <span class=\"token attr-name\">street</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10 downing street<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">city</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>london<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">country</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>uk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>phoneNumber</span><span class=\"token punctuation\">&gt;</span></span>020 7925 0918<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>phoneNumber</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>person</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>people</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>拡張機能内で XML 文書の内容を取得できるようにするため、<a href=\"/ja/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a> オブジェクトを作成して文書を同期的に読み込みます。変数 <code>xmlDoc</code> には文書が <a href=\"/ja/XMLDocument\" class=\"page-not-created\" title=\"This is a link to an unwritten page\"><code>XMLDocument</code></a> オブジェクトとして格納されるので、それに対して <code>evaluate</code> メソッドを使う事ができます。</p>\n<p>拡張機能の xul/js 文書で使用する JavaScript は以下の通りです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> req <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"chrome://yourextension/content/peopleDB.xml\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> xmlDoc <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>responseXML<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> nsResolver <span class=\"token operator\">=</span> xmlDoc<span class=\"token punctuation\">.</span><span class=\"token function\">createNSResolver</span><span class=\"token punctuation\">(</span> xmlDoc<span class=\"token punctuation\">.</span>ownerDocument <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> xmlDoc<span class=\"token punctuation\">.</span>documentElement <span class=\"token operator\">:</span> xmlDoc<span class=\"token punctuation\">.</span>ownerDocument<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> personIterator <span class=\"token operator\">=</span> xmlDoc<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'//person'</span><span class=\"token punctuation\">,</span> xmlDoc<span class=\"token punctuation\">,</span> nsResolver<span class=\"token punctuation\">,</span> XPathResult<span class=\"token punctuation\">.</span><span class=\"token constant\">ANY_TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"注_2","title":"注","isH3":true,"content":"<p>XPathResult オブジェクトが定義されていない場合は、 <code>Components.interfaces.nsIDOMXPathResult.ANY_TYPE</code> (<code>CI.nsIDOMXPathResult</code>) を使用して、特権的なコードで定数を取得できます。同様に、 XPathEvaluator は次のようにして作成できます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>Components<span class=\"token punctuation\">.</span>classes<span class=\"token punctuation\">[</span><span class=\"token string\">\"@mozilla.org/dom/xpath-evaluator;1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">createInstance</span><span class=\"token punctuation\">(</span>Components<span class=\"token punctuation\">.</span>interfaces<span class=\"token punctuation\">.</span>nsIDOMXPathEvaluator<span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"付録","title":"付録","isH3":false,"content":""}},{"type":"prose","value":{"id":"ユーザー定義の名前空間リゾルバーの実装","title":"ユーザー定義の名前空間リゾルバーの実装","isH3":true,"content":"<p>この例は説明のためだけのものです。 この関数は、<code>xpathExpression</code> から名前空間接頭辞を取り、その接頭辞に対応する URI を返さなければなりません。例えば、この式は、</p>\n<pre class=\"notranslate\">'//xhtml:td/mathml:math'\n</pre>\n<p>(X)HTML のテーブルデータセル要素の子要素である全ての <a href=\"/ja/docs/Web/MathML\">MathML</a> 式を選択します。</p>\n<p>接頭辞 '<code>mathml:</code>' と 名前空間 URI '<code>http://www.w3.org/1998/Math/MathML</code>' を、接頭辞 '<code>xhtml:</code>' と URI '<code>http://www.w3.org/1999/xhtml</code>' をそれぞれ関連付けるため、関数を用意します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">nsResolver</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prefix</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> ns <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">'xhtml'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'http://www.w3.org/1999/xhtml'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'mathml'</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://www.w3.org/1998/Math/MathML'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> ns<span class=\"token punctuation\">[</span>prefix<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>そうすると <code>document.evaluate</code> をこのようにして呼び出せます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>document<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'//xhtml:td/mathml:math'</span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">,</span> nsResolver<span class=\"token punctuation\">,</span> XPathResult<span class=\"token punctuation\">.</span><span class=\"token constant\">ANY_TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"xml_文書の既定の名前空間を実装する","title":"XML 文書の既定の名前空間を実装する","isH3":true,"content":"<p><a href=\"#%E6%97%A2%E5%AE%9A%E3%81%AE%E5%90%8D%E5%89%8D%E7%A9%BA%E9%96%93%E3%83%AA%E3%82%BE%E3%83%AB%E3%83%90%E3%83%BC%E3%81%AE%E5%AE%9F%E8%A3%85\">既定の名前空間リゾルバーの実装</a>で述べたように、既定のリゾルバーは XML 文書の既定の名前空間を処理しません。たとえばこの文書では、</p>\n<div class=\"code-example\"><pre class=\"brush: xml notranslate\"><code><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>feed</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2005/Atom<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>entry</span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>entry</span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>entry</span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>feed</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p><code>doc.evaluate('//entry', doc, nsResolver, XPathResult.ANY_TYPE, null)</code> は、<code>nsResolver</code> が <code>createNSResolver</code> によって返されたリゾルバーである場合、空集合を返します。リゾルバーとして <code>null</code> を渡しても同じです。</p>\n<p>正しい既定の名前空間 (この場合は Atom 名前空間) を返すカスタムリゾルバーを作成すれば、この問題を解決できます。この時、 XPath 式の中ではなんらかの名前空間接頭辞を使わなければならないことに注意してください。これはリゾルバー関数がその接頭辞を指定した名前空間に変換できるようにするためです。例えばこのようにします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">resolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'http://www.w3.org/2005/Atom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\ndoc<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'//myns:entry'</span><span class=\"token punctuation\">,</span> doc<span class=\"token punctuation\">,</span> resolver<span class=\"token punctuation\">,</span> XPathResult<span class=\"token punctuation\">.</span><span class=\"token constant\">ANY_TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>なお、文書で複数の名前空間が使われている場合には、より複雑なリゾルバーが必要になります。</p>\n<p>次の節では、より効果的に機能する (名前空間を事前に知らなくてもよい) アプローチについて説明します。</p>"}},{"type":"prose","value":{"id":"xpath_関数を使用して既定の名前空間の要素を参照する","title":"XPath 関数を使用して既定の名前空間の要素を参照する","isH3":true,"content":"<p>null ではない名前空間の既定の要素に一致させる (そして名前空間が分からない動的な XPath 式で上手く動作する) もう一つの方法として、 <code>[namespace-uri()='http://www.w3.org/1999/xhtml' and name()='p' and @id='_myid']</code> のような形式で特定の要素を参照する方法があります。これにより、XPath クエリーが正規にラベル付けされた要素の既定の名前空間を検出できないという問題が回避されます。</p>"}},{"type":"prose","value":{"id":"接頭辞に関係ない、名前空間付きの要素や属性の取得","title":"接頭辞に関係ない、名前空間付きの要素や属性の取得","isH3":true,"content":"<p>名前空間の要素や属性を見つける際に特定の接頭辞を必ずしも必要とせず、 (意図的に) 名前空間に柔軟性を持たせたい場合は、特別な手法を用いなければなりません。</p>\n<p>上の節のアプローチを応用して、選択された接頭辞に関係なく名前空間の要素をテストすることは (<a href=\"/ja/docs/Web/XPath/Functions/local-name\"><code>local-name()</code></a> と <a href=\"/ja/docs/Web/XPath/Functions/namespace-uri\"><code>namespace-uri()</code></a> を組み合わせて <a href=\"/ja/docs/Web/XPath/Functions/name\"><code>name()</code></a> の代わりに使用すれば) 可能ですが、特定の名前空間属性を持つ要素を述語の中に取り込みたい場合には、より困難な状況が発生します (XPath 1.0 には実装に依存しない変数が存在しないため)。</p>\n<p>たとえば、次のように namespaced 属性を持つ要素を取得しようとすると、 (間違って) <code>var xpathlink = someElements[local-name(@*)=\"href\" and namespace-uri(@*)='http://www.w3.org/1999/xlink'];</code> となります。</p>\n<p>この方法では、ローカル名が \"<code>href</code>\" である属性が存在しても、その属性が (<code>[@href](/ja/docs/Web/XPath/Axes/attribute)</code> ではなく) 対象となる (XLink) 名前空間を持つ別の属性であった場合、誤って一部の要素を取得してしまう可能性があります。</p>\n<p>XLink の <code>@href</code> 属性を持つ要素を (名前空間リゾルバーで定義済みの接頭辞にとらわれずに) 正確に把握するためには、次のようにして取得することができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> xpathEls <span class=\"token operator\">=</span> <span class=\"token string\">'someElements[@*[local-name() = \"href\" and namespace-uri() = \"http://www.w3.org/1999/xlink\"]]'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Grabs elements with any single attribute that has both the local name 'href' and the XLink namespace</span>\n<span class=\"token keyword\">var</span> thislevel <span class=\"token operator\">=</span> xml<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span>xpathEls<span class=\"token punctuation\">,</span> xml<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> XPathResult<span class=\"token punctuation\">.</span><span class=\"token constant\">ANY_TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> thisitemEl <span class=\"token operator\">=</span> thislevel<span class=\"token punctuation\">.</span><span class=\"token function\">iterateNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"xpathresult_の定義済み定数","title":"XPathResult の定義済み定数","isH3":true,"content":"<table>\n  <thead>\n    <tr>\n      <th>定義済みの結果型定数</th>\n      <th>値</th>\n      <th>説明</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>ANY_TYPE</td>\n      <td>0</td>\n      <td>式の評価によって導き出される適切な型を格納した結果の集合。結果がノード集合ならば、結果の型は常に UNORDERED_NODE_ITERATOR_TYPE となるので注意が必要。</td>\n    </tr>\n    <tr>\n      <td>NUMBER_TYPE</td>\n      <td>1</td>\n      <td>一つの数値を格納した結果。 <code>count()</code> 関数を使用した XPath 式などで有用。</td>\n    </tr>\n    <tr>\n      <td>STRING_TYPE</td>\n      <td>2</td>\n      <td>一つの文字列を格納した結果。</td>\n    </tr>\n    <tr>\n      <td>BOOLEAN_TYPE</td>\n      <td>3</td>\n      <td>一つの論理値を格納した結果。 <code>not()</code> 関数を使用した XPath 式などで有用。</td>\n    </tr>\n    <tr>\n      <td>UNORDERED_NODE_ITERATOR_TYPE</td>\n      <td>4</td>\n      <td>一致した全てのノードを格納した結果ノード集合。ノードの順番は文書内に現れる順番と必ずしも一致しない。</td>\n    </tr>\n    <tr>\n      <td>ORDERED_NODE_ITERATOR_TYPE</td>\n      <td>5</td>\n      <td>一致した全てのノードを格納した結果ノード集合。ノードの順番は文書内に現れる順番に一致する。</td>\n    </tr>\n    <tr>\n      <td>UNORDERED_NODE_SNAPSHOT_TYPE</td>\n      <td>6</td>\n      <td>一致した全てのノードのスナップショットを格納した結果ノード集合。ノードの順番は文書内に現れる順番と必ずしも一致しない。</td>\n    </tr>\n    <tr>\n      <td>ORDERED_NODE_SNAPSHOT_TYPE</td>\n      <td>7</td>\n      <td>一致した全てのノードのスナップショットを格納した結果ノード集合。ノードの順番は文書内に現れる順番に一致する。</td>\n    </tr>\n    <tr>\n      <td>ANY_UNORDERED_NODE_TYPE</td>\n      <td>8</td>\n      <td>一致したノードのうちのどれか一つを格納した結果ノード集合。これは必ずしも文書内で式に一致した最初のノードというわけではない。</td>\n    </tr>\n    <tr>\n      <td>FIRST_ORDERED_NODE_TYPE</td>\n      <td>9</td>\n      <td>一致内で式に一致した最初のノードを格納した結果ノード集合。</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/XPath\">XPath</a></li>\n  <li><a href=\"https://www.xml.com/pub/a/2000/08/holman/index.html?page=2#xpath-info\" class=\"external\" rel=\" noopener\">XML Path Language</a> from <em><a href=\"https://www.xml.com/pub/a/2000/08/holman/\" class=\"external\" rel=\" noopener\">What is XSLT?</a></em> by G. Ken Holman</li>\n</ul>"}},{"type":"prose","value":{"id":"原著情報","title":"原著情報","isH3":false,"content":"<ul>\n  <li>原文 <a href=\"https://www-xray.ast.cam.ac.uk/~jgraham/mozilla/xpath-tutorial.html\" class=\"external\" rel=\" noopener\">Mozilla XPath Tutorial</a> に基づいて作成されています。</li>\n  <li>原文の著者: James Graham</li>\n  <li>その他の貢献者: James Thompson</li>\n  <li>最終更新日: 2006 年 3 月 25 日</li>\n</ul>"}}],"toc":[{"text":"document.evaluate","id":"document.evaluate"},{"text":"例","id":"例_2"},{"text":"付録","id":"付録"},{"text":"関連情報","id":"関連情報"},{"text":"原著情報","id":"原著情報"}],"summary":"この文書では、拡張機能やウェブサイトから JavaScript 内で XPath を使うためのインターフェイスについて解説します。 Mozilla は DOM 3 XPath のかなりの部分を実装しており、 HTML 文書と XML 文書のどちらに対しても XPath 式を実行することができます。","popularity":0.0003,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Introduction to using XPath in JavaScript","locale":"en-US","native":"English (US)"},{"title":"Introducción al uso de XPath en Javascript","locale":"es","native":"Español"},{"title":"Introduction à l'utilisation de XPath avec JavaScript","locale":"fr","native":"Français"},{"title":"Introduction to using XPath in JavaScript","locale":"ko","native":"한국어"},{"title":"Introduction to using XPath in JavaScript","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/xpath/introduction_to_using_xpath_in_javascript","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/xpath/introduction_to_using_xpath_in_javascript/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/XPath","title":"XPath"},{"uri":"/ja/docs/Web/XPath/Introduction_to_using_XPath_in_JavaScript","title":"JavaScript での XPath の利用の手引き"}],"pageTitle":"JavaScript での XPath の利用の手引き - XPath | MDN","noIndexing":false}}