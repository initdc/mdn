{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"JavaScript のデータ型とデータ構造","mdn_url":"/ja/docs/Web/JavaScript/Data_structures","locale":"ja","native":"日本語","sidebarHTML":"\n <ol>\n  <li><a href=\"/ja/docs/Web/JavaScript\"><strong><em>JavaScript</em></strong></a></li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Tutorials\"><strong>チュートリアル:</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>初級編</summary>\n      <ol>\n        <li><a href=\"/ja/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">JavaScript の基礎</a></li>\n        <li><a href=\"/ja/docs/Learn/JavaScript/First_steps\">JavaScript の第一歩</a></li>\n        <li><a href=\"/ja/docs/Learn/JavaScript/Building_blocks\">JavaScript の構成要素</a></li>\n        <li><a href=\"/ja/docs/Learn/JavaScript/Objects\">JavaScript オブジェクト入門</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>JavaScript ガイド</summary>\n      <ol>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Introduction\">入門編</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Grammar_and_Types\">文法とデータ型</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">制御フローとエラー処理</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Loops_and_iteration\">ループとイテレーター</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Functions\">関数</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Expressions_and_Operators\">式と演算子</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Numbers_and_dates\">数と日付</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Text_formatting\">テキスト処理</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Regular_Expressions\">正規表現</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Indexed_collections\">インデックス付きコレクション</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Keyed_collections\">キー付きコレクション</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Working_with_Objects\">オブジェクトを利用する</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Details_of_the_Object_Model\">オブジェクトモデルの詳細</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Using_promises\">プロミスの使用</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Iterators_and_generators\">イテレーターとジェネレーター</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Meta_programming\">メタプログラミング</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Modules\">JavaScript モジュール</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>中級編</summary>\n      <ol>\n        <li><a href=\"/ja/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks\">クライアントサイド JavaScript フレームワーク</a></li>\n        <li><a href=\"/ja/docs/Learn/JavaScript/Client-side_web_APIs\">クライアントサイド Web API</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">JavaScript 「再」入門</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Data_structures\">JavaScript のデータ構造</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Equality_comparisons_and_sameness\">等値比較と同一性</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Closures\">クロージャ</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>上級編</summary>\n      <ol>\n        <li><a href=\"/ja/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">継承とプロトタイプチェーン</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Reference/Strict_mode\">Strict モード</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Typed_arrays\">JavaScript 型付き配列</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Memory_Management\">メモリー管理</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/EventLoop\">並列モデルとイベントループ</a></li>\n      </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/ja/docs/Web/JavaScript/Reference\">リファレンス</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n       <summary>組み込みオブジェクト</summary>\n        <ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\">AggregateError</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\">AsyncFunction</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\">AsyncGenerator</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\">AsyncGeneratorFunction</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Atomics\">Atomics</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array\">BigInt64Array</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array\">BigUint64Array</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/DataView\">DataView</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\">decodeURI()</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent()</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI()</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent()</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Error\">Error</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/escape\">escape()</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval()</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/EvalError\">EvalError</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\">FinalizationRegistry</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\">Float32Array</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\">Float64Array</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Generator\">Generator</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">globalThis</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Infinity\">Infinity</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\">Int16Array</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\">Int32Array</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\">Int8Array</a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/InternalError\">InternalError</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/isFinite\">isFinite()</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/isNaN\">isNaN()</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/NaN\">NaN</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">parseFloat()</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">parseInt()</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RangeError\">RangeError</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\">ReferenceError</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">Reflect</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">RegExp</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String\">String</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\">SyntaxError</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">TypedArray</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\">Uint16Array</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\">Uint32Array</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">Uint8Array</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\">Uint8ClampedArray</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/undefined\">undefined</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/unescape\">unescape()</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/URIError\">URIError</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/WeakRef\">WeakRef</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\">WeakSet</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>式と演算子</summary>\n      <ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Addition_assignment\">Addition assignment (+=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Addition\">Addition (+)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Assignment\">Assignment (=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/async_function*\">async function* expression</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/await\">await</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment\">Bitwise AND assignment (&amp;=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">Bitwise AND (&amp;)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">Bitwise NOT (~)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment\">Bitwise OR assignment (|=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">Bitwise OR (|)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment\">Bitwise XOR assignment (^=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">Bitwise XOR (^)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/class\">class expression</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Comma_Operator\">Comma operator (,)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">Conditional (ternary) operator</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Decrement\">Decrement (--)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/delete\">delete operator</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">Destructuring assignment</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Division_assignment\">Division assignment (/=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Division\">Division (/)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Equality\">Equality (==)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment\">Exponentiation assignment (**=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Exponentiation\">Exponentiation (**)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/function\">Function expression</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal\">Greater than or equal (&gt;=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Greater_than\">Greater than (&gt;)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Grouping\">Grouping operator ( )</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/import.meta\">import.meta</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/import\">import</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/in\">in operator</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Increment\">Increment (++)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Inequality\">Inequality (!=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/instanceof\">instanceof</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment\">Left shift assignment (&lt;&lt;=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Left_shift\">Left shift (&lt;&lt;)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal\">Less than or equal (&lt;=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Less_than\">Less than (&lt;)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment\">Logical AND assignment (&amp;&amp;=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Logical_AND\">Logical AND (&amp;&amp;)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">Logical NOT (!)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment\">Logical nullish assignment (??=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment\">Logical OR assignment (||=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Logical OR (||)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment\">Multiplication assignment (*=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Multiplication\">Multiplication (*)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/new.target\">new.target</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/new\">new operator</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/null\">null</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\">Nullish coalescing operator (??)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Object_initializer\">Object initializer</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">Operator precedence</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">Optional chaining (?.)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Property_Accessors\">Property accessors</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Remainder_assignment\">Remainder assignment (%=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Remainder\">Remainder (%)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment\">Right shift assignment (&gt;&gt;=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Right_shift\">Right shift (&gt;&gt;)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Spread syntax (...)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Strict_equality\">Strict equality (===)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">Strict inequality (!==)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment\">Subtraction assignment (-=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Subtraction\">Subtraction (-)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/super\">super</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/this\">this</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/typeof\">typeof</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Unary_negation\">Unary negation (-)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Unary_plus\">Unary plus (+)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment\">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">Unsigned right shift (&gt;&gt;&gt;)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/void\">void operator</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/yield*\">yield*</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/yield\">yield</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>文と宣言</summary>\n      <ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/async_function*\">async function*</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/block\">block</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/break\">break</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/class\">class</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/const\">const</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/continue\">continue</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/debugger\">debugger</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/do...while\">do...while</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/Empty\">empty</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/export\">export</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/for-await...of\">for await...of</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/for\">for</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/function*\">function*</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/function\">function declaration</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/if...else\">if...else</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/import\">import</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/label\">label</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/let\">let</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/return\">return</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/switch\">switch</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/throw\">throw</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/try...catch\">try...catch</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/var\">var</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/while\">while</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/with\">with</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>関数</summary>\n      <ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow function expressions</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Functions/get\">getter</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Functions/set\">setter</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>クラス</summary>\n      <ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Classes/Class_static_initialization_blocks\">Class static initialization blocks</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Classes/constructor\">constructor</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Classes/extends\">extends</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">Private class features</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Classes/Public_class_fields\">Public class fields</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Classes/static\">static</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Errors</summary>\n      <ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Already_has_pragma\">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Array_sort_argument\">TypeError: invalid Array.prototype.sort argument</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Bad_octal\">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Bad_radix\">RangeError: radix must be an integer</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag\">SyntaxError: invalid regular expression flag \"x\"</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield\">SyntaxError: return not in function</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/BigInt_division_by_zero\">RangeError: BigInt division by zero</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/BigInt_negative_exponent\">RangeError: BigInt negative exponent</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type\">TypeError: X.prototype.y called on incompatible type</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init\">ReferenceError: can't access lexical declaration 'X' before initialization</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Cant_assign_to_property\">TypeError: can't assign to property \"x\" on \"y\": not an object</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Cant_be_converted_to_BigInt_because_it_isnt_an_integer\">RangeError: x can't be converted to BigInt because it isn't an integer</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Cant_convert_BigInt_to_number\">TypeError: can't convert BigInt to number</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Cant_convert_x_to_BigInt\">TypeError: can't convert x to BigInt</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible\">TypeError: can't define property \"x\": \"obj\" is not extensible</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Cant_delete\">TypeError: property \"x\" is non-configurable and can't be deleted</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property\">TypeError: can't redefine non-configurable property \"x\"</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Cant_use_nullish_coalescing_unparenthesized\">SyntaxError: cannot use `??` unparenthesized within `||` and `&amp;&amp;` expressions</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value\">TypeError: cyclic object value</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Dead_object\">TypeError: can't access dead object</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode\">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage\">ReferenceError: deprecated caller or arguments usage</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Deprecated_expression_closures\">Warning: expression closures are deprecated</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Deprecated_octal\">SyntaxError: \"0\"-prefixed octal literals and octal escape seq. are deprecated</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma\">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Deprecated_String_generics\">Warning: String.x is deprecated; use String.prototype.x instead</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Deprecated_toLocaleFormat\">Warning: Date.prototype.toLocaleFormat is deprecated</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Equal_as_assign\">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Getter_only\">TypeError: setting getter-only property \"x\"</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Hash_outside_class\">SyntaxError: Unexpected '#' used outside of class body</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Identifier_after_number\">SyntaxError: identifier starts immediately after numeric literal</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Illegal_character\">SyntaxError: illegal character</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/in_operator_no_object\">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\">RangeError: invalid array length</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side\">SyntaxError: invalid assignment left-hand side</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax\">SyntaxError: invalid BigInt syntax</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment\">TypeError: invalid assignment to const \"x\"</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Invalid_date\">RangeError: invalid date</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer\">SyntaxError: for-in loop head declarations may not have initializers</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer\">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand\">TypeError: invalid 'instanceof' operand 'x'</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/is_not_iterable\">TypeError: 'x' is not iterable</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse\">SyntaxError: JSON.parse: bad parsing</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Malformed_formal_parameter\">SyntaxError: Malformed formal parameter</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Malformed_URI\">URIError: malformed URI sequence</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list\">SyntaxError: missing ] after element list</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id\">SyntaxError: missing : after property id</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body\">SyntaxError: missing } after function body</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list\">SyntaxError: missing } after property list</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter\">SyntaxError: missing formal parameter</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const\">SyntaxError: missing = in const declaration</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator\">SyntaxError: missing name after . operator</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\">SyntaxError: missing ) after argument list</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition\">SyntaxError: missing ) after condition</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Missing_semicolon_before_statement\">SyntaxError: missing ; before statement</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/More_arguments_needed\">TypeError: More arguments needed</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count\">RangeError: repeat count must be non-negative</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/No_non-null_object\">TypeError: \"x\" is not a non-null object</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/No_properties\">TypeError: \"x\" has no properties</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/No_variable_name\">SyntaxError: missing variable name</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element\">TypeError: can't delete non-configurable array element</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint\">RangeError: argument is not a valid code point</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Not_a_constructor\">TypeError: \"x\" is not a constructor</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Not_a_function\">TypeError: \"x\" is not a function</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Not_defined\">ReferenceError: \"x\" is not defined</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Precision_range\">RangeError: precision is out of range</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Property_access_denied\">Error: Permission denied to access property \"x\"</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Read-only\">TypeError: \"x\" is read-only</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter\">SyntaxError: redeclaration of formal parameter \"x\"</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value\">TypeError: Reduce of empty array with no initial value</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Reserved_identifier\">SyntaxError: \"x\" is a reserved identifier</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large\">RangeError: repeat count must be less than infinity</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Stmt_after_return\">Warning: unreachable code after return statement</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params\">SyntaxError: \"use strict\" not allowed in function with non-simple parameters</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Too_much_recursion\">InternalError: too much recursion</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Undeclared_var\">ReferenceError: assignment to undeclared variable \"x\"</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Undefined_prop\">ReferenceError: reference to undefined property \"x\"</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Unexpected_token\">SyntaxError: Unexpected token</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Unexpected_type\">TypeError: \"x\" is (not) \"y\"</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement\">SyntaxError: function statement requires a name</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Unparenthesized_unary_expr_lhs_exponentiation\">SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Unterminated_string_literal\">SyntaxError: unterminated string literal</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>その他</summary>\n      <ol>\n        <li><a href=\"/ja/docs/Web/JavaScript/JavaScript_technologies_overview\">JavaScript 技術概説</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Reference/Lexical_grammar\">字句文法</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Data_structures\">JavaScript のデータ構造</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">プロパティの列挙可能性と所有権</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Reference/Iteration_protocols\">反復処理プロトコル</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Reference/Strict_mode\">Strict モード</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\">strict モードへの移行</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Reference/Template_literals\">テンプレート文字列</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\">廃止予定の機能</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>プログラミング言語には、どれにも組み込みデータ構造がありますが、ふつうは言語ごとに異なります。この記事では、JavaScript で使用可能な組み込みデータ構造の一覧と、他のデータ構造の構築にも使えるように、それらがどのような性質を持ち合わせているかについて述べることにします。また可能である場合は、他のプログラミング言語におけるデータ構造との対比も行います。</p>"}},{"type":"prose","value":{"id":"動的型付け","title":"動的型付け","isH3":false,"content":"<p>JavaScript は<em>弱い型付け</em>あるいは<em>動的型付け</em>の言語です。JavaScript では、変数が直接的に特定のデータ型に関連付けられているわけではなく、どの変数にもあらゆる型の値を代入 (および再代入) することができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// foo は数値型になった</span>\nfoo     <span class=\"token operator\">=</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// foo は文字列型になった</span>\nfoo     <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// foo は論理型になった</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"データと構造型","title":"データと構造型","isH3":false,"content":"<p>最新の ECMAScript 標準では、次の 9 つの型が定義されています。</p>\n<ul>\n  <li><strong>データ型</strong>のうち 6 種類は<a href=\"/ja/docs/Glossary/Primitive\">プリミティブ</a>であり、 <a href=\"/ja/docs/Web/JavaScript/Reference/Operators/typeof\"><code>typeof</code></a> 演算子で確認することができます。\n    <ul>\n      <li><a href=\"/ja/docs/Glossary/undefined\"><code>undefined</code></a> : <code>typeof instance === \"undefined\"</code></li>\n      <li><a href=\"/ja/docs/Glossary/Boolean\">論理型 (Boolean)</a> : <code>typeof instance === \"boolean\"</code></li>\n      <li><a href=\"/ja/docs/Glossary/Number\">数値型 (Number)</a> : <code>typeof instance === \"number\"</code></li>\n      <li><a href=\"/ja/docs/Glossary/String\">文字列型 (String)</a> : <code>typeof instance === \"string\"</code></li>\n      <li><a href=\"/ja/docs/Glossary/BigInt\">長整数型 (BigInt)</a> : <code>typeof instance === \"bigint\"</code></li>\n      <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">シンボル型 (Symbol)</a> : <code>typeof instance === \"symbol\"</code></li>\n    </ul>\n  </li>\n  <li><strong>構造型</strong>:\n    <ul>\n      <li><a href=\"/ja/docs/Glossary/Object\">オブジェクト (Object)</a> : <code>typeof instance === \"object\"</code> です。データでありませんが、特別な<strong>構造型</strong>であり、あらゆる<a href=\"/ja/docs/Learn/JavaScript/Objects#the_constructor\">構築された</a>オブジェクトのインスタンスのためのに使用されます。 <code>new <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></code>, <code>new <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a></code>, <code>new <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a></code>, <code>new <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a></code>, <code>new <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\"><code>WeakMap</code></a></code>, <code>new <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\"><code>WeakSet</code></a></code>, <code>new <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a></code> など、 <a href=\"/ja/docs/Web/JavaScript/Reference/Operators/new\"><code>new</code> キーワード</a>で作られたほぼすべてのものです。</li>\n      <li><a href=\"/ja/docs/Glossary/Function\">関数 (Function)</a> : データ構造ではありませんが、 <code>typeof</code> 演算子に対して <code>typeof instance === \"function\"</code> を返します。これは単に関数の特別な省略形ですが、すべての関数のコンストラクターは <code>Object</code> コンストラクターから派生しています。</li>\n    </ul>\n  </li>\n  <li><strong>構造的ルート</strong>プリミティブ:\n    <ul>\n      <li><a href=\"/ja/docs/Glossary/Null\"><code>null</code></a> : <code>typeof instance === \"object\"</code> です。特殊な<a href=\"/ja/docs/Glossary/Primitive\">プリミティブ</a>型で、値には別な用途があります。オブジェクトが継承されていない場合、 <code>null</code> が表示されます。</li>\n    </ul>\n  </li>\n</ul>\n<p><code>typeof</code> 演算子は、データ型を判定する以外の用途では意味を持たないことに注意してください。 <code>Object</code> から派生した構造的な型を <code>typeof</code> で判定しても、常に <code>\"object\"</code> が返されるので意味がありません。オブジェクトの型を確認するための適切な方法は、 <a href=\"/ja/docs/Web/JavaScript/Reference/Operators/instanceof\"><code>instanceof</code></a> キーワードを使用することです。しかし、その場合でも判定を誤ることがあるかもしれません。</p>\n<p>ご覧のとおり、すべてのプリミティブ型の意味は、ほとんど同じである <code>undefined</code> と <code>null</code> を除いては明らかです。これは、時間の概念がアルゴリズムの目的に厳密に関係していることから起こります。まだ存在しないもの、あるいはもう存在しないものは <strong><code>undefined</code></strong> で表すことができます。しかし、存在するものが空であることを表現したい場合は、別なキーワードを導入する必要があります。これが <strong><code>null</code></strong> であり、構造的意味の始まりです。</p>"}},{"type":"prose","value":{"id":"プリミティブ値","title":"プリミティブ値","isH3":false,"content":"<p>オブジェクトを除くすべての型は不変の値 (つまり、変更できない値) として定義されています。例えば文字列は (C 言語とは異なり) 不変です。これらの型の値を「<em>プリミティブ値</em>」と呼びます。</p>"}},{"type":"prose","value":{"id":"論理型_boolean","title":"論理型 (Boolean)","isH3":true,"content":"<p>論理型は論理の状態を表すもので、 <code>true</code> と <code>false</code> の 2 つの値があります。詳しくは<a href=\"/ja/docs/Glossary/Boolean\">論理型</a>および <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> を参照してください。</p>"}},{"type":"prose","value":{"id":"null_型","title":"null 型","isH3":true,"content":"<p>null 型は値が <code>null</code> の 1 つしかありません。詳しくは <a href=\"/ja/docs/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> および <a href=\"/ja/docs/Glossary/Null\">Null</a> を参照してください。</p>"}},{"type":"prose","value":{"id":"undefined_型","title":"undefined 型","isH3":true,"content":"<p>値が代入されていない変数の値は <code>undefined</code> になります。詳しくは <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> および <a href=\"/ja/docs/Glossary/undefined\">Undefined</a> を参照してください。</p>"}},{"type":"prose","value":{"id":"数値型_number","title":"数値型 (Number)","isH3":true,"content":"<p>ECMAScript には、<strong>数値型</strong> (Number) と<strong>長整数型</strong> (BigInt、下記参照) の 2 つの組み込み数値型があります。</p>\n<p>数値型は <a href=\"https://ja.wikipedia.org/wiki/%E5%80%8D%E7%B2%BE%E5%BA%A6%E6%B5%AE%E5%8B%95%E5%B0%8F%E6%95%B0%E7%82%B9%E6%95%B0\" class=\"external\" rel=\" noopener\">IEEE 754 での倍精度浮動小数点数</a> (-(2^53 − 1) から 2^53 − 1 まで間の数値) です。浮動小数点数の表現に加えて、3 つの記号的な値 <code>+Infinity</code>, <code>-Infinity</code>, <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> (\"<strong>N</strong>ot a <strong>N</strong>umber\") があります。</p>\n<p><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>±Infinity</code></a> 内で使用可能な最大値または最小値を確認するには、定数 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE\"><code>Number.MAX_VALUE</code></a> または <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_VALUE\"><code>Number.MIN_VALUE</code></a> を使用できます。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> ECMAScript 2015 からは、<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger\"><code>Number.isSafeInteger()</code></a>, <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\"><code>Number.MAX_SAFE_INTEGER</code></a>, <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER\"><code>Number.MIN_SAFE_INTEGER</code></a> を使用して、数値が倍精度浮動小数点数の範囲内にあるかどうかを確認することができるようになりました。</p>\n  <p>この範囲を超えた JavaScript の整数値は正確ではなくなり、倍精度浮動小数点値の近似値に丸められます。</p>\n</div>\n<p>数値型には、2 種類の表現を持つ数値がひとつだけあります。それは <code>0</code> であり、<code>-0</code> および <code>+0</code> で表します。(<code>0</code> は <code>+0</code> の別名です)</p>\n<p>実用上、どちらを使用しても影響はほとんどありません。例えば、 <code>+0 === -0</code> は <code>true</code> です。ただし、ゼロで除算を行った場合は違いが分かります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token operator\">&gt;</span> <span class=\"token number\">42</span> <span class=\"token operator\">/</span> <span class=\"token operator\">+</span><span class=\"token number\">0</span>\n<span class=\"token number\">Infinity</span>\n<span class=\"token operator\">&gt;</span> <span class=\"token number\">42</span> <span class=\"token operator\">/</span> <span class=\"token operator\">-</span><span class=\"token number\">0</span>\n<span class=\"token operator\">-</span><span class=\"token number\">Infinity</span>\n</code></pre></div>\n<p>多くの場合、数値はその値のみを表しますが、JavaScript には<a href=\"/ja/docs/Web/JavaScript/Reference/Operators\">バイナリー (ビット単位) 演算子</a>も用意されています。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> ビット演算子で<a href=\"https://ja.wikipedia.org/wiki/%E3%83%9E%E3%82%B9%E3%82%AF_%28%E6%83%85%E5%A0%B1%E5%B7%A5%E5%AD%A6%29\" class=\"external\" rel=\" noopener\">ビットマスク</a>を使用すれば、 1 つの数値で複数の論理値を表現することも<em>可能です</em>が、 JavaScript は (論理型の配列や名前付きプロパティに論理値が割り当てられたオブジェクトのような) 論理値の集合を表現する手段を提供しているため、この行いは悪い習慣として考えられます。ビットマスクはコードの可読性、わかりやすさ、保守性を大きく損ないます。</p>\n</div>\n<p>ローカルストレージの容量的制約への対処や、ビット単位での転送量を考える必要のある極限状態など、非常に特殊なケースにおいてはこうしたテクニックが必要となるでしょう。このテクニックは、あくまでも最適化が必要な場合の最終手段としてのみ考慮すべきです。</p>"}},{"type":"prose","value":{"id":"長整数型_bigint","title":"長整数型 (BigInt)","isH3":true,"content":"<p>長整数型は、任意の精度で整数を表現できる JavaScript の数値プリミティブです。長整数型を使えば、数値型で扱うことができる安全な整数の限界を超える、大きな整数を安全に格納して操作することができます。</p>\n<p>長整数型は、整数の末尾に <code>n</code> を追加するか、コンストラクターを呼び出すことで作成します。</p>\n<p>数値型でインクリメントできる最も安全な値は、定数 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\"><code>Number.MAX_SAFE_INTEGER</code></a> を使用することで得ることができます。長整数型の導入により、<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\"><code>Number.MAX_SAFE_INTEGER</code></a> を超える数値での操作が可能になりました。</p>\n<p>この例は、<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\"><code>Number.MAX_SAFE_INTEGER</code></a> をインクリメントすると期待される結果が返ってくることを示しています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token number\">2n</span> <span class=\"token operator\">**</span> <span class=\"token number\">53n</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">9007199254740992n</span>\n<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1n</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">9007199254740993n</span>\n</code></pre></div>\n<p>長整数型は、整数型と同じように <code>+</code>, <code>*</code>, <code>-</code>, <code>**</code>, <code>%</code> 演算子を使用することができます。長整数型は数値型と厳密に同じであるわけではありませんが、ほとんど同じです。</p>\n<p>長整数型は <code>if</code>, <code>||</code>, <code>&amp;&amp;</code>, <code>Boolean</code>, <code>!</code> などの論理型に変換される場面では、数値型と同じように動作します。</p>\n<p>長整数型は、数値型との間で演算することはできません。代わりに <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> が発生します。</p>"}},{"type":"prose","value":{"id":"文字列型_string","title":"文字列型 (String)","isH3":true,"content":"<p>JavaScript の文字列型は、テキストデータを表すために使用します。これは、16 ビット符号なし整数値の「要素」の集合体で、文字列内の各要素は文字列内の位置を占めます。要素の数が文字列の長さになり、最初の要素の位置が <code>0</code>、次の要素の位置が <code>1</code> となってゆきます。</p>\n<p>いくつかのプログラミング言語 (C 言語など) とは異なり、 JavaScript の文字列は不変です。これは、一度作成した文字列を変更することができないことを意味します。</p>\n<p>しかしながら、元の文字列に対する操作に基づいて別の文字列を作成することは可能です。例えば、以下のようになります。</p>\n<ul>\n  <li>原文から個別に文字を抜き出したり、 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/substr\"><code>String.substr()</code></a> を用いたりして部分文字列を切り出す</li>\n  <li>連結演算子 (<code>+</code>) または <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/concat\"><code>String.concat()</code></a> を用いて、2 つの文字列を連結する</li>\n</ul>\n<h4 id=\"「文字列に型付けした」コードに注意！\">「文字列に型付けした」コードに注意！</h4>\n<p>複雑なデータを表現するために文字列を使用したい思うこともあるでしょう。これには短期的なメリットがあります。</p>\n<ul>\n  <li>結合することで、複合文字列を簡単に作成できます。</li>\n  <li>文字列は簡単にデバッグできます (出力される情報は常に文字列に含まれているものです)。</li>\n  <li>文字列は多くの API (<a href=\"/ja/docs/Web/API/HTMLInputElement\">入力フィールド</a>、<a href=\"/ja/docs/Web/API/Web_Storage_API\">ローカルストレージ</a>の値、 <a href=\"/ja/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a> の <code>responseText</code> を使用したレスポンス、など) において共通分母であり、文字列だけで作業したいという誘惑に駆られることがあります。</li>\n</ul>\n<p>規則さえあれば、どのようなデータ構造でも文字列で表現することが可能ですが、これは良い考えとは言えません。例えば、区切り文字を使用することでリストを模倣することができますが (JavaScript の配列の方が適しています)、残念なことに区切り文字がリストの要素となってしまった場合、リストが壊れてしまいます。エスケープした文字を使用することでこの問題に対処することは可能ですが、その規則をすべてに用意する必要がある上、不必要なメンテナンスの負担を生み出します。</p>\n<p>文字列はテキストデータには向いていますが、複雑なデータを表す場合は文字列を<em>解析</em>し、適切な抽象化を用いる必要があります。</p>"}},{"type":"prose","value":{"id":"シンボル型_symbol","title":"シンボル型 (Symbol)","isH3":true,"content":"<p>シンボルは<strong>一意</strong>で<strong>不変</strong>のプリミティブ値であり、オブジェクトのプロパティのキーとして使用することができます。一部のプログラミング言語では、「アトム」と呼ばれています。</p>\n<p>詳しくは、<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">シンボル</a>および <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> オブジェクトラッパーを参照してください。</p>"}},{"type":"prose","value":{"id":"オブジェクト","title":"オブジェクト","isH3":false,"content":"<p>コンピューター科学において、オブジェクトは<a href=\"/ja/docs/Glossary/Identifier\">識別子</a>によって参照可能なメモリー内の値です。</p>"}},{"type":"prose","value":{"id":"プロパティ","title":"プロパティ","isH3":true,"content":"<p>JavaScript では、オブジェクトはプロパティの集合として見ることができます。<a href=\"/ja/docs/Web/JavaScript/Guide/Grammar_and_types#object_literals\">オブジェクトリテラル構文</a>は、初期化される限定された一連のプロパティです。その後でプロパティは追加したり削除したりすることができます。プロパティの値は、他のオブジェクトを含むあらゆる型の値にすることができ、複雑なデータ構造を構築できます。プロパティは<em>キー</em>値で識別することができます。<em>キー</em>値は文字列またはシンボル値です。</p>\n<p>オブジェクトには、<em>データ</em>プロパティと<em>アクセサー</em>プロパティという特定の属性を持つ 2 種類のプロパティがあります。</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> 各プロパティに対応する<em>属性</em>は JavaScript エンジンによって内部的に使用されるので、直接アクセスすることはできません。そのため、属性は 1 つではなく 2 つの角括弧で表示されています。</p>\n  <p>詳しくは <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty()</code></a> を参照してください。</p>\n</div>\n<h4 id=\"データプロパティ\">データプロパティ</h4>\n<p>キーと値を関連づけて、以下の属性を持ちます。</p>\n<table class=\"standard-table\">\n  <caption>データプロパティの属性</caption>\n  <thead>\n    <tr>\n      <th scope=\"col\">属性</th>\n      <th scope=\"col\">型</th>\n      <th scope=\"col\">説明</th>\n      <th scope=\"col\">既定値</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>[[Value]]</td>\n      <td>JavaScript の任意の型</td>\n      <td>プロパティにアクセスすると取り出される値です。</td>\n      <td>`undefined`</td>\n    </tr>\n    <tr>\n      <td>[[Writable]]</td>\n      <td>論理型</td>\n      <td><code>false</code> であれば、プロパティの [[Value]] は変更できません。</td>\n      <td><code>false</code></td>\n    </tr>\n    <tr>\n      <td>[[Enumerable]]</td>\n      <td>論理型</td>\n      <td>\n        <p><code>true</code> であれば、プロパティは <a href=\"/ja/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a> ループで列挙されます。<br><a href=\"/ja/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">プロパティの列挙可能性と所有権</a>も参照してください。</p>\n      </td>\n      <td><code>false</code></td>\n    </tr>\n    <tr>\n      <td>[[Configurable]]</td>\n      <td>論理型</td>\n      <td><code>false</code> であれば、プロパティは削除できません。また、 [[Value]] および [[Writable]] 以外の属性を変更できません。</td>\n      <td><code>false</code></td>\n    </tr>\n  </tbody>\n</table>\n<table>\n  <thead>\n    <tr>\n      <th>属性</th>\n      <th>型</th>\n      <th>説明</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Read-only</td>\n      <td>論理型</td>\n      <td>ES5 の [[Writable]] 属性の状態を反転したもの</td>\n    </tr>\n    <tr>\n      <td>DontEnum</td>\n      <td>論理型</td>\n      <td>ES5 の [[Enumerable]] 属性の状態を反転したもの。</td>\n    </tr>\n    <tr>\n      <td>DontDelete</td>\n      <td>論理型</td>\n      <td>ES5 の [[Configurable]] 属性の状態を反転したもの。</td>\n    </tr>\n  </tbody>\n</table>\n<h4 id=\"アクセサープロパティ\">アクセサープロパティ</h4>\n<p>値を取り出しまたは保存するための 1 つまたは 2 つのアクセサー関数 (<code>get</code> および <code>set</code>) とキーを関連づけており、以下の属性を持ちます。</p>\n<table>\n  <thead>\n    <tr>\n      <th>属性</th>\n      <th>型</th>\n      <th>説明</th>\n      <th>既定値</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>[[Get]]</td>\n      <td>Function オブジェクトまたは <code>undefined</code></td>\n      <td>この値に対して取得アクセスが実行されると、関数が引数なしで呼び出されてプロパティの値を取り出します。 <a href=\"/ja/docs/Web/JavaScript/Reference/Functions/get\"><code>get</code></a> も参照してください。</td>\n      <td><code>undefined</code></td>\n    </tr>\n    <tr>\n      <td>[[Set]]</td>\n      <td>Function オブジェクトまたは <code>undefined</code></td>\n      <td>指定したプロパティを変更しようとしたときに、代入する値を引数に含めて関数が呼び出されます。 <a href=\"/ja/docs/Web/JavaScript/Reference/Functions/set\"><code>set</code></a> も参照してください。</td>\n      <td><code>undefined</code></td>\n    </tr>\n    <tr>\n      <td>[[Enumerable]]</td>\n      <td>論理型</td>\n      <td><code>true</code> の場合、プロパティは <a href=\"/ja/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a> ループで列挙されます。</td>\n      <td><code>false</code></td>\n    </tr>\n    <tr>\n      <td>[[Configurable]]</td>\n      <td>論理型</td>\n      <td><code>false</code> の場合、プロパティは削除できず、データプロパティを変更することもできません。</td>\n      <td><code>false</code></td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"「通常の」オブジェクトおよび関数","title":"「通常の」オブジェクトおよび関数","isH3":true,"content":"<p>JavaScript のオブジェクトは<em>キー</em>と<em>値</em>を所持しています。キーは文字列 (または<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>シンボル</code></a>) ですが、<em>値</em>は何でも構いません。これにより、オブジェクトは<a href=\"https://ja.wikipedia.org/wiki/%E3%83%8F%E3%83%83%E3%82%B7%E3%83%A5%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB\" class=\"external\" rel=\" noopener\">ハッシュマップ</a>に自然に適合します。</p>\n<p>関数は<em>呼び出し可能</em>という付加機能を持つ、通常のオブジェクトです。</p>"}},{"type":"prose","value":{"id":"日付","title":"日付","isH3":true,"content":"<p>日付を表現する場合は、JavaScript に組み込まれた <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code> ユーティリティ</a> を使用するのが最適です。</p>"}},{"type":"prose","value":{"id":"インデックス付きコレクション_配列および型付き配列","title":"インデックス付きコレクション: 配列および型付き配列","isH3":true,"content":"<p><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array\">配列</a>は、整数値をキーにするプロパティと <code>length</code> プロパティの間に特殊な関係の存在する、標準オブジェクトです。</p>\n<p>さらに、配列は <code>Array.prototype</code> を継承しており、配列を操作するための便利なメソッドを提供しています。例えば、 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\"><code>indexOf</code></a> (配列中の値の検索) や <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/push\"><code>push</code></a> (配列への要素の追加) などです。これにより、配列はリストや集合を表現するのに最適な候補となります。</p>\n<p><a href=\"/ja/docs/Web/JavaScript/Typed_arrays\">型付き配列</a>は、 ECMAScript 2015 で JavaScript に新しく追加されたもので、基礎となるバイナリーデータバッファの配列風のビューを提示します。次の表は、同等の C データ型を見つけるのに役立ちます。</p>\n<table>\n  <thead>\n    <tr>\n      <th>型</th>\n      <th>値の範囲</th>\n      <th>サイズ (バイト数)</th>\n      <th>説明</th>\n      <th>Web IDL 型</th>\n      <th>同等の C の型</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\"><code>Int8Array</code></a></td>\n      <td><code>-128</code> ～ <code>127</code></td>\n      <td>1</td>\n      <td>8 ビット 2 の補数方式の符号付き整数値</td>\n      <td><code>byte</code></td>\n      <td><code>int8_t</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a></td>\n      <td><code>0</code> ～ <code>255</code></td>\n      <td>1</td>\n      <td>8 ビット 符号なし整数値</td>\n      <td><code>octet</code></td>\n      <td><code>uint8_t</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\"><code>Uint8ClampedArray</code></a></td>\n      <td><code>0</code> ～ <code>255</code></td>\n      <td>1</td>\n      <td>8 ビット 符号なし整数値 (切り詰め)</td>\n      <td><code>octet</code></td>\n      <td><code>uint8_t</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\"><code>Int16Array</code></a></td>\n      <td><code>-32768</code> ～ <code>32767</code></td>\n      <td>2</td>\n      <td>16 ビット 2 の補数方式の符号付き整数値</td>\n      <td><code>short</code></td>\n      <td><code>int16_t</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\"><code>Uint16Array</code></a></td>\n      <td><code>0</code> ～ <code>65535</code></td>\n      <td>2</td>\n      <td>16 ビット 符号なし整数値</td>\n      <td><code>unsigned short</code></td>\n      <td><code>uint16_t</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a></td>\n      <td><code>-2147483648</code> ～ <code>2147483647</code></td>\n      <td>4</td>\n      <td>32 ビット 2 の補数方式の符号付き整数値</td>\n      <td><code>long</code></td>\n      <td><code>int32_t</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a></td>\n      <td><code>0</code> ～ <code>4294967295</code></td>\n      <td>4</td>\n      <td>32 ビット 符号なし整数値</td>\n      <td><code>unsigned long</code></td>\n      <td><code>uint32_t</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\"><code>Float32Array</code></a></td>\n      <td><code>1.2E-38</code> ～ <code>3.4E38</code></td>\n      <td>4</td>\n      <td>32 ビット IEEE 浮動小数点数 (7 桁の有効数字、例: <code>1.1234567</code>)</td>\n      <td><code>unrestricted float</code></td>\n      <td><code>float</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\"><code>Float64Array</code></a></td>\n      <td><code>5E-324</code> ～ <code>1.8E308</code></td>\n      <td>8</td>\n      <td>64 ビット IEEE 浮動小数点数 (16 桁の有効数字 例: <code>1.123...15</code>)</td>\n      <td><code>unrestricted double</code></td>\n      <td><code>double</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a></td>\n      <td><code>-2^63</code> ～ <code>2^63 - 1</code></td>\n      <td>8</td>\n      <td>64 ビット 2 の補数方式の符号付き整数値</td>\n      <td><code>bigint</code></td>\n      <td><code>int64_t (signed long long)</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a></td>\n      <td><code>0</code> ～ <code>2^64 - 1</code></td>\n      <td>8</td>\n      <td>64 ビット 符号なし整数値</td>\n      <td><code>bigint</code></td>\n      <td><code>uint64_t (unsigned long long)</code></td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"キー付きコレクション_map_set_weakmap_weakset","title":"キー付きコレクション: Map, Set, WeakMap, WeakSet","isH3":true,"content":"<p>ECMAScript 第 6 編 で導入されたこれらのデータ構造は、オブジェクト参照をキーとしています。<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> と <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\"><code>WeakSet</code></a> はオブジェクトの集合を表し、<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> と <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\"><code>WeakMap</code></a> はオブジェクトに値を関連付けます。</p>\n<p><code>Map</code> と <code>WeakMap</code> の違いは、前者ではオブジェクトキーを列挙できることです。これにより、後者の場合にガベージコレクションの最適化が可能になります。</p>\n<p>純粋な ECMAScript 5 で <code>Map</code> と <code>Set</code> を実装することもできますが、オブジェクトを比較することはできないので (例えば <code>&amp;lt;</code> 「未満」の意味で)、検索性能が必然的に線形になります。これらのネイティブ実装 (<code>WeakMap</code> を含む) は、一定時間に対してほぼ対数的な検索性能を持つことができます。</p>\n<p>通常、DOM ノードにデータをバインドするには、オブジェクトに直接プロパティを設定するか、 <code>data-*</code> 属性を使用します。これらの手法は同じコンテクストで実行されるあらゆるスクリプトからデータの利用が可能であるため、不都合な面を持ち合わせていました。 <code>Map</code> や <code>WeakMap</code> を使うと、オブジェクトへの<em>プライベート</em>なデータバインドを簡単に行うことができます。</p>"}},{"type":"prose","value":{"id":"構造化データ_json","title":"構造化データ: JSON","isH3":true,"content":"<p>JSON (<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation) は JavaScript から派生した汎用データ構造をもつ軽量なデータ交換フォーマットであり、多くのプログラミング言語で使用されています。</p>\n<p>詳しくは <a href=\"/ja/docs/Glossary/JSON\">JSON</a> および <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/JSON\"><code>JSON</code></a> を参照してください。</p>"}},{"type":"prose","value":{"id":"標準ライブラリに含まれる他のオブジェクト","title":"標準ライブラリに含まれる他のオブジェクト","isH3":true,"content":"<p>JavaScript には組み込みオブジェクトの標準ライブラリがあります。</p>\n<p>オブジェクトの詳細については、<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects\">リファレンス</a>を参照してください。</p>"}},{"type":"prose","value":{"id":"typeof_演算子を使用した型の検出","title":"<code>typeof</code> 演算子を使用した型の検出","isH3":false,"content":"<p><code>typeof</code> 演算子は、変数の型を知るのに役立ちます。</p>\n<p>詳細および使用例については、<a href=\"/ja/docs/Web/JavaScript/Reference/Operators/typeof\">リファレンスページ</a>を参照してください。</p>","titleAsText":"typeof 演算子を使用した型の検出"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"https://github.com/nzakas/computer-science-in-javascript/\" class=\"external\" rel=\" noopener\">Nicholas Zakas による、JavaScript における一般的なデータ構造とアルゴリズムのまとめ</a></li>\n  <li><a href=\"https://github.com/monmohan/DataStructures_In_Javascript\" class=\"external\" rel=\" noopener\">Search Tre(i)es implemented in JavaScript</a></li>\n  <li><a href=\"https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values\" class=\"external\" rel=\" noopener\">Data Types and Values in the ECMAScript specification</a></li>\n</ul>"}}],"toc":[{"text":"動的型付け","id":"動的型付け"},{"text":"データと構造型","id":"データと構造型"},{"text":"プリミティブ値","id":"プリミティブ値"},{"text":"オブジェクト","id":"オブジェクト"},{"text":"<code>typeof</code> 演算子を使用した型の検出","id":"typeof_演算子を使用した型の検出"},{"text":"関連情報","id":"関連情報"}],"summary":"プログラミング言語には、どれにも組み込みデータ構造がありますが、ふつうは言語ごとに異なります。この記事では、JavaScript で使用可能な組み込みデータ構造の一覧と、他のデータ構造の構築にも使えるように、それらがどのような性質を持ち合わせているかについて述べることにします。また可能である場合は、他のプログラミング言語におけるデータ構造との対比も行います。","popularity":0.0017,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"JavaScript data types and data structures","locale":"en-US","native":"English (US)"},{"title":"Tipos de datos y estructuras en JavaScript","locale":"es","native":"Español"},{"title":"Types et structures de données JavaScript","locale":"fr","native":"Français"},{"title":"JavaScript의 타입과 자료구조","locale":"ko","native":"한국어"},{"title":"Estrutura de dados do Javascript","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Типы данных JavaScript и структуры данных","locale":"ru","native":"Русский"},{"title":"JavaScript 数据类型和数据结构","locale":"zh-CN","native":"中文 (简体)"},{"title":"JavaScript 的資料型別與資料結構","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ja/web/javascript/data_structures","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/javascript/data_structures/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/ja/docs/Web/JavaScript/Data_structures","title":"JavaScript のデータ型とデータ構造"}],"pageTitle":"JavaScript のデータ型とデータ構造 - JavaScript | MDN","noIndexing":false}}