{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"制御フローとエラー処理","mdn_url":"/ja/docs/Web/JavaScript/Guide/Control_flow_and_error_handling","locale":"ja","native":"日本語","sidebarHTML":"\n <ol>\n  <li><a href=\"/ja/docs/Web/JavaScript\"><strong><em>JavaScript</em></strong></a></li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Tutorials\"><strong>チュートリアル:</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>初級編</summary>\n      <ol>\n        <li><a href=\"/ja/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">JavaScript の基礎</a></li>\n        <li><a href=\"/ja/docs/Learn/JavaScript/First_steps\">JavaScript の第一歩</a></li>\n        <li><a href=\"/ja/docs/Learn/JavaScript/Building_blocks\">JavaScript の構成要素</a></li>\n        <li><a href=\"/ja/docs/Learn/JavaScript/Objects\">JavaScript オブジェクト入門</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>JavaScript ガイド</summary>\n      <ol>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Introduction\">入門編</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Grammar_and_Types\">文法とデータ型</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">制御フローとエラー処理</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Loops_and_iteration\">ループとイテレーター</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Functions\">関数</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Expressions_and_Operators\">式と演算子</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Numbers_and_dates\">数と日付</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Text_formatting\">テキスト処理</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Regular_Expressions\">正規表現</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Indexed_collections\">インデックス付きコレクション</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Keyed_collections\">キー付きコレクション</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Working_with_Objects\">オブジェクトを利用する</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Details_of_the_Object_Model\">オブジェクトモデルの詳細</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Using_promises\">プロミスの使用</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Iterators_and_generators\">イテレーターとジェネレーター</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Meta_programming\">メタプログラミング</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Modules\">JavaScript モジュール</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>中級編</summary>\n      <ol>\n        <li><a href=\"/ja/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks\">クライアントサイド JavaScript フレームワーク</a></li>\n        <li><a href=\"/ja/docs/Learn/JavaScript/Client-side_web_APIs\">クライアントサイド Web API</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">JavaScript 「再」入門</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Data_structures\">JavaScript のデータ構造</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Equality_comparisons_and_sameness\">等値比較と同一性</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Closures\">クロージャ</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>上級編</summary>\n      <ol>\n        <li><a href=\"/ja/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">継承とプロトタイプチェーン</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Reference/Strict_mode\">Strict モード</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Typed_arrays\">JavaScript 型付き配列</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Memory_Management\">メモリー管理</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/EventLoop\">並列モデルとイベントループ</a></li>\n      </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/ja/docs/Web/JavaScript/Reference\">リファレンス</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n       <summary>組み込みオブジェクト</summary>\n        <ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\">AggregateError</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\">AsyncFunction</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\">AsyncGenerator</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\">AsyncGeneratorFunction</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Atomics\">Atomics</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array\">BigInt64Array</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array\">BigUint64Array</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/DataView\">DataView</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\">decodeURI()</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent()</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI()</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent()</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Error\">Error</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/escape\">escape()</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval()</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/EvalError\">EvalError</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\">FinalizationRegistry</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\">Float32Array</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\">Float64Array</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Generator\">Generator</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">globalThis</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Infinity\">Infinity</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\">Int16Array</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\">Int32Array</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\">Int8Array</a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/InternalError\">InternalError</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/isFinite\">isFinite()</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/isNaN\">isNaN()</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/NaN\">NaN</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">parseFloat()</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">parseInt()</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RangeError\">RangeError</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\">ReferenceError</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">Reflect</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">RegExp</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String\">String</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\">SyntaxError</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">TypedArray</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\">Uint16Array</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\">Uint32Array</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">Uint8Array</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\">Uint8ClampedArray</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/undefined\">undefined</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/unescape\">unescape()</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/URIError\">URIError</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/WeakRef\">WeakRef</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\">WeakSet</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>式と演算子</summary>\n      <ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Addition_assignment\">Addition assignment (+=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Addition\">Addition (+)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Assignment\">Assignment (=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/async_function*\">async function* expression</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/await\">await</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment\">Bitwise AND assignment (&amp;=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">Bitwise AND (&amp;)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">Bitwise NOT (~)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment\">Bitwise OR assignment (|=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">Bitwise OR (|)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment\">Bitwise XOR assignment (^=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">Bitwise XOR (^)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/class\">class expression</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Comma_Operator\">Comma operator (,)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">Conditional (ternary) operator</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Decrement\">Decrement (--)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/delete\">delete operator</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">Destructuring assignment</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Division_assignment\">Division assignment (/=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Division\">Division (/)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Equality\">Equality (==)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment\">Exponentiation assignment (**=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Exponentiation\">Exponentiation (**)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/function\">Function expression</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal\">Greater than or equal (&gt;=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Greater_than\">Greater than (&gt;)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Grouping\">Grouping operator ( )</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/import.meta\">import.meta</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/import\">import</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/in\">in operator</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Increment\">Increment (++)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Inequality\">Inequality (!=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/instanceof\">instanceof</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment\">Left shift assignment (&lt;&lt;=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Left_shift\">Left shift (&lt;&lt;)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal\">Less than or equal (&lt;=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Less_than\">Less than (&lt;)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment\">Logical AND assignment (&amp;&amp;=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Logical_AND\">Logical AND (&amp;&amp;)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">Logical NOT (!)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment\">Logical nullish assignment (??=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment\">Logical OR assignment (||=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Logical OR (||)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment\">Multiplication assignment (*=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Multiplication\">Multiplication (*)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/new.target\">new.target</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/new\">new operator</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/null\">null</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\">Nullish coalescing operator (??)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Object_initializer\">Object initializer</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">Operator precedence</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">Optional chaining (?.)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Property_Accessors\">Property accessors</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Remainder_assignment\">Remainder assignment (%=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Remainder\">Remainder (%)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment\">Right shift assignment (&gt;&gt;=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Right_shift\">Right shift (&gt;&gt;)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Spread syntax (...)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Strict_equality\">Strict equality (===)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">Strict inequality (!==)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment\">Subtraction assignment (-=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Subtraction\">Subtraction (-)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/super\">super</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/this\">this</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/typeof\">typeof</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Unary_negation\">Unary negation (-)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Unary_plus\">Unary plus (+)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment\">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">Unsigned right shift (&gt;&gt;&gt;)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/void\">void operator</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/yield*\">yield*</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/yield\">yield</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>文と宣言</summary>\n      <ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/async_function*\">async function*</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/block\">block</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/break\">break</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/class\">class</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/const\">const</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/continue\">continue</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/debugger\">debugger</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/do...while\">do...while</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/Empty\">empty</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/export\">export</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/for-await...of\">for await...of</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/for\">for</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/function*\">function*</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/function\">function declaration</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/if...else\">if...else</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/import\">import</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/label\">label</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/let\">let</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/return\">return</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/switch\">switch</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/throw\">throw</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/try...catch\">try...catch</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/var\">var</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/while\">while</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/with\">with</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>関数</summary>\n      <ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow function expressions</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Functions/get\">getter</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Functions/set\">setter</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>クラス</summary>\n      <ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Classes/Class_static_initialization_blocks\">Class static initialization blocks</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Classes/constructor\">constructor</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Classes/extends\">extends</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">Private class features</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Classes/Public_class_fields\">Public class fields</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Classes/static\">static</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Errors</summary>\n      <ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Already_has_pragma\">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Array_sort_argument\">TypeError: invalid Array.prototype.sort argument</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Bad_octal\">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Bad_radix\">RangeError: radix must be an integer</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag\">SyntaxError: invalid regular expression flag \"x\"</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield\">SyntaxError: return not in function</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/BigInt_division_by_zero\">RangeError: BigInt division by zero</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/BigInt_negative_exponent\">RangeError: BigInt negative exponent</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type\">TypeError: X.prototype.y called on incompatible type</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init\">ReferenceError: can't access lexical declaration 'X' before initialization</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Cant_assign_to_property\">TypeError: can't assign to property \"x\" on \"y\": not an object</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Cant_be_converted_to_BigInt_because_it_isnt_an_integer\">RangeError: x can't be converted to BigInt because it isn't an integer</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Cant_convert_BigInt_to_number\">TypeError: can't convert BigInt to number</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Cant_convert_x_to_BigInt\">TypeError: can't convert x to BigInt</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible\">TypeError: can't define property \"x\": \"obj\" is not extensible</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Cant_delete\">TypeError: property \"x\" is non-configurable and can't be deleted</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property\">TypeError: can't redefine non-configurable property \"x\"</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Cant_use_nullish_coalescing_unparenthesized\">SyntaxError: cannot use `??` unparenthesized within `||` and `&amp;&amp;` expressions</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value\">TypeError: cyclic object value</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Dead_object\">TypeError: can't access dead object</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode\">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage\">ReferenceError: deprecated caller or arguments usage</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Deprecated_expression_closures\">Warning: expression closures are deprecated</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Deprecated_octal\">SyntaxError: \"0\"-prefixed octal literals and octal escape seq. are deprecated</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma\">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Deprecated_String_generics\">Warning: String.x is deprecated; use String.prototype.x instead</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Deprecated_toLocaleFormat\">Warning: Date.prototype.toLocaleFormat is deprecated</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Equal_as_assign\">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Getter_only\">TypeError: setting getter-only property \"x\"</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Hash_outside_class\">SyntaxError: Unexpected '#' used outside of class body</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Identifier_after_number\">SyntaxError: identifier starts immediately after numeric literal</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Illegal_character\">SyntaxError: illegal character</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/in_operator_no_object\">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\">RangeError: invalid array length</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side\">SyntaxError: invalid assignment left-hand side</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax\">SyntaxError: invalid BigInt syntax</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment\">TypeError: invalid assignment to const \"x\"</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Invalid_date\">RangeError: invalid date</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer\">SyntaxError: for-in loop head declarations may not have initializers</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer\">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand\">TypeError: invalid 'instanceof' operand 'x'</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/is_not_iterable\">TypeError: 'x' is not iterable</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse\">SyntaxError: JSON.parse: bad parsing</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Malformed_formal_parameter\">SyntaxError: Malformed formal parameter</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Malformed_URI\">URIError: malformed URI sequence</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list\">SyntaxError: missing ] after element list</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id\">SyntaxError: missing : after property id</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body\">SyntaxError: missing } after function body</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list\">SyntaxError: missing } after property list</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter\">SyntaxError: missing formal parameter</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const\">SyntaxError: missing = in const declaration</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator\">SyntaxError: missing name after . operator</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\">SyntaxError: missing ) after argument list</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition\">SyntaxError: missing ) after condition</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Missing_semicolon_before_statement\">SyntaxError: missing ; before statement</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/More_arguments_needed\">TypeError: More arguments needed</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count\">RangeError: repeat count must be non-negative</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/No_non-null_object\">TypeError: \"x\" is not a non-null object</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/No_properties\">TypeError: \"x\" has no properties</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/No_variable_name\">SyntaxError: missing variable name</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element\">TypeError: can't delete non-configurable array element</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint\">RangeError: argument is not a valid code point</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Not_a_constructor\">TypeError: \"x\" is not a constructor</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Not_a_function\">TypeError: \"x\" is not a function</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Not_defined\">ReferenceError: \"x\" is not defined</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Precision_range\">RangeError: precision is out of range</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Property_access_denied\">Error: Permission denied to access property \"x\"</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Read-only\">TypeError: \"x\" is read-only</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter\">SyntaxError: redeclaration of formal parameter \"x\"</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value\">TypeError: Reduce of empty array with no initial value</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Reserved_identifier\">SyntaxError: \"x\" is a reserved identifier</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large\">RangeError: repeat count must be less than infinity</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Stmt_after_return\">Warning: unreachable code after return statement</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params\">SyntaxError: \"use strict\" not allowed in function with non-simple parameters</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Too_much_recursion\">InternalError: too much recursion</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Undeclared_var\">ReferenceError: assignment to undeclared variable \"x\"</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Undefined_prop\">ReferenceError: reference to undefined property \"x\"</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Unexpected_token\">SyntaxError: Unexpected token</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Unexpected_type\">TypeError: \"x\" is (not) \"y\"</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement\">SyntaxError: function statement requires a name</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Unparenthesized_unary_expr_lhs_exponentiation\">SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Unterminated_string_literal\">SyntaxError: unterminated string literal</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>その他</summary>\n      <ol>\n        <li><a href=\"/ja/docs/Web/JavaScript/JavaScript_technologies_overview\">JavaScript 技術概説</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Reference/Lexical_grammar\">字句文法</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Data_structures\">JavaScript のデータ構造</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">プロパティの列挙可能性と所有権</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Reference/Iteration_protocols\">反復処理プロトコル</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Reference/Strict_mode\">Strict モード</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\">strict モードへの移行</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Reference/Template_literals\">テンプレート文字列</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\">廃止予定の機能</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ja/docs/Web/JavaScript/Guide/Grammar_and_types\">« 前のページ</a></li>\n    <li><a class=\"button minimal\" href=\"/ja/docs/Web/JavaScript/Guide/Loops_and_iteration\">次のページ »</a></li>\n</ul>\n<p>JavaScript は、特に制御フロー文についてはコンパクトな文のセットに対応しており、アプリケーションに多様な対話的機能を組み込むために利用することができます。この節ではこれらの文の概要を説明します。</p>\n<p><a href=\"/ja/docs/Web/JavaScript/Reference/Statements\">JavaScript リファレンス</a>には、この章で紹介する文についての完全な詳細が載っています。また、JavaScript のコードではセミコロン (<code>;</code>) 文字で文を区切ります。</p>\n<p>あらゆる JavaScript の式は、文でもあります。式に関する詳細については<a href=\"/ja/docs/Web/JavaScript/Guide/Expressions_and_Operators\">式と演算子</a>を参照ください。</p>"}},{"type":"prose","value":{"id":"ブロック文","title":"ブロック文","isH3":false,"content":"<p>最も基本的な文は<em>ブロック文</em>で、文のグループ化に使います。ブロックは、一組の波括弧で区切られます。</p>\n<pre class=\"notranslate\">{\n  statement_1;\n  statement_2;\n  ⋮\n  statement_n;\n}\n</pre>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":true,"content":"<p>ブロック文は一般に制御フロー文 (<code>if</code>, <code>for</code>, <code>while</code>) で用いられます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ここでは <code>{ x++; }</code> がブロック文となります。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> <strong>重要</strong>: ECMAScript 2015 (6th edition) より前の JavaScript にはブロックスコープが<strong>ありません</strong>。古い JavaScript では、ブロック内で導入された変数のスコープは、そのブロックがある関数やスクリプトになり、それらの変数を設定した影響は、そのブロックを越えて持続します。つまり、<em>ブロック文はスコープを定義しない</em>ということです。</p>\n  <p>「単独の」ブロックも正しい構文ですが、C や Java のブロックで提供されるものとは異なる結果をもたらします。例えば、</p>\n  <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2 を出力</span>\n</code></pre></div>\n  <p>ここで <code>2</code> が出力されるのは、ブロック内の <code>var x</code> 文がブロックの前の <code>var x</code> 文と同じスコープ内にあるためです。(C や Java では、同様のコードで <code>1</code> が出力されます。)</p>\n  <p><strong>ECMAScript 2015 から</strong>は、<code>let</code> 文や <code>const</code> による変数宣言はブロックスコープとなります。詳しくは <a href=\"/ja/docs/Web/JavaScript/Reference/Statements/let\"><code>let</code></a> 文や <a href=\"/ja/docs/Web/JavaScript/Reference/Statements/const\"><code>const</code></a> のリファレンスページをご覧ください。</p>\n</div>"}},{"type":"prose","value":{"id":"条件文","title":"条件文","isH3":false,"content":"<p>条件文は、指定した条件が true の場合に実行する命令の集まりです。JavaScript は <code>if...else</code> と <code>switch</code> の 2 つの条件文に対応しています。</p>"}},{"type":"prose","value":{"id":"if...else_文","title":"<code>if...else</code> 文","isH3":true,"content":"<p><code>if</code> を使用すると、論理条件が <code>true</code> の場合に文を実行することができます。任意の <code>else</code> 節を使用すると、条件が <code>false</code> の場合にも文を実行することができます。</p>\n<p><code>if</code> 文は次のように使用します。</p>\n<pre class=\"notranslate\">if (condition) {\n  statement_1;\n} else {\n  statement_2;\n}\n</pre>\n<p>条件は、<code>true</code> または <code>false</code> と評価される任意の式にすることができます。（<code>true</code> と <code>false</code> の評価の説明については、<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Boolean#description\">Boolean</a> を参照してください。）</p>\n<p>条件が <code>true</code> と評価された場合、<code>statement_1</code> が実行されます。そうでなければ、<code>statement_2</code> が実行されます。<code>statement_1</code> と <code>statement_2</code> は、入れ子になった <code>if</code> 文も含めて、任意の文にすることができます。</p>\n<p>以下のように、<code>else if</code> を使用した文を組み合わせて、複数の条件を順番にテストすることもできます。</p>\n<pre class=\"notranslate\">if (condition_1) {\n  statement_1;\n} else if (condition_2) {\n  statement_2;\n} else if (condition_n) {\n  statement_n;\n} else {\n  statement_last;\n}\n</pre>\n<p>複数の条件がある場合、<code>true</code> と評価された最初の論理条件のみが実行されます。複数の文を実行するには、ブロックステートメント (<code>{ … }</code>) 内にグループ化します。</p>\n<h4 id=\"ベストプラクティス\">ベストプラクティス</h4>\n<p>一般的に、常にブロック文を使用するのが優れた方法です。<em>特に</em> <code>if</code> 文を入れ子にしたコードで有効です。</p>\n<pre class=\"notranslate\">if (condition) {\n  statement_1_runs_if_condition_is_true;\n  statement_2_runs_if_condition_is_true;\n} else {\n  statement_3_runs_if_condition_is_false;\n  statement_4_runs_if_condition_is_false;\n}\n</pre>\n<p>条件式内で単純な代入を行わないでください。コードを一見した際に、代入を等値条件と見間違えるおそれがあるためです。</p>\n<p>例えば、このようにはコードを<em>書かない</em>でください。</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token comment\">// \"x == y\" と読み間違えるおそれがある。</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">=</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ここに文が来る */</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>条件式で代入を行う必要がある場合、一般的な方法は次のように、代入式をさらに丸括弧でくくることです。</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ここに文が来る */</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"false_と評価される値\">false と評価される値</h4>\n<p>以下の値は <code>false</code> と評価されます (また、<a href=\"/ja/docs/Glossary/Falsy\">Falsy</a> な値と呼ばれています)。</p>\n<ul>\n  <li><code>false</code></li>\n  <li><code>undefined</code></li>\n  <li><code>null</code></li>\n  <li><code>0</code></li>\n  <li><code>NaN</code></li>\n  <li>空の文字列 (<code>\"\"</code>)</li>\n</ul>\n<p>上記以外の—オブジェクトを含む—すべての値は、条件文に渡されると <code>true</code> と評価されます。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> プリミティブな真偽値の <code>true</code> と <code>false</code> を、<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> オブジェクトの true や false という値と混同しないでください。</p>\n  <p>例:</p>\n  <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>         <span class=\"token comment\">// この条件は true に評価される</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// この条件は false に評価される</span>\n</code></pre></div>\n</div>\n<h4 id=\"例_2\">例</h4>\n<p>次の例で、関数 <code>checkData</code> は <code>Text</code> オブジェクトに含まれている文字数が 3 である場合に <code>true</code> を返し、そうでない場合はアラートを表示して <code>false</code> を返します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">checkData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>form1<span class=\"token punctuation\">.</span>threeChar<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">'Enter exactly three characters. '</span> <span class=\"token operator\">+</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>document<span class=\"token punctuation\">.</span>form1<span class=\"token punctuation\">.</span>threeChar<span class=\"token punctuation\">.</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> is not valid.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","titleAsText":"if...else 文"}},{"type":"prose","value":{"id":"switch_文","title":"<code>switch</code> 文","isH3":true,"content":"<p><code>switch</code> 文を使うと、プログラムは式を評価し、その式の値を <code>case</code> ラベルと照合します。一致すると、プログラムはそのラベルに関連付けられた文を実行します。</p>\n<p><code>switch</code> 文は次のようになります。</p>\n<pre class=\"notranslate\">switch (expression) {\n  case label_1:\n    statements_1\n    [break;]\n  case label_2:\n    statements_2\n    [break;]\n    …\n  default:\n    statements_def\n    [break;]\n}\n</pre>\n<p>JavaScript は上記の switch 文を次のように評価します。</p>\n<ul>\n  <li>プログラムは最初に、式の値に一致するラベルを持つ <code>case</code> 節を探し、関連付けられた文を実行します。</li>\n  <li>一致するラベルがない場合、プログラムはオプションの <code>default</code> 節を探します。\n    <ul>\n      <li>存在する場合は <code>default</code> 節に制御を移し、関連付けられた文を実行します。</li>\n      <li><code>default</code> 節が見つからない場合、プログラムは <code>switch</code> 文の末尾の後に続く文から実行を再開します。</li>\n      <li>(慣例により、<code>default</code> 節は最後の節に置きますが、そうしなければいけないわけではありません。)</li>\n    </ul>\n  </li>\n</ul>\n<h4 id=\"break_文\">break 文</h4>\n<p>オプションの <code>break</code> 文は、それぞれの <code>case</code> 節と関連付けられ、該当する文が実行されるとプログラムが <code>switch</code> から抜け出し、<code>switch</code> の次の文から実行が継続されることを保証します。<code>break</code> が省略されると、プログラムは <code>switch</code> 文の内部の実行を続けます (そして、次の <code>case</code> を順番に評価します)。</p>\n<h4 id=\"例_3\">例</h4>\n<p>次の例では、<code>fruittype</code> が '<code>Bananas</code>' と評価された場合、case '<code>Bananas</code>' に一致して、それに関連付けら cv れた文を実行します。<code>break</code> 文に出くわすとプログラムは <code>switch</code> から抜けて、<code>switch</code> の後に続く文を実行します。<code>break</code> を省略すると、<code>case 'Cherries'</code> の文も実行されます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>fruittype<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'Oranges'</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Oranges are $0.59 a pound.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'Apples'</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Apples are $0.32 a pound.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'Bananas'</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bananas are $0.48 a pound.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'Cherries'</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Cherries are $3.00 a pound.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'Mangoes'</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mangoes are $0.56 a pound.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'Papayas'</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mangoes and papayas are $2.79 a pound.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Sorry, we are out of </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>fruittype<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Is there anything else you'd like?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>","titleAsText":"switch 文"}},{"type":"prose","value":{"id":"例外処理文","title":"例外処理文","isH3":false,"content":"<p><code>throw</code> 文を使用して例外を発生させ、<code>try...catch</code> 文を使用して例外を処理することができます。</p>\n<ul>\n  <li><a href=\"#throw_statement\"><code>throw</code> 文</a></li>\n  <li><a href=\"#try...catch_statement\"><code>try...catch</code> 文</a></li>\n</ul>"}},{"type":"prose","value":{"id":"例外の型","title":"例外の型","isH3":true,"content":"<p>JavaScript では、ほぼどのようなオブジェクトでも例外として投げることができます。とはいえ、必ずしも投げられるオブジェクトすべてが同等に作られているわけではありません。数値や文字列をエラーとして投げる方法がよく用いられますが、こうした用途のために特別に作られた例外データ型を使用した方がより効率的な場合もあります。</p>\n<ul>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects#fundamental_objects\">ECMAScript 例外</a></li>\n  <li><a href=\"/ja/docs/Web/API/DOMException\"><code>DOMException</code></a> と <a href=\"/ja/docs/Web/API/DOMError\"><code>DOMError</code></a></li>\n</ul>"}},{"type":"prose","value":{"id":"throw_文","title":"<code>throw</code> 文","isH3":true,"content":"<p><code>throw</code> 文は、例外を投げるために使用します。例外を投げるには、投げたい値を含む式を指定してください。</p>\n<pre class=\"notranslate\">throw expression;\n</pre>\n<p>特定の型の式だけではなく、あらゆる式を投げることができます。下記のコードでは、さまざまな型の例外を投げています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">throw</span> <span class=\"token string\">'Error2'</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 文字列型</span>\n<span class=\"token keyword\">throw</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 数値型</span>\n<span class=\"token keyword\">throw</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 論理型</span>\n<span class=\"token keyword\">throw</span> <span class=\"token punctuation\">{</span><span class=\"token function-variable function\">toString</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"これはオブジェクトです！\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> <strong>メモ:</strong> 例外を投げる際にオブジェクトを指定することができます。そして、<code>catch</code> ブロックでそのオブジェクトのプロパティを参照することができます。</p>\n</div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// UserException というオブジェクト型を作成</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">UserException</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'UserException'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 文字列として使用されるとき（例 : エラーコンソール上）に</span>\n<span class=\"token comment\">// 例外を整形する</span>\n<span class=\"token class-name\">UserException</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">toString</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// UserException のインスタンスを作成し、それを投げる</span>\n<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserException</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Value too high'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>","titleAsText":"throw 文"}},{"type":"prose","value":{"id":"try...catch_文","title":"<code>try...catch</code> 文","isH3":true,"content":"<p><code>try...catch</code> 文はテストしたい文のブロックを指定し、さらに投げられる例外に対する 1 つ以上の対処方法を指定します。例外が投げられると、<code>try...catch</code> 文がそれを受け取ります。</p>\n<p><code>try...catch</code> 文は 1 つの <code>try</code> ブロックと 0 個以上の <code>catch</code> ブロックで構成されます。<code>try</code> ブロックは 1 つ以上の文を含み、<code>catch</code> ブロックは <code>try</code> ブロックで例外が投げられた場合の処理を指定する文が含まれます。</p>\n<p>要するに、成功した場合に実行したい <code>try</code> ブロックと、失敗した場合に制御を移行させたい <code>catch</code> ブロックで構成されています。<code>try</code> ブロック内（もしくは <code>try</code> ブロック内から呼び出された関数内）のいずれかの文が例外を投げると、制御は<em>すぐに</em> <code>catch</code> ブロックに移ります。<code>try</code> ブロックで例外が投げられなかった場合、<code>catch</code> ブロックはスキップされます。<code>finally</code> ブロックは <code>try</code> および <code>catch</code> ブロックを実行した後に実行しますが、<code>try...catch</code> 文の後に続く文より先に実行されます。</p>\n<p>次の例では <code>try...catch</code> 文を使用しています。この例では渡された値に基づいて、配列から月の名前を取り出す関数を実行します。値に対応する月の数字 (<code>1</code>–<code>12</code>) が無い場合は <code>\"InvalidMonthNo\"</code> という値を持つ例外が投げられ、<code>catch</code> ブロックの中の文は <code>monthName</code> という変数に <code>'unknown'</code> という値をセットします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">getMonthName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  mo <span class=\"token operator\">=</span> mo <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 月の数字を配列のインデックスに合わせる (1 = Jan, 12 = Dec)</span>\n  <span class=\"token keyword\">let</span> months <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Jan'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Feb'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Mar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Apr'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'May'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Jun'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Jul'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'Aug'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Sep'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Oct'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Nov'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Dec'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>months<span class=\"token punctuation\">[</span>mo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> months<span class=\"token punctuation\">[</span>mo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token string\">'InvalidMonthNo'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// throw キーワードが使われている</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 実行を試みる文</span>\n  monthName <span class=\"token operator\">=</span> <span class=\"token function\">getMonthName</span><span class=\"token punctuation\">(</span>myMonth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// この関数が例外を投げる場合がある</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  monthName <span class=\"token operator\">=</span> <span class=\"token string\">'unknown'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">logMyErrors</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 例外オブジェクトをエラーハンドラーに渡す</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"catch_ブロック\"><code>catch</code> ブロック</h4>\n<p><code>catch</code> ブロックを用いることで、<code>try</code> ブロックで生じうるすべての例外を扱うことができます。</p>\n<pre class=\"notranslate\">catch (catchID) {\n  statements\n}\n</pre>\n<p><code>catch</code> ブロックには、<code>throw</code> 文で指定される値を保持しておく識別子 (上記の構文における <code>catchID</code>) を指定します。投げられた例外についての情報を得るのに、この識別子を使います。</p>\n<p>JavaScript は <code>catch</code> ブロックに入るときにこの識別子を作成します。識別子は <code>catch</code> ブロックの区間だけ存続します。つまり、<code>catch</code> ブロックの実行が終わると、その識別子はもう使えなくなります。</p>\n<p>例えば、次のコードは例外を投げます。例外が生じると、制御が <code>catch</code> ブロックに移ります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token string\">'myException'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 例外を生成</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ここには例外を扱う文が入る</span>\n  <span class=\"token function\">logMyErrors</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 例外オブジェクトをエラーハンドラに渡す</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>Note:</strong> <strong>ベストプラクティス:</strong> <code>catch</code> ブロック内でコンソールにエラーをログ出力する場合は、<code>console.log()</code> よりも <code>console.error()</code> がデバッグ目的では推奨されています。これはメッセージをエラーとして書式化し、ページによって生成されたエラーメッセージの一覧に追加します。</p>\n</div>\n<h4 id=\"finally_ブロック\"><code>finally</code> ブロック</h4>\n<p><code>finally</code> ブロックは、<code>try</code> および <code>catch</code> ブロックの実行<em>後</em>に実行される文が入ります。また、<code>finally</code> ブロックの中のコードは <code>try…catch…finally</code> に続く分が実行される<em>前</em>に実行されます。</p>\n<p>また、<code>finally</code> ブロックは例外が発生する<em>かどうかにかかわらず</em>実行されるということに注意することも大切です。また、例外が発生したら、<code>finally</code> ブロック内の文は発生した例外が <code>catch</code> ブロックで処理されなくても実行されます。</p>\n<p><code>finally</code> ブロックを使用することで、例外発生時に適切にスクリプトを停止させることができます。例えば、スクリプトで使用していたリソースを解放しなければならない場合などです。</p>\n<p>次の例ではファイルを開き、そのファイルを使用する文を実行します (サーバー側 JavaScript ではファイルにアクセスできます)。ファイルを開いている間に発生すると、スクリプトが停止する前に <code>finally</code> ブロックでそのファイルを閉じます。ここで <code>finally</code> を使用することで、エラーが発生した場合であってもファイルが開かれたままにならないことを<em>保証</em>します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">openMyFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">writeMyFile</span><span class=\"token punctuation\">(</span>theData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ここでエラーが投げられる可能性がある</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// エラーを受け取り、それを処理する</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">closeMyFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 常にリソースが閉じられる</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>finally</code> ブロックが値を返す場合、その値は <code>try</code> および <code>catch</code> ブロックの <code>return</code> 文にかかわらず <code>try…catch…finally</code> 全体が生成する返値になります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token string\">'bogus'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// この返値は、finally ブロックが</span>\n                    <span class=\"token comment\">// 完了するまで保留となる</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ここまで到達しない</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 直前の \"return\" が上書きされる</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ここまで到達しない</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ここで \"return false\" が実行される</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// ここまで到達しない</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0, 1, 3, false</span>\n</code></pre></div>\n<p><code>finally</code> ブロックによる返値の上書きは、<code>catch</code> ブロック内で発生した、または再発生した例外にも適用されます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token string\">'bogus'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'caught inner \"bogus\"'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span> <span class=\"token comment\">// この throw 文は finally ブロックが</span>\n             <span class=\"token comment\">// 完了するまで保留になる</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 直前の \"throw\" が上書きされる</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ここで \"return false\" が実行される</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ここには到達しない</span>\n  <span class=\"token comment\">// f() を実行した際、`finally` ブロックが false を返し、</span>\n  <span class=\"token comment\">// 上記の `catch` の中にある `throw` を上書する</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'caught outer \"bogus\"'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// OUTPUT</span>\n<span class=\"token comment\">// caught inner \"bogus\"</span>\n<span class=\"token comment\">// false</span>\n</code></pre></div>\n<h4 id=\"try...catch_文の入れ子\">try...catch 文の入れ子</h4>\n<p>1 つ以上の <code>try...catch</code> 文を入れ子にすることができます。</p>\n<p>内側の <code>try...catch</code> 文に <code>catch</code> ブロックが<em>ない</em>場合は次のようになります。</p>\n<ol>\n  <li><code>finally</code> ブロックを含む必要があります。そして、</li>\n  <li>囲んでいる <code>try...catch</code> 文の <code>catch</code> ブロックがエラーの照合先としてチェックされます。</li>\n</ol>\n<p>詳しくは、<a href=\"/ja/docs/Web/JavaScript/Reference/Statements/try...catch\"><code>try...catch</code></a> の中の <a href=\"/ja/docs/Web/JavaScript/Reference/Statements/try...catch#nested_try-blocks\">nested try-blocks</a> を参照してください。</p>","titleAsText":"try...catch 文"}},{"type":"prose","value":{"id":"error_オブジェクトの活用","title":"Error オブジェクトの活用","isH3":true,"content":"<p>エラーの種類に応じて、<code>name</code> や <code>message</code> プロパティを使ってより詳細なメッセージが得られるようにすることができます。</p>\n<p><code>name</code> は <code>Error</code> のクラス全般 (例えば <code>DOMException</code> や <code>Error</code>) を表し、一方 <code>message</code> は通常、エラーオブジェクトを文字列に変換したものより簡潔なメッセージを表します。</p>\n<p>独自の例外を発生させて、これらのプロパティを有効に活用したい場合 (<code>catch</code> ブロックで独自の例外とシステムの例外とを区別したくない場合など)、<code>Error</code> コンストラクターが使えます。</p>\n<p>例えば、次のようにします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">doSomethingErrorProne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ourCodeMakesAMistake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The message'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">doSomethingToGetAJavascriptError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n⋮\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">doSomethingErrorProne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>               <span class=\"token comment\">// `console.error()` を実際に使ってログを出力してみます</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 'Error' をログ出力</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'The message'、または JavaScript のエラーメッセージをログ出力</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ja/docs/Web/JavaScript/Guide/Grammar_and_types\">« 前のページ</a></li>\n    <li><a class=\"button minimal\" href=\"/ja/docs/Web/JavaScript/Guide/Loops_and_iteration\">次のページ »</a></li>\n</ul>"}}],"toc":[{"text":"ブロック文","id":"ブロック文"},{"text":"条件文","id":"条件文"},{"text":"例外処理文","id":"例外処理文"}],"summary":"JavaScript は、特に制御フロー文についてはコンパクトな文のセットに対応しており、アプリケーションに多様な対話的機能を組み込むために利用することができます。この節ではこれらの文の概要を説明します。","popularity":0.0008,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Control flow and error handling","locale":"en-US","native":"English (US)"},{"title":"Control de flujo y manejo de errores","locale":"es","native":"Español"},{"title":"Contrôle du flux d'instructions et gestion des erreurs","locale":"fr","native":"Français"},{"title":"제어 흐름과 오류 처리","locale":"ko","native":"한국어"},{"title":"Controle de Fluxo e Manipulação de Erro","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Порядок выполнения и обработка ошибок","locale":"ru","native":"Русский"},{"title":"流程控制与错误处理","locale":"zh-CN","native":"中文 (简体)"},{"title":"流程控制與例外處理","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ja/web/javascript/guide/control_flow_and_error_handling","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/javascript/guide/control_flow_and_error_handling/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/ja/docs/Web/JavaScript/Guide","title":"JavaScript ガイド"},{"uri":"/ja/docs/Web/JavaScript/Guide/Control_flow_and_error_handling","title":"制御フローとエラー処理"}],"pageTitle":"制御フローとエラー処理 - JavaScript | MDN","noIndexing":false}}