{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"式と演算子","mdn_url":"/ja/docs/Web/JavaScript/Guide/Expressions_and_Operators","locale":"ja","native":"日本語","sidebarHTML":"\n <ol>\n  <li><a href=\"/ja/docs/Web/JavaScript\"><strong><em>JavaScript</em></strong></a></li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Tutorials\"><strong>チュートリアル:</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>初級編</summary>\n      <ol>\n        <li><a href=\"/ja/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">JavaScript の基礎</a></li>\n        <li><a href=\"/ja/docs/Learn/JavaScript/First_steps\">JavaScript の第一歩</a></li>\n        <li><a href=\"/ja/docs/Learn/JavaScript/Building_blocks\">JavaScript の構成要素</a></li>\n        <li><a href=\"/ja/docs/Learn/JavaScript/Objects\">JavaScript オブジェクト入門</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>JavaScript ガイド</summary>\n      <ol>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Introduction\">入門編</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Grammar_and_Types\">文法とデータ型</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">制御フローとエラー処理</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Loops_and_iteration\">ループとイテレーター</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Functions\">関数</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Expressions_and_Operators\">式と演算子</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Numbers_and_dates\">数と日付</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Text_formatting\">テキスト処理</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Regular_Expressions\">正規表現</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Indexed_collections\">インデックス付きコレクション</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Keyed_collections\">キー付きコレクション</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Working_with_Objects\">オブジェクトを利用する</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Details_of_the_Object_Model\">オブジェクトモデルの詳細</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Using_promises\">プロミスの使用</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Iterators_and_generators\">イテレーターとジェネレーター</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Meta_programming\">メタプログラミング</a></li>\n          <li><a href=\"/ja/docs/Web/JavaScript/Guide/Modules\">JavaScript モジュール</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>中級編</summary>\n      <ol>\n        <li><a href=\"/ja/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks\">クライアントサイド JavaScript フレームワーク</a></li>\n        <li><a href=\"/ja/docs/Learn/JavaScript/Client-side_web_APIs\">クライアントサイド Web API</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">JavaScript 「再」入門</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Data_structures\">JavaScript のデータ構造</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Equality_comparisons_and_sameness\">等値比較と同一性</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Closures\">クロージャ</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>上級編</summary>\n      <ol>\n        <li><a href=\"/ja/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">継承とプロトタイプチェーン</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Reference/Strict_mode\">Strict モード</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Typed_arrays\">JavaScript 型付き配列</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Memory_Management\">メモリー管理</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/EventLoop\">並列モデルとイベントループ</a></li>\n      </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/ja/docs/Web/JavaScript/Reference\">リファレンス</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n       <summary>組み込みオブジェクト</summary>\n        <ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\">AggregateError</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\">AsyncFunction</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\">AsyncGenerator</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\">AsyncGeneratorFunction</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Atomics\">Atomics</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array\">BigInt64Array</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array\">BigUint64Array</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/DataView\">DataView</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\">decodeURI()</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent()</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI()</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent()</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Error\">Error</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/escape\">escape()</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval()</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/EvalError\">EvalError</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\">FinalizationRegistry</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\">Float32Array</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\">Float64Array</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Generator\">Generator</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">globalThis</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Infinity\">Infinity</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\">Int16Array</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\">Int32Array</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\">Int8Array</a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/InternalError\">InternalError</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/isFinite\">isFinite()</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/isNaN\">isNaN()</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/NaN\">NaN</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">parseFloat()</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">parseInt()</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RangeError\">RangeError</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\">ReferenceError</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">Reflect</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">RegExp</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String\">String</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\">SyntaxError</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">TypedArray</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\">Uint16Array</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\">Uint32Array</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">Uint8Array</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\">Uint8ClampedArray</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/undefined\">undefined</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/unescape\">unescape()</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/URIError\">URIError</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/WeakRef\">WeakRef</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\">WeakSet</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>式と演算子</summary>\n      <ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Addition_assignment\">Addition assignment (+=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Addition\">Addition (+)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Assignment\">Assignment (=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/async_function*\">async function* expression</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/await\">await</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment\">Bitwise AND assignment (&amp;=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">Bitwise AND (&amp;)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">Bitwise NOT (~)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment\">Bitwise OR assignment (|=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">Bitwise OR (|)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment\">Bitwise XOR assignment (^=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">Bitwise XOR (^)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/class\">class expression</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Comma_Operator\">Comma operator (,)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">Conditional (ternary) operator</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Decrement\">Decrement (--)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/delete\">delete operator</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">Destructuring assignment</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Division_assignment\">Division assignment (/=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Division\">Division (/)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Equality\">Equality (==)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment\">Exponentiation assignment (**=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Exponentiation\">Exponentiation (**)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/function\">Function expression</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal\">Greater than or equal (&gt;=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Greater_than\">Greater than (&gt;)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Grouping\">Grouping operator ( )</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/import.meta\">import.meta</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/import\">import</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/in\">in operator</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Increment\">Increment (++)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Inequality\">Inequality (!=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/instanceof\">instanceof</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment\">Left shift assignment (&lt;&lt;=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Left_shift\">Left shift (&lt;&lt;)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal\">Less than or equal (&lt;=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Less_than\">Less than (&lt;)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment\">Logical AND assignment (&amp;&amp;=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Logical_AND\">Logical AND (&amp;&amp;)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">Logical NOT (!)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment\">Logical nullish assignment (??=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment\">Logical OR assignment (||=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Logical OR (||)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment\">Multiplication assignment (*=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Multiplication\">Multiplication (*)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/new.target\">new.target</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/new\">new operator</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/null\">null</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\">Nullish coalescing operator (??)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Object_initializer\">Object initializer</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">Operator precedence</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">Optional chaining (?.)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Property_Accessors\">Property accessors</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Remainder_assignment\">Remainder assignment (%=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Remainder\">Remainder (%)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment\">Right shift assignment (&gt;&gt;=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Right_shift\">Right shift (&gt;&gt;)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Spread syntax (...)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Strict_equality\">Strict equality (===)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">Strict inequality (!==)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment\">Subtraction assignment (-=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Subtraction\">Subtraction (-)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/super\">super</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/this\">this</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/typeof\">typeof</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Unary_negation\">Unary negation (-)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Unary_plus\">Unary plus (+)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment\">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">Unsigned right shift (&gt;&gt;&gt;)</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/void\">void operator</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/yield*\">yield*</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/yield\">yield</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>文と宣言</summary>\n      <ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/async_function*\">async function*</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/block\">block</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/break\">break</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/class\">class</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/const\">const</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/continue\">continue</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/debugger\">debugger</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/do...while\">do...while</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/Empty\">empty</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/export\">export</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/for-await...of\">for await...of</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/for\">for</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/function*\">function*</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/function\">function declaration</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/if...else\">if...else</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/import\">import</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/label\">label</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/let\">let</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/return\">return</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/switch\">switch</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/throw\">throw</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/try...catch\">try...catch</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/var\">var</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/while\">while</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Statements/with\">with</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>関数</summary>\n      <ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow function expressions</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Functions/get\">getter</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Functions/set\">setter</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>クラス</summary>\n      <ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Classes/Class_static_initialization_blocks\">Class static initialization blocks</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Classes/constructor\">constructor</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Classes/extends\">extends</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">Private class features</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Classes/Public_class_fields\">Public class fields</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Classes/static\">static</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Errors</summary>\n      <ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Already_has_pragma\">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Array_sort_argument\">TypeError: invalid Array.prototype.sort argument</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Bad_octal\">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Bad_radix\">RangeError: radix must be an integer</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag\">SyntaxError: invalid regular expression flag \"x\"</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield\">SyntaxError: return not in function</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/BigInt_division_by_zero\">RangeError: BigInt division by zero</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/BigInt_negative_exponent\">RangeError: BigInt negative exponent</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type\">TypeError: X.prototype.y called on incompatible type</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init\">ReferenceError: can't access lexical declaration 'X' before initialization</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Cant_assign_to_property\">TypeError: can't assign to property \"x\" on \"y\": not an object</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Cant_be_converted_to_BigInt_because_it_isnt_an_integer\">RangeError: x can't be converted to BigInt because it isn't an integer</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Cant_convert_BigInt_to_number\">TypeError: can't convert BigInt to number</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Cant_convert_x_to_BigInt\">TypeError: can't convert x to BigInt</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible\">TypeError: can't define property \"x\": \"obj\" is not extensible</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Cant_delete\">TypeError: property \"x\" is non-configurable and can't be deleted</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property\">TypeError: can't redefine non-configurable property \"x\"</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Cant_use_nullish_coalescing_unparenthesized\">SyntaxError: cannot use `??` unparenthesized within `||` and `&amp;&amp;` expressions</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value\">TypeError: cyclic object value</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Dead_object\">TypeError: can't access dead object</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode\">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage\">ReferenceError: deprecated caller or arguments usage</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Deprecated_expression_closures\">Warning: expression closures are deprecated</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Deprecated_octal\">SyntaxError: \"0\"-prefixed octal literals and octal escape seq. are deprecated</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma\">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Deprecated_String_generics\">Warning: String.x is deprecated; use String.prototype.x instead</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Deprecated_toLocaleFormat\">Warning: Date.prototype.toLocaleFormat is deprecated</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Equal_as_assign\">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Getter_only\">TypeError: setting getter-only property \"x\"</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Hash_outside_class\">SyntaxError: Unexpected '#' used outside of class body</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Identifier_after_number\">SyntaxError: identifier starts immediately after numeric literal</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Illegal_character\">SyntaxError: illegal character</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/in_operator_no_object\">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\">RangeError: invalid array length</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side\">SyntaxError: invalid assignment left-hand side</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax\">SyntaxError: invalid BigInt syntax</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment\">TypeError: invalid assignment to const \"x\"</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Invalid_date\">RangeError: invalid date</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer\">SyntaxError: for-in loop head declarations may not have initializers</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer\">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand\">TypeError: invalid 'instanceof' operand 'x'</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/is_not_iterable\">TypeError: 'x' is not iterable</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse\">SyntaxError: JSON.parse: bad parsing</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Malformed_formal_parameter\">SyntaxError: Malformed formal parameter</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Malformed_URI\">URIError: malformed URI sequence</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list\">SyntaxError: missing ] after element list</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id\">SyntaxError: missing : after property id</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body\">SyntaxError: missing } after function body</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list\">SyntaxError: missing } after property list</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter\">SyntaxError: missing formal parameter</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const\">SyntaxError: missing = in const declaration</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator\">SyntaxError: missing name after . operator</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\">SyntaxError: missing ) after argument list</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition\">SyntaxError: missing ) after condition</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Missing_semicolon_before_statement\">SyntaxError: missing ; before statement</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/More_arguments_needed\">TypeError: More arguments needed</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count\">RangeError: repeat count must be non-negative</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/No_non-null_object\">TypeError: \"x\" is not a non-null object</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/No_properties\">TypeError: \"x\" has no properties</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/No_variable_name\">SyntaxError: missing variable name</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element\">TypeError: can't delete non-configurable array element</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint\">RangeError: argument is not a valid code point</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Not_a_constructor\">TypeError: \"x\" is not a constructor</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Not_a_function\">TypeError: \"x\" is not a function</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Not_defined\">ReferenceError: \"x\" is not defined</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Precision_range\">RangeError: precision is out of range</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Property_access_denied\">Error: Permission denied to access property \"x\"</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Read-only\">TypeError: \"x\" is read-only</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter\">SyntaxError: redeclaration of formal parameter \"x\"</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value\">TypeError: Reduce of empty array with no initial value</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Reserved_identifier\">SyntaxError: \"x\" is a reserved identifier</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large\">RangeError: repeat count must be less than infinity</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Stmt_after_return\">Warning: unreachable code after return statement</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params\">SyntaxError: \"use strict\" not allowed in function with non-simple parameters</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Too_much_recursion\">InternalError: too much recursion</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Undeclared_var\">ReferenceError: assignment to undeclared variable \"x\"</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Undefined_prop\">ReferenceError: reference to undefined property \"x\"</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Unexpected_token\">SyntaxError: Unexpected token</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Unexpected_type\">TypeError: \"x\" is (not) \"y\"</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement\">SyntaxError: function statement requires a name</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Unparenthesized_unary_expr_lhs_exponentiation\">SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'</a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Unterminated_string_literal\">SyntaxError: unterminated string literal</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>その他</summary>\n      <ol>\n        <li><a href=\"/ja/docs/Web/JavaScript/JavaScript_technologies_overview\">JavaScript 技術概説</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Reference/Lexical_grammar\">字句文法</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Data_structures\">JavaScript のデータ構造</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">プロパティの列挙可能性と所有権</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Reference/Iteration_protocols\">反復処理プロトコル</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Reference/Strict_mode\">Strict モード</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\">strict モードへの移行</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Reference/Template_literals\">テンプレート文字列</a></li>\n        <li><a href=\"/ja/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\">廃止予定の機能</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ja/docs/Web/JavaScript/Guide/Functions\">« 前のページ</a></li>\n    <li><a class=\"button minimal\" href=\"/ja/docs/Web/JavaScript/Guide/Numbers_and_dates\">次のページ »</a></li>\n</ul>\n<p>この章では JavaScript の式 (expression) や演算子 (operator) について、代入、比較、算術、ビット、論理、文字列、三項演算子などを説明しています。</p>\n<p>演算子と式について網羅した詳しいリストは<a href=\"/ja/docs/Web/JavaScript/Reference/Operators\">リファレンス</a>でもご覧いただけます。</p>"}},{"type":"prose","value":{"id":"演算子","title":"演算子","isH3":false,"content":"<p>JavaScript では以下の種類の演算子を使用できます。この節では演算子の優先順位についての説明も含めて演算子について説明します。</p>\n<ul>\n  <li><a href=\"#%E4%BB%A3%E5%85%A5%E6%BC%94%E7%AE%97%E5%AD%90\">代入演算子</a></li>\n  <li><a href=\"#%E6%AF%94%E8%BC%83%E6%BC%94%E7%AE%97%E5%AD%90\">比較演算子</a></li>\n  <li><a href=\"#%E7%AE%97%E8%A1%93%E6%BC%94%E7%AE%97%E5%AD%90\">算術演算子</a></li>\n  <li><a href=\"#%E3%83%93%E3%83%83%E3%83%88%E6%BC%94%E7%AE%97%E5%AD%90\">ビット演算子</a></li>\n  <li><a href=\"#%E8%AB%96%E7%90%86%E6%BC%94%E7%AE%97%E5%AD%90\">論理演算子</a></li>\n  <li><a href=\"#%E6%96%87%E5%AD%97%E5%88%97%E6%BC%94%E7%AE%97%E5%AD%90\">文字列演算子</a></li>\n  <li><a href=\"#%E6%9D%A1%E4%BB%B6%EF%BC%88%E4%B8%89%E9%A0%85%EF%BC%89%E6%BC%94%E7%AE%97%E5%AD%90\">条件（三項）演算子</a></li>\n  <li><a href=\"#%E3%82%AB%E3%83%B3%E3%83%9E%E6%BC%94%E7%AE%97%E5%AD%90\">カンマ演算子</a></li>\n  <li><a href=\"#%E5%8D%98%E9%A0%85%E6%BC%94%E7%AE%97%E5%AD%90\">単項演算子</a></li>\n  <li><a href=\"#%E9%96%A2%E4%BF%82%E6%BC%94%E7%AE%97%E5%AD%90\">関係演算子</a></li>\n</ul>\n<p>JavaScript は<em>二項演算子</em>や単項演算子*を実装しており、さらには特殊な三項演算子である条件演算子も実装しています。二項演算子は以下のような形で演算子 (operator) を 1 つ、その前後となるようにオペランド (operand) が 2 つ必要となります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>operand1 operator operand2\n</code></pre></div>\n<p>例えば <code>3+4</code> や <code>x*y</code> です。</p>\n<p>単項演算子は演算子の前後いずれかに、 1 つのオペランドが必要です。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>operator operand\n</code></pre></div>\n<p>もしくは</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>operand operator\n</code></pre></div>\n<p>例えば <code>x++</code> や <code>++x</code> です。</p>"}},{"type":"prose","value":{"id":"代入演算子","title":"代入演算子","isH3":true,"content":"<p>\n  代入演算子は右オペランドの値を元に、左のオペランドへ値を代入するものです。\n  簡単なものではイコール (<code>=</code>) があり、右オペランドの値を左オペランドへ代入します。\n  つまり、 <code>x = f()</code> では <code>f()</code> の値を <code>x</code> へ代入する代入式です。\n</p>\n<p>次の表にまとめられているように、演算子を省略表記した複合代入演算子もあります。</p>\n<table>\n  <thead>\n    <tr>\n      <th>名前</th>\n      <th>略記演算子</th>\n      <th>意味</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Assignment\">代入</a></td>\n      <td><code>x = f()</code></td>\n      <td><code>x = f()</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Addition_assignment\">加算代入</a></td>\n      <td><code>x += f()</code></td>\n      <td><code>x = x + f()</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment\">減算代入</a></td>\n      <td><code>x -= f()</code></td>\n      <td><code>x = x - f()</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment\">乗算代入</a></td>\n      <td><code>x *= f()</code></td>\n      <td><code>x = x * f()</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Division_assignment\">除算代入</a></td>\n      <td><code>x /= f()</code></td>\n      <td><code>x = x / f()</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Remainder_assignment\">剰余代入</a></td>\n      <td><code>x %= f()</code></td>\n      <td><code>x = x % f()</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment\">べき乗代入</a></td>\n      <td><code>x **= f()</code></td>\n      <td><code>x = x ** f()</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment\">左シフト代入</a></td>\n      <td><code>x &lt;&lt;= f()</code></td>\n      <td><code>x = x &lt;&lt; f()</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment\">右シフト代入</a></td>\n      <td><code>x &gt;&gt;= f()</code></td>\n      <td><code>x = x &gt;&gt; f()</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment\">符号なし右シフト代入</a></td>\n      <td><code>x &gt;&gt;&gt;= f()</code></td>\n      <td><code>x = x &gt;&gt;&gt; f()</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment\">ビット論理積 (AND) 代入</a></td>\n      <td><code>x &amp;= f()</code></td>\n      <td><code>x = x &amp; f()</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment\">ビット排他的論理和 (XOR) 代入</a></td>\n      <td><code>x ^= f()</code></td>\n      <td><code>x = x ^ f()</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment\">ビット論理和 (OR) 代入</a></td>\n      <td><code>x |= f()</code></td>\n      <td><code>x = x | f()</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment\">論理積 (AND) 代入</a></td>\n      <td><code>x &amp;&amp;= f()</code></td>\n      <td><code>x &amp;&amp; (x = f())</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment\">論理和 (OR) 代入</a></td>\n      <td><code>x ||= f()</code></td>\n      <td><code>x || (x = f())</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment\">Null 合体代入</a></td>\n      <td><code>x ??= f()</code></td>\n      <td><code>x ?? (x = f())</code></td>\n    </tr>\n  </tbody>\n</table>\n<h4 id=\"プロパティへの代入\">プロパティへの代入</h4>\n<p>ある式が<a href=\"/ja/docs/Web/JavaScript/Guide/Working_with_Objects\">オブジェクト</a>として評価される場合、代入式の左辺をその式のプロパティへの代入にすることができます。例えば次のようになります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nobj<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3 と表示</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { x: 3 } と表示</span>\n\n<span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> <span class=\"token string\">\"y\"</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5 と表示</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { x: 3, y: 5 } と表示</span>\n</code></pre></div>\n<p>オブジェクトについて詳しくは、<a href=\"/ja/docs/Web/JavaScript/Guide/Working_with_Objects\">オブジェクトでの作業</a>を読んでください。</p>\n<p>式がオブジェクトとして評価されない場合は、その式のプロパティへの代入は行われません。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> val <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3 と表示</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined と表示</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0 と表示</span>\n</code></pre></div>\n<p>変更できないプロパティや、プロパティを持たない式のプロパティ（<code>null</code> や <code>undefined</code>）に値を代入しようとするとエラーとなります。</p>\n<h4 id=\"分割代入\">分割代入</h4>\n<p>より複雑な代入方法、<a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">分割代入</a>構文は、配列やオブジェクトのリテラル構造を反映した構文を用いて、配列やオブジェクトからデータを抽出することができる JavaScript の式です。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'three'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 分割を行わない代入</span>\n<span class=\"token keyword\">var</span> one   <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> two   <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> three <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 分割代入</span>\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">[</span>one<span class=\"token punctuation\">,</span> two<span class=\"token punctuation\">,</span> three<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"評価とネスト\">評価とネスト</h4>\n<p>一般に、代入は変数宣言の中で（すなわち、 <a href=\"/ja/docs/Web/JavaScript/Reference/Statements/const\"><code>const</code></a>, <a href=\"/ja/docs/Web/JavaScript/Reference/Statements/let\"><code>let</code></a>, <a href=\"/ja/docs/Web/JavaScript/Reference/Statements/var\"><code>var</code></a> と一緒に）、または独立した文として使用されます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 変数 x を宣言し、 f() の返値で初期化します。</span>\n<span class=\"token comment\">// x = f() の代入式の返値は破棄されます。</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nx <span class=\"token operator\">=</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 変数 x に g() の返値を再代入します。</span>\n</code></pre></div>\n<p>\n  しかし、他の式と同様に、<code>x = f()</code> のような代入式も結果値として評価されます。\n  この結果の値は通常は使用されませんが、別の式で使用することができます。\n</p>\n<p>\n  代入を連鎖させたり、他の式で代入を入れ子にすると、驚くような動作になることがあります。\n  このため、 JavaScript のスタイルガイドによっては、代入の連鎖や入れ子を<a href=\"https://github.com/airbnb/javascript/blob/master/README.md#variables--no-chain-assignment\" class=\"external\" rel=\" noopener\">連鎖や入れ子の代入を非推奨</a>と定めています。）\n  とはいえ、代入の連鎖や入れ子が発生することもあるので、それらがどのように動作するのか理解できるようにしておくことは重要です。\n</p>\n<p>\n  代入式を連鎖させたり入れ子にしたりすることで、その結果自体を別の変数に代入することができます。\n  また、ログに記録したり、配列リテラルや関数呼び出しの中に入れたりすることも可能です。\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// または const y = x = f(); と同等</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// assignment x = f() の返値を出力</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返値を直接出力</span>\n\n<span class=\"token comment\">// 代入式は、配列リテラルの要素や関数呼び出しの引数など、</span>\n<span class=\"token comment\">// 一般に式が許される場所であればどこでも入れ子にすることが</span>\n<span class=\"token comment\">// できます。</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> x <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> x <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>評価結果は、上の表の「意味」の欄の <code>=</code> 記号の右側にある式に一致します。つまり、 <code>x = f()</code> は <code>f()</code> の結果に、<code>x += f()</code> は結果の和 <code>x + f()</code> に、 <code>x **= f()</code> は結果のべき乗 <code>x ** y</code> に評価される、といった具合になります。</p>\n<p>論理代入の場合、 <code>x &amp;&amp;= f()</code>, <code>x ||= f()</code>, <code>x ??= f()</code> は，それぞれ代入を除いた論理演算の返値なので、 <code>x &amp;&amp; f()</code>, <code>x || f()</code>, <code>x ?? f()</code> となります。</p>\n<p>これらの式を括弧や配列リテラルのようなグループ化演算子なしで連結する場合、代入式は<strong>右から左へグループ化されます</strong>（<a href=\"https://ja.wikipedia.org/wiki/%E7%B5%90%E5%90%88%E6%B3%95%E5%89%87#%E9%9D%9E%E7%B5%90%E5%90%88%E7%9A%84%E6%BC%94%E7%AE%97%E3%81%AE%E8%A8%98%E6%B3%95\" class=\"external\" rel=\" noopener\">右結合</a>です）が、<strong>左から右へ評価されます</strong>。</p>\n<p>また、 <code>=</code> 以外のすべての代入演算子では、結果の値は常に演算前のオペランドの値に基づいていることに注意してください。</p>\n<p>例えば、次のような関数 <code>f</code> と <code>g</code>、変数 <code>x</code> と <code>y</code> が宣言されていると仮定します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">f</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'F!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">g</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'G!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>この 3 つの例を考えてみましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>y <span class=\"token operator\">=</span> x <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ny <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> x <span class=\"token operator\">=</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span>\nx<span class=\"token punctuation\">[</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h5 id=\"評価例_1\">評価例 1</h5>\n<p>\n  <code>y = x = f()</code> は <code>y = (x = f())</code> と同じです。\n  <code>=</code> は <a href=\"https://ja.wikipedia.org/wiki/%E7%B5%90%E5%90%88%E6%B3%95%E5%89%87#%E9%9D%9E%E7%B5%90%E5%90%88%E7%9A%84%E6%BC%94%E7%AE%97%E3%81%AE%E8%A8%98%E6%B3%95\" class=\"external\" rel=\" noopener\">右結合</a> だからです。\n  しかし、評価は左から右へ行われます。\n</p>\n<ol>\n  <li>代入式 <code>y = x = f()</code> の評価が始まります。\n    <ol>\n      <li>この代入の左辺にある <code>y</code> は、変数 <code>y</code> への参照として評価されます。</li>\n      <li>代入式 <code>x = f()</code> の評価が始まります。\n        <ol>\n          <li>この代入の左辺にある <code>x</code> は、 <code>x</code> という名前の変数への参照として評価されます。</li>\n          <li>関数呼び出し <code>f()</code> でコンソールに \"F!\" と表示し、次に数値 <code>2</code> と評価されます。</li>\n          <li><code>2</code> が <code>f()</code> の結果となり <code>x</code> に代入されます。</li>\n        </ol>\n      </li>\n      <li>\n        代入式 <code>x = f()</code> の評価が終わりました。\n        その結果は、 <code>x</code> の新しい値、すなわち <code>2</code> です。\n      </li>\n      <li>その結果 <code>2</code> が <code>y</code> にも代入されます。</li>\n    </ol>\n  </li>\n  <li>\n    代入式 <code>y = x = f()</code> の評価が終わりました。\n    その結果は <code>y</code> の新しい値で、それは <code>2</code> となります。\n    x<code>と</code>y<code>は</code>2` が代入され、コンソールには \"F!\" と表示されました。\n  </li>\n</ol>\n<h5 id=\"評価例_2\">評価例 2</h5>\n<p><code>y = [ f(), x = g() ]</code> も左から右へ評価が行われます。</p>\n<ol>\n  <li>代入式 <code>y = [ f(), x = g() ]</code> の評価が始まります。\n    <ol>\n      <li>この代入の左辺にある <code>y</code> は、変数 <code>y</code> への参照として評価されます。</li>\n      <li>内側の配列リテラル <code>[ f(), x = g() ]</code> の評価が始まります。\n        <ol>\n          <li>関数呼び出し <code>f()</code> でコンソールに \"F!\" と表示し、次に数値 <code>2</code> と評価されます。</li>\n          <li>代入式 <code>x = g()</code> の評価が始まります。\n            <ol>\n              <li>この代入の左辺にある <code>x</code> は、 <code>x</code> という名前の変数への参照として評価されます。</li>\n              <li>関数呼び出し <code>g()</code> でコンソールに \"G!\" と表示し、次に数値 <code>3</code> と評価されます。</li>\n              <li><code>3</code> が <code>g()</code> の結果となり <code>x</code> に代入されます。</li>\n            </ol>\n          </li>\n          <li>\n            代入式 <code>x = g()</code> の評価が終わりました。\n            その結果は、 <code>x</code> の新しい値、すなわち <code>3</code> です。\n            この <code>3</code> の結果は、内側の配列リテラルの次の要素になります（<code>f()</code> の <code>2</code> の後です）。\n          </li>\n        </ol>\n      </li>\n      <li>\n        内側の配列リテラル <code>[ f(), x = g() ]</code> の評価が終わりました。\n        結果は 2 つの値を持つ配列、 <code>[ 2, 3 ]</code> です。\n      </li>\n      <li>その配列 <code>[ 2, 3 ]</code> が <code>y</code></li>\n    </ol>\n  </li>\n  <li>\n    代入式 <code>y = [ f(), x = g() ]</code> の評価が終わりました。\n    結果として <code>y</code> が新しい値、 <code>[ 2, 3 ]</code> になります。\n    <code>x</code> には <code>3</code> が代入されました。\n    <code>y</code> には <code>[ 2, 3 ]</code> が代入され、コンソールには \"F!\" の後に \"G!\" が表示されます。\n  </li>\n</ol>\n<h5 id=\"評価例_3\">評価例 3</h5>\n<p>\n  <code>x[f()] = g()</code> も左から右へ評価されます。\n  （この例では <code>x</code> 二は既に何らかのオブジェクトが代入されていると想定してください。\n  オブジェクトについて詳しくは、<a href=\"/ja/docs/Web/JavaScript/Guide/Working_with_Objects\">オブジェクトでの作業</a>をお読みください。\n</p>\n<ol>\n  <li>代入式 <code>x[f()] = g()</code> の評価が始まります。\n    <ol>\n      <li>この代入における代入の左辺の <code>x[f()]</code> プロパティアクセスの評価が始まります。\n        <ol>\n          <li>このプロパティアクセスの <code>x</code> は、 <code>x</code> という名前の変数への参照として評価されます。</li>\n          <li>そして、関数呼び出し <code>f()</code> でコンソールに \"F!\" と表示し、次に数値 <code>2</code> と評価されます。</li>\n        </ol>\n      </li>\n      <li>\n        この代入における <code>x[f()]</code> プロパティアクセスの評価が終わりました。\n        結果は変数プロパティ参照である <code>x[2]</code> です。\n      </li>\n      <li>そして、関数呼び出し <code>g()</code> でコンソールに \"G!\" と表示し、次に数値 <code>3</code> と評価されます。</li>\n      <li>\n        <code>3</code> が <code>x[2]</code> に代入されます。\n        （この過程は <code>x</code> に<a href=\"/ja/docs/Web/JavaScript/Guide/Working_with_Objects\">オブジェクト</a>が代入されているときのみ成功します。）\n      </li>\n    </ol>\n  </li>\n  <li>\n    代入式 <code>x[f()] = g()</code> の評価が終わりました。\n    返値は <code>x[2]</code> の新しい値– ここでは <code>3</code> です。\n    <code>x[2]</code> には <code>3</code> が代入され、コンソールには \"F!\" に続いて \"G!\" が表示されます。\n  </li>\n</ol>\n<h4 id=\"代入連鎖の防止\">代入連鎖の防止</h4>\n<p>代入を連鎖させたり、他の式に代入を入れ子にすると、意外な動作をすることがあります。このため、<a href=\"https://github.com/airbnb/javascript/blob/master/README.md#variables--no-chain-assignment\" class=\"external\" rel=\" noopener\">同じ文の中で代入を連鎖させることは推奨されません</a>。</p>\n<p>特に、 <a href=\"/ja/docs/Web/JavaScript/Reference/Statements/const\"><code>const</code></a>, <a href=\"/ja/docs/Web/JavaScript/Reference/Statements/let\"><code>let</code></a>, <a href=\"/ja/docs/Web/JavaScript/Reference/Statements/var\"><code>var</code></a> 文の中に変数連鎖を入れると、しばしばうまく行かなくなります。代入連鎖の中で一番外側/左側の変数だけが宣言され、他の変数は <code>const</code>/<code>let</code>/<code>var</code> 文では宣言されないからです。例えば、</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> z <span class=\"token operator\">=</span> y <span class=\"token operator\">=</span> x <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>\n  この文は一見すると、変数 <code>x</code>, <code>y</code>, <code>z</code> を宣言しているように見えます。\n  しかし、実際に宣言しているのは変数 <code>z</code> だけです。\n  <code>y</code> と <code>x</code> は存在しない変数への無効な参照であるか（<a href=\"/ja/docs/Web/JavaScript/Reference/Strict_mode\">厳格モード</a> の場合）、もっと悪いことには、<a href=\"/ja/docs/Glossary/Sloppy_mode\">厳格モードでない</a>場合は <code>x</code> と <code>y</code> に対して<a href=\"/ja/docs/Glossary/Global_variable\">グローバル変数</a>を暗に生成してしまうことになるのです。\n</p>"}},{"type":"prose","value":{"id":"比較演算子","title":"比較演算子","isH3":true,"content":"<p>\n  比較演算子はオペランドを比較して、その結果が真であるかに基づいて論理値を返します。\n  オペランドには数値、文字列、論理値、<a href=\"/ja/docs/Web/JavaScript/Guide/Working_with_Objects\">オブジェクト</a>を使用できます。\n  文字列は Unicode の値を用い、標準的な辞書順に基づいて比較されます。\n  ほとんどの場合、2 つのオペランドが異なる型ならば JavaScript はそのオペランドを比較に適した型に変換しようとします。\n  こうした挙動により、一般的にオペランドは数値的に比較される結果となります。\n  このルールの唯一の例外は <code>===</code> および <code>!==</code> で、これらは「厳密に」等値か否かを判断し、等値性をチェックする前にオペランドを適合する型に変換しません。\n  次の表では、以下のサンプルコードで定義された変数を前提として比較演算子を説明していきます。\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> var1 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> var2 <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<table class=\"standard-table\">\n  <caption>比較演算子</caption>\n  <thead>\n    <tr>\n      <th scope=\"col\">演算子</th>\n      <th scope=\"col\">説明</th>\n      <th scope=\"col\">true を返す例</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators#equality\">等価</a> (<code>==</code>)</td>\n      <td>オペランドが等しい場合に <code>true</code> を返します。</td>\n      <td><code>3 == var1</code>\n        <p><code>\"3\" == var1</code></p><code>3 == '3'</code>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators#inequality\">不等価</a> (<code>!=</code>)</td>\n      <td>オペランドが等しくない場合に <code>true</code> を返します。</td>\n      <td><code>var1 != 4<br>var2 != \"3\"</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators#identity\">厳密等価</a> (<code>===</code>)</td>\n      <td>\n        オペランドが等しく、かつ同じ型である場合に <code>true</code> を返します。\n        <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/is\"><code>Object.is</code></a> や<a href=\"/ja/docs/Web/JavaScript/Equality_comparisons_and_sameness\">JavsScript での等価</a>も参照してください。\n      </td>\n      <td><code>3 === var1</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">厳密不等価</a> (<code>!==</code>)</td>\n      <td>オペランドが同じ型で値が等しくないか、型が異なる場合に <code>true</code> を返します。</td>\n      <td><code>var1 !== \"3\"<br>3 !== '3'</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators#greater_than_operator\">大なり</a> (<code>&gt;</code>)</td>\n      <td>左のオペランドが右のオペランドよりも大きい場合に <code>true</code> を返します。</td>\n      <td><code>var2 &gt; var1<br>\"12\" &gt; 2</code></td>\n    </tr>\n    <tr>\n      <td>\n        <a href=\"/ja/docs/Web/JavaScript/Reference/Operators#greater_than_or_equal_operator\">以上</a>\n        (<code>&gt;=</code>)\n      </td>\n      <td>左のオペランドが右のオペランド以上である場合に <code>true</code> を返します。</td>\n      <td><code>var2 &gt;= var1<br>var1 &gt;= 3</code></td>\n    </tr>\n    <tr>\n      <td>\n        <a href=\"/ja/docs/Web/JavaScript/Reference/Operators#less_than_operator\">小なり</a>\n        (<code>&lt;</code>)\n      </td>\n      <td>左のオペランドが右のオペランドよりも小さい場合に <code>true</code> を返します。</td>\n      <td><code>var1 &lt; var2<br>\"2\" &lt; 12</code></td>\n    </tr>\n    <tr>\n      <td>\n        <a href=\"/ja/docs/Web/JavaScript/Reference/Operators#less_than_or_equal_operator\">以下</a>\n        (<code>&lt;=</code>)\n      </td>\n      <td>左のオペランドが右のオペランド以下である場合に <code>true</code> を返します。</td>\n      <td><code>var1 &lt;= var2<br>var2 &lt;= 5</code></td>\n    </tr>\n  </tbody>\n</table>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> <code>=&gt;</code> は演算子ではなく、<a href=\"/ja/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">アロー関数</a>を表す記法です。</p>\n</div>"}},{"type":"prose","value":{"id":"算術演算子","title":"算術演算子","isH3":true,"content":"<p>\n  算術演算子は、オペランドとして数値（リテラルまたは変数）をとり、1 つの数値を返します。\n  標準的な算術演算子は、加算 (<code>+</code>)、減算 (<code>-</code>)、乗算 (<code>*</code>)、除算 (<code>/</code>) です。\n  これらの演算子は、他のほとんどのプログラミング言語で浮動小数点数を用いた場合と同じように機能します（特に、0 で除算をすると <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a> になることに注意してください）。例えば以下のようになります。\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0.5</span>\n<span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true になる</span>\n</code></pre></div>\n<p>\n  標準的な算術演算子 (<code>+</code>, <code>-</code>,\n  <code>*</code>, <code>/</code>) に加え、さらに JavaScript では、以下の表で示す算術演算子も使用できます。\n</p>\n<table class=\"fullwidth-table\">\n  <caption>算術演算子</caption>\n  <thead>\n    <tr>\n      <th scope=\"col\">演算子</th>\n      <th scope=\"col\">説明</th>\n      <th scope=\"col\">例</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Remainder\">剰余</a> (<code>%</code>)</td>\n      <td>二項演算子です。2 つのオペランドで除算したときの、整数の余りを返します。</td>\n      <td>12 % 5 は 2 を返します。</td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Increment\">インクリメント</a> (<code>++</code>)</td>\n      <td>単項演算子です。オペランドに 1 を加えます。前置演算子 (<code>++x</code>) として用いると、オペランドに 1 を加えた後にその値を返します。後置演算子 (<code>x++</code>) として用いると、オペランドに 1 を加える前にその値を返します。</td>\n      <td><code>x</code> が 3 の場合、<code>++x</code> は <code>x</code> に 4 を設定して 4 を返します。一方、<code>x++</code> は 3 を返したあと <code>x</code> に 4 を設定します。</td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Decrement\">デクリメント</a> (<code>--</code>)</td>\n      <td>単項演算子です。オペランドから 1 を引きます。返値はインクリメント演算子のものと同様です。</td>\n      <td><code>x</code> が 3 の場合、<code>--x</code> は <code>x</code> に 2 を設定して 2 を返します。一方、<code>x--</code> は 3 を返したあと <code>x</code> に 2 を設定します。</td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Unary_negation\">単項符号反転</a> (<code>-</code>)</td>\n      <td>単項演算子です。オペランドの符号を反転して、その値を返します。</td>\n      <td><code>x</code> が 3 のとき、<code>-x</code> は -3 を返します。</td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Unary_plus\">単項プラス</a> (<code>+</code>)</td>\n      <td>単項演算子です。数値でないオペランドの数値への変換を試みます。</td>\n      <td>\n        <p><code>+\"3\"</code> は <code>3</code> を返します。</p>\n        <p><code>+true</code> は <code>1</code> を返します。</p>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Exponentiation\">べき乗演算子</a> (<code>**</code>)</td>\n      <td>\n        <code>基数部</code> を <code>指数部</code> 乗したものを計算します。\n        すなわち、 <code>基数部^指数部</code> です。\n      </td>\n      <td>\n        <code>2 ** 3</code> は <code>8</code> を返します。<br><code>10 ** -1</code>\n        は <code>0.1</code> を返します。\n      </td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"ビット演算子","title":"ビット演算子","isH3":true,"content":"<p>\n  ビット演算子は、そのオペランドを 10 進数や 16 進数や 8 進数ではなく、 32 個のビットの集合 (0 と 1) として扱います。\n  例えば、 10 進数の 9 の 2 進表現は 1001 です。\n  ビット演算子はこのように 2 進表現にした上で演算を行いますが、 JavaScript において標準的な数値を返します。\n</p>\n<p>次の表は JavaScript のビット演算子の概要です。</p>\n<table>\n  <thead>\n    <tr>\n      <th>演算子</th>\n      <th>使用法</th>\n      <th>説明</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">ビット論理積</a> (AND)</td>\n      <td><code>a &amp; b</code></td>\n      <td>オペランドの対応するビットがともに 1 である各ビットについて 1 を返します。</td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">ビット論理和</a> (OR)</td>\n      <td><code>a | b</code></td>\n      <td>オペランドの対応するビットがともに 0 である各ビットについて 0 を返します。</td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">ビット排他的論理和</a> (XOR)</td>\n      <td><code>a ^ b</code></td>\n      <td>オペランドの対応するビットが同じ各ビットについて 0 を返します。 [オペランドの対応するビットが異なる各ビットについて 1 を返します。]</td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">ビット否定</a> (NOT)</td>\n      <td><code>~ a</code></td>\n      <td>オペランドの各ビットを反転します。</td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Left_shift\">左シフト</a></td>\n      <td><code>a &lt;&lt; b</code></td>\n      <td>2 進表現の <code>a</code> を <code>b</code> ビット分だけ左にシフトします。右から 0 で詰めます。</td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Right_shift\">符号維持右シフト</a></td>\n      <td><code>a &gt;&gt; b</code></td>\n      <td>2 進表現の <code>a</code> を <code>b</code> ビット分だけ右にシフトします。溢れたビットは破棄します。</td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">ゼロ埋め右シフト</a></td>\n      <td><code>a &gt;&gt;&gt; b</code></td>\n      <td>2 進表現の <code>a</code> を <code>b</code> ビット分だけ右にシフトします。溢れたビットは破棄し、左から 0 で詰めます。</td>\n    </tr>\n  </tbody>\n</table>\n<h4 id=\"ビット論理演算子\">ビット論理演算子</h4>\n<p>概念上、ビット論理演算子は以下のように機能します。</p>\n<ul>\n  <li>\n    オペランドの値は 32 ビットの整数に変換され、0 もしくは 1 からなるビット列として表現されます。\n    32 ビットを超える数値は、32 ビットを超えた部分が捨てられます。\n    次の例では、32 ビットを超える整数が、32 ビットの整数に変換されています。\n    <pre class=\"notranslate\">変換前: 1110 0110 1111 1010 0000 0000 0000 0110 0000 0000 0001\n変換後:                1010 0000 0000 0000 0110 0000 0000 0001\n</pre>\n  </li>\n  <li>第 1 オペランドの各ビットは第 2 オペランドの対応する各ビットと対になります。第 1 ビットと第 1 ビット、第 2 ビットと第 2 ビット、以下同様です。</li>\n  <li>演算子は各ビットのペアに適用され、結果はビットごとに構成されます。</li>\n</ul>\n<p>\n  例えば 9 の 2 進表現は 1001 で、15 の 2 進表現は 1111 です。\n  したがって、ビット演算子がこれらの値に適用されたときの結果は以下のようになります。\n</p>\n<table>\n  <thead>\n    <tr>\n      <th>式</th>\n      <th>結果</th>\n      <th>2 進数での説明</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>15 &amp; 9</code></td>\n      <td><code>9</code></td>\n      <td><code>1111 &amp; 1001 = 1001</code></td>\n    </tr>\n    <tr>\n      <td><code>15 | 9</code></td>\n      <td><code>15</code></td>\n      <td><code>1111 | 1001 = 1111</code></td>\n    </tr>\n    <tr>\n      <td><code>15 ^ 9</code></td>\n      <td><code>6</code></td>\n      <td><code>1111 ^ 1001 = 0110</code></td>\n    </tr>\n    <tr>\n      <td><code>~15</code></td>\n      <td><code>-16</code></td>\n      <td><code>~ 0000 0000 ... 0000 1111 = 1111 1111 ... 1111 0000</code></td>\n    </tr>\n    <tr>\n      <td><code>~9</code></td>\n      <td><code>-10</code></td>\n      <td><code>~ 0000 0000 ... 0000 1001 = 1111 1111 ... 1111 0110</code></td>\n    </tr>\n  </tbody>\n</table>\n<p>なお、ビット否定演算子を使うと 32 ビットすべてが反転し、その値の最上位（最も左）のビットは（2 の補数表現で）負の数を表す 1 に設定されることに注意してください。 <code>~x</code> は <code>-x - 1</code> と同じ値に評価されます。</p>\n<h4 id=\"ビットシフト演算子\">ビットシフト演算子</h4>\n<p>\n  ビットシフト演算子は 2 つのオペランドをとります。第 1 オペランドはシフトされる数を指定し、第 2 オペランドは、第 1 オペランドをシフトさせるビット数を指定します。\n  シフト演算の方向は使用する演算子によって決まります。\n</p>\n<p>シフト演算子はそのオペランドを 32 ビット整数に変換し、結果を <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> または <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> のどちらかで返します。特に、左のオペランドの型が <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> であった場合、 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> を返します。それ以外の場合は <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> を返します。</p>\n<p>シフト演算子の種類は次表のとおりです。</p>\n<table class=\"fullwidth-table\">\n  <caption>ビットシフト演算子</caption>\n  <thead>\n    <tr>\n      <th scope=\"col\">演算子</th>\n      <th scope=\"col\">説明</th>\n      <th scope=\"col\">例</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Left_shift\">左シフト</a><br>(<code>&lt;&lt;</code>)</td>\n      <td>この演算子は、第 1 オペランドを指定したビット数分だけ左にシフトします。左に溢れたビットは破棄されます。0 のビットを右から詰めます。</td>\n      <td><code>9&lt;&lt;2</code> の結果は 36 になります。1001 を 2 ビット左にシフトすると 100100 になり、これは 36 となるからです。</td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Right_shift\">符号維持右シフト</a> (<code>&gt;&gt;</code>)</td>\n      <td>この演算子は、第 1 オペランドを指定したビット数分だけ右にシフトします。右にあふれたビットは破棄されます。左端のビットのコピーを左から入れます。</td>\n      <td><code>9&gt;&gt;2</code> の結果は 2 になります。1001 を 2 ビット右にシフトすると 10 であり、これは 2 となるからです。同様に、 <code>-9&gt;&gt;2</code> は符号が維持されるため -3 になります。</td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">ゼロ埋め右シフト</a> (<code>&gt;&gt;&gt;</code>)</td>\n      <td>この演算子は、第 1 オペランドを指定したビット数分だけ右にシフトします。右に溢れたビットは破棄されます。0 のビットを左から詰めます。</td>\n      <td><code>19&gt;&gt;&gt;2</code> の結果は 4 になります。10011 を 2 ビット右にシフトすると 100 になり、これは 4 となるからです。非負数では、0 埋め右シフトと符号を維持した右シフトは同じ結果になります。</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"論理演算子","title":"論理演算子","isH3":true,"content":"<p>論理演算子では、基本的にブール値（論理値）を用います。その場合は論理値を返します。しかし、 <code>&amp;&amp;</code> および <code>||</code> 演算子については、実際には指定されたオペランドの一方の値を返します。そのため、これらの演算子で論理値以外が使用された場合、論理値以外を返すことがあります。論理演算子は次の表で説明します。</p>\n<table class=\"fullwidth-table\">\n  <caption>論理演算子</caption>\n  <thead>\n    <tr>\n      <th scope=\"col\">演算子</th>\n      <th scope=\"col\">使用法</th>\n      <th scope=\"col\">説明</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND\">論理積 (AND)</a> (<code>&amp;&amp;</code>)</td>\n      <td><code>expr1 &amp;&amp; expr2</code></td>\n      <td>\n        <code>expr1</code> が <code>false</code> に変換できる場合は、これを返します。\n        そうでなければ、 <code>expr2</code> を返します。従って、論理値を用いた場合、両オペランドが真であれば <code>&amp;&amp;</code> は <code>true</code> を返します。それ以外の場合は <code>false</code> を返します。\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR\">論理和 (OR)</a> (<code>||</code>)</td>\n      <td><code>expr1 || expr2</code></td>\n      <td>\n        <code>expr1</code> が <code>true</code> に変換できる場合は、これを返します。\n        そうでなければ、 <code>expr2</code> を返します。従って、論理値を用いた場合、どちらかのオペランドが真であれば <code>||</code> は <code>true</code> を返します。それ以外の場合は <code>false</code> を返します。\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">論理否定 (NOT)</a> (<code>!</code>)</td>\n      <td><code>!expr</code></td>\n      <td>単一のオペランドが <code>true</code> に変換できる場合は <code>false</code> を返します。そうでない場合は <code>true</code> を返します。</td>\n    </tr>\n  </tbody>\n</table>\n<p><code>false</code> に変換される式としては、null、0、NaN、空文字列 (\"\")、undefined に評価される式が挙げられます。</p>\n<p>以下のコードで <code>&amp;&amp;</code> (論理 AND) 演算子の例を示します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> a1 <span class=\"token operator\">=</span>  <span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// t &amp;&amp; t は true を返す</span>\n<span class=\"token keyword\">var</span> a2 <span class=\"token operator\">=</span>  <span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// t &amp;&amp; f は false を返す</span>\n<span class=\"token keyword\">var</span> a3 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// f &amp;&amp; t は false を返す</span>\n<span class=\"token keyword\">var</span> a4 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// f &amp;&amp; f は false を返す</span>\n<span class=\"token keyword\">var</span> a5 <span class=\"token operator\">=</span> <span class=\"token string\">'Cat'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'Dog'</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// t &amp;&amp; t は Dog を返す</span>\n<span class=\"token keyword\">var</span> a6 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'Cat'</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// f &amp;&amp; t は false を返す</span>\n<span class=\"token keyword\">var</span> a7 <span class=\"token operator\">=</span> <span class=\"token string\">'Cat'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// t &amp;&amp; f は false を返す</span>\n</code></pre></div>\n<p>以下のコードで || (論理 OR) 演算子の例を示します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> o1 <span class=\"token operator\">=</span>  <span class=\"token boolean\">true</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// t || t は true を返す</span>\n<span class=\"token keyword\">var</span> o2 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// f || t は true を返す</span>\n<span class=\"token keyword\">var</span> o3 <span class=\"token operator\">=</span>  <span class=\"token boolean\">true</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// t || f は true を返す</span>\n<span class=\"token keyword\">var</span> o4 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// f || f は false を返す</span>\n<span class=\"token keyword\">var</span> o5 <span class=\"token operator\">=</span> <span class=\"token string\">'Cat'</span> <span class=\"token operator\">||</span> <span class=\"token string\">'Dog'</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// t || t は Cat を返す</span>\n<span class=\"token keyword\">var</span> o6 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token string\">'Cat'</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// f || t は Cat を返す</span>\n<span class=\"token keyword\">var</span> o7 <span class=\"token operator\">=</span> <span class=\"token string\">'Cat'</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// t || f は Cat を返す</span>\n</code></pre></div>\n<p>以下のコードで !(論理 NOT) 演算子の例を示します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> n1 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// !t は false を返す</span>\n<span class=\"token keyword\">var</span> n2 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// !f は true を返す</span>\n<span class=\"token keyword\">var</span> n3 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token string\">'Cat'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// !t は false を返す</span>\n</code></pre></div>\n<h4 id=\"短絡評価\">短絡評価</h4>\n<p>複数の論理式が左から右へ評価される際に、以下の規則で「短絡」 (short-circuit) 評価ができるかどうかが確認されます。</p>\n<ul>\n  <li><code>false &amp;&amp; 何か</code> は false へと短絡評価されます。</li>\n  <li><code>true || 何か</code> は true へと短絡評価されます。</li>\n</ul>\n<p>論理的なルールにより、これらの評価が常に正確であることが保証されます。上記の式で<code>何か</code>の部分は評価されないため、どのようにしても副作用が生じないことに注意してください。</p>\n<p>なお、 2 番目のケースについては、最新のコードでは新しい <a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\">Null 合体演算子</a> (<code>??</code>) が使用できますが、これは最初の式が \"<a href=\"/ja/docs/Glossary/Nullish\">nullish</a>\"、つまり <a href=\"/ja/docs/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> または <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> である場合のみ 2 番目の式を返します。したがって、 1 番目の式で <code>''</code> や <code>0</code> などを有効な値として扱う場合に、既定値を提供する代替策とすることをお勧めします。</p>"}},{"type":"prose","value":{"id":"文字列演算子","title":"文字列演算子","isH3":true,"content":"<p>文字列に対して使用することができる演算子には、比較演算子に加えて、2 つの文字列を結合する結合演算子 (+) があり、2 つのオペランドの文字列を結合した文字列を返します。</p>\n<p>例えば、</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my '</span> <span class=\"token operator\">+</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 文字列 \"my string\" がログに表示される。</span>\n</code></pre></div>\n<p>短縮表記した代入演算子 += も文字列の結合に使用できます。</p>\n<p>例えば、</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> mystring <span class=\"token operator\">=</span> <span class=\"token string\">'alpha'</span><span class=\"token punctuation\">;</span>\nmystring <span class=\"token operator\">+=</span> <span class=\"token string\">'bet'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"alphabet\" と評価されて、mystring にその値を代入します。</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"条件（三項）演算子","title":"条件（三項）演算子","isH3":true,"content":"<p><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">条件演算子</a>は JavaScript で唯一 3 つのオペランドを取る演算子です。条件に基づいて 2 つの値のうちの 1 つを選択します。構文は以下の通りです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>condition <span class=\"token operator\">?</span> val1 <span class=\"token operator\">:</span> val2\n</code></pre></div>\n<p><code>条件</code>が真の場合、演算子は<code>値 1</code> の値を選択します。そうでない場合、<code>値 2</code> の値を選択します。標準的な演算子を使用できる場所ならどこでも条件演算子を使用できます。</p>\n<p>例えば、</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> status <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>age <span class=\"token operator\">&gt;=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">'adult'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'minor'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>この文では、<code>age</code> が 18 以上の場合、変数 <code>status</code> に \"adult\" の値が代入されます。そうでない場合 <code>status</code> には \"minor\" が代入されます。</p>"}},{"type":"prose","value":{"id":"カンマ演算子","title":"カンマ演算子","isH3":true,"content":"<p>\n  <a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Comma_Operator\">カンマ演算子</a>（,）は、オペランドの両方を評価し、最後のオペランドの値を返します。この演算子は、主に<code>for</code> ループの中で、繰り返しのたびに複数の変数を更新するために使用されます。多くの場合、2つの独立したステートメントを代わりに使用することができ、また使用すべきです。\n  (<code>,</code>) は両側のオペランドを単純に評価し、最後のオペランドの値を返します。この演算子は主に <code>for</code> ループ内で使用され、これによりループのたびに複数の変数を更新できます。\n</p>\n<p>例えば、一辺が 10 要素の 2 次元配列 <code>a</code> があったとして、以下のコードでカンマ演算子を用いて 2 つの変数を同時に更新しています。このコードでは配列の対角成分の値を出力します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> j<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//                                ^</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a['</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">']['</span> <span class=\"token operator\">+</span> j <span class=\"token operator\">+</span> <span class=\"token string\">']= '</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"単項演算子","title":"単項演算子","isH3":true,"content":"<p>単項演算はオペランドを 1 つだけ取る演算です。</p>\n<h4 id=\"delete\"><code>delete</code></h4>\n<p><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/delete\"><code>delete</code></a> 演算子はオブジェクトやオブジェクトのプロパティ、配列の指定されたインデックスの要素を削除します。構文は以下のとおりです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">delete</span> object<span class=\"token punctuation\">.</span>property<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> object<span class=\"token punctuation\">[</span>propertyKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> objectName<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ここで <code>object</code> はオブジェクトの名前を、<code>property</code> は既存のプロパティを、<code>propertyKey</code> は配列の要素の位置を示す整数をそれぞれ表しています。</p>\n<p><code>delete</code> 演算子が成功すると、オブジェクトからそのプロパティが削除されます。その後、このプロパティにアクセスしようとしても、結果は <code>undefined</code> になります。 <code>delete</code> 演算子は、操作が可能な場合は <code>true</code> を返し、操作が不可能な場合は <code>false</code> を返します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">delete</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false を返す（構成不可のプロパティは削除できない）</span>\n\n<span class=\"token keyword\">const</span> myObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">h</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> myObj<span class=\"token punctuation\">.</span>h<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true を返す（ユーザー定義のプロパティは削除できる）</span>\n</code></pre></div>\n<h5 id=\"配列要素の削除\">配列要素の削除</h5>\n<p>配列は単なるオブジェクトの集まりであるため、技術的には各要素を <code>delete</code> することが可能です。しかしそれは悪しき慣例とみなされており、使用しないでください。配列の要素を削除しても、配列の length は影響を受けず、他の要素の添字も付けなおされません。このようなことをするのであれば、単に要素を <code>undefined</code> で上書きするほうがはるかに良い方法です。実際に配列を操作するためには、 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"><code>splice</code></a> のようなさまざまな配列のメソッドを使用してください。</p>\n<h4 id=\"typeof\"><code>typeof</code></h4>\n<p><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/typeof\"><code>typeof</code> 演算子</a>は次の方法のうち、どちらかの方法で使用します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> オペランド\n<span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">(</span>オペランド<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p><code>typeof</code> 演算子は、未評価のオペランドの型を指す文字列を返します。<code>オペランド</code>には返される型を調べる対象となる文字列、キーワード、オブジェクトを指定します。括弧はあってもなくてもかまいません。</p>\n<p>以下の変数を定義することにしましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myFun <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">'5 + 2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> shape <span class=\"token operator\">=</span> <span class=\"token string\">'round'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> size <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Mango'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Orange'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> today <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>typeof</code> 演算子は、変数の型に応じて以下の値を返します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> myFun<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// \"function\" を返す</span>\n<span class=\"token keyword\">typeof</span> shape<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// \"string\" を返す</span>\n<span class=\"token keyword\">typeof</span> size<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// \"number\" を返す</span>\n<span class=\"token keyword\">typeof</span> foo<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// \"object\" を返す</span>\n<span class=\"token keyword\">typeof</span> today<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// \"object\" を返す</span>\n<span class=\"token keyword\">typeof</span> doesntExist<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"undefined\" を返す</span>\n</code></pre></div>\n<p><code>true</code> や <code>null</code> というキーワードに対して、<code>typeof</code> 演算子は以下の結果を返します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"boolean\" を返す</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"object\" を返す</span>\n</code></pre></div>\n<p>数値や文字列に対して、 <code>typeof</code> 演算子は以下の結果を返します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> <span class=\"token number\">62</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// \"number\" を返す</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token string\">'Hello world'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"string\" を返す</span>\n</code></pre></div>\n<p>プロパティ値に対して、 <code>typeof</code> 演算子はプロパティが持つ値の型を返します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> document<span class=\"token punctuation\">.</span>lastModified<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"string\" を返す</span>\n<span class=\"token keyword\">typeof</span> window<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// \"number\" を返す</span>\n<span class=\"token keyword\">typeof</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">LN2</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// \"number\" を返す</span>\n</code></pre></div>\n<p>メソッドや関数に対して、 <code>typeof</code> 演算子は以下の結果を返します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> blur<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// \"function\" を返す</span>\n<span class=\"token keyword\">typeof</span> eval<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// \"function\" を返す</span>\n<span class=\"token keyword\">typeof</span> parseInt<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// \"function\" を返す</span>\n<span class=\"token keyword\">typeof</span> shape<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"function\" を返す</span>\n</code></pre></div>\n<p>定義済みオブジェクトに対して、 <code>typeof</code> 演算子は以下の結果を返します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> Date<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// \"function\" を返す</span>\n<span class=\"token keyword\">typeof</span> Function<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"function\" を返す</span>\n<span class=\"token keyword\">typeof</span> Math<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// \"object\" を返す</span>\n<span class=\"token keyword\">typeof</span> Option<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// \"function\" を返す</span>\n<span class=\"token keyword\">typeof</span> String<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// \"function\" を返す</span>\n</code></pre></div>\n<h4 id=\"void\"><code>void</code></h4>\n<p><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/void\"><code>void</code> 演算子</a>は以下のどちらかの方法で使用します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>式<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">void</span> 式\n</code></pre></div>\n<p><code>void</code> 演算子は、値を返さずに評価する式を指定します。<code>式</code>は評価する JavaScript の式となります。式の周りの括弧はあってもなくてもかまいませんが、使用する方が見た目がよいです。</p>"}},{"type":"prose","value":{"id":"関係演算子","title":"関係演算子","isH3":true,"content":"<p>関係演算子はオペランドを比較し、比較結果が真かどうかに基づいて論理値を返します。</p>\n<h4 id=\"in\"><code>in</code></h4>\n<p><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/in\"><code>in</code> 演算子</a>は、指定したプロパティが指定のオブジェクトにある場合に <code>true</code> を返します。構文は以下のとおりです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>プロパティ名または数値 <span class=\"token keyword\">in</span> オブジェクト名\n</code></pre></div>\n<p>ここで <code>プロパティ名または数値</code> は文字列、数値、シンボルの何れかで、プロパティ名または配列の添字を表します。<code>オブジェクト名</code>はオブジェクトの名前をそれぞれ表します。</p>\n<p>次の例で <code>in</code> 演算子の使用法を示します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 配列</span>\n<span class=\"token keyword\">var</span> trees <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'redwood'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bay'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cedar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'oak'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'maple'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">0</span> <span class=\"token keyword\">in</span> trees<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// true を返す</span>\n<span class=\"token number\">3</span> <span class=\"token keyword\">in</span> trees<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// true を返す</span>\n<span class=\"token number\">6</span> <span class=\"token keyword\">in</span> trees<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// false を返す</span>\n<span class=\"token string\">'bay'</span> <span class=\"token keyword\">in</span> trees<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// false を返す（インデックスの指す値ではなく、</span>\n                   <span class=\"token comment\">// インデックスの数字を指定しなければならない）</span>\n<span class=\"token string\">'length'</span> <span class=\"token keyword\">in</span> trees<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true を返す（length は Array のプロパティ）</span>\n\n<span class=\"token comment\">// 定義済みオブジェクト</span>\n<span class=\"token string\">'PI'</span> <span class=\"token keyword\">in</span> Math<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// true を返す</span>\n<span class=\"token keyword\">var</span> myString <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'coral'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">'length'</span> <span class=\"token keyword\">in</span> myString<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true を返す</span>\n\n<span class=\"token comment\">// ユーザー定義オブジェクト</span>\n<span class=\"token keyword\">var</span> mycar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">make</span><span class=\"token operator\">:</span> <span class=\"token string\">'Honda'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">model</span><span class=\"token operator\">:</span> <span class=\"token string\">'Accord'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">year</span><span class=\"token operator\">:</span> <span class=\"token number\">1998</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">'make'</span> <span class=\"token keyword\">in</span> mycar<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// returns true</span>\n<span class=\"token string\">'model'</span> <span class=\"token keyword\">in</span> mycar<span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns true</span>\n</code></pre></div>\n<h4 id=\"instanceof\"><code>instanceof</code></h4>\n<p><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/instanceof\"><code>instanceof</code> 演算子</a>は、指定されたオブジェクトが指定されたオブジェクトの種類である場合に <code>true</code> を返します。構文は以下のとおりです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>オブジェクト名 <span class=\"token keyword\">instanceof</span> オブジェクト型\n</code></pre></div>\n<p>ここで<code>オブジェクト名</code>は<code>オブジェクト型</code>と比較するオブジェクトの名前を、<code>オブジェクト型</code>は <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> や <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> のようなオブジェクトの型をそれぞれ表します。</p>\n<p>実行時にオブジェクトの型を確認する必要があるときは <code>instanceof</code> を使用してください。例えば例外を受け取るとき、発生した例外の型に応じて、別々の例外を扱うコードに分岐することができます。</p>\n<p>例えば次のコードでは、 <code>instanceof</code> を使用して <code>theDay</code> が <code>Date</code> オブジェクトであるかを判断しています。 <code>theDay</code> は <code>Date</code> オブジェクトであるため、<code>if</code> 文中の文が実行されます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> theDay <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">1995</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>theDay <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 実行する文</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"演算子の優先順位","title":"演算子の優先順位","isH3":true,"content":"<p>演算子の<em>優先順位</em>によって、式評価の際に演算子が適用される順番が定義されています。括弧を用いることで演算子の優先順位を上書きすることができます。</p>\n<p>次の表では演算子の優先順位を、高いものから低い順に並べています。</p>\n<table>\n  <thead>\n    <tr>\n      <th>演算子の種類</th>\n      <th>対応する演算子</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>メンバー</td>\n      <td><code>.</code> <code>[]</code></td>\n    </tr>\n    <tr>\n      <td>呼び出し / インスタンス作成</td>\n      <td><code>()</code> <code>new</code></td>\n    </tr>\n    <tr>\n      <td>否定/インクリメント</td>\n      <td><code>!</code> <code>~</code> <code>-</code> <code>+</code> <code>++</code> <code>--</code> <code>typeof</code> <code>void</code> <code>delete</code></td>\n    </tr>\n    <tr>\n      <td>べき乗</td>\n      <td><code>**</code></td>\n    </tr>\n    <tr>\n      <td>乗算/除算</td>\n      <td><code>*</code> <code>/</code> <code>%</code></td>\n    </tr>\n    <tr>\n      <td>加算/減算</td>\n      <td><code>+</code> <code>-</code></td>\n    </tr>\n    <tr>\n      <td>ビットシフト</td>\n      <td><code>&lt;&lt;</code> <code>&gt;&gt;</code> <code>&gt;&gt;&gt;</code></td>\n    </tr>\n    <tr>\n      <td>関係</td>\n      <td><code>&lt;</code> <code>&lt;=</code> <code>&gt;</code> <code>&gt;=</code> <code>in</code> <code>instanceof</code></td>\n    </tr>\n    <tr>\n      <td>等価性</td>\n      <td><code>==</code> <code>!=</code> <code>===</code> <code>!==</code></td>\n    </tr>\n    <tr>\n      <td>ビット単位の AND</td>\n      <td><code>&amp;</code></td>\n    </tr>\n    <tr>\n      <td>ビット単位の XOR</td>\n      <td><code>^</code></td>\n    </tr>\n    <tr>\n      <td>ビット単位の OR</td>\n      <td><code>|</code></td>\n    </tr>\n    <tr>\n      <td>論理 AND</td>\n      <td><code>&amp;&amp;</code></td>\n    </tr>\n    <tr>\n      <td>論理 OR</td>\n      <td><code>||</code></td>\n    </tr>\n    <tr>\n      <td>条件</td>\n      <td><code>?:</code></td>\n    </tr>\n    <tr>\n      <td>代入</td>\n      <td><code>=</code> <code>+=</code> <code>-=</code> <code>**=</code> <code>*=</code> <code>/=</code> <code>%=</code> <code>&lt;&lt;=</code> <code>&gt;&gt;=</code> <code>&gt;&gt;&gt;=</code> <code>&amp;=</code> <code>^=</code> <code>|=</code> <code>&amp;&amp;=</code> <code>||=</code> <code>??=</code></td>\n    </tr>\n    <tr>\n      <td>カンマ</td>\n      <td><code>,</code></td>\n    </tr>\n  </tbody>\n</table>\n<p>それぞれの演算子についてのリンクを含むこの表の詳細版に関しては <a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#%E4%B8%80%E8%A6%A7%E8%A1%A8\">JavaScript リファレンス</a>を参照してください。</p>"}},{"type":"prose","value":{"id":"式","title":"式","isH3":false,"content":"<p><em>式</em>とは、ある値へと決定されるあらゆる有効なコードの単位のことです。</p>\n<p>構文的に有効な式は、すべて何らかの値に解決しますが、概念的には、副作用のある式 (例えば、変数に値を代入する式) と、ある意味で評価して値に解決する式の 2 種類があります。</p>\n<p><code>x = 7</code> という式が前者の例です。この式では <code>x</code> に 7 という値を代入するのに = <em>演算子</em>を使っています。この式自体は 7 と評価されます。</p>\n<p><code>3 + 4</code> という式は後者の例です。この式では 3 と 4 を加算するのに + 演算子を使っており、計算結果の 7 を変数に代入していません。</p>\n<p>JavaScript には、以下の種類の式があります。</p>\n<ul>\n  <li>算術式 : 評価結果は数値になります。例えば 3.14159 など。 (一般に<a href=\"#%E7%AE%97%E8%A1%93%E6%BC%94%E7%AE%97%E5%AD%90\">算術演算子</a>を使用します。)</li>\n  <li>文字列式 : 評価結果は文字列になります。例えば \"Fred\" や \"234\" など。 (一般に<a href=\"#%E6%96%87%E5%AD%97%E5%88%97%E6%BC%94%E7%AE%97%E5%AD%90\">文字列演算子</a>を使用します。)</li>\n  <li>論理式 : 評価結果は true または false になります。 (よく<a href=\"#%E8%AB%96%E7%90%86%E6%BC%94%E7%AE%97%E5%AD%90\">論理演算子</a>を用います)</li>\n  <li>基本式 : JavaScript にある基本のキーワードと一般的な式です。</li>\n  <li>左辺式 : 代入先になるような式です。</li>\n</ul>"}},{"type":"prose","value":{"id":"基本的な式","title":"基本的な式","isH3":true,"content":"<p>JavaScript における基本のキーワードと一般的な式です。</p>\n<h4 id=\"this\"><code>this</code></h4>\n<p><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/this\"><code>this</code> キーワード</a>を使用することで、現在のオブジェクトを参照できます。一般的に <code>this</code> は、メソッド内の呼び出しオブジェクトを指します。 <code>this</code> は、ドット表記またはブラケット表記で使用します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token string\">'propertyName'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyName\n</code></pre></div>\n<p><code>validate</code> という関数があり、オブジェクトと上限と下限の値を渡すことでオブジェクトの <code>value</code> プロパティを検証するものであるとしましょう。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> lowval<span class=\"token punctuation\">,</span> hival</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&lt;</span> lowval<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&gt;</span> hival<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Invalid Value!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>次の例のように、各フォーム要素の <code>onChange</code> イベントハンドラーにおいて <code>validate</code> を呼び出し、その関数にフォーム要素を渡すのに <code>this</code> を使うことができます。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>Enter a number between 18 and 99:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>3</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onChange</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<h4 id=\"グループ化演算子\">グループ化演算子</h4>\n<p>グループ化演算子 <code>( )</code> は式内での評価の優先順位を制御します。例えば、加算が最初に評価されるよう、最初に行われる演算を乗算と除算から加算と減算へと上書きすることができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 既定の優先順位</span>\na <span class=\"token operator\">+</span> b <span class=\"token operator\">*</span> c     <span class=\"token comment\">// 7</span>\n<span class=\"token comment\">// 既定ではこのように評価される</span>\na <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span> c<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 7</span>\n\n<span class=\"token comment\">// 優先順位を上書きし、</span>\n<span class=\"token comment\">// 乗算の前に加算を行う</span>\n<span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> c   <span class=\"token comment\">// 9</span>\n\n<span class=\"token comment\">// この式と同等となる</span>\na <span class=\"token operator\">*</span> c <span class=\"token operator\">+</span> b <span class=\"token operator\">*</span> c <span class=\"token comment\">// 9</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"左辺式","title":"左辺式","isH3":true,"content":"<p>左辺値は、代入する宛先です。</p>\n<h4 id=\"new\"><code>new</code></h4>\n<p><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/new\"><code>new</code> 演算子</a>を使用すると、いずれかのユーザー定義オブジェクト型や組み込みオブジェクト型のインスタンスを生成することができます。 <code>new</code> の使用法は以下のとおりです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> オブジェクト名 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">objectType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>引数<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 引数<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">,</span> 引数<span class=\"token constant\">N</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"super\">super</h4>\n<p><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/super\">super キーワード</a>は自分の親のオブジェクトに関数を呼び出すのに使います。これは下の例のように、<a href=\"/ja/docs/Web/JavaScript/Reference/Classes\">クラス</a>と共に使って親のコンストラクターを呼び出すのに便利です。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>引数<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 親のコンストラクターを呼び出す。</span>\n<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">親の関数</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>引数<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ja/docs/Web/JavaScript/Guide/Functions\">« 前のページ</a></li>\n    <li><a class=\"button minimal\" href=\"/ja/docs/Web/JavaScript/Guide/Numbers_and_dates\">次のページ »</a></li>\n</ul>"}}],"toc":[{"text":"演算子","id":"演算子"},{"text":"式","id":"式"}],"summary":"この章では JavaScript の式 (expression) や演算子 (operator) について、代入、比較、算術、ビット、論理、文字列、三項演算子などを説明しています。","popularity":0.0024,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Expressions and operators","locale":"en-US","native":"English (US)"},{"title":"Expresiones y operadores","locale":"es","native":"Español"},{"title":"Expressions et opérateurs","locale":"fr","native":"Français"},{"title":"표현식과 연산자","locale":"ko","native":"한국어"},{"title":"Expressões e operadores","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Выражения и операторы","locale":"ru","native":"Русский"},{"title":"表达式与运算符","locale":"zh-CN","native":"中文 (简体)"},{"title":"運算式與運算子","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ja/web/javascript/guide/expressions_and_operators","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/javascript/guide/expressions_and_operators/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/ja/docs/Web/JavaScript/Guide","title":"JavaScript ガイド"},{"uri":"/ja/docs/Web/JavaScript/Guide/Expressions_and_Operators","title":"式と演算子"}],"pageTitle":"式と演算子 - JavaScript | MDN","noIndexing":false}}