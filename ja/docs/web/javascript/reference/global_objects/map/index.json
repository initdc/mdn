{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Map","mdn_url":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects\">標準組み込みオブジェクト</a></strong></li><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>プロパティ</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map/@@species\"><code>get Map[@@species]</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map/@@toStringTag\"><code>Map.prototype[@@toStringTag]</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map/size\"><code>Map.prototype.size</code></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>メソッド</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map/@@iterator\"><code>Map.prototype[@@iterator]()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map/clear\"><code>Map.prototype.clear()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map/delete\"><code>Map.prototype.delete()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map/entries\"><code>Map.prototype.entries()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach\"><code>Map.prototype.forEach()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map/get\"><code>Map.prototype.get()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map/has\"><code>Map.prototype.has()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map/keys\"><code>Map.prototype.keys()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map/set\"><code>Map.prototype.set()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map/values\"><code>Map.prototype.values()</code></a></li></ol></li><li><strong>継承</strong></li><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li><a href=\"#\"><strong>プロパティ</strong></a><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function.prototype.displayName</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function.prototype.length</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function.prototype.name</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function.prototype.prototype</code></a></li></ol></li><li><a href=\"#\"><strong>メソッド</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></li><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>プロパティ</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>メソッド</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>Map</code></strong> オブジェクトはキーと値のペアを保持し、キーが最初に挿入された順序を覚えています。キーや値には任意の値 (オブジェクトと<a href=\"/ja/docs/Glossary/Primitive\">プリミティブ値</a>)を使用することができます。</p>"}},{"type":"prose","value":{"id":"解説","title":"解説","isH3":false,"content":"<p><code>Map</code> オブジェクトは、その要素について挿入順で反復処理を行うことができます。 <a href=\"/ja/docs/Web/JavaScript/Reference/Statements/for...of\"><code>for...of</code></a> ループは各反復で <code>[キー, 値]</code> の配列を返します。</p>"}},{"type":"prose","value":{"id":"キーの等価性","title":"キーの等価性","isH3":true,"content":"<ul>\n  <li>キーの等価性は <a href=\"/ja/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value-zero_equality\"><code>sameValueZero</code></a> アルゴリズムに基づきます。</li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> は <code>NaN</code> と同じとみなされ (<code>NaN !== NaN</code> であっても)、他の値はすべて <code>===</code> 演算子の意味に従って等価性が考慮されます。</li>\n  <li>現在の ECMAScript 仕様書では、 <code>-0</code> と <code>+0</code> は等しいと考えられています。但し、以前の草稿ではそのようになっていませんでした。詳細は <em>\"Value equality for -0 and 0\"</em> を<a href=\"#browser_compatibility\">ブラウザーの互換性</a>一覧で確認してください。</li>\n</ul>"}},{"type":"prose","value":{"id":"object_と_map_の比較","title":"Object と Map の比較","isH3":true,"content":"<p><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> と <code>Map</code> は似ています。 — どちらもキーを値に設定したり、それらの値を受け取ったり、キーを削除したり、キーに何かが格納されているかどうかを判定したりすることができます。この意味で (そして他の内蔵オブジェクトがなかったため)、従来 <code>Object</code> は <code>Map</code> として使われてきました。</p>\n<p>しかし、いくつかの場面で <code>Map</code> の方が勝るような重要な違いがあります。</p>\n<table class=\"standard-table\">\n  <thead>\n    <tr>\n      <th scope=\"row\"></th>\n      <th scope=\"col\">Map</th>\n      <th scope=\"col\">Object</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th scope=\"row\">思いがけないキー</th>\n      <td>\n        <code>Map</code>\n        は既定では何もキーを持っていません。明示的に設定したものだけを含みます。\n      </td>\n      <td>\n        <p>\n          <code>Object</code>\n          にはプロトタイプがあります。よって既定のキーを含んでいるので、注意しないと自分のキーと衝突する可能性があります。\n        </p>\n        <div class=\"note notecard\" id=\"sect1\">\n          <p>\n            <strong>注:</strong> ES5 では、\n            <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/create\"><code>Object.create(null)</code></a>\n            を使用すると回避できますが、これはめったに行われていません。\n          </p>\n        </div>\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">キーの型</th>\n      <td>\n        <code>Map</code> のキーはあらゆる値がなることができます\n        (関数、オブジェクト、あらゆるプリミティブなど)。\n      </td>\n      <td>\n        <code>Object</code> のキーは <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> または\n        <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> でなければなりません。\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">キーの順序</th>\n      <td>\n        <p>\n          <code>Map</code>\n          のキーは、単純で直感的な方法で順序付けられます。すなわち、反復処理を行うと、\n          <code>Map</code> オブジェクトは挿入順でキーを返します。\n        </p>\n      </td>\n      <td>\n        <p>\n          通常の\n          <code>Object</code>\n          のキーは現在では順序付けされていますが、以前はそうではなかったので、順序は複雑です。結果として、プロパティの順序に頼らない方が良いでしょう。\n        </p>\n        <p>\n          この順序は ECMAScript 2015\n          で初めて自身のプロパティに対してのみ定義されましたが、 ECMAScript 2020\n          では継承されたプロパティに対しても同様に順序が定義されています。\n          <a href=\"https://tc39.es/ecma262/#sec-ordinaryownpropertykeys\" class=\"external\" rel=\" noopener\">OrdinaryOwnPropertyKeys</a>\n          と\n          <a href=\"https://tc39.es/ecma262/#sec-enumerate-object-properties\" class=\"external\" rel=\" noopener\">EnumerateObjectProperties</a>\n          の抽象指定操作を参照してください。しかし、オブジェクトのプロパティが<strong>すべて</strong>反復処理される単一の単一のメカニズムはないことに注意してください。\n          (<a href=\"/ja/docs/Web/JavaScript/Reference/Statements/for...in\"><code>for-in</code></a>\n          は列挙可能な文字列キーのプロパティのみを含む、\n          <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\"><code>Object.keys</code></a>\n          は自分自身の列挙可能な文字列キーのプロパティのみを含む、\n          <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\"><code>Object.getOwnPropertyNames</code></a>\n          は列挙不可能な場合でも自分自身の文字列キーのプロパティを含む、\n          <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols\"><code>Object.getOwnPropertySymbols</code></a> は、\n          <code>Symbol</code>\n          キーを持つプロパティに対しても同じことを行う、など。)\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">\n        <p>大きさ</p>\n      </th>\n      <td>\n        <code>Map</code> の中の項目数は、\n        <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map/size\"><code>size</code></a>\n        プロパティで簡単に得ることができます。 property.\n      </td>\n      <td><code>Object</code> の中の項目数は、手動で数える必要があります。</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">反復処理</th>\n      <td>\n        <code>Map</code> は\n        <a href=\"/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">iterable (en-US)</a>\n        ですので、直接反復処理を行うことができます。\n      </td>\n      <td>\n        <code>Object</code>\n        では反復処理を行うのに、いくつかの形でキーの一覧を取得して、そのうえで反復処理を行う必要があります。\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">性能</th>\n      <td>\n        <p>キーと値の組を頻繁に追加したり削除したりすることが求められるシナリオでは、性能がより良くなります。</p>\n      </td>\n      <td>\n        <p>キーと値の組を頻繁に追加したり削除したりすることに最適化されていません。</p>\n      </td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"オブジェクトプロパティの設定","title":"オブジェクトプロパティの設定","isH3":true,"content":"<p>Map オブジェクトに対してオブジェクトプロパティを設定すると正しく動作しますが、混乱を催すことが考えられます。</p>\n<p>たとえば、次の例は一応動作するように見えます。</p>\n<div class=\"code-example\"><pre class=\"syntaxbox example-bad brush js notranslate\"><code><span class=\"token keyword\">let</span> wrongMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nwrongMap<span class=\"token punctuation\">[</span><span class=\"token string\">'bla'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'blaa'</span>\nwrongMap<span class=\"token punctuation\">[</span><span class=\"token string\">'bla2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'blaaa2'</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>wrongMap<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Map { bla: 'blaa', bla2: 'blaaa2' }</span>\n</code></pre></div>\n<p>しかし、このようにプロパティを設定すると、 Map データ構造に符合しません。一般的なオブジェクトの機能を使用します。 'bla' の値はクエリを行うための Map に格納されません。データにその他の操作を行うと失敗します。</p>\n<div class=\"code-example\"><pre class=\"syntaxbox example-bad brush js notranslate\"><code>wrongMap<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bla'</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// false</span>\nwrongMap<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bla'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>wrongMap<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Map { bla: 'blaa', bla2: 'blaaa2' }</span></code></pre></div>\n<p>Map にデータを格納する正しい方法は、 <code>set(key, value)</code> メソッドを使用する方法です。</p>\n<div class=\"code-example\"><pre class=\"syntaxbox brush js example-good notranslate\"><code><span class=\"token keyword\">let</span> contacts <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncontacts<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jessie'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">phone</span><span class=\"token operator\">:</span> <span class=\"token string\">\"213-555-1234\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">address</span><span class=\"token operator\">:</span> <span class=\"token string\">\"123 N 1st Ave\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\ncontacts<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jessie'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\ncontacts<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hilary'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\ncontacts<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hilary'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">phone</span><span class=\"token operator\">:</span> <span class=\"token string\">\"617-555-4321\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">address</span><span class=\"token operator\">:</span> <span class=\"token string\">\"321 S 2nd St\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\ncontacts<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jessie'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {phone: \"213-555-1234\", address: \"123 N 1st Ave\"}</span>\ncontacts<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Raymond'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\ncontacts<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jessie'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>contacts<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n\n</code></pre></div>"}},{"type":"prose","value":{"id":"コンストラクター","title":"コンストラクター","isH3":false,"content":"<dl>\n  <dt id=\"map\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map/Map\"><code>Map()</code></a></dt>\n  <dd>\n    <p>新しい <code>Map</code> オブジェクトを生成します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"静的プロパティ","title":"静的プロパティ","isH3":false,"content":"<dl>\n  <dt id=\"get_mapspecies\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map/@@species\"><code>get Map[@@species]</code></a></dt>\n  <dd>\n    <p>派生クラスを生成するためのコンストラクター関数です。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"インスタンスプロパティ","title":"インスタンスプロパティ","isH3":false,"content":"<dl>\n  <dt id=\"map.prototype.size\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map/size\"><code>Map.prototype.size</code></a></dt>\n  <dd>\n    <p><code>Map</code> オブジェクトの中のキーと値の組の数を返します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"インスタンスメソッド","title":"インスタンスメソッド","isH3":false,"content":"<dl>\n  <dt id=\"map.prototype.clear\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map/clear\"><code>Map.prototype.clear()</code></a></dt>\n  <dd>\n    <p><code>Map</code>オブジェクトからすべてのキーと値の組を削除します。</p>\n  </dd>\n  <dt id=\"map.prototype.deletekey\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map/delete\"><code>Map.prototype.delete(<var>key</var>)</code></a></dt>\n  <dd>\n    <p><code>Map</code> オブジェクトに要素が存在し、削除された場合は <code>true</code> を返します、要素が存在しなければ <code>false</code> を返します。その後では <code>Map.prototype.has(key)</code> が <code>false</code> を返すようになります。</p>\n  </dd>\n  <dt id=\"map.prototype.getkey\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map/get\"><code>Map.prototype.get(<var>key</var>)</code></a></dt>\n  <dd>\n    <p><code>key</code> で指定されたキーに結び付けられた値を返します。存在しない場合は <code>undefined</code> を返します。</p>\n  </dd>\n  <dt id=\"map.prototype.haskey\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map/has\"><code>Map.prototype.has(<var>key</var>)</code></a></dt>\n  <dd>\n    <p><code>key</code> で指定されたキーに結び付けられた要素が <code>Map</code> オブジェクト内に存在するかどうかを示す boolean を返します。</p>\n  </dd>\n  <dt id=\"map.prototype.setkey_value\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map/set\"><code>Map.prototype.set(<var>key</var>, <var>value</var>)</code></a></dt>\n  <dd>\n    <p><code>Map</code> オブジェクト内の <code>key</code> で指定されたキーの値を <code>value</code> に設定します。その <code>Map</code> オブジェクトを返します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"反復処理メソッド","title":"反復処理メソッド","isH3":true,"content":"<dl>\n  <dt id=\"map.prototypeiterator\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map/@@iterator\"><code>Map.prototype[@@iterator]()</code></a></dt>\n  <dd>\n    <p>新しい<strong>イテレーター</strong>オブジェクトを返し、これには <code>Map</code>オブジェクト内の各要素の **<code>[key, value] の配列</code>**が挿入順で含まれます。</p>\n  </dd>\n  <dt id=\"map.prototype.keys\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map/keys\"><code>Map.prototype.keys()</code></a></dt>\n  <dd>\n    <p>新しい<strong>イテレーター</strong>オブジェクトを返し、これには <code>Map</code>オブジェクト内の各要素の<strong>キー</strong>が挿入順で含まれます。</p>\n  </dd>\n  <dt id=\"map.prototype.values\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map/values\"><code>Map.prototype.values()</code></a></dt>\n  <dd>\n    <p>新しい<strong>イテレーター</strong>オブジェクトを返し、これには <code>Map</code>オブジェクト内の各要素の<strong>値</strong>が挿入順で含まれます。</p>\n  </dd>\n  <dt id=\"map.prototype.entries\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map/entries\"><code>Map.prototype.entries()</code></a></dt>\n  <dd>\n    <p><code>Map</code>オブジェクト内の要素に対して挿入順にすべての要素の <code>[key, value]</code> の配列を含む、新しい<strong>イテレーター</strong>オブジェクトを返します。</p>\n  </dd>\n  <dt id=\"map.prototype.foreachcallbackfn_thisarg\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach\"><code>Map.prototype.forEach(<var>callbackFn</var>[, <var>thisArg</var>])</code></a></dt>\n  <dd>\n    <p><code>callbackFn</code> を、 <code>Map</code> オブジェクトに存在するそれぞれのキーと値の組に対して 1 回ずつ、挿入順に呼び出します。 <code>thisArg</code> 引数が <code>forEach</code> に与えられた場合は、それぞれのコールバックでこれを <code>this</code> の値として使用します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":""}},{"type":"prose","value":{"id":"map_オブジェクトの使用","title":"Map オブジェクトの使用","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> myMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> keyString <span class=\"token operator\">=</span> <span class=\"token string\">'文字列'</span>\n<span class=\"token keyword\">let</span> keyObj    <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">keyFunc</span>   <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 値を設定する</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>keyString<span class=\"token punctuation\">,</span> <span class=\"token string\">\"'文字列' と結び付けられた値\"</span><span class=\"token punctuation\">)</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>keyObj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"keyObj と結び付けられた値\"</span><span class=\"token punctuation\">)</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>keyFunc<span class=\"token punctuation\">,</span> <span class=\"token string\">\"keyFunc と結び付けられた値\"</span><span class=\"token punctuation\">)</span>\n\nmyMap<span class=\"token punctuation\">.</span>size              <span class=\"token comment\">// 3</span>\n\n<span class=\"token comment\">// 値を取得する</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>keyString<span class=\"token punctuation\">)</span>    <span class=\"token comment\">// \"'文字列' と結び付けられた値\"</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>keyObj<span class=\"token punctuation\">)</span>       <span class=\"token comment\">// \"keyObj と結び付けられた値\"</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>keyFunc<span class=\"token punctuation\">)</span>      <span class=\"token comment\">// \"keyFunc と結び付けられた値\"</span>\n\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'文字列'</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// \"'文字列' と結び付けられた値\"</span>\n                        <span class=\"token comment\">// keyString === '文字列' であるため</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>           <span class=\"token comment\">// undefined, keyObj !== {} であるため</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined, keyFunc !== function () {} であるため</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"nan_を_map_のキーとして使用","title":"NaN を Map のキーとして使用","isH3":true,"content":"<p><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> もまたキーとして使うことができます。すべての <code>NaN</code> は自身と等しくない (<code>NaN !== NaN</code> は真) にもかかわらず、以下の例は動作します。これは <code>NaN</code> が互いに区別できないためです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> myMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'not a number'</span><span class=\"token punctuation\">)</span>\n\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// \"not a number\"</span>\n\n<span class=\"token keyword\">let</span> otherNaN <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>otherNaN<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// \"not a number\"</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"for..of_を使用した_map_の反復処理","title":"for..of を使用した Map の反復処理","isH3":true,"content":"<p>Map は <code>for..of</code> ループを使用して反復処理を行うことができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> myMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'zero'</span><span class=\"token punctuation\">)</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'one'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> myMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">+</span> <span class=\"token string\">' = '</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 0 = zero</span>\n<span class=\"token comment\">// 1 = one</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">of</span> myMap<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 0</span>\n<span class=\"token comment\">// 1</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> value <span class=\"token keyword\">of</span> myMap<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// zero</span>\n<span class=\"token comment\">// one</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> myMap<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">+</span> <span class=\"token string\">' = '</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 0 = zero</span>\n<span class=\"token comment\">// 1 = one</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"foreach_で_map_を反復処理","title":"forEach() で Map を反復処理","isH3":true,"content":"<p>Map は <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach\"><code>forEach()</code></a> メソッドを使用して反復できます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>myMap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">+</span> <span class=\"token string\">' = '</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 0 = zero</span>\n<span class=\"token comment\">// 1 = one</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"array_オブジェクトとの関係","title":"Array オブジェクトとの関係","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> kvArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"キー1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"値1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"キー2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"値2\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 通常の Map コンストラクターを使って、キー・値の 2 次元配列をマップに変換する</span>\n<span class=\"token keyword\">let</span> myMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span>kvArray<span class=\"token punctuation\">)</span>\n\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"キー1\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"値1\" を返す</span>\n\n<span class=\"token comment\">// 展開演算子を使って、マップをキー・値の 2 次元配列に変換する</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>myMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// kvArray とまったく同じ Array を表示する</span>\n\n<span class=\"token comment\">// あるいは展開演算子をキーまたは値のイテレーターに使って、キーまたは値のみの配列を得る</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>myMap<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// または keys() や values() のイテレーターを使用して配列に変換する</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>myMap<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"key1\", \"key2\"] が出力される</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"map_の複製と混合","title":"Map の複製と混合","isH3":true,"content":"<p><code>Array</code> と同様に、 <code>Map</code> は複製することができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> original <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'one'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> clone <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>clone<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">// one</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>original <span class=\"token operator\">===</span> clone<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false (useful for shallow comparison)</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> <strong>重要:</strong> <em>データ自身</em>は複製されないことに注意しておいてください。</p>\n</div>\n<p>Map はキーの固有性を保持しながら混合可能です。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> first <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'one'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'three'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> second <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'uno'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dos'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 2つのマップを混合します。重複するキーは後勝ちになります。</span>\n<span class=\"token comment\">// スプレッド演算子は基本的に Map を Array に変換します。</span>\n<span class=\"token keyword\">let</span> merged <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>first<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>second<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>merged<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// uno</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>merged<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// dos</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>merged<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// three</span>\n</code></pre></div>\n<p>Map は Array と混合することもできます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> first <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'one'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'three'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> second <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'uno'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dos'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// マップと配列を混合します。重複するキーは後勝ちになります。</span>\n<span class=\"token keyword\">let</span> merged <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>first<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>second<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'eins'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>merged<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// eins</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>merged<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// dos</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>merged<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// three</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"仕様書","title":"仕様書","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>仕様書</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://tc39.es/ecma262/#sec-map-objects\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">ECMAScript (ECMA-262)<br><small lang=\"ja\">Map の定義</small></a></td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"query":"javascript.builtins.Map","dataURL":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map/bcd.json"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a></li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\"><code>WeakMap</code></a></li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\"><code>WeakSet</code></a></li>\n</ul>"}}],"toc":[{"text":"解説","id":"解説"},{"text":"コンストラクター","id":"コンストラクター"},{"text":"静的プロパティ","id":"静的プロパティ"},{"text":"インスタンスプロパティ","id":"インスタンスプロパティ"},{"text":"インスタンスメソッド","id":"インスタンスメソッド"},{"text":"例","id":"例"},{"text":"仕様書","id":"仕様書"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"Map オブジェクトはキーと値のペアを保持し、キーが最初に挿入された順序を覚えています。キーや値には任意の値 (オブジェクトとプリミティブ値)を使用することができます。","popularity":0.0024,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Map","locale":"en-US","native":"English (US)"},{"title":"Map","locale":"fr","native":"Français"},{"title":"Map","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Map","locale":"zh-CN","native":"中文 (简体)"},{"title":"Map","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ja/web/javascript/reference/global_objects/map","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/javascript/reference/global_objects/map/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/ja/docs/Web/JavaScript/Reference","title":"JavaScript リファレンス"},{"uri":"/ja/docs/Web/JavaScript/Reference/Global_Objects","title":"標準組み込みオブジェクト"},{"uri":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map","title":"Map"}],"pageTitle":"Map - JavaScript | MDN","noIndexing":false}}