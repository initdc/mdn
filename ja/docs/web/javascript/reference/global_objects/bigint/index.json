{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"BigInt","mdn_url":"/ja/docs/Web/JavaScript/Reference/Global_Objects/BigInt","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects\">標準組み込みオブジェクト</a></strong></li><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>メソッド</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asIntN\"><code>BigInt.asIntN()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asUintN\"><code>BigInt.asUintN()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toLocaleString\"><code>BigInt.prototype.toLocaleString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toString\"><code>BigInt.prototype.toString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/BigInt/valueOf\"><code>BigInt.prototype.valueOf()</code></a></li></ol></li><li><strong>継承</strong></li><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li><a href=\"#\"><strong>プロパティ</strong></a><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function.prototype.displayName</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function.prototype.length</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function.prototype.name</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function.prototype.prototype</code></a></li></ol></li><li><a href=\"#\"><strong>メソッド</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></li><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>プロパティ</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>メソッド</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>BigInt</code></strong> は<a href=\"/ja/docs/Glossary/Primitive#primitive_wrapper_objects_in_javascript\">プリミティブラッパーオブジェクト</a>で、<a href=\"/ja/docs/Glossary/Primitive\">プリミティブ</a>の <code>bigint</code> 値、すなわち<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\">大きすぎて</a> <code>number</code> <a href=\"/ja/docs/Glossary/Primitive\">プリミティブ</a>で表すことができない数を、表現したり操作したりするために使用します。</p>"}},{"type":"prose","value":{"id":"解説","title":"解説","isH3":false,"content":"<p><strong>BigInt 値</strong>は、単に <strong>BigInt</strong> と呼ばれることもありますが、 <code>bigint</code> <a href=\"/ja/docs/Glossary/Primitive\">プリミティブ</a>です。整数リテラルの末尾に <code>n</code> を追加するか、 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt\"><code>BigInt()</code></a> コンストラクターを呼び出し、整数値または文字列値を与えることで生成することができます (ただし <code>new</code> 演算子なしで)。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> previouslyMaxSafeInteger <span class=\"token operator\">=</span> <span class=\"token number\">9007199254740991n</span>\n\n<span class=\"token keyword\">const</span> alsoHuge <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">9007199254740991</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ↪ 9007199254740991n</span>\n\n<span class=\"token keyword\">const</span> hugeString <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"9007199254740991\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ↪ 9007199254740991n</span>\n\n<span class=\"token keyword\">const</span> hugeHex <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x1fffffffffffff\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ↪ 9007199254740991n</span>\n\n<span class=\"token keyword\">const</span> hugeOctal <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0o377777777777777777\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ↪ 9007199254740991n</span>\n\n<span class=\"token keyword\">const</span> hugeBin <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0b11111111111111111111111111111111111111111111111111111\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ↪ 9007199254740991n</span>\n</code></pre></div>\n<p>BigInt はいくつかの点で Number と似ていますが、重要ないくつかの点が異なります。組み込みの <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math\"><code>Math</code></a> オブジェクト内のメソッドでは利用できず、演算で Number の値と混ぜることができません。同じ型に統一する必要があります。ただし、BigInt を Number へ変換する際には精度が落ちることがあるので、相互に変化する場合には注意が必要です。</p>"}},{"type":"prose","value":{"id":"型情報","title":"型情報","isH3":true,"content":"<p><code>typeof</code> の <code>BigInt</code> 値 (<code>bigint</code> プリミティブ) に対する評価値は、\"<code>bigint</code>\" となります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> <span class=\"token number\">1n</span> <span class=\"token operator\">===</span> <span class=\"token string\">'bigint'</span>           <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'bigint'</span>  <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>BigInt の値は <code>Object</code> でラップすることができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token number\">1n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span>  <span class=\"token comment\">// true</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"演算子","title":"演算子","isH3":true,"content":"<p>以下の演算子は BigInt 値またはオブジェクトでラップした BigInt 値で使用することができます。</p>\n<pre class=\"notranslate\">+ * - % **\n</pre>\n<p><a href=\"/ja/docs/Web/JavaScript/Reference/Operators\">ビット操作演算子</a>は、同様に利用できますが、 <code>&gt;&gt;&gt;</code> (論理的右シフト) は BigInt が常に符号付きなので除外されます。</p>\n<p>同様に、単項演算子 (<code>+</code>) は <a href=\"https://github.com/tc39/proposal-bigint/blob/master/ADVANCED.md#dont-break-asmjs\" class=\"external\" rel=\" noopener\">asm.js を壊さないように</a>対応していません。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> previousMaxSafe <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_SAFE_INTEGER</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ↪ 9007199254740991n</span>\n\n<span class=\"token keyword\">const</span> maxPlusOne <span class=\"token operator\">=</span> previousMaxSafe <span class=\"token operator\">+</span> <span class=\"token number\">1n</span>\n<span class=\"token comment\">// ↪ 9007199254740992n</span>\n\n<span class=\"token keyword\">const</span> theFuture <span class=\"token operator\">=</span> previousMaxSafe <span class=\"token operator\">+</span> <span class=\"token number\">2n</span>\n<span class=\"token comment\">// ↪ 9007199254740993n, this works now!</span>\n\n<span class=\"token keyword\">const</span> multi <span class=\"token operator\">=</span> previousMaxSafe <span class=\"token operator\">*</span> <span class=\"token number\">2n</span>\n<span class=\"token comment\">// ↪ 18014398509481982n</span>\n\n<span class=\"token keyword\">const</span> subtr <span class=\"token operator\">=</span> multi <span class=\"token operator\">-</span> <span class=\"token number\">10n</span>\n<span class=\"token comment\">// ↪ 18014398509481972n</span>\n\n<span class=\"token keyword\">const</span> mod <span class=\"token operator\">=</span> multi <span class=\"token operator\">%</span> <span class=\"token number\">10n</span>\n<span class=\"token comment\">// ↪ 2n</span>\n\n<span class=\"token keyword\">const</span> bigN <span class=\"token operator\">=</span> <span class=\"token number\">2n</span> <span class=\"token operator\">**</span> <span class=\"token number\">54n</span>\n<span class=\"token comment\">// ↪ 18014398509481984n</span>\n\nbigN <span class=\"token operator\">*</span> <span class=\"token operator\">-</span><span class=\"token number\">1n</span>\n<span class=\"token comment\">// ↪ -18014398509481984n</span>\n</code></pre></div>\n<p><code>/</code> 演算子もすべての数値に対して、期待される通りに動作します。ただし、実数との演算では BigInt 値と演算する際に小数が切り捨てられます。実数を返すことはありません。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> expected <span class=\"token operator\">=</span> <span class=\"token number\">4n</span> <span class=\"token operator\">/</span> <span class=\"token number\">2n</span>\n<span class=\"token comment\">// ↪ 2n</span>\n\n<span class=\"token keyword\">const</span> truncated <span class=\"token operator\">=</span> <span class=\"token number\">5n</span> <span class=\"token operator\">/</span> <span class=\"token number\">2n</span>\n<span class=\"token comment\">// ↪ 2n, not 2.5n</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"比較演算","title":"比較演算","isH3":true,"content":"<p>BigInt 値は Number 値と厳密等価ではありませんが、等価にはなります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token number\">0n</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span>\n<span class=\"token comment\">// ↪ false</span>\n\n<span class=\"token number\">0n</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n<span class=\"token comment\">// ↪ true</span>\n</code></pre></div>\n<p>Number と BigInt は通常通り比較できます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token number\">1n</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span>\n<span class=\"token comment\">// ↪ true</span>\n\n<span class=\"token number\">2n</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span>\n<span class=\"token comment\">// ↪ true</span>\n\n<span class=\"token number\">2</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span>\n<span class=\"token comment\">// ↪ false</span>\n\n<span class=\"token number\">2n</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span>\n<span class=\"token comment\">// ↪ false</span>\n\n<span class=\"token number\">2n</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">2</span>\n<span class=\"token comment\">// ↪ true</span>\n</code></pre></div>\n<p>BigInt 値と Number 値は配列の要素に混在させたり並べ替えたりすることも可能です。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> mixed <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4n</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">12n</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0n</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// ↪  [4n, 6, -12n, 10, 4, 0, 0n]</span>\n\nmixed<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 既定の並べ替えの動作</span>\n<span class=\"token comment\">// ↪  [ -12n, 0, 0n, 10, 4n, 4, 6 ]</span>\n\nmixed<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 型が混在した減算はできないので動作しない</span>\n<span class=\"token comment\">// TypeError: can't convert BigInt value to Number value</span>\n\n<span class=\"token comment\">// 適切な数値比較関数を使用した並べ替え</span>\nmixed<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">&gt;</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ↪  [ -12n, 0, 0n, 4n, 4, 6, 10 ]</span>\n</code></pre></div>\n<p>なお、 <code>Object</code> にラップされた BigInt は他のオブジェクトと同様の振る舞いをします。同じインスタンス同士が比較された場合にのみ等価となります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token number\">0n</span> <span class=\"token operator\">===</span> <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token number\">0n</span><span class=\"token punctuation\">)</span>          <span class=\"token comment\">// false</span>\n<span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token number\">0n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token number\">0n</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// false</span>\n\n<span class=\"token keyword\">const</span> o <span class=\"token operator\">=</span> <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token number\">0n</span><span class=\"token punctuation\">)</span>\no <span class=\"token operator\">===</span> o                    <span class=\"token comment\">// true</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"条件式","title":"条件式","isH3":true,"content":"<p>BigInt 値は次のような場合は Number 値のように動作します。</p>\n<ul>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> へ変換される場合 ( <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> 関数を使用して)</li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators\">論理演算子</a>の <code>||</code>、<code>&amp;&amp;</code>、<code>!</code>、または <a href=\"/ja/docs/Web/JavaScript/Reference/Statements/if...else\"><code>if</code></a> 文のような条件式の中で使用された場合</li>\n</ul>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello from the if!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello from the else!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ↪ \"Hello from the else!\"</span>\n\n<span class=\"token number\">0n</span> <span class=\"token operator\">||</span> <span class=\"token number\">12n</span>\n<span class=\"token comment\">// ↪ 12n</span>\n\n<span class=\"token number\">0n</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">12n</span>\n<span class=\"token comment\">// ↪ 0n</span>\n\n<span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">0n</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ↪ false</span>\n\n<span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">12n</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ↪ true</span>\n\n<span class=\"token operator\">!</span><span class=\"token number\">12n</span>\n<span class=\"token comment\">// ↪ false</span>\n\n<span class=\"token operator\">!</span><span class=\"token number\">0n</span>\n<span class=\"token comment\">// ↪ true</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"コンストラクター","title":"コンストラクター","isH3":false,"content":"<dl>\n  <dt id=\"bigint\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt\"><code>BigInt()</code></a></dt>\n  <dd>\n    <p>新しい BigInt 値を生成します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"methods","title":"静的メソッド","isH3":false,"content":"<dl>\n  <dt id=\"bigint.asintn\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asIntN\"><code>BigInt.asIntN()</code></a></dt>\n  <dd>\n    <p>BigInt 値を符号付き整数値に丸め、その値を返します。</p>\n  </dd>\n  <dt id=\"bigint.asuintn\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asUintN\"><code>BigInt.asUintN()</code></a></dt>\n  <dd>\n    <p>BigInt 値を符号なし整数値に丸め、その値を返します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"インスタンスメソッド","title":"インスタンスメソッド","isH3":false,"content":"<dl>\n  <dt id=\"bigint.prototype.tolocalestring\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toLocaleString\"><code>BigInt.prototype.toLocaleString()</code></a></dt>\n  <dd>\n    <p>この BigInt 値の言語に合わせた表現の文字列を返します。 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a> メソッドを上書きします。</p>\n  </dd>\n  <dt id=\"bigint.prototype.tostring\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toString\"><code>BigInt.prototype.toString()</code></a></dt>\n  <dd>\n    <p>この BigInt 値を指定された基数で表現した文字列を返します。 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a> メソッドを上書きします。</p>\n  </dd>\n  <dt id=\"bigint.prototype.valueof\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/BigInt/valueOf\"><code>BigInt.prototype.valueOf()</code></a></dt>\n  <dd>\n    <p>この BigInt 値を返します。 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a> メソッドを上書きします。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"使用方法の推奨事項","title":"使用方法の推奨事項","isH3":false,"content":""}},{"type":"prose","value":{"id":"型変換","title":"型変換","isH3":false,"content":"<p>Number 値と BigInt 値との間の型変換は精度が落ちる可能性があるため、次のことを推奨します。</p>\n<ul>\n  <li>BigInt 値は、値が 2^53 を超えることが合理的に予想される場合にのみ使用する。</li>\n  <li>BigInt 値と Number 値の間で型変換を行わない。</li>\n</ul>"}},{"type":"prose","value":{"id":"暗号処理","title":"暗号処理","isH3":true,"content":"<p>BigInt で対応している演算は、実行時間が一定ではないので、<a href=\"https://en.wikipedia.org/wiki/Timing_attack\" class=\"external\" rel=\" noopener\">タイミング攻撃</a>を受ける可能性があります。したがって、 JavaScript の BigInt は暗号処理での使用には向きません。</p>"}},{"type":"prose","value":{"id":"json_での使用","title":"JSON での使用","isH3":true,"content":"<p><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a> を BigInt 値に対して使用すると <code>TypeError</code> が発生します。 BigInt 値は既定で JSON のシリアライズに対応していないためです。ただし、 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#the_replacer_parameter\">replacer</a> 引数を <code>JSON.stringify</code> で使用すると、 BigInt のプロパティをエラーなしでシリアライズすることができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">replacer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">===</span> <span class=\"token string\">'big'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">number</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">big</span><span class=\"token operator\">:</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'18014398509481982'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> stringified <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> replacer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stringified<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ '{\"number\":1,\"big\":\"18014398509481982\"}'</span>\n</code></pre></div>\n<p>長整数になる値が含まれると思われる JSON データがある場合は、 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#using_the_reviver_parameter\">reviver</a> 引数を <code>JSON.parse</code> で使用することで取り扱うことができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">reviver</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">===</span> <span class=\"token string\">'big'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> payload <span class=\"token operator\">=</span> <span class=\"token string\">'{\"number\":1,\"big\":\"18014398509481982\"}'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> parsed <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">,</span> reviver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>parsed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ {number: 1, big: 18014398509481982n}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":""}},{"type":"prose","value":{"id":"素数の計算","title":"素数の計算","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 渡された BigInt が素数であった場合は true を返します</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2n</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">*</span> i <span class=\"token operator\">&lt;=</span> p<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">%</span> i <span class=\"token operator\">===</span> <span class=\"token number\">0n</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 引数として BigInt 値を取り、 nth 番目の素数を BigInt 値として返します。</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">nthPrime</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nth</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> maybePrime <span class=\"token operator\">=</span> <span class=\"token number\">2n</span>\n  <span class=\"token keyword\">let</span> prime <span class=\"token operator\">=</span> <span class=\"token number\">0n</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nth <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span>maybePrime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      nth<span class=\"token operator\">--</span>\n      prime <span class=\"token operator\">=</span> maybePrime\n    <span class=\"token punctuation\">}</span>\n    maybePrime<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> prime\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">nthPrime</span><span class=\"token punctuation\">(</span><span class=\"token number\">20n</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ↪ 73n</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"仕様書","id":"仕様書","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-bigint-objects","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.BigInt"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"query":"javascript.builtins.BigInt","dataURL":"/ja/docs/Web/JavaScript/Reference/Global_Objects/BigInt/bcd.json"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a></li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\"><code>Number.MAX_SAFE_INTEGER</code></a></li>\n</ul>"}}],"toc":[{"text":"解説","id":"解説"},{"text":"コンストラクター","id":"コンストラクター"},{"text":"静的メソッド","id":"methods"},{"text":"インスタンスメソッド","id":"インスタンスメソッド"},{"text":"使用方法の推奨事項","id":"使用方法の推奨事項"},{"text":"型変換","id":"型変換"},{"text":"例","id":"例"},{"text":"仕様書","id":"仕様書"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"BigInt はプリミティブラッパーオブジェクトで、プリミティブの bigint 値、すなわち大きすぎて number プリミティブで表すことができない数を、表現したり操作したりするために使用します。","popularity":0.0008,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"BigInt","locale":"en-US","native":"English (US)"},{"title":"BigInt","locale":"fr","native":"Français"},{"title":"BigInt","locale":"ko","native":"한국어"},{"title":"BigInt","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"BigInt","locale":"ru","native":"Русский"},{"title":"BigInt","locale":"zh-CN","native":"中文 (简体)"},{"title":"BigInt","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ja/web/javascript/reference/global_objects/bigint","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/javascript/reference/global_objects/bigint/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/ja/docs/Web/JavaScript/Reference","title":"JavaScript リファレンス"},{"uri":"/ja/docs/Web/JavaScript/Reference/Global_Objects","title":"標準組み込みオブジェクト"},{"uri":"/ja/docs/Web/JavaScript/Reference/Global_Objects/BigInt","title":"BigInt"}],"pageTitle":"BigInt - JavaScript | MDN","noIndexing":false}}