{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Set","mdn_url":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Set","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects\">標準組み込みオブジェクト</a></strong></li><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>プロパティ</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Set/@@species\"><code>get Set[@@species]</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Set/size\"><code>Set.prototype.size</code></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>メソッド</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Set/@@iterator\"><code>Set.prototype[@@iterator]()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Set/add\"><code>Set.prototype.add()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Set/clear\"><code>Set.prototype.clear()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Set/delete\"><code>Set.prototype.delete()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Set/entries\"><code>Set.prototype.entries()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach\"><code>Set.prototype.forEach()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Set/has\"><code>Set.prototype.has()</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/keys\"><code>Set.prototype.keys()</code> <small>(en-US)</small></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Set/values\"><code>Set.prototype.values()</code></a></li></ol></li><li><strong>継承</strong></li><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li><a href=\"#\"><strong>プロパティ</strong></a><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function.prototype.displayName</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function.prototype.length</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function.prototype.name</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function.prototype.prototype</code></a></li></ol></li><li><a href=\"#\"><strong>メソッド</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></li><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>プロパティ</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>メソッド</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>Set</code></strong> オブジェクトは、<a href=\"/ja/docs/Glossary/Primitive\">プリミティブ値</a>やオブジェクト参照を問わず、あらゆる型で多数の一意の値を格納することができます。</p>"}},{"type":"prose","value":{"id":"解説","title":"解説","isH3":false,"content":"<p><code>Set</code> オブジェクトは値のコレクションです。挿入順に要素を反復することができます。 <code>Set</code> に<strong>重複する値は格納出来ません</strong>。 <code>Set</code> 内の値はコレクション内で一意になります。</p>"}},{"type":"prose","value":{"id":"値の等価性","title":"値の等価性","isH3":true,"content":"<p><code>Set</code> オブジェクト内の各値は一意でなければならないので、値の等価性が調べられます。初期の ECMAScript では <code>===</code> 演算子とは違うアルゴリズムが用いられていました。特に <code>+0</code> (厳密に言えば <code>-0</code> と等価です) と <code>-0</code> が区別されていた点は重要です。しかしこの振る舞いは ECMAScript 2015 で変更されました。<a href=\"#%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%83%BC%E3%81%AE%E4%BA%92%E6%8F%9B%E6%80%A7\">ブラウザーの互換性</a>の \"Key equality for -0 and 0\" を参照してください。</p>\n<p>また、 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> と <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> も Set 内に格納できます。<code>NaN</code> は (<code>NaN !== NaN</code> として扱われますが) <code>NaN</code> と同じと扱われます。</p>"}},{"type":"prose","value":{"id":"性能","title":"性能","isH3":true,"content":"<p><code>Set</code> の <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Set/has\"><code>has</code></a> メソッドは、値が <code>Set</code> オブジェクト内にあるかどうかをチェックします。これは、以前に <code>Set</code> オブジェクトに追加された要素のほとんどを確認するよりも平均すると高速なアプローチを使用します。特に、 <code>Array</code> オブジェクトの <code>length</code> が <code>Set</code> オブジェクトの <code>size</code> と等しい場合、平均して <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\"><code>Array.prototype.includes</code></a> メソッドより速くなります。</p>"}},{"type":"prose","value":{"id":"コンストラクター","title":"コンストラクター","isH3":false,"content":"<dl>\n  <dt id=\"set\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Set/Set\"><code>Set()</code></a></dt>\n  <dd>\n    <p>新しい <code>Set</code> オブジェクトを生成します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"静的プロパティ","title":"静的プロパティ","isH3":false,"content":"<dl>\n  <dt id=\"get_setspecies\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Set/@@species\"><code>get Set[@@species]</code></a></dt>\n  <dd>\n    <p>派生オブジェクトを生成するために使用されるコンストラクター関数です。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"インスタンスプロパティ","title":"インスタンスプロパティ","isH3":false,"content":"<dl>\n  <dt id=\"set.prototype.size\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Set/size\"><code>Set.prototype.size</code></a></dt>\n  <dd>\n    <p><code>Set</code> オブジェクト内の値の数を返します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"インスタンスメソッド","title":"インスタンスメソッド","isH3":false,"content":"<dl>\n  <dt id=\"set.prototype.addvalue\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Set/add\"><code>Set.prototype.add(<var>value</var>)</code></a></dt>\n  <dd>\n    <p><code>value</code> を <code>Set</code> オブジェクトに追加します。<code>Set</code> オブジェクトを返します。</p>\n  </dd>\n  <dt id=\"set.prototype.clear\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Set/clear\"><code>Set.prototype.clear()</code></a></dt>\n  <dd>\n    <p>すべての要素を <code>Set</code> オブジェクトから取り除きます。</p>\n  </dd>\n  <dt id=\"set.prototype.deletevalue\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Set/delete\"><code>Set.prototype.delete(<var>value</var>)</code></a></dt>\n  <dd>\n    <p><code>value</code> に関連した要素を取り除き、要素の削除に成功したかどうかを示す論理値を返します。 <code>Set.prototype.has(value)</code> はその後は <code>false</code> を返します。</p>\n  </dd>\n  <dt id=\"set.prototype.hasvalue\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Set/has\"><code>Set.prototype.has(<var>value</var>)</code></a></dt>\n  <dd>\n    <p><code>Set</code> オブジェクト内に引数で与えられた値をもつ要素が存在するかどうかを示す論理値を返します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"反復処理メソッド","title":"反復処理メソッド","isH3":true,"content":"<dl>\n  <dt id=\"set.prototypeiterator\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Set/@@iterator\"><code>Set.prototype[@@iterator]()</code></a></dt>\n  <dd>\n    <p><code>Set</code> オブジェクト内の各要素の<strong>値</strong>を挿入順に返す、新しい反復子オブジェクトを返します。</p>\n  </dd>\n  <dt id=\"set.prototype.values\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Set/values\"><code>Set.prototype.values()</code></a></dt>\n  <dd>\n    <p><code>Set</code> オブジェクト内の各要素の<strong>値</strong>を挿入順に返す、新しい反復子オブジェクトを返します。</p>\n  </dd>\n  <dt id=\"set.prototype.keys\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Set/values\"><code> Set.prototype.keys()</code></a></dt>\n  <dd>\n    <p><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Set/values\"><code>Set.prototype.values()</code></a> の別名です。</p>\n  </dd>\n  <dt id=\"set.prototype.entries\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Set/entries\"><code>Set.prototype.entries()</code></a></dt>\n  <dd>\n    <p><code>Set</code> オブジェクト内の各要素を <strong><code>[value, value]</code> の配列</strong>の形で挿入順で返す、新しい反復子オブジェクトを返します。</p>\n    <p>これは <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> オブジェクトと似ていますが、それぞれの項目の <em>key</em> が <code>set</code> では <em>value</em> と同じになります。</p>\n  </dd>\n  <dt id=\"set.prototype.foreachcallbackfn_thisarg\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach\"><code>Set.prototype.forEach(<var>callbackFn</var>[, <var>thisArg</var>])</code></a></dt>\n  <dd>\n    <p><code>Set</code> オブジェクト内に存在する各値に対して、挿入順に一度ずつ <code>callbackFn</code> を呼びます。<code>thisArg</code> 引数が指定された場合、それぞれの <code>callbackFn</code> の呼び出しにおいて <code>this</code> の値として使用されます。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":""}},{"type":"prose","value":{"id":"set_オブジェクトの使用","title":"Set オブジェクトの使用","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> mySet1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmySet1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>           <span class=\"token comment\">// Set [ 1 ]</span>\nmySet1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>           <span class=\"token comment\">// Set [ 1, 5 ]</span>\nmySet1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>           <span class=\"token comment\">// Set [ 1, 5 ]</span>\nmySet1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'some text'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Set [ 1, 5, 'some text' ]</span>\n<span class=\"token keyword\">const</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\nmySet1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n\nmySet1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// o は別なオブジェクトを参照しているので、これは良い</span>\n\nmySet1<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>              <span class=\"token comment\">// true</span>\nmySet1<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>              <span class=\"token comment\">// false。 3 はセットに追加されないため</span>\nmySet1<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>              <span class=\"token comment\">// true</span>\nmySet1<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// true</span>\nmySet1<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Some Text'</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nmySet1<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>       <span class=\"token comment\">// true</span>\n\nmySet1<span class=\"token punctuation\">.</span>size         <span class=\"token comment\">// 5</span>\n\nmySet1<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// セットから 5 を取り除く</span>\nmySet1<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">// false。 5 は削除された</span>\n\nmySet1<span class=\"token punctuation\">.</span>size         <span class=\"token comment\">// 4。 1 つの値を削除したばかりであるため</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mySet1<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// logs Set(4) [ 1, \"some text\", {…}, {…} ] in Firefox</span>\n<span class=\"token comment\">// logs Set(4) { 1, \"some text\", {…}, {…} } in Chrome</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"set_の反復処理","title":"Set の反復処理","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// セット内のアイテムを反復処理</span>\n<span class=\"token comment\">// アイテムのログ出力順: 1, \"some text\", {\"a\": 1, \"b\": 2}, {\"a\": 1, \"b\": 2}</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> mySet1<span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// アイテムのログ出力順: 1, \"some text\", {\"a\": 1, \"b\": 2}, {\"a\": 1, \"b\": 2}</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> mySet1<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// アイテムのログ出力順: 1, \"some text\", {\"a\": 1, \"b\": 2}, {\"a\": 1, \"b\": 2}</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> mySet1<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// アイテムのログ出力順: 1, \"some text\", {\"a\": 1, \"b\": 2}, {\"a\": 1, \"b\": 2}</span>\n<span class=\"token comment\">// （ここではキーと値は同じ）</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> mySet1<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Set オブジェクトを Array オブジェクトに Array.from で変換</span>\n<span class=\"token keyword\">const</span> myArr <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>mySet1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, \"some text\", {\"a\": 1, \"b\": 2}, {\"a\": 1, \"b\": 2}]</span>\n\n<span class=\"token comment\">// HTML 文書内であれば以下のものも動作する</span>\nmySet1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\nmySet1<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// Set と Array の間の変換</span>\n<span class=\"token keyword\">const</span> mySet2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nmySet2<span class=\"token punctuation\">.</span>size                    <span class=\"token comment\">// 4</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>mySet2<span class=\"token punctuation\">]</span>                    <span class=\"token comment\">// [1, 2, 3, 4]</span>\n\n<span class=\"token comment\">// 交差する様子をシミュレートすることができる</span>\n<span class=\"token keyword\">const</span> intersection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>mySet1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=&gt;</span> mySet2<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 差をシミュレートすることができる</span>\n<span class=\"token keyword\">const</span> difference <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>mySet1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">!</span>mySet2<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// セット内の項目を forEach() で反復処理</span>\nmySet2<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// 2</span>\n<span class=\"token comment\">// 3</span>\n<span class=\"token comment\">// 4</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"基本的な集合演算の実装","title":"基本的な集合演算の実装","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">isSuperset</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">set<span class=\"token punctuation\">,</span> subset</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> elem <span class=\"token keyword\">of</span> subset<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">setA<span class=\"token punctuation\">,</span> setB</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> _union <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>setA<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> elem <span class=\"token keyword\">of</span> setB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        _union<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> _union\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">intersection</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">setA<span class=\"token punctuation\">,</span> setB</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> _intersection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> elem <span class=\"token keyword\">of</span> setB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>setA<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            _intersection<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> _intersection\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">symmetricDifference</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">setA<span class=\"token punctuation\">,</span> setB</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> _difference <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>setA<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> elem <span class=\"token keyword\">of</span> setB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_difference<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            _difference<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            _difference<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> _difference\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">difference</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">setA<span class=\"token punctuation\">,</span> setB</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> _difference <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>setA<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> elem <span class=\"token keyword\">of</span> setB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        _difference<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> _difference\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 例</span>\n<span class=\"token keyword\">const</span> setA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> setB <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> setC <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">isSuperset</span><span class=\"token punctuation\">(</span>setA<span class=\"token punctuation\">,</span> setB<span class=\"token punctuation\">)</span>          <span class=\"token comment\">// returns true</span>\n<span class=\"token function\">union</span><span class=\"token punctuation\">(</span>setA<span class=\"token punctuation\">,</span> setC<span class=\"token punctuation\">)</span>               <span class=\"token comment\">// returns Set {1, 2, 3, 4, 5, 6}</span>\n<span class=\"token function\">intersection</span><span class=\"token punctuation\">(</span>setA<span class=\"token punctuation\">,</span> setC<span class=\"token punctuation\">)</span>        <span class=\"token comment\">// returns Set {3, 4}</span>\n<span class=\"token function\">symmetricDifference</span><span class=\"token punctuation\">(</span>setA<span class=\"token punctuation\">,</span> setC<span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns Set {1, 2, 5, 6}</span>\n<span class=\"token function\">difference</span><span class=\"token punctuation\">(</span>setA<span class=\"token punctuation\">,</span> setC<span class=\"token punctuation\">)</span>          <span class=\"token comment\">// returns Set {1, 2}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"array_オブジェクトとの関係","title":"Array オブジェクトとの関係","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'value1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value3'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// 通常の Set コンストラクターを使用して、 Array を Set に変換</span>\n<span class=\"token keyword\">let</span> mySet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>myArray<span class=\"token punctuation\">)</span>\n\nmySet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value1'</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// returns true</span>\n\n<span class=\"token comment\">// スプレッド演算子を使って、集合を配列に変換</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>mySet<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// myArray と全く同じ Array が表示されます。</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"配列から重複した要素を取り除く","title":"配列から重複した要素を取り除く","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 配列から重複する要素を取り除くために使用</span>\n\n<span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// [2, 3, 4, 5, 6, 7, 32]</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"文字列との関係","title":"文字列との関係","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> text <span class=\"token operator\">=</span> <span class=\"token string\">'India'</span>\n\n<span class=\"token keyword\">const</span> mySet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Set(5) {'I', 'n', 'd', 'i', 'a'}</span>\nmySet<span class=\"token punctuation\">.</span>size  <span class=\"token comment\">// 5</span>\n\n<span class=\"token comment\">// 大文字と小文字の区別して重複を削除</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Firefox\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Set(7) { \"F\", \"i\", \"r\", \"e\", \"f\", \"o\", \"x\" }</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"firefox\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Set(6) { \"f\", \"i\", \"r\", \"e\", \"o\", \"x\" }</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"set_を使用して、リスト中の値の一意姓を保証","title":"Set を使用して、リスト中の値の一意姓を保証","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> Array\n  <span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[id]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">.</span>id\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span>size <span class=\"token operator\">==</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"仕様書","id":"仕様書","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/keyed-collections.html#sec-set-objects","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.Set"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"query":"javascript.builtins.Set","dataURL":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Set/bcd.json"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"https://github.com/zloirock/core-js#set\" class=\"external\" rel=\" noopener\"><code>Set</code> のポリフィル (<code>core-js</code>)</a></li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a></li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\"><code>WeakMap</code></a></li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\"><code>WeakSet</code></a></li>\n</ul>"}}],"toc":[{"text":"解説","id":"解説"},{"text":"コンストラクター","id":"コンストラクター"},{"text":"静的プロパティ","id":"静的プロパティ"},{"text":"インスタンスプロパティ","id":"インスタンスプロパティ"},{"text":"インスタンスメソッド","id":"インスタンスメソッド"},{"text":"例","id":"例"},{"text":"仕様書","id":"仕様書"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"Set オブジェクトは、プリミティブ値やオブジェクト参照を問わず、あらゆる型で多数の一意の値を格納することができます。","popularity":0.0017,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Set","locale":"en-US","native":"English (US)"},{"title":"Set","locale":"es","native":"Español"},{"title":"Set","locale":"fr","native":"Français"},{"title":"Set","locale":"ko","native":"한국어"},{"title":"Set","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Set","locale":"ru","native":"Русский"},{"title":"Set","locale":"zh-CN","native":"中文 (简体)"},{"title":"Set","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ja/web/javascript/reference/global_objects/set","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/javascript/reference/global_objects/set/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/ja/docs/Web/JavaScript/Reference","title":"JavaScript リファレンス"},{"uri":"/ja/docs/Web/JavaScript/Reference/Global_Objects","title":"標準組み込みオブジェクト"},{"uri":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Set","title":"Set"}],"pageTitle":"Set - JavaScript | MDN","noIndexing":false}}