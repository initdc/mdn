{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"String","mdn_url":"/ja/docs/Web/JavaScript/Reference/Global_Objects/String","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects\">標準組み込みオブジェクト</a></strong></li><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>プロパティ</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/length\"><code>String length</code></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>メソッド</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator\"><code>String.prototype[@@iterator]()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/anchor\"><code>String.prototype.anchor()</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/at\"><code>String.prototype.at()</code> <small>(en-US)</small></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/big\"><code>String.prototype.big()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/blink\"><code>String.prototype.blink()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/bold\"><code>String.prototype.bold()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/charAt\"><code>String.prototype.charAt()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt\"><code>String.prototype.charCodeAt()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt\"><code>String.prototype.codePointAt()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/concat\"><code>String.prototype.concat()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\"><code>String.prototype.endsWith()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/fixed\"><code>String.prototype.fixed()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/fontcolor\"><code>String.prototype.fontcolor()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/fontsize\"><code>String.prototype.fontsize()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode\"><code>String.fromCharCode()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint\"><code>String.fromCodePoint()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/includes\"><code>String.prototype.includes()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\"><code>String.prototype.indexOf()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/italics\"><code>String.prototype.italics()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf\"><code>String.prototype.lastIndexOf()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/link\"><code>String.prototype.link()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\"><code>String.prototype.localeCompare()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/match\"><code>String.prototype.match()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll\"><code>String.prototype.matchAll()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\"><code>String.prototype.normalize()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd\"><code>String.prototype.padEnd()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\"><code>String.prototype.padStart()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/raw\"><code>String.raw()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\"><code>String.prototype.repeat()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>String.prototype.replace()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll\"><code>String.prototype.replaceAll()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/search\"><code>String.prototype.search()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/slice\"><code>String.prototype.slice()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/small\"><code>String.prototype.small()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/split\"><code>String.prototype.split()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\"><code>String.prototype.startsWith()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/strike\"><code>String.prototype.strike()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/sub\"><code>String.prototype.sub()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/substr\"><code>String.prototype.substr()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/substring\"><code>String.prototype.substring()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/sup\"><code>String.prototype.sup()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase\"><code>String.prototype.toLocaleLowerCase()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase\"><code>String.prototype.toLocaleUpperCase()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase\"><code>String.prototype.toLowerCase()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/toString\"><code>String.prototype.toString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\"><code>String.prototype.toUpperCase()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/trim\"><code>String.prototype.trim()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/trimEnd\"><code>String.prototype.trimEnd()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/trimStart\"><code>String.prototype.trimStart()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/valueOf\"><code>String.prototype.valueOf()</code></a></li></ol></li><li><strong>継承</strong></li><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li><a href=\"#\"><strong>プロパティ</strong></a><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function.prototype.displayName</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function.prototype.length</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function.prototype.name</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function.prototype.prototype</code></a></li></ol></li><li><a href=\"#\"><strong>メソッド</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></li><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>プロパティ</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>メソッド</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>String</code></strong> オブジェクトは文字の並びを表したり操作したりするために使用されます。</p>"}},{"type":"prose","value":{"id":"解説","title":"解説","isH3":false,"content":"<p>文字列は、テキスト形式で表現可能なデータを保持するのに便利です。最もよく使われる操作として、文字列の長さをチェックする <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/length\"><code>length</code></a> プロパティ、 <a href=\"/ja/docs/Web/JavaScript/Reference/Operators/String_Operators\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">文字列に対する + および += 演算子</a>を用いた文字列の連結、文字列の中の部分文字列の存在や位置をチェックする <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\"><code>indexOf()</code></a> メソッド、部分文字列を取り出す <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/substring\"><code>substring()</code></a> メソッドが挙げられます。</p>"}},{"type":"prose","value":{"id":"文字列の生成","title":"文字列の生成","isH3":true,"content":"<p>文字列は文字列リテラルからプリミティブとして、または <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/String\"><code>String()</code></a> コンストラクターを使用して文字列として生成することができます。</p>\n<pre class=\"notranslate\">const string1 = \"文字列プリミティブ\";\nconst string2 = 'これも文字列プリミティブ';\nconst string3 = `別な文字列プリミティブ`;\n</pre>\n<pre class=\"notranslate\">const string4 = new String(\"文字列オブジェクト\");\n</pre>\n<p>文字列プリミティブと文字列オブジェクトは、ほとんどの場合は交換して使用することができます。下記の「<a href=\"#string_primitives_and_string_objects\">文字列プリミティブと String オブジェクト</a>」を参照してください。</p>\n<p>文字列リテラルは単一引用符または二重引用符を使用して指定することができ、どちらでも同様に扱われますが、逆引用符文字 <kbd>`</kbd> を使用することもできます。最後の形は<a href=\"/ja/docs/Web/JavaScript/Reference/Template_literals\">テンプレートリテラル</a>を指定し、この形式では式を補完することができます。</p>"}},{"type":"prose","value":{"id":"文字へのアクセス","title":"文字へのアクセス","isH3":true,"content":"<p>文字列内の個々の文字へのアクセス方法には、二通りの方法があります。そのひとつは <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/charAt\"><code>charAt()</code></a> メソッドです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">return</span> <span class=\"token string\">'ねこ'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// \"こ\" が返される</span>\n</code></pre></div>\n<p>そしてもうひとつは、文字列を配列のようなオブジェクトとして扱い、数値の添字を用いる方法です。 (ECMAScript 5 で導入)</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">return</span> <span class=\"token string\">'ねこ'</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\">// \"こ\" が返される。</span>\n</code></pre></div>\n<p>ブラケット記法を使用した文字アクセスでは、これらのプロパティに値を設定したり削除したりすることはできません。関連したプロパティを書き込んだり設定したりすることもできません。 (より詳細な情報は <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty()</code></a> を参照してください。)</p>"}},{"type":"prose","value":{"id":"文字列の比較","title":"文字列の比較","isH3":true,"content":"<p>C 言語では 文字列の比較の為に <code>strcmp()</code> 関数を用います。 JavaScript では単純に <a href=\"/ja/docs/Web/JavaScript/Reference/Operators\">小なり / 大なり演算子</a>を用います。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token string\">'b'</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// true</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token string\">' は '</span> <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> <span class=\"token string\">' より小さい'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&gt;</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token string\">' は '</span> <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> <span class=\"token string\">' より大きい'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token string\">' と '</span> <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> <span class=\"token string\">' は等しい'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>String</code> インスタンスから継承される <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\"><code>localeCompare()</code></a> メソッドを使用して同等の結果を得ることもできます。</p>\n<p>なお、 <code>a == b</code> は <code>a</code> と <code>b</code> の文字列が等しいかどうかを、通常の大文字小文字を区別して比較します。大文字小文字に関係なく比較したい場合は、次のように関数を使用してください。</p>\n<pre class=\"notranslate\">function isEqual(str1, str2)\n{\n    return str1.toUpperCase() === str2.toUpperCase()\n} // isEqual\n</pre>\n<p>この関数では、特定の UTF-8 文字の変換に問題があるため、小文字の代わりに大文字を使用します。</p>"}},{"type":"prose","value":{"id":"文字列プリミティブと_string_オブジェクト","title":"文字列プリミティブと String オブジェクト","isH3":true,"content":"<p>JavaScript では、 <code>String</code> オブジェクトと<a href=\"/ja/docs/Glossary/Primitive\">プリミティブ文字列</a>は区別されることに注意してください。 (<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> や <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> にも同じことが言えます。)</p>\n<p>文字列リテラル (二重引用符または単一引用符で示されます)、および <code>String</code> 関数をコンストラクター以外の場面で (すなわち <a href=\"/ja/docs/Web/JavaScript/Reference/Operators/new\"><code>new</code></a> キーワードを使わずに) 呼び出した場合はプリミティブの文字列になります。 JavaScript では、必要に応じてプリミティブの文字列が自動的に <code>String</code> オブジェクトに変換されるので、プリミティブの文字列に対して <code>String</code> オブジェクトのメソッドを使用することができます。プリミティブの文字列に対して、メソッドの呼び出しやプロパティの参照が行われようとした場合、 JavaScript は自動的にプリミティブの文字列をオブジェクトでラップし、メソッドを呼び出したりプロパティの参照を行ったりします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> s_prim <span class=\"token operator\">=</span> <span class=\"token string\">'foo'</span>\n<span class=\"token keyword\">let</span> s_obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>s_prim<span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> s_prim<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Logs \"string\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> s_obj<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Logs \"object\"</span>\n</code></pre></div>\n<p>プリミティブの文字列と <code>String</code> オブジェクトは <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/eval\"><code>eval()</code></a> を使用すると異なる結果となります。 <code>eval</code> に渡されたプリミティブは、ソースコードとして扱われます。 <code>String</code> オブジェクトは他のオブジェクトと同様に、オブジェクトとしてそのままの文字列を返します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">'2 + 2'</span>              <span class=\"token comment\">// 文字列プリミティブを生成</span>\n<span class=\"token keyword\">var</span> s2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2 + 2'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// String オブジェクトを生成</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>         <span class=\"token comment\">// 数値の 4 を返す</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>         <span class=\"token comment\">// 文字列の \"2 + 2\" を返す</span>\n</code></pre></div>\n<p>こういった理由から、プリミティブの文字列を期待して実装されたコードは <code>String</code> オブジェクトでうまく動作しないことがあります。しかし、一般的にはこれらの違いを考慮しなければならないことはあまりありません。</p>\n<p>なお、 <code>String</code> オブジェクトは <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/valueOf\"><code>valueOf()</code></a> メソッドを用いることで、プリミティブの文字列に変換することができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 数値の 4 を返す</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"エスケープ表記","title":"エスケープ表記","isH3":true,"content":"<p>通常の文字列とは異なる特殊な文字を表示するためには、エスケープ表記を使用します。</p>\n<table>\n  <thead>\n    <tr>\n      <th>コード</th>\n      <th>出力</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>\\XXX</code> (<code>XXX</code> = 1 ～ 3 桁の 8 進数、 <code>0</code>～<code>377</code> の範囲)</td>\n      <td>ISO-8859-1 の文字または U+0000 から U+00FF の間の Unicode コードポイントです。</td>\n    </tr>\n    <tr>\n      <td><code>\\'</code></td>\n      <td>単一引用符</td>\n    </tr>\n    <tr>\n      <td><code>\\\"</code></td>\n      <td>二重引用符</td>\n    </tr>\n    <tr>\n      <td><code>\\\\</code></td>\n      <td>バックスラッシュ (\\文字)</td>\n    </tr>\n    <tr>\n      <td><code>\\n</code></td>\n      <td>改行</td>\n    </tr>\n    <tr>\n      <td><code>\\r</code></td>\n      <td>復帰</td>\n    </tr>\n    <tr>\n      <td><code>\\v</code></td>\n      <td>垂直タブ</td>\n    </tr>\n    <tr>\n      <td><code>\\t</code></td>\n      <td>水平タブ</td>\n    </tr>\n    <tr>\n      <td><code>\\b</code></td>\n      <td>バックスペース</td>\n    </tr>\n    <tr>\n      <td><code>\\f</code></td>\n      <td>ページ送り</td>\n    </tr>\n    <tr>\n      <td><code>\\uXXXX</code> (<code>XXXX</code> = 4 桁の 16 進数、 <code>0x0000</code>～<code>0xFFFF</code> の範囲)</td>\n      <td>UTF-16 のコード単位 / <code>U+0000</code> から <code>U+FFFF</code> の間の Unicode コードポイント</td>\n    </tr>\n    <tr>\n      <td><code>\\u{X}</code> ... <code>\\u{XXXXXX}</code> (<code>X…XXXXXX</code> = 1 ～ 6 桁の 16 進数、 <code>0x0</code>–<code>0x10FFFF</code> の範囲)</td>\n      <td>UTF-32 のコード単位 / <code>U+0000</code> から <code>U+10FFFF</code> の間の Unicode コードポイント</td>\n    </tr>\n    <tr>\n      <td><code>\\xXX</code> (<code>XX</code> = 2 桁の 16 進数、 <code>0x00</code>～<code>0xFF</code> の範囲)</td>\n      <td>ISO-8859-1 の文字 / <code>U+0000</code> から <code>U+00FF</code> の間の Unicode コードポイント</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"長い文字列リテラル","title":"長い文字列リテラル","isH3":true,"content":"<p>時には、コードに非常に長い文字列が含まれる場合があります。行を延々と長くしたり、エディターに任せて折り返したりするよりも、実際の文字列の内容に影響を与えずに文字列をソースコード内で複数行に分割したいことがあります。これを行うには 2 つの方法があります。</p>\n<h4 id=\"方法_1\">方法 1</h4>\n<p><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Addition\">+</a> 演算子を使用して、次のように複数の文字列を追加することができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> longString <span class=\"token operator\">=</span> <span class=\"token string\">\"This is a very long string which needs \"</span> <span class=\"token operator\">+</span>\n                 <span class=\"token string\">\"to wrap across multiple lines because \"</span> <span class=\"token operator\">+</span>\n                 <span class=\"token string\">\"otherwise my code is unreadable.\"</span>\n</code></pre></div>\n<h4 id=\"方法_2\">方法 2</h4>\n<p>各行の末尾にバックスラッシュ文字 (<code>\\</code>) を使用して、文字列が次の行に続くことを示すことができます。バックスラッシュの後に、 (改行を除いて) 空白やその他の文字を置いたり、インデントを置いたりしていないか確認してください。さもないと動作しません。</p>\n<p>この形式は以下のようになります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> longString <span class=\"token operator\">=</span> <span class=\"token string\">\"This is a very long string which needs \\\nto wrap across multiple lines because \\\notherwise my code is unreadable.\"</span>\n</code></pre></div>\n<p>これらの結果はともに同じ文字列が生成されます。</p>"}},{"type":"prose","value":{"id":"コンストラクター","title":"コンストラクター","isH3":false,"content":"<dl>\n  <dt id=\"string\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/String\"><code>String()</code></a></dt>\n  <dd>\n    <p>新しい <code>String</code> オブジェクトを生成するために使用します。コンストラクターではなく関数として呼び出されたときは型変換を行うので、普通はより有用です。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"静的メソッド","title":"静的メソッド","isH3":false,"content":"<dl>\n  <dt id=\"string.fromcharcodenum1_..._numn\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode\"><code>String.fromCharCode(<var>num1</var> [, ...[, <var>numN</var>]])</code></a></dt>\n  <dd>\n    <p>指定された Unicode 値の列から生成した文字列を返します。</p>\n  </dd>\n  <dt id=\"string.fromcodepointnum1_..._numn\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint\"><code>String.fromCodePoint(<var>num1</var> [, ...[, <var>numN</var>)</code></a></dt>\n  <dd>\n    <p>指定された Unicode コードポイントの列から生成した文字列を返します。</p>\n  </dd>\n  <dt id=\"string.raw\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/raw\"><code>String.raw()</code></a></dt>\n  <dd>\n    <p>生のテンプレート文字列から生成した文字列を返します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"インスタンスプロパティ","title":"インスタンスプロパティ","isH3":false,"content":"<dl>\n  <dt id=\"string.prototype.length\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/length\"><code>String.prototype.length</code></a></dt>\n  <dd>\n    <p>文字列の <code>length</code> を反映します。読み取り専用です。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"インスタンスメソッド","title":"インスタンスメソッド","isH3":false,"content":"<dl>\n  <dt id=\"string.prototype.charatindex\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/charAt\"><code>String.prototype.charAt(<var>index</var>)</code></a></dt>\n  <dd>\n    <p><code>index</code> で指定された位置の文字 (UTF-16 コード 1 つから成ります) を返します。</p>\n  </dd>\n  <dt id=\"string.prototype.charcodeatindex\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt\"><code>String.prototype.charCodeAt(<var>index</var>)</code></a></dt>\n  <dd>\n    <p><code>index</code> で与えられた位置の文字の UTF-16 の値を示す数を返します。</p>\n  </dd>\n  <dt id=\"string.prototype.codepointatpos\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt\"><code>String.prototype.codePointAt(<var>pos</var>)</code></a></dt>\n  <dd>\n    <p><code>pos</code> で指定された位置から始まる UTF-16 エンコードされた際のコードポイントの、コードポイントの値である正の整数を返します。</p>\n  </dd>\n  <dt id=\"string.prototype.concatstr_...strn_\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/concat\"><code>String.prototype.concat(<var>str </var>[, ...<var>strN </var>])</code></a></dt>\n  <dd>\n    <p>2 つ (以上) の文字列を連結し、新しい文字列を返します。</p>\n  </dd>\n  <dt id=\"string.prototype.includessearchstring_position\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/includes\"><code>String.prototype.includes(<var>searchString</var> [, <var>position</var>])</code></a></dt>\n  <dd>\n    <p>文字列中に <code>searchString</code> が含まれているかを返します。</p>\n  </dd>\n  <dt id=\"string.prototype.endswithsearchstring_length\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\"><code>String.prototype.endsWith(<var>searchString</var> [, <var>length</var>])</code></a></dt>\n  <dd>\n    <p>文字列の末尾に指定された文字列 <code>searchString</code> が含まれているかを返します。</p>\n  </dd>\n  <dt id=\"string.prototype.indexofsearchvalue_fromindex\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\"><code>String.prototype.indexOf(<var>searchValue</var> [, <var>fromIndex</var>])</code></a></dt>\n  <dd>\n    <p>呼び出す <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String\" aria-current=\"page\"><code>String</code></a> オブジェクト中で、 <code>searchValue</code> が最初に現れる位置を返します。見つからなかった場合は <code>-1</code> を返します。</p>\n  </dd>\n  <dt id=\"string.prototype.lastindexofsearchvalue_fromindex\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf\"><code>String.prototype.lastIndexOf(<var>searchValue</var> [, <var>fromIndex</var>])</code></a></dt>\n  <dd>\n    <p>呼び出す <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String\" aria-current=\"page\"><code>String</code></a> オブジェクト中で、 <code>searchValue</code> が最後に現れる位置を返します。見つからない場合は <code>-1</code> を返します。</p>\n  </dd>\n  <dt id=\"string.prototype.localecomparecomparestring_locales_options\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\"><code>String.prototype.localeCompare(<var>compareString</var> [, <var>locales</var> [, <var>options</var>]])</code></a></dt>\n  <dd>\n    <p>参照文字列 <code>compareString</code> が、並べ替え順において、与えられた文字列の前になるか後になるか、あるいは、同じかどうかを示す数値を返します。</p>\n  </dd>\n  <dt id=\"string.prototype.matchregexp\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/match\"><code>String.prototype.match(<var>regexp</var>)</code></a></dt>\n  <dd>\n    <p>文字列に対して正規表現 <code>regexp</code> を一致させるために使用されます。</p>\n  </dd>\n  <dt id=\"string.prototype.matchallregexp\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll\"><code>String.prototype.matchAll(<var>regexp</var>)</code></a></dt>\n  <dd>\n    <p><code>regexp</code> が一致するものすべてのイテレーターを返します。</p>\n  </dd>\n  <dt id=\"string.prototype.normalizeform\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\"><code>String.prototype.normalize([<var>form</var>])</code></a></dt>\n  <dd>\n    <p>呼び出された文字列の値の Unicode 正規化形式を返します。</p>\n  </dd>\n  <dt id=\"string.prototype.padendtargetlength_padstring\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd\"><code>String.prototype.padEnd(<var>targetLength</var> [, <var>padString</var>])</code></a></dt>\n  <dd>\n    <p>現在の文字列の末尾から指定された文字列で埋めた、長さ <code>targetLength</code> 文字の新たな文字列を返します。</p>\n  </dd>\n  <dt id=\"string.prototype.padstarttargetlength_padstring\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\"><code>String.prototype.padStart(<var>targetLength</var> [, <var>padString</var>])</code></a></dt>\n  <dd>\n    <p>現在の文字列の先頭から指定した文字列で埋めた、長さ <code>targetLength</code> 文字の新たな文字列を作成します。</p>\n  </dd>\n  <dt id=\"string.prototype.repeatcount\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\"><code>String.prototype.repeat(<var>count</var>)</code></a></dt>\n  <dd>\n    <p>オブジェクトの要素を <code>count</code> 回繰り返した文字列を返します。</p>\n  </dd>\n  <dt id=\"string.prototype.replacesearchfor_replacewith\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>String.prototype.replace(<var>searchFor</var>, <var>replaceWith</var>)</code></a></dt>\n  <dd>\n    <p><code>searchFor</code> が現れたところを <code>replaceWith</code> で置換するために使用します。 <code>searchFor</code> は文字列または正規表現であり、 <code>replaceWith</code> は文字列または関数です。</p>\n  </dd>\n  <dt id=\"string.prototype.replaceallsearchfor_replacewith\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll\"><code>String.prototype.replaceAll(<var>searchFor</var>, <var>replaceWith</var>)</code></a></dt>\n  <dd>\n    <p><code>searchFor</code> が現れたところすべてを <code>replaceWith</code> で置換するために使用します。 <code>searchFor</code> は文字列または正規表現であり、 <code>replaceWith</code> は文字列または関数です。</p>\n  </dd>\n  <dt id=\"string.prototype.searchregexp\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/search\"><code>String.prototype.search(<var>regexp</var>)</code></a></dt>\n  <dd>\n    <p>正規表現 <code>regexp</code> と呼び出された文字列が一致するところを検索します。</p>\n  </dd>\n  <dt id=\"string.prototype.slicebeginindex_endindex\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/slice\"><code>String.prototype.slice(<var>beginIndex</var>[, <var>endIndex</var>])</code></a></dt>\n  <dd>\n    <p>文字列の一区間を取り出し、新しい文字列を返します。</p>\n  </dd>\n  <dt id=\"string.prototype.splitsep_limit_\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/split\"><code>String.prototype.split([<var>sep</var> [, <var>limit</var>] ])</code></a></dt>\n  <dd>\n    <p>呼び出した文字列を、部分文字列 <code>sep</code> が現れるところで分割し、文字列の配列を生成して返します。</p>\n  </dd>\n  <dt id=\"string.prototype.startswithsearchstring_length\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\"><code>String.prototype.startsWith(<var>searchString</var> [, <var>length</var>])</code></a></dt>\n  <dd>\n    <p>呼び出した文字列が文字列 <code>searchString</code> で開始されているかを判断します。</p>\n  </dd>\n  <dt id=\"string.prototype.substr\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/substr\"><code>String.prototype.substr()</code></a></dt>\n  <dd>\n    <p>文字列において、指定された位置から指定された文字数の文字を返します。</p>\n  </dd>\n  <dt id=\"string.prototype.substringindexstart_indexend\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/substring\"><code>String.prototype.substring(<var>indexStart</var> [, <var>indexEnd</var>])</code></a></dt>\n  <dd>\n    <p>呼び出した文字列の指定された位置以降 (または区間) にある文字が入った新しい文字列を返します。</p>\n  </dd>\n  <dt id=\"string.prototype.tolocalelowercase_locale_...locales\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase\"><code>String.prototype.toLocaleLowerCase( [<var>locale</var>, ...<var>locales</var>])</code></a></dt>\n  <dd>\n    <p>文字列内の文字が、現在のロケールに沿って小文字に変換されます。</p>\n    <p>ほとんどの言語では、これは <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase\"><code>toLowerCase()</code></a> と同じものを返します。</p>\n  </dd>\n  <dt id=\"string.prototype.tolocaleuppercase_locale_...locales\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase\"><code>String.prototype.toLocaleUpperCase( [<var>locale</var>, ...<var>locales</var>])</code></a></dt>\n  <dd>\n    <p>文字列内の文字が、現在のロケールに沿って大文字に変換されます。</p>\n    <p>ほとんどの言語では、これは <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\"><code>toUpperCase()</code></a> と同じものを返します。</p>\n  </dd>\n  <dt id=\"string.prototype.tolowercase\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase\"><code>String.prototype.toLowerCase()</code></a></dt>\n  <dd>\n    <p>小文字に変換された文字列の値を呼び出して返します。</p>\n  </dd>\n  <dt id=\"string.prototype.tostring\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/toString\"><code>String.prototype.toString()</code></a></dt>\n  <dd>\n    <p>指定されたオブジェクトの文字列を返します。<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a> メソッドを上書きします。</p>\n  </dd>\n  <dt id=\"string.prototype.touppercase\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\"><code>String.prototype.toUpperCase()</code></a></dt>\n  <dd>\n    <p>大文字に変換された文字列の値を呼び出して返します。</p>\n  </dd>\n  <dt id=\"string.prototype.trim\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/trim\"><code>String.prototype.trim()</code></a></dt>\n  <dd>\n    <p>文字列の先頭と末尾にある空白を削除します。 ECMAScript 5 標準の一部です。</p>\n  </dd>\n  <dt id=\"string.prototype.trimstart\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/trimStart\"><code>String.prototype.trimStart()</code></a></dt>\n  <dd>\n    <p>文字列の先頭にある空白を削除します。</p>\n  </dd>\n  <dt id=\"string.prototype.trimend\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/trimEnd\"><code>String.prototype.trimEnd()</code></a></dt>\n  <dd>\n    <p>文字列の末尾にある空白を削除します。</p>\n  </dd>\n  <dt id=\"string.prototype.valueof\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/valueOf\"><code>String.prototype.valueOf()</code></a></dt>\n  <dd>\n    <p>指定されたオブジェクトのプリミティブ値を返します。 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a> メソッドを上書きします。</p>\n  </dd>\n  <dt id=\"string.prototype.iterator\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator\"><code>String.prototype.@@iterator()</code></a></dt>\n  <dd>\n    <p>文字列値のコードポイントを反復処理し、文字列値として各コードポイントを返す、新しい <code>Iterator</code> オブジェクトを返します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"html_ラッパーメソッド","title":"HTML ラッパーメソッド","isH3":false,"content":"<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> <strong>非推奨です。これらのメソッドは避けてください。</strong></p>\n  <p>以下のメソッドは、それぞれ、特定の HTML タグでラップされた文字列のコピーを返します。</p>\n</div>\n<dl>\n  <dt id=\"string.prototype.anchor\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/anchor\"><code>String.prototype.anchor()</code></a></dt>\n  <dd>\n    <p><a href=\"/ja/docs/Web/HTML/Element/a#attr-name\"><code>&lt;a name=\"name\"&gt;</code></a> (ハイパーテキストのターゲット)</p>\n  </dd>\n  <dt id=\"string.prototype.big\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/big\"><code>String.prototype.big()</code></a></dt>\n  <dd><a href=\"/ja/docs/Web/HTML/Element/big\"><code>&lt;big&gt;</code></a></dd>\n  <dt id=\"string.prototype.blink\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/blink\"><code>String.prototype.blink()</code></a></dt>\n  <dd><a href=\"/ja/docs/Web/HTML/Element/blink\"><code>&lt;blink&gt;</code></a></dd>\n  <dt id=\"string.prototype.bold\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/bold\"><code>String.prototype.bold()</code></a></dt>\n  <dd><a href=\"/ja/docs/Web/HTML/Element/b\"><code>&lt;b&gt;</code></a></dd>\n  <dt id=\"string.prototype.fixed\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/fixed\"><code>String.prototype.fixed()</code></a></dt>\n  <dd><a href=\"/ja/docs/Web/HTML/Element/tt\"><code>&lt;tt&gt;</code></a></dd>\n  <dt id=\"string.prototype.fontcolor\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/fontcolor\"><code>String.prototype.fontcolor()</code></a></dt>\n  <dd><a href=\"/ja/docs/Web/HTML/Element/font#attr-color\"><code>&lt;font color=\"color\"&gt;</code></a></dd>\n  <dt id=\"string.prototype.fontsize\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/fontsize\"><code>String.prototype.fontsize()</code></a></dt>\n  <dd><a href=\"/ja/docs/Web/HTML/Element/font#attr-size\"><code>&lt;font size=\"size\"&gt;</code></a></dd>\n  <dt id=\"string.prototype.italics\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/italics\"><code>String.prototype.italics()</code></a></dt>\n  <dd><a href=\"/ja/docs/Web/HTML/Element/i\"><code>&lt;i&gt;</code></a></dd>\n  <dt id=\"string.prototype.link\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/link\"><code>String.prototype.link()</code></a></dt>\n  <dd>\n    <p><a href=\"/ja/docs/Web/HTML/Element/a#attr-href\"><code>&lt;a href=\"url\"&gt;</code></a> (URL へのリンク)</p>\n  </dd>\n  <dt id=\"string.prototype.small\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/small\"><code>String.prototype.small()</code></a></dt>\n  <dd><a href=\"/ja/docs/Web/HTML/Element/small\"><code>&lt;small&gt;</code></a></dd>\n  <dt id=\"string.prototype.strike\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/strike\"><code>String.prototype.strike()</code></a></dt>\n  <dd><a href=\"/ja/docs/Web/HTML/Element/strike\"><code>&lt;strike&gt;</code></a></dd>\n  <dt id=\"string.prototype.sub\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/sub\"><code>String.prototype.sub()</code></a></dt>\n  <dd><a href=\"/ja/docs/Web/HTML/Element/sub\"><code>&lt;sub&gt;</code></a></dd>\n  <dt id=\"string.prototype.sup\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/sup\"><code>String.prototype.sup()</code></a></dt>\n  <dd><a href=\"/ja/docs/Web/HTML/Element/sup\"><code>&lt;sup&gt;</code></a></dd>\n</dl>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":""}},{"type":"prose","value":{"id":"文字列変換","title":"文字列変換","isH3":true,"content":"<p><code>String</code> を使用すると、 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/toString\"><code>toString()</code></a> よりも信頼性の高い代替手段となり、 <a href=\"/ja/docs/Web/JavaScript/Reference/Operators/null\"><code>null</code></a>, <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>, <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>symbols</code></a> に対して使用することもできます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> outputStrings <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> inputValues<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  outputStrings<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>inputValues<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"仕様書","title":"仕様書","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>仕様書</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://tc39.es/ecma262/#sec-string-objects\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">ECMAScript (ECMA-262)<br><small lang=\"ja\">String の定義</small></a></td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"query":"javascript.builtins.String","dataURL":"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/bcd.json"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/JavaScript/Guide/Text_formatting\">JavaScript ガイドのテキスト処理</a></li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a></li>\n  <li><a href=\"/ja/docs/Glossary/String\"><code>DOMString</code></a></li>\n  <li><a href=\"/ja/docs/Mozilla/Add-ons/Code_snippets/StringView\"><code>StringView</code> — 型付き配列に基づいた C 風の文字列の表現</a></li>\n  <li><a href=\"/ja/docs/Web/API/btoa\">バイナリ文字列</a></li>\n</ul>"}}],"toc":[{"text":"解説","id":"解説"},{"text":"コンストラクター","id":"コンストラクター"},{"text":"静的メソッド","id":"静的メソッド"},{"text":"インスタンスプロパティ","id":"インスタンスプロパティ"},{"text":"インスタンスメソッド","id":"インスタンスメソッド"},{"text":"HTML ラッパーメソッド","id":"html_ラッパーメソッド"},{"text":"例","id":"例"},{"text":"仕様書","id":"仕様書"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"String オブジェクトは文字の並びを表したり操作したりするために使用されます。","popularity":0.0037,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"String","locale":"en-US","native":"English (US)"},{"title":"String — Cadena de caracteres","locale":"es","native":"Español"},{"title":"String","locale":"fr","native":"Français"},{"title":"String","locale":"ko","native":"한국어"},{"title":"String","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"String","locale":"ru","native":"Русский"},{"title":"String","locale":"zh-CN","native":"中文 (简体)"},{"title":"字串","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ja/web/javascript/reference/global_objects/string","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/javascript/reference/global_objects/string/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/ja/docs/Web/JavaScript/Reference","title":"JavaScript リファレンス"},{"uri":"/ja/docs/Web/JavaScript/Reference/Global_Objects","title":"標準組み込みオブジェクト"},{"uri":"/ja/docs/Web/JavaScript/Reference/Global_Objects/String","title":"String"}],"pageTitle":"String - JavaScript | MDN","noIndexing":false}}