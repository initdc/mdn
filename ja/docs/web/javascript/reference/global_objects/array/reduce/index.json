{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Array.prototype.reduce()","mdn_url":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects\">標準組み込みオブジェクト</a></strong></li><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>プロパティ</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/@@species\"><code>get Array[@@species]</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/@@unscopables\"><code>Array.prototype[@@unscopables]</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/length\"><code>Array.prototype.length</code></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>メソッド</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator\"><code>Array.prototype[@@iterator]()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/at\"><code>Array.prototype.at()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\"><code>Array.prototype.concat()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\"><code>Array.prototype.copyWithin()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/entries\"><code>Array.prototype.entries()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/every\"><code>Array.prototype.every()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/fill\"><code>Array.prototype.fill()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\"><code>Array.prototype.filter()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/find\"><code>Array.prototype.find()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\"><code>Array.prototype.findIndex()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast\"><code>Array.prototype.findLast()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex\"><code>Array.prototype.findLastIndex()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\"><code>Array.prototype.flat()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap\"><code>Array.prototype.flatMap()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"><code>Array.prototype.forEach()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/from\"><code>Array.from()</code></a></li><li><svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/group\"><code>Array.prototype.group()</code></a></li><li><svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/groupToMap\"><code>Array.prototype.groupToMap()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\"><code>Array.prototype.includes()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\"><code>Array.prototype.indexOf()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\"><code>Array.isArray()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/join\"><code>Array.prototype.join()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/keys\"><code>Array.prototype.keys()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf\"><code>Array.prototype.lastIndexOf()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"><code>Array.prototype.map()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/of\"><code>Array.of()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\"><code>Array.prototype.pop()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/push\"><code>Array.prototype.push()</code></a></li><li><em><code>Array.prototype.reduce()</code></em></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight\"><code>Array.prototype.reduceRight()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\"><code>Array.prototype.reverse()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\"><code>Array.prototype.shift()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\"><code>Array.prototype.slice()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/some\"><code>Array.prototype.some()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\"><code>Array.prototype.sort()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"><code>Array.prototype.splice()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString\"><code>Array.prototype.toLocaleString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/toString\"><code>Array.prototype.toString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\"><code>Array.prototype.unshift()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/values\"><code>Array.prototype.values()</code></a></li></ol></li><li><strong>継承</strong></li><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li><a href=\"#\"><strong>プロパティ</strong></a><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function.prototype.displayName</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function.prototype.length</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function.prototype.name</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function.prototype.prototype</code></a></li></ol></li><li><a href=\"#\"><strong>メソッド</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></li><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>プロパティ</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>メソッド</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>reduce()</code></strong> メソッドは、配列のそれぞれの要素に対して、ユーザーが提供した「縮小」コールバック関数を呼び出します。その際、直前の要素における計算結果の返値を渡します。配列のすべての要素に対して縮小関数を実行した結果が単一の値が最終結果になります。</p>\n<p>\n  コールバックの初回実行時には「直前の計算の返値」は存在しません。\n  初期値が与えらえた場合は、代わりに使用されることがあります。\n  そうでない場合は、配列の要素 0 が初期値として使用され、次の要素（0 の位置ではなく 1 の位置）から反復処理が開始されます。\n</p>\n<p><code>reduce()</code> で一番わかりやすいのは、配列のすべての要素の和を返す場合でしょう。</p><iframe class=\"interactive\" height=\"490\" src=\"https://interactive-examples.mdn.mozilla.net/pages/js/array-reduce.html\" title=\"MDN Web Docs Interactive Example\" loading=\"lazy\"></iframe>\n<p>縮小関数は配列を要素ごとに走査し、それぞれの段階で、前の段階の結果に現在の配列の値を加えていきます (この結果は、それ以前のすべての段階を合算したものです)。</p>"}},{"type":"prose","value":{"id":"構文","title":"構文","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// アロー関数</span>\n<span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">previousValue<span class=\"token punctuation\">,</span> currentValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* … */</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span>\n<span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">previousValue<span class=\"token punctuation\">,</span> currentValue<span class=\"token punctuation\">,</span> currentIndex</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* … */</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span>\n<span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">previousValue<span class=\"token punctuation\">,</span> currentValue<span class=\"token punctuation\">,</span> currentIndex<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* … */</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">previousValue<span class=\"token punctuation\">,</span> currentValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* … */</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">,</span> initialValue<span class=\"token punctuation\">)</span>\n<span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">previousValue<span class=\"token punctuation\">,</span> currentValue<span class=\"token punctuation\">,</span> currentIndex</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* … */</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">,</span> initialValue<span class=\"token punctuation\">)</span>\n<span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">previousValue<span class=\"token punctuation\">,</span> currentValue<span class=\"token punctuation\">,</span> currentIndex<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* … */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> initialValue<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// コールバック関数</span>\n<span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>callbackFn<span class=\"token punctuation\">)</span>\n<span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>callbackFn<span class=\"token punctuation\">,</span> initialValue<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// インラインコールバック関数</span>\n<span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">previousValue<span class=\"token punctuation\">,</span> currentValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* … */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">previousValue<span class=\"token punctuation\">,</span> currentValue<span class=\"token punctuation\">,</span> currentIndex</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* … */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">previousValue<span class=\"token punctuation\">,</span> currentValue<span class=\"token punctuation\">,</span> currentIndex<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* … */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">previousValue<span class=\"token punctuation\">,</span> currentValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* … */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> initialValue<span class=\"token punctuation\">)</span>\n<span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">previousValue<span class=\"token punctuation\">,</span> currentValue<span class=\"token punctuation\">,</span> currentIndex</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* … */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> initialValue<span class=\"token punctuation\">)</span>\n<span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">previousValue<span class=\"token punctuation\">,</span> currentValue<span class=\"token punctuation\">,</span> currentIndex<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* … */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> initialValue<span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"引数","title":"引数","isH3":true,"content":"<dl>\n  <dt id=\"callbackfn\"><code>callbackFn</code></dt>\n  <dd>\n    <p>以下の引数を取る「縮小」関数です。</p>\n    <dl>\n      <dt id=\"previousvalue\"><code>previousValue</code></dt>\n      <dd>\n        <p>前回の <code>callbackFn</code> の呼び出し結果の値です。初回の呼び出しでは <code>initialValue</code> が指定されていた場合はその値、そうでない場合は <code>array[0]</code> の値です。</p>\n      </dd>\n      <dt id=\"currentvalue\"><code>currentValue</code></dt>\n      <dd>\n        <p>現在の要素の値です。初回の呼び出しでは <code>initialValue</code> が指定された場合は <code>array[0]</code> の値であり、そうでない場合は <code>array[1]</code> の値です。</p>\n      </dd>\n      <dt id=\"currentindex\"><code>currentIndex</code></dt>\n      <dd>\n        <p><code>currentValue</code> の位置です。初回の呼び出しでは、 <code>initialValue</code> が指定された場合は <code>0</code>、そうでない場合は <code>1</code> です。</p>\n      </dd>\n      <dt id=\"array\"><code>array</code></dt>\n      <dd>\n        <p>走査する配列です。</p>\n      </dd>\n    </dl>\n  </dd>\n  <dt id=\"initialvalue\"><code>initialValue</code> <span class=\"badge inline optional\">省略可</span></dt>\n  <dd>\n    <p>\n      コールバックが初めて呼び出されたときの <code>previousValue</code> の初期値です。\n      <code>initialValue</code> が指定された場合は、 <code>currentValue</code> も配列の最初の値に初期化されます。\n      <code>initialValue</code> が指定され<em>なかった</em>場合、 <code>previousValue</code> は配列の最初の値で初期化され、 <code>currentValue</code> は配列の 2 番目の値で初期化されます。\n    </p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"返値","title":"返値","isH3":true,"content":"<p>配列全体にわたって「縮小」コールバック関数を実行した結果の値です。</p>"}},{"type":"prose","value":{"id":"例外","title":"例外","isH3":true,"content":"<dl>\n  <dt id=\"typeerror\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a></dt>\n  <dd>\n    <p>配列に要素がなく、かつ <code>initialValue</code> が提供されなかった場合に発生します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"解説","title":"解説","isH3":false,"content":"<p>\n  <code>reduce()</code> メソッドは 2 つの引数をとります。コールバック関数と、オプションで初期値を指定することができます。\n  初期値が指定された場合、 <code>reduce()</code> は配列のそれぞれの要素に対して順に「縮小」コールバック関数を呼び出します。初期値が指定されなかった場合、 <code>reduce()</code> は配列の最初の要素の後にあるそれぞれの要素に対してコールバック関数を呼び出します。\n</p>\n<p><code>reduce()</code> は、配列の反復処理の最後にコールバック関数から返される値を返します。</p>\n<p><code>reduce()</code> は<a href=\"https://ja.wikipedia.org/wiki/%E9%96%A2%E6%95%B0%E5%9E%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0\" class=\"external\" rel=\" noopener\">関数型プログラミング</a>の中心的な概念です。ここでは、どの値も変異させることができないので、配列のすべての値を積算するには、反復処理のたびに新しい積算値を返さなければなりません。この約束事は JavaScript の <code>reduce()</code> にも当てはまります。<a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">スプレッド構文</a>や他の可能な限りコピーする方法を使用して、既存のものを変更せずに、アキュームレーターとして新しい配列やオブジェクトを作成すべきなのです。もし、アキュームレーターをコピーする代わりに変化させることにした場合、コールバックで変更したオブジェクトを返すことを忘れないでください、さもなければ、次の反復処理で undefined を受け取ることになります。</p>"}},{"type":"prose","value":{"id":"reduce_を使用しない場合","title":"reduce() を使用しない場合","isH3":true,"content":"<p><code>reduce()</code> のような再帰的な関数は強力ですが、特に経験の浅い JavaScript 開発者にとっては理解するのが難しい場合があります。他の配列メソッドを使用した場合にコードが明確になるなら、開発者は <code>reduce()</code> を使用する他の利点と可読性をトレードオフで比較検討する必要があります。 <code>reduce()</code> が最適な選択である場合は、文書化と意味的な変数名を使用することが可読性の欠点を軽減するのに役立ちます。</p>"}},{"type":"prose","value":{"id":"配列変更時の動作について","title":"配列変更時の動作について","isH3":true,"content":"<p><code>reduce()</code> メソッド自身は、使用する配列を変更することはありません。しかし、コールバック関数内のコードが配列を変更することは可能です。以下は、配列の改変が起こる可能性のあるシナリオと、そのシナリオにおける <code>reduce()</code> の動作です。</p>\n<ul>\n  <li>もし <code>reduce()</code> が配列に対して反復処理を始めた後に配列に要素が追加された場合、コールバック関数は追加された要素に対して反復処理を行いません。</li>\n  <li>配列の既存の要素が変更された場合、コールバック関数に渡される値は、reduce()が配列に対して最初に呼び出された時点の値になります。</li>\n  <li><code>reduce()</code> の呼び出しが始まった後、反復処理される前に削除された配列要素は <code>reduce()</code> の処理が行われません。</li>\n</ul>"}},{"type":"prose","value":{"id":"稀な場合","title":"稀な場合","isH3":true,"content":"<p>配列が（位置に関わらず）1 つの要素しか持たず、 <code>initialValue</code> が指定されなかった場合、または <code>initialValue</code> が指定されていても配列が空だった場合、 <code>callbackfn</code> は<em>実行されずに</em>要素が返却されます。</p>\n<p><code>initialValue</code> が提供され、配列が空でない場合、 reduce メソッドは常に 0 の位置コールバック関数を呼び出し始めます。</p>\n<p><code>initialValue</code> が提供されなかった場合、 reduce メソッドは、次の例に示すように、長さが 1 より大きい配列、長さが 1 の配列、長さが 0 の配列に対して異なる動作をします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getMax</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// コールバックは 0 の位置から配列内の全要素に対して呼び出される</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>getMax<span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>getMax<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 50</span>\n\n<span class=\"token comment\">// コールバックは 1 の位置に対して 1 度だけ呼び出される</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>getMax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span>\n\n<span class=\"token comment\">// コールバックは呼び出されない</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>getMax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 50</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>getMax<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>getMax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":""}},{"type":"prose","value":{"id":"初期値がない場合の_reduce_の動作","title":"初期値がない場合の reduce() の動作","isH3":true,"content":"<p>下記のコードは、初期値がない場合に配列に <code>reduce()</code> を呼び出したときに何が起こるかを示します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">previousValue<span class=\"token punctuation\">,</span> currentValue<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> returns <span class=\"token operator\">=</span> previousValue <span class=\"token operator\">+</span> currentValue<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">previousValue: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>previousValue<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, currentValue: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>currentValue<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, index: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>index<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, returns: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>returns<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> returns<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\narray<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>コールバック関数は 4 回呼び出され、各回の引数の内容は以下のようになります。</p>\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th><code>previousValue</code></th>\n      <th><code>currentValue</code></th>\n      <th><code>index</code></th>\n      <th>返値</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>最初の呼び出し</td>\n      <td><code>15</code></td>\n      <td><code>16</code></td>\n      <td><code>1</code></td>\n      <td><code>31</code></td>\n    </tr>\n    <tr>\n      <td>2 番目の呼び出し</td>\n      <td><code>31</code></td>\n      <td><code>17</code></td>\n      <td><code>2</code></td>\n      <td><code>48</code></td>\n    </tr>\n    <tr>\n      <td>3 番目の呼び出し</td>\n      <td><code>48</code></td>\n      <td><code>18</code></td>\n      <td><code>3</code></td>\n      <td><code>66</code></td>\n    </tr>\n    <tr>\n      <td>4 番目の呼び出し</td>\n      <td><code>66</code></td>\n      <td><code>19</code></td>\n      <td><code>4</code></td>\n      <td><code>85</code></td>\n    </tr>\n  </tbody>\n</table>\n<p><code>array</code> の要素は処理中に変化しません。常に <code>[15, 16, 17, 18, 19]</code> です。 <code>reduce()</code> の返値は、コールバック呼び出しの最後の返値である (<code>85</code>) となるでしょう。</p>"}},{"type":"prose","value":{"id":"初期値がある場合の_reduce_の動作","title":"初期値がある場合の reduce() の動作","isH3":true,"content":"<p>ここでは、同じアルゴリズムで同じ配列を減らしますが、 <code>reduce()</code> の 2 番目の引数として <code>10</code> という <code>initialValue</code> を渡します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">previousValue<span class=\"token punctuation\">,</span> currentValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> previousValue <span class=\"token operator\">+</span> currentValue<span class=\"token punctuation\">,</span>\n  <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>コールバックは 5 回呼び出され、それぞれの呼び出しにおける引数と返値は次のようになります。</p>\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th><code>previousValue</code></th>\n      <th><code>currentValue</code></th>\n      <th><code>index</code></th>\n      <th>返値</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>最初の呼び出し</td>\n      <td><code>10</code></td>\n      <td><code>15</code></td>\n      <td><code>0</code></td>\n      <td><code>25</code></td>\n    </tr>\n    <tr>\n      <td>2 番目の呼び出し</td>\n      <td><code>25</code></td>\n      <td><code>16</code></td>\n      <td><code>1</code></td>\n      <td><code>41</code></td>\n    </tr>\n    <tr>\n      <td>3 番目の呼び出し</td>\n      <td><code>41</code></td>\n      <td><code>17</code></td>\n      <td><code>2</code></td>\n      <td><code>58</code></td>\n    </tr>\n    <tr>\n      <td>4 番目の呼び出し</td>\n      <td><code>58</code></td>\n      <td><code>18</code></td>\n      <td><code>3</code></td>\n      <td><code>76</code></td>\n    </tr>\n    <tr>\n      <td>5 番目の呼び出し</td>\n      <td><code>76</code></td>\n      <td><code>19</code></td>\n      <td><code>4</code></td>\n      <td><code>95</code></td>\n    </tr>\n  </tbody>\n</table>\n<p>この場合の <code>reduce()</code> の返値は <code>95</code> となります。</p>"}},{"type":"prose","value":{"id":"例_2","title":"例","isH3":false,"content":""}},{"type":"prose","value":{"id":"配列内の値の合計値を出す","title":"配列内の値の合計値を出す","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">previousValue<span class=\"token punctuation\">,</span> currentValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> previousValue <span class=\"token operator\">+</span> currentValue\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// sum is 6</span>\n</code></pre></div>\n<p>また、アロー関数を用いて書くこともできます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span> <span class=\"token parameter\">previousValue<span class=\"token punctuation\">,</span> currentValue</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> previousValue <span class=\"token operator\">+</span> currentValue<span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0</span>\n<span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"オブジェクト配列の値の合計値","title":"オブジェクト配列の値の合計値","isH3":true,"content":"<p>オブジェクトの配列に含まれた値の合計値を出すには、すべての項目を関数内で取得できるようにするために <code>initialValue</code> を指定する<strong>必要があります</strong>。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> objects <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> sum <span class=\"token operator\">=</span> objects<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">previousValue<span class=\"token punctuation\">,</span> currentValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> previousValue <span class=\"token operator\">+</span> currentValue<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs 6</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"二次元配列を一次元配列にする","title":"二次元配列を一次元配列にする","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> flattened <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">previousValue<span class=\"token punctuation\">,</span> currentValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> previousValue<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>currentValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// flattened is [0, 1, 2, 3, 4, 5]</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"オブジェクトの値のインスタンスを数える","title":"オブジェクトの値のインスタンスを数える","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Tiff\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bruce\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> countedNames <span class=\"token operator\">=</span> names<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">allNames<span class=\"token punctuation\">,</span> name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> currCount <span class=\"token operator\">=</span> allNames<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">??</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>allNames<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> currCount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// countedNames is:</span>\n<span class=\"token comment\">// { 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 }</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"プロパティによってオブジェクトをグループ化","title":"プロパティによってオブジェクトをグループ化","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> people <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">21</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Max\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Jane\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">groupBy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">objectArray<span class=\"token punctuation\">,</span> property</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> objectArray<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> obj</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>property<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>acc<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>acc<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> groupedPeople <span class=\"token operator\">=</span> <span class=\"token function\">groupBy</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// groupedPeople is:</span>\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   20: [</span>\n<span class=\"token comment\">//     { name: 'Max', age: 20 },</span>\n<span class=\"token comment\">//     { name: 'Jane', age: 20 }</span>\n<span class=\"token comment\">//   ],</span>\n<span class=\"token comment\">//   21: [{ name: 'Alice', age: 21 }]</span>\n<span class=\"token comment\">// }</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"スプレッド演算子と_initialvalue_を使ってオブジェクトの配列に含まれる配列を結合させる","title":"スプレッド演算子と initialValue を使ってオブジェクトの配列に含まれる配列を結合させる","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// friends - an array of objects</span>\n<span class=\"token comment\">// where object field \"books\" is a list of favorite books</span>\n<span class=\"token keyword\">const</span> friends <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Anna\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">books</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Bible\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Harry Potter\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">books</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"War and peace\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Romeo and Juliet\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">books</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"The Lord of the Rings\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"The Shining\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// allbooks - list which will contain all friends' books +</span>\n<span class=\"token comment\">// additional list contained in initialValue</span>\n<span class=\"token keyword\">const</span> allbooks <span class=\"token operator\">=</span> friends<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">previousValue<span class=\"token punctuation\">,</span> currentValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>previousValue<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>currentValue<span class=\"token punctuation\">.</span>books<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"Alphabet\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// allbooks = [</span>\n<span class=\"token comment\">//   'Alphabet', 'Bible', 'Harry Potter', 'War and peace',</span>\n<span class=\"token comment\">//   'Romeo and Juliet', 'The Lord of the Rings',</span>\n<span class=\"token comment\">//   'The Shining'</span>\n<span class=\"token comment\">// ]</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"配列内の重複要素を除去する","title":"配列内の重複要素を除去する","isH3":true,"content":"<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> と <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/from\"><code>Array.from()</code></a> に対応している環境を使っている場合は、<code>const arrayWithNoDuplicates = Array.from(new Set(myArray))</code> を使うことで重複要素を除去された配列を取得することができます。</p>\n</div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> myArrayWithNoDuplicates <span class=\"token operator\">=</span> myArray<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">previousValue<span class=\"token punctuation\">,</span> currentValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>previousValue<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>currentValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>previousValue<span class=\"token punctuation\">,</span> currentValue<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> previousValue<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myArrayWithNoDuplicates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":".filter.map_を_.reduce_で置き換える","title":".filter().map() を .reduce() で置き換える","isH3":true,"content":"<p><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\"><code>filter()</code></a> を使用した後で <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"><code>map()</code></a> を使用すると配列を二度走査しますが、<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\" aria-current=\"page\"><code>reduce()</code></a> では同じ効果を一度の操作で実現することができ、もっと効率的です。(<code>for</code> ループが好きなのであれば、<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"><code>forEach()</code></a> で一度の操作で filter と map を行うことができます)。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> doubledPositiveNumbers <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">previousValue<span class=\"token punctuation\">,</span> currentValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentValue <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> doubled <span class=\"token operator\">=</span> currentValue <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>previousValue<span class=\"token punctuation\">,</span> doubled<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> previousValue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doubledPositiveNumbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [12, 4]</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"直列のプロミスの実行","title":"直列のプロミスの実行","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/**\n * 一連のプロミスハンドラーを連鎖させる。\n *\n * @param {array} arr - プロミスハンドラーのリストで、各ハンドラーは前のハンドラーの\n * 解決した結果を受け取り、別のプロミスを返します。\n * @param {*} input プロミスチェーンを開始するための初期値\n * @return {Object} ハンドラーの連鎖を伴う最終プロミス\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">runPromiseInSequence</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">promiseChain<span class=\"token punctuation\">,</span> currentFunction</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> promiseChain<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>currentFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// promise function 1</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// promise function 2</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// function 3  - will be wrapped in a resolved promise by .then()</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">f3</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// promise function 4</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">p4</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> promiseArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">,</span> f3<span class=\"token punctuation\">,</span> p4<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">runPromiseInSequence</span><span class=\"token punctuation\">(</span>promiseArr<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1200</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"パイプによって関数を合成する","title":"パイプによって関数を合成する","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 合成に使用する素材</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">double</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">triple</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">quadruple</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// パイプ機能を実現する関数の合成</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">pipe</span> <span class=\"token operator\">=</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>functions</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">initialValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n    functions<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> fn</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> initialValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 詳細な値の乗算のための合成関数</span>\n<span class=\"token keyword\">const</span> multiply6 <span class=\"token operator\">=</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>double<span class=\"token punctuation\">,</span> triple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> multiply9 <span class=\"token operator\">=</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>triple<span class=\"token punctuation\">,</span> triple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> multiply16 <span class=\"token operator\">=</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>quadruple<span class=\"token punctuation\">,</span> quadruple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> multiply24 <span class=\"token operator\">=</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>double<span class=\"token punctuation\">,</span> triple<span class=\"token punctuation\">,</span> quadruple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 使用方法</span>\n<span class=\"token function\">multiply6</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 36</span>\n<span class=\"token function\">multiply9</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 81</span>\n<span class=\"token function\">multiply16</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 256</span>\n<span class=\"token function\">multiply24</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 240</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"仕様書","id":"仕様書","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.reduce","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.Array.reduce"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"query":"javascript.builtins.Array.reduce","dataURL":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce/bcd.json"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"https://github.com/zloirock/core-js#ecmascript-array\" class=\"external\" rel=\" noopener\"><code>Array.prototype.reduce</code> のポリフィル (<code>core-js</code>)</a></li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight\"><code>Array.prototype.reduceRight()</code></a></li>\n</ul>"}}],"toc":[{"text":"構文","id":"構文"},{"text":"解説","id":"解説"},{"text":"例","id":"例"},{"text":"例","id":"例_2"},{"text":"仕様書","id":"仕様書"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"reduce() メソッドは、配列のそれぞれの要素に対して、ユーザーが提供した「縮小」コールバック関数を呼び出します。その際、直前の要素における計算結果の返値を渡します。配列のすべての要素に対して縮小関数を実行した結果が単一の値が最終結果になります。","popularity":0.0046,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Array.prototype.reduce()","locale":"en-US","native":"English (US)"},{"title":"Array.prototype.reduce()","locale":"es","native":"Español"},{"title":"Array.prototype.reduce()","locale":"fr","native":"Français"},{"title":"Array.prototype.reduce()","locale":"ko","native":"한국어"},{"title":"Array.prototype.reduce()","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Array.prototype.reduce()","locale":"ru","native":"Русский"},{"title":"Array.prototype.reduce()","locale":"zh-CN","native":"中文 (简体)"},{"title":"Array.prototype.reduce()","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ja/web/javascript/reference/global_objects/array/reduce","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/javascript/reference/global_objects/array/reduce/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/ja/docs/Web/JavaScript/Reference","title":"JavaScript リファレンス"},{"uri":"/ja/docs/Web/JavaScript/Reference/Global_Objects","title":"標準組み込みオブジェクト"},{"uri":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array","title":"Array"},{"uri":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce","title":"Array.prototype.reduce()"}],"pageTitle":"Array.prototype.reduce() - JavaScript | MDN","noIndexing":false}}