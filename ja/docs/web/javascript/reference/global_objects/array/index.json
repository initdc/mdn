{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Array","mdn_url":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects\">標準組み込みオブジェクト</a></strong></li><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>プロパティ</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/@@species\"><code>get Array[@@species]</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/@@unscopables\"><code>Array.prototype[@@unscopables]</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/length\"><code>Array.prototype.length</code></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>メソッド</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator\"><code>Array.prototype[@@iterator]()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/at\"><code>Array.prototype.at()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\"><code>Array.prototype.concat()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\"><code>Array.prototype.copyWithin()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/entries\"><code>Array.prototype.entries()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/every\"><code>Array.prototype.every()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/fill\"><code>Array.prototype.fill()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\"><code>Array.prototype.filter()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/find\"><code>Array.prototype.find()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\"><code>Array.prototype.findIndex()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast\"><code>Array.prototype.findLast()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex\"><code>Array.prototype.findLastIndex()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\"><code>Array.prototype.flat()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap\"><code>Array.prototype.flatMap()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"><code>Array.prototype.forEach()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/from\"><code>Array.from()</code></a></li><li><svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/group\"><code>Array.prototype.group()</code></a></li><li><svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/groupToMap\"><code>Array.prototype.groupToMap()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\"><code>Array.prototype.includes()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\"><code>Array.prototype.indexOf()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\"><code>Array.isArray()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/join\"><code>Array.prototype.join()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/keys\"><code>Array.prototype.keys()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf\"><code>Array.prototype.lastIndexOf()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"><code>Array.prototype.map()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/of\"><code>Array.of()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\"><code>Array.prototype.pop()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/push\"><code>Array.prototype.push()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\"><code>Array.prototype.reduce()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight\"><code>Array.prototype.reduceRight()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\"><code>Array.prototype.reverse()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\"><code>Array.prototype.shift()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\"><code>Array.prototype.slice()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/some\"><code>Array.prototype.some()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\"><code>Array.prototype.sort()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"><code>Array.prototype.splice()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString\"><code>Array.prototype.toLocaleString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/toString\"><code>Array.prototype.toString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\"><code>Array.prototype.unshift()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/values\"><code>Array.prototype.values()</code></a></li></ol></li><li><strong>継承</strong></li><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li><a href=\"#\"><strong>プロパティ</strong></a><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function.prototype.displayName</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function.prototype.length</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function.prototype.name</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function.prototype.prototype</code></a></li></ol></li><li><a href=\"#\"><strong>メソッド</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></li><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>プロパティ</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>メソッド</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>Array</code></strong> オブジェクトは、他のプログラミング言語の配列と同様に、<a href=\"/ja/docs/Learn/JavaScript/First_steps/Arrays\">複数の項目の集合を単一の変数名の下に格納</a>することができ、<a href=\"#%E4%BE%8B\">共通の配列操作を行う</a>ためのメンバーを持っています。</p>"}},{"type":"prose","value":{"id":"解説","title":"解説","isH3":false,"content":"<p>JavaScript では、配列は<a href=\"/ja/docs/Glossary/Primitive\">プリミティブ</a>ではなく、次のようなコアの性質を持つ <code>Array</code> オブジェクトです。</p>\n<ul>\n  <li><strong>JavaScript の配列はリサイズ可能</strong>であり、<strong>異なる<a href=\"/ja/docs/Web/JavaScript/Data_structures\">データ型</a>を交ぜて格納することができます</strong>。（これらの性質が望ましくない場合は、代わりに<a href=\"/ja/docs/Web/JavaScript/Typed_arrays\">型付き配列</a>を使用してください）。</li>\n  <li><strong>JavaScript の配列は連想配列ではありません</strong>。<a href=\"#%E3%83%A1%E3%83%A2\">配列の要素は添字として任意の文字列を使用してアクセスすることができません</a>。非負の整数（またはそれぞれの文字列表現）を添字として使用してアクセスする必要があります。</li>\n  <li><strong>JavaScript の配列は<a href=\"https://ja.wikipedia.org/wiki/%E3%82%AA%E3%83%AA%E3%82%B8%E3%83%B3\" class=\"external\" rel=\" noopener\">ゼロオリジン</a>です</strong>。配列の最初の要素は <code>0</code> の位置にあり、 2 番目の要素は <code>1</code> の位置にあるといった具合です。そして、最後の要素は配列の <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/length\"><code>length</code></a> プロパティの値から <code>1</code> を引いた位置になります。</li>\n  <li><strong>JavaScript の<a href=\"#%E9%85%8D%E5%88%97%E3%81%AE%E3%82%B3%E3%83%94%E3%83%BC\">コピー操作</a>は<a href=\"/ja/docs/Glossary/Shallow_copy\">シャローコピー</a>を生成します</strong>。（あらゆる JavaScript オブジェクトに対する標準の組み込みのコピー操作はすべて、<a href=\"/ja/docs/Glossary/Deep_copy\">ディープコピー</a>ではなくシャローコピーを生成します。）</li>\n</ul>"}},{"type":"prose","value":{"id":"コンストラクター","title":"コンストラクター","isH3":false,"content":"<dl>\n  <dt id=\"array\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/Array\"><code>Array()</code></a></dt>\n  <dd>\n    <p>新しい <code>Array</code> オブジェクトを生成します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"静的プロパティ","title":"静的プロパティ","isH3":false,"content":"<dl>\n  <dt id=\"get_arrayspecies\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/@@species\"><code>get Array[@@species]</code></a></dt>\n  <dd>\n    <p><code>Array</code> コンストラクターを返します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"静的メソッド","title":"静的メソッド","isH3":false,"content":"<dl>\n  <dt id=\"array.from\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/from\"><code>Array.from()</code></a></dt>\n  <dd>\n    <p>新しい <code>Array</code> インスタンスを配列風 (array-like) または反復可能 (iterable) オブジェクトから生成します。</p>\n  </dd>\n  <dt id=\"array.isarray\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\"><code>Array.isArray()</code></a></dt>\n  <dd>\n    <p>配列であれば <code>true</code> を、配列でなければ <code>false</code> を返します。</p>\n  </dd>\n  <dt id=\"array.of\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/of\"><code>Array.of()</code></a></dt>\n  <dd>\n    <p>可変個の引数から、引数の個数や型に関わらず、新しい <code>Array</code> インスタンスを生成します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"インスタンスプロパティ","title":"インスタンスプロパティ","isH3":false,"content":"<dl>\n  <dt id=\"array.prototype.length\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/length\"><code>Array.prototype.length</code></a></dt>\n  <dd>\n    <p>配列内の要素数を反映します。</p>\n  </dd>\n  <dt id=\"array.prototypeunscopables\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/@@unscopables\"><code>Array.prototype[@@unscopables]</code></a></dt>\n  <dd>\n    <p>ES2015 版以前の ECMAScript 標準に含まれておらず、 <a href=\"/ja/docs/Web/JavaScript/Reference/Statements/with\"><code>with</code></a> による文のバインドの目的には無視されるプロパティ名を含みます。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"インスタンスメソッド","title":"インスタンスメソッド","isH3":false,"content":"<dl>\n  <dt id=\"array.prototype.at\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/at\"><code>Array.prototype.at()</code></a></dt>\n  <dd>\n    <p>指定された位置にある配列の項目を返します。負の整数も指定可能で、末尾の項目から戻ります。</p>\n  </dd>\n  <dt id=\"array.prototype.concat\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\"><code>Array.prototype.concat()</code></a></dt>\n  <dd>\n    <p>この配列に他の配列や値を結合して新しい配列を返します。</p>\n  </dd>\n  <dt id=\"array.prototype.copywithin\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\"><code>Array.prototype.copyWithin()</code></a></dt>\n  <dd>\n    <p>配列内で配列内の連続した要素を複写します。</p>\n  </dd>\n  <dt id=\"array.prototype.entries\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/entries\"><code>Array.prototype.entries()</code></a></dt>\n  <dd>\n    <p>新しい<a href=\"/ja/docs/Web/JavaScript/Guide/Iterators_and_Generators\"><em>配列反復子</em></a>オブジェクトを返します。このオブジェクトは、配列中のそれぞれの位置に対するキー/値の組を保持しています。</p>\n  </dd>\n  <dt id=\"array.prototype.every\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/every\"><code>Array.prototype.every()</code></a></dt>\n  <dd>\n    <p>指定したテスト関数を配列中のすべての要素が満たした場合に <code>true</code> を返します。</p>\n  </dd>\n  <dt id=\"array.prototype.fill\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/fill\"><code>Array.prototype.fill()</code></a></dt>\n  <dd>\n    <p>配列内の指定した開始位置から終了位置までの要素を固定値で埋めます。</p>\n  </dd>\n  <dt id=\"array.prototype.filter\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\"><code>Array.prototype.filter()</code></a></dt>\n  <dd>\n    <p>指定したフィルタリング関数が <code>true</code> を返す、配列中の要素を格納した新しい配列を生成します。</p>\n  </dd>\n  <dt id=\"array.prototype.find\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/find\"><code>Array.prototype.find()</code></a></dt>\n  <dd>\n    <p>指定されたたテスト関数を満たす、配列の最初の要素の値を返します。適切な要素が見つからなかった場合は <code>undefined</code> を返します。</p>\n  </dd>\n  <dt id=\"array.prototype.findindex\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\"><code>Array.prototype.findIndex()</code></a></dt>\n  <dd>\n    <p>指定されたテスト関数を満たす、配列の最初の要素の添字を返します。適切な要素が見つからなかった場合は <code>-1</code> を返します。</p>\n  </dd>\n  <dt id=\"array.prototype.findlast\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast\"><code>Array.prototype.findLast()</code></a></dt>\n  <dd>\n    <p>指定されたたテスト関数を満たす、配列の最後の要素の値を返します。適切な要素が見つからなかった場合は <code>undefined</code> を返します。</p>\n  </dd>\n  <dt id=\"array.prototype.findlastindex\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex\"><code>Array.prototype.findLastIndex()</code></a></dt>\n  <dd>\n    <p>指定されたテスト関数を満たす、配列の最後の要素の添字を返します。適切な要素が見つからなかった場合は <code>-1</code> を返します。</p>\n  </dd>\n  <dt id=\"array.prototype.flat\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\"><code>Array.prototype.flat()</code></a></dt>\n  <dd>\n    <p>すべての部分配列の要素を指定された深さまで再帰的に連結した新しい配列を返します。</p>\n  </dd>\n  <dt id=\"array.prototype.flatmap\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap\"><code>Array.prototype.flatMap()</code></a></dt>\n  <dd>\n    <p>コールバック関数を呼び出し元の配列の各要素に適用し、その結果を一段階平坦化した新しい配列を返します。</p>\n  </dd>\n  <dt id=\"array.prototype.foreach\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"><code>Array.prototype.forEach()</code></a></dt>\n  <dd>\n    <p>配列中のそれぞれの要素について関数を呼び出します。</p>\n  </dd>\n  <dt id=\"array.prototype.group\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/group\"><code>Array.prototype.group()</code></a> <svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg></dt>\n  <dd>\n    <p>テスト関数が返す文字列に従って、配列の要素をオブジェクトにグループ化します。</p>\n  </dd>\n  <dt id=\"array.prototype.grouptomap\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/groupToMap\"><code>Array.prototype.groupToMap()</code></a> <svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg></dt>\n  <dd>\n    <p>テスト関数が返す値に従って、配列の要素を <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> にグループ化します。</p>\n  </dd>\n  <dt id=\"array.prototype.includes\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\"><code>Array.prototype.includes()</code></a></dt>\n  <dd>\n    <p>この配列が特定の要素を含むかどうか判定し、その結果を <code>true</code> または <code>false</code> で返します。</p>\n  </dd>\n  <dt id=\"array.prototype.indexof\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\"><code>Array.prototype.indexOf()</code></a></dt>\n  <dd>\n    <p>指定された値と等しい値を持つ最初の（添字の一番小さい）要素の添字を返します。見つからない場合、<code>-1</code> を返します。</p>\n  </dd>\n  <dt id=\"array.prototype.join\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/join\"><code>Array.prototype.join()</code></a></dt>\n  <dd>\n    <p>配列のすべての要素を結合した文字列を返します。</p>\n  </dd>\n  <dt id=\"array.prototype.keys\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/keys\"><code>Array.prototype.keys()</code></a></dt>\n  <dd>\n    <p>新しい<a href=\"/ja/docs/Web/JavaScript/Guide/Iterators_and_Generators\"><em>配列反復子</em></a>を返します。このオブジェクトは配列中の各添字のキーを保持します。</p>\n  </dd>\n  <dt id=\"array.prototype.lastindexof\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf\"><code>Array.prototype.lastIndexOf()</code></a></dt>\n  <dd>\n    <p>指定された値と等しい値を持つ最後の (添字の一番大きい) 要素の添字を返します。見つからない場合、<code>-1</code> を返します。</p>\n  </dd>\n  <dt id=\"array.prototype.map\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"><code>Array.prototype.map()</code></a></dt>\n  <dd>\n    <p>配列内のすべての要素に対して与えられた関数を呼び出し、その結果を格納した新しい配列を生成します。</p>\n  </dd>\n  <dt id=\"array.prototype.pop\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\"><code>Array.prototype.pop()</code></a></dt>\n  <dd>\n    <p>配列から最後の要素を取り除き、返値として返します。</p>\n  </dd>\n  <dt id=\"array.prototype.push\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/push\"><code>Array.prototype.push()</code></a></dt>\n  <dd>\n    <p>配列の最後に 1 個以上の要素を追加し、新しい配列の <code>length</code> を返します。</p>\n  </dd>\n  <dt id=\"array.prototype.reduce\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\"><code>Array.prototype.reduce()</code></a></dt>\n  <dd>\n    <p>アキュムレーターと配列内のすべての要素に対して (左から右の順で) 関数を適用し、単一の値に還元します。</p>\n  </dd>\n  <dt id=\"array.prototype.reduceright\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight\"><code>Array.prototype.reduceRight()</code></a></dt>\n  <dd>\n    <p>アキュムレーターと配列内のすべての要素に対して (右から左の順で) 関数を適用し、単一の値に還元します。</p>\n  </dd>\n  <dt id=\"array.prototype.reverse\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\"><code>Array.prototype.reverse()</code></a></dt>\n  <dd>\n    <p>配列の要素の順番を逆転させます (最初の要素は最後に、最後の要素は最初になります)。</p>\n  </dd>\n  <dt id=\"array.prototype.shift\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\"><code>Array.prototype.shift()</code></a></dt>\n  <dd>\n    <p>配列から最初の要素を取り除き、その要素を返します。</p>\n  </dd>\n  <dt id=\"array.prototype.slice\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\"><code>Array.prototype.slice()</code></a></dt>\n  <dd>\n    <p>配列の一部を取り出して新しい配列として返します。</p>\n  </dd>\n  <dt id=\"array.prototype.some\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/some\"><code>Array.prototype.some()</code></a></dt>\n  <dd>\n    <p>指定したテスト関数を配列中の少なくとも 1 個の要素が満たした場合に <code>true</code> を返します。</p>\n  </dd>\n  <dt id=\"array.prototype.sort\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\"><code>Array.prototype.sort()</code></a></dt>\n  <dd>\n    <p>配列内で要素を整列し、配列を返します。</p>\n  </dd>\n  <dt id=\"array.prototype.splice\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"><code>Array.prototype.splice()</code></a></dt>\n  <dd>\n    <p>配列に対して複数の要素を追加したり取り除いたりします。</p>\n  </dd>\n  <dt id=\"array.prototype.tolocalestring\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString\"><code>Array.prototype.toLocaleString()</code></a></dt>\n  <dd>\n    <p>配列とその要素を表すロケールに従った文字列を返します。<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a> メソッドを上書きします。</p>\n  </dd>\n  <dt id=\"array.prototype.tostring\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/toString\"><code>Array.prototype.toString()</code></a></dt>\n  <dd>\n    <p>配列とその要素を表す文字列を返します。<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a> メソッドを上書きしています。</p>\n  </dd>\n  <dt id=\"array.prototype.unshift\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\"><code>Array.prototype.unshift()</code></a></dt>\n  <dd>\n    <p>配列の最初に 1 個以上の要素を追加し、配列の変更後の <code>length</code> を返します。</p>\n  </dd>\n  <dt id=\"array.prototype.values\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/values\"><code>Array.prototype.values()</code></a></dt>\n  <dd>\n    <p>新しい<a href=\"/ja/docs/Web/JavaScript/Guide/Iterators_and_Generators\"><em>配列反復子</em></a>オブジェクトを返します。このオブジェクトは、配列中の各添字の値を保持します。</p>\n  </dd>\n  <dt id=\"array.prototypeiterator\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator\"><code>Array.prototype[@@iterator]()</code></a></dt>\n  <dd>\n    <p>既定では <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/values\"><code>values()</code></a> 関数を返します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":"<p>この節では、 JavaScript で一般的な配列操作の例をいくつか紹介します。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> まだ配列の基本に慣れていない場合は、最初に <a href=\"/ja/docs/Learn/JavaScript/First_steps/Arrays\">JavaScript の第一歩: 配列</a> の<a href=\"/ja/docs/Learn/JavaScript/First_steps/Arrays#%E9%85%8D%E5%88%97%E3%81%A8%E3%81%AF%E4%BD%95%E3%81%8B\">配列とは何かの説明</a>、およびよくある配列の操作の他の例を読んでみてください。</p>\n</div>"}},{"type":"prose","value":{"id":"配列の作成","title":"配列の作成","isH3":true,"content":"<p>ここでは、新しい配列を作る 3 通りの方法を示しています。最初のものは<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/Array#%E9%85%8D%E5%88%97%E3%83%AA%E3%83%86%E3%83%A9%E3%83%AB%E8%A8%98%E6%B3%95\">配列リテラル記法</a>を使用したもので、次は <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/Array\"><code>Array()</code></a> コンストラクターを使用して、最後は <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/split\"><code>String.prototype.split()</code></a> を使用して文字列から配列を構築しています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 'fruits' 配列が配列リテラル記法で作成されています。</span>\n<span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'りんご'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'バナナ'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 2</span>\n\n<span class=\"token comment\">// 'fruits2' 配列が Array() コンストラクターで作成されています。</span>\n<span class=\"token keyword\">const</span> fruits2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string\">'りんご'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'バナナ'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 2</span>\n\n<span class=\"token comment\">// 'fruits3' 配列が String.prototype.split() を使用して作成されています。</span>\n<span class=\"token keyword\">const</span> fruits3 <span class=\"token operator\">=</span> <span class=\"token string\">'りんご, バナナ'</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">', '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits3<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 2</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"配列から文字列を生成","title":"配列から文字列を生成","isH3":true,"content":"<p>この例では <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/join\"><code>join()</code></a> メソッドを使用して、配列 <code>fruits</code> から文字列を生成しています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'りんご'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'バナナ'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fruitsString <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">', '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruitsString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"りんご, バナナ\"</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"添字による配列の要素へのアクセス","title":"添字による配列の要素へのアクセス","isH3":true,"content":"<p>この例では配列 <code>fruits</code> 内の項目に、配列内の位置を示す添字を指定することでアクセスする方法を示しています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'りんご'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'バナナ'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 配列の最初の要素の添字は必ず 0 です。</span>\nfruits<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// りんご</span>\n\n<span class=\"token comment\">// 配列の 2 番目の要素の添字は必ず 1 です。</span>\nfruits<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// バナナ</span>\n\n<span class=\"token comment\">// 配列の末尾の要素の添字は、常に配列の長さよりも</span>\n<span class=\"token comment\">// 1 だけ小さいものです。</span>\nfruits<span class=\"token punctuation\">[</span>fruits<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// バナナ</span>\n\n<span class=\"token comment\">// 配列の長さよりも大きな添字を使用すると、</span>\n<span class=\"token comment\">// 'undefined' が返されます。</span>\nfruits<span class=\"token punctuation\">[</span><span class=\"token number\">99</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"配列内の項目の添字を検索","title":"配列内の項目の添字を検索","isH3":true,"content":"<p>この例では <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\"><code>indexOf()</code></a> メソッドを使用して、文字列 <code>\"バナナ\"</code> の位置（添字）を配列 <code>fruits</code> の中から探します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'りんご'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'バナナ'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'バナナ'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 1</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"配列内に特定の項目があるかどうかを検査","title":"配列内に特定の項目があるかどうかを検査","isH3":true,"content":"<p>この例では、配列 <code>fruits</code> が <code>\"バナナ\"</code> と <code>\"さくらんぼ\"</code> を含んでいるかどうかを確認する 2 つの方法を示しています。最初は <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\"><code>includes()</code></a> メソッドで、次に <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\"><code>indexOf()</code></a> メソッドで、添字の値が <code>-1</code> でないことを確認します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'りんご'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'バナナ'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nfruits<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'バナナ'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nfruits<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'さくらんぼ'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n\n<span class=\"token comment\">// indexOf() が -1 を返さない場合、その配列はその項目を持っています。</span>\nfruits<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'バナナ'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nfruits<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'さくらんぼ'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"配列に項目を追加","title":"配列に項目を追加","isH3":true,"content":"<p>この例では、 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/push\"><code>push()</code></a> メソッドを使用して新しい文字列を配列 <code>fruits</code> に追加しています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'りんご'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'バナナ'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> newLength <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'みかん'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"りんご\", \"バナナ\", \"みかん\"]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 3</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"配列から最後の項目を取り除く","title":"配列から最後の項目を取り除く","isH3":true,"content":"<p>この例では、 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\"><code>pop()</code></a> メソッドを使用して配列 <code>fruits</code> から最後の項目を取り除いています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'りんご'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'バナナ'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'みかん'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> removedItem <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"りんご\", \"バナナ\"]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>removedItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// みかん</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> <code>pop()</code> は配列の最後の項目を削除するためだけに使用できます。配列の最後にある複数の項目を削除したい場合は、次の例を参照してください。</p>\n</div>"}},{"type":"prose","value":{"id":"配列の最後から複数の項目を取り除く","title":"配列の最後から複数の項目を取り除く","isH3":true,"content":"<p>この例では <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"><code>splice()</code></a> メソッドを使用して、配列 <code>fruits</code> から最後の 3 つの項目を取り除いています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'りんご'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'バナナ'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'いちご'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'マンゴー'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'さくらんぼ'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> removedItems <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"りんご\", \"バナナ\"]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>removedItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"いちご\", \"マンゴー\", \"さくらんぼ\"]</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"配列を最初の_n_項目ちょうどに切り詰める","title":"配列を最初の <em>N</em> 項目ちょうどに切り詰める","isH3":true,"content":"<p>この例では <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"><code>splice()</code></a> メソッドはを使用して、配列 <code>fruits</code> を最初の 2 項目ちょうどに切り詰めます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'りんご'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'バナナ'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'いちご'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'マンゴー'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'さくらんぼ'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> removedItems <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"りんご\", \"バナナ\"]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>removedItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"いちご\", \"マンゴー\", \"さくらんぼ\"]</span>\n</code></pre></div>","titleAsText":"配列を最初の N 項目ちょうどに切り詰める"}},{"type":"prose","value":{"id":"配列の最初から項目を取り除く","title":"配列の最初から項目を取り除く","isH3":true,"content":"<p>この例では <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\"><code>shift()</code></a> メソッドを使用して、最初の項目を配列 <code>fruits</code> から取り除きます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'りんご'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'バナナ'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> removedItem <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"バナナ\"]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>removedItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// りんご</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> <code>shift()</code> は最初の項目を配列から取り除く場合にのみ使用できます。複数の項目を配列の先頭から取り除く場合は、次の例を参照してください。</p>\n</div>"}},{"type":"prose","value":{"id":"配列の先頭から複数の項目を取り除く","title":"配列の先頭から複数の項目を取り除く","isH3":true,"content":"<p>この例では <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"><code>splice()</code></a> メソッドを使用して、配列 <code>fruits</code> から先頭の 3 項目を取り除きます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'りんご'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'いちご'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'さくらんぼ'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'バナナ'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'マンゴー'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> deleteCount <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> removedItems <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> deleteCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"バナナ\", \"マンゴー\"]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>removedItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"りんご\", \"いちご\", \"さくらんぼ\"]</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"配列に最初の項目を追加","title":"配列に最初の項目を追加","isH3":true,"content":"<p>この例では <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\"><code>unshift()</code></a> メソッドを使用して、配列 <code>fruits</code> の添字 <code>0</code> に新しい項目を追加します。これを配列の新しい先頭の項目にします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'バナナ'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'マンゴー'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> newLength <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token string\">'いちご'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"いちご\", \"バナナ\", \"マンゴー\"]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 3</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"添字を指定して単一の項目を取り除く","title":"添字を指定して単一の項目を取り除く","isH3":true,"content":"<p>この例では <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"><code>splice()</code></a> メソッドを使用して、文字列 <code>\"バナナ\"</code> を配列 <code>fruits</code> から取り除きます。 <code>\"バナナ\"</code> の位置の添字を指定します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'いちご'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'バナナ'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'マンゴー'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'バナナ'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> deleteCount <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> removedItems <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> deleteCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"いちご\", \"マンゴー\"]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>removedItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"バナナ\"]</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"添字を指定して複数の項目を取り除く","title":"添字を指定して複数の項目を取り除く","isH3":true,"content":"<p>この例では <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"><code>splice()</code></a> メソッドを使用して、文字列 <code>\"バナナ\"</code> および <code>\"いちご\"</code> を配列 <code>fruits</code> から取り除きます。 <code>\"バナナ\"</code> の位置の添字と共に、取り除く項目の総数を指定します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'りんご'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'バナナ'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'いちご'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'マンゴー'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> deleteCount <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> removedItems <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> deleteCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"りんご\", \"マンゴー\"]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>removedItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"バナナ\", \"いちご\"]</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"配列の複数の項目を置換","title":"配列の複数の項目を置換","isH3":true,"content":"<p>この例では <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"><code>splice()</code></a> メソッドを使用して、配列 <code>fruits</code> 内の 2 つの項目を置き換えます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'りんご'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'バナナ'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'いちご'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> deleteCount <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> removedItems <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> deleteCount<span class=\"token punctuation\">,</span> <span class=\"token string\">'マンゴー'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'さくらんぼ'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"りんご\", \"マンゴー\", \"さくらんぼ\"]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>removedItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"バナナ\", \"いちご\"]</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"配列の走査","title":"配列の走査","isH3":true,"content":"<p>この例では <a href=\"/ja/docs/Web/JavaScript/Reference/Statements/for...of\"><code>for...of</code></a> ループを使用して配列 <code>fruits</code> を走査し、それぞれの項目をコンソールへログ出力します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'りんご'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'マンゴー'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'さくらんぼ'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> fruit <span class=\"token keyword\">of</span> fruits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// りんご</span>\n<span class=\"token comment\">// マンゴー</span>\n<span class=\"token comment\">// さくらんぼ</span>\n</code></pre></div>\n<p>ただし <code>for...of</code> は配列を走査する数々の方法の一つにすぎません。他の方法は<a href=\"/ja/docs/Web/JavaScript/Guide/Loops_and_iteration\">ループと反復処理</a>を参照したり、 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/every\"><code>every()</code></a>, <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\"><code>filter()</code></a>, <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap\"><code>flatMap()</code></a>, <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"><code>map()</code></a>, <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\"><code>reduce()</code></a>, <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight\"><code>reduceRight()</code></a> の各メソッドのドキュメントを参照したり、また <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"><code>forEach()</code></a> メソッドを使用している次の例を参照したりしてください。</p>"}},{"type":"prose","value":{"id":"配列のそれぞれの要素に対して関数を呼び出す","title":"配列のそれぞれの要素に対して関数を呼び出す","isH3":true,"content":"<p>この例では <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"><code>forEach()</code></a> メソッドを使用して、配列 <code>fruits</code> のそれぞれの要素に対して関数を呼び出しています。この関数ではそれぞれの項目を、その項目の添字の番号と共にコンソールへログ出力します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'りんご'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'マンゴー'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'さくらんぼ'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nfruits<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// りんご 0</span>\n<span class=\"token comment\">// マンゴー 1</span>\n<span class=\"token comment\">// さくらんぼ 2</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"複数の配列を結合","title":"複数の配列を結合","isH3":true,"content":"<p>この例では <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\"><code>concat()</code></a> メソッドを使用して、配列 <code>fruits</code> を配列 <code>moreFruits</code> と結合子、新しい配列 <code>combinedFruits</code> を生成します。 <code>fruits</code> と <code>moreFruits</code> は変更されないことに注意してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'りんご'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'バナナ'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'いちご'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> moreFruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'マンゴー'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'さくらんぼ'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> combinedFruits <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>moreFruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>combinedFruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"りんご\", \"バナナ\", \"いちご\", \"マンゴー\", \"さくらんぼ\"]</span>\n\n<span class=\"token comment\">// 配列 'fruits' は変更されないままです。</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"りんご\", \"バナナ\", \"いちご\"]</span>\n\n<span class=\"token comment\">// 配列 'moreFruits' も変更されないままです。</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>moreFruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"マンゴー\", \"さくらんぼ\"]</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"配列のコピー","title":"配列のコピー","isH3":true,"content":"<p>この例では、既存の配列 <code>fruits</code> から新しい配列を生成する方法を 3 通り示します。最初のものは<a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">スプレッド構文</a>を使用するもので、次は <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/from\"><code>from()</code></a> メソッドを使用するもの、その次は <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\"><code>slice()</code></a> 円そっどを使用するものです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'いちご'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'マンゴー'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// スプレッド構文でコピーを作成します。</span>\n<span class=\"token keyword\">const</span> fruitsCopy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>fruits<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"いちご\", \"マンゴー\"]</span>\n\n<span class=\"token comment\">// from() メソッドでコピーを作成します。</span>\n<span class=\"token keyword\">const</span> fruitsCopy2 <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"いちご\", \"マンゴー\"]</span>\n\n<span class=\"token comment\">// slice() メソッドでコピーを作成します。</span>\n<span class=\"token keyword\">const</span> fruitsCopy3 <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"いちご\", \"マンゴー\"]</span>\n</code></pre></div>\n<p>組み込みの配列コピー操作（<a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">スプレッド構文</a>, <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/from\"><code>Array.from()</code></a>, <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\"><code>Array.prototype.slice()</code></a>, <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\"><code>Array.prototype.concat()</code></a>）はすべて、<a href=\"/ja/docs/Glossary/Shallow_copy\">シャローコピー</a>を生成します。配列の<a href=\"/ja/docs/Glossary/Deep_copy\">ディープコピー</a>を得る場合は、 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a> で配列を JSON 文字列に変換し、 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\"><code>JSON.parse()</code></a> でその文字列を新しい配列に戻せば、元の配列から完全に独立した新しい配列ができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruitsDeepCopy <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>また、 <a href=\"/ja/docs/Web/API/structuredClone\"><code>structuredClone()</code></a> メソッドを使用してディープコピーを作成することもできます。これは、ソース内の<a href=\"/ja/docs/Glossary/Transferable_objects\">移譲可能オブジェクト</a>を、コピーするのではなく、新しいコピーに移譲できる利点があります。</p>\n<p>最後に、既存の配列を新しい変数に代入しても、配列やその要素のコピーは作成されないことを理解することが重要です。つまり、元の配列の名前と新しい変数の名前は、まったく同じオブジェクトの名前に過ぎません（したがって、常に<a href=\"/ja/docs/Web/JavaScript/Equality_comparisons_and_sameness#strict_equality_using_\">厳密等価</a>であると評価されます）。したがって、元の配列の値や新しい変数の値に何らかの変更を加えると、もう片方も変更されます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'いちご'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'マンゴー'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fruitsAlias <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 'fruits' と 'fruitsAlias' は同じオブジェクトとなり、厳密等価になります。</span>\nfruits <span class=\"token operator\">===</span> fruitsAlias <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// 配列 'fruits' を変更すると、 'fruitsAlias' も変化します。</span>\nfruits<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token string\">'りんご'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'バナナ'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ['りんご', 'バナナ', 'いちご', 'マンゴー']</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruitsAlias<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ['りんご', 'バナナ', 'いちご', 'マンゴー']</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"配列の要素をグループ化","title":"配列の要素をグループ化","isH3":true,"content":"<p><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/group\"><code>Array.prototype.group()</code></a> メソッドを使用して、配列の要素をグループ化することができます。現在の要素のグループを示す文字列を返すテスト関数を使用します。</p>\n<p>ここでは、<code>name</code> と <code>type</code> を持つ \"food\" オブジェクトを含む、単純な配列 inventory を用意しています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> inventory <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'アスパラガス'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'vegetables'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'バナナ'</span><span class=\"token punctuation\">,</span>  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'fruit'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'羊'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'meat'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'さくらんぼ'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'fruit'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'魚'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'meat'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>group()</code> を使用するには、現在の要素、およびオプションで現在の添字と配列を指定して呼び出され、要素のグループを示す文字列を返すコールバック関数を指定します。</p>\n<p>\n  以下のコードでは、アロー関数を使用してそれぞれの配列要素の <code>type</code> を返しています（これは、<a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#unpacking_fields_from_objects_passed_as_a_function_parameter\">関数引数のオブジェクト構造化構文</a>を使用して、渡されたオブジェクトから型要素を展開するものです）。\n  結果は、コールバックから返された一意の文字列を名前とするプロパティを持つオブジェクトになります。\n  各プロパティには、グループ内の要素を含む配列が割り当てられます。\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> inventory<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> type <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>vegetables<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 期待される出力: Array [Object { name: \"アスパラガス\", type: \"vegetables\" }]</span>\n</code></pre></div>\n<p>\n  返されたオブジェクトは、元の配列と<em>同じ</em>要素を参照していることに注意してください（ディープコピーではありません）。\n  これらの要素の内部構造を変更すると、元の配列と返されたオブジェクトの両方に反映されます。\n</p>\n<p>\n  例えば、グループ化する情報が変更される可能性のあるオブジェクトに関連する場合など、キーとして文字列を使用できない場合は、代わりに <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/groupToMap\"><code>Array.prototype.groupToMap()</code></a> を使用することができます。\n  これは <code>group</code> ととても似ていますが、配列の要素を、任意の値（<a href=\"/ja/docs/Glossary/Object\">オブジェクト</a>または<a href=\"/ja/docs/Glossary/Primitive\">プリミティブ</a>）をキーとして使用できる <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> にグループ化する点が異なります。\n</p>"}},{"type":"prose","value":{"id":"その他の例","title":"その他の例","isH3":false,"content":""}},{"type":"prose","value":{"id":"二次元配列の生成","title":"二次元配列の生成","isH3":true,"content":"<p>以下では、文字列の二次元配列としてチェス盤を生成しています。最初の動きは <code>'p'</code> を <code>board[6][4]</code> から <code>board[4][4]</code> にコピーすることで行います。古い位置 <code>[6][4]</code> は空白にします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> board <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'R'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'N'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Q'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'K'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'N'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'R'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'P'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'P'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'P'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'P'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'P'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'P'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'P'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'P'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'q'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'k'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>board<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// キングの前のポーンを 2 つ前へ移動</span>\nboard<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> board<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nboard<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>出力を示します。</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">R,N,B,Q,K,B,N,R\nP,P,P,P,P,P,P,P\n , , , , , , ,\n , , , , , , ,\n , , , , , , ,\n , , , , , , ,\np,p,p,p,p,p,p,p\nr,n,b,q,k,b,n,r\n\nR,N,B,Q,K,B,N,R\nP,P,P,P,P,P,P,P\n , , , , , , ,\n , , , , , , ,\n , , , ,p, , ,\n , , , , , , ,\np,p,p,p, ,p,p,p\nr,n,b,q,k,b,n,r\n</pre></div>"}},{"type":"prose","value":{"id":"配列を使って値のセットを表にする","title":"配列を使って値のセットを表にする","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  values<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token number\">2</span> <span class=\"token operator\">**</span> x<span class=\"token punctuation\">,</span>\n    <span class=\"token number\">2</span> <span class=\"token operator\">*</span> x <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>結果は次のようになります。</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">// 最初の列は添字です\n0  1    0\n1  2    2\n2  4    8\n3  8    18\n4  16   32\n5  32   50\n6  64   72\n7  128  98\n8  256  128\n9  512  162\n</pre></div>"}},{"type":"prose","value":{"id":"メモ","title":"メモ","isH3":false,"content":"<p><code>Array</code> オブジェクトは要素の添字として任意の文字列を（<a href=\"https://en.wikipedia.org/wiki/Associative_array\" class=\"external\" rel=\" noopener\">連想配列</a>のように）使用することはできません。非負の整数（またはその文字列形式）を使用しなければなりません。整数以外の値で設定したりアクセスしたりすると、配列のリスト自体の要素を設定したり取り出したりすることはできませんが、その配列の<a href=\"/ja/docs/Web/JavaScript/Data_structures#%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3\">オブジェクトプロパティの集合</a>に関連する変数を設定したりアクセスしたりすることができます。配列のオブジェクトプロパティと配列要素のリストは別個のものであり、配列の<a href=\"/ja/docs/Web/JavaScript/Guide/Indexed_collections#%E9%85%8D%E5%88%97%E3%81%AE%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89\">探索や変更操作</a>はこれらの名前付きプロパティに適用することができません。</p>\n<p><code>toString</code> が一つのプロパティであるのと同様に（ただし厳密には <code>toString()</code> はメソッドですが）、配列における配列要素はオブジェクトのプロパティです。しかし、次のように配列にアクセスしようとすると、プロパティ名が妥当でないため、構文エラーが発生します。</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 構文エラー</span>\n</code></pre></div>\n<p>JavaScript の構文では、数字で始まるプロパティには<a href=\"/ja/docs/Web/JavaScript/Guide/Working_with_Objects#objects_and_properties\">ブラケット記法</a>を使う必要があり、<a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Property_Accessors\">ドット記法</a>を使うことはできません。また、配列の添字を引用符で囲むことができますが（<code>years[2]</code> の代わりに <code>years['2']</code> のように）、ふつうはそうする必要はありません。</p>\n<p><code>years[2]</code> の <code>2</code> は最終的に、JavaScript エンジンが内部的に <code>toString</code> メソッドで型変換することで文字列にされます。これは '2' と '02' が <code>years</code> オブジェクトの異なる場所を指すようにするためでです。このため、以下の例は <code>true</code> がログ出力されます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>years<span class=\"token punctuation\">[</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> years<span class=\"token punctuation\">[</span><span class=\"token string\">'02'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>years['2']</code> だけが実際の配列の添字です。 <code>years['02']</code> は自由な文字列のプロパティであり、配列の反復処理では処理されません。</p>"}},{"type":"prose","value":{"id":"length_と数値プロパティとの関係","title":"length と数値プロパティとの関係","isH3":true,"content":"<p>JavaScript の配列の <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/length\"><code>length</code></a> プロパティと数値プロパティは関連しています。</p>\n<p>配列の一部の組込みメソッド（例えば <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/join\"><code>join()</code></a>, <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\"><code>slice()</code></a>, <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\"><code>indexOf()</code></a>, など）は、配列の <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/length\"><code>length</code></a> プロパティの値はメソッドの呼び出し時の値を考慮します。</p>\n<p>他にも（例えば <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/push\"><code>push()</code></a>, <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"><code>splice()</code></a>, など）、結果として配列の <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/length\"><code>length</code></a> プロパティを更新するメソッドがあります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nfruits<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'バナナ'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'りんご'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'もも'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n</code></pre></div>\n<p>JavaScript の配列で、配列の添字として妥当なプロパティであり、かつ現在の配列の範囲の外にある添字を設定すると、エンジンは配列の <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/length\"><code>length</code></a> プロパティを更新します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>fruits<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'マンゴー'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 'マンゴー'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// ['0', '1', '2', '5']</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 6</span>\n</code></pre></div>\n<p><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/length\"><code>length</code></a> を増加させてみます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>fruits<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// ['バナナ', 'りんご', 'もも', 空 x 2, 'マンゴー', 空 x 4]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['0', '1', '2', '5']</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 10</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// undefined</span>\n</code></pre></div>\n<p>一方、 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/length\"><code>length</code></a> プロパティの数を減らすと、要素が削除されます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>fruits<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['0', '1']</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 2</span>\n</code></pre></div>\n<p>これらについては <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/length\"><code>Array/length</code></a> のページで詳しく解説します。</p>"}},{"type":"prose","value":{"id":"照合結果を使用して配列を作成","title":"照合結果を使用して配列を作成","isH3":true,"content":"<p>正規表現 (<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a>) と文字列の照合結果から配列を生成することができます。この配列には、プロパティと、一致したものに関する情報を提供する要素を持ちます。このような配列は <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code>RegExp.prototype.exec()</code></a> や <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/match\"><code>String.prototype.match()</code></a> から返されます。</p>\n<p>例えば、次のようになります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 1 文字の d と、続く 1 文字以上の b と、続く 1 文字の d に一致します</span>\n<span class=\"token comment\">// 一致した b およびそれに続く d を記憶します</span>\n<span class=\"token comment\">// 大文字小文字は区別しません</span>\n\n<span class=\"token keyword\">const</span> myRe <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">d(b+)(d)</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> execResult <span class=\"token operator\">=</span> myRe<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cdbBdbsbz'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>execResult<span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'cdbBdbsbz'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>execResult<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>execResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Array(3) [ \"dbBd\", \"bB\", \"d\" ]</span>\n</code></pre></div>\n<p>照合結果についての詳しい情報は、 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code>RegExp.prototype.exec()</code></a> および <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/match\"><code>String.prototype.match()</code></a> のページを参照してください。</p>"}},{"type":"specifications","value":{"title":"仕様書","id":"仕様書","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array-objects","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.Array"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"query":"javascript.builtins.Array","dataURL":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/bcd.json"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li>JavaScript ガイドより\n    <ul>\n      <li><a href=\"/ja/docs/Web/JavaScript/Guide/Working_with_Objects#%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%81%AE%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9%E4%BB%98%E3%81%91\">オブジェクトプロパティのインデックス付け</a></li>\n      <li><a href=\"/ja/docs/Web/JavaScript/Guide/Indexed_collections#array_object\">インデックス付きコレクション: <code>Array</code> オブジェクト</a></li>\n    </ul>\n  </li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Typed_arrays\">型付き配列</a></li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\">RangeError: invalid array length</a></li>\n</ul>"}}],"toc":[{"text":"解説","id":"解説"},{"text":"コンストラクター","id":"コンストラクター"},{"text":"静的プロパティ","id":"静的プロパティ"},{"text":"静的メソッド","id":"静的メソッド"},{"text":"インスタンスプロパティ","id":"インスタンスプロパティ"},{"text":"インスタンスメソッド","id":"インスタンスメソッド"},{"text":"例","id":"例"},{"text":"その他の例","id":"その他の例"},{"text":"メモ","id":"メモ"},{"text":"仕様書","id":"仕様書"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"Array オブジェクトは、他のプログラミング言語の配列と同様に、複数の項目の集合を単一の変数名の下に格納することができ、共通の配列操作を行うためのメンバーを持っています。","popularity":0.0093,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Array","locale":"en-US","native":"English (US)"},{"title":"Array","locale":"es","native":"Español"},{"title":"Array","locale":"fr","native":"Français"},{"title":"Array","locale":"ko","native":"한국어"},{"title":"Array","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Array","locale":"ru","native":"Русский"},{"title":"Array","locale":"zh-CN","native":"中文 (简体)"},{"title":"Array","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ja/web/javascript/reference/global_objects/array","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/javascript/reference/global_objects/array/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/ja/docs/Web/JavaScript/Reference","title":"JavaScript リファレンス"},{"uri":"/ja/docs/Web/JavaScript/Reference/Global_Objects","title":"標準組み込みオブジェクト"},{"uri":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Array","title":"Array"}],"pageTitle":"Array - JavaScript | MDN","noIndexing":false}}