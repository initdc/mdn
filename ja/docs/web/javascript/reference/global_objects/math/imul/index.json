{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Math.imul()","mdn_url":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/imul","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects\">標準組み込みオブジェクト</a></strong></li><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math\"><code>Math</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>プロパティ</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/E\"><code>Math.E</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/LN10\"><code>Math.LN10</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/LN2\"><code>Math.LN2</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG10E\"><code>Math.LOG10E</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG2E\"><code>Math.LOG2E</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/PI\"><code>Math.PI</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT1_2\"><code>Math.SQRT1_2</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT2\"><code>Math.SQRT2</code></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>メソッド</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/abs\"><code>Math.abs()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/acos\"><code>Math.acos()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/acosh\"><code>Math.acosh()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/asin\"><code>Math.asin()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh\"><code>Math.asinh()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/atan\"><code>Math.atan()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2\"><code>Math.atan2()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh\"><code>Math.atanh()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt\"><code>Math.cbrt()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil\"><code>Math.ceil()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\"><code>Math.clz32()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/cos\"><code>Math.cos()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh\"><code>Math.cosh()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/exp\"><code>Math.exp()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/expm1\"><code>Math.expm1()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\"><code>Math.floor()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/fround\"><code>Math.fround()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/hypot\"><code>Math.hypot()</code></a></li><li><em><code>Math.imul()</code></em></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/log\"><code>Math.log()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/log10\"><code>Math.log10()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p\"><code>Math.log1p()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/log2\"><code>Math.log2()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/max\"><code>Math.max()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/min\"><code>Math.min()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/pow\"><code>Math.pow()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/random\"><code>Math.random()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/round\"><code>Math.round()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\"><code>Math.sign()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/sin\"><code>Math.sin()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh\"><code>Math.sinh()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt\"><code>Math.sqrt()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/tan\"><code>Math.tan()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh\"><code>Math.tanh()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc\"><code>Math.trunc()</code></a></li></ol></li><li><strong>継承</strong></li><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>プロパティ</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>メソッド</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>Math.imul()</code></strong> 関数は、2 つの引数で C 言語風の 32 ビット乗算を行った結果を返します。</p><iframe class=\"interactive\" height=\"490\" src=\"https://interactive-examples.mdn.mozilla.net/pages/js/math-imul.html\" title=\"MDN Web Docs Interactive Example\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"構文","title":"構文","isH3":false,"content":"<pre class=\"notranslate\">var product = Math.imul(a, b);\n</pre>"}},{"type":"prose","value":{"id":"引数","title":"引数","isH3":true,"content":"<dl>\n  <dt id=\"a\"><code>a</code></dt>\n  <dd>\n    <p>第一の数値。</p>\n  </dd>\n  <dt id=\"b\"><code>b</code></dt>\n  <dd>\n    <p>第二の数値。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"返値","title":"返値","isH3":true,"content":"<p>与えられた引数で C 言語風の 32 ビット乗算を行った結果です。</p>"}},{"type":"prose","value":{"id":"解説","title":"解説","isH3":false,"content":"<p><code>Math.imul()</code> で C 言語と同様のの意味を持った 32 ビット乗算を行うことができます。この機能は <a href=\"http://en.wikipedia.org/wiki/Emscripten\" class=\"external\" rel=\" noopener\">Emscripten</a> などのプロジェクトに有効です。</p>\n<p><code>imul()</code> は <code>Math</code> の静的メソッドなので、常に <code>Math.imul()</code> として使用し、自分で <code>Math</code> オブジェクトを生成してそのメソッドとして使用しないでください。 (<code>Math</code> にはコンストラクターがありません)。</p>\n<p>通常の JavaScript の浮動小数点数を imul で使用すると、性能が低下します。これは、乗算のために浮動小数点から整数に変換し、乗算された整数を浮動小数点に変換するというコストのかかる作業があるからです。 imul が存在する理由は、 (今のところ) たった 1 つの状況では imul の方が高速だからです。それは AsmJS です。 AsmJS は JIST オプティマイザーが JavaScript で内部整数をより簡単に実装できるようにします。内部的に整数として格納されている 2 つの数値を imul で乗算すること (これは AsmJS でのみ可能です) は、 Math.imul が現在のブラウザーで性能を発揮する可能性がある唯一の潜在的な状況です。</p>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":""}},{"type":"prose","value":{"id":"math.imul_の使用","title":"Math.imul() の使用","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>Math<span class=\"token punctuation\">.</span><span class=\"token function\">imul</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 8</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">imul</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// -8</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">imul</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 4</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">imul</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xffffffff</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -5</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">imul</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xfffffffe</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -10</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"ポリフィル","title":"ポリフィル","isH3":false,"content":"<p>これは次の関数でエミュレートすることができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Math<span class=\"token punctuation\">.</span>imul<span class=\"token punctuation\">)</span> Math<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">imul</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> aHi <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> aLo <span class=\"token operator\">=</span> a <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> bHi <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> bLo <span class=\"token operator\">=</span> b <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// the shift by 0 fixes the sign on the high part</span>\n  <span class=\"token comment\">// the final |0 converts the unsigned value into a signed value</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>aLo <span class=\"token operator\">*</span> bLo<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>aHi <span class=\"token operator\">*</span> bLo <span class=\"token operator\">+</span> aLo <span class=\"token operator\">*</span> bHi<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>しかし、このポリフィルが使われるであろうブラウザーは、 JavaScript の内部整数型で最適化されておらず、すべての数値に浮動小数点を使用している可能性が高いため、次の関数の方が性能が高くなります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Math<span class=\"token punctuation\">.</span>imul<span class=\"token punctuation\">)</span> Math<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">imul</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">opA<span class=\"token punctuation\">,</span> opB</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  opB <span class=\"token operator\">|=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ensure that opB is an integer. opA will automatically be coerced.</span>\n  <span class=\"token comment\">// floating points give us 53 bits of precision to work with plus 1 sign bit</span>\n  <span class=\"token comment\">// automatically handled for our convienence:</span>\n  <span class=\"token comment\">// 1. 0x003fffff /*opA &amp; 0x000fffff*/ * 0x7fffffff /*opB*/ = 0x1fffff7fc00001</span>\n  <span class=\"token comment\">//    0x1fffff7fc00001 &lt; Number.MAX_SAFE_INTEGER /*0x1fffffffffffff*/</span>\n  <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>opA <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x003fffff</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> opB<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 2. We can remove an integer coersion from the statement above because:</span>\n  <span class=\"token comment\">//    0x1fffff7fc00001 + 0xffc00000 = 0x1fffffff800001</span>\n  <span class=\"token comment\">//    0x1fffffff800001 &lt; Number.MAX_SAFE_INTEGER /*0x1fffffffffffff*/</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>opA <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffc00000</span> <span class=\"token comment\">/*!== 0*/</span><span class=\"token punctuation\">)</span> result <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>opA <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffc00000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> opB <span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result <span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"仕様書","title":"仕様書","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>仕様書</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://tc39.es/ecma262/#sec-math.imul\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">ECMAScript (ECMA-262)<br><small lang=\"ja\">Math.imul の定義</small></a></td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"query":"javascript.builtins.Math.imul","dataURL":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/imul/bcd.json"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"http://en.wikipedia.org/wiki/Emscripten\" class=\"external\" rel=\" noopener\">Emscripten</a></li>\n</ul>"}}],"toc":[{"text":"構文","id":"構文"},{"text":"解説","id":"解説"},{"text":"例","id":"例"},{"text":"ポリフィル","id":"ポリフィル"},{"text":"仕様書","id":"仕様書"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"Math.imul() 関数は、2 つの引数で C 言語風の 32 ビット乗算を行った結果を返します。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Math.imul()","locale":"en-US","native":"English (US)"},{"title":"Math.imul()","locale":"fr","native":"Français"},{"title":"Math.imul()","locale":"ko","native":"한국어"},{"title":"Math.imul()","locale":"ru","native":"Русский"},{"title":"Math.imul()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/javascript/reference/global_objects/math/imul","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/javascript/reference/global_objects/math/imul/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/ja/docs/Web/JavaScript/Reference","title":"JavaScript リファレンス"},{"uri":"/ja/docs/Web/JavaScript/Reference/Global_Objects","title":"標準組み込みオブジェクト"},{"uri":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math","title":"Math"},{"uri":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/imul","title":"Math.imul()"}],"pageTitle":"Math.imul() - JavaScript | MDN","noIndexing":false}}