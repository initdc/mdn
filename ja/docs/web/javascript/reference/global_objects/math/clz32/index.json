{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Math.clz32()","mdn_url":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects\">標準組み込みオブジェクト</a></strong></li><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math\"><code>Math</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>プロパティ</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/E\"><code>Math.E</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/LN10\"><code>Math.LN10</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/LN2\"><code>Math.LN2</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG10E\"><code>Math.LOG10E</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG2E\"><code>Math.LOG2E</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/PI\"><code>Math.PI</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT1_2\"><code>Math.SQRT1_2</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT2\"><code>Math.SQRT2</code></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>メソッド</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/abs\"><code>Math.abs()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/acos\"><code>Math.acos()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/acosh\"><code>Math.acosh()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/asin\"><code>Math.asin()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh\"><code>Math.asinh()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/atan\"><code>Math.atan()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2\"><code>Math.atan2()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh\"><code>Math.atanh()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt\"><code>Math.cbrt()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil\"><code>Math.ceil()</code></a></li><li><em><code>Math.clz32()</code></em></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/cos\"><code>Math.cos()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh\"><code>Math.cosh()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/exp\"><code>Math.exp()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/expm1\"><code>Math.expm1()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\"><code>Math.floor()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/fround\"><code>Math.fround()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/hypot\"><code>Math.hypot()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/imul\"><code>Math.imul()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/log\"><code>Math.log()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/log10\"><code>Math.log10()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p\"><code>Math.log1p()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/log2\"><code>Math.log2()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/max\"><code>Math.max()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/min\"><code>Math.min()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/pow\"><code>Math.pow()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/random\"><code>Math.random()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/round\"><code>Math.round()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\"><code>Math.sign()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/sin\"><code>Math.sin()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh\"><code>Math.sinh()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt\"><code>Math.sqrt()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/tan\"><code>Math.tan()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh\"><code>Math.tanh()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc\"><code>Math.trunc()</code></a></li></ol></li><li><strong>継承</strong></li><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>プロパティ</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>メソッド</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>Math.clz32()</code></strong> 関数は、引数として与えられた数値の 32 ビットバイナリ表現での先頭の 0 の個数を返します。</p><iframe class=\"interactive\" height=\"490\" src=\"https://interactive-examples.mdn.mozilla.net/pages/js/math-clz32.html\" title=\"MDN Web Docs Interactive Example\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"構文","title":"構文","isH3":false,"content":"<pre class=\"notranslate\">Math.clz32(x)\n</pre>"}},{"type":"prose","value":{"id":"引数","title":"引数","isH3":true,"content":"<dl>\n  <dt id=\"x\"><code>x</code></dt>\n  <dd>\n    <p>数値。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"返値","title":"返値","isH3":true,"content":"<p>与えられた数値の 32 ビットバイナリ表現での先頭の 0 の個数。</p>"}},{"type":"prose","value":{"id":"解説","title":"解説","isH3":false,"content":"<p>\"<code>clz32</code>\" は <strong>CountLeadingZeroes32</strong> の省略形です。</p>\n<p><code>x</code> が数値でない場合、まず数値に変換され、32 ビット符号なし整数値に変換されます。</p>\n<p>変換された 32 ビット符号なし整数値が <code>0</code> の場合、すべてのビットが <code>0</code> であるため、<code>32</code> を返します。</p>\n<p>この関数は <a href=\"/ja/docs/Emscripten\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">Emscripten</a> のような JS にコンパイルするシステムに対して特に役に立ちます。</p>"}},{"type":"prose","value":{"id":"先頭の_1_を数える","title":"先頭の 1 を数える","isH3":true,"content":"<p>現在のところ、 \"Count Leading Ones\" を表す <code>Math.clon</code> はありません (\"clo\" ではなく \"clon\" と名付けられています、なぜなら \"clo\" と \"clz\" は特に英語を話さない人にとっては似すぎているからです)。しかし、 <code>clon</code> 関数は、数値のビットを逆数にして、その結果を <code>Math.clz32</code> に渡すことで簡単に作ることができます。 1 の逆数は 0 であり、その逆も同様です。このように、ビットを逆数にすると、測定された 0 の量が (<code>Math.clz32</code> からの) 逆数になり、 <code>Math.clz32</code> はゼロの数を数えるのではなく、1 の数を数えるようになります。</p>\n<p>以下の 32 ビットワード値を想定してみます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">32776</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 00000000000000001000000000001000 (16 leading zeros)</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">clz32</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 16</span>\n\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token operator\">~</span><span class=\"token number\">32776</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 11111111111111110111111111110111 (32776 inversed, 0 leading zeros)</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">clz32</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 0 (this is equal to how many leading one's there are in a)</span>\n</code></pre></div>\n<p>この論理を使用すると、 <code>clon</code> 関数は次のように作成することができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> clz <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span>clz32<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">clon</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">integer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">clz</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>integer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>さらに、この技術を拡張して、以下に示すようなジャンプレスの「Count Trailing Zeros」と「Count Trailing Ones」関数を作成することができます。以下の <code>ctrz</code> 関数は、すべての上位ビットを最も低いビットで埋め、そのビットを否定して上位のセットビットをすべて消去するので、clz が使用できます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> clz <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span>clz32<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ctrz</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">integer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// count trailing zeros</span>\n    <span class=\"token comment\">// 1. fill in all the higher bits after the first one</span>\n    integer <span class=\"token operator\">|=</span> integer <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n    integer <span class=\"token operator\">|=</span> integer <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n    integer <span class=\"token operator\">|=</span> integer <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    integer <span class=\"token operator\">|=</span> integer <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    integer <span class=\"token operator\">|=</span> integer <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2. Now, inversing the bits reveals the lowest bits</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">32</span> <span class=\"token operator\">-</span> <span class=\"token function\">clz</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>integer<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// `|0` ensures integer coercion</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ctron</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">integer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// count trailing ones</span>\n    <span class=\"token comment\">// No shift-filling-in-with-ones operator is available in</span>\n    <span class=\"token comment\">// JavaScript, so the below code is the fastest</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">ctrz</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>integer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* Alternate implementation for demonstrational purposes:\n       // 1. erase all the higher bits after the first zero\n       integer &amp;= (integer &lt;&lt; 16) | 0xffff;\n       integer &amp;= (integer &lt;&lt; 8 ) | 0x00ff;\n       integer &amp;= (integer &lt;&lt; 4 ) | 0x000f;\n       integer &amp;= (integer &lt;&lt; 2 ) | 0x0003;\n       integer &amp;= (integer &lt;&lt; 1 ) | 0x0001;\n       // 2. Now, inversing the bits reveals the lowest zeros\n       return 32 - clon(~integer) |0;\n    */</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これらのヘルパー関数を ASM.JS モジュールに入れます。そして、そうすれば、真のパフォーマンスの傑作ができあがります。このような状況は、まさに ASM.JS のために設計されたものです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> countTrailsMethods <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">stdlib<span class=\"token punctuation\">,</span> foreign<span class=\"token punctuation\">,</span> heap</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"use asm\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> clz <span class=\"token operator\">=</span> stdlib<span class=\"token punctuation\">.</span>Math<span class=\"token punctuation\">.</span>clz32<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">ctrz</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">integer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// count trailing zeros</span>\n        integer <span class=\"token operator\">=</span> integer <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// coerce to an integer</span>\n        <span class=\"token comment\">// 1. fill in all the higher bits after the first one</span>\n        <span class=\"token comment\">// ASMjs for some reason does not allow ^=,&amp;=, or |=</span>\n        integer <span class=\"token operator\">=</span> integer <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>integer <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        integer <span class=\"token operator\">=</span> integer <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>integer <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        integer <span class=\"token operator\">=</span> integer <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>integer <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        integer <span class=\"token operator\">=</span> integer <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>integer <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        integer <span class=\"token operator\">=</span> integer <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>integer <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 2. Now, inversing the bits reveals the lowest bits</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">32</span> <span class=\"token operator\">-</span> <span class=\"token function\">clz</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>integer<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">ctron</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">integer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// count trailing ones</span>\n        integer <span class=\"token operator\">=</span> integer <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// coerce to an integer</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">ctrz</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>integer<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// unfourtunately, ASM.JS demands slow crummy objects:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> ctrz<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> ctron<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctrz <span class=\"token operator\">=</span> countTrailsMethods<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctron <span class=\"token operator\">=</span> countTrailsMethods<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":""}},{"type":"prose","value":{"id":"math.clz32_の使用","title":"Math.clz32() の使用","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>Math<span class=\"token punctuation\">.</span><span class=\"token function\">clz32</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 31</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">clz32</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 22</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">clz32</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 32</span>\n\n<span class=\"token keyword\">var</span> stuff <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nstuff<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=&gt;</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">clz32</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true</span>\n\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">clz32</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 31</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">clz32</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 30</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"ポリフィル","title":"ポリフィル","isH3":false,"content":"<p>以下のポリフィルが最も効果的です。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Math<span class=\"token punctuation\">.</span>clz32<span class=\"token punctuation\">)</span> Math<span class=\"token punctuation\">.</span>clz32 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">log<span class=\"token punctuation\">,</span> <span class=\"token constant\">LN2</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Let n be ToUint32(x).</span>\n    <span class=\"token comment\">// Let p be the number of leading zero bits in</span>\n    <span class=\"token comment\">// the 32-bit binary representation of n.</span>\n    <span class=\"token comment\">// Return p.</span>\n    <span class=\"token keyword\">var</span> asUint <span class=\"token operator\">=</span> x <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>asUint <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">31</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>asUint<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token constant\">LN2</span> <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// the \"| 0\" acts like math.floor</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">LN2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"仕様書","title":"仕様書","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>仕様書</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://tc39.es/ecma262/#sec-math.clz32\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">ECMAScript (ECMA-262)<br><small lang=\"ja\">Math.clz32 の定義</small></a></td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"query":"javascript.builtins.Math.clz32","dataURL":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32/bcd.json"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math\"><code>Math</code></a></li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/imul\"><code>Math.imul</code></a></li>\n</ul>"}}],"toc":[{"text":"構文","id":"構文"},{"text":"解説","id":"解説"},{"text":"例","id":"例"},{"text":"ポリフィル","id":"ポリフィル"},{"text":"仕様書","id":"仕様書"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"Math.clz32() 関数は、引数として与えられた数値の 32 ビットバイナリ表現での先頭の 0 の個数を返します。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Math.clz32()","locale":"en-US","native":"English (US)"},{"title":"Math.clz32()","locale":"fr","native":"Français"},{"title":"Math.clz32()","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Math.clz32()","locale":"ru","native":"Русский"},{"title":"Math.clz32()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/javascript/reference/global_objects/math/clz32","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/javascript/reference/global_objects/math/clz32/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/ja/docs/Web/JavaScript/Reference","title":"JavaScript リファレンス"},{"uri":"/ja/docs/Web/JavaScript/Reference/Global_Objects","title":"標準組み込みオブジェクト"},{"uri":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math","title":"Math"},{"uri":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32","title":"Math.clz32()"}],"pageTitle":"Math.clz32() - JavaScript | MDN","noIndexing":false}}