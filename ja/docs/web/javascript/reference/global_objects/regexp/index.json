{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"RegExp","mdn_url":"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects\">標準組み込みオブジェクト</a></strong></li><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>プロパティ</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@species\"><code>get RegExp[@@species]</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll\"><code>RegExp.prototype.dotAll</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/flags\"><code>RegExp.prototype.flags</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global\"><code>RegExp.prototype.global</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/hasIndices\"><code>RegExp.prototype.hasIndices</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase\"><code>RegExp.prototype.ignoreCase</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/input\"><code>RegExp.input ($_)</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex\"><code>RegExp: lastIndex</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastMatch\"><code>RegExp.lastMatch ($&amp;)</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastParen\"><code>RegExp.lastParen ($+)</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/leftContext\"><code>RegExp.leftContext ($`)</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline\"><code>RegExp.prototype.multiline</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/n\"><code>RegExp.$1-$9</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/rightContext\"><code>RegExp.rightContext ($')</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/source\"><code>RegExp.prototype.source</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky\"><code>RegExp.prototype.sticky</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode\"><code>RegExp.prototype.unicode</code></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>メソッド</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@match\"><code>RegExp.prototype[@@match]()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll\"><code>RegExp.prototype[@@matchAll]()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace\"><code>RegExp.prototype[@@replace]()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@search\"><code>RegExp.prototype[@@search]()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@split\"><code>RegExp.prototype[@@split]()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/compile\"><code>RegExp.prototype.compile()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code>RegExp.prototype.exec()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\"><code>RegExp.prototype.test()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/toString\"><code>RegExp.prototype.toString()</code></a></li></ol></li><li><strong>継承</strong></li><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li><a href=\"#\"><strong>プロパティ</strong></a><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function.prototype.displayName</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function.prototype.length</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function.prototype.name</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function.prototype.prototype</code></a></li></ol></li><li><a href=\"#\"><strong>メソッド</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></li><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>プロパティ</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>メソッド</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>RegExp</code></strong> オブジェクトは、テキストをパターンと照合するために使用します。</p>\n<p>正規表現の入門記事は、 <a href=\"/ja/docs/Web/JavaScript/Guide/Regular_Expressions\">JavaScript ガイド</a> の <a href=\"/ja/docs/Web/JavaScript/Guide/Regular_Expressions\">正規表現</a> をお読みください。</p>"}},{"type":"prose","value":{"id":"解説","title":"解説","isH3":false,"content":""}},{"type":"prose","value":{"id":"リテラル記法とコンストラクター","title":"リテラル記法とコンストラクター","isH3":true,"content":"<p><code>RegExp</code> オブジェクトを生成するには 2 通りの方法があります。<em>リテラル記法</em>と<em>コンストラクター</em>です。</p>\n<ul>\n  <li><em>リテラル記法</em> はパターンを 2 本のスラッシュで囲み、 2 本目のスラッシュの後にオプションでフラグが続きます。</li>\n  <li><em>コンストラクター関数</em> は文字列または <code>RegExp</code> オブジェクトを最初の引数として取り、オプションのフラグを文字列で 2 番目の引数として取ります。</li>\n</ul>\n<p>以下の 3 つの式は、同じ正規表現オブジェクトを生成します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">ab+c</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// リテラル記法</span>\n<span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ab+c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最初の引数に文字列のパターンを渡したコンストラクター</span>\n<span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">ab+c</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最初の引数に正規表現リテラルを渡したコンストラクター</span>\n</code></pre></div>\n<p>正規表現は使用できるようになる前に、コンパイルする必要があります。この処理によって、より効率的に一致を行うことができるようになります。この処理の詳細は<a href=\"https://docs.microsoft.com/dotnet/standard/base-types/compilation-and-reuse-in-regular-expressions\" class=\"external\" rel=\" noopener\">ドットネットのドキュメント</a>に記載されています。</p>\n<p>リテラル記法では、正規表現が評価されるときにコンパイルが行われます。一方、<code>RegExp</code> オブジェクトのコンストラクターである <code>new RegExp('ab+c')</code> は、実行時に正規表現をコンパイルすることになります。</p>\n<p><a href=\"#%E5%8B%95%E7%9A%84%E3%81%AA%E5%85%A5%E5%8A%9B%E3%81%8B%E3%82%89%E3%81%AE%E6%AD%A3%E8%A6%8F%E8%A1%A8%E7%8F%BE%E3%81%AE%E6%A7%8B%E7%AF%89\">動的な入力から正規表現を生成する</a>場合には、 <code>RegExp()</code> コンストラクターの最初の引数として、文字列を使用してください。</p>"}},{"type":"prose","value":{"id":"コンストラクターのフラグ","title":"コンストラクターのフラグ","isH3":true,"content":"<p><code>new RegExp(/ab+c/, flags)</code> という式は、第 1 引数を最初の引数の元として使用し、第 2 引数を指定されたフラグとして使用して <code>RegExp</code> を生成します。</p>\n<p>コンストラクター関数を使用する場合は、通常の文字エスケープ規則（文字列内に特殊文字が含まれるとき、前に <code>\\</code> を付加する）が必須です。</p>\n<p>例えば、以下 2 つの構文は同等です。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\w+</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// または</span>\n<span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\\\w+'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"正規表現の特殊な扱い","title":"正規表現の特殊な扱い","isH3":true,"content":"<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> 何かが「正規表現」であるかどうかは、<a href=\"https://ja.wikipedia.org/wiki/%E3%83%80%E3%83%83%E3%82%AF%E3%83%BB%E3%82%BF%E3%82%A4%E3%83%94%E3%83%B3%E3%82%B0\" class=\"external\" rel=\" noopener\">ダックタイピング</a>になります。 <code>RegExp</code> である必要はありません。</p>\n</div>\n<p>いくつかの組み込みメソッドは、正規表現を特別に扱います。 <code>x</code> が正規表現であるかどうかを<a href=\"https://tc39.es/ecma262/#sec-isregexp\" class=\"external\" rel=\" noopener\">複数のステップ</a>を経て判断します。</p>\n<ol>\n  <li><code>x</code> はオブジェクトでなければなりません（プリミティブではない）。</li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol/match\"><code>x[Symbol.match]</code></a> が <code>undefined</code> でない場合、これが<a href=\"/ja/docs/Glossary/Truthy\">真値</a>であるかどうかを調べます。</li>\n  <li>そうではない場合、 <code>x[Symbol.match]</code> が <code>undefined</code> であれば、 <code>x</code> が <code>RegExp</code> コンストラクターで作られたかどうかを調べます。（このステップが発生するのは稀です。 <code>x</code> が改ざんされていない <code>RegExp</code> オブジェクトであれば、 <code>Symbol.match</code> プロパティを持つはずだからです。）</li>\n</ol>\n<p>ほとんどの場合、 <code>Symbol.match</code> のチェックを通ることに注意してください。これはつまり、次のようなことです。</p>\n<ul>\n  <li>実際の <code>RegExp</code> オブジェクトの <code>Symbol.match</code> プロパティの値が<a href=\"/ja/docs/Glossary/Falsy\">偽値</a>であるが <code>undefined</code> ではなかった場合、（<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code>exec</code></a> や <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace\"><code>@@replace</code></a> のように他のすべてがそのままでも）、正規表現ではないかのように使用することができます。</li>\n  <li><code>RegExp</code> ではないオブジェクトが <code>Symbol.match</code> プロパティを持っていると、正規表現であるかのように扱われます。</li>\n</ul>\n<p>この選択は <code>@@match</code> が照合に使用することを意図したプロパティであることを最もよく表しているからです。（<code>exec</code> も使用することができますが、シンボルのプロパティではないので、誤検出が多すぎるでしょう）。正規表現を特別扱いする場所は次のとおりです。</p>\n<ul>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\"><code>String.prototype.endsWith()</code></a>, <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\"><code>startsWith()</code></a>, <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/includes\"><code>includes()</code></a> では、最初の引数が正規表現の場合は <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> が発生します。</li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll\"><code>String.prototype.matchAll()</code></a> と <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll\"><code>replaceAll()</code></a> は、最初の引数が正規表現である場合、 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global\">global</a> フラグが <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol/matchAll\"><code>@@matchAll</code></a> または <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol/replace\"><code>@@replace</code></a> メソッドを呼び出す前に設定されます。</li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp\"><code>RegExp()</code></a> コンストラクターは、 <code>pattern</code> が（他のいくつかの条件を満たして）正規表現と判断された場合、 <code>pattern</code> を直接返します。 <code>pattern</code> が正規表現である場合、 <code>pattern</code> を文字列に変換するのではなく、 <code>source</code> と <code>flags</code> プロパティに問い合わせることになります。</li>\n</ul>\n<p>例えば、 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\"><code>String.prototype.endsWith()</code></a> はすべての入力値を文字列へと強制しますが、引数が正規表現の場合、この関数が文字列と照合するだけのために設計されており、正規表現を使用することは開発者の間違いと考えるため、例外を発生させます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string\">\"foobar\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">toString</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string\">\"bar\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token string\">\"foobar\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">bar</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError: First argument to String.prototype.endsWith must not be a regular expression</span>\n</code></pre></div>\n<p>このチェックを回避するには、 <code>@@match</code> に <code>undefined</code> ではない<a href=\"/ja/docs/Glossary/Falsy\">偽値</a>を設定してください。この場合、正規表現は <code>String.prototype.match()</code> には使用できませんが(<code>@@match</code> がなければ <code>match()</code> は <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/toString\"><code>re.toString()</code></a> で追加したスラッシュ 2 本を持つ新しい <code>RegExp</code> オブジェクトを構築するので）、事実上他のすべてに使用することが可能です。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">bar</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\nre<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">\"/bar/g\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nre<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'bar', index: 0, input: 'bar', groups: undefined ]</span>\n<span class=\"token string\">\"bar &amp; bar\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">,</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'foo &amp; foo'</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"perl_風の_regexp_プロパティ","title":"Perl 風の RegExp プロパティ","isH3":true,"content":"<p><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp\" aria-current=\"page\"><code>RegExp</code></a> のプロパティのいくつかは長い名前と短い（Perl 風の）名前があります。どちらの名前も同じ値を参照します。（Perl は JavaScript が正規表現をモデルにしたプログラミング言語です。）<a href=\"/ja/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp_%E3%81%AE%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3\">非推奨の <code>RegExp</code> のプロパティ</a>も参照してください。</p>"}},{"type":"prose","value":{"id":"コンストラクター","title":"コンストラクター","isH3":false,"content":"<dl>\n  <dt id=\"regexp\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp\"><code>RegExp()</code></a></dt>\n  <dd>\n    <p>新しい <code>RegExp</code> オブジェクトを生成します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"静的プロパティ","title":"静的プロパティ","isH3":false,"content":"<dl>\n  <dt id=\"get_regexpspecies\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@species\"><code>get RegExp[@@species]</code></a></dt>\n  <dd>\n    <p>派生オブジェクトを生成するために使用されるコンストラクター関数です。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"インスタンスプロパティ","title":"インスタンスプロパティ","isH3":false,"content":"<dl>\n  <dt id=\"regexp.prototype.flags\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/flags\"><code>RegExp.prototype.flags</code></a></dt>\n  <dd>\n    <p><code>RegExp</code> オブジェクトのフラグから成る文字列です。</p>\n  </dd>\n  <dt id=\"regexp.prototype.dotall\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll\"><code>RegExp.prototype.dotAll</code></a></dt>\n  <dd>\n    <p><code>.</code> を改行文字に一致させるかどうかのフラグです。</p>\n  </dd>\n  <dt id=\"regexp.prototype.global\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global\"><code>RegExp.prototype.global</code></a></dt>\n  <dd>\n    <p>対象文字列で一致する可能性があるすべてのものに対して正規表現をテストするか、それとも、最初に一致するものに対してのみテストするどうかのフラグです。</p>\n  </dd>\n  <dt id=\"regexp.prototype.hasindices\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/hasIndices\"><code>RegExp.prototype.hasIndices</code></a></dt>\n  <dd>\n    <p>正規表現の結果で、キャプチャした部分文字列の先頭と末尾の位置を出力するかどうかのフラグです。</p>\n  </dd>\n  <dt id=\"regexp.prototype.ignorecase\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase\"><code>RegExp.prototype.ignoreCase</code></a></dt>\n  <dd>\n    <p>文字列を照合する際に、大文字と小文字の違いを無視するかどうかのフラグです。</p>\n  </dd>\n  <dt id=\"regexp.prototype.multiline\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline\"><code>RegExp.prototype.multiline</code></a></dt>\n  <dd>\n    <p>複数行に渡って文字列を検索するかどうかのフラグです。</p>\n  </dd>\n  <dt id=\"regexp.prototype.source\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/source\"><code>RegExp.prototype.source</code></a></dt>\n  <dd>\n    <p>パターンのテキストです。</p>\n  </dd>\n  <dt id=\"regexp.prototype.sticky\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky\"><code>RegExp.prototype.sticky</code></a></dt>\n  <dd>\n    <p>検索が先頭固定 (sticky) であるかどうかのフラグです。</p>\n  </dd>\n  <dt id=\"regexp.prototype.unicode\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode\"><code>RegExp.prototype.unicode</code></a></dt>\n  <dd>\n    <p>Unicode 機能が有効かどうかのフラグです。</p>\n  </dd>\n  <dt id=\"regexp.prototype.lastindex\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex\"><code>RegExp.prototype.lastIndex</code></a></dt>\n  <dd>\n    <p>次の照合を開始する位置です。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"インスタンスメソッド","title":"インスタンスメソッド","isH3":false,"content":"<dl>\n  <dt id=\"regexp.prototype.compile\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/compile\"><code>RegExp.prototype.compile()</code></a> <svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg></dt>\n  <dd>\n    <p>スクリプトの実行中に正規表現を (再) コンパイルします。</p>\n  </dd>\n  <dt id=\"regexp.prototype.exec\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code>RegExp.prototype.exec()</code></a></dt>\n  <dd>\n    <p>文字列引数の中で一致するものを検索します。</p>\n  </dd>\n  <dt id=\"regexp.prototype.test\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\"><code>RegExp.prototype.test()</code></a></dt>\n  <dd>\n    <p>文字列引数で一致するものがあるかどうか検査します。</p>\n  </dd>\n  <dt id=\"regexp.prototype.tostring\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/toString\"><code>RegExp.prototype.toString()</code></a></dt>\n  <dd>\n    <p>指定されたオブジェクトを表す文字列を返します。 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a> メソッドを上書きします。</p>\n  </dd>\n  <dt id=\"regexp.prototypematch\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@match\"><code>RegExp.prototype[@@match]()</code></a></dt>\n  <dd>\n    <p>指定された文字列と照合を実行し、照合結果を返します。</p>\n  </dd>\n  <dt id=\"regexp.prototypematchall\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll\"><code>RegExp.prototype[@@matchAll]()</code></a></dt>\n  <dd>\n    <p>文字列で正規表現に一致するものをすべて返します。</p>\n  </dd>\n  <dt id=\"regexp.prototypereplace\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace\"><code>RegExp.prototype[@@replace]()</code></a></dt>\n  <dd>\n    <p>指定された文字列で一致する部分を新しい部分文字列で置き換えます。</p>\n  </dd>\n  <dt id=\"regexp.prototypesearch\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@search\"><code>RegExp.prototype[@@search]()</code></a></dt>\n  <dd>\n    <p>指定された文字列で一致する部分を検索し、その文字列で見つかったパターンの位置を返します。</p>\n  </dd>\n  <dt id=\"regexp.prototypesplit\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@split\"><code>RegExp.prototype[@@split]()</code></a></dt>\n  <dd>\n    <p>文字列を部分文字列に分割し、指定された文字列を配列に分割します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":""}},{"type":"prose","value":{"id":"正規表現を使用したデータ形式の変更","title":"正規表現を使用したデータ形式の変更","isH3":true,"content":"<p>以下のスクリプトは、<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> インスタンスの <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>replace()</code></a> メソッドを使用して、 <em>名 姓</em> の形式の名前に一致させ、<em>姓, 名</em> の形式で出力します。</p>\n<p>スクリプトでは、置換テキスト中で <code>$1</code> と <code>$2</code> を使用して、それぞれ対応する正規表現パターンで一致する括弧がキャプチャした結果を指定しています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(\\w+)\\s(\\w+)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'John Smith'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> newstr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">,</span> <span class=\"token string\">'$2, $1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newstr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これは、 <code>\"Smith, John\"</code> と表示します。</p>"}},{"type":"prose","value":{"id":"正規表現を使用したさまざまな行末行の終端改行での行の分割","title":"正規表現を使用したさまざまな行末/行の終端/改行での行の分割","isH3":true,"content":"<p>既定の改行文字は、プラットフォーム (Unix、Windows など) によって異なります。この例で実行する行分割は、あらゆるプラットフォームで動作します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token string\">'Some text\\nAnd some more\\r\\nAnd yet\\rThis is the end'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> lines <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\r\\n|\\r|\\n</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs [ 'Some text', 'And some more', 'And yet', 'This is the end' ]</span>\n</code></pre></div>\n<p>正規表現内のパターンの順序が重要であることに注意してください。</p>"}},{"type":"prose","value":{"id":"複数行で正規表現を使用する","title":"複数行で正規表現を使用する","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'Please yes\\nmake my day!'</span><span class=\"token punctuation\">;</span>\n\ns<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">yes.*day</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// null を返す</span>\n\ns<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">yes[^]*day</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Returns [\"yes\\nmake my day\"]</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"sticky_フラグ付きの正規表現の使用","title":"sticky フラグ付きの正規表現の使用","isH3":true,"content":"<p><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky\"><code>sticky</code></a> フラグは、正規表現の sticky 照合を実行することを示しており、対象文字列で <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex\"><code>RegExp.prototype.lastIndex</code></a> の位置から照合を試みます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'#foo#'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">foo</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">y</span></span><span class=\"token punctuation\">;</span>\n\nregex<span class=\"token punctuation\">.</span>lastIndex <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nregex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>      <span class=\"token comment\">// true</span>\nregex<span class=\"token punctuation\">.</span>lastIndex <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\nregex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>      <span class=\"token comment\">// false (sticky フラグがあるので lastIndex から始める)</span>\nregex<span class=\"token punctuation\">.</span>lastIndex      <span class=\"token comment\">// 0 (照合に失敗した後はリセット)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"sticky_フラグと_global_フラグの違い","title":"sticky フラグと global フラグの違い","isH3":true,"content":"<p>sticky フラグ <code>y</code> を付けると、次の照合は <code>lastIndex</code> の位置で行われるのに対し、 global フラグ <code>g</code> を付けると、検索は <code>lastIndex</code> の位置から始められます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\d</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">y</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> r<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123 456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> <span class=\"token string\">\"AND re.lastIndex\"</span><span class=\"token punctuation\">,</span> re<span class=\"token punctuation\">.</span>lastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// [ '1', index: 0, input: '123 456', groups: undefined ] AND re.lastIndex 1</span>\n<span class=\"token comment\">// [ '2', index: 1, input: '123 456', groups: undefined ] AND re.lastIndex 2</span>\n<span class=\"token comment\">// [ '3', index: 2, input: '123 456', groups: undefined ] AND re.lastIndex 3</span>\n<span class=\"token comment\">//   ... あとは一致しない</span>\n</code></pre></div>\n<p>global フラグ <code>g</code> を付けると、 3 桁だけでなく、 6 桁すべてに一致します。</p>"}},{"type":"prose","value":{"id":"正規表現と_unicode_文字","title":"正規表現と Unicode 文字","isH3":true,"content":"<p>上の表にもある通り、<code>\\w</code> や <code>\\W</code> は ASCII 基本文字にのみ一致します。具体的には <code>a</code> から <code>z</code> 、<code>A</code> から <code>Z</code> 、 <code>0</code> から <code>9</code> および <code>_</code> です。</p>\n<p>キリル語やヘブライ語で使われるような非 ASCII 文字に一致させるには <code>\\uhhhh</code> 形式 (<code>hhhh</code> の部分は 16 進表記の Unicode 値) を使ってください。</p>\n<p>この例は、文字列全体から Unicode 文字列だけを抜き出す方法を示しています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token string\">'Образец text на русском языке'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\u0400-\\u04FF]+</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> match <span class=\"token operator\">=</span> regex<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs 'Образец'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span>lastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '7' と出力</span>\n\n<span class=\"token keyword\">const</span> match2 <span class=\"token operator\">=</span> regex<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>match2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs 'на' ['text' は出力しない]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span>lastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '15' と出力</span>\n\n<span class=\"token comment\">// 以下同様</span>\n</code></pre></div>\n<p><a href=\"/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Unicode_Property_Escapes\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Unicode プロパティエスケープ (en-US)</a>機能は <code>\\p{scx=Cyrl}</code> のように簡潔な表記ができるようにする解決策を導入しています。</p>"}},{"type":"prose","value":{"id":"url_からのサブドメイン名の抽出","title":"URL からのサブドメイン名の抽出","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://xxx.domain.com\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^https?:\\/\\/(.+?)\\.</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'xxx' と出力</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> URL を解釈するには、正規表現を使用するより、 <a href=\"/ja/docs/Web/API/URL_API\">URL API</a> におけるブラウザー内蔵の URL パーサーを使用することをお勧めします。</p>\n</div>"}},{"type":"prose","value":{"id":"動的な入力からの正規表現の構築","title":"動的な入力からの正規表現の構築","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> breakfasts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'bacon'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'eggs'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'oatmeal'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'toast'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cereal'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> order <span class=\"token operator\">=</span> <span class=\"token string\">'Let me get some bacon and eggs, please'</span><span class=\"token punctuation\">;</span>\n\norder<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\\\\b(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>breakfasts<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'|'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)\\\\b</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'g'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ['bacon', 'eggs'] を返す</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"仕様書","id":"仕様書","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/text-processing.html#sec-regexp-regular-expression-objects","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.RegExp"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"query":"javascript.builtins.RegExp","dataURL":"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/bcd.json"}},{"type":"prose","value":{"id":"firefox_固有の注意事項","title":"Firefox 固有の注意事項","isH3":true,"content":"<p>Firefox 34 より、量指定子を伴うキャプチャグループが動作を妨げている場合に、キャプチャグループに一致するテキストは空文字列ではなく <code>undefined</code> になりました。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Firefox 33 以前</span>\n<span class=\"token string\">'x'</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">x(.)?</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">m<span class=\"token punctuation\">,</span> group</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">group: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// group: \"\"</span>\n\n<span class=\"token comment\">// Firefox 34 以降</span>\n<span class=\"token string\">'x'</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">x(.)?</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">m<span class=\"token punctuation\">,</span> group</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">group: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>group<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// group: undefined</span>\n</code></pre></div>\n<p>ウェブの互換性のため <code>RegExp.$N</code> は引き続き、 <code>undefined</code> ではなく空文字列を返します (<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1053944\" class=\"external\" rel=\" noopener\">bug 1053944</a>)。</p>"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"https://github.com/zloirock/core-js#ecmascript-string-and-regexp\" class=\"external\" rel=\" noopener\"><code>RegExp</code> の新しい機能の多くのポリフィル (<code>dotAll</code>、<code>sticky</code> フラグ、名前付きキャプチャグループ、など (<code>core-js</code>)</a> で利用できます。</li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Guide/Regular_Expressions\">正規表現</a>の節（<a href=\"/ja/docs/Web/JavaScript/Guide\">JavaScript ガイド</a>内）</li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/match\"><code>String.prototype.match()</code></a></li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>String.prototype.replace()</code></a></li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String/split\"><code>String.prototype.split()</code></a></li>\n</ul>"}}],"toc":[{"text":"解説","id":"解説"},{"text":"コンストラクター","id":"コンストラクター"},{"text":"静的プロパティ","id":"静的プロパティ"},{"text":"インスタンスプロパティ","id":"インスタンスプロパティ"},{"text":"インスタンスメソッド","id":"インスタンスメソッド"},{"text":"例","id":"例"},{"text":"仕様書","id":"仕様書"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"RegExp オブジェクトは、テキストをパターンと照合するために使用します。","popularity":0.0023,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"RegExp","locale":"en-US","native":"English (US)"},{"title":"RegExp","locale":"es","native":"Español"},{"title":"RegExp","locale":"fr","native":"Français"},{"title":"RegExp","locale":"ko","native":"한국어"},{"title":"RegExp","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"RegExp","locale":"ru","native":"Русский"},{"title":"RegExp(正则表达式)","locale":"zh-CN","native":"中文 (简体)"},{"title":"RegExp","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ja/web/javascript/reference/global_objects/regexp","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/javascript/reference/global_objects/regexp/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/ja/docs/Web/JavaScript/Reference","title":"JavaScript リファレンス"},{"uri":"/ja/docs/Web/JavaScript/Reference/Global_Objects","title":"標準組み込みオブジェクト"},{"uri":"/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp","title":"RegExp"}],"pageTitle":"RegExp - JavaScript | MDN","noIndexing":false}}