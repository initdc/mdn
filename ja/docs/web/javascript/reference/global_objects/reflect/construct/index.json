{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Reflect.construct()","mdn_url":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects\">標準組み込みオブジェクト</a></strong></li><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Reflect\"><code>Reflect</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>メソッド</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Reflect/apply\"><code>Reflect.apply()</code></a></li><li><em><code>Reflect.construct()</code></em></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Reflect/defineProperty\"><code>Reflect.defineProperty()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Reflect/deleteProperty\"><code>Reflect.deleteProperty()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Reflect/get\"><code>Reflect.get()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor\"><code>Reflect.getOwnPropertyDescriptor()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getPrototypeOf\"><code>Reflect.getPrototypeOf()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Reflect/has\"><code>Reflect.has()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Reflect/isExtensible\"><code>Reflect.isExtensible()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys\"><code>Reflect.ownKeys()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Reflect/preventExtensions\"><code>Reflect.preventExtensions()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Reflect/set\"><code>Reflect.set()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Reflect/setPrototypeOf\"><code>Reflect.setPrototypeOf()</code></a></li></ol></li><li><strong>継承</strong></li><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>プロパティ</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>メソッド</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>静的な <strong><code>Reflect.construct()</code></strong> メソッドは <a href=\"/ja/docs/Web/JavaScript/Reference/Operators/new\"><code>new</code></a> 演算子のように、ただし関数として動作します。これは <code>new target(...args)</code> の呼び出しと同等です。このメソッドはオプションを追加することで、別なプロトタイプを指定することができます。</p><iframe class=\"interactive\" height=\"692\" src=\"https://interactive-examples.mdn.mozilla.net/pages/js/reflect-construct.html\" title=\"MDN Web Docs Interactive Example\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"構文","title":"構文","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> argumentsList<span class=\"token punctuation\">)</span>\nReflect<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> argumentsList<span class=\"token punctuation\">,</span> newTarget<span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"引数","title":"引数","isH3":true,"content":"<dl>\n  <dt id=\"target\"><code>target</code></dt>\n  <dd>\n    <p>呼び出し対象の関数。</p>\n  </dd>\n  <dt id=\"argumentslist\"><code>argumentsList</code></dt>\n  <dd>\n    <p>配列風オブジェクトで、 <code>target</code> の呼び出しの引数を指定する。</p>\n  </dd>\n  <dt id=\"newtarget\"><code>newTarget</code> <span class=\"badge inline optional\">省略可</span></dt>\n  <dd>\n    <p>プロトタイプを使用するコンストラクター。 <a href=\"/ja/docs/Web/JavaScript/Reference/Operators/new.target\"><code>new.target</code></a> も参照してください。 <code>newTarget</code> が存在しない場合は、既定値は <code>target</code> になります。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"返値","title":"返値","isH3":true,"content":"<p><code>target</code> (または、もしあれば <code>newTarget</code>) の新しいインスタンスで、 <code>target</code> に <code>argumentsList</code> を渡してコンストラクターとして呼び出すことで初期化します。</p>"}},{"type":"prose","value":{"id":"例外","title":"例外","isH3":true,"content":"<p><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a>: <code>target</code> または <code>newTarget</code> がコンストラクターではない場合。</p>"}},{"type":"prose","value":{"id":"解説","title":"解説","isH3":false,"content":"<p><code>Reflect.construct()</code> によって、可変長引数を指定してコンストラクターを呼び出すことができます。 (これは<a href=\"/ja/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">スプレッド構文</a>と<a href=\"/ja/docs/Web/JavaScript/Reference/Operators/new\"><code>new</code> 演算子</a>を組み合わせて使用することでも可能です。)</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>Foo<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"reflect.construct_と_object.create","title":"<code>Reflect.construct()</code> と <code>Object.create()</code>","isH3":true,"content":"<p><code>Reflect</code> が導入される前は、オブジェクトを構築するのにコンストラクターとプロトタイプの任意の組み合わせで <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/create\"><code>Object.create()</code></a> を使用して構築することができました。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">OneClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'one'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">OtherClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'other'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Calling this:</span>\n<span class=\"token keyword\">let</span> obj1 <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>OneClass<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> OtherClass<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ...has the same result as this:</span>\n<span class=\"token keyword\">let</span> obj2 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OtherClass</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span>\n<span class=\"token function\">OneClass</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 'one'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 'one'</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj1 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">OneClass</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj2 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">OneClass</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// false</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj1 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">OtherClass</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj2 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">OtherClass</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">//Another example to demonstrate below:</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> g</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> obj1 <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>func1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Love'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'my'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'India'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nobj1\n</code></pre></div>\n<p>この 2 つの手法の最終結果は同じですが、その過程に重要な違いがあります。 <code>Object.create()</code> と <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a> を使用する場合、 <code>new.target</code> 演算子はコンストラクター内で <code>undefined</code> を返します。これは、 <code>new</code> 演算子を用いないためです。</p>\n<p>一方、 <code>Reflect.construct()</code> を呼び出す場合は、 <code>new.target</code> 演算子は、提供されていれば <code>newTarget</code> を指し、そうでなければ <code>target</code> を指します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">OneClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'OneClass'</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">OtherClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'OtherClass'</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> obj1 <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>OneClass<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Output:</span>\n<span class=\"token comment\">//     OneClass</span>\n<span class=\"token comment\">//     function OneClass { ... }</span>\n\n<span class=\"token keyword\">let</span> obj2 <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>OneClass<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> OtherClass<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Output:</span>\n<span class=\"token comment\">//     OneClass</span>\n<span class=\"token comment\">//     function OtherClass { ... }</span>\n\n<span class=\"token keyword\">let</span> obj3 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OtherClass</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">OneClass</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>obj3<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Output:</span>\n<span class=\"token comment\">//     OneClass</span>\n<span class=\"token comment\">//     undefined</span>\n</code></pre></div>","titleAsText":"Reflect.construct() と Object.create()"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":""}},{"type":"prose","value":{"id":"reflect.construct_の使用","title":"<code>Reflect.construct()</code> の使用","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> d <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1776</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nd <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Date</span>  <span class=\"token comment\">// true</span>\nd<span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 1776</span>\n</code></pre></div>","titleAsText":"Reflect.construct() の使用"}},{"type":"specifications","value":{"title":"仕様書","id":"仕様書","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/reflection.html#sec-reflect.construct","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.Reflect.construct"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"query":"javascript.builtins.Reflect.construct","dataURL":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct/bcd.json"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><code>Reflect.construct</code> のポリフィルが <a href=\"https://github.com/zloirock/core-js#ecmascript-reflect\" class=\"external\" rel=\" noopener\"><code>core-js</code></a> にあります</li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Reflect\"><code>Reflect</code></a></li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/new\"><code>new</code></a></li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/new.target\"><code>new.target</code></a></li>\n</ul>"}}],"toc":[{"text":"構文","id":"構文"},{"text":"解説","id":"解説"},{"text":"例","id":"例"},{"text":"仕様書","id":"仕様書"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"静的な Reflect.construct() メソッドは new 演算子のように、ただし関数として動作します。これは new target(...args) の呼び出しと同等です。このメソッドはオプションを追加することで、別なプロトタイプを指定することができます。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Reflect.construct()","locale":"en-US","native":"English (US)"},{"title":"Reflect.construct()","locale":"fr","native":"Français"},{"title":"Reflect.construct()","locale":"ko","native":"한국어"},{"title":"Reflect.construct()","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Reflect.construct()","locale":"ru","native":"Русский"},{"title":"Reflect.construct()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/javascript/reference/global_objects/reflect/construct","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/javascript/reference/global_objects/reflect/construct/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/ja/docs/Web/JavaScript/Reference","title":"JavaScript リファレンス"},{"uri":"/ja/docs/Web/JavaScript/Reference/Global_Objects","title":"標準組み込みオブジェクト"},{"uri":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Reflect","title":"Reflect"},{"uri":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct","title":"Reflect.construct()"}],"pageTitle":"Reflect.construct() - JavaScript | MDN","noIndexing":false}}