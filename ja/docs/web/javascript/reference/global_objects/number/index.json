{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Number","mdn_url":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects\">標準組み込みオブジェクト</a></strong></li><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>プロパティ</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON\"><code>Number.EPSILON</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\"><code>Number.MAX_SAFE_INTEGER</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE\"><code>Number.MAX_VALUE</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER\"><code>Number.MIN_SAFE_INTEGER</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_VALUE\"><code>Number.MIN_VALUE</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN\"><code>Number.NaN</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY\"><code>Number.NEGATIVE_INFINITY</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY\"><code>Number.POSITIVE_INFINITY</code></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>メソッド</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite\"><code>Number.isFinite()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\"><code>Number.isInteger()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN\"><code>Number.isNaN()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger\"><code>Number.isSafeInteger()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat\"><code>Number.parseFloat()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt\"><code>Number.parseInt()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential\"><code>Number.prototype.toExponential()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed\"><code>Number.prototype.toFixed()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\"><code>Number.prototype.toLocaleString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision\"><code>Number.prototype.toPrecision()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/toString\"><code>Number.prototype.toString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/valueOf\"><code>Number.prototype.valueOf()</code></a></li></ol></li><li><strong>継承</strong></li><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li><a href=\"#\"><strong>プロパティ</strong></a><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function.prototype.displayName</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function.prototype.length</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function.prototype.name</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function.prototype.prototype</code></a></li></ol></li><li><a href=\"#\"><strong>メソッド</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></li><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>プロパティ</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>メソッド</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p></p><strong><code>Number</code></strong> は<a href=\"/ja/docs/Glossary/Primitive#primitive_wrapper_objects_in_javascript\">プリミティブラッパーオブジェクト</a>で、 <code>37</code> や <code>-9.25</code> のような数値を表現したり操作したりするために使用されます。<p></p>\n<p><strong><code>Number</code></strong> コンストラクターは、数値を扱うための定数とメソッドを含んでいます。他の型の値は <strong><code>Number()</code> 関数</strong>を用いて数値に変換することができます。</p>\n<p>JavaScript の <strong>Number</strong> 型は <a href=\"https://ja.wikipedia.org/wiki/%E6%B5%AE%E5%8B%95%E5%B0%8F%E6%95%B0%E7%82%B9%E6%95%B0\" class=\"external\" rel=\" noopener\">IEEE 754 の倍精度 64ビットバイナリー形式</a>であり、 Java や C# の <code>double</code> のようなものです。これは小数点以下の数値を表すことができることを意味しますが、格納できる値にはいくつかの制限があります。 Number は小数点以下約 17 桁の精度しか保持できません。演算は<a href=\"https://en.wikipedia.org/wiki/Floating-point_arithmetic#Representable_numbers,_conversion_and_rounding\" class=\"external\" rel=\" noopener\">丸め誤差</a>の影響を受けます。 Number が保持できる最大の値は約 1.8E308 です。それ以上の数値は、特殊な <code>Number</code> の定数 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a> に置き換えられます。</p>\n<p>JavaScript コードにおける <code>37</code> のような数値リテラルは浮動小数点値であり、整数ではありません。日常的に使用される独立した整数型はありません。 (JavaScript は <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> 型を持つようになりましたが、日常の利用で Number を置き換えるように設計されてはいません。 <code>37</code> は Number であり、 BigInt ではありません。)</p>\n<p><code>Number</code> は <code>0b101</code>, <code>0o13</code>, <code>0x0A</code> のようなリテラル形式で表現することもできます。数値の<a href=\"/ja/docs/Web/JavaScript/Reference/Lexical_grammar#numeric_literals\">字句文法はこちら</a>を参照してください。</p>"}},{"type":"prose","value":{"id":"解説","title":"解説","isH3":false,"content":"<p>関数として使用された場合、 <code>Number(value)</code> は文字列やその他の値を Number 型に変換します。値が変換できない場合は、 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> を返します。</p>"}},{"type":"prose","value":{"id":"リテラル構文","title":"リテラル構文","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token number\">123</span>    <span class=\"token comment\">// 百二十三</span>\n<span class=\"token number\">123.0</span>  <span class=\"token comment\">// 同じ</span>\n<span class=\"token number\">123</span> <span class=\"token operator\">===</span> <span class=\"token number\">123.0</span>  <span class=\"token comment\">// true</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"関数構文","title":"関数構文","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 数値 123 を返す</span>\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">123</span>  <span class=\"token comment\">// true</span>\n\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unicorn\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// NaN</span>\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// NaN</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"コンストラクター","title":"コンストラクター","isH3":false,"content":"<dl>\n  <dt id=\"number\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/Number\"><code>Number()</code></a></dt>\n  <dd>\n    <p>新しい <code>Number</code> 値を生成します。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"静的プロパティ","title":"静的プロパティ","isH3":false,"content":"<dl>\n  <dt id=\"number.epsilon\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON\"><code>Number.EPSILON</code></a></dt>\n  <dd>\n    <p>数値として表される 2 個の数の最小の差です。</p>\n  </dd>\n  <dt id=\"number.max_safe_integer\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\"><code>Number.MAX_SAFE_INTEGER</code></a></dt>\n  <dd>\n    <p>JavaScript における確実な整数の最大値 (<code>2^53 - 1</code>) です。</p>\n  </dd>\n  <dt id=\"number.max_value\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE\"><code>Number.MAX_VALUE</code></a></dt>\n  <dd>\n    <p>表現可能な正の数の最大値です。</p>\n  </dd>\n  <dt id=\"number.min_safe_integer\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER\"><code>Number.MIN_SAFE_INTEGER</code></a></dt>\n  <dd>\n    <p>JavaScript における確実な整数の最小値 (<code>-(2^53 - 1)</code>) です。</p>\n  </dd>\n  <dt id=\"number.min_value\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_VALUE\"><code>Number.MIN_VALUE</code></a></dt>\n  <dd>\n    <p>表現可能な正の数の最小値。0 に最も近い正の数です (0 ではありません)。</p>\n  </dd>\n  <dt id=\"number.nan\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN\"><code>Number.NaN</code></a></dt>\n  <dd>\n    <p>特殊な \"<strong>N</strong>ot <strong>a</strong> <strong>N</strong>umber\" (数値ではない) の値です。</p>\n  </dd>\n  <dt id=\"number.negative_infinity\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY\"><code>Number.NEGATIVE_INFINITY</code></a></dt>\n  <dd>\n    <p>負の無限大を表す特別な値です。オーバーフロー時に返されます。</p>\n  </dd>\n  <dt id=\"number.positive_infinity\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY\"><code>Number.POSITIVE_INFINITY</code></a></dt>\n  <dd>\n    <p>無限大を表す特別な値です。オーバーフロー時に返されます。</p>\n  </dd>\n  <dt id=\"number.prototype\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number\" aria-current=\"page\"><code>Number.prototype</code></a></dt>\n  <dd>\n    <p><code>Number</code> オブジェクトへプロパティの追加ができるようにします。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"静的メソッド","title":"静的メソッド","isH3":false,"content":"<dl>\n  <dt id=\"number.isnan\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN\"><code>Number.isNaN()</code></a></dt>\n  <dd>\n    <p>渡された値が <code>NaN</code> であるかどうかを判断します。</p>\n  </dd>\n  <dt id=\"number.isfinite\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite\"><code>Number.isFinite()</code></a></dt>\n  <dd>\n    <p>渡された値が有限数であるかどうかを判断します。</p>\n  </dd>\n  <dt id=\"number.isinteger\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\"><code>Number.isInteger()</code></a></dt>\n  <dd>\n    <p>渡された値が整数であるかどうかを判断します。</p>\n  </dd>\n  <dt id=\"number.issafeinteger\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger\"><code>Number.isSafeInteger()</code></a></dt>\n  <dd>\n    <p>渡された値が確実な範囲の整数 (<code>-(2^53 - 1)</code> から <code>2^53 - 1</code> の間) であるかどうかを判断します。</p>\n  </dd>\n  <dt id=\"number.parsefloatstring\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat\"><code>Number.parseFloat(<var>string</var>)</code></a></dt>\n  <dd>\n    <p>これはグローバルの <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\"><code>parseFloat()</code></a> 関数と同じです。</p>\n  </dd>\n  <dt id=\"number.parseintstring_radix\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt\"><code>Number.parseInt(<var>string</var>, [<var>radix</var>])</code></a></dt>\n  <dd>\n    <p>これはグローバルの <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/parseInt\"><code>parseInt()</code></a> 関数と同じです。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"インスタンスメソッド","title":"インスタンスメソッド","isH3":false,"content":"<dl>\n  <dt id=\"number.prototype.toexponentialfractiondigits\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential\"><code>Number.prototype.toExponential(<var>fractionDigits</var>)</code></a></dt>\n  <dd>\n    <p>指数表記で数値を表す文字列を返します。</p>\n  </dd>\n  <dt id=\"number.prototype.tofixeddigits\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed\"><code>Number.prototype.toFixed(<var>digits</var>)</code></a></dt>\n  <dd>\n    <p>固定小数点表記で数値を表す文字列を返します。</p>\n  </dd>\n  <dt id=\"number.prototype.tolocalestringlocales_options\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\"><code>Number.prototype.toLocaleString([<var>locales</var> [, <var>options</var>]])</code></a></dt>\n  <dd>\n    <p>この値を言語依存の表現で表す文字列を返します。 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a> メソッドを上書きします。</p>\n  </dd>\n  <dt id=\"number.prototype.toprecisionprecision\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision\"><code>Number.prototype.toPrecision(<var>precision</var>)</code></a></dt>\n  <dd>\n    <p>指定された精度で、固定小数点表記または指数表記で数値で表す文字列を返します。</p>\n  </dd>\n  <dt id=\"number.prototype.tostringradix\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/toString\"><code>Number.prototype.toString([<var>radix</var>])</code></a></dt>\n  <dd>\n    <p>指定された基数を元に、指定されたオブジェクトを表す文字列を返します。 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a> メソッドを上書きします。</p>\n  </dd>\n  <dt id=\"number.prototype.valueof\"><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/valueOf\"><code>Number.prototype.valueOf()</code></a></dt>\n  <dd>\n    <p>指定されたオブジェクトのプリミティブ値を返します。 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a> メソッドを上書きします。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":""}},{"type":"prose","value":{"id":"number_オブジェクトを使用して変数に値を代入する","title":"Number オブジェクトを使用して変数に値を代入する","isH3":true,"content":"<p>以下の例では、<code>Number</code> オブジェクトのプロパティを使用して、いくつかの数の変数に値を代入します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> biggestNum     <span class=\"token operator\">=</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span>\n<span class=\"token keyword\">const</span> smallestNum    <span class=\"token operator\">=</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MIN_VALUE</span>\n<span class=\"token keyword\">const</span> infiniteNum    <span class=\"token operator\">=</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">POSITIVE_INFINITY</span>\n<span class=\"token keyword\">const</span> negInfiniteNum <span class=\"token operator\">=</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">NEGATIVE_INFINITY</span>\n<span class=\"token keyword\">const</span> notANum        <span class=\"token operator\">=</span> Number<span class=\"token punctuation\">.</span><span class=\"token number\">NaN</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"number_の整数の範囲","title":"Number の整数の範囲","isH3":true,"content":"<p>次の例は、<code>Number</code> オブジェクトで表現可能な最小の整数値と最大の整数値です (詳細は、ECMAScript 標準の <a href=\"https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type\" class=\"external\" rel=\" noopener\">6.1.6 The Number Type</a> の節を参照してください)。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> biggestInt  <span class=\"token operator\">=</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_SAFE_INTEGER</span>  <span class=\"token comment\">//  (2**53 - 1) =&gt;  9007199254740991</span>\n<span class=\"token keyword\">const</span> smallestInt <span class=\"token operator\">=</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MIN_SAFE_INTEGER</span>  <span class=\"token comment\">// -(2**53 - 1) =&gt; -9007199254740991</span>\n</code></pre></div>\n<p>JSON にシリアライズされたデータを解析する場合、整数値がこの範囲を超えていると、 JSON パーサーがこの値を <code>Number</code> 型に変換したときに信頼できない値になります。</p>\n<p>可能な回避策として、代わりに <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> を使用してください。</p>\n<p>大きい数値は <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> 型を用いて表すことができます。</p>"}},{"type":"prose","value":{"id":"number_を使用して_date_オブジェクトを変換する","title":"Number を使用して Date オブジェクトを変換する","isH3":true,"content":"<p>以下の例は、 <code>Number</code> を関数として用いて、<a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> オブジェクトを数値に変換します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">'December 17, 1995 03:24:00'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>これは、コンソールに \"819199440000\" を出力します。</p>"}},{"type":"prose","value":{"id":"数字や_null_を数値に変換する","title":"数字や null を数値に変換する","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 123</span>\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">123</span> <span class=\"token comment\">// true</span>\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'12.3'</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 12.3</span>\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'12.00'</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 12</span>\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123e-1'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 12.3</span>\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">// 0</span>\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">// 0</span>\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0x11'</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 17</span>\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0b11'</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 3</span>\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0o11'</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 9</span>\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// NaN</span>\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'100a'</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// NaN</span>\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-Infinity'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -Infinity</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"仕様書","id":"仕様書","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-number-objects","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.Number"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"query":"javascript.builtins.Number","dataURL":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number/bcd.json"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li>最新の <code>Number</code> の動作（2 進数と 8 進数のリテラルに対応）のポリフィルは <a href=\"https://github.com/zloirock/core-js#ecmascript-number\" class=\"external\" rel=\" noopener\"><code>core-js</code></a> にあります</li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a></li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators#arithmetic_operators\">算術演算子</a></li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Math\"><code>Math</code></a> グローバルオブジェクト</li>\n  <li>任意の精度の整数型: <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a></li>\n</ul>"}}],"toc":[{"text":"解説","id":"解説"},{"text":"コンストラクター","id":"コンストラクター"},{"text":"静的プロパティ","id":"静的プロパティ"},{"text":"静的メソッド","id":"静的メソッド"},{"text":"インスタンスメソッド","id":"インスタンスメソッド"},{"text":"例","id":"例"},{"text":"仕様書","id":"仕様書"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"Number コンストラクターは、数値を扱うための定数とメソッドを含んでいます。他の型の値は Number() 関数を用いて数値に変換することができます。","popularity":0.0021,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Number","locale":"en-US","native":"English (US)"},{"title":"Number","locale":"es","native":"Español"},{"title":"Number","locale":"fr","native":"Français"},{"title":"Number","locale":"ko","native":"한국어"},{"title":"Número","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Number","locale":"ru","native":"Русский"},{"title":"Number","locale":"zh-CN","native":"中文 (简体)"},{"title":"Number","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ja/web/javascript/reference/global_objects/number","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/javascript/reference/global_objects/number/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/ja/docs/Web/JavaScript/Reference","title":"JavaScript リファレンス"},{"uri":"/ja/docs/Web/JavaScript/Reference/Global_Objects","title":"標準組み込みオブジェクト"},{"uri":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Number","title":"Number"}],"pageTitle":"Number - JavaScript | MDN","noIndexing":false}}