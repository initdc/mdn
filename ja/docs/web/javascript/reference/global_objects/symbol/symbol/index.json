{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Symbol() コンストラクター","mdn_url":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol/Symbol","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects\">標準組み込みオブジェクト</a></strong></li><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>プロパティ</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol/asyncIterator\"><code>Symbol.asyncIterator</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol/description\"><code>Symbol.prototype.description</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance\"><code>Symbol.hasInstance</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol/isConcatSpreadable\"><code>Symbol.isConcatSpreadable</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator\"><code>Symbol.iterator</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol/match\"><code>Symbol.match</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol/matchAll\"><code>Symbol.matchAll</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol/replace\"><code>Symbol.replace</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol/search\"><code>Symbol.search</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol/species\"><code>Symbol.species</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol/split\"><code>Symbol.split</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive\"><code>Symbol.toPrimitive</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag\"><code>Symbol.toStringTag</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol/unscopables\"><code>Symbol.unscopables</code></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>メソッド</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol/@@toPrimitive\"><code>Symbol.prototype[@@toPrimitive]</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol/for\"><code>Symbol.for()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol/keyFor\"><code>Symbol.keyFor()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toString\"><code>Symbol.prototype.toString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol/valueOf\"><code>Symbol.prototype.valueOf()</code></a></li></ol></li><li><strong>継承</strong></li><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li><a href=\"#\"><strong>プロパティ</strong></a><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function.prototype.displayName</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function.prototype.length</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function.prototype.name</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function.prototype.prototype</code></a></li></ol></li><li><a href=\"#\"><strong>メソッド</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></li><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>プロパティ</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>メソッド</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><code>Symbol()</code> コンストラクターは <strong>symbol</strong> 型の値を返しますが、 \"<code>new Symbol()</code>\" という構文に対応しておらず、サブクラス化を意図していないため、コンストラクターとしては不完全です。 <code>class</code> 定義の <a href=\"/ja/docs/Web/JavaScript/Reference/Classes/extends\"><code>extends</code></a> 句の値として使用することもできますが、 <a href=\"/ja/docs/Web/JavaScript/Reference/Operators/super\"><code>super</code></a> の呼び出しを行うと例外が発生します。</p><iframe class=\"interactive\" height=\"692\" src=\"https://interactive-examples.mdn.mozilla.net/pages/js/symbol-constructor.html\" title=\"MDN Web Docs Interactive Example\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"構文","title":"構文","isH3":false,"content":"<pre class=\"notranslate\">Symbol([description])\n</pre>"}},{"type":"prose","value":{"id":"引数","title":"引数","isH3":true,"content":"<dl>\n  <dt id=\"description\"><code>description</code> <span class=\"badge inline optional\">省略可</span></dt>\n  <dd>\n    <p>文字列。デバッグには使用できるこのシンボルの説明ですが、シンボル自体にはアクセスできません。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":""}},{"type":"prose","value":{"id":"シンボルの作成","title":"シンボルの作成","isH3":true,"content":"<p>新しいプリミティブであるシンボルを生成するには、解説にあるように <code>Symbol()</code> を任意の文字列とともに書きます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> sym1 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> sym2 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> sym3 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>上記のコードは 3 つの新しいシンボルを生成します。なお、 <code>Symbol(\"foo\")</code> は <code>\"foo\"</code> と言う文字列を強制的に記号にするわけではないことに注意してください。毎回新しいシンボルを生成します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// false</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"new_symbol","title":"new Symbol(...)","isH3":true,"content":"<p>以下のように <a href=\"/ja/docs/Web/JavaScript/Reference/Operators/new\"><code>new</code></a> 演算子を伴う構文では、 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> が発生します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> sym <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// TypeError</span>\n</code></pre></div>\n<p>このため、新しいシンボル値の代わりに明示的なシンボルラッパーオブジェクトを作成することができず、プリミティブなデータ型の周りに明示的なラッパーオブジェクトを作成することは一般的に可能です (例えば、 <code>new Boolean</code>, <code>new String</code>, <code>new Number</code> です)。</p>\n<p>本当に <code>Symbol</code> のラッパーオブジェクトを生成したい場合は、 <code>Object()</code> 関数を使用することができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> sym    <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> symObj <span class=\"token operator\">=</span> <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span>sym<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> sym    <span class=\"token comment\">// =&gt; \"symbol\"</span>\n<span class=\"token keyword\">typeof</span> symObj <span class=\"token comment\">// =&gt; \"object\"</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"仕様書","title":"仕様書","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>仕様書</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://tc39.es/ecma262/#sec-symbol-constructor\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">ECMAScript (ECMA-262)<br><small lang=\"ja\">Symbol constructor の定義</small></a></td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"query":"javascript.builtins.Symbol.Symbol","dataURL":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol/Symbol/bcd.json"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">用語集: Symbol データ型</a></li>\n</ul>"}}],"toc":[{"text":"構文","id":"構文"},{"text":"例","id":"例"},{"text":"仕様書","id":"仕様書"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"Symbol() コンストラクターは symbol 型の値を返しますが、 \"new Symbol()\" という構文に対応しておらず、サブクラス化を意図していないため、コンストラクターとしては不完全です。 class 定義の extends 句の値として使用することもできますが、 super の呼び出しを行うと例外が発生します。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Symbol() constructor","locale":"en-US","native":"English (US)"},{"title":"Symbol() constructor","locale":"es","native":"Español"},{"title":"Constructeur Symbol()","locale":"fr","native":"Français"}],"source":{"folder":"ja/web/javascript/reference/global_objects/symbol/symbol","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/javascript/reference/global_objects/symbol/symbol/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/ja/docs/Web/JavaScript/Reference","title":"JavaScript リファレンス"},{"uri":"/ja/docs/Web/JavaScript/Reference/Global_Objects","title":"標準組み込みオブジェクト"},{"uri":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol","title":"Symbol (シンボル)"},{"uri":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol/Symbol","title":"Symbol() コンストラクター"}],"pageTitle":"Symbol() コンストラクター - JavaScript | MDN","noIndexing":false}}