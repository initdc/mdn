{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Symbol (シンボル)","mdn_url":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol","locale":"ja","native":"日本語","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/ja/docs/Glossary/JavaScript\">JavaScript</a> では、シンボルは<a href=\"/ja/docs/Glossary/Primitive\">プリミティブ値</a>です。</p>\n<p><strong>Symbol</strong> データ型を持つ値は「シンボル値」として見ることができます。 JavaScript の実行時環境では、シンボル値は <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol\" aria-current=\"page\"><code>Symbol</code></a> 関数を呼び出すことで生成され、動的に無名の一意の値を生み出します。シンボルはオブジェクトプロパティとして使用されることがあります。</p>\n<p>Symbol は任意で説明文を持つことができますが、これはデバッグ目的のみに利用されます。</p>\n<p><strong>Symbol</strong> 値は固有の識別子を表します。例えば以下のように使用します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 2 つのシンボルを同じ説明文で使用</span>\n<span class=\"token keyword\">let</span> Sym1 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sym\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> Sym2 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sym\"</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Sym1 <span class=\"token operator\">===</span> Sym2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"false\" を返す</span>\n<span class=\"token comment\">// シンボルは固有であることが保証されます。</span>\n<span class=\"token comment\">// 同じ説明文でたくさんのシンボルが生成されても、</span>\n<span class=\"token comment\">// 異なる値を持ちます。</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> Ruby (または他の言語) の <em>\"symbols\"</em> と呼ばれる機能をよくご存知であれば、間違えないでください。 JavaScript のシンボルは異なります。</p>\n</div>\n<p><em>Symbol</em> 型は ECMAScript 2015 の新機能であり、 ECMAScript 5 にはシンボルに相当するものはありません。</p>\n<p>プログラミング言語によっては、シンボルデータ型は「アトム」と呼ばれています。</p>"}},{"type":"prose","value":{"id":"シンボルは文字列に「自動変換」されない","title":"シンボルは文字列に「自動変換」されない","isH3":true,"content":"<p>JavaScript の大部分の値は文字列への暗黙的な返還に対応しています。例えば <code>alert</code> はほぼすべての値で表示することができ、動作します。シンボルは特殊です。自動変換は行われません。</p>\n<p>例を示します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> Sym <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sym\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>Sym<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// TypeError: Cannot convert a Symbol value to a string</span>\n</code></pre></div>\n<p>これは混合しないための「言語ガード」で、これは文字列とシンボルが根本的に異なるため、そして他の型に変換するべきものではないためです。</p>\n<p>本当にシンボルを表示したいのであれば、 <code>.toString()</code> を呼び出す必要があります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> Sym <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sym\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>Sym<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Symbol(Sym), now it works</span>\n</code></pre></div>\n<p>または、 <code>symbol.description</code> プロパティを使用して、説明文を取得することができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> _Sym <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sym\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>_Sym<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Sym</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"well-known_symbol","title":"Well-known symbol","isH3":true,"content":"<p><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol\" aria-current=\"page\"><code>Symbol</code></a> クラスには、 <em>well-known symbols</em> と呼ばれる定数があります。これらのシンボルによって、 JavaScript がオブジェクトをどのように扱うかを、プロパティキーとして使用することで構成することができます。</p>\n<p>well-known symbol の例としては、配列風オブジェクトのための <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator\"><code>Symbol.iterator</code></a>、文字列オブジェクトのための <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol/search\"><code>Symbol.search</code></a> などがあります。</p>\n<p>仕様書の <a href=\"https://tc39.github.io/ecma262/#sec-well-known-symbols\" class=\"external\" rel=\" noopener\">Well-known symbol</a> の表に挙げられているものは次の通りです。</p>\n<ul>\n  <li><code>Symbol.hasInstance</code></li>\n  <li><code>Symbol.isConcatSpreadable</code></li>\n  <li><code>Symbol.iterator</code></li>\n  <li><code>Symbol.toPrimitive</code></li>\n  <li>…など。</li>\n</ul>"}},{"type":"prose","value":{"id":"グローバルシンボルレジストリー","title":"グローバルシンボルレジストリー","isH3":true,"content":"<p>グローバルシンボルレジストリーを扱うメソッドは <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol/for\"><code>Symbol.for()</code></a> および <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol/keyFor\"><code>Symbol.keyFor()</code></a> があります。これらは、グローバルシンボルテーブル（または「レジストリー」）と実行時環境の間を仲介します。シンボルレジストリーは、主に JavaScript コンパイラーインフラストラクチャが構築しており、その中のシンボルの内容は、 JavaScript 実行時インフラストラクチャでは上記のメソッド以外で扱えません。</p>\n<p><code>Symbol.for(tokenString)</code> メソッドはレジストリー内のシンボル値を返し、 <code>Symbol.keyFor(symbolValue)</code> メソッドはレジストリーからトークンの文字列を返します。この二つは対照的で、下記の結果は <code>true</code> です。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">keyFor</span><span class=\"token punctuation\">(</span>Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tokenString\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"tokenString\"</span> <span class=\"token comment\">// true</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li>Wikipedia の <a href=\"https://en.wikipedia.org/wiki/Symbol_(programming)\" class=\"external\" rel=\" noopener\">Symbol (programming)</a> (英語)</li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Data_structures\">JavaScript データ型とデータ構造</a></li>\n  <li><a href=\"https://2ality.com/2014/12/es6-symbols.html\" class=\"external\" rel=\" noopener\">Symbols in ECMAScript 6</a></li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol\" aria-current=\"page\"><code>Symbol</code></a> （MDN JS リファレンス）</li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols\"><code>Object.getOwnPropertySymbols()</code></a></li>\n  <li><a href=\"/ja/docs/Glossary\">MDN Web Docs 用語集</a>\n    <ul>\n      <li><a href=\"/ja/docs/Glossary/JavaScript\">JavaScript</a></li>\n      <li><a href=\"/ja/docs/Glossary/Primitive\">Primitive</a></li>\n    </ul>\n  </li>\n</ul>"}}],"toc":[{"text":"関連情報","id":"関連情報"}],"summary":"JavaScript では、シンボルはプリミティブ値です。","popularity":0.0006,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Symbol","locale":"en-US","native":"English (US)"},{"title":"Symbol","locale":"es","native":"Español"},{"title":"Symbol","locale":"fr","native":"Français"},{"title":"Symbol","locale":"ko","native":"한국어"},{"title":"Símbolo","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Symbol","locale":"ru","native":"Русский"},{"title":"Symbol","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/javascript/reference/global_objects/symbol","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/javascript/reference/global_objects/symbol/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/ja/docs/Web/JavaScript/Reference","title":"JavaScript リファレンス"},{"uri":"/ja/docs/Web/JavaScript/Reference/Global_Objects","title":"標準組み込みオブジェクト"},{"uri":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol","title":"Symbol (シンボル)"}],"pageTitle":"Symbol (シンボル) - JavaScript | MDN","noIndexing":false}}