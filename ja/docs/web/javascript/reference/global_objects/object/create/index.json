{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Object.create()","mdn_url":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/create","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects\">標準組み込みオブジェクト</a></strong></li><li><strong><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>プロパティ</strong></a><ol><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>メソッド</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"><code>Object.assign()</code></a></li><li><em><code>Object.create()</code></em></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties\"><code>Object.defineProperties()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\"><code>Object.entries()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\"><code>Object.freeze()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries\"><code>Object.fromEntries()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\"><code>Object.getOwnPropertyDescriptor()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors\"><code>Object.getOwnPropertyDescriptors()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\"><code>Object.getOwnPropertyNames()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols\"><code>Object.getOwnPropertySymbols()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\"><code>Object.getPrototypeOf()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn\"><code>Object.hasOwn()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/is\"><code>Object.is()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\"><code>Object.isExtensible()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\"><code>Object.isFrozen()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\"><code>Object.isSealed()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\"><code>Object.keys()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\"><code>Object.preventExtensions()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\"><code>Object.seal()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li><li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/values\"><code>Object.values()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>Object.create()</code></strong> メソッドは、既存のオブジェクトを新しく生成されるオブジェクトのプロトタイプとして使用して、新しいオブジェクトを生成します。</p><iframe class=\"interactive\" height=\"692\" src=\"https://interactive-examples.mdn.mozilla.net/pages/js/object-create.html\" title=\"MDN Web Docs Interactive Example\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"構文","title":"構文","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>proto<span class=\"token punctuation\">)</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>proto<span class=\"token punctuation\">,</span> propertiesObject<span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"引数","title":"引数","isH3":true,"content":"<dl>\n  <dt id=\"proto\"><code>proto</code></dt>\n  <dd>\n    <p>新たに生成されるオブジェクトのプロトタイプになるべきオブジェクトです。</p>\n  </dd>\n  <dt id=\"propertiesobject\"><code>propertiesObject</code> <span class=\"badge inline optional\">省略可</span></dt>\n  <dd>\n    <p>指定されていて、 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> でない場合、それ自身の列挙可能なプロパティ (つまり、それ自身に定義されているものであり、プロトタイプチェーンの中での列挙可能なプロパティでは<em>ない</em>もの) が、それらのプロパティ名を伴う一連のプロパティ記述子を指定し、新たに生成されるオブジェクトに追加されることになります。これらのプロパティは、 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties\"><code>Object.defineProperties()</code></a> の 2 番目の引数に対応するものです。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"返値","title":"返値","isH3":true,"content":"<p>指定したプロトタイプオブジェクトとプロパティを持つ新しいオブジェクトです。</p>"}},{"type":"prose","value":{"id":"例外","title":"例外","isH3":true,"content":"<p><code>proto</code> 引数は次のいずれかになります。</p>\n<ul>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> または</li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> ただし<a href=\"/ja/docs/Glossary/Primitive#primitive_wrapper_objects_in_javascript\">プリミティブラッパーオブジェクト</a>を除く</li>\n</ul>\n<p><code>proto</code> がどちらでもない場合、 <a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> が発生します。</p>"}},{"type":"prose","value":{"id":"カスタムオブジェクトと_null_オブジェクト","title":"カスタムオブジェクトと Null オブジェクト","isH3":false,"content":"<p>完全なカスタムオブジェクト (特に <code>null</code> オブジェクトから作成されたもの、基本的にはメンバーを持たないカスタムオブジェクト) から生成された新しいオブジェクトは、予想外の振る舞いをすることがあります。これは特にデバッグ時に当てはまります。一般的なオブジェクト-プロパティ変換/検出ユーティリティ関数はエラーを生成したり、単に情報を失ったりする可能性があるからです (特にエラーを無視するサイレントエラートラップを使用している場合)。例えば、ここに 2 つのオブジェクトがあります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>oco <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 通常のオブジェクトを生成</span>\nocn <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"null\" オブジェクトを生成</span>\n\n<span class=\"token operator\">&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>oco<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {} -- 普通に見えます</span>\n<span class=\"token operator\">&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ocn<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {} -- これまでのところ、普通に見えます</span>\n\noco<span class=\"token punctuation\">.</span>p <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 通常オブジェクトに単純なプロパティを生成</span>\nocn<span class=\"token punctuation\">.</span>p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"null\" オブジェクトに単純なプロパティを生成</span>\n\n<span class=\"token operator\">&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>oco<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {p: 1} -- まだ普通に見えます</span>\n<span class=\"token operator\">&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ocn<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {p: 0} -- まだ普通に見えますが、待ってください...</span>\n</code></pre></div>\n<p>上記のように、今のところすべてが正常なように見えます。しかし、実際に使ってみると、その違いはすぐに明らかになります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token operator\">&gt;</span> <span class=\"token string\">\"oco is: \"</span> <span class=\"token operator\">+</span> oco <span class=\"token comment\">// \"oco is: [object Object]\" と表示</span>\n\n<span class=\"token operator\">&gt;</span> <span class=\"token string\">\"ocn is: \"</span> <span class=\"token operator\">+</span> ocn <span class=\"token comment\">// エラーが発生: Cannot convert object to primitive value</span>\n</code></pre></div>\n<p>多くの最も基本的な組み込み機能のほんの一部をテストするだけで、問題の大きさがより明確にわかります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token operator\">&gt;</span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>oco<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [object Object] と表示</span>\n<span class=\"token operator\">&gt;</span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>ocn<span class=\"token punctuation\">)</span> <span class=\"token comment\">// エラーが発生: Cannot convert object to primitive value</span>\n\n<span class=\"token operator\">&gt;</span> oco<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [object Object] と表示</span>\n<span class=\"token operator\">&gt;</span> ocn<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// エラーが発生: ocn.toString is not a function</span>\n\n<span class=\"token operator\">&gt;</span> oco<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {} と表示</span>\n<span class=\"token operator\">&gt;</span> ocn<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// エラーが発生: ocn.valueOf is not a function</span>\n\n<span class=\"token operator\">&gt;</span> oco<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"true\" と表示</span>\n<span class=\"token operator\">&gt;</span> ocn<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// エラーが発生: ocn.hasOwnProperty is not a function</span>\n\n<span class=\"token operator\">&gt;</span> oco<span class=\"token punctuation\">.</span>constructor <span class=\"token comment\">// \"Object() { [native code] }\" と表示</span>\n<span class=\"token operator\">&gt;</span> ocn<span class=\"token punctuation\">.</span>constructor <span class=\"token comment\">// \"undefined\" と表示</span>\n</code></pre></div>\n<p>このように、これらの違いにより、一見単純そうに見える問題であっても、デバッグがすぐに迷走してしまうことがあります。例えば、以下のようなものです。</p>\n<p><em>シンプルな共通デバッグ関数です。</em></p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 与えられたオブジェクトの最上位のプロパティ名と値の組を表示</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ShowProperties</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> prop <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>prop <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> obj<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><em>このような単純な結果ではありません。 (特にサイレントエラートラップがエラーメッセージを隠していた場合)</em></p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>ob<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> ob<span class=\"token punctuation\">.</span>po<span class=\"token operator\">=</span>oco<span class=\"token punctuation\">;</span> ob<span class=\"token punctuation\">.</span>pn<span class=\"token operator\">=</span>ocn<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 上記のテストオブジェクトをプロパティ値として使用して、複合オブジェクトを生成します。</span>\n\n<span class=\"token operator\">&gt;</span> <span class=\"token function\">ShowProperties</span><span class=\"token punctuation\">(</span> ob <span class=\"token punctuation\">)</span> <span class=\"token comment\">// 最上位のプロパティを表示</span>\n<span class=\"token operator\">-</span> po<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>object Object<span class=\"token punctuation\">]</span>\n<span class=\"token operator\">-</span> Error<span class=\"token operator\">:</span> Cannot convert object to primitive value\n\n最初のプロパティのみが表示されることに注意してください。\n</code></pre></div>\n<p><em>(しかし、同じオブジェクトが単に順番が違うだけで作成されている場合 -- 少なくともいくつかの実装では...)</em></p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>ob<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> ob<span class=\"token punctuation\">.</span>pn<span class=\"token operator\">=</span>ocn<span class=\"token punctuation\">;</span> ob<span class=\"token punctuation\">.</span>po<span class=\"token operator\">=</span>oco<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 同じ複合オブジェクトを再度作成しますが、同じプロパティを異なる順序で作成します。</span>\n\n<span class=\"token operator\">&gt;</span> <span class=\"token function\">ShowProperties</span><span class=\"token punctuation\">(</span> ob <span class=\"token punctuation\">)</span> <span class=\"token comment\">// 最上位のプロパティを表示</span>\n<span class=\"token operator\">-</span> Error<span class=\"token operator\">:</span> Cannot convert object to primitive value\n\nどちらのプロパティも表示されないことに注意してください。\n</code></pre></div>\n<p>なお、このような順序の変化は、静的にはここにあるような異なる固定されたコードによって生じることがありますが、動的には、このようなプロパティを追加するコードの分岐が、入力やランダム変数によって実行される順序が変わることで生じることもあります。ただし、どのような順序でメンバーを追加しても、実際の反復順序は保証されません。</p>\n<p>また、 Object.create() で生成されたオブジェクトに Object.entries() を使用すると、空の配列が返されることにも注意してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"[]\" と表示</span>\n</code></pre></div>\n<h4 id=\"いくつかの解決しない方法\">いくつかの解決しない方法</h4>\n<p>オブジェクトメソッドが不足していることについての良い解決策は、すぐには見つかりません。</p>\n<p>不足しているオブジェクトメソッドを標準オブジェクトから直接追加してもうまくいきません。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>ocn <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"null\" オブジェクトを生成 (既出と同じ)</span>\n\nocn<span class=\"token punctuation\">.</span>toString <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 新しいオブジェクトにはメソッドがないので、標準オブジェクトから直接代入してみる</span>\n\n<span class=\"token operator\">&gt;</span> ocn<span class=\"token punctuation\">.</span>toString <span class=\"token comment\">// \"toString() { [native code] }\" と表示 -- 存在しないメソッドが来たように見えます</span>\n<span class=\"token operator\">&gt;</span> ocn<span class=\"token punctuation\">.</span>toString <span class=\"token operator\">==</span> Object<span class=\"token punctuation\">.</span>toString <span class=\"token comment\">// \"true\" と表示 -- 標準オブジェクトのメソッドと同じように見えるメソッド</span>\n\n<span class=\"token operator\">&gt;</span> ocn<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// エラー: Function.prototype.toString requires that 'this' be a Function</span>\n</code></pre></div>\n<p>不足しているオブジェクトメソッドを新しいオブジェクトの「プロトタイプ」に直接追加してもうまくいきません。なぜなら、新しいオブジェクトは本当のプロトタイプを持っておらず (これがすべての問題における真の原因です)、プロトタイプを<strong>直接</strong>追加することはできないからです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>ocn <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"null\" オブジェクトを生成 (既出と同じ)</span>\n\nocn<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">;</span> <span class=\"token comment\">// エラー: Cannot set property 'toString' of undefined</span>\n\nocn<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>                       <span class=\"token comment\">// プロトタイプを生成してみる</span>\nocn<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 新しいオブジェクトにはメソッドがないので、標準オブジェクトから代入してみる</span>\n\n<span class=\"token operator\">&gt;</span> ocn<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// エラー: ocn.toString is not a function</span>\n</code></pre></div>\n<p><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a> の第 2 引数に標準オブジェクト自身の名前を指定して、不足しているオブジェクトメソッドを追加しようとしても、うまくいきません。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>ocn <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// \"null\" オブジェクトを生成 (既出と同じ)</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span>ocn<span class=\"token punctuation\">,</span> Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 間違い。新しいオブジェクトのプロトタイプを Object() 関数に設定している</span>\n\n<span class=\"token operator\">&gt;</span> ocn<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// エラー: Function.prototype.toString requires that 'this' be a Function</span>\n</code></pre></div>\n<h4 id=\"いくつかの解決方法\">いくつかの解決方法</h4>\n<p>繰り返しになりますが、欠落しているオブジェクトメソッドを<strong>標準オブジェクト</strong>から直接追加しても動作しません。しかし、<strong>ジェネリック</strong>メソッドを直接追加すると、動作します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>ocn <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"null\" オブジェクトを生成 (既出と同じ)</span>\n\nocn<span class=\"token punctuation\">.</span>toString <span class=\"token operator\">=</span> toString<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 新しいオブジェクトにはメソッドがないので、ジェネリック版から直接代入する</span>\n\n<span class=\"token operator\">&gt;</span> ocn<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[object Object]\" と表示</span>\n<span class=\"token operator\">&gt;</span> <span class=\"token string\">\"ocn is: \"</span> <span class=\"token operator\">+</span> ocn <span class=\"token comment\">// \"ocn is: [object Object]\" と表示</span>\n\nob<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> ob<span class=\"token punctuation\">.</span>pn<span class=\"token operator\">=</span>ocn<span class=\"token punctuation\">;</span> ob<span class=\"token punctuation\">.</span>po<span class=\"token operator\">=</span>oco<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 複合オブジェクトを生成 (既出と同じ)</span>\n\n<span class=\"token operator\">&gt;</span> <span class=\"token function\">ShowProperties</span><span class=\"token punctuation\">(</span>ob<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 最上位のプロパティを表示</span>\n<span class=\"token operator\">-</span> po<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>object Object<span class=\"token punctuation\">]</span>\n<span class=\"token operator\">-</span> pn<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>object Object<span class=\"token punctuation\">]</span>\n</code></pre></div>\n<p>しかし、ジェネリック<strong>プロトタイプ</strong>を新しいオブジェクトのプロトタイプとして設定すると、さらに効果的です。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>ocn <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">// \"null\" オブジェクトを生成 (既出と同じ)</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span>ocn<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 新しいオブジェクトのプロトタイプを (標準オブジェクトではなく) 「ジェネリック」オブジェクトに設定</span>\n</code></pre></div>\n<p><em>(上記の文字列関連の関数に加えて、以下の関数も追加されています)</em></p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token operator\">&gt;</span> ocn<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {} と表示</span>\n<span class=\"token operator\">&gt;</span> ocn<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"false\" と表示</span>\n<span class=\"token operator\">&gt;</span> ocn<span class=\"token punctuation\">.</span>constructor <span class=\"token comment\">// \"Object() { [native code] }\" と表示</span>\n\n<span class=\"token comment\">// ...そして、それ以外の Object.prototype のすべてのプロパティとメソッドも</span>\n</code></pre></div>\n<p>このように、この方法で変更されたオブジェクトは、普通のオブジェクトと同じように見えます。</p>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":""}},{"type":"prose","value":{"id":"object.create_を用いた古典的な継承","title":"<code>Object.create()</code> を用いた古典的な継承","isH3":true,"content":"<p>以下の例は、古典的な継承をするための <code>Object.create()</code> の使用方法です。これは、すべての JavaScript が対応している単一継承です。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Shape - スーパークラス</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Shape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// スーパークラスのメソッド</span>\n<span class=\"token class-name\">Shape</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">move</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">+=</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">+=</span> y<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Shape moved.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Rectangle - サブクラス</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">Shape</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// call super constructor.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// サブクラスはスーパークラスを拡張する</span>\n<span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Shape</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Rectangle.prototype.constructor を Rectangle に設定しないと、</span>\n<span class=\"token comment\">// Shape (親) の prototype.constructor を取ることになります。</span>\n<span class=\"token comment\">// これを防ぐために、 prototype.constructor を Rectangle (子) に設定します。</span>\n<span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> Rectangle<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> rect <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Is rect an instance of Rectangle?'</span><span class=\"token punctuation\">,</span> rect <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Is rect an instance of Shape?'</span><span class=\"token punctuation\">,</span> rect <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Shape</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nrect<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Outputs, 'Shape moved.'</span>\n</code></pre></div>","titleAsText":"Object.create() を用いた古典的な継承"}},{"type":"prose","value":{"id":"object.create_と_propertiesobject_引数の併用","title":"Object.create() と propertiesObject 引数の併用","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> o<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// プロトタイプを null にしてオブジェクトを生成</span>\no <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\no <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// これは次のものと同等です。</span>\no <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// いくつかのサンプルプロパティを持つオブジェクトを作成</span>\n<span class=\"token comment\">// する例です。(2 番目の引数は、キーを*プロパティ記述子*に</span>\n<span class=\"token comment\">// マッピングしていることに注意してください。)</span>\no <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// foo は普通の「値プロパティ」です</span>\n  <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">writable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">configurable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">'hello'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// bar はゲッターとセッター (アクセサー) によるプロパティです</span>\n  <span class=\"token literal-property property\">bar</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">configurable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Setting `o.bar` to'</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/* ES2015 のアクセサーでは、このようになります。\n    get() { return 10; },\n    set(value) {\n      console.log('Setting `o.bar` to', value);\n    } */</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\no <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// これは次のものと同等です。</span>\no <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// もちろん、コンストラクター関数に実際の初期化</span>\n<span class=\"token comment\">// コードがある場合は、 Object.create() には反映</span>\n<span class=\"token comment\">// されません</span>\n\n<span class=\"token comment\">// プロトタイプが新規の空オブジェクトである新しいオブジェクトを</span>\n<span class=\"token comment\">// 生成し、単一のプロパティ 'p' を値を 42 にして追加します。</span>\no <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">p</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 既定では、プロパティは書き込み可能、列挙可能、構成可能ではありません</span>\no<span class=\"token punctuation\">.</span>p <span class=\"token operator\">=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span>\no<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 42</span>\n\no<span class=\"token punctuation\">.</span>q <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> prop <span class=\"token keyword\">in</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 'q'</span>\n\n<span class=\"token keyword\">delete</span> o<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// false</span>\n\n<span class=\"token comment\">// ES3 プロパティを指定</span>\no2 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">p</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">writable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">configurable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* 次のものと同じではありません。\nこれはプロトタイプが {p: 42 } であるオブジェクトを生成します。\no2 = Object.create({p: 42}) */</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"仕様書","id":"仕様書","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.create","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.Object.create"}},{"type":"browser_compatibility","value":{"title":"ブラウザーの互換性","id":"ブラウザーの互換性","isH3":false,"query":"javascript.builtins.Object.create","dataURL":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/create/bcd.json"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><code>Object.create</code> のポリフィルは <a href=\"https://github.com/zloirock/core-js#ecmascript-object\" class=\"external\" rel=\" noopener\"><code>core-js</code></a> で利用できます</li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty()</code></a></li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties\"><code>Object.defineProperties()</code></a></li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li>\n  <li><a href=\"/ja/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct\"><code>Reflect.construct()</code></a></li>\n  <li>John Resig の <a href=\"http://ejohn.org/blog/objectgetprototypeof/\" class=\"external\" rel=\" noopener\">getPrototypeOf()</a> の投稿</li>\n</ul>"}}],"toc":[{"text":"構文","id":"構文"},{"text":"カスタムオブジェクトと Null オブジェクト","id":"カスタムオブジェクトと_null_オブジェクト"},{"text":"例","id":"例"},{"text":"仕様書","id":"仕様書"},{"text":"ブラウザーの互換性","id":"ブラウザーの互換性"},{"text":"関連情報","id":"関連情報"}],"summary":"Object.create() メソッドは、既存のオブジェクトを新しく生成されるオブジェクトのプロトタイプとして使用して、新しいオブジェクトを生成します。","popularity":0.0005,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Object.create()","locale":"en-US","native":"English (US)"},{"title":"Object.create()","locale":"es","native":"Español"},{"title":"Object.create()","locale":"fr","native":"Français"},{"title":"Object.create()","locale":"ko","native":"한국어"},{"title":"Object.create()","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Object.create()","locale":"ru","native":"Русский"},{"title":"Object.create()","locale":"zh-CN","native":"中文 (简体)"},{"title":"Object.create()","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ja/web/javascript/reference/global_objects/object/create","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/javascript/reference/global_objects/object/create/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/ja/docs/Web/JavaScript/Reference","title":"JavaScript リファレンス"},{"uri":"/ja/docs/Web/JavaScript/Reference/Global_Objects","title":"標準組み込みオブジェクト"},{"uri":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object","title":"Object"},{"uri":"/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/create","title":"Object.create()"}],"pageTitle":"Object.create() - JavaScript | MDN","noIndexing":false}}