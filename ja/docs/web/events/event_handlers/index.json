{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"イベントの扱い (概要)","mdn_url":"/ja/docs/Web/Events/Event_handlers","locale":"ja","native":"日本語","sidebarHTML":"\n  <ul>\n    <li><a href=\"/ja/docs/Learn/JavaScript/Building_blocks/Events\">イベント入門</a></li>\n    <li><a href=\"/ja/docs/Web/Events\">イベントリファレンス</a></li>\n  </ul>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>イベントとは、ブラウザーや OS の環境の変化を知らせる信号で、ブラウザーのウィンドウ内で発行されます。プログラマーは、イベントが発行されたときに実行される<em>イベントハンドラー</em>のコードを作成することで、ウェブページが変化に適切に対応できるようになります。</p>\n<p>このページでは、イベントとイベントハンドラーの扱い方について、ごく簡単な「覚え書き」を提供しています。初めての方は、<a href=\"/ja/docs/Learn/JavaScript/Building_blocks/Events\">イベント入門</a>をお読みください。</p>"}},{"type":"prose","value":{"id":"イベントでは何ができるのか","title":"イベントでは何ができるのか","isH3":false,"content":"<p>イベントは、そのイベントを発行させる JavaScript オブジェクトのページの中や下に記述されています。例えば、ブラウザーのウィンドウや現在の文書で発生したイベントを確認するには、 <a href=\"/ja/docs/Web/API/Window#events\"><code>Window</code></a> や <a href=\"/ja/docs/Web/API/Document#events\"><code>Document</code></a> のイベントの節を参照してください。</p>\n<p><a href=\"/ja/docs/Web/Events#%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E7%B4%A2%E5%BC%95\">イベントのリファレンス</a>を使用すると、アニメーションやメディアなどの特定の API に対してどの JavaScript オブジェクトがイベントを発行するかを調べることができます。</p>"}},{"type":"prose","value":{"id":"イベントハンドラーの登録","title":"イベントハンドラーの登録","isH3":false,"content":"<p>ハンドラーの登録には、推奨される方法が 2 つあります。イベントハンドラーのコードは、ターゲットとなる要素の対応する <em>onevent</em> プロパティに割り当てて、イベントが起動されたときに実行されるようにするか、 <a href=\"/ja/docs/Web/API/EventTarget/addEventListener\" title=\"addEventListener()\"><code>addEventListener()</code></a> メソッドを使用して、ハンドラーを要素のリスナーとして登録するかすることができます。いずれの場合も、ハンドラーは <a href=\"/ja/docs/Web/API/Event\"><code>Event</code> インターフェイス</a> (または<a href=\"/ja/docs/Web/API/Event#introduction\">派生インターフェイス</a>) に準拠したオブジェクトを受け取ります。主な違いは、イベントリスナーのメソッドを使うと、複数のイベントハンドラーを追加 (または削除) できることです。</p>\n<div class=\"notecard warning\" id=\"sect1\">\n  <p><strong>Warning:</strong> 第 3 の方法として、 HTML の onevent 属性を使ってイベントハンドラーを設定する方法がありますが、お勧めしません。これはマークアップを膨張させ、可読性を低下させ、デバッグを困難にします。詳しくは、<a href=\"/ja/docs/Learn/JavaScript/Building_blocks/Events#inline_event_handlers_%E2%80%94_dont_use_these\">インラインイベントハンドラー</a>を参照してください。</p>\n</div>"}},{"type":"prose","value":{"id":"onevent_プロパティの使用","title":"onevent プロパティの使用","isH3":true,"content":"<p>慣習上、イベントを発行する Javascript オブジェクトには、それに対応する \"onevent\" プロパティ (イベント名の前に \"on\" を付けて命名) があります。これらのプロパティは、イベントが発行されたときに、関連するハンドラーコードを実行するために呼び出されます。</p>\n<p>イベントハンドラーのコードを設定するには、適切な onevent プロパティに代入してください。 1 つの要素のそれぞれのイベントに対して、割り当てることができるイベントハンドラーは 1 つだけです。必要に応じて、同じプロパティに別の関数を代入することで、ハンドラーを置き換えることができます。</p>\n<p>以下の例では、 <code>greet()</code> 関数を <code>click</code> イベントに割り当てるために <code>onclick</code> プロパティを使用しています。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// print the event object to console</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'greet:'</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nbtn<span class=\"token punctuation\">.</span>onclick <span class=\"token operator\">=</span> greet<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>なお、イベントハンドラーの第一引数には、イベントを表すオブジェクトが渡されます。このイベントオブジェクトは、 <a href=\"/ja/docs/Web/API/Event\"><code>Event</code></a> インターフェースを実装しているか、またはそれを継承しています。</p>"}},{"type":"prose","value":{"id":"eventtarget.addeventlistener","title":"EventTarget.addEventListener","isH3":true,"content":"<p>要素にイベントハンドラーを設定する最も柔軟な方法は、 <a href=\"/ja/docs/Web/API/EventTarget/addEventListener\"><code>EventTarget.addEventListener</code></a> メソッドを使用することです。この方法では、複数のリスナーを 1 つの要素に割り当てることができ、必要に応じて (<a href=\"/ja/docs/Web/API/EventTarget/removeEventListener\"><code>EventTarget.removeEventListener</code></a> を使用して) リスナーを削除することができます。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> イベントハンドラーの追加と削除ができることで、例えば、同じボタンで状況によって異なるアクションを実行することができます。また、より複雑なプログラムでは、古い、使われていないイベントハンドラーを整理することで、効率を上げることができます。</p>\n</div>\n<p>以下では、単純な <code>greet()</code> 関数をクリックイベントのリスナーまたはイベントハンドラーとして設定する方法を示します (必要に応じて、名前付き関数の代わりにラムダ関数を使用することもできます)。繰り返しますが、イベントは、イベントハンドラーの第一引数として渡されます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// print the event object to console</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'greet:'</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nbtn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> greet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>このメソッドは、イベントのキャプチャおよび削除の制御をするために、追加の引数/オプションを取ることもできます。詳細については、 <a href=\"/ja/docs/Web/API/EventTarget/addEventListener\"><code>EventTarget.addEventListener</code></a> のリファレンスページを参照してください。</p>\n<h4 id=\"中止シグナルの使用\">中止シグナルの使用</h4>\n<p>イベントリスナーの注目すべき機能は、中止シグナルを使って複数のイベントハンドラーを同時にクリーンアップできることです。</p>\n<p>これは、同じ <a href=\"/ja/docs/Web/API/AbortSignal\"><code>AbortSignal</code></a> を、一緒に削除できるようにしたいすべてのイベントハンドラーの <a href=\"/ja/docs/Web/API/EventTarget/addEventListener\" title=\"addEventListener()\"><code>addEventListener()</code></a> 呼び出しに渡すことで行われます。その後、 <code>AbortSignal</code> を所有するコントローラーで <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AbortController/abort\"><code>abort()</code> <small>(en-US)</small></a> を呼び出すと、そのシグナルで追加されたすべてのイベントハンドラーが削除されます。例えば、 <code>AbortSignal</code> で削除できるイベントハンドラーを追加するには、次のようにします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> controller <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AbortController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbtn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// イベントオブジェクトをコンソールに表示</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'greet:'</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">signal</span><span class=\"token operator\">:</span> controller<span class=\"token punctuation\">.</span>signal <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// このハンドラーに AbortSignal を渡す</span>\n</code></pre></div>\n<p>上記のコードで生成したイベントハンドラーは、次のようにして削除することができます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>controller<span class=\"token punctuation\">.</span><span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// このコントローラーに関連付けられたすべてのイベントハンドラーを削除</span>\n</code></pre></div>"}}],"toc":[{"text":"イベントでは何ができるのか","id":"イベントでは何ができるのか"},{"text":"イベントハンドラーの登録","id":"イベントハンドラーの登録"}],"summary":"イベントとは、ブラウザーや OS の環境の変化を知らせる信号で、ブラウザーのウィンドウ内で発行されます。プログラマーは、イベントが発行されたときに実行されるイベントハンドラーのコードを作成することで、ウェブページが変化に適切に対応できるようになります。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Event handling (overview)","locale":"en-US","native":"English (US)"},{"title":"DOM on-event 處理器","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ja/web/events/event_handlers","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/events/event_handlers/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/Events","title":"イベントリファレンス"},{"uri":"/ja/docs/Web/Events/Event_handlers","title":"イベントの扱い (概要)"}],"pageTitle":"イベントの扱い (概要) - イベントリファレンス | MDN","noIndexing":false}}