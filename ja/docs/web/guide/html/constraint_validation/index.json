{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"制約検証","mdn_url":"/ja/docs/Web/Guide/HTML/Constraint_validation","locale":"ja","native":"日本語","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>ウェブフォームの作成は常に複雑な作業でした。フォーム自体をマークアップすること自体は簡単ですが、それぞれの入力欄が妥当で一貫しているかどうかをチェックすることはもっと難しく、問題をユーザーに伝えることは頭痛がするかもしれません。<a href=\"/ja/docs/Glossary/HTML5\">HTML5</a> では、フォームに新しい仕組みが導入されました。 <a href=\"/ja/docs/Web/HTML/Element/input\"><code>&lt;input&gt;</code></a> 要素に意味を持つ新しい型と、クライアント側でフォームの内容をチェックする作業を簡単にする<em>制約検証</em>が追加されました。基本的な、よくある制約は、JavaScript を必要とせずに、新しい属性を設定することでチェックできます。もっと複雑な制約は<a href=\"/ja/docs/Web/API/Constraint_validation\">制約検証 API</a> を使用して検査することができます。</p>\n<p>これらの概念の基本的な入門 (サンプル付き) は、<a href=\"/ja/docs/Learn/Forms/Form_validation\">フォーム検証チュートリアル</a>をご覧ください。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> HTML5 の制約検証は、<em>サーバー側</em>での検証の必要性をなくす訳ではありません。不正なフォームのリクエストは減少すると思われますが、不正なリクエストはまだ互換性のないブラウザー（例えば、HTML5 や JavaScript に対応していないブラウザー）から送られたり、ウェブアプリケーションをだまそうとする悪意のある人から送られたりする可能性があります。従って、HTML4 の時と同様、クライアント側で行われている検証と一貫性のある方法で、サーバー側でも入力の制約を検証する必要があります。</p>\n</div>"}},{"type":"prose","value":{"id":"組み込みの基本的な制約","title":"組み込みの基本的な制約","isH3":false,"content":"<p>HTML5 では、基本的な制約は 2 通りの方法で定義されます。</p>\n<ul>\n  <li><a href=\"/ja/docs/Web/HTML/Element/input\"><code>&lt;input&gt;</code></a> 要素の <a href=\"/ja/docs/Web/HTML/Element/input#attr-type\"><code>type</code></a> 属性に意味的に最も適切な値を選択する。例えば <code>email</code> を選択することで、値が妥当なメールアドレスであるかどうかをチェックする制約が自動的に作成されます。</li>\n  <li>検証関連属性を設定することで、基本的な制約を簡単な方法で、JavaScript の必要なく記述できます。</li>\n</ul>"}},{"type":"prose","value":{"id":"意味を持つ入力型","title":"意味を持つ入力型","isH3":true,"content":"<p><a href=\"/ja/docs/Web/HTML/Element/input#attr-type\"><code>type</code></a> 属性の組込み制約は次の通りです。</p>\n<table>\n  <thead>\n    <tr>\n      <th>入力型</th>\n      <th>制約の説明</th>\n      <th>関連付けられた違反</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/ja/docs/Web/HTML/Element/input/url\"><code>&lt;input type=\"URL\"&gt;</code></a></td>\n      <td>値は絶対 <a href=\"/ja/docs/Learn/Common_questions/What_is_a_URL\">URL</a> であり、 <a href=\"https://url.spec.whatwg.org/\" class=\"external\" rel=\" noopener\">URL Living Standard</a> で定義された通りでなければなりません。</td>\n      <td><strong><a href=\"/ja/docs/Web/API/ValidityState/typeMismatch\">TypeMismatch</a></strong> 制約違反</td>\n    </tr>\n    <tr>\n      <td><a href=\"/ja/docs/Web/HTML/Element/input/email\"><code>&lt;input type=\"email\"&gt;</code></a></td>\n      <td>値は統語的に妥当なメールアドレスで、ふつうは <code>username@hostname.tld</code> の書式でなければなりません。</td>\n      <td><strong><a href=\"/ja/docs/Web/API/ValidityState/typeMismatch\">TypeMismatch</a></strong> 制約違反</td>\n    </tr>\n  </tbody>\n</table>\n<p>これらの入力型のどちらでも、<a href=\"/ja/docs/Web/HTML/Element/input#attr-multiple\"><code>multiple</code></a> 属性が設定されていたら、この入力欄にカンマ区切りのリストで複数の値を設定することができます。これらの中でここで書かれた条件に満足しないものがある場合、 <strong>Type mismatch</strong> 制約違反が発生します。</p>\n<p>なお、ほとんどの入力型には内部的な制約がありません。制約検証が禁止されているものや、不正な値を正しい既定値に変換する無害化アルゴリズムがあるものがあるためです。</p>"}},{"type":"prose","value":{"id":"検証関連属性","title":"検証関連属性","isH3":true,"content":"<p>上記で述べた <code>type</code> 属性に加えて、下記の要素が基本的な制約を記述するのに使われます。</p>\n<table class=\"standard-table\">\n  <thead>\n    <tr>\n      <th scope=\"col\">属性</th>\n      <th scope=\"col\">属性をサポートする入力型</th>\n      <th scope=\"col\">とりうる値</th>\n      <th scope=\"col\">制約の説明</th>\n      <th scope=\"col\">関連する違反</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code><a href=\"/ja/docs/Web/HTML/Attributes/pattern\">pattern</a></code></td>\n      <td>\n        <code>text</code>, <code>search</code>, <code>url</code>,\n        <code>tel</code>, <code>email</code>, <code>password</code>\n      </td>\n      <td>\n        <a href=\"/ja/docs/Web/JavaScript/Guide/Regular_Expressions\">JavaScript 正規表現</a>\n        （<a href=\"https://www.ecma-international.org/publications/standards/Ecma-262.htm\" class=\"external\" rel=\" noopener\">ECMAScript 5</a> で <code>global</code>, <code>ignoreCase</code>, <code>multiline</code> フラグが<em>無効</em>でコンパイルされたもの）\n      </td>\n      <td>値がパターンに一致する必要がある。</td>\n      <td>\n        <strong><code><a href=\"/ja/docs/Web/API/ValidityState/patternMismatch\">patternMismatch</a></code></strong>\n        制約違反\n      </td>\n    </tr>\n    <tr>\n      <td rowspan=\"3\"><code><a href=\"/ja/docs/Web/HTML/Attributes/min\">min</a></code></td>\n      <td><code>range</code>, <code>number</code></td>\n      <td>有効な数値</td>\n      <td rowspan=\"3\">値がその値以上であること。</td>\n      <td rowspan=\"3\">\n        <strong><code><a href=\"/ja/docs/Web/API/ValidityState/rangeUnderflow\">rangeUnderflow</a></code></strong>\n        制約違反\n      </td>\n    </tr>\n    <tr>\n      <td><code>date</code>, <code>month</code>, <code>week</code></td>\n      <td>有効な日付</td>\n    </tr>\n    <tr>\n      <td><code>datetime</code>, <code>datetime-local</code>, <code>time</code></td>\n      <td>有効な日付と時刻</td>\n    </tr>\n    <tr>\n      <td rowspan=\"3\"><code><a href=\"/ja/docs/Web/HTML/Attributes/max\">max</a></code></td>\n      <td><code>range</code>, <code>number</code></td>\n      <td>有効な数値</td>\n      <td rowspan=\"3\">値がその値以下であること。</td>\n      <td rowspan=\"3\">\n        <strong><code><a href=\"/ja/docs/Web/API/ValidityState/rangeOverflow\">rangeOverflow</a></code></strong>\n        制約違反\n      </td>\n    </tr>\n    <tr>\n      <td><code>date</code>, <code>month</code>, <code>week</code></td>\n      <td>有効な日付</td>\n    </tr>\n    <tr>\n      <td><code>datetime</code>, <code>datetime-local</code>, <code>time</code></td>\n      <td>有効な日付と時刻</td>\n    </tr>\n    <tr>\n      <td><code><a href=\"/ja/docs/Web/HTML/Attributes/required\">required</a></code></td>\n      <td>\n        <code>text</code>, <code>search</code>, <code>url</code>,\n        <code>tel</code>, <code>email</code>, <code>password</code>,\n        <code>date</code>, <code>datetime</code>, <code>datetime-local</code>,\n        <code>month</code>, <code>week</code>, <code>time</code>,\n        <code>number</code>, <code>checkbox</code>, <code>radio</code>,\n        <code>file</code> および <a href=\"/ja/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a> と <a href=\"/ja/docs/Web/HTML/Element/textarea\"><code>&lt;textarea&gt;</code></a> 要素にも\n      </td>\n      <td><em>なし</em>。論理属性のため、存在すれば <em>true</em>、存在しなければ <em>false</em> を意味する。</td>\n      <td>値は必須 (設定された場合)。</td>\n      <td>\n        <strong><code><a href=\"/ja/docs/Web/API/ValidityState/valueMissing\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">valueMissing</a></code></strong>\n        制約違反\n      </td>\n    </tr>\n    <tr>\n      <td rowspan=\"5\"><code><a href=\"/ja/docs/Web/HTML/Attributes/step\">step</a></code></td>\n      <td><code>date</code></td>\n      <td>日の整数値</td>\n      <td rowspan=\"5\">step がリテラル値 <code>any</code> 以外に設定されていた場合、値は <strong>min</strong> + step の整数倍である必要がある。</td>\n      <td rowspan=\"5\">\n        <strong><code><a href=\"/ja/docs/Web/API/ValidityState/stepMismatch\">stepMismatch</a></code></strong>\n        制約違反\n      </td>\n    </tr>\n    <tr>\n      <td><code>month</code></td>\n      <td>月の整数値</td>\n    </tr>\n    <tr>\n      <td><code>week</code></td>\n      <td>週の整数値</td>\n    </tr>\n    <tr>\n      <td><code>datetime</code>, <code>datetime-local</code>, <code>time</code></td>\n      <td>秒の整数値</td>\n    </tr>\n    <tr>\n      <td><code>range</code>, <code>number</code></td>\n      <td>整数値</td>\n    </tr>\n    <tr>\n      <td><code><a href=\"/ja/docs/Web/HTML/Attributes/minlength\">minlength</a></code></td>\n      <td>\n        <code>text</code>, <code>search</code>, <code>url</code>,\n        <code>tel</code>, <code>email</code>, <code>password</code> と\n        <a href=\"/ja/docs/Web/HTML/Element/textarea\"><code>&lt;textarea&gt;</code></a> 要素\n      </td>\n      <td>整数長</td>\n      <td>空でない場合、文字数 (コードポイント数) は属性値より少なくなってはならない。 <a href=\"/ja/docs/Web/HTML/Element/textarea\"><code>&lt;textarea&gt;</code></a> では、改行はすべて (CRLF の組ではなく) 1 文字に正規化される。</td>\n      <td>\n        <strong><code><a href=\"/ja/docs/Web/API/ValidityState/tooShort\">tooShort</a></code></strong>\n        制約違反\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/HTML/Attributes/maxlength\"><code>maxlength</code></a></td>\n      <td>\n        <code>text</code>, <code>search</code>, <code>url</code>,\n        <code>tel</code>, <code>email</code>, <code>password</code> と\n        <a href=\"/ja/docs/Web/HTML/Element/textarea\"><code>&lt;textarea&gt;</code></a> 要素\n      </td>\n      <td>整数長</td>\n      <td>文字数 (コードポイント数) が属性値を超えてはいけない。</td>\n      <td>\n        <strong><code><a href=\"/ja/docs/Web/API/ValidityState/tooLong\">tooLong</a></code></strong>\n        制約違反\n      </td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"制約検証プロセス","title":"制約検証プロセス","isH3":false,"content":"<p>制約検証は、制約検証 API を通じて、単一のフォーム要素、またはフォームレベルの <a href=\"/ja/docs/Web/HTML/Element/form\"><code>&lt;form&gt;</code></a> 要素自体に対して行われます。制約検証は以下の方法で行われます。</p>\n<ul>\n  <li><code>checkValidity()</code> または <code>reportValidity()</code> メソッドをフォーム関連 DOM インターフェイス (<a href=\"/ja/docs/Web/API/HTMLInputElement\"><code>HTMLInputElement</code></a>, <a href=\"/ja/docs/Web/API/HTMLSelectElement\"><code>HTMLSelectElement</code></a>, <a href=\"/ja/docs/Web/API/HTMLButtonElement\"><code>HTMLButtonElement</code></a>, <a href=\"/ja/docs/Web/API/HTMLOutputElement\"><code>HTMLOutputElement</code></a>, <a href=\"/ja/docs/Web/API/HTMLTextAreaElement\"><code>HTMLTextAreaElement</code></a>) に対して呼び出すことによって、この要素のみの制約を評価し、スクリプトがこの情報を取得できるようにします。 <code>checkValidity()</code> メソッドは、この要素の値が制約に合格するかどうかを論理値で返します。（これはふつう、 CSS 擬似クラスの <a href=\"/ja/docs/Web/CSS/:valid\"><code>:valid</code></a> または <a href=\"/ja/docs/Web/CSS/:invalid\"><code>:invalid</code></a> のどちらを適用するかを判断する際に、ブラウザーが呼び出します。）一方、 <code>reportValidity()</code> メソッドはあらゆる制約違反をユーザーに報告します。</li>\n  <li><code>checkValidity()</code> または <code>reportValidity()</code> メソッドを <a href=\"/ja/docs/Web/API/HTMLFormElement\"><code>HTMLFormElement</code></a> インターフェイスに対して呼び出すことによって。</li>\n  <li>フォーム自身を送信することによって。</li>\n</ul>\n<p><code>checkValidity()</code> を呼び出すことは、制約を<em>静的</em>に検証するといい、<code>reportValidity()</code> を呼び出したり、フォームを送信したりすることは、制約を<em>対話的</em>に検証するといいます。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong></p>\n  <ul>\n    <li><a href=\"/ja/docs/Web/HTML/Element/form#attr-novalidate\"><code>novalidate</code></a> 属性が <a href=\"/ja/docs/Web/HTML/Element/form\"><code>&lt;form&gt;</code></a> 要素に設定されている場合、制約の<em>対話的</em>な検証は行われません。</li>\n    <li><code>submit()</code> メソッドを <a href=\"/ja/docs/Web/API/HTMLFormElement\"><code>HTMLFormElement</code></a> インターフェイスで呼び出しても、制約検証は行われません。言い換えれば、このメソッドは制約を満たさなくてもフォームデータをサーバーに送信します。代わりに送信ボタンの <code>click()</code> メソッドを呼び出してください。</li>\n  </ul>\n</div>"}},{"type":"prose","value":{"id":"制約検証_api_を使用した複雑な制約","title":"制約検証 API を使用した複雑な制約","isH3":false,"content":"<p>JavaScript と制約 API を使用すると、より複雑な制約を実装することができます。例えば、複数のフィールドを組み合わせた制約や、複雑な計算を含む制約などです。</p>\n<p>基本的には、制約に違反しているかどうかを計算するために、何らかのフォームフィールドイベント (<strong>onchange</strong>など) で JavaScript を起動し、検証の結果を設定するためにメソッド <code>field.setCustomValidity()</code> を使用することです。空文字列は制約が満たされていることを意味し、その他の文字列はエラーがあったことを意味し、この文字列がユーザーに表示するエラーメッセージになります。</p>"}},{"type":"prose","value":{"id":"複数のフィールドを組み合わせた制約：郵便番号の検証","title":"複数のフィールドを組み合わせた制約：郵便番号の検証","isH3":true,"content":"<p>郵便番号の形式は、国によって異なります。ほとんどの国では、国コードの前に任意の接頭辞を付けることができるだけでなく（ドイツでは <code>D-</code>、フランスやスイスでは <code>F-</code> のように）、固定の桁数しかない郵便番号を持つ国もありますし、イギリスのように、特定の位置にアルファベットを入れることができる、より複雑な構造を持つ国もあります。</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> これは包括的な郵便番号検証ライブラリーではなく、主要概念のデモンストレーションです。</p>\n</div>\n<p>例として、この単純なフォームの制約検証をチェックするスクリプトを追加します。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ZIP<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>郵便番号 : <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ZIP<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Country<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>国 : <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Country<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ch<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>スイス<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fr<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>フランス<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>de<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>ドイツ<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>オランダ<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>検証<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>これは以下のように表示されます。</p><iframe class=\"sample-code-frame\" title=\"複数のフィールドを組み合わせた制約：郵便番号の検証\" id=\"frame_constraint_combining_several_fields_postal_code_validation\" src=\"https://yari-demos.prod.mdn.mozit.cloud/ja/docs/Web/Guide/HTML/Constraint_validation/_sample_.constraint_combining_several_fields_postal_code_validation.html\" loading=\"lazy\"></iframe>\n<p>まず、自分自身の制約をチェックする関数を書きます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">checkZIP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// それぞれの国で、郵便番号が従うべきパターンを定義する</span>\n  <span class=\"token keyword\">var</span> constraints <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">ch</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'^(CH-)?\\\\d{4}$'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"スイスの郵便番号は明確な 4 桁である必要があります。例: CH-1950 または 1950\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">fr</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'^(F-)?\\\\d{5}$'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"フランスの郵便番号は明確な 5 桁です。例: F-75012 または 75012\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">de</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'^(D-)?\\\\d{5}$'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"ドイツの郵便番号は明確な 5 桁です。例: D-12345 または 12345\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">nl</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'^(NL-)?\\\\d{4}\\\\s*([A-RT-Z][A-Z]|S[BCE-RT-Z])$'</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"オランダの郵便番号は明確な 4 桁に、SA、SD、SS 以外の2文字が続きます。\"</span> <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 国 ID を読む</span>\n  <span class=\"token keyword\">var</span> country <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Country\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// NPA フィールドを取得</span>\n  <span class=\"token keyword\">var</span> ZIPField <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ZIP\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 制約チェッカーを構築</span>\n  <span class=\"token keyword\">var</span> constraint <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span>constraints<span class=\"token punctuation\">[</span>country<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>constraint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// チェックする</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>constraint<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>ZIPField<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 郵便番号は制約に従っていることを ConstraintAPI を使って伝える</span>\n    ZIPField<span class=\"token punctuation\">.</span><span class=\"token function\">setCustomValidity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 郵便番号が制約に従っていないことを伝えるために、 ConstraintAPI を使用して</span>\n    <span class=\"token comment\">// この国で必要な書式についてのメッセージを伝える</span>\n    ZIPField<span class=\"token punctuation\">.</span><span class=\"token function\">setCustomValidity</span><span class=\"token punctuation\">(</span>constraints<span class=\"token punctuation\">[</span>country<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>それから、これを <a href=\"/ja/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a> の <strong>onchange</strong> イベントと <a href=\"/ja/docs/Web/HTML/Element/input\"><code>&lt;input&gt;</code></a> の <strong>oninput</strong> イベントにリンクします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Country\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>onchange <span class=\"token operator\">=</span> checkZIP<span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ZIP\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>oninput <span class=\"token operator\">=</span> checkZIP<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>郵便番号の検証の<a href=\"constraint.html\">ライブサンプル</a>もあります。</p>"}},{"type":"prose","value":{"id":"アップロード前にファイルの大きさを制限","title":"アップロード前にファイルの大きさを制限","isH3":true,"content":"<p>もう一つの一般的な制約は、アップロードされるファイルのサイズを制限することです。ファイルがサーバーに送信される前に、クライアント側でこれをチェックするには、制約検証 API、特に <code>field.setCustomValidity()</code> メソッドを、別の JavaScript API、ここでは File API と組み合わせる必要があります。</p>\n<p>こちらが HTML 部分です。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>FS<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>75KB よりも小さいファイルを選択してください。 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>FS<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>次のように表示されます。</p><iframe class=\"sample-code-frame\" title=\"アップロード前にファイルの大きさを制限\" id=\"frame_limiting_the_size_of_a_file_before_its_upload\" src=\"https://yari-demos.prod.mdn.mozit.cloud/ja/docs/Web/Guide/HTML/Constraint_validation/_sample_.limiting_the_size_of_a_file_before_its_upload.html\" loading=\"lazy\"></iframe>\n<p>JavaScript は選択されたファイルを読み込み、 <code>File.size()</code> メソッドを使ってそのサイズを取得し、それを（ハードコードされた）制限値と比較し、違反があった場合は Constraint API を呼び出してブラウザーに通知します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">checkFileSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> <span class=\"token constant\">FS</span> <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> files <span class=\"token operator\">=</span> <span class=\"token constant\">FS</span><span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// If there is (at least) one file selected</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">&gt;</span> <span class=\"token number\">75</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 制約をチェック</span>\n       <span class=\"token constant\">FS</span><span class=\"token punctuation\">.</span><span class=\"token function\">setCustomValidity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"選択されたファイルは 75 kB より大きくてはいけません。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// No custom constraint violation</span>\n  <span class=\"token constant\">FS</span><span class=\"token punctuation\">.</span><span class=\"token function\">setCustomValidity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>最後に、このメソッドを正しいイベントにフックします。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>onchange <span class=\"token operator\">=</span> checkFileSize<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ファイルサイズの制約検証の<a href=\"fileconstraint.html\">ライブサンプル</a>を見ることができます。</p>"}},{"type":"prose","value":{"id":"制約検証の視覚的スタイル","title":"制約検証の視覚的スタイル","isH3":false,"content":"<p>制約条件を設定するだけでなく、ウェブ開発者は、ユーザーにどのようなメッセージを表示するか、どのようなスタイルにするかを制御したいと考えています。</p>"}},{"type":"prose","value":{"id":"要素の外見の制御","title":"要素の外見の制御","isH3":true,"content":"<p>CSS の擬似クラスで、要素の外見を制御することができます。</p>\n<h4 id=\"required_および_optional_擬似クラス\">:required および :optional 擬似クラス</h4>\n<p><a href=\"/ja/docs/Web/CSS/:required\"><code>:required</code></a> と <a href=\"/ja/docs/Web/CSS/:optional\"><code>:optional</code></a> <a href=\"/ja/docs/Web/CSS/Pseudo-classes\">擬似クラス</a>で、 <a href=\"/ja/docs/Web/HTML/Global_attributes#attr-required\"><code>required</code></a> 属性がある、またはないフォーム要素に一致するセレクターを書くことができます。</p>\n<h4 id=\"placeholder-shown_擬似クラス\">:placeholder-shown 擬似クラス</h4>\n<p><a href=\"/ja/docs/Web/CSS/:placeholder-shown\"><code>:placeholder-shown</code></a> を参照してください。</p>\n<h4 id=\"valid_invalid_擬似クラス\">:valid :invalid 擬似クラス</h4>\n<p><a href=\"/ja/docs/Web/CSS/:valid\"><code>:valid</code></a> と <a href=\"/ja/docs/Web/CSS/:invalid\"><code>:invalid</code></a> <a href=\"/ja/docs/Web/CSS/Pseudo-classes\">擬似クラス</a>は、 &lt;input&gt; 要素の内容がその型の設定に応じて、それぞれ検証されたか、検証に失敗したかを表すために使用します。これらのクラスは、有効または無効なフォーム要素にスタイルを与えることで書式が正しい要素と正しくない要素の識別をしやすくします。</p>"}},{"type":"prose","value":{"id":"制約違反のテキストの制御","title":"制約違反のテキストの制御","isH3":true,"content":"<p>制約違反のテキストを制御するには、以下の項目が有用です。</p>\n<ul>\n  <li>以下の要素の <a href=\"/ja/docs/Web/API/Constraint_validation#element.setcustomvalidity(message)\">element.setCustomValidity(message)</a> メソッド\n    <ul>\n      <li><a href=\"/ja/docs/Web/HTML/Element/fieldset\"><code>&lt;fieldset&gt;</code></a> メモ: fieldset 要素にカスタム検証メッセージを設定しても、多くのブラウザーでは送信が抑止できません。</li>\n      <li><a href=\"/ja/docs/Web/HTML/Element/input\"><code>&lt;input&gt;</code></a></li>\n      <li><a href=\"/ja/docs/Web/HTML/Element/output\"><code>&lt;output&gt;</code></a></li>\n      <li><a href=\"/ja/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a></li>\n      <li>送信ボタン（<a href=\"/ja/docs/Web/HTML/Element/button\"><code>&lt;button&gt;</code></a> 要素の <code>submit</code> 型、または <code>input</code> 要素の <a href=\"/ja/docs/Web/HTML/Element/input/submit\">submit</a> 型。それ以外のボタンは制約検証の対象にはなりません。</li>\n      <li><a href=\"/ja/docs/Web/HTML/Element/textarea\"><code>&lt;textarea&gt;</code></a></li>\n    </ul>\n  </li>\n  <li><a href=\"/ja/docs/Web/API/ValidityState\"><code>ValidityState</code></a> インターフェイスは、上記の要素型の <a href=\"/ja/docs/Web/API/Constraint_validation#validity\">validity</a> プロパティによって返されるオブジェクトを説明します。入力された値が無効になる可能性がある様々な方法を表しています。これらを合わせると、要素の値が有効でない場合に、なぜ検証に失敗するのかを説明することができます。</li>\n</ul>"}}],"toc":[{"text":"組み込みの基本的な制約","id":"組み込みの基本的な制約"},{"text":"制約検証プロセス","id":"制約検証プロセス"},{"text":"制約検証 API を使用した複雑な制約","id":"制約検証_api_を使用した複雑な制約"},{"text":"制約検証の視覚的スタイル","id":"制約検証の視覚的スタイル"}],"summary":"ウェブフォームの作成は常に複雑な作業でした。フォーム自体をマークアップすること自体は簡単ですが、それぞれの入力欄が妥当で一貫しているかどうかをチェックすることはもっと難しく、問題をユーザーに伝えることは頭痛がするかもしれません。HTML5 では、フォームに新しい仕組みが導入されました。 <input> 要素に意味を持つ新しい型と、クライアント側でフォームの内容をチェックする作業を簡単にする制約検証が追加されました。基本的な、よくある制約は、JavaScript を必要とせずに、新しい属性を設定することでチェックできます。もっと複雑な制約は制約検証 API を使用して検査することができます。","popularity":0.0002,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Constraint validation","locale":"en-US","native":"English (US)"},{"title":"Валидация ограничений","locale":"ru","native":"Русский"},{"title":"约束验证","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/guide/html/constraint_validation","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/guide/html/constraint_validation/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/Guide","title":"開発者ガイド"},{"uri":"/ja/docs/Web/Guide/HTML/Constraint_validation","title":"制約検証"}],"pageTitle":"制約検証 - 開発者ガイド | MDN","noIndexing":false}}