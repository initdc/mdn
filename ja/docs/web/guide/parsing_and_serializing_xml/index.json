{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"XML のパースとシリアライズ","mdn_url":"/ja/docs/Web/Guide/Parsing_and_serializing_XML","locale":"ja","native":"日本語","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>場合によっては、<a href=\"/ja/docs/Glossary/XML\">XML</a> のコンテンツを解析して <a href=\"/ja/docs/Glossary/DOM\">DOM</a> ツリーに変換する必要があるでしょう。または逆に、既存の DOM ツリーを XML にシリアライズすることもあります。この記事では、XML のシリアライズと解析の一般的な作業を容易にするため、ウェブプラットフォームで提供されるオブジェクトに注目します。</p>\n<dl>\n  <dt id=\"xmlserializer\"><a href=\"/ja/docs/Web/API/XMLSerializer\"><code>XMLSerializer</code></a></dt>\n  <dd>\n    <p>DOM ツリーをシリアライズし、XML を含む文字列に変換します。</p>\n  </dd>\n  <dt id=\"domparser\"><a href=\"/ja/docs/Web/API/DOMParser\"><code>DOMParser</code></a></dt>\n  <dd>\n    <p>XML を含む文字列を解析して DOM ツリーを構築し、入力データに基づいて適切な <a href=\"/ja/docs/Web/API/XMLDocument\"><code>XMLDocument</code></a> または <a href=\"/ja/docs/Web/API/Document\"><code>Document</code></a> を返します。</p>\n  </dd>\n  <dt id=\"xmlhttprequest\"><a href=\"/ja/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a></dt>\n  <dd>\n    <p>URL からコンテンツを読み込みます。XML コンテンツは、XML 自体から構築された DOM ツリーを持つ XML <a href=\"/ja/docs/Web/API/Document\"><code>Document</code></a> オブジェクトとして返されます。</p>\n  </dd>\n  <dt id=\"xpath\"><a href=\"/ja/docs/Web/XPath\">XPath</a></dt>\n  <dd>\n    <p>XML 文書の特定の部分のアドレスを含む文字列を作成し、それらのアドレスに基づいて XML ノードを特定する技術。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"xml_文書を作成する","title":"XML 文書を作成する","isH3":false,"content":"<p>次のいずれかの方法で XML 文書を作成します (これは <a href=\"/ja/docs/Web/API/Document\"><code>Document</code></a> のインスタンスです)。</p>"}},{"type":"prose","value":{"id":"文字列を_dom_ツリーにパースする","title":"文字列を DOM ツリーにパースする","isH3":true,"content":"<p>この例では、<a href=\"/ja/docs/Web/API/DOMParser\"><code>DOMParser</code></a> を使用して文字列の XML フラグメントを DOM ツリーに変換します:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> xmlStr <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;a id=\"a\"&gt;&lt;b id=\"b\"&gt;hey!&lt;/b&gt;&lt;/a&gt;'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> parser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DOMParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> dom <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span><span class=\"token function\">parseFromString</span><span class=\"token punctuation\">(</span>xmlStr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// print the name of the root element or error message</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>nodeName <span class=\"token operator\">==</span> <span class=\"token string\">\"parsererror\"</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"error while parsing\"</span> <span class=\"token operator\">:</span> dom<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>nodeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"url_にできるリソースを_dom_ツリーにパースする","title":"URL にできるリソースを DOM ツリーにパースする","isH3":true,"content":"<h4 id=\"xmlhttprequest_を使用する\">XMLHttpRequest を使用する</h4>\n<p>URL アドレス指定が可能な XML ファイルを読み込み解析して DOM ツリーにするサンプルコードを次に示します:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nxhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">dump</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseXML<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>nodeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nxhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">dump</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error while getting XML.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"example.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span>responseType <span class=\"token operator\">=</span> <span class=\"token string\">\"document\"</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>xhr</code> オブジェクトの <a href=\"/ja/docs/Web/API/XMLHttpRequest/responseXML\" title=\"responseXML\"><code>responseXML</code></a> フィールドで返される値は XML の解析により構築された <a href=\"/ja/docs/Web/API/Document\"><code>Document</code></a> です。</p>\n<p>document が <a href=\"/ja/docs/Glossary/HTML\">HTML</a> である場合、上記のコードは <a href=\"/ja/docs/Web/API/Document\"><code>Document</code></a> を返します。document が XML である場合、返されるオブジェクトは <a href=\"/ja/docs/Web/API/XMLDocument\"><code>XMLDocument</code></a> になります。この 2 種類は基本的に同じですが、その違いは主に歴史的な部分であり、差別化にはいくつかの実用的な利点があります。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> There is in fact an <a href=\"/ja/docs/Web/API/HTMLDocument\"><code>HTMLDocument</code></a> interface as well, but it is not necessarily an independent type. In some browsers it is, while in others it is simply an alias for the <code>Document</code> interface.</p>\n</div>"}},{"type":"prose","value":{"id":"xml_文書のシリアライズ","title":"XML 文書のシリアライズ","isH3":false,"content":"<p>Given a <a href=\"/ja/docs/Web/API/Document\"><code>Document</code></a>, you can serialize the document's DOM tree back into XML using the <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XMLSerializer/serializeToString\"><code>XMLSerializer.serializeToString()</code> <small>(en-US)</small></a> method.</p>\n<p>Use the following approaches to serialize the contents of the XML document you created in the previous section.</p>"}},{"type":"prose","value":{"id":"dom_ツリーを文字列にシリアライズ","title":"DOM ツリーを文字列にシリアライズ","isH3":true,"content":"<p>First, create a DOM tree as described in <a href=\"/ja/How_to_create_a_DOM_tree\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">How to Create a DOM tree</a>. Alternatively, use a DOM tree obtained from <a href=\"/ja/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a>.</p>\n<p>To serialize the DOM tree <code>doc</code> into XML text, call <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XMLSerializer/serializeToString\"><code>XMLSerializer.serializeToString()</code> <small>(en-US)</small></a>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> serializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> xmlStr <span class=\"token operator\">=</span> serializer<span class=\"token punctuation\">.</span><span class=\"token function\">serializeToString</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"html_文書のシリアライズ","title":"HTML 文書のシリアライズ","isH3":true,"content":"<p>If the DOM you have is an HTML document, you can serialize using <code>serializeToString()</code>, but there is a simpler option: just use the <a href=\"/ja/docs/Web/API/Element/innerHTML\"><code>Element.innerHTML</code></a> property (if you want just the descendants of the specified node) or the <a href=\"/ja/docs/Web/API/Element/outerHTML\"><code>Element.outerHTML</code></a> property if you want the node and all its descendants.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> docInnerHtml <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>As a result, <code>docHTML</code> is a <a href=\"/ja/docs/Glossary/String\"><code>DOMString</code></a> containing the HTML of the contents of the document; that is, the <a href=\"/ja/docs/Web/HTML/Element/body\"><code>&lt;body&gt;</code></a> element's contents.</p>\n<p>You can get HTML corresponding to the <code>&lt;body&gt;</code> <em>and</em> its descendants with this code:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> docOuterHtml <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>outerHTML<span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"関連項目","title":"関連項目","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/XPath\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">XPath</a></li>\n  <li><a href=\"/ja/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a></li>\n  <li><a href=\"/ja/docs/Web/API/Document\"><code>Document</code></a>, <a href=\"/ja/docs/Web/API/XMLDocument\"><code>XMLDocument</code></a> および <a href=\"/ja/docs/Web/API/HTMLDocument\"><code>HTMLDocument</code></a></li>\n</ul>"}}],"toc":[{"text":"XML 文書を作成する","id":"xml_文書を作成する"},{"text":"XML 文書のシリアライズ","id":"xml_文書のシリアライズ"},{"text":"関連項目","id":"関連項目"}],"summary":"場合によっては、XML のコンテンツを解析して DOM ツリーに変換する必要があるでしょう。または逆に、既存の DOM ツリーを XML にシリアライズすることもあります。この記事では、XML のシリアライズと解析の一般的な作業を容易にするため、ウェブプラットフォームで提供されるオブジェクトに注目します。","popularity":0.0002,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Parsing and serializing XML","locale":"en-US","native":"English (US)"},{"title":"Convertir código a cadena de texto (serializing) y visceversa (parsing) a un  XML","locale":"es","native":"Español"},{"title":"XML 파싱 및 직렬화","locale":"ko","native":"한국어"},{"title":"Прямая и обратная обработка XML","locale":"ru","native":"Русский"},{"title":"Parsing and serializing XML","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/guide/parsing_and_serializing_xml","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/guide/parsing_and_serializing_xml/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/Guide","title":"開発者ガイド"},{"uri":"/ja/docs/Web/Guide/Parsing_and_serializing_XML","title":"XML のパースとシリアライズ"}],"pageTitle":"XML のパースとシリアライズ - 開発者ガイド | MDN","noIndexing":false}}