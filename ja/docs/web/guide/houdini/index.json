{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"CSS Houdini","mdn_url":"/ja/docs/Web/Guide/Houdini","locale":"ja","native":"日本語","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Houdini は、CSS エンジンの一部を公開する低レベル API のセットであり、開発者はブラウザーのレンダリングエンジンのスタイリングおよびレイアウトプロセスにフックすることで CSS を拡張できます。 Houdini は、開発者が <a href=\"/ja/docs/Web/API/CSS_Object_Model\">CSS オブジェクトモデル</a>（CSSOM）に直接アクセスできるようにする API のグループです。 開発者は、ブラウザーが CSS として解析できるコードを記述できるため、ブラウザーにネイティブに実装されるのを待たずに新しい CSS 機能を作成できます。</p>"}},{"type":"prose","value":{"id":"houdini_の利点","title":"Houdini の利点","isH3":false,"content":"<p>Houdini は、スタイルの変更に JavaScript の .<a href=\"/ja/docs/Web/API/HTMLElement/style\"><code>style</code></a> を使用するよりも高速な解析時間を可能にします。 ブラウザーは、スクリプトで見つかったスタイルの更新を適用する前に、CSSOM（レイアウト、ペイント、合成のプロセスを含む）を解析します。 さらに、JavaScript スタイルの更新のために、レイアウト、ペイント、および合成のプロセスが繰り返されます。 Houdini のコードは、最初のレンダリングサイクルが完了するまで待機しません。 むしろ、それは最初のサイクルに含まれ、レンダリング可能で理解可能なスタイルを作成します。 Houdini は、JavaScript で CSS 値を操作するためのオブジェクトベースの API を提供します。</p>\n<p>Houdini の CSS Typed OM は、型とメソッドを備えた CSS オブジェクトモデルであり、値を JavaScript オブジェクトとして公開し、以前の文字列ベースの <a href=\"/ja/docs/Web/API/HTMLElement/style\"><code>HTMLElement.style</code></a> 操作よりも直感的な CSS 操作を実現します。 すべての要素とスタイルシートのルールには、<a href=\"/en-US/docs/Web/API/StylePropertyMap\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">StylePropertyMap (en-US)</a> を介してアクセスできるスタイルマップがあります。</p>\n<p>CSS Houdini の機能の 1 つはワークレット（<a href=\"/ja/docs/Web/API/Worklet\">Worklet</a>）です。 ワークレットを使用すると、モジュール方式の CSS を作成できます。 構成可能なコンポーネントをインポートするには、次の JavaScript の 1 行が必要です。 プリプロセッサー、ポストプロセッサー、JavaScript フレームワークは必要ありません。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n  <span class=\"token constant\">CSS</span><span class=\"token punctuation\">.</span>paintWorklet<span class=\"token punctuation\">.</span><span class=\"token function\">addModule</span><span class=\"token punctuation\">(</span><span class=\"token string\">'csscomponent.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n</code></pre></div>\n<p>この追加されたモジュールには、完全に構成可能なワークレットを登録する <a href=\"/en-US/docs/Web/API/PaintWorklet/registerPaint\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">registerPaint() (en-US)</a> 関数が含まれています。</p>\n<p>CSS の <code>paint()</code> 関数のパラメーターには、オプションのパラメーターとともに、ワークレットの名前が含まれます。 ワークレットは要素のカスタムプロパティにもアクセスできます。 これらは関数の引数として渡す必要はありません。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">li</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">paint</span><span class=\"token punctuation\">(</span>myComponent<span class=\"token punctuation\">,</span> stroke<span class=\"token punctuation\">,</span> 10px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">--highlights</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">--lowlights</span><span class=\"token punctuation\">:</span> green<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> 大きな力には大きな責任が伴います。 Houdini を使用すると、独自の石積み（masonry）、グリッド、またはリージョンの実装を発明できますが、そうすることが必ずしも最良の考えであるとは限りません。 CSS ワーキンググループは、すべての機能が確実に実行され、すべてのエッジケースを処理し、セキュリティ、プライバシー、およびアクセシビリティを考慮するために多くの作業を行います。 Houdini で CSS を拡張するときは、これらの考慮事項を念頭に置き、より野心的なプロジェクトに進む前に、まずは小さいものから始めてください。</p>\n</div>"}},{"type":"prose","value":{"id":"houdini_の_api","title":"Houdini の API","isH3":false,"content":"<p>以下に、Houdini の傘下にある API をカバーするメインリファレンスページへのリンクと、それらの使用方法を学習する際にガイダンスが必要な場合に役立つガイドへのリンクを示します。</p>\n<dl>\n  <dt id=\"css_parser_api\">CSS Parser API</dt>\n  <dd>\n    <p>任意の CSS のような言語を穏やかに型付けされた表現に解析するために、CSS パーサーをより直接的に公開する API。</p>\n    <p>この API のガイドやリファレンスは現在書かれていません。</p>\n  </dd>\n  <dt id=\"css_properties_and_values_api\">CSS Properties and Values API</dt>\n  <dd>\n    <p>新しい CSS プロパティを登録するための API を定義します。 この API を使用して登録したプロパティには、型、継承の振る舞い、および初期値を定義する解析構文が提供されます。</p>\n    <p>\n      <a href=\"/ja/docs/Web/API/CSS_Properties_and_Values_API\">CSS Properties and Values API リファレンス</a>\n      <a href=\"/ja/docs/Web/API/CSS_Properties_and_Values_API/guide\">CSS Properties and Values API ガイド</a>\n    </p>\n  </dd>\n  <dt id=\"css_typed_om\">CSS Typed OM</dt>\n  <dd>\n    <p>CSSOM 値の文字列を意味のある型の JavaScript 表現に変換したり、元に戻したりすると、パフォーマンスのオーバーヘッドが大幅に増加する可能性があります。 CSS Typed OM は、CSS 値を型付き JavaScript オブジェクトとして公開し、パフォーマンスの高い操作を可能にします。</p>\n    <p>\n      <a href=\"/ja/docs/Web/API/CSS_Typed_OM_API\">CSS Typed OM リファレンス</a>\n      <a href=\"/ja/docs/Web/API/CSS_Typed_OM_API/Guide\">CSS Typed OM ガイド</a>\n    </p>\n  </dd>\n  <dt id=\"css_layout_api\">CSS Layout API</dt>\n  <dd>\n    <p>CSS の拡張性を改善するように設計されたこの API は、開発者が石積みやラインスナップなどの独自のレイアウトアルゴリズムを作成できるようにします。 まだネイティブでは利用できません。</p>\n    <p>この API のガイドやリファレンスは現在書かれていません。</p>\n  </dd>\n  <dt id=\"css_painting_api\">CSS Painting API</dt>\n  <dd>\n    <p>CSS の拡張性を向上させるために開発 — 開発者が <code>paint()</code> CSS 関数を介して要素の背景、境界線、またはコンテンツに直接描画できる JavaScript 関数を記述できるようにします。</p>\n    <p>\n      <a href=\"/ja/docs/Web/API/CSS_Painting_API\">CSS Painting API リファレンス</a>\n      <a href=\"/ja/docs/Web/API/CSS_Painting_API/Guide\">CSS Painting API ガイド</a>\n    </p>\n  </dd>\n  <dt id=\"worklets\">Worklets</dt>\n  <dd>\n    <p>メインの JavaScript 実行環境から独立した、レンダリングパイプラインのさまざまな段階でスクリプトを実行するための API。 ワークレットは概念的には <a href=\"/ja/docs/Web/API/Web_Workers_API/Using_web_workers\">Web Workers</a> に似ており、レンダリングエンジンによって呼び出され、レンダリングエンジンを拡張します。</p>\n    <p><a href=\"/ja/docs/Web/API/Worklet\">Worklets リファレンス</a></p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"その他のトピック","title":"その他のトピック","isH3":false,"content":"<p>興味深い方法で Houdini API と連携して使用できるため、興味深い関連トピック。</p>\n<p>合成スクロールとアニメーション</p>"}}],"toc":[{"text":"Houdini の利点","id":"houdini_の利点"},{"text":"Houdini の API","id":"houdini_の_api"},{"text":"その他のトピック","id":"その他のトピック"}],"summary":"Houdini は、CSS エンジンの一部を公開する低レベル API のセットであり、開発者はブラウザーのレンダリングエンジンのスタイリングおよびレイアウトプロセスにフックすることで CSS を拡張できます。 Houdini は、開発者が CSS オブジェクトモデル（CSSOM）に直接アクセスできるようにする API のグループです。 開発者は、ブラウザーが CSS として解析できるコードを記述できるため、ブラウザーにネイティブに実装されるのを待たずに新しい CSS 機能を作成できます。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"CSS Houdini","locale":"en-US","native":"English (US)"},{"title":"CSS Houdini","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ja/web/guide/houdini","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/guide/houdini/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/Guide","title":"開発者ガイド"},{"uri":"/ja/docs/Web/Guide/Houdini","title":"CSS Houdini"}],"pageTitle":"CSS Houdini - 開発者ガイド | MDN","noIndexing":false}}