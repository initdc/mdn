{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"ユーザ入力とコントロール","mdn_url":"/ja/docs/Web/Guide/User_input_methods","locale":"ja","native":"日本語","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>現代のウェブのユーザー入力は、単純なマウスやキーボードだけではありません。この記事では、ユーザー入力を管理し、オープンなウェブアプリに制御を実装するための推奨事項を、FAQ、実例、および基礎となる技術について、より詳細な情報を必要とする人のための詳細な情報へのリンクとともに提供します。関連する API とイベントには、<a href=\"/ja/docs/Web/API/Touch_events\">タッチイベント</a>、<a href=\"/ja/docs/Web/API/Pointer_Lock_API\">Pointer Lock API</a>、<a href=\"/ja/docs/Web/API/CSS_Object_Model/Managing_screen_orientation\">Screen Orientation API</a>、<a href=\"/ja/docs/Web/API/Fullscreen_API\">Fullscreen API</a>、<a href=\"/ja/docs/Web/API/HTML_Drag_and_Drop_API\">ドラッグ＆ドロップ API</a> などがあります。</p>"}},{"type":"prose","value":{"id":"ユーザー入力とコントロールのワークフロー","title":"ユーザー入力とコントロールのワークフロー","isH3":false,"content":"<p>次の図式は、ユーザー入力の仕組みを実装するための典型的なワークフローを説明しています。</p>\n<p>\n  <img src=\"https://mdn.mozillademos.org/files/8085/user-input-and-controls.png\" alt=\"\" loading=\"lazy\">\n</p>\n<p>最初に、マウス、キーボード、指でのタッチなどから、アプリケーションで対象としたい入力の仕組みをどれにするかを決める必要があります。入力の仕組みを決めたのであれば、ウェブプラットフォームや JavaScript ライブラリーによって提供されているツールを使い、制御することができます。</p>"}},{"type":"prose","value":{"id":"推奨事項","title":"推奨事項","isH3":false,"content":"<p>利用できる入力の仕組みはアプリを動かしているデバイスの性能に依存します。</p>\n<ul>\n  <li>デバイスの中にはタッチスクリーンディスプレイを提供するものがあります。そのウェブプラットフォームは、タッチを基にしたユーザーインターフェースで指の動きを解釈するための<a href=\"/ja/docs/Web/API/Touch_events\">タッチイベント</a>を提供します。</li>\n  <li>ポインターを操作する方法としてマウスやタッチパッドを提供しているデバイスの場合、<a href=\"/ja/docs/Web/API/Pointer_Lock_API\">Pointer Lock API</a> が一人称視点の 3D ゲームの実装や、他のアプリがポイントを合わせているデバイスの全ての制御を要求するのに役立ちます。そして <a href=\"/ja/docs/Web/API/Fullscreen_API\">Fullscreen API</a> は、あなたのアプリを全画面モードで表示するのに役立ちます。</li>\n  <li><a href=\"/ja/docs/Web/Guide/HTML/Editable_content\">コンテンツが編集可能な要素（contentEditable など）</a>のような機能を使うことで、速いリッチテキストエディターを実装することができ、そして<a href=\"/ja/docs/Web/API/HTML_Drag_and_Drop_API\">ドラッグ＆ドロップ API</a>はユーザーがあなたのアプリ内に要素を移動することを可能にします。画面の向きがあなたのアプリで問題である時、<a href=\"/ja/docs/Web/API/CSS_Object_Model/Managing_screen_orientation\">Screen Orientation API</a> を通して、画面の向きの状態を参照でき、またその他のアクションを実行できます。</li>\n  <li>キーボードのアクセシビリティが適切か常に気に掛ける必要があります。多くのユーザーはキーボードのみを使いウェブサイトやアプリを操作します。ですので、あなたのシステムの機能性からそれを除外することは良くない考えです。</li>\n</ul>\n<p>以下は推奨事項一式であり、オープンなウェブアプリでそのようなツールを利用するためのベストプラクティスです。</p>"}},{"type":"prose","value":{"id":"使用する入力の仕組みを決める","title":"使用する入力の仕組みを決める","isH3":true,"content":"<h4 id=\"キーボード\">キーボード</h4>\n<p>キーボード入力はあなたのアプリによって制御できます。例えば、何らかのキーが押された時に制御を追加したい場合、ウィンドウオブジェクトにイベントリスナーを追加する必要があります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"keydown\"</span><span class=\"token punctuation\">,</span> handleKeyDown<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"keyup\"</span><span class=\"token punctuation\">,</span> handleKeyUp<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>handleKeyDown</code> と <code>handleKeyUp</code> は、<code>keydown</code> と <code>keyup</code> イベントについての制御を実装する関数です。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> キーボードイベントについて、より知りたい人は<a href=\"/ja/docs/Web/Events\">イベントリファレンス</a> と <a href=\"/ja/docs/Web/API/KeyboardEvent\"><code>KeyboardEvent</code></a> ガイドをご確認ください。</p>\n</div>\n<h4 id=\"マウス\">マウス</h4>\n<p>ユーザーがマウスのようなポインティングデバイスと関わっている時に発生するイベントは <a href=\"/ja/docs/Web/API/MouseEvent\"><code>MouseEvent</code></a> DOM インターフェースによって表されます。一般的なマウスイベントは、<a href=\"/ja/docs/Web/API/Element/click_event\"><code>click イベント</code></a>、<a href=\"/ja/docs/Web/API/Element/dblclick_event\"><code>dblclick イベント</code></a>、<a href=\"/ja/docs/Web/API/Element/mouseup_event\"><code>mouseup イベント</code></a>、そして <a href=\"/ja/docs/Web/API/Element/mousedown_event\"><code>mousedown イベント</code></a>を含みます。マウスイベントインターフェースが使用している全てのイベントの一覧は、<a href=\"/ja/docs/Web/Events\">イベントリファレンス</a>に記載されています。</p>\n<p>入力デバイスがマウスの場合、ユーザー入力を Pointer Lock API やドラッグ＆ドロップ API の実装でも制御できます (下記を参照してください)。</p>\n<h4 id=\"指でのタッチ\">指でのタッチ</h4>\n<p>タッチスクリーンデバイスにインストールされることを目的としている ウェブアプリを開発している時、ディスプレイ解像度とユーザー入力に関して異なる性能を考慮することは良いプラクティスです。<a href=\"/ja/docs/Web/API/Touch_events\">タッチイベント</a>は、タッチスクリーンデバイス上のインタラクションな要素と一般的なインタラクションジェスチャーを実装するのに役立ちます。</p>\n<p>タッチイベントを使いたいのであれば、イベントリスナーを追加して、イベントが発火された時に呼び出されるハンドラー関数を指定する必要があります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>element<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"touchstart\"</span><span class=\"token punctuation\">,</span> handleStart<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nelement<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"touchcancel\"</span><span class=\"token punctuation\">,</span> handleCancel<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nelement<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"touchend\"</span><span class=\"token punctuation\">,</span> handleEnd<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nelement<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"touchmove\"</span><span class=\"token punctuation\">,</span> handleMove<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ここでの <code>element</code> は、あなたがタッチイベントを登録したい DOM 要素です。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> タッチイベントでできることについての更なる情報は、<a href=\"/ja/docs/Web/API/Touch_events\">タッチイベントガイド</a>を読んでください。</p>\n</div>\n<h4 id=\"ポインターイベント\">ポインターイベント</h4>\n<p>マウス、指でのタッチ、ペン入力など複数の入力形式が内蔵されているデバイスを扱う時、これら全ての異なる制御の仕組みを機能させるソリューションを開発することは難しいかもしれません。<a href=\"https://www.w3.org/TR/pointerevents/\" class=\"external\" rel=\" noopener\">Pointer Events</a> は、デバイス毎の扱いを標準化することにより、開発者がデバイスを横断してイベントを管理することをより簡単にするのに役立ちます。マウスカーソル、ペン、タッチ（マルチタッチを含む）、またはその他のポインティング入力デバイスによって、ポインターはスクリーン上のあらゆる接点となることができます。汎用的なポインター入力を扱うためのイベントは、<code>pointerdown</code>、<code>pointermove</code>、<code>pointerup</code>、<code>pointerover</code>、<code>pointerout</code> などのマウス用のイベントとよく似ています。</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> Pointer Events はまだ広くサポートされていませんが、<a href=\"https://github.com/mozilla/pointer.js\" class=\"external\" rel=\" noopener\">pointer.js polyfill</a> は Mozilla Github で利用可能です。</p>\n</div>"}},{"type":"prose","value":{"id":"コントロールの実装","title":"コントロールの実装","isH3":true,"content":"<h4 id=\"ポインターロック\">ポインターロック</h4>\n<p>典型的なゲーム開発では、ブラウザやスクリーンの境界を超えた時でさえもマウスイベントにアクセスすることが必要なケースがあるかもしれません。<a href=\"/ja/docs/Web/API/Pointer_Lock_API\">Pointer Lock API</a> はポインティングデバイスの全ての制御を可能にします。</p>\n<p>以下は <code>element</code> にポインターロックをリクエストしているコードです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>element<span class=\"token punctuation\">.</span><span class=\"token function\">requestPointerLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>Note:</strong> 全てのチュートリアルとリファレンスは、<a href=\"/ja/docs/Web/API/Pointer_Lock_API\">Pointer Lock API</a> のページを読んでください。</p>\n</div>\n<h4 id=\"画面の向き\">画面の向き</h4>\n<p>画面の向きがあなたのアプリケーションの問題である時、<a href=\"/ja/docs/Web/API/CSS_Object_Model/Managing_screen_orientation\">Screen Orientation API</a> を通して画面の向きの状態を参照し、状態が変化した時に通知し、そして画面の向きを特定の状態（大抵はポートレートもしくはランドスケープ）に固定することができます。</p>\n<p>画面の向きのデータは <a href=\"/ja/docs/Web/API/Screen/orientation\"><code>screen.orientation</code></a> 属性、または <a href=\"/ja/docs/Web/CSS/@media/orientation\"><code>orientation</code></a> メディア特性を通して取得することができます。<code>screen.orientation</code> が変化した時、<a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>screen.orientationchange</code></a> イベントがスクリーンオブジェクトで発火されます。<a href=\"/ja/docs/Web/API/Screen/lockOrientation\"><code>screen.lockOrientation</code></a> メソッドを呼ぶことで画面の向きを固定することができます。また、<a href=\"/ja/docs/Web/API/Screen/unlockOrientation\"><code>screen.unlockOrientation</code></a> メソッドはそれまで設定されていた画面のロックを全て解除します。</p>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>Note:</strong> Screen Orientation API についてのより多くの情報は<a href=\"/ja/docs/Web/API/CSS_Object_Model/Managing_screen_orientation\">画面の向きの管理</a>で確認することができます。</p>\n</div>\n<h4 id=\"全画面\">全画面</h4>\n<p>あなたのアプリケーションの要素を全画面モードで表示する必要があるかもしれません(例えば <a href=\"/ja/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a> のような)。その要素で <a href=\"/ja/docs/Web/API/Element/requestFullScreen\"><code>Element.requestFullscreen()</code></a> を呼び出すことによって全画面モードを実現することができます。多くのブラウザーが、これをまだベンダー接頭辞とともに実装していることを覚えておいてください。ですので、あなたのコードを以下のようにフォークする必要があるかもしれません:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> elem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myvideo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">.</span>requestFullscreen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  elem<span class=\"token punctuation\">.</span><span class=\"token function\">requestFullscreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">.</span>msRequestFullscreen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  elem<span class=\"token punctuation\">.</span><span class=\"token function\">msRequestFullscreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">.</span>mozRequestFullScreen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  elem<span class=\"token punctuation\">.</span><span class=\"token function\">mozRequestFullScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">.</span>webkitRequestFullscreen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  elem<span class=\"token punctuation\">.</span><span class=\"token function\">webkitRequestFullscreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect6\">\n  <p><strong>Note:</strong> 全画面の機能性をあなたのアプリケーションに追加することについてもっと知るには、私たちの<a href=\"/ja/docs/Web/API/Fullscreen_API\">全画面モードの使用</a>についてのドキュメントを読んでください。</p>\n</div>\n<h4 id=\"ドラッグ＆ドロップ\">ドラッグ＆ドロップ</h4>\n<p><a href=\"/ja/docs/Web/API/HTML_Drag_and_Drop_API\">ドラッグ＆ドロップ API</a> によりあなたのアプリケーションのユーザーは、クリックして要素を超えてマウスボタンを押し続け、他の場所にドラッグし、そしてその要素を移動先にドロップするためにマウスボタンを離すことができます。</p>\n<p>以下は、コンテンツのセクションにドラッグできるようにする例です。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">draggable</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ondragstart</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>event.dataTransfer.setData(<span class=\"token punctuation\">'</span>text/plain<span class=\"token punctuation\">'</span>, <span class=\"token punctuation\">'</span>This text may be dragged<span class=\"token punctuation\">'</span>)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    This text <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">&gt;</span></span>may<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">&gt;</span></span> be dragged.\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>私たちが実装する点は以下です:</p>\n<ul>\n  <li>ドラッグ可能にしたい要素の <a href=\"/ja/docs/Web/HTML/Global_attributes#attr-draggable\"><code>draggable</code></a> 属性を true にセットします。</li>\n  <li><a href=\"/ja/docs/conflicting/Web/API/HTMLElement/dragstart_event_be9da5ef68a2920309b168752ea03d20\"><code>dragstart</code></a> イベントのためのリスナーを追加し、このリスナーの中にドラッグデータをセットします。</li>\n</ul>\n<div class=\"notecard note\" id=\"sect7\">\n  <p><strong>Note:</strong> <a href=\"/ja/docs/Web/API/HTML_Drag_and_Drop_API\">MDN のドラッグ＆ドロップドキュメント</a>でもっと多くの情報を確認することができます。</p>\n</div>\n<h4 id=\"コンテンツを編集可能にする\">コンテンツを編集可能にする</h4>\n<p><a href=\"/ja/docs/Web/HTML/Global_attributes#attr-contenteditable\"><code>contenteditable</code></a> 属性を使うことで、開いているウェブアプリのあらゆる DOM 要素を直接編集することができます。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">contenteditable</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    このテキストは閲覧者が編集することができます。\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect8\">\n  <p><strong>Note:</strong> 互換性や例、その他リソースに関する情報は <a href=\"/ja/docs/Web/Guide/HTML/Editable_content\">コンテンツを編集可能にするガイド</a>で確認することができます。</p>\n</div>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":false,"content":"<dl>\n  <dt id=\"複数のタッチポイントを同時に追跡する\"><strong><a href=\"/ja/docs/Web/API/Touch_events#example\">複数のタッチポイントを同時に追跡する</a></strong></dt>\n  <dd>\n    <p>この例は一度に複数のタッチ箇所を追跡しており、ユーザーは <code><a href=\"/ja/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a></code> の中で一本以上の指で同時に描くことができます。タッチイベントをサポートしているブラウザーでのみ動きます。</p>\n  </dd>\n  <dt id=\"シンプルなポインターロックデモ\"><strong><a href=\"/ja/docs/Web/API/Pointer_Lock_API#example\">シンプルなポインターロックデモ</a></strong></dt>\n  <dd>\n    <p>シンプルなコントロールシステムをセットアップするためのポインターロックの使い方を紹介するために、シンプルなポインターロックデモを記載しています。このデモでは <code><a href=\"/ja/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a></code> 要素の中にボールを描くために JavaScript を使っています。canvas をクリックすると、ポインターロックはその後、マウスポインターの除去と直接マウスを使ってボールを移動させるために利用されます。</p>\n  </dd>\n  <dt id=\"コンテンツを編集可能にするデモ\"><strong><a href=\"https://html5demos.com/contenteditable\" class=\"external\" rel=\" noopener\">コンテンツを編集可能にするデモ</a></strong></dt>\n  <dd>\n    <p>このデモは、編集可能なドキュメントセクションを作成することに利用できる contenteditable がどのように動くか表示しており、その状態はその後 <a href=\"/ja/docs/Web/API/Web_Storage_API\">ローカルストレージ</a>を使い保存されます。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"チュートリアル","title":"チュートリアル","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/API/Touch_events\">タッチイベントガイド</a></li>\n  <li><a href=\"/ja/docs/Web/API/CSS_Object_Model/Managing_screen_orientation\">画面の向きの管理</a></li>\n  <li><a href=\"/ja/docs/Web/API/Fullscreen_API\">全画面モードの使用</a></li>\n  <li><a href=\"/ja/docs/Web/API/HTML_Drag_and_Drop_API/Multiple_items\">複数のアイテムのドラッグ＆ドロップ</a></li>\n  <li><a href=\"/ja/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations\">ドラッグ操作ガイド</a></li>\n</ul>"}},{"type":"prose","value":{"id":"関連情報","title":"関連情報","isH3":false,"content":"<ul>\n  <li><a href=\"/ja/docs/Web/API/MouseEvent\"><code>MouseEvent</code></a></li>\n  <li><a href=\"/ja/docs/Web/API/KeyboardEvent\"><code>KeyboardEvent</code></a></li>\n  <li><a href=\"/ja/docs/Web/API/Touch_events\">タッチイベント</a></li>\n  <li><a href=\"/ja/docs/Web/API/Pointer_Lock_API\">Pointer Lock API</a></li>\n  <li><a href=\"/ja/docs/Web/API/CSS_Object_Model/Managing_screen_orientation\">Screen Orientation API</a></li>\n  <li><a href=\"/ja/docs/Web/API/Fullscreen_API\">Fullscreen API</a></li>\n  <li><a href=\"/ja/docs/Web/API/HTML_Drag_and_Drop_API\">ドラッグ＆ドロップ API</a></li>\n  <li><a href=\"/ja/docs/Web/Guide/HTML/Editable_content\">コンテンツを編集可能にする</a></li>\n  <li><a href=\"/ja/Firefox_OS/Platform/Keyboard_events_in_Firefox_OS_TV\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">Keyboard events in Firefox OS TV</a></li>\n  <li><a href=\"/ja/docs/Mozilla/Firefox_OS/TVs_connected_devices/TV_remote_control_navigation\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">Implementing TV remote control navigation</a></li>\n</ul>"}}],"toc":[{"text":"ユーザー入力とコントロールのワークフロー","id":"ユーザー入力とコントロールのワークフロー"},{"text":"推奨事項","id":"推奨事項"},{"text":"例","id":"例"},{"text":"チュートリアル","id":"チュートリアル"},{"text":"関連情報","id":"関連情報"}],"summary":"現代のウェブのユーザー入力は、単純なマウスやキーボードだけではありません。この記事では、ユーザー入力を管理し、オープンなウェブアプリに制御を実装するための推奨事項を、FAQ、実例、および基礎となる技術について、より詳細な情報を必要とする人のための詳細な情報へのリンクとともに提供します。関連する API とイベントには、タッチイベント、Pointer Lock API、Screen Orientation API、Fullscreen API、ドラッグ＆ドロップ API などがあります。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"User input and controls","locale":"en-US","native":"English (US)"},{"title":"Entrées utilisateur et méthodes","locale":"fr","native":"Français"},{"title":"Ввод пользователя и управление","locale":"ru","native":"Русский"}],"source":{"folder":"ja/web/guide/user_input_methods","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/guide/user_input_methods/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/Guide","title":"開発者ガイド"},{"uri":"/ja/docs/Web/Guide/User_input_methods","title":"ユーザ入力とコントロール"}],"pageTitle":"ユーザ入力とコントロール - 開発者ガイド | MDN","noIndexing":false}}