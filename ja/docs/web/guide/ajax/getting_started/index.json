{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"始めましょう","mdn_url":"/ja/docs/Web/Guide/AJAX/Getting_Started","locale":"ja","native":"日本語","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>この記事は AJAX の基礎の概観と、入門のための二つの実践的なサンプルを示します。</p>"}},{"type":"prose","value":{"id":"ajax_とは","title":"AJAX とは?","isH3":true,"content":"<p>AJAX は <strong>A</strong>synchronous <strong>J</strong>avaScript <strong>A</strong>nd <strong>X</strong>ML の頭文字を取ったものです。これは一言で言えば、 <a href=\"/ja/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a> オブジェクトを使ってサーバーと通信することです。 AJAX は JSON, XML, HTML, テキストファイルなど、様々な形式の情報で送受信することができます。 AJAX の最も魅力的な特徴は「非同期」であること、つまり、サーバーとの通信、データの交換、ページの更新を、ページの再読み込みなしに行うことができる点です。</p>\n<p>AJAX でできることには、二つの重要な特徴があります。</p>\n<ul>\n  <li>ページを再読み込みすることなくサーバーに要求を送る</li>\n  <li>サーバーからデータを受け取って処理する</li>\n</ul>"}},{"type":"prose","value":{"id":"step_1_–_http_リクエストの送り方","title":"Step 1 – HTTP リクエストの送り方","isH3":true,"content":"<p>JavaScript からサーバーに <a href=\"/ja/HTTP\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">HTTP</a> リクエストを送るためには、この機能を提供するオブジェクトのインスタンスが必要になります。これが <code>XMLHttpRequest</code> の登場する場所です。このクラスは、もともとは Internet Explorer で <code>XMLHTTP</code> と呼ばれる ActiveX オブジェクトとして導入されたものです。その後、 Mozilla や Safari やその他のブラウザがこれに追随し、 Microsoft 独自の ActiveX オブジェクトのメソッドやプロパティに対応する <code>XMLHttpRequest</code> オブジェクトを実装しました。いっぽう、 Microsoft も同様に XMLHttpRequest を実装しました。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 古い互換コードで、もう必要ありません。</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>XMLHttpRequest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Mozilla, Safari, IE7+ ...</span>\n    httpRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>ActiveXObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// IE 6 以前</span>\n    httpRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ActiveXObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Microsoft.XMLHTTP\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> 説明のために、このコードは実際に XMLHttp インスタンスを作成するのに使用するコードよりも多少簡単にしています。より実際に近いサンプルは、この記事の step 3 を見てください。</p>\n</div>\n<p>リクエストを送ったら、応答を受け取った後に何をするかを決めなければなりません。この段階で行う必要があるのは、どの JavaScript 関数に応答を処理させるかを XMLHttp リクエストオブジェクトに教えることだけです。これは、オブジェクトの <code>onreadystatechange</code> プロパティに、使おうとしている JavaScript 関数の名前をこのように設定することで行えます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>httpRequest<span class=\"token punctuation\">.</span>onreadystatechange <span class=\"token operator\">=</span> nameOfTheFunction<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>このとき、関数名の後に括弧や引数がないことに注意してください。それは、実際にそれを呼ぶのではなく単純に関数の参照を渡しているからです。また、関数名を設定するのではなく、以下のように関数や応答を処理する動作をその場で定義するという JavaScript の機能 (「無名関数」と呼ばれる) を利用することもできます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>httpRequest<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ここでサーバーからの応答を処理します。</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>次に、応答を受け取った後に何をするかを宣言したら、以下のように HTTP 要求オブジェクトの <code>open()</code> と <code>send()</code> 呼び出して、要求を作成する必要があります。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>httpRequest<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://www.example.org/some.file'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhttpRequest<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<ul>\n  <li><code>open()</code> の最初の引数は、サーバーが対応している HTTP リクエストメソッド、つまり、GET、POST、HEAD やその他のメソッドになります。 HTTP 標準に準拠するためにメソッド名はすべて大文字にしてください。そうでなければ、いくつかのブラウザ (Firefox など) ではリクエストを送信しません。利用可能な HTTP リクエストメソッドに関しての詳細情報については <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html\" class=\"external\" rel=\" noopener\">W3C の仕様書</a>を参照してください。</li>\n  <li>第二引数は、リクエストを送信するページの URL です。セキュリティ上の問題から、他のドメインのページを読むことはできません。つまり、すべてのページに対して同一のドメイン名を利用しないと、 <code>open()</code> を呼び出したときに「権限エラー」を受け取ることになるということです。よくある落とし穴は、サイトに <code>domain.tld</code> でアクセスしながら、<code>www.domain.tld</code> でページを読み込もうとすることです。本当に他のドメインにリクエストを送信する必要がある場合は、 <a href=\"/ja/docs/Web/HTTP/CORS\">HTTP アクセス制御</a>を参照してください。</li>\n  <li>第三引数は、リクエストを非同期に送るかどうかを示します。 <code>true</code> (既定値) であれば、 JavaScript の実行が継続され、サーバーの応答が届くまでの間もユーザーがページを操作することができます。これが、 AJAX の最初の A です。</li>\n</ul>\n<p><code>send()</code> メソッドの引数は、要求を <code>POST</code> するときにサーバーに送信したい任意のデータです。フォームデータはサーバーが解釈できる形式、例えばクエリ文字列のような形式、</p>\n<pre class=\"notranslate\">\"name=value&amp;anothername=\"+encodeURIComponent(myVar)+\"&amp;so=on\"\n</pre>\n<p>又は、 <code>multipart/form-data</code>, JSON, XML など形式にしてください。</p>\n<p>なお、データを <code>POST</code> する場合、要求の MIME タイプを設定する必要がある場合があります。例えば、フォームデータをクエリ文字列として <code>send()</code> を呼び出して送る前に、次の文を使用してください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>httpRequest<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/x-www-form-urlencoded'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"step_2_–_サーバー応答の扱い","title":"Step 2 – サーバー応答の扱い","isH3":true,"content":"<p>要求を送った時に、応答を扱う JavaScript 関数の名前を設定しました。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>httpRequest<span class=\"token punctuation\">.</span>onreadystatechange <span class=\"token operator\">=</span> nameOfTheFunction<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>この関数では何を行うべきでしょうか。最初に、この関数ではリクエストの状態を調べる必要があります。ステータス値が <code>XMLHttpRequest.DONE</code> (4 に対応) であるなら、サーバーからの応答が完了しており、処理を進められることを意味します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>httpRequest<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> XMLHttpRequest<span class=\"token punctuation\">.</span><span class=\"token constant\">DONE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 全てが問題ない状態で、応答も返ってきています</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// まだ準備ができていません</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>readyState</code> の値のリストは <a href=\"/ja/docs/Web/API/XMLHttpRequest/readyState\">XMLHTTPRequest.readyState</a> で文書化されていて、以下のようになっています。</p>\n<ul>\n  <li>0 (初期化前) 又は (<strong>要求が初期化されていません</strong>)</li>\n  <li>1 (読み込み中) 又は (<strong>サーバーへの接続が確立されました</strong>)</li>\n  <li>2 (読み込み完了) 又は (<strong>要求を受信しました</strong>)</li>\n  <li>3 (対話中) 又は (<strong>要求を処理中です</strong>)</li>\n  <li>4 (完了) 又は (<strong>要求が完了して応答の準備ができました</strong>)</li>\n</ul>\n<p>次に、 HTTP 応答の <a href=\"/ja/docs/Web/HTTP#http_response_codes\">応答コード</a>を調べます。返ってくる可能性があるコードは <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html\" class=\"external\" rel=\" noopener\">W3C</a> でリスト化されています。以下の例では、 AJAX 呼び出しが成功したか失敗したかを <a href=\"/ja/docs/Web/HTTP/Status/200\"><code>200 OK</code></a> 応答コードをチェックすることで判別します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>httpRequest<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 完璧です！</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 何らかの問題が発生しています。</span>\n    <span class=\"token comment\">// たとえば、応答に 404 (Not Found) や</span>\n    <span class=\"token comment\">// 500 (Internal Server Error) 応答コードが返っているなど。</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>要求の状態と応答の HTTP 状態コードをチェックした後、サーバーが送信したデータを使って好きなことが何でもできます。データにアクセスするには二つの選択肢があります。</p>\n<ul>\n  <li><code>httpRequest.responseText</code> – サーバーの応答をテキスト文字列として返します</li>\n  <li><code>httpRequest.responseXML</code> – サーバーの応答を JavaScript DOM 関数で扱える <code>XMLDocument</code> オブジェクトとして返します</li>\n</ul>\n<p>なお、上記の段階は非同期要求を使用した場合 (<code>open()</code> の第三引数が未指定か <code>true</code> に設定されていた場合) のみ有効です。<strong>同期</strong>要求を使用した場合は関数を指定する必要はありませんが、これはユーザーの使い勝手をひどく損なうので、避けるべきです。</p>"}},{"type":"prose","value":{"id":"step_3_–_簡単な例","title":"Step 3 – 簡単な例","isH3":true,"content":"<p>さて、ここまでに紹介した方法を使って簡単な HTTP リクエストを実行してみましょう。われわれの JavaScript では <code>test.html</code> という名前の、 \"これはテストです\" と書かれた HTML 文書を要求し、その内容を <code>alert()</code> で表示します。注意として、この例では vanilla JavaScript を使っています — jQuery は入っていません。また HTML, XML, PHP ファイルは同一ディレクトリに置かれています。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ajaxButton<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>要求を実行<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> httpRequest<span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ajaxButton\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> makeRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">makeRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    httpRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>httpRequest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'中断 :( XMLHTTP インスタンスを生成できませんでした'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    httpRequest<span class=\"token punctuation\">.</span>onreadystatechange <span class=\"token operator\">=</span> alertContents<span class=\"token punctuation\">;</span>\n    httpRequest<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'test.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    httpRequest<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">alertContents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>httpRequest<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> XMLHttpRequest<span class=\"token punctuation\">.</span><span class=\"token constant\">DONE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>httpRequest<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>httpRequest<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'リクエストに問題が発生しました'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>このサンプルでは以下のことを行います。</p>\n<ul>\n  <li>ユーザーがブラウザーで「要求を実行」をクリックする。</li>\n  <li>イベントハンドラーから <code>makeRequest()</code> 関数が呼び出される。</li>\n  <li>要求が作成され、(<code>onreadystatechange</code>) により <code>alertContents()</code> への処理引継ぎが設定される。</li>\n  <li><code>alertContents()</code> では、応答が返ってきていて問題無いかを確認した後、<code>test.html</code> ファイルの中身を <code>alert()</code> で表示する。</li>\n</ul>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> 要求を送信する先が静的な HTML ファイルではなく、 XML を返すコードである場合、 Internet Explorer に応答ヘッダーを設定しなければなりません。<code>Content-Type: application/xml</code> というヘッダーを設定しなければ、XML 要素にアクセスしようとしている行で IE が \"Object Expected\" という Javascript エラーを投げるでしょう。</p>\n</div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> <code>Cache-Control: no-cache</code> というヘッダーを設定しなければ、ブラウザーが応答をキャッシュして要求を再送信しなくなるため、デバッグが難しくなるでしょう。 GET 引数に、タイムスタンプやランダムな数字のような、常に異なるものを追加する方法もあります (<a href=\"/ja/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#bypassing_the_cache\">キャッシュをバイパスする</a>をご覧ください)</p>\n</div>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>Note:</strong> <code>httpRequest</code> 変数をグローバルに使用すると、関数の呼び出しが競合して <code>makeRequest()</code> が互いに上書きし合うため、競合状態が発生します。 <code>httpRequest</code> 変数を、 AJAX 関数を含んでいる<a href=\"/ja/docs/Web/JavaScript/Closures\">クロージャ</a>のローカルで宣言することでこれを防ぐことができます。</p>\n</div>\n<p>通信エラーのイベント (サーバーがダウンしたなど) では、応答状態にアクセスする時に <code>onreadystatechange</code> メソッドの中で例外が発生します。この問題を防ぐため、 <code>if...then</code> 文は必ず <code>try...catch</code> で囲むようにしてください。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">alertContents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>httpRequest<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> XMLHttpRequest<span class=\"token punctuation\">.</span><span class=\"token constant\">DONE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>httpRequest<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>httpRequest<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'リクエストに問題が発生しました'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span> e <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'例外を捕捉: '</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"step_4_–_「x-ファイル」_もしくは_xml_レスポンスの扱い方","title":"Step 4 – 「X-ファイル」 もしくは XML レスポンスの扱い方","isH3":true,"content":"<p>前の例では、 HTTP リクエストへの応答を受け取った後、要求オブジェクトの <code>responseText</code> プロパティを用いて、それに含まれている test.html の中身を取得しました。では、次に <code>responseXML</code> プロパティのほうを試してみましょう。</p>\n<p>はじめに、あとでサーバーに要求する妥当な XML 文書を作成します。 test.xml ファイルの中身は以下のようなものです。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token prolog\">&lt;?xml version=\"1.0\" ?&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>root</span><span class=\"token punctuation\">&gt;</span></span>\n    I'm a test.\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>root</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>スクリプトでは、リクエスト送出を以下のように変更します。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>...\nonclick=\"makeRequest('test.xml')\"&gt;\n...\n</code></pre></div>\n<p>そして、 <code>alertContents()</code> では、 <code>alert(httpRequest.responseText);</code> としている行を以下のように変更します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> xmldoc <span class=\"token operator\">=</span> httpRequest<span class=\"token punctuation\">.</span>responseXML<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> root_node <span class=\"token operator\">=</span> xmldoc<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">item</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>root_node<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>このコードでは、 <code>responseXML</code> から <code>XMLDocument</code> オブジェクトを取得し、 DOM メソッドを利用して XML 文書に含まれるデータにアクセスしています。 この<code>test.xml</code> ファイルは<a href=\"https://www.w3clubs.com/mozdev/test.xml\" class=\"external\" rel=\" noopener\">ここ</a>で、変更されたスクリプトは<a href=\"https://www.w3clubs.com/mozdev/httprequest_test_xml.html\" class=\"external\" rel=\" noopener\">ここ</a>で見ることができます。</p>"}},{"type":"prose","value":{"id":"step_5_–_データを処理する","title":"Step 5 – データを処理する","isH3":true,"content":"<p>最後に、データをサーバーに送って応答を受けましょう。 JavaScript はここで動的なページ <code>test.php</code> に要求し、このページは送ったデータを受けて「計算した」文字 - \"Hello, [user data]!\" - を返し、これを <code>alert()</code> します。</p>\n<p>まずは HTML にテキストボックスを追加してユーザーが名前を入れられるようにします:</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">&gt;</span></span>Your name:\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ajaxTextbox<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ajaxButton<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> pointer<span class=\"token punctuation\">;</span> <span class=\"token property\">text-decoration</span><span class=\"token punctuation\">:</span> underline</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span>\n  Make a request\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>イベントハンドラーに、テキストボックスからユーザーデータを取得してサーバーサイドスクリプトの URL と一緒に <code>makeRequest()</code> に送るような行も追加します。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ajaxButton\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> userName <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ajaxTextbox\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">makeRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test.php'</span><span class=\"token punctuation\">,</span>userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>makeRequest()</code> を編集してユーザーデータを受け取ってサーバーに渡すようにします。リクエストメソッドは <code>GET</code> から <code>POST</code> に変更し、データを <code>httpRequest.send()</code> 呼び出しのパラメーターとして入れます:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">function</span> <span class=\"token function\">makeRequest</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> userName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token operator\">...</span>\n\n    httpRequest<span class=\"token punctuation\">.</span>onreadystatechange <span class=\"token operator\">=</span> alertContents<span class=\"token punctuation\">;</span>\n    httpRequest<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    httpRequest<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/x-www-form-urlencoded'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    httpRequest<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'userName='</span> <span class=\"token operator\">+</span> <span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>alertContents()</code> 関数はステップ 3 と同じように書かれて、サーバーが計算された文字列を返していたら、 alert するようにします。しかし、サーバーが計算された文字列とオリジナルのユーザーデータの両方を返していたらどうでしょう？ユーザーがテキストボックスに \"Jane\" とタイプしていたら、サーバーの応答はこのようになります:</p>\n<p><code>{\"userData\":\"Jane\",\"computedString\":\"Hi, Jane!\"}</code></p>\n<p>このデータを <code>alertContents()</code>,内で使うには、単に <code>responseText</code> を alert することはできず、これを parse して、求めるプロパティの <code>computedString</code> を alert します:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">alertContents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>httpRequest<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> XMLHttpRequest<span class=\"token punctuation\">.</span><span class=\"token constant\">DONE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>httpRequest<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> response <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>httpRequest<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>computedString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'There was a problem with the request.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>test.php</code> には以下のようなものが入ります。</p>\n<div class=\"code-example\"><pre class=\"brush: php notranslate\"><code><span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'userName'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'userName'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token string single-quoted-string\">'no name'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$computedString</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"Hi, \"</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'userName'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'computedString'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token variable\">$computedString</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>DOM メソッドについてより詳しくは、<a href=\"/ja/docs/dom/\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">Mozilla での DOM の実装</a>の文書を参照してください。</p>"}}],"toc":[],"summary":"この記事は AJAX の基礎の概観と、入門のための二つの実践的なサンプルを示します。","popularity":0.0002,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Getting Started","locale":"en-US","native":"English (US)"},{"title":"Primeros Pasos","locale":"es","native":"Español"},{"title":"Premiers pas","locale":"fr","native":"Français"},{"title":"Ajax 시작하기","locale":"ko","native":"한국어"},{"title":"Primeiros passos","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"С чего начать","locale":"ru","native":"Русский"},{"title":"Getting Started","locale":"zh-CN","native":"中文 (简体)"},{"title":"入門篇","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ja/web/guide/ajax/getting_started","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/web/guide/ajax/getting_started/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ja/docs/Web","title":"開発者向けのウェブ技術"},{"uri":"/ja/docs/Web/Guide","title":"開発者ガイド"},{"uri":"/ja/docs/Web/Guide/AJAX","title":"AJAX"},{"uri":"/ja/docs/Web/Guide/AJAX/Getting_Started","title":"始めましょう"}],"pageTitle":"始めましょう - 開発者ガイド | MDN","noIndexing":false}}