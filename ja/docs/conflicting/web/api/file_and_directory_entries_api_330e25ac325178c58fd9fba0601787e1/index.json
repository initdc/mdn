{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"LocalFileSystem","mdn_url":"/ja/docs/conflicting/Web/API/File_and_Directory_Entries_API_330e25ac325178c58fd9fba0601787e1","locale":"ja","native":"日本語","sidebarHTML":"<ol><li><strong><a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>File_and_Directory_Entries_API_330e25ac325178c58fd9fba0601787e1</code></a></strong></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard warning\" id=\"sect1\"><p><strong>非標準:</strong> この機能は標準ではなく、標準化の予定もありません。公開されているウェブサイトには使用しないでください。ユーザーによっては使用できないことがあります。実装ごとに大きな差があることもあり、将来は振る舞いが変わるかもしれません。</p></div>\n<p><a href=\"/ja/docs/DOM/File_API/File_System_API\">File System API</a> の <code>LocalFileSystem</code> インターフェイスを使用すると、サンドボックスファイルシステムにアクセスできます。 これらのメソッドは、<a href=\"/ja/docs/Web/API/Window\">window</a> オブジェクトと <a href=\"/ja/docs/Web/API/Worker\">worker</a> オブジェクトによって実装されます。</p>"}},{"type":"prose","value":{"id":"基本のコンセプト","title":"基本のコンセプト","isH3":false,"content":"<p>このセクションには、メソッドの主要な概念がいくつか含まれています。</p>"}},{"type":"prose","value":{"id":"新しいストレージの作成","title":"新しいストレージの作成","isH3":true,"content":"<p><code>window.requestFileSystem()</code> を呼び出すことで、サンドボックス化されたファイルシステムへのアクセスを要求します。コールバックに成功した場合の引数は <a href=\"/ja/docs/Web/API/FileSystem\"><code>FileSystem</code></a> オブジェクトで、ファイルシステムの名前とルートの 2 つのプロパティを持ちます。</p>\n<p>一時的なものと永続的なものの 2 つのファイルシステムを作成したい場合は、このメソッドを複数回呼び出すことができます。(ストレージの種類についての詳細は、<a href=\"/ja/docs/Web/API/File_and_Directory_Entries_API/Introduction#restrictions\">基本コンセプト</a>の記事を参照してください)。ほとんどの場合、ファイルシステムを作成する必要があるのは 1 つだけですが、いくつかのケースでは 2 つ目のファイルシステムを作成した方が便利な場合もあります。例えば、メールアプリを作成する場合、パフォーマンスを高速化するためにアセット (画像や添付ファイルなど) をキャッシュするための一時的なストレージを作成し、一方で、オフラインで作成されたメールの下書きなど、クラウドにバックアップする前に失われてはならない固有のデータのために永続的なストレージを作成することができます。</p>"}},{"type":"prose","value":{"id":"永続的なストレージの使用","title":"永続的なストレージの使用","isH3":true,"content":"<p><code>requestFileSystem()</code> メソッドでは、<a href=\"/ja/docs/Web/API/File_and_Directory_Entries_API/Introduction#the_file_system_api_can_use_different_storage_types\"><code>PERSISTENT</code> または <code>TEMPORARY</code> ストレージ</a>を要求することができます。永続的ストレージとは、アプリまたはユーザーが削除しない限り、ブラウザに保存されるストレージですが、使用するにはユーザーの許可が必要です。対照的に、一時的なストレージは、ユーザーの許可なしに自動的に許可されますが、ブラウザによっていつでも削除することができます。</p>\n<p>ファイルシステム API で <code>PERSISTENT</code> ストレージを使用するには、Chrome は requestQuota API を公開しています。そのため、ストレージをリクエストするには、次のようなことを行う必要があります。</p>\n<pre class=\"notranslate\">var requestedBytes = 1024*1024*10; // 10MB\n\nnavigator.webkitPersistentStorage.requestQuota (\n    requestedBytes, function(grantedBytes) {\n        window.requestFileSystem(PERSISTENT, grantedBytes, onInitFs, errorHandler);\n\n    }, function(e) { console.log('Error', e); }\n);\n</pre>\n<p>アプリが永続的ストレージを使用する前に、ユーザーがアプリにデータをローカルに保存する許可を与える必要があります。ユーザーが許可したら、<code>requestQuota()</code> を再度呼び出す必要はありません。それ以降の呼び出しは noop です。</p>\n<p>もう 1 つの API、クォータ管理 API では、<code>window.webkitPersistentStorage.queryUsageAndQuota()</code> を使用してオリジンの現在のクォータの使用量と割り当てを問い合わせることができます。詳細については、この <a href=\"https://stackoverflow.com/a/29662985/89484\" class=\"external\" rel=\" noopener\">StackOverflow のアンサー</a>を参照してください。(API の古いバージョンについては、<a href=\"https://developer.chrome.com/apps/offline_storage?csw=1\" class=\"external\" rel=\" noopener\">HTML5 オフライン ストレージの管理</a>で説明しています)。</p>"}},{"type":"prose","value":{"id":"単一のオリジン内での作業","title":"単一のオリジン内での作業","isH3":true,"content":"<p>ファイルシステムは、単一のオリジンにサンドボックス化されています。これは、アプリが他のアプリのファイルを読み取ったり、書き込んだりすることができないことを意味します。アプリは、ユーザーのハード ドライブ上の任意のフォルダ（マイ ピクチャ、マイ ドキュメントなど）内のファイルにアクセスすることもできません。制限の詳細については、<a href=\"/ja/docs/Web/API/File_and_Directory_Entries_API/Introduction#restrictions\">基本コンセプト</a>の記事を参照してください。</p>"}},{"type":"prose","value":{"id":"例","title":"例","isH3":true,"content":"<p>以下は、ファイルシステムのストレージを要求する方法を示すコードスニペットです。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">//Taking care of the browser-specific prefix</span>\nwindow<span class=\"token punctuation\">.</span>requestFileSystem  <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>requestFileSystem <span class=\"token operator\">||</span> window<span class=\"token punctuation\">.</span>webkitRequestFileSystem<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The first parameter defines the type of storage: persistent or temporary</span>\n<span class=\"token comment\">// Next, set the size of space needed (in bytes)</span>\n<span class=\"token comment\">// initFs is the success callback</span>\n<span class=\"token comment\">// And the last one is the error callback</span>\n<span class=\"token comment\">// for denial of access and other errors.</span>\n\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">requestFileSystem</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span><span class=\"token constant\">PERSISTENT</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span>onInitFs<span class=\"token punctuation\">,</span>errorHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"メソッド概要","title":"メソッド概要","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th><code>void requestFileSystem (in unsigned short type, in unsigned long long size, in FileSystemCallback successCallback, in optional ErrorCallback errorCallback);</code></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>void resolveLocalFileSystemURL (in DOMString url, in EntryCallback successCallback, in optional ErrorCallback errorCallback);</code></td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"定数","title":"定数","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>定数</th>\n      <th>値</th>\n      <th>説明</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>TEMPORARY</code></td>\n      <td><code>0</code></td>\n      <td>一時的なストレージで、ブラウザの裁量で削除することができます。</td>\n    </tr>\n    <tr>\n      <td><code>PERSISTENT</code></td>\n      <td><code>1</code></td>\n      <td>ユーザーまたはアプリがそれを消去しない限り、ブラウザに保存されているストレージ。アプリがこのタイプのストレージを使用するには、その前にユーザーに許可を与える必要があります。</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"メソッド","title":"メソッド","isH3":false,"content":""}},{"type":"prose","value":{"id":"requestfilesystem","title":"requestFileSystem()","isH3":true,"content":"<p>データが保存されるべきファイル システムを要求します。サンドボックス化されたファイルシステムにアクセスするには、このグローバルメソッド <code>window.requestFileSystem()</code> を使用して <code>LocalFileSystem</code> オブジェクトを要求します。</p>\n<pre class=\"notranslate\">void requestFileSystem(\n  in unsigned short type,\n  in unsigned long long size,\n  in FileSystemCallback successCallback,\n  in ErrorCallback errorCallback\n);\n</pre>\n<h5 id=\"パラメータ\">パラメータ</h5>\n<dl>\n  <dt id=\"type\">type</dt>\n  <dd>\n    <p>ファイルシステムのストレージタイプ。値は <a href=\"#const_temporary\"><code>TEMPORARY</code></a> または <a href=\"#const_persistent\"><code>PERSISTENT</code></a> のいずれかです。</p>\n  </dd>\n  <dt id=\"size\">size</dt>\n  <dd>\n    <p>アプリに必要なストレージ容量 (バイト単位)。</p>\n  </dd>\n  <dt id=\"successcallback\">successCallback</dt>\n  <dd>\n    <p>ブラウザがファイルシステムを提供したときに呼び出される成功コールバック。その引数は、2 つのプロパティを持つ <a href=\"/ja/docs/Web/API/FileSystem\"><code>FileSystem</code></a> オブジェクトです。</p>\n    <ul>\n      <li>name - ブラウザがファイルシステムに割り当てる一意の名前</li>\n      <li>root - ファイルシステムのルートを表す読み取り専用の <code>DirectoryEntry</code> オブジェクト</li>\n    </ul>\n  </dd>\n  <dt id=\"opt_errorcallback\">opt_errorCallback</dt>\n  <dd>\n    <p>エラーが発生したとき、またはファイルシステムの取得要求が拒否されたときに呼び出されるエラーコールバックです。引数は <code>FileError</code> オブジェクトです。</p>\n  </dd>\n</dl>\n<h5 id=\"戻り値\">戻り値</h5>\n<dl>\n  <dt id=\"void\"><code>void</code></dt>\n</dl>\n<h5 id=\"例外\">例外</h5>\n<p>このメソッドは、以下のコードで <a href=\"/ja/docs/Web/API/FileError\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">FileError</a> が発生する可能性があります。</p>\n<table>\n  <thead>\n    <tr>\n      <th>例外</th>\n      <th>説明</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>SECURITY_ERROR</code></td>\n      <td>このアプリケーションは、ファイルシステムインターフェイスにアクセスする権限を持っていません。例えば、<code>file://</code> からは実行できません。詳細については、<a href=\"/ja/docs/Web/API/File_and_Directory_Entries_API/Introduction#you_cannot_run_your_app_from_file:.2f.2f\">基本的な考え方の記事</a>を参照してください。</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"resolvelocalfilesystemurl","title":"resolveLocalFileSystemURL()","isH3":true,"content":"<p>ローカル URL でファイルやディレクトリのエントリを検索できます。</p>\n<pre class=\"notranslate\">void resolveLocalFileSystemURL(\n  in DOMString url,\n  in EntryCallback successCallback,\n  in optional ErrorCallback errorCallback\n);\n</pre>\n<h5 id=\"パラメータ_2\">パラメータ</h5>\n<dl>\n  <dt id=\"url\">url</dt>\n  <dd>\n    <p>ファイルシステム内のローカルファイルの URL。</p>\n  </dd>\n  <dt id=\"successcallback_2\">successCallback</dt>\n  <dd>\n    <p>ブラウザが指定した URL のファイルまたはディレクトリを提供したときに呼び出される success コールバック。</p>\n  </dd>\n  <dt id=\"errorcallback\">errorCallback</dt>\n  <dd>\n    <p>エラーが発生したとき、またはエントリオブジェクトの取得要求が拒否されたときに呼び出される error コールバック。</p>\n  </dd>\n</dl>\n<h5 id=\"戻り値_2\">戻り値</h5>\n<dl>\n  <dt id=\"void_2\"><code>void</code></dt>\n</dl>\n<h5 id=\"例外_2\">例外</h5>\n<p>このメソッドは、以下のコードで <a href=\"/ja/docs/Web/API/FileError\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">FileError</a> が発生する可能性があります。</p>\n<table>\n  <thead>\n    <tr>\n      <th>例外</th>\n      <th>説明</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>ENCODING_ERR</code></td>\n      <td>URL の構文が無効でした。</td>\n    </tr>\n    <tr>\n      <td><code>NOT_FOUND_ERR</code></td>\n      <td>URL は構造的には正しいのですが、存在しないリソースを参照しています。</td>\n    </tr>\n    <tr>\n      <td><code>SECURITY_ERR</code></td>\n      <td>このアプリケーションは、ファイルシステムインターフェイスにアクセスする権限を持っていません。</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"browser_compatibility","value":{"title":"ブラウザの互換性","id":"ブラウザの互換性","isH3":false,"data":null,"query":"api.LocalFileSystem","browsers":null}},{"type":"prose","value":{"id":"あわせて参照","title":"あわせて参照","isH3":false,"content":"<p>仕様書:<a href=\"https://dev.w3.org/2009/dap/file-system/pub/FileSystem/\" class=\"external\" rel=\" noopener\">File API: Directories and System Specification</a><span title=\"草案\" style=\"color:#fff;background:#e66e33;display:inline-block; font-size:x-small; margin-left:6px; white-space:nowrap; padding:2px 5px;\">WD</span></p>\n<p>リファレンス: <a href=\"/ja/docs/DOM/File_API/File_System_API\">File System API</a></p>\n<p>イントロダクション: <a href=\"/ja/docs/DOM/File_APIs/Filesystem/Basic_Concepts_About_the_Filesystem_API\">Basic Concepts About the File System API</a></p>"}}],"toc":[{"text":"基本のコンセプト","id":"基本のコンセプト"},{"text":"メソッド概要","id":"メソッド概要"},{"text":"定数","id":"定数"},{"text":"メソッド","id":"メソッド"},{"text":"ブラウザの互換性","id":"ブラウザの互換性"},{"text":"あわせて参照","id":"あわせて参照"}],"summary":"File System API の LocalFileSystem インターフェイスを使用すると、サンドボックスファイルシステムにアクセスできます。 これらのメソッドは、window オブジェクトと worker オブジェクトによって実装されます。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","source":{"folder":"ja/conflicting/web/api/file_and_directory_entries_api_330e25ac325178c58fd9fba0601787e1","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/conflicting/web/api/file_and_directory_entries_api_330e25ac325178c58fd9fba0601787e1/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"pageTitle":"LocalFileSystem | MDN","noIndexing":true}}