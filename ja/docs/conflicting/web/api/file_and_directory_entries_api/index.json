{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"FileHandle API","mdn_url":"/ja/docs/conflicting/Web/API/File_and_Directory_Entries_API","locale":"ja","native":"日本語","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard warning\" id=\"sect1\"><p><strong>非標準:</strong> この機能は標準ではなく、標準化の予定もありません。公開されているウェブサイトには使用しないでください。ユーザーによっては使用できないことがあります。実装ごとに大きな差があることもあり、将来は振る舞いが変わるかもしれません。</p></div>\n<p>FileHandle API は、ファイルの作成や内容の変更など、ファイルを操作するための API です (<a href=\"/en-US/docs/Web/API/File\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">File API (en-US)</a> とは異なります)。この API を通じたファイル操作は、デバイス上に物理的に格納でき、部分的な編集には、競合問題を避けるためにターンベースのロック機構が使用されています。</p>"}},{"type":"prose","value":{"id":"api_概観","title":"API 概観","isH3":false,"content":"<p>この API は、次のインターフェースを基にしています:</p>\n<ul>\n  <li><a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>IDBDatabase.mozCreateFileHandle</code></a></li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBMutableFile\"><code>FileHandle</code> <small>(en-US)</small></a></li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBFileHandle\"><code>LockedFile</code> <small>(en-US)</small></a></li>\n  <li><a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>FileRequest</code></a></li>\n</ul>\n<p>これは、File API の <a href=\"/ja/docs/Web/API/File\"><code>File</code></a> インターフェースおよび <a href=\"/ja/docs/Web/API/Blob\"><code>Blob</code></a> インターフェースとも接続しています。</p>"}},{"type":"prose","value":{"id":"基本的な操作","title":"基本的な操作","isH3":false,"content":""}},{"type":"prose","value":{"id":"filehandle_インスタンスの作成","title":"FileHandle インスタンスの作成","isH3":true,"content":"<p>このインテントは IndexedDB を通じてファイルを保存しているため、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBMutableFile\"><code>FileHandle</code> <small>(en-US)</small></a> インスタンスを作成するのに <a href=\"/en-US/docs/Web/API/IDBFactory#open\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">IndexedDB Database (en-US)</a> が必要です。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> IDBReq <span class=\"token operator\">=</span> indexedDB<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myFileStorageDataBase\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nIDBReq<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onsuccess</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> <span class=\"token constant\">DB</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> buildHandle <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">.</span><span class=\"token function\">mozCreateFileHandle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"plain/text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  buildHandle<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onsuccess</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> myFileHandle <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'handle'</span><span class=\"token punctuation\">,</span> myFileHandle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>mozCreateFileHandle()</code></a> は、ファイル名と任意の形式の 2 個の引数を取ります。これらは説明のためのものであり、データベースには使用されません。しかし、これらの値から <a href=\"/ja/docs/Web/API/File\"><code>File</code></a> オブジェクトの <a href=\"/ja/docs/Web/API/File/name\" title=\"name\"><code>name</code></a> と <a href=\"/ja/docs/Web/API/File/type\" title=\"type\"><code>type</code></a> に継承して生成するため、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBMutableFile\"><code>FileHandle</code> <small>(en-US)</small></a> オブジェクトにとって重要です。つまり、例えば空文字にすると実際に存在するファイルと一致しないため、ユニークな名前にしなくてもよいです。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> <strong>補足:</strong> 上記のコードは、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBMutableFile\"><code>FileHandle</code> <small>(en-US)</small></a> インスタンスを保持している間のみ存在する「一時ファイル」を作成するだけです。ページ更新やアプリ再起動に遭遇するファイルを扱いたい場合は、データベース自身など、ファイルハンドルを永続的な場所に格納する必要があります。詳しくは、後述の <a href=\"#file_storage\">File storage</a> を参照してください。</p>\n</div>"}},{"type":"prose","value":{"id":"ファイルの読み書き操作","title":"ファイルの読み書き操作","isH3":true,"content":"<p>ハンドルしたファイルを読んだり書いたりするには、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBFileHandle\"><code>LockedFile</code> <small>(en-US)</small></a> を取得する必要があります。<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBMutableFile/open\"><code>FileHandle.open()</code> <small>(en-US)</small></a> メソッドがこの操作のためのオブジェクトを提供しており、<code>readonly</code> または <code>readwrite</code> が可能です。<code>readonly</code> の <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBFileHandle\"><code>LockedFile</code> <small>(en-US)</small></a> に書き込みを行おうとすると失敗します。</p>\n<h4 id=\"書き込み\">書き込み</h4>\n<p>locked ファイルには 3 通りの書込み操作があります:</p>\n<ul>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBFileHandle/write\"><code>write</code> <small>(en-US)</small></a> : これは、ファイル内の <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBFileHandle/location\"><code>LockedFile.location</code> <small>(en-US)</small></a> byte の位置から書き込みを開始するメソッドです。</li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBFileHandle/append\"><code>append</code> <small>(en-US)</small></a> : これは、常にファイル末尾にコンテンツを追加するメソッドです。</li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBFileHandle/truncate\"><code>truncate</code> <small>(en-US)</small></a> : これは、ファイルの最初の nth-first byte までを維持してそれ以降を削除するメソッドです。</li>\n</ul>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Get a LockedFile object from the handle</span>\n<span class=\"token keyword\">var</span> myFile <span class=\"token operator\">=</span> myFileHandle<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'readwrite'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Start a writing operation</span>\n<span class=\"token keyword\">var</span> writing <span class=\"token operator\">=</span> myFile<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Some content'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nwriting<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onsuccess</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Writing operation successful'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nwriting<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Something goes wrong in the writing process: '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"読み込み\">読み込み</h4>\n<p>中間の <a href=\"/ja/docs/Web/API/File\"><code>File</code></a> オブジェクトや <a href=\"/ja/docs/Web/API/FileReader\"><code>FileReader</code></a> オブジェクトを使用せずに、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBFileHandle\"><code>LockedFile</code> <small>(en-US)</small></a> オブジェクトのコンテンツを直接読み込むことが可能です。<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBFileHandle\"><code>LockedFile</code> <small>(en-US)</small></a> インターフェースは、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBFileHandle/readAsText\"><code>readAsText</code> <small>(en-US)</small></a> メソッドと <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBFileHandle/readAsArrayBuffer\"><code>readAsArrayBuffer</code> <small>(en-US)</small></a> メソッドを提供しています。</p>\n<p>これら 2 個のメソッドは、ファイル開始位置からの読み込むサイズを <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBFileHandle/location\"><code>LockedFile.location</code> <small>(en-US)</small></a> byte で指定して読み込みます。示すサイズを指定します。</p>\n<p>ファイル全体を読み込むには、そのサイズを知る必要があります。この情報 (および最終変更日の日付) は、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBFileHandle/getMetaData\"><code>LockedFile.getMetadata()</code> <small>(en-US)</small></a> メソッドを通して取得できます。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Get a LockedFile object from the handle</span>\n<span class=\"token keyword\">var</span> myFile <span class=\"token operator\">=</span> myFileHandle<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'readwrite'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Retrieve the size of the file</span>\n<span class=\"token keyword\">var</span> getmeta <span class=\"token operator\">=</span> myFile<span class=\"token punctuation\">.</span><span class=\"token function\">getMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ngetmeta<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onsuccess</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> size <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// The reading operation will start with the byte at index 0 in the file</span>\n  myFile<span class=\"token punctuation\">.</span>location <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Start a reading operation for the whole file content</span>\n  <span class=\"token keyword\">var</span> reading <span class=\"token operator\">=</span> myFile<span class=\"token punctuation\">.</span><span class=\"token function\">readAsText</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  reading<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onsuccess</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The content of the file is:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  reading<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Something goes wrong in the reading process: '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"file_スナップショット","title":"File スナップショット","isH3":true,"content":"<p>In many cases it can be handy to get a snapshot of the file. For example, there are many APIs that expect <a href=\"/ja/docs/Web/API/Blob\"><code>Blob</code></a> or <a href=\"/ja/docs/Web/API/File\"><code>File</code></a> objects such as domxref(\"FileReader\")}} (which can be easier to use to read the whole file) or <a href=\"/ja/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a>.</p>\n<p>It's possible to get a <a href=\"/ja/docs/Web/API/File\"><code>File</code></a> object representing the current state of the file handled by the <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBMutableFile\"><code>FileHandle</code> <small>(en-US)</small></a> object by using the <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBMutableFile\"><code>getFile</code> <small>(en-US)</small></a> method. Such a <a href=\"/ja/docs/Web/API/File\"><code>File</code></a> object is completely desynchronized from the original file, which means any change made to that object will never be reflected to the handled file as well as any change made to the handled file will never be pushed to the <a href=\"/ja/docs/Web/API/File\"><code>File</code></a> object.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> mySnapshot <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> request <span class=\"token operator\">=</span> myFileHandle<span class=\"token punctuation\">.</span><span class=\"token function\">getFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrequest<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onsuccess</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  mySnapshot <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"進捗の管理","title":"進捗の管理","isH3":true,"content":"<p>All the methods from the <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBFileHandle\"><code>LockedFile</code> <small>(en-US)</small></a> interface return a <a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>FileRequest</code></a> object. Such an object is basically a <a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>DOMRequest</code></a> with an extra power: it allows to monitor the progress of an operation. Sometimes writing and reading operations can be very long, therefore it is a good idea to monitor the operation to provide feedback to the user. Such monitoring can be done using the <a class=\"page-not-created\" title=\"この項目についての文書はまだ書かれていません。書いてみませんか？\"><code>FileRequest.onprogress</code></a> event handler.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> progress <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'progress'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> myFile   <span class=\"token operator\">=</span> myFileHandle<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'readonly'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Let's read a 1GB file</span>\n<span class=\"token keyword\">var</span> action   <span class=\"token operator\">=</span> myFile<span class=\"token punctuation\">.</span><span class=\"token function\">readAsArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\naction<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onprogress</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>progress<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    progress<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>loaded<span class=\"token punctuation\">;</span>\n    progress<span class=\"token punctuation\">.</span>max   <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>total<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\naction<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onsuccess</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Yeah \\o/ Just read a 1GB file'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\naction<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Oups :( Unable to read a 1GB file'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"file_ストレージ","title":"File ストレージ","isH3":false,"content":"<p>When a file handle is created, the associated file only exists as a \"temporary file\" as long as you hold the <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBMutableFile\"><code>FileHandle</code> <small>(en-US)</small></a> instance. If you want a file to survive a page refresh/app relaunch, you need to store the handle in a database (not necessarily the one used to create the <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBMutableFile\"><code>FileHandle</code> <small>(en-US)</small></a> object).</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> IDBReq <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>indexedDB<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myFileStorageDataBase'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// If necessary, let's create a datastore for the files</span>\nIDBReq<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onupgradeneeded</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">createObjectStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">'files'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nIDBReq<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onsuccess</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> <span class=\"token constant\">DB</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Let's create a new file</span>\n  <span class=\"token keyword\">var</span> handleReq <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">.</span><span class=\"token function\">mozCreateFileHandle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"plain/text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  handleReq<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onsuccess</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> myFileHandle <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> store <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">.</span><span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'files'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'readwrite'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">objectStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">'files'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Let's store the file permanently</span>\n    <span class=\"token comment\">// HINT: it could be handy to use the file name as the storage key</span>\n    <span class=\"token keyword\">var</span> storeReq <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>myFileHandle<span class=\"token punctuation\">,</span> myFileHandle<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    storeReq<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onsuccess</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The file has been successfully stored and can be retrieved anytime.'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>A file stored that way is physically put on the device. The database itself only stores a pointer to that file. It means that if the <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBMutableFile\"><code>FileHandle</code> <small>(en-US)</small></a> object is stored several times in several DBs or several data stores, all those objects will reference the same unique file. This is not a problem because to access the file, a <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBFileHandle\"><code>LockedFile</code> <small>(en-US)</small></a> object is required and operations on such object are performed in <a href=\"http://en.wikipedia.org/wiki/Isolation_%28database_systems%29\" class=\"external\" rel=\" noopener\">isolation</a>, meaning that once a <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBFileHandle\"><code>LockedFile</code> <small>(en-US)</small></a> is active, all operations of this <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBFileHandle\"><code>LockedFile</code> <small>(en-US)</small></a> are guaranteed to happen sequentially on the underlying file without being interleaved with operations from other <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBFileHandle\"><code>LockedFile</code> <small>(en-US)</small></a>.</p>"}},{"type":"prose","value":{"id":"安全な書込み操作","title":"安全な書込み操作","isH3":true,"content":"<p>For performance reasons, write (and read) operations are done in memory. Periodically, the results of those operation are asynchronously flushed to the device storage area. If for some reason a problem occurs before that, you can lose the results of some operations. To avoid that problem, you can force the data to be flushed by using the <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBFileHandle/flush\"><code>LockedFile.flush()</code> <small>(en-US)</small></a> method. Once this method has been successfully called, you can be sure your change on the file will be safe.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Get a LockedFile object from the handle</span>\n<span class=\"token keyword\">var</span> myFile <span class=\"token operator\">=</span> myFileHandle<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'readwrite'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Start a writing operation</span>\n<span class=\"token keyword\">var</span> writing <span class=\"token operator\">=</span> myFile<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Some content'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nwriting<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onsuccess</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Writing operation successful'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> saving <span class=\"token operator\">=</span> myFile<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  saving<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onsuccess</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The file has been successfully stored'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nwriting<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Something goes wrong in the writing process: '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"api_の互換性","title":"API の互換性","isH3":false,"content":""}},{"type":"prose","value":{"id":"filewriter_と_api_が異なるのはなぜですか？","title":"FileWriter と API が異なるのはなぜですか？","isH3":true,"content":"<p>The <a href=\"https://dev.w3.org/2009/dap/file-system/file-writer.html\" class=\"external\" rel=\" noopener\">FileWriter specification</a> defines FileWriters, objects aiming at representing editable files. <a href=\"https://lists.w3.org/Archives/Public/public-webapps/2012JanMar/0886.html\" class=\"external\" rel=\" noopener\">Discussions on public-webapps</a> led to the conclusion that the API would behave poorly in the case of different entities writing concurrently to the same file. The outcome of this discussion is the FileHandle API with its LockedFile and transaction mechanism.</p>"}},{"type":"prose","value":{"id":"仕様書","title":"仕様書","isH3":true,"content":"<p>A formal specification draft is being written. As it does not fully match the current implementation, be warned that the implementation and/or the specification will be subject to changes.</p>\n<table>\n  <thead>\n    <tr>\n      <th>仕様</th>\n      <th>実装状況</th>\n      <th>コメント</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://w3c.github.io/filesystem-api/\" hreflang=\"en\" lang=\"en\" class=\"external\" title=\"FileSystem APIの仕様書\" rel=\" noopener\">FileSystem API</a></td>\n      <td><span class=\"spec-ed\">編集者草案</span></td>\n      <td>Draft proposal.</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"ブラウザの互換性","title":"ブラウザの互換性","isH3":true,"content":"<p>Supported in Firefox 15.</p>"}}],"toc":[{"text":"API 概観","id":"api_概観"},{"text":"基本的な操作","id":"基本的な操作"},{"text":"File ストレージ","id":"file_ストレージ"},{"text":"API の互換性","id":"api_の互換性"}],"summary":"FileHandle API は、ファイルの作成や内容の変更など、ファイルを操作するための API です (File API (en-US) とは異なります)。この API を通じたファイル操作は、デバイス上に物理的に格納でき、部分的な編集には、競合問題を避けるためにターンベースのロック機構が使用されています。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","source":{"folder":"ja/conflicting/web/api/file_and_directory_entries_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/ja/conflicting/web/api/file_and_directory_entries_api/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"pageTitle":"FileHandle API | MDN","noIndexing":true}}