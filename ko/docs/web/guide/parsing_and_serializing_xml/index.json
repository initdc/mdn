{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"XML 파싱 및 직렬화","mdn_url":"/ko/docs/Web/Guide/Parsing_and_serializing_XML","locale":"ko","native":"한국어","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>웹 상에서 XML을 파싱하고 직렬화할 때 사용할 수 있는 객체는 다음과 같습니다.</p>\n<ul>\n  <li><strong>DOM 트리를 문자열로 직렬화</strong>하는** **<a href=\"/en-US/XMLSerializer\">XMLSerializer</a></li>\n  <li><strong>XML 문서 상의 각기 다른 부분들을 (비 XML 문법을 사용하여) 문자열로 직렬화</strong>하는 <a href=\"/en-US/XPath\">XPath</a></li>\n  <li>XML을 파싱하여 <strong>문자열을 DOM 트리로 변환</strong>하는 <a href=\"/en-US/DOM/DOMParser\">DOMParser</a></li>\n  <li><strong>URL을 사용하여 주소화 가능한(URL-addressable) 리소스를 DOM 트리로</strong> 파싱하는 <a href=\"/en-US/nsIXMLHttpRequest\">XMLHttpRequest</a></li>\n</ul>"}},{"type":"prose","value":{"id":"part_1_xml_문서_생성법","title":"Part 1: XML 문서 생성법","isH3":false,"content":"<p>XML 문서 생성법은 다음과 같습니다. (XML 문서는 <code>Document</code>의 인스턴스 입니다.)</p>"}},{"type":"prose","value":{"id":"문자열을_dom_트리로_파싱","title":"문자열을 DOM 트리로 파싱","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js hidden notranslate\"><code><span class=\"token keyword\">var</span> sMyString <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;a id=\"a\"&gt;&lt;b id=\"b\"&gt;hey!&lt;/b&gt;&lt;/a&gt;'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> oParser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DOMParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> oDOM <span class=\"token operator\">=</span> oParser<span class=\"token punctuation\">.</span><span class=\"token function\">parseFromString</span><span class=\"token punctuation\">(</span>sMyString<span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 루트 요소의 이름, 또는 에러 메시지를 출력합니다.</span>\n<span class=\"token function\">dump</span><span class=\"token punctuation\">(</span>oDOM<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>nodeName <span class=\"token operator\">==</span> <span class=\"token string\">\"parsererror\"</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"error while parsing\"</span> <span class=\"token operator\">:</span> oDOM<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>nodeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"자바스크립트_객체_트리를_시작점으로_하여_xml_문서를_생성jxon","title":"자바스크립트 객체 트리를 시작점으로 하여 XML 문서를 생성(JXON)","isH3":true,"content":"<p><a href=\"/en-US/JXON#reverse_algorithms\">JXON 역(reverse) 알고리즘</a>을 참고하세요.</p>"}},{"type":"prose","value":{"id":"url_주소화_가능한url-addressable_리소스를_dom_트리로_파싱","title":"URL 주소화 가능한(URL-addressable) 리소스를 DOM 트리로 파싱","isH3":true,"content":"<h4 id=\"xmlhttprequest를_사용합니다\">XMLHttpRequest를 사용합니다</h4>\n<p>다음은 URL 주소화 가능한 XML 파일을 DOM 트리로 읽어들인 후 파싱하는 예시 코드입니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">dump</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseXML<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>nodeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">dump</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error while getting XML.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"example.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span>responseType <span class=\"token operator\">=</span> <span class=\"token string\">\"document\"</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>xhr.responseXML는</code> <a href=\"/ko/docs/Web/API/Document\"><code>Document</code></a>의 인스턴스입니다.</p>"}},{"type":"prose","value":{"id":"part_2_특정_xml_문서의_콘텐츠를_직렬화하는_방법","title":"Part 2: 특정 XML 문서의 콘텐츠를 직렬화하는 방법","isH3":false,"content":"<p>Part 1에서 생성한 XML 문서의 콘텐츠를 직렬화할 수 있는 방법은 다음과 같습니다.</p>"}},{"type":"prose","value":{"id":"dom_트리를_문자열로_직렬화","title":"DOM 트리를 문자열로 직렬화","isH3":true,"content":"<p>제일 먼저 <a href=\"/en-US/How_to_create_a_DOM_tree\">DOM 트리 생성법</a>에 나와 있는 대로 DOM 트리를 생성합니다. 다른 방법으로는 <a href=\"/ko/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a>에서 얻어낸 DOM 트리를 사용하는 방법이 있습니다.</p>\n<p>이제 <code>doc</code>(DOM 트리)를 문자열로 직렬화 해 봅시다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> oSerializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> sXML <span class=\"token operator\">=</span> oSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">serializeToString</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>new XMLSerializer()</code> 생성자는 JS XPCOM 컴포넌트(혹은 <a href=\"/en-US/JavaScript_code_modules\">JS module</a>) 내에서는 사용이 불가능합니다. 대신, 다음과 같은 코드를 작성하세요.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> oSerializer <span class=\"token operator\">=</span> Components<span class=\"token punctuation\">.</span>classes<span class=\"token punctuation\">[</span><span class=\"token string\">\"@mozilla.org/xmlextras/xmlserializer;1\"</span><span class=\"token punctuation\">]</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">createInstance</span><span class=\"token punctuation\">(</span>Components<span class=\"token punctuation\">.</span>interfaces<span class=\"token punctuation\">.</span>nsIDOMSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> sXML <span class=\"token operator\">=</span> oSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">serializeToString</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"dom_트리를_문자열로_예쁘게pretty_직렬화\">DOM 트리를 문자열로 \"예쁘게(pretty)\" 직렬화</h4>\n<p><code>XMLSerializer와</code> <a href=\"/en-US/E4X\">E4X</a>를 사용하면 DOM 트리를 <a href=\"http://en.wikipedia.org/wiki/Pretty-print\" class=\"external\" rel=\" noopener\">예쁘게 출력(pretty print</a>) 할 수 있습니다. 우선, <a href=\"/en-US/How_to_create_a_DOM_tree\">DOM 트리 생성법</a> 글을 참고하여 DOM 트리를 생성합니다. 혹은 <a href=\"/ko/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a>를 통해 DOM 트리를 뽑아내는 방법도 있습니다. 아래 코드에서 변수 <code>doc</code>는 DOM 트리를 가지고 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> oSerializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> sPrettyXML <span class=\"token operator\">=</span> <span class=\"token constant\">XML</span><span class=\"token punctuation\">(</span>oSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">serializeToString</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toXMLString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>들여쓰기는 두 번 스페이스가 들어간 것과 같게 되어 있습니다. 좀 더 효율적인 코드를 작성하거나 들여쓰기 문자열을 임의로 설정하고 싶다면 <a href=\"/ko/docs/Web/API/TreeWalker\"><code>treeWalker</code></a>를 사용하십시오.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>참고:</strong> E4X <code>toXMLString</code> 메소드를 쓴다면, <strong>CDATA 요소가 없어지거나</strong>, 요소 안에 담긴 텍스트만 남을 수 있습니다. 그러므로 만약 XML 내에 CDATA 요소가 들어 있다면, 위에 나온 메소드는 그다지 유용하지 않을 수도 있습니다.</p>\n</div>\n<div class=\"code-example\"><pre class=\"brush: xml notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>content</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token cdata\">&lt;![CDATA[This is the content]]&gt;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>content</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>위의 코드는 다음과 같이 변환됩니다.</p>\n<div class=\"code-example\"><pre class=\"brush: xml notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>content</span><span class=\"token punctuation\">&gt;</span></span>This is the content<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>content</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"dom_트리를_자바스크립트_객체_트리로_직렬화_jxon","title":"DOM 트리를 자바스크립트 객체 트리로 직렬화 (JXON)","isH3":true,"content":"<p><a href=\"/en-US/JXON\">JXON</a> (lossless <strong>J</strong>avaScript <strong>X</strong>ML <strong>O</strong>bject <strong>N</strong>otation, 무손실 자바스크립트 XML 객체 표기법)은 XML을 사용하여 자바스크립트 객체를 표현하는 방법입니다. XML 문서의 일부분만 나오게 하고 싶다면, 문서 전체를 JSON으로 변환하지 말고 <a href=\"/en-US/XPath\">XPath</a>를 사용하세요! 이 외의 상황이라면 <a href=\"/en-US/JXON\">JSON에 관한 글</a>을 참조하세요.</p>"}},{"type":"prose","value":{"id":"dom_트리를_파일로_직렬화","title":"DOM 트리를 파일로 직렬화","isH3":true,"content":"<p>먼저, <a href=\"/en-US/How_to_create_a_DOM_tree\">DOM 트리 생성법</a> 글에 나와 있는 대로 DOM 트리를 생성하세요. 만약 <a href=\"/ko/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a>를 사용하여 이미 DOM 트리가 존재한다면 이 절의 마지막 부분으로 건너 뛰십시오.</p>\n<p>이제 DOM 트리인 <code>doc</code>를 파일로 직렬화 해봅시다. 파일에 대해 더 알아보고 싶다면, <a href=\"/en/Code_snippets/File_I_O\">모질라에서 파일 사용과 관련하여</a>를 참조하세요.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> oFOStream <span class=\"token operator\">=</span> Components<span class=\"token punctuation\">.</span>classes<span class=\"token punctuation\">[</span><span class=\"token string\">\"@mozilla.org/network/file-output-stream;1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">createInstance</span><span class=\"token punctuation\">(</span>Components<span class=\"token punctuation\">.</span>interfaces<span class=\"token punctuation\">.</span>nsIFileOutputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> oFile <span class=\"token operator\">=</span> Components<span class=\"token punctuation\">.</span>classes<span class=\"token punctuation\">[</span><span class=\"token string\">\"@mozilla.org/file/directory_service;1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getService</span><span class=\"token punctuation\">(</span>Components<span class=\"token punctuation\">.</span>interfaces<span class=\"token punctuation\">.</span>nsIProperties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ProfD\"</span><span class=\"token punctuation\">,</span> Components<span class=\"token punctuation\">.</span>interfaces<span class=\"token punctuation\">.</span>nsILocalFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// get profile folder</span>\noFile<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"extensions\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// extensions sub-directory</span>\noFile<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{5872365E-67D1-4AFD-9480-FD293BEBD20D}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// GUID of your extension</span>\noFile<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myXMLFile.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// filename</span>\noFOStream<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>oFile<span class=\"token punctuation\">,</span> <span class=\"token number\">0x02</span> <span class=\"token operator\">|</span> <span class=\"token number\">0x08</span> <span class=\"token operator\">|</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0664</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// write, create, truncate</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">serializeToStream</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">,</span> oFOStream<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// rememeber, doc is the DOM tree</span>\noFOStream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"xmlhttprequest_객체를_파일로_직렬화","title":"XMLHttpRequest 객체를 파일로 직렬화","isH3":true,"content":"<p>이미 <a href=\"/ko/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a>를 사용하여 DOM 트리를 보유한 상태라면, 위의 코드를 사용하되 <code>serializer.serializeToStream(doc, oFOStream, \"\")</code> <code>부분을</code> <code>serializer.serializeToStream(xmlHttpRequest.responseXML.documentElement, oFOStream, \"\")</code>로 대체하십시오. <code>xmlHttpRequest은</code> <code>XMLHttpRequest</code>의 인스턴스입니다.</p>\n<p>위 코드는 서버에서 XML을 찾아낸 후 문자열 스트림으로 재직렬화(re-serialize)한다는 것을 알아두세요. 필요에 따라 <code>xmlHttpRequest.responseText</code>를 곧장 건너뛸 수 있습니다.</p>"}},{"type":"prose","value":{"id":"html_문서를_직렬화","title":"HTML 문서를 직렬화","isH3":true,"content":"<p>만약 보유한 DOM이 HTML 문서라면 다음과 같이 간단하게 직렬화할 수 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> serialized <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"참고_자료","title":"참고 자료","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/XPath\">XPath</a></li>\n  <li><a href=\"/en-US/nsIXMLHttpRequest\">XMLHttpRequest</a></li>\n  <li><a href=\"/en-US/JXON\">JXO</a></li>\n</ul>"}}],"toc":[{"text":"Part 1: XML 문서 생성법","id":"part_1_xml_문서_생성법"},{"text":"Part 2: 특정 XML 문서의 콘텐츠를 직렬화하는 방법","id":"part_2_특정_xml_문서의_콘텐츠를_직렬화하는_방법"},{"text":"참고 자료","id":"참고_자료"}],"summary":"웹 상에서 XML을 파싱하고 직렬화할 때 사용할 수 있는 객체는 다음과 같습니다.","popularity":0.0002,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Parsing and serializing XML","locale":"en-US","native":"English (US)"},{"title":"Convertir código a cadena de texto (serializing) y visceversa (parsing) a un  XML","locale":"es","native":"Español"},{"title":"XML のパースとシリアライズ","locale":"ja","native":"日本語"},{"title":"Прямая и обратная обработка XML","locale":"ru","native":"Русский"},{"title":"Parsing and serializing XML","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ko/web/guide/parsing_and_serializing_xml","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/web/guide/parsing_and_serializing_xml/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ko/docs/Web","title":"개발자를 위한 웹 기술"},{"uri":"/ko/docs/Web/Guide","title":"웹 개발자 안내서"},{"uri":"/ko/docs/Web/Guide/Parsing_and_serializing_XML","title":"XML 파싱 및 직렬화"}],"pageTitle":"XML 파싱 및 직렬화 - 웹 개발자 안내서 | MDN","noIndexing":false}}