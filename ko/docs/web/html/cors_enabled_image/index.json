{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"교차 출처 이미지와 캔버스 허용하기","mdn_url":"/ko/docs/Web/HTML/CORS_enabled_image","locale":"ko","native":"한국어","sidebarHTML":"\n<ol></ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><span class=\"seoSummary\">HTML은 이미지 처리를 위해 <a href=\"/ko/docs/Glossary/CORS\">CORS</a> header를 포함하고 있는 <a href=\"/ko/docs/Web/HTML/Element/img#attr-crossorigin\"><code>crossorigin</code></a> 속성을 제공합니다. 이는 <a href=\"/ko/docs/Web/HTML/Element/img\"><code>&lt;img&gt;</code></a> 요소에서 정의된, 외부 origin으로 부터 가져오는 이미지가 <a href=\"/ko/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a>에서 사용할 수 있도록 해줍니다. 마치 현재 origin에서 가져온 것처럼 말입니다</span></p>\n\n<p><code>crossorigin</code> 속성이 어떻게 사용되는지 자세히 알고 싶다면, <a href=\"/en-US/docs/Web/HTML/Attributes/crossorigin\">CORS settings attributes</a> 를 참고하세요.</p>"}},{"type":"prose","value":{"id":"보안과_오염된_canvas들","title":"보안과 오염된 canvas들","isH3":false,"content":"<p>다른 호스트들에 있는 이미지나 비디오를 포함한 canvas 비트맵의 픽셀들은 다양한 출처로 부터 가져오기 때문에, 보안과 관련된 문제를 피할 수 없습니다.</p>\n\n<p>CORS를 통하지 않고, 다른 origin으로 부터 가져온 데이터들은 canvas에 그려지는 즉시 canvas는 <strong>오염</strong>됩니다. 오염된 canvas는 더 이상 안전하지 않은 것으로 여겨지고, canvas 이미지에서 데이터를 가져오려는 어떤 시도든 exception이 발생합니다.</p>\n\n<p>만약 외부 출처 콘텐츠가 HTML <a href=\"/ko/docs/Web/HTML/Element/img\"><code>&lt;img&gt;</code></a> 또는 SVG <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/SVG/Element/svg\"><code>&lt;svg&gt;</code> <small>(en-US)</small></a> 요소라면, canvas의 콘텐츠를 가져오려는 시도는 허용되지 않습니다.</p>\n\n<p>만약 외부 출처 콘텐츠가 <a href=\"/ko/docs/Web/API/HTMLCanvasElement\"><code>HTMLCanvasElement</code></a> 또는 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ImageBitmap\"><code>ImageBitMap</code> <small>(en-US)</small></a> 로부터 오는 이미지이고, 이미지의 source가 동일 출처 원칙과 맞지 않는다면 canvas의 콘텐츠를 읽으려는 시도는 막힙니다.</p>\n\n<p>Calling any of the following on a tainted canvas will result in an error:</p>\n\n<ul>\n <li>Calling <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CanvasRenderingContext2D/getImageData\"><code>getImageData()</code> <small>(en-US)</small></a> on the canvas's context</li>\n <li>Calling <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLCanvasElement/toBlob\"><code>toBlob()</code> <small>(en-US)</small></a> on the <a href=\"/ko/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a> element itself</li>\n <li>Calling <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLCanvasElement/toDataURL\"><code>toDataURL()</code> <small>(en-US)</small></a> on the canvas</li>\n</ul>\n\n<p>Attempting any of these when the canvas is tainted will cause a <code>SecurityError</code> to be thrown. This protects users from having private data exposed by using images to pull information from remote web sites without permission.</p>"}},{"type":"prose","value":{"id":"storing_an_image_from_a_foreign_origin","title":"Storing an image from a foreign origin","isH3":false,"content":"<p>In this example, we wish to permit images from a foreign origin to be retrieved and saved to local storage. Implementing this requires configuring the server as well as writing code for the web site itself.</p>"}},{"type":"prose","value":{"id":"web_server_configuration","title":"Web server configuration","isH3":true,"content":"<p>The first thing we need is a server that's configured to host images with the <a href=\"/ko/docs/Web/HTTP/Headers/Access-Control-Allow-Origin\"><code>Access-Control-Allow-Origin</code></a> header configured to permit cross-origin access to image files.</p>\n\n<p>Let's assume we're serving our site using <a href=\"https://httpd.apache.org/\" class=\"external\" rel=\" noopener\">Apache</a>. Consider the HTML5 Boilerplate <a href=\"https://github.com/h5bp/server-configs-apache/blob/master/src/cross-origin/images.conf\" class=\"external\" rel=\" noopener\">Apache server configuration file for CORS images</a>, shown below:</p>\n\n<div class=\"code-example\"><pre class=\"brush: xml notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>IfModule</span> <span class=\"token attr-name\">mod_setenvif.c</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>IfModule</span> <span class=\"token attr-name\">mod_headers.c</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>FilesMatch</span> <span class=\"token attr-name\">\"\\.(bmp|cur|gif|ico|jpe?g|png|svgz?|webp)$\"</span><span class=\"token punctuation\">&gt;</span></span>\n      SetEnvIf Origin \":\" IS_CORS\n      Header set Access-Control-Allow-Origin \"*\" env=IS_CORS\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>FilesMatch</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>IfModule</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>IfModule</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n\n<p>In short, this configures the server to allow graphic files (those with the extensions \".bmp\", \".cur\", \".gif\", \".ico\", \".jpg\", \".jpeg\", \".png\", \".svg\", \".svgz\", and \".webp\") to be accessed cross-origin from anywhere on the internet.</p>"}},{"type":"prose","value":{"id":"implementing_the_save_feature","title":"Implementing the save feature","isH3":true,"content":"<p>Now that the server has been configured to allow retrieval of the images cross-origin, we can write the code that allows the user to save them to local <a href=\"/en-US/docs/Web/API/Web_Storage_API\">local storage</a>, just as if they were being served from the same domain the code is running on.</p>\n\n<p>The key is to use the <a href=\"/ko/docs/Web/HTML/Global_attributes#attr-crossorigin\"><code>crossorigin</code></a> attribute by setting <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLImageElement/crossOrigin\"><code>crossOrigin</code> <small>(en-US)</small></a> on the <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLImageElement\"><code>HTMLImageElement</code> <small>(en-US)</small></a> into which the image will be loaded. This tells the browser to request cross-origin access when trying to download the image data.</p>\n\n<h4 id=\"starting_the_download\">Starting the download</h4>\n\n<p>The code that starts the download (say, when the user clicks a \"Download\" button), looks like this:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">startDownload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> imageURL <span class=\"token operator\">=</span> <span class=\"token string\">\"https://cdn.glitch.com/4c9ebeb9-8b9a-4adc-ad0a-238d9ae00bb5%2Fmdn_logo-only_color.svg?1535749917189\"</span><span class=\"token punctuation\">;</span>\n\n  downloadedImg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">;</span>\n  downloadedImg<span class=\"token punctuation\">.</span>crossOrigin <span class=\"token operator\">=</span> <span class=\"token string\">\"Anonymous\"</span><span class=\"token punctuation\">;</span>\n  downloadedImg<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span> imageReceived<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  downloadedImg<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> imageURL<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<p>We're using a hard-coded URL here (<code>imageURL</code>), but that could easily come from anywhere. To begin downloading the image, we create a new <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLImageElement\"><code>HTMLImageElement</code> <small>(en-US)</small></a> object by using the <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLImageElement/Image\"><code>Image()</code> <small>(en-US)</small></a> constructor. The image is then configured to allow cross-origin downloading by setting its <code>crossOrigin</code> attribute to <code>\"Anonymous\"</code> (that is, allow non-authenticated downloading of the image cross-origin). An event listener is added for the <code><a href=\"/ko/docs/Web/API/Window/load_event\" title=\"/ko/docs/Web/Reference/Events/load\">load</a></code> event being fired on the image element, which means the image data has been received.</p>\n\n<p>Finally, the image's <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLImageElement/src\"><code>src</code> <small>(en-US)</small></a> attribute is set to the URL of the image to download; this triggers the download to begin.</p>\n\n<h4 id=\"receiving_and_saving_the_image\">Receiving and saving the image</h4>\n\n<p>The code that handles the newly-downloaded image is found in the <code>imageReceived()</code> method:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">imageReceived</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"canvas\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> context <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  canvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> downloadedImg<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n  canvas<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> downloadedImg<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n\n  context<span class=\"token punctuation\">.</span><span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span>downloadedImg<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  imageBox<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"saved-image-example\"</span><span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">toDataURL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"image/png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error: \"</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<p><code>imageReceived()</code> is called to handle the <code>\"load\"</code> event on the <code>HTMLImageElement</code> that receives the downloaded image. This event is triggered once the downloaded data is all available. It begins by creating a new <a href=\"/ko/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a> element that we'll use to convert the image into a data URL, and by getting access to the canvas's 2D drawing context (<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CanvasRenderingContext2D\"><code>CanvasRenderingContext2D</code> <small>(en-US)</small></a>) in the variable <code>context</code>.</p>\n\n<p>The canvas's size is adjusted to match the received image, then the image is drawn into the canvas using <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage\"><code>drawImage()</code> <small>(en-US)</small></a>. The canvas is then inserted into the document so the image is visible.</p>\n\n<p>Now it's time to actually save the image locally. To do this, we use the Web Storage API's local storage mechanism, which is accessed through the <a href=\"/ko/docs/Web/API/Window/localStorage\" title=\"localStorage\"><code>localStorage</code></a> global. The canvas method <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLCanvasElement/toDataURL\"><code>toDataURL()</code> <small>(en-US)</small></a> is used to convert the image into a data:// URL representing a PNG image, which is then saved into local storage using <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Storage/setItem\"><code>setItem()</code> <small>(en-US)</small></a>.</p>\n\n<p>You can <a href=\"https://cors-image-example.glitch.me/\" class=\"external\" rel=\" noopener\">try out</a> or <a href=\"https://glitch.com/edit/#!/remix/cors-image-example\" class=\"external\" rel=\" noopener\">remix</a> this example on Glitch.</p>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n <li><a class=\"external\" href=\"https://blog.chromium.org/2011/07/using-cross-domain-images-in-webgl-and.html\" rel=\" noopener\">Using Cross-domain images in WebGL and Chrome 13</a></li>\n <li><a class=\"external\" href=\"http://whatwg.org/html#attr-img-crossorigin\" rel=\" noopener\">HTML Specification - the <code>crossorigin</code> attribute</a></li>\n <li><a href=\"/en-US/docs/Web/API/Web_Storage_API\">Web Storage API</a></li>\n</ul>\n\n<div id=\"sect1\"></div>"}}],"toc":[{"text":"보안과 오염된 canvas들","id":"보안과_오염된_canvas들"},{"text":"Storing an image from a foreign origin","id":"storing_an_image_from_a_foreign_origin"},{"text":"See also","id":"see_also"}],"summary":"HTML은 이미지 처리를 위해 CORS header를 포함하고 있는 crossorigin 속성을 제공합니다. 이는 <img> 요소에서 정의된, 외부 origin으로 부터 가져오는 이미지가 <canvas>에서 사용할 수 있도록 해줍니다. 마치 현재 origin에서 가져온 것처럼 말입니다","popularity":0.0003,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Allowing cross-origin use of images and canvas","locale":"en-US","native":"English (US)"},{"title":"Imagen con CORS habilitado","locale":"es","native":"Español"},{"title":"Autoriser les images et canevas provenant d'autres origines","locale":"fr","native":"Français"},{"title":"画像とキャンバスをオリジン間で利用できるようにする","locale":"ja","native":"日本語"},{"title":"CORS_habilitar_imagens","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Разрешение использования изображений из разных источников и canvas","locale":"ru","native":"Русский"},{"title":"启用了 CORS 的图片","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ko/web/html/cors_enabled_image","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/web/html/cors_enabled_image/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/ko/docs/Web","title":"개발자를 위한 웹 기술"},{"uri":"/ko/docs/Web/HTML","title":"HTML: Hypertext Markup Language"},{"uri":"/ko/docs/Web/HTML/CORS_enabled_image","title":"교차 출처 이미지와 캔버스 허용하기"}],"pageTitle":"교차 출처 이미지와 캔버스 허용하기 - HTML: Hypertext Markup Language | MDN","noIndexing":false}}