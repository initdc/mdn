{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"사용자 정의 요소 사용하기","mdn_url":"/ko/docs/Web/Web_Components/Using_custom_elements","locale":"ko","native":"한국어","sidebarHTML":"<ol><li class=\"toggle\"><details open=\"\"><summary>Guides</summary><ol><li><a href=\"/ko/docs/Web/Web_Components/Using_custom_elements\">Using custom elements</a></li><li><a href=\"/ko/docs/Web/Web_Components/Using_shadow_DOM\">Using shadow DOM</a></li><li><a href=\"/ko/docs/Web/Web_Components/Using_templates_and_slots\">Using templates and slots</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Interfaces</summary><ol><li><a href=\"/ko/docs/Web/API/CustomElementRegistry\"><code>CustomElementRegistry</code></a></li><li><a href=\"/ko/docs/Web/API/HTMLSlotElement\"><code>HTMLSlotElement</code></a></li><li><a href=\"/ko/docs/Web/API/HTMLTemplateElement\"><code>HTMLTemplateElement</code></a></li><li><a href=\"/ko/docs/Web/API/ShadowRoot\"><code>ShadowRoot</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/ko/docs/Web/API/Element/shadowRoot\"><code>Element.shadowRoot</code></a></li><li><a href=\"/ko/docs/Web/API/Element/slot\"><code>Element.slot</code></a></li><li><a href=\"/ko/docs/Web/API/Event/composed\"><code>Event.composed</code></a></li><li><a href=\"/ko/docs/Web/API/Event/composedPath\"><code>Event.composedPath</code></a></li><li><a href=\"/ko/docs/Web/API/Node/isConnected\"><code>Node.isConnected</code></a></li><li><a href=\"/ko/docs/Web/API/Window/customElements\"><code>Window.customElements</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/ko/docs/Web/API/Document/createElement\"><code>Document.createElement()</code></a></li><li><a href=\"/ko/docs/Web/API/Element/attachShadow\"><code>Element.attachShadow()</code></a></li><li><a href=\"/ko/docs/Web/API/Node/getRootNode\"><code>Node.getRootNode()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>웹 컴포넌트 표준의 주요 기능 중 하나는 사용자 정의 페이지 기능을 제공하는 길고 중첩된 요소들의 묶음으로 만족하는 것보다는, HTML 페이지에서 기능을 캡슐화하는 사용자 정의 요소를 생성하는 능력입니다. 이 문서는 Custom Elements API의 사용을 소개합니다.</p>"}},{"type":"prose","value":{"id":"중요_내용_보기","title":"중요 내용 보기","isH3":false,"content":"<p>웹 document의 사용자 정의 요소의 컨트롤러는 <a href=\"/ko/docs/Web/API/CustomElementRegistry\"><code>CustomElementRegistry</code></a> 객체입니다. 이 객체는 페이지에 사용자 정의 요소를 등록할 수 있게 하고, 어떤 사용자 정의 요소가 등록되었는지 등에 대한 정보를 반환합니다.</p>\n<p>페이지에 사용자 정의 요소를 등록하는 방법은 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CustomElementRegistry/define\"><code>CustomElementRegistry.define()</code> <small>(en-US)</small></a> 메서드를 사용하는 것입니다. 이 메서드는 인자로 다음을 취합니다.</p>\n<ul>\n  <li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>DOMString</code></a>은 요소에 주는 이름을 나타냅니다. 사용자 정의 요소의 이름은 <a href=\"https://html.spec.whatwg.org/#valid-custom-element-name\" class=\"external\" rel=\" noopener\">대시가 사용되는 것을 요구</a>한다는 것에 주의하세요 (kebab-case). 이름은 하나의 단어일 수 없습니다.</li>\n  <li>요소의 동작을 정의하는 <a href=\"/ko/docs/Web/JavaScript/Reference/Classes\">class</a> 객체.</li>\n  <li><span class=\"badge inline optional\">Optional</span> <code>extends</code> 속성을 포함하는 옵션 객체인데, 이는 이 요소가 상속받는 내장 요소가 있다면, 그 내장 요소를 명시합니다 (오직 사용자 정의된 내장 요소에만 관계있습니다. 아래의 정의를 보세요).</li>\n</ul>\n<p>예를 들어, 사용자 정의 <a href=\"https://mdn.github.io/web-components-examples/word-count-web-component/\" class=\"external\" rel=\" noopener\">단어 카운트 요소</a>를 다음과 같이 정의할 수 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'word-count'</span><span class=\"token punctuation\">,</span> WordCount<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token string\">'p'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>이 요소는 <code>word-count</code> 라고 불리며, 이것의 클래스 객체는 <code>WordCount</code> 이고, 이것은 <a href=\"/ko/docs/Web/HTML/Element/p\"><code>&lt;p&gt;</code></a>요소를 확장합니다.</p>\n<p>사용자 정의 요소의 클래스 객체는 표준 ES 2015 class 구문을 사용하여 작성됩니다. 에를 들어, <code>WordCount</code> 는 다음과 같이 구조화될 수 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">WordCount</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLParagraphElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 항상 super를 생성자에서 먼저 호출합니다</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 요소 기능은 여기 작성됩니다</span>\n    \n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>이것은 단순히 간단한 예제이지만, 여기서 할 수 있는 더 많은 것이 있습니다. 클래스 내부에서 특정한 생명 주기 콜백을 정의할 수 있는데, 이 콜백은 요소의 생명 주기의 특정한 지점에서 실행됩니다. 예를 들어, <code>connectedCallback</code> 은 사용자 정의 요소가 문서에 연결된 요소에 추가될 때마다 호출되는 반면, <code>attributeChangedCallback</code> 은 사용자 정의 요소의 특성 중 하나가 추가되거나, 제거되거나, 변경될 때 호출됩니다.</p>\n<p>아래의 <a href=\"#%EC%83%9D%EB%AA%85_%EC%A3%BC%EA%B8%B0_%EC%BD%9C%EB%B0%B1_%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">생명 주기 콜백 사용하기</a> 섹션에서 더 많은 것을 배울 수 있습니다.</p>\n<p>두 종류의 사용자 정의 요소가 있습니다.</p>\n<ul>\n  <li><strong>독립적인 사용자 정의 요소</strong>는 독립적입니다. 이 유형의 요소는 표준 HTML 요소를 상속받지 않습니다. 이러한 요소는 페이지에서 말 그대로 HTML 요소로 작성됨으로써 사용됩니다. 예를 들어 <code>&lt;popup-info&gt;</code>, 혹은 <code>document.createElement(\"popup-info\")</code>.</li>\n  <li><strong>사용자 정의된 내장 요소</strong>는 기본 HTML 요소를 상속받습니다. 이러한 요소를 생성하기 위해서는, (위의 예제에서 암시되었듯이) 어떤 요소를 이것이 확장하는지 명시해야 하며, 이러한 요소는 기본 요소를 작성함으로써 사용되나 <a href=\"/ko/docs/Web/HTML/Global_attributes#attr-is\"><code>is</code></a> 특성 (혹은 속성) 에 사용자 정의 요소의 이름을 명시해야 합니다. 예를 들어 <code>&lt;p is=\"word-count\"&gt;</code>, 혹은 <code>document.createElement(\"p\", { is: \"word-count\" })</code>.</li>\n</ul>"}},{"type":"prose","value":{"id":"몇_가지_간단한_예제_살펴보기","title":"몇 가지 간단한 예제 살펴보기","isH3":false,"content":"<p>이 지점에서, 어떻게 사용자 정의 요소가 생성되는지를 자세히 보여주는 몇 가지 간단한 예제를 살펴봅시다.</p>"}},{"type":"prose","value":{"id":"독립적인_사용자_정의_요소","title":"독립적인 사용자 정의 요소","isH3":true,"content":"<p>독립적인 사용자 정의 요소의 예제를 살펴봅시다. <a href=\"https://github.com/mdn/web-components-examples/tree/master/popup-info-box-web-component\" class=\"external\" rel=\" noopener\"><code>&lt;popup-info-box&gt;</code></a> (<a href=\"https://mdn.github.io/web-components-examples/popup-info-box-web-component/\" class=\"external\" rel=\" noopener\">작동 예제</a>도 볼 수 있습니다). 이것은 이미지 아이콘과 텍스트 문자열을 취하고, 아이콘을 페이지에 넣습니다. 아이콘이 포커스되었을 때, 이것은 텍스트를 팝업 정보 박스에 표시하여 추가적인 맥락 내 정보를 제공합니다.</p>\n<p>우선, JavaScript 파일에서 <code>PopUpInfo</code> 라는 클래스를 정의하는데, 이 클래스는 포괄적인 <a href=\"/ko/docs/Web/API/HTMLElement\"><code>HTMLElement</code></a> 클래스를 확장합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">PopUpInfo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 항상 super를 생성자에서 먼저 호출합니다</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 요소 기능을 여기 작성합니다</span>\n    \n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>앞선 코드 스니펫은 클래스에 대한 <a href=\"/ko/docs/Web/JavaScript/Reference/Classes/constructor\"><code>constructor()</code></a> 정의를 포함하고 있는데, 이는 항상 <a href=\"/ko/docs/Web/JavaScript/Reference/Operators/super\"><code>super()</code></a>를 호출함으로써 시작하여 올바른 프로토타입 체인이 확립되도록 합니다.</p>\n<p>생성자 내부에서, 클래스의 인스턴스가 인스턴스화되었을 때 요소가 가질 모든 기능을 정의합니다. 이 경우 우리는 shadow root을 사용자 정의 요소에 부착하고, 몇 가지 DOM 조작을 사용하여 요소의 내부 shadow DOM 구조를 생성하는데, 이는 그리고서 shadow root에 부착됩니다. 그리고 마지막으로 몇 가지 CSS를 shadow root에 부착하여 shadow DOM을 꾸밉니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// shadow root을 생성합니다</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'open'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'this.shadowRoot'을 설정하고 반환합니다</span>\n\n<span class=\"token comment\">// (중첩된) span 요소들을 생성합니다</span>\n<span class=\"token keyword\">const</span> wrapper <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwrapper<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'wrapper'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> icon <span class=\"token operator\">=</span> wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nicon<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'icon'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nicon<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tabindex'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 정의된 특성으로부터의 아이콘 혹은 기본 아이콘을 삽입합니다</span>\n<span class=\"token keyword\">const</span> img <span class=\"token operator\">=</span> icon<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nimg<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token string\">'img/default.png'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> info <span class=\"token operator\">=</span> wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninfo<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'info'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 특성의 내용을 취하고 그것을 info span 내부에 넣습니다</span>\ninfo<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-text'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// shadow dom에 적용할 몇 가지 CSS를 생성합니다</span>\n<span class=\"token keyword\">const</span> style <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'style'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstyle<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'.wrapper {'</span> <span class=\"token operator\">+</span>\n<span class=\"token comment\">// 간결함을 위해 CSS 생략됨</span>\n\n<span class=\"token comment\">// 생성된 요소들을 shadow DOM에 부착합니다</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shadowRoot<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">,</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>마지막으로, <code>CustomElementRegistry</code> 에 사용자 정의 요소를 앞에서 언급된 <code>define()</code> 메서드를 사용해 등록합니다. 매개변수에서 요소의 이름과, 그리고 나서 요소의 기능을 정의하는 클래스명을 명시합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'popup-info'</span><span class=\"token punctuation\">,</span> PopUpInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>이 요소는 이제 페이지에서 사용 가능합니다. HTML 전체에서, 요소를 다음과 같이 사용합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>popup-info</span> <span class=\"token attr-name\">img</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>img/alt.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Your card validation code (CVC)\n  is an extra security feature — it is the last 3 or 4 numbers on the\n  back of your card.<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>popup-info</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>참고:</strong> <a href=\"https://github.com/mdn/web-components-examples/blob/master/popup-info-box-web-component/main.js\" class=\"external\" rel=\" noopener\">전체 JavaScript 소스 코드</a>를 여기서 확인할 수 있습니다.</p>\n</div>"}},{"type":"prose","value":{"id":"내부_스타일_대_외부_스타일","title":"내부 스타일 대 외부 스타일","isH3":true,"content":"<p>상기의 예제에서 <a href=\"/ko/docs/Web/HTML/Element/style\"><code>&lt;style&gt;</code></a> 요소가 사용되어 Shadow DOM에 스타일을 적용했으나, 대신 <a href=\"/ko/docs/Web/HTML/Element/link\"><code>&lt;link&gt;</code></a> 요소로부터 외부 스타일시트를 참조함으로써 스타일을 적용하는 것도 완벽히 가능합니다.</p>\n<p>예를 들자면, <a href=\"https://mdn.github.io/web-components-examples/popup-info-box-external-stylesheet/\" class=\"external\" rel=\" noopener\">popup-info-box-external-stylesheet</a> 예제에서 이 코드를 확인해 보세요 (<a href=\"https://github.com/mdn/web-components-examples/blob/master/popup-info-box-external-stylesheet/main.js\" class=\"external\" rel=\" noopener\">소스 코드</a>도 볼 수 있습니다).</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 외부 스타일을 shadow dom에 적용하기</span>\n<span class=\"token keyword\">const</span> linkElem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'link'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlinkElem<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rel'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'stylesheet'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlinkElem<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'href'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'style.css'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 생성된 요소를 shadow dom에 부착하기</span>\nshadow<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>linkElem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><a href=\"/ko/docs/Web/HTML/Element/link\"><code>&lt;link&gt;</code></a> 요소는 shadow root의 페인트를 막지 않아, 스타일시트가 로딩되는 동안 스타일되지 않은 내용의 번쩍임 (FOUC, flash of unstyled content) 이 있을 수 있다는 점에 주의하세요.</p>\n<p>많은 모던 브라우저들은 공통 노드로부터 복제되었거나 동일한 텍스트를 가지고 있는 <a href=\"/ko/docs/Web/HTML/Element/style\"><code>&lt;style&gt;</code></a> 태그에 대한 최적화를 구현하여 스타일 태그가 하나의 백업 스타일시트를 공유할 수 있게 합니다. 이 최적화로 인해 외부 스타일과 내부 스타일의 성능은 비슷할 것입니다.</p>"}},{"type":"prose","value":{"id":"사용자_정의된_내장_요소","title":"사용자 정의된 내장 요소","isH3":true,"content":"<p>이제 사용자 정의된 요소 예제를 살펴봅시다. <a href=\"https://github.com/mdn/web-components-examples/tree/master/expanding-list-web-component\" class=\"external\" rel=\" noopener\">expanding-list</a> (<a href=\"https://mdn.github.io/web-components-examples/expanding-list-web-component/\" class=\"external\" rel=\" noopener\">작동 예제</a>도 확인해 보세요). 이것은 정렬되지 않은 리스트를 확장/축소 메뉴로 바꿔 줍니다.</p>\n<p>우선, 요소의 클래스를 이전과 같은 방식으로 정의합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">ExpandingList</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLUListElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 항상 super를 생성자에서 먼저 호출합니다</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 요소 기능을 여기 작성합니다</span>\n    \n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>요소 기능을 여기서는 자세히 설명하지 않을 것이지만, 소스 코드를 확인해서 어떻게 작동하는지 발견할 수 있을 것입니다. 여기서의 차이는 이 요소가 <a href=\"/ko/docs/Web/API/HTMLElement\"><code>HTMLElement</code></a>가 아니라, <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLUListElement\"><code>HTMLUListElement</code> <small>(en-US)</small></a> 인터페이스를 확장한다는 것입니다. 그래서 이 요소는 독립된 요소이기보다는 <a href=\"/ko/docs/Web/HTML/Element/ul\"><code>&lt;ul&gt;</code></a> 요소의 모든 특성을 가지고 있으며 그 위에 우리가 정의한 기능 또한 가지고 있습니다. 이것이 이 요소를 독립적인 요소보다는 사용자 정의된 내장 요소로 만들어주는 것입니다.</p>\n<p>다음으로, 전과 같이 <code>define()</code> 메서드를 사용하여 요소를 등록하나, 이번엔 이 사용자 정의 요소가 어떤 요소를 상속받는지를 나타내는 옵션 객체를 포함합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'expanding-list'</span><span class=\"token punctuation\">,</span> ExpandingList<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ul\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>웹 document에서 이 내장 요소를 사용하는 것은 또한 어느 정도 다르게 보입니다.</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">is</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>expanding-list<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  ...\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p><code>&lt;ul&gt;</code> 요소를 평범하게 사용하나, <code>is</code> 특성 내부에 사용자 정의 요소의 이름을 명시합니다.</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>참고:</strong> <a href=\"https://github.com/mdn/web-components-examples/blob/master/expanding-list-web-component/main.js\" class=\"external\" rel=\" noopener\">전체 JavaScript 소스 코드</a>를 확인해볼 수 있습니다.</p>\n</div>"}},{"type":"prose","value":{"id":"생명_주기_콜백_사용하기","title":"생명 주기 콜백 사용하기","isH3":false,"content":"<p>몇 가지 다른 콜백을 사용자 정의 요소의 클래스 정의 내부에 정의할 수 있는데, 이 콜백들은 요소의 생명 주기의 각기 다른 지점에서 발생됩니다.</p>\n<ul>\n  <li><code>connectedCallback</code>: 사용자 정의 요소가 문서에 연결된 요소에 추가될 때마다 호출됩니다. 이것은 노드가 이동될 때마다 발생할 것이며, 요소의 내용이 완전히 해석되기 전에 발생할 지도 모릅니다.\n    <div class=\"notecard note\" id=\"sect3\">\n      <p><strong>참고:</strong> <code>connectedCallback</code> 은 요소가 더 이상 연결되지 않았을 때 호출될 수도 있으므로, 확실하게 하기 위해선 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Node/isConnected\"><code>Node.isConnected</code> <small>(en-US)</small></a>를 사용하세요.</p>\n    </div>\n  </li>\n  <li><code>disconnectedCallback</code>: 사용자 정의 요소가 document의 DOM에서 연결 해제되었을 때마다 호출됩니다.</li>\n  <li><code>adoptedCallback</code>: 사용자 정의 요소가 새로운 document로 이동되었을 때마다 호출됩니다.</li>\n  <li><code>attributeChangedCallback</code>: 사용자 정의 요소의 특성들 중 하나가 추가되거나, 제거되거나, 변경될 때마다 호출됩니다. 어떤 특성이 변경에 대해 알릴지는 static get <code>observedAttributes</code> 메서드에서 명시됩니다.</li>\n</ul>\n<p>이것들의 사용례를 봅시다. 아래의 코드는 <a href=\"https://github.com/mdn/web-components-examples/tree/master/life-cycle-callbacks\" class=\"external\" rel=\" noopener\">life-cycle-callbacks</a> 예제에서 취해졌습니다 (<a href=\"https://mdn.github.io/web-components-examples/life-cycle-callbacks/\" class=\"external\" rel=\" noopener\">작동 예제</a>도 볼 수 있습니다). 이것은 페이지에 고정된 크기의 색이 칠해진 사각형을 생성하는 작은 예제입니다. 사용자 정의 요소는 다음과 같이 생겼습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>custom-square</span> <span class=\"token attr-name\">l</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">c</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>red<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>custom-square</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>클래스 생성자는 정말로 간단합니다. shadow DOM을 요소에 부착하고, 빈 <a href=\"/ko/docs/Web/HTML/Element/div\"><code>&lt;div&gt;</code></a> 와 <a href=\"/ko/docs/Web/HTML/Element/style\"><code>&lt;style&gt;</code></a> 요소를 shadow root에 부착합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> shadow <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'open'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> style <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'style'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nshadow<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nshadow<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>이 예제에서의 핵심 함수는 <code>updateStyle()</code> 입니다. 이 함수는 요소를 취하고, 요소의 shadow root을 얻고, shadow root의 <code>&lt;style&gt;</code> 요소를 찾고, <a href=\"/ko/docs/Web/CSS/width\"><code>width</code></a>, <a href=\"/ko/docs/Web/CSS/height\"><code>height</code></a>, <a href=\"/ko/docs/Web/CSS/background-color\"><code>background-color</code></a>를 스타일에 추가합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">updateStyle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">elem</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> shadow <span class=\"token operator\">=</span> elem<span class=\"token punctuation\">.</span>shadowRoot<span class=\"token punctuation\">;</span>\n  shadow<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'style'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    div {\n      width: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>elem<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'l'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px;\n      height: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>elem<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'l'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px;\n      background-color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>elem<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n    }\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>실제 갱신은 모두 생명 주기 콜백에 의해 다뤄지는데, 이 콜백들은 클래스 정의 내부에 메서드로 위치합니다. <code>connectedCallback()</code> 은 요소가 DOM에 추가될 때마다 실행됩니다. 여기서 <code>updateStyle()</code> 함수가 실행되어 사각형이 이것의 특성에 정의된 대로 꾸며지도록 합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Custom square element added to page.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">updateStyle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>disconnectedCallback()</code> 과 <code>adoptedCallback()</code> 콜백은 콘솔에 간단한 메시지를 로그하여 언제 요소가 DOM에서 제거되었는지, 혹은 다른 페이지로 이동되었는지를 알립니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">disconnectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Custom square element removed from page.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">adoptedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Custom square element moved to new page.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>attributeChangedCallback()</code> 은 요소의 특성 중 하나가 어떠한 방식으로 변경될 때마다 실행됩니다. 이 콜백의 매개변수에서 볼 수 있다시피, 특성의 이름, 이전 값, 새로운 값을 보고 특성의 변경 사항에 개별적으로 대응하는 게 가능합니다. 그러나, 이번 경우에는 개별적으로 대응하지 않고, 사각형의 스타일이 새로운 값에 따라 갱신될 수 있도록 단순히 <code>updateStyle()</code> 함수를 다시 호출합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">attributeChangedCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">,</span> newValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Custom square element attributes changed.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">updateStyle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>attributeChangedCallback()</code> 콜백이 특성이 변경되었을 때 발생되기 하기 위해서는, 해당 특성을 관찰해야만 합니다. 이 작업은 <code>static get observedAttributes()</code> 메서드를 사용자 정의 요소 클래스 내부에 명시함으로써 이루어집니다. 이 메서드는 관찰하기를 원하는 특성들의 이름을 포함하는 배열을 <code>return</code> 해야 합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">observedAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'l'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>이 예제에서 이 메서드는 생성자의 바로 위에 위치해 있습니다.</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>참고:</strong> <a href=\"https://github.com/mdn/web-components-examples/blob/master/life-cycle-callbacks/main.js\" class=\"external\" rel=\" noopener\">전체 JavaScript 소스 코드</a>를 확인해 보세요.</p>\n</div>"}},{"type":"prose","value":{"id":"트랜스파일러_대_클래스","title":"트랜스파일러 대 클래스","isH3":false,"content":"<p>ES2015 class는 레거시 브라우저를 목표로 하는 Babel 6 또는 TypeScript 에서 신뢰할만하게 트랜스파일될 수 없다는 점에 주의하세요. Babel 7을 사용하거나 Babel 6에 대해서 <a href=\"https://www.npmjs.com/package/babel-plugin-transform-builtin-classes\" class=\"external\" rel=\" noopener\">babel-plugin-transform-builtin-classes</a>를 사용할 수 있고, 레거시 대신에 TypeScript의 ES2015를 목표로 할 수 있습니다.</p>"}},{"type":"prose","value":{"id":"라이브러리","title":"라이브러리","isH3":false,"content":"<p>사용자 정의 요소를 생성할 때 추상화의 단계를 올리는 것을 목표로 하는 웹 컴포넌트를 기반으로 하는 몇 가지의 라이브러리들이 있습니다. 이러한 라이브러리에는 <a href=\"https://www.fast.design/docs/fast-element/getting-started\" class=\"external\" rel=\" noopener\">FASTElement</a>, <a href=\"https://github.com/devpunks/snuggsi\" class=\"external\" rel=\" noopener\">snuggsi</a>, <a href=\"https://x-tag.github.io/\" class=\"external\" rel=\" noopener\">X-Tag</a>, <a href=\"https://slimjs.com/\" class=\"external\" rel=\" noopener\">Slim.js</a>, <a href=\"https://lit.dev/\" class=\"external\" rel=\" noopener\">Lit</a>, <a href=\"https://www.htmlelements.com/\" class=\"external\" rel=\" noopener\">Smart</a>, <a href=\"https://stenciljs.com\" class=\"external\" rel=\" noopener\">Stencil</a>, <a href=\"https://github.com/WebReflection/hyperHTML-Element\" class=\"external\" rel=\" noopener\">hyperHTML-Element</a>, <a href=\"https://www.dataformsjs.com/\" class=\"external\" rel=\" noopener\">DataFormsJS</a>, <a href=\"https://tmorin.github.io/ceb/\" class=\"external\" rel=\" noopener\">Custom-Element-Builder</a>가 있습니다.</p>"}}],"toc":[{"text":"중요 내용 보기","id":"중요_내용_보기"},{"text":"몇 가지 간단한 예제 살펴보기","id":"몇_가지_간단한_예제_살펴보기"},{"text":"생명 주기 콜백 사용하기","id":"생명_주기_콜백_사용하기"},{"text":"트랜스파일러 대 클래스","id":"트랜스파일러_대_클래스"},{"text":"라이브러리","id":"라이브러리"}],"summary":"웹 컴포넌트 표준의 주요 기능 중 하나는 사용자 정의 페이지 기능을 제공하는 길고 중첩된 요소들의 묶음으로 만족하는 것보다는, HTML 페이지에서 기능을 캡슐화하는 사용자 정의 요소를 생성하는 능력입니다. 이 문서는 Custom Elements API의 사용을 소개합니다.","popularity":0.0004,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using custom elements","locale":"en-US","native":"English (US)"},{"title":"Usando elementos personalizados","locale":"es","native":"Español"},{"title":"Utilisation d'éléments personnalisés","locale":"fr","native":"Français"},{"title":"カスタム要素の使用","locale":"ja","native":"日本語"},{"title":"Usando custom elements","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Использование пользовательских элементов","locale":"ru","native":"Русский"},{"title":"使用 custom elements","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ko/web/web_components/using_custom_elements","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/web/web_components/using_custom_elements/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ko/docs/Web","title":"개발자를 위한 웹 기술"},{"uri":"/ko/docs/Web/Web_Components","title":"웹 컴포넌트"},{"uri":"/ko/docs/Web/Web_Components/Using_custom_elements","title":"사용자 정의 요소 사용하기"}],"pageTitle":"사용자 정의 요소 사용하기 - 웹 컴포넌트 | MDN","noIndexing":false}}