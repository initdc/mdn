{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Worker.postMessage()","mdn_url":"/ko/docs/Web/API/Worker/postMessage","locale":"ko","native":"한국어","sidebarHTML":"<ol><li><strong><a href=\"/ko/docs/Web/API/Web_Workers_API\">Web Workers API</a></strong></li><li><strong><a href=\"/ko/docs/Web/API/Worker\"><code>Worker</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Worker/Worker\"><code>Worker()</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><em><code>postMessage()</code></em></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Worker/terminate\"><code>terminate()</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Events</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Worker/error_event\"><code>error</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Worker/message_event\"><code>message</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Worker/messageerror_event\"><code>messageerror</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Inheritance:</summary><ol><li><a href=\"/ko/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Web Workers API</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DedicatedWorkerGlobalScope\"><code>DedicatedWorkerGlobalScope</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/ServiceWorker\"><code>ServiceWorker</code></a></li><li><a href=\"/ko/docs/Web/API/SharedWorker\"><code>SharedWorker</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SharedWorkerGlobalScope\"><code>SharedWorkerGlobalScope</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WorkerGlobalScope\"><code>WorkerGlobalScope</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WorkerLocation\"><code>WorkerLocation</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WorkerNavigator\"><code>WorkerNavigator</code> <small>(en-US)</small></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/ko/docs/Web/API/Worker\"><code>Worker</code></a> interface의 메서드, **<code>postMessage()</code>**는 <code>Worker</code> 자신의 내부 영역으로 메시지를 전달합니다. 이 메서드는 <code>Worker</code> 자신에게 보낼 하나의 매개변수를 받습니다. 매개변수로 들어갈 데이터는 순환 참조를 포함하는 <a href=\"/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">structured clone (en-US)</a> algorithm에 의해 다루어지는 JavaScript 객체를 포함에 어떤 값이든 들어갈 수 있습니다.</p>\n<p><code>Worker</code>는 정보를 다시 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DedicatedWorkerGlobalScope/postMessage\"><code>DedicatedWorkerGlobalScope.postMessage</code> <small>(en-US)</small></a> 메서드를 사용해 받은 정보를 산란시키는 스레드로 전달해줄 수 있다.</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>myWorker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>aMessage<span class=\"token punctuation\">,</span> transferList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"amessage\"><em>aMessage</em></dt>\n  <dd>worker로 전해 줄 객체; 이 매개변수는 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DedicatedWorkerGlobalScope/message_event\"><code>DedicatedWorkerGlobalScope.onmessage</code> <small>(en-US)</small></a> 이벤트 핸들러로 전해질 이벤트의 데이터 필드에 들어갈 것이다. 순환 참조를 포함하는 <a href=\"/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\" title=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/common-dom-interfaces.html#transferable\">structured clone</a> 알고리즘에 의해 다루어지는 JavaScript 객체 혹은 어떤 값이라도 이 매개변수에 들어갈 수 있다.</dd>\n  <dt id=\"transferlist\"><em>transferList</em> <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>An optional <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" title=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">array</a> of <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>Transferable</code></a> objects to transfer ownership of. If the ownership of an object is transferred, it becomes unusable (<em>neutered</em>) in the context it was sent from and becomes available only to the worker it was sent to.</dd>\n  <dd>Transferable objects are instances of classes like <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>ArrayBuffer</code></a>, <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MessagePort\"><code>MessagePort</code> <small>(en-US)</small></a> or <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ImageBitmap\"><code>ImageBitmap</code> <small>(en-US)</small></a> objects can be transferred. <code>null</code> is not an acceptable value for the <code>transferList</code>.</dd>\n</dl>"}},{"type":"prose","value":{"id":"returns","title":"Returns","isH3":true,"content":"<p>Void.</p>"}},{"type":"prose","value":{"id":"example","title":"Example","isH3":false,"content":"<p>The following code snippet shows the creation of a <a href=\"/ko/docs/Web/API/Worker\"><code>Worker</code></a> object using the <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Worker/Worker\"><code>Worker()</code> <small>(en-US)</small></a> constructor. When either of two form inputs (<code>first</code> and <code>second</code>) have their values changed, <code><a href=\"/en-US/docs/Web/API/HTMLElement/change_event\" title=\"Currently only available in English (US)\" class=\"only-in-en-us\">change (en-US)</a></code> events invoke <code>postMessage()</code> to send the value of both inputs to the current worker.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myWorker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token string\">'worker.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfirst<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onchange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  myWorker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>second<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Message posted to worker'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nsecond<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onchange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  myWorker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>second<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Message posted to worker'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>For a full example, see our<a href=\"https://github.com/mdn/simple-web-worker\" class=\"external\" rel=\" noopener\">Basic dedicated worker example</a> (<a href=\"https://mdn.github.io/simple-web-worker/\" class=\"external\" rel=\" noopener\">run dedicated worker</a>).</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>참고:</strong> <code>postMessage()</code> can only send a single object at once. As seen above, if you want to pass multiple values you can send an array.</p>\n</div>"}},{"type":"prose","value":{"id":"transfer_example","title":"Transfer Example","isH3":true,"content":"<p>This example shows a Firefox add-on that transfers an <code>ArrayBuffer</code> from the main thread to the <code>ChromeWorker</code>, and then the <code>ChromeWorker</code> transfers it back to the main thread.</p>\n<h4 id=\"main_thread_code\">Main thread code:</h4>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myWorker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChromeWorker</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>path <span class=\"token operator\">+</span> <span class=\"token string\">'myWorker.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">handleMessageFromWorker</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'incoming message from worker, msg:'</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>aTopic<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'do_sendMainArrBuff'</span><span class=\"token operator\">:</span>\n            <span class=\"token function\">sendMainArrBuff</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>aBuf<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token string\">'no aTopic on incoming message to ChromeWorker'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nmyWorker<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> handleMessageFromWorker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Ok lets create the buffer and send it</span>\n<span class=\"token keyword\">var</span> arrBuf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arrBuf.byteLength pre transfer:'</span><span class=\"token punctuation\">,</span> arrBuf<span class=\"token punctuation\">.</span>byteLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyWorker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">aTopic</span><span class=\"token operator\">:</span> <span class=\"token string\">'do_sendWorkerArrBuff'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">aBuf</span><span class=\"token operator\">:</span> arrBuf <span class=\"token comment\">// The array buffer that we passed to the transferrable section 3 lines below</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>\n        arrBuf <span class=\"token comment\">// The array buffer we created 9 lines above</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arrBuf.byteLength post transfer:'</span><span class=\"token punctuation\">,</span> arrBuf<span class=\"token punctuation\">.</span>byteLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"worker_code\">Worker code</h4>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>self<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>aTopic<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'do_sendWorkerArrBuff'</span><span class=\"token operator\">:</span>\n                <span class=\"token function\">sendWorkerArrBuff</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>aBuf<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token string\">'no aTopic on incoming message to ChromeWorker'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sendWorkerArrBuff</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">aBuf</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">'from worker, PRE send back aBuf.byteLength:'</span><span class=\"token punctuation\">,</span> aBuf<span class=\"token punctuation\">.</span>byteLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    self<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">aTopic</span><span class=\"token operator\">:</span><span class=\"token string\">'do_sendMainArrBuff'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">aBuf</span><span class=\"token operator\">:</span>aBuf<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>aBuf<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">'from worker, POST send back aBuf.byteLength:'</span><span class=\"token punctuation\">,</span> aBuf<span class=\"token punctuation\">.</span>byteLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"output_logged\">Output logged</h4>\n<pre class=\"notranslate\">arrBuf.byteLength pre transfer: 8                              bootstrap.js:40\narrBuf.byteLength post transfer: 0                             bootstrap.js:42\n\nfrom worker, PRE send back aBuf.byteLength: 8                  myWorker.js:5:2\n\nincoming message from worker, msg: message { ... }             bootstrap.js:20\ngot back buf in main thread, aBuf.byteLength: 8                bootstrap.js:12\n\nfrom worker, POST send back aBuf.byteLength: 0                 myWorker.js:7:2\n</pre>\n<p><code>byteLength</code> goes to 0 as it is transferred. To see a full working example of this Firefox demo add-on see here: <a href=\"https://github.com/Noitidart/ChromeWorker/tree/aca57d9cadc4e68af16201bdecbfb6f9a6f9ca6b\" class=\"external\" rel=\" noopener\">GitHub :: ChromeWorker - demo-transfer-arraybuffer</a></p>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://html.spec.whatwg.org/multipage/workers.html#dom-worker-postmessage-dev","title":"HTML Standard"}],"query":"api.Worker.postMessage"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.Worker.postMessage","dataURL":"/ko/docs/Web/API/Worker/postMessage/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li>The <a href=\"/ko/docs/Web/API/Worker\"><code>Worker</code></a> interface it belongs to.</li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Example","id":"example"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"Worker interface의 메서드, **postMessage()**는 Worker 자신의 내부 영역으로 메시지를 전달합니다. 이 메서드는 Worker 자신에게 보낼 하나의 매개변수를 받습니다. 매개변수로 들어갈 데이터는 순환 참조를 포함하는 structured clone (en-US) algorithm에 의해 다루어지는 JavaScript 객체를 포함에 어떤 값이든 들어갈 수 있습니다.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Worker.postMessage()","locale":"en-US","native":"English (US)"},{"title":"Worker.postMessage()","locale":"fr","native":"Français"},{"title":"Worker.postMessage()","locale":"ja","native":"日本語"},{"title":"Worker.postMessage()","locale":"ru","native":"Русский"},{"title":"Worker.postMessage()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ko/web/api/worker/postmessage","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/web/api/worker/postmessage/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ko/docs/Web","title":"개발자를 위한 웹 기술"},{"uri":"/ko/docs/Web/API","title":"Web API"},{"uri":"/ko/docs/Web/API/Worker","title":"Worker"},{"uri":"/ko/docs/Web/API/Worker/postMessage","title":"Worker.postMessage()"}],"pageTitle":"Worker.postMessage() - Web API | MDN","noIndexing":false}}