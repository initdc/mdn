{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"RTCPeerConnection.addTrack()","mdn_url":"/ko/docs/Web/API/RTCPeerConnection/addTrack","locale":"ko","native":"한국어","sidebarHTML":"<ol><li><strong><a href=\"/ko/docs/Web/API/WebRTC_API\">WebRTC API</a></strong></li><li><strong><a href=\"/ko/docs/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/ko/docs/Web/API/RTCPeerConnection/RTCPeerConnection\"><code>RTCPeerConnection()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/ko/docs/Web/API/RTCPeerConnection/canTrickleIceCandidates\"><code>canTrickleIceCandidates</code></a></li><li><a href=\"/ko/docs/Web/API/RTCPeerConnection/connectionState\"><code>connectionState</code></a></li><li><a href=\"/ko/docs/Web/API/RTCPeerConnection/currentLocalDescription\"><code>currentLocalDescription</code></a></li><li><a href=\"/ko/docs/Web/API/RTCPeerConnection/currentRemoteDescription\"><code>currentRemoteDescription</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/iceConnectionState\"><code>iceConnectionState</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/RTCPeerConnection/iceGatheringState\"><code>iceGatheringState</code></a></li><li><a href=\"/ko/docs/Web/API/RTCPeerConnection/localDescription\"><code>localDescription</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/peerIdentity\"><code>peerIdentity</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/pendingLocalDescription\"><code>pendingLocalDescription</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/pendingRemoteDescription\"><code>pendingRemoteDescription</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/remoteDescription\"><code>remoteDescription</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/sctp\"><code>sctp</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/signalingState\"><code>signalingState</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/ko/docs/Web/API/RTCPeerConnection/addIceCandidate\"><code>addIceCandidate()</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/addStream\"><code>addStream()</code> <small>(en-US)</small></a></li><li><em><code>addTrack()</code></em></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/addTransceiver\"><code>addTransceiver()</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/RTCPeerConnection/close\"><code>close()</code></a></li><li><a href=\"/ko/docs/Web/API/RTCPeerConnection/createAnswer\"><code>createAnswer()</code></a></li><li><a href=\"/ko/docs/Web/API/RTCPeerConnection/createDataChannel\"><code>createDataChannel()</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/createOffer\"><code>createOffer()</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/RTCPeerConnection/generateCertificate\"><code>generateCertificate() static function</code></a></li><li><a href=\"/ko/docs/Web/API/RTCPeerConnection/getConfiguration\"><code>getConfiguration()</code></a></li><li><a href=\"/ko/docs/Web/API/RTCPeerConnection/getIdentityAssertion\"><code>getIdentityAssertion()</code></a></li><li><a href=\"/ko/docs/Web/API/RTCPeerConnection/getReceivers\"><code>getReceivers()</code></a></li><li><a href=\"/ko/docs/Web/API/RTCPeerConnection/getSenders\"><code>getSenders()</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/getStats\"><code>getStats()</code> <small>(en-US)</small></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/getStreamById\"><code>getStreamById()</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/RTCPeerConnection/getTransceivers\"><code>getTransceivers()</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/removeStream\"><code>removeStream()</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/RTCPeerConnection/removeTrack\"><code>removeTrack()</code></a></li><li><a href=\"/ko/docs/Web/API/RTCPeerConnection/restartIce\"><code>restartIce()</code></a></li><li><a href=\"/ko/docs/Web/API/RTCPeerConnection/setConfiguration\"><code>setConfiguration()</code></a></li><li><a href=\"/ko/docs/Web/API/RTCPeerConnection/setIdentityProvider\"><code>setIdentityProvider()</code></a></li><li><a href=\"/ko/docs/Web/API/RTCPeerConnection/setLocalDescription\"><code>setLocalDescription()</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/setRemoteDescription\"><code>setRemoteDescription()</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Events</summary><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/addstream_event\"><code>addstream</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/RTCPeerConnection/connectionstatechange_event\"><code>connectionstatechange</code></a></li><li><a href=\"/ko/docs/Web/API/RTCPeerConnection/datachannel_event\"><code>datachannel</code></a></li><li><a href=\"/ko/docs/Web/API/RTCPeerConnection/icecandidate_event\"><code>icecandidate</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/icecandidateerror_event\"><code>icecandidateerror</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/iceconnectionstatechange_event\"><code>iceconnectionstatechange</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/RTCPeerConnection/icegatheringstatechange_event\"><code>icegatheringstatechange</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/negotiationneeded_event\"><code>negotiationneeded</code> <small>(en-US)</small></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/removestream_event\"><code>removestream</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/signalingstatechange_event\"><code>signalingstatechange</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/RTCPeerConnection/track_event\"><code>track</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Inheritance:</summary><ol><li><a href=\"/ko/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for WebRTC</summary><ol><li><a href=\"/ko/docs/Web/API/MediaDevices/getUserMedia\"><code>MediaDevices.getUserMedia()</code></a></li><li><a href=\"/ko/docs/Web/API/Navigator/mediaDevices\"><code>Navigator.mediaDevices</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCCertificate\"><code>RTCCertificate</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCDTMFSender\"><code>RTCDTMFSender</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCDTMFToneChangeEvent\"><code>RTCDTMFToneChangeEvent</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCDataChannel\"><code>RTCDataChannel</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/RTCDataChannelEvent\"><code>RTCDataChannelEvent</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCDtlsTransport\"><code>RTCDtlsTransport</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCErrorEvent\"><code>RTCErrorEvent</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/RTCIceCandidate\"><code>RTCIceCandidate</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCIceTransport\"><code>RTCIceTransport</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnectionIceErrorEvent\"><code>RTCPeerConnectionIceErrorEvent</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/RTCPeerConnectionIceEvent\"><code>RTCPeerConnectionIceEvent</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCRtpReceiver\"><code>RTCRtpReceiver</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCRtpSender\"><code>RTCRtpSender</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCRtpTransceiver\"><code>RTCRtpTransceiver</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCSctpTransport\"><code>RTCSctpTransport</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/RTCSessionDescription\"><code>RTCSessionDescription</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCStatsReport\"><code>RTCStatsReport</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCTrackEvent\"><code>RTCTrackEvent</code> <small>(en-US)</small></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/ko/docs/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a>의 메소드인 **<code>addTrack()</code>**은 다른 유저에게 전송될 트랙들의 묶음에 신규 미디어 트랙을 추가합니다.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>참고:</strong> <strong>참조:</strong> 연결 인터페이스에 트랙을 추가하게되면, <code><a href=\"/ko/docs/Web/Reference/Events/negotiationneeded\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">negotiationneeded</a></code> 이벤트를 발생시켜 renegotiation을 하게 만듭니다. 자세한 사항은 <a href=\"/en-US/docs/Web/API/WebRTC_API/Signaling_and_video_calling#starting_negotiation\">Starting negotiation</a> in <a href=\"/en-US/docs/Web/API/WebRTC_API/Signaling_and_video_calling\">Signaling and video calling</a> 를 참조하십시오.</p>\n</div>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>rtpSender <span class=\"token operator\">=</span> RTCPeerConnection<span class=\"token punctuation\">.</span><span class=\"token function\">addTrack</span><span class=\"token punctuation\">(</span>track<span class=\"token punctuation\">,</span> stream<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"매개변수","title":"매개변수","isH3":true,"content":"<dl>\n  <dt id=\"track\"><code>track</code></dt>\n  <dd>\n    <p>피어 연결에 추가될 미디어 트랙을 나타내는 <a href=\"/ko/docs/Web/API/MediaStreamTrack\"><code>MediaStreamTrack</code></a> 객체입니다.</p>\n  </dd>\n  <dt id=\"stream\"><code>stream...</code> <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>트랙이 추가 되어야하는 하나 혹은 여러개의 로컬 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaStream\"><code>MediaStream</code> <small>(en-US)</small></a> 객체입니다.</p>\n  </dd>\n</dl>\n<p>지정된 <code>track</code> 는 꼭 지정된 <code>stream</code>s의 일부가 아니여도 됩니다. <code>stream</code>s은 단지 연결을 받는 쪽에서 트랙을 그룹으로 묶고 동기화하는 방법입니다. 연결의 로컬 쪽에 존재하는 동일한 stream에 추가된 트랙들은 원격 쪽에서 같은 stream에 존재하게됩니다.</p>"}},{"type":"prose","value":{"id":"반환_값","title":"반환 값","isH3":true,"content":"<p><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCRtpSender\"><code>RTCRtpSender</code> <small>(en-US)</small></a> 객체는 미디어 데이터를 전송하기위해 사용됩니다.</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>참고:</strong> <strong>참조:</strong> 모든 RTCRtpSender는 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCRtpTransceiver\"><code>RTCRtpTransceiver</code> <small>(en-US)</small></a>를 구성하기 위해서 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCRtpReceiver\"><code>RTCRtpReceiver</code> <small>(en-US)</small></a>와 함께 짝을 이룹니다. 관련이 있는 리시버는 원격 유저가 리시버에 하나 혹은 여러개의 스트림을 추가하지 않는 이상 mute 상태입니다. mute 상태에서는 패킷을 전달 할 수 없습니다.</p>\n</div>"}},{"type":"prose","value":{"id":"예외처리","title":"예외처리","isH3":true,"content":"<dl>\n  <dt id=\"invalidaccesserror\"><code>InvalidAccessError</code></dt>\n  <dd>\n    <p>지정한 트랙 (혹은 모든 스트림)이 이미 <a href=\"/ko/docs/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a>의 일부임을 알려줍니다.</p>\n  </dd>\n  <dt id=\"invalidstateerror\"><code>InvalidStateError</code></dt>\n  <dd>\n    <p><a href=\"/ko/docs/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a>가 이미 종료되었음을 알려줍니다.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"사용법","title":"사용법","isH3":false,"content":""}},{"type":"prose","value":{"id":"여러개의_스트림에_트랙_추가하기","title":"여러개의 스트림에 트랙 추가하기","isH3":true,"content":"<p><code>addTrack()</code> 메소드는 <code>track</code>과 <code>streams</code>을 매개변수로 받습니다. <code>track</code> 매개변수를 정의한 다음에, 하나 혹은 여러개의 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaStream\"><code>MediaStream</code> <small>(en-US)</small></a> 객체를 지정해서 트랙을 어디에 추가 할지 지정이 가능합니다. 이때, 스트림이 아니라 트랙만 다른 유저에게 전달됩니다. 스트림은 각 유저별로 특정되어있기 때문에, 하나 혹은 여러개의 스트림을 지정한다는 것은 트랙을 받는 유저가 연결의 다른 쪽에 해당하는 스트림을 자동으로 생성할 것이라는 뜻입니다. 그리고나서 받은 트랙을 자동으로 해당 스트림에 추가하게 됩니다.</p>\n<h4 id=\"스트림이_없는_트랙\">스트림이 없는 트랙</h4>\n<p>스트림을 명시하지 않으면, 해당 트랙은 <strong>streamless</strong> 상태입니다. 트랙을 어느 스트림에 추가 할지는 원격유저가 결정하지만, 이대로 사용해도 문제는 없습니다. <strong>streamless</strong> 트랙은 <code>addTrack()</code>을 가장 손쉽게 사용하는 방법으로, 하나의 스트림만 필요한 아주 간단한 어플케이션을 만드는데 사용됩니다. 예를 들자면,오디오와 비디오 트랙이 존재하는 단일 스트림을 원격 유저와 공유하고 싶은 경우, 어떤 스트림에 무슨 트랙이 있는지 관리 할 필요 없이 트랜시버 (transceiver)가 처리하도록 맡길 수 있습니다.</p>\n<p>아래 예시는 <a href=\"/ko/docs/Web/API/MediaDevices/getUserMedia\" title=\"getUserMedia()\"><code>getUserMedia()</code></a>를 사용해서 유저의 카메라와 마이크에서 스트림을 가져오는 함수입니다. 그리고 각각의 트랙에 대한 스트림을 지정하지 않고, 스트림에서 피어 연결로 각 트랙을 추가합니다:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 비동기 함수 정의</span>\n<span class=\"token keyword\">async</span> <span class=\"token function\">openCall</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pc</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// getUserMedia는 비동기적으로 처리됨</span>\n  <span class=\"token keyword\">const</span> gumStream <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span>\n                          <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> track <span class=\"token keyword\">of</span> gumStream<span class=\"token punctuation\">.</span><span class=\"token function\">getTracks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 스트림을 따로 지정하지 않고, 트랙을 추가</span>\n    pc<span class=\"token punctuation\">.</span><span class=\"token function\">addTrack</span><span class=\"token punctuation\">(</span>track<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>위 함수의 결과로 트랙 묶음이 스트림 없이 원격 유저에게 전달됩니다. 모든 트랙들이 동일한 스트림에 추가된다 하더라도, 원격 유저의 <code><a href=\"/ko/docs/Web/Reference/Events/track\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">track</a></code>이벤트 핸들러가 각 트랙을 어느 스트림에 추가 할지를 결정합니다. <a href=\"/ko/docs/Web/API/RTCPeerConnection/track_event\" title=\"ontrack\"><code>ontrack</code></a> 핸들러는 아래와 같이 작성 될 수 있습니다:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> inboundStream <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\npc<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">ontrack</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">ev</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>streams <span class=\"token operator\">&amp;&amp;</span> ev<span class=\"token punctuation\">.</span>streams<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    videoElem<span class=\"token punctuation\">.</span>srcObject <span class=\"token operator\">=</span> ev<span class=\"token punctuation\">.</span>streams<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>inboundStream<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      inboundStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MediaStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      videoElem<span class=\"token punctuation\">.</span>srcObject <span class=\"token operator\">=</span> inboundStream<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    inboundStream<span class=\"token punctuation\">.</span><span class=\"token function\">addTrack</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>track<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>여기서 <code>track</code> 이벤트 핸들러는 스트림을 명시한 경우, 이 이벤트에서 명시한 첫 번째 스트림에 트랙을 추가합니다. 그렇지 않은 경우에는 <code>ontrack</code>이 처음 호출되는 순간에 신규 스트림이 생성되고 비디오 엘리먼트에 부착된 다음에서야 트랙이 신규 스트림에 추가됩니다. 이때부터 신규 랙이 해당 스트림에 추가됩니다.</p>\n<p>또한, 각각의 트랙을 받을 때 마다, 신규 스트림을 만들 수 있습니다:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>pc<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">ontrack</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">ev</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>streams <span class=\"token operator\">&amp;&amp;</span> ev<span class=\"token punctuation\">.</span>streams<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    videoElem<span class=\"token punctuation\">.</span>srcObject <span class=\"token operator\">=</span> ev<span class=\"token punctuation\">.</span>streams<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> inboundStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MediaStream</span><span class=\"token punctuation\">(</span>track<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    videoElem<span class=\"token punctuation\">.</span>srcObject <span class=\"token operator\">=</span> inboundStream<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"특정_스트림에_트랙_연동하기\">특정 스트림에 트랙 연동하기</h4>\n<p>스트림을 명시하고 <a href=\"/ko/docs/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a>가 스트림을 만들 수 있도록 허용하면, WebRTC 인프라에 의해 스트림의 트랙들이 자동으로 연동됩니다. 이는 트랜시버의 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCRtpTransceiver/direction\"><code>direction</code> <small>(en-US)</small></a>를 변경하거나, <a href=\"/ko/docs/Web/API/RTCPeerConnection/removeTrack\" title=\"removeTrack()\"><code>removeTrack()</code></a>를 사용해서 트랙을 멈추는 것도 포함합니다.</p>\n<p>예를 들어, 아래의 함수는 어플리케이션이 <a href=\"/ko/docs/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a>를 통해 미디어 장치의 카메라 및 마이크 입력을 원격 유저에게 스트리밍을 시작하도록 사용 될 수 있습니다:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">async</span> <span class=\"token function\">openCall</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pc</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> gumStream <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span>\n                          <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> track <span class=\"token keyword\">of</span> gumStream<span class=\"token punctuation\">.</span><span class=\"token function\">getTracks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    pc<span class=\"token punctuation\">.</span><span class=\"token function\">addTrack</span><span class=\"token punctuation\">(</span>track<span class=\"token punctuation\">,</span> gumStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>아래와 같이, 원격 유저는 <code><a href=\"/ko/docs/Web/Reference/Events/track\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">track</a></code> 이벤트 핸들러를 사용 할 수 있습니다:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>pc<span class=\"token punctuation\">.</span>ontrack <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">streams</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>stream<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=&gt;</span> videoElem<span class=\"token punctuation\">.</span>srcObject <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>위의 코든 연결 인터페이스에 이미 추가 되었던 트랙을 가지고 있는 현재 스트림에 비디오 엘리먼트 설정합니다.</p>"}},{"type":"prose","value":{"id":"재사용되는_senders","title":"재사용되는 senders","isH3":true,"content":"<p>이 메소드는 신규 <code>RTCRtpSender</code> 를 반환하거나, 아직 데이터를 송신하지 않은 이미 존재하던 호환 가능한 sender를 특정 조건아래 반환합니다. 호환성 및 재사용성이 있는 <code>RTCRtpSender</code> 인스턴스는 아래의 조건들을 만족해야합니다:</p>\n<ul>\n  <li>sender와 이미 연동된 트랙이 없어야합니다.</li>\n  <li>sender와 연동된 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCRtpTransceiver\"><code>RTCRtpTransceiver</code> <small>(en-US)</small></a>가 <a href=\"/ko/docs/Web/API/MediaStreamTrack\"><code>MediaStreamTrack</code></a>를 명시하는 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCRtpReceiver/track\"><code>track</code> <small>(en-US)</small></a> 속성을 가지고 있습니다. 여기서 <a href=\"/ko/docs/Web/API/MediaStreamTrack\"><code>MediaStreamTrack</code></a>의 <a href=\"/ko/docs/Web/API/MediaStreamTrack/kind\" title=\"kind\"><code>kind</code></a>는 <code>RTCPeerConnection.addTrack()</code>의 호출에서 발생하는 <code>track</code> 매개변수의 <code>kind</code>와 같습니다. 이 방법으로 트랜시버가 오디오랑 비디오를 동시에 처리하지 않고, 각각 처리하도록 보장 할 수 있습니다.</li>\n  <li><code>RTCRtpTransceiver</code>의 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCRtpTransceiver/stopped\"><code>stopped</code> <small>(en-US)</small></a> 속성이 <code>false</code> 입니다.</li>\n  <li><code>RTCRtpSender</code>가 데이터를 한 번도 보낸적이 없는 것으로 간주됩니다. 만약 트랜시버의 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCRtpTransceiver/currentDirection\"><code>currentDirection</code> <small>(en-US)</small></a>가 한 번이라도 <code>\"sendrecv\"</code> 혹은 <code>\"sendonly\"</code>였다면, sender는 재사용이 불가능합니다.</li>\n</ul>\n<p>위의 조건들을 모두 만족하게되면, sender가 재사용되어 이미 존재하던 <code>RTCRtpSender</code> 및 <code>RTCRtpTransceiver</code> 에 아래와 같은 변경사항이 적용됩니다:</p>\n<ul>\n  <li><code>RTCRtpSender</code>의 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCRtpSender/track\"><code>track</code> <small>(en-US)</small></a>가 지정된 트랙으로 설정됩니다.</li>\n  <li>이 메소드의 <code>stream...</code>에 전달된 스트림 리스트에 sender에 부착되어있던 스트림들이 설정됩니다.</li>\n  <li>부착된 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCRtpTransceiver\"><code>RTCRtpTransceiver</code> <small>(en-US)</small></a>의 <code>currentDirection</code>이 업데이트된 전송 정보를 포함합니다. 현재 값이 <code>\"recvonly\"</code>였다면, <code>\"sendrecv\"</code>로 변하게되고, 현재 값이 <code>\"inactive\"</code>면, <code>\"sendonly\"</code>로 변하게됩니다.</li>\n</ul>"}},{"type":"prose","value":{"id":"신규_senders","title":"신규 senders","isH3":true,"content":"<p>재사용가능한 sender가 없으면, 신규 sender가 생성됩니다. 신규로 생성되면, 꼭 있어야하는 관련된 객체들도 생성됩니다. 이 과정에서 다음과 같은 변화가 발생합니다:</p>\n<ul>\n  <li>신규 <code>RTCRtpSender</code>가 지정된 <code>track</code> 및 <code>stream</code>(s)과 함께 만들어집니다.</li>\n  <li>신규<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCRtpReceiver\"><code>RTCRtpReceiver</code> <small>(en-US)</small></a>가 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCRtpReceiver/track\"><code>track</code> <small>(en-US)</small></a> 속성으로 <a href=\"/ko/docs/Web/API/MediaStreamTrack\"><code>MediaStreamTrack</code></a> 가지도록 함께 만들어집니다. 이때, 트랙은 <code>addTrack()</code> 호출에서 매개변수로 지정된 트랙이 아닙니다. 이 트랙의 <a href=\"/ko/docs/Web/API/MediaStreamTrack/kind\" title=\"kind\"><code>kind</code></a>는 입력 매개변수로 제공된 트랙의 <code>kind</code>와 일치하도록 설정됩니다.</li>\n  <li>신규 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCRtpTransceiver\"><code>RTCRtpTransceiver</code> <small>(en-US)</small></a>가 생성되고, 신규 sender 및 receiver에 부착됩니다.</li>\n  <li>신규 transceiver의 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCRtpTransceiver/direction\"><code>direction</code> <small>(en-US)</small></a>는 <code>\"sendrecv\"</code>로 설정됩니다.</li>\n  <li>신규 transceiver는 <code>RTCPeerConnection</code>의 transceiver 세트에 추가됩니다.</li>\n</ul>"}},{"type":"prose","value":{"id":"예시","title":"예시","isH3":false,"content":"<p>아래의 코드는 <a href=\"/ko/docs/Web/API/WebRTC_API/Signaling_and_video_calling\">Signaling and video calling</a> 문서에서 가져온 코드입니다. 이 코드는 <code>handleVideoOfferMsg()</code>메소드에서 제공되는 것으로, offer 메세지가 원격 유저에서 수신되면 호출됩니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> mediaConstraints <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>            <span class=\"token comment\">// We want an audio track</span>\n  <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>             <span class=\"token comment\">// ...and we want a video track</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> desc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RTCSessionDescription</span><span class=\"token punctuation\">(</span>sdp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\npc<span class=\"token punctuation\">.</span><span class=\"token function\">setRemoteDescription</span><span class=\"token punctuation\">(</span>desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span>mediaConstraints<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">stream</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  previewElement<span class=\"token punctuation\">.</span>srcObject <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">;</span>\n\n  stream<span class=\"token punctuation\">.</span><span class=\"token function\">getTracks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">track</span> <span class=\"token operator\">=&gt;</span> pc<span class=\"token punctuation\">.</span><span class=\"token function\">addTrack</span><span class=\"token punctuation\">(</span>track<span class=\"token punctuation\">,</span> stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>위의 코드는 SDP를 원격 유저로부터 수신 받아서 신규 <a href=\"/ko/docs/Web/API/RTCSessionDescription\"><code>RTCSessionDescription</code></a>를 만들고 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/setRemoteDescription\"><code>setRemoteDescription()</code> <small>(en-US)</small></a>로 전달합니다. <code>pc.setRemoteDescription(desc)</code>의 실행이 성공하게되면, <a href=\"/ko/docs/Web/API/MediaDevices/getUserMedia\"><code>MediaDevices.getUserMedia()</code></a>를 사용해서 로컬 유저의 웹캠과 마이크에 대한접근 권한을 얻습니다. 앞의 과정이 성공하게되면, 스트림은 <a href=\"/ko/docs/Web/HTML/Element/Video\"><code>&lt;video&gt;</code></a> 엘리먼트를 위한 소스로 지정됩니다. 이 스트림은 <code>previewElement</code>변수를 통해 참조가 가능해집니다.</p>\n<p>마지막으로 피어 연결을 통헤 caller에게 로컬 비디오 전달을 시작합니다. 이 과정은 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaStream/getTracks\"><code>MediaStream.getTracks()</code> <small>(en-US)</small></a>에 의해 반환된 리스트를 iterate하고, 이들을 구성하는 <code>stream</code>과 함께 <code>addTrack()</code>에 전달되어 스트림에 각각의 트랙들을 추가합니다.</p>"}},{"type":"specifications","value":{"title":"명세","id":"명세","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/webrtc-pc/#dom-rtcpeerconnection-addtrack","title":"WebRTC 1.0: Real-Time Communication Between Browsers"}],"query":"api.RTCPeerConnection.addTrack"}},{"type":"browser_compatibility","value":{"title":"브라우저 호환성","id":"브라우저_호환성","isH3":false,"query":"api.RTCPeerConnection.addTrack","dataURL":"/ko/docs/Web/API/RTCPeerConnection/addTrack/bcd.json"}},{"type":"prose","value":{"id":"참조","title":"참조","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/WebRTC_API\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">WebRTC (en-US)</a></li>\n  <li><a href=\"/en-US/docs/Web/API/WebRTC_API/Intro_to_RTP\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Introduction to the Real-time Transport Protocol (RTP) (en-US)</a></li>\n  <li><a href=\"/ko/docs/Web/API/RTCPeerConnection/track_event\"><code>RTCPeerConnection.ontrack</code></a></li>\n  <li><code><a href=\"/ko/docs/Web/Reference/Events/track\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">track</a></code></li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"사용법","id":"사용법"},{"text":"예시","id":"예시"},{"text":"명세","id":"명세"},{"text":"브라우저 호환성","id":"브라우저_호환성"},{"text":"참조","id":"참조"}],"summary":"RTCPeerConnection의 메소드인 **addTrack()**은 다른 유저에게 전송될 트랙들의 묶음에 신규 미디어 트랙을 추가합니다.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"RTCPeerConnection.addTrack()","locale":"en-US","native":"English (US)"},{"title":"RTCPeerConnection.addTrack()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ko/web/api/rtcpeerconnection/addtrack","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/web/api/rtcpeerconnection/addtrack/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ko/docs/Web","title":"개발자를 위한 웹 기술"},{"uri":"/ko/docs/Web/API","title":"Web API"},{"uri":"/ko/docs/Web/API/RTCPeerConnection","title":"RTCPeerConnection"},{"uri":"/ko/docs/Web/API/RTCPeerConnection/addTrack","title":"RTCPeerConnection.addTrack()"}],"pageTitle":"RTCPeerConnection.addTrack() - Web API | MDN","noIndexing":false}}