{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Using channel messaging","mdn_url":"/ko/docs/Web/API/Channel_Messaging_API/Using_channel_messaging","locale":"ko","native":"한국어","sidebarHTML":"<ol><li><strong><a href=\"/ko/docs/Web/API/Channel_Messaging_API\">Channel Messaging API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Guides</summary><ol><li><a href=\"/ko/docs/Web/API/Channel_Messaging_API/Using_channel_messaging\">Using channel messaging</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Interfaces</summary><ol><li><a href=\"/ko/docs/Web/API/MessageChannel\"><code>MessageChannel</code></a></li><li><a href=\"/ko/docs/Web/API/MessagePort\"><code>MessagePort</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/ko/docs/Web/API/Channel_Messaging_API\">Channel Messaging API</a> 는 두 개의 독립적인 스크립트(예를 들면, 두 개의 IFrame, 또는 메인 다큐먼트와 IFrame, 또는 <a href=\"/ko/docs/Web/API/SharedWorker\"><code>SharedWorker</code></a>에 의한 두 개의 다큐먼트)를 각 포트를 가진 양방향 채널(또는 파이프)을 통해 서로 직접 통신할 수 있도록 해줍니다. 이 문서에서 이 기술을 사용하는 기본내용에 대해 살펴봅시다.</p><div class=\"notecard note\" id=\"sect1\">\n  <p><strong>주의:</strong> 이 기능은 <a href=\"/ko/docs/Web/API/Web_Workers_API\">Web Worker</a>에서 사용할 수 있습니다</p>\n</div>"}},{"type":"prose","value":{"id":"use_cases","title":"Use cases","isH3":false,"content":"<p>Channel messaging is mainly useful in cases where you've got a social site that embeds capabilities from other sites into its main interface via IFrames, such as games, address book, or an audio player with personalized music choices. When these act as standalone units, things are ok, but the difficulty comes when you want interaction between the main site and the IFrames, or the different IFrames. For example, what if you wanted to add a contact to the address book from the main site, add high scores from your game into your main profile, or add new background music choices from the audio player onto the game? Such things are not so easy using conventional web technology, because of the security models the web uses. You have to think about whether the origins trust one another, and how the messages are passed.</p>\n<p>Message channels on the other hand can provide a secure channel that a single data item can be sent down, from one browsing context to another, after which the channel is closed. The sending context asks the receiving context for the capability to send a single message. At the receiving end, this message is actioned as appropriate (for example as \"add a contact\", or \"share high scores\".)</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>참고:</strong> For more information and ideas, the <a href=\"https://html.spec.whatwg.org/multipage/comms.html#ports-as-the-basis-of-an-object-capability-model-on-the-web\" class=\"external\" rel=\" noopener\">Ports as the basis of an object-capability model on the Web</a> section of the spec is a useful read.</p>\n</div>"}},{"type":"prose","value":{"id":"simple_examples","title":"Simple examples","isH3":false,"content":"<p>To get your started, we have published a couple of demos on Github. First up, check out our <a href=\"https://github.com/mdn/dom-examples/tree/master/channel-messaging-basic\" class=\"external\" rel=\" noopener\">channel messaging basic demo</a> (<a href=\"https://mdn.github.io/dom-examples/channel-messaging-basic/\" class=\"external\" rel=\" noopener\">run it live too</a>), which shows a really simple single message transfer between a page and an embedded <a href=\"/ko/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code></a>. The embedded IFrame then sends a confirmation message back. Second, have a look at our <a href=\"https://github.com/mdn/dom-examples/tree/master/channel-messaging-multimessage\" class=\"external\" rel=\" noopener\">multimessaging demo</a> (<a href=\"https://mdn.github.io/dom-examples/channel-messaging-multimessage/\" class=\"external\" rel=\" noopener\">run this live</a>), which shows a slightly more complex setup that can send multiple messages between main page and IFrame.</p>\n<p>We'll be focusing on the latter example in this article. It looks like so:</p>\n<p>\n  <img src=\"https://mdn.mozillademos.org/files/10075/channel-messaging-demo.png\" alt=\"\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"creating_the_channel","title":"Creating the channel","isH3":false,"content":"<p>In the main page of the demo, we have a paragraph and a simple form with a text input for entering messages to be sent to an <a href=\"/ko/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code></a>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> para <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> textInput <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.message-box'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> button <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> ifr <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'iframe'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> otherWindow <span class=\"token operator\">=</span> ifr<span class=\"token punctuation\">.</span>contentWindow<span class=\"token punctuation\">;</span>\n\nifr<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span> iframeLoaded<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">iframeLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  button<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> channel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MessageChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    otherWindow<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>textInput<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>channel<span class=\"token punctuation\">.</span>port2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    channel<span class=\"token punctuation\">.</span>port1<span class=\"token punctuation\">.</span>onmessage <span class=\"token operator\">=</span> handleMessage<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">handleMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      para<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n      textInput<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>When the IFrame has loaded, we run an <code>iframeLoaded()</code> function containing an <code>onclick</code> handler for our button — when the button is clicked, we prevent the form submitting as normal, create a new message channel with the <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MessageChannel\"><code>MessageChannel.MessageChannel</code> <small>(en-US)</small></a> constructor, then send the value entered in our text input to the IFrame via the <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MessageChannel\"><code>MessageChannel</code> <small>(en-US)</small></a>. Let's explore how the <code>window.postMessage</code> line works in a bit more detail.</p>\n<p>For a start, here we are calling the <a href=\"/ko/docs/Web/API/Window/postMessage\"><code>window.postMessage</code></a> method — we are posting a message to the IFrame's window context. <a href=\"/ko/docs/Web/API/Window/postMessage\"><code>window.postMessage</code></a> has three arguments, unlike <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MessagePort/postMessage\"><code>MessagePort.postMessage</code> <small>(en-US)</small></a>, which only has two. The three arguments are:</p>\n<ol>\n  <li>The message being sent, in this case <code>textInput.value</code>.</li>\n  <li>The origin the message is to be sent to. * means \"any origin\".</li>\n  <li>An object, the ownership of which is transferred to the receiving browsing context. In this case, we are transferring <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MessageChannel/port2\"><code>MessageChannel.port2</code> <small>(en-US)</small></a> to the IFrame, so it can be used to receive the message from the main page.</li>\n</ol>\n<p>At the bottom of the <code>iframeLoaded()</code> function there is a <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MessagePort/message_event\"><code>MessagePort.onmessage</code> <small>(en-US)</small></a> handler, but we'll get to that later.</p>"}},{"type":"prose","value":{"id":"receiving_the_port_and_message_in_the_iframe","title":"Receiving the port and message in the IFrame","isH3":false,"content":"<p>Over in the IFrame, we have the following JavaScript:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> listItem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  listItem<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n  list<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>listItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  e<span class=\"token punctuation\">.</span>ports<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Message received by IFrame: \"'</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>data <span class=\"token operator\">+</span> <span class=\"token string\">'\"'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>The entirety of the code is wrapped in a <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>window.onmessage</code></a> handler, which runs when the message is received from the main page (via its <code>postMessage()</code>.) First we create a list item and insert it in the unordered list, setting the <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>Node.textContent</code></a> of the list item equal to the event's <code>data</code> attribute (this contains the actual message).</p>\n<p>Next, we post a confirmation message back to the main page via the message channel, using <code>e.ports[0].postMessage()</code>. How does this work? Earlier we transferred <code>port2</code> over to the IFrame — this is accessible in the event's <code>ports</code> attribute (array position <code>[0]</code>). We call <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MessagePort/postMessage\"><code>MessagePort.postMessage</code> <small>(en-US)</small></a> on this port — since <code>port2</code> is being controlled by the IFrame, and it is joined to port1 by the message channel, the specified message will be sent back to the main page.</p>"}},{"type":"prose","value":{"id":"receiving_the_confirmation_in_the_main_page","title":"Receiving the confirmation in the main page","isH3":false,"content":"<p>Returning to the main page, let's now look at the onmessage handler at the bottom of the <code>iframeLoaded()</code> function:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>channel<span class=\"token punctuation\">.</span>port1<span class=\"token punctuation\">.</span>onmessage <span class=\"token operator\">=</span> handleMessage<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">handleMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  para<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n  textInput<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Here we are setting <code>port1</code>'s <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MessagePort/message_event\"><code>MessagePort.onmessage</code> <small>(en-US)</small></a> handler equal to the <code>handleMessage()</code> function — when a message is received back from the IFrame confirming that the original message was received successfully, this simply outputs the confirmation to a paragraph and empties the text input ready for the next message to be sent.</p>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"query":"api.MessageChannel,api.MessagePort","specifications":[]}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"data":null,"query":"api.MessageChannel,api.MessagePort","browsers":null}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/ko/docs/Web/API/Channel_Messaging_API\">Channel Messaging API</a></li>\n  <li><a href=\"/ko/docs/Web/API/Web_Workers_API\">Web Workers API</a></li>\n  <li><a href=\"/en-US/docs/Web/API/Broadcast_Channel_API\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Broadcast Channel API (en-US)</a></li>\n</ul>"}}],"toc":[{"text":"Use cases","id":"use_cases"},{"text":"Simple examples","id":"simple_examples"},{"text":"Creating the channel","id":"creating_the_channel"},{"text":"Receiving the port and message in the IFrame","id":"receiving_the_port_and_message_in_the_iframe"},{"text":"Receiving the confirmation in the main page","id":"receiving_the_confirmation_in_the_main_page"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"Channel Messaging API 는 두 개의 독립적인 스크립트(예를 들면, 두 개의 IFrame, 또는 메인 다큐먼트와 IFrame, 또는 SharedWorker에 의한 두 개의 다큐먼트)를 각 포트를 가진 양방향 채널(또는 파이프)을 통해 서로 직접 통신할 수 있도록 해줍니다. 이 문서에서 이 기술을 사용하는 기본내용에 대해 살펴봅시다.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using channel messaging","locale":"en-US","native":"English (US)"},{"title":"チャンネルメッセージングの使用","locale":"ja","native":"日本語"},{"title":"使用 channel messaging","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ko/web/api/channel_messaging_api/using_channel_messaging","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/web/api/channel_messaging_api/using_channel_messaging/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ko/docs/Web","title":"개발자를 위한 웹 기술"},{"uri":"/ko/docs/Web/API","title":"Web API"},{"uri":"/ko/docs/Web/API/Channel_Messaging_API","title":"Channel Messaging API"},{"uri":"/ko/docs/Web/API/Channel_Messaging_API/Using_channel_messaging","title":"Using channel messaging"}],"pageTitle":"Using channel messaging - Web API | MDN","noIndexing":false}}