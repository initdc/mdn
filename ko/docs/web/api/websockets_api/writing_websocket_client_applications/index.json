{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"WebSocket을 이용하여 클라이언트 애플리케이션 작성하기","mdn_url":"/ko/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications","locale":"ko","native":"한국어","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>WebSocket은 ws 프로토콜을 기반으로 클라이언트와 서버 사이에 지속적인 완전 양방향 연결 스트림을 만들어 주는 기술입니다. 일반적인 웹소켓 클라이언트는 사용자의 브라우저일 것이지만, 그렇다고 해서 이 프로토콜이 플랫폼에 종속적이지는 않습니다.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>참고:</strong> 우리에게는 작동하는 chat/server 시스템 예제 코드 조각이 있습니다. 이는 우리의 인프라가 WebSocket 예제들을 제대로 호스팅할 수 있는 환경이 되면 공유할 것입니다.</p>\n</div><div class=\"notecard note\" id=\"sect2\">\n  <p><strong>주의:</strong> 이 기능은 <a href=\"/ko/docs/Web/API/Web_Workers_API\">Web Worker</a>에서 사용할 수 있습니다</p>\n</div>"}},{"type":"prose","value":{"id":"websocket_객체_생성하기","title":"WebSocket 객체 생성하기","isH3":false,"content":"<p>WebSocket 프로토콜을 사용하여 통신하기 위해서는 <a href=\"/en-US/WebSockets/WebSockets_reference/WebSocket\"><code>WebSocket</code></a>객체를 생성해야 합니다. 이 객체는 자동으로 서버로의 연결을 열려고 할 것입니다.</p>\n<p>WebSocket 생성자는 하나의 필수 파라미터와 하나의 선택 파라미터를 받습니다.</p>\n<pre class=\"notranslate\">WebSocket WebSocket(\n  in DOMString url,\n  in optional DOMString protocols\n);\n</pre>\n<dl>\n  <dt id=\"url\"><code>url</code></dt>\n  <dd>\n    <p>연결할 URL으로, 이것은 WebSocket 서버가 응답할 URL이어야 합니다.</p>\n  </dd>\n  <dt id=\"protocols\"><code>protocols</code> <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>하나의 프로토콜 문자열, 또는 프로토콜 문자열의 배열입니다. 이 문자열들은 서브 프로토콜을 지정하는데 사용되어, 하나의 서버가 여러 개의 WebSocket 서브 프로토콜을 구현할 수 있도록 해줍니다. 예를 들어, 하나의 서버가 처리하는 상호작용이 지정된 <code>protocols</code>에 따라 달라지도록 할 수 있습니다. 만약 프로토콜 문자열을 지정하지 않으면 빈 문자열을 넣은 것으로 간주됩니다.</p>\n  </dd>\n</dl>\n<p>생성자는 예외를 발생시킬 수 있습니다:</p>\n<dl>\n  <dt id=\"security_err\"><code>SECURITY_ERR</code></dt>\n  <dd>\n    <p>접속을 시도하고 있는 포트가 차단되었습니다.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"연결_에러","title":"연결 에러","isH3":true,"content":"<p>만약 연결 시도 중 에러가 발생하면, 먼저 \"error\"란 이름의 이벤트가 <a href=\"/en-US/WebSockets/WebSockets_reference/WebSocket\"><code>WebSocket</code></a> 오브젝트로 전달되고, 그로 인해 <code>onerror</code> 핸들러가 실행됩니다. 그 후에 연결이 종료되는 이유를 가리키는 <a href=\"/en-US/WebSockets/WebSockets_reference/CloseEvent\"><code>CloseEvent</code></a> 이벤트가 <a href=\"/en-US/WebSockets/WebSockets_reference/WebSocket\"><code>WebSocket</code></a> 오브젝트로 전달되고, 그로 인해 <code>onclose</code> 핸들러가 실행됩니다.</p>\n<p>Firefox 11부터는 보통 에러 메세지에 대한 설명이 Mozillia 플랫폼의 콘솔에 표시되며, <a href=\"/en-US/WebSockets/WebSockets_reference/CloseEvent\"><code>CloseEvent</code></a>로부터는 <a href=\"https://tools.ietf.org/html/rfc6455#section-7.4\" class=\"external\" rel=\" noopener\">RFC 6455, Section 7.4</a>에 정의되어 있는 연결 종료 코드를 받게 됩니다.</p>"}},{"type":"prose","value":{"id":"예제","title":"예제","isH3":true,"content":"<p>이 간단한 예제는 새 웹소켓 오브젝트를 생성하여 <code>ws://www.example.com/socketserver</code> 서버에 접속하는것을 보여줍니다. 이 예제에서는 커스텀 프로토콜인 \"protocolOne\" 을 리퀘스트에 같이 지정합니다. (이 프로토콜을 지정하는 부분은 생략될 수 있습니다.)</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> exampleSocket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ws://www.example.com/socketserver\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"protocolOne\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>반환된 <code>exampleSocket</code> 오브젝트의 <code>exampleSocket</code>. <code>readyState</code> 값은 <code>CONNECTING</code> 입니다. <code>readyState</code> 값은 연결이 수립되어 데이터가 전송 가능한 상태가 되면 <code>OPEN</code> 으로 변경됩니다.</p>\n<p>만약 여러개의 프로토콜을 유연하게 대응할 수 있는 구조를 가지고 있다면, 연결 시에 배열을 통해 프로토콜의 목록을 지정할 수 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> exampleSocket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ws://www.example.com/socketserver\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"protocolOne\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"protocolTwo\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>연결이 수립되면(<code>readyState</code> 가 <code>OPEN</code> 이 되었을 때<code>), exampleSocket.protocol</code> 값을 조사하여 서버가 어떤 프로토콜을 선택했는지 알아낼 수 있습니다.</p>\n<p>위의 예제에서 ws 는 http 를 대체합니다. 비슷하게 wss 는 https 를 대체합니다. 웹소켓 연결은 HTTP 업그레이드 메카니즘에 의해 수행되기 때문에 HTTP 서버 주소 지정에 대한 프로토콜 업그레이드 요청은 암시적입니다. (<code>ws://www.example.com</code> 또는 <code>wss://www.example.com</code>. 같이)</p>"}},{"type":"prose","value":{"id":"서버에_데이터_전송하기","title":"서버에 데이터 전송하기","isH3":false,"content":"<p>한번 연결이 수립되면 이제부터는 서버로 데이터를 전송할 수 있습니다. 이것을 하기 위해서는 단순히 <code>WebSocket</code> 오브젝트의 <a href=\"/en-US/WebSockets/WebSockets_reference/WebSocket#send()\" title=\"en/WebSockets/WebSockets reference/WebSocket#send()\"><code>send()</code></a> 호출하여 보내고 싶은 메세지를 지정하기만 하면 됩니다.:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>exampleSocket<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Here's some text that the server is urgently awaiting!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>보낼 수 있는 데이터는 String , <a href=\"/ko/docs/Web/API/Blob\"><code>Blob</code></a>, 또는 <code>ArrayBuffer</code> 입니다.</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>참고:</strong> 버전 11 아래의 파이어폭스는 String 데이터 전송만을 지원합니다.</p>\n</div>\n<p>연결을 맺는것은 비동기 작업이고 실패하기 쉬운 작업이기 때문에, WebSocket 오브젝트를 생성하자마자 <code>send()</code> 로 데이터 전송을 시도하는것은 성공하지 않을 가능성이 있습니다. 우리는 연결이 수립된 이후에만 데이터를 전송하도록 하기 위해 <code>onopen</code> 핸들러를 정의하고, 이 위에서 작업합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>exampleSocket<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onopen</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  exampleSocket<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Here's some text that the server is urgently awaiting!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"데이터_전송에_json_사용하기","title":"데이터 전송에 JSON 사용하기","isH3":true,"content":"<p><a href=\"/en-US/JSON\">JSON</a> 을 사용하면 서버에 복잡한 데이터를 편리하게 보낼 수 있습니다. 예를 들어, 채팅 프로그램이 서버와 JSON으로 캡슐화된 패킷 데이터를 주고받는 프로토콜을 구현한것을 상상해 볼 수 있습니다.:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Send text to all users through the server</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sendText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Construct a msg object containing the data the server needs to process the message from the chat client.</span>\n  <span class=\"token keyword\">var</span> msg <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span>   clientID<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Send the msg object as a JSON-formatted string.</span>\n  exampleSocket<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Blank the text input element, ready to receive the next line of text from the user.</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"서버로부터_데이터_수신하기","title":"서버로부터 데이터 수신하기","isH3":false,"content":"<p>WebSockets는 event-driven API 입니다; 메세지가 수신되면 \"message\" 이벤트가 <code>onmessage</code> 함수로 전달되게 됩니다. 아래와 같은 코드를 작성하여 수신되는 데이터를 받아볼 수 있습니다.:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>exampleSocket<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"json_오브젝트를_받아서_처리하기","title":"JSON 오브젝트를 받아서 처리하기","isH3":true,"content":"<p>상단의 <a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0_%EC%A0%84%EC%86%A1%EC%97%90_json_%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">데이터 전송에 JSON 사용하기</a> 에서 작업한 코드와 연관되는 클라이언트를 생각해 봅시다. 클라이언트에서 받을 수 있는 패킷들의 목록은 다음과 같을 것 입니다.:</p>\n<ul>\n  <li>로그인 핸드쉐이크</li>\n  <li>메세지 텍스트</li>\n  <li>유저 목록 업데이트</li>\n</ul>\n<p>위의 메세지들을 받아서 처리하는 코드는 아래와 같을 것 입니다.:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>exampleSocket<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chatbox\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>contentDocument<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> msg <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> time <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> timeStr <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span>\n      clientID <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"username\"</span><span class=\"token operator\">:</span>\n      text <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;b&gt;User &lt;em&gt;\"</span> <span class=\"token operator\">+</span> msg<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;/em&gt; signed in at \"</span> <span class=\"token operator\">+</span> timeStr <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;/b&gt;&lt;br&gt;\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"message\"</span><span class=\"token operator\">:</span>\n      text <span class=\"token operator\">=</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">+</span> timeStr <span class=\"token operator\">+</span> <span class=\"token string\">\") &lt;b&gt;\"</span> <span class=\"token operator\">+</span> msg<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;/b&gt;: \"</span> <span class=\"token operator\">+</span> msg<span class=\"token punctuation\">.</span>text <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;br&gt;\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"rejectusername\"</span><span class=\"token operator\">:</span>\n      text <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;b&gt;Your username has been set to &lt;em&gt;\"</span> <span class=\"token operator\">+</span> msg<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;/em&gt; because the name you chose is in use.&lt;/b&gt;&lt;br&gt;\"</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"userlist\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">var</span> ul <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> msg<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ul <span class=\"token operator\">+=</span> msg<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;br&gt;\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userlistbox\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> ul<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    f<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chatbox\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>contentWindow<span class=\"token punctuation\">.</span><span class=\"token function\">scrollByPages</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>여기서 우리는 <a href=\"/en-US/JavaScript/Reference/Global_Objects/JSON/parse\"><code>JSON.parse()</code></a> 를 통해 JSON 오브젝트를 자바스크립트 오브젝트로 변환합니다. 그 다음 콘텐츠에 따라 분기하고 처리하는 로직을 가집니다.</p>"}},{"type":"prose","value":{"id":"text_data_format","title":"Text data format","isH3":true,"content":"<p>웹소켓을 통해 전달되는 텍스트들은 UTF-8 포멧을 가집니다.</p>\n<p>Gecko 9.0 (Firefox 9.0 / Thunderbird 9.0 / SeaMonkey 2.6) 먼저 버전들은 유효한 UTF-8 텍스트가 아닌 문자가 들어올 경우 연결이 종료되었습니다. 지금은 이 값들을 정상적으로 허용합니다.</p>"}},{"type":"prose","value":{"id":"연결을_종료하기","title":"연결을 종료하기","isH3":false,"content":"<p><code>웹 소켓 사용을 마쳤다면 close() 메소드를 호출해 연결을 종료합니다.</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>exampleSocket<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>연결을 닫아버리기 전에 <code>bufferedAmount</code> 어트리뷰트를 조사하여 아직 네트워크에 전달되지 않은 데이터가 있는지 검사하는것도 좋은 방법입니다.</p>"}},{"type":"prose","value":{"id":"보안에_대한_고려_사항","title":"보안에 대한 고려 사항","isH3":false,"content":"<p>웹소켓은 혼합된 연결 환경에서 이용되어서는안됩니다. 예를들어 HTTPS를 이용해 로드된 페이지에서 non-secure 웹소켓 연결을 수립하는것(또는 반대) 처럼 말입니다. 몇몇 브라우저들은 이를 강제로 금지하고 있습니다. 파이어폭스 버전 8이상도 이를 금지합니다.</p>"}}],"toc":[{"text":"WebSocket 객체 생성하기","id":"websocket_객체_생성하기"},{"text":"서버에 데이터 전송하기","id":"서버에_데이터_전송하기"},{"text":"서버로부터 데이터 수신하기","id":"서버로부터_데이터_수신하기"},{"text":"연결을 종료하기","id":"연결을_종료하기"},{"text":"보안에 대한 고려 사항","id":"보안에_대한_고려_사항"}],"summary":"WebSocket은 ws 프로토콜을 기반으로 클라이언트와 서버 사이에 지속적인 완전 양방향 연결 스트림을 만들어 주는 기술입니다. 일반적인 웹소켓 클라이언트는 사용자의 브라우저일 것이지만, 그렇다고 해서 이 프로토콜이 플랫폼에 종속적이지는 않습니다.","popularity":0.0016,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Writing WebSocket client applications","locale":"en-US","native":"English (US)"},{"title":"Escribiendo aplicaciones con WebSockets","locale":"es","native":"Español"},{"title":"Ecrire des applications client WebSocket","locale":"fr","native":"Français"},{"title":"WebSocket クライアントアプリケーションの記述","locale":"ja","native":"日本語"},{"title":"Escrevendo aplicações cliente WebSocket","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Написание клиентских приложений с помощью веб-сокетов","locale":"ru","native":"Русский"},{"title":"编写 WebSocket 客户端应用","locale":"zh-CN","native":"中文 (简体)"},{"title":"製作 WebSocket 客戶端應用程式","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ko/web/api/websockets_api/writing_websocket_client_applications","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/web/api/websockets_api/writing_websocket_client_applications/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ko/docs/Web","title":"개발자를 위한 웹 기술"},{"uri":"/ko/docs/Web/API","title":"Web API"},{"uri":"/ko/docs/Web/API/WebSockets_API","title":"웹 소켓"},{"uri":"/ko/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications","title":"WebSocket을 이용하여 클라이언트 애플리케이션 작성하기"}],"pageTitle":"WebSocket을 이용하여 클라이언트 애플리케이션 작성하기 - Web API | MDN","noIndexing":false}}