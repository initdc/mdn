{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"AudioBuffer","mdn_url":"/ko/docs/Web/API/AudioBuffer","locale":"ko","native":"한국어","sidebarHTML":"<ol><li><strong><a href=\"/ko/docs/Web/API/Web_Audio_API\">Web Audio API</a></strong></li><li><strong><a href=\"/ko/docs/Web/API/AudioBuffer\"><code>AudioBuffer</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioBuffer/AudioBuffer\"><code>AudioBuffer()</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioBuffer/duration\"><code>duration</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioBuffer/length\"><code>length</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioBuffer/numberOfChannels\"><code>numberOfChannels</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioBuffer/sampleRate\"><code>sampleRate</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioBuffer/copyFromChannel\"><code>copyFromChannel()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioBuffer/copyToChannel\"><code>copyToChannel()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioBuffer/getChannelData\"><code>getChannelData()</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Web Audio API</summary><ol><li><a href=\"/ko/docs/Web/API/AnalyserNode\"><code>AnalyserNode</code></a></li><li><a href=\"/ko/docs/Web/API/AudioBufferSourceNode\"><code>AudioBufferSourceNode</code></a></li><li><a href=\"/ko/docs/Web/API/AudioContext\"><code>AudioContext</code></a></li><li><a href=\"/ko/docs/Web/API/AudioDestinationNode\"><code>AudioDestinationNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioListener\"><code>AudioListener</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/AudioNode\"><code>AudioNode</code></a></li><li><a href=\"/ko/docs/Web/API/AudioParam\"><code>AudioParam</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioProcessingEvent\"><code>AudioProcessingEvent</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/AudioScheduledSourceNode\"><code>AudioScheduledSourceNode</code></a></li><li><a href=\"/ko/docs/Web/API/AudioWorklet\"><code>AudioWorklet</code></a></li><li><a href=\"/ko/docs/Web/API/AudioWorkletGlobalScope\"><code>AudioWorkletGlobalScope</code></a></li><li><a href=\"/ko/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a></li><li><a href=\"/ko/docs/Web/API/AudioWorkletProcessor\"><code>AudioWorkletProcessor</code></a></li><li><a href=\"/ko/docs/Web/API/BaseAudioContext\"><code>BaseAudioContext</code></a></li><li><a href=\"/ko/docs/Web/API/BiquadFilterNode\"><code>BiquadFilterNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ChannelMergerNode\"><code>ChannelMergerNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ChannelSplitterNode\"><code>ChannelSplitterNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ConstantSourceNode\"><code>ConstantSourceNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ConvolverNode\"><code>ConvolverNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DelayNode\"><code>DelayNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DynamicsCompressorNode\"><code>DynamicsCompressorNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/GainNode\"><code>GainNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IIRFilterNode\"><code>IIRFilterNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaElementAudioSourceNode\"><code>MediaElementAudioSourceNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaStreamAudioDestinationNode\"><code>MediaStreamAudioDestinationNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaStreamAudioSourceNode\"><code>MediaStreamAudioSourceNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OfflineAudioCompletionEvent\"><code>OfflineAudioCompletionEvent</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/OfflineAudioContext\"><code>OfflineAudioContext</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OscillatorNode\"><code>OscillatorNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PannerNode\"><code>PannerNode</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/PeriodicWave\"><code>PeriodicWave</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/StereoPannerNode\"><code>StereoPannerNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WaveShaperNode\"><code>WaveShaperNode</code> <small>(en-US)</small></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>AudioBuffer</code></strong> 인터페이스는 메모리에 상주하는 짧은 오디오 에셋을 나타내는데, 이는 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/BaseAudioContext/decodeAudioData\"><code>AudioContext.decodeAudioData()</code> <small>(en-US)</small></a> 메서드를 사용하여 오디오 파일로부터 생성되거나, <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/BaseAudioContext/createBuffer\"><code>AudioContext.createBuffer()</code> <small>(en-US)</small></a>를 사용하여 가공되지 않은(raw) 데이터로부터 생성될 수 있습니다. 한 번 AudioBuffer에 입력되고 나면, 이 오디오는 <a href=\"/ko/docs/Web/API/AudioBufferSourceNode\"><code>AudioBufferSourceNode</code></a>에 전달됨으로써 재생될 수 있습니다.</p>\n<p>이 유형의 객체는 작은 오디오 스니펫을 붙잡기 위해 설계되었고, 보통 45초보다 작습니다. 더 긴 사운드에 대해서는, <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaElementAudioSourceNode\"><code>MediaElementAudioSourceNode</code> <small>(en-US)</small></a>를 구현하는 객체가 더욱 적합합니다. 버퍼는 데이터를 다음의 포맷으로 포함합니다. non-interleaved IEEE754 32비트 선형 PCM이며, 명목상의 범위는 <code>-1</code> 과 <code>+1</code> 사이입니다. 즉, 32비트 부동 소수점 버퍼이고, 각 샘플은 -1.0과 1.0사이에 있습니다. 만약 <a href=\"/ko/docs/Web/API/AudioBuffer\" aria-current=\"page\"><code>AudioBuffer</code></a>가 다수의 채널을 가지고 있다면, 이 채널들은 별도의 버퍼에 저장됩니다.</p>"}},{"type":"prose","value":{"id":"생성자","title":"생성자","isH3":false,"content":"<dl>\n  <dt id=\"audiobuffer_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioBuffer/AudioBuffer\"><code>AudioBuffer()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>새로운 <code>AudioBuffer</code> 객체 인스턴스를 생성하고 반환합니다.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"속성","title":"속성","isH3":false,"content":"<dl>\n  <dt id=\"audiobuffer.samplerate_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioBuffer/sampleRate\"><code>AudioBuffer.sampleRate</code> <small>(en-US)</small></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>버퍼에 저장된 PCM 데이터의 샘플 레이트를 초당 샘플로 나타내는 float을 반환합니다.</p>\n  </dd>\n  <dt id=\"audiobuffer.length_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioBuffer/length\"><code>AudioBuffer.length</code> <small>(en-US)</small></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>버퍼에 저장된 PCM 데이터의 길이를 샘플 프레임으로 나타내는 integer를 반환합니다.</p>\n  </dd>\n  <dt id=\"audiobuffer.duration_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioBuffer/duration\"><code>AudioBuffer.duration</code> <small>(en-US)</small></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>버퍼 내에 저장된 PCM 데이터의 재생 길이를 초로 나타내는 double을 반환합니다.</p>\n  </dd>\n  <dt id=\"audiobuffer.numberofchannels_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioBuffer/numberOfChannels\"><code>AudioBuffer.numberOfChannels</code> <small>(en-US)</small></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>버퍼 내에 저장된 PCM 데이터에 의해 기술되는 개별 오디오 채널의 수를 나타내는 integer를 반환합니다.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"메서드","title":"메서드","isH3":false,"content":"<dl>\n  <dt id=\"audiobuffer.getchanneldata_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioBuffer/getChannelData\"><code>AudioBuffer.getChannelData()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>채널과 연관된 PCM 데이터를 포함하고 있는 <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>Float32Array</code></a>를 반환하는데, 이 채널은 <code>channel</code> 매개변수에 의해 정의됩니다 (<code>0</code> 은 첫번째 채널을 나타냅니다).</p>\n  </dd>\n  <dt id=\"audiobuffer.copyfromchannel_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioBuffer/copyFromChannel\"><code>AudioBuffer.copyFromChannel()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p><code>AudioBuffer</code> 의 명시된 채널로부터 <code>destination</code> 배열에 샘플을 복제합니다.</p>\n  </dd>\n  <dt id=\"audiobuffer.copytochannel_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioBuffer/copyToChannel\"><code>AudioBuffer.copyToChannel()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p><code>source</code> 배열로부터, <code>AudioBuffer</code> 의 명시된 채널에 샘플을 복제합니다.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"예제","title":"예제","isH3":false,"content":"<p>다음의 간단한 예제는 어떻게 <code>AudioBuffer</code> 를 생성하고 무작위 백색소음으로 <code>AudioBuffer</code> 를 채우는지 보여줍니다. 전체 소스 코드는 <a href=\"https://github.com/mdn/webaudio-examples\" class=\"external\" rel=\" noopener\">webaudio-examples</a> 레포지토리에서 찾을 수 있고, <a href=\"https://mdn.github.io/webaudio-examples/audio-buffer/\" class=\"external\" rel=\" noopener\">작동 예제</a>도 볼 수 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> audioCtx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>AudioContext <span class=\"token operator\">||</span> window<span class=\"token punctuation\">.</span>webkitAudioContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// AudioContext의 샘플 레이트를 가지는 빈 3초짜리 스테레오 버퍼를 생성합니다.</span>\n<span class=\"token keyword\">var</span> myArrayBuffer <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> audioCtx<span class=\"token punctuation\">.</span>sampleRate <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> audioCtx<span class=\"token punctuation\">.</span>sampleRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 버퍼를 백색소음으로 채웁니다</span>\n<span class=\"token comment\">// 단순히 -1.0과 1.0사이의 무작위 값</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> channel <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> channel <span class=\"token operator\">&lt;</span> myArrayBuffer<span class=\"token punctuation\">.</span>numberOfChannels<span class=\"token punctuation\">;</span> channel<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 이는 데이터를 포함하고 있는 실제 배열을 줍니다</span>\n  <span class=\"token keyword\">var</span> nowBuffering <span class=\"token operator\">=</span> myArrayBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">getChannelData</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> myArrayBuffer<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Math.random()은 [0, 1.0]에 있습니다</span>\n    <span class=\"token comment\">// 오디오는 [-1.0, 1.0]에 있을 필요가 있습니다</span>\n    nowBuffering<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// AudioBufferSourceNode를 얻습니다.</span>\n<span class=\"token comment\">// 이것이 AudioBuffer를 재생하기를 원할 때 사용할 AudioNode입니다</span>\n<span class=\"token keyword\">var</span> source <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createBufferSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// AudioBufferSourceNode에 버퍼를 설정합니다</span>\nsource<span class=\"token punctuation\">.</span>buffer <span class=\"token operator\">=</span> myArrayBuffer<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// AudioBufferSourceNode를 목적지에</span>\n<span class=\"token comment\">// 연결해 소리가 나오게 합니다</span>\nsource<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>audioCtx<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 소스 재생을 시작합니다</span>\nsource<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"명세서","id":"명세서","isH3":false,"specifications":[{"bcdSpecificationURL":"https://webaudio.github.io/web-audio-api/#AudioBuffer","title":"Web Audio API"}],"query":"api.AudioBuffer"}},{"type":"browser_compatibility","value":{"title":"브라우저 호환성","id":"브라우저_호환성","isH3":false,"query":"api.AudioBuffer","dataURL":"/ko/docs/Web/API/AudioBuffer/bcd.json"}},{"type":"prose","value":{"id":"같이_보기","title":"같이 보기","isH3":false,"content":"<ul>\n  <li><a href=\"/ko/docs/Web/API/Web_Audio_API/Using_Web_Audio_API\">Web Audio API 사용하기</a></li>\n</ul>"}}],"toc":[{"text":"생성자","id":"생성자"},{"text":"속성","id":"속성"},{"text":"메서드","id":"메서드"},{"text":"예제","id":"예제"},{"text":"명세서","id":"명세서"},{"text":"브라우저 호환성","id":"브라우저_호환성"},{"text":"같이 보기","id":"같이_보기"}],"summary":"AudioBuffer 인터페이스는 메모리에 상주하는 짧은 오디오 에셋을 나타내는데, 이는 AudioContext.decodeAudioData() (en-US) 메서드를 사용하여 오디오 파일로부터 생성되거나, AudioContext.createBuffer() (en-US)를 사용하여 가공되지 않은(raw) 데이터로부터 생성될 수 있습니다. 한 번 AudioBuffer에 입력되고 나면, 이 오디오는 AudioBufferSourceNode에 전달됨으로써 재생될 수 있습니다.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"AudioBuffer","locale":"en-US","native":"English (US)"},{"title":"AudioBuffer","locale":"es","native":"Español"},{"title":"AudioBuffer","locale":"fr","native":"Français"},{"title":"AudioBuffer","locale":"ja","native":"日本語"},{"title":"AudioBuffer","locale":"ru","native":"Русский"},{"title":"AudioBuffer","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ko/web/api/audiobuffer","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/web/api/audiobuffer/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ko/docs/Web","title":"개발자를 위한 웹 기술"},{"uri":"/ko/docs/Web/API","title":"Web API"},{"uri":"/ko/docs/Web/API/AudioBuffer","title":"AudioBuffer"}],"pageTitle":"AudioBuffer - Web API | MDN","noIndexing":false}}