{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"OfflineAudioContext","mdn_url":"/ko/docs/Web/API/OfflineAudioContext","locale":"ko","native":"한국어","sidebarHTML":"<ol><li><strong><a href=\"/ko/docs/Web/API/Web_Audio_API\">Web Audio API</a></strong></li><li><strong><a href=\"/ko/docs/Web/API/OfflineAudioContext\"><code>OfflineAudioContext</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OfflineAudioContext/OfflineAudioContext\"><code>OfflineAudioContext()</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OfflineAudioContext/length\"><code>length</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OfflineAudioContext/resume\"><code>resume()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OfflineAudioContext/startRendering\"><code>startRendering()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OfflineAudioContext/suspend\"><code>suspend()</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Events</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OfflineAudioContext/complete_event\"><code>complete</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Inheritance:</summary><ol><li><a href=\"/ko/docs/Web/API/BaseAudioContext\"><code>BaseAudioContext</code></a></li><li><a href=\"/ko/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Web Audio API</summary><ol><li><a href=\"/ko/docs/Web/API/AnalyserNode\"><code>AnalyserNode</code></a></li><li><a href=\"/ko/docs/Web/API/AudioBuffer\"><code>AudioBuffer</code></a></li><li><a href=\"/ko/docs/Web/API/AudioBufferSourceNode\"><code>AudioBufferSourceNode</code></a></li><li><a href=\"/ko/docs/Web/API/AudioContext\"><code>AudioContext</code></a></li><li><a href=\"/ko/docs/Web/API/AudioDestinationNode\"><code>AudioDestinationNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioListener\"><code>AudioListener</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/AudioNode\"><code>AudioNode</code></a></li><li><a href=\"/ko/docs/Web/API/AudioParam\"><code>AudioParam</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioProcessingEvent\"><code>AudioProcessingEvent</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/AudioScheduledSourceNode\"><code>AudioScheduledSourceNode</code></a></li><li><a href=\"/ko/docs/Web/API/AudioWorklet\"><code>AudioWorklet</code></a></li><li><a href=\"/ko/docs/Web/API/AudioWorkletGlobalScope\"><code>AudioWorkletGlobalScope</code></a></li><li><a href=\"/ko/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a></li><li><a href=\"/ko/docs/Web/API/AudioWorkletProcessor\"><code>AudioWorkletProcessor</code></a></li><li><a href=\"/ko/docs/Web/API/BaseAudioContext\"><code>BaseAudioContext</code></a></li><li><a href=\"/ko/docs/Web/API/BiquadFilterNode\"><code>BiquadFilterNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ChannelMergerNode\"><code>ChannelMergerNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ChannelSplitterNode\"><code>ChannelSplitterNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ConstantSourceNode\"><code>ConstantSourceNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ConvolverNode\"><code>ConvolverNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DelayNode\"><code>DelayNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DynamicsCompressorNode\"><code>DynamicsCompressorNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/GainNode\"><code>GainNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IIRFilterNode\"><code>IIRFilterNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaElementAudioSourceNode\"><code>MediaElementAudioSourceNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaStreamAudioDestinationNode\"><code>MediaStreamAudioDestinationNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaStreamAudioSourceNode\"><code>MediaStreamAudioSourceNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OfflineAudioCompletionEvent\"><code>OfflineAudioCompletionEvent</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OscillatorNode\"><code>OscillatorNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PannerNode\"><code>PannerNode</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/PeriodicWave\"><code>PeriodicWave</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/StereoPannerNode\"><code>StereoPannerNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WaveShaperNode\"><code>WaveShaperNode</code> <small>(en-US)</small></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><code>OfflineAudioContext</code> 인터페이스는 함께 연결된 <a href=\"/ko/docs/Web/API/AudioNode\"><code>AudioNode</code></a>들로부터 만들어진 오디오 프로세싱 그래프를 나타내는 <a href=\"/ko/docs/Web/API/AudioContext\"><code>AudioContext</code></a> 인터페이스입니다. 표준 <a href=\"/ko/docs/Web/API/AudioContext\"><code>AudioContext</code></a>와는 대조적으로, <code>OfflineAudioContext</code>는 오디오를 장치 하드웨어로 렌더링하지 않습니다; 대신, 이것은 가능한 한 빨리 오디오를 생성하고, 그 결과를 <a href=\"/ko/docs/Web/API/AudioBuffer\"><code>AudioBuffer</code></a>에 출력합니다.</p><svg viewBox=\"-1 -1 650 42\" preserveAspectRatio=\"xMinYMin meet\">\n  <a style=\"text-decoration: none;\" xlink:href=\"/ko/docs/Web/API/EventTarget\">\n    <rect x=\"0\" y=\"0\" width=\"88\" height=\"25\" fill=\"#fff\" stroke=\"#D4DDE4\" stroke-width=\"2px\"></rect>\n    <text x=\"44\" y=\"16\" font-size=\"10px\" fill=\"#4D4E53\" text-anchor=\"middle\">\n      EventTarget\n    </text>\n  </a>\n  <line x1=\"88\" y1=\"14\" x2=\"118\" y2=\"14\" stroke=\"#D4DDE4\" \"=\"\"></line>\n  <polyline points=\"88,14 98,9 98,19 88,14\" stroke=\"#D4DDE4\" fill=\"#fff\"></polyline>\n  <a style=\"text-decoration: none;\" xlink:href=\"/ko/docs/Web/API/BaseAudioContext\">\n    <rect x=\"118\" y=\"0\" width=\"128\" height=\"25\" fill=\"#fff\" stroke=\"#D4DDE4\" stroke-width=\"2px\"></rect>\n    <text x=\"182\" y=\"16\" font-size=\"10px\" fill=\"#4D4E53\" text-anchor=\"middle\">\n      BaseAudioContext\n    </text>\n  </a>\n  <line x1=\"246\" y1=\"14\" x2=\"276\" y2=\"14\" stroke=\"#D4DDE4\" \"=\"\"></line>\n  <polyline points=\"246,14 256,9 256,19 246,14\" stroke=\"#D4DDE4\" fill=\"#fff\"></polyline>\n  <a style=\"text-decoration: none;\" xlink:href=\"/ko/docs/Web/API/OfflineAudioContext\" aria-current=\"page\">\n    <rect x=\"276\" y=\"0\" width=\"152\" height=\"25\" fill=\"#F4F7F8\" stroke=\"#D4DDE4\" stroke-width=\"2px\"></rect>\n    <text x=\"352\" y=\"16\" font-size=\"10px\" fill=\"#4D4E53\" text-anchor=\"middle\">\n      OfflineAudioContext\n    </text>\n  </a></svg>"}},{"type":"prose","value":{"id":"생성자","title":"생성자","isH3":false,"content":"<dl>\n  <dt id=\"offlineaudiocontext.offlineaudiocontext_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OfflineAudioContext/OfflineAudioContext\"><code>OfflineAudioContext.OfflineAudioContext()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>새로운 <code>OfflineAudioContext</code> 인스턴스를 생성합니다.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"속성","title":"속성","isH3":false,"content":"<p><em>또한 부모 인터페이스인 <a href=\"/ko/docs/Web/API/BaseAudioContext\"><code>BaseAudioContext</code></a>로부터 속성을 상속받습니다.</em></p>\n<dl>\n  <dt id=\"offlineaudiocontext.length_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OfflineAudioContext/length\"><code>OfflineAudioContext.length</code> <small>(en-US)</small></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>샘플 프레임의 버퍼 사이즈를 나타내는 정수.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"이벤트_처리기","title":"이벤트 처리기","isH3":true,"content":"<dl>\n  <dt id=\"offlineaudiocontext.oncomplete_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OfflineAudioContext/complete_event\"><code>OfflineAudioContext.oncomplete</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OfflineAudioContext/startRendering\"><code>OfflineAudioContext.startRendering()</code> <small>(en-US)</small></a>의 이벤트 기반 버전이 사용된 이후, 프로세싱이 종료되었을 때, 즉 (<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OfflineAudioCompletionEvent\"><code>OfflineAudioCompletionEvent</code> <small>(en-US)</small></a> 유형의) <code><a href=\"/en-US/docs/Web/API/OfflineAudioContext/complete_event\" title=\"Currently only available in English (US)\" class=\"only-in-en-us\">complete (en-US)</a></code> 이벤트가 발생되었을 때 호출되는 <a href=\"/en-US/docs/Web/Events/Event_handlers\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">이벤트 처리기 (en-US)</a>입니다.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"메서드","title":"메서드","isH3":false,"content":"<p><em>또한 부모 인터페이스인 <a href=\"/ko/docs/Web/API/BaseAudioContext\"><code>BaseAudioContext</code></a>로부터 메서드를 상속받습니다.</em></p>\n<dl>\n  <dt id=\"offlineaudiocontext.suspend_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OfflineAudioContext/suspend\"><code>OfflineAudioContext.suspend()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>특정한 시간에서의 오디오 컨텍스트의 시간 진행의 연기를 스케쥴링하고 프로미스를 반환합니다.</p>\n  </dd>\n  <dt id=\"offlineaudiocontext.startrendering_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OfflineAudioContext/startRendering\"><code>OfflineAudioContext.startRendering()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>현재 연결과 현재 스케쥴링된 변화를 고려하며 오디오 렌더링을 시작합니다. 이 문서는 이벤트 기반 버전과 프로미스 기반 버전 모두를 다룹니다.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"더_이상_사용되지_않는_메서드","title":"더 이상 사용되지 않는 메서드","isH3":true,"content":"<dl>\n  <dt id=\"offlineaudiocontext.resume_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OfflineAudioContext/resume\"><code>OfflineAudioContext.resume()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>이전에 연기된 오디오 컨텍스트에서의 시간 진행을 재개합니다.</p>\n  </dd>\n</dl>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>참고:</strong> <code>resume()</code> 메서드는 여전히 사용 가능합니다 — 이것은 이제 <a href=\"/ko/docs/Web/API/BaseAudioContext\"><code>BaseAudioContext</code></a> 인터페이스에 정의되었고 (<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioContext/resume\"><code>AudioContext.resume</code> <small>(en-US)</small></a>을 참조하세요) 따라서 <a href=\"/ko/docs/Web/API/AudioContext\"><code>AudioContext</code></a>와 <a href=\"/ko/docs/Web/API/OfflineAudioContext\" aria-current=\"page\"><code>OfflineAudioContext</code></a> 인터페이스 모두에서 접근 가능합니다.</p>\n</div>"}},{"type":"prose","value":{"id":"이벤트","title":"이벤트","isH3":false,"content":"<p><a href=\"/en-US/docs/Web/API/EventTarget/addEventListener\"><code>addEventListener()</code></a>를 사용하거나 이벤트 수신기를 이 인터페이스의 <code>oneventname</code> 속성에 부여함으로써 이 이벤트들을 수신하세요.</p>\n<dl>\n  <dt id=\"complete\"><a href=\"/en-US/docs/Web/API/OfflineAudioContext/complete_event\"><code>complete</code></a></dt>\n  <dd>\n    <p>\n      오프라인 오디오 컨텍스트의 렌더링이 완료되었을 때 발생됩니다.\n      또한 <a href=\"/en-US/docs/Web/API/OfflineAudioContext/complete_event\"><code>oncomplete</code></a> 이벤트 처리기 속성을 사용하여 이용 가능합니다.\n    </p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"예제","title":"예제","isH3":false,"content":"<p>이 간단한 예제에서, 우리는 <a href=\"/ko/docs/Web/API/AudioContext\"><code>AudioContext</code></a>와 <code>OfflineAudioContext</code> 객체 모두를 선언합니다. 우리는 <code>AudioContext</code>을 XHR(<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/BaseAudioContext/decodeAudioData\"><code>BaseAudioContext.decodeAudioData</code> <small>(en-US)</small></a>)을 통해 오디오 트랙을 로드하기 위해 사용하고, 그리고 나서 <code>OfflineAudioContext</code>를 오디오를 <a href=\"/ko/docs/Web/API/AudioBufferSourceNode\"><code>AudioBufferSourceNode</code></a>에 렌더링하고 트랙을 재생하기 위해 사용합니다. 오프라인 오디오 그래프가 준비된 후, 여러분은 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OfflineAudioContext/startRendering\"><code>OfflineAudioContext.startRendering</code> <small>(en-US)</small></a>을 사용하여 <a href=\"/ko/docs/Web/API/AudioBuffer\"><code>AudioBuffer</code></a>에 이것을 렌더링할 필요가 있습니다.</p>\n<p><code>startRendering()</code> 프로미스가 이행할 때, 렌더링은 완료되었고 <code>AudioBuffer</code> 출력은 프로미스에서 반환됩니다.</p>\n<p>이 시점에서 우리는 다른 오디오 컨텍스트를 생성하고, 그것의 내부에 <a href=\"/ko/docs/Web/API/AudioBufferSourceNode\"><code>AudioBufferSourceNode</code></a>를 생성하고, 그리고 이것의 버퍼를 <code>AudioBuffer</code> 프로미스와 같게 설정합니다. 이것은 그리고 나서 간단한 표준 오디오 그래프의 일부로 재생됩니다.</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>참고:</strong> 작동하는 예제를 보려면 <a href=\"https://mdn.github.io/webaudio-examples/offline-audio-context-promise/\" class=\"external\" rel=\" noopener\">offline-audio-context-promise</a> GitHub 레포지토리를 참고하세요 (<a href=\"https://github.com/mdn/webaudio-examples/tree/master/offline-audio-context-promise\" class=\"external\" rel=\" noopener\">소스 코드</a>도 보세요.)</p>\n</div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 온라인과 오프라인 오디오 컨텍스트를 정의합니다</span>\n\n<span class=\"token keyword\">var</span> audioCtx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AudioContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> offlineCtx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OfflineAudioContext</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">44100</span><span class=\"token operator\">*</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">44100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsource <span class=\"token operator\">=</span> offlineCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createBufferSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 오디오 트랙을 로딩하기 위해 XHR를 사용하고,</span>\n<span class=\"token comment\">// 이것을 디코딩하기 위해 decodeAudioData를 사용하고 렌더링하기 위해 OfflineAudioContext를 사용합니다</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  request<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'viper.ogg'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  request<span class=\"token punctuation\">.</span>responseType <span class=\"token operator\">=</span> <span class=\"token string\">'arraybuffer'</span><span class=\"token punctuation\">;</span>\n\n  request<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> audioData <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">;</span>\n\n    audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">decodeAudioData</span><span class=\"token punctuation\">(</span>audioData<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">buffer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      myBuffer <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">;</span>\n      source<span class=\"token punctuation\">.</span>buffer <span class=\"token operator\">=</span> myBuffer<span class=\"token punctuation\">;</span>\n      source<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>offlineCtx<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      source<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">//source.loop = true;</span>\n      offlineCtx<span class=\"token punctuation\">.</span><span class=\"token function\">startRendering</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">renderedBuffer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Rendering completed successfully'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> song <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createBufferSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        song<span class=\"token punctuation\">.</span>buffer <span class=\"token operator\">=</span> renderedBuffer<span class=\"token punctuation\">;</span>\n\n        song<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>audioCtx<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        play<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          song<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Rendering failed: '</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\">// 참고: 이 프로미스는 OfflineAudioContext에서 startRendering이 두 번째로 호출되었을 때 거부되어야만 합니다</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  request<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 프로세스를 시작하기 위해 getData를 실행합니다</span>\n\n<span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"명세","id":"명세","isH3":false,"specifications":[{"bcdSpecificationURL":"https://webaudio.github.io/web-audio-api/#OfflineAudioContext","title":"Web Audio API"}],"query":"api.OfflineAudioContext"}},{"type":"browser_compatibility","value":{"title":"브라우저 호환성","id":"브라우저_호환성","isH3":false,"query":"api.OfflineAudioContext","dataURL":"/ko/docs/Web/API/OfflineAudioContext/bcd.json"}},{"type":"prose","value":{"id":"같이_보기","title":"같이 보기","isH3":false,"content":"<ul>\n  <li><a href=\"/ko/docs/Web/API/Web_Audio_API/Using_Web_Audio_API\">Web Audio API 사용하기</a></li>\n</ul>"}}],"toc":[{"text":"생성자","id":"생성자"},{"text":"속성","id":"속성"},{"text":"메서드","id":"메서드"},{"text":"이벤트","id":"이벤트"},{"text":"예제","id":"예제"},{"text":"명세","id":"명세"},{"text":"브라우저 호환성","id":"브라우저_호환성"},{"text":"같이 보기","id":"같이_보기"}],"summary":"OfflineAudioContext 인터페이스는 함께 연결된 AudioNode들로부터 만들어진 오디오 프로세싱 그래프를 나타내는 AudioContext 인터페이스입니다. 표준 AudioContext와는 대조적으로, OfflineAudioContext는 오디오를 장치 하드웨어로 렌더링하지 않습니다; 대신, 이것은 가능한 한 빨리 오디오를 생성하고, 그 결과를 AudioBuffer에 출력합니다.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"OfflineAudioContext","locale":"en-US","native":"English (US)"},{"title":"OfflineAudioContext","locale":"ja","native":"日本語"},{"title":"OfflineAudioContext","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"OfflineAudioContext","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ko/web/api/offlineaudiocontext","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/web/api/offlineaudiocontext/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ko/docs/Web","title":"개발자를 위한 웹 기술"},{"uri":"/ko/docs/Web/API","title":"Web API"},{"uri":"/ko/docs/Web/API/OfflineAudioContext","title":"OfflineAudioContext"}],"pageTitle":"OfflineAudioContext - Web API | MDN","noIndexing":false}}