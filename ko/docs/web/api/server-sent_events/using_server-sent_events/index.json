{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Server-Sent Events 사용하기","mdn_url":"/ko/docs/Web/API/Server-sent_events/Using_server-sent_events","locale":"ko","native":"한국어","sidebarHTML":"<ol><li><strong><a href=\"/ko/docs/Web/API/Server-sent_events\">Server-sent events</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Guides</summary><ol><li><a href=\"/ko/docs/Web/API/Server-sent_events/Using_server-sent_events\">Using server-sent events</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Interfaces</summary><ol><li><a href=\"/ko/docs/Web/API/EventSource\"><code>EventSource</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/ko/docs/Web/API/Server-sent_events\">Server-Sent Events</a>를 사용하는 웹 애플리케이션 개발은 매우 간단하다. 웹 애플리케이션으로 스트림 이벤트를 보내는 약간의 코드가 서버 상에 필요하지만, 웹 애플리케이션 측은 <a href=\"/ko/docs/Web/API/WebSockets_API\">웹 소켓</a>에서 이벤트를 다루는 방식과 거의 차이가 없다.</p>"}},{"type":"prose","value":{"id":"서버에서_이벤트_받기","title":"서버에서 이벤트 받기","isH3":false,"content":"<p>Server-Sent Event API는 <a href=\"/en-US/docs/Web/API/EventSource\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">EventSource (en-US)</a> 인터페이스에 포함돼 있다. 이벤트를 전달 받기 위해서 서버로 접속을 시작하려면 우선, 이벤트를 생성하는 서버측 스크립트를 URI로 지정하여 새로운 <a href=\"/en-US/docs/Web/API/EventSource\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">EventSource (en-US)</a> 객체를 생성한다. 예를 들어:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> evtSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ssedemo.php\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>이벤트를 생성하는 스크립트가 다른 도메인에 존재할 경우엔 URI와 옵션 딕셔너리를 모두 지정하여 새로운 <a href=\"/en-US/docs/Web/API/EventSource\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">EventSource (en-US)</a> 객체를 생성한다. 클라이언트 스크립트가 example.com에 있는 경우라면:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> evtSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"//api.example.com/ssedemo.php\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">withCredentials</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>이벤트 소스를 생성 했다면 <code>message</code> 이벤트에 대한 핸들러를 등록하여 서버로부터의 메시지 수신을 시작할 수 있다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>evtSource<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> newElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"li\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> eventList <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'list'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  newElement<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"message: \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n  eventList<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>newElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>위 코드는 입력 메시지(즉, <code>event</code> 필드를 갖고 있지 않은 서버로부터의 알림)를 수신하여 그 메시지의 텍스트를 document의 HTML에 있는 목록에 추가한다.</p>\n<p>또는 <code>addEventListener()</code>를 사용하여 이벤트를 기다릴 수도 있다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>evtSource<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ping\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"li\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> time <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">;</span>\n  newElement<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">\"ping at \"</span> <span class=\"token operator\">+</span> time<span class=\"token punctuation\">;</span>\n  eventList<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>newElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>앞서 소개한 코드와 비슷하지만 <code>event</code> 필드에 \"ping\"이 설정된 메시지가 서버로부터 보내졌을 때만 자동으로 호출된다는 점이 다르다.</p>\n<div class=\"notecard warning\" id=\"sect1\">\n  <p>When <strong>not used over HTTP/2</strong>, SSE suffers from a limitation to the maximum number of open connections, which can be especially painful when opening multiple tabs, as the limit is <em>per browser</em> and is set to a very low number (6). The issue has been marked as \"Won't fix\" in <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=275955\" rel=\"noreferrer noopener\" class=\"external\">Chrome</a> and <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=906896\" rel=\"noreferrer noopener\" class=\"external\">Firefox</a>. This limit is per browser + domain, which means that you can open 6 SSE connections across all of the tabs to <code>www.example1.com</code> and another 6 SSE connections to <code>www.example2.com</code> (per <a href=\"https://stackoverflow.com/a/5326159/1905229\" class=\"external\" rel=\" noopener\">Stackoverflow</a>). When using HTTP/2, the maximum number of simultaneous <em>HTTP streams</em> is negotiated between the server and the client (defaults to 100).</p>\n</div>"}},{"type":"prose","value":{"id":"서버에서의_이벤트_송신","title":"서버에서의 이벤트 송신","isH3":false,"content":"<p>이벤트를 송신하는 서버 사이드의 스크립트는 MIME 타입 <code>text/event-stream</code>을 사용해 응답할 필요가 있다. 각 알림은 두 개의 줄 바꿈으로 끝나는 텍스트 블럭으로 전송된다. 이벤트 스트림의 형식에 관한 자세한 내용은 <a href=\"#event_stream_format\">Event stream format</a>을 참고한다.</p>\n<p>다음은 우리가 사용하고 있는 PHP 코드 예다.</p>\n<div class=\"code-example\"><pre class=\"brush: php notranslate\"><code><span class=\"token function\">date_default_timezone_set</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"America/New_York\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Content-Type: text/event-stream\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$counter</span> <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// \"ping\" 이벤트를 초당 송신</span>\n\n  <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"event: ping\\n\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$curDate</span> <span class=\"token operator\">=</span> <span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DATE_ISO8601</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'data: {\"time\": \"'</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$curDate</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'\"}'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"\\n\\n\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 간단한 메시지를 랜덤 간격으로 송신</span>\n\n  <span class=\"token variable\">$counter</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$counter</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'data: This is a message at time '</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$curDate</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"\\n\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$counter</span> <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">ob_end_flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>\n  위 코드는 이벤트 타입이 \"ping\"인 이벤트를 초당 생성한다. 각 이벤트 데이터는 이벤트가 생성된 시각의 ISO 8601 형식의 타입스탬프를 포함하는 JSON 객체다. 또, 랜덤한 간격으로 간단한 메시지(이벤트타입 없는)를 송신한다.\n  The loop will keep running independent of the connection status, so a check is included\n  to break the loop if the connection has been closed (e.g. client closes the page).\n</p>"}},{"type":"prose","value":{"id":"에러_핸들링","title":"에러 핸들링","isH3":false,"content":"<p>문제가 발생한 경우(네크워크 타임아웃이나 <a href=\"/en-US/docs/Web/HTTP/CORS\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">접근 제약 (en-US)</a>과 관련한 문제)에는 오류 이벤트를 생성한다. <code>EventSource</code> 갹채에 <code>onerror</code> 콜백을 등록하면 에러를 프로그램으로 대처할 수 있다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>evtSource<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"EventSource failed.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"이벤트_스트림_닫기","title":"이벤트 스트림 닫기","isH3":false,"content":"<p>기본적으로는 클라이언트와 서버 사이의 연결이 닫히면 연결이 재시작된다. 연결은 <code>.close()</code> 메서드로 종료한다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>evtSource<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"이벤트_스트림_형식","title":"이벤트 스트림 형식","isH3":false,"content":"<p>이벤트 스트림은 텍스트 데이터의 단순한 스트림으로 <a href=\"/ko/docs/Glossary/UTF-8\">UTF-8</a>을 사용하여 인코딩 해야만 한다. 이벤트 스트림 내부 메시지는 두 개의 줄바꿈 문자로 구분된다. 행 선두에 있는 콜론은 본질적으로 주석으로 나타내며 무시된다.</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>참고:</strong> <strong>노트:</strong> 주석 행은 연결이 타임아웃 되는 것을 방지하기 위해 사용할 수 있다. 서버는 연결을 유지하기 위해 정기적으로 주석을 송신할 수 있다.</p>\n</div>\n<p>각 메시지는 필드를 나열한 하나 이상의 텍스트 행으로 구성된다. 각 필드는 \"필드명, 그 다음 콜론, 이어서 필드의 값에 해당하는 텍스트 데이터\"로 나타낸다.</p>"}},{"type":"prose","value":{"id":"필드","title":"필드","isH3":true,"content":"<p>다음과 같은 필드명이 사양에 정리돼 있다.</p>\n<dl>\n  <dt id=\"event\"><code>event</code></dt>\n  <dd>\n    <p>이벤트 타입이다. 이 필드가 지정돼 있는 경우, 이벤트는 브라우저 내에서 이벤트명에 해당하는 이벤트 리스너로 전달된다. 웹 사이트의 소스 코드에서는 이름이 붙여진 이벤트를 받기 위해서 <code>addEventListener()</code>를 사용한다. 메시지에서 이벤트 명이 지정되 있지 않은 경우는 <code>onmessage</code> 핸들러가 호출된다.</p>\n  </dd>\n  <dt id=\"data\"><code>data</code></dt>\n  <dd>\n    <p>메시지의 데이터 필드다. <code>EventSource</code>가 <code>data:</code>로 시작된다. 복수의 연속된 행을 전달 받은 경우에는 <a href=\"https://www.w3.org/TR/eventsource/#dispatchMessage\" class=\"external\" rel=\" noopener\">그것을 연결해</a> 각 항목의 사이에 개행 문자를 삽입한다. 이때, 마지막의 줄바꿈은 제외된다.</p>\n  </dd>\n  <dt id=\"id\"><code>id</code></dt>\n  <dd>\n    <p>메시지의 데이터 필드다. <code>EventSource</code>가 data:로 시작된다. 복수의 연속된 행을 전달 받은 경우에는 그것을 연결해 각 항목의 사이에 개행 문자를 삽입한다. 이때, 마지막의 줄바꿈은 제외된다.</p>\n  </dd>\n  <dt id=\"retry\"><code>retry</code></dt>\n  <dd>\n    <p>이벤트 송신을 시도할 때에 사용하는 재연결 시간(reconnection time)이다. 이 값은 정수여야 하며 재연결 시간을 밀리초 단위로 지정한다. 정수가 아닌 값이 지정되면 이 필드는 무시된다.</p>\n  </dd>\n</dl>\n<p>이 필드명 외의 다른 필드는 모두 무시된다.</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>참고:</strong> <strong>노트:</strong> 행에 콜론이 포함되지 않으면 행 전체가 필드명으로 인식되며 값은 빈문자열로 취급한다.</p>\n</div>"}},{"type":"prose","value":{"id":"예","title":"예","isH3":true,"content":"<h4 id=\"데이터만_있는_메시지\">데이터만 있는 메시지</h4>\n<p>아래 예에서는 세 개의 메시지가 송신되고 있다. 최초의 메시지는 콜론 문자로 시작되고 있다. 주석이다. 앞서 설명한 바와 같이 코멘트는 메시지가 정기적으로 송신되지 않을 가능성이 있을 경우 킵얼라이브 용으로 사용할 수 있다.</p>\n<p>두 번째 메시지는 값이 \"some text\"인 data 필드를 갖고있다. 세 번째 메시지는 값이 \"another message\\nwith two lines\"인 data 필드를 갖고 있다. 값에 줄 바꿈 문자가 있음을 주의하라.</p>\n<pre class=\"notranslate\">: this is a test stream\n\ndata: some text\n\ndata: another message\ndata: with two lines\n</pre>\n<h4 id=\"이름이_있는_이벤트\">이름이 있는 이벤트</h4>\n<p>아래 예에서는 이름이 있는 이벤트를 몇개 송신하고 있다. 각각의 이벤트는 <code>event</code> 필드로 지정된 이벤트 명을 갖고 있고 또, 클라이언트에서 필요한 데이터를 포함하는 적절한 JSON 문자열을 값으로 갖는 <code>data</code> 필드도 있다. 물론 <code>data</code> 필드는 임의의 문자열 데이터를 가질 수 있다. 꼭 JSON 일 필요는 없다.</p>\n<pre class=\"notranslate\">event: userconnect\ndata: {\"username\": \"bobby\", \"time\": \"02:33:48\"}\n\nevent: usermessage\ndata: {\"username\": \"bobby\", \"time\": \"02:34:11\", \"text\": \"Hi everyone.\"}\n\nevent: userdisconnect\ndata: {\"username\": \"bobby\", \"time\": \"02:34:23\"}\n\nevent: usermessage\ndata: {\"username\": \"sean\", \"time\": \"02:34:36\", \"text\": \"Bye, bobby.\"}\n</pre>\n<h4 id=\"조합형\">조합형</h4>\n<p>이름 없는 메시지 또는, 이름이 있는 이벤트만 사용해야 하는 경우는 없다. 그리고 이것을 하나의 이벤트 스트림 내에서 혼합해 표현할 수 있다.</p>\n<pre class=\"notranslate\">event: userconnect\ndata: {\"username\": \"bobby\", \"time\": \"02:33:48\"}\n\ndata: Here's a system message of some kind that will get used\ndata: to accomplish some task.\n\nevent: usermessage\ndata: {\"username\": \"bobby\", \"time\": \"02:34:11\", \"text\": \"Hi everyone.\"}\n</pre>"}},{"type":"prose","value":{"id":"브라우저_호환성","title":"브라우저 호환성","isH3":false,"content":""}},{"type":"browser_compatibility","value":{"title":"EventSource","id":"eventsource","isH3":true,"query":"api.EventSource","dataURL":"/ko/docs/Web/API/Server-sent_events/Using_server-sent_events/bcd.json"}}],"toc":[{"text":"서버에서 이벤트 받기","id":"서버에서_이벤트_받기"},{"text":"서버에서의 이벤트 송신","id":"서버에서의_이벤트_송신"},{"text":"에러 핸들링","id":"에러_핸들링"},{"text":"이벤트 스트림 닫기","id":"이벤트_스트림_닫기"},{"text":"이벤트 스트림 형식","id":"이벤트_스트림_형식"},{"text":"브라우저 호환성","id":"브라우저_호환성"}],"summary":"Server-Sent Events를 사용하는 웹 애플리케이션 개발은 매우 간단하다. 웹 애플리케이션으로 스트림 이벤트를 보내는 약간의 코드가 서버 상에 필요하지만, 웹 애플리케이션 측은 웹 소켓에서 이벤트를 다루는 방식과 거의 차이가 없다.","popularity":0.0004,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using server-sent events","locale":"en-US","native":"English (US)"},{"title":"Utilizando eventos enviados por el servidor (server-sent event)","locale":"es","native":"Español"},{"title":"Utiliser les évènements envoyés par le serveur","locale":"fr","native":"Français"},{"title":"サーバー送信イベントの使用","locale":"ja","native":"日本語"},{"title":"Using server-sent events","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Using server-sent events","locale":"ru","native":"Русский"},{"title":"使用服务器发送事件","locale":"zh-CN","native":"中文 (简体)"},{"title":"使用 server-sent 事件","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ko/web/api/server-sent_events/using_server-sent_events","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/web/api/server-sent_events/using_server-sent_events/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ko/docs/Web","title":"개발자를 위한 웹 기술"},{"uri":"/ko/docs/Web/API","title":"Web API"},{"uri":"/ko/docs/Web/API/Server-sent_events","title":"Server-sent events"},{"uri":"/ko/docs/Web/API/Server-sent_events/Using_server-sent_events","title":"Server-Sent Events 사용하기"}],"pageTitle":"Server-Sent Events 사용하기 - Web API | MDN","noIndexing":false}}