{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"IIR 필터 사용하기","mdn_url":"/ko/docs/Web/API/Web_Audio_API/Using_IIR_filters","locale":"ko","native":"한국어","sidebarHTML":"<ol><li><strong><a href=\"/ko/docs/Web/API/Web_Audio_API\">Web Audio API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Guides</summary><ol><li><a href=\"/ko/docs/Web/API/Web_Audio_API/Using_Web_Audio_API\">Using the Web Audio API</a></li><li><a href=\"/ko/docs/Web/API/Web_Audio_API/Basic_concepts_behind_Web_Audio_API\">Basic concepts behind Web Audio API</a></li><li><a href=\"/ko/docs/Web/API/Web_Audio_API/Best_practices\">Web Audio API best practices</a></li><li><a href=\"/ko/docs/Web/API/Web_Audio_API/Advanced_techniques\">Advanced techniques: Creating and sequencing audio</a></li><li><a href=\"/ko/docs/Web/API/Web_Audio_API/Using_AudioWorklet\">Background audio processing using AudioWorklet</a></li><li><a href=\"/ko/docs/Web/API/Web_Audio_API/Controlling_multiple_parameters_with_ConstantSourceNode\">Controlling multiple parameters with ConstantSourceNode</a></li><li><a href=\"/ko/docs/Web/API/Web_Audio_API/Migrating_from_webkitAudioContext\">Migrating from webkitAudioContext</a></li><li><a href=\"/ko/docs/Web/API/Web_Audio_API/Simple_synth\">Example and tutorial: Simple synth keyboard</a></li><li><a href=\"/ko/docs/Web/API/Web_Audio_API/Tools\">Tools for analyzing Web Audio usage</a></li><li><a href=\"/ko/docs/Web/API/Web_Audio_API/Using_IIR_filters\">Using IIR filters</a></li><li><a href=\"/ko/docs/Web/API/Web_Audio_API/Visualizations_with_Web_Audio_API\">Visualizations with Web Audio API</a></li><li><a href=\"/ko/docs/Web/API/Web_Audio_API/Web_audio_spatialization_basics\">Web audio spatialization basics</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Interfaces</summary><ol><li><a href=\"/ko/docs/Web/API/AnalyserNode\"><code>AnalyserNode</code></a></li><li><a href=\"/ko/docs/Web/API/AudioBuffer\"><code>AudioBuffer</code></a></li><li><a href=\"/ko/docs/Web/API/AudioBufferSourceNode\"><code>AudioBufferSourceNode</code></a></li><li><a href=\"/ko/docs/Web/API/AudioContext\"><code>AudioContext</code></a></li><li><a href=\"/ko/docs/Web/API/AudioDestinationNode\"><code>AudioDestinationNode</code></a></li><li><a href=\"/ko/docs/Web/API/AudioListener\"><code>AudioListener</code></a></li><li><a href=\"/ko/docs/Web/API/AudioNode\"><code>AudioNode</code></a></li><li><a href=\"/ko/docs/Web/API/AudioParam\"><code>AudioParam</code></a></li><li><a href=\"/ko/docs/Web/API/AudioProcessingEvent\"><code>AudioProcessingEvent</code></a></li><li><a href=\"/ko/docs/Web/API/AudioScheduledSourceNode\"><code>AudioScheduledSourceNode</code></a></li><li><a href=\"/ko/docs/Web/API/AudioWorklet\"><code>AudioWorklet</code></a></li><li><a href=\"/ko/docs/Web/API/AudioWorkletGlobalScope\"><code>AudioWorkletGlobalScope</code></a></li><li><a href=\"/ko/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a></li><li><a href=\"/ko/docs/Web/API/AudioWorkletProcessor\"><code>AudioWorkletProcessor</code></a></li><li><a href=\"/ko/docs/Web/API/BaseAudioContext\"><code>BaseAudioContext</code></a></li><li><a href=\"/ko/docs/Web/API/BiquadFilterNode\"><code>BiquadFilterNode</code></a></li><li><a href=\"/ko/docs/Web/API/ChannelMergerNode\"><code>ChannelMergerNode</code></a></li><li><a href=\"/ko/docs/Web/API/ChannelSplitterNode\"><code>ChannelSplitterNode</code></a></li><li><a href=\"/ko/docs/Web/API/ConstantSourceNode\"><code>ConstantSourceNode</code></a></li><li><a href=\"/ko/docs/Web/API/ConvolverNode\"><code>ConvolverNode</code></a></li><li><a href=\"/ko/docs/Web/API/DelayNode\"><code>DelayNode</code></a></li><li><a href=\"/ko/docs/Web/API/DynamicsCompressorNode\"><code>DynamicsCompressorNode</code></a></li><li><a href=\"/ko/docs/Web/API/GainNode\"><code>GainNode</code></a></li><li><a href=\"/ko/docs/Web/API/IIRFilterNode\"><code>IIRFilterNode</code></a></li><li><a href=\"/ko/docs/Web/API/MediaElementAudioSourceNode\"><code>MediaElementAudioSourceNode</code></a></li><li><a href=\"/ko/docs/Web/API/MediaStreamAudioDestinationNode\"><code>MediaStreamAudioDestinationNode</code></a></li><li><a href=\"/ko/docs/Web/API/MediaStreamAudioSourceNode\"><code>MediaStreamAudioSourceNode</code></a></li><li><a href=\"/ko/docs/Web/API/OfflineAudioCompletionEvent\"><code>OfflineAudioCompletionEvent</code></a></li><li><a href=\"/ko/docs/Web/API/OfflineAudioContext\"><code>OfflineAudioContext</code></a></li><li><a href=\"/ko/docs/Web/API/OscillatorNode\"><code>OscillatorNode</code></a></li><li><a href=\"/ko/docs/Web/API/PannerNode\"><code>PannerNode</code></a></li><li><a href=\"/ko/docs/Web/API/PeriodicWave\"><code>PeriodicWave</code></a></li><li><a href=\"/ko/docs/Web/API/WaveShaperNode\"><code>WaveShaperNode</code></a></li><li><a href=\"/ko/docs/Web/API/StereoPannerNode\"><code>StereoPannerNode</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/ko/docs/Web/API/Web_Audio_API\">Web Audio API</a>의 <strong><code>IIRFilterNode</code></strong> 인터페이스는 일반적인 <a href=\"https://en.wikipedia.org/wiki/infinite%20impulse%20response\" class=\"external\" rel=\" noopener\">무한 임펄스 응답</a> (IIR) 필터를 구현하는 <a href=\"/ko/docs/Web/API/AudioNode\"><code>AudioNode</code></a> 프로세서입니다; 이 유형의 필터는 음색 제어 장치와 그래픽 이퀄라이저를 구현하는 데 사용될 수 있으며, 필터 응답 파라미터들은 필요하면 조율될 수 있도록 명시될 수 있습니다. 이 글은 어떻게 이것을 구현하는지, 그리고 간단한 예제로 어떻게 이것을 사용하는지를 살펴봅니다.</p>"}},{"type":"prose","value":{"id":"데모","title":"데모","isH3":false,"content":"<p>이 가이드를 위한 간단한 예제는 오디오 재생을 시작하거나 멈추는 재생/정지 버튼과, 사운드의 음색을 변경하는 IIR 필터를 켜고 끄는 토글 버튼을 제공합니다. 이것은 또한 오디오의 주파수 응답이 그려진 캔버스를 제공하므로, 여러분은 IIR 필터가 어떤 이펙트를 가지고 있는지를 볼 수 있습니다.</p>\n<p>\n  <img src=\"/ko/docs/Web/API/Web_Audio_API/Using_IIR_filters/iir-filter-demo.png\" alt=\"재생 버튼, 필터를 켜고 끄기 위한 토글 버튼, 필터가 적용된 이후에 반환된 필터 주파수들을 보여주는 선 그래프 기능을 가진 데모\" width=\"620\" height=\"621\" loading=\"lazy\">\n</p>\n<p>여러분은 <a href=\"https://codepen.io/Rumyra/pen/oPxvYB/\" class=\"external\" rel=\" noopener\">Codepen에서 전체 데모</a>를 확인할 수 있습니다. <a href=\"https://github.com/mdn/webaudio-examples/tree/master/iirfilter-node\" class=\"external\" rel=\" noopener\">GitHub에서 소스 코드</a>도 볼 수 있습니다. 이것은 각각 다른 로우패스 주파수들에 대한 몇 가지 다른 계수 값들을 포함합니다 — 여러분은 각각 다른 이용 가능한 이펙트들을 확인해보기 위해 <code>filterNumber</code> 상수의 값을 0에서 3사이의 값으로 변경할 수 있습니다.</p>"}},{"type":"prose","value":{"id":"브라우저_지원","title":"브라우저 지원","isH3":false,"content":"<p>비록 IIR 필터가 <a href=\"/ko/docs/Web/API/BiquadFilterNode\">Biquad 필터</a>같은, 더욱 오랫동안에 걸친 Web Audio API 기능들 중 몇 가지보다 더욱 최근에 구현되긴 했지만, <a href=\"/en-US/docs/Web/API/IIRFilterNode\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">IIR 필터 (en-US)</a>는 현대 브라우저들에서 잘 지원됩니다.</p>"}},{"type":"prose","value":{"id":"iirfilternode","title":"IIRFilterNode","isH3":false,"content":"<p>Web Audio API는 이제 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IIRFilterNode\"><code>IIRFilterNode</code> <small>(en-US)</small></a> 인터페이스를 가지고 있습니다. 하지만 이것은 무엇이고 어떻게 이것이 우리가 이미 가지고 있는 <a href=\"/ko/docs/Web/API/BiquadFilterNode\"><code>BiquadFilterNode</code></a>와 다를까요?</p>\n<p>IIR 필터는 <strong>무한 임펄스 응답 필터</strong>입니다. 이것은 오디오와 디지털 신호 처리에서 사용되는 두 가지 주요한 유형의 필터 중 하나입니다. 다른 유형은 FIR — <strong>유한 임펄스 응답 필터</strong>입니다. <a href=\"https://dspguru.com/dsp/faqs/iir/basics/\" class=\"external\" rel=\" noopener\">여기 IIR 필터와 FIR 필터</a>에 대한 정말 좋은 개요가 있습니다.</p>\n<p>biquad 필터는 실제로는 무한 임펄스 응답 필터의 <em>특정한 유형</em>입니다. 이것은 흔히 쓰이는 유형이고 우리는 이미 Web Audio API에 노드로 이것을 가지고 있습니다. 만약 여러분이 이 노드를 선택한다면 힘든 일들은 이미 여러분을 위해 완료되어 있습니다. 예를 들자면, 만약 여러분이 사운드에서 낮은 주파수들을 여과하기를 원한다면, 여러분은 <a href=\"/en-US/docs/Web/API/BiquadFilterNode/type\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">type (en-US)</a>을 <code>highpass</code>로 설정하고 어떤 주파수를 여과할지 (또는 잘라낼지) 설정할 수 있습니다. <a href=\"https://www.earlevel.com/main/2003/02/28/biquads/\" class=\"external\" rel=\" noopener\">여기 biquad 필터가 어떻게 작동하는지에 대한 더 많은 정보가 있습니다</a>.</p>\n<p>여러분이 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IIRFilterNode\"><code>IIRFilterNode</code> <small>(en-US)</small></a>를 <a href=\"/ko/docs/Web/API/BiquadFilterNode\"><code>BiquadFilterNode</code></a> 대신에 사용할 때 여러분은 미리 프로그램된 유형을 단지 선택하는 것 보다는 필터를 직접 만드는 것입니다. 그래서 여러분은 하이패스 필터, 또는 로우패스 필터, 또는 더욱 맞춤형의 필터를 만들 수 있습니다. 그리고 이것이 IIR 필터가 유용해지는 지점입니다 — 만약 이미 이용 가능한 세팅중 아무 것도 여러분이 원하는 것에 대해 적합하지 못하다면 여러분은 여러분만의 필터를 만들 수 있습니다. 이것 뿐만이 아니라, 만약 여러분의 오디오 그래프가 내부에 하이패스와 밴드패스 필터를 필요로 한다면, 여러분은 이것을 위해 필요할 두 개의 biquad 필터 노드 대신에 단지 하나의 IIR 필터 노드를 사용할 수 있습니다.</p>\n<p>IIR 필터 노드와 함께 필터가 필요로 하는 어떤 <code>feedforward</code>와 <code>feedback</code> 값을 설정할지는 여러분에게 달렸습니다 — 이것은 필터의 특징을 결정합니다. 불리한 면은 이것은 몇 가지 복잡한 수학을 수반한다는 것입니다.</p>\n<p>만약 여러분이 더 배우기를 원한다면 여기 몇 가지 <a href=\"http://ece.uccs.edu/~mwickert/ece2610/lecture_notes/ece2610_chap8.pdf\" class=\"external\" rel=\" noopener\">IIR 필터 뒤의 수학들에 대한 정보</a>가 있습니다. 이는 신호 처리 이론의 영역에 들어갑니다 — 보고 이것이 여러분을 위한 것이 아닌 것처럼 느껴지더라도 걱정하지는 마세요.</p>\n<p>만약 여러분이 IIR 필터 노드를 가지고 놀기를 원하고 그러기 위해 몇몇 값들이 필요하다면, <a href=\"https://www.dspguide.com/CH20.PDF\" class=\"external\" rel=\" noopener\">여기 이미 계산된 값들의 표</a>가 있습니다; 링크된 PDF의 페이지 4 &amp; 5에서 a<em>n</em>값들은 <code>feedForward</code>값을 나타내고 b<em>n</em>값들은 <code>feedback</code>을 나타냅니다. 만약 여러분이 다른 필터들과 어떻게 그것들이 디지털적으로 구현되는지에 대해 더 읽기를 원한다면 <a href=\"http://musicdsp.org/\" class=\"external\" rel=\" noopener\">musicdsp.org</a>는 또한 훌륭한 자원입니다.</p>\n<p>이것 모두를 염두에 둔 채로, Web Audio API로 IIR 필터를 만드는 코드를 살펴봅시다.</p>"}},{"type":"prose","value":{"id":"iir_필터_계수_설정하기","title":"IIR 필터 계수 설정하기","isH3":false,"content":"<p>IIR 필터를 만들 때, 우리는 <code>feedforward</code>와 <code>feedback</code> 계수를 옵션으로 (계수들은 우리가 값들을 표현하는 방법입니다) 전달합니다. 이 파라미터 둘 다는 배열이고, 둘 중 어느 것도 20개의 원소보다 클 수 없습니다.</p>\n<p>계수를 설정할 때, <code>feedforward</code> 값들은 모두 0으로 설정될 수 없는데, 그렇지 않으면 아무 것도 필터로 전달되지 않을 것입니다. 이것과 같은 것은 가능합니다:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> feedForward <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.00020298</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0004059599</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.00020298</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>feedback</code> 값들은 0으로 시작할 수 없는데, 그렇지 않으면 첫번째 전달에서 아무 것도 되돌아오지 않을 것입니다:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> feedBackward <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1.0126964558</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1.9991880801</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.9873035442</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>참고:</strong> 이 값들은 <a href=\"https://webaudio.github.io/web-audio-api/#filters-characteristics\" class=\"external\" rel=\" noopener\">Web Audio API 명세의 필터 특징들</a>에서 명시된 로우패스 필터에 기반하여 계산된 값들입니다. 이 필터 노드가 더욱 많은 인기를 얻고 있으므로 우리는 더 많은 계수 값들을 모을 수 있을 것입니다.</p>\n</div>"}},{"type":"prose","value":{"id":"오디오_그래프에서_iir_필터_사용하기","title":"오디오 그래프에서 IIR 필터 사용하기","isH3":false,"content":"<p>컨텍스트와 필터 노드를 만들어 봅시다:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> AudioContext <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>AudioContext <span class=\"token operator\">||</span> window<span class=\"token punctuation\">.</span>webkitAudioContext<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> audioCtx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AudioContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> iirFilter <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createIIRFilter</span><span class=\"token punctuation\">(</span>feedForward<span class=\"token punctuation\">,</span> feedBack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>우리는 재생할 음원이 필요합니다. 우리는 사용자 정의 함수인 <code>playSoundNode()</code>를 사용하여 이것을 설정하는데, 이 함수는 존재하는 <a href=\"/ko/docs/Web/API/AudioBuffer\"><code>AudioBuffer</code></a>로부터 <a href=\"/en-US/docs/Web/API/BaseAudioContext/createBufferSource\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">버퍼 소스를 만들고 (en-US)</a>, 이것을 기본 목적지에 부착하고, 재생을 시작시키고, 이것을 반환합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">playSourceNode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">audioContext<span class=\"token punctuation\">,</span> audioBuffer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> soundSource <span class=\"token operator\">=</span> audioContext<span class=\"token punctuation\">.</span><span class=\"token function\">createBufferSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  soundSource<span class=\"token punctuation\">.</span>buffer <span class=\"token operator\">=</span> audioBuffer<span class=\"token punctuation\">;</span>\n  soundSource<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>audioContext<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  soundSource<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> soundSource<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>이 함수는 재생 버튼이 눌러졌을 때 호출됩니다. 재생 버튼 HTML은 다음같이 생겼습니다:</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button-play<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>switch<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-playing</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">aria-pressed</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Play<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>그리고 <code>click</code> 이벤트 리스너는 다음과 같이 시작합니다:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>playButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>playing <span class=\"token operator\">===</span> <span class=\"token string\">'false'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        srcNode <span class=\"token operator\">=</span> <span class=\"token function\">playSourceNode</span><span class=\"token punctuation\">(</span>audioCtx<span class=\"token punctuation\">,</span> sample<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>IIR 필터를 켜고 끄는 토글 버튼은 비슷한 방식으로 설정됩니다. 우선, HTML은:</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button-filter<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>switch<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-filteron</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">aria-pressed</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">aria-describedby</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>label<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">disabled</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>필터 버튼의 <code>click</code> 핸들러는 그리고 나서 <code>IIRFilter</code>를 그래프에 연결하는데, 이는 소스와 목적지 사이입니다:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>filterButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>filteron <span class=\"token operator\">===</span> <span class=\"token string\">'false'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        srcNode<span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span>audioCtx<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        srcNode<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>iirfilter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>audioCtx<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"주파수_응답","title":"주파수 응답","isH3":true,"content":"<p>우리는 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IIRFilterNode\"><code>IIRFilterNode</code> <small>(en-US)</small></a> 인스턴스에서 이용 가능한 단 하나의 메서드 <code>getFrequencyResponse()</code>만을 가지고 있는데, 이는 필터 내로 전달되고 있는 오디오의 주파수에 무슨 일이 일어나는지 볼 수 있게 해 줍니다.</p>\n<p>우리가 만든 필터의 주파수 플롯을 이 메서드로부터 얻은 데이터로 그려 봅시다.</p>\n<p>우리는 세 개의 배열을 만들 필요가 있습니다. 규모 응답과 상(phase) 응답을 받기를 원하는 주파수 값의 배열 하나, 그리고 데이터를 받기 위한 두 개의 빈 배열입니다. 이 세 개 모두 <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">float32array (en-US)</a> 유형이여야만 하고 같은 크기여야 합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 주파수 응답에 대한 배열들</span>\n<span class=\"token keyword\">const</span> totalArrayItems <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> myFrequencyArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float32Array</span><span class=\"token punctuation\">(</span>totalArrayItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> magResponseOutput <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float32Array</span><span class=\"token punctuation\">(</span>totalArrayItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> phaseResponseOutput <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float32Array</span><span class=\"token punctuation\">(</span>totalArrayItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>첫번째 배열을 우리가 원하는 반환될 데이터인 주파수 값으로 채웁시다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>myFrequencyArray <span class=\"token operator\">=</span> myFrequencyArray<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.4</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>우리는 선형적인 접근을 택할 수도 있지만, 주파수를 가지고 작업할 때는 로그 접근을 취하는 것이 훨씬 나으므로, 배열 원소에서 더 커진 주파수 값들로 배열을 채웁시다.</p>\n<p>이제 응답 데이터를 얻읍시다:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>iirFilter<span class=\"token punctuation\">.</span><span class=\"token function\">getFrequencyResponse</span><span class=\"token punctuation\">(</span>myFrequencyArray<span class=\"token punctuation\">,</span> magResponseOutput<span class=\"token punctuation\">,</span> phaseResponseOutput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>우리는 이 데이터를 필터 주파수 플롯을 그리기 위해 사용할 수 있습니다. 우리는 2d 캔버스 컨텍스트에서 그렇게 할 것입니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 캔버스 요소를 만들고 dom에 추가합니다</span>\n<span class=\"token keyword\">const</span> canvasContainer <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.filter-graph'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> canvasEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'canvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvasContainer<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>canvasEl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 2d 컨텍스트를 설정하고 크기를 설정합니다</span>\n<span class=\"token keyword\">const</span> canvasCtx <span class=\"token operator\">=</span> canvasEl<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> width <span class=\"token operator\">=</span> canvasContainer<span class=\"token punctuation\">.</span>offsetWidth<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> height <span class=\"token operator\">=</span> canvasContainer<span class=\"token punctuation\">.</span>offsetHeight<span class=\"token punctuation\">;</span>\ncanvasEl<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> width<span class=\"token punctuation\">;</span>\ncanvasEl<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> height<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 배경을 채울 색상을 설정합니다</span>\ncanvasCtx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">'white'</span><span class=\"token punctuation\">;</span>\ncanvasCtx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 크기에 맞춰 여백을 설정합니다</span>\n<span class=\"token keyword\">const</span> spacing <span class=\"token operator\">=</span> width<span class=\"token operator\">/</span><span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fontSize <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>spacing<span class=\"token operator\">/</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 축을 그립니다</span>\ncanvasCtx<span class=\"token punctuation\">.</span>lineWidth <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\ncanvasCtx<span class=\"token punctuation\">.</span>strokeStyle <span class=\"token operator\">=</span> <span class=\"token string\">'grey'</span><span class=\"token punctuation\">;</span>\n\ncanvasCtx<span class=\"token punctuation\">.</span><span class=\"token function\">beginPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvasCtx<span class=\"token punctuation\">.</span><span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span>spacing<span class=\"token punctuation\">,</span> spacing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvasCtx<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span>spacing<span class=\"token punctuation\">,</span> height<span class=\"token operator\">-</span>spacing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvasCtx<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span>width<span class=\"token operator\">-</span>spacing<span class=\"token punctuation\">,</span> height<span class=\"token operator\">-</span>spacing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvasCtx<span class=\"token punctuation\">.</span><span class=\"token function\">stroke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 축은 gain(y축)과 주파수(x축)입니다 -&gt; 라벨을 만듭니다</span>\ncanvasCtx<span class=\"token punctuation\">.</span>font <span class=\"token operator\">=</span> fontSize<span class=\"token operator\">+</span><span class=\"token string\">'px sans-serif'</span><span class=\"token punctuation\">;</span>\ncanvasCtx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">'grey'</span><span class=\"token punctuation\">;</span>\ncanvasCtx<span class=\"token punctuation\">.</span><span class=\"token function\">fillText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> spacing<span class=\"token operator\">-</span>fontSize<span class=\"token punctuation\">,</span> spacing<span class=\"token operator\">+</span>fontSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvasCtx<span class=\"token punctuation\">.</span><span class=\"token function\">fillText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'g'</span><span class=\"token punctuation\">,</span> spacing<span class=\"token operator\">-</span>fontSize<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>height<span class=\"token operator\">-</span>spacing<span class=\"token operator\">+</span>fontSize<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvasCtx<span class=\"token punctuation\">.</span><span class=\"token function\">fillText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span> spacing<span class=\"token operator\">-</span>fontSize<span class=\"token punctuation\">,</span> height<span class=\"token operator\">-</span>spacing<span class=\"token operator\">+</span>fontSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvasCtx<span class=\"token punctuation\">.</span><span class=\"token function\">fillText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hz'</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">-</span>spacing<span class=\"token operator\">+</span>fontSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvasCtx<span class=\"token punctuation\">.</span><span class=\"token function\">fillText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'20k'</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">-</span>spacing<span class=\"token punctuation\">,</span> height<span class=\"token operator\">-</span>spacing<span class=\"token operator\">+</span>fontSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 규모 응답 데이터를 순회하고 필터를 그립니다</span>\n\ncanvasCtx<span class=\"token punctuation\">.</span><span class=\"token function\">beginPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> magResponseOutput<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        canvasCtx<span class=\"token punctuation\">.</span><span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span>spacing<span class=\"token punctuation\">,</span> height<span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>magResponseOutput<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>spacing <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        canvasCtx<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>width<span class=\"token operator\">/</span>totalArrayItems<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">,</span> height<span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>magResponseOutput<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>spacing <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\ncanvasCtx<span class=\"token punctuation\">.</span><span class=\"token function\">stroke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"요약","title":"요약","isH3":false,"content":"<p>이것이 IIR 필터 데모의 전부입니다. 이것은 어떻게 기본을 사용하는지를 보여주고, 왜 이것이 유용한지와 어떻게 이것이 작동하는지를 이해하는 것을 도와주었을 것입니다.</p>"}}],"toc":[{"text":"데모","id":"데모"},{"text":"브라우저 지원","id":"브라우저_지원"},{"text":"IIRFilterNode","id":"iirfilternode"},{"text":"IIR 필터 계수 설정하기","id":"iir_필터_계수_설정하기"},{"text":"오디오 그래프에서 IIR 필터 사용하기","id":"오디오_그래프에서_iir_필터_사용하기"},{"text":"요약","id":"요약"}],"summary":"Web Audio API의 IIRFilterNode 인터페이스는 일반적인 무한 임펄스 응답 (IIR) 필터를 구현하는 AudioNode 프로세서입니다; 이 유형의 필터는 음색 제어 장치와 그래픽 이퀄라이저를 구현하는 데 사용될 수 있으며, 필터 응답 파라미터들은 필요하면 조율될 수 있도록 명시될 수 있습니다. 이 글은 어떻게 이것을 구현하는지, 그리고 간단한 예제로 어떻게 이것을 사용하는지를 살펴봅니다.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using IIR filters","locale":"en-US","native":"English (US)"}],"source":{"folder":"ko/web/api/web_audio_api/using_iir_filters","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/web/api/web_audio_api/using_iir_filters/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ko/docs/Web","title":"개발자를 위한 웹 기술"},{"uri":"/ko/docs/Web/API","title":"Web API"},{"uri":"/ko/docs/Web/API/Web_Audio_API","title":"Web Audio API"},{"uri":"/ko/docs/Web/API/Web_Audio_API/Using_IIR_filters","title":"IIR 필터 사용하기"}],"pageTitle":"IIR 필터 사용하기 - Web API | MDN","noIndexing":false}}