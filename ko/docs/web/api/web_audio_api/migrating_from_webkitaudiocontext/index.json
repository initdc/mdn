{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"webkitAudioContext에서 이주하기","mdn_url":"/ko/docs/Web/API/Web_Audio_API/Migrating_from_webkitAudioContext","locale":"ko","native":"한국어","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Web Audio API는 현 상태에 이르기까지 많은 반복을 거쳤습니다. 이것은 처음에 WebKit에서 구현되었고, 이것의 낡은 부분들의 일부는 그것들이 명세에서 대체되는 동안 즉시 제거되지 않았는데, 이는 많은 사이트들이 비호환되는 코드를 사용하는 것으로 이어졌습니다. 이 글에서, 우리는 Web Audio API가 WebKit에서 처음 구현된 이후로의 Web Audio API에서의 차이를 다루고 현대 Web Audio API를 사용하기 위해 어떻게 코드를 업데이트해야 되는지를 다룹니다.</p>\n<p>Web Audio 표준은 <a href=\"https://webkit.org/\" class=\"external\" rel=\" noopener\">WebKit</a>에서 처음 구현되었고, 이 구현은 API의 <a href=\"https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html\" class=\"external\" rel=\" noopener\">명세</a>에서의 작업과 동시에 개발되었습니다. 명세가 진화하고 변화가 만들어짐에 따라, 낡은 구현 부분들 중 일부는 이전 호환성의 이유에 기인해 WebKit (그리고 Blink) 구현에서 제거되지 않았습니다.</p>\n<p>Web Audio 명세를 구현하는 (Gecko와 같은) 새로운 엔진들은 오직 명세의 공식, 최종 버전만을 구현하는데, 이것이 의미하는 바는 <code>webkitAudioContext</code>나 Web Audio 명세에서의 오래된 명명 규칙을 사용하는 코드는 Web Audio 구현을 따르는 것에서 별도의 조작 없이 즉시 작동하지 않을지도 모른다는 것입니다. 이 글은 개발자들이 이런 문제들을 만날 가능성이 있는 영역들을 요약하기를 시도하고 어떻게 그런 코드를 각각 다른 브라우저 엔진들에서 작동할 <a href=\"/ko/docs/Web/API/AudioContext\"><code>AudioContext</code></a>에 기반한 표준으로 이동할지에 대한 예제들을 제공합니다.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>참고:</strong> <a href=\"https://github.com/cwilso/webkitAudioContext-MonkeyPatch\" class=\"external\" rel=\" noopener\">webkitAudioContext monkeypatch</a>라 불리는 라이브러리가 있는데, 이는 <code>webkitAudioContext</code>를 겨냥하는 대부분의 코드를 별도의 조작 없이 <code>AudioContext</code>에 기반한 표준에서 작동하게 만들기 위해 이 변화들 중 일부를 자동적으로 수정하지만, 이것은 현재 아래의 모든 경우들을 다루지 않고 있습니다. 이것에 의해 자동적으로 다뤄지는 API들의 목록을 보기 위해서는 이 라이브러리의 <a href=\"https://github.com/cwilso/webkitAudioContext-MonkeyPatch/blob/gh-pages/README.md\" class=\"external\" rel=\" noopener\">README 파일</a>을 참고해 보세요.</p>\n</div>"}},{"type":"prose","value":{"id":"생성자_메서드에서의_변화","title":"생성자 메서드에서의 변화","isH3":false,"content":"<p><code>webkitAudioContext</code>의 세 가지 생성자 메서드가 <a href=\"/ko/docs/Web/API/AudioContext\"><code>AudioContext</code></a>에서 재명명되었습니다.</p>\n<ul>\n  <li><code>createGainNode()</code>는 <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>createGain</code></a>으로 바뀌었습니다.</li>\n  <li><code>createDelayNode()</code>는 <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>createDelay</code></a>로 바뀌었습니다.</li>\n  <li><code>createJavaScriptNode()</code>는 <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>createScriptProcessor</code></a>로 바뀌었습니다.</li>\n</ul>\n<p>이것들은 <a href=\"/ko/docs/Web/API/AudioContext\"><code>AudioContext</code></a>에서 이 메서드명들의 일관성을 개선시키기 위해 만들어진 단순한 개명입니다. 만약 여러분의 코드가, 아래의 예시처럼 이 이름중에 어느 것이라도 사용하고 있다면:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 오래된 메서드명들</span>\n<span class=\"token keyword\">var</span> gain <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createGainNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> delay <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createDelayNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> js <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createJavascriptNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>여러분은 다음과 같이 보이도록 메서드의 이름을 변경할 수 있습니다:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 새로운 메서드명들</span>\n<span class=\"token keyword\">var</span> gain <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createGain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> delay <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createDelay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> js <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createScriptProcessor</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>이 메서드명들의 의미는 새로 이름붙혀진 버전에서도 동일합니다.</p>"}},{"type":"prose","value":{"id":"노드를_시작하고_멈추는_것에_대한_변화","title":"노드를 시작하고 멈추는 것에 대한 변화","isH3":false,"content":"<p><code>webkitAudioContext</code>에서, <a href=\"/ko/docs/Web/API/AudioBufferSourceNode\"><code>AudioBufferSourceNode</code></a>와 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OscillatorNode\"><code>OscillatorNode</code> <small>(en-US)</small></a>를 시작하거나 멈추는 두 가지 방법이 있습니다: <code>noteOn()</code>과 <code>noteOff()</code> 메서드와, <code>start()</code>와 <code>stop()</code> 메서드입니다. (<a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>AudioBufferSourceNode </code></a>는 아직 출력을 시작하는 다른 방법을 가지고 있습니다: <code>noteGrainOn()</code> 메서드입니다.) <code>noteOn()</code>/<code>noteGrainOn()</code>/<code>noteOff()</code> 메서드는 이 노드들에서 출력을 시작/정지하는 원래의 방법이었으나, 명세의 새로운 버전에서 <code>noteOn()</code>과 <code>noteGrainOn()</code> 메서드는 하나의 <code>start()</code> 메서드로 통합되었고, <code>noteOff()</code> 메서드는 <code>stop()</code> 메서드로 이름이 바뀌었습니다.</p>\n<p>여러분의 코드를 변경하기 위해서는, 여러분은 단지 사용한 메서드의 이름만 변경하시면 됩니다. 예를 들어, 만약 여러분이 아래와 같은 코드를 가지고 있다면:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> osc <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createOscillator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nosc<span class=\"token punctuation\">.</span><span class=\"token function\">noteOn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nosc<span class=\"token punctuation\">.</span><span class=\"token function\">noteOff</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> src <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createBufferSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsrc<span class=\"token punctuation\">.</span><span class=\"token function\">noteGrainOn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsrc<span class=\"token punctuation\">.</span><span class=\"token function\">noteOff</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>표준 AudioContext API로 변경하기 위해서 다음과 같이 변경할 수 있습니다:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> osc <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createOscillator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nosc<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nosc<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> src <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createBufferSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsrc<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsrc<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"동기_버퍼_생성_제거","title":"동기 버퍼 생성 제거","isH3":false,"content":"<p>Web Audio의 오래된 WebKit 구현에서, <code>createBuffer()</code>의 두 가지 버전이 있었는데, 하나는 초기적으로 빈 버퍼를 생성했고, 하나는 인코드된 오디오를 포함하고 있는 존재하는 <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>ArrayBuffer</code></a>를 취해, 그것을 디코드해 <a href=\"/ko/docs/Web/API/AudioBuffer\"><code>AudioBuffer</code></a>의 형태로 결과를 반환했습니다. <code>createBuffer()</code>의 후기 버전은 잠재적으로 비용이 많이 들었는데, 왜냐하면 이것은 오디오 버퍼를 동기적으로 디코드하고, 버퍼가 임의적으로 큰 채로, 이 메서드가 작업을 완료하는 데 많은 시간을 취할 수 있었고, 그 동안 웹 페이지의 어떤 다른 부분의 코드도 실행될 수 없었기 때문입니다.</p>\n<p>이런 문제들 때문에, <code>createBuffer()</code> 메서드의 이 버전은 제거되었고, 여러분은 대신 비동기적 <code>decodeAudioData()</code> 메서드를 사용해야 합니다.</p>\n<p>아래의 예제는 네트워크를 통해 오디오 파일을 다운로드받고, <code>createBuffer()</code>를 사용해 그것을 디코드하는 낡은 코드를 보여줍니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/path/to/audio.ogg\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span>responseType <span class=\"token operator\">=</span> <span class=\"token string\">\"arraybuffer\"</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> decodedBuffer <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createBuffer</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>decodedBuffer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 디코딩은 성공적이었습니다, 오디오 버퍼로 무언가 유용한 걸 하십시오</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"오디오 버퍼 디코딩 실패\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>아래에서 보이는 것처럼, <code>decodeAudioData()</code>를 사용하기 위해 이 코드를 전환하는 것은 비교적 단순합니다:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/path/to/audio.ogg\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span>responseType <span class=\"token operator\">=</span> <span class=\"token string\">\"arraybuffer\"</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  context<span class=\"token punctuation\">.</span><span class=\"token function\">decodeAudioData</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">onSuccess</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">decodedBuffer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 디코딩은 성공적이었습니다, 오디오 버퍼로 무언가 유용한 걸 하십시오</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"오디오 버퍼 디코딩 실패\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>decodeAudioData()</code> 메서드는 비동기적인데, 이는 이것이 즉시 반환할 것이고, 디코딩이 끝나면, 성공 혹은 실패 콜백 함수 중 하나가 오디오 디코딩이 성공적이었느냐에 따라 호출될 것임을 의미한다는 것에 주목하십시오. 위의 예제에서 보이다시피, 성공 콜백에서의 <code>createBuffer()</code> 호출 이후에 발생되는 부분을 실행하기 위해 여러분은 코드를 재구조화할 필요가 있을 지도 모릅니다.</p>"}},{"type":"prose","value":{"id":"audioparam.settargetvalueattime의_재명명","title":"AudioParam.setTargetValueAtTime의 재명명","isH3":false,"content":"<p><a href=\"/ko/docs/Web/API/AudioParam\"><code>AudioParam</code></a> 인터페이스의 <code>setTargetValueAtTime()</code> 메서드는 <code>setTargetAtTime()</code>으로 이름이 바뀌었습니다. 이것은 또한 API의 이해성을 개선하기 위한 단순한 개명이고, 메서드의 의미는 동일합니다. 만약 여러분의 코드가 <code>setTargetValueAtTime()</code>를 사용하고 있다면, <code>setTargetAtTime()</code>으로 이름을 바꿀 수 있습니다. 예를 들자면, 만약 우리가 다음과 같은 코드를 가지고 있다면:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">var</span> gainNode <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createGain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gainNode<span class=\"token punctuation\">.</span>gain<span class=\"token punctuation\">.</span><span class=\"token function\">setTargetValueAtTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>다음과 같이, 여러분은 메서드의 이름을 바꿀 수 있고, 표준을 따를 수 있습니다:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">var</span> gainNode <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createGain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gainNode<span class=\"token punctuation\">.</span>gain<span class=\"token punctuation\">.</span><span class=\"token function\">setTargetAtTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"변경된_열거형_값들","title":"변경된 열거형 값들","isH3":false,"content":"<p>원래의 <code>webkitAudioContext</code> API는 C-스타일 숫자 기반의 열거형 값들을 API에서 사용했습니다. 이 값들은 Web IDL 기반의 열거형 값들을 사용하는 것으로 변경되었는데, 이것들은 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLInputElement\"><code>HTMLInputElement</code> <small>(en-US)</small></a> 속성 <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>type</code></a>과 같은 것들과 비슷하기 때문에 친숙할지도 모릅니다.</p>"}},{"type":"prose","value":{"id":"oscillatornode.type","title":"OscillatorNode.type","isH3":true,"content":"<p><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OscillatorNode\"><code>OscillatorNode</code> <small>(en-US)</small></a>의 type 속성은 Web IDL 열거형을 사용하는 것으로 변경되었습니다. <code>webkitAudioContext</code>를 사용하는 오래된 코드는 아래처럼 <a href=\"/ko/docs/Web/API/AudioContext\"><code>AudioContext</code></a> 기반의 표준으로 변경될 수 있습니다:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 오래된 webkitAudioContext 코드:</span>\n<span class=\"token keyword\">var</span> osc <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createOscillator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nosc<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> osc<span class=\"token punctuation\">.</span><span class=\"token constant\">SINE</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// sine 파형</span>\nosc<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> osc<span class=\"token punctuation\">.</span><span class=\"token constant\">SQUARE</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// square 파형</span>\nosc<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> osc<span class=\"token punctuation\">.</span><span class=\"token constant\">SAWTOOTH</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// sawtooth 파형</span>\nosc<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> osc<span class=\"token punctuation\">.</span><span class=\"token constant\">TRIANGLE</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// triangle 파형</span>\nosc<span class=\"token punctuation\">.</span><span class=\"token function\">setWaveTable</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> isCustom <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>osc<span class=\"token punctuation\">.</span>type <span class=\"token operator\">==</span> osc<span class=\"token punctuation\">.</span><span class=\"token constant\">CUSTOM</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// isCustom은 true일 것입니다</span>\n\n<span class=\"token comment\">// 새로운 표준 AudioContext 코드:</span>\n<span class=\"token keyword\">var</span> osc <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createOscillator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nosc<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">\"sine\"</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// sine 파형</span>\nosc<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">\"square\"</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// square 파형</span>\nosc<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">\"sawtooth\"</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// sawtooth 파형</span>\nosc<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">\"triangle\"</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// triangle 파형</span>\nosc<span class=\"token punctuation\">.</span><span class=\"token function\">setPeriodicWave</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 참고: setWaveTable은 setPeriodicWave로 이름이 바뀌었습니다!</span>\n<span class=\"token keyword\">var</span> isCustom <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>osc<span class=\"token punctuation\">.</span>type <span class=\"token operator\">==</span> <span class=\"token string\">\"custom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// isCustom은 true일 것입니다</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"biquadfilternode.type","title":"BiquadFilterNode.type","isH3":true,"content":"<p><a href=\"/ko/docs/Web/API/BiquadFilterNode\"><code>BiquadFilterNode</code></a>의 type 속성은 Web IDL 열거형을 사용하는 것으로 변경되었습니다. <code>webkitAudioContext</code>를 사용하는 오래된 코드는 아래처럼 <a href=\"/ko/docs/Web/API/AudioContext\"><code>AudioContext</code></a> 기반의 표준으로 변경될 수 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 오래된 webkitAudioContext 코드:</span>\n<span class=\"token keyword\">var</span> filter <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createBiquadFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfilter<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> filter<span class=\"token punctuation\">.</span><span class=\"token constant\">LOWPASS</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// lowpass 필터</span>\nfilter<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> filter<span class=\"token punctuation\">.</span><span class=\"token constant\">HIGHPASS</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// highpass 필터</span>\nfilter<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> filter<span class=\"token punctuation\">.</span><span class=\"token constant\">BANDPASS</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// bandpass 필터</span>\nfilter<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> filter<span class=\"token punctuation\">.</span><span class=\"token constant\">LOWSHELF</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// lowshelf 필터</span>\nfilter<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> filter<span class=\"token punctuation\">.</span><span class=\"token constant\">HIGHSHELF</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// highshelf 필터</span>\nfilter<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> filter<span class=\"token punctuation\">.</span><span class=\"token constant\">PEAKING</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// peaking 필터</span>\nfilter<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> filter<span class=\"token punctuation\">.</span><span class=\"token constant\">NOTCH</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// notch 필터</span>\nfilter<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> filter<span class=\"token punctuation\">.</span><span class=\"token constant\">ALLPASS</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// allpass 필터</span>\n\n<span class=\"token comment\">// 새로운 표준 AudioContext 코드:</span>\n<span class=\"token keyword\">var</span> filter <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createBiquadFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfilter<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">\"lowpass\"</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// lowpass 필터</span>\nfilter<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">\"highpass\"</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// highpass 필터</span>\nfilter<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">\"bandpass\"</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// bandpass 필터</span>\nfilter<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">\"lowshelf\"</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// lowshelf 필터</span>\nfilter<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">\"highshelf\"</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// highshelf 필터</span>\nfilter<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">\"peaking\"</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// peaking 필터</span>\nfilter<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">\"notch\"</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// notch 필터</span>\nfilter<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">\"allpass\"</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// allpass 필터</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"pannernode.panningmodel","title":"PannerNode.panningModel","isH3":true,"content":"<p><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PannerNode\"><code>PannerNode</code> <small>(en-US)</small></a>의 panningModel 속성은 Web IDL 열거형을 사용하는 것으로 변경되었습니다. <code>webkitAudioContext</code>를 사용하는 오래된 코드는 아래처럼 <a href=\"/ko/docs/Web/API/AudioContext\"><code>AudioContext</code></a> 기반의 표준으로 변경될 수 있습니다:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 오래된 webkitAudioContext 코드:</span>\n<span class=\"token keyword\">var</span> panner <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createPanner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npanner<span class=\"token punctuation\">.</span>panningModel <span class=\"token operator\">=</span> panner<span class=\"token punctuation\">.</span><span class=\"token constant\">EQUALPOWER</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// equalpower 패닝</span>\npanner<span class=\"token punctuation\">.</span>panningModel <span class=\"token operator\">=</span> panner<span class=\"token punctuation\">.</span><span class=\"token constant\">HRTF</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// HRTF 패닝</span>\n\n<span class=\"token comment\">// New standard AudioContext code:</span>\n<span class=\"token keyword\">var</span> panner <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createPanner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npanner<span class=\"token punctuation\">.</span>panningModel <span class=\"token operator\">=</span> <span class=\"token string\">\"equalpower\"</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// equalpower 패닝</span>\npanner<span class=\"token punctuation\">.</span>panningModel <span class=\"token operator\">=</span> <span class=\"token string\">\"HRTF\"</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// HRTF 패닝</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"pannernode.distancemodel","title":"PannerNode.distanceModel","isH3":true,"content":"<p><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PannerNode\"><code>PannerNode</code> <small>(en-US)</small></a>의 <code>distanceModel</code> 속성은 Web IDL 열거형을 사용하는 것으로 변경되었습니다. <code>webkitAudioContext</code>를 사용하는 오래된 코드는 아래와 같이 <a href=\"/ko/docs/Web/API/AudioContext\"><code>AudioContext</code></a> 기반의 표준으로 변경될 수 있습니다:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 오래된 webkitAudioContext 코드:</span>\n<span class=\"token keyword\">var</span> panner <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createPanner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npanner<span class=\"token punctuation\">.</span>distanceModel <span class=\"token operator\">=</span> panner<span class=\"token punctuation\">.</span><span class=\"token constant\">LINEAR_DISTANCE</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// linear distance 모델</span>\npanner<span class=\"token punctuation\">.</span>distanceModel <span class=\"token operator\">=</span> panner<span class=\"token punctuation\">.</span><span class=\"token constant\">INVERSE_DISTANCE</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// inverse distance 모델</span>\npanner<span class=\"token punctuation\">.</span>distanceModel <span class=\"token operator\">=</span> panner<span class=\"token punctuation\">.</span><span class=\"token constant\">EXPONENTIAL_DISTANCE</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// exponential distance 모델</span>\n\n<span class=\"token comment\">// 새로운 표준 AudioContext 코드:</span>\n<span class=\"token keyword\">var</span> panner <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createPanner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npanner<span class=\"token punctuation\">.</span>distanceModel <span class=\"token operator\">=</span> <span class=\"token string\">\"linear\"</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// linear distance 모델</span>\npanner<span class=\"token punctuation\">.</span>distanceModel <span class=\"token operator\">=</span> <span class=\"token string\">\"inverse\"</span><span class=\"token punctuation\">;</span>                   <span class=\"token comment\">// inverse distance 모델</span>\npanner<span class=\"token punctuation\">.</span>distanceModel <span class=\"token operator\">=</span> <span class=\"token string\">\"exponential\"</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// exponential distance 모델</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"gain_제어는_이것만의_노드_유형으로_이동됨","title":"Gain 제어는 이것만의 노드 유형으로 이동됨","isH3":false,"content":"<p>Web Audio 표준은 이제 모든 gain을 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/GainNode\"><code>GainNode</code> <small>(en-US)</small></a>를 사용하여 제어합니다. <code>gain</code> 속성을 직접 음원에 설정하는 대신, 여러분은 소스를 gain 노드에 연결하고 이 노드의 <code>gain</code> 파라미터를 사용하여 gain을 제어합니다.</p>"}},{"type":"prose","value":{"id":"audiobuffersourcenode","title":"AudioBufferSourceNode","isH3":true,"content":"<p><a href=\"/ko/docs/Web/API/AudioBufferSourceNode\"><code>AudioBufferSourceNode</code></a>의 <code>gain</code> 특성은 제거되었습니다. 같은 기능은 <a href=\"/ko/docs/Web/API/AudioBufferSourceNode\"><code>AudioBufferSourceNode</code></a>를 gain 노드에 연결함으로써 달성될 수 있습니다. 아래의 예제를 참고하세요:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 오래된 webkitAudioContext 코드:</span>\n<span class=\"token keyword\">var</span> src <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createBufferSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsrc<span class=\"token punctuation\">.</span>buffer <span class=\"token operator\">=</span> someBuffer<span class=\"token punctuation\">;</span>\nsrc<span class=\"token punctuation\">.</span>gain<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\nsrc<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsrc<span class=\"token punctuation\">.</span><span class=\"token function\">noteOn</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 새로운 표준 AudioContext 코드:</span>\n<span class=\"token keyword\">var</span> src <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createBufferSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsrc<span class=\"token punctuation\">.</span>buffer <span class=\"token operator\">=</span> someBuffer<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> gain <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createGain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsrc<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>gain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngain<span class=\"token punctuation\">.</span>gain<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\ngain<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsrc<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"audiobuffer","title":"AudioBuffer","isH3":true,"content":"<p><a href=\"/ko/docs/Web/API/AudioBuffer\"><code>AudioBuffer</code></a>의 <code>gain</code> 특성은 제거되었습니다. 같은 기능은 버퍼를 소유한 <a href=\"/ko/docs/Web/API/AudioBufferSourceNode\"><code>AudioBufferSourceNode</code></a>를 gain 노드에 연결함으로써 달성될 수 있습니다. 아래의 예제를 참고하세요:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 오래된 webkitAudioContext 코드:</span>\n<span class=\"token keyword\">var</span> src <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createBufferSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsrc<span class=\"token punctuation\">.</span>buffer <span class=\"token operator\">=</span> someBuffer<span class=\"token punctuation\">;</span>\nsrc<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">.</span>gain <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\nsrc<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsrc<span class=\"token punctuation\">.</span><span class=\"token function\">noteOn</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 새로운 표준 AudioContext 코드:</span>\n<span class=\"token keyword\">var</span> src <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createBufferSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsrc<span class=\"token punctuation\">.</span>buffer <span class=\"token operator\">=</span> someBuffer<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> gain <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createGain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsrc<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>gain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngain<span class=\"token punctuation\">.</span>gain<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\ngain<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsrc<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"audiobuffersourcenode.looping의_제거","title":"AudioBufferSourceNode.looping의 제거","isH3":false,"content":"<p><a href=\"/ko/docs/Web/API/AudioBufferSourceNode\"><code>AudioBufferSourceNode</code></a>의 <code>looping</code> 특성은 제거되었습니다. 이 특성은 <code>loop</code> 특성의 별명이어서, 여러분은 단지 <code>loop</code> 특성을 대신 사용할 수 있습니다. 이것과 같은 코드를 가지는 대신:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> source <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createBufferSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsource<span class=\"token punctuation\">.</span>looping <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>명세의 최근 버전을 준수하기 위해 여러분은 이것을 변경할 수 있습니다:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> source <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createBufferSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsource<span class=\"token punctuation\">.</span>loop <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>참고: <code>loopStart</code>와 <code>loopEnd</code> 특성은 <code>webkitAudioContext</code>에서 지원되지 않습니다.</p>"}},{"type":"prose","value":{"id":"재생_상태_결정에_대한_변화","title":"재생 상태 결정에 대한 변화","isH3":false,"content":"<p><a href=\"/ko/docs/Web/API/AudioBufferSourceNode\"><code>AudioBufferSourceNode</code></a>와 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OscillatorNode\"><code>OscillatorNode</code> <small>(en-US)</small></a>의 <code>playbackState</code> 특성은 제거되었습니다. 여러분이 이 특성을 사용하는 이유에 따라, 여러분은 같은 정보를 얻기 위해 다음의 기법들을 사용할 수 있습니다.</p>\n<ul>\n  <li>만약 여러분이 이 특성을 <code>UNSCHEDULED_STATE</code>과 비교할 필요가 있다면, 여러분은 기본적으로 여러분이 노드의 <code>start()</code>를 호출했는지 아닌지를 기억할 수 있습니다.</li>\n  <li>만약 여러분이 이 특성을 <code>SCHEDULED_STATE</code>와 비교할 필요가 있다면, 여러분은 기본적으로 여러분이 노드의 <code>start()</code>를 호출했는지 아닌지를 기억할 수 있습니다. 재생이 시작되었는지 아닌지를 알기 위해 여러분은 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/BaseAudioContext/currentTime\"><code>AudioContext.currentTime</code> <small>(en-US)</small></a>의 값을 <code>start()</code>에 전달된 첫번째 매개변수와 비교할 수 있습니다.</li>\n  <li>만약 여러분이 이 특성을 <code>PLAYING_STATE</code>와 비교할 필요가 있다면, 재생이 시작되었는지 아닌지를 알기 위해 여러분은 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/BaseAudioContext/currentTime\"><code>AudioContext.currentTime</code> <small>(en-US)</small></a>의 값을 <code>start()</code>에 전달된 첫번째 매개변수와 비교할 수 있습니다.</li>\n  <li>만약 여러분이 언제 노드의 재생이 끝나는지를 알 필요가 있다면 (이는 <code>playbackState</code>의 가장 중요한 사용 경우입니다), 여러분이 언제 재생이 끝나는지를 알기 위해 사용할 수 있는 새로운 ended 이벤트가 있습니다. 다음의 코드 예제를 봐 주세요:</li>\n</ul>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 오래된 webkitAudioContext 코드:</span>\n<span class=\"token keyword\">var</span> src <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createBufferSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 얼마 후...</span>\n<span class=\"token keyword\">var</span> isFinished <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">.</span>playbackState <span class=\"token operator\">==</span> src<span class=\"token punctuation\">.</span><span class=\"token constant\">FINISHED_STATE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 새로운 AudioContext 코드:</span>\n<span class=\"token keyword\">var</span> src <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createBufferSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">endedHandler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  isFinished <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> isFinished <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\nsrc<span class=\"token punctuation\">.</span>onended <span class=\"token operator\">=</span> endedHandler<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>정확히 같은 변화가 <a href=\"/ko/docs/Web/API/AudioBufferSourceNode\"><code>AudioBufferSourceNode</code></a>와 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OscillatorNode\"><code>OscillatorNode</code> <small>(en-US)</small></a> 모두에 적용되었으므로, 여러분은 같은 기법을 두 종류의 노드에 적용할 수 있습니다.</p>"}},{"type":"prose","value":{"id":"audiocontext.activesourcecount의_제거","title":"AudioContext.activeSourceCount의 제거","isH3":false,"content":"<p><code>activeSourceCount</code> 특성이 <a href=\"/ko/docs/Web/API/AudioContext\"><code>AudioContext</code></a>에서 제거되었습니다. 만약 여러분이 재생되고 있는 소스 노드의 수를 셀 필요가 있다면, 여러분은 위에서 보이는 것처럼, 소스 노드들의 ended 이벤트를 다룸으로써 카운트를 유지할 수 있습니다.</p>\n<p>이 코드처럼, <a href=\"/ko/docs/Web/API/AudioContext\"><code>AudioContext</code></a>의 <code>activeSourceCount</code> 특성을 사용하는 코드:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">var</span> src0 <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createBufferSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> src1 <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createBufferSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 버퍼와 다른 매개변수들을 설정합니다...</span>\n  src0<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  src1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 얼마 후...</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>activeSourceCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>다음과 같이 재작성될 수 있습니다:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token comment\">// 재생되고 있는 소스 노드를 추적할 배열:</span>\n  <span class=\"token keyword\">var</span> sources <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 소스를 시작할 때, 이것을 배열의 끝에 넣고,</span>\n  <span class=\"token comment\">// AudioBufferSourceNode가 끝에 도달했을 때</span>\n  <span class=\"token comment\">// 이것이 확실히 제거되도록 이벤트 처리기를 설정합니다.</span>\n  <span class=\"token comment\">// 첫번째 매개변수는 시작할 AudioBufferSourceNode이고,</span>\n  <span class=\"token comment\">// 다른 매개변수들은 AudioBufferSourceNode의 |start()|에의 매개변수입니다.</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">startSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> src <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> startArgs <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    src<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onended</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      sources<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    sources<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    src<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> startArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">activeSources</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> sources<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">var</span> src0 <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createBufferSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> src0 <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createBufferSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 버퍼와 다른 매개변수들을 설정합니다...</span>\n  <span class=\"token function\">startSource</span><span class=\"token punctuation\">(</span>src0<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">startSource</span><span class=\"token punctuation\">(</span>src1<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 얼마 후, 소스의 수를 확인합니다...</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">activeSources</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"wavetable의_재명명","title":"WaveTable의 재명명","isH3":false,"content":"<p><a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>WaveTable</code></a> 인터페이스는 <a href=\"/ko/docs/Web/API/PeriodicWave\"><code>PeriodicWave</code></a>로 이름이 바뀌었습니다. 여기 <code>WaveTable</code>를 사용하는 낡은 코드를 어떻게 표준 AudioContext API로 옮기는지에 대한 방법이 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 오래된 webkitAudioContext 코드:</span>\n<span class=\"token keyword\">var</span> osc <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createOscillator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> table <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createWaveTable</span><span class=\"token punctuation\">(</span>realArray<span class=\"token punctuation\">,</span> imaginaryArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nosc<span class=\"token punctuation\">.</span><span class=\"token function\">setWaveTable</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 새로운 표준 AudioContext 코드:</span>\n<span class=\"token keyword\">var</span> osc <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createOscillator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> table <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createPeriodicWave</span><span class=\"token punctuation\">(</span>realArray<span class=\"token punctuation\">,</span> imaginaryArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nosc<span class=\"token punctuation\">.</span><span class=\"token function\">setPeriodicWave</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"audioparam의_몇몇_읽기_전용_특성들의_제거","title":"AudioParam의 몇몇 읽기 전용 특성들의 제거","isH3":false,"content":"<p>다음의 읽기 전용 특성들은 AudioParam으로부터 제거되었습니다: <code>name</code>, <code>units</code>, <code>minValue</code>, <code>maxValue</code>. 이것들은 정보를 제공하는 특성들이었습니다. 여기 어떻게 여러분이 이 값들을 만약 필요하다면 얻는지에 대한 정보가 있습니다.</p>\n<ul>\n  <li><code>name</code> 특성은 <a href=\"/ko/docs/Web/API/AudioParam\"><code>AudioParam</code></a> 객체의 이름을 나타내는 문자열입니다. 예를 들자면, <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/GainNode/gain\"><code>GainNode.gain</code> <small>(en-US)</small></a>의 이름은 <code>\"gain\"</code>입니다. 만약 여러분이 이 정보가 필요하다면 코드에서 어디서 <a href=\"/ko/docs/Web/API/AudioParam\"><code>AudioParam</code></a> 객체가 오는지 추적할 수 있습니다.</li>\n  <li><code>minValue</code>와 <code>maxValue</code> 특성은 <a href=\"/ko/docs/Web/API/AudioParam\"><code>AudioParam</code></a>의 명목상의 범위를 나타내는 읽기 전용 값입니다. 예를 들자면, <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/GainNode\"><code>GainNode</code> <small>(en-US)</small></a>에 대해서, 이 값들은 각각 0과 1입니다. 이 경계는 엔진에 의해 강요되지 않고, 단지 정보를 제공하는 목적에서 사용된다는 것에 주목하십시오. 예제로써, gain 값을 2나, 심지어 -1로 설정하는 것은 완전히 유효합니다. 이 명목상의 값들을 찾기 위해서, 여러분은 <a href=\"https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html\" class=\"external\" rel=\" noopener\">명세</a>를 참고할 수 있습니다.</li>\n  <li><code>webkitAudioContext</code> 구현에서 구현된 <code>units</code> 특성은 사용된 적이 없고, 항상 0을 반환합니다. 여러분이 이 특성이 필요할지도 모르는 이유는 없습니다.</li>\n</ul>"}},{"type":"prose","value":{"id":"mediaelementaudiosourcenode.mediaelement의_제거","title":"MediaElementAudioSourceNode.mediaElement의 제거","isH3":false,"content":"<p><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaElementAudioSourceNode\"><code>MediaElementAudioSourceNode</code> <small>(en-US)</small></a>의 <code>mediaElement</code> 특성은 제거되었습니다. 만약 여러분이 나중에 이것에 접근할 필요가 있다면 여러분은 이 노드를 생성하기 위해 사용된 미디어 요소에 대한 참조를 유지할 수 있습니다.</p>"}},{"type":"prose","value":{"id":"mediastreamaudiosourcenode.mediastream의_제거","title":"MediaStreamAudioSourceNode.mediaStream의 제거","isH3":false,"content":"<p><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaStreamAudioSourceNode\"><code>MediaStreamAudioSourceNode</code> <small>(en-US)</small></a>의 <code>mediaStream</code> 특성은 제거되었습니다. 만약 여러분이 나중에 이것에 접근할 필요가 있다면 여러분은 이 노드를 생성하기 위해 사용된 미디어 스트림에 대한 참조를 유지할 수 있습니다.</p>"}}],"toc":[{"text":"생성자 메서드에서의 변화","id":"생성자_메서드에서의_변화"},{"text":"노드를 시작하고 멈추는 것에 대한 변화","id":"노드를_시작하고_멈추는_것에_대한_변화"},{"text":"동기 버퍼 생성 제거","id":"동기_버퍼_생성_제거"},{"text":"AudioParam.setTargetValueAtTime의 재명명","id":"audioparam.settargetvalueattime의_재명명"},{"text":"변경된 열거형 값들","id":"변경된_열거형_값들"},{"text":"Gain 제어는 이것만의 노드 유형으로 이동됨","id":"gain_제어는_이것만의_노드_유형으로_이동됨"},{"text":"AudioBufferSourceNode.looping의 제거","id":"audiobuffersourcenode.looping의_제거"},{"text":"재생 상태 결정에 대한 변화","id":"재생_상태_결정에_대한_변화"},{"text":"AudioContext.activeSourceCount의 제거","id":"audiocontext.activesourcecount의_제거"},{"text":"WaveTable의 재명명","id":"wavetable의_재명명"},{"text":"AudioParam의 몇몇 읽기 전용 특성들의 제거","id":"audioparam의_몇몇_읽기_전용_특성들의_제거"},{"text":"MediaElementAudioSourceNode.mediaElement의 제거","id":"mediaelementaudiosourcenode.mediaelement의_제거"},{"text":"MediaStreamAudioSourceNode.mediaStream의 제거","id":"mediastreamaudiosourcenode.mediastream의_제거"}],"summary":"Web Audio API는 현 상태에 이르기까지 많은 반복을 거쳤습니다. 이것은 처음에 WebKit에서 구현되었고, 이것의 낡은 부분들의 일부는 그것들이 명세에서 대체되는 동안 즉시 제거되지 않았는데, 이는 많은 사이트들이 비호환되는 코드를 사용하는 것으로 이어졌습니다. 이 글에서, 우리는 Web Audio API가 WebKit에서 처음 구현된 이후로의 Web Audio API에서의 차이를 다루고 현대 Web Audio API를 사용하기 위해 어떻게 코드를 업데이트해야 되는지를 다룹니다.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Migrating from webkitAudioContext","locale":"en-US","native":"English (US)"}],"source":{"folder":"ko/web/api/web_audio_api/migrating_from_webkitaudiocontext","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/web/api/web_audio_api/migrating_from_webkitaudiocontext/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ko/docs/Web","title":"개발자를 위한 웹 기술"},{"uri":"/ko/docs/Web/API","title":"Web API"},{"uri":"/ko/docs/Web/API/Web_Audio_API","title":"Web Audio API"},{"uri":"/ko/docs/Web/API/Web_Audio_API/Migrating_from_webkitAudioContext","title":"webkitAudioContext에서 이주하기"}],"pageTitle":"webkitAudioContext에서 이주하기 - Web API | MDN","noIndexing":false}}