{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"AudioWorklet을 사용하는 백그라운드 오디오 프로세싱","mdn_url":"/ko/docs/Web/API/Web_Audio_API/Using_AudioWorklet","locale":"ko","native":"한국어","sidebarHTML":"<ol><li><strong><a href=\"/ko/docs/Web/API/Web_Audio_API\">Web Audio API</a></strong></li><li><strong><a href=\"/ko/docs/Web/API/Web_Audio_API\"><code>Web_Audio_API</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Web Audio API</summary><ol><li><a href=\"/ko/docs/Web/API/AnalyserNode\"><code>AnalyserNode</code></a></li><li><a href=\"/ko/docs/Web/API/AudioBuffer\"><code>AudioBuffer</code></a></li><li><a href=\"/ko/docs/Web/API/AudioBufferSourceNode\"><code>AudioBufferSourceNode</code></a></li><li><a href=\"/ko/docs/Web/API/AudioContext\"><code>AudioContext</code></a></li><li><a href=\"/ko/docs/Web/API/AudioDestinationNode\"><code>AudioDestinationNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioListener\"><code>AudioListener</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/AudioNode\"><code>AudioNode</code></a></li><li><a href=\"/ko/docs/Web/API/AudioParam\"><code>AudioParam</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioProcessingEvent\"><code>AudioProcessingEvent</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/AudioScheduledSourceNode\"><code>AudioScheduledSourceNode</code></a></li><li><a href=\"/ko/docs/Web/API/AudioWorklet\"><code>AudioWorklet</code></a></li><li><a href=\"/ko/docs/Web/API/AudioWorkletGlobalScope\"><code>AudioWorkletGlobalScope</code></a></li><li><a href=\"/ko/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a></li><li><a href=\"/ko/docs/Web/API/AudioWorkletProcessor\"><code>AudioWorkletProcessor</code></a></li><li><a href=\"/ko/docs/Web/API/BaseAudioContext\"><code>BaseAudioContext</code></a></li><li><a href=\"/ko/docs/Web/API/BiquadFilterNode\"><code>BiquadFilterNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ChannelMergerNode\"><code>ChannelMergerNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ChannelSplitterNode\"><code>ChannelSplitterNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ConstantSourceNode\"><code>ConstantSourceNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ConvolverNode\"><code>ConvolverNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DelayNode\"><code>DelayNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DynamicsCompressorNode\"><code>DynamicsCompressorNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/GainNode\"><code>GainNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IIRFilterNode\"><code>IIRFilterNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaElementAudioSourceNode\"><code>MediaElementAudioSourceNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaStreamAudioDestinationNode\"><code>MediaStreamAudioDestinationNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaStreamAudioSourceNode\"><code>MediaStreamAudioSourceNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OfflineAudioCompletionEvent\"><code>OfflineAudioCompletionEvent</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/OfflineAudioContext\"><code>OfflineAudioContext</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OscillatorNode\"><code>OscillatorNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PannerNode\"><code>PannerNode</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/PeriodicWave\"><code>PeriodicWave</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/StereoPannerNode\"><code>StereoPannerNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WaveShaperNode\"><code>WaveShaperNode</code> <small>(en-US)</small></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Web Audio API가 처음 브라우저에 소개되었을 때, 이것은 실시간으로 오디오를 조작하는 사용자 정의 오디오 프로세서를 생성하기 위해 JavaScript 코드를 사용하고 있었습니다. <code>ScriptProcessorNode</code>의 문제점은 단순했습니다: 이것은 메인 스레드에서 실행되기 때문에 실행을 마치기 전까지 다른 모든 동작을 막았습니다. 이러한 방식은 이상적이지 않았습니다. 특히 오디오 프로세싱같이 계산적으로 비용이 많이 들 수 있는 무언가에 대해서 말입니다.</p>\n<p><a href=\"/ko/docs/Web/API/AudioWorklet\"><code>AudioWorklet</code></a>이 도입되었습니다. 오디오 컨텍스트의 오디오 worklet은 메인 스레드에서 떨어져 실행되는 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Worklet\"><code>Worklet</code> <small>(en-US)</small></a>인데, 이는 컨텍스트의 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Worklet/addModule\"><code>audioWorklet.addModule()</code> <small>(en-US)</small></a> 메서드를 호출함으로써 이 worklet에 추가된 오디오 프로세싱 코드를 실행합니다. <code>addModule()</code>을 호출하면 명시된 JavaScript 파일을 로드하는데, 이 파일은 오디오 프로세서의 구현을 포함하고 있어야 합니다. 프로세서가 등록되었다면 여러분은 새로운 <a href=\"/ko/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a>를 생성할 수 있고, 이 노드가 다른 오디오 노드들과 함게 오디오 노드의 체인에 연결되었을 때 이 노드는 프로세서의 코드를 통해 오디오를 전달합니다.</p>\n<p>JavaScript를 사용해 오디오 프로세서를 생성하고, 오디오 worklet 프로세서로서 그것을 등록하고, 그리고 나서 Web Audio 애플리케이션 내에서 그 프로세서를 사용하는 과정이 이 글의 주제입니다.</p>\n<p>오디오 프로세싱이 종종 상당한 계산량을 수반하기 때문에, 여러분의 프로세서가 <a href=\"/ko/docs/WebAssembly\">WebAssembly</a>를 사용하여 개발된다면 큰 이점을 취할 수도 있을 것입니다. 그리고 이렇게 하는 것은 웹 앱에 네이티브에 가깝거나 완전히 네이티브인 성능을 가져다 준다는 것에 주목할 가치가 있습니다. WebAssembly를 사용하여 오디오 프로세싱 알고리즘을 구현하면 오디오 프로세싱이 대단히 뛰어나게 수행될 수 있게 만들 수 있습니다.</p>"}},{"type":"prose","value":{"id":"멀리서_바라본_개요","title":"멀리서 바라본 개요","isH3":false,"content":"<p>단계별 기초를 밟아가며 AudioWorklet의 사용법을 알아보기 전에, 여기에 무엇이 관련되어 있는지 간략한 고수준의 개요를 살펴보며 시작합시다.</p>\n<ol>\n  <li>하나 이상의 들어오는 소스에서 오디오를 취하고, 데이터에 대해 작업을 수행하고, 결과로 오디오 데이터를 출력하는 <a href=\"/ko/docs/Web/API/AudioWorkletProcessor\"><code>AudioWorkletProcessor</code></a>를 상속받는 오디오 worklet 프로세서 클래스를 정의하는 모듈을 만듭니다.</li>\n  <li>오디오 컨텍스트의 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/BaseAudioContext/audioWorklet\"><code>audioWorklet</code> <small>(en-US)</small></a> 속성을 통해 오디오 컨텍스트의 <a href=\"/ko/docs/Web/API/AudioWorklet\"><code>AudioWorklet</code></a>에 접근하고, 오디오 worklet의 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Worklet/addModule\"><code>addModule()</code> <small>(en-US)</small></a> 메서드를 호출하여 오디오 worklet 프로세서 모듈을 설치합니다.</li>\n  <li>필요한 대로, (모듈에 의해 정의된) 프로세서의 이름을 <a href=\"/ko/docs/Web/API/AudioWorkletNode/AudioWorkletNode\" title=\"AudioWorkletNode()\"><code>AudioWorkletNode()</code></a> 생성자에 전달함으로써 오디오 프로세싱 노드를 생성합니다.</li>\n  <li><a href=\"/ko/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a>가 필요로 하는, 또는 여러분이 설정하기를 원하는 오디오 파라미터들을 설정합니다. 이 파라미터들은 오디오 worklet 프로세서 모듈 내에 정의되어 있습니다.</li>\n  <li>다른 노드처럼, 생성된 <code>AudioWorkletNode</code>를 오디오 프로세싱 파이프라인에 연결하고, 오디오 파이프라인을 평상시처럼 사용합니다.</li>\n</ol>\n<p>이 글의 마지막까지 우리는 이 과정들을 예제와 함께 더욱 자세하게 살펴볼 것입니다 (직접 시도해볼 수 있는 작동하는 예제를 포함합니다).</p>\n<p>이 페이지에서 찾을 수 있는 예제 코드는 MDN의 <a href=\"https://github.com/mdn/webaudio-examples/\" class=\"external\" rel=\" noopener\">Web Audio 예제의 GitHub 레포지토리</a>의 일부인 <a href=\"https://mdn.github.io/webaudio-examples/audioworklet/\" class=\"external\" rel=\" noopener\">이 예제</a>에서 왔습니다. 이 예제는 오실레이터 노드를 생성하고 결과로 발생된 사운드를 재생하기 전에 <a href=\"/ko/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a>를 사용하여 이 소리에 백색소음을 추가합니다. 또한, 슬라이더를 사용해 오실레이터와 오디오 worklet의 출력 gain을 제어할 수 있습니다.</p>\n<p><a href=\"https://github.com/mdn/webaudio-examples/tree/master/audioworklet\" class=\"external\" rel=\" noopener\"><strong>코드 보기</strong></a></p>\n<p><a href=\"https://mdn.github.io/webaudio-examples/audioworklet/\" class=\"external\" rel=\" noopener\"><strong>직접 시도해보기</strong></a></p>"}},{"type":"prose","value":{"id":"오디오_worklet_프로세서_생성하기","title":"오디오 worklet 프로세서 생성하기","isH3":false,"content":"<p>기본적으로, 오디오 worklet 프로세서는 JavaScript 모듈을 사용하여 구현되고, 이 JavaScript 모듈은 사용자 정의 오디오 프로세서 클래스를 정의하고 등록합니다 (참고로, 우리는 이 글에서 오디오 worklet 프로세서를 \"오디오 프로세서\" 또는 \"프로세서\"로 나타낼 것입니다. 왜냐하면 그렇지 않을 경우 이 글은 두 배 가량 길어질 것이기 때문입니다).</p>"}},{"type":"prose","value":{"id":"오디오_worklet_프로세서의_구조","title":"오디오 worklet 프로세서의 구조","isH3":true,"content":"<p>오디오 worklet 프로세서는 다음을 포함하는 JavaScript 모듈입니다:</p>\n<ul>\n  <li>오디오 프로세서를 정의하는 JavaScript 클래스. 이 클래스는 <a href=\"/ko/docs/Web/API/AudioWorkletProcessor\"><code>AudioWorkletProcessor</code></a> 클래스를 상속받습니다(extends).</li>\n  <li>오디오 프로세서는 반드시 <a href=\"/ko/docs/Web/API/AudioWorkletProcessor/process\" title=\"process()\"><code>process()</code></a> 메서드를 구현해야 하는데, 이 메서드는 들어오는 오디오 데이터를 받고 프로세서에 의해 조작된 데이터를 출력에 넣습니다.</li>\n  <li>이 모듈은 <a href=\"/ko/docs/Web/API/AudioWorkletGlobalScope/registerProcessor\" title=\"registerProcessor()\"><code>registerProcessor()</code></a>를 호출함으로써 새로운 오디오 worklet 프로세서를 등록하는데, 등록할 때 오디오 프로세서의 이름과 프로세서를 정의하는 클래스를 인자로 전달합니다.</li>\n</ul>\n<p>한 개의 오디오 worklet 프로세서 모듈이 다수의 프로세서 클래스를 정의하고 각 클래스에 대해 <code>registerProcessor()</code>를 호출해 클래스들을 등록할 수도 있을 것입니다. 각 클래스가 고유한 이름을 가지고 있는 한, 이것은 문제 없는 방법입니다. 이 방법은 또한 다수의 모듈을 네트워크나 심지어 사용자의 로컬 디스크로부터 로딩하는 것보다 더욱 효율적입니다.</p>"}},{"type":"prose","value":{"id":"기본_코드_프레임워크","title":"기본 코드 프레임워크","isH3":true,"content":"<p>오디오 프로세서 클래스의 가장 기본적인 프레임워크는 다음과 같습니다:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAudioProcessor</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AudioWorkletProcessor</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">inputList<span class=\"token punctuation\">,</span> outputList<span class=\"token punctuation\">,</span> parameters</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* inputs를 사용하여 (혹은 필요하지 않다면 사용하지 않을 수도 있음),\n       각 outputs의 내부에 있는 출력을 작성합니다 */</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">registerProcessor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my-audio-processor\"</span><span class=\"token punctuation\">,</span> MyAudioProcessor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>프로세서의 구현 이후에 전역 함수 <a href=\"/ko/docs/Web/API/AudioWorkletGlobalScope/registerProcessor\" title=\"registerProcessor()\"><code>registerProcessor()</code></a>를 호출하는데, 이 함수는 오직 오디오 컨텍스트의 <a href=\"/ko/docs/Web/API/AudioWorklet\"><code>AudioWorklet</code></a>의 스코프 내부에서만 사용 가능하고, 이 AudioWorklet은 여러분이 호출한 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Worklet/addModule\"><code>audioWorklet.addModule()</code> <small>(en-US)</small></a>의 결과로써 호출자가 됩니다. 이 <code>registerProcessor()</code> 호출은 <a href=\"/ko/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a>들이 설정되었을 때, 생성된 모든 <a href=\"/ko/docs/Web/API/AudioWorkletProcessor\"><code>AudioWorkletProcessor</code></a>에 대한 기초로써 여러분의 클래스를 등록합니다.</p>\n<p>이것이 가장 기본적인 프레임워크이고 코드가 <code>process()</code>에 추가되어 입력과 출력을 가지고 무언가를 하기 전까지는 실제로는 아무런 효과도 없습니다. 그리고 이제 우리는 입력과 출력에 대해 살펴볼 준비가 되었습니다.</p>"}},{"type":"prose","value":{"id":"입력과_출력_리스트","title":"입력과 출력 리스트","isH3":true,"content":"<p>입력과 출력 리스트가 어떻게 작동하는지 한 번 깨닫고 나면 이것들은 실제로 매우 단순하긴 하지만, 처음에는 조금 혼란스러울 수 있습니다.</p>\n<p>안에서 시작해서 밖으로 나가는 전략을 취해 봅시다. 기본적으로, (예를 들자면 좌측 스피커나 서브우퍼같은) 하나의 오디오 채널에 대한 오디오는 <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Float32Array (en-US)</a>로 표현되는데 이것의 값은 개개의 오디오 샘플입니다. 명세에 따르면, <code>process()</code> 함수가 받는 각 오디오 블럭은 128개의 프레임을 포함하고 있지만 (즉, 각 채널에 대해 128개의 샘플), <strong>이 값이 미래에 바뀔 것이라는 건</strong> 예정되어 있고, 사실은 상황에 따라 다양할 수 있을 것이므로, 여러분은 특정한 크기를 추정하기보다는 <strong>항상</strong> 배열의 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/length\"><code>length</code></a>를 확인해야 할 것입니다. 그러나, 입력과 출력이 같은 블럭 길이를 가질 것이라는 건 보장됩니다.</p>\n<p>각각의 입력은 얼마간의 채널을 가지고 있습니다. 모노 입력은 하나의 채널을 가지고 있고, 스테레오 입력은 두 개의 채널을 가지고 있습니다. 서라운드 사운드는 여섯 개 혹은 그 이상의 채널을 가지고 있을 지도 모릅니다. 그래서 각 입력은, 결국엔, 채널의 배열입니다. 즉, <code>Float32Array</code> 객체의 배열입니다.</p>\n<p>그렇다면, 다수의 입력이 있을 수 있으므로, <code>inputList</code>는 <code>Float32Array</code> 객체의 배열의 배열입니다. 각각의 입력은 각기 다른 수의 채널을 가지고 있을 지도 모르고, 각 채널은 채널마다의 샘플 배열을 가지고 있습니다.</p>\n<p>따라서, 입력 리스트 <code>inputList</code>가 주어지면:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> numberOfInputs <span class=\"token operator\">=</span> inputList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> firstInput <span class=\"token operator\">=</span> inputList<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> firstInputChannelCount <span class=\"token operator\">=</span> firstInput<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> firstInputFirstChannel <span class=\"token operator\">=</span> firstInput<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (또는 inputList[0][0])</span>\n\n<span class=\"token keyword\">const</span> firstChannelByteCount <span class=\"token operator\">=</span> firstInputFirstChannel<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> firstByteOfFirstChannel <span class=\"token operator\">=</span> firstInputFirstChannel<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (또는 inputList[0][0][0])</span>\n</code></pre></div>\n<p>출력 리스트는 정확히 같은 방식으로 구성됩니다; 이것은 출력들의 배열인데, 이것의 각각은 채널들의 배열이고, 이것의 각각은 <code>Float32Array</code> 객체의 배열인데, 이는 그 채널에 대한 샘플을 포함합니다.</p>\n<p>여러분이 어떻게 입력을 사용하고 어떻게 출력을 생성할 것인가는 여러분의 프로세서에 아주 달려 있습니다. 만약 여러분의 프로세서가 단지 생성기라면, 이것은 입력을 무시하고 단지 생성된 데이터로 출력의 내용을 대체할 수 있습니다. 또는 여러분은 각 입력의 각 채널의 들어오는 데이터에 알고리즘을 적용하고 그 결과를 해당하는 출력의 채널에 작성하며 (입력과 출력의 수는 다를지도 모르고, 채널은 또한 다를지도 모르는 이 입력과 출력에 기대고 있다는 것을 명심하십시오), 각각의 입력을 독립적으로 처리할 수 있습니다. 또는 여러분은 모든 입력을 취해서 믹싱이나 데이터로 채워진 하나의 출력 (또는 같은 데이터로 채워진 모든 출력) 을 생성하는 다른 계산을 수행할 수 있습니다.</p>\n<p>이것은 전적으로 여러분에게 달려 있습니다. 이것은 오디오 프로그래밍 툴킷에서 매우 강력한 도구입니다.</p>"}},{"type":"prose","value":{"id":"다수의_입력_처리하기","title":"다수의 입력 처리하기","isH3":true,"content":"<p>해당하는 출력을 생성하기 위해 사용되는 각 입력을 가지고, 다수의 입력을 처리할 수 있는 <code>process()</code>의 구현을 살펴봅시다. 초과되는 입력은 무시됩니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">inputList<span class=\"token punctuation\">,</span> outputList<span class=\"token punctuation\">,</span> parameters</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> sourceLimit <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>inputList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> outputList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> inputNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> inputNum <span class=\"token operator\">&lt;</span> sourceLimit<span class=\"token punctuation\">;</span> inputNum<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> input <span class=\"token operator\">=</span> inputList<span class=\"token punctuation\">[</span>inputNum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> output <span class=\"token operator\">=</span> outputList<span class=\"token punctuation\">[</span>inputNum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> channelCount <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> channelNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> channelNum <span class=\"token operator\">&lt;</span> channelCount<span class=\"token punctuation\">;</span> channelNum<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> sampleCount <span class=\"token operator\">=</span> input<span class=\"token punctuation\">[</span>channelNum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> sampleCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> sample <span class=\"token operator\">=</span> input<span class=\"token punctuation\">[</span>channelNum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/* 샘플 조작하기 */</span>\n\n        output<span class=\"token punctuation\">[</span>channelNum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sample<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>해당하는 출력에 보내고 처리할 소스의 수를 결정할 때, 우리는 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Math/min\"><code>Math.min()</code></a>을 사용해 오직 출력 리스트에 있는 공간만큼의 채널만을 처리한다는 것을 확실히 합니다. 이것과 같은 확인은 현재 입력에서 얼마나 많은 채널을 처리할 지 결정할 때 수행됩니다; 우리는 오직 destination 출력에 있는 공간만큼만 처리합니다. 이렇게 함으로써 우리는 이 배열의 초과 때문에 발생하는 오류들을 방지할 수 있습니다.</p>"}},{"type":"prose","value":{"id":"입력_믹싱하기","title":"입력 믹싱하기","isH3":true,"content":"<p>많은 노드들은 입력들이 어떤 방법으로 하나의 출력으로 결합되는 <strong>믹싱</strong> 작업을 수행합니다. 이는 아래의 예제에서 시연됩니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">inputList<span class=\"token punctuation\">,</span> outputList<span class=\"token punctuation\">,</span> parameters</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> sourceLimit <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>inputList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> outputList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> inputNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> inputNum <span class=\"token operator\">&lt;</span> sourceLimit<span class=\"token punctuation\">;</span> inputNum<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">let</span> input <span class=\"token operator\">=</span> inputList<span class=\"token punctuation\">[</span>inputNum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">let</span> output <span class=\"token operator\">=</span> outputList<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">let</span> channelCount <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> channelNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> channelNum <span class=\"token operator\">&lt;</span> channelCount<span class=\"token punctuation\">;</span> channelNum<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">let</span> sampleCount <span class=\"token operator\">=</span> input<span class=\"token punctuation\">[</span>channelNum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> sampleCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">let</span> sample <span class=\"token operator\">=</span> output<span class=\"token punctuation\">[</span>channelNum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> input<span class=\"token punctuation\">[</span>channelNum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sample <span class=\"token operator\">&gt;</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           sample <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sample <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           sample <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n\n         output<span class=\"token punctuation\">[</span>channelNum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sample<span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>이것은 많은 점에서 이전 예제와 비슷한 코드이지만, 오직 첫번째 출력—<code>outputList[0]</code>—이 변경되었습니다. 값에 제한을 두어서 샘플들이 -1.0에서 1.0 사이의 올바른 범위를 초과하는 것을 방지하기 위해 작동하는 간단한 코드 조각과 함께, 각각의 샘플이 출력 버퍼의 해당하는 샘플에 추가되었습니다; 클리핑을 방지할 아마도 덜 왜곡될 경향이 있는 다른 방법들이 있겠지만, 이것은 아무것도 아닌 것 보다는 나은 간단한 예시를 보여줍니다.</p>"}},{"type":"prose","value":{"id":"오디오_worklet_프로세서의_생애_주기","title":"오디오 worklet 프로세서의 생애 주기","isH3":false,"content":"<p>여러분이 오디오 worklet 프로세서의 생애 주기에 영향을 줄 유일한 수단은 <code>process()</code>에 의해 반환된 값을 통해서인데, 이는 노드가 여전히 사용되고 있는지 아닌지에 대한 <a href=\"/ko/docs/Glossary/User_agent\">user agent</a>의 의사 결정을 무시할지 말지를 나타내는 Boolean 값이어야만 합니다.</p>\n<p>일반적으로, 모든 오디오 노드의 생애 정책은 단순합니다: 만약 노드가 여전히 활발히 오디오를 프로세싱하고 있는 것으로 여겨진다면, 노드는 계속 사용될 것입니다. <a href=\"/ko/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a>의 경우, 만약 이 노드의 <code>process()</code> 함수가 <code>true</code>를 반환하고 <strong>또한</strong> 이 노드가 오디오 데이터에 대해 소스로서 컨텐츠를 생성하거나 하나 이상의 입력으로부터 데이터를 받고 있다면 이 노드는 작동 중인 것으로 여겨집니다.</p>\n<p>본질적으로 <code>process()</code> 함수로부터의 결과로써 <code>true</code>의 값을 명시한다는 것은 Web Audio API에게 심지어 API가 여러분을 위해 할 무언가가 남아있지 않다고 생각한다 할 지라도 여러분의 프로세서가 계속 호출될 필요가 있다고 말해주는 것입니다. 다른 말로 하자면, <code>true</code>는 API의 로직을 무시하고 여러분의 프로세서의 생애 주기 정책에 대한 제어를 제공합니다. 즉, API가 이 노드를 끄기로 결정했을 때일지라도 프로세서가 소유 중인 <a href=\"/ko/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a>의 실행을 유지합니다.</p>\n<p><code>process()</code> 메서드로부터 <code>false</code>를 반환하는 것은 API에게 보통의 로직을 따르고 만약 프로세서 노드를 종료하는 것이 적절하다고 여겨지면 그렇게 해야 한다고 말해주는 것입니다. 만약 API가 여러분의 노드가 더 이상 필요없다고 결정한다면, <code>process()</code>는 다시 호출되지 않을 것입니다.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>참고:</strong> 이 시점에서, 불행하게도, Chrome은 어떤 의미로는 현재 표준에 일치하는 이 알고리즘을 구현하지 않았습니다. 대신, Chrome은 만약 여러분이 <code>true</code>를 반환하면 노드를 살려두고 <code>false</code>를 반환하면 끕니다. 따라서 호환성의 이유로 적어도 Chrome에서는 여러분은 항상 반드시 <code>process()</code>에서 <code>true</code>를 반환해야 합니다. 그러나, <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=921354\" class=\"external\" rel=\" noopener\">이 Chrome 이슈</a>가 수정되고 나면, 이것은 성능에 약간 부정적인 영향을 가질지도 모르므로 여러분은 만약 가능하다면 이 동작을 변경하고자 할 것입니다.</p>\n</div>"}},{"type":"prose","value":{"id":"오디오_프로세서_worklet_노드_생성하기","title":"오디오 프로세서 worklet 노드 생성하기","isH3":false,"content":"<p><a href=\"/ko/docs/Web/API/AudioWorkletProcessor\"><code>AudioWorkletProcessor</code></a>를 통해 오디오 데이터 블럭을 채우는 오디오 노드를 생성하려면, 여러분은 다음의 간단한 단계를 따를 필요가 있습니다:</p>\n<ol>\n  <li>오디오 프로세서 모듈을 로드하고 설치하기</li>\n  <li>프로세서의 이름으로 사용할 오디오 프로세서 모듈을 명시하며, <a href=\"/ko/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a> 생성하기</li>\n  <li><code>AudioWorkletNode</code>에 입력을 연결하고 이 노드의 출력을 적절한 destination에 연결하기 (이는 다른 노드거나 <a href=\"/ko/docs/Web/API/AudioContext\"><code>AudioContext</code></a> 객체의 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/BaseAudioContext/destination\"><code>destination</code> <small>(en-US)</small></a> 속성입니다).</li>\n</ol>\n<p>오디오 worklet 프로세서를 사용하기 위해서, 여러분은 다음과 유사한 코드를 사용할 수 있습니다:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> audioContext <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createMyAudioProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>audioContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      audioContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AudioContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">await</span> audioContext<span class=\"token punctuation\">.</span><span class=\"token function\">resume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">await</span> audioContext<span class=\"token punctuation\">.</span>audioWorklet<span class=\"token punctuation\">.</span><span class=\"token function\">addModule</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"module-url/module.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AudioWorkletNode</span><span class=\"token punctuation\">(</span>audioContext<span class=\"token punctuation\">,</span> <span class=\"token string\">\"processor-name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>이 <code>createMyAudioProcessor()</code> 함수는 여러분의 오디오 프로세서를 사용하기 위해 설정된 <a href=\"/ko/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a>의 새로운 인스턴스를 생성하고 반환합니다. 이 함수는 또한 만약 오디오 컨텍스트 생성이 이미 완료되지 않았다면 오디오 컨텍스트 생성을 다룹니다.</p>\n<p>컨텍스트가 사용 가능함을 확실히 하기 위해서, 이 함수는 컨텍스트가 이미 사용 가능하지 않다면 컨텍스트를 생성함으로써 시작하고, 그리고 나서 프로세서를 포함하는 모듈을 worklet에 추가합니다. 이 작업이 완료되고 나면, 이 함수는 새로운 <code>AudioWorkletNode</code>를 인스턴스화하고 반환합니다. 반환된 노드를 얻었다면, 여러분은 이 노드를 다른 노드들에 연결할 수 있고 그게 아니라면 여타 다른 노드처럼 사용할 수 있습니다.</p>\n<p>다음의 코드를 통해 여러분은 새로운 오디오 프로세서 노드를 생성할 수 있습니다:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> newProcessorNode <span class=\"token operator\">=</span> <span class=\"token function\">createMyAudioProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>만약 반환된 값 <code>newProcessorNode</code>가 <code>null</code>이 아니라면, 우리는 작동하고 사용될 준비가 된 백색소음 프로세서 노드와 함께 유효한 오디오 컨텍스트를 가지고 있는 것입니다.</p>"}},{"type":"prose","value":{"id":"오디오_파라미터_지원하기","title":"오디오 파라미터 지원하기","isH3":false,"content":"<p>다른 Web Audio 노드들처럼, <a href=\"/ko/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a>은 파라미터를 지원하는데, 이는 실제 작업을 하는 <a href=\"/ko/docs/Web/API/AudioWorkletProcessor\"><code>AudioWorkletProcessor</code></a>와 공유됩니다.</p>"}},{"type":"prose","value":{"id":"프로세서에_파라미터_지원_추가하기","title":"프로세서에 파라미터 지원 추가하기","isH3":true,"content":"<p><a href=\"/ko/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a>에 파라미터를 추가하기 위해서, 여러분은 모듈 내의 <a href=\"/ko/docs/Web/API/AudioWorkletProcessor\"><code>AudioWorkletProcessor</code></a> 기반의 프로세서 클래스 내에서 파라미터들을 정의할 필요가 있습니다. 이 작업은 static getter <a href=\"/ko/docs/Web/API/AudioWorkletProcessor/parameterDescriptors\" title=\"parameterDescriptors\"><code>parameterDescriptors</code></a>를 클래스에 추가함으로써 이루어질 수 있습니다. 이 함수는 <a href=\"/ko/docs/Web/API/AudioParam\"><code>AudioParam</code></a> 객체들의 배열을 반환해야 하는데, 이 객체는 프로세서에 의해 지원되는 각 파라미터에 대해 하나씩입니다.</p>\n<p>다음의 <code>parameterDescriptors()</code> 구현에서, 반환된 배열은 두 개의 <code>AudioParam</code> 객체를 가지고 있습니다. 첫번째 파라미터는 <code>gain</code>을 기본값이 0.5인 0과 1 사이의 값으로 정의했습니다. 두번째 파라미터의 이름은 <code>frequency</code>이고 기본값은 440.0인데, 그 범위는 전부 통틀어 27.5에서 4186.009까지입니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">parameterDescriptors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n   <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gain\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">defaultValue</span><span class=\"token operator\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">minValue</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">maxValue</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"frequency\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">defaultValue</span><span class=\"token operator\">:</span> <span class=\"token number\">440.0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token literal-property property\">minValue</span><span class=\"token operator\">:</span> <span class=\"token number\">27.5</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">maxValue</span><span class=\"token operator\">:</span> <span class=\"token number\">4186.009</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>프로세서 노드의 파라미터들에 접근하는 것은 그것들을 <a href=\"/ko/docs/Web/API/AudioWorkletProcessor/process\" title=\"process()\"><code>process()</code></a>의 구현에 전달된 <code>parameters</code> 객체에서 찾는 것만큼이나 간단합니다. <code>parameters</code> 객체 내부에 있는 것은 배열들인데, 각 파라미터 당 하나이고, 파라미터로서 같은 이름을 공유합니다.</p>\n<dl>\n  <dt id=\"a-rate_파라미터\">A-rate 파라미터</dt>\n  <dd>\n    <p>a-rate 파라미터에 대해서—시간에 따라 값이 자동적으로 변하는 파라미터—<code>parameters</code> 객체에서 파라미터의 엔트리는 <a href=\"/ko/docs/Web/API/AudioParam\"><code>AudioParam</code></a> 객체들의 배열인데, 처리되고 있는 블록의 각 프레임 당 하나입니다. 이 값들은 해당하는 프레임들에 적용될 것입니다.</p>\n  </dd>\n  <dt id=\"k-rate_파라미터\">K-rate 파라미터</dt>\n  <dd>\n    <p>반면에 K-rate 파라미터는, 블럭당 한 번만 변할 수 있어서, 파라미터의 배열은 오직 하나의 엔트리를 가집니다. 블럭의 모든 프레임에 대해 이 값을 사용하십시오.</p>\n  </dd>\n</dl>\n<p>아래의 코드에서, 우리는 a-rate 또는 k-rate 파라미터로 쓰일 수 있는 <code>gain</code> 파라미터를 다루는 <code>process()</code> 함수를 볼 수 있습니다. 우리의 노드는 오직 하나의 입력만을 지원하므로, 이 노드는 단지 리스트의 첫번째 입력만을 취하고, gain을 이 입력에 적용하고, 결과로 생성된 데이터를 첫번째 출력의 버퍼에 작성합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">inputList<span class=\"token punctuation\">,</span> outputList<span class=\"token punctuation\">,</span> parameters</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> inputList<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> outputList<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> gain <span class=\"token operator\">=</span> parameters<span class=\"token punctuation\">.</span>gain<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> channelNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> channelNum <span class=\"token operator\">&lt;</span> input<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> channel<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> inputChannel <span class=\"token operator\">=</span> input<span class=\"token punctuation\">[</span>channel<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> outputChannel <span class=\"token operator\">=</span> output<span class=\"token punctuation\">[</span>channel<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 만약 gain.length가 1이면, 이것은 k-rate 파라미터이므로,</span>\n    <span class=\"token comment\">// 첫번째 엔트리를 모든 프레임에 적용합니다.</span>\n    <span class=\"token comment\">// 그렇지 않으면, 각 엔트리를 해당하는 프레임에 적용합니다.</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>gain<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> inputChannel<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        outputChannel<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> inputChannel<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> gain<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> inputChannel<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        outputChannel<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> inputChannel<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> gain<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>여기서, 만약 <code>gain.length</code>가 <code>gain</code> 파라미터의 값들의 배열에 오직 하나의 값만이 있다는 것을 나타내면, 배열에 있는 첫번째 엔트리가 블럭의 모든 프레임에 적용됩니다. 그렇지 않으면, 블럭의 각 프레임에 대해, <code>gain[]</code>에 있는 해당하는 엔트리가 적용됩니다.</p>"}},{"type":"prose","value":{"id":"메인_스레드_스크립트에서_파라미터_접근하기","title":"메인 스레드 스크립트에서 파라미터 접근하기","isH3":true,"content":"<p>여러분의 메인 스레드 스크립트는 다른 노드들이 할 수 있는 것과 마찬가지로 파라미터에 접근할 수 있습니다. 이렇게 하기 위해서는, 첫째로 여러분은 <a href=\"/ko/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a>의 <a href=\"/ko/docs/Web/API/AudioWorkletNode/parameters\" title=\"parameters\"><code>parameters</code></a> 속성의 <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>get()</code></a> 메서드를 호출함으로써 파라미터에 대한 참조를 얻을 필요가 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> gainParam <span class=\"token operator\">=</span> myAudioWorkletNode<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gain\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>gainParam</code>에 반환되고 저장된 값은 <code>gain</code> 파라미터를 저장하기 위해 사용된 <a href=\"/ko/docs/Web/API/AudioParam\"><code>AudioParam</code></a>입니다. 여러분은 그리고 나서 <a href=\"/ko/docs/Web/API/AudioParam\"><code>AudioParam</code></a> 메서드 <a href=\"/ko/docs/Web/API/AudioParam/setValueAtTime\" title=\"setValueAtTime()\"><code>setValueAtTime()</code></a>을 사용하여 주어진 시간의 값을 효과적으로 바꿀 수 있습니다.</p>\n<p>예를 들어, 여기서, 우리는 값을 <code>newValue</code>로, 효과적으로 즉시 설정했습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>gainParam<span class=\"token punctuation\">.</span><span class=\"token function\">setValueAtTime</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">,</span> audioContext<span class=\"token punctuation\">.</span>currentTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>여러분은 유사하게 <a href=\"/ko/docs/Web/API/AudioParam\"><code>AudioParam</code></a> 인터페이스에 있는 다른 모든 메서드를 시간에 따른 변화를 적용하기 위해, 예정된 변화를 취소하기 위해, 그리고 등등을 위해 사용할 수 있습니다.</p>\n<p>파라미터의 값을 읽는 것은 <a href=\"/ko/docs/Web/API/AudioParam/value\" title=\"value\"><code>value</code></a> 속성을 보는 것 만큼이나 간단합니다:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> currentGain <span class=\"token operator\">=</span> gainParam<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"같이_보기","title":"같이 보기","isH3":false,"content":"<ul>\n  <li><a href=\"/ko/docs/Web/API/Web_Audio_API\">Web Audio API</a></li>\n  <li><a href=\"https://developers.google.com/web/updates/2017/12/audio-worklet\" class=\"external\" rel=\" noopener\">Enter Audio Worklet</a> (Google Developers 블로그)</li>\n</ul>"}}],"toc":[{"text":"멀리서 바라본 개요","id":"멀리서_바라본_개요"},{"text":"오디오 worklet 프로세서 생성하기","id":"오디오_worklet_프로세서_생성하기"},{"text":"오디오 worklet 프로세서의 생애 주기","id":"오디오_worklet_프로세서의_생애_주기"},{"text":"오디오 프로세서 worklet 노드 생성하기","id":"오디오_프로세서_worklet_노드_생성하기"},{"text":"오디오 파라미터 지원하기","id":"오디오_파라미터_지원하기"},{"text":"같이 보기","id":"같이_보기"}],"summary":"Web Audio API가 처음 브라우저에 소개되었을 때, 이것은 실시간으로 오디오를 조작하는 사용자 정의 오디오 프로세서를 생성하기 위해 JavaScript 코드를 사용하고 있었습니다. ScriptProcessorNode의 문제점은 단순했습니다: 이것은 메인 스레드에서 실행되기 때문에 실행을 마치기 전까지 다른 모든 동작을 막았습니다. 이러한 방식은 이상적이지 않았습니다. 특히 오디오 프로세싱같이 계산적으로 비용이 많이 들 수 있는 무언가에 대해서 말입니다.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Background audio processing using AudioWorklet","locale":"en-US","native":"English (US)"}],"source":{"folder":"ko/web/api/web_audio_api/using_audioworklet","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/web/api/web_audio_api/using_audioworklet/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ko/docs/Web","title":"개발자를 위한 웹 기술"},{"uri":"/ko/docs/Web/API","title":"Web API"},{"uri":"/ko/docs/Web/API/Web_Audio_API","title":"Web Audio API"},{"uri":"/ko/docs/Web/API/Web_Audio_API/Using_AudioWorklet","title":"AudioWorklet을 사용하는 백그라운드 오디오 프로세싱"}],"pageTitle":"AudioWorklet을 사용하는 백그라운드 오디오 프로세싱 - Web API | MDN","noIndexing":false}}