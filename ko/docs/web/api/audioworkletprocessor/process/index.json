{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"AudioWorkletProcessor.process","mdn_url":"/ko/docs/Web/API/AudioWorkletProcessor/process","locale":"ko","native":"한국어","sidebarHTML":"<ol><li><strong><a href=\"/ko/docs/Web/API/Web_Audio_API\">Web Audio API</a></strong></li><li><strong><a href=\"/ko/docs/Web/API/AudioWorkletProcessor\"><code>AudioWorkletProcessor</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/ko/docs/Web/API/AudioWorkletProcessor/AudioWorkletProcessor\"><code>AudioWorkletProcessor()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg><a href=\"/ko/docs/Web/API/AudioWorkletProcessor/parameterDescriptors\"><code>parameterDescriptors (static getter)</code></a></li><li><a href=\"/ko/docs/Web/API/AudioWorkletProcessor/port\"><code>port</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg><em><code>process()</code></em></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Web Audio API</summary><ol><li><a href=\"/ko/docs/Web/API/AnalyserNode\"><code>AnalyserNode</code></a></li><li><a href=\"/ko/docs/Web/API/AudioBuffer\"><code>AudioBuffer</code></a></li><li><a href=\"/ko/docs/Web/API/AudioBufferSourceNode\"><code>AudioBufferSourceNode</code></a></li><li><a href=\"/ko/docs/Web/API/AudioContext\"><code>AudioContext</code></a></li><li><a href=\"/ko/docs/Web/API/AudioDestinationNode\"><code>AudioDestinationNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioListener\"><code>AudioListener</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/AudioNode\"><code>AudioNode</code></a></li><li><a href=\"/ko/docs/Web/API/AudioParam\"><code>AudioParam</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioProcessingEvent\"><code>AudioProcessingEvent</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/AudioScheduledSourceNode\"><code>AudioScheduledSourceNode</code></a></li><li><a href=\"/ko/docs/Web/API/AudioWorklet\"><code>AudioWorklet</code></a></li><li><a href=\"/ko/docs/Web/API/AudioWorkletGlobalScope\"><code>AudioWorkletGlobalScope</code></a></li><li><a href=\"/ko/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a></li><li><a href=\"/ko/docs/Web/API/BaseAudioContext\"><code>BaseAudioContext</code></a></li><li><a href=\"/ko/docs/Web/API/BiquadFilterNode\"><code>BiquadFilterNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ChannelMergerNode\"><code>ChannelMergerNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ChannelSplitterNode\"><code>ChannelSplitterNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ConstantSourceNode\"><code>ConstantSourceNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ConvolverNode\"><code>ConvolverNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DelayNode\"><code>DelayNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DynamicsCompressorNode\"><code>DynamicsCompressorNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/GainNode\"><code>GainNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IIRFilterNode\"><code>IIRFilterNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaElementAudioSourceNode\"><code>MediaElementAudioSourceNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaStreamAudioDestinationNode\"><code>MediaStreamAudioDestinationNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaStreamAudioSourceNode\"><code>MediaStreamAudioSourceNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OfflineAudioCompletionEvent\"><code>OfflineAudioCompletionEvent</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/OfflineAudioContext\"><code>OfflineAudioContext</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OscillatorNode\"><code>OscillatorNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PannerNode\"><code>PannerNode</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/PeriodicWave\"><code>PeriodicWave</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/StereoPannerNode\"><code>StereoPannerNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WaveShaperNode\"><code>WaveShaperNode</code> <small>(en-US)</small></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/ko/docs/Web/API/AudioWorkletProcessor\"><code>AudioWorkletProcessor</code></a>에서 파생된 클래스의 <strong><code>process()</code></strong> 메서드는 오디오 프로세서 worklet에 대한 오디오 프로세싱 알고리즘을 구현합니다.</p>\n<p>비록 이 메서드가 <a href=\"/ko/docs/Web/API/AudioWorkletProcessor\"><code>AudioWorkletProcessor</code></a> 인터페이스의 일부가 아니긴 하지만, <code>AudioWorkletProcessor</code> 의 모든 구현은 반드시 <code>process()</code> 메서드를 제공해야 합니다.</p>\n<p>이 메서드는 오디오 렌더링 스레드에서 프로세서의 해당하는 <a href=\"/ko/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a>를 통해 향해지고 있는 (또한 렌더링 quantum으로도 알려져 있는) 각 오디오 블럭에 대해 한 번 동기적으로 호출됩니다. 다른 말로 하자면, 여러분의 프로세서가 조작할 새로운 오디오 블럭이 준비될 때마다, <code>process()</code> 함수가 그렇게 하기 위해 호출됩니다.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p>\n    <strong>참고:</strong> 현재, 오디오 데이터 블럭은 항상 128 프레임\n    길이입니다—즉, 그것들은 입력들의 채널의 각각에 대해\n    128개의 32비트 부동점 샘플을 포함합니다. 그러나, 오디오 블럭의 크기가 상황에 따라\n    달라지게 할 수 있도록 명세를 개정할 준비가 이미 되어 있습니다\n    (예를 들자면, 만약 오디오 하드웨어나 CPU 활용이\n    더 큰 블럭 크기에서 더욱 효율적인 경우). 그러므로,\n    여러분은 특정한 크기를 추정하기보다는 <strong>항상 반드시 샘플 배열의 크기를 확인</strong> 해야 합니다.\n  </p>\n  <p>\n    이 크기는 심지어 시간에 따라 바뀌게 허용될지도 모르므로,\n    여러분은 절대로 단지 첫번째 블럭만을 보고 샘플 버퍼가 항상 같은 크기일 것이라고 추정해서는 안 됩니다.\n  </p>\n</div>"}},{"type":"prose","value":{"id":"구문","title":"구문","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> isActivelyProcessing <span class=\"token operator\">=</span> audioWorkletProcessor<span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> outputs<span class=\"token punctuation\">,</span> parameters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"매개변수","title":"매개변수","isH3":true,"content":"<dl>\n  <dt id=\"inputs\"><code>inputs</code></dt>\n  <dd>\n    <p>노드에 연결된 <em>inputs</em> 의 배열인데, 이것의 각각의 원소는 결국 <em>channel</em> 들의 배열입니다. 각 <em>channel</em> 은 128개의 샘플을 포함하고 있는 <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>Float32Array</code></a>입니다. 예를 들자면, <code>inputs[n][m][i]</code> 는 <em>n</em> 번째 입력, 그 입력의 <em>m</em> 번째 채널, 그 채널의 <em>i</em> 번째 샘플에 접근할 것입니다.</p>\n    <p>각 샘플 값은 <code>[-1 .. 1]</code> 의 범위 내에 있습니다.</p>\n    <p><em>inputs</em> 의 수와 따라서 그 배열의 길이는 노드의 생성에 고정되어 있습니다 (<a href=\"/ko/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a>를 참고하세요). 만약 노드의 <em>n</em> 번째 입력에 연결된 활성화된 노드가 없다면, <code>inputs[n]</code> 는 빈 배열일 것입니다 (0개의 입력 채널 사용 가능).</p>\n    <p>각 입력의 <em>channel</em> 들의 수는 <a href=\"/ko/docs/Web/API/AudioNode/channelCount\" title=\"channelCount\"><code>channelCount</code></a>와 <a href=\"/ko/docs/Web/API/AudioNode/channelCountMode\" title=\"channelCountMode\"><code>channelCountMode</code></a> 속성에 따라 다양할 수 있습니다.</p>\n  </dd>\n  <dt id=\"outputs\"><code>outputs</code></dt>\n  <dd>\n    <p>구조적으로 <code>inputs</code> 매개변수와 유사한 <em>outputs</em> 의 배열. 이것은 <code>process()</code> 메서드의 실행 중에 채워지도록 의도되었습니다. 각 출력 채널은 기본적으로 0으로 채워집니다 — 출력 배열이 수정되지 않는 한 프로세서는 무음을 출력할 것입니다.</p>\n  </dd>\n  <dt id=\"parameters\"><code>parameters</code></dt>\n  <dd>\n    <p>문자열 키와 <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>Float32Array</code></a> 값들을 포함하고 있는 객체. <a href=\"/ko/docs/Web/API/AudioWorkletProcessor/parameterDescriptors\" title=\"parameterDescriptors\"><code>parameterDescriptors</code></a> getter를 사용해 정의된 각각의 사용자 정의 <a href=\"/ko/docs/Web/API/AudioParam\"><code>AudioParam</code></a>에 대해, 이 객체의 키는 그 <a href=\"/ko/docs/Web/API/AudioParam\"><code>AudioParam</code></a>의 <code>name</code> 이고, 그 값은 <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>Float32Array</code></a>입니다. 배열의 값들은 예정된 자동화 이벤트를 고려함으로써 계산됩니다.</p>\n    <p>만약 이 매개변수의 자동화 비율이<a href=\"/ko/docs/Web/API/AudioParam#a-rate\"><code>\"a-rate\"</code></a>라면, 배열은 128개의 값 — 현재 오디오 블럭에 있는 각 프레임에 대해 하나 — 을 포함할 것입니다. 만약 현재 블럭에 의해 표현된 시간 중에 발생한 자동화가 없다면, 128개의 동일한 값 대신 배열은 모든 블럭에 대해 변함없는 하나의 값을 포함할 것입니다.</p>\n    <p>만약 자동화 비율이 <a href=\"/ko/docs/Web/API/AudioParam#k-rate\"><code>\"k-rate\"</code></a>라면, 배열은 하나의 값을 포함할 것인데, 이는 128 프레임 각각에 대해 사용될 것입니다.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"반환_값","title":"반환 값","isH3":true,"content":"<p><a href=\"/ko/docs/Glossary/User_agent\">사용자 에이전트의</a> 내부 로직이 노드를 끄는 것이 안전하다고 다르게 판단할 지라도 <a href=\"/ko/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a>를 활성화된 채로 유지하게 할 것인지 말 것인지를 나타내는 Boolean 값.</p>\n<p>반환된 값은 프로세서가 <a href=\"/ko/docs/Web/API/AudioWorkletProcessor\"><code>AudioWorkletProcessor</code></a>와 이것을 소유하는 노드의 생애 주기 정책에 영향을 끼칠 수 있게 합니다. 만약 반환 값과 노드 상태의 조합이 브라우저로 하여금 노드를 멈추게 결정한다면, <code>process()</code>는 다시 호출되지 않을 것입니다.</p>\n<p><code>true</code> 를 반환하는 것은 Web Audio API가 노드를 계속 살려두게 하는 반면, <code>false</code> 를 반환하는 것은 만약 노드가 새로운 오디오 데이터를 생성하는 것도 아니고 처리되고 있는 이것의 입력을 통해 데이터를 받고 있는 것도 아니라면 브라우저가 노드를 제거할 수 있게 합니다.</p>\n<p>세 가지 가장 흔한 유형의 오디오 노드는:</p>\n<ol>\n  <li>출력의 소스. 이런 노드를 구현하는 <a href=\"/ko/docs/Web/API/AudioWorkletProcessor\"><code>AudioWorkletProcessor</code></a>는 이것이 출력을 생산하는 한 <code>process</code> 메서드에서 <code>true</code> 를 반환해야 합니다. 이 메서드는 이것이 더 이상 출력을 생산하지 않을 것이라는 것을 알게 되지마자 <code>false</code> 를 반환해야 합니다. 예시로, <a href=\"/ko/docs/Web/API/AudioBufferSourceNode\"><code>AudioBufferSourceNode</code></a>를 생각해 보십시오 — 이런 노드 뒤의 프로세서는 버퍼가 재생되는 동안 <code>process</code> 메서드에서 <code>true</code> 를 반환해야 하고, 버퍼 재생이 끝났을 때 <code>false</code> 반환을 시작해야 합니다 (같은 <a href=\"/ko/docs/Web/API/AudioBufferSourceNode\"><code>AudioBufferSourceNode</code></a>에서 다시 <code>play</code> 를 호출할 방법은 없습니다).</li>\n  <li>입력을 변형시키는 노드. 이런 노드를 구현하는 프로세서는 활동 중인 입력 노드들의 존재와 그 노드에 대한 참조들이 garbage-collected 될 수 있는지를 결정할 수 있게 허용하도록 <code>process</code> 메서드에서 <code>false</code> 를 반환해야 합니다. 이 동작을 하는 노드의 예시는 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/GainNode\"><code>GainNode</code> <small>(en-US)</small></a>입니다. 연결된 입력과 유지되는 참조가 없어지자마자, gain은 더 이상 무엇에도 적용되지 않을 수 있으므로, 이것은 안전하게 garbage-collected 될 수 있습니다.</li>\n  <li>입력을 변형시키나 소위 <em>tail-time</em> 을 가지고 있는 노드 — 이는 이것이 심지어 입력이 끊기거나 활동이 없는 후일지라도 (0개의 채널을 생산) 몇 번에 대해 출력을 생산할 것임을 의미합니다. 이런 노드를 구현하는 프로세서는 <code>process</code> 메서드에서, 0개의 채널을 포함하는 입력이 발견되자마자 시작하며, <em>tail-time</em> 의 기간 동안 <code>true</code> 를 반환해야 합니다.</li>\n</ol>\n<p><strong>참고</strong>: <code>return</code> 문의 부재는 이 메서드가 <code>undefined</code> 를 반환할 것임을 의미하고, 이것은 falsy 값이므로, 이것은 <code>false</code>를 반환하는 것과도 같습니다. 명시적인 <code>return</code> 문을 누락하는 것은 여러분의 노드에서 감지하기 어려운 문제를 야기할 수도 있습니다.</p>"}},{"type":"prose","value":{"id":"예외","title":"예외","isH3":true,"content":"<p><code>process()</code> 메서드는 유저에 의해 구현되므로, 이것은 아무 것이나 발생시킬 수 있습니다. 만약 uncaught error가 발생된다면, 노드는 <a href=\"/ko/docs/Web/API/AudioWorkletNode/processorerror_event\" title=\"onprocessorerror\"><code>onprocessorerror</code></a> 이벤트를 발생시킬 것이고 이것의 생애 주기의 나머지 동안 무음을 출력할 것입니다.</p>"}},{"type":"prose","value":{"id":"예제","title":"예제","isH3":false,"content":"<p>이 예제에서 우리는 프로세서의 첫번째 출력에 백색소음을 출력하는 <code>AudioWorkletProcessor</code> 를 생성할 것입니다. gain은 <code>customGain</code> 파라미터에 의해 제어될 수 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">WhiteNoiseProcessor</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AudioWorkletProcessor</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">process</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">inputs<span class=\"token punctuation\">,</span> outputs<span class=\"token punctuation\">,</span> parameters</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 첫번째 출력을 취합니다</span>\n    <span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> outputs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\">// 각 채널을 gain에 의해 곱해진 무작위 값으로 채웁니다</span>\n    output<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">channel</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> channel<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 각 샘플에 대해 무작위 값을 생성합니다</span>\n        <span class=\"token comment\">// Math.random의 범위는 [0; 1)입니다; 우리는 [-1; 1]이 필요합니다</span>\n        <span class=\"token comment\">// 이것은 정확한 1을 포함하지 않을 것이지만 단순성을 위해 지금으로선 괜찮습니다</span>\n        channel<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>\n          <span class=\"token comment\">// 배열은 자동화가 존재하는지와</span>\n          <span class=\"token comment\">// 자동화가 k-rate인지 a-rate인지에 따라</span>\n          <span class=\"token comment\">// 1개 또는 128개의 값을 포함할 수 있습니다</span>\n          <span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">[</span><span class=\"token string\">'customGain'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span>\n            <span class=\"token operator\">?</span> parameters<span class=\"token punctuation\">[</span><span class=\"token string\">'customGain'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n            <span class=\"token operator\">:</span> parameters<span class=\"token punctuation\">[</span><span class=\"token string\">'customGain'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 이것은 자신만의 출력을 생성하는 소스 노드이므로, 만약 우리가</span>\n    <span class=\"token comment\">// 메인 스레드에서 이것에 대해 어떠한 참조도 가지고 있지 않는다면</span>\n    <span class=\"token comment\">// 이것이 뜻하지 않게 garbage-collected되지 않도록 우리는 true를 반환할 것입니다</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// process 메서드에서 사용되는 customGain 파라미터를 정의합니다</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">parameterDescriptors</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'customGain'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">defaultValue</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">minValue</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">maxValue</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">automationRate</span><span class=\"token operator\">:</span> <span class=\"token string\">'a-rate'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"명세서","id":"명세서","isH3":false,"query":"api.AudioWorkletProcessor.process","specifications":[]}},{"type":"browser_compatibility","value":{"title":"브라우저 호환성","id":"브라우저_호환성","isH3":false,"data":null,"query":"api.AudioWorkletProcessor.process","browsers":null}},{"type":"prose","value":{"id":"같이_보기","title":"같이 보기","isH3":false,"content":"<ul>\n  <li><a href=\"/ko/docs/Web/API/Web_Audio_API/Using_Web_Audio_API\">Web Audio\nAPI 사용하기</a></li>\n</ul>"}}],"toc":[{"text":"구문","id":"구문"},{"text":"예제","id":"예제"},{"text":"명세서","id":"명세서"},{"text":"브라우저 호환성","id":"브라우저_호환성"},{"text":"같이 보기","id":"같이_보기"}],"summary":"AudioWorkletProcessor에서 파생된 클래스의 process() 메서드는 오디오 프로세서 worklet에 대한 오디오 프로세싱 알고리즘을 구현합니다.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"AudioWorkletProcessor.process()","locale":"en-US","native":"English (US)"}],"source":{"folder":"ko/web/api/audioworkletprocessor/process","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/web/api/audioworkletprocessor/process/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ko/docs/Web","title":"개발자를 위한 웹 기술"},{"uri":"/ko/docs/Web/API","title":"Web API"},{"uri":"/ko/docs/Web/API/AudioWorkletProcessor","title":"AudioWorkletProcessor"},{"uri":"/ko/docs/Web/API/AudioWorkletProcessor/process","title":"AudioWorkletProcessor.process"}],"pageTitle":"AudioWorkletProcessor.process - Web API | MDN","noIndexing":false}}