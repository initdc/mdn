{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"AudioWorkletProcessor","mdn_url":"/ko/docs/Web/API/AudioWorkletProcessor","locale":"ko","native":"한국어","sidebarHTML":"<ol><li><strong><a href=\"/ko/docs/Web/API/Web_Audio_API\">Web Audio API</a></strong></li><li><strong><a href=\"/ko/docs/Web/API/AudioWorkletProcessor\"><code>AudioWorkletProcessor</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/ko/docs/Web/API/AudioWorkletProcessor/AudioWorkletProcessor\"><code>AudioWorkletProcessor()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg><a href=\"/ko/docs/Web/API/AudioWorkletProcessor/parameterDescriptors\"><code>parameterDescriptors (static getter)</code></a></li><li><a href=\"/ko/docs/Web/API/AudioWorkletProcessor/port\"><code>port</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg><a href=\"/ko/docs/Web/API/AudioWorkletProcessor/process\"><code>process()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Web Audio API</summary><ol><li><a href=\"/ko/docs/Web/API/AnalyserNode\"><code>AnalyserNode</code></a></li><li><a href=\"/ko/docs/Web/API/AudioBuffer\"><code>AudioBuffer</code></a></li><li><a href=\"/ko/docs/Web/API/AudioBufferSourceNode\"><code>AudioBufferSourceNode</code></a></li><li><a href=\"/ko/docs/Web/API/AudioContext\"><code>AudioContext</code></a></li><li><a href=\"/ko/docs/Web/API/AudioDestinationNode\"><code>AudioDestinationNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioListener\"><code>AudioListener</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/AudioNode\"><code>AudioNode</code></a></li><li><a href=\"/ko/docs/Web/API/AudioParam\"><code>AudioParam</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioProcessingEvent\"><code>AudioProcessingEvent</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/AudioScheduledSourceNode\"><code>AudioScheduledSourceNode</code></a></li><li><a href=\"/ko/docs/Web/API/AudioWorklet\"><code>AudioWorklet</code></a></li><li><a href=\"/ko/docs/Web/API/AudioWorkletGlobalScope\"><code>AudioWorkletGlobalScope</code></a></li><li><a href=\"/ko/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a></li><li><a href=\"/ko/docs/Web/API/BaseAudioContext\"><code>BaseAudioContext</code></a></li><li><a href=\"/ko/docs/Web/API/BiquadFilterNode\"><code>BiquadFilterNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ChannelMergerNode\"><code>ChannelMergerNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ChannelSplitterNode\"><code>ChannelSplitterNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ConstantSourceNode\"><code>ConstantSourceNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ConvolverNode\"><code>ConvolverNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DelayNode\"><code>DelayNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DynamicsCompressorNode\"><code>DynamicsCompressorNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/GainNode\"><code>GainNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IIRFilterNode\"><code>IIRFilterNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaElementAudioSourceNode\"><code>MediaElementAudioSourceNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaStreamAudioDestinationNode\"><code>MediaStreamAudioDestinationNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaStreamAudioSourceNode\"><code>MediaStreamAudioSourceNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OfflineAudioCompletionEvent\"><code>OfflineAudioCompletionEvent</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/OfflineAudioContext\"><code>OfflineAudioContext</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OscillatorNode\"><code>OscillatorNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PannerNode\"><code>PannerNode</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/PeriodicWave\"><code>PeriodicWave</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/StereoPannerNode\"><code>StereoPannerNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WaveShaperNode\"><code>WaveShaperNode</code> <small>(en-US)</small></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/ko/docs/Web/API/Web_Audio_API\">Web Audio API</a>의 <strong><code>AudioWorkletProcessor</code></strong> 인터페이스는 사용자 정의 <a href=\"/ko/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a> 뒤의 오디오 프로세싱 코드를 나타냅니다. 이것은 <a href=\"/ko/docs/Web/API/AudioWorkletGlobalScope\"><code>AudioWorkletGlobalScope</code></a> 안에 있으며 Web Audio 렌더링 스레드에서 실행됩니다. 결과적으로, 이것에 기반한 <a href=\"/ko/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a>가 메인 스레드에서 실행됩니다.</p>"}},{"type":"prose","value":{"id":"생성자","title":"생성자","isH3":false,"content":"<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>참고:</strong> <code>AudioWorkletProcessor</code> 와 이것으로부터 파생된 클래스들은 사용자에 의해 제공된 코드로부터 직접적으로 초기화될 수 없습니다. 대신, 이것들은 오직 연관된 <a href=\"/ko/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a>들의 생성에 의해서만 내부적으로 생성됩니다. 파생된 클래스의 생성자는 options 객체와 함께 호출되므로, 여러분은 사용자 정의 초기화 절차를 수행할 수 있습니다 — 자세한 사항은 생성자 페이지를 참고하세요.</p>\n</div>\n<dl>\n  <dt id=\"audioworkletprocessor\"><a href=\"/ko/docs/Web/API/AudioWorkletProcessor/AudioWorkletProcessor\" title=\"AudioWorkletProcessor()\"><code>AudioWorkletProcessor()</code></a></dt>\n  <dd>\n    <p><code>AudioWorkletProcessor</code> 객체의 새 인스턴스를 생성합니다.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"속성","title":"속성","isH3":false,"content":"<dl>\n  <dt id=\"port\"><a href=\"/ko/docs/Web/API/AudioWorkletProcessor/port\" title=\"port\"><code>port</code></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>프로세서와 프로세서가 속한 <a href=\"/ko/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a> 사이의 양방향 소통에 사용되는 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MessagePort\"><code>MessagePort</code> <small>(en-US)</small></a>를 반환합니다. 다른 쪽 끝은 이 노드의 <a href=\"/ko/docs/Web/API/AudioWorkletNode/port\" title=\"port\"><code>port</code></a> 속성 아래에서 사용 가능합니다.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"메서드","title":"메서드","isH3":false,"content":"<p><em><code>AudioWorkletProcessor</code> 인터페이스는 이것이 소유하는 어떠한 메서드도 정의하지 않습니다. 그러나, 오디오 스트림을 처리하기 위해 호출되는 <a href=\"/ko/docs/Web/API/AudioWorkletProcessor/process\" title=\"process()\"><code>process()</code></a> 메서드를 여러분은 반드시 제공해야만 합니다.</em></p>"}},{"type":"prose","value":{"id":"이벤트","title":"이벤트","isH3":false,"content":"<p><em><code>AudioWorkletProcessor</code> 인터페이스는 어떠한 이벤트에도 응답하지 않습니다.</em></p>"}},{"type":"prose","value":{"id":"사용_일람","title":"사용 일람","isH3":false,"content":""}},{"type":"prose","value":{"id":"클래스_파생","title":"클래스 파생","isH3":true,"content":"<p>사용자 정의 오디오 프로세싱 코드를 정의하려면, 여러분은 <code>AudioWorkletProcessor</code> 인터페이스로부터 클래스를 파생시켜야 합니다. 비록 인터페이스에 정의되어 있지 않기는 하나, 파생 클래스는 반드시 <a href=\"/ko/docs/Web/API/AudioWorkletProcessor/process\" title=\"process\"><code>process</code></a> 메서드를 가지고 있어야만 합니다. 이 메서드는 128 샘플 프레임의 각 블럭마다 호출되고 입력과 출력 배열과 만약 정의되어 있다면 사용자 정의 <a href=\"/ko/docs/Web/API/AudioParam\"><code>AudioParam</code></a>들의 계산된 값들을 매개변수로 받습니다. 여러분은 입력과 오디오 파라미터 값들을 기본적으로는 무음을 가지는 출력 배열을 채우기 위해 사용할 수 있습니다.</p>\n<p>선택적으로, 만약 여러분이 사용자 정의 <a href=\"/ko/docs/Web/API/AudioParam\"><code>AudioParam</code></a>들을 여러분의 노드에서 원한다면, 여러분은 프로세서의 <em>static getter</em> 로서 <a href=\"/ko/docs/Web/API/AudioWorkletProcessor/parameterDescriptors\" title=\"parameterDescriptors\"><code>parameterDescriptors</code></a> 속성을 제공할 수 있습니다. 반환되는 <a href=\"/ko/docs/Web/API/AudioParamDescriptor\"><code>AudioParamDescriptor</code></a> 기반 객체의 배열은 <code>AudioWorkletNode</code>의 초기화 동안 <a href=\"/ko/docs/Web/API/AudioParam\"><code>AudioParam</code></a>들을 생성하기 위해 내부적으로 사용됩니다 .</p>\n<p>결과로 나오는 <code>AudioParam</code> 들은 노드의 <a href=\"/ko/docs/Web/API/AudioWorkletNode/parameters\" title=\"parameters\"><code>parameters</code></a> 속성 안에 있으며 <a href=\"/ko/docs/Web/API/AudioParam/linearRampToValueAtTime\"><code>linearRampToValueAtTime</code></a>과 같은 표준 메서드를 사용해 자동화될 수 있습니다. 이것들의 계산된 값들은 여러분이 노드 출력을 이에 맞춰 조절할 수 있도록 프로세서의 <a href=\"/ko/docs/Web/API/AudioWorkletProcessor/process\" title=\"process()\"><code>process()</code></a> 메서드 안으로 전달될 것입니다.</p>"}},{"type":"prose","value":{"id":"오디오_프로세싱","title":"오디오 프로세싱","isH3":true,"content":"<p>사용자 정의 오디오 프로세싱 생성 메커니즘의 예제 알고리즘입니다.</p>\n<ol>\n  <li>별도의 파일을 생성합니다.</li>\n  <li>그 파일에서\n    <ol>\n      <li><code>AudioWorkletProcessor</code> 클래스를 확장하고 (<a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4_%ED%8C%8C%EC%83%9D\">\"클래스 파생\" 섹션</a>을 참고하세요) 여러분만의 <a href=\"/ko/docs/Web/API/AudioWorkletProcessor/process\" title=\"process()\"><code>process()</code></a> 메서드를 그 안에 제공하세요.</li>\n      <li><a href=\"/ko/docs/Web/API/AudioWorkletGlobalScope/registerProcessor\"><code>AudioWorkletGlobalScope.registerProcessor()</code></a> 메서드를 사용해 프로세서를 등록하세요.</li>\n    </ol>\n  </li>\n  <li>오디오 컨텍스트의 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/BaseAudioContext/audioWorklet\"><code>audioWorklet</code> <small>(en-US)</small></a> 속성에서 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Worklet/addModule\"><code>addModule()</code> <small>(en-US)</small></a> 메서드를 사용하여 파일을 로드하세요.</li>\n  <li>이 프로세서에 기반하는 <a href=\"/ko/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a>를 생성하세요. 이 프로세서는 <code>AudioWorkletNode</code> 생성자에 의해 내부적으로 초기화될 것입니다.</li>\n  <li>이 노드를 다른 노드들에 연결하세요.</li>\n</ol>"}},{"type":"prose","value":{"id":"예제","title":"예제","isH3":false,"content":"<p>아래의 예제에서 우리는 백색소음을 출력하는 사용자 정의 <a href=\"/ko/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a>를 생성합니다.</p>\n<p>우선, 우리는 백색소음을 출력할 사용자 정의 <code>AudioWorkletProcessor</code> 를 정의하고, 등록할 필요가 있습니다. 이 작업은 별도의 파일에서 이루어져야 함에 주의하세요.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// white-noise-processor.js</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">WhiteNoiseProcessor</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AudioWorkletProcessor</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">process</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">inputs<span class=\"token punctuation\">,</span> outputs<span class=\"token punctuation\">,</span> parameters</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> outputs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    output<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">channel</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> channel<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        channel<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">registerProcessor</span><span class=\"token punctuation\">(</span><span class=\"token string\">'white-noise-processor'</span><span class=\"token punctuation\">,</span> WhiteNoiseProcessor<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>다음으로, 메인 스크립트 파일에서 우리는 프로세서를 로드하고, 프로세서의 이름을 <a href=\"/ko/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a>에 전달하며 <a href=\"/ko/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a>의 인스턴스를 생성하고, 그리고 나서 이 노드를 오디오 그래프에 연결합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> audioContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AudioContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">await</span> audioContext<span class=\"token punctuation\">.</span>audioWorklet<span class=\"token punctuation\">.</span><span class=\"token function\">addModule</span><span class=\"token punctuation\">(</span><span class=\"token string\">'white-noise-processor.js'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> whiteNoiseNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AudioWorkletNode</span><span class=\"token punctuation\">(</span>audioContext<span class=\"token punctuation\">,</span> <span class=\"token string\">'white-noise-processor'</span><span class=\"token punctuation\">)</span>\nwhiteNoiseNode<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>audioContext<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"명세서","id":"명세서","isH3":false,"specifications":[{"bcdSpecificationURL":"https://webaudio.github.io/web-audio-api/#AudioWorkletProcessor","title":"Web Audio API"}],"query":"api.AudioWorkletProcessor"}},{"type":"browser_compatibility","value":{"title":"브라우저 호환성","id":"브라우저_호환성","isH3":false,"query":"api.AudioWorkletProcessor","dataURL":"/ko/docs/Web/API/AudioWorkletProcessor/bcd.json"}},{"type":"prose","value":{"id":"같이_보기","title":"같이 보기","isH3":false,"content":"<ul>\n  <li><a href=\"/ko/docs/Web/API/Web_Audio_API\">Web Audio API</a></li>\n  <li><a href=\"/ko/docs/Web/API/Web_Audio_API/Using_Web_Audio_API\">Web Audio API 사용하기</a></li>\n</ul>"}}],"toc":[{"text":"생성자","id":"생성자"},{"text":"속성","id":"속성"},{"text":"메서드","id":"메서드"},{"text":"이벤트","id":"이벤트"},{"text":"사용 일람","id":"사용_일람"},{"text":"예제","id":"예제"},{"text":"명세서","id":"명세서"},{"text":"브라우저 호환성","id":"브라우저_호환성"},{"text":"같이 보기","id":"같이_보기"}],"summary":"Web Audio API의 AudioWorkletProcessor 인터페이스는 사용자 정의 AudioWorkletNode 뒤의 오디오 프로세싱 코드를 나타냅니다. 이것은 AudioWorkletGlobalScope 안에 있으며 Web Audio 렌더링 스레드에서 실행됩니다. 결과적으로, 이것에 기반한 AudioWorkletNode가 메인 스레드에서 실행됩니다.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"AudioWorkletProcessor","locale":"en-US","native":"English (US)"},{"title":"AudioWorkletProcessor","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ko/web/api/audioworkletprocessor","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/web/api/audioworkletprocessor/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ko/docs/Web","title":"개발자를 위한 웹 기술"},{"uri":"/ko/docs/Web/API","title":"Web API"},{"uri":"/ko/docs/Web/API/AudioWorkletProcessor","title":"AudioWorkletProcessor"}],"pageTitle":"AudioWorkletProcessor - Web API | MDN","noIndexing":false}}