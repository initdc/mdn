{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"URLSearchParams","mdn_url":"/ko/docs/Web/API/URLSearchParams","locale":"ko","native":"한국어","sidebarHTML":"<ol><li><strong><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/URL_API\">URL API <small>(en-US)</small></a></strong></li><li><strong><a href=\"/ko/docs/Web/API/URLSearchParams\"><code>URLSearchParams</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/ko/docs/Web/API/URLSearchParams/URLSearchParams\"><code>URLSearchParams()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/ko/docs/Web/API/URLSearchParams/append\"><code>append()</code></a></li><li><a href=\"/ko/docs/Web/API/URLSearchParams/delete\"><code>delete()</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/URLSearchParams/entries\"><code>entries()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/URLSearchParams/forEach\"><code>forEach()</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/URLSearchParams/get\"><code>get()</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/URLSearchParams/getAll\"><code>getAll()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/URLSearchParams/has\"><code>has()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/URLSearchParams/keys\"><code>keys()</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/URLSearchParams/set\"><code>set()</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/URLSearchParams/sort\"><code>sort()</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/URLSearchParams/toString\"><code>toString()</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/URLSearchParams/values\"><code>values()</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for URL API</summary><ol><li><a href=\"/ko/docs/Web/API/URL\"><code>URL</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>URLSearchParams</code></strong> 인터페이스는 URL의 쿼리 문자열을 대상으로 작업할 수 있는 유틸리티 메서드를 정의합니다.</p>\n<p><code>URLSearchParams</code>를 구현하는 객체는 <a href=\"/ko/docs/Web/JavaScript/Reference/Statements/for...of\"><code>for...of</code></a> 반복문으로 직접 키/값 쌍을 순회할 수 있습니다. 키/값 쌍의 순회 순서는 쿼리 문자열에 나타나는 순서와 같습니다. 예를 들어, 다음 두 줄의 코드는 동일합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> mySearchParams<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> mySearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre></div><div class=\"notecard note\" id=\"sect1\">\n  <p><strong>주의:</strong> 이 기능은 <a href=\"/ko/docs/Web/API/Web_Workers_API\">Web Worker</a>에서 사용할 수 있습니다</p>\n</div>"}},{"type":"prose","value":{"id":"생성자","title":"생성자","isH3":false,"content":"<dl>\n  <dt id=\"urlsearchparams\"><a href=\"/ko/docs/Web/API/URLSearchParams/URLSearchParams\" title=\"URLSearchParams()\"><code>URLSearchParams()</code></a></dt>\n  <dd>\n    <p><code>URLSearchParams</code> 객체 인스턴스를 반환합니다.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"메서드","title":"메서드","isH3":false,"content":"<dl>\n  <dt id=\"urlsearchparams.append\"><a href=\"/ko/docs/Web/API/URLSearchParams/append\"><code>URLSearchParams.append()</code></a></dt>\n  <dd>\n    <p>주어진 키/값 쌍을 새로운 검색 매개변수로 추가합니다.</p>\n  </dd>\n  <dt id=\"urlsearchparams.delete\"><a href=\"/ko/docs/Web/API/URLSearchParams/delete\"><code>URLSearchParams.delete()</code></a></dt>\n  <dd>\n    <p>주어진 검색 매개변수와 그 값을 모두 삭제합니다.</p>\n  </dd>\n  <dt id=\"urlsearchparams.entries_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/URLSearchParams/entries\"><code>URLSearchParams.entries()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>객체의 모든 키/값 쌍을 쿼리 문자열과 같은 순서로 순회할 수 있는 <a href=\"/ko/docs/Web/JavaScript/Reference/Iteration_protocols\">순회기</a>를 반환합니다.</p>\n  </dd>\n  <dt id=\"urlsearchparams.foreach_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/URLSearchParams/forEach\"><code>URLSearchParams.forEach()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>객체의 모든 값을 순회하면서 지정한 콜백을 호출합니다.</p>\n  </dd>\n  <dt id=\"urlsearchparams.get\"><a href=\"/ko/docs/Web/API/URLSearchParams/get\"><code>URLSearchParams.get()</code></a></dt>\n  <dd>\n    <p>주어진 검색 매개변수에 연결된 첫 번째 값을 반환합니다.</p>\n  </dd>\n  <dt id=\"urlsearchparams.getall_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/URLSearchParams/getAll\"><code>URLSearchParams.getAll()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>주어진 검색 매개변수에 연결된 모든 값을 반환합니다.</p>\n  </dd>\n  <dt id=\"urlsearchparams.has_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/URLSearchParams/has\"><code>URLSearchParams.has()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>주어진 검색 매개변수의 존재 여부를 나타내는 불리언 값을을 반환합니다.</p>\n  </dd>\n  <dt id=\"urlsearchparams.keys_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/URLSearchParams/keys\"><code>URLSearchParams.keys()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>객체의 모든 키/값 쌍에서 키만 순회할 수 있는 <a href=\"/ko/docs/Web/JavaScript/Reference/Iteration_protocols\">순회기</a>를 반환합니다.</p>\n  </dd>\n  <dt id=\"urlsearchparams.set\"><a href=\"/ko/docs/Web/API/URLSearchParams/set\"><code>URLSearchParams.set()</code></a></dt>\n  <dd>\n    <p>주어진 검색 매개변수에 값을 설정합니다. 이미 해당 매개변수에 연결된 값이 있으면 우선 모두 제거합니다.</p>\n  </dd>\n  <dt id=\"urlsearchparams.sort_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/URLSearchParams/sort\"><code>URLSearchParams.sort()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>모든 키/값 쌍을 키의 순서로 정렬합니다.</p>\n  </dd>\n  <dt id=\"urlsearchparams.tostring\"><a href=\"/ko/docs/Web/API/URLSearchParams/toString\"><code>URLSearchParams.toString()</code></a></dt>\n  <dd>\n    <p>URL에 쓰기 적합한 형태의 쿼리 문자열을 반환합니다.</p>\n  </dd>\n  <dt id=\"urlsearchparams.values_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/URLSearchParams/values\"><code>URLSearchParams.values()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>객체의 모든 키/값 쌍에서 값만 순회할 수 있는 <a href=\"/ko/docs/Web/JavaScript/Reference/Iteration_protocols\">순회기</a>를 반환합니다.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"예제","title":"예제","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> paramsString <span class=\"token operator\">=</span> <span class=\"token string\">'q=URLUtils.searchParams&amp;topic=api'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> searchParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>paramsString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 검색 매개변수 순회</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> p <span class=\"token keyword\">of</span> searchParams<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'topic'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// true</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'topic'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"api\"</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// true</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'topic'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// [\"api\"]</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// true</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'topic'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'webdev'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// \"q=URLUtils.searchParams&amp;topic=api&amp;topic=webdev\"</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'topic'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'More webdev'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// \"q=URLUtils.searchParams&amp;topic=More+webdev\"</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'topic'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// \"q=URLUtils.searchParams\"</span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 검색 매개변수는 객체도 가능</span>\n<span class=\"token keyword\">let</span> paramsObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">baz</span><span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> searchParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>paramsObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// \"foo=bar&amp;baz=bar\"</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// true</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// bar</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"중복된_검색_매개변수","title":"중복된 검색 매개변수","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> paramStr <span class=\"token operator\">=</span> <span class=\"token string\">'foo=bar&amp;foo=baz'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> searchParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>paramStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// \"foo=bar&amp;foo=baz\"</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// true</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// bar, 첫 번째 값만 반환</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// [\"bar\", \"baz\"]</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"url_파싱_없음","title":"URL 파싱 없음","isH3":true,"content":"<p><code>URLSearchParams</code> 생성자에 URL 파싱 기능은 없습니다. 다만 쿼리 문자열이 <code>?</code>로 시작하면 무시합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> paramsString1 <span class=\"token operator\">=</span> <span class=\"token string\">'http://example.com/search?query=%40'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> searchParams1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>paramsString1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsearchParams1<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'query'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nsearchParams1<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://example.com/search?query'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\nsearchParams1<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'query'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null</span>\nsearchParams1<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://example.com/search?query'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"@\" (decodeURIComponent('%40')과 동일)</span>\n\n<span class=\"token keyword\">const</span> paramsString2 <span class=\"token operator\">=</span> <span class=\"token string\">'?query=value'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> searchParams2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>paramsString2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsearchParams2<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'query'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://example.com/search?query=%40'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> searchParams3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsearchParams3<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'query'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"더하기_기호_보존하기","title":"더하기 기호 보존하기","isH3":true,"content":"<p><code>URLSearchParams</code> 생성자는 더하기 기호(<code>+</code>)를 공백으로 취급하므로 원하지 않는 결과를 낳을 수 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> rawData <span class=\"token operator\">=</span> <span class=\"token string\">'\\x13à\\x17@\\x1F\\x80'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> base64Data <span class=\"token operator\">=</span> <span class=\"token function\">btoa</span><span class=\"token punctuation\">(</span>rawData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'E+AXQB+A'</span>\n\n<span class=\"token keyword\">const</span> searchParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">bin=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>base64Data<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'bin=E+AXQB+A'</span>\n<span class=\"token keyword\">const</span> binQuery <span class=\"token operator\">=</span> searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'E AXQB A', '+'가 공백으로 대체됨</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">atob</span><span class=\"token punctuation\">(</span>binQuery<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> rawData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n</code></pre></div>\n<p><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\"><code>encodeURIComponent()</code></a>로 값을 먼저 인코딩하면 이 문제를 피할 수 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> rawData <span class=\"token operator\">=</span> <span class=\"token string\">'\\x13à\\x17@\\x1F\\x80'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> base64Data <span class=\"token operator\">=</span> <span class=\"token function\">btoa</span><span class=\"token punctuation\">(</span>rawData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'E+AXQB+A'</span>\n<span class=\"token keyword\">const</span> encodedBase64Data <span class=\"token operator\">=</span> <span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>base64Data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'E%2BAXQB%2BA'</span>\n\n<span class=\"token keyword\">const</span> searchParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">bin=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>encodedBase64Data<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'bin=E%2BAXQB%2BA'</span>\n<span class=\"token keyword\">const</span> binQuery <span class=\"token operator\">=</span> searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'E+AXQB+A'</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">atob</span><span class=\"token punctuation\">(</span>binQuery<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> rawData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"빈_값과_없는_값","title":"빈 값과 없는 값","isH3":true,"content":"<p><code>URLSearchParams</code>는 <code>=</code> 뒤에 값이 없는 것과, 아예 <code>=</code>조차 없는 매개변수를 구분하지 않습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> emptyVal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo=&amp;bar=baz'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nemptyVal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '' 반환</span>\n<span class=\"token keyword\">const</span> noEquals <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo&amp;bar=baz'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnoEquals<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '' 반환, 동일함</span>\nnoEquals<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'foo=&amp;bar=baz'</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"명세","id":"명세","isH3":false,"specifications":[{"bcdSpecificationURL":"https://url.spec.whatwg.org/#urlsearchparams","title":"URL Standard"}],"query":"api.URLSearchParams"}},{"type":"browser_compatibility","value":{"title":"브라우저 호환성","id":"브라우저_호환성","isH3":false,"query":"api.URLSearchParams","dataURL":"/ko/docs/Web/API/URLSearchParams/bcd.json"}},{"type":"prose","value":{"id":"같이_보기","title":"같이 보기","isH3":false,"content":"<ul>\n  <li><a href=\"https://github.com/zloirock/core-js#url-and-urlsearchparams\" class=\"external\" rel=\" noopener\"><code>core-js</code>의 <code>URLSearchParams</code> 폴리필</a></li>\n  <li><a href=\"/ko/docs/Web/API/URL\"><code>URL</code></a> 인터페이스</li>\n  <li><a href=\"https://developers.google.com/web/updates/2016/01/urlsearchparams?hl=en\" class=\"external\" rel=\" noopener\">Google Developers: Easy URL manipulation with URLSearchParams</a></li>\n</ul>"}}],"toc":[{"text":"생성자","id":"생성자"},{"text":"메서드","id":"메서드"},{"text":"예제","id":"예제"},{"text":"명세","id":"명세"},{"text":"브라우저 호환성","id":"브라우저_호환성"},{"text":"같이 보기","id":"같이_보기"}],"summary":"URLSearchParams 인터페이스는 URL의 쿼리 문자열을 대상으로 작업할 수 있는 유틸리티 메서드를 정의합니다.","popularity":0.001,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"URLSearchParams","locale":"en-US","native":"English (US)"},{"title":"URLSearchParams","locale":"es","native":"Español"},{"title":"URLSearchParams","locale":"fr","native":"Français"},{"title":"URLSearchParams","locale":"ja","native":"日本語"},{"title":"URLSearchParams","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"URLSearchParams","locale":"ru","native":"Русский"},{"title":"URLSearchParams","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ko/web/api/urlsearchparams","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/web/api/urlsearchparams/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ko/docs/Web","title":"개발자를 위한 웹 기술"},{"uri":"/ko/docs/Web/API","title":"Web API"},{"uri":"/ko/docs/Web/API/URLSearchParams","title":"URLSearchParams"}],"pageTitle":"URLSearchParams - Web API | MDN","noIndexing":false}}