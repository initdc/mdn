{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"AudioNode.connect()","mdn_url":"/ko/docs/Web/API/AudioNode/connect","locale":"ko","native":"한국어","sidebarHTML":"<ol><li><strong><a href=\"/ko/docs/Web/API/Web_Audio_API\">Web Audio API</a></strong></li><li><strong><a href=\"/ko/docs/Web/API/AudioNode\"><code>AudioNode</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/ko/docs/Web/API/AudioNode/channelCount\"><code>channelCount</code></a></li><li><a href=\"/ko/docs/Web/API/AudioNode/channelCountMode\"><code>channelCountMode</code></a></li><li><a href=\"/ko/docs/Web/API/AudioNode/channelInterpretation\"><code>channelInterpretation</code></a></li><li><a href=\"/ko/docs/Web/API/AudioNode/context\"><code>context</code></a></li><li><a href=\"/ko/docs/Web/API/AudioNode/numberOfInputs\"><code>numberOfInputs</code></a></li><li><a href=\"/ko/docs/Web/API/AudioNode/numberOfOutputs\"><code>numberOfOutputs</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><em><code>connect()</code></em></li><li><a href=\"/ko/docs/Web/API/AudioNode/disconnect\"><code>disconnect()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Inheritance:</summary><ol><li><a href=\"/ko/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Web Audio API</summary><ol><li><a href=\"/ko/docs/Web/API/AnalyserNode\"><code>AnalyserNode</code></a></li><li><a href=\"/ko/docs/Web/API/AudioBuffer\"><code>AudioBuffer</code></a></li><li><a href=\"/ko/docs/Web/API/AudioBufferSourceNode\"><code>AudioBufferSourceNode</code></a></li><li><a href=\"/ko/docs/Web/API/AudioContext\"><code>AudioContext</code></a></li><li><a href=\"/ko/docs/Web/API/AudioDestinationNode\"><code>AudioDestinationNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioListener\"><code>AudioListener</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/AudioParam\"><code>AudioParam</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioProcessingEvent\"><code>AudioProcessingEvent</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/AudioScheduledSourceNode\"><code>AudioScheduledSourceNode</code></a></li><li><a href=\"/ko/docs/Web/API/AudioWorklet\"><code>AudioWorklet</code></a></li><li><a href=\"/ko/docs/Web/API/AudioWorkletGlobalScope\"><code>AudioWorkletGlobalScope</code></a></li><li><a href=\"/ko/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a></li><li><a href=\"/ko/docs/Web/API/AudioWorkletProcessor\"><code>AudioWorkletProcessor</code></a></li><li><a href=\"/ko/docs/Web/API/BaseAudioContext\"><code>BaseAudioContext</code></a></li><li><a href=\"/ko/docs/Web/API/BiquadFilterNode\"><code>BiquadFilterNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ChannelMergerNode\"><code>ChannelMergerNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ChannelSplitterNode\"><code>ChannelSplitterNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ConstantSourceNode\"><code>ConstantSourceNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ConvolverNode\"><code>ConvolverNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DelayNode\"><code>DelayNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DynamicsCompressorNode\"><code>DynamicsCompressorNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/GainNode\"><code>GainNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IIRFilterNode\"><code>IIRFilterNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaElementAudioSourceNode\"><code>MediaElementAudioSourceNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaStreamAudioDestinationNode\"><code>MediaStreamAudioDestinationNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaStreamAudioSourceNode\"><code>MediaStreamAudioSourceNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OfflineAudioCompletionEvent\"><code>OfflineAudioCompletionEvent</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/OfflineAudioContext\"><code>OfflineAudioContext</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OscillatorNode\"><code>OscillatorNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PannerNode\"><code>PannerNode</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/PeriodicWave\"><code>PeriodicWave</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/StereoPannerNode\"><code>StereoPannerNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WaveShaperNode\"><code>WaveShaperNode</code> <small>(en-US)</small></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/ko/docs/Web/API/AudioNode\"><code>AudioNode</code></a> 인터페이스의 <code>connect()</code> 메서드는 노드의 출력 중 하나를 목표에 연결할 수 있게 하는데, 이 목표는 다른 <code>AudioNode</code> 일 수도 있고 (이렇게 함으로써 사운드 데이터를 명시된 노드로 향하게 합니다) <a href=\"/ko/docs/Web/API/AudioParam\"><code>AudioParam</code></a> 일 수도 있습니다 (이 경우 노드의 출력 데이터가 자동적으로 시간에 따라 그 파라미터의 값을 변화시키기 위해 사용됩니다).</p>"}},{"type":"prose","value":{"id":"구문","title":"구문","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> destinationNode <span class=\"token operator\">=</span> AudioNode<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>destination<span class=\"token punctuation\">,</span> outputIndex<span class=\"token punctuation\">,</span> inputIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nAudioNode<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>destination<span class=\"token punctuation\">,</span> outputIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"매개변수","title":"매개변수","isH3":true,"content":"<dl>\n  <dt id=\"destination\"><code>destination</code></dt>\n  <dd>\n    <p>연결할 <a href=\"/ko/docs/Web/API/AudioNode\"><code>AudioNode</code></a> 또는 <a href=\"/ko/docs/Web/API/AudioParam\"><code>AudioParam</code></a>.</p>\n  </dd>\n  <dt id=\"outputindex\"><code>outputIndex</code> <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>현재 <code>AudioNode</code>의 어떤 출력이 목적지에 연결될 지 명시하는 인덱스. 인덱스 숫자는 출력 채널의 수에 따라 정의됩니다 (<a href=\"/ko/docs/Web/API/Web_Audio_API/Basic_concepts_behind_Web_Audio_API#audio_channels\">오디오 채널</a>을 참고해 보세요). 주어진 출력을 주어진 입력에 단 한 번 연결할 수 있는 반면 (반복된 시도는 무시됩니다), <code>connect()</code> 를 반복적으로 호출함으로써 다수의 입력에 하나의 출력을 연결할 수 있습니다. 이는 <a href=\"/ko/docs/Web/API/Web_Audio_API/Basic_concepts_behind_Web_Audio_API#fan-in_and_fan-out\">팬 아웃</a>을 가능케 합니다. 기본값은 0입니다.</p>\n  </dd>\n  <dt id=\"inputindex\"><code>inputIndex</code> <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>현재 <code>AudioNode</code>를 목적지의 어떤 입력에 연결할지를 기술하는 인덱스. 기본값은 0입니다. 인덱스 숫자는 입력 채널의 수에 따라 정의됩니다 (<a href=\"/ko/docs/Web/API/Web_Audio_API/Basic_concepts_behind_Web_Audio_API#audio_channels\">오디오 채널</a>을 참고해 보세요). 한 <code>AudioNode</code>를 다른 <code>AudioNode</code>에 연결해, 차례로 연결되어 첫번째 <code>AudioNode</code>로 돌아오는 사이클을 만드는 것은 가능합니다.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"반환_값","title":"반환 값","isH3":true,"content":"<p>만약 목적지가 노드라면, <code>connect()</code> 는 목적지 <a href=\"/ko/docs/Web/API/AudioNode\"><code>AudioNode</code></a> 객체에 대한 참조를 반환하며, 다수의 <code>connect()</code> 호출을 연쇄할 수 있게 합니다. 몇몇 브라우저에서, 이 인터페이스의 오래된 구현은 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>를 반환합니다.</p>\n<p>만약 목적지가 <code>AudioParam</code> 이라면, <code>connect()</code> 는 <code>undefined</code> 를 반환합니다.</p>"}},{"type":"prose","value":{"id":"예외","title":"예외","isH3":true,"content":"<dl>\n  <dt id=\"indexsizeerror\"><code>IndexSizeError</code> <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>만약 <code>outputIndex</code> 혹은 <code>inputIndex</code> 로 명시된 값이 존재하는 입력 혹은 출력에 일치하지 않는다면 발생됩니다.</p>\n  </dd>\n  <dt id=\"invalidaccesserror\"><code>InvalidAccessError</code> <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>만약 목적지 노드가 소스 노드로서 같은 오디오 컨텍스트의 일부가 아니라면 발생됩니다.</p>\n  </dd>\n  <dt id=\"notsupportederror\"><code>NotSupportedError</code> <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>만약 명시된 연결이 (오디오가 같은 노드들을 반복적으로 순환하는) 사이클을 형성하고 결과 파형이 같은 오디오 프레임을 무기한으로 생성해 멈추는 일을 방지하기 위한 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DelayNode\"><code>DelayNode</code> <small>(en-US)</small></a> 객체가 사이클에 없다면 발생됩니다. 또한 만약 목적지가 <a href=\"/ko/docs/Web/API/AudioParam\"><code>AudioParam</code></a>일 때 <code>inputIndex</code> 매개변수가 사용된 경우 발생됩니다.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"예제","title":"예제","isH3":false,"content":""}},{"type":"prose","value":{"id":"오디오_입력에_연결하기","title":"오디오 입력에 연결하기","isH3":true,"content":"<p><code>connect()</code> 메서드의 가장 분명한 용도는 이후의 프로세싱을 위해 하나의 노드로부터 다른 노드의 오디오 입력에 오디오 출력을 보내는 것입니다. 예를 들어, <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaElementAudioSourceNode\"><code>MediaElementAudioSourceNode</code> <small>(en-US)</small></a>으로부터, 즉 <a href=\"/ko/docs/Web/HTML/Element/audio\"><code>&lt;audio&gt;</code></a>와 같은 HTML 미디어 요소로부터 스피커에 오디오를 보내기 전에 노이즈를 줄이기 위해 <a href=\"/ko/docs/Web/API/BiquadFilterNode\"><code>BiquadFilterNode</code></a>를 사용하여 구현된 밴드 패스 필터를 통해 오디오를 전송할 수 있습니다.</p>\n<p>아래의 예제는 오실레이터를 생성하고, 오실레이터를 gain 노드에 연결해, gain 노드가 오실레이터 노드의 볼륨을 제어하도록 합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> AudioContext <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>AudioContext <span class=\"token operator\">||</span> window<span class=\"token punctuation\">.</span>webkitAudioContext<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> audioCtx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AudioContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> oscillator <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createOscillator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> gainNode <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createGain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\noscillator<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>gainNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngainNode<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>audioCtx<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"audioparam_예제","title":"AudioParam 예제","isH3":true,"content":"<p>이 예제에서, 우리는 낮은 주파수 값을 가진 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OscillatorNode\"><code>OscillatorNode</code> <small>(en-US)</small></a>를 사용해 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/GainNode\"><code>GainNode</code> <small>(en-US)</small></a>의 gain 값을 변화시킬 것입니다. 이 기법은 <strong>LFO</strong>에 의해 제어되는 파라미터로 알려져 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> AudioContext <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>AudioContext <span class=\"token operator\">||</span> window<span class=\"token punctuation\">.</span>webkitAudioContext<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> audioCtx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AudioContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 소리를 만들기 위해 일반적인 오실레이터를 생성합니다</span>\n<span class=\"token keyword\">var</span> oscillator <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createOscillator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// LFO (Low-frequency oscillator, 저주파 오실레이터) 로써 사용되고,</span>\n<span class=\"token comment\">// 파라미터를 제어할 두 번째 오실레이터를 생성합니다</span>\n<span class=\"token keyword\">var</span> lfo <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createOscillator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 두 번째 오실레이터의 주파수를 낮은 수로 설정합니다</span>\nlfo<span class=\"token punctuation\">.</span>frequency<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2Hz: 초당 두 번의 진동</span>\n\n<span class=\"token comment\">// gain AudioParam이 LFO에 의해 제어될 gain을 생성합니다</span>\n<span class=\"token keyword\">var</span> gain <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createGain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// LFO를 gain AudioParam에 연결합니다. 이는 LFO의 값이 어떠한 오디오도</span>\n<span class=\"token comment\">// 생성하지 않지만, gain의 값을 대신 변화시킬 것임을 의미합니다</span>\nlfo<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>gain<span class=\"token punctuation\">.</span>gain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 오디오를 생성할 오실레이터를 gain에 연결합니다</span>\noscillator<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>gain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// gain을 목적지에 연결해 소리가 나오게 합니다</span>\ngain<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>audioCtx<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 오디오를 생성할 오실레이터를 시작시킵니다</span>\noscillator<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// gain 값을 조정할 오실레이터를 시작시킵니다</span>\nlfo<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"audioparam_사용_일람\">AudioParam 사용 일람</h4>\n<p><code>AudioNode</code> 출력을 하나 이상의 <a href=\"/ko/docs/Web/API/AudioParam\"><code>AudioParam</code></a>에 연결하는 것은 가능하고, 하나 이상의 AudioNode 출력을 하나의 <a href=\"/ko/docs/Web/API/AudioParam\"><code>AudioParam</code></a>에 다수의 <code>connect()</code> 호출과 함께 연결하는 것은 가능합니다. 그러므로 <a href=\"/ko/docs/Web/API/Web_Audio_API/Basic_concepts_behind_Web_Audio_API#fan-in_and_fan-out\">팬 인과 팬 아웃</a>이 지원됩니다.</p>\n<p><a href=\"/ko/docs/Web/API/AudioParam\"><code>AudioParam</code></a>은 자신에게 연결된 모든 <code>AudioNode</code> 출력으로부터 렌더링된 오디오 데이터를 취하고 그 데이터를 <a href=\"/ko/docs/Web/API/Web_Audio_API/Basic_concepts_behind_Web_Audio_API#up-mixing_and_down-mixing\">다운 믹싱</a>함으로써 모노로 변환합니다 (만약 데이터가 이미 모노가 아니라면). 다음으로, <a href=\"/ko/docs/Web/API/AudioParam\"><code>AudioParam</code></a>은 그 데이터를 그러한 다른 출력들과, 고유한 파라미터 값과 함께 섞을 것입니다. (고유한 파라미터 값이란 <a href=\"/ko/docs/Web/API/AudioParam\"><code>AudioParam</code></a>이 보통 어떠한 오디오 연결 없이 가지는 값이며, 이는 이 파라미터에 예정된 모든 타임라인 변화를 포함합니다.)</p>\n<p>그러므로, <a href=\"/ko/docs/Web/API/AudioParam\"><code>AudioParam</code></a>의 값을 중심 주파수로 설정함으로써 <a href=\"/ko/docs/Web/API/AudioParam\"><code>AudioParam</code></a>이 변화할 범위를 선택하는 것은 가능하고, <a href=\"/ko/docs/Web/API/AudioParam\"><code>AudioParam</code></a> 변화의 범위를 조정하기 위해 오디오 소스와 <a href=\"/ko/docs/Web/API/AudioParam\"><code>AudioParam</code></a> 사이에서 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/GainNode\"><code>GainNode</code> <small>(en-US)</small></a>를 사용하는 것은 가능합니다.</p>"}},{"type":"specifications","value":{"title":"명세서","id":"명세서","isH3":false,"specifications":[{"bcdSpecificationURL":"https://webaudio.github.io/web-audio-api/#dom-audionode-connect","title":"Web Audio API"},{"bcdSpecificationURL":"https://webaudio.github.io/web-audio-api/#dom-audionode-connect-destinationparam-output","title":"Web Audio API"}],"query":"api.AudioNode.connect"}},{"type":"browser_compatibility","value":{"title":"브라우저 호환성","id":"브라우저_호환성","isH3":false,"query":"api.AudioNode.connect","dataURL":"/ko/docs/Web/API/AudioNode/connect/bcd.json"}},{"type":"prose","value":{"id":"같이_보기","title":"같이 보기","isH3":false,"content":"<ul>\n  <li><a href=\"/ko/docs/Web/API/Web_Audio_API/Using_Web_Audio_API\">Web Audio API 사용하기</a></li>\n</ul>"}}],"toc":[{"text":"구문","id":"구문"},{"text":"예제","id":"예제"},{"text":"명세서","id":"명세서"},{"text":"브라우저 호환성","id":"브라우저_호환성"},{"text":"같이 보기","id":"같이_보기"}],"summary":"AudioNode 인터페이스의 connect() 메서드는 노드의 출력 중 하나를 목표에 연결할 수 있게 하는데, 이 목표는 다른 AudioNode 일 수도 있고 (이렇게 함으로써 사운드 데이터를 명시된 노드로 향하게 합니다) AudioParam 일 수도 있습니다 (이 경우 노드의 출력 데이터가 자동적으로 시간에 따라 그 파라미터의 값을 변화시키기 위해 사용됩니다).","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"AudioNode.connect()","locale":"en-US","native":"English (US)"},{"title":"AudioNode.connect()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ko/web/api/audionode/connect","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/web/api/audionode/connect/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ko/docs/Web","title":"개발자를 위한 웹 기술"},{"uri":"/ko/docs/Web/API","title":"Web API"},{"uri":"/ko/docs/Web/API/AudioNode","title":"AudioNode"},{"uri":"/ko/docs/Web/API/AudioNode/connect","title":"AudioNode.connect()"}],"pageTitle":"AudioNode.connect() - Web API | MDN","noIndexing":false}}