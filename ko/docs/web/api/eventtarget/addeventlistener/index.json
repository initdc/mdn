{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"EventTarget.addEventListener()","mdn_url":"/ko/docs/Web/API/EventTarget/addEventListener","locale":"ko","native":"한국어","sidebarHTML":"<ol><li><strong><a href=\"/ko/docs/Web/API/Document_Object_Model\">Document Object Model</a></strong></li><li><strong><a href=\"/ko/docs/Web/API/EventTarget\"><code>EventTarget</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/ko/docs/Web/API/EventTarget/EventTarget\"><code>EventTarget()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><em><code>addEventListener()</code></em></li><li><a href=\"/ko/docs/Web/API/EventTarget/dispatchEvent\"><code>dispatchEvent()</code></a></li><li><a href=\"/ko/docs/Web/API/EventTarget/removeEventListener\"><code>removeEventListener()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for DOM</summary><ol><li><a href=\"/ko/docs/Web/API/AbortController\"><code>AbortController</code></a></li><li><a href=\"/ko/docs/Web/API/AbortSignal\"><code>AbortSignal</code></a></li><li><a href=\"/ko/docs/Web/API/AbstractRange\"><code>AbstractRange</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Attr\"><code>Attr</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CDATASection\"><code>CDATASection</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/CharacterData\"><code>CharacterData</code></a></li><li><a href=\"/ko/docs/Web/API/Comment\"><code>Comment</code></a></li><li><a href=\"/ko/docs/Web/API/CustomEvent\"><code>CustomEvent</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DOMError\"><code>DOMError</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DOMImplementation\"><code>DOMImplementation</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/DOMParser\"><code>DOMParser</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DOMPoint\"><code>DOMPoint</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DOMPointReadOnly\"><code>DOMPointReadOnly</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/DOMRect\"><code>DOMRect</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DOMTimeStamp\"><code>DOMTimeStamp</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/DOMTokenList\"><code>DOMTokenList</code></a></li><li><a href=\"/ko/docs/Web/API/Document\"><code>Document</code></a></li><li><a href=\"/ko/docs/Web/API/DocumentFragment\"><code>DocumentFragment</code></a></li><li><a href=\"/ko/docs/Web/API/DocumentType\"><code>DocumentType</code></a></li><li><a href=\"/ko/docs/Web/API/Element\"><code>Element</code></a></li><li><a href=\"/ko/docs/Web/API/Event\"><code>Event</code></a></li><li><a href=\"/ko/docs/Web/API/HTMLCollection\"><code>HTMLCollection</code></a></li><li><a href=\"/ko/docs/Web/API/MutationObserver\"><code>MutationObserver</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/NamedNodeMap\"><code>NamedNodeMap</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/Node\"><code>Node</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/NodeIterator\"><code>NodeIterator</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/NodeList\"><code>NodeList</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ProcessingInstruction\"><code>ProcessingInstruction</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/Range\"><code>Range</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/StaticRange\"><code>StaticRange</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/Text\"><code>Text</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/TextDecoder\"><code>TextDecoder</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/TextEncoder\"><code>TextEncoder</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/TimeRanges\"><code>TimeRanges</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/API/TreeWalker\"><code>TreeWalker</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XMLDocument\"><code>XMLDocument</code> <small>(en-US)</small></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/ko/docs/Web/API/EventTarget\"><code>EventTarget</code></a> 인터페이스의 <strong><code>addEventListener()</code></strong> 메서드는 지정한 유형의 이벤트를 대상이 수신할 때마다 호출할 함수를 설정합니다.</p>\n<p>일반적인 대상은 <a href=\"/ko/docs/Web/API/Element\"><code>Element</code></a>, <a href=\"/ko/docs/Web/API/Document\"><code>Document</code></a>, <a href=\"/ko/docs/Web/API/Window\"><code>Window</code></a>지만, <a href=\"/ko/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a>와 같이 이벤트를 지원하는 모든 객체가 대상이 될 수 있습니다.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>참고:</strong> 이벤트 수신기는 다른 방법으로도 추가할 수 있지만, <code>addEventListener()</code> 메서드를 사용해서 다음의 장점을 누리는 것이 좋습니다.</p>\n  <ul>\n    <li>하나의 이벤트 유형에 대해 다수의 수신기를 부착할 수 있습니다. 라이브러리, JavaScript 모듈 등, 다른 라이브러리나 확장 코드와 충돌하지 않고 동작해야 하는 코드에 특히 중요한 점입니다.</li>\n    <li><code>onXYZ</code> 속성과 달리, 수신기가 어떤 이벤트 전파 단계(캡처링 vs. 버블링)에 동작해야 하는지 조절할 수 있습니다.</li>\n    <li>HTML과 SVG 요소가 아니어도 이벤트 대상이라면 사용할 수 있습니다.</li>\n  </ul>\n</div>\n<p><code>addEventListener()</code> 메서드는 지정한 이벤트 유형의<a href=\"/ko/docs/Web/API/EventTarget\"><code>EventTarget</code></a> 수신기 리스트에 <a href=\"/ko/docs/Web/API/EventTarget/addEventListener\" aria-current=\"page\"><code>EventListener</code></a>를 구현한 함수 또는 객체를 추가하는 방식으로 동작합니다. 추가하려는 함수 또는 객체가 이미 수신기 리스트에 포함되어 있는 경우에는 추가하지 않으므로 수신기는 중복으로 등록되지 않습니다.</p>\n<p>추가한 수신기를 반드시 <a href=\"/ko/docs/Web/API/EventTarget/removeEventListener\" title=\"removeEventListener()\"><code>removeEventListener()</code></a>로 직접 제거해야 하는 것은 아닙니다.</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>참고:</strong> 두 개의 익명 함수는, 함수 본문이 동일하더라도, <code>addEventListener()</code>에 있어 항상 서로 다른 함수로 취급되므로 둘을 동시에 한 대상의 이벤트 수신기로 부착할 수 있습니다.</p>\n  <p>사실, 본문의 내용이 항상 동일하고 불변하더라도, 그 본문을 사용해 정의하는 각각의 익명 함수는 항상 서로를 구별할 수 있는 별도의 함수입니다. <strong>반복문 내에서 정의하는 경우에도 마찬가지입니다.</strong></p>\n  <p>이와 같이 반복적으로 익명 함수를 정의하게 되면 문제가 될 수 있습니다. 아래의 <a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC_%EB%AC%B8%EC%A0%9C\">메모리 문제</a>를 확인하세요.</p>\n</div>\n<p><a href=\"/ko/docs/Web/API/EventTarget\"><code>EventTarget</code></a>에 부착된 이벤트 수신기가 이벤트 처리 중에 새로운 수신기를 등록하더라도, 현재 처리 중인 이벤트로는 그 수신기가 발동하지 않습니다. 그러나 버블링 단계처럼 이후의 이벤트 처리 흐름에서는 발동할 수 있습니다.</p>"}},{"type":"prose","value":{"id":"구문","title":"구문","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> listener<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> listener<span class=\"token punctuation\">,</span> useCapture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"매개변수","title":"매개변수","isH3":true,"content":"<dl>\n  <dt id=\"type\"><code>type</code></dt>\n  <dd>\n    <p>수신할 <a href=\"/ko/docs/Web/Events\">이벤트 유형</a>을 나타내는 대소문자 구분 문자열입니다.</p>\n  </dd>\n  <dt id=\"listener\"><code>listener</code></dt>\n  <dd>\n    <p>지정한 이벤트(<a href=\"/ko/docs/Web/API/Event\"><code>Event</code></a> 인터페이스를 구현한 객체)를 수신할 객체입니다. <code>handleEvent()</code> 메서드를 포함하는 객체 또는 JavaScript <a href=\"/ko/docs/Web/JavaScript/Guide/Functions\">함수</a>여야 합니다. <a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8_%EC%88%98%EC%8B%A0%EA%B8%B0_%EC%BD%9C%EB%B0%B1\">이벤트 수신기 콜백</a>에서 콜백 자체에 대한 정보를 더 알아보세요.</p>\n  </dd>\n  <dt id=\"options\"><code>options</code> <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>이벤트 수신기의 특징을 지정할 수 있는 객체입니다. 가능한 옵션은 다음과 같습니다.</p>\n    <dl>\n      <dt id=\"capture\"><code>capture</code></dt>\n      <dd>\n        <p>이벤트 대상의 DOM 트리 하위에 위치한 자손 <code>EventTarget</code>으로 이벤트가 전달되기 전에, 이 수신기가 먼저 발동돼야 함을 나타내는 불리언 값입니다. 명시하지 않을 경우 기본 값은 <code>false</code>입니다.</p>\n      </dd>\n      <dt id=\"once\"><code>once</code></dt>\n      <dd>\n        <p>수신기가 최대 한 번만 동작해야 함을 나타내는 불리언 값입니다. <code>true</code>를 지정할 경우, 수신기가 발동한 후에 스스로를 대상에서 제거합니다. 명시하지 않을 경우 기본 값은 <code>false</code>입니다.</p>\n      </dd>\n      <dt id=\"passive\"><code>passive</code></dt>\n      <dd>\n        <p><code>true</code>일 경우, 이 수신기 내에서 <a href=\"/ko/docs/Web/API/Event/preventDefault\" title=\"preventDefault()\"><code>preventDefault()</code></a>를 절대 호출하지 않을 것임을 나타내는 불리언 값입니다. 이 값이 <code>true</code>인데 수신기가 <code>preventDefault()</code>를 호출하는 경우, 사용자 에이전트는 콘솔에 경고를 출력하는 것 외에 아무런 동작도 하지 않습니다. 명시하지 않을 경우의 기본 값은 <code>false</code>지만, Safari와 Internet Explorer를 제외한 브라우저에서 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Element/wheel_event\"><code>wheel</code> <small>(en-US)</small></a>, <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Element/mousewheel_event\"><code>mousewheel</code> <small>(en-US)</small></a>, <a href=\"/ko/docs/Web/API/Element/touchstart_event\" title=\"touchstart\"><code>touchstart</code></a>, <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Element/touchmove_event\"><code>touchmove</code> <small>(en-US)</small></a> 이벤트에서의 기본 값은 <code>true</code>입니다. <a href=\"#%ED%8C%A8%EC%8B%9C%EB%B8%8C_%EC%88%98%EC%8B%A0%EA%B8%B0%EB%A1%9C_%EC%8A%A4%ED%81%AC%EB%A1%A4_%EC%84%B1%EB%8A%A5_%ED%96%A5%EC%83%81\">패시브 수신기로 스크롤 성능 향상</a>에서 이 값에 대해 더 알아보세요.</p>\n      </dd>\n      <dt id=\"signal\"><code>signal</code></dt>\n      <dd>\n        <p><a href=\"/ko/docs/Web/API/AbortSignal\"><code>AbortSignal</code></a>입니다. 지정한 <code>AbortSignal</code> 객체의 <a href=\"/ko/docs/Web/API/AbortController/abort\" title=\"abort()\"><code>abort()</code></a> 메서드를 호출하면 이 수신기가 제거됩니다. 명시하지 않을 경우 이벤트 수신기가 아무 <code>AbortSignal</code>에도 연결되지 않습니다.</p>\n      </dd>\n    </dl>\n  </dd>\n  <dt id=\"usecapture\"><code>useCapture</code> <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>이벤트 대상의 DOM 트리 하위에 위치한 자손 <code>EventTarget</code>으로 이벤트가 전달되기 전에, 이 수신기가 먼저 발동돼야 함을 나타내는 불리언 값입니다. 캡처 모드인 수신기는 DOM 트리의 위쪽으로 버블링 중인 이벤트에 의해선 발동하지 않습니다. 이벤트 버블링과 캡처링은 조상-자손 관계를 가진 두 개의 요소가 동일한 이벤트 유형에 대한 수신기를 가지고 있을 때, 두 요소에 이벤트가 전파되는 방법을 말합니다. 이벤트 전파 모드에 따라 두 요소 중 이벤트를 먼저 수신하는 쪽이 달라집니다. <a href=\"https://www.w3.org/TR/DOM-Level-3-Events/#event-flow\" class=\"external\" rel=\" noopener\">DOM Level 3 Events</a>와 <a href=\"https://www.quirksmode.org/js/events_order.html#link4\" class=\"external\" rel=\" noopener\">JavaScript Event 순서</a>에서 자세한 설명을 확인하세요. 기본 값은 <code>false</code>입니다.</p>\n    <div class=\"notecard note\" id=\"sect3\">\n      <p>\n        <strong>참고:</strong> 이벤트의 대상에 부착된 수신기의 경우 캡처링도, 버블링 단계도 아닌 별도의 단계에 발동합니다.\n        캡처 모드의 수신기는 캡처 모드가 아닌 다른 모든 수신기보다 앞서 발동합니다.\n      </p>\n    </div>\n  </dd>\n  <dt id=\"wantsuntrusted\"><code>wantsUntrusted</code> <span class=\"badge inline optional\">Optional</span> <svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg></dt>\n  <dd>\n    <p>Firefox(Gecko)에서만 사용할 수 있습니다. <code>true</code>일 경우 수신기가 웹 콘텐츠에서 발송하는 합성 이벤트를 수신할 수 있습니다. (기본 값은 브라우저 <a href=\"/ko/docs/Glossary/Chrome\">크롬</a>에서는 <code>false</code>, 일반 웹 페이지에서는 <code>true</code>입니다.) 브라우저 확장, 또는 브라우저 자체 코드에서 유용하게 사용할 수 있습니다.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"반환_값","title":"반환 값","isH3":true,"content":"<p>없음 (<a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>).</p>"}},{"type":"prose","value":{"id":"사용_일람","title":"사용 일람","isH3":false,"content":""}},{"type":"prose","value":{"id":"이벤트_수신기_콜백","title":"이벤트 수신기 콜백","isH3":true,"content":"<p><code>addEventListener()</code>에 지정하는 이벤트 수신기는 콜백 함수거나, 콜백으로 작동할 <code>handleEvent()</code> 메서드를 포함하는 객체입니다.</p>\n<p>콜백 함수 자체는 <code>handleEvent()</code> 메서드와 같은 매개변수, 같은 반환 값을 가집니다. 즉, 콜백 함수는 발생한 이벤트를 설명하는 <a href=\"/ko/docs/Web/API/Event\"><code>Event</code></a> 기반 객체를 유일한 매개변수로 받고, 아무것도 반환하지 않습니다.</p>\n<p>다음은 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Element/fullscreenchange_event\"><code>fullscreenchange</code> <small>(en-US)</small></a>와 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Element/fullscreenerror_event\"><code>fullscreenerror</code> <small>(en-US)</small></a> 두 유형의 이벤트를 동시에 처리할 수 있는 이벤트 처리 콜백의 예제입니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">eventHandler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>type <span class=\"token operator\">==</span> <span class=\"token string\">'fullscreenchange'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* 전체화면 여부 변화 처리 */</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token comment\">/* fullscreenerror */</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* 전체화면 오류 처리 */</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"옵션_지원을_안전하게_감지하기","title":"옵션 지원을 안전하게 감지하기","isH3":true,"content":"<p>과거 DOM 명세에선 <code>addEventListener()</code>의 세 번째 매개 변수가 캡처 여부를 나타내는 불리언 값이었습니다. 그러나 시간이 지남에 따라 더 많은 옵션이 필요하다는 것이 분명해졌습니다. 메서드 매개변수를 계속 늘리면 선택적인 옵션을 나타내는 매개변수 처리가 어려워질 것이므로, 이제 세 번째 매개변수는 불리언 값이 아니라 이벤트 수신기의 다양한 성질을 설명하는 옵션 객체가 됐습니다.</p>\n<p>구형 브라우저에서는 (그리고 일부 상대적으로 덜 오래된 브라우저에서도) 여전히 세 번째 매개변수에 오로지 불리언 값만 기대하고 있으므로 브라우저간 차이점을 처리할 수 있는 코드를 작성할 필요가 있습니다. 필요한 옵션에 대한 기능 감지 코드를 사용하세요.</p>\n<p>예를 들어, <code>passive</code> 옵션의 지원 여부를 알아보고 싶다고 가정하겠습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> passiveSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span> <span class=\"token function\">passive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 브라우저가 passive 속성에 접근하려고 하면 이 함수가 실행됨</span>\n      passiveSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  passiveSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>위의 코드는 <code>passive</code> 속성에 대한 접근자 함수를 가진 <code>options</code> 객체를 생성하고, <code>passive</code> 접근자는 자신이 호출되는 순간 <code>passiveSupported</code> 플래그 변수를 <code>true</code>로 설정합니다. 이 말은, <code>passiveSupported</code>가 <code>true</code>라면 브라우저가 <code>options</code> 객체의 <code>passive</code> 속성을 확인한다는 뜻이고, <code>false</code>면 확인하지 않는다는 뜻입니다. 그 아래에서는 <code>addEventListener()</code>를 사용해 가짜 이벤트 처리기를 등록, 브라우저가 세 번째 매개변수 객체를 인식할 수 있는지 확인하고, <code>removeEventListener()</code>로 정리합니다. (이벤트 수신기는 발동할 일이 없으므로 <code>null</code>을 지정해도 무방합니다.)</p>\n<p>이 방법으로 모든 옵션에 대한 지원 여부를 확인할 수 있습니다. 위 코드와 비슷하게, 확인하려는 옵션에 대한 접근자를 추가하기만 하면 됩니다.</p>\n<p>그 후, 실제로 플래그를 사용할 땐 아래와 같이 할 수 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>someElement<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mouseup\"</span><span class=\"token punctuation\">,</span> handleMouseUp<span class=\"token punctuation\">,</span> passiveSupported\n                               <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">passive</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>위 코드에서는 {domxref(\"Element/mouseup_event\", \"mouseup\")}} 이벤트에 대한 수신기를 <code>someElement</code> 요소에 추가하고 있습니다. 세 번째 매개변수를 살펴보면, 만약 <code>passiveSupported</code>가 <code>true</code>일 경우 <code>passive</code>를 <code>true</code>로 지정한 옵션 객체를 지정하고 있으며, <code>passiveSupported</code>가 <code>false</code>일 경우, 세 번째 매개변수는 불리언 값이어야 할 것이므로 <code>useCapture</code>에 대한 값인 <code>false</code>를 지정하는 모습입니다.</p>\n<p>직접 알아내는 대신 <a href=\"https://modernizr.com/docs\" class=\"external\" rel=\" noopener\">Modernizr</a>나 <a href=\"https://github.com/rafgraph/detect-it\" class=\"external\" rel=\" noopener\">Detect It</a> 등 서드파티 라이브러리를 사용해 기능 감지를 할 수도 있습니다.</p>\n<p><a href=\"https://wicg.github.io/admin/charter.html\" class=\"external\" rel=\" noopener\">Web Incubator Community Group</a>의 <a href=\"https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection\" class=\"external\" rel=\" noopener\"><code>EventListenerOptions</code></a>에 대한 글에서 더 자세한 정보를 알아보세요.</p>"}},{"type":"prose","value":{"id":"예제","title":"예제","isH3":false,"content":""}},{"type":"prose","value":{"id":"간단한_수신기_추가하기","title":"간단한 수신기 추가하기","isH3":true,"content":"<p>이 예제는 <code>addEventListener()</code>를 사용하여 요소에 대한 마우스 클릭을 감지하는 방법을 보여줍니다.</p>\n<h4 id=\"html\">HTML</h4>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>outside<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>t1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>one<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>t2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>two<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<h4 id=\"javascript\">JavaScript</h4>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// t2의 콘텐츠를 바꾸는 함수</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">modifyText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> t2 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">.</span>nodeValue <span class=\"token operator\">==</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    t2<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">.</span>nodeValue <span class=\"token operator\">=</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    t2<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">.</span>nodeValue <span class=\"token operator\">=</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 표에 이벤트 수신기 추가</span>\n<span class=\"token keyword\">const</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"outside\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nel<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> modifyText<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>위 코드의 <code>modifyText()</code>가 <code>addEventListener()</code>로 추가하는 <code>click</code> 이벤트의 수신기입니다. 표 요소의 어디를 클릭하든, 클릭 이벤트는 버를링을 통해 전파되다가 <code>modifyText()</code>를 발동하게 됩니다.</p>\n<h4 id=\"결과\">결과</h4><iframe class=\"sample-code-frame\" title=\"간단한 수신기 추가하기 sample\" id=\"frame_간단한_수신기_추가하기\" src=\"https://yari-demos.prod.mdn.mozit.cloud/ko/docs/Web/API/EventTarget/addEventListener/_sample_.%EA%B0%84%EB%8B%A8%ED%95%9C_%EC%88%98%EC%8B%A0%EA%B8%B0_%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0.html\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"중단_가능한_수신기_추가하기","title":"중단 가능한 수신기 추가하기","isH3":true,"content":"<p>이 예제는 <a href=\"/ko/docs/Web/API/AbortSignal\"><code>AbortSignal</code></a>로 중단할 수 있는 <code>addEventListener()</code>의 모습을 보입니다.</p>\n<h4 id=\"html_2\">HTML</h4>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>outside<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>t1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>one<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>t2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>two<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<h4 id=\"javascript_2\">JavaScript</h4>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 표에 중단 가능한 수신기 추가</span>\n<span class=\"token keyword\">const</span> controller <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AbortController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"outside\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nel<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> modifyText<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">signal</span><span class=\"token operator\">:</span> controller<span class=\"token punctuation\">.</span>signal <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// t2의 콘텐츠를 바꾸는 함수</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">modifyText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> t2 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">.</span>nodeValue <span class=\"token operator\">==</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    t2<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">.</span>nodeValue <span class=\"token operator\">=</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    t2<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">.</span>nodeValue <span class=\"token operator\">=</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">;</span>\n    controller<span class=\"token punctuation\">.</span><span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 값이 \"three\"가 되면 수신기 제거</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>이 예제는 앞선 첫 번째 예제를 수정해서, 표의 두 번째 행 내용이 \"three\"가 되면 <code>addEventListener()</code>의 옵션에 지정한 <a href=\"/ko/docs/Web/API/AbortSignal\"><code>AbortSignal</code></a>의 <code>abort()</code>를 호출합니다. 그 결과로 클릭 이벤트 수신기가 해제되고, 두 번째 행의 내용은 \"three\"에서 바뀌지 않게 됩니다.</p>\n<h4 id=\"결과_2\">결과</h4><iframe class=\"sample-code-frame\" title=\"중단 가능한 수신기 추가하기 sample\" id=\"frame_중단_가능한_수신기_추가하기\" src=\"https://yari-demos.prod.mdn.mozit.cloud/ko/docs/Web/API/EventTarget/addEventListener/_sample_.%EC%A4%91%EB%8B%A8_%EA%B0%80%EB%8A%A5%ED%95%9C_%EC%88%98%EC%8B%A0%EA%B8%B0_%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0.html\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"익명_함수와_이벤트_수신기","title":"익명 함수와 이벤트 수신기","isH3":true,"content":"<p>여기선 익명 함수를 사용해 이벤트 수신기에 매개변수를 지정하는 방법을 보입니다.</p>\n<h4 id=\"html_3\">HTML</h4>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>outside<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>t1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>one<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>t2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>two<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<h4 id=\"javascript_3\">JavaScript</h4>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// t2의 콘텐츠를 바꾸는 함수</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">modifyText</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">new_text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> t2 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  t2<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">.</span>nodeValue <span class=\"token operator\">=</span> new_text<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 표에 이벤트 수신기 추가</span>\n<span class=\"token keyword\">const</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"outside\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nel<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token function\">modifyText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"four\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>addEventListener()</code> 호출을 살펴보면, 실제로 이벤트에 반응할 <code>modifyText()</code> 함수에 매개변수를 제공하는 코드가 익명 함수에 의해 캡슐화된 모습을 볼 수 있습니다.</p>\n<h4 id=\"결과_3\">결과</h4><iframe class=\"sample-code-frame\" title=\"익명 함수와 이벤트 수신기 sample\" id=\"frame_익명_함수와_이벤트_수신기\" src=\"https://yari-demos.prod.mdn.mozit.cloud/ko/docs/Web/API/EventTarget/addEventListener/_sample_.%EC%9D%B5%EB%AA%85_%ED%95%A8%EC%88%98%EC%99%80_%EC%9D%B4%EB%B2%A4%ED%8A%B8_%EC%88%98%EC%8B%A0%EA%B8%B0.html\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"화살표_함수와_이벤트_수신기","title":"화살표 함수와 이벤트 수신기","isH3":true,"content":"<p>이 예제는 화살표 함수를 사용해서 간단한 이벤트 수신기를 구현하는 모습을 보입니다.</p>\n<h4 id=\"html_4\">HTML</h4>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>outside<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>t1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>one<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>t2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>two<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<h4 id=\"javascript_4\">JavaScript</h4>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// t2의 콘텐츠를 바꾸는 함수</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">modifyText</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">new_text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> t2 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  t2<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">.</span>nodeValue <span class=\"token operator\">=</span> new_text<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 화살표 함수를 사용한 이벤트 수신기를 표에 추가</span>\n<span class=\"token keyword\">const</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"outside\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nel<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">modifyText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"four\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"결과_4\">결과</h4><iframe class=\"sample-code-frame\" title=\"화살표 함수와 이벤트 수신기 sample\" id=\"frame_화살표_함수와_이벤트_수신기\" src=\"https://yari-demos.prod.mdn.mozit.cloud/ko/docs/Web/API/EventTarget/addEventListener/_sample_.%ED%99%94%EC%82%B4%ED%91%9C_%ED%95%A8%EC%88%98%EC%99%80_%EC%9D%B4%EB%B2%A4%ED%8A%B8_%EC%88%98%EC%8B%A0%EA%B8%B0.html\" loading=\"lazy\"></iframe>\n<p>화살표 함수와 익명 함수는 비슷하지만, <code>this</code> 바인딩에 차이가 있다는 사실에 주의해야 합니다. 익명 함수(와 다른 모든 전통적인 JavaScript 함수)는 스스로의 <code>this</code> 바인딩을 생성하지만, 화살표 함수는 자신을 포함하고 있는 함수의 <code>this</code> 바인딩을 상속합니다.</p>\n<p>따라서 화살표 함수를 포함한 함수의 변수와 상수를 이벤트 처리 코드에서도 사용할 수 있습니다.</p>"}},{"type":"prose","value":{"id":"옵션_객체_사용하기","title":"옵션 객체 사용하기","isH3":true,"content":"<h4 id=\"html_5\">HTML</h4>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>outer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  바깥, 일회용 &amp; 다회용\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>middle<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_blank<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    중간, 캡처 &amp; 비 캡처\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>inner1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://www.mozilla.org<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_blank<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n      내부 1, 패시브 &amp; (허용되지 않은) preventDefault\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>inner2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://developer.mozilla.org/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_blank<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n      내부 2, 비 패시브 &amp; preventDefault (새 페이지가 열리지 않음)\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<h4 id=\"css\">CSS</h4>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">.outer, .middle, .inner1, .inner2</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span>   520px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 15px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span>  15px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-decoration</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.outer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid red<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span>  red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.middle</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid green<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span>  green<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span>  460px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.inner1, .inner2</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid purple<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span>  purple<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span>  400px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"javascript_5\">JavaScript</h4>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> outer  <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.outer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> middle <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.middle'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> inner1 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.inner1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> inner2 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.inner2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> capture <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">capture</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> noneCapture <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">capture</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> once <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">once</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> noneOnce <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">once</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> passive <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">passive</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> nonePassive <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">passive</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nouter<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> onceHandler<span class=\"token punctuation\">,</span> once<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nouter<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> noneOnceHandler<span class=\"token punctuation\">,</span> noneOnce<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmiddle<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> captureHandler<span class=\"token punctuation\">,</span> capture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmiddle<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> noneCaptureHandler<span class=\"token punctuation\">,</span> noneCapture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninner1<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> passiveHandler<span class=\"token punctuation\">,</span> passive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninner2<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> nonePassiveHandler<span class=\"token punctuation\">,</span> nonePassive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">onceHandler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'바깥, 일회용'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">noneOnceHandler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'바깥, 다회용, 기본 값'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">captureHandler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//event.stopImmediatePropagation();</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'중간, 캡처'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">noneCaptureHandler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'중간, 비 캡처, 기본 값'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">passiveHandler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 패시브 수신기 내에서는 preventDefault 사용 불가</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'내부 1, 패시브, 새 페이지 열림'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">nonePassiveHandler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//event.stopPropagation();</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'내부 2, 비 패시브, 기본 값, 새 페이지 열림'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"결과_5\">결과</h4>\n<p>바깥과 중간, 내부 컨테이너를 반복해서 클릭해 각각의 옵션이 어떻게 동작하는지 확인해보세요.</p><iframe class=\"sample-code-frame\" title=\"옵션 객체 사용하기 sample\" id=\"frame_옵션_객체_사용하기\" width=\"600\" height=\"310\" src=\"https://yari-demos.prod.mdn.mozit.cloud/ko/docs/Web/API/EventTarget/addEventListener/_sample_.%EC%98%B5%EC%85%98_%EA%B0%9D%EC%B2%B4_%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0.html\" loading=\"lazy\"></iframe>\n<p><code>options</code> 객체에 특정 값을 지정하기 전에, 옵션의 지원 범위는 브라우저와 브라우저 버전에 따라 다르므로 브라우저가 해당 옵션을 지원하는지 먼저 확인하는 것이 좋습니다. <a href=\"#%EC%98%B5%EC%85%98_%EC%A7%80%EC%9B%90%EC%9D%84_%EC%95%88%EC%A0%84%ED%95%98%EA%B2%8C_%EA%B0%90%EC%A7%80%ED%95%98%EA%B8%B0\">옵션 지원을 안전하게 감지하기</a>에서 방법을 알아보세요.</p>"}},{"type":"prose","value":{"id":"기타_일람","title":"기타 일람","isH3":false,"content":""}},{"type":"prose","value":{"id":"이벤트_수신기_내부의_this_값","title":"이벤트 수신기 내부의 this 값","isH3":true,"content":"<p>비슷한 요소 다수의 이벤트를 모두 처리할 수 있는 범용 수신기를 정의하는 경우, 부착된 요소의 참조를 가져와야 하는 상황이 종종 발생합니다.</p>\n<p><code>addEventListener()</code>를 사용해 요소에 수신기를 부착하게 되면 수신기 내부의 <a href=\"/ko/docs/Web/JavaScript/Reference/Operators/this\"><code>this</code></a> 값은 대상 요소를 가리키게 되며, 이는 수신기가 매개변수로 받게 되는 이벤트 객체의 <code>currentTarget</code> 속성과 같습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>my_element<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>className<span class=\"token punctuation\">)</span>           <span class=\"token comment\">// my_element의 className 기록</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>currentTarget <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// `true` 기록</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>다만 <a href=\"/ko/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">화살표 함수는 스스로의 <code>this</code> 맥락을 가지지 않는다는 점</a>을 기억해야 합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>my_element<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>className<span class=\"token punctuation\">)</span>           <span class=\"token comment\">// 경고: `this`가 `my_element`가 아님</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>currentTarget <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// `false` 기록</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>HTML 소스 코드에서 (<a href=\"/ko/docs/conflicting/Web/API/Element/click_event\" title=\"onclick\"><code>onclick</code></a> 특성 등을 사용해) 요소의 이벤트 수신기를 지정하는 경우, 이벤트 수신기 특성 내의 JavaScript 코드는 가상의 함수로 감싸인 후, 감싼 함수의 <code>this</code>를 <code>addEventListener()</code>와 같은 방식으로 바인딩하는 것으로 생각할 수 있습니다. 즉, 해당 특성의 값에서 등장하는 <code>this</code>는 특성이 속한 요소를 가리킵니다.</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my_table<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token comment\">&lt;!-- `this`가 표를 가리키므로 'my_table'을 기록함 --&gt;</span>\n  ...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>참고로 이벤트 수신기 특성 안에서 호출한 함수의 <code>this</code>는 <a href=\"/ko/docs/Web/JavaScript/Reference/Operators/this\">표준 규칙</a>을 따라가며, 아래 코드로 확인할 수 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">function</span> <span class=\"token function\">logID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my_table<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">logID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token comment\">&lt;!-- 호출 시, logID의 `this`는 전역 객체를 가리키게 됨 --&gt;</span>\n  ...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p><code>logID()</code> 내의 <code>this</code>는 전역 객체 <a href=\"/ko/docs/Web/API/Window\"><code>Window</code></a>의 참조가 됩니다. (단, <a href=\"/ko/docs/Web/JavaScript/Reference/Strict_mode\">엄격 모드</a>에서는 <code>undefined</code>)</p>\n<h4 id=\"bind로_this_설정하기\">bind()로 this 설정하기</h4>\n<p><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a> 메서드를 사용하면 모든 후속 호출의 <code>this</code> 맥락을 고정할 수 있으므로, <code>this</code>의 값이 호출 위치에 따라 달라져서 정확히 파악하기 힘들 때 발생하는 문제를 먼저 방지할 수 있습니다. 다만, 바인드한 함수 참조를 어딘가에 보관해놔야 나중에 수신기를 제거할 수 있습니다.</p>\n<p>다음은 <code>bind()</code>를 사용하는 수신기와 사용하지 않는 수신기의 모습입니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Something</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// this는 Something 인스턴스</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Something Good'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick1</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined, this는 element임</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Something Good', this는 Something 인스턴스</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// bind가 onclick2의 this 맥락을 고정함</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onclick2 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onclick2</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  element<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onclick1<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  element<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onclick2<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Something</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>다른 방법으로는 <code>handleEvent()</code>라는 특별한 이름의 메서드를 구현해 모든 이벤트에 대응하는 것입니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Something</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// this는 Something 인스턴스</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Something Good'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">handleEvent</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Something Good', this는 Something 인스턴스로 바인딩 됨</span>\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'click'</span><span class=\"token operator\">:</span>\n        <span class=\"token comment\">// 다른 코드...</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'dblclick'</span><span class=\"token operator\">:</span>\n        <span class=\"token comment\">// 다른 코드...</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 수신기 매개변수가 this.handleEvent가 아니라 this인 것에 주의</span>\n  element<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  element<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dblclick'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 수신기 제거도 가능</span>\n  element<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  element<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dblclick'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Something</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>this</code> 참조를 처리할 수 있는 또 다른 방법으로는 객체의 필드에 접근해야 하는 메서드를 익명 함수로 감싸서 제공하는 것이 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">SomeClass</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Something Good'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> that <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'keydown'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> that<span class=\"token punctuation\">.</span><span class=\"token function\">someMethod</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">someMethod</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>keyCode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span>\n        <span class=\"token comment\">// 다른 코드...</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span>\n        <span class=\"token comment\">// 다른 코드...</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> myObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SomeClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyObject<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"이벤트_수신기_안팎으로_데이터_옮기기","title":"이벤트 수신기 안팎으로 데이터 옮기기","isH3":true,"content":"<p>이벤트 수신기에 데이터를 제공하는 것은 물론, 수신기 실행이 끝난 후 결과를 가져오는 것 또한 매우 어려워보일 것입니다. 이벤트 수신기는 유일한 매개변수로 <a href=\"/ko/docs/Learn/JavaScript/Building_blocks/Events#%EC%9D%B4%EB%B2%A4%ED%8A%B8_%EA%B0%9D%EC%B2%B4\">이벤트 객체</a>만 받으며, 반환하는 모든 값은 무시됩니다. 그러면 어떻게 수신기에 데이터를 전달하거나, 그 밖으로 데이터를 가져올 수 있을까요? 몇 가지 좋은 방법을 소개합니다.</p>\n<h4 id=\"this로_이벤트_수신기에_데이터_전달하기\">this로 이벤트 수신기에 데이터 전달하기</h4>\n<p><a href=\"#bind%EB%A1%9C_this_%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\">위에서 언급했듯</a>, <code>Function.prototype.bind()</code>를 사용하면 <code>this</code> 참조 변수를 통해 수신기에 값을 전달할 수 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> myButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-button-id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> someString <span class=\"token operator\">=</span> <span class=\"token string\">'Data'</span><span class=\"token punctuation\">;</span>\n\nmyButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 예상 값: 'Data'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>someString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>이 방법은 수신기가 발동된 대상을 알 필요가 없을 때 적합하며, 매개변수를 통해 값을 제공하는 것과 크게 다르지 않은 방법을 제공한다는 점이 장점입니다.</p>\n<h4 id=\"바깥_스코프_속성으로_이벤트_수신기에_데이터_전달하기\">바깥 스코프 속성으로 이벤트 수신기에 데이터 전달하기</h4>\n<p>바깥 스코프에서 <code>const</code>, <code>let</code>을 사용해 변수를 선언할 경우, 해당 스코프 안의 모든 함수에서도 해당 변수에 접근할 수 있습니다(<a href=\"/ko/docs/Glossary/Function#%EC%97%AC%EB%9F%AC_%ED%95%A8%EC%88%98_%ED%98%95%EC%8B%9D%EB%93%A4\">함수</a> 문서에서 바깥/내부 함수에 대한 정보를, <a href=\"/ko/docs/Web/JavaScript/Reference/Statements/var#%EC%95%94%EB%AC%B5%EC%A0%81%EC%9D%B8_%EC%A0%84%EC%97%AD%EB%B3%80%EC%88%98%EC%99%80_%EC%99%B8%EB%B6%80_%ED%95%A8%EC%88%98_%EB%B2%94%EC%9C%84\"><code>var</code></a> 문서에서 변수 스코프에 대한 정보를 읽어보세요). 따라서, 이벤트 수신기가 바깥 데이터에 접근할 수 있는 가장 쉬운 방법은, 그 데이터를 이벤트 수신기가 선언된 스코프에서 접근할 수 있도록 하는 것입니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> myButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-button-id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> someString <span class=\"token operator\">=</span> <span class=\"token string\">'Data'</span><span class=\"token punctuation\">;</span>\n\nmyButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>someString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 예상 값: 'Data'</span>\n\n  someString <span class=\"token operator\">=</span> <span class=\"token string\">'Data Again'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>someString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 예상 값: 'Data' ('Data Again'을 출력하지 않음)</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>참고:</strong> 내부 스코프에서 바깥 스코프의 <code>const</code>와 <code>let</code> 변수에 접근할 수는 있지만, 수신기 내에서 변수의 값을 바꾸더라도 바깥 스코프에 그 변경점이 나타날 것으로 생각해서는 안됩니다. 이벤트 수신기가 발동하는 시점에는 이미 수신기가 속한 스코프가 실행을 마쳤을 것이기 때문입니다.</p>\n</div>\n<h4 id=\"객체를_사용해_이벤트_수신기_안팎으로_데이터_전달하기\">객체를 사용해 이벤트 수신기 안팎으로 데이터 전달하기</h4>\n<p>자신을 참조하는 변수가 메모리에 남아있는 한, 객체는 메모리에서 사라지지 않습니다. 이 성질에 더해, 객체는 속성을 갖는다는 점, 그리고 참조로 전달된다는 점을 활용하면 스코프 안팎에서 데이터를 교환하는 창구로 객체를 이용할 수 있습니다.</p>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>참고:</strong> JavaScript에서는 함수도 사실 객체입니다. 따라서 함수도 속성을 가질 수 있고, 메모리에 유지되는 변수에 할당한 경우 실행 후에도 메모리에서 해제되지 않습니다.</p>\n</div>\n<p>객체를 참조하는 변수가 메모리에 존재하는 한 객체 속성을 사용해 메모리에 데이터를 저장할 수 있으니, 이벤트 수신기 내부로 데이터를 전달할 때도 사용할 수 있고, 이벤트 처리기 실행이 끝난 후 변화된 데이터를 가져와야 할 때도 사용할 수 있습니다. 아래 코드를 살펴보세요.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> myButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-button-id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> someObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">aProperty</span><span class=\"token operator\">:</span> <span class=\"token string\">'Data'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmyButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>someObject<span class=\"token punctuation\">.</span>aProperty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 예상 값: 'Data'</span>\n\n  someObject<span class=\"token punctuation\">.</span>aProperty <span class=\"token operator\">=</span> <span class=\"token string\">'Data Again'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 값 변경</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>someObject<span class=\"token punctuation\">.</span>aProperty <span class=\"token operator\">===</span> <span class=\"token string\">'Data Again'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Data Again: True'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    someObject<span class=\"token punctuation\">.</span>aProperty <span class=\"token operator\">=</span> <span class=\"token string\">'Data'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 다음 이벤트 실행을 기다리기 위해 값 초기화</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>위 예제를 보면, 이벤트 수신기와 인터벌 함수가 정의된 스코프는 <code>someObject.aProperty</code>가 바뀌기 전에 실행이 끝나겠지만, <code>someObject</code>의 참조가 수신기와 인터벌 함수 메모리에 계속 남아있기 때문에, 양쪽 모두에서 같은 데이터에 접근할 수 있습니다. 즉, 한 쪽이 데이터를 바꾸면 반대편에서도 바뀐 데이터를 볼 수 있습니다.</p>\n<div class=\"notecard note\" id=\"sect6\">\n  <p><strong>참고:</strong> 객체는 변수에 참조, 실제 데이터가 저장된 메모리의 주소로 할당됩니다. 이 말은 곧, 객체를 담고 있는 변수를 사용하면, 같은 객체를 담은 다른 변수에도 영향을 줄 수 있다는 뜻입니다. 두 개의 변수가 같은 객체를 참조(e.g. <code>let a = b = {aProperty: 'Yeah'};</code>)하면, 한 쪽의 변수 데이터만 바꿔도 다른 쪽 데이터가 같이 바뀝니다.</p>\n</div>\n<div class=\"notecard note\" id=\"sect7\">\n  <p><strong>참고:</strong> 객체는 변수에 참조로 저장되기 때문에, 함수에서 객체를 반환하면 함수가 종료된 이후에도 계속 지속(데이터를 잃지 않도록 메모리에 유지)시킬 수 있습니다.</p>\n</div>"}},{"type":"prose","value":{"id":"메모리_문제","title":"메모리 문제","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> els <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 상황 1</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> els<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  els<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token comment\">/*do something*/</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 상황 2</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">processEvent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* do something */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> els<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  els<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> processEvent<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>위 코드에서 상황 1의 경우에는 반복문의 매 반복마다 새로운 익명 처리기 함수가 생성됩니다. 반면 상황 2에서는 사전에 정의한 함수를 이벤트 처리기로 사용하므로 처리기 함수를 하나만 사용하고, 따라서 더 작은 메모리 공간만 사용합니다. 더군다나 상황 1에서는, 익명 함수에 대한 참조를 유지하지 않으므로 <a href=\"/ko/docs/Web/API/EventTarget/removeEventListener\" title=\"removeEventListener()\"><code>removeEventListener()</code></a>를 호출할 수 없습니다. 반면 상황 2에서는, <code>processEvent</code>가 처리기 함수를 가리키므로 <code>myElement.removeEventListener(\"click\", processEvent, false)</code>를 할 수 있습니다.</p>\n<p>사실, 메모리 소비와 관련하여, 함수 참조를 유지하지 못하는 것은 중요한 문제가 아닙니다. 진짜 문제는 함수 참조를 '정적으로' 유지하지 못하는 것입니다. 이 점을 보여주는 아래의 상황 3과 상황 4에서는 함수 참조를 유지하긴 하지만, 매 반복마다 재정의됩니다. 상황 3에서는 반복할 때마다 익명 함수에 대한 참조를 재할당하고, 상황 4에서는 함수 전체 정의는 변하지 않지만 매번 마치 새로운 함수처럼 반복적으로 재정의되므로 두 상황 모두 정적이지 않습니다. 따라서 코드를 보기엔 다수의 동일한 이벤트 수신기처럼 보이지만, 사실 각 반복마다 새로운 처리기를 참조하는 새로운 이벤트 수신기를 생성하고 있는 것입니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> els <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">processEvent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* do something */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 시연을 위해 [i] 대신 [j]를 사용하는 실수를 한 것에 주의하세요. 반복문 내에서 정의한 수신기를 모두 첫 요소에 등록하고 있습니다.</span>\n\n<span class=\"token comment\">// 상황 3</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> els<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  els<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">processEvent</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* do something */</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 상황 4</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> els<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">processEvent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* do something */</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  els<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> processEvent<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>또한 상황 3과 4에서는 함수 참조가 유지되긴 하지만 매번 <code>addEventListener()</code> 전에 재정의되므로, <code>removeEventListener(\"click\", processEvent, false)</code>로 수신기를 제거할 수는 있으나 오직 마지막으로 정의된 수신기만 제거됩니다.</p>"}},{"type":"prose","value":{"id":"패시브_수신기로_스크롤_성능_향상","title":"패시브 수신기로 스크롤 성능 향상","isH3":true,"content":"<p>명세에 따르면, <code>passive</code> 옵션의 기본 값은 항상 <code>false</code> 입니다. 그러나 이 기본 값으로 인해 터치 이벤트 등 일부 이벤트의 수신기가 스크롤을 처리 중인 브라우저 메인 스레드를 블록할 가능성이 생기고, 따라서 스크롤 성능이 크게 저하될 수 있습니다.</p>\n<p>이 문제를 방지하기 위해 일부 브라우저(Chrome과 Firefox 등)는 문서 레벨 노드인 <a href=\"/ko/docs/Web/API/Window\"><code>Window</code></a>, <a href=\"/ko/docs/Web/API/Document\"><code>Document</code></a>, <a href=\"/ko/docs/Web/API/Document/body\"><code>Document.body</code></a>의 <a href=\"/ko/docs/Web/API/Element/touchstart_event\" title=\"touchstart\"><code>touchstart</code></a>와 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Element/touchmove_event\"><code>touchmove</code> <small>(en-US)</small></a> 이벤트에 대해선 <code>passive</code>의 기본 값을 <code>true</code>로 바꿔 적용합니다. 패시브 이벤트 수신기는 이벤트를 <a href=\"/ko/docs/Web/API/Event/preventDefault\">취소</a>할 수 없으므로 사용자가 스크롤할 때 브라우저의 렌더링을 방해하지 않습니다.</p>\n<div class=\"notecard note\" id=\"sect8\">\n  <p><strong>참고:</strong> 어떤 브라우저/버전에서 이렇게 동작하는지는 아래의 브라우저 호환성 표에 나와있습니다.</p>\n</div>\n<p><code>passive</code> 옵션에 명시적으로 <code>false</code>를 지정해서 이 동작을 막을 수 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/* 기능 감지 */</span>\n<span class=\"token keyword\">let</span> passiveIfSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"passive\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> passiveIfSupported <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">passive</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* do something */</span>\n  <span class=\"token comment\">// event.preventDefault() 사용 불가</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> passiveIfSupported <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>addEventListener()</code>가 <code>options</code> 매개변수를 지원하지 않는 구형 브라우저에서 <code>options</code> 객체를 지정하면 <code>useCapture</code> 매개변수를 사용할 수 없으므로, 위와 같이 <a href=\"#%EC%98%B5%EC%85%98_%EC%A7%80%EC%9B%90%EC%9D%84_%EC%95%88%EC%A0%84%ED%95%98%EA%B2%8C_%EA%B0%90%EC%A7%80%ED%95%98%EA%B8%B0\">기능 감지</a>를 거쳐야 합니다.</p>\n<p><a href=\"/ko/docs/Web/API/Element/scroll_event\" title=\"scroll\"><code>scroll</code></a> 이벤트에 대해서는 <code>passive</code> 옵션을 고려하지 않아도 됩니다. 어차피 취소할 수 없는 이벤트라서, 수신기가 페이지 렌더링을 막을 수도 없기 때문입니다.</p>"}},{"type":"specifications","value":{"title":"명세","id":"명세","isH3":false,"specifications":[{"bcdSpecificationURL":"https://dom.spec.whatwg.org/#ref-for-dom-eventtarget-addeventlistener③","title":"DOM Standard"}],"query":"api.EventTarget.addEventListener"}},{"type":"browser_compatibility","value":{"title":"브라우저 호환성","id":"브라우저_호환성","isH3":false,"query":"api.EventTarget.addEventListener","dataURL":"/ko/docs/Web/API/EventTarget/addEventListener/bcd.json"}},{"type":"prose","value":{"id":"같이_보기","title":"같이 보기","isH3":false,"content":"<ul>\n  <li><a href=\"/ko/docs/Web/API/EventTarget/removeEventListener\"><code>EventTarget.removeEventListener()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/Events/Creating_and_triggering_events\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">이벤트 생성 및 발동 (en-US)</a></li>\n  <li><a href=\"https://www.quirksmode.org/js/this.html\" class=\"external\" rel=\" noopener\">이벤트 처리기의 <code>this</code>에 관한 더 자세한 정보</a></li>\n</ul>"}}],"toc":[{"text":"구문","id":"구문"},{"text":"사용 일람","id":"사용_일람"},{"text":"예제","id":"예제"},{"text":"기타 일람","id":"기타_일람"},{"text":"명세","id":"명세"},{"text":"브라우저 호환성","id":"브라우저_호환성"},{"text":"같이 보기","id":"같이_보기"}],"summary":"EventTarget 인터페이스의 addEventListener() 메서드는 지정한 유형의 이벤트를 대상이 수신할 때마다 호출할 함수를 설정합니다.","popularity":0.0043,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"EventTarget.addEventListener()","locale":"en-US","native":"English (US)"},{"title":"element.addEventListener","locale":"es","native":"Español"},{"title":"EventTarget.addEventListener()","locale":"fr","native":"Français"},{"title":"EventTarget.addEventListener()","locale":"ja","native":"日本語"},{"title":"Element.addEventListener()","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Метод EventTarget.addEventListener()","locale":"ru","native":"Русский"},{"title":"EventTarget.addEventListener()","locale":"zh-CN","native":"中文 (简体)"},{"title":"EventListener","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ko/web/api/eventtarget/addeventlistener","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/web/api/eventtarget/addeventlistener/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ko/docs/Web","title":"개발자를 위한 웹 기술"},{"uri":"/ko/docs/Web/API","title":"Web API"},{"uri":"/ko/docs/Web/API/EventTarget","title":"EventTarget"},{"uri":"/ko/docs/Web/API/EventTarget/addEventListener","title":"EventTarget.addEventListener()"}],"pageTitle":"EventTarget.addEventListener() - Web API | MDN","noIndexing":false}}