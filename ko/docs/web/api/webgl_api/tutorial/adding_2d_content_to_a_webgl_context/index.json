{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"WebGL 컨텍스트에 2D 컨텐츠 추가하기","mdn_url":"/ko/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context","locale":"ko","native":"한국어","sidebarHTML":"\n <ol>\n  <li><a href=\"/ko/docs/Web/API/WebGL_API\"><strong>WebGL API</strong></a></li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>WebGL tutorial</summary>\n      <ol>\n        <li><a href=\"/ko/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL\">Getting started with WebGL</a></li>\n        <li><a href=\"/ko/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context\">Adding 2D content to a WebGL context</a></li>\n        <li><a href=\"/ko/docs/Web/API/WebGL_API/Tutorial/Using_shaders_to_apply_color_in_WebGL\">Using shaders to apply color in WebGL</a></li>\n        <li><a href=\"/ko/docs/Web/API/WebGL_API/Tutorial/Animating_objects_with_WebGL\">Animating objects with WebGL</a></li>\n        <li><a href=\"/ko/docs/Web/API/WebGL_API/Tutorial/Creating_3D_objects_using_WebGL\">Creating 3D objects using WebGL</a></li>\n        <li><a href=\"/ko/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL\">Using textures in WebGL</a></li>\n        <li><a href=\"/ko/docs/Web/API/WebGL_API/Tutorial/Lighting_in_WebGL\">Lighting in WebGL</a></li>\n        <li><a href=\"/ko/docs/Web/API/WebGL_API/Tutorial/Animating_textures_in_WebGL\">Animating textures in WebGL</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Examples and articles</summary>\n      <ol>\n        <li><a href=\"/ko/docs/Web/API/WebGL_API/Matrix_math_for_the_web\">Matrix math for the web</a></li>\n        <li><a href=\"/ko/docs/Web/API/WebGL_API/WebGL_model_view_projection\">WebGL model view projection</a></li>\n        <li><a href=\"/ko/docs/Web/API/WebGL_API/WebGL_best_practices\">WebGL best practices</a></li>\n        <li><a href=\"/ko/docs/Web/API/WebGL_API/Using_Extensions\">Using WebGL extensions</a></li>\n        <li><a href=\"/ko/docs/Web/API/WebGL_API/Basic_2D_animation_example\">A basic 2D WebGL animation example</a></li>\n        <li><a href=\"/ko/docs/Web/API/WebGL_API/By_example\">WebGL by example</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Interfaces</summary>\n      <ol>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLRenderingContext\"><code>WebGLRenderingContext</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGL2RenderingContext\"><code>WebGL2RenderingContext</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLActiveInfo\"><code>WebGLActiveInfo</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLBuffer\"><code>WebGLBuffer</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLContextEvent\"><code>WebGLContextEvent</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLFramebuffer\"><code>WebGLFramebuffer</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLProgram\"><code>WebGLProgram</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLQuery\"><code>WebGLQuery</code> <small>(en-US)</small></a></li>\n        <li><a href=\"/ko/docs/Web/API/WebGLRenderbuffer\"><code>WebGLRenderbuffer</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLSampler\"><code>WebGLSampler</code> <small>(en-US)</small></a></li>\n        <li><a href=\"/ko/docs/Web/API/WebGLShader\"><code>WebGLShader</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLShaderPrecisionFormat\"><code>WebGLShaderPrecisionFormat</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLSync\"><code>WebGLSync</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLTexture\"><code>WebGLTexture</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLTransformFeedback\"><code>WebGLTransformFeedback</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLUniformLocation\"><code>WebGLUniformLocation</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLVertexArrayObject\"><code>WebGLVertexArrayObject</code> <small>(en-US)</small></a></li>\n      </ol>\n    </details>\n  </li>\n\n  <li><strong><a href=\"/ko/docs/MDN\">Documentation:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Contribute</summary>\n      <ol>\n        <li><a href=\"/ko/docs/MDN\">The MDN project</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ko/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL\">« 이전</a></li>\n    <li><a class=\"button minimal\" href=\"/ko/docs/Web/API/WebGL_API/Tutorial/Using_shaders_to_apply_color_in_WebGL\">다음  »</a></li>\n</ul>\n<p>일단 성공적으로 <a href=\"/en-US/WebGL/Getting_started_with_WebGL\">WebGL컨텍스트를 생성</a>하면 그 안에 렌더링을 시작할 수 있습니다. 가장 간단히 해볼 수 있는 것은 텍스쳐가 없는 2D 객체를 렌더링 하는 것입니다. 한번 사각형을 그리는 코드를 작성하는 것으로 시작해봅시다.</p>"}},{"type":"prose","value":{"id":"장면scene에_조명효과_추가하기","title":"장면(scene)에 조명효과 추가하기","isH3":false,"content":"<p>시작 하기전에 반드시 이해해야할 것은 예제에서 오직 2차원 객체만 랜더링을 하더라도 3D 공간에서 그리고 있다는 것 입니다. 이처럼 여전히 객체가 그려질 간단한 장면에 조명 쉐이더를 설정하는것이 필요합니다. 여기서 어떻게 사각형에 조명효과를 줄 수 있는지 확인해보겠습니다.</p>"}},{"type":"prose","value":{"id":"쉐이더_초기화","title":"쉐이더 초기화","isH3":true,"content":"<p>쉐이더는<a href=\"https://www.khronos.org/registry/gles/specs/2.0/GLSL_ES_Specification_1.0.17.pdf\" class=\"external\" rel=\" noopener\">OpenGL ES 쉐이딩 언어</a>를 사용하여 지정됩니다. 컨텐츠의 유지보수와 업데이트를 쉽게하기 위해 쉐이더를 '불러오기위한' 코드를 직접 작성하겠습니다. 다시 말하자면 쉐이더를 직접 새로 만드는 것이 아니라 HTML문서에서 쉐이더를 '찾아오는' 자바스크립트 코드입니다. 이 작업을 처리하는 initShaders()함수의 일반적인 형태를 살펴보겠습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">initShaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> fragmentShader <span class=\"token operator\">=</span> <span class=\"token function\">getShader</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> <span class=\"token string\">\"shader-fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> vertexShader <span class=\"token operator\">=</span> <span class=\"token function\">getShader</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> <span class=\"token string\">\"shader-vs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Create the shader program</span>\n\n  shaderProgram <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">createProgram</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">attachShader</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> vertexShader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">attachShader</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> fragmentShader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">linkProgram</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// If creating the shader program failed, alert</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>gl<span class=\"token punctuation\">.</span><span class=\"token function\">getProgramParameter</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">LINK_STATUS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unable to initialize the shader program.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">useProgram</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  vertexPositionAttribute <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">\"aVertexPosition\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">enableVertexAttribArray</span><span class=\"token punctuation\">(</span>vertexPositionAttribute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>이 방식을 통해 로딩되는 쉐이더는 두가지가 있습니다. 첫번째는 조각 쉐이더(fragment shader)로 \"shader-fs\"라는 ID를 가진 script 엘리먼트에서 불러옵니다. 두번째는 정점 쉐이더(vertex shader)로 \"shader-vs\"라는 ID를 가진 script엘리먼트에서 불러옵니다. getShader()함수는 다음 섹션에서 다룰 것입니다. 이 과정은 쉐이더 프로그램을 DOM에서 가저오는 것을 다룹니다.</p>\n<p>그 다음 우리는 WebGL 객체의 createProgram()함수를 호출하여 쉐이더 프로그램을 생성 할 것입니다. WebGL 객체에 두개의 쉐이더를 붙인다음 서로 연결할 것입니다. 그 다음 프로그램이 성공적으로 연결되었는지 확인하기 위해 gl 객체의 LINK_STATUS 매개변수를 체크합니다. 이것이 성공적이라면 새로운 쉐이더 프로그램을 활성화 합니다.</p>"}},{"type":"prose","value":{"id":"dom에서_쉐이더_불러오기","title":"DOM에서 쉐이더 불러오기","isH3":true,"content":"<p>getShader()함수는 DOM에서 지정된 이름을 가진 쉐이더 프로그램을 가져와 컴파일된 쉐이더 프로그램을 호출자에 반환 합니다. 컴파일이나 불러올 수 없는 경우에는 null을 반환 합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">getShader</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">gl<span class=\"token punctuation\">,</span> id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> shaderScript<span class=\"token punctuation\">,</span> theSource<span class=\"token punctuation\">,</span> currentChild<span class=\"token punctuation\">,</span> shader<span class=\"token punctuation\">;</span>\n\n  shaderScript <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>shaderScript<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  theSource <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  currentChild <span class=\"token operator\">=</span> shaderScript<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>currentChild<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentChild<span class=\"token punctuation\">.</span>nodeType <span class=\"token operator\">==</span> currentChild<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXT_NODE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      theSource <span class=\"token operator\">+=</span> currentChild<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    currentChild <span class=\"token operator\">=</span> currentChild<span class=\"token punctuation\">.</span>nextSibling<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>특정 ID를 가진 엘리먼트를 찾으면 텍스트 컨텐츠가 <code>theSource 변수에 저장됩니다.</code></p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shaderScript<span class=\"token punctuation\">.</span>type <span class=\"token operator\">==</span> <span class=\"token string\">\"x-shader/x-fragment\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    shader <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">createShader</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">FRAGMENT_SHADER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shaderScript<span class=\"token punctuation\">.</span>type <span class=\"token operator\">==</span> <span class=\"token string\">\"x-shader/x-vertex\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    shader <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">createShader</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">VERTEX_SHADER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">// Unknown shader type</span>\n     <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>쉐이더를 위한 코드가 읽혀지면 쉐이더가 정점 쉐이더(MIME type \"x-shader/x-vertex\")인지 조각 쉐이더(MIME type \"x-shader/x-fragment\")인지 결정하기 위해 쉐이더 객체의 MIME 형식을 살펴봅니다. 그 다음 소스 코드에서 얻어진 것을 가지고 적절한 타입의 쉐이더를 생성합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  gl<span class=\"token punctuation\">.</span><span class=\"token function\">shaderSource</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">,</span> theSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Compile the shader program</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">compileShader</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// See if it compiled successfully</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>gl<span class=\"token punctuation\">.</span><span class=\"token function\">getShaderParameter</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">COMPILE_STATUS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"An error occurred compiling the shaders: \"</span> <span class=\"token operator\">+</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getShaderInfoLog</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> shader<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>마지막으로 소스는 쉐이더로 전달되고 컴파일됩니다. 만약 쉐이더가 컴파일하는 동안 에러가 발생하면 경고 메세지를 출력하고 null을 반환합니다. 그러지 않으면 새롭게 컴파일된 쉐이더가 호출자로 반환됩니다.</p>"}},{"type":"prose","value":{"id":"쉐이더","title":"쉐이더","isH3":true,"content":"<p>그 다음 쉐이더 프로그램을 HTML 표현에 추가해야 합니다. 쉐이더가 구체적으로 어떻게 작동하는지에 대한 내용은 이 문서에서 다루지 않습니다. 다음은 쉐이더 언어 문법입니다.</p>\n<h4 id=\"조각_쉐이더fragment_shader\">조각 쉐이더(Fragment shader)</h4>\n<p>다각형 안에 있는 각각의 픽셀은 GL 전문용어로 <strong>fragment</strong>이라고 부릅니다. fragment shader가 하는 일은 각 픽셀의 색상을 설정하는 것입니다. 우리는 간단하게 각 픽셀을 하얀색으로 지정하겠습니다.</p>\n<p>fragment의 색상에서 사용되는 gl_FragColor는 GL에서 만들어진 변수입니다. 아래와 같이 값을 설정하면 픽셀의 색상이 설정됩니다.</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shader-fs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>x-shader/x-fragment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">void</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    gl_FragColor <span class=\"token operator\">=</span> <span class=\"token function\">vec4</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span>\n\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<h4 id=\"정점_쉐이더vertex_shader\">정점 쉐이더(Vertex Shader)</h4>\n<p>정점 쉐이더는 각 정점의 위치과 모양을 정의합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shader-vs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>x-shader/x-vertex<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  attribute vec3 aVertexPosition<span class=\"token punctuation\">;</span>\n\n  uniform mat4 uMVMatrix<span class=\"token punctuation\">;</span>\n  uniform mat4 uPMatrix<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">void</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    gl_Position <span class=\"token operator\">=</span> uPMatrix <span class=\"token operator\">*</span> uMVMatrix <span class=\"token operator\">*</span> <span class=\"token function\">vec4</span><span class=\"token punctuation\">(</span>aVertexPosition<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"객체_생성","title":"객체 생성","isH3":false,"content":"<p>사각형 렌더링을 하기 전에 사각형의 각 정점들을 저장할 버퍼를 만들어야 합니다. 이를 **initBuffers()**라는 함수를 이용해 해보도록 하겠습니다. 앞으로 고급 WebGL 개념을 살펴보면서, 더욱 다양하고 복잡한 3D 오브젝트를 생성하고자 할 때 이 루틴을 많이 사용하게 될 것입니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> horizAspect <span class=\"token operator\">=</span> <span class=\"token number\">480.0</span><span class=\"token operator\">/</span><span class=\"token number\">640.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">initBuffers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  squareVerticesBuffer <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">createBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindBuffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> squareVerticesBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> vertices <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">bufferData</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float32Array</span><span class=\"token punctuation\">(</span>vertices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">STATIC_DRAW</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>이 예제에서는 장면(scene)의 기본적인 속성만을 보여주기 위해, 루틴이 다소 지나치게 단순화되어있습니다. 정점들을 저장할 버퍼를 얻기 위해 <code>gl</code> 객체의 createBuffer() 메서드를 호출하는 것으로 시작합니다. 그 다음 <code>bindBuffer()</code> 메서드를 불러와 컨텍스트에 연결합니다.</p>\n<p>이 과정이 끝난 뒤 사각형의 각 정점 좌표를 담고있는 자바스크립트 배열을 생성합니다. 그런 다음 배열을 WebGL floats 배열로 변환한 뒤 gl객체의 bufferData() 메서드로 전달해 객체의 정점을 설정합니다.</p>"}},{"type":"prose","value":{"id":"장면scene_그리기","title":"장면(Scene) 그리기","isH3":false,"content":"<p>쉐이더가 설정되고 객체가 생성되면 실제로 장면을 렌더링 할 수 있습니다. 이 예제에서 어떠한 애니메이팅도 안 할 것이기 떄문에 drawScene()함수는 매우 간단합니다. 이는 우리가 곧 다룰 몇 가지 유용한 루틴만 사용합니다?.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">drawScene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">COLOR_BUFFER_BIT</span> <span class=\"token operator\">|</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">DEPTH_BUFFER_BIT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  perspectiveMatrix <span class=\"token operator\">=</span> <span class=\"token function\">makePerspective</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">640.0</span><span class=\"token operator\">/</span><span class=\"token number\">480.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">loadIdentity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">mvTranslate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">6.0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindBuffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> squareVerticesBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">vertexAttribPointer</span><span class=\"token punctuation\">(</span>vertexPositionAttribute<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">FLOAT</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setMatrixUniforms</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">drawArrays</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TRIANGLE_STRIP</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>첫번째 과정은 배경색에 컨텍스트를 clear하는 것입니다. 그 다음 카메라의 원근을 설정합니다. 시점을 45°로, 종횡비를 640/480(캔버스의 크기)로 설정합니다. 또한 카메라로부터 0.1에서 100단위 사이에 있는 오브젝트만 렌더링하도록 정합니다.</p>\n<p>그런 다음 identity(항등) position을 불러오고 카메라에서 6단위 만큼 translate(변환)하여 사각형의 위치를 정합니다 . 그 다음 사각형 정점 버퍼를 컨텍스트에 연결해 구성한 뒤 drawArrays() 메서드를 불러와 객체를 그립니다.</p>\n<p>브라우저가 웹GL을 지원한다면 다음 링크에서 확인 할 수 있습니다. <a href=\"http://mdn.github.io/webgl-examples/tutorial/sample2\" class=\"external\" rel=\" noopener\">try out this demo by clicking here</a></p>"}},{"type":"prose","value":{"id":"행렬_유틸리티를_이용한_연산","title":"행렬 유틸리티를 이용한 연산","isH3":false,"content":"<p>행렬 연산은 꽤 복잡합니다. 행렬을 다루기 위한 코드를 직접 작성하고 싶은 사람은 아무도 없을 것입니다. 다행히도 벡터와 행렬 연산을 자바스크립트에서 다루는 데 아주 편리한 라이브러리인 <a href=\"http://sylvester.jcoglan.com/\" class=\"external\" rel=\" noopener\">Sylvester</a>가 있습니다.</p>\n<p>이 데모에서 사용한glUtils.js 파일은 웹에 떠돌아 다니는 많은 WebGL 데모에서 사용하고 있습니다. 이 파일이 어디서 나온 것인지 명확히 아는 사람은 아무도 없는것 같습니다만, HTML 로 출력하기 위한 메소드 뿐만 아니라 특별한 형태의 행렬을 만들기 위한 메소드를 추가되어 있어 Sylvester를 보다 정말 단순화 시켜놓았습니다.</p>\n<p>게다가 이 데모는 특정 작업을 위한 라이브러리를 이용할 때 도움될만한 몇가지 루틴을 정의하고 있습니다. 정확히 이것들이 어떤 일을 하는 것인지는 이 데모에서 다룰 범위는 아닙니다. 하지만 온라인에서 참고할만 한 좋은 레퍼런스가 많이 있습니다. 아래 <a href=\"#see_also\">See also</a> 섹션에 그 중 몇 개를 소개하고 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">loadIdentity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  mvMatrix <span class=\"token operator\">=</span> Matrix<span class=\"token punctuation\">.</span><span class=\"token constant\">I</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">multMatrix</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">m</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  mvMatrix <span class=\"token operator\">=</span> mvMatrix<span class=\"token punctuation\">.</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">mvTranslate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">multMatrix</span><span class=\"token punctuation\">(</span>Matrix<span class=\"token punctuation\">.</span><span class=\"token function\">Translation</span><span class=\"token punctuation\">(</span>$<span class=\"token constant\">V</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ensure4x4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">setMatrixUniforms</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> pUniform <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">\"uPMatrix\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">uniformMatrix4fv</span><span class=\"token punctuation\">(</span>pUniform<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float32Array</span><span class=\"token punctuation\">(</span>perspectiveMatrix<span class=\"token punctuation\">.</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> mvUniform <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">\"uMVMatrix\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">uniformMatrix4fv</span><span class=\"token punctuation\">(</span>mvUniform<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float32Array</span><span class=\"token punctuation\">(</span>mvMatrix<span class=\"token punctuation\">.</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"https://mathworld.wolfram.com/Matrix.html\" class=\"external\" rel=\" noopener\">Matrices</a> on Wolfram MathWorld</li>\n  <li><a href=\"http://en.wikipedia.org/wiki/Matrix_(mathematics)\" class=\"external\" rel=\" noopener\">Matrix</a> on Wikipedia</li>\n</ul><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ko/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL\">« 이전</a></li>\n    <li><a class=\"button minimal\" href=\"/ko/docs/Web/API/WebGL_API/Tutorial/Using_shaders_to_apply_color_in_WebGL\">다음  »</a></li>\n</ul>"}}],"toc":[{"text":"장면(scene)에 조명효과 추가하기","id":"장면scene에_조명효과_추가하기"},{"text":"객체 생성","id":"객체_생성"},{"text":"장면(Scene) 그리기","id":"장면scene_그리기"},{"text":"행렬 유틸리티를 이용한 연산","id":"행렬_유틸리티를_이용한_연산"},{"text":"See also","id":"see_also"}],"summary":"일단 성공적으로 WebGL컨텍스트를 생성하면 그 안에 렌더링을 시작할 수 있습니다. 가장 간단히 해볼 수 있는 것은 텍스쳐가 없는 2D 객체를 렌더링 하는 것입니다. 한번 사각형을 그리는 코드를 작성하는 것으로 시작해봅시다.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Adding 2D content to a WebGL context","locale":"en-US","native":"English (US)"},{"title":"Agregando Contenido 2D en el Contexto WebGL","locale":"es","native":"Español"},{"title":"Ajouter du contenu à WebGL","locale":"fr","native":"Français"},{"title":"WebGL コンテキストへの平面コンテンツの追加","locale":"ja","native":"日本語"},{"title":"Adicionando conteúdo 2D a um contexto WebGL","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Добавление двухмерного контента в контекст WebGL","locale":"ru","native":"Русский"},{"title":"使用 WebGL 创建 2D 内容","locale":"zh-CN","native":"中文 (简体)"},{"title":"增加一個 2D 物件到 WebGL 環境","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ko/web/api/webgl_api/tutorial/adding_2d_content_to_a_webgl_context","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/web/api/webgl_api/tutorial/adding_2d_content_to_a_webgl_context/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ko/docs/Web","title":"개발자를 위한 웹 기술"},{"uri":"/ko/docs/Web/API","title":"Web API"},{"uri":"/ko/docs/Web/API/WebGL_API","title":"WebGL"},{"uri":"/ko/docs/Web/API/WebGL_API/Tutorial","title":"WebGL tutorial"},{"uri":"/ko/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context","title":"WebGL 컨텍스트에 2D 컨텐츠 추가하기"}],"pageTitle":"WebGL 컨텍스트에 2D 컨텐츠 추가하기 - Web API | MDN","noIndexing":false}}