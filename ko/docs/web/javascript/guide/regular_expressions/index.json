{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"정규 표현식","mdn_url":"/ko/docs/Web/JavaScript/Guide/Regular_Expressions","locale":"ko","native":"한국어","sidebarHTML":"\n <ol>\n  <li><a href=\"/ko/docs/Web/JavaScript\"><strong><em>JavaScript</em></strong></a></li>\n  <li><a href=\"/ko/docs/Web/JavaScript/Tutorials\"><strong>Tutorials:</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Complete beginners</summary>\n      <ol>\n        <li><a href=\"/ko/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">JavaScript basics</a></li>\n        <li><a href=\"/ko/docs/Learn/JavaScript/First_steps\">JavaScript first steps</a></li>\n        <li><a href=\"/ko/docs/Learn/JavaScript/Building_blocks\">JavaScript building blocks</a></li>\n        <li><a href=\"/ko/docs/Learn/JavaScript/Objects\">Introducing JavaScript objects</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>JavaScript Guide</summary>\n      <ol>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Introduction\">Introduction</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Grammar_and_Types\">Grammar and types</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">Control flow and error handling</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Loops_and_iteration\">Loops and iteration</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Functions\">Functions</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Expressions_and_Operators\">Expressions and operators</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Numbers_and_dates\">Numbers and dates</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Text_formatting\">Text formatting</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Regular_Expressions\">Regular expressions</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Indexed_collections\">Indexed collections</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Keyed_collections\">Keyed collections</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Working_with_Objects\">Working with objects</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Details_of_the_Object_Model\">Details of the object model</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Using_promises\">Using promises</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Iterators_and_generators\">Iterators and generators</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Meta_programming\">Meta programming</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Modules\">JavaScript modules</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Intermediate</summary>\n      <ol>\n        <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks\">Client-side JavaScript frameworks</a></li>\n        <li><a href=\"/ko/docs/Learn/JavaScript/Client-side_web_APIs\">Client-side web APIs</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">A re-introduction to JavaScript</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Data_structures\">JavaScript data structures</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Equality_comparisons_and_sameness\">Equality comparisons and sameness</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Closures\">Closures</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Advanced</summary>\n      <ol>\n        <li><a href=\"/ko/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">Inheritance and the prototype chain</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Typed_arrays\">JavaScript typed arrays</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Memory_Management\">Memory Management</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/EventLoop\">Concurrency model and Event Loop</a></li>\n      </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/ko/docs/Web/JavaScript/Reference\">References:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n       <summary>Built-in objects</summary>\n        <ol><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\">AggregateError</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\">AsyncFunction</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\">AsyncGenerator</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\">AsyncGeneratorFunction</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Atomics\">Atomics</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array\">BigInt64Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array\">BigUint64Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/DataView\">DataView</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\">decodeURI()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Error\">Error</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/escape\">escape()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/EvalError\">EvalError</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\">FinalizationRegistry</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\">Float32Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\">Float64Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Generator\">Generator</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">globalThis</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Infinity\">Infinity</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\">Int16Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\">Int32Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\">Int8Array</a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/InternalError\">InternalError</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/isFinite\">isFinite()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/isNaN\">isNaN()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/NaN\">NaN</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">parseFloat()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">parseInt()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/RangeError\">RangeError</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\">ReferenceError</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">Reflect</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">RegExp</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/String\">String</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\">SyntaxError</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">TypedArray</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\">Uint16Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\">Uint32Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">Uint8Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\">Uint8ClampedArray</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/undefined\">undefined</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/unescape\">unescape()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/URIError\">URIError</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/WeakRef\">WeakRef</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\">WeakSet</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Expressions &amp; operators</summary>\n      <ol><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Addition_assignment\">Addition assignment (+=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Addition\">Addition (+)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Assignment\">Assignment (=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/async_function*\">async function* expression</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/await\">await</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment\">Bitwise AND assignment (&amp;=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">Bitwise AND (&amp;)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">Bitwise NOT (~)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment\">Bitwise OR assignment (|=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">Bitwise OR (|)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment\">Bitwise XOR assignment (^=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">Bitwise XOR (^)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/class\">class expression</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Comma_Operator\">Comma operator (,)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">Conditional (ternary) operator</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Decrement\">Decrement (--)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/delete\">delete operator</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">Destructuring assignment</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Division_assignment\">Division assignment (/=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Division\">Division (/)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Equality\">Equality (==)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment\">Exponentiation assignment (**=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Exponentiation\">Exponentiation (**)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/function\">Function expression</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal\">Greater than or equal (&gt;=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Greater_than\">Greater than (&gt;)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Grouping\">Grouping operator ( )</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/import.meta\">import.meta</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/import\">import</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/in\">in operator</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Increment\">Increment (++)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Inequality\">Inequality (!=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/instanceof\">instanceof</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment\">Left shift assignment (&lt;&lt;=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Left_shift\">Left shift (&lt;&lt;)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal\">Less than or equal (&lt;=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Less_than\">Less than (&lt;)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment\">Logical AND assignment (&amp;&amp;=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Logical_AND\">Logical AND (&amp;&amp;)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">Logical NOT (!)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment\">Logical nullish assignment (??=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment\">Logical OR assignment (||=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Logical OR (||)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment\">Multiplication assignment (*=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Multiplication\">Multiplication (*)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/new.target\">new.target</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/new\">new operator</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/null\">null</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\">Nullish coalescing operator (??)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Object_initializer\">Object initializer</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">Operator precedence</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">Optional chaining (?.)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Property_Accessors\">Property accessors</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Remainder_assignment\">Remainder assignment (%=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Remainder\">Remainder (%)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment\">Right shift assignment (&gt;&gt;=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Right_shift\">Right shift (&gt;&gt;)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Spread syntax (...)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Strict_equality\">Strict equality (===)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">Strict inequality (!==)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment\">Subtraction assignment (-=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Subtraction\">Subtraction (-)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/super\">super</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/this\">this</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/typeof\">typeof</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Unary_negation\">Unary negation (-)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Unary_plus\">Unary plus (+)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment\">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">Unsigned right shift (&gt;&gt;&gt;)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/void\">void operator</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/yield*\">yield*</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/yield\">yield</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Statements &amp; declarations</summary>\n      <ol><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/async_function*\">async function*</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/block\">block</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/break\">break</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/class\">class</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/const\">const</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/continue\">continue</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/debugger\">debugger</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/do...while\">do...while</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/Empty\">empty</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/export\">export</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/for-await...of\">for await...of</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/for\">for</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/function*\">function*</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/function\">function declaration</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/if...else\">if...else</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/import\">import</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/label\">label</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/let\">let</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/return\">return</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/switch\">switch</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/throw\">throw</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/try...catch\">try...catch</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/var\">var</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/while\">while</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/with\">with</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Functions</summary>\n      <ol><li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow function expressions</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/get\">getter</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/set\">setter</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Classes</summary>\n      <ol><li><a href=\"/ko/docs/Web/JavaScript/Reference/Classes/Class_static_initialization_blocks\">Class static initialization blocks</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Classes/constructor\">constructor</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Classes/extends\">extends</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">Private class features</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Classes/Public_class_fields\">Public class fields</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Classes/static\">static</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Errors</summary>\n      <ol><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Already_has_pragma\">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Array_sort_argument\">TypeError: invalid Array.prototype.sort argument</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Bad_octal\">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Bad_radix\">RangeError: radix must be an integer</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag\">SyntaxError: invalid regular expression flag \"x\"</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield\">SyntaxError: return not in function</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/BigInt_division_by_zero\">RangeError: BigInt division by zero</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/BigInt_negative_exponent\">RangeError: BigInt negative exponent</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type\">TypeError: X.prototype.y called on incompatible type</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init\">ReferenceError: can't access lexical declaration 'X' before initialization</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cant_assign_to_property\">TypeError: can't assign to property \"x\" on \"y\": not an object</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cant_be_converted_to_BigInt_because_it_isnt_an_integer\">RangeError: x can't be converted to BigInt because it isn't an integer</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cant_convert_BigInt_to_number\">TypeError: can't convert BigInt to number</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cant_convert_x_to_BigInt\">TypeError: can't convert x to BigInt</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible\">TypeError: can't define property \"x\": \"obj\" is not extensible</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cant_delete\">TypeError: property \"x\" is non-configurable and can't be deleted</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property\">TypeError: can't redefine non-configurable property \"x\"</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cant_use_nullish_coalescing_unparenthesized\">SyntaxError: cannot use `??` unparenthesized within `||` and `&amp;&amp;` expressions</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value\">TypeError: cyclic object value</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Dead_object\">TypeError: can't access dead object</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode\">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage\">ReferenceError: deprecated caller or arguments usage</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Deprecated_expression_closures\">Warning: expression closures are deprecated</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Deprecated_octal\">SyntaxError: \"0\"-prefixed octal literals and octal escape seq. are deprecated</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma\">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Deprecated_String_generics\">Warning: String.x is deprecated; use String.prototype.x instead</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Deprecated_toLocaleFormat\">Warning: Date.prototype.toLocaleFormat is deprecated</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Equal_as_assign\">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Getter_only\">TypeError: setting getter-only property \"x\"</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Hash_outside_class\">SyntaxError: Unexpected '#' used outside of class body</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Identifier_after_number\">SyntaxError: identifier starts immediately after numeric literal</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Illegal_character\">SyntaxError: illegal character</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/in_operator_no_object\">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\">RangeError: invalid array length</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side\">SyntaxError: invalid assignment left-hand side</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax\">SyntaxError: invalid BigInt syntax</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment\">TypeError: invalid assignment to const \"x\"</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Invalid_date\">RangeError: invalid date</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer\">SyntaxError: for-in loop head declarations may not have initializers</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer\">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand\">TypeError: invalid 'instanceof' operand 'x'</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/is_not_iterable\">TypeError: 'x' is not iterable</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse\">SyntaxError: JSON.parse: bad parsing</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Malformed_formal_parameter\">SyntaxError: Malformed formal parameter</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Malformed_URI\">URIError: malformed URI sequence</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list\">SyntaxError: missing ] after element list</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id\">SyntaxError: missing : after property id</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body\">SyntaxError: missing } after function body</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list\">SyntaxError: missing } after property list</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter\">SyntaxError: missing formal parameter</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const\">SyntaxError: missing = in const declaration</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator\">SyntaxError: missing name after . operator</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\">SyntaxError: missing ) after argument list</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition\">SyntaxError: missing ) after condition</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_semicolon_before_statement\">SyntaxError: missing ; before statement</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/More_arguments_needed\">TypeError: More arguments needed</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count\">RangeError: repeat count must be non-negative</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/No_non-null_object\">TypeError: \"x\" is not a non-null object</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/No_properties\">TypeError: \"x\" has no properties</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/No_variable_name\">SyntaxError: missing variable name</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element\">TypeError: can't delete non-configurable array element</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint\">RangeError: argument is not a valid code point</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Not_a_constructor\">TypeError: \"x\" is not a constructor</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Not_a_function\">TypeError: \"x\" is not a function</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Not_defined\">ReferenceError: \"x\" is not defined</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Precision_range\">RangeError: precision is out of range</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Property_access_denied\">Error: Permission denied to access property \"x\"</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Read-only\">TypeError: \"x\" is read-only</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter\">SyntaxError: redeclaration of formal parameter \"x\"</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value\">TypeError: Reduce of empty array with no initial value</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Reserved_identifier\">SyntaxError: \"x\" is a reserved identifier</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large\">RangeError: repeat count must be less than infinity</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Stmt_after_return\">Warning: unreachable code after return statement</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params\">SyntaxError: \"use strict\" not allowed in function with non-simple parameters</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Too_much_recursion\">InternalError: too much recursion</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Undeclared_var\">ReferenceError: assignment to undeclared variable \"x\"</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Undefined_prop\">ReferenceError: reference to undefined property \"x\"</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Unexpected_token\">SyntaxError: Unexpected token</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Unexpected_type\">TypeError: \"x\" is (not) \"y\"</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement\">SyntaxError: function statement requires a name</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Unparenthesized_unary_expr_lhs_exponentiation\">SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Unterminated_string_literal\">SyntaxError: unterminated string literal</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Misc</summary>\n      <ol>\n        <li><a href=\"/ko/docs/Web/JavaScript/JavaScript_technologies_overview\">JavaScript technologies overview</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Reference/Lexical_grammar\">Lexical grammar</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Data_structures\">JavaScript data structures</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">Enumerability and ownership of properties</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Reference/Iteration_protocols\">Iteration protocols</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\">Transitioning to strict mode</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Reference/Template_literals\">Template literals</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\">Deprecated features</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ko/docs/Web/JavaScript/Guide/Text_formatting\">« 이전</a></li>\n    <li><a class=\"button minimal\" href=\"/ko/docs/Web/JavaScript/Guide/Indexed_collections\">다음  »</a></li>\n</ul>\n<p>정규 표현식, 또는 정규식은 문자열에서 특정 문자 조합을 찾기 위한 패턴입니다. JavaScript에서는 정규 표현식도 객체로서, <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a>의 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code>exec()</code></a>와 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\"><code>test()</code></a> 메서드를 사용할 수 있습니다. <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a>의 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/String/match\"><code>match()</code></a>, <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll\"><code>matchAll()</code> <small>(en-US)</small></a>, <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>replace()</code></a>, <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll\"><code>replaceAll()</code> <small>(en-US)</small></a>, <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/String/search\"><code>search()</code></a>, <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/String/split\"><code>split()</code></a> 메서드와도 함께 사용할 수 있습니다. 이 장에서는 JavaScript의 정규 표현식을 설명합니다.</p>"}},{"type":"prose","value":{"id":"정규_표현식_만들기","title":"정규 표현식 만들기","isH3":false,"content":"<p>정규 표현식은 두 가지 방법으로 만들 수 있습니다.</p>\n<ul>\n  <li>정규 표현식 리터럴. 다음과 같이 슬래시로 패턴을 감싸서 작성합니다.\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">ab+c</span><span class=\"token regex-delimiter\">/</span></span>\n</code></pre></div>정규 표현식 리터럴은 스크립트를 불러올 때 컴파일되므로, 바뀔 일이 없는 패턴의 경우 리터럴을 사용하면 성능이 향상될 수 있습니다.\n  </li>\n  <li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> 객체의 생성자 호출.\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ab+c'</span><span class=\"token punctuation\">)</span>\n</code></pre></div>생성자 함수를 사용하면 정규 표현식이 런타임에 컴파일됩니다. 바뀔 수 있는 패턴이나, 사용자 입력 등 외부 출처에서 가져오는 패턴의 경우 이렇게 사용하세요.\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"정규_표현식_패턴_작성하기","title":"정규 표현식 패턴 작성하기","isH3":false,"content":"<p>정규 표현식 패턴은 <code>/abc/</code>처럼 단순한 문자로 구성하거나, <code>/ab+c/</code>와 <code>/Chapter (\\d+)\\.\\d*/</code>처럼 단순한 문자와 특수 문자의 조합으로 구성할 수도 있습니다. 특히 <code>(\\d+)</code>에 나타난 괄호는 정규 표현식에서 기억 장치처럼 쓰여서, 괄호의 안쪽 패턴과 일치한 부분을 나중에 사용할 수 있도록 기억합니다. <a href=\"/ko/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Backreferences#using_groups\">그룹 사용하기</a>에서 더 알아보세요.</p>"}},{"type":"prose","value":{"id":"단순_패턴_사용하기","title":"단순 패턴 사용하기","isH3":true,"content":"<p>단순 패턴은 문자열을 있는 그대로 탐색할 때 사용합니다. 예를 들어, <code>/abc/</code> 패턴은 문자열에서 정확한 순서로 <code>\"abc\"</code>라는 문자의 조합이 나타나는 부분과 일치합니다. 그러므로 이 패턴은 <code>\"Hi, do you know your abc's?\"</code>와 <code>\"The latest airplane designs evolved from slabcraft.\"</code> 두 문자열에서 일치에 성공하고, 일치하는 부분은 <code>\"abc\"</code>일 것입니다. 반면 <code>\"Grab crab\"</code>에서는 일치하지 않는데, 이 문자열은 부분 문자열로 <code>\"ab c\"</code>를 포함하긴 하지만, 정확하게 <code>\"abc\"</code>를 포함하지는 않기 때문입니다.</p>"}},{"type":"prose","value":{"id":"특수_문자_사용하기","title":"특수 문자 사용하기","isH3":true,"content":"<p>하나 이상의 \"b\"를 찾는다거나 공백 문자를 찾는 등 직접적인 일치 이상의 탐색이 필요할 땐 특수 문자를 사용합니다. 예컨대 \"하나의 <code>\"a\"</code> 이후에 0개 이상의 <code>\"b\"</code>, 그 뒤의 <code>\"c\"</code>\"와 일치해야 하면 <code>/ab*c/</code> 패턴을 사용할 수 있습니다. <code>\"b\"</code> 뒤의 <code>*</code>는 \"이전 항목의 0번 이상 반복\"을 의미합니다. 이 패턴을 문자열 <code>\"cbbabbbbcdebc\"</code>에 대해 사용하면, 일치하는 부분 문자열은 <code>\"abbbbc\"</code>일 것입니다.</p>\n<p>아래의 문서들에선 각각의 범주에 속하는 다양한 특수 문자의 목록과 설명, 예제를 찾아볼 수 있습니다.</p>\n<dl>\n  <dt id=\"어서션\"><a href=\"/ko/docs/Web/JavaScript/Guide/Regular_Expressions/Assertions\">어서션</a></dt>\n  <dd>\n    <p>어서션에는 줄이나 단어의 시작과 끝을 나타내는 경계와, 일치가 가능한 방법을 나타내는 패턴(전방탐색, 후방탐색, 조건 표현식 등)이 포함됩니다.</p>\n  </dd>\n  <dt id=\"문자_클래스\"><a href=\"/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Character_Classes\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">문자 클래스 (en-US)</a></dt>\n  <dd>\n    <p>글자와 숫자처럼 다른 유형의 문자를 구분합니다.</p>\n  </dd>\n  <dt id=\"그룹과_범위\"><a href=\"/ko/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Backreferences\">그룹과 범위</a></dt>\n  <dd>\n    <p>표현 문자의 그룹과 범위를 나타냅니다.</p>\n  </dd>\n  <dt id=\"수량자\"><a href=\"/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Quantifiers\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">수량자 (en-US)</a></dt>\n  <dd>\n    <p>일치할 문자나 표현이 반복되어야 할 횟수를 나타냅니다.</p>\n  </dd>\n  <dt id=\"유니코드_속성_이스케이프\"><a href=\"/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Unicode_Property_Escapes\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">유니코드 속성 이스케이프 (en-US)</a></dt>\n  <dd>\n    <p>대/소문자, 수학 기호, 문장 부호처럼, 유니코드 문자 속성에 따라 문자를 구분합니다.</p>\n  </dd>\n</dl>\n<p>아래 표는 정규 표현식에서 사용하는 모든 특수문자의 목록입니다.</p>\n<table class=\"standard-table\">\n  <caption>정규 표현식 특수문자</caption>\n  <thead>\n    <tr>\n      <th scope=\"col\">문자 / 조합</th>\n      <th scope=\"col\">문서</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <code>\\</code>, <code>.</code>, <code>\\cX</code>, <code>\\d</code>,\n        <code>\\D</code>, <code>\\f</code>, <code>\\n</code>, <code>\\r</code>,\n        <code>\\s</code>, <code>\\S</code>, <code>\\t</code>, <code>\\v</code>,\n        <code>\\w</code>, <code>\\W</code>, <code>\\0</code>, <code>\\xhh</code>,\n        <code>\\uhhhh</code>, <code>\\uhhhhh</code>, <code>[\\b]</code>\n      </td>\n      <td>\n        <p><a href=\"/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Character_Classes\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">문자 클래스 (en-US)</a></p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code>^</code>, <code>$</code>, <code>x(?=y)</code>,\n        <code>x(?!y)</code>, <code>(?&lt;=y)x</code>,\n        <code>(?&lt;!y)x</code>, <code>\\b</code>, <code>\\B</code>\n      </td>\n      <td>\n        <p><a href=\"/ko/docs/Web/JavaScript/Guide/Regular_Expressions/Assertions\">어서션</a></p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code>(x)</code>, <code>(?:x)</code>, <code>(?&lt;Name&gt;x)</code>,\n        <code>x|y</code>, <code>[xyz]</code>, <code>[^xyz]</code>,\n        <code>\\<em>Number</em></code>\n      </td>\n      <td>\n        <p><a href=\"/ko/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Backreferences\">그룹과 범위</a></p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code>*</code>, <code>+</code>, <code>?</code>,\n        <code>x{<em>n</em>}</code>, <code>x{<em>n</em>,}</code>,\n        <code>x{<em>n</em>,<em>m</em>}</code>\n      </td>\n      <td>\n        <p><a href=\"/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Quantifiers\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">수량자 (en-US)</a></p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code>\\p{<em>UnicodeProperty</em>}</code>,\n        <code>\\P{<em>UnicodeProperty</em>}</code>\n      </td>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Unicode_Property_Escapes\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">유니코드 속성 이스케이프 (en-US)</a></td>\n    </tr>\n  </tbody>\n</table>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>참고:</strong> 위 문서의 일부만 발췌해 정리해놓은, <a href=\"/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Cheatsheet\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">더 큰 치트 시트도 있습니다 (en-US)</a>.</p>\n</div>"}},{"type":"prose","value":{"id":"이스케이핑","title":"이스케이핑","isH3":true,"content":"<p>특수 문자를 있는 그대로 탐색(<code>\"*\"</code>을 직접 찾는 등)해야 하는 경우, 특수 문자 앞에 역슬래시(\\)를 배치해서 이스케이프 해야 합니다. 예를 들어 <code>\"a\"</code> 뒤의 별표(<code>\"*\"</code>) 뒤의 <code>\"b\"</code>와 일치해야 하면 <code>/a\\*b/</code>를 사용하면 됩니다. 역슬래시가 <code>\"*\"</code>를 \"이스케이프\"해서, 특수 문자가 아닌 문자 리터럴로 취급합니다.</p>\n<p>마찬가지로, 슬래시(/)와 일치해야 하는 경우에도 이스케이프를 해야 합니다. 그냥 빗금을 사용하면 패턴이 끝나버립니다. 예를 들어 문자열 \"/example/\"과 그 뒤 하나 이상의 알파벳을 찾으려면 <code>/\\/example\\/[a-z]/</code>를 사용할 수 있습니다. 각각의 슬래시 앞에 놓인 역슬래시가 슬래시를 이스케이프합니다.</p>\n<p>리터럴 역슬래시에 일치하려면 역슬래시를 이스케이프합니다. \"A:\\\", \"B:\\\", \"C:\\\", ..., \"Z:\\\"와 일치하는 패턴은 <code>/[A-Z]:\\\\/</code>입니다. 앞의 역슬래시가 뒤의 역슬래시를 이스케이프해서, 결과적으로 하나의 리터럴 역슬래시와 일치하게 됩니다.</p>\n<p><code>RegExp</code> 생성자와 문자열 리터럴을 사용하는 경우, 역슬래시가 문자열 리터럴의 이스케이프로도 작동한다는 것을 기억해야 합니다. 그러므로 정규 표현식의 역슬래시를 나타내려면 문자열 리터럴 수준의 이스케이프도 해줘야 합니다. 즉, 앞서 살펴본 <code>/a\\*b/</code> 패턴을 생성하려면 <code>new RegExp(\"a\\\\*b\")</code>가 되어야 합니다.</p>\n<p>이스케이프 되지 않은 문자열을 이미 가지고 있을 땐 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>String.replace</code></a>를 활용해 이스케이프를 해줄 수 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">escapeRegExp</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[.*+?^${}()|[\\]\\\\]</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\\\$&amp;'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// $&amp;은 일치한 문자열 전체를 의미</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>정규 표현식 뒤의 \"g\"는 전체 문자열을 탐색해서 모든 일치를 반환하도록 지정하는 전역 탐색 플래그입니다. 플래그에 대해서는 아래의 <a href=\"#%ED%94%8C%EB%9E%98%EA%B7%B8%EB%A5%BC_%ED%99%9C%EC%9A%A9%ED%95%9C_%EA%B3%A0%EA%B8%89_%ED%83%90%EC%83%89\">플래그를 활용한 고급 탐색</a>에서 확인할 수 있습니다.</p>\n<p>\"왜 <code>escapeRegExp()</code>가 JavaScript의 일부가 아닌가요?\" 관련 제안은 있었으나 <a href=\"https://github.com/benjamingr/RegExp.escape/issues/37\" class=\"external\" rel=\" noopener\">TC39가 거부했습니다</a>.</p>"}},{"type":"prose","value":{"id":"괄호_사용하기","title":"괄호 사용하기","isH3":true,"content":"<p>정규 표현식의 아무 부분이나 괄호로 감싸게 되면, 그 부분과 일치하는 부분 문자열을 기억하게 됩니다. 기억한 부분 문자열은 불러와서 다시 사용할 수 있습니다. <a href=\"/ko/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Backreferences#%ea%b7%b8%eb%a3%b9_%ec%82%ac%ec%9a%a9%ed%95%98%ea%b8%b0\">그룹과 범위</a> 문서에서 자세히 알아보세요.</p>"}},{"type":"prose","value":{"id":"javascript에서_정규_표현식_사용하기","title":"JavaScript에서 정규 표현식 사용하기","isH3":false,"content":"<p>정규 표현식은 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a>의 메서드 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\"><code>test()</code></a>와 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code>exec()</code></a>, <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a>의 메서드 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/String/match\"><code>match()</code></a>, <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>replace()</code></a>, <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/String/search\"><code>search()</code></a>, <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/String/split\"><code>split()</code></a>에서 사용할 수 있습니다.</p>\n<table>\n  <thead>\n    <tr>\n      <th>메서드</th>\n      <th>설명</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code>exec()</code></a></td>\n      <td>문자열에서 일치하는 부분을 탐색합니다. 일치 정보를 나타내는 배열, 또는 일치가 없는 경우 <code>null</code>을 반환합니다.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\"><code>test()</code></a></td>\n      <td>문자열에 일치하는 부분이 있는지 확인합니다. <code>true</code> 또는 <code>false</code>를 반환합니다.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/String/match\"><code>match()</code></a></td>\n      <td>캡처 그룹을 포함해서 모든 일치를 담은 배열을 반환합니다. 일치가 없으면 <code>null</code>을 반환합니다.</td>\n    </tr>\n    <tr>\n      <td><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll\"><code>matchAll()</code> <small>(en-US)</small></a></td>\n      <td>캡처 그룹을 포함해서 모든 일치를 담은 반복기를 반환합니다.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/String/search\"><code>search()</code></a></td>\n      <td>문자열에서 일치하는 부분을 탐색합니다. 일치하는 부분의 인덱스, 또는 일치가 없는 경우 <code>-1</code>을 반환합니다.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>replace()</code></a></td>\n      <td>문자열에서 일치하는 부분을 탐색하고, 그 부분을 대체 문자열로 바꿉니다.</td>\n    </tr>\n    <tr>\n      <td><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll\"><code>replaceAll()</code> <small>(en-US)</small></a></td>\n      <td>문자열에서 일치하는 부분을 모두 탐색하고, 모두 대체 문자열로 바꿉니다.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/String/split\"><code>split()</code></a></td>\n      <td>정규 표현식 또는 문자열 리터럴을 사용해서 문자열을 부분 문자열의 배열로 나눕니다.</td>\n    </tr>\n  </tbody>\n</table>\n<p>문자열 내부에 패턴과 일치하는 부분이 존재하는지만 알아내려면 <code>test()</code>나 <code>search()</code> 메서드를 사용하세요. 더 느리더라도 일치에 관한 추가 정보가 필요하면 <code>exec()</code>과 <code>match()</code> 메서드를 사용하세요. 일치하는 부분이 존재하면, <code>exec()</code>과 <code>match()</code>는 일치에 관한 데이터를 포함한 배열을 반환하고, 일치에 사용한 정규 표현식 객체의 속성을 업데이트합니다. 일치하지 못한 경우 <code>null</code>을 반환합니다. (<code>null</code>은 조건 평가 시 <code>false</code>와 같습니다)</p>\n<p>아래의 예제에서는, 문자열에서 일치하는 부분을 찾기 위해 <code>exec()</code> 메서드를 사용합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> myRe <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">d(b+)d</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> myArray <span class=\"token operator\">=</span> myRe<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cdbbdbsbz'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>만약 정규 표현식 객체의 속성에 접근할 필요가 없으면 아래와 같이 짧게 쓸 수도 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> myArray <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">d(b+)d</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cdbbdbsbz'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 'cdbbdbsbz'.match(/d(b+)d/g); 와 비슷하지만,</span>\n<span class=\"token comment\">// 'cdbbdbsbz'.match(/d(b+)d/g)의 반환 값은 [ 'dbbd' ]인 반면</span>\n<span class=\"token comment\">// /d(b+)d/g.exec('cdbbdbsbz')의 반환 값은 [ 'dbbd', 'bb', index: 1, input: 'cdbbdbsbz' ]</span>\n</code></pre></div>\n<p>(아래의 <a href=\"#exec%EA%B3%BC_%EC%A0%84%EC%97%AD_%ED%83%90%EC%83%89_%ED%94%8C%EB%9E%98%EA%B7%B8_%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\"><code>exec()</code>과 전역 탐색 플래그 사용하기</a>에서 동작 방식의 차이에 대해 더 알아보세요)</p>\n<p>정규 표현식을 문자열에서 만들고 싶으면 아래처럼 사용할 수도 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> myRe <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d(b+)d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'g'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> myArray <span class=\"token operator\">=</span> myRe<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cdbbdbsbz'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>아래의 표는 위 스크립트에서 일치를 성공한 후, 반환하는 배열과 업데이트되는 정규 표현식 객체의 속성입니다.</p>\n<table class=\"standard-table\">\n  <caption>정규 표현식 실행 결과</caption>\n  <thead>\n    <tr>\n      <th scope=\"col\">객체</th>\n      <th scope=\"col\">속성 또는 인덱스</th>\n      <th scope=\"col\">설명</th>\n      <th scope=\"col\">위 예제에서의 값</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td rowspan=\"4\"><code>myArray</code></td>\n      <td></td>\n      <td>일치한 문자열 및 기억한 모든 부분 문자열.</td>\n      <td><code>['dbbd', 'bb', index: 1, input: 'cdbbdbsbz']</code></td>\n    </tr>\n    <tr>\n      <td><code>index</code></td>\n      <td>일치한 부분이 주어진 문자열에서 위치한 인덱스. (0부터 시작)</td>\n      <td><code>1</code></td>\n    </tr>\n    <tr>\n      <td><code>input</code></td>\n      <td>주어진 원본 문자열.</td>\n      <td><code>'cdbbdbsbz'</code></td>\n    </tr>\n    <tr>\n      <td><code>[0]</code></td>\n      <td>마지막으로 일치한 부분 문자열.</td>\n      <td><code>'dbbd'</code></td>\n    </tr>\n    <tr>\n      <td rowspan=\"2\"><code>myRe</code></td>\n      <td><code>lastIndex</code></td>\n      <td>\n        다음 일치를 시작할 인덱스. (g 옵션을 지정한 정규 표현식의 경우에만 설정됩니다.\n        <a href=\"#플래그를_활용한_고급_탐색\">플래그를 활용한 고급 탐색</a>을 참고하세요)\n      </td>\n      <td><code>5</code></td>\n    </tr>\n    <tr>\n      <td><code>source</code></td>\n      <td>패턴의 텍스트. 정규 표현식이 생성될 때 갱신됩니다. 실행 시점에는 갱신되지 않습니다.</td>\n      <td><code>'d(b+)d'</code></td>\n    </tr>\n  </tbody>\n</table>\n<p>위 예제의 두 번째 형태처럼, 정규 표현식 객체를 변수에 대입하지 않고도 사용할 수 있습니다. 하지만, 이러면 매 사용마다 정규 표현식 객체가 새로 생성되며, 업데이트되는 속성에 접근할 수 없습니다. 다음과 같은 코드를 생각해보겠습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> myRe <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">d(b+)d</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> myArray <span class=\"token operator\">=</span> myRe<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cdbbdbsbz'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">lastIndex의 값은 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>myRe<span class=\"token punctuation\">.</span>lastIndex<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// \"lastIndex의 값은 5\"</span>\n</code></pre></div>\n<p>그러나 위의 코드 대신 아래 코드를 사용하게 되면...</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> myArray <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">d(b+)d</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cdbbdbsbz'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">lastIndex의 값은 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token operator\">/</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">+</span><span class=\"token punctuation\">)</span>d<span class=\"token operator\">/</span>g<span class=\"token punctuation\">.</span>lastIndex<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// \"lastIndex의 값은 0\"</span>\n</code></pre></div>\n<p>두 개의 <code>/d(b+)d/g</code> 는 서로 다른 정규 표현식 객체이므로 별개의 <code>lastIndex</code> 속성을 갖습니다. 정규 표현식 객체의 속성에 접근해야 하면, 우선 변수에 할당하세요.</p>"}},{"type":"prose","value":{"id":"플래그를_활용한_고급_탐색","title":"플래그를 활용한 고급 탐색","isH3":true,"content":"<p>정규 표현식은 전역 탐색이나 대소문자 무시와 같은 특성을 지정하는 플래그를 가질 수 있습니다. 플래그는 단독으로 사용할 수도 있고, 순서에 상관 없이 한꺼번에 여럿을 지정할 수도 있습니다.</p>\n<table>\n  <thead>\n    <tr>\n      <th>플래그</th>\n      <th>설명</th>\n      <th>대응하는 속성</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>d</code></td>\n      <td>부분 문자열 일치에 대해 인덱스 생성.</td>\n      <td><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/hasIndices\"><code>RegExp.prototype.hasIndices</code> <small>(en-US)</small></a></td>\n    </tr>\n    <tr>\n      <td><code>g</code></td>\n      <td>전역 탐색.</td>\n      <td><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global\"><code>RegExp.prototype.global</code> <small>(en-US)</small></a></td>\n    </tr>\n    <tr>\n      <td><code>i</code></td>\n      <td>대소문자를 구분하지 않음.</td>\n      <td><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase\"><code>RegExp.prototype.ignoreCase</code> <small>(en-US)</small></a></td>\n    </tr>\n    <tr>\n      <td><code>m</code></td>\n      <td>여러 줄에 걸쳐 탐색.</td>\n      <td><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline\"><code>RegExp.prototype.multiline</code> <small>(en-US)</small></a></td>\n    </tr>\n    <tr>\n      <td><code>s</code></td>\n      <td>개행 문자가 <code>.</code>과 일치함.</td>\n      <td><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll\"><code>RegExp.prototype.dotAll</code></a></td>\n    </tr>\n    <tr>\n      <td><code>u</code></td>\n      <td>\"unicode\", 패턴을 유니코드 코드 포인트의 시퀀스로 간주함.</td>\n      <td><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode\"><code>RegExp.prototype.unicode</code> <small>(en-US)</small></a></td>\n    </tr>\n    <tr>\n      <td><code>y</code></td>\n      <td>\"접착\" 탐색, 대상 문자열의 현재 위치에서 탐색을 시작함. <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky\"><code>sticky</code> <small>(en-US)</small></a>를 참고하세요.</td>\n      <td><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky\"><code>RegExp.prototype.sticky</code> <small>(en-US)</small></a></td>\n    </tr>\n  </tbody>\n</table>\n<p>플래그는 다음과 같은 구문으로 정규 표현식에 지정할 수 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>pattern<span class=\"token operator\">/</span>flags<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>생성자를 사용할 경우 이렇게 지정합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pattern'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'flags'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>플래그는 정규식과 완전히 합쳐지므로 나중에 추가하거나 제거할 수 없습니다.</p>\n<p>예를 들어, <code>re = /\\w+\\s/g</code>는 한 개 이상의 글자와 그 뒤의 공백 하나를, 문자열 전체에 대해 탐색합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\w+\\s</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'fee fi fo fum'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> myArray <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [\"fee \", \"fi \", \"fo \"]</span>\n</code></pre></div>\n<p>아래 코드는...</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\w+\\s</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>이렇게 생성자를 사용하도록 바꿀 수도 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\\\w+\\\\s'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'g'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>두 구문 모두 동일한 결과를 낳습니다.</p>\n<p><code>m</code> 플래그는 여러 줄에 걸친 입력 문자열을 여러 줄로 취급하게 합니다. 달리 말해, <code>m</code> 플래그를 지정할 경우, <code>^</code>와 <code>$</code>는 각각 전체 입력 문자열의 시작과 끝이 아니라, 각 줄의 시작과 끝에 대응하게 됩니다.</p>\n<h4 id=\"exec과_전역_탐색_플래그_사용하기\">exec()과 전역 탐색 플래그 사용하기</h4>\n<p><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code>RegExp.prototype.exec()</code></a> 메서드와 <code>g</code> 플래그를 사용하면, 일치한 부분 문자열들과 각각의 인덱스를 하나씩 순차적으로 반환합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'fee fi fo fum'</span>\n<span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\w+\\s</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"fee \", index: 0, input: \"fee fi fo fum\"]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"fi \", index: 4, input: \"fee fi fo fum\"]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"fo \", index: 7, input: \"fee fi fo fum\"]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// null</span>\n</code></pre></div>\n<p>반면, <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/String/match\"><code>String.prototype.match()</code></a> 메서드는 모든 일치를 한 번에 반환하지만, 각각의 인덱스는 포함하지 않습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"fee \", \"fi \", \"fo \"]</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"예제","title":"예제","isH3":false,"content":"<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>참고:</strong> 다음 문서에서도 정규 표현식의 사용 예제를 볼 수 있습니다.</p>\n  <ul>\n    <li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code>exec()</code></a>, <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\"><code>test()</code></a>, <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/String/match\"><code>match()</code></a>, <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll\"><code>matchAll()</code> <small>(en-US)</small></a>, <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/String/search\"><code>search()</code></a>, <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>replace()</code></a>, <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/String/split\"><code>split()</code></a> 메서드 참조</li>\n    <li>이 안내서의 하위 문서: <a href=\"/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Character_Classes\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">문자 클래스 (en-US)</a>, <a href=\"/ko/docs/Web/JavaScript/Guide/Regular_Expressions/Assertions\">어서션</a>, <a href=\"/ko/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Backreferences\">그룹과 범위</a>, <a href=\"/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Quantifiers\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">수량자 (en-US)</a>, <a href=\"/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Unicode_Property_Escapes\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">유니코드 속성 이스케이프 (en-US)</a></li>\n  </ul>\n</div>"}},{"type":"prose","value":{"id":"정규_표현식_특수_문자를_사용한_입력_값_검증","title":"정규 표현식 특수 문자를 사용한 입력 값 검증","isH3":true,"content":"<p>아래 예제에서는 사용자가 전화번호를 입력해야 합니다. 사용자가 \"확인\" 버튼을 누르면 입력한 값을 스크립트로 검증합니다. 값이 유효하면, 즉 정규 표현식과 일치하는 문자의 시퀀스를 받았으면, 스크립트는 감사 메시지를 출력합니다. 값이 유효하지 않으면, 사용자에게 올바르지 않은 값임을 알려줍니다.</p>\n<p>정규 표현식의 구조는 다음과 같습니다.</p>\n<ol>\n  <li>데이터의 시작점(<code>^</code>)</li>\n  <li>비캡처 그룹(<code>(?:)</code>)으로, 1의 뒤를 잇는 세 개의 숫자(<code>\\d{3}</code>), 또는(<code>|</code>), 여는 괄호(<code>\\(</code>)의 뒤를 잇는 세 개의 숫자(<code>\\d{3}</code>)의 뒤를 잇는 닫는 괄호(<code>\\)</code>)</li>\n  <li>캡처 그룹(<code>()</code>)으로, 2의 뒤를 잇는 하나의 대시, 슬래시, 또는 마침표</li>\n  <li>3의 뒤를 잇는 네 개의 숫자(<code>\\d{4}</code>)</li>\n  <li>4의 뒤를 잇는, 첫 번째 캡처 그룹에서 기억한 부분 문자열(<code>\\1</code>)</li>\n  <li>5의 뒤를 잇는 네 개의 숫자(<code>\\d{4}</code>)</li>\n  <li>데이터의 끝점(<code>$</code>)</li>\n</ol>\n<h4 id=\"html\">HTML</h4>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n  전화번호를 입력 후 \"확인\" 버튼을 누르세요.\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/&gt;</span></span>\n  ###-####-####의 형식으로 입력하세요.\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>form<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>phone<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>확인<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>output<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<h4 id=\"javascript\">JavaScript</h4>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> form <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#form'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#phone'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#output'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^(?:\\d{3}|\\(\\d{3}\\))([-\\/\\.])\\d{4}\\1\\d{4}$</span><span class=\"token regex-delimiter\">/</span></span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">testInfo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">phoneInput</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ok <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>phoneInput<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    output<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">형식에 맞지 않는 전화번호입니다. (</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>phoneInput<span class=\"token punctuation\">.</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    output<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">감사합니다. 전화번호는 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>ok<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 입니다.</span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nform<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'submit'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">testInfo</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h4 id=\"결과\">결과</h4><iframe class=\"sample-code-frame\" title=\"정규 표현식 특수 문자를 사용한 입력 값 검증 sample\" id=\"frame_정규_표현식_특수_문자를_사용한_입력_값_검증\" src=\"https://yari-demos.prod.mdn.mozit.cloud/ko/docs/Web/JavaScript/Guide/Regular_Expressions/_sample_.%EC%A0%95%EA%B7%9C_%ED%91%9C%ED%98%84%EC%8B%9D_%ED%8A%B9%EC%88%98_%EB%AC%B8%EC%9E%90%EB%A5%BC_%EC%82%AC%EC%9A%A9%ED%95%9C_%EC%9E%85%EB%A0%A5_%EA%B0%92_%EA%B2%80%EC%A6%9D.html\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"도구","title":"도구","isH3":false,"content":"<dl>\n  <dt id=\"regexr\"><a href=\"https://regexr.com/\" class=\"external\" rel=\" noopener\">RegExr</a></dt>\n  <dd>\n    <p>정규 표현식을 배우고, 만들고, 시험할 수 있는 온라인 도구입니다.</p>\n  </dd>\n  <dt id=\"regex_tester\"><a href=\"https://regex101.com/\" class=\"external\" rel=\" noopener\">Regex tester</a></dt>\n  <dd>\n    <p>정규 표현식 생성기/디버거입니다.</p>\n  </dd>\n  <dt id=\"regex_visualizer\"><a href=\"https://extendsclass.com/regex-tester.html\" class=\"external\" rel=\" noopener\">Regex visualizer</a></dt>\n  <dd>\n    <p>시각적 정규 표현식 테스터입니다.</p>\n  </dd>\n</dl><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ko/docs/Web/JavaScript/Guide/Text_formatting\">« 이전</a></li>\n    <li><a class=\"button minimal\" href=\"/ko/docs/Web/JavaScript/Guide/Indexed_collections\">다음  »</a></li>\n</ul>"}}],"toc":[{"text":"정규 표현식 만들기","id":"정규_표현식_만들기"},{"text":"정규 표현식 패턴 작성하기","id":"정규_표현식_패턴_작성하기"},{"text":"JavaScript에서 정규 표현식 사용하기","id":"javascript에서_정규_표현식_사용하기"},{"text":"예제","id":"예제"},{"text":"도구","id":"도구"}],"summary":"정규 표현식, 또는 정규식은 문자열에서 특정 문자 조합을 찾기 위한 패턴입니다. JavaScript에서는 정규 표현식도 객체로서, RegExp의 exec()와 test() 메서드를 사용할 수 있습니다. String의 match(), matchAll() (en-US), replace(), replaceAll() (en-US), search(), split() 메서드와도 함께 사용할 수 있습니다. 이 장에서는 JavaScript의 정규 표현식을 설명합니다.","popularity":0.0069,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Regular expressions","locale":"en-US","native":"English (US)"},{"title":"Expresiones Regulares","locale":"es","native":"Español"},{"title":"Expressions rationnelles","locale":"fr","native":"Français"},{"title":"正規表現","locale":"ja","native":"日本語"},{"title":"Expressões Regulares","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Регулярные выражения","locale":"ru","native":"Русский"},{"title":"正则表达式","locale":"zh-CN","native":"中文 (简体)"},{"title":"正規表達式","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ko/web/javascript/guide/regular_expressions","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/web/javascript/guide/regular_expressions/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ko/docs/Web","title":"개발자를 위한 웹 기술"},{"uri":"/ko/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/ko/docs/Web/JavaScript/Guide","title":"JavaScript 안내서"},{"uri":"/ko/docs/Web/JavaScript/Guide/Regular_Expressions","title":"정규 표현식"}],"pageTitle":"정규 표현식 - JavaScript | MDN","noIndexing":false}}