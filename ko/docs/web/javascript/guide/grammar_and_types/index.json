{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"문법과 자료형","mdn_url":"/ko/docs/Web/JavaScript/Guide/Grammar_and_types","locale":"ko","native":"한국어","sidebarHTML":"\n <ol>\n  <li><a href=\"/ko/docs/Web/JavaScript\"><strong><em>JavaScript</em></strong></a></li>\n  <li><a href=\"/ko/docs/Web/JavaScript/Tutorials\"><strong>Tutorials:</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Complete beginners</summary>\n      <ol>\n        <li><a href=\"/ko/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">JavaScript basics</a></li>\n        <li><a href=\"/ko/docs/Learn/JavaScript/First_steps\">JavaScript first steps</a></li>\n        <li><a href=\"/ko/docs/Learn/JavaScript/Building_blocks\">JavaScript building blocks</a></li>\n        <li><a href=\"/ko/docs/Learn/JavaScript/Objects\">Introducing JavaScript objects</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>JavaScript Guide</summary>\n      <ol>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Introduction\">Introduction</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Grammar_and_Types\">Grammar and types</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">Control flow and error handling</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Loops_and_iteration\">Loops and iteration</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Functions\">Functions</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Expressions_and_Operators\">Expressions and operators</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Numbers_and_dates\">Numbers and dates</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Text_formatting\">Text formatting</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Regular_Expressions\">Regular expressions</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Indexed_collections\">Indexed collections</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Keyed_collections\">Keyed collections</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Working_with_Objects\">Working with objects</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Details_of_the_Object_Model\">Details of the object model</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Using_promises\">Using promises</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Iterators_and_generators\">Iterators and generators</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Meta_programming\">Meta programming</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Modules\">JavaScript modules</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Intermediate</summary>\n      <ol>\n        <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks\">Client-side JavaScript frameworks</a></li>\n        <li><a href=\"/ko/docs/Learn/JavaScript/Client-side_web_APIs\">Client-side web APIs</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">A re-introduction to JavaScript</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Data_structures\">JavaScript data structures</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Equality_comparisons_and_sameness\">Equality comparisons and sameness</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Closures\">Closures</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Advanced</summary>\n      <ol>\n        <li><a href=\"/ko/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">Inheritance and the prototype chain</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Typed_arrays\">JavaScript typed arrays</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Memory_Management\">Memory Management</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/EventLoop\">Concurrency model and Event Loop</a></li>\n      </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/ko/docs/Web/JavaScript/Reference\">References:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n       <summary>Built-in objects</summary>\n        <ol><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\">AggregateError</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\">AsyncFunction</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\">AsyncGenerator</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\">AsyncGeneratorFunction</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Atomics\">Atomics</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array\">BigInt64Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array\">BigUint64Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/DataView\">DataView</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\">decodeURI()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Error\">Error</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/escape\">escape()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/EvalError\">EvalError</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\">FinalizationRegistry</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\">Float32Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\">Float64Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Generator\">Generator</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">globalThis</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Infinity\">Infinity</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\">Int16Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\">Int32Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\">Int8Array</a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/InternalError\">InternalError</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/isFinite\">isFinite()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/isNaN\">isNaN()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/NaN\">NaN</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">parseFloat()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">parseInt()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/RangeError\">RangeError</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\">ReferenceError</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">Reflect</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">RegExp</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/String\">String</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\">SyntaxError</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">TypedArray</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\">Uint16Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\">Uint32Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">Uint8Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\">Uint8ClampedArray</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/undefined\">undefined</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/unescape\">unescape()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/URIError\">URIError</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/WeakRef\">WeakRef</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\">WeakSet</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Expressions &amp; operators</summary>\n      <ol><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Addition_assignment\">Addition assignment (+=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Addition\">Addition (+)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Assignment\">Assignment (=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/async_function*\">async function* expression</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/await\">await</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment\">Bitwise AND assignment (&amp;=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">Bitwise AND (&amp;)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">Bitwise NOT (~)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment\">Bitwise OR assignment (|=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">Bitwise OR (|)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment\">Bitwise XOR assignment (^=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">Bitwise XOR (^)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/class\">class expression</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Comma_Operator\">Comma operator (,)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">Conditional (ternary) operator</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Decrement\">Decrement (--)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/delete\">delete operator</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">Destructuring assignment</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Division_assignment\">Division assignment (/=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Division\">Division (/)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Equality\">Equality (==)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment\">Exponentiation assignment (**=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Exponentiation\">Exponentiation (**)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/function\">Function expression</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal\">Greater than or equal (&gt;=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Greater_than\">Greater than (&gt;)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Grouping\">Grouping operator ( )</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/import.meta\">import.meta</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/import\">import</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/in\">in operator</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Increment\">Increment (++)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Inequality\">Inequality (!=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/instanceof\">instanceof</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment\">Left shift assignment (&lt;&lt;=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Left_shift\">Left shift (&lt;&lt;)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal\">Less than or equal (&lt;=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Less_than\">Less than (&lt;)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment\">Logical AND assignment (&amp;&amp;=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Logical_AND\">Logical AND (&amp;&amp;)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">Logical NOT (!)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment\">Logical nullish assignment (??=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment\">Logical OR assignment (||=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Logical OR (||)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment\">Multiplication assignment (*=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Multiplication\">Multiplication (*)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/new.target\">new.target</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/new\">new operator</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/null\">null</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\">Nullish coalescing operator (??)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Object_initializer\">Object initializer</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">Operator precedence</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">Optional chaining (?.)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Property_Accessors\">Property accessors</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Remainder_assignment\">Remainder assignment (%=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Remainder\">Remainder (%)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment\">Right shift assignment (&gt;&gt;=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Right_shift\">Right shift (&gt;&gt;)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Spread syntax (...)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Strict_equality\">Strict equality (===)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">Strict inequality (!==)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment\">Subtraction assignment (-=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Subtraction\">Subtraction (-)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/super\">super</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/this\">this</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/typeof\">typeof</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Unary_negation\">Unary negation (-)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Unary_plus\">Unary plus (+)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment\">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">Unsigned right shift (&gt;&gt;&gt;)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/void\">void operator</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/yield*\">yield*</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/yield\">yield</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Statements &amp; declarations</summary>\n      <ol><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/async_function*\">async function*</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/block\">block</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/break\">break</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/class\">class</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/const\">const</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/continue\">continue</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/debugger\">debugger</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/do...while\">do...while</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/Empty\">empty</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/export\">export</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/for-await...of\">for await...of</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/for\">for</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/function*\">function*</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/function\">function declaration</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/if...else\">if...else</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/import\">import</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/label\">label</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/let\">let</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/return\">return</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/switch\">switch</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/throw\">throw</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/try...catch\">try...catch</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/var\">var</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/while\">while</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/with\">with</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Functions</summary>\n      <ol><li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow function expressions</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/get\">getter</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/set\">setter</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Classes</summary>\n      <ol><li><a href=\"/ko/docs/Web/JavaScript/Reference/Classes/Class_static_initialization_blocks\">Class static initialization blocks</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Classes/constructor\">constructor</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Classes/extends\">extends</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">Private class features</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Classes/Public_class_fields\">Public class fields</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Classes/static\">static</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Errors</summary>\n      <ol><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Already_has_pragma\">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Array_sort_argument\">TypeError: invalid Array.prototype.sort argument</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Bad_octal\">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Bad_radix\">RangeError: radix must be an integer</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag\">SyntaxError: invalid regular expression flag \"x\"</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield\">SyntaxError: return not in function</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/BigInt_division_by_zero\">RangeError: BigInt division by zero</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/BigInt_negative_exponent\">RangeError: BigInt negative exponent</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type\">TypeError: X.prototype.y called on incompatible type</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init\">ReferenceError: can't access lexical declaration 'X' before initialization</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cant_assign_to_property\">TypeError: can't assign to property \"x\" on \"y\": not an object</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cant_be_converted_to_BigInt_because_it_isnt_an_integer\">RangeError: x can't be converted to BigInt because it isn't an integer</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cant_convert_BigInt_to_number\">TypeError: can't convert BigInt to number</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cant_convert_x_to_BigInt\">TypeError: can't convert x to BigInt</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible\">TypeError: can't define property \"x\": \"obj\" is not extensible</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cant_delete\">TypeError: property \"x\" is non-configurable and can't be deleted</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property\">TypeError: can't redefine non-configurable property \"x\"</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cant_use_nullish_coalescing_unparenthesized\">SyntaxError: cannot use `??` unparenthesized within `||` and `&amp;&amp;` expressions</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value\">TypeError: cyclic object value</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Dead_object\">TypeError: can't access dead object</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode\">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage\">ReferenceError: deprecated caller or arguments usage</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Deprecated_expression_closures\">Warning: expression closures are deprecated</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Deprecated_octal\">SyntaxError: \"0\"-prefixed octal literals and octal escape seq. are deprecated</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma\">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Deprecated_String_generics\">Warning: String.x is deprecated; use String.prototype.x instead</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Deprecated_toLocaleFormat\">Warning: Date.prototype.toLocaleFormat is deprecated</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Equal_as_assign\">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Getter_only\">TypeError: setting getter-only property \"x\"</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Hash_outside_class\">SyntaxError: Unexpected '#' used outside of class body</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Identifier_after_number\">SyntaxError: identifier starts immediately after numeric literal</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Illegal_character\">SyntaxError: illegal character</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/in_operator_no_object\">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\">RangeError: invalid array length</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side\">SyntaxError: invalid assignment left-hand side</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax\">SyntaxError: invalid BigInt syntax</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment\">TypeError: invalid assignment to const \"x\"</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Invalid_date\">RangeError: invalid date</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer\">SyntaxError: for-in loop head declarations may not have initializers</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer\">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand\">TypeError: invalid 'instanceof' operand 'x'</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/is_not_iterable\">TypeError: 'x' is not iterable</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse\">SyntaxError: JSON.parse: bad parsing</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Malformed_formal_parameter\">SyntaxError: Malformed formal parameter</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Malformed_URI\">URIError: malformed URI sequence</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list\">SyntaxError: missing ] after element list</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id\">SyntaxError: missing : after property id</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body\">SyntaxError: missing } after function body</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list\">SyntaxError: missing } after property list</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter\">SyntaxError: missing formal parameter</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const\">SyntaxError: missing = in const declaration</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator\">SyntaxError: missing name after . operator</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\">SyntaxError: missing ) after argument list</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition\">SyntaxError: missing ) after condition</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_semicolon_before_statement\">SyntaxError: missing ; before statement</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/More_arguments_needed\">TypeError: More arguments needed</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count\">RangeError: repeat count must be non-negative</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/No_non-null_object\">TypeError: \"x\" is not a non-null object</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/No_properties\">TypeError: \"x\" has no properties</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/No_variable_name\">SyntaxError: missing variable name</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element\">TypeError: can't delete non-configurable array element</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint\">RangeError: argument is not a valid code point</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Not_a_constructor\">TypeError: \"x\" is not a constructor</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Not_a_function\">TypeError: \"x\" is not a function</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Not_defined\">ReferenceError: \"x\" is not defined</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Precision_range\">RangeError: precision is out of range</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Property_access_denied\">Error: Permission denied to access property \"x\"</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Read-only\">TypeError: \"x\" is read-only</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter\">SyntaxError: redeclaration of formal parameter \"x\"</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value\">TypeError: Reduce of empty array with no initial value</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Reserved_identifier\">SyntaxError: \"x\" is a reserved identifier</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large\">RangeError: repeat count must be less than infinity</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Stmt_after_return\">Warning: unreachable code after return statement</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params\">SyntaxError: \"use strict\" not allowed in function with non-simple parameters</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Too_much_recursion\">InternalError: too much recursion</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Undeclared_var\">ReferenceError: assignment to undeclared variable \"x\"</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Undefined_prop\">ReferenceError: reference to undefined property \"x\"</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Unexpected_token\">SyntaxError: Unexpected token</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Unexpected_type\">TypeError: \"x\" is (not) \"y\"</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement\">SyntaxError: function statement requires a name</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Unparenthesized_unary_expr_lhs_exponentiation\">SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Unterminated_string_literal\">SyntaxError: unterminated string literal</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Misc</summary>\n      <ol>\n        <li><a href=\"/ko/docs/Web/JavaScript/JavaScript_technologies_overview\">JavaScript technologies overview</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Reference/Lexical_grammar\">Lexical grammar</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Data_structures\">JavaScript data structures</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">Enumerability and ownership of properties</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Reference/Iteration_protocols\">Iteration protocols</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\">Transitioning to strict mode</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Reference/Template_literals\">Template literals</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\">Deprecated features</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ko/docs/Web/JavaScript/Guide/Introduction\">« 이전</a></li>\n    <li><a class=\"button minimal\" href=\"/ko/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">다음  »</a></li>\n</ul>\n<p>이 장은 JavaScript의 기본 문법과 변수 선언, 자료형 및 리터럴을 다룹니다.</p>"}},{"type":"prose","value":{"id":"기본","title":"기본","isH3":false,"content":"<p>JavaScript는 문법의 대부분을 Java와 C, C++로부터 차용하고 있으며, Awk, Perl, Python의 영향도 받았습니다.</p>\n<p>JavaScript는 <strong>대소문자를 구별</strong>하며 <strong>유니코드</strong> 문자셋을 이용합니다. 예를 들면, Früh(독일어로 \"이른\")을 변수명으로 사용할 수도 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> 갑을 <span class=\"token operator\">=</span> <span class=\"token string\">\"병정\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> Früh <span class=\"token operator\">=</span> <span class=\"token string\">\"foobar\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>하지만 <code>Früh</code>는 <code>früh</code>와 다릅니다. 대소문자를 구분하기 때문입니다.</p>\n<p>JavaScript에서는 명령을 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Glossary/Statement\">명령문(statement) <small>(en-US)</small></a>이라고 부르며, 세미콜론(;)으로 구분합니다.</p>\n<p>명령문이 한 줄을 다 차지할 경우에는 세미콜론이 필요하지 않습니다. 그러나 한 줄에 두 개 이상의 명령문이 필요하다면 반드시 세미콜론으로 구분해야 합니다.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>참고:</strong> ECMAScript는 세미콜론을 자동으로 삽입해 명령문을 끝내는 규칙(<a href=\"/ko/docs/Web/JavaScript/Reference/Lexical_grammar#%EC%9E%90%EB%8F%99_%EC%84%B8%EB%AF%B8%EC%BD%9C%EB%A1%A0_%EC%82%BD%EC%9E%85\">ASI</a>)도 가지고 있습니다. (더 많은 정보는 JavaScript의 <a href=\"/ko/docs/Web/JavaScript/Reference/Lexical_grammar\">어휘 문법</a>에 대한 자세한 참고서를 참고하세요.)</p>\n</div>\n<p>하지만, 세미콜론이 필요하지 않은 경우라도 항상 세미콜론으로 끝마치는 편이 버그 예방 차원에서 더 좋은 습관이라고 여겨집니다.</p>\n<p>JavaScript의 스크립트 소스는 왼쪽에서 오른쪽으로 탐색하면서 토큰, 제어 문자, 줄바꿈 문자, 주석이나 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Glossary/Whitespace\">공백 <small>(en-US)</small></a>으로 이루어진 입력 요소의 시퀀스로 변환됩니다. (스페이스, 탭, 줄바꿈 문자는 공백으로 간주됩니다.)</p>"}},{"type":"prose","value":{"id":"주석","title":"주석","isH3":false,"content":"<p><strong>주석</strong>의 구문은 C++ 및 다른 많은 언어와 똑같습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 한 줄 주석</span>\n\n<span class=\"token comment\">/* 이건 더 긴,\n * 여러 줄 주석입니다.\n */</span>\n\n<span class=\"token comment\">/* 그러나, /* 중첩된 주석은 쓸 수 없습니다 */</span> SyntaxError <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\n</code></pre></div>\n<p>주석은 공백처럼 행동하며 스크립트 실행 시 버려집니다.</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>참고:</strong> 몇몇 자바스크립트 파일의 시작부에 <code>#!/usr/bin/env node</code>와 같은 형태의 주석 문법이 쓰이는 것을 볼 수 있습니다.</p>\n  <p>이것은 <strong>해시뱅 주석</strong> 구문이라고 하는데, 이 특별한 주석은 스크립트를 실행할 때 쓸 특별한 자바스크립트 인터프리터의 경로를 설정할 때 쓰입니다. <a href=\"/ko/docs/Web/JavaScript/Reference/Lexical_grammar#%ED%95%B4%EC%8B%9C%EB%B1%85_%EC%A3%BC%EC%84%9D\">해시뱅 주석</a>을 참고하여 자세한 내용을 확인할 수 있습니다.</p>\n</div>"}},{"type":"prose","value":{"id":"선언","title":"선언","isH3":false,"content":"<p>JavaScript의 선언에는 3가지 방법이 있습니다.</p>\n<dl>\n  <dt id=\"var\"><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/var\"><code>var</code></a></dt>\n  <dd>\n    <p>변수를 선언. 추가로 동시에 값을 초기화.</p>\n  </dd>\n  <dt id=\"let\"><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/let\"><code>let</code></a></dt>\n  <dd>\n    <p>블록 스코프 지역 변수를 선언. 추가로 동시에 값을 초기화.</p>\n  </dd>\n  <dt id=\"const\"><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/const\"><code>const</code></a></dt>\n  <dd>\n    <p>블록 스코프 읽기 전용 상수를 선언.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"변수","title":"변수","isH3":true,"content":"<p>애플리케이션에서 값에 상징적인 이름으로 변수를 사용합니다. 변수명은 <a href=\"/ko/docs/Glossary/Identifier\">식별자(identifiers)</a>라고 불리며 특정 규칙을 따릅니다.</p>\n<p>JavaScript 식별자는 문자, 밑줄 (<code>_</code>) 혹은 달러 기호 (<code>$</code>)로 시작해야 하는 반면 이후는 숫자 (<code>0</code>–<code>9</code>) 일 수도 있습니다.</p>\n<p>JavaScript가 대소문자를 구분하기에, 문자는 \"<code>A</code>\"부터 \"<code>Z</code>\" (대문자)와 \"<code>a</code>\"부터 \"<code>z</code>\" (소문자)까지 모두 포함합니다.</p>\n<p>ISO 8859-1 혹은 Unicode 문자(가령 <code>å</code> 나 <code>ü</code>)도 식별자에 사용할 수 있습니다. (좀 더 상세한 내용은 <a href=\"https://mathiasbynens.be/notes/javascript-identifiers-es6\" class=\"external\" rel=\" noopener\">이 블로그 글</a>을 참고.) 또한 <a href=\"/ko/docs/Web/JavaScript/Reference/Lexical_grammar#%EB%AC%B8%EC%9E%90%EC%97%B4_%EB%A6%AC%ED%84%B0%EB%9F%B4\">Unicode escape sequences</a>도 식별자에 문자로 사용할 수 있습니다.</p>\n<p>적절한 이름으로는 <code>Number_hits</code>, <code>temp99</code>, <code>$credit</code> 및 <code>_name</code> 등 입니다.</p>"}},{"type":"prose","value":{"id":"변수_선언","title":"변수 선언","isH3":true,"content":"<p>변수 선언은 아래 3가지 방법으로 가능합니다.</p>\n<ul>\n  <li><code>var x = 42</code>와 같이 <a href=\"/ko/docs/Web/JavaScript/Reference/Statements/var\"><code>var</code></a> 키워드로 변수를 선언할 수 있습니다. 이 구문은 실행 맥락에 따라 <strong>지역 및 전역 변수</strong>를 선언하는데 모두 사용될 수 있습니다.</li>\n  <li><code>let y = 13</code>와 같이 <a href=\"/ko/docs/Web/JavaScript/Reference/Statements/const\"><code>const</code></a> 혹은 <a href=\"/ko/docs/Web/JavaScript/Reference/Statements/let\"><code>let</code></a> 키워드로 변수를 선언할 수 있습니다. 이 구문은 블록 스코프 지역 변수를 선언하는데 사용될 수 있습니다. 아래 <a href=\"#%EB%B3%80%EC%88%98_%EC%8A%A4%EC%BD%94%ED%94%84\">변수 스코프</a>를 참고하세요.</li>\n</ul>\n<p><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">구조 분해 할당</a> 구문을 사용하여 <a href=\"#%EA%B0%9D%EC%B2%B4_%EB%A6%AC%ED%84%B0%EB%9F%B4\">객체 리터럴</a>에서 값을 풀기 위해 변수를 선언할 수 있습니다. 예를 들면, <code>let { bar } = foo</code>. 이 구문은 <code>bar</code>라는 이름의 변수를 생성하고 <code>foo</code> 객체에 있는 동일한 이름의 키에 해당하는 값을 변수에 할당합니다.</p>\n<p>간단히 변수에 값을 할당 할 수도 있습니다. 예를 들어, <code>x = 42</code> 와 같은 구문은 <a href=\"/ko/docs/Web/JavaScript/Reference/Statements/var#%EC%84%A4%EB%AA%85\"><strong>선언되지 않은 전역변수</strong></a>를 만듭니다. 뿐만 아니라, 자바스크립트의 엄격한 경고를 만들어냅니다. 선언되지 않은 전역변수는 의도되지 않은 동작을 만들어내고는 합니다. 따라서 선언되지 않은 전역변수를 사용하면 안됩니다.</p>"}},{"type":"prose","value":{"id":"변수_할당","title":"변수 할당","isH3":true,"content":"<p>지정된 초기 값 없이 <code>var</code> 혹은 <code>let</code> 문을 사용해서 선언된 변수는 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> 값을 갖습니다.</p>\n<p>선언되지 않은 변수에 접근을 시도하는 경우 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\"><code>ReferenceError</code></a> 예외가 발생합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a 값은 '</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a 값은 undefined</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b 값은 '</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// b 값은 undefined</span>\n<span class=\"token keyword\">var</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 이것은 아래의 '변수 호이스팅'을 읽기 전에는 혼란스러울 수 있음</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c 값은 '</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uncaught ReferenceError: c is not defined</span>\n\n<span class=\"token keyword\">let</span> x<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x 값은 '</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// x 값은 undefined</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'y 값은 '</span> <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uncaught ReferenceError: y is not defined</span>\n<span class=\"token keyword\">let</span> y<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>undefined</code>를 사용하여 변수 값이 있는지 확인할 수 있습니다. 아래 코드에서, <code>input</code> 변수는 값이 할당되지 않았고 <a href=\"/ko/docs/Web/JavaScript/Reference/Statements/if...else\"><code>if</code></a>문은 <code>true</code>로 평가합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> input<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>input <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">doThis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">doThat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>undefined</code> 값은 불리언 맥락(context)에서 사용될 때 <code>false</code>로 동작합니다. 예를 들어, 아래 코드는 <code>myArray</code> 요소가 <code>undefined</code>이므로 <code>myFunction</code> 함수를 실행합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>myArray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>undefined</code> 값은 수치 맥락에서 사용될 때 <code>NaN</code>으로 변환됩니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span>\na <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN으로 평가</span>\n</code></pre></div>\n<p><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> 값을 평가할 때, 수치 맥락에서는 <code>0</code>으로, 불리언 맥락에서는 <code>false</code>로 동작합니다. 예를 들면,</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 콘솔에 0 으로 로그가 남음</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"변수_스코프","title":"변수 스코프","isH3":true,"content":"<p>어떤 함수의 바깥에 변수를 선언하면, 현재 문서의 다른 코드에 해당 변수를 사용할 수 있기에 전역 변수라고 합니다. 만약 함수 내부에 변수를 선언하면, 오직 그 함수 내에서만 사용할 수 있기에 지역 변수라고 부릅니다.</p>\n<p>ECMAScript 2015 이전의 JavaScript는 <a href=\"/ko/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#block_%EB%AC%B8\">블록 문</a> 스코프가 없습니다. 그래서 오히려, 블록 내에 선언된 변수는 그 블록 내에 존재하는 함수(혹은 전역 스코프)에 지역적입니다.</p>\n<p>예를 들어서 아래의 코드는 <code>5</code>라는 로그가 남는데. <code>x</code>의 스코프가 전역 맥락 (혹은 코드가 함수의 일부분이라면 함수 맥락)이기 때문입니다. <code>x</code>의 스코프는 <code>if</code>문 블록에 제한되지 않습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n</code></pre></div>\n<p>이 동작은 <code>let</code> 선언을 사용하면 바뀝니다 (ECMAScript 2015에 도입됨).</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError: y is not defined</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"변수_호이스팅","title":"변수 호이스팅","isH3":true,"content":"<p>또 다른 JavaScript 변수의 특이한 점은 예외를 받지 않고도, 나중에 선언된 변수를 참조할 수 있다는 것입니다.</p>\n<p>이 개념은 <strong>호이스팅</strong>(hoisting)으로 알려져 있습니다. 즉 JavaScript 변수가 어떤 의미에서 함수나 문의 최상단으로 \"올려지는\" (혹은 \"끌어올려지는\") 것을 말합니다. 하지만, 끌어올려진 변수는 <code>undefined</code> 값을 반환합니다. 그래서 심지어 이 변수를 사용 혹은 참조한 후에 선언 및 초기화하더라도, 여전히 <code>undefined</code>를 반환합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/**\n * Example 1\n */</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">/**\n * Example 2\n */</span>\n<span class=\"token comment\">// undefined 값을 반환함.</span>\n<span class=\"token keyword\">var</span> myvar <span class=\"token operator\">=</span> <span class=\"token string\">\"my value\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myvar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n  <span class=\"token keyword\">var</span> myvar <span class=\"token operator\">=</span> <span class=\"token string\">\"local value\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>위 예제는 아래 예제와 동일하게 볼 수 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/**\n * Example 1\n */</span>\n<span class=\"token keyword\">var</span> x<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nx <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Example 2\n */</span>\n<span class=\"token keyword\">var</span> myvar <span class=\"token operator\">=</span> <span class=\"token string\">'my value'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> myvar<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myvar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n  myvar <span class=\"token operator\">=</span> <span class=\"token string\">'local value'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>호이스팅 때문에, 함수 내의 모든 <code>var</code> 문은 가능한 함수 상단 근처에 두는 것이 좋습니다. 이 방법은 코드를 더욱 명확하게 만들어줍니다.</p>\n<p>ECMAScript 2015의 <code>let</code>과 <code>const</code>는 변수를 블록의 상단으로 <strong>끌어올리지만 초기화하지 않습니다.</strong> 변수가 선언되기 전에 블록 안에서 변수를 참조하게 되면 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\"><code>ReferenceError</code></a>를 발생시키게 되는데, 변수는 블록 시작부터 선언이 처리될 때까지 \"temporal dead zone\"에 위치하게 되기 때문입니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"함수_호이스팅","title":"함수 호이스팅","isH3":true,"content":"<p>함수에서는 <a href=\"/ko/docs/Web/JavaScript/Reference/Statements/function\">함수 선언</a>으로는 호이스팅되지만 <a href=\"/ko/docs/Web/JavaScript/Reference/Operators/function\">함수 표현식</a>으로는 호이스팅 되지 않습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/* 함수 선언 */</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"bar\"</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 함수 표현식 */</span>\n\n<span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError: baz is not a function</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">baz</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"전역_변수","title":"전역 변수","isH3":true,"content":"<p>전역 변수는 사실 전역 객체의 속성(property)입니다.</p>\n<p>웹 페이지에서 전역 객체는 <a href=\"/ko/docs/Web/API/Window\"><code>window</code></a> 이므로, <code>windows.variable</code> 구문을 통해 전역 변수를 설정하고 접근할 수 있습니다.</p>\n<p>그 결과, <code>window</code> 혹은 <code>frame</code>의 이름을 지정하여 한 window 혹은 frame에서 다른 window 혹은 frame에 선언된 전역 변수에 접근할 수 있습니다. 예를 들어, <code>phoneNumber</code> 라는 변수가 문서에 선언된 경우, <code>iframe</code>에서 <code>parent.phoneNumber</code>로 이 변수를 참조할 수 있습니다.</p>"}},{"type":"prose","value":{"id":"상수","title":"상수","isH3":true,"content":"<p><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/const\"><code>const</code></a> 키워드로 읽기 전용 상수를 만들 수 있습니다.</p>\n<p>상수 식별자의 구문은 변수 식별자와 같습니다. 문자, 밑줄이나 달러 기호 (<code>$</code>) 로 시작해야 하고 문자, 숫자나 밑줄을 포함할 수 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token constant\">PI</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>상수는 스크립트가 실행 중인 동안 대입을 통해 값을 바꾸거나 재선언될 수 없습니다. 값으로 초기화해야 합니다.</p>\n<p>상수에 대한 스코프 규칙은 <code>let</code> 블록 스코프 변수와 동일합니다. 만약 <code>const</code> 키워드가 생략된 경우에는, 식별자는 변수를 나타내는 것으로 간주됩니다.</p>\n<p>상수는 같은 스코프에 있는 함수나 변수와 동일한 이름으로 선언할 수 없습니다. 예를 들어,</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 오류가 발생합니다</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 역시 오류가 발생합니다</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> g <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> g<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//statements</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>그러나, 상수에 할당된 객체의 속성은 보호되지 않아서 다음의 문은 문제없이 실행됩니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token constant\">MY_OBJECT</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string-property property\">'key'</span><span class=\"token operator\">:</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">MY_OBJECT</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> <span class=\"token string\">'otherValue'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>또한, 배열의 내용도 보호되지 않아서 다음의 문도 문제없이 실행됩니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token constant\">MY_ARRAY</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'HTML'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'CSS'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">MY_ARRAY</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'JAVASCRIPT'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MY_ARRAY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs ['HTML','CSS','JAVASCRIPT'];</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"데이터_구조_및_형","title":"데이터 구조 및 형","isH3":false,"content":""}},{"type":"prose","value":{"id":"데이터_형","title":"데이터 형","isH3":true,"content":"<p>최신 ECMAScript 표준은 8가지 데이터 형을 정의합니다.</p>\n<ul>\n  <li>7가지 <a href=\"/ko/docs/Glossary/Primitive\">원시</a> 데이터 형\n    <ol>\n      <li><a href=\"/ko/docs/Glossary/Boolean\">Boolean</a>. <code>true</code>와 <code>false</code></li>\n      <li><a href=\"/ko/docs/Glossary/Null\">null</a>. null 값을 나타내는 특별한 키워드. (JavaScript는 대소문자를 구분하므로, <code>null</code>은 <code>Null</code>, <code>NULL</code> 혹은 다른 변형과도 다릅니다.)</li>\n      <li><a href=\"/ko/docs/Glossary/undefined\">undefined</a>. 값이 정의되어 있지 않은 최상위 속성.</li>\n      <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Glossary/Number\">Number <small>(en-US)</small></a>. 정수 또는 실수형 숫자. 예: <code>42</code> 혹은 <code>3.14159</code>.</li>\n      <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Glossary/BigInt\">BigInt <small>(en-US)</small></a>. 임의 정밀도의 정수. 예: <code>9007199254740992n</code>.</li>\n      <li><a href=\"/ko/docs/Glossary/String\">String</a>. 문자열. 예:\"안녕\"</li>\n      <li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a>. (ECMAScript 2015에 도입) 인스턴스가 고유하고 불변인 데이터 형.</li>\n    </ol>\n  </li>\n  <li>그리고 <a href=\"/ko/docs/Glossary/Object\">Object</a></li>\n</ul>\n<p>이러한 데이터 형이 비교적 많지 않지만, 애플리케이션에 유용한 기능을 수행할 수 있습니다. <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>객체</code></a>와 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>함수</code></a>는 언어의 다른 기본 요소입니다. 객체는 값을 위한 컨테이너, 함수는 애플리케이션이 수행할 수 있는 절차(procedure)로 생각할 수 있습니다.</p>"}},{"type":"prose","value":{"id":"자료형_변환","title":"자료형 변환","isH3":true,"content":"<p>JavaScript는 동적 형지정(정형) 언어입니다. 이는 변수를 선언할 때 데이터 형을 지정할 필요가 없음을 의미합니다. 또한 데이터 형이 스크립트 실행 도중 필요에 의해 자동으로 변환됨을 뜻합니다.</p>\n<p>그래서, 예를 들어, 다음과 같이 변수를 정의할 수 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>그리고 나중에, 동일한 변수에 문자열 값을 할당할 수도 있습니다. 아래와 같이,</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>answer <span class=\"token operator\">=</span> <span class=\"token string\">'Thanks for all the fish...'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>JavaScript는 동적 형지정 언어이므로, 이 할당은 오류 메시지가 발생하지 않습니다.</p>"}},{"type":"prose","value":{"id":"숫자와_연산자","title":"숫자와 '+' 연산자","isH3":true,"content":"<p>숫자와 문자열 값 사이에 <code>+</code> 연산자를 포함한 식에서, JavaScript는 숫자 값을 문자열로 변환합니다. 예를 들어, 아래와 같은 문이 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>x <span class=\"token operator\">=</span> <span class=\"token string\">'The answer is '</span> <span class=\"token operator\">+</span> <span class=\"token number\">42</span> <span class=\"token comment\">// \"The answer is 42\"</span>\ny <span class=\"token operator\">=</span> <span class=\"token number\">42</span> <span class=\"token operator\">+</span> <span class=\"token string\">' is the answer'</span> <span class=\"token comment\">// \"42 is the answer\"</span>\n</code></pre></div>\n<p>다른 연산자를 포함한 식의 경우, JavaScript는 숫자 값을 문자열로 변환하지 않습니다. 예를 들면,</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string\">'37'</span> <span class=\"token operator\">-</span> <span class=\"token number\">7</span> <span class=\"token comment\">// 30</span>\n<span class=\"token string\">'37'</span> <span class=\"token operator\">+</span> <span class=\"token number\">7</span> <span class=\"token comment\">// \"377\"</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"문자열을_숫자로_변환하기","title":"문자열을 숫자로 변환하기","isH3":true,"content":"<p>숫자를 나타내는 값이 문자열로 메모리에 있는 경우, 변환을 위한 메서드가 있습니다.</p>\n<ul>\n  <li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/parseInt\"><code>parseInt()</code></a></li>\n  <li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\"><code>parseFloat()</code></a></li>\n</ul>\n<p><code>parseInt</code>는 오직 정수만 반환하므로, 소수에서는 사용성이 떨어집니다.</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>참고:</strong> 게다가 <code>parseInt</code>를 잘 사용하기 위해서는 항상 진법(Radix) 매개변수를 포함해야 합니다. 진법 매개변수는 변환에 사용될 진법을 지정하는데 사용됩니다.</p>\n</div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'101'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 5</span>\n</code></pre></div>\n<p>문자열을 숫자로 변환하는 대안은 <code>+</code> (단항 더하기) 연산자입니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string\">'1.1'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'1.1'</span> <span class=\"token comment\">// '1.11.1'</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token string\">'1.1'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token string\">'1.1'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2.2</span>\n<span class=\"token comment\">// 참고: 괄호는 명확성을 위해 추가, 필요한 것은 아닙니다.</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"리터럴","title":"리터럴","isH3":false,"content":"<p>JavaScript에서 값을 나타내기 위해 리터럴을 사용합니다. 이는 말 그대로 스크립트에 부여한 고정 값으로, 변수가 아닙니다. 이 구획에서는 다음과 같은 형태의 리터럴을 설명합니다.</p>\n<ul>\n  <li><a href=\"#%EB%B0%B0%EC%97%B4_%EB%A6%AC%ED%84%B0%EB%9F%B4\">배열 리터럴</a></li>\n  <li><a href=\"#%EB%B6%88%EB%A6%AC%EC%96%B8_%EB%A6%AC%ED%84%B0%EB%9F%B4\">불리언 리터럴</a></li>\n  <li><a href=\"#%EB%B6%80%EB%8F%99_%EC%86%8C%EC%88%98%EC%A0%90_%EB%A6%AC%ED%84%B0%EB%9F%B4\">부동 소수점 리터럴</a></li>\n  <li><a href=\"#%EC%88%AB%EC%9E%90_%EB%A6%AC%ED%84%B0%EB%9F%B4\">숫자 리터럴</a></li>\n  <li><a href=\"#%EA%B0%9D%EC%B2%B4_%EB%A6%AC%ED%84%B0%EB%9F%B4\">객체 리터럴</a></li>\n  <li><a href=\"#%EC%A0%95%EA%B7%9C%EC%8B%9D_%EB%A6%AC%ED%84%B0%EB%9F%B4\">정규식 리터럴</a></li>\n  <li><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4_%EB%A6%AC%ED%84%B0%EB%9F%B4\">문자열 리터럴</a></li>\n</ul>"}},{"type":"prose","value":{"id":"배열_리터럴","title":"배열 리터럴","isH3":true,"content":"<p>배열 리터럴은 0개 이상의 식(expression) 목록입니다. 각 식은 배열 요소를 나타내고 대괄호(<code>[]</code>)로 묶입니다. 배열 리터럴을 사용하여 배열을 만들 때, 그 요소로 지정된 값으로 초기화되고, 그 <code>length</code>는 지정된 인수의 갯수로 설정됩니다.</p>\n<p>아래 예제는 요소가 3개로 <code>length</code>가 3인 <code>coffees</code> 배열을 만듭니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> coffees <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'French Roast'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Colombian'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Kona'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>참고:</strong> 배열 리터럴은 일종의 객체 초기자(initializer) 입니다. <a href=\"/ko/docs/Web/JavaScript/Guide/Working_with_Objects#%EA%B0%9D%EC%B2%B4_%EC%B4%88%EA%B8%B0%EC%9E%90_%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">객체 초기자 사용하기</a> 참고.</p>\n</div>\n<p>배열이 최상단 스크립트에서 리터럴을 사용하여 만들어진 경우, JavaScript는 배열 리터럴을 포함한 식을 평가할 때마다 배열로 해석합니다. 게다가, 함수에서 사용되는 리터럴은 함수가 호출될 때마다 생성됩니다.</p>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>참고:</strong> 배열 리터럴은 <code>Array</code> 객체입니다. <code>Array</code> 객체에 대한 자세한 내용은 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>와 <a href=\"/ko/docs/Web/JavaScript/Guide/Indexed_collections\">Indexed collections</a> 참고.</p>\n</div>\n<h4 id=\"배열_리터럴의_추가_쉼표\">배열 리터럴의 추가 쉼표</h4>\n<p>배열 리터럴에서 모든 요소를 지정할 필요는 없습니다. 만약 잇달아 두 개의 쉼표를 두면, 배열은 지정되지 않은 요소를 <code>undefined</code>로 채웁니다. 다음 예제는 <code>fish</code> 배열을 만듭니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> fish <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Lion'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'Angel'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>이 배열은 값이 있는 두 요소와 빈 요소 하나를 가집니다.</p>\n<ul>\n  <li><code>fish[0]</code>은 \"Lion\"</li>\n  <li><code>fish[1]</code>은 <code>undefined</code></li>\n  <li><code>fish[2]</code>는 \"Angel\"</li>\n</ul>\n<p>만약 요소 목록을 후행(trailing) 쉼표로 끝낸다면, 그 쉼표는 무시됩니다.</p>\n<p>다음 예제에서, 배열의 <code>length</code>는 3입니다. <code>myList[3]</code>은 없습니다. 목록의 다른 모든 쉼표는 새로운 요소를 나타냅니다.</p>\n<div class=\"notecard note\" id=\"sect6\">\n  <p><strong>참고:</strong> 후행 쉼표는 구버전 브라우저에서 오류를 유발할 수 있으므로 제거하는게 최선입니다.</p>\n</div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'home'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'school'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>아래 예제에서, 배열의 <code>length</code>는 4이며, <code>myList[0]</code>과 <code>myList[2]</code>는 값이 빠졌습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'home'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'school'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>아래 예제에서, 배열의 <code>length</code>는 4이며, <code>myList[1]</code>과 <code>myList[3]</code>은 값이 빠졌습니다. <strong>마지막 쉼표는 무시됩니다.</strong></p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'home'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'school'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>추가 쉼표의 동작을 이해하는 것은 JavaScript를 언어로서 이해하는데 중요합니다.</p>\n<p>하지만 코드를 작성할 때는 빠진 요소의 값을 명시적으로 <code>undefined</code>로 선언하는 것이 코드의 명확성과 유지보수성을 높입니다.</p>"}},{"type":"prose","value":{"id":"불리언_리터럴","title":"불리언 리터럴","isH3":true,"content":"<p>불리언 형은 <code>true</code>와 <code>false</code>의 리터럴 값을 가집니다.</p>\n<div class=\"notecard note\" id=\"sect7\">\n  <p><strong>참고:</strong> 원시 불리언 값 <code>true</code> 및 <code>false</code>와 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> 객체의 true 및 false 값을 혼동하지 마세요.</p>\n  <p>불리언 객체는 원시 불린 데이터 형을 감싸는 래퍼(wrapper)입니다. 더 많은 정보는 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a>을 참고하세요.</p>\n</div>"}},{"type":"prose","value":{"id":"숫자_리터럴","title":"숫자 리터럴","isH3":true,"content":"<p>JavaScript 숫자 리터럴은 다른 진법의 정수 리터럴과 10진수의 부동 소수점 리터럴이 포함됩니다.</p>\n<p>언어 명세서에 따르면 숫자 리터럴에 부호가 없어야 합니다. 그럼에도 불구하고, <code>-123.4</code> 와 같은 코드 괜찮습니다. 숫자 리터럴 <code>123.4</code> 에 단항 연산자 <code>-</code> 가 붙은 것으로 해석됩니다.</p>\n<h4 id=\"정수_리터럴\">정수 리터럴</h4>\n<p>정수와 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> 리터럴은 10진수, 16진수, 8진수 및 2진수로 표현될 수 있습니다.</p>\n<ul>\n  <li>10진수 정수 리터럴은 <code>0</code>으로 시작(leading zero)하지 않는 숫자열로 이루어집니다.</li>\n  <li>정수 리터럴에서 <code>0</code>으로 시작하거나 <code>0o</code>(혹은 <code>0O</code>)으로 시작하는 숫자열은 8진수임을 나타냅니다. 8진수 정수 리터럴은 오직 숫자 <code>0</code>-<code>7</code>만 포함할 수 있습니다.</li>\n  <li><code>0x</code>(나 <code>0X</code>)로 시작하는 숫자열은 16진수 정수 리터럴 임을 나타냅니다. 16진수 정수는 숫자 (<code>0</code>-<code>9</code>) 및 문자 <code>a</code>-<code>f</code>, <code>A</code>-<code>F</code>를 포함할 수 있습니다. (문자의 대소문자는 그 값을 변경하지 않습니다. 그러므로 <code>0xa</code> = <code>0xA</code> = <code>10</code> 그리고 <code>0xf</code> = <code>0xF</code> = <code>15</code> 입니다.)</li>\n  <li><code>0b</code> (나 <code>0B</code>)로 시작하는 숫자열은 2진수 정수 리터럴 임을 나타냅니다. 2진수 정수 리터럴은 오직 숫자 <code>0</code>과 <code>1</code>만 포함할 수 있습니다.</li>\n  <li><code>n</code>으로 끝나는 숫자열은 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> 리터럴 임을 나타냅니다. 정수 리터럴은 위의 어떤 진수든 사용할 수 있습니다. <code>0123n</code>과 같은 <code>0</code>으로 시작하는 8진수 구문은 허용되지 않으나, <code>0o123n</code>은 허용됩니다.</li>\n</ul>\n<p>다음은 정수 리터럴 예제입니다.</p>\n<pre class=\"notranslate\">0, 117, 123456789123456789n             (10진수)\n015, 0001, 0o777777777777n              (8진수)\n0x1123, 0x00111, 0x123456789ABCDEFn     (16진수)\n0b11, 0b0011, 0b11101001010101010101n   (2진수)\n</pre>\n<p>더 많은 정보는 <a href=\"/ko/docs/Web/JavaScript/Reference/Lexical_grammar#%EC%88%AB%EC%9E%90_%EB%A6%AC%ED%84%B0%EB%9F%B4\">어휘 문법의 숫자 리터럴</a>를 참고하세요.</p>\n<h4 id=\"부동_소수점_리터럴\">부동 소수점 리터럴</h4>\n<p>부동 소수점 리터럴은 아래와 같은 부분으로 이루어집니다.</p>\n<ul>\n  <li>부호없는 10진 정수,</li>\n  <li>소수점 (\"<code>.</code>\"),</li>\n  <li>소수 (또 다른 10진수),</li>\n  <li>지수.</li>\n</ul>\n<p>지수부는 \"<code>e</code>\"나 \"<code>E</code>\" 다음에 오며 부호(\"<code>+</code>\"나 \"<code>-</code>\")가 달릴 수 있는 정수입니다. 부동 소수점 리터럴은 적어도 숫자 하나와 소수점 혹은 \"<code>e</code>\"(나 \"<code>E</code>\")가 있어야 합니다.</p>\n<p>더 간결하게 설명하면, 구문은 다음과 같습니다.</p>\n<pre class=\"notranslate\">[digits].[digits][(E|e)[(+|-)]digits]\n</pre>\n<p>예를 들면,</p>\n<pre class=\"notranslate\">3.1415926\n.123456789\n3.1E+12\n.1e-23\n</pre>"}},{"type":"prose","value":{"id":"객체_리터럴","title":"객체 리터럴","isH3":true,"content":"<p>객체 리터럴은 중괄호(<code>{}</code>)로 묶인 0개 이상인 객체의 속성명과 관련 값 쌍 목록입니다.</p>\n<blockquote>\n  <p><strong>주의:</strong> 문(statement)의 시작에 객체 리터럴을 사용해서는 안됩니다. 이는 <code>{</code>가 블록의 시작으로 해석되기 때문에 오류를 유발하거나 의도한 대로 동작하지 않습니다.</p>\n</blockquote>\n<p>아래는 객체 리터럴의 예제입니다. <code>car</code> 객체의 첫째 요소는 <code>myCar</code> 속성을 정의하고 문자열 <code>\"Saturn\"</code>을 할당합니다. 반면 둘째 요소인 <code>getCar</code> 속성은 함수 <code>(carTypes(\"Honda\"))</code>을 호출한 결과가 즉시 할당됩니다. 셋째 요소 <code>special</code> 속성은 기존 변수 (<code>sales</code>)를 사용합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> sales <span class=\"token operator\">=</span> <span class=\"token string\">'Toyota'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">carTypes</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'Honda'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Sorry, we don't sell \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> car <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">myCar</span><span class=\"token operator\">:</span> <span class=\"token string\">'Saturn'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">getCar</span><span class=\"token operator\">:</span> <span class=\"token function\">carTypes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Honda'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">special</span><span class=\"token operator\">:</span> sales <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span>myCar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Saturn</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span>getCar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Honda</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span>special<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Toyota</span>\n</code></pre></div>\n<p>게다가, 속성명으로 숫자나 문자열 리터럴을 사용하거나 또다른 객체 리터럴 내부에 객체를 중첩할 수도 있습니다. 아래 예제는 이 옵션을 사용합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> car <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">manyCars</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token string\">'Saab'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token string\">'Jeep'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span> <span class=\"token string\">'Mazda'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span>manyCars<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Jeep</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Mazda</span>\n</code></pre></div>\n<p>객체 속성명은 빈 문자열 포함 어떤 문자열도 될 수 있습니다. 속성명이 유효한 JavaScript <a href=\"/ko/docs/Glossary/Identifier\">식별자</a>나 숫자가 아닌 경우, 따옴표로 묶여야 합니다.</p>\n<p>또한 유효한 식별자가 아닌 속성명은 점(<code>.</code>) 속성으로 접근할 수 없습니다. 대신 배열 같은 표기법(\"<code>[]</code>\")으로 접근하고 값을 설정할 수 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> unusualPropertyNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">''</span><span class=\"token operator\">:</span> <span class=\"token string\">'An empty string'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">'!'</span><span class=\"token operator\">:</span> <span class=\"token string\">'Bang!'</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>unusualPropertyNames<span class=\"token punctuation\">.</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// SyntaxError: Unexpected string</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>unusualPropertyNames<span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// An empty string</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>unusualPropertyNames<span class=\"token punctuation\">.</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// SyntaxError: Unexpected token !</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>unusualPropertyNames<span class=\"token punctuation\">[</span><span class=\"token string\">'!'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Bang!</span>\n</code></pre></div>\n<h4 id=\"향상된_객체_리터럴\">향상된 객체 리터럴</h4>\n<p>ES2015에서, 객체 리터럴은 구성에서 프로토타입 설정, <code>foo: foo</code> 할당을 위한 단축 표기, 메서드 정의, <code>super</code> 클래스 호출 및 식으로 동적인 속성명 계산을 지원하기 위해 확장됐습니다.</p>\n<p>그에 따라 객체 리터럴 및 클래스 선언이 함께 더 가까워지고, 객체 기반 설계는 같은 일부 편의기능으로 득을 볼 수 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// __proto__</span>\n    <span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> theProtoObj<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// ‘handler: handler’의 단축 표기</span>\n    handler<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// Methods</span>\n    <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">// Super calls</span>\n     <span class=\"token keyword\">return</span> <span class=\"token string\">'d '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// Computed (dynamic) property names</span>\n    <span class=\"token punctuation\">[</span> <span class=\"token string\">'prop_'</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token number\">42</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"정규식_리터럴","title":"정규식 리터럴","isH3":true,"content":"<p>정규식 리터럴은 (<a href=\"/ko/docs/Web/JavaScript/Guide/Regular_Expressions\">정규식 상세</a>) 슬래시 사이에 감싸인 패턴입니다. 다음은 정규식 리터럴 예제입니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">ab+c</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"문자열_리터럴","title":"문자열 리터럴","isH3":true,"content":"<p>문자열 리터럴은 큰 따옴표(<code>\"</code>) 혹은 작은 따옴표(<code>'</code>)로 묶인 0개 이상의 문자입니다. 문자열은 같은 형 따옴표 (즉 큰 따옴표 쌍이나 작은 따옴표 쌍) 로 구분되어야 합니다.</p>\n<p>아래는 문자열 리터럴의 예제입니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string\">'foo'</span>\n<span class=\"token string\">\"bar\"</span>\n<span class=\"token string\">'1234'</span>\n<span class=\"token string\">'one line \\n another line'</span>\n<span class=\"token string\">\"John's cat\"</span>\n</code></pre></div>\n<p>꼭 <code>String</code> 객체를 사용할 필요가 없는 경우 문자열 리터럴을 사용해야 합니다. <code>String</code> 객체에 대해 자세한 사항은 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a>을 참고하세요.</p>\n<p>문자열 리터럴 값은 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> 객체의 모든 메서드를 호출할 수 있습니다. JavaScript는 자동으로 문자열 리터럴을 임시 문자열 객체로 변환, 메서드를 호출하고 나서 임시 문자열 객체를 폐기합니다. 또한 문자열 리터럴에서도 <code>String.length</code> 속성을 사용할 수 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 공백을 포함한 문자열 내 심볼 갯수가 출력됩니다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"John's cat\"</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token comment\">// 여기서는, 10.</span>\n</code></pre></div>\n<p><a href=\"/ko/docs/Web/JavaScript/Reference/Template_literals\">템플릿 리터럴</a>도 사용할 수 있습니다. 템플릿 리터럴은 큰 따옴표나 작은 따옴표 대신 백틱 (<code>`</code>) (<a href=\"https://ko.wikipedia.org/wiki/%EC%96%B5%EC%9D%8C_%EB%B6%80%ED%98%B8\" class=\"external\" rel=\" noopener\">억음 부호</a>) 으로 문자를 감쌉니다.</p>\n<p>템플릿 리터럴은 문자열 구성을 위한 달콤한 구문을 제공합니다. (이는 Perl, Python 등에 있는 문자열 삽입(interpolation) 기능과 비슷합니다.)</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 기본적인 문자열 리터럴 생성</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">In JavaScript '\\n' is a line-feed.</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token comment\">// 여러 줄 문자열</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">In JavaScript, template strings can run\n over multiple lines, but double and single\n quoted strings cannot.</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token comment\">// 문자열 삽입</span>\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> time <span class=\"token operator\">=</span> <span class=\"token string\">'today'</span><span class=\"token punctuation\">;</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, how are you </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>time<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">?</span><span class=\"token template-punctuation string\">`</span></span>\n</code></pre></div>\n<p><a href=\"/ko/docs/Web/JavaScript/Reference/Template_literals#tagged_templates\">Tagged templates</a>은 구문 분석을 위한 \"태그\" 함수에 대한 호출과 함께 템플릿 리터럴을 지정하기 위한 간결한 구문입니다. 템플릿 태그 함수의 이름은 아래 예제에서 <code>myTag</code> 가 템플릿 태그 함수 이름인 것과 같이 템플릿 리터럴 앞에 옵니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">myTag</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>str<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>str<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>age<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>str<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Mika'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nmyTag<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Participant \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> name <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> age <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> years old.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Participant \"Mika\" is 28 years old.</span>\n</code></pre></div>\n<h4 id=\"문자열에서_특수_문자_사용\">문자열에서 특수 문자 사용</h4>\n<p>보통 문자에 더해서, 문자열에 아래 예제와 같이 특수 문자도 포함할 수 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string\">'one line \\n another line'</span>\n</code></pre></div>\n<p>다음 표는 JavaScript 문자열에 사용할 수 있는 특수 문자 목록입니다.</p>\n<table>\n  <caption>표: JavaScript 특수 문자</caption>\n  <thead>\n    <tr>\n      <th scope=\"col\">문자</th>\n      <th scope=\"col\">뜻</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>\\0</code></td>\n      <td>Null Byte</td>\n    </tr>\n    <tr>\n      <td><code>\\b</code></td>\n      <td>Backspace</td>\n    </tr>\n    <tr>\n      <td><code>\\f</code></td>\n      <td>Form feed</td>\n    </tr>\n    <tr>\n      <td><code>\\n</code></td>\n      <td>New line</td>\n    </tr>\n    <tr>\n      <td><code>\\r</code></td>\n      <td>Carriage return</td>\n    </tr>\n    <tr>\n      <td><code>\\t</code></td>\n      <td>Tab</td>\n    </tr>\n    <tr>\n      <td><code>\\v</code></td>\n      <td>Vertical tab</td>\n    </tr>\n    <tr>\n      <td><code>\\'</code></td>\n      <td>Apostrophe 혹은 작은 따옴표</td>\n    </tr>\n    <tr>\n      <td><code>\\\"</code></td>\n      <td>큰 따옴표</td>\n    </tr>\n    <tr>\n      <td><code>\\\\</code></td>\n      <td>백슬래시</td>\n    </tr>\n    <tr>\n      <td><code>\\<em>XXX</em></code></td>\n      <td>Latin-1 인코딩 문자는 <code>0</code> - <code>377</code> 사이 8진수 3자리 <em>XXX</em>까지 지정될 수 있습니다.<br>예를 들어, <code>\\251</code>은 copyright 심볼을 표현하는 8진수 시퀀스입니다.</td>\n    </tr>\n    <tr>\n      <td><code>\\x<em>XX</em></code></td>\n      <td>Latin-1 인코딩 문자는 <code>00</code> - <code>FF</code> 사이의 16진수 2자리 <em>XX</em>로 지정될 수 있습니다.<br>예를 들어, <code>\\xA9</code>는 copyright 심볼을 표현하는 16진수 시퀀스입니다.</td>\n    </tr>\n    <tr>\n      <td><code>\\u<em>XXXX</em></code></td>\n      <td>유니코드 문자는 16진수 4자리 <em>XXXX</em>로 지정될 수 있습니다.<br>예를 들어, <code>\\u00A9</code>는 copyright 심볼을 표현하는 유니코드 시퀀스입니다. <a href=\"/ko/docs/Web/JavaScript/Reference/Lexical_grammar#string_literals\">Unicode escape sequences</a>를 참고하세요.</td>\n    </tr>\n    <tr>\n      <td><code>\\u<em>{XXXXX}</em></code></td>\n      <td>유니코드 코드 포인트 이스케이프.<br>예를 들어, <code>\\u{2F804}</code>는 간단한 유니코드 이스케이프 <code>\\uD87E\\uDC04</code>와 같습니다.</td>\n    </tr>\n  </tbody>\n</table>\n<h4 id=\"문자_이스케이프\">문자 이스케이프</h4>\n<p>표에 없는 문자의 경우 전행 백슬래시는 무시되지만, 이 용법은 더 이상 사용되지 않으며, 사용을 피해야 합니다.</p>\n<p>전행 백슬래시와 함께 문자열 안에 따옴표를 사용할 수 있습니다. 이것을 따옴표 이스케이프라고 합니다. 예를 들어,</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> quote <span class=\"token operator\">=</span> <span class=\"token string\">\"He read \\\"The Cremation of Sam McGee\\\" by R.W. Service.\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>quote<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>이 코드의 결과는,</p>\n<pre class=\"notranslate\">He read \"The Cremation of Sam McGee\" by R.W. Service.\n</pre>\n<p>백슬래시를 문자열 내에 포함시키기 위해서는, 백슬래시 문자를 이스케이프 해야 합니다. 예를 들어, 파일 경로 <code>c:\\temp</code>를 문자열에 할당하기 위해서는 아래와 같이 사용합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> home <span class=\"token operator\">=</span> <span class=\"token string\">'c:\\\\temp'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>또한 줄바꿈 역시 전행 백슬래시로 이스케이프할 수 있습니다. 백슬래시와 줄바꿈 모두 문자열 값에서는 사라집니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'this string \\\nis broken \\\nacross multiple \\\nlines.'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// this string is broken across multiple lines.</span>\n</code></pre></div>\n<p>JavaScript에는 \"heredoc\" 구문은 없지만, 줄바꿈 이스케이프와 각 줄 끝 이스케이프된 줄바꿈을 추가하여 흉내낼 수 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> poem <span class=\"token operator\">=</span>\n<span class=\"token string\">'Roses are red,\\n\\\nViolets are blue.\\n\\\nSugar is sweet,\\n\\\nand so is foo.'</span>\n</code></pre></div>\n<p>ECMAScript 2015에서는 <a href=\"/ko/docs/Web/JavaScript/Reference/Template_literals\"><strong>템플릿 리터럴</strong></a>이라는 새로운 리터럴이 소개되었습니다. 이것은 다중 문자열을 포함한 많은 새로운 기능을 가지고 있습니다!</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> poem <span class=\"token operator\">=</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Roses are red,\nViolets are blue.\nSugar is sweet,\nand so is foo.</span><span class=\"token template-punctuation string\">`</span></span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"추가_정보","title":"추가 정보","isH3":false,"content":"<p>이 장은 선언과 형에 대한 기본 구문에 초점을 맞춥니다. JavaScript 언어 구조에 대해 더 많이 배우려면, 다음 장을 참고하세요.</p>\n<ul>\n  <li><a href=\"/ko/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">흐름 제어와 에러 처리</a></li>\n  <li><a href=\"/ko/docs/Web/JavaScript/Guide/Loops_and_iteration\">루프와 반복</a></li>\n  <li><a href=\"/ko/docs/Web/JavaScript/Guide/Functions\">함수</a></li>\n  <li><a href=\"/ko/docs/Web/JavaScript/Guide/Expressions_and_Operators\">표현식과 연산자</a></li>\n</ul>\n<p>다음 장에서는, 흐름 제어 구조와 에러 처리를 살펴 볼 것입니다.</p><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ko/docs/Web/JavaScript/Guide/Introduction\">« 이전</a></li>\n    <li><a class=\"button minimal\" href=\"/ko/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">다음  »</a></li>\n</ul>"}}],"toc":[{"text":"기본","id":"기본"},{"text":"주석","id":"주석"},{"text":"선언","id":"선언"},{"text":"데이터 구조 및 형","id":"데이터_구조_및_형"},{"text":"리터럴","id":"리터럴"},{"text":"추가 정보","id":"추가_정보"}],"summary":"이 장은 JavaScript의 기본 문법과 변수 선언, 자료형 및 리터럴을 다룹니다.","popularity":0.0011,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Grammar and types","locale":"en-US","native":"English (US)"},{"title":"Gramática y Tipos","locale":"es","native":"Español"},{"title":"Types et grammaire","locale":"fr","native":"Français"},{"title":"文法とデータ型","locale":"ja","native":"日本語"},{"title":"Sintaxe e tipos","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Грамматика и типы","locale":"ru","native":"Русский"},{"title":"语法和数据类型","locale":"zh-CN","native":"中文 (简体)"},{"title":"語法與型別","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ko/web/javascript/guide/grammar_and_types","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/web/javascript/guide/grammar_and_types/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ko/docs/Web","title":"개발자를 위한 웹 기술"},{"uri":"/ko/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/ko/docs/Web/JavaScript/Guide","title":"JavaScript 안내서"},{"uri":"/ko/docs/Web/JavaScript/Guide/Grammar_and_types","title":"문법과 자료형"}],"pageTitle":"문법과 자료형 - JavaScript | MDN","noIndexing":false}}