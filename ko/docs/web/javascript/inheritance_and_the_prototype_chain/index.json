{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"상속과 프로토타입","mdn_url":"/ko/docs/Web/JavaScript/Inheritance_and_the_prototype_chain","locale":"ko","native":"한국어","sidebarHTML":"\n <ol>\n  <li><a href=\"/ko/docs/Web/JavaScript\"><strong><em>JavaScript</em></strong></a></li>\n  <li><a href=\"/ko/docs/Web/JavaScript/Tutorials\"><strong>Tutorials:</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Complete beginners</summary>\n      <ol>\n        <li><a href=\"/ko/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">JavaScript basics</a></li>\n        <li><a href=\"/ko/docs/Learn/JavaScript/First_steps\">JavaScript first steps</a></li>\n        <li><a href=\"/ko/docs/Learn/JavaScript/Building_blocks\">JavaScript building blocks</a></li>\n        <li><a href=\"/ko/docs/Learn/JavaScript/Objects\">Introducing JavaScript objects</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>JavaScript Guide</summary>\n      <ol>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Introduction\">Introduction</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Grammar_and_Types\">Grammar and types</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">Control flow and error handling</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Loops_and_iteration\">Loops and iteration</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Functions\">Functions</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Expressions_and_Operators\">Expressions and operators</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Numbers_and_dates\">Numbers and dates</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Text_formatting\">Text formatting</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Regular_Expressions\">Regular expressions</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Indexed_collections\">Indexed collections</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Keyed_collections\">Keyed collections</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Working_with_Objects\">Working with objects</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Details_of_the_Object_Model\">Details of the object model</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Using_promises\">Using promises</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Iterators_and_generators\">Iterators and generators</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Meta_programming\">Meta programming</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Modules\">JavaScript modules</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Intermediate</summary>\n      <ol>\n        <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks\">Client-side JavaScript frameworks</a></li>\n        <li><a href=\"/ko/docs/Learn/JavaScript/Client-side_web_APIs\">Client-side web APIs</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">A re-introduction to JavaScript</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Data_structures\">JavaScript data structures</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Equality_comparisons_and_sameness\">Equality comparisons and sameness</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Closures\">Closures</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Advanced</summary>\n      <ol>\n        <li><a href=\"/ko/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">Inheritance and the prototype chain</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Typed_arrays\">JavaScript typed arrays</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Memory_Management\">Memory Management</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/EventLoop\">Concurrency model and Event Loop</a></li>\n      </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/ko/docs/Web/JavaScript/Reference\">References:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n       <summary>Built-in objects</summary>\n        <ol><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\">AggregateError</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\">AsyncFunction</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\">AsyncGenerator</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\">AsyncGeneratorFunction</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Atomics\">Atomics</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array\">BigInt64Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array\">BigUint64Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/DataView\">DataView</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\">decodeURI()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Error\">Error</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/escape\">escape()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/EvalError\">EvalError</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\">FinalizationRegistry</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\">Float32Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\">Float64Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Generator\">Generator</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">globalThis</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Infinity\">Infinity</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\">Int16Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\">Int32Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\">Int8Array</a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/InternalError\">InternalError</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/isFinite\">isFinite()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/isNaN\">isNaN()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/NaN\">NaN</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">parseFloat()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">parseInt()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/RangeError\">RangeError</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\">ReferenceError</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">Reflect</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">RegExp</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/String\">String</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\">SyntaxError</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">TypedArray</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\">Uint16Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\">Uint32Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">Uint8Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\">Uint8ClampedArray</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/undefined\">undefined</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/unescape\">unescape()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/URIError\">URIError</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/WeakRef\">WeakRef</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\">WeakSet</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Expressions &amp; operators</summary>\n      <ol><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Addition_assignment\">Addition assignment (+=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Addition\">Addition (+)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Assignment\">Assignment (=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/async_function*\">async function* expression</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/await\">await</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment\">Bitwise AND assignment (&amp;=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">Bitwise AND (&amp;)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">Bitwise NOT (~)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment\">Bitwise OR assignment (|=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">Bitwise OR (|)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment\">Bitwise XOR assignment (^=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">Bitwise XOR (^)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/class\">class expression</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Comma_Operator\">Comma operator (,)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">Conditional (ternary) operator</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Decrement\">Decrement (--)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/delete\">delete operator</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">Destructuring assignment</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Division_assignment\">Division assignment (/=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Division\">Division (/)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Equality\">Equality (==)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment\">Exponentiation assignment (**=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Exponentiation\">Exponentiation (**)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/function\">Function expression</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal\">Greater than or equal (&gt;=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Greater_than\">Greater than (&gt;)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Grouping\">Grouping operator ( )</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/import.meta\">import.meta</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/import\">import</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/in\">in operator</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Increment\">Increment (++)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Inequality\">Inequality (!=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/instanceof\">instanceof</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment\">Left shift assignment (&lt;&lt;=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Left_shift\">Left shift (&lt;&lt;)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal\">Less than or equal (&lt;=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Less_than\">Less than (&lt;)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment\">Logical AND assignment (&amp;&amp;=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Logical_AND\">Logical AND (&amp;&amp;)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">Logical NOT (!)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment\">Logical nullish assignment (??=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment\">Logical OR assignment (||=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Logical OR (||)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment\">Multiplication assignment (*=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Multiplication\">Multiplication (*)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/new.target\">new.target</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/new\">new operator</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/null\">null</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\">Nullish coalescing operator (??)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Object_initializer\">Object initializer</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">Operator precedence</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">Optional chaining (?.)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Property_Accessors\">Property accessors</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Remainder_assignment\">Remainder assignment (%=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Remainder\">Remainder (%)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment\">Right shift assignment (&gt;&gt;=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Right_shift\">Right shift (&gt;&gt;)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Spread syntax (...)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Strict_equality\">Strict equality (===)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">Strict inequality (!==)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment\">Subtraction assignment (-=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Subtraction\">Subtraction (-)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/super\">super</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/this\">this</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/typeof\">typeof</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Unary_negation\">Unary negation (-)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Unary_plus\">Unary plus (+)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment\">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">Unsigned right shift (&gt;&gt;&gt;)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/void\">void operator</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/yield*\">yield*</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/yield\">yield</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Statements &amp; declarations</summary>\n      <ol><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/async_function*\">async function*</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/block\">block</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/break\">break</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/class\">class</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/const\">const</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/continue\">continue</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/debugger\">debugger</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/do...while\">do...while</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/Empty\">empty</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/export\">export</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/for-await...of\">for await...of</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/for\">for</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/function*\">function*</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/function\">function declaration</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/if...else\">if...else</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/import\">import</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/label\">label</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/let\">let</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/return\">return</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/switch\">switch</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/throw\">throw</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/try...catch\">try...catch</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/var\">var</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/while\">while</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/with\">with</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Functions</summary>\n      <ol><li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow function expressions</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/get\">getter</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/set\">setter</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Classes</summary>\n      <ol><li><a href=\"/ko/docs/Web/JavaScript/Reference/Classes/Class_static_initialization_blocks\">Class static initialization blocks</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Classes/constructor\">constructor</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Classes/extends\">extends</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">Private class features</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Classes/Public_class_fields\">Public class fields</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Classes/static\">static</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Errors</summary>\n      <ol><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Already_has_pragma\">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Array_sort_argument\">TypeError: invalid Array.prototype.sort argument</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Bad_octal\">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Bad_radix\">RangeError: radix must be an integer</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag\">SyntaxError: invalid regular expression flag \"x\"</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield\">SyntaxError: return not in function</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/BigInt_division_by_zero\">RangeError: BigInt division by zero</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/BigInt_negative_exponent\">RangeError: BigInt negative exponent</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type\">TypeError: X.prototype.y called on incompatible type</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init\">ReferenceError: can't access lexical declaration 'X' before initialization</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cant_assign_to_property\">TypeError: can't assign to property \"x\" on \"y\": not an object</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cant_be_converted_to_BigInt_because_it_isnt_an_integer\">RangeError: x can't be converted to BigInt because it isn't an integer</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cant_convert_BigInt_to_number\">TypeError: can't convert BigInt to number</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cant_convert_x_to_BigInt\">TypeError: can't convert x to BigInt</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible\">TypeError: can't define property \"x\": \"obj\" is not extensible</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cant_delete\">TypeError: property \"x\" is non-configurable and can't be deleted</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property\">TypeError: can't redefine non-configurable property \"x\"</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cant_use_nullish_coalescing_unparenthesized\">SyntaxError: cannot use `??` unparenthesized within `||` and `&amp;&amp;` expressions</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value\">TypeError: cyclic object value</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Dead_object\">TypeError: can't access dead object</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode\">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage\">ReferenceError: deprecated caller or arguments usage</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Deprecated_expression_closures\">Warning: expression closures are deprecated</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Deprecated_octal\">SyntaxError: \"0\"-prefixed octal literals and octal escape seq. are deprecated</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma\">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Deprecated_String_generics\">Warning: String.x is deprecated; use String.prototype.x instead</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Deprecated_toLocaleFormat\">Warning: Date.prototype.toLocaleFormat is deprecated</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Equal_as_assign\">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Getter_only\">TypeError: setting getter-only property \"x\"</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Hash_outside_class\">SyntaxError: Unexpected '#' used outside of class body</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Identifier_after_number\">SyntaxError: identifier starts immediately after numeric literal</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Illegal_character\">SyntaxError: illegal character</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/in_operator_no_object\">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\">RangeError: invalid array length</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side\">SyntaxError: invalid assignment left-hand side</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax\">SyntaxError: invalid BigInt syntax</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment\">TypeError: invalid assignment to const \"x\"</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Invalid_date\">RangeError: invalid date</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer\">SyntaxError: for-in loop head declarations may not have initializers</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer\">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand\">TypeError: invalid 'instanceof' operand 'x'</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/is_not_iterable\">TypeError: 'x' is not iterable</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse\">SyntaxError: JSON.parse: bad parsing</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Malformed_formal_parameter\">SyntaxError: Malformed formal parameter</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Malformed_URI\">URIError: malformed URI sequence</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list\">SyntaxError: missing ] after element list</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id\">SyntaxError: missing : after property id</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body\">SyntaxError: missing } after function body</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list\">SyntaxError: missing } after property list</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter\">SyntaxError: missing formal parameter</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const\">SyntaxError: missing = in const declaration</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator\">SyntaxError: missing name after . operator</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\">SyntaxError: missing ) after argument list</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition\">SyntaxError: missing ) after condition</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_semicolon_before_statement\">SyntaxError: missing ; before statement</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/More_arguments_needed\">TypeError: More arguments needed</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count\">RangeError: repeat count must be non-negative</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/No_non-null_object\">TypeError: \"x\" is not a non-null object</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/No_properties\">TypeError: \"x\" has no properties</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/No_variable_name\">SyntaxError: missing variable name</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element\">TypeError: can't delete non-configurable array element</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint\">RangeError: argument is not a valid code point</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Not_a_constructor\">TypeError: \"x\" is not a constructor</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Not_a_function\">TypeError: \"x\" is not a function</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Not_defined\">ReferenceError: \"x\" is not defined</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Precision_range\">RangeError: precision is out of range</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Property_access_denied\">Error: Permission denied to access property \"x\"</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Read-only\">TypeError: \"x\" is read-only</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter\">SyntaxError: redeclaration of formal parameter \"x\"</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value\">TypeError: Reduce of empty array with no initial value</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Reserved_identifier\">SyntaxError: \"x\" is a reserved identifier</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large\">RangeError: repeat count must be less than infinity</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Stmt_after_return\">Warning: unreachable code after return statement</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params\">SyntaxError: \"use strict\" not allowed in function with non-simple parameters</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Too_much_recursion\">InternalError: too much recursion</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Undeclared_var\">ReferenceError: assignment to undeclared variable \"x\"</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Undefined_prop\">ReferenceError: reference to undefined property \"x\"</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Unexpected_token\">SyntaxError: Unexpected token</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Unexpected_type\">TypeError: \"x\" is (not) \"y\"</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement\">SyntaxError: function statement requires a name</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Unparenthesized_unary_expr_lhs_exponentiation\">SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Unterminated_string_literal\">SyntaxError: unterminated string literal</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Misc</summary>\n      <ol>\n        <li><a href=\"/ko/docs/Web/JavaScript/JavaScript_technologies_overview\">JavaScript technologies overview</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Reference/Lexical_grammar\">Lexical grammar</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Data_structures\">JavaScript data structures</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">Enumerability and ownership of properties</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Reference/Iteration_protocols\">Iteration protocols</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\">Transitioning to strict mode</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Reference/Template_literals\">Template literals</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\">Deprecated features</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Java 나 C++ 같이 클래스 기반의 언어를 사용하던 프로그래머는 자바스크립트가 동적인 언어라는 점과 클래스가 없다는 것에서 혼란스러워 한다. (ES2015부터 class 키워드를 지원하기 시작했으나, 문법적인 양념일 뿐이며 자바스크립트는 여전히 프로토타입 기반의 언어다.)</p>\n<p>상속 관점에서 자바스크립트의 유일한 생성자는 객체뿐이다. 각각의 객체는 [[Prototype]]이라는 은닉(private) 속성을 가지는데 자신의 <strong>프로토타입</strong>이 되는 다른 객체를 가리킨다. 그 객체의 프로토타입 또한 프로토타입을 가지고 있고 이것이 반복되다, 결국 <code>null</code>을 프로토타입으로 가지는 오브젝트에서 끝난다. null은 더 이상의 프로토타입이 없다고 정의되며, <strong>프로토타입 체인</strong>의 종점 역할을 한다.</p>\n<p>종종 이러한 점이 자바스크립트의 약점이라고 지적되지만, 프로토타입적 상속 모델은 사실 고전적인 방법보다 좀 더 강력한 방법이다. 그 말은, 예를 들자면, 프로토타입적 모델에서 고전적인 방식을 구현하는 건 꽤나 사소한 일이지만, 그 반대는 훨씬 더 어려운 일이기 때문이다.</p>"}},{"type":"prose","value":{"id":"프로토타입_체인을_이용한_상속","title":"프로토타입 체인을 이용한 상속","isH3":false,"content":""}},{"type":"prose","value":{"id":"속성_상속","title":"속성 상속","isH3":true,"content":"<p>자바스크립트 객체는 속성을 저장하는 동적인 \"가방\"과 (<strong>자기만의 속성</strong>이라고 부른다) 프로토타입 객체에 대한 링크를 가진다. 객체의 어떤 속성에 접근하려할 때 그 객체 자체 속성 뿐만 아니라 객체의 프로토타입, 그 프로토타입의 프로토타입 등 프로토타입 체인의 종단에 이를 때까지 그 속성을 탐색한다.</p>\n<blockquote>\n  <p><strong>Note:</strong> ECMAScript 표준은 <code>someObject.[[Prototype]]</code>을 객체 <code>someObject</code>의 프로토타입을 지시하도록 명시하였다. ECMAScript 2015부터 <code>[[Prototype]]</code>에 조상 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\"><code>Object.getPrototypeOf()</code></a>과 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a>을 이용하여 접근하기 때문이다. 이것은 자바스크립트의 표준은 아니나 많은 브라우저에 구현되어 사실상의 표준이 된 속성 <code>__proto__</code>과 동일하다.</p>\n</blockquote>\n<p>아래 코드에는 어떤 속성에 접근 하려할 때 일어나는 상황이다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// o라는 객체가 있고, 속성 'a' 와 'b'를 갖고 있다고 하자.</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {a: 1, b: 2}</span>\n\n<span class=\"token comment\">// f 함수의 prototype 속성 값들을 추가 하자.</span>\nf<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nf<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// f.prototype = {b: 3, c: 4}; 라고 하지 마라, 해당 코드는 prototype chain 을 망가뜨린다.</span>\n<span class=\"token comment\">// o.[[Prototype]]은 속성 'b'와 'c'를 가지고 있다.</span>\n<span class=\"token comment\">// o.[[Prototype]].[[Prototype]] 은 Object.prototype 이다.</span>\n<span class=\"token comment\">// 마지막으로 o.[[Prototype]].[[Prototype]].[[Prototype]]은 null이다.</span>\n<span class=\"token comment\">// null은 프로토타입의 종단을 말하며 정의에 의해서 추가 [[Prototype]]은 없다.</span>\n<span class=\"token comment\">// {a: 1, b: 2} ---&gt; {b: 3, c: 4} ---&gt; Object.prototype ---&gt; null</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// o는 'a'라는 속성을 가지는가? 그렇다. 속성의 값은 1이다.</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n<span class=\"token comment\">// o는 'b'라는 속성을 가지는가? 그렇다. 속성의 값은 2이다.</span>\n<span class=\"token comment\">// 프로토타입 역시 'b'라는 속성을 가지지만 이 값은 쓰이지 않는다. 이것을 \"속성의 가려짐(property shadowing)\" 이라고 부른다.</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\n<span class=\"token comment\">// o는 'c'라는 속성을 가지는가? 아니다. 프로토타입을 확인해보자.</span>\n<span class=\"token comment\">// o.[[Prototype]]은 'c'라는 속성을 가지는가? 가지고 값은 4이다.</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token comment\">// o는 'd'라는 속성을 가지는가? 아니다. 프로토타입을 확인해보자.</span>\n<span class=\"token comment\">// o.[[Prototype]]은 'd'라는 속성을 가지는가? 아니다. 다시 프로토타입을 확인해보자.</span>\n<span class=\"token comment\">// o.[[Prototype]].[[Prototype]]은 null이다. 찾는 것을 그만두자.</span>\n<span class=\"token comment\">// 속성이 발견되지 않았기 때문에 undefined를 반환한다.</span>\n</code></pre></div>\n<p>객체의 속성에 값을 지정하면 \"자기만의 속성\"이 생긴다. 단, <a href=\"/en-US/JavaScript/Guide/Obsolete_Pages/Creating_New_Objects/Defining_Getters_and_Setters\">getter or a setter</a>가 적용되는 속성이 상속되는 경우 예외적인 규칙이 적용된다.</p>"}},{"type":"prose","value":{"id":"메소드_상속","title":"메소드 상속","isH3":true,"content":"<p>자바스크립트에 \"메소드\"라는건 없다. 하지만 자바스크립트는 객체의 속성으로 함수를 지정할 수 있고 속성 값을 사용하듯 쓸 수 있다. 속성 값으로 지정한 함수의 상속 역시 위에서 본 속성의 상속과 동일하다. (단 위에서 언급한 \"속성의 가려짐\" 대신 \"<em>메소드 오버라이딩, method overriding</em>\" 라는 용어를 사용한다)</p>\n<p>상속된 함수가 실행 될 때, <a href=\"/en-US/JavaScript/Reference/Operators/this\"><code>this</code></a> 라는 변수는 상속된 오브젝트를 가르킨다. 그 함수가 프로토타입의 속성으로 지정되었다고 해도 말이다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">m</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span><span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token comment\">// o.m을 호출하면 'this' 는 o를 가리킨다.</span>\n\n<span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// p 는 프로토타입을 o로 가지는 오브젝트이다.</span>\n\np<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// p 에 'a'라는 새로운 속성을 만들었다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 13</span>\n<span class=\"token comment\">// p.m이 호출 될 때 'this' 는 'p'를 가리킨다.</span>\n<span class=\"token comment\">// 따라서 o의 함수 m을 상속 받으며,</span>\n<span class=\"token comment\">// 'this.a'는 p.a를 나타내며 p의 개인 속성 'a'가 된다.</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"javascript_에서_프로토타입을_사용하는_방법","title":"Javascript 에서 프로토타입을 사용하는 방법","isH3":false,"content":"<p>뒤에서 일어나는 일을 좀 더 자세히 파헤쳐보자.</p>\n<p>위에서 언급했듯이, 자바스크립트에서 함수는 속성을 가질 수 있다. 모든 함수에는 <code>prototype</code>이라는 특수한 속성이 있다. 아래의 예제 코드는 독립적이라는 것에 유의하자. (아래의 코드 이외에는 웹페이지에 다른 자바스크립트가 없다고 가정하는 것이 좋다.)</p>\n<p>최적의 실습을 위해서 콘솔을 열고 \"Console\" 탭으로 이동하여 아래의 JavaScript 코드를 복사하여 붙여넣은 다음 , 엔터키를 눌러 실행할 것을 적극 권한다. (콘솔은 대부분 웹 브라우저의 Developer Tools에 포함되어있다. 자세한 내용은 <a href=\"/ko-KR/docs/Tools\">Firefox Developer Tools</a>, <a href=\"https://developers.google.com/web/tools/chrome-devtools/\" class=\"external\" rel=\" noopener\">Chrome DevTools</a>, <a href=\"https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide\" class=\"external\" rel=\" noopener\">Edge DevTools</a> 에서 확인할 수 있다. )</p>\n<pre class=\"notranslate\">    function doSomething(){}\n    console.log( doSomething.prototype );\n    // It does not matter how you declare the function, a\n    //  function in JavaScript will always have a default\n    //  prototype property.\n    var doSomething = function(){};\n    console.log( doSomething.prototype );\n</pre>\n<p>위 내용을 토대로, 콘솔을 보면 <code>doSomething()</code> 은 기본 <code>prototype</code> 속성을 가진다. 코드를 실행한 뒤에 콘솔에서는 다음과 유사한 형태의 객체가 표시되어야한다.</p>\n<pre class=\"notranslate\">{\n    constructor: ƒ doSomething(),\n    __proto__: {\n        constructor: ƒ Object(),\n        hasOwnProperty: ƒ hasOwnProperty(),\n        isPrototypeOf: ƒ isPrototypeOf(),\n        propertyIsEnumerable: ƒ propertyIsEnumerable(),\n        toLocaleString: ƒ toLocaleString(),\n        toString: ƒ toString(),\n        valueOf: ƒ valueOf()\n    }\n}\n</pre>\n<p>우리는 아래에 보이는 것과 같이 <code>doSomething()</code> 프로토타입에 속성을 추가할 수 있다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\ndoSomething<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> doSomething<span class=\"token punctuation\">.</span>prototype <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>결과:</p>\n<pre class=\"notranslate\">{\n    foo: \"bar\",\n    constructor: ƒ doSomething(),\n    __proto__: {\n        constructor: ƒ Object(),\n        hasOwnProperty: ƒ hasOwnProperty(),\n        isPrototypeOf: ƒ isPrototypeOf(),\n        propertyIsEnumerable: ƒ propertyIsEnumerable(),\n        toLocaleString: ƒ toLocaleString(),\n        toString: ƒ toString(),\n        valueOf: ƒ valueOf()\n    }\n}\n</pre>\n<p>이제 <code>new</code> 연산자를 사용해서 프로토타입 기반의 <code>doSomething()</code> 인스턴스를 생성할 수 있다. new 연산자를 사용하려면 함수 호출 형식에 <code>new</code> 접두사를 붙이기만하면 된다. <code>new</code> 연산자로 함수를 호출하면 해당 함수의 인스턴스 객체를 반환받는다. 그러면 속성들을 이 객체에 추가할 수 있다.</p>\n<p>다음의 코드를 실행해보자.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\ndoSomething<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// add a property onto the prototype</span>\n<span class=\"token keyword\">var</span> doSomeInstancing <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndoSomeInstancing<span class=\"token punctuation\">.</span>prop <span class=\"token operator\">=</span> <span class=\"token string\">\"some value\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// add a property onto the object</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> doSomeInstancing <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>실행하고나면 결과는 다음과 비슷할 것이다.</p>\n<pre class=\"notranslate\">{\n    prop: \"some value\",\n    __proto__: {\n        foo: \"bar\",\n        constructor: ƒ doSomething(),\n        __proto__: {\n            constructor: ƒ Object(),\n            hasOwnProperty: ƒ hasOwnProperty(),\n            isPrototypeOf: ƒ isPrototypeOf(),\n            propertyIsEnumerable: ƒ propertyIsEnumerable(),\n            toLocaleString: ƒ toLocaleString(),\n            toString: ƒ toString(),\n            valueOf: ƒ valueOf()\n        }\n    }\n}\n</pre>\n<p>\n  위에서 본 것과 같이, doSomeInstancing 객체의 <code>__proto__</code> 는 doSomething.prototype 이다.\n  그래서 도대체 <code>__proto__</code>는 무엇을 하는것인지 알아보자.\n  우리가 doSomeInstancing의 속성에 접근할때 브라우저는 우선 doSomeInstancing이 그 속성을 갖고있는지 확인한다.\n  만약 doSomeInstancing이 속성을 갖고있지 않다면, 브라우저는 doSomeInstancing의 <code>__proto__</code>(doSomething.prototype)가 그 속성을 갖고있는지 확인한다.\n  만약 doSomeInstancing의 <code>__proto__</code>가 브라우저가 찾던 속성을 갖고 있다면, doSomething의 <code>__proto__</code>가 갖고있는 그 속성을 사용한다.\n</p>\n<p>\n  그렇지 않고, doSomeInstancing의 <code>__proto__</code>가 그 속성을 갖고있지 않을때에는\n  doSomeInstancing의 <code>__proto__</code>의 <code>__proto__</code>가 그 속성을 갖는지 확인한다.\n  기본적으로, 어떠한 함수던지 그 함수의 prototype 속성의 <code>__proto__</code>는 window.Object.prototype이다.\n  그러므로 브라우저는 doSomeInstancing의 <code>__proto__</code>의 <code>__proto__</code>(doSomething.prototype의 <code>__proto__</code>(다시말해, Object.prototype)) 에서 그 속성을 찾아본다.\n  만약 그 속성을 doSomeInstancing의 <code>__proto__</code>의 <code>__proto__</code>에서 찾을 수 없다면 그다음엔 doSomeInstancing의 <code>__proto__</code>의 <code>__proto__</code>의 <code>__proto__</code>에서 찾을것이다.\n  하지만 여기서 문제가 발생한다.\n  doSomeInstancing의 <code>__proto__</code>의 <code>__proto__</code>의 <code>__proto__</code>는 존재할 수 없다(window.Object.prototype의 <code>__proto__</code>는 null이기 때문).\n  그제서야, 오직 모든 프로토타입 체인이 검사 되고 브라우저가 더이상 검사할 <code>__proto__</code>가 없을때에서야 브라우저는 우리가 찾던 값이 undefined라고 결론짓는다.\n</p>\n<p>콘솔에 코드를 조금 더 추가해보자.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\ndoSomething<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> doSomeInstancing <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndoSomeInstancing<span class=\"token punctuation\">.</span>prop <span class=\"token operator\">=</span> <span class=\"token string\">\"some value\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doSomeInstancing.prop:      \"</span> <span class=\"token operator\">+</span> doSomeInstancing<span class=\"token punctuation\">.</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doSomeInstancing.foo:       \"</span> <span class=\"token operator\">+</span> doSomeInstancing<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doSomething.prop:           \"</span> <span class=\"token operator\">+</span> doSomething<span class=\"token punctuation\">.</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doSomething.foo:            \"</span> <span class=\"token operator\">+</span> doSomething<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doSomething.prototype.prop: \"</span> <span class=\"token operator\">+</span> doSomething<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doSomething.prototype.foo:  \"</span> <span class=\"token operator\">+</span> doSomething<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>이 코드의 결과는 아래와 같다.</p>\n<pre class=\"notranslate\">doSomeInstancing.prop:      some value\ndoSomeInstancing.foo:       bar\ndoSomething.prop:           undefined\ndoSomething.foo:            undefined\ndoSomething.prototype.prop: undefined\ndoSomething.prototype.foo:  bar\n</pre>"}},{"type":"prose","value":{"id":"객체를_생성하는_여러_방법과_프로토타입_체인_결과","title":"객체를 생성하는 여러 방법과 프로토타입 체인 결과","isH3":false,"content":""}},{"type":"prose","value":{"id":"문법_생성자로_객체_생성","title":"문법 생성자로 객체 생성","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// o 객체는 프로토타입으로 Object.prototype 을 가진다.</span>\n<span class=\"token comment\">// 이로 인해 o.hasOwnProperty('a') 같은 코드를 사용할 수 있다.</span>\n<span class=\"token comment\">// hasOwnProperty 라는 속성은 Object.prototype 의 속성이다.</span>\n<span class=\"token comment\">// Object.prototype 의 프로토타입은 null 이다.</span>\n<span class=\"token comment\">// o ---&gt; Object.prototype ---&gt; null</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"yo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"whadup\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"?\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Array.prototype을 상속받은 배열도 마찬가지다.</span>\n<span class=\"token comment\">// (이번에는 indexOf, forEach 등의 메소드를 가진다)</span>\n<span class=\"token comment\">// 프로토타입 체인은 다음과 같다.</span>\n<span class=\"token comment\">// a ---&gt; Array.prototype ---&gt; Object.prototype ---&gt; null</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 함수는 Function.prototype 을 상속받는다.</span>\n<span class=\"token comment\">// (이 프로토타입은 call, bind 같은 메소드를 가진다)</span>\n<span class=\"token comment\">// f ---&gt; Function.prototype ---&gt; Object.prototype ---&gt; null</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"생성자를_이용","title":"생성자를 이용","isH3":true,"content":"<p>자바스크립트에서 생성자는 단지 <a href=\"/en-US/JavaScript/Reference/Operators/new\">new 연산자</a>를 사용해 함수를 호출하면 된다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Graph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vertexes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>edges <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Graph</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">addVertex</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vertexes<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> g <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// g 'vertexes' 와 'edges'를 속성으로 가지는 객체이다.</span>\n<span class=\"token comment\">// 생성시 g.[[Prototype]]은 Graph.prototype의 값과 같은 값을 가진다.</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"object.create_이용","title":"Object.create 이용","isH3":true,"content":"<p>ECMAScript 5는 새로운 방법을 도입했다. <a href=\"/en-US/JavaScript/Reference/Global_Objects/Object/create\">Object.create</a>라는 메소드를 호출하여 새로운 객체를 만들 수 있다. 생성된 객체의 프로토타입은 이 메소드의 첫 번째 인수로 지정된다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// a ---&gt; Object.prototype ---&gt; null</span>\n\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// b ---&gt; a ---&gt; Object.prototype ---&gt; null</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 (상속됨)</span>\n\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// c ---&gt; b ---&gt; a ---&gt; Object.prototype ---&gt; null</span>\n\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// d ---&gt; null</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>hasOwnProperty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined이다. 왜냐하면 d는 Object.prototype을 상속받지 않기 때문이다.</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"class_키워드_이용","title":"<code>class</code> 키워드 이용","isH3":true,"content":"<p>ECMAScript2015에는 몇 가지 키워드가 도입되어 <a href=\"/en-US/docs/Web/JavaScript/Reference/Classes\">class</a>를 구현하였다. 이런 생성 방식은 클래서 기반 언어의 개발자들에게 친숙하게 다가오나 동작 방식이 같지는 않다. 자바스크립트는 여전히 프로토타입 기반으로 남아있다. 새로 도입된 키워드는 <a href=\"/ko/docs/Web/JavaScript/Reference/Statements/class\"><code>class</code></a>, <a href=\"/ko/docs/Web/JavaScript/Reference/Classes/constructor\"><code>constructor</code></a>, <a href=\"/ko/docs/Web/JavaScript/Reference/Classes/static\"><code>static</code></a>, <a href=\"/ko/docs/Web/JavaScript/Reference/Classes/extends\"><code>extends</code></a>, 그리고 <a href=\"/ko/docs/Web/JavaScript/Reference/Operators/super\"><code>super</code></a>가 있다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Polygon</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">height<span class=\"token punctuation\">,</span> width</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> height<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> width<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Square</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Polygon</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sideLength</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>sideLength<span class=\"token punctuation\">,</span> sideLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>height <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">set</span> <span class=\"token function\">sideLength</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newLength</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> newLength<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> newLength<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> square <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Square</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>","titleAsText":"class 키워드 이용"}},{"type":"prose","value":{"id":"성능","title":"성능","isH3":true,"content":"<p>프로토타입 체인에 걸친 속성 검색으로 성능에 나쁜 영향을 줄 수 있으며, 때때로 치명적일 수 있다. 또한 존재하지도 않는 속성에 접근하려는 시도는 항상 모든 프로토타입 체인인 전체를 탐색해서 확인하게 만든다.</p>\n<p>객체의 속성에 걸쳐 루프를 수행 하는 경우 프로토타입 체인 전체의 <strong>모든</strong> 열거자 속성에 대하여 적용된다. 객체 개인 속성인지 프로토타입 체인상 어딘가에 있는지 확인하기 위해서는 Object.prototype에서 모든 오브젝트로 상속된 <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>hasOwnProperty</code></a> 메소드를 이용할 필요가 있다. 다음 코드를 통하여 구체적인 예를 확인하여 보자.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'vertices'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'nope'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// false</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'addVertex'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// false</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'addVertex'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span>\n</code></pre></div>\n<p><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>hasOwnProperty</code></a> 메소드만이 속성을 확인하고 프로토타입 체인 전체를 훑지 않게 할 수 있다.</p>\n<p>참고: <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>인지 여부만 확인하는 것으로는 충분하지 않다. 여전히 속성이 존재할 수도 있는데 단지 그 값에 <code>undefined</code>가 할당되어 있을 수도 있기 때문이다.</p>"}},{"type":"prose","value":{"id":"좋지_않은_사례_기본_프로타입의_확장_변형","title":"좋지 않은 사례: 기본 프로타입의 확장 변형","isH3":true,"content":"<p>Object.prototype 혹은 빌트인 프로토타입의 확장은 종종 이용되지만 오용이다.</p>\n<p>이 기법은 Monkey patching으로 불리며 캡슐화를 망가뜨린다. Prototype.js와 같은 유명한 프레임워크에서도 사용되지만, 빌트인 타입에 비표준 기능을 추가하는 것은 좋은 생각이 아니다.</p>\n<p>유일하게 좋은 사용 예라면, 새로운 자바스크립트 엔진에 Array.forEach등의 새로운 기능을 추가하면서 빌트인 프로토타입을 확장하는 것 정도다.</p>"}},{"type":"prose","value":{"id":"예","title":"예","isH3":false,"content":"<p><code>B는 A를 상속한다</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>varA <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// A의 정의에서 this.varA는 항상 A.prototype.varA가 가려버리는데</span>\n<span class=\"token comment\">// prototype에 varA를 다시 넣는 이유는 무엇인가?</span>\n<span class=\"token class-name\">A</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">varA</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 아무것도 안하면서 varA를 쓰는 이유가 있을까?</span>\n      <span class=\"token comment\">// 아마도 숨겨진 클래스의 할당 구조를 최적화 하려는 것인가?</span>\n      <span class=\"token comment\">// https://developers.google.com/speed/articles/optimizing-javascript#Initializing-instance-variables</span>\n      <span class=\"token comment\">// 모든 객체의 varA가 동일하게 초기화 되어야 상기 링크 내용이 유효할 수 있다.</span>\n  <span class=\"token function-variable function\">doSomething</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">A</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>varB <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">B</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">varB</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">configurable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">writable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">doSomething</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">value</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// override</span>\n      <span class=\"token class-name\">A</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">doSomething</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// call super</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">configurable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">writable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">B</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nb<span class=\"token punctuation\">.</span><span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>중요한 점은:</p>\n<ul>\n  <li><code>.prototype</code>에 타입이 정의되어 있다.</li>\n  <li><code>Object.create()</code>을 이용하여 상속한다.</li>\n</ul>"}},{"type":"prose","value":{"id":"prototype_그리고_object.getprototypeof","title":"<code>prototype</code> <code>그리고 Object.getPrototypeOf</code>","isH3":false,"content":"<p>Java나 C++에 익숙한 개발자는 클래스라는 것도 없고, 모든 것이 동적이고 실행 시 결정되는 자바스크립트의 특징 때문에 어려움을 겪을 수도 있다. 모든 것은 객체이고, 심지의 \"class\"를 흉내내는 방식도 단지 함수 오브젝트를 이용하는 것 뿐이다.</p>\n<p>이미 알아챘겠지만 우리의 함수 A도 특별한 속성 prototype를 가지고 있다. 이 특별한 속성은 자바스크립트의 new 연산자와 함께 쓰인다. 프로토타입 객체는 새로 만들어진 인스턴스의 내부 <code>[[Prototype]]</code> 속성에 복사되어 참조된다. 가령, <code>var a1 = new A()</code>를 수행할 때, this를 포함하고 있는 함수을 수행하기 전, 메모리에 새로 생성된 객체를 생성한 직후 자바스크립트는 a1.<code>[[Prototype]] = A.prototype</code>를 수행한다. 그 인스턴스의 속성에 접근하려 할 때 자바스크립트는 그 객체의 개인 속성인지 우선 확인하고 그렇지 않은 경우에 <code>[[Prototype]]</code>에서 찾는다. 이것은 prototype에 정의한 모든 것은 모든 인스턴스가 효과적으로 공유한다는 뜻이며, 심지어 프로토타입의 일부를 나중에 변경하다고 해도 이미 생성되어 있는 인스턴스는 필요한 경우 그 변경 사항에 접근할 수 있다.</p>\n<p>위의 예에서, 만일 <code>var a1 = new A(); var a2 = new A();</code> 그 후 <code>a1.doSomething</code>이 <code>Object.getPrototypeOf(a1).doSomething</code>를 가리키게 되는 것은<code>A.prototype.doSomething</code>으로 정의한 것과 같게 된다. 즉, <code>Object.getPrototypeOf(a1).doSomething == Object.getPrototypeOf(a2).doSomething == A.prototype.doSomething</code>.</p>\n<p>요약 하자면, prototype은 타입 정의를 위한 것이고, <code>Object.getPrototypeOf()</code>는 모든 인스턴스가 공유한다.</p>\n<p><code>[[Prototype]]</code>은 재귀적으로 탐색된다. 즉, <code>a1.doSomething</code>, <code>Object.getPrototypeOf(a1).doSomething</code>,<code>Object.getPrototypeOf(Object.getPrototypeOf(a1)).doSomething</code> 등등, 이미 발견했거나 <code>Object.getPrototypeOf</code>가 <code>null</code>을 반환할 때까지 반복된다.</p>\n<p>따라서 다음 호출에 대하여</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>자바스크립트는 실제로 다음 작업을 수행한다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\no<span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Prototype<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\n<span class=\"token function\">Foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>(혹은 그런 비슷한 작업, 내부 구현은 다를 수 있다) 그리고 나중에 다음을 수행하면</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>o<span class=\"token punctuation\">.</span>someProp<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>자바스크립트는 o가 속성 someProp을 가졌는지 확인하고, 아니면 <code>Object.getPrototypeOf(o).someProp</code>, 또 아니면 <code>Object.getPrototypeOf(Object.getPrototypeOf(o)).someProp</code> 등으로 계속 된다.</p>","titleAsText":"prototype 그리고 Object.getPrototypeOf"}},{"type":"prose","value":{"id":"프로토타입_상속의_종류","title":"프로토타입 상속의 종류","isH3":false,"content":"<p>프로토타입 상속에는 3가지 종류가 있다 : 위임형 상속, 연결형 상속, 함수형 상속.</p>"}},{"type":"prose","value":{"id":"위임형_상속delegation_inheritance","title":"위임형 상속(Delegation inheritance)","isH3":true,"content":"<p>위임형 상속에서 프로토타입 객체는 다른 객체의 기반이 된다. 위임 프로토타입을 상속받을 경우 새 객체는 해당 프로토타입에 대한 참조를 가지고 있다.</p>\n<p>새 객체의 속성에 접근할 때, 해당 객체가 직접적으로 속성을 소유하고 있는지 먼저 체크한다. 없다면 다음 순서로 <code>[[Prototype]]</code>을 체크한다. 이 과정은 프로토타입 체인을 따라서 모든 객체의 프로토타입 체인의 최상위에 있는 객체인 <code>Object.prototype</code>에 도달할 때 까지 반복된다.</p>\n<p>메소드를 위임 상속할 경우 모든 객체가 각 메소드에에 대해 하나의 코드를 공유하므로 메모리를 절약할 수 있다.</p>\n<p>Javascript에서 이를 구현하는 방법은 여러가지가 있는데 ES6에서는 아래와 같은 방식이 흔하다:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeter</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name <span class=\"token operator\">||</span> <span class=\"token string\">'John Doe'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">hello</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, my name is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> george <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Greeter</span><span class=\"token punctuation\">(</span><span class=\"token string\">'George'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> msg <span class=\"token operator\">=</span> george<span class=\"token punctuation\">.</span><span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hello, my name is George</span>\n</code></pre></div>\n<p><code>Object.create(null)</code>. 을 통해 프로토타입을 <a href=\"/ko/docs/Web/JavaScript/Reference/Operators/null\"><code>null</code></a>로 지정하여 속성 위임 없이 객체를 생성할 수 있다..</p>\n<p>이 방법의 큰 단점 중 하나는 상태를 저장하는데 그리 좋은 방법이 아니라는 것이다. 객체나 배열의 상태를 변경하게 되면 같은 프로토타입을 공유하는 모든 객체의 상태가 변경된다.</p>\n<p>상태 변경이 전파되는 것을 막으려면 각 객체마다 상태 값의 복사본을 만들어야 한다.</p>"}},{"type":"prose","value":{"id":"연결형_상속concatenative_inheritance","title":"연결형 상속(Concatenative inheritance)","isH3":true,"content":"<p>연결형 상속은 한 객체의 속성을 다른 객체에 모두 복사함으로써 상속을 구현하는 방법이다.</p>\n<p>이 상속법은 Javascript 객체의 동적 확장성을 이용한 방법이다. 객체 복사는 속성의 초기값을 저장하기 위한 좋은 방법이다: 이 방식은 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"><code>Object.assign()</code></a>을 통해 구현하는 것이 보통이며 ES6 이전에 Lodash, Underscore, jQuery등의 라이브러리들이 <code>.extend()</code> 와 비슷한 메소드로 제공한 방법이다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> proto <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">hello</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, my name is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> george <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> proto<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'George'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> msg <span class=\"token operator\">=</span> george<span class=\"token punctuation\">.</span><span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hello, my name is George</span>\n</code></pre></div>\n<p>연결형 상속은 매우 좋은 방법이며 클로져와 같이 사용한다면 훨씬 효과적인 상속 방식입니다..</p>"}},{"type":"prose","value":{"id":"함수형_상속functional_inheritance","title":"함수형 상속(Functional inheritance)","isH3":true,"content":"<p>함수형 상속(Functional inheritance)이라는 단어는 Douglas Crockford가 자신의 저서 “JavaScript: The Good Parts”에서 창조한 단어이다. 이 방법은 새 속성들을 연결형 상속으로 쌓되 상속 기능을 Factory 함수로 만들어 사용하는 방식이다.</p>\n<p>기존의 객체를 확장하는데 쓰이는 함수를 일반적으로 믹스인 함수라 칭한다. 객체 확장에 함수를 사용하는 가장 큰 이점은 Private Data를 클로져를 통해 캡슐화 시킬 수 있다는 점이다.</p>\n<p>다르게 말하자면 Private 상태를 지정할 수 있다는 의미이다.</p>\n<p>특정 함수를 통할 필요 없이 public 접근이 가능한 속성에 대해 접근 제한을 거는 것은 문제가 있다. 따라서 private 클로져에 속성 값을 숨겨야 하며 이는 아래와 같이 구현한다:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// import Events from 'eventemitter3';</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">rawMixin</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> attrs <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">set</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      attrs<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">prop</span><span class=\"token operator\">:</span> name<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> value\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">get</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> attrs<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Events</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mixinModel</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">rawMixin</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> george <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'george'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> model <span class=\"token operator\">=</span> <span class=\"token function\">mixinModel</span><span class=\"token punctuation\">(</span>george<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodel<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodel<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Sam'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n{\n  prop: 'name',\n  value: 'Sam'\n}\n*/</span>\n</code></pre></div>\n<p><code>attrs</code> 을 public 속성에서 private 영역으로 옮겨서 public API를 통한 접근을 차단할 수 있다. // 접근할 수 있는 유일한 방법은 Privileged 메소드 뿐이다. Privileged 메소드는 클로져 영역에 정의된 함수로 private data에 접근 가능한 함수들을 일컫는다.</p>\n<p>위 예제를 보면 믹스인 함수 <code>rawMixin()</code>.에 대한 래퍼로 <code>mixinModel()</code> 을 선언한 것을 알 수 있다. 이는 예제에서 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a> 을 사용했듯이 함수 내에서 <code>this</code>의 값을 설정해야 하기 때문이다. Wrapper를 생략하고 호출자가 알아서 하도록 놔둘 수 있지만 그럴 경우 혼동될 가능성이 있다.</p>"}},{"type":"prose","value":{"id":"결론","title":"결론","isH3":false,"content":"<p>복잡한 코드를 작성하여 이용하기 전에 프로토타입 기반의 상속 모델을 이해하는 것이 <strong>중요하다</strong>. 또한 프로토타입 체인의 길이는 성능을 저해하지 않도록 줄이는 방법을 고안해야 한다. 또한 빌트인 프로토타입은 새로운 자바스크립트 기능과 호환성을 갖기 위한 이유가 아닌 이상 <strong>절대</strong> 확장해서는 안된다.</p>"}}],"toc":[{"text":"프로토타입 체인을 이용한 상속","id":"프로토타입_체인을_이용한_상속"},{"text":"Javascript 에서 프로토타입을 사용하는 방법","id":"javascript_에서_프로토타입을_사용하는_방법"},{"text":"객체를 생성하는 여러 방법과 프로토타입 체인 결과","id":"객체를_생성하는_여러_방법과_프로토타입_체인_결과"},{"text":"예","id":"예"},{"text":"<code>prototype</code> <code>그리고 Object.getPrototypeOf</code>","id":"prototype_그리고_object.getprototypeof"},{"text":"프로토타입 상속의 종류","id":"프로토타입_상속의_종류"},{"text":"결론","id":"결론"}],"summary":"Java 나 C++ 같이 클래스 기반의 언어를 사용하던 프로그래머는 자바스크립트가 동적인 언어라는 점과 클래스가 없다는 것에서 혼란스러워 한다. (ES2015부터 class 키워드를 지원하기 시작했으나, 문법적인 양념일 뿐이며 자바스크립트는 여전히 프로토타입 기반의 언어다.)","popularity":0.0007,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Inheritance and the prototype chain","locale":"en-US","native":"English (US)"},{"title":"Herencia y la cadena de prototipos","locale":"es","native":"Español"},{"title":"Héritage et chaîne de prototype","locale":"fr","native":"Français"},{"title":"継承とプロトタイプチェーン","locale":"ja","native":"日本語"},{"title":"Herança e cadeia de protótipos (prototype chain)","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Наследование и цепочка прототипов","locale":"ru","native":"Русский"},{"title":"继承与原型链","locale":"zh-CN","native":"中文 (简体)"},{"title":"繼承與原型鏈","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ko/web/javascript/inheritance_and_the_prototype_chain","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/web/javascript/inheritance_and_the_prototype_chain/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ko/docs/Web","title":"개발자를 위한 웹 기술"},{"uri":"/ko/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/ko/docs/Web/JavaScript/Inheritance_and_the_prototype_chain","title":"상속과 프로토타입"}],"pageTitle":"상속과 프로토타입 - JavaScript | MDN","noIndexing":false}}