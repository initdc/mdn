{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"함수","mdn_url":"/ko/docs/Web/JavaScript/Reference/Functions","locale":"ko","native":"한국어","sidebarHTML":"\n <ol>\n  <li><a href=\"/ko/docs/Web/JavaScript\"><strong><em>JavaScript</em></strong></a></li>\n  <li><a href=\"/ko/docs/Web/JavaScript/Tutorials\"><strong>Tutorials:</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Complete beginners</summary>\n      <ol>\n        <li><a href=\"/ko/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">JavaScript basics</a></li>\n        <li><a href=\"/ko/docs/Learn/JavaScript/First_steps\">JavaScript first steps</a></li>\n        <li><a href=\"/ko/docs/Learn/JavaScript/Building_blocks\">JavaScript building blocks</a></li>\n        <li><a href=\"/ko/docs/Learn/JavaScript/Objects\">Introducing JavaScript objects</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>JavaScript Guide</summary>\n      <ol>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Introduction\">Introduction</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Grammar_and_Types\">Grammar and types</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">Control flow and error handling</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Loops_and_iteration\">Loops and iteration</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Functions\">Functions</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Expressions_and_Operators\">Expressions and operators</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Numbers_and_dates\">Numbers and dates</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Text_formatting\">Text formatting</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Regular_Expressions\">Regular expressions</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Indexed_collections\">Indexed collections</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Keyed_collections\">Keyed collections</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Working_with_Objects\">Working with objects</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Details_of_the_Object_Model\">Details of the object model</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Using_promises\">Using promises</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Iterators_and_generators\">Iterators and generators</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Meta_programming\">Meta programming</a></li>\n          <li><a href=\"/ko/docs/Web/JavaScript/Guide/Modules\">JavaScript modules</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Intermediate</summary>\n      <ol>\n        <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks\">Client-side JavaScript frameworks</a></li>\n        <li><a href=\"/ko/docs/Learn/JavaScript/Client-side_web_APIs\">Client-side web APIs</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">A re-introduction to JavaScript</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Data_structures\">JavaScript data structures</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Equality_comparisons_and_sameness\">Equality comparisons and sameness</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Closures\">Closures</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Advanced</summary>\n      <ol>\n        <li><a href=\"/ko/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">Inheritance and the prototype chain</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Typed_arrays\">JavaScript typed arrays</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Memory_Management\">Memory Management</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/EventLoop\">Concurrency model and Event Loop</a></li>\n      </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/ko/docs/Web/JavaScript/Reference\">References:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n       <summary>Built-in objects</summary>\n        <ol><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\">AggregateError</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\">AsyncFunction</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\">AsyncGenerator</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\">AsyncGeneratorFunction</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Atomics\">Atomics</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array\">BigInt64Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array\">BigUint64Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/DataView\">DataView</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\">decodeURI()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Error\">Error</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/escape\">escape()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/EvalError\">EvalError</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\">FinalizationRegistry</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\">Float32Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\">Float64Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Generator\">Generator</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">globalThis</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Infinity\">Infinity</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\">Int16Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\">Int32Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\">Int8Array</a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/InternalError\">InternalError</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/isFinite\">isFinite()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/isNaN\">isNaN()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/NaN\">NaN</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">parseFloat()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">parseInt()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/RangeError\">RangeError</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\">ReferenceError</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">Reflect</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">RegExp</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/String\">String</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\">SyntaxError</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">TypedArray</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\">Uint16Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\">Uint32Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">Uint8Array</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\">Uint8ClampedArray</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/undefined\">undefined</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/unescape\">unescape()</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/URIError\">URIError</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/WeakRef\">WeakRef</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\">WeakSet</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Expressions &amp; operators</summary>\n      <ol><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Addition_assignment\">Addition assignment (+=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Addition\">Addition (+)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Assignment\">Assignment (=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/async_function*\">async function* expression</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/await\">await</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment\">Bitwise AND assignment (&amp;=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">Bitwise AND (&amp;)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">Bitwise NOT (~)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment\">Bitwise OR assignment (|=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">Bitwise OR (|)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment\">Bitwise XOR assignment (^=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">Bitwise XOR (^)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/class\">class expression</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Comma_Operator\">Comma operator (,)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">Conditional (ternary) operator</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Decrement\">Decrement (--)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/delete\">delete operator</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">Destructuring assignment</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Division_assignment\">Division assignment (/=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Division\">Division (/)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Equality\">Equality (==)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment\">Exponentiation assignment (**=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Exponentiation\">Exponentiation (**)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/function\">Function expression</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal\">Greater than or equal (&gt;=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Greater_than\">Greater than (&gt;)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Grouping\">Grouping operator ( )</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/import.meta\">import.meta</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/import\">import</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/in\">in operator</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Increment\">Increment (++)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Inequality\">Inequality (!=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/instanceof\">instanceof</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment\">Left shift assignment (&lt;&lt;=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Left_shift\">Left shift (&lt;&lt;)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal\">Less than or equal (&lt;=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Less_than\">Less than (&lt;)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment\">Logical AND assignment (&amp;&amp;=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Logical_AND\">Logical AND (&amp;&amp;)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">Logical NOT (!)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment\">Logical nullish assignment (??=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment\">Logical OR assignment (||=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Logical OR (||)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment\">Multiplication assignment (*=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Multiplication\">Multiplication (*)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/new.target\">new.target</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/new\">new operator</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/null\">null</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\">Nullish coalescing operator (??)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Object_initializer\">Object initializer</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">Operator precedence</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">Optional chaining (?.)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Property_Accessors\">Property accessors</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Remainder_assignment\">Remainder assignment (%=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Remainder\">Remainder (%)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment\">Right shift assignment (&gt;&gt;=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Right_shift\">Right shift (&gt;&gt;)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Spread syntax (...)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Strict_equality\">Strict equality (===)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">Strict inequality (!==)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment\">Subtraction assignment (-=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Subtraction\">Subtraction (-)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/super\">super</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/this\">this</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/typeof\">typeof</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Unary_negation\">Unary negation (-)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Unary_plus\">Unary plus (+)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment\">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">Unsigned right shift (&gt;&gt;&gt;)</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/void\">void operator</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/yield*\">yield*</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/yield\">yield</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Statements &amp; declarations</summary>\n      <ol><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/async_function*\">async function*</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/block\">block</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/break\">break</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/class\">class</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/const\">const</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/continue\">continue</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/debugger\">debugger</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/do...while\">do...while</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/Empty\">empty</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/export\">export</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/for-await...of\">for await...of</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/for\">for</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/function*\">function*</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/function\">function declaration</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/if...else\">if...else</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/import\">import</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/label\">label</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/let\">let</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/return\">return</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/switch\">switch</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/throw\">throw</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/try...catch\">try...catch</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/var\">var</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/while\">while</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/with\">with</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Functions</summary>\n      <ol><li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow function expressions</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/get\">getter</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/set\">setter</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Classes</summary>\n      <ol><li><a href=\"/ko/docs/Web/JavaScript/Reference/Classes/Class_static_initialization_blocks\">Class static initialization blocks</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Classes/constructor\">constructor</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Classes/extends\">extends</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">Private class features</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Classes/Public_class_fields\">Public class fields</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Classes/static\">static</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Errors</summary>\n      <ol><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Already_has_pragma\">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Array_sort_argument\">TypeError: invalid Array.prototype.sort argument</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Bad_octal\">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Bad_radix\">RangeError: radix must be an integer</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag\">SyntaxError: invalid regular expression flag \"x\"</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield\">SyntaxError: return not in function</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/BigInt_division_by_zero\">RangeError: BigInt division by zero</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/BigInt_negative_exponent\">RangeError: BigInt negative exponent</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type\">TypeError: X.prototype.y called on incompatible type</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init\">ReferenceError: can't access lexical declaration 'X' before initialization</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cant_assign_to_property\">TypeError: can't assign to property \"x\" on \"y\": not an object</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cant_be_converted_to_BigInt_because_it_isnt_an_integer\">RangeError: x can't be converted to BigInt because it isn't an integer</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cant_convert_BigInt_to_number\">TypeError: can't convert BigInt to number</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cant_convert_x_to_BigInt\">TypeError: can't convert x to BigInt</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible\">TypeError: can't define property \"x\": \"obj\" is not extensible</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cant_delete\">TypeError: property \"x\" is non-configurable and can't be deleted</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property\">TypeError: can't redefine non-configurable property \"x\"</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cant_use_nullish_coalescing_unparenthesized\">SyntaxError: cannot use `??` unparenthesized within `||` and `&amp;&amp;` expressions</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value\">TypeError: cyclic object value</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Dead_object\">TypeError: can't access dead object</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode\">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage\">ReferenceError: deprecated caller or arguments usage</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Deprecated_expression_closures\">Warning: expression closures are deprecated</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Deprecated_octal\">SyntaxError: \"0\"-prefixed octal literals and octal escape seq. are deprecated</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma\">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Deprecated_String_generics\">Warning: String.x is deprecated; use String.prototype.x instead</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Deprecated_toLocaleFormat\">Warning: Date.prototype.toLocaleFormat is deprecated</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Equal_as_assign\">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Getter_only\">TypeError: setting getter-only property \"x\"</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Hash_outside_class\">SyntaxError: Unexpected '#' used outside of class body</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Identifier_after_number\">SyntaxError: identifier starts immediately after numeric literal</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Illegal_character\">SyntaxError: illegal character</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/in_operator_no_object\">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\">RangeError: invalid array length</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side\">SyntaxError: invalid assignment left-hand side</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax\">SyntaxError: invalid BigInt syntax</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment\">TypeError: invalid assignment to const \"x\"</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Invalid_date\">RangeError: invalid date</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer\">SyntaxError: for-in loop head declarations may not have initializers</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer\">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand\">TypeError: invalid 'instanceof' operand 'x'</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/is_not_iterable\">TypeError: 'x' is not iterable</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse\">SyntaxError: JSON.parse: bad parsing</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Malformed_formal_parameter\">SyntaxError: Malformed formal parameter</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Malformed_URI\">URIError: malformed URI sequence</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list\">SyntaxError: missing ] after element list</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id\">SyntaxError: missing : after property id</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body\">SyntaxError: missing } after function body</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list\">SyntaxError: missing } after property list</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter\">SyntaxError: missing formal parameter</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const\">SyntaxError: missing = in const declaration</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator\">SyntaxError: missing name after . operator</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\">SyntaxError: missing ) after argument list</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition\">SyntaxError: missing ) after condition</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Missing_semicolon_before_statement\">SyntaxError: missing ; before statement</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/More_arguments_needed\">TypeError: More arguments needed</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count\">RangeError: repeat count must be non-negative</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/No_non-null_object\">TypeError: \"x\" is not a non-null object</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/No_properties\">TypeError: \"x\" has no properties</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/No_variable_name\">SyntaxError: missing variable name</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element\">TypeError: can't delete non-configurable array element</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint\">RangeError: argument is not a valid code point</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Not_a_constructor\">TypeError: \"x\" is not a constructor</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Not_a_function\">TypeError: \"x\" is not a function</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Not_defined\">ReferenceError: \"x\" is not defined</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Precision_range\">RangeError: precision is out of range</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Property_access_denied\">Error: Permission denied to access property \"x\"</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Read-only\">TypeError: \"x\" is read-only</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter\">SyntaxError: redeclaration of formal parameter \"x\"</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value\">TypeError: Reduce of empty array with no initial value</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Reserved_identifier\">SyntaxError: \"x\" is a reserved identifier</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large\">RangeError: repeat count must be less than infinity</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Stmt_after_return\">Warning: unreachable code after return statement</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params\">SyntaxError: \"use strict\" not allowed in function with non-simple parameters</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Too_much_recursion\">InternalError: too much recursion</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Undeclared_var\">ReferenceError: assignment to undeclared variable \"x\"</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Undefined_prop\">ReferenceError: reference to undefined property \"x\"</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Unexpected_token\">SyntaxError: Unexpected token</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Unexpected_type\">TypeError: \"x\" is (not) \"y\"</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement\">SyntaxError: function statement requires a name</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Unparenthesized_unary_expr_lhs_exponentiation\">SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'</a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Errors/Unterminated_string_literal\">SyntaxError: unterminated string literal</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Misc</summary>\n      <ol>\n        <li><a href=\"/ko/docs/Web/JavaScript/JavaScript_technologies_overview\">JavaScript technologies overview</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Reference/Lexical_grammar\">Lexical grammar</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Data_structures\">JavaScript data structures</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">Enumerability and ownership of properties</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Reference/Iteration_protocols\">Iteration protocols</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\">Transitioning to strict mode</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Reference/Template_literals\">Template literals</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\">Deprecated features</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>보통 <strong>함수</strong>란 자신의 외부(재귀 함수의 경우 스스로) 코드가 '호출'할 수 있는 하위 프로그램입니다. 프로그램과 마찬가지로, 함수 역시 명령문의 시퀀스로 구성된 함수 본문을 가집니다. 함수에 값을 '전달'하면, 함수는 값을 '반환'할 것입니다.</p>\n<p>JavaScript의 함수는 다른 모든 객체처럼 속성과 메서드를 가질 수 있으므로 일급(first-class) 객체입니다. 다른 객체와 함수를 구별하는 것은, 함수는 호출할 수 있다는 점입니다. 간단히 말해, 함수는 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> 객체입니다.</p>\n<p><a href=\"/ko/docs/Web/JavaScript/Guide/Functions\">JavaScript 함수 안내서</a>에서 더 많은 예제와 설명을 확인하세요.</p>"}},{"type":"prose","value":{"id":"설명","title":"설명","isH3":false,"content":"<p>JavaScript에서 모든 함수는 <code>Function</code> 객체입니다. <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> 문서에서 속성과 메서드 정보를 확인하세요.</p>\n<p>함수가 기본 값 외의 원하는 값을 반환하도록 하려면 <a href=\"/ko/docs/Web/JavaScript/Reference/Statements/return\"><code>return</code></a> 문으로 반환할 값을 지정해야 합니다. 반환문 없는 함수는 기본 값을 반환합니다. <a href=\"/ko/docs/Web/JavaScript/Reference/Operators/new\"><code>new</code></a> 키워드로 호출하는 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\">생성자</a>의 경우, 기본 반환 값은 함수의 <code>this</code>가 가리키는 값입니다. 그 외의 모든 함수의 경우, 기본 반환 값은 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>입니다.</p>\n<p>함수 호출의 매개변수는 함수의 인수(arguments)입니다. 인수는 함수에 값으로서 전달되므로, 함수가 인수의 값을 바꿔도 이 변화는 전역적 또는 호출한 함수에 반영되지 않습니다. 그러나, 객체 참조 역시 (특별한) 값입니다. 함수 내에서 참조된 객체의 속성을 바꾸면, 아래 예제와 같이 이 변화는 함수 밖에서도 확인할 수 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/* 함수 'myFunc' 선언 */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">theObject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   theObject<span class=\"token punctuation\">.</span>brand <span class=\"token operator\">=</span> <span class=\"token string\">\"쌍용\"</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token comment\">/*\n  * 변수 'mycar' 선언;\n  * 새 객체를 만들고 초기화;\n  * 'mycar'에 객체 참조를 할당\n  */</span>\n <span class=\"token keyword\">var</span> mycar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token literal-property property\">brand</span><span class=\"token operator\">:</span> <span class=\"token string\">\"현대\"</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">model</span><span class=\"token operator\">:</span> <span class=\"token string\">\"엑셀\"</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">year</span><span class=\"token operator\">:</span> <span class=\"token number\">1994</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token comment\">/* '현대' 기록 */</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mycar<span class=\"token punctuation\">.</span>brand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token comment\">/* 객체 참조를 함수에 전달 */</span>\n <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span>mycar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token comment\">/*\n  * 함수가 객체의 'brand' 속성을 바꿨으므로\n  * '쌍용' 출력.\n  */</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mycar<span class=\"token punctuation\">.</span>brand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/this\"><code>this</code> 키워드</a>는 현재 실행 중인 함수를 참조하는 것이 아닙니다. 그러므로 함수 본문 내에서도 <code>Function</code> 객체를 참조할 땐 이름을 사용해야 합니다.</p>"}},{"type":"prose","value":{"id":"함수_정의하기","title":"함수 정의하기","isH3":false,"content":"<p>함수를 정의하는 방법에는 여러 가지가 있습니다.</p>"}},{"type":"prose","value":{"id":"함수_선언_function_명령문","title":"함수 선언 (<code>function</code> 명령문)","isH3":true,"content":"<p>함수 선언에 사용할 수 있는 특별한 구문이 있습니다. (자세한 정보는 <a href=\"/ko/docs/Web/JavaScript/Reference/Statements/function\">함수 선언</a>을 참고하세요)</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>param<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span> param<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   statements\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<dl>\n  <dt id=\"name\"><code>name</code></dt>\n  <dd>\n    <p>함수의 이름.</p>\n  </dd>\n  <dt id=\"param\"><code>param</code></dt>\n  <dd>\n    <p>함수에 전달할 인수의 이름.</p>\n  </dd>\n  <dt id=\"statements\"><code>statements</code></dt>\n  <dd>\n    <p>함수 본문을 구성할 명령문.</p>\n  </dd>\n</dl>","titleAsText":"함수 선언 (function 명령문)"}},{"type":"prose","value":{"id":"함수_표현식_function_표현식","title":"함수 표현식 (<code>function</code> 표현식)","isH3":true,"content":"<p>함수 표현식은 함수 선언과 비슷하고 구문도 같습니다. (자세한 정보는 <a href=\"/ko/docs/Web/JavaScript/Reference/Operators/function\">함수 표현식</a>을 참고하세요) 함수 표현식은 더 큰 표현식의 일부로 사용할 수 있습니다. 함수 표현식을 사용하면 이름이 붙은 '유명 함수' 표현식(이름이 호출 스택 등에 표시됨)과, 이름이 없는 '익명 함수' 표현식을 정의할 수 있습니다. 함수 표현식은 스코프의 상단으로 <a href=\"/ko/docs/Glossary/Hoisting\">호이스팅</a> 되지 않으므로, 코드 내에 나타나기 전에 먼저 사용할 수 없습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>param<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span> param<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   statements\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<dl>\n  <dt id=\"name_2\"><code>name</code></dt>\n  <dd>\n    <p>함수 이름. 생략할 경우 익명 함수가 됩니다.</p>\n  </dd>\n  <dt id=\"param_2\"><code>param</code></dt>\n  <dd>\n    <p>함수에 전달할 인수의 이름.</p>\n  </dd>\n  <dt id=\"statements_2\"><code>statements</code></dt>\n  <dd>\n    <p>함수 본문을 구성할 명령문.</p>\n  </dd>\n</dl>\n<p>다음은 <code>name</code>을 사용하지 않은 <strong>익명</strong> 함수 표현식의 예시입니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">myFunction</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    statements\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>선언 시에 이름을 제공해서 <strong>유명</strong> 함수 표현식을 생성하는 것도 가능합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">myFunction</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">namedFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    statements\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>함수 표현식에 이름을 붙여주는 것의 장점 중 하나는, 오류가 발생했을 때 스택 추적에 함수의 이름이 나타나므로 원인을 찾기 쉽다는 것입니다.</p>\n<p>위의 두 코드 조각 모두 <code>function</code> 키워드가 맨 앞에 오지 않는 것을 볼 수 있습니다. 함수를 선언하지만 <code>function</code>이 맨 처음이 아닌 경우가 함수 표현식입니다.</p>\n<p>한 번만 사용하는 함수의 경우 자주 사용하는 패턴으로 <a href=\"/ko/docs/Glossary/IIFE\">IIFE</a>(Immediately Invokable Function Expression, 즉시 실행 함수 표현식)가 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    statements\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>IIFE는 선언 즉시 실행하는 함수 표현식입니다.</p>","titleAsText":"함수 표현식 (function 표현식)"}},{"type":"prose","value":{"id":"생성기_함수_선언_function_명령문","title":"생성기 함수 선언 (<code>function*</code> 명령문)","isH3":true,"content":"<p>생성기 함수 선언에 사용할 수 있는 특별한 구문이 있습니다. (자세한 정보는 <a href=\"/ko/docs/Web/JavaScript/Reference/Statements/function*\"><code>function*</code> 명령문</a>을 참고하세요)</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>param<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span> param<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   statements\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<dl>\n  <dt id=\"name_3\"><code>name</code></dt>\n  <dd>\n    <p>함수의 이름.</p>\n  </dd>\n  <dt id=\"param_3\"><code>param</code></dt>\n  <dd>\n    <p>함수에 전달할 인수의 이름.</p>\n  </dd>\n  <dt id=\"statements_3\"><code>statements</code></dt>\n  <dd>\n    <p>함수 본문을 구성할 명령문.</p>\n  </dd>\n</dl>","titleAsText":"생성기 함수 선언 (function* 명령문)"}},{"type":"prose","value":{"id":"생성기_함수_표현식_function_표현식","title":"생성기 함수 표현식 (<code>function*</code> 표현식)","isH3":true,"content":"<p>생성기 함수 표현식은 생성기 함수 선언과 비슷하고 구문도 같습니다. (자세한 정보는 <a href=\"/ko/docs/Web/JavaScript/Reference/Operators/function*\"><code>function*</code> 표현식</a>을 참고하세요)</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>param<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span> param<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   statements\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<dl>\n  <dt id=\"name_4\"><code>name</code></dt>\n  <dd>\n    <p>함수 이름. 생략할 경우 익명 함수가 됩니다.</p>\n  </dd>\n  <dt id=\"param_4\"><code>param</code></dt>\n  <dd>\n    <p>함수에 전달할 인수의 이름.</p>\n  </dd>\n  <dt id=\"statements_4\"><code>statements</code></dt>\n  <dd>\n    <p>함수 본문을 구성할 명령문.</p>\n  </dd>\n</dl>","titleAsText":"생성기 함수 표현식 (function* 표현식)"}},{"type":"prose","value":{"id":"화살표_함수_표현식_","title":"화살표 함수 표현식 (=&gt;)","isH3":true,"content":"<p>화살표 함수 표현식은 구문이 더 짧으며, <code>this</code> 값을 어휘적으로 바인딩합니다. (자세한 정보는 <a href=\"/ko/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">화살표 함수</a>를 참고하세요)</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>param<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n   statements\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token parameter\">param</span> <span class=\"token operator\">=&gt;</span> expression\n</code></pre></div>\n<dl>\n  <dt id=\"param_5\"><code>param</code></dt>\n  <dd>\n    <p>인수의 이름. 인수를 하나도 받지 않을 경우 <code>()</code>로 표시해야 합니다. 하나의 인수만 받는 경우 <code>foo =&gt; 1</code>과 같이 괄호를 생략할 수 있습니다.</p>\n  </dd>\n  <dt id=\"statements_5\"><code>statements</code> 또는 <code>expression</code></dt>\n  <dd>\n    <p>함수 본문. 다수의 명령문으로 구성할 경우 중괄호로 묶어야 합니다. 단일 표현식만으로 구성할 경우 중괄호로 묶지 않아도 되며, 이 때는 해당 표현식을 함수 반환 시 사용합니다.</p>\n  </dd>\n</dl>","titleAsText":"화살표 함수 표현식 (=>)"}},{"type":"prose","value":{"id":"function_생성자","title":"<code>Function</code> 생성자","isH3":true,"content":"<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>참고:</strong> <code>Function</code> 생성자를 사용해 함수를 생성하면 일부 JavaScript 엔진 최적화를 적용할 수 없으며, 그 외에도 다른 여러 문제가 발생하므로 권장하지 않습니다.</p>\n</div>\n<p>다른 모든 객체처럼, <code>new</code> 연산자를 사용해서 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> 객체를 생성할 수 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span> <span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span> argN<span class=\"token punctuation\">,</span> functionBody<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<dl>\n  <dt id=\"arg1_arg2_..._argn\"><code>arg1, arg2, ... argN</code></dt>\n  <dd>\n    <p>함수가 형식 매개변수로 사용할 0개 이상의 이름. 모두 올바른 JavaScript 식별자, 또는 쉼표로 구분한 식별자 목록이어야 합니다. (\"<code>x</code>\", \"<code>theValue</code>\", \"<code>a,b</code>\" 등)</p>\n  </dd>\n  <dt id=\"functionbody\"><code>functionBody</code></dt>\n  <dd>\n    <p>함수 본문으로 사용할 JavaScript 명령문을 담은 문자열.</p>\n  </dd>\n</dl>\n<p><code>Function</code> 생성자를 함수로 호출(<code>new</code> 연산자 없이 호출)하는 것도 동일하게 동작합니다.</p>","titleAsText":"Function 생성자"}},{"type":"prose","value":{"id":"generatorfunction_생성자","title":"<code>GeneratorFunction</code> 생성자","isH3":true,"content":"<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>참고:</strong> <code>GeneratorFunction</code>은 전역 객체가 아니며, 다른 생성기 함수 인스턴스에서 가져와야 합니다. <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\"><code>GeneratorFunction</code></a> 문서에서 자세한 정보를 확인하세요.</p>\n</div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>참고:</strong> <code>GeneratorFunction</code> 생성자를 사용해 함수를 생성하면 일부 JavaScript 엔진 최적화를 적용할 수 없으며, 그 외에도 다른 여러 문제가 발생하므로 권장하지 않습니다.</p>\n</div>\n<p>다른 모든 객체처럼, <code>new</code> 연산자를 사용해서 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\"><code>GeneratorFunction</code></a> 객체를 생성할 수 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">GeneratorFunction</span> <span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span> argN<span class=\"token punctuation\">,</span> functionBody<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<dl>\n  <dt id=\"arg1_arg2_..._argn_2\"><code>arg1, arg2, ... argN</code></dt>\n  <dd>\n    <p>함수가 형식 매개변수로 사용할 0개 이상의 이름. 모두 올바른 JavaScript 식별자, 또는 쉼표로 구분한 식별자 목록이어야 합니다. (\"<code>x</code>\", \"<code>theValue</code>\", \"<code>a,b</code>\" 등)</p>\n  </dd>\n  <dt id=\"functionbody_2\"><code>functionBody</code></dt>\n  <dd>\n    <p>함수 본문으로 사용할 JavaScript 명령문을 담은 문자열.</p>\n  </dd>\n</dl>\n<p><code>GeneratorFunction</code> 생성자를 함수로 호출(<code>new</code> 연산자 없이 호출)하는 것도 동일하게 동작합니다.</p>","titleAsText":"GeneratorFunction 생성자"}},{"type":"prose","value":{"id":"함수_매개변수","title":"함수 매개변수","isH3":false,"content":""}},{"type":"prose","value":{"id":"매개변수_기본_값","title":"매개변수 기본 값","isH3":true,"content":"<p>매개변수 기본 값을 사용하면, 값을 전달하지 않았거나 <code>undefined</code>를 전달한 경우 형식 매개변수를 기본 값으로 초기화할 수 있습니다. <a href=\"/ko/docs/Web/JavaScript/Reference/Functions/Default_parameters\">매개변수 기본 값</a>에서 자세한 정보를 확인하세요.</p>"}},{"type":"prose","value":{"id":"나머지_매개변수","title":"나머지 매개변수","isH3":true,"content":"<p>나머지 매개변수 구문은 정해지지 않은 임의 수의 매개변수를 배열로서 나타낼 수 있습니다. <a href=\"/ko/docs/Web/JavaScript/Reference/Functions/rest_parameters\">나머지 매개변수</a>에서 자세한 정보를 확인하세요.</p>"}},{"type":"prose","value":{"id":"arguments_객체","title":"<code>arguments</code> 객체","isH3":false,"content":"<p>함수 본문 내에서 <code>arguments</code> 객체를 사용해서 함수의 인수를 참조할 수 있습니다. <a href=\"/ko/docs/Web/JavaScript/Reference/Functions/arguments\"><code>arguments</code></a> 문서를 참고하세요.</p>\n<ul>\n  <li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/arguments\"><code>arguments</code></a>: 현재 실행 중인 함수에 전달된 인수를 담은 유사 배열 객체입니다.</li>\n  <li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/arguments/callee\"><code>arguments.callee</code></a>: 현재 실행 중인 함수입니다.</li>\n  <li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/arguments/caller\" class=\"page-not-created\" title=\"This is a link to an unwritten page\"><code>arguments.caller</code></a>: 현재 실행 중인 함수를 호출한 함수입니다.</li>\n  <li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/arguments/length\"><code>arguments.length</code></a>: 함수에 전달한 인수의 수입니다.</li>\n</ul>","titleAsText":"arguments 객체"}},{"type":"prose","value":{"id":"메서드_함수_정의하기","title":"메서드 함수 정의하기","isH3":false,"content":""}},{"type":"prose","value":{"id":"접근자와_설정자_함수","title":"접근자와 설정자 함수","isH3":true,"content":"<p>속성 추가를 지원하는 객체라면 내장 객체와 사용자 정의 객체 양쪽 모두에 접근자 메서드와 설정자 메서드를 정의할 수 있습니다. 접근자와 설정자 정의 구문은 객체 리터럴 구문을 사용합니다.</p>\n<dl>\n  <dt id=\"get\"><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/get\"><code>get</code></a></dt>\n  <dd>\n    <p>객체의 속성에 접근하면 호출할 함수를 바인딩합니다.</p>\n  </dd>\n  <dt id=\"set\"><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/set\"><code>set</code></a></dt>\n  <dd>\n    <p>객체의 속성에 할당을 시도하면 호출할 함수를 바인딩합니다.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"메서드_정의_구문","title":"메서드 정의 구문","isH3":true,"content":"<p>ECMAScript 2015부터는 메서드 역시 접근자/설정자와 유사한 짧은 구문으로 정의할 수 있습니다. <a href=\"/ko/docs/Web/JavaScript/Reference/Functions/Method_definitions\">메서드 정의</a> 문서를 참고하세요.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"생성자_vs._선언문_vs._표현식","title":"생성자 vs. 선언문 vs. 표현식","isH3":false,"content":"<p>아래의 세 코드 조각을 비교해보세요.</p>\n<p><code>multiply</code> 변수에 <code>Function</code> 생성자로 정의한 함수를 할당하는 코드입니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> multiply <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'return x * y'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>multiply</code>라는 이름의 함수를 선언하는 선언문입니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>multiply</code> 변수에 익명 함수 표현식을 할당하는 코드입니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">multiply</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>multiply</code> 변수에 이름이 <code>func_name</code>인 함수 표현식을 할당하는 코드입니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">multiply</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">func_name</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"차이","title":"차이","isH3":true,"content":"<p>세 코드 모두 비슷한 일을 하지만, 몇 가지 작은 차이가 존재합니다.</p>\n<p>우선, 함수의 이름과 함수를 할당한 변수는 서로 다릅니다. 함수의 이름은 바꿀 수 없으나, 함수를 할당한 변수는 다시 할당할 수 있습니다. 또한 (함수 표현식의 경우) 함수의 이름은 자신의 본문에서만 사용할 수 있습니다. 외부에서 사용하려고 시도하면, 이전에 함수 이름과 같은 변수를 <code>var</code>로 선언한 경우 <code>undefined</code>, 그 외의 경우 오류가 발생합니다. 예를 들면...</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">y</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 오류 발생</span>\n</code></pre></div>\n<p>함수 이름은 함수가 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function</code>의 <code>toString()</code> 메서드</a>를 통해 직렬화되는 경우에도 보입니다.</p>\n<p>함수 이름과 달리, 함수를 할당한 변수는 자신의 스코프에 의해서만 제한되며 이 스코프는 함수 선언의 스코프를 반드시 포함합니다.</p>\n<p>네 번째 코드 조각에서 볼 수 있듯, 함수의 이름과 함수를 할당한 변수의 이름은 서로 다를 수 있으며 둘 사이에는 아무 관계도 없습니다. 그런데 함수 선언의 경우 함수 이름과 동일한 이름의 변수 또한 생성합니다. 따라서, 함수 표현식으로 정의하는 함수와 달리, 함수 선언으로 정의한 함수는 자신의 스코프 내에서 이름으로 접근할 수 있습니다.</p>\n<p><code>new Function</code>으로 정의한 함수는 이름을 갖지 않습니다.</p>\n<p>함수 표현식이나 <code>Function</code> 생성자로 정의한 함수와 달리, 함수 선언으로 정의한 함수는 자신의 선언보다 앞서 먼저 호출하는 것이 가능합니다. 예를 들면...</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 안녕! 경고창 등장</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'안녕!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>함수 표현식과 함수 선언으로 정의하는 함수는 현재 스코프를 상속합니다. 즉, 함수가 클로저를 형성합니다. 반면 <code>Function</code> 생성자로 정의한 함수는 (다른 모든 함수가 상속하는) 전역 스코프를 제외하면 어떠한 스코프도 상속하지 않습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/*\n * Declare and initialize a variable 'p' (global)\n * and a function 'myFunc' (to change the scope) inside which\n * declare a varible with same name 'p' (current) and\n * define three functions using three different ways:-\n *     1. function declaration\n *     2. function expression\n *     3. function constructor\n * each of which will log 'p'\n */</span>\n<span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">decl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">expr</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> cons <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\tconsole.log(p);'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">decl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">cons</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n * Logs:-\n * 9  - for 'decl' by function declaration (current scope)\n * 9  - for 'expr' by function expression (current scope)\n * 5  - for 'cons' by Function constructor (global scope)\n */</span>\n</code></pre></div>\n<p>함수 표현식과 함수 선언으로 정의한 함수에 대해서는 한 번만 구문 분석을 수행하지만, <code>Function</code> 생성자로 정의한 함수의 경우 아닙니다. <code>Function</code> 생성자로 정의한 함수를 호출하면 매번 함수 본문 문자열을 새로 파싱해야 합니다. 함수 표현식의 경우 매번 새로운 클로저를 생성하지만, 함수 본문을 다시 파싱하지는 않습니다. 따라서 함수 표현식 역시 \"<code>new Function(...)</code>\"보다 빠릅니다. 그러니 가능하다면 <code>Function</code> 생성자를 피해야 합니다.</p>\n<p>단, 함수 표현식의 본문 문자열 내에서 정의하는 함수 표현식과 선언 본문은 다시 파싱하지 않습니다. 예를 들면...</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"var bar = \\'FOO!\\';\\nreturn(function() {\\n\\talert(bar);\\n});\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 함수 본문 문자열의 \"function() {\\n\\talert(bar);\\n}\" 부분은 다시 파싱하지 않음</span>\n</code></pre></div>\n<p>함수 선언은 아주 쉽게 (때로는 무심코) 함수 표현식으로 바꿀 수 있습니다. 다음 두 가지 중 하나라도 만족할 경우 함수 선언이 아니라 함수 표현식이 됩니다.</p>\n<ul>\n  <li>표현식의 일부가 될 때</li>\n  <li>함수나 스크립트의 '본 요소'가 아닌 경우. '본 요소'는 함수나 스크립트 본문의, 중첩되지 않은 명령문을 의미합니다.</li>\n</ul>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// 본 요소</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>            <span class=\"token comment\">// 본 요소</span>\n   x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// 본 요소가 아님</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">boo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>     <span class=\"token comment\">// 본 요소가 아님</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>         <span class=\"token comment\">// 본 요소</span>\n   <span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 본 요소</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>     <span class=\"token comment\">// 본 요소</span>\n   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>     <span class=\"token comment\">// 본 요소</span>\n      <span class=\"token keyword\">function</span> <span class=\"token function\">blah</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 본 요소가 아님</span>\n      y<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// 본 요소가 아님</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"예제","title":"예제","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 함수 선언</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 함수 표현식</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 함수 표현식</span>\n<span class=\"token function-variable function\">x</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// 함수 표현식</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">world</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 함수 선언</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// 함수 선언</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 함수 표현식</span>\n      <span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"블록_레벨_함수","title":"블록 레벨 함수","isH3":false,"content":"<p>ES2015부터, <a href=\"/ko/docs/Web/JavaScript/Reference/Strict_mode\">엄격 모드</a>에서는 블록 내의 함수 범위가 해당 블록으로 제한됩니다. ES2015 이전에는 블록 레벨 함수를 엄격 모드에서 사용할 수 없었습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// 엄격 모드가 아닐 경우 f() === 2</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"비엄격_모드의_블록_레벨_함수","title":"비엄격 모드의 블록 레벨 함수","isH3":true,"content":"<p>한 마디로, 안 됩니다.</p>\n<p>비엄격 모드에서의 블록 내 함수 선언은 이상하게 동작합니다. 예를 들어,</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shouldDefineZero<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">zero</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 위험: 호환성 위험</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zero입니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ES2015에 따르면 <code>shouldDefineZero</code>가 거짓인 경우, <code>zero</code>를 정의해선 안된다고 합니다. 조건문의 블록을 실행하지 않기 때문입니다. 그러나 이는 새롭게 명세에 추가된 부분으로, 이전엔 동작을 정의하지 않았습니다. 따라서 일부 브라우저에서는 블록의 실행 유무에 관계 없이 <code>zero</code>를 정의할 수 있습니다.</p>\n<p><a href=\"/ko/docs/Web/JavaScript/Reference/Strict_mode\">엄격 모드</a> 아래에서는 ES2015를 지원하는 브라우저라면 모두 <code>shouldDefineZero</code>가 참일 때, <code>if</code> 블록 스코프에 한정해 <code>zero</code>를 정의할 것입니다.</p>\n<p>함수를 조건적으로 정의하는 더 안전한 방법은 함수 표현식을 변수에 할당하는 것입니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> zero<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function-variable function\">zero</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zero입니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"예제_2","title":"예제","isH3":false,"content":""}},{"type":"prose","value":{"id":"숫자_서식화","title":"숫자 서식화","isH3":true,"content":"<p>다음 예제는 주어진 숫자에 선행 0을 추가해 원하는 길이로 맞추는 함수입니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">padZeros</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num<span class=\"token punctuation\">,</span> totalLen</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">var</span> numStr <span class=\"token operator\">=</span> num<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// 반환 값을 문자열로 초기화</span>\n   <span class=\"token keyword\">var</span> numZeros <span class=\"token operator\">=</span> totalLen <span class=\"token operator\">-</span> numStr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 필요한 0의 수 계산</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> numZeros<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      numStr <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span> <span class=\"token operator\">+</span> numStr<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> numStr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>다음 명령문에서 <code>padZeros</code> 함수를 호출합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> result<span class=\"token punctuation\">;</span>\nresult <span class=\"token operator\">=</span> <span class=\"token function\">padZeros</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"0042\"</span>\nresult <span class=\"token operator\">=</span> <span class=\"token function\">padZeros</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"42\"</span>\nresult <span class=\"token operator\">=</span> <span class=\"token function\">padZeros</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"0005\"</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"함수_존재_여부_판단","title":"함수 존재 여부 판단","isH3":true,"content":"<p><code>typeof</code> 연산자를 사용하면 함수의 존재 여부를 판단할 수 있습니다. 아래 예제에서는 <code>window</code> 객체의 <code>noFunc</code>라는 속성이 함수인지 확인합니다. 그 후, 함수라면 호출하고, 함수가 아니면 임의의 다른 동작을 수행합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'function'</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">typeof</span> window<span class=\"token punctuation\">.</span>noFunc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// noFunc() 사용</span>\n <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// 다른 동작 수행</span>\n <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>if</code> 조건에 <code>noFunc</code>의 참조를 사용한 것에 주의하세요. 이름 뒤에 괄호 \"()\"를 붙이지 않았으므로 함수를 실제로 호출한 것은 아닙니다.</p>"}},{"type":"specifications","value":{"title":"명세","id":"명세","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-function-definitions","title":"ECMAScript Language Specification"}],"query":"javascript.functions"}},{"type":"browser_compatibility","value":{"title":"브라우저 호환성","id":"브라우저_호환성","isH3":false,"query":"javascript.functions","dataURL":"/ko/docs/Web/JavaScript/Reference/Functions/bcd.json"}},{"type":"prose","value":{"id":"같이_보기","title":"같이 보기","isH3":false,"content":"<ul>\n  <li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/function\"><code>function</code> 명령문</a></li>\n  <li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/function\"><code>function</code> 표현식</a></li>\n  <li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/function*\"><code>function*</code> 명령문</a></li>\n  <li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/function*\"><code>function*</code> 표현식</a></li>\n  <li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></li>\n  <li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\"><code>GeneratorFunction</code></a></li>\n  <li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">화살표 함수</a></li>\n  <li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/Default_parameters\">매개변수 기본 값</a></li>\n  <li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/rest_parameters\">나머지 매개변수</a></li>\n  <li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/arguments\"><code>arguments</code> 객체</a></li>\n  <li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/get\">접근자</a></li>\n  <li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/set\">설정자</a></li>\n  <li><a href=\"/ko/docs/Web/JavaScript/Reference/Functions/Method_definitions\">메서드 정의</a></li>\n</ul>"}}],"toc":[{"text":"설명","id":"설명"},{"text":"함수 정의하기","id":"함수_정의하기"},{"text":"함수 매개변수","id":"함수_매개변수"},{"text":"<code>arguments</code> 객체","id":"arguments_객체"},{"text":"메서드 함수 정의하기","id":"메서드_함수_정의하기"},{"text":"생성자 vs. 선언문 vs. 표현식","id":"생성자_vs._선언문_vs._표현식"},{"text":"블록 레벨 함수","id":"블록_레벨_함수"},{"text":"예제","id":"예제_2"},{"text":"명세","id":"명세"},{"text":"브라우저 호환성","id":"브라우저_호환성"},{"text":"같이 보기","id":"같이_보기"}],"summary":"보통 함수란 자신의 외부(재귀 함수의 경우 스스로) 코드가 '호출'할 수 있는 하위 프로그램입니다. 프로그램과 마찬가지로, 함수 역시 명령문의 시퀀스로 구성된 함수 본문을 가집니다. 함수에 값을 '전달'하면, 함수는 값을 '반환'할 것입니다.","popularity":0.0009,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Functions","locale":"en-US","native":"English (US)"},{"title":"Funciones","locale":"es","native":"Español"},{"title":"Fonctions et portée des fonctions","locale":"fr","native":"Français"},{"title":"関数","locale":"ja","native":"日本語"},{"title":"Funções","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Функции","locale":"ru","native":"Русский"},{"title":"函数","locale":"zh-CN","native":"中文 (简体)"},{"title":"Functions","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ko/web/javascript/reference/functions","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/web/javascript/reference/functions/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ko/docs/Web","title":"개발자를 위한 웹 기술"},{"uri":"/ko/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/ko/docs/Web/JavaScript/Reference","title":"JavaScript 참고서"},{"uri":"/ko/docs/Web/JavaScript/Reference/Functions","title":"함수"}],"pageTitle":"함수 - JavaScript | MDN","noIndexing":false}}