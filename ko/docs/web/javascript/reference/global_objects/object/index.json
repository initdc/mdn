{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Object","mdn_url":"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object","locale":"ko","native":"한국어","sidebarHTML":"<ol><li><strong><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects\">Standard built-in objects</a></strong></li><li><strong><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>Properties</strong></a><ol><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>Methods</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code> <small>(en-US)</small></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code> <small>(en-US)</small></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"><code>Object.assign()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/create\"><code>Object.create()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties\"><code>Object.defineProperties()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\"><code>Object.entries()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\"><code>Object.freeze()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries\"><code>Object.fromEntries()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\"><code>Object.getOwnPropertyDescriptor()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors\"><code>Object.getOwnPropertyDescriptors()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\"><code>Object.getOwnPropertyNames()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols\"><code>Object.getOwnPropertySymbols()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\"><code>Object.getPrototypeOf()</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn\"><code>Object.hasOwn()</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/is\"><code>Object.is()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\"><code>Object.isExtensible()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\"><code>Object.isFrozen()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\"><code>Object.isSealed()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\"><code>Object.keys()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\"><code>Object.preventExtensions()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\"><code>Object.seal()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/values\"><code>Object.values()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>Object</code></strong> 클래스는 <a href=\"/ko/docs/Web/JavaScript/Data_structures\">JavaScript의 데이터 유형</a> 중 하나를 나타냅니다. 다양한 키 모음 및 더 복잡한 엔티티들을 저장하는 데 사용됩니다. 객체는 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/Object\"><code>Object()</code></a> 생성자 또는 <a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Object_initializer\">객체 초기자 / 리터럴 구문</a>를 통해 생성할 수 있습니다.</p>"}},{"type":"prose","value":{"id":"설명","title":"설명","isH3":false,"content":"<p>JavaScript의 거의 모든 객체는 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object\" aria-current=\"page\"><code>Object</code></a>의 인스턴스입니다. 일반적인 객체는 <code>Object.prototype</code>에서 속성(메서드 포함)을 상속하지만, 이러한 속성들은 가려질(재정의될) 수 있습니다. 그러나 <code>Object</code>는 의도적으로 가려지지 않게 생성되거나(예: <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/create\"><code>Object.create(null)</code></a>), 더이상 가려지지 않도록 변경될 수 있습니다(예: <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf</code></a>).</p>\n<p><code>Object</code> 프로토타입 객체에 대한 변경 사항은 해당 변경 사항의 대상이 되는 프로토타입 체인상의 속성 및 메서드가 추가로 재정의되지 않는 한 프로토타입 체인을 통해 <strong>모든</strong> 객체에서 볼 수 있습니다. 이것은 객체 동작을 재정의하거나 확장하는 매우 강력하지만 잠재적으로 위험한 메커니즘을 제공합니다.</p>\n<p><code>Object</code> 생성자는 주어진 값에 대한 객체 래퍼를 생성합니다.</p>\n<ul>\n  <li>값이 <a href=\"/ko/docs/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> 또는 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>이면 빈 객체를 생성하여 반환합니다.</li>\n  <li>그렇지 않으면 주어진 값에 해당하는 타입의 객체를 반환합니다.</li>\n  <li>값이 이미 객체인 경우 그 값을 반환합니다.</li>\n</ul>\n<p>생성자가 아닌 맥락에서 호출될 때 <code>Object</code>는 <code>new Object()</code>와 동일하게 작동합니다.</p>\n<p><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Object_initializer\">객체 초기자 / 리터럴 구문</a>도 참조하세요.</p>"}},{"type":"prose","value":{"id":"객체의_속성_삭제하기","title":"객체의 속성 삭제하기","isH3":true,"content":"<p>객체 자체에는 속성을 삭제하는 메서드가 없습니다(예: <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete\"><code>Map.prototype.delete()</code> <small>(en-US)</small></a>). 삭제하기 위해서는 <a href=\"/ko/docs/Web/JavaScript/Reference/Operators/delete\">delete 연산자</a>를 사용해야 합니다.</p>"}},{"type":"prose","value":{"id":"생성자","title":"생성자","isH3":false,"content":"<dl>\n  <dt id=\"object\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/Object\"><code>Object()</code></a></dt>\n  <dd>\n    <p>새 <code>Object</code> 객체를 만듭니다. 이 때 생성된 객체는 주어진 값에 대한 래퍼입니다.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"정적_메서드","title":"정적 메서드","isH3":false,"content":"<dl>\n  <dt id=\"object.assign\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"><code>Object.assign()</code></a></dt>\n  <dd>\n    <p>하나 이상의 원본 객체들로부터 모든 열거 가능한 속성들을 대상 객체로 복사합니다.</p>\n  </dd>\n  <dt id=\"object.create\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/create\"><code>Object.create()</code></a></dt>\n  <dd>\n    <p>지정한 프로토타입(prototype)의 객체 및 속성을 갖고 있는 새 객체를 생성합니다.</p>\n  </dd>\n  <dt id=\"object.defineproperty\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty()</code></a></dt>\n  <dd>\n    <p>지정한 서술자(descriptor)에서 서술한 속성을 객체에 추가합니다.</p>\n  </dd>\n  <dt id=\"object.defineproperties\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties\"><code>Object.defineProperties()</code></a></dt>\n  <dd>\n    <p>지정한 서술자들에서 서술한 속성들을 객체에 추가합니다.</p>\n  </dd>\n  <dt id=\"object.entries\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\"><code>Object.entries()</code></a></dt>\n  <dd>\n    <p>지정한 객체 <strong>자신의</strong> 모든 열거 가능한 문자열 속성들의 <code>[key, value]</code> 쌍으로 구성된 배열을 반환합니다.</p>\n  </dd>\n  <dt id=\"object.freeze\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\"><code>Object.freeze()</code></a></dt>\n  <dd>\n    <p>객체를 고정(freeze)합니다. 다른 곳의 코드에서 해당 속성을 삭제하거나 변경할 수 없게 됩니다.</p>\n  </dd>\n  <dt id=\"object.fromentries\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries\"><code>Object.fromEntries()</code></a></dt>\n  <dd>\n    <p><code>[key, value]</code> 쌍의 iterable로부터 새 객체를 반환합니다. (<a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\"><code>Object.entries</code></a>의 반대입니다.)</p>\n  </dd>\n  <dt id=\"object.getownpropertydescriptor\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\"><code>Object.getOwnPropertyDescriptor()</code></a></dt>\n  <dd>\n    <p>객체의 지정한 속성에 대한 속성 서술자를 반환합니다.</p>\n  </dd>\n  <dt id=\"object.getownpropertydescriptors\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors\"><code>Object.getOwnPropertyDescriptors()</code></a></dt>\n  <dd>\n    <p>객체 자신의 모든 속성 서술자들로 구성된 객체를 반환합니다.</p>\n  </dd>\n  <dt id=\"object.getownpropertynames\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\"><code>Object.getOwnPropertyNames()</code></a></dt>\n  <dd>\n    <p>지정한 객체 <strong>자신의</strong> 모든 열거 가능하거나 불가능한 속성들의 이름으로 구성된 배열을 반환합니다.</p>\n  </dd>\n  <dt id=\"object.getownpropertysymbols\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols\"><code>Object.getOwnPropertySymbols()</code></a></dt>\n  <dd>\n    <p>지정한 객체 자신의 모든 심볼 속성들로 구성된 배열을 반환합니다.</p>\n  </dd>\n  <dt id=\"object.getprototypeof\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\"><code>Object.getPrototypeOf()</code></a></dt>\n  <dd>\n    <p>지정한 객체의 프로토타입(내부 <code>[[Prototype]]</code> 속성)을 반환합니다.</p>\n  </dd>\n  <dt id=\"object.is\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/is\"><code>Object.is()</code></a></dt>\n  <dd>\n    <p>두 값이 같은지를 비교합니다. 모든 <code>NaN</code> 값을 같다고 처리합니다. (추상 동등 비교 및 ​​엄격한 동등 비교와 다른 점입니다.)</p>\n  </dd>\n  <dt id=\"object.isextensible\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\"><code>Object.isExtensible()</code></a></dt>\n  <dd>\n    <p>객체의 확장이 가능한지 여부를 확인합니다.</p>\n  </dd>\n  <dt id=\"object.isfrozen\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\"><code>Object.isFrozen()</code></a></dt>\n  <dd>\n    <p>객체가 고정(freeze)되었는지 여부를 확인합니다.</p>\n  </dd>\n  <dt id=\"object.issealed\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\"><code>Object.isSealed()</code></a></dt>\n  <dd>\n    <p>객체가 봉인(seal)되었는지 여부를 확인합니다.</p>\n  </dd>\n  <dt id=\"object.keys\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\"><code>Object.keys()</code></a></dt>\n  <dd>\n    <p>지정한 객체 <strong>자신의</strong> 모든 열거 가능한 문자열 속성들의 이름으로 구성된 배열을 반환합니다.</p>\n  </dd>\n  <dt id=\"object.preventextensions\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\"><code>Object.preventExtensions()</code></a></dt>\n  <dd>\n    <p>객체가 확장되지 못하도록 합니다.</p>\n  </dd>\n  <dt id=\"object.seal\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\"><code>Object.seal()</code></a></dt>\n  <dd>\n    <p>다른 코드가 객체의 속성을 삭제하지 못하도록 합니다.</p>\n  </dd>\n  <dt id=\"object.setprototypeof\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></dt>\n  <dd>\n    <p>객체의 프로토타입(내부 <code>[[Prototype]]</code> 속성)을 설정합니다.</p>\n  </dd>\n  <dt id=\"object.values\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/values\"><code>Object.values()</code></a></dt>\n  <dd>\n    <p>지정한 객체 <strong>자신의</strong> 모든 열거 가능한 문자열 속성에 해당하는 값들로 구성된 배열을 반환합니다.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"인스턴스_속성","title":"인스턴스 속성","isH3":false,"content":"<dl>\n  <dt id=\"object.prototype.constructor\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></dt>\n  <dd>\n    <p>객체의 프로토타입을 생성하는 함수를 지정합니다.</p>\n  </dd>\n  <dt id=\"object.prototype.__proto__\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></dt>\n  <dd>\n    <p>객체가 인스턴스화될 때 프로토타입으로 사용된 객체를 가리킵니다.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"인스턴스_메서드","title":"인스턴스 메서드","isH3":false,"content":"<dl>\n  <dt id=\"object.prototype.__definegetter__\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></dt>\n  <dd>\n    <p>액세스(get)할 때 실행되어 값을 반환하는 함수와 지정한 속성을 연결합니다.</p>\n  </dd>\n  <dt id=\"object.prototype.__definesetter___en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>설정(set)할 때 실행되어 해당 속성을 수정하는 함수와 지정한 속성을 연결합니다.</p>\n  </dd>\n  <dt id=\"object.prototype.__lookupgetter___en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>__defineGetter__()</code></a> 메서드에 의해 지정된 속성과 연결된 함수를 반환합니다.</p>\n  </dd>\n  <dt id=\"object.prototype.__lookupsetter___en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>__defineSetter__()</code> <small>(en-US)</small></a> 메서드에 의해 지정된 속성과 연결된 함수를 반환합니다.</p>\n  </dd>\n  <dt id=\"object.prototype.hasownproperty\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></dt>\n  <dd>\n    <p>객체에 지정한 속성이 해당 객체에 직접 포함되어 있고 프로토타입 체인을 통해 상속되지 않는지 여부를 나타내는 불리언 값을 반환합니다.</p>\n  </dd>\n  <dt id=\"object.prototype.isprototypeof\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></dt>\n  <dd>\n    <p>이 메서드를 호출한 객체가 지정한 객체의 프로토타입 체인에 있는지 여부를 나타내는 불리언 값을 반환합니다.</p>\n  </dd>\n  <dt id=\"object.prototype.propertyisenumerable\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></dt>\n  <dd>\n    <p>내부 <a href=\"/ko/docs/Web/JavaScript/Data_structures##%ec%86%8d%ec%84%b1_properties\">ECMAScript [[Enumerable]] 속성</a>이 설정되었는지 여부를 나타내는 불리언 값을 반환합니다.</p>\n  </dd>\n  <dt id=\"object.prototype.tolocalestring\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></dt>\n  <dd>\n    <p><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>toString()</code></a>를 호출합니다.</p>\n  </dd>\n  <dt id=\"object.prototype.tostring\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></dt>\n  <dd>\n    <p>객체의 문자열 표현을 반환합니다.</p>\n  </dd>\n  <dt id=\"object.prototype.valueof\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></dt>\n  <dd>\n    <p>지정한 객체의 원시 값을 반환합니다.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"예제","title":"예제","isH3":false,"content":""}},{"type":"prose","value":{"id":"undefined_및_null_타입을_지정한_object_사용","title":"<code>undefined</code> 및 <code>null</code> 타입을 지정한 <code>Object</code> 사용","isH3":true,"content":"<p>다음 예제는 변수 <code>o</code>에 빈 <code>Object</code> 객체를 저장합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n</code></pre></div>","titleAsText":"undefined 및 null 타입을 지정한 Object 사용"}},{"type":"prose","value":{"id":"object로_boolean_객체_생성하기","title":"<code>Object</code>로 <code>Boolean</code> 객체 생성하기","isH3":true,"content":"<p>다음 예제는 변수 <code>o</code>에 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> 객체를 저장합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// o = new Boolean(true) 와 같음</span>\n<span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// o = new Boolean(false) 와 같음</span>\n<span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre></div>","titleAsText":"Object로 Boolean 객체 생성하기"}},{"type":"prose","value":{"id":"객체_프로토타입","title":"객체 프로토타입","isH3":true,"content":"<p>기존 <code>Object.prototype</code> 메서드의 동작을 변경하고자 할 때에는 기존 내용의 앞이나 뒤에 확장할 내용을 래핑하여 코드를 주입하는 것을 고려하세요. 예를 들어, 이 (테스트되지 않은) 코드는 기본 제공 코드 또는 다른 사람의 확장 실행되기 전에 사전 조건부로 사용자 정의 코드를 실행합니다.</p>\n<p>함수가 호출되면 호출에 대한 매개변수가 유사배열 \"변수\" <a href=\"/ko/docs/Web/JavaScript/Reference/Functions/arguments\">arguments 객체</a>에 보관됩니다. 예를 들어, <code>myFn(a, b, c)</code>를 호출하면 <code>myFn</code> 본문 내의 arguments 객체에는 <code>(a, b, c)</code>에 해당하는 3개의 유사배열요소가 포함됩니다.</p>\n<p>hook을 통해 프로토타입을 수정하고자 할 때엔 해당 함수에서 <code>apply()</code>를 호출하면서 <code>this</code>와 arguments 객체를 현재 동작에 전달합니다. 이 패턴은 <code>Node.prototype</code>, <code>Function.prototype</code> 등 모든 프로토타입에 적용할 수 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> current <span class=\"token operator\">=</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>valueOf<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 내가 지정한 속성 \"-prop-value\"은 범분야에 걸쳐 사용되고 있고</span>\n<span class=\"token comment\">// 항상 동일한 프로토타입 체인에 있지 않기 때문에, Object.prototype을 수정하고 싶습니다.</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">valueOf</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-prop-value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token string\">'-prop-value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 내가 만든 객체가 아닌 것 같으므로,</span>\n    <span class=\"token comment\">// 가능한 최선을 다해 원래의 동작을 재현하여 기본 동작으로 돌아가겠습니다.</span>\n    <span class=\"token comment\">// 'apply' 메서드는 다른 언어에서의 'super'처럼 작동합니다.</span>\n    <span class=\"token comment\">// valueOf()가 arguments를 취하지 않더라도, 다른 hook이 있으리라 생각합니다.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">current</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>JavaScript에는 명확한 하위 클래스 객체가 없기 때문에, 프로토타입은 특정 기능의 \"기본 클래스\" 객체를 만드는 데 유용한 해결 방법입니다. 예를 들어:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Person</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>canTalk <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">greet</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>canTalk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hi, I am '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Employee</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> title</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">Person</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Employee</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Employee</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> Employee<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Object.prototype.constructor를 Employee로 설정하지 않으면</span>\n                                           <span class=\"token comment\">// Person (parent)의 prototype.constructor를 사용합니다.</span>\n                                           <span class=\"token comment\">// 이를 피하기 위해 prototype.constructor를 Employee (child)로 설정합니다.</span>\n<span class=\"token class-name\">Employee</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">greet</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>canTalk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hi, I am '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">', the '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Customer</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">Person</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Customer</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Customer</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> Customer<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Object.prototype.constructor를 Customer로 설정하지 않으면</span>\n                                           <span class=\"token comment\">// Person (parent)의 prototype.constructor를 사용합니다.</span>\n                                           <span class=\"token comment\">// 이를 피하기 위해 prototype.constructor를 Customer (child)로 설정합니다.</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Mime</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">Person</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>canTalk <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Mime</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Mime</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> Mime<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Object.prototype.constructor를 Mime로 설정하지 않으면</span>\n                                   <span class=\"token comment\">// Person (parent)의 prototype.constructor를 사용합니다.</span>\n                                   <span class=\"token comment\">// 이를 피하기 위해 prototype.constructor를 Mime (child)로 설정합니다.</span>\n\n<span class=\"token keyword\">var</span> bob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Builder'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> joe <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Joe'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> rg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Red Green'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Handyman'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> mike <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mike'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> mime <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mime</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mime'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbob<span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Hi, I am Bob, the Builder</span>\n\njoe<span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Hi, I am Joe</span>\n\nrg<span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Hi, I am Red Green, the Handyman</span>\n\nmike<span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Hi, I am Mike</span>\n\nmime<span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"명세","id":"명세","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object-objects","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.Object"}},{"type":"browser_compatibility","value":{"title":"브라우저 호환성","id":"브라우저_호환성","isH3":false,"query":"javascript.builtins.Object","dataURL":"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/bcd.json"}},{"type":"prose","value":{"id":"같이_보기","title":"같이 보기","isH3":false,"content":"<ul>\n  <li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/Object_initializer\">객체 초기자</a></li>\n</ul>"}}],"toc":[{"text":"설명","id":"설명"},{"text":"생성자","id":"생성자"},{"text":"정적 메서드","id":"정적_메서드"},{"text":"인스턴스 속성","id":"인스턴스_속성"},{"text":"인스턴스 메서드","id":"인스턴스_메서드"},{"text":"예제","id":"예제"},{"text":"명세","id":"명세"},{"text":"브라우저 호환성","id":"브라우저_호환성"},{"text":"같이 보기","id":"같이_보기"}],"summary":"Object 클래스는 JavaScript의 데이터 유형 중 하나를 나타냅니다. 다양한 키 모음 및 더 복잡한 엔티티들을 저장하는 데 사용됩니다. 객체는 Object() 생성자 또는 객체 초기자 / 리터럴 구문를 통해 생성할 수 있습니다.","popularity":0.0021,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Object","locale":"en-US","native":"English (US)"},{"title":"Object","locale":"es","native":"Español"},{"title":"Object","locale":"fr","native":"Français"},{"title":"Object","locale":"ja","native":"日本語"},{"title":"Object","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Object","locale":"ru","native":"Русский"},{"title":"Object","locale":"zh-CN","native":"中文 (简体)"},{"title":"Object","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ko/web/javascript/reference/global_objects/object","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/web/javascript/reference/global_objects/object/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ko/docs/Web","title":"개발자를 위한 웹 기술"},{"uri":"/ko/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/ko/docs/Web/JavaScript/Reference","title":"JavaScript 참고서"},{"uri":"/ko/docs/Web/JavaScript/Reference/Global_Objects","title":"표준 내장 객체"},{"uri":"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object","title":"Object"}],"pageTitle":"Object - JavaScript | MDN","noIndexing":false}}