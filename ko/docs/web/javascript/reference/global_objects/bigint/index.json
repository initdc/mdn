{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"BigInt","mdn_url":"/ko/docs/Web/JavaScript/Reference/Global_Objects/BigInt","locale":"ko","native":"한국어","sidebarHTML":"<ol><li><strong><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects\">Standard built-in objects</a></strong></li><li><strong><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>Methods</strong></a><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asIntN\"><code>BigInt.asIntN()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asUintN\"><code>BigInt.asUintN()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toLocaleString\"><code>BigInt.prototype.toLocaleString()</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toString\"><code>BigInt.prototype.toString()</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/valueOf\"><code>BigInt.prototype.valueOf()</code> <small>(en-US)</small></a></li></ol></li><li><strong>Inheritance:</strong></li><li><strong><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li><a href=\"#\"><strong>Properties</strong></a><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code> <small>(en-US)</small></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function.prototype.displayName</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function.prototype.length</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function.prototype.name</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function.prototype.prototype</code></a></li></ol></li><li><a href=\"#\"><strong>Methods</strong></a><ol><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></li><li><strong><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>Properties</strong></a><ol><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>Methods</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code> <small>(en-US)</small></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code> <small>(en-US)</small></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>**<code>BigInt</code>**는 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> 원시 값이 안정적으로 나타낼 수 있는 최대치인 2^53 - 1보다 큰 정수를 표현할 수 있는 내장 객체입니다.</p>"}},{"type":"prose","value":{"id":"설명","title":"설명","isH3":false,"content":"<p><code>BigInt</code>는 정수 리터럴의 뒤에 <code>n</code>을 붙이거나(<code>10n</code>) 함수 <code>BigInt()</code>를 호출해 생성할 수 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> theBiggestInt <span class=\"token operator\">=</span> <span class=\"token number\">9007199254740991n</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> alsoHuge <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">9007199254740991</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ 9007199254740991n</span>\n\n<span class=\"token keyword\">const</span> hugeString <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"9007199254740991\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ 9007199254740991n</span>\n\n<span class=\"token keyword\">const</span> hugeHex <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x1fffffffffffff\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ 9007199254740991n</span>\n\n<span class=\"token keyword\">const</span> hugeBin <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0b11111111111111111111111111111111111111111111111111111\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ 9007199254740991n</span>\n</code></pre></div>\n<p><code>BigInt</code>와 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>는 어떤 면에서 비슷하지만 중요한 차이점이 있습니다. 예컨대 <code>BigInt</code>는 내장 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Math\"><code>Math</code></a> 객체의 메서드와 함께 사용할 수 없고, 연산에서 <code>Number</code>와 혼합해 사용할 수 없습니다. 따라서 먼저 같은 자료형으로 변환해야 합니다. 그러나, <code>BigInt</code>가 <code>Number</code>로 바뀌면 정확성을 잃을 수 있으니 주의해야 합니다.</p>"}},{"type":"prose","value":{"id":"자료형_정보","title":"자료형 정보","isH3":true,"content":"<p><code>BigInt</code>의 <code>typeof</code> 판별 결과는 <code>\"bigint\"</code>입니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> <span class=\"token number\">1n</span> <span class=\"token operator\">===</span> <span class=\"token string\">'bigint'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'bigint'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a>로 감싼 <code>BigInt</code>는 일반적인 <code>object</code> 자료형으로 취급합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token number\">1n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"연산자","title":"연산자","isH3":true,"content":"<p><code>+</code>, <code>*</code>, <code>-</code>, <code>**</code>, <code>%</code> 연산자를 <code>BigInt</code>나 객체로 감싼 <code>BigInt</code>에서 사용할 수 있습니다. <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">비트 연산자 (en-US)</a>도 사용할 수 있으나, 모든 <code>BigInt</code>는 부호를 가져야 하므로 <code>&gt;&gt;&gt;</code> (부호 버림 오른쪽 시프트)는 사용할 수 없습니다. <a href=\"https://github.com/tc39/proposal-bigint/blob/master/ADVANCED.md#dont-break-asmjs\" class=\"external\" rel=\" noopener\">asm.js에서 문제를 일으키지 않도록</a>, 단항 <code>+</code> 연산자도 지원하지 않습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> previousMaxSafe <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_SAFE_INTEGER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ 9007199254740991</span>\n\n<span class=\"token keyword\">const</span> maxPlusOne <span class=\"token operator\">=</span> previousMaxSafe <span class=\"token operator\">+</span> <span class=\"token number\">1n</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ 9007199254740992n</span>\n\n<span class=\"token keyword\">const</span> theFuture <span class=\"token operator\">=</span> previousMaxSafe <span class=\"token operator\">+</span> <span class=\"token number\">2n</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ 9007199254740993n, this works now!</span>\n\n<span class=\"token keyword\">const</span> multi <span class=\"token operator\">=</span> previousMaxSafe <span class=\"token operator\">*</span> <span class=\"token number\">2n</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ 18014398509481982n</span>\n\n<span class=\"token keyword\">const</span> subtr <span class=\"token operator\">=</span> multi – <span class=\"token number\">10n</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ 18014398509481972n</span>\n\n<span class=\"token keyword\">const</span> mod <span class=\"token operator\">=</span> multi <span class=\"token operator\">%</span> <span class=\"token number\">10n</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ 2n</span>\n\n<span class=\"token keyword\">const</span> bigN <span class=\"token operator\">=</span> <span class=\"token number\">2n</span> <span class=\"token operator\">**</span> <span class=\"token number\">54n</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ 18014398509481984n</span>\n\nbigN <span class=\"token operator\">*</span> <span class=\"token operator\">-</span><span class=\"token number\">1n</span>\n<span class=\"token comment\">// ↪ –18014398509481984n</span>\n</code></pre></div>\n<p><code>/</code> 연산자도 정수 연산에서 예상할 수 있는 결과를 동일하게 도출합니다. 그러나 <code>BigInt</code>는 <code>BigDecimal</code>이 아니므로, 연산의 결과는 언제나 소수점 이하를 버립니다. 즉, 정수가 아닌 결과는 나오지 않습니다.</p>\n<div class=\"notecard warning\" id=\"sect1\">\n  <p><strong>경고:</strong> 소수점 결과를 포함하는 연산을 <code>BigInt</code>와 사용하면 소수점 이하는 사라집니다.</p>\n</div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> expected <span class=\"token operator\">=</span> <span class=\"token number\">4n</span> <span class=\"token operator\">/</span> <span class=\"token number\">2n</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ 2n</span>\n\n<span class=\"token keyword\">const</span> rounded <span class=\"token operator\">=</span> <span class=\"token number\">5n</span> <span class=\"token operator\">/</span> <span class=\"token number\">2n</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ 2.5n이 아니라 2n</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"비교","title":"비교","isH3":true,"content":"<p><code>BigInt</code>는 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>와 일치하지 않지만 동등합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token number\">0n</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span>\n<span class=\"token comment\">// ↪ false</span>\n\n<span class=\"token number\">0n</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n<span class=\"token comment\">// ↪ true</span>\n</code></pre></div>\n<p><code>Number</code>와 <code>BigInt</code>는 일반적인 방법으로 비교할 수 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token number\">1n</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span>\n<span class=\"token comment\">// ↪ true</span>\n\n<span class=\"token number\">2n</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span>\n<span class=\"token comment\">// ↪ true</span>\n\n<span class=\"token number\">2</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span>\n<span class=\"token comment\">// ↪ false</span>\n\n<span class=\"token number\">2n</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span>\n<span class=\"token comment\">// ↪ false</span>\n\n<span class=\"token number\">2n</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">2</span>\n<span class=\"token comment\">// ↪ true</span>\n</code></pre></div>\n<p>배열의 요소로 함께 사용했을 땐 정렬도 가능합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> mixed <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4n</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">12n</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0n</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪  [4n, 6, -12n, 10, 4, 0, 0n]</span>\n\nmixed<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ [-12n, 0, 0n, 10, 4n, 4, 6]</span>\n</code></pre></div>\n<p><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a>로 감싼 <code>BigInt</code>의 경우 다른 객체와 마찬가지로 자기 자신과 비교했을 때만 일치합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token number\">0n</span> <span class=\"token operator\">===</span> <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token number\">0n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token number\">0n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token number\">0n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n\n<span class=\"token keyword\">const</span> o <span class=\"token operator\">=</span> <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token number\">0n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\no <span class=\"token operator\">===</span> o <span class=\"token comment\">// true</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"조건","title":"조건","isH3":true,"content":"<p><code>BigInt</code>는 다음의 상황에서는 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>처럼 행동합니다.</p>\n<ul>\n  <li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> 함수를 사용해 Boolean 객체로 변환</li>\n  <li><a href=\"/ko/docs/Web/JavaScript/Reference/Operators/%EB%85%BC%EB%A6%AC_%EC%97%B0%EC%82%B0%EC%9E%90(Logical_Operators)\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">논리 연산자</a> <code>||</code>, <code>&amp;&amp;</code>, <code>!</code>와 함께 사용</li>\n  <li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/if...else\"><code>if</code></a>문 등 조건 판별 시</li>\n</ul>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'if에서 안녕!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'else에서 안녕!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ↪ \"else에서 안녕!\"</span>\n\n<span class=\"token number\">0n</span> <span class=\"token operator\">||</span> <span class=\"token number\">12n</span>\n<span class=\"token comment\">// ↪ 12n</span>\n\n<span class=\"token number\">0n</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">12n</span>\n<span class=\"token comment\">// ↪ 0n</span>\n\n<span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">0n</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ↪ false</span>\n\n<span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">12n</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ↪ true</span>\n\n<span class=\"token operator\">!</span><span class=\"token number\">12n</span>\n<span class=\"token comment\">// ↪ false</span>\n\n<span class=\"token operator\">!</span><span class=\"token number\">0n</span>\n<span class=\"token comment\">// ↪ true</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"생성자","title":"생성자","isH3":false,"content":"<dl>\n  <dt id=\"bigint\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt\"><code>BigInt()</code></a></dt>\n  <dd>\n    <p><code>BigInt</code> 객체를 생성합니다.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"정적_메서드","title":"정적 메서드","isH3":false,"content":"<dl>\n  <dt id=\"bigint.asintn_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asIntN\"><code>BigInt.asIntN()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>주어진 <code>BigInt</code>를 <code>-2^(width - 1)</code>과 <code>2^(width - 1) - 1</code>의 범위로 자릅니다.</p>\n  </dd>\n  <dt id=\"bigint.asuintn_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asUintN\"><code>BigInt.asUintN()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>주어진 <code>BigInt</code>를 <code>0</code>과 <code>2^width - 1</code>의 범위로 자릅니다.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"인스턴스_메서드","title":"인스턴스 메서드","isH3":false,"content":"<dl>\n  <dt id=\"bigint.prototype.tolocalestring_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toLocaleString\"><code>BigInt.prototype.toLocaleString()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>BigInt를 주어진 언어에 적합한 형태를 가진 문자열로 변환해 반환합니다. <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a> 메서드를 재정의합니다.</p>\n  </dd>\n  <dt id=\"bigint.prototype.tostring\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toString\"><code>BigInt.prototype.toString()</code></a></dt>\n  <dd>\n    <p><code>BigInt</code>의 값을 주어진 진수로 표현한 문자열을 반환합니다. <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a> 메서드를 재정의합니다.</p>\n  </dd>\n  <dt id=\"bigint.prototype.valueof_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/valueOf\"><code>BigInt.prototype.valueOf()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p><code>BigInt</code> 객체의 원시 값 표현을 반환합니다. <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a> 메서드를 재정의합니다.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"권장사항","title":"권장사항","isH3":false,"content":""}},{"type":"prose","value":{"id":"변환","title":"변환","isH3":true,"content":"<p><code>BigInt</code>를 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>로 변환하는 과정에서 정확도를 유실할 수 있으므로, 2^53보다 큰 값을 예상할 수 있는 경우 <code>BigInt</code>만 사용하는 것이 좋습니다.</p>"}},{"type":"prose","value":{"id":"암호화","title":"암호화","isH3":true,"content":"<p><code>BigInt</code>가 지원하는 연산의 소요시간은 상수 시간이 아니기 때문에 <a href=\"https://www.chosenplaintext.ca/articles/beginners-guide-constant-time-cryptography.html\" class=\"external\" rel=\" noopener\">암호화에 적합하지 않습니다</a>.</p>"}},{"type":"prose","value":{"id":"json과_함께_사용하기","title":"JSON과 함께 사용하기","isH3":true,"content":"<p><code>BigInt</code>는 직렬화할 수 없기 때문에, <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a>에 <code>BigInt</code>를 포함한 값을 전달한다면 <code>TypeError</code>가 발생합니다. 대신, 필요한 경우 자신만의 <code>toJSON</code> 메서드를 만들 수 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token class-name\">BigInt</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">toJSON</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>이제 아래 코드가 오류를 던지지 않고 문자열을 반환합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// '\"1\"'</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"예제","title":"예제","isH3":false,"content":""}},{"type":"prose","value":{"id":"소수_구하기","title":"소수 구하기","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 주어진 BigInt가 소수이면 true 반환</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2n</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">*</span> i <span class=\"token operator\">&lt;=</span> p<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">%</span> i <span class=\"token operator\">===</span> <span class=\"token number\">0n</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// BigInt를 받아, n번째 소수를 BigInt로 반환</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">nthPrime</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nth</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> maybePrime <span class=\"token operator\">=</span> <span class=\"token number\">2n</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> prime <span class=\"token operator\">=</span> <span class=\"token number\">0n</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nth <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span>maybePrime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      nth <span class=\"token operator\">-=</span> <span class=\"token number\">1n</span><span class=\"token punctuation\">;</span>\n      prime <span class=\"token operator\">=</span> maybePrime<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    maybePrime <span class=\"token operator\">+=</span> <span class=\"token number\">1n</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> prime<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">nthPrime</span><span class=\"token punctuation\">(</span><span class=\"token number\">20n</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ↪ 73n</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"명세","id":"명세","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-bigint-objects","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.BigInt"}},{"type":"browser_compatibility","value":{"title":"브라우저 호환성","id":"브라우저_호환성","isH3":false,"query":"javascript.builtins.BigInt","dataURL":"/ko/docs/Web/JavaScript/Reference/Global_Objects/BigInt/bcd.json"}},{"type":"prose","value":{"id":"같이_보기","title":"같이 보기","isH3":false,"content":"<ul>\n  <li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a></li>\n</ul>"}}],"toc":[{"text":"설명","id":"설명"},{"text":"생성자","id":"생성자"},{"text":"정적 메서드","id":"정적_메서드"},{"text":"인스턴스 메서드","id":"인스턴스_메서드"},{"text":"권장사항","id":"권장사항"},{"text":"예제","id":"예제"},{"text":"명세","id":"명세"},{"text":"브라우저 호환성","id":"브라우저_호환성"},{"text":"같이 보기","id":"같이_보기"}],"summary":"**BigInt**는 Number 원시 값이 안정적으로 나타낼 수 있는 최대치인 2^53 - 1보다 큰 정수를 표현할 수 있는 내장 객체입니다.","popularity":0.0006,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"BigInt","locale":"en-US","native":"English (US)"},{"title":"BigInt","locale":"fr","native":"Français"},{"title":"BigInt","locale":"ja","native":"日本語"},{"title":"BigInt","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"BigInt","locale":"ru","native":"Русский"},{"title":"BigInt","locale":"zh-CN","native":"中文 (简体)"},{"title":"BigInt","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ko/web/javascript/reference/global_objects/bigint","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/web/javascript/reference/global_objects/bigint/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ko/docs/Web","title":"개발자를 위한 웹 기술"},{"uri":"/ko/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/ko/docs/Web/JavaScript/Reference","title":"JavaScript 참고서"},{"uri":"/ko/docs/Web/JavaScript/Reference/Global_Objects","title":"표준 내장 객체"},{"uri":"/ko/docs/Web/JavaScript/Reference/Global_Objects/BigInt","title":"BigInt"}],"pageTitle":"BigInt - JavaScript | MDN","noIndexing":false}}