{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Number","mdn_url":"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number","locale":"ko","native":"한국어","sidebarHTML":"<ol><li><strong><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects\">Standard built-in objects</a></strong></li><li><strong><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>Properties</strong></a><ol><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON\"><code>Number.EPSILON</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\"><code>Number.MAX_SAFE_INTEGER</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE\"><code>Number.MAX_VALUE</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER\"><code>Number.MIN_SAFE_INTEGER</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_VALUE\"><code>Number.MIN_VALUE</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN\"><code>Number.NaN</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY\"><code>Number.NEGATIVE_INFINITY</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY\"><code>Number.POSITIVE_INFINITY</code></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>Methods</strong></a><ol><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite\"><code>Number.isFinite()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\"><code>Number.isInteger()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN\"><code>Number.isNaN()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger\"><code>Number.isSafeInteger()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat\"><code>Number.parseFloat()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt\"><code>Number.parseInt()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential\"><code>Number.prototype.toExponential()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed\"><code>Number.prototype.toFixed()</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\"><code>Number.prototype.toLocaleString()</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision\"><code>Number.prototype.toPrecision()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/toString\"><code>Number.prototype.toString()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/valueOf\"><code>Number.prototype.valueOf()</code></a></li></ol></li><li><strong>Inheritance:</strong></li><li><strong><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li><a href=\"#\"><strong>Properties</strong></a><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code> <small>(en-US)</small></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function.prototype.displayName</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function.prototype.length</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function.prototype.name</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function.prototype.prototype</code></a></li></ol></li><li><a href=\"#\"><strong>Methods</strong></a><ol><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></li><li><strong><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>Properties</strong></a><ol><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>Methods</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code> <small>(en-US)</small></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code> <small>(en-US)</small></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p></p><strong><code>Number</code></strong> 는 <code>37</code>이나 <code>-9.25</code>와 같은 숫자를 표현하고 다룰 때 사용하는 <a href=\"/ko/docs/Glossary/Primitive#primitive_wrapper_objects_in_javascript\">원시 래퍼 객체</a>입니다.<p></p>\n<p><code>Number</code> 생성자는 숫자를 다루기 위해 상수와 메소드를 가지고 있습니다. 다른 타입의 값은 <code>Number()</code> 함수를 사용하여 숫자로 바꿀 수 있습니다.</p>\n<p>JavaScript <code>Number</code> 타입은 Java 혹은 C#의 <code>double</code> 타입처럼 <a href=\"https://en.wikipedia.org/wiki/Floating-point_arithmetic\" class=\"external\" rel=\" noopener\">IEEE 754 64비트 바이너리 배정 밀도</a> 값입니다. 즉, 분수 값을 나타낼 수 있지만 저장할 수 있는 값에는 몇 가지 제한이 있습니다. <code>Number</code>는 소수점 이하 17자리 정도만 유지하며 산술은 <a href=\"https://en.wikipedia.org/wiki/Floating-point_arithmetic#Representable_numbers,_conversion_and_rounding\" class=\"external\" rel=\" noopener\">반올림</a>의 대상이 됩니다. <code>Number</code>가 가질 수 있는 가장 큰 값은 1.8E308 입니다. 그보다 더 큰 값은 특별한 <code>Number</code> 상수인 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a>으로 대체됩니다.</p>\n<p>JavaScript 코드에서 <code>37</code>과 같은 숫자 리터럴은 정수가 아니라 부동 소수점 값입니다. 일상적으로 흔히 사용되는 별도의 정수형은 없습니다. (JavaScript에는 이제 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> 타입이 있지만 일상적인 사용을 위해 Number를 대체하도록 설계되지 않았습니다. <code>37</code>은 여전히 <code>Number</code>일 뿐, BigInt가 아닙니다.)</p>\n<p><code>Number</code>는 <code>0b101</code>, <code>0o13</code>, <code>0x0A</code>와 같은 리터럴 형식으로 표현될 수도 있습니다. 수에 대해서 더 알아보고 싶으면 <a href=\"/ko/docs/Web/JavaScript/Reference/Lexical_grammar#numeric_literals\">어휘 문법</a>를 참조하세요.</p>"}},{"type":"prose","value":{"id":"설명","title":"설명","isH3":false,"content":"<p><code>Number(value)</code>처럼 함수로 사용하면 문자열이나 다른 값을 Number 타입으로 변환합니다. 만약 만약 인수를 숫자로 변환할 수 없으면 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>을 리턴합니다.</p>"}},{"type":"prose","value":{"id":"리터럴_구문","title":"리터럴 구문","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token number\">123</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 백 이십 삼</span>\n<span class=\"token number\">123.0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 동일</span>\n<span class=\"token number\">123</span> <span class=\"token operator\">===</span> <span class=\"token number\">123.0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 참</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"함수_구문","title":"함수 구문","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 숫자 123을 반환</span>\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 참</span>\n\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'unicorn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"constructor","title":"Constructor","isH3":false,"content":"<dl>\n  <dt id=\"number\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/Number\"><code>Number()</code></a></dt>\n  <dd>\n    <p>새로운 <code>Number</code> 값을 생성합니다.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"static_properties","title":"Static properties","isH3":false,"content":"<dl>\n  <dt id=\"number.epsilon\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON\"><code>Number.EPSILON</code></a></dt>\n  <dd>\n    <p>두 개의 표현 가능한 숫자 사이의 최소 간격.</p>\n  </dd>\n  <dt id=\"number.max_safe_integer\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\"><code>Number.MAX_SAFE_INTEGER</code></a></dt>\n  <dd>\n    <p>JavaScript에서 안전한 최대 정수. (<code>2^53 - 1</code>)</p>\n  </dd>\n  <dt id=\"number.max_value\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE\"><code>Number.MAX_VALUE</code></a></dt>\n  <dd>\n    <p>표현 가능한 가장 큰 양수.</p>\n  </dd>\n  <dt id=\"number.min_safe_integer\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER\"><code>Number.MIN_SAFE_INTEGER</code></a></dt>\n  <dd>\n    <p>JavaScript에서 안전한 최소 정수. (<code>-(2^53 - 1)</code>).</p>\n  </dd>\n  <dt id=\"number.min_value\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_VALUE\"><code>Number.MIN_VALUE</code></a></dt>\n  <dd>\n    <p>T표현 가능한 가장 작은 양수. 즉, 0보다 크지만 0에 가장 가까운 양수.</p>\n  </dd>\n  <dt id=\"number.nan\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN\"><code>Number.NaN</code></a></dt>\n  <dd>\n    <p>\"<strong>N</strong>ot <strong>a</strong> <strong>N</strong>umber\"(숫자가 아님)을 나타내는 특별한 값.</p>\n  </dd>\n  <dt id=\"number.negative_infinity\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY\"><code>Number.NEGATIVE_INFINITY</code></a></dt>\n  <dd>\n    <p>음의 무한대를 나타내는 특수한 값. 오버플로우 시 반환됩니다.</p>\n  </dd>\n  <dt id=\"number.positive_infinity\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY\"><code>Number.POSITIVE_INFINITY</code></a></dt>\n  <dd>\n    <p>양의 무한대를 나타내는 특수한 값. 오버플로우 시 반환됩니다.</p>\n  </dd>\n  <dt id=\"number.prototype\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number\" aria-current=\"page\"><code>Number.prototype</code></a></dt>\n  <dd>\n    <p><code>Number</code> 객체에 속성을 추가할 수 있습니다.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"정적_메소드","title":"정적 메소드","isH3":false,"content":"<dl>\n  <dt id=\"number.isnan\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN\"><code>Number.isNaN()</code></a></dt>\n  <dd>\n    <p>주어진 값이 <code>NaN</code>인지 확인합니다.</p>\n  </dd>\n  <dt id=\"number.isfinite\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite\"><code>Number.isFinite()</code></a></dt>\n  <dd>\n    <p>주어진 값이 유한수 인지 확인합니다.</p>\n  </dd>\n  <dt id=\"number.isinteger\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\"><code>Number.isInteger()</code></a></dt>\n  <dd>\n    <p>주어진 값이 정수인지 확인합니다.</p>\n  </dd>\n  <dt id=\"number.issafeinteger\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger\"><code>Number.isSafeInteger()</code></a></dt>\n  <dd>\n    <p>주어진 값이 안전한 정수(<code>-(2^53 - 1)</code>과 <code>2^53 - 1</code> 사이의 정수)인지 확인합니다.</p>\n  </dd>\n  <dt id=\"number.parsefloatstring\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat\"><code>Number.parseFloat(<var>string</var>)</code></a></dt>\n  <dd>\n    <p>전역 객체 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\"><code>parseFloat()</code></a>와 동일한 값입니다.</p>\n  </dd>\n  <dt id=\"number.parseintstring_radix\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt\"><code>Number.parseInt(<var>string</var>, [<var>radix</var>])</code></a></dt>\n  <dd>\n    <p>전역 객체 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/parseInt\"><code>parseInt()</code></a>와 동일한 값입니다.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"인스턴스_메소드","title":"인스턴스 메소드","isH3":false,"content":"<dl>\n  <dt id=\"number.prototype.toexponentialfractiondigits\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential\"><code>Number.prototype.toExponential(<var>fractionDigits</var>)</code></a></dt>\n  <dd>\n    <p>지수 표기법으로 표기된 숫자를 표현하는 문자열을 반환한다</p>\n  </dd>\n  <dt id=\"number.prototype.tofixeddigits\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed\"><code>Number.prototype.toFixed(<var>digits</var>)</code></a></dt>\n  <dd>\n    <p>고정 소수점 표기법으로 숫자를 표현하는 문자열을 반환합니다.</p>\n  </dd>\n  <dt id=\"number.prototype.tolocalestringlocales_options_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\"><code>Number.prototype.toLocaleString([<var>locales</var> [, <var>options</var>]])</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>이 숫자를 해당 언어 방식으로 표현된 문자열을 반환합니다. <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a> 메서드를 재정의합니다.</p>\n  </dd>\n  <dt id=\"number.prototype.toprecisionprecision\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision\"><code>Number.prototype.toPrecision(<var>precision</var>)</code></a></dt>\n  <dd>\n    <p>고정 소수점 또는 지수 표기법으로 지정된 정밀도로 숫자를 표현하는 문자열을 반환합니다.</p>\n  </dd>\n  <dt id=\"number.prototype.tostringradix\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/toString\"><code>Number.prototype.toString([<var>radix</var>])</code></a></dt>\n  <dd>\n    <p>지정한 <em>기수</em>(\"base\")에서 지정한 개체를 표현하는 문자열을 반환합니다. <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a> 메서드를 재정의합니다.</p>\n  </dd>\n  <dt id=\"number.prototype.valueof\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/valueOf\"><code>Number.prototype.valueOf()</code></a></dt>\n  <dd>\n    <p>명시된 객체의 원시 값을 반환합니다. <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a> 메서드를 재정의합니다.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"예제","title":"예제","isH3":false,"content":""}},{"type":"prose","value":{"id":"number_객체를_사용해_숫자형_변수에_할당","title":"Number 객체를 사용해 숫자형 변수에 할당","isH3":true,"content":"<p>다음 예제에서는 <code>Number</code> 객체의 속성을 사용하여, 여러 숫자 변수에 값을 할당합니다:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> biggestNum <span class=\"token operator\">=</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> smallestNum <span class=\"token operator\">=</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MIN_VALUE</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> infiniteNum <span class=\"token operator\">=</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">POSITIVE_INFINITY</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> negInfiniteNum <span class=\"token operator\">=</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">NEGATIVE_INFINITY</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> notANum <span class=\"token operator\">=</span> Number<span class=\"token punctuation\">.</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"number의_정수_범위","title":"Number의 정수 범위","isH3":true,"content":"<p>다음 예제는 Number 객체가 표현할 수 있는 정수의 최소값과 최대값을 보여줍니다. (자세한 내용은 ECMAScript 표준, <em><a href=\"https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type\" class=\"external\" rel=\" noopener\">6.1.6 The Number Type</a></em> 장을 참고하세요.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> biggestInt <span class=\"token operator\">=</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_SAFE_INTEGER</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//  (2**53 - 1) =&gt;  9007199254740991</span>\n<span class=\"token keyword\">const</span> smallestInt <span class=\"token operator\">=</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MIN_SAFE_INTEGER</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -(2**53 - 1) =&gt; -9007199254740991</span>\n</code></pre></div>\n<p>JSON으로 직렬화한 데이터를 읽을 때, 위의 범위를 벗어나는 수는 JSON 분석기의 <code>Number</code> 형변환 시 손상될 수 있습니다. 이 때는 String을 대신 사용하는 것도 방법입니다.</p>\n<p><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a>를 사용하는 것도 대안입니다.</p>\n<p>더 큰 수는 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> 타입으로 표현할 수 있습니다.</p>"}},{"type":"prose","value":{"id":"number를_사용해_date_객체_숫자로_변환","title":"Number를 사용해 Date 객체 숫자로 변환","isH3":true,"content":"<p>다음 예제는 <code>Number</code>를 함수로 사용하여 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> 객체를 숫자 값으로 변환합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">'December 17, 1995 03:24:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>819199440000</code>가 기록됩니다.</p>"}},{"type":"prose","value":{"id":"숫자형_문자열에서_숫자로_변환","title":"숫자형 문자열에서 숫자로 변환","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 123</span>\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'12.3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 12.3</span>\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'12.00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 12</span>\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123e-1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 12.3</span>\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0x11'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 17</span>\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0b11'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0o11'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 9</span>\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'100a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-Infinity'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -Infinity</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"명세","id":"명세","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-number-objects","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.Number"}},{"type":"browser_compatibility","value":{"title":"브라우저 호환성","id":"브라우저_호환성","isH3":false,"query":"javascript.builtins.Number","dataURL":"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/bcd.json"}},{"type":"prose","value":{"id":"같이보기","title":"같이보기","isH3":false,"content":"<ul>\n  <li>최신 <code>Number</code> 동작(2진수와 8진수를 지원하는)의 폴리필은 <a href=\"https://github.com/zloirock/core-js#ecmascript-number\" class=\"external\" rel=\" noopener\"><code>core-js</code></a>를 참고하세요</li>\n  <li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a></li>\n  <li><a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>Arithmetic operators</code></a></li>\n  <li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Math\"><code>Math</code></a> 전역 객체</li>\n  <li>임의 정밀도 정수: <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a></li>\n</ul>"}}],"toc":[{"text":"설명","id":"설명"},{"text":"Constructor","id":"constructor"},{"text":"Static properties","id":"static_properties"},{"text":"정적 메소드","id":"정적_메소드"},{"text":"인스턴스 메소드","id":"인스턴스_메소드"},{"text":"예제","id":"예제"},{"text":"명세","id":"명세"},{"text":"브라우저 호환성","id":"브라우저_호환성"},{"text":"같이보기","id":"같이보기"}],"summary":"Number 생성자는 숫자를 다루기 위해 상수와 메소드를 가지고 있습니다. 다른 타입의 값은 Number() 함수를 사용하여 숫자로 바꿀 수 있습니다.","popularity":0.0011,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Number","locale":"en-US","native":"English (US)"},{"title":"Number","locale":"es","native":"Español"},{"title":"Number","locale":"fr","native":"Français"},{"title":"Number","locale":"ja","native":"日本語"},{"title":"Número","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Number","locale":"ru","native":"Русский"},{"title":"Number","locale":"zh-CN","native":"中文 (简体)"},{"title":"Number","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ko/web/javascript/reference/global_objects/number","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/web/javascript/reference/global_objects/number/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ko/docs/Web","title":"개발자를 위한 웹 기술"},{"uri":"/ko/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/ko/docs/Web/JavaScript/Reference","title":"JavaScript 참고서"},{"uri":"/ko/docs/Web/JavaScript/Reference/Global_Objects","title":"표준 내장 객체"},{"uri":"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number","title":"Number"}],"pageTitle":"Number - JavaScript | MDN","noIndexing":false}}