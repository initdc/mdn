{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"JSON","mdn_url":"/ko/docs/Web/JavaScript/Reference/Global_Objects/JSON","locale":"ko","native":"한국어","sidebarHTML":"<ol><li><strong><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects\">Standard built-in objects</a></strong></li><li><strong><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/JSON\"><code>JSON</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>Methods</strong></a><ol><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\"><code>JSON.parse()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a></li></ol></li><li><strong>Inheritance:</strong></li><li><strong><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>Properties</strong></a><ol><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>Methods</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code> <small>(en-US)</small></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code> <small>(en-US)</small></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>JSON</code></strong> 객체는 <a href=\"http://json.org/\" class=\"external\" rel=\" noopener\">JavaScript Object Notation</a>(<a href=\"/ko/docs/Glossary/JSON\">JSON</a>)을 분석하거나 값을 JSON으로 변환하는 메서드를 가지고 있습니다. <code>JSON</code>을 직접 호출하거나 인스턴스를 생성할 수 없으며, 두 개의 메서드를 제외하면 자신만의 흥미로운 기능은 없습니다.</p>"}},{"type":"prose","value":{"id":"javascript와_json의_차이","title":"JavaScript와 JSON의 차이","isH3":false,"content":"<p>JSON은 객체, 배열, 숫자, 문자열, 불리언과 <a href=\"/ko/docs/Web/JavaScript/Reference/Operators/null\"><code>null</code></a>을 직렬화하기 위한 구문으로, JavaScript 구문에 기반을 두고 있지만 분명한 차이점을 가지고 있습니다. 즉, 어떤 JavaScript는 JSON이 아닙니다.</p>\n<dl>\n  <dt id=\"객체와_배열\">객체와 배열</dt>\n  <dd>\n    <p>속성의 이름은 반드시 큰따옴표로 표시된 문자열이어야 합니다. <a href=\"/ko/docs/Web/JavaScript/Reference/Trailing_commas\">후행 쉼표</a>는 허용하지 않습니다.</p>\n  </dd>\n  <dt id=\"숫자\">숫자</dt>\n  <dd>\n    <p>선행 0은 허용하지 않습니다. 소숫점 뒤에는 적어도 한 자릿수가 뒤따라야 합니다. <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>과 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a>는 지원하지 않습니다.</p>\n  </dd>\n  <dt id=\"모든_json_텍스트는_유효한_javascript_표현식\">모든 JSON 텍스트는 유효한 JavaScript 표현식...</dt>\n  <dd>\n    <p>...이지만, <a href=\"https://github.com/tc39/proposal-json-superset\" class=\"external\" rel=\" noopener\">모든 JSON 텍스트를 올바른 ECMA-262로 만드는 제안</a>을 구현한 JavaScript 엔진에서만 그러합니다. 다른 엔진에서는, U+2028 LINE SEPARATOR와 U+2029 PARAGRAPH SEPARATOR를 JSON에서 스트링 리터럴과 속성의 키로 사용할 수 있지만, JavaScript 문자열 리터럴에서 사용하면 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\"><code>SyntaxError</code></a>가 발생합니다.</p>\n  </dd>\n</dl>\n<p><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\"><code>JSON.parse()</code></a>로 JSON 문자열을 분석하고 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/eval\"><code>eval</code></a>이 JavaScript 문자열로 실행하는 다음 예시를 참고하세요.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> code <span class=\"token operator\">=</span> <span class=\"token string\">'\"\\u2028\\u2029\"'</span>\n<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 모든 엔진에서 \"\\u2028\\u2029\"로 평가</span>\n<span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span>       <span class=\"token comment\">// 오래된 엔진에서 SyntaxError</span>\n</code></pre></div>\n<p>다른 차이점으로는 문자열의 작은따옴표 금지와, 주석 및 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> 미지원이 있습니다. JSON에 기반한, 보다 사람 친화적인 설정 형식을 원하면 Babel 컴파일러가 사용하는 <a href=\"https://json5.org/\" class=\"external\" rel=\" noopener\">JSON5</a>가 있고, 좀 더 많이 쓰이는 <a href=\"https://ko.wikipedia.org/wiki/YAML\" class=\"external\" rel=\" noopener\">YAML</a>도 있습니다.</p>"}},{"type":"prose","value":{"id":"전체_json_구문","title":"전체 JSON 구문","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>    <span class=\"token constant\">JSON</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n        or <span class=\"token boolean\">true</span> or <span class=\"token boolean\">false</span>\n        or JSONNumber\n        or JSONString\n        or JSONObject\n        or JSONArray\n\n    JSONNumber <span class=\"token operator\">=</span> <span class=\"token operator\">-</span> PositiveNumber\n              or PositiveNumber\n    PositiveNumber <span class=\"token operator\">=</span> DecimalNumber\n                  or DecimalNumber <span class=\"token punctuation\">.</span> Digits\n                  or DecimalNumber <span class=\"token punctuation\">.</span> Digits ExponentPart\n                  or DecimalNumber ExponentPart\n    DecimalNumber <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n                 or OneToNine Digits\n    ExponentPart <span class=\"token operator\">=</span> e Exponent\n                or <span class=\"token constant\">E</span> Exponent\n    Exponent <span class=\"token operator\">=</span> Digits\n            or <span class=\"token operator\">+</span> Digits\n            or <span class=\"token operator\">-</span> Digits\n    Digits <span class=\"token operator\">=</span> Digit\n          or Digits Digit\n    Digit <span class=\"token operator\">=</span> <span class=\"token number\">0</span> through <span class=\"token number\">9</span>\n    OneToNine <span class=\"token operator\">=</span> <span class=\"token number\">1</span> through <span class=\"token number\">9</span>\n\n    JSONString <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n              or <span class=\"token string\">\" StringCharacters \"</span>\n    StringCharacters <span class=\"token operator\">=</span> StringCharacter\n                    or StringCharacters StringCharacter\n    StringCharacter <span class=\"token operator\">=</span> any character\n                      except \" or \\ or <span class=\"token constant\">U</span><span class=\"token operator\">+</span><span class=\"token number\">0000</span> through <span class=\"token constant\">U</span><span class=\"token operator\">+</span>001F\n                   or EscapeSequence\n    EscapeSequence <span class=\"token operator\">=</span> \\\" or \\<span class=\"token operator\">/</span> or \\\\ or \\b or \\f or \\n or \\r or \\t\n                  or \\u HexDigit HexDigit HexDigit HexDigit\n    HexDigit <span class=\"token operator\">=</span> <span class=\"token number\">0</span> through <span class=\"token number\">9</span>\n            or <span class=\"token constant\">A</span> through <span class=\"token constant\">F</span>\n            or a through f\n\n    JSONObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n              or <span class=\"token punctuation\">{</span> Members <span class=\"token punctuation\">}</span>\n    Members <span class=\"token operator\">=</span> JSONString <span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span>\n           or Members <span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">JSONString</span> <span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span>\n\n    JSONArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span>\n             or <span class=\"token punctuation\">[</span> ArrayElements <span class=\"token punctuation\">]</span>\n    ArrayElements <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span>\n                 or ArrayElements <span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span>\n</code></pre></div>\n<p>중요하지 않은 공백은 <code>JSONNumber</code>(숫자에는 공백이 없어야 함) 또는 <code>JSONString</code>(문자열에서 해당 문자로 해석되거나 오류를 일으킴) 내를 제외하고 어디에나 존재할 수 있습니다. 탭 문자(<a href=\"https://unicode-table.com/en/0009/\" class=\"external\" rel=\" noopener\">U+0009</a>), 캐리지 리턴(<a href=\"https://unicode-table.com/en/000D/\" class=\"external\" rel=\" noopener\">U+000D</a>), 라인 피드(<a href=\"https://unicode-table.com/en/000A/\" class=\"external\" rel=\" noopener\">U+000A</a>) 및 스페이스(<a href=\"https://unicode-table.com/en/0020/\" class=\"external\" rel=\" noopener\">U+0020</a>) 문자만이 유효한 공백 문자입니다.</p>"}},{"type":"prose","value":{"id":"메서드","title":"메서드","isH3":false,"content":"<dl>\n  <dt id=\"json.parse\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\"><code>JSON.parse()</code></a></dt>\n  <dd>\n    <p>문자열을 JSON으로서 구문 분석하고, 선택적으로 분석 결과의 값과 속성을 변환해 반환합니다.</p>\n  </dd>\n  <dt id=\"json.stringify\"><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a></dt>\n  <dd>\n    <p>주어진 값에 해당하는 JSON 문자열을 반환합니다. 선택 사항으로 특정 속성만 포함하거나 사용자 정의 방식으로 속성을 대체합니다.</p>\n  </dd>\n</dl>"}},{"type":"specifications","value":{"title":"명세","id":"명세","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/structured-data.html#sec-json-object","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.JSON"}},{"type":"browser_compatibility","value":{"title":"브라우저 호환성","id":"브라우저_호환성","isH3":false,"query":"javascript.builtins.JSON","dataURL":"/ko/docs/Web/JavaScript/Reference/Global_Objects/JSON/bcd.json"}},{"type":"prose","value":{"id":"같이_보기","title":"같이 보기","isH3":false,"content":"<ul>\n  <li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON\"><code>Date.prototype.toJSON()</code></a></li>\n</ul>"}}],"toc":[{"text":"JavaScript와 JSON의 차이","id":"javascript와_json의_차이"},{"text":"전체 JSON 구문","id":"전체_json_구문"},{"text":"메서드","id":"메서드"},{"text":"명세","id":"명세"},{"text":"브라우저 호환성","id":"브라우저_호환성"},{"text":"같이 보기","id":"같이_보기"}],"summary":"JSON 객체는 JavaScript Object Notation(JSON)을 분석하거나 값을 JSON으로 변환하는 메서드를 가지고 있습니다. JSON을 직접 호출하거나 인스턴스를 생성할 수 없으며, 두 개의 메서드를 제외하면 자신만의 흥미로운 기능은 없습니다.","popularity":0.0007,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"JSON","locale":"en-US","native":"English (US)"},{"title":"JSON","locale":"es","native":"Español"},{"title":"JSON","locale":"fr","native":"Français"},{"title":"JSON","locale":"ja","native":"日本語"},{"title":"JSON","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"JSON","locale":"ru","native":"Русский"},{"title":"JSON","locale":"zh-CN","native":"中文 (简体)"},{"title":"JSON","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ko/web/javascript/reference/global_objects/json","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/web/javascript/reference/global_objects/json/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ko/docs/Web","title":"개발자를 위한 웹 기술"},{"uri":"/ko/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/ko/docs/Web/JavaScript/Reference","title":"JavaScript 참고서"},{"uri":"/ko/docs/Web/JavaScript/Reference/Global_Objects","title":"표준 내장 객체"},{"uri":"/ko/docs/Web/JavaScript/Reference/Global_Objects/JSON","title":"JSON"}],"pageTitle":"JSON - JavaScript | MDN","noIndexing":false}}