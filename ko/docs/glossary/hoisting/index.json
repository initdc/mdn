{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"호이스팅","mdn_url":"/ko/docs/Glossary/Hoisting","locale":"ko","native":"한국어","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>JavaScript에서 <strong>호이스팅</strong>(hoisting)이란, 인터프리터가 변수와 함수의 메모리 공간을 선언 전에 미리 할당하는 것을 의미합니다. <code>var</code>로 선언한 변수의 경우 호이스팅 시 <code>undefined</code>로 변수를 초기화합니다. 반면 <code>let</code>과 <code>const</code>로 선언한 변수의 경우 호이스팅 시 변수를 초기화하지 않습니다.</p>\n<p>호이스팅을 설명할 땐 주로 \"변수의 선언과 초기화를 분리한 후, 선언만 코드의 최상단으로 옮기는\" 것으로 말하곤 합니다. 따라서 변수를 정의하는 코드보다 사용하는 코드가 앞서 등장할 수 있습니다. 다만 선언과 초기화를 함께 수행하는 경우, 선언 코드까지 실행해야 변수가 초기화된 상태가 됨을 주의하세요.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>참고:</strong> 호이스팅은 (<code>let</code>과 <code>const</code>를 포함한) <a href=\"https://www.ecma-international.org/ecma-262/6.0/index.html\" class=\"external\" rel=\" noopener\">ECMAScript® 2015 언어 명세</a> 이전의 표준 명세에는 나타나지 않았습니다. 당시에는 호이스팅이 JavaScript에서 실행 맥락, 특히 생성 및 실행 단계의 동작 방식을 설명하는 일반적인 방법이었습니다.</p>\n</div>"}},{"type":"prose","value":{"id":"기술_예제","title":"기술 예제","isH3":false,"content":"<p>JavaScript는 함수의 코드를 실행하기 전에 함수 선언에 대한 메모리부터 할당합니다. 덕분에 함수를 호출하는 코드를 함수 선언보다 앞서 배치할 수 있습니다. 예를 들어,</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">catName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"제 고양이의 이름은 \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"입니다\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">catName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"호랑이\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n결과: \"제 고양이의 이름은 호랑이입니다\"\n*/</span>\n</code></pre></div>\n<p>위의 코드 조각이 일반적으로 코드를 작성하는 순서라면, 함수를 선언하기 전에 먼저 호출했을 때의 예제도 보겠습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">catName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"클로이\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">catName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"제 고양이의 이름은 \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"입니다\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n결과: \"제 고양이의 이름은 클로이입니다\"\n*/</span>\n</code></pre></div>\n<p>함수 호출이 함수 자체보다 앞서 존재하지만, 그럼에도 불구하고 이 코드 역시 동작합니다. 이것이 JavaScript에서 실행 맥락이 동작하는 방식입니다.</p>\n<p>호이스팅은 다른 자료형과 변수에도 잘 작동합니다. 변수를 선언하기 전에 먼저 초기화하고 사용할 수 있는 것입니다.</p>"}},{"type":"prose","value":{"id":"선언만_호이스팅_대상","title":"선언만 호이스팅 대상","isH3":true,"content":"<p>JavaScript는 초기화를 제외한 선언만 호이스팅합니다. 변수를 먼저 사용하고 그 후에 선언 및 초기화가 나타나면, 사용하는 시점의 변수는 기본 초기화 상태(<code>var</code> 선언 시 <code>undefined</code>, 그 외에는 초기화하지 않음)입니다. 예를 들어,</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 호이스팅한 var 선언으로 인해 undefined 출력</span>\n<span class=\"token keyword\">var</span> num<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 선언</span>\nnum <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 초기화</span>\n</code></pre></div>\n<p>반면, 다음 예제는 선언 없이 초기화만 존재합니다. 따라서 호이스팅도 없고, 변수를 읽으려는 시도에서는 <code>ReferenceError</code> 예외가 발생합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError</span>\nnum <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 초기화</span>\n</code></pre></div>\n<p>다음은 호이스팅을 보이는 더 많은 예제입니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 예제 1</span>\n<span class=\"token comment\">// y만 호이스팅 대상</span>\n\nx <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// x 초기화. x를 선언하지 않은 경우 선언. 그러나 명령문에 var가 없으므로 호이스팅이 발생하지 않음</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '1 undefined'</span>\n<span class=\"token comment\">// JavaScript는 선언만 호이스팅하므로, 윗줄의 y는 undefined</span>\n<span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// y를 선언하고 초기화</span>\n\n<span class=\"token comment\">// 예제 2</span>\n<span class=\"token comment\">// 호이스팅은 없지만, 변수 초기화는 (아직 하지 않은 경우) 변수 선언까지 병행하므로 변수를 사용할 수 있음</span>\n\na <span class=\"token operator\">=</span> <span class=\"token string\">'크랜'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a 초기화</span>\nb <span class=\"token operator\">=</span> <span class=\"token string\">'베리'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// b 초기화</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '크랜베리'</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"let과_const_호이스팅","title":"let과 const 호이스팅","isH3":true,"content":"<p><code>let</code>과 <code>const</code>로 선언한 변수도 호이스팅 대상이지만, <code>var</code>와 달리 호이스팅 시 <code>undefined</code>로 변수를 초기화하지는 않습니다. 따라서 변수의 초기화를 수행하기 전에 읽는 코드가 먼저 나타나면 예외가 발생합니다.</p>\n<p>더 많은 정보는 <a href=\"/ko/docs/Web/JavaScript/Reference/Statements/let#%EC%8B%9C%EA%B0%84%EC%83%81_%EC%82%AC%EA%B0%81%EC%A7%80%EB%8C%80\"><code>let</code> 문서의 \"시간상 사각지대\"</a>를 참고하세요.</p>"}},{"type":"prose","value":{"id":"같이_보기","title":"같이 보기","isH3":true,"content":"<ul>\n  <li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/var\"><code>var</code> 명령문</a> — MDN</li>\n  <li><a href=\"/ko/docs/Web/JavaScript/Reference/Statements/function\"><code>function</code> 명령문</a> — MDN</li>\n</ul>"}}],"toc":[{"text":"기술 예제","id":"기술_예제"}],"summary":"JavaScript에서 호이스팅(hoisting)이란, 인터프리터가 변수와 함수의 메모리 공간을 선언 전에 미리 할당하는 것을 의미합니다. var로 선언한 변수의 경우 호이스팅 시 undefined로 변수를 초기화합니다. 반면 let과 const로 선언한 변수의 경우 호이스팅 시 변수를 초기화하지 않습니다.","popularity":0.0008,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Hoisting","locale":"en-US","native":"English (US)"},{"title":"Hoisting","locale":"es","native":"Español"},{"title":"Hoisting","locale":"fr","native":"Français"},{"title":"Hoisting (巻き上げ、ホイスティング)","locale":"ja","native":"日本語"},{"title":"Hoisting","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Поднятие","locale":"ru","native":"Русский"},{"title":"Hoisting（变量提升）","locale":"zh-CN","native":"中文 (简体)"},{"title":"提升（Hoisting）","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ko/glossary/hoisting","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/glossary/hoisting/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ko/docs/Glossary","title":"용어 사전"},{"uri":"/ko/docs/Glossary/Hoisting","title":"호이스팅"}],"pageTitle":"호이스팅 - 용어 사전 | MDN","noIndexing":false}}