{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"원시 값","mdn_url":"/ko/docs/Glossary/Primitive","locale":"ko","native":"한국어","sidebarHTML":"\n  <ol>\n    <li><a href=\"/ko/docs/Glossary\">용어 사전</a>\n      <ol>\n        <li><a href=\"/ko/docs/Glossary/JavaScript\">JavaScript</a></li>\n        <li><a href=\"/ko/docs/Glossary/String\">string</a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Glossary/Number\">number <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Glossary/BigInt\">bigint <small>(en-US)</small></a></li>\n        <li><a href=\"/ko/docs/Glossary/Boolean\">boolean</a></li>\n        <li><a href=\"/ko/docs/Glossary/Null\">null</a></li>\n        <li><a href=\"/ko/docs/Glossary/undefined\">undefined</a></li>\n        <li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">symbol</a></li>\n      </ol>\n    </li>\n    <li><a href=\"/ko/docs/Web/JavaScript/Data_structures\">JavaScript의 자료형</a></li>\n  </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/ko/docs/Glossary/JavaScript\">JavaScript</a>에서 <strong>원시 값</strong>(primitive, 또는 원시 자료형)이란 <a href=\"/ko/docs/Glossary/Object\">객체</a>가 아니면서 <a href=\"/ko/docs/Glossary/Method\">메서드</a>도 가지지 않는 데이터입니다. 원시 값에는 7종류, <a href=\"/ko/docs/Glossary/String\">string</a>, <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Glossary/Number\">number <small>(en-US)</small></a>, <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Glossary/BigInt\">bigint <small>(en-US)</small></a>, <a href=\"/ko/docs/Glossary/Boolean\">boolean</a>, <a href=\"/ko/docs/Glossary/undefined\">undefined</a>, <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">symbol</a>, 그리고 <a href=\"/ko/docs/Glossary/Null\">null</a>이 존재합니다.</p>\n<p>대부분의 경우, 원시 값은 언어 구현체의 가장 저급(low level) 단계에서 나타냅니다.</p>\n<p>모든 원시 값은 <strong>불변</strong>하여 변형할 수 없습니다. 원시 값 자체와, 원시값을 할당한 변수를 혼동하지 않는 것이 중요합니다. 변수는 새로운 값을 다시 할당할 수 있지만, 이미 생성한 원시 값은 객체, 배열, 함수와는 달리 변형할 수 없습니다.</p>"}},{"type":"prose","value":{"id":"예제","title":"예제","isH3":false,"content":"<p>다음 예제는 원시 값이 <strong>불변</strong>함을 이해할 때 도움이 됩니다.</p>"}},{"type":"prose","value":{"id":"javascript","title":"JavaScript","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 문자열 메서드는 문자열을 변형하지 않음</span>\n<span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token string\">\"baz\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// baz</span>\nbar<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// baz</span>\n\n<span class=\"token comment\">// 배열 메소드는 배열을 변형함</span>\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// []</span>\nfoo<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"plugh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// [\"plugh\"]</span>\n\n<span class=\"token comment\">// 할당은 원시 값에 새로운 값을 부여 (변형이 아님)</span>\nbar <span class=\"token operator\">=</span> bar<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// BAZ</span>\n</code></pre></div>\n<p>원시 값을 교체할 수는 있지만, 직접 변형할 수는 없습니다.</p>"}},{"type":"prose","value":{"id":"또_다른_예제_단계별_정리","title":"또 다른 예제 [단계별 정리]","isH3":false,"content":"<p>다음 예제는 JavaScript가 원시값을 다루는 방법을 이해하는데 도움이 됩니다.</p>"}},{"type":"prose","value":{"id":"javascript_2","title":"JavaScript","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 원시 값</span>\n<span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 원시 값을 변경해야 하는 함수 정의</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">addTwo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   num <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 같은 작업을 시도하는 다른 함수</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">addTwo_v2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">foo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   foo <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 원시 값을 인수로 전달해 첫 번째 함수를 호출</span>\n<span class=\"token function\">addTwo</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 현재 원시 값 반환</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 5</span>\n\n<span class=\"token comment\">// 두 번째 함수로 다시 시도</span>\n<span class=\"token function\">addTwo_v2</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 5</span>\n</code></pre></div>\n<p><code>5</code> 대신 <code>7</code> 일 것이라고 예상하였나요? 그렇다면, 이 코드의 실행 과정을 살펴보세요.</p>\n<ul>\n  <li><code>addTwo</code> 와 <code>addTwo_v2</code> 함수 호출을 위해, JavaScript는 <a href=\"/ko/docs/Glossary/Identifier\">식별자</a> <code>foo</code> 의 값을 찾습니다. 이는 인스턴스화된 첫 번째 구문의 변수를 올바르게 찾습니다.</li>\n  <li>찾은 다음, JavaScript는 인수를 함수의 매개변수로서 전달합니다.</li>\n  <li>함수의 본문 내 구문들을 실행하기 전에, <strong>JavaScript는 원래 전달된 인수(원시 값)를 복사해</strong> 로컬 복사본을 생성합니다. 이러한 복사본은 함수의 스코프 내에서만 존재하며, 함수 정의 내에 지정한 식별자를 통해 접근가능합니다(<code>addTwo</code> 의 <code>num</code>, <code>addTwo_v2</code> 의 <code>foo</code>).</li>\n  <li>그 후, 함수의 구문들이 실행됩니다.\n    <ul>\n      <li>첫 번째 함수내에서, 로컬 <code>num</code> 인수가 생성되었습니다. 이 값을 2 증가시키는 것이며, 원래 <code>foo</code> 의 값이 아닙니다!</li>\n      <li>두 번째 함수내에서, 로컬 <code>foo</code> 인수가 생성되었습니다. 이 값을 2 증가시키는 것이며, 원래(외부) <code>foo</code> 의 값이 아닙니다! 또한, 이 경우에서, 외부 <code>foo</code> 변수에는 <strong>어떤 방법으로든</strong> 접근할 수 없습니다. 이는 자바스크립트의 어휘적 유효 범위(lexical scoping)와 결과 변수 섀도잉 때문입니다. 로컬 <code>foo</code> 는 외부 <code>foo</code> 를 숨깁니다. 자세한 내용은, <a href=\"/ko/docs/Web/JavaScript/Closures\">클로저</a> 문서를 보세요.</li>\n    </ul>\n  </li>\n  <li>결과적으로, 우리 함수들 내부의 모든 변경은 그 <strong>복사본</strong>으로 작업하였기 때문에, 원본 <code>foo</code> 에 전혀 영향을 주지 <strong>않았습니다</strong>.</li>\n</ul>\n<p>이것이 원시 값이 변하지 않는 이유입니다. 원시 값에 직접 작업하지 않으므로, 원본을 건드리지 않고 복사본 가져와 계속 작업을 합니다.</p>"}},{"type":"prose","value":{"id":"javascript에서의_원시_래퍼_객체","title":"JavaScript에서의 원시 래퍼 객체","isH3":false,"content":"<p><code>null</code>과 <code>undefined</code> 를 제외하고, 모든 원시 값은 원시 값을 래핑한 객체를 갖습니다.</p>\n<ul>\n  <li>문자열 원시 값을 위한 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> 객체.</li>\n  <li>숫자 원시 값을 위한 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> 객체.</li>\n  <li>빅인트 원시 값을 위한 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> 객체.</li>\n  <li>불리언 원시 값을 위한 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> 객체.</li>\n  <li>심볼 원시 값을 위한 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> 객체.</li>\n</ul>\n<p>래퍼 객체의 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>valueOf()</code></a> 메서드는 원시 값을 반환합니다.</p>"}},{"type":"prose","value":{"id":"더_알아보기","title":"더 알아보기","isH3":false,"content":""}},{"type":"prose","value":{"id":"일반_지식","title":"일반 지식","isH3":true,"content":"<ul>\n  <li><a href=\"/ko/docs/Web/JavaScript/Data_structures\">JavaScript의 자료형 소개</a></li>\n  <li>위키백과 <a href=\"https://ko.wikipedia.org/wiki/%EC%9B%90%EC%8B%9C_%EC%9E%90%EB%A3%8C%ED%98%95\" class=\"external\" rel=\" noopener\">원시 자료형</a></li>\n</ul>"}}],"toc":[{"text":"예제","id":"예제"},{"text":"또 다른 예제 [단계별 정리]","id":"또_다른_예제_단계별_정리"},{"text":"JavaScript에서의 원시 래퍼 객체","id":"javascript에서의_원시_래퍼_객체"},{"text":"더 알아보기","id":"더_알아보기"}],"summary":"JavaScript에서 원시 값(primitive, 또는 원시 자료형)이란 객체가 아니면서 메서드도 가지지 않는 데이터입니다. 원시 값에는 7종류, string, number (en-US), bigint (en-US), boolean, undefined, symbol, 그리고 null이 존재합니다.","popularity":0.0003,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Primitive","locale":"en-US","native":"English (US)"},{"title":"Primitivo","locale":"es","native":"Español"},{"title":"Primitive","locale":"fr","native":"Français"},{"title":"Primitive (プリミティブ)","locale":"ja","native":"日本語"},{"title":"Primitivo","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Primitive","locale":"ru","native":"Русский"},{"title":"基本类型","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ko/glossary/primitive","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/glossary/primitive/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ko/docs/Glossary","title":"용어 사전"},{"uri":"/ko/docs/Glossary/Primitive","title":"원시 값"}],"pageTitle":"원시 값 - 용어 사전 | MDN","noIndexing":false}}