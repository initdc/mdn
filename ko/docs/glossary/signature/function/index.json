{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Signature (functions)","mdn_url":"/ko/docs/Glossary/Signature/Function","locale":"ko","native":"한국어","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong>함수 시그니처</strong>(<em>타입</em> 시그니처, <em>메소드</em> 시그니처)는 <a href=\"/ko/docs/Glossary/Function\">functions</a> 그리고 <a href=\"/ko/docs/Glossary/Method\">methods</a>의 입력과 출력을 정의합니다.</p>\n<p>시그니처는 다음을 포함합니다:</p>\n<ul>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Glossary/Parameter\">parameters <small>(en-US)</small></a>와 그들의 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Glossary/Type\">types <small>(en-US)</small></a></li>\n  <li>반환값과 타입</li>\n  <li>던져지거나 콜백으로 반환되는 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Glossary/Exception\">exceptions <small>(en-US)</small></a></li>\n  <li><a href=\"/ko/docs/Glossary/OOP\">object-oriented</a> 프로그램에서 메소드의 접근 권한에 대한 정보 (<code>public</code>, <code>static</code>, 혹은 <code>prototype</code>와 같은 키워드들).</li>\n</ul>"}},{"type":"prose","value":{"id":"in_depth","title":"In depth","isH3":false,"content":""}},{"type":"prose","value":{"id":"signatures_in_javascript","title":"Signatures in JavaScript","isH3":true,"content":"<p><a href=\"/ko/docs/Glossary/JavaScript\">JavaScript</a>는 <em>약한 타입</em> 혹은 <em>동적</em> 언어입니다. 이것은 여러분이 변수의 타입을 미리 선언하지 않아도 됨을 의미합니다. 타입은 프로그램이 실행되는 동안 자동으로 결정됩니다. 하지만 JavaScript에서의 시그니처는 여전히 여러분에게 메소드에 대한 몇 가지 정보를 제공해줄 수 있습니다:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token class-name\">MyObject</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<ul>\n  <li>메소드는 <code>MyObject</code>라 불리는 <a href=\"/ko/docs/Glossary/Object\">object</a>에 장착되어 있습니다.</li>\n  <li>메소드는 <code>MyObject</code>의 <code>prototype</code>에 장착되어 있습니다. (따라서 이 메소드는 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Glossary/Method\">instance method <small>(en-US)</small></a> 입니다.) 반대의 경우는 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Glossary/Static_method\">static method <small>(en-US)</small></a>입니다.</li>\n  <li>메소드의 이름은 <code>myFunction</code>입니다.</li>\n  <li>메소드는 하나의 인자를 받고, 그것의 이름은 <code>value</code> 입니다.</li>\n</ul>"}},{"type":"prose","value":{"id":"signatures_in_java","title":"Signatures in Java","isH3":true,"content":"<p><a href=\"/ko/docs/Glossary/Java\">Java</a>는 VM수준에서 메서드와 클래스를 식벽하는데 시그니처가 사용됩니다. Java 코드를 싱행하기 위해서는 변수의 타입을 선언해야 합니다. Java는 강한 타입이며, 컴파일 시간에 parameters의 type의 정확성을 검사합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: java notranslate\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<ul>\n  <li>The <code>public</code> keyword is an access modifier and indicates that this method can be called by any object.</li>\n  <li>The <code>static</code> keyword indicates that this method is a class method as opposed to being an instance method.</li>\n  <li>The <code>void</code> keyword indicates that this method has no return value.</li>\n  <li>The name of the method is <code>main</code>.</li>\n  <li>The method accepts one parameter of type String Array. It is named <code>args.</code></li>\n</ul>"}},{"type":"prose","value":{"id":"learn_more","title":"<code>Learn more</code>","isH3":false,"content":"","titleAsText":"Learn more"}},{"type":"prose","value":{"id":"general_knowledge","title":"<code>General knowledge</code>","isH3":true,"content":"<ul>\n  <li><a href=\"https://en.wikipedia.org/wiki/Type_signature#Java\" class=\"external\" rel=\" noopener\">Type signature</a> on Wikipedia</li>\n</ul>","titleAsText":"General knowledge"}}],"toc":[{"text":"In depth","id":"in_depth"},{"text":"<code>Learn more</code>","id":"learn_more"}],"summary":"함수 시그니처(타입 시그니처, 메소드 시그니처)는 functions 그리고 methods의 입력과 출력을 정의합니다.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Signature (functions)","locale":"en-US","native":"English (US)"},{"title":"Signature (fonctions)","locale":"fr","native":"Français"},{"title":"Signature (functions) (シグネチャ (関数))","locale":"ja","native":"日本語"},{"title":"Signature (functions)（函数签名）","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ko/glossary/signature/function","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/glossary/signature/function/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ko/docs/Glossary","title":"용어 사전"},{"uri":"/ko/docs/Glossary/Signature","title":"Signature"},{"uri":"/ko/docs/Glossary/Signature/Function","title":"Signature (functions)"}],"pageTitle":"Signature (functions) - 용어 사전 | MDN","noIndexing":false}}