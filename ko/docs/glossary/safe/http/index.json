{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"안전함 (HTTP 메서드)","mdn_url":"/ko/docs/Glossary/Safe/HTTP","locale":"ko","native":"한국어","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>\n  HTTP 메서드가 서버의 상태를 바꾸지 않으면 그 메서드가 <strong>안전</strong>하다고 말합니다. 다른 말로 하면, 읽기\n  작업만 수행하는 메서드는 안전합니다. 흔히 쓰이는 HTTP 메서드 중에서는 <a href=\"/ko/docs/Web/HTTP/Methods/GET\"><code>GET</code></a>, <a href=\"/ko/docs/Web/HTTP/Methods/HEAD\"><code>HEAD</code></a>,\n  <a href=\"/ko/docs/Web/HTTP/Methods/OPTIONS\"><code>OPTIONS</code></a>가 안전합니다. 모든 안전한 메서드는 <a href=\"/ko/docs/Glossary/Idempotent\">멱등성</a> 또한\n  갖지만, 모든 멱등성을 지닌 메서드가 안전한 것은 아닙니다. 예컨대 <a href=\"/ko/docs/Web/HTTP/Methods/PUT\"><code>PUT</code></a>과 <a href=\"/ko/docs/Web/HTTP/Methods/DELETE\"><code>DELETE</code></a>는 둘\n  다 멱등성을 가졌지만 안전하지는 않은 메서드입니다.\n</p>\n<p>\n  그러나, 안전한 메서드가 읽기 전용의 의미를 내포하긴 하지만, 서버가 요청 정보와 통계 등을 기록함으로써 자신의 상태에\n  변경을 가하는 것도 가능합니다. 안전함의 중요점은 그 메서드를 호출해도 클라이언트가 서버의 상태 변화를 직접 요청하는\n  것이 아니므로 서버에 불필요한 부하를 주지 않을 것이란 점입니다. 즉 브라우저 입장에서는, 안전한 메서드라면 서버에 해를\n  끼치지 않을 것임을 알 수 있기 때문에 자유롭게 호출할 수 있습니다. 이런 점을 활용해서 브라우저가 별다른 위험 없이도\n  프리페칭과 같은 동작을 수행할 수 있는 것입니다. 웹 크롤러 역시 안전한 메서드의 호출에 의존합니다.\n</p>\n<p>\n  안전한 메서드가 정적 파일만 제공해야 할 필요는 없으며, 요청에 대해 응답을 필요에 따라 생성하는 것도 가능합니다. 다만\n  생성 과정은 안전해야 하므로, 다른 이커머스 웹 사이트에 주문을 넣는 것과 같이 외부 이펙트를 유발하는 것은 안됩니다.\n</p>\n<p>\n  메서드의 안전함을 준수하는 것은 온전히 서버 어플리케이션의 책임으로, Apache, Nginx, IIS 등 웹 서버 스스로는 안전함을\n  강제하지 못합니다. 서버 어플리케이션은 특히 <a href=\"/ko/docs/Web/HTTP/Methods/GET\"><code>GET</code></a> 요청을 받았을 때 자신의 상태가 바뀌지 않도록 해야 합니다.\n</p>\n<p>다음은 서버 상태를 바꾸지 않는, 안전한 메서드의 호출입니다.</p>\n<pre class=\"notranslate\">    GET /pageX.html HTTP/1.1\n</pre>\n<p>다음은 서버 상태를 바꿀 수도 있는, 안전하지 않은 메서드의 호출입니다.</p>\n<pre class=\"notranslate\">    POST /pageX.html HTTP/1.1\n</pre>\n<p>마지막으로 멱등성을 가졌지만 안전하지는 않은 메서드의 호출입니다.</p>\n<pre class=\"notranslate\">    DELETE /idX/delete HTTP/1.1\n</pre>"}},{"type":"prose","value":{"id":"더_알아보기","title":"더 알아보기","isH3":false,"content":""}},{"type":"prose","value":{"id":"일반_지식","title":"일반 지식","isH3":true,"content":"<ul>\n  <li>HTTP 명세에서 <a href=\"https://datatracker.ietf.org/doc/html/rfc7231#section-4.2.1\" class=\"external\" rel=\" noopener\">안전함</a>의 정의.</li>\n</ul>"}},{"type":"prose","value":{"id":"기술_지식","title":"기술 지식","isH3":true,"content":"<ul>\n  <li>일반적으로 쓰이는 안전한 메서드: <a href=\"/ko/docs/Web/HTTP/Methods/GET\"><code>GET</code></a>, <a href=\"/ko/docs/Web/HTTP/Methods/HEAD\"><code>HEAD</code></a>, <a href=\"/ko/docs/Web/HTTP/Methods/OPTIONS\"><code>OPTIONS</code></a></li>\n  <li>일반적으로 쓰이는 안전하지 않은 메서드: <a href=\"/ko/docs/Web/HTTP/Methods/PUT\"><code>PUT</code></a>, <a href=\"/ko/docs/Web/HTTP/Methods/DELETE\"><code>DELETE</code></a>, <a href=\"/ko/docs/Web/HTTP/Methods/POST\"><code>POST</code></a></li>\n</ul>"}}],"toc":[{"text":"더 알아보기","id":"더_알아보기"}],"summary":"HTTP 메서드가 서버의 상태를 바꾸지 않으면 그 메서드가 안전하다고 말합니다. 다른 말로 하면, 읽기\n  작업만 수행하는 메서드는 안전합니다. 흔히 쓰이는 HTTP 메서드 중에서는 GET, HEAD,\n  OPTIONS가 안전합니다. 모든 안전한 메서드는 멱등성 또한\n  갖지만, 모든 멱등성을 지닌 메서드가 안전한 것은 아닙니다. 예컨대 PUT과 DELETE는 둘\n  다 멱등성을 가졌지만 안전하지는 않은 메서드입니다.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Safe (HTTP Methods)","locale":"en-US","native":"English (US)"},{"title":"Safe (安全) (HTTP メソッド)","locale":"ja","native":"日本語"},{"title":"安全（HTTP 方法）","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ko/glossary/safe/http","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/glossary/safe/http/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ko/docs/Glossary","title":"용어 사전"},{"uri":"/ko/docs/Glossary/Safe","title":"안전함"},{"uri":"/ko/docs/Glossary/Safe/HTTP","title":"안전함 (HTTP 메서드)"}],"pageTitle":"안전함 (HTTP 메서드) - 용어 사전 | MDN","noIndexing":false}}