{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"CSS 가이드라인","mdn_url":"/ko/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide/CSS","locale":"ko","native":"한국어","sidebarHTML":"\n  <ol>\n    <li><a href=\"/ko/docs/MDN/About\">MDN이란</a></li>\n    <li class=\"toggle\">\n        <details>\n            <summary>MDN 참여하기</summary>\n            <ol>\n                <li><a href=\"/ko/docs/MDN/Contribute/Getting_started\">MDN 시작하기</a></li>\n                <li><a href=\"/ko/docs/MDN/Contribute\">MDN 참여하기</a></li>\n                <li><a href=\"/ko/docs/MDN/Contribute/Howto\">MDN web docs 사용방법</a></li>\n                <li><a href=\"/ko/docs/MDN/Contribute/Localize\">MDN 지역화 하기</a></li>\n                <li><a href=\"/ko/docs/MDN/Guidelines\">가이드라인</a></li>\n                <li><a href=\"/ko/docs/MDN/Structures\">문서 구조</a></li>\n             </ol>\n        </details>\n    </li>\n  </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>다음 가이드라인은 MDN code 예제를 위한 CSS 작성 방법을 설명합니다.</p>"}},{"type":"prose","value":{"id":"이번_기사에서는","title":"이번 기사에서는","isH3":false,"content":"<ul>\n  <li><a href=\"/ko/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide/CSS#high-level_guidelines\">고급 가이드라인</a>\n    <ul>\n      <li><a href=\"/ko/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide/CSS#dont_use_preprocessors\">전처리기를 사용하지 마십시오</a></li>\n      <li><a href=\"/ko/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide/CSS#dont_use_specific_css_methodologies\">특정 CSS 방법론을 사용하지 마십시오</a></li>\n      <li><a href=\"/ko/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide/CSS#use_flexiblerelative_units\">유연하고/상대적인 단위를 사용합니다</a></li>\n      <li><a href=\"/ko/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide/CSS#dont_use_resets\">재설정을 사용하지 마십시오</a></li>\n      <li><a href=\"/ko/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide/CSS#plan_your_css_%e2%80%94_avoid_overriding\">CSS 계획 — 재정의 (overriding) 를 방지합니다</a></li>\n    </ul>\n  </li>\n  <li><a href=\"/ko/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide/CSS#general_css_coding_style\">일반적인 CSS 코딩 스타일</a>\n    <ul>\n      <li><a href=\"/ko/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide/CSS#use_expanded_syntax\">확장 구문을 사용합니다</a></li>\n      <li><a href=\"/ko/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide/CSS#favor_longhand_rules_over_terse_shorthand\">속기 (shorthand) 보다는 longhand 규칙을 좋아합니다</a></li>\n      <li><a href=\"/ko/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide/CSS#use_double_quotes_around_values\">값을 큰 따옴표로 묶습니다</a></li>\n      <li><a href=\"/ko/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide/CSS#spacing_around_function_parameters\">함수 매개변수 주위의 간격</a></li>\n      <li><a href=\"/ko/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide/CSS#css_comments\">CSS 주석</a></li>\n      <li><a href=\"/ko/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide/CSS#dont_use_!important\">!important 를 사용하지 마십시오</a></li>\n    </ul>\n  </li>\n  <li><a href=\"/ko/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide/CSS#specific_css_syntax_points\">특정 CSS 구문 포인트</a>\n    <ul>\n      <li><a href=\"/ko/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide/CSS#turning_off_borders_and_other_properties\">테두리 및 기타 속성 끄기</a></li>\n      <li><a href=\"/ko/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide/CSS#use_mobile_first_media_queries\">\"모바일 우선\" 미디어 쿼리 사용</a></li>\n    </ul>\n  </li>\n  <li><a href=\"/ko/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide/CSS#selectors\">선택자</a>\n    <ul>\n      <li><a href=\"/ko/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide/CSS#dont_use_id_selectors\">ID 선택자를 사용하지 마십시오</a></li>\n      <li><a href=\"/ko/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide/CSS#put_multiple_selectors_on_separate_lines\">여러 라인을 별도의 라인에 배치</a></li>\n    </ul>\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"high-level_guidelines","title":"High-level guidelines","isH3":false,"content":""}},{"type":"prose","value":{"id":"dont_use_preprocessors","title":"Don't use preprocessors","isH3":true,"content":"<p>Don't use preprocessor syntax, e.g. <a href=\"https://sass-lang.com/\" class=\"external\" rel=\" noopener\">Sass</a>, <a href=\"https://lesscss.org/\" class=\"external\" rel=\" noopener\">Less</a>, or <a href=\"http://stylus-lang.com/\" class=\"external\" rel=\" noopener\">Stylus,</a> in your MDN example code. MDN documents the vanilla CSS language, and using preprocessors only serves to raise the bar to understanding the examples, potentially confusing readers.</p>"}},{"type":"prose","value":{"id":"dont_use_specific_css_methodologies","title":"Don't use specific CSS methodologies","isH3":true,"content":"<p>In the same spirit as the previous guideline, don't write MDN example code using a specific CSS methodology such as <a href=\"http://getbem.com/naming/\" class=\"external\" rel=\" noopener\">BEM</a> or <a href=\"https://smacss.com/\" class=\"external\" rel=\" noopener\">SMACSS</a>. Even though they are valid CSS syntax, the naming conventions can be confusing to people not familiar with those methodologies.</p>"}},{"type":"prose","value":{"id":"use_flexiblerelative_units","title":"Use flexible/relative units","isH3":true,"content":"<p>For maximum flexibility over the widest possible range of devices, it is a good idea to size containers, padding, etc. using relative units like ems and rems, or percentages and viewport units if you want them to vary depending on viewport width. You can read some more about this in our <a href=\"/en-US/docs/Web/Progressive_web_apps/Responsive/responsive_design_building_blocks#fluid_grids\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Responsive design building blocks (en-US)</a> article.</p>"}},{"type":"prose","value":{"id":"dont_use_resets","title":"Don't use resets","isH3":true,"content":"<p>For maximum control over CSS across platforms, a lot of people used to use CSS resets to remove every style, before then building things back up themselves. This certainly has its merits, but especially in the modern world CSS resets can be overkill, resulting in lots of extra time spent reimplementing things that weren't completely broken in the first place, like default margins, list styles, etc.</p>\n<p>If you really feel like you need to use a reset, consider using <a href=\"http://necolas.github.io/normalize.css/\" class=\"external\" rel=\" noopener\">normalize.css by Nicolas Gallagher</a>, which aims to just make things more consistent across browsers, get rid of some default annoyances that we always remove (the margins on <code>&lt;body&gt;</code>, for example) and fix a few bugs.</p>"}},{"type":"prose","value":{"id":"plan_your_css_—_avoid_overriding","title":"Plan your CSS — avoid overriding","isH3":true,"content":"<p>Before diving in and writing huge chunks of CSS, plan your styles carefully. What general styles are going to be needed, what different layouts do you need to create, what specific overrides need to be created, and are they reusable? Above all, you need to try to avoid too much overriding. If you keep finding yourself writing styles and then cancelling them again a few rulesets down, you probably need to rethink your strategy.</p>"}},{"type":"prose","value":{"id":"general_css_coding_style","title":"General CSS coding style","isH3":false,"content":""}},{"type":"prose","value":{"id":"use_expanded_syntax","title":"Use expanded syntax","isH3":true,"content":"<p>There are a variety of CSS writing styles you can use, but we prefer the expanded style, with the selector/opening brace, close brace, and each declaration on a separate line. This maximizes readability, and again, promotes consistency on MDN.</p>\n<p>Use this:</p>\n<div class=\"code-example\"><pre class=\"brush: css example-good notranslate\"><code><span class=\"token selector\">p</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 1rem<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Not this:</p>\n<div class=\"code-example\"><pre class=\"brush: css example-bad notranslate\"><code><span class=\"token selector\">p</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span> <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 1rem<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>In addition, keep these specifics in mind:</p>\n<ul>\n  <li>Include a space between the selector(s) and the opening curly brace.</li>\n  <li>Always include a semi-colon at the end of the last declaration, even though it isn't strictly necessary.</li>\n  <li>Put the closing curly brace on a new line.</li>\n  <li>In each declaration, put a space after the separating colon, but not before.</li>\n  <li>Use 2 spaces for code indentation.</li>\n</ul>"}},{"type":"prose","value":{"id":"favor_longhand_rules_over_terse_shorthand","title":"Favor longhand rules over terse shorthand","isH3":true,"content":"<p>Usually when teaching the specifics of CSS syntax, it is clearer and more obvious to use longhand properties, rather than terse shorthand (unless of course teaching the shorthand is the point of the example). Remember that the point of MDN examples is to teach people, not to be clever or efficient.</p>\n<p>To start with, it is often harder to understand what the shorthand is doing. It takes a while to pick apart exactly what <a href=\"/ko/docs/Web/CSS/font\"><code>font</code></a> syntax is doing, for example:</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token property\">font</span><span class=\"token punctuation\">:</span> small-caps bold 2rem/1.5 sans-serif<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Whereas this is more immediate in terms of understanding:</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token property\">font-variant</span><span class=\"token punctuation\">:</span> small-caps<span class=\"token punctuation\">;</span>\n<span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> bold<span class=\"token punctuation\">;</span>\n<span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 2rem<span class=\"token punctuation\">;</span>\n<span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 1.5<span class=\"token punctuation\">;</span>\n<span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> sans-serif<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Second, CSS shorthand comes with potential added pitfalls — default values are set for parts of the syntax that you don't explicitly set, which can produce unexpected resets of values you've set earlier in the cascade, or other expected effects. The <a href=\"/ko/docs/Web/CSS/grid\"><code>grid</code></a> property for example sets all of the following default values for items that are not specified:</p>\n<ul>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/CSS/grid-template-rows\"><code>grid-template-rows</code> <small>(en-US)</small></a>: <code>none</code></li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/CSS/grid-template-columns\"><code>grid-template-columns</code> <small>(en-US)</small></a>: <code>none</code></li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/CSS/grid-template-areas\"><code>grid-template-areas</code> <small>(en-US)</small></a>: <code>none</code></li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/CSS/grid-auto-rows\"><code>grid-auto-rows</code> <small>(en-US)</small></a>: <code>auto</code></li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/CSS/grid-auto-columns\"><code>grid-auto-columns</code> <small>(en-US)</small></a>: <code>auto</code></li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/CSS/grid-auto-flow\"><code>grid-auto-flow</code> <small>(en-US)</small></a>: <code>row</code></li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/CSS/column-gap\"><code>grid-column-gap</code> <small>(en-US)</small></a>: <code>0</code></li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/CSS/row-gap\"><code>grid-row-gap</code> <small>(en-US)</small></a>: <code>0</code></li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/CSS/column-gap\"><code>column-gap</code> <small>(en-US)</small></a>: <code>normal</code></li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/CSS/row-gap\"><code>row-gap</code> <small>(en-US)</small></a>: <code>normal</code></li>\n</ul>\n<p>In addition, some shorthands only work as expected if you include the different value components in a certain order. In CSS animations for example:</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token comment\">/* duration | timing-function | delay | iteration-count\n   direction | fill-mode | play-state | name */</span>\n<span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> 3s ease-in 1s 2 reverse both paused slidein<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>As an example, the first value that can be parsed as a <a href=\"/ko/docs/Web/CSS/time\"><code>&lt;time&gt;</code></a> is assigned to the <a href=\"/ko/docs/Web/CSS/animation-duration\"><code>animation-duration</code></a>, and the second one is assigned to <a href=\"/ko/docs/Web/CSS/animation-delay\"><code>animation-delay</code></a>. For more details, read the full <a href=\"/ko/docs/Web/CSS/animation#syntax\">animation syntax</a> details.</p>"}},{"type":"prose","value":{"id":"use_double_quotes_around_values","title":"Use double quotes around values","isH3":true,"content":"<p>Where quotes can or should be included, use them, and use double quotes. For example:</p>\n<div class=\"code-example\"><pre class=\"brush: css example-good notranslate\"><code><span class=\"token selector\">[data-vegetable=\"liquid\"]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> goldenrod<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">\"../../media/examples/lizard.png\"</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"spacing_around_function_parameters","title":"Spacing around function parameters","isH3":true,"content":"<p>Function parameters should have spaces after their separating commas, but not before:</p>\n<div class=\"code-example\"><pre class=\"brush: css example-good notranslate\"><code><span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgb</span><span class=\"token punctuation\">(</span>255<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">linear-gradient</span><span class=\"token punctuation\">(</span>to bottom<span class=\"token punctuation\">,</span> red<span class=\"token punctuation\">,</span> black<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"css_comments","title":"CSS comments","isH3":true,"content":"<p>Use CSS-style comments to comment code that isn't self-documenting:</p>\n<div class=\"code-example\"><pre class=\"brush: css example-good notranslate\"><code><span class=\"token comment\">/* This is a CSS-style comment */</span>\n</code></pre></div>\n<p>Put your comments on separate lines preceeding the code they are referring to:</p>\n<div class=\"code-example\"><pre class=\"brush: css example-good notranslate\"><code><span class=\"token selector\">h3</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Creates a red drop shadow, offset 1px right and down, w/2px blur radius */</span>\n  <span class=\"token property\">text-shadow</span><span class=\"token punctuation\">:</span> 1px 1px 2px red<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* Sets the font-size to double the default document font size */</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 2rem<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Also note that you should leave a space between the asterisks and the comment, in each case.</p>"}},{"type":"prose","value":{"id":"dont_use_!important","title":"Don't use !important","isH3":true,"content":"<p>!important is a last resort generally only used when you need to override something and there is no other way. It is a bad practice and you should avoid it wherever possible.</p>\n<p>Bad:</p>\n<div class=\"code-example\"><pre class=\"brush: css example-bad notranslate\"><code><span class=\"token selector\">.bad-code</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 4rem <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"specific_css_syntax_points","title":"Specific CSS syntax points","isH3":false,"content":""}},{"type":"prose","value":{"id":"turning_off_borders_and_other_properties","title":"Turning off borders and other properties","isH3":true,"content":"<p>When turning off borders (and any other properties that can take <code>0</code> or <code>none</code> as values), use <code>0</code> rather than <code>none</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: css example-good notranslate\"><code><span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"use_mobile_first_media_queries","title":"Use \"mobile first\" media queries","isH3":true,"content":"<p>When including different sets of styles for different target viewport sizes using media queries inside the same stylesheet, it is a good idea to make the default styling before any media queries have been applied to the document the narrow screen/mobile styling, and then override this for wider viewports inside successive media queries.</p>\n<div class=\"code-example\"><pre class=\"brush: css example-good notranslate\"><code><span class=\"token comment\">/*Default CSS layout for narrow screens*/</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 480px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/*CSS for medium width screens*/</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 800px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/*CSS for wide screens*/</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 1100px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/*CSS for really wide screens*/</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>This has many advantages, outlined in our <a href=\"/en-US/docs/Web/Progressive_web_apps/Responsive/Mobile_first\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Mobile First (en-US)</a> article.</p>"}},{"type":"prose","value":{"id":"selectors","title":"Selectors","isH3":false,"content":""}},{"type":"prose","value":{"id":"dont_use_id_selectors","title":"Don't use ID selectors","isH3":true,"content":"<p>There is really no need to use ID selectors — they are less flexible (you can't add more if you discover you need more than one), and are harder to override if needed, being of a higher specificity than classes.</p>\n<p>Good:</p>\n<div class=\"code-example\"><pre class=\"brush: css example-good notranslate\"><code><span class=\"token selector\">.editorial-summary</span> <span class=\"token punctuation\">{</span>\n  ...\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Bad:</p>\n<div class=\"code-example\"><pre class=\"brush: css example-bad notranslate\"><code><span class=\"token selector\">#editorial-summary</span> <span class=\"token punctuation\">{</span>\n  ...\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"put_multiple_selectors_on_separate_lines","title":"Put multiple selectors on separate lines","isH3":true,"content":"<p>When a rule has multiple selectors, put each selector on a new line. This makes the selector list easier to read, and can help to make code lines shorter.</p>\n<p>Do this:</p>\n<div class=\"code-example\"><pre class=\"brush: css example-good notranslate\"><code><span class=\"token selector\">h1,\nh2,\nh3</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> sans-serif<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Not this:</p>\n<div class=\"code-example\"><pre class=\"brush: css example-bad notranslate\"><code><span class=\"token selector\">h1, h2, h3</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> sans-serif<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"good_css_examples_on_mdn","title":"Good CSS examples on MDN","isH3":false,"content":"<p>You can find good, concise, meaningful CSS snippets at the top of our CSS property reference pages — browse through our <a href=\"/ko/docs/Web/CSS/Reference#keyword_index\">CSS keyword index</a> to find some. Our interactive examples are generally written to follow the above guidelines, although be aware that they may differ in some places as they were mostly written before the guidelines were newly written.</p>"}}],"toc":[{"text":"이번 기사에서는","id":"이번_기사에서는"},{"text":"High-level guidelines","id":"high-level_guidelines"},{"text":"General CSS coding style","id":"general_css_coding_style"},{"text":"Specific CSS syntax points","id":"specific_css_syntax_points"},{"text":"Selectors","id":"selectors"},{"text":"Good CSS examples on MDN","id":"good_css_examples_on_mdn"}],"summary":"다음 가이드라인은 MDN code 예제를 위한 CSS 작성 방법을 설명합니다.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Guidelines for styling CSS code examples","locale":"en-US","native":"English (US)"},{"title":"Lignes directrices du CSS","locale":"fr","native":"Français"},{"title":"CSS のコード例を整形するためのガイドライン","locale":"ja","native":"日本語"}],"source":{"folder":"ko/mdn/writing_guidelines/writing_style_guide/code_style_guide/css","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/mdn/writing_guidelines/writing_style_guide/code_style_guide/css/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ko/docs/MDN/Writing_guidelines","title":"MDN Web Docs에 대해"},{"uri":"/ko/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide","title":"모든 코드에 대한 일반 가이드라인"},{"uri":"/ko/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide/CSS","title":"CSS 가이드라인"}],"pageTitle":"CSS 가이드라인 | MDN","noIndexing":false}}