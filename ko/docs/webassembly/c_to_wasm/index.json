{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"C/C++ 모듈을 웹어셈블리로 컴파일하기","mdn_url":"/ko/docs/WebAssembly/C_to_wasm","locale":"ko","native":"한국어","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"open\"><a href=\"/ko/docs/WebAssembly\"><strong>WebAssembly home page</strong></a>\n  </li><li class=\"toggle\">\n    <details open=\"\">\n      <summary>Tutorials</summary>\n      <ol>\n        <li><a href=\"/ko/docs/WebAssembly/Concepts\">WebAssembly concepts</a></li>\n        <li><a href=\"/ko/docs/WebAssembly/C_to_wasm\">Compiling from C/C++ to WebAssembly</a></li>\n        <li><a href=\"/ko/docs/WebAssembly/Rust_to_wasm\">Compiling from Rust to WebAssembly</a></li>\n        <li><a href=\"/ko/docs/WebAssembly/Using_the_JavaScript_API\">Using the WebAssembly JavaScript API</a></li>\n        <li><a href=\"/ko/docs/WebAssembly/Understanding_the_text_format\">Understanding WebAssembly text format</a></li>\n        <li><a href=\"/ko/docs/WebAssembly/Text_format_to_wasm\">Converting WebAssembly text format to wasm</a></li>\n        <li><a href=\"/ko/docs/WebAssembly/Loading_and_running\">Loading and running WebAssembly code</a></li>\n        <li><a href=\"/ko/docs/WebAssembly/Caching_modules\">Caching compiled WebAssembly modules</a></li>\n        <li><a href=\"/ko/docs/WebAssembly/Exported_functions\">Exported WebAssembly functions</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Object reference</summary>\n      <ol>\n        <li><a href=\"/ko/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></li>\n        <li><a href=\"/ko/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a></li>\n        <li><a href=\"/ko/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global</code></a></li>\n        <li><a href=\"/ko/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code></a></li>\n        <li><a href=\"/ko/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code></a></li>\n        <li><a href=\"/ko/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code></a></li>\n        <li><a href=\"/ko/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code></a></li>\n        <li><a href=\"/ko/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code></a></li>\n        <li><a href=\"/ko/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code></a></li>\n      </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>당신이 C/C++ 같은 언어로 새로운 모듈을 작성하고 있다면, 당신은 <a href=\"/ko/docs/Mozilla/Projects/Emscripten\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">Emscripten</a>같은 툴을 이용해서 WebAssembly로 컴파일 할 수 있습니다. 이것이 어떻게 가능한지 봅시다.</p>"}},{"type":"prose","value":{"id":"emscripten_환경_준비하기","title":"Emscripten 환경 준비하기","isH3":false,"content":"<p>필요한 개발 환경을 설정해 봅시다.</p>"}},{"type":"prose","value":{"id":"요구_사항","title":"요구 사항","isH3":true,"content":"<p>\n  Emscripten SDK를 설치하기 위해, 아래 설명을 참고하세요.\n  <a href=\"https://kripken.github.io/emscripten-site/docs/getting_started/downloads.html\" class=\"external\" rel=\" noopener\">https://kripken.github.io/emscripten-site/docs/getting_started/downloads.html</a>\n</p>"}},{"type":"prose","value":{"id":"예제_컴파일_하기","title":"예제 컴파일 하기","isH3":false,"content":"<p>환경설정이 완료되었다면, Emscripten로 C로 작성된 예제를 어떻게 컴파일하는지 살펴보겠습니다. Emscripten으로 컴파일하는 방법은 여러 가지가 있지만, 여기서는 주요 시나리오 두 가지만 다루도록 하겠습니다.</p>\n<ul>\n  <li>wasm으로 컴파일 하고 코드를 실행하기 위해 HTML을 만듭니다. 그리고 wasm을 실행하기 위한 JavaScript \"glue\"코드를 추가합니다.</li>\n  <li>wasm으로 컴파일하고 바로 JavaScript 코드를 만듭니다.</li>\n</ul>\n<p>아래에서 자세히 보겠습니다.</p>"}},{"type":"prose","value":{"id":"html와_javascript_만들기","title":"HTML와 JavaScript 만들기","isH3":true,"content":"<p>이 방법은 브라우저에서 WebAssembly 코드를 실행하는 데 필요한 모든 것을 emscripten에서 생성하도록 하는 가장 간단한 방법입니다.</p>\n<ol>\n  <li>먼저 컴파일 할 예제가 필요합니다. 다음 C 예제 코드를 복사하여 hello.c 파일을 만듭니다.\n    <div class=\"code-example\"><pre class=\"brush: c notranslate\"><code><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n  </li>\n  <li>terminal을 사용하여 Emscripten 컴파일 환경에서 다음의 명령어를 실행합니다. hello.c 파일과 동일한 경로에서 실행하세요</li>\n</ol>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>    emcc hello.c -s <span class=\"token assign-left variable\">WASM</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> -o hello.html\n</code></pre></div>\n<p>명령과 함께 전달된 옵션은 다음과 같습니다.</p>\n<ul>\n  <li><code>-s WASM=1</code> — wasm으로 결과물을 만들어 내는 옵션. 이것을 지정하지 않으면 기본적으로 Emscripten이 <a href=\"http://asmjs.org/\" class=\"external\" rel=\" noopener\">asm.js</a>를 출력합니다</li>\n  <li><code>-o hello.html</code> — Emscripten이 코드를 실행할 HTML 페이지 (및 사용할 파일 이름)를 생성하고 wasm 모듈과 JavaScript \"glue\"코드를 생성하여 wasm을 컴파일하고 인스턴스화하여 웹 환경에서 사용할 수 있도록 지정합니다.</li>\n</ul>\n<p>코드를 실행하면 소스 폴더에 3개의 파일이 생길 것입니다.</p>\n<ul>\n  <li>바이너리 wasm 모듈 코드 (<code>hello.wasm</code>)</li>\n  <li>native c 함수와 Javascript/wasm을 번역해주는 glue코드를 포함한 자바스크립트 파일 (<code>hello.js</code>)</li>\n  <li>Wasm 코드를 로드, 컴파일 및 인스턴스화하고 브라우저에 출력을 표시하는 HTML 파일 (<code>hello.html</code>)</li>\n</ul>"}},{"type":"prose","value":{"id":"예제_실행하기","title":"예제 실행하기","isH3":true,"content":"<p>이제 WebAssembly를 지원하는 브라우저에서 <code>hello.html</code>을 로드해야합니다. Firefox 52+ 및 Chrome 57+, 최신 Opera에서 기본적으로 활성화됩니다 (about:config 또는 <code>javascript.options.wasm</code> 플래그를 활성화하여 Firefox 47+에서 wasm 코드를 실행하거나 Chrome (51+) 및 Opera (38+) <em>chrome://flags</em>로 이동하여 Experimental WebAssembly 플래그를 사용하도록 설정합니다.)</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>참고:</strong> 생성된 HTML 파일 (<code>hello.html</code>) 을 로컬 하드(예: <code>file://your_path/hello.html</code>)에서 직접 읽으려고 하면 wasm의 동기, 비동기 패치(fetch)라인에 따라 에러메시지가 표시됩니다. HTTP 서버로 HTML파일을 실행해야 합니다. — <a href=\"/ko/docs/Learn/Common_questions/set_up_a_local_testing_server\">로컬 테스팅 서버를 셋업하는 방법</a>을 참고하세요.</p>\n</div>\n<p>모든 것이 계획대로 작동했다면 Emscripten 콘솔의 \"Hello world\" 출력이 웹 페이지와 브라우저의 JavaScript 콘솔에 나타나야 합니다. 축하합니다. WebAssembly에 C를 컴파일하고 브라우저에서 실행했습니다!</p>"}},{"type":"prose","value":{"id":"사용자_정의_html_템플릿_사용하기","title":"사용자 정의 HTML 템플릿 사용하기","isH3":true,"content":"<p>사용자 정의 HTML 템플릿을 사용하는 방법에 대해 보도록 하겠습니다.</p>\n<ol>\n  <li>우선 다음 C 코드를 새로운 폴더의 <code>hello2.c</code>파일로 만듭니다.\n    <div class=\"code-example\"><pre class=\"brush: c notranslate\"><code><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n  </li>\n  <li>emsdk 저장소에서 <code>shell_minimal.html</code> 파일을 검색하십시오. 이전의 새 디렉토리에서 <code>html_template</code>이라는 서브 디렉토리로 복사하십시오.</li>\n  <li>이제 Emscripten 컴파일러 환경 터미널 창에서 새 디렉토리로 이동 한 후 다음 명령을 실행합니다.\n    <div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>emcc -o hello2.html hello2.c -O3 -s <span class=\"token assign-left variable\">WASM</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> --shell-file html_template/shell_minimal.html\n</code></pre></div>이번 명령어의 옵션은 이전에 입력한것과 조금 다릅니다.\n    <ul>\n      <li>컴파일러가 여전히 JavaScript 글루 코드와 <code>.html</code>을 출력한다는 것을 의미하는 <code>-o hello2.html</code>을 지정했습니다.</li>\n      <li>또한 <code>--shell-file html_template/shell_minimal.html</code>을 지정했습니다.이 예제는 예제를 실행할 HTML을 만드는 데 사용할 HTML 템플릿의 경로를 제공합니다.</li>\n    </ul>\n  </li>\n  <li>자 이제 예제를 실행해 봅니다. 위에있는 명령어를 실행하면 <code>hello2.html</code>파일을 생성해 냅니다. 생성 된 wasm을 로드하고 실행할 때 추가되는 글루 코드가있는 템플릿과 거의 동일한 내용을 갖습니다. 브라우저에서 열면 마지막 예제와 같은 결과를 볼 수 있습니다.</li>\n</ol>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>참고:</strong> <strong>Note</strong>: <code>-o</code> 플래그에 HTML 파일 대신 .js 파일을 지정하여 전체 HTML이 아닌 JavaScript \"glue\"파일* 을 출력하도록 지정할 수 있습니다 (예 : <code>emcc -o hello2.js hello2.c -O3 -s WASM=1)</code>. 이것은 고급진 방법인데 사용자 정의 HTML을 처음부터 완전히 빌드 할 수 있습니다. 제공된 HTML 템플리트를 사용하는 것이 보통 더 쉽습니다.* Emscripten은 메모리 할당, 메모리 누수 및 기타 여러 가지 문제를 처리하기 위해 다양한 JavaScript \"접착제\"코드가 필요합니다.</p>\n</div>"}},{"type":"prose","value":{"id":"c_코드에서_사용자_정의된_함수_호출","title":"C 코드에서 사용자 정의된 함수 호출","isH3":true,"content":"<p>JavaScript에서 C 코드에 정의된 함수를 쓰고 싶은 경우 Emscripten <code>ccall()</code> 함수와 <code>EMSCRIPTEN_KEEPALIVE</code>(외부에서 사용가능한 함수 목록에 추가해주는 기능)을 통해 함수를 사용 할 수 있습니다 (자세한 내용은 다음 참조 : <a href=\"https://kripken.github.io/emscripten-site/docs/getting_started/FAQ.html#why-do-functions-in-my-c-c-source-code-vanish-when-i-compile-to-javascript-and-or-i-get-no-functions-to-process\" class=\"external\" rel=\" noopener\">JavaScript로 컴파일 할 때 C / C ++ 소스 코드의 함수가 사라지고 처리 할 함수가없는 이유는 무엇입니까?</a>). 어떻게 작동하는지 살펴 보겠습니다.</p>\n<ol>\n  <li>다음 코드를 새 디렉토리에 <code>hello3.c</code>로 저장하십시오.\n    <div class=\"code-example\"><pre class=\"brush: c notranslate\"><code><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;emscripten/emscripten.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus</span></span>\n<span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token punctuation\">{</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token keyword\">void</span> EMSCRIPTEN_KEEPALIVE <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyFunction Called\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus</span></span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n</code></pre></div>기본적으로 Emscripten이 생성 한 코드는 항상 <code>main()</code> 함수를 호출하고 다른 함수는 불필요한 코드로 제거됩니다. 함수 이름 앞에 <code>EMSCRIPTEN_KEEPALIVE</code>를 쓰면 데드코드로 제거되지 않습니다. <code>EMSCRIPTEN_KEEPALIVE</code>를 사용하려면 <code>emscripten.h</code> 라이브러리를 가져와야합니다.\n    <div class=\"notecard note\" id=\"sect3\">\n      <p><strong>참고:</strong> #ifdef 블록을 포함하여 C++ 코드에 이 코드를 포함 시켜도 이 예제는 계속 작동합니다. 그냥 C코드를 넣으면 C와 C++ name mangling 규칙으로 인해 문제가 생길 수 있지만 <code>extern \"C\"</code>를 사용하여 이 문제를 해결하면 됩니다.</p>\n    </div>\n  </li>\n  <li>이제 <code>html_template/shell_minimal.html</code>을 이 새로운 디렉토리에 추가하십시오. (개발환경에 넣고 개발하는것이 편합니다).</li>\n  <li>이제 컴파일 단계를 다시 실행 해 봅시다. 최신 디렉토리 (Emscripten 컴파일러 환경 터미널 창 내부)에서 다음 명령으로 C 코드를 컴파일하십시오. (우리가 <code>NO_EXIT_RUNTIME</code>으로 컴파일 할 필요가 있다는 것을 기억하십시오. <code>main()</code>이 종료 될 때 런타임이 종료 될 것입니다 - 적절한 C 에뮬레이션에 필요합니다. 예를 들어 atexits가 호출됩니다 - 컴파일 된 코드를 호출하는 것은 유효하지 않습니다 .)\n    <div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>emcc -o hello3.html hello3.c -O3 -s <span class=\"token assign-left variable\">WASM</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> --shell-file html_template/shell_minimal.html -s <span class=\"token assign-left variable\">NO_EXIT_RUNTIME</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>  -s <span class=\"token assign-left variable\">EXTRA_EXPORTED_RUNTIME_METHODS</span><span class=\"token operator\">=</span><span class=\"token string\">'[\"ccall\"]'</span>\n</code></pre></div>\n  </li>\n  <li>브라우저에 예제를 다시로드하면 이전과 같은 것을 볼 수 있습니다!</li>\n  <li>이제 JavaScript에 있는 새로운 <code>myFunction()</code> <code>함수를 실행</code>해보겠습니다. 먼저, 텍스트 에디터에서 hello.html을 열어주세요</li>\n  <li><code>&lt;script type='text/javascript'&gt;</code> 태그 바로 위에 <a href=\"/ko/docs/Web/HTML/Element/button\"><code>&lt;button&gt;</code></a>을 추가해 보겠습니다.\n    <div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mybutton<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Run myFunction<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n  </li>\n  <li>이제 첫 번째 <a href=\"/ko/docs/Web/HTML/Element/script\"><code>&lt;script&gt;</code></a> 요소의 끝에 다음 코드를 추가합니다.\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.mybutton'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'check console'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">ccall</span><span class=\"token punctuation\">(</span>\n            <span class=\"token string\">'myFunction'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// name of C function</span>\n            <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// return type</span>\n            <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// argument types</span>\n            <span class=\"token keyword\">null</span> <span class=\"token comment\">// arguments</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n</ol>\n<p><code>ccall()</code>을 사용하여 내보낸 함수를 호출하는 방법이었습니다.</p>"}},{"type":"prose","value":{"id":"바깥_고리","title":"바깥 고리","isH3":false,"content":"<ul>\n  <li><a href=\"http://emscripten.org/\" class=\"external\" rel=\" noopener\">emscripten.org</a> — learn more about Emscripten and its large variety of options.</li>\n  <li><a href=\"https://kripken.github.io/emscripten-site/docs/porting/connecting_cpp_and_javascript/Interacting-with-code.html#calling-compiled-c-functions-from-javascript-using-ccall-cwrap\" class=\"external\" rel=\" noopener\">Calling compiled C functions from JavaScript using ccall/cwrap</a></li>\n  <li><a href=\"https://kripken.github.io/emscripten-site/docs/getting_started/FAQ.html#why-do-functions-in-my-c-c-source-code-vanish-when-i-compile-to-javascript-and-or-i-get-no-functions-to-process\" class=\"external\" rel=\" noopener\">Why do functions in my C/C++ source code vanish when I compile to JavaScript, and/or I get No functions to process?</a></li>\n  <li><a href=\"https://research.mozilla.org/webassembly/\" class=\"external\" rel=\" noopener\">WebAssembly on Mozilla Research</a></li>\n  <li><a href=\"/ko/docs/WebAssembly/existing_C_to_wasm\">Compiling an Existing C Module to WebAssembly</a></li>\n</ul>"}}],"toc":[{"text":"Emscripten 환경 준비하기","id":"emscripten_환경_준비하기"},{"text":"예제 컴파일 하기","id":"예제_컴파일_하기"},{"text":"바깥 고리","id":"바깥_고리"}],"summary":"당신이 C/C++ 같은 언어로 새로운 모듈을 작성하고 있다면, 당신은 Emscripten같은 툴을 이용해서 WebAssembly로 컴파일 할 수 있습니다. 이것이 어떻게 가능한지 봅시다.","popularity":0.0003,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Compiling a New C/C++ Module to WebAssembly","locale":"en-US","native":"English (US)"},{"title":"Compiler un nouveau module C/C++ en WebAssembly","locale":"fr","native":"Français"},{"title":"C/C++ から WebAssembly へのコンパイル","locale":"ja","native":"日本語"},{"title":"Компиляция кода C/C++ в WebAssembly","locale":"ru","native":"Русский"},{"title":"编译 C/C++ 为 WebAssembly","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ko/webassembly/c_to_wasm","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/webassembly/c_to_wasm/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ko/docs/WebAssembly","title":"웹어셈블리"},{"uri":"/ko/docs/WebAssembly/C_to_wasm","title":"C/C++ 모듈을 웹어셈블리로 컴파일하기"}],"pageTitle":"C/C++ 모듈을 웹어셈블리로 컴파일하기 - 웹어셈블리 | MDN","noIndexing":false}}