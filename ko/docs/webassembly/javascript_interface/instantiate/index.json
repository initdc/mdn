{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"WebAssembly.instantiate()","mdn_url":"/ko/docs/WebAssembly/JavaScript_interface/instantiate","locale":"ko","native":"한국어","sidebarHTML":"<ol><li><strong><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects\">Standard built-in objects</a></strong></li><li><strong><a href=\"/ko/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>Methods</strong></a><ol><li><a href=\"/ko/docs/WebAssembly/JavaScript_interface/compile\"><code>WebAssembly.compile()</code></a></li><li><a href=\"/ko/docs/WebAssembly/JavaScript_interface/compileStreaming\"><code>WebAssembly.compileStreaming()</code></a></li><li><em><code>WebAssembly.instantiate()</code></em></li><li><a href=\"/ko/docs/WebAssembly/JavaScript_interface/instantiateStreaming\"><code>WebAssembly.instantiateStreaming()</code></a></li><li><a href=\"/ko/docs/WebAssembly/JavaScript_interface/validate\"><code>WebAssembly.validate()</code></a></li></ol></li><li><strong>Related pages:</strong></li><li><strong><a href=\"/ko/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a></strong></li><li><strong><a href=\"/ko/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global</code></a></strong></li><li><strong><a href=\"/ko/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code></a></strong></li><li><strong><a href=\"/ko/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code></a></strong></li><li><strong><a href=\"/ko/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code></a></strong></li><li><strong><a href=\"/ko/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code></a></strong></li><li><strong><a href=\"/ko/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code></a></strong></li><li><strong><a href=\"/ko/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code></a></strong></li><li><strong>Inheritance:</strong></li><li><strong><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>Properties</strong></a><ol><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>Methods</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code> <small>(en-US)</small></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code> <small>(en-US)</small></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code> <small>(en-US)</small></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>WebAssembly.instantiate()</code></strong> 함수를 사용하면 WebAssembly 코드를 컴파일하고 인스턴스화 할 수 있습니다. 이 함수에는 두개의 overloads가 있습니다.</p>\n<ul>\n  <li>기본 오버로드는 <a href=\"/ko/docs/Web/JavaScript/Typed_arrays\">typed array</a> 또는 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>의 형태로 WebAssembly 바이너리 코드를 취해 컴파일 및 인스턴스화를 한 번에 수행합니다. 반환 된 Promise는 컴파일 된 <a href=\"/ko/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a> 및 첫 번째 <a href=\"/ko/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code></a>로 해석됩니다.</li>\n  <li>두번째 오버로드는 이미 컴파일 된 <a href=\"/ko/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a>을 취하여 해당 <code>Module</code>의 <code>Instance</code>로 해석되는 <code>Promise</code>을 반환합니다. 이 overload는 <code>Module</code>이 이미 컴파일된 경우 유용합니다.</li>\n</ul>\n<div class=\"notecard warning\" id=\"sect1\">\n  <p><strong>경고:</strong> <strong>중요 :</strong> <strong>이 방법은 wasm 모듈을 가져와 인스턴스화하는 가장 효율적인 방법은 아닙니다. 가능하다면 원시 바이트 코드에서 모듈을 모두 한 단계로 가져오고, 컴파일하고 인스턴스화하는 대신 최신 <a href=\"/ko/docs/WebAssembly/JavaScript_interface/instantiateStreaming\"><code>WebAssembly.instantiateStreaming ()</code></a> 메서드를 사용해야합니다. <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> 로의 변환이 필요합니다.</strong></p>\n</div>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":""}},{"type":"prose","value":{"id":"primary_overload_—_taking_wasm_binary_code","title":"Primary overload — taking wasm binary code","isH3":true,"content":"<pre class=\"notranslate\">Promise&lt;ResultObject&gt; WebAssembly.instantiate(bufferSource, importObject);\n</pre>\n<h4 id=\"parameters\">Parameters</h4>\n<dl>\n  <dt id=\"buffersource\"><em>bufferSource</em></dt>\n  <dd>\n    <p>컴파일 할 .wasm 모듈의 이진 코드가 들어있는 <a href=\"/ko/docs/Web/JavaScript/Typed_arrays\">typed array</a> 또는 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>입니다.</p>\n  </dd>\n  <dt id=\"importobject\"><em>importObject</em> <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>함수 또는 <a href=\"/ko/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code></a> 객체와 같이 새로 생성 된 <code>인스턴스</code>로 가져올 값을 포함하는 객체입니다. 컴파일 된 모듈의 각 선언 된 가져 오기에 대해 하나의 일치하는 속성이 있어야합니다. 그렇지 않으면 <a href=\"/ko/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code></a>가 발생합니다.</p>\n  </dd>\n</dl>\n<h4 id=\"return_value\">Return value</h4>\n<p>두개의 필드를 포함하는 <code>ResultObject</code>를 가진 <code>Promise</code>를 반환:</p>\n<ul>\n  <li><code>module</code>: 컴파일 된 WebAssembly 모듈을 나타내는 <a href=\"/ko/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a> 객체입니다. 이 <code>Module</code>은 <a href=\"/ko/docs/Web/API/Worker/postMessage\" title=\"postMessage()\"><code>postMessage()</code></a>를 통해 공유되거나 <a href=\"/ko/docs/WebAssembly/Caching_modules\">cached in IndexedDB</a>로 다시 인스턴스화 될 수 있습니다.</li>\n  <li><code>instance</code>: <a href=\"/ko/docs/WebAssembly/Exported_functions\">Exported WebAssembly functions</a>을 포함하는 <a href=\"/ko/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code></a> 객체입니다.</li>\n</ul>\n<h4 id=\"exceptions\">Exceptions</h4>\n<ul>\n  <li>매개 변수 중 하나가 올바른 유형 또는 구조가 아니면 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a>가 발생합니다.</li>\n  <li>작업이 실패하면 promise는 실패 원인에 따라 <a href=\"/ko/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code></a>, <a href=\"/ko/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code></a> 또는 <a href=\"/ko/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code></a>로 reject됩니다.</li>\n</ul>"}},{"type":"prose","value":{"id":"secondary_overload_—_taking_a_module_object_instance","title":"Secondary overload — taking a module object instance","isH3":true,"content":"<pre class=\"notranslate\">Promise&lt;WebAssembly.Instance&gt; WebAssembly.instantiate(module, importObject);\n</pre>\n<h4 id=\"parameters_2\">Parameters</h4>\n<dl>\n  <dt id=\"module\"><em>module</em></dt>\n  <dd>\n    <p><a href=\"/ko/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a> 객체가 인스턴스화됩니다.</p>\n  </dd>\n  <dt id=\"importobject_2\"><em>importObject</em> <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>함수 또는 <a href=\"/ko/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code></a> 객체와 같이 새로 생성 된 인스턴스로 가져올 값을 포함하는 객체입니다. 선언 된 각 <code>module</code> 가져 오기에 대해 일치하는 속성이 하나 있어야합니다. 그렇지 않으면 <a href=\"/ko/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code></a> 가 발생합니다.</p>\n  </dd>\n</dl>\n<h4 id=\"return_value_2\">Return value</h4>\n<p>A <code>Promise</code> that resolves to an <a href=\"/ko/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code></a> object.</p>\n<h4 id=\"exceptions_2\">Exceptions</h4>\n<ul>\n  <li>매개 변수 중 하나가 올바른 유형 또는 구조가 아니면 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a>가 발생합니다.</li>\n  <li>\n    If the operation fails, the promise rejects with a <a href=\"/ko/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code></a>, <a href=\"/ko/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code></a>, or <a href=\"/ko/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code></a>, depending on the cause of the failure.\n    작업이 실패하면 promise는 실패 원인에 따라 <a href=\"/ko/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code></a>, <a href=\"/ko/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code></a> 또는 <a href=\"/ko/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code></a>로 reject됩니다.\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<p><strong>Note</strong>: 대부분의 경우 <code>instantiate()</code>보다 더 효율적이므로 <a href=\"/ko/docs/WebAssembly/JavaScript_interface/instantiateStreaming\"><code>WebAssembly.instantiateStreaming ()</code></a>을 사용하는 것이 좋습니다.</p>"}},{"type":"prose","value":{"id":"first_overload_example","title":"First overload example","isH3":true,"content":"<p>fetch를 사용하여 일부 WebAssembly 바이트 코드를 가져온 후 우리는 <a href=\"/ko/docs/WebAssembly/JavaScript_interface/instantiate\" aria-current=\"page\"><code>WebAssembly.instantiate ()</code></a> 함수를 사용하여 모듈을 컴파일하고 인스턴스화하여 해당 프로세스에서 JavaScript 함수를 WebAssembly 모듈로 가져옵니다. 그런 다음 <code>Instance</code>에서 <a href=\"/ko/docs/WebAssembly/Exported_functions\">Exported WebAssembly function</a>를 호출합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> importObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">imports</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">imported_func</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'simple.wasm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=&gt;</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">arrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bytes</span> <span class=\"token operator\">=&gt;</span>\n  WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiate</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> importObject<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=&gt;</span>\n  result<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">exported_func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>참고:</strong> 이 예제는 GitHub의 <a href=\"https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/index.html\" class=\"external\" rel=\" noopener\">index.html</a>에서도 찾을 수 있습니다 (<a href=\"https://mdn.github.io/webassembly-examples/js-api-examples/\" class=\"external\" rel=\" noopener\">라이브보기도 있음</a>).</p>\n</div>"}},{"type":"prose","value":{"id":"second_overload_example","title":"Second overload example","isH3":true,"content":"<p>다음 예제는 (GitHub의 <a href=\"https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/index-compile.html\" class=\"external\" rel=\" noopener\">index-compile.html</a> 데모 혹은 <a href=\"https://mdn.github.io/webassembly-examples/js-api-examples/index-compile.html\" class=\"external\" rel=\" noopener\">라이브로 보기</a>). <a href=\"/ko/docs/WebAssembly/JavaScript_interface/compileStreaming\"><code>WebAssembly.compileStreaming ()</code></a> 메서드를 사용하여 로드된 simple.wasm 바이트 코드를 컴파일 한 다음 <a href=\"/ko/docs/Web/API/Worker/postMessage\" title=\"postMessage()\"><code>postMessage()</code></a>를 사용하여 <a href=\"/ko/docs/Web/API/Web_Workers_API\">worker</a>에게 전달합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wasm_worker.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nWebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">compileStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'simple.wasm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mod</span> <span class=\"token operator\">=&gt;</span>\n  worker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>작업자 (<a href=\"https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/wasm_worker.js\" class=\"external\" rel=\" noopener\"><code>wasm_worker.js</code></a> 참조)에서 모듈이 사용할 가져 오기 객체를 정의한 다음 주 스레드에서 모듈을 수신 할 이벤트 핸들러를 설정합니다. 모듈을 받으면 <a href=\"/ko/docs/WebAssembly/JavaScript_interface/instantiate\" aria-current=\"page\"><code>WebAssembly.instantiate ()</code></a> 메소드를 사용하여 인스턴스를 만들고 내부에서 내 보낸 함수를 호출합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> importObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">imports</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">imported_func</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module received from main thread'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> mod <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n\n  WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiate</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> importObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">instance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">exported_func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://webassembly.github.io/spec/js-api/#dom-webassembly-instantiate","title":"WebAssembly JavaScript Interface"}],"query":"javascript.builtins.WebAssembly.instantiate"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"javascript.builtins.WebAssembly.instantiate","dataURL":"/ko/docs/WebAssembly/JavaScript_interface/instantiate/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/ko/docs/WebAssembly\">WebAssembly</a> overview page</li>\n  <li><a href=\"/ko/docs/WebAssembly/Concepts\">WebAssembly concepts</a></li>\n  <li><a href=\"/ko/docs/WebAssembly/Using_the_JavaScript_API\">Using the WebAssembly JavaScript API</a></li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"WebAssembly.instantiate() 함수를 사용하면 WebAssembly 코드를 컴파일하고 인스턴스화 할 수 있습니다. 이 함수에는 두개의 overloads가 있습니다.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"WebAssembly.instantiate()","locale":"en-US","native":"English (US)"},{"title":"WebAssembly.instantiate()","locale":"fr","native":"Français"},{"title":"WebAssembly.instantiate()","locale":"ja","native":"日本語"},{"title":"WebAssembly.instantiate()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ko/webassembly/javascript_interface/instantiate","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/webassembly/javascript_interface/instantiate/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ko/docs/WebAssembly","title":"웹어셈블리"},{"uri":"/ko/docs/WebAssembly/JavaScript_interface","title":"WebAssembly"},{"uri":"/ko/docs/WebAssembly/JavaScript_interface/instantiate","title":"WebAssembly.instantiate()"}],"pageTitle":"WebAssembly.instantiate() - 웹어셈블리 | MDN","noIndexing":false}}