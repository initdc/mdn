{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"웹어셈블리","mdn_url":"/ko/docs/WebAssembly","locale":"ko","native":"한국어","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"open\"><a href=\"/ko/docs/WebAssembly\"><strong>WebAssembly home page</strong></a>\n  </li><li class=\"toggle\">\n    <details open=\"\">\n      <summary>Tutorials</summary>\n      <ol>\n        <li><a href=\"/ko/docs/WebAssembly/Concepts\">WebAssembly concepts</a></li>\n        <li><a href=\"/ko/docs/WebAssembly/C_to_wasm\">Compiling from C/C++ to WebAssembly</a></li>\n        <li><a href=\"/ko/docs/WebAssembly/Rust_to_wasm\">Compiling from Rust to WebAssembly</a></li>\n        <li><a href=\"/ko/docs/WebAssembly/Using_the_JavaScript_API\">Using the WebAssembly JavaScript API</a></li>\n        <li><a href=\"/ko/docs/WebAssembly/Understanding_the_text_format\">Understanding WebAssembly text format</a></li>\n        <li><a href=\"/ko/docs/WebAssembly/Text_format_to_wasm\">Converting WebAssembly text format to wasm</a></li>\n        <li><a href=\"/ko/docs/WebAssembly/Loading_and_running\">Loading and running WebAssembly code</a></li>\n        <li><a href=\"/ko/docs/WebAssembly/Caching_modules\">Caching compiled WebAssembly modules</a></li>\n        <li><a href=\"/ko/docs/WebAssembly/Exported_functions\">Exported WebAssembly functions</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Object reference</summary>\n      <ol>\n        <li><a href=\"/ko/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></li>\n        <li><a href=\"/ko/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a></li>\n        <li><a href=\"/ko/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global</code></a></li>\n        <li><a href=\"/ko/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code></a></li>\n        <li><a href=\"/ko/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code></a></li>\n        <li><a href=\"/ko/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code></a></li>\n        <li><a href=\"/ko/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code></a></li>\n        <li><a href=\"/ko/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code></a></li>\n        <li><a href=\"/ko/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code></a></li>\n      </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>WebAssembly는 최신 웹 브라우저에서 실행할 수 있는 새로운 유형의 코드입니다. 네이티브에 가까운 성능으로 동작하며 컴팩트한 바이너리 포맷을 제공하는 저수준 어셈블리 언어로, C/C++, Rust 등과 같은 언어의 컴파일 타겟으로써 그런 언어로 작성된 프로그램을 웹에서 사용할 수 있게 해줍니다. 또한 JavaScript와 함께 실행되며 서로를 보완할 수 있도록 설계되었습니다.</p>"}},{"type":"prose","value":{"id":"간단히_말해서","title":"간단히 말해서","isH3":false,"content":"<p>웹어셈블리는 웹 플랫폼에 있어서 상당히 큰 의의를 갖습니다 — 여러 언어로 작성된 코드들을 네이티브에 가까운 속도로 웹에서 돌릴 수 있는 길을 제공하며, 이전까지는 웹에서 돌려볼 수 없었던 클라이언트 앱들을 웹에서 돌릴 수 있도록 만들어주기 때문입니다.</p>\n<p>WebAssembly는 JavaScript와 함께 보완되고 실행되도록 설계되었습니다. WebAssembly JavaScript API를 사용하여 WebAssembly 모듈을 JavaScript 앱에 불러와 둘 사이의 기능을 공유 할 수 있습니다. 따라서 WebAssembly 코드를 작성하는 방법을 몰라도 WebAssembly의 성능과 JavaScript의 편리함 및 유연성을 하나의 응용 프로그램에서 활용할 수 있습니다.</p>\n<p>더 훌륭한 점은, 주요 브라우저 벤더의 적극적인 참여를 통해 <a href=\"https://www.w3.org/wasm/\" class=\"external\" rel=\" noopener\">W3C 웹어셈블리 워킹 그룹</a> 및 <a href=\"https://www.w3.org/community/webassembly/\" class=\"external\" rel=\" noopener\">Community Group</a>에서 웹 표준으로 개발되고있다는 것입니다.</p>"}},{"type":"prose","value":{"id":"가이드","title":"가이드","isH3":false,"content":"<dl>\n  <dt id=\"webassembly_concepts\"><a href=\"/ko/docs/WebAssembly/Concepts\">WebAssembly concepts</a></dt>\n  <dd>\n    <p>웹 어셈블리가 무엇인지, 왜 그렇게 유용한지, 어떻게 기존의 웹 플랫폼(혹은 그 이상)에 적응시켜 사용할 수 있는지 기본 개념을 알아봅시다.</p>\n  </dd>\n  <dt id=\"compiling_a_new_cc_module_to_webassembly\"><a href=\"/ko/docs/WebAssembly/C_to_wasm\">Compiling a New C/C++ Module to WebAssembly</a></dt>\n  <dd>\n    <p><a href=\"/ko/docs/Mozilla/Projects/Emscripten/\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">Emscripten</a> 같은 도구를 사용해서 C/C++ 로 작성된 코드를 .wasm으로 컴파일할 수 있습니다. 어떻게 컴파일할 수 있는지 알아봅시다.</p>\n  </dd>\n  <dt id=\"compiling_an_existing_c_module_to_webassembly\"><a href=\"/ko/docs/WebAssembly/existing_C_to_wasm\">Compiling an Existing C Module to WebAssembly</a></dt>\n  <dd>\n    <p>WebAssembly의 핵심 기능은 기존의 C 라이브러리 개발 생태계을 활용해 개발자가 웹에서 사용할 수 있도록하는 것입니다.</p>\n  </dd>\n  <dt id=\"compiling_from_rust_to_webassembly\"><a href=\"/ko/docs/WebAssembly/Rust_to_wasm\">Compiling from Rust to WebAssembly</a></dt>\n  <dd>\n    <p>Rust 코드를 작성했다면 WebAssembly로 컴파일 할 수 있습니다! 이 튜토리얼은 Rust 프로젝트를 컴파일하여 기존 웹 애플리케이션에서 사용하기 위해 알아야 할 모든 것을 설명합니다.</p>\n  </dd>\n  <dt id=\"loading_and_running_webassembly_code\"><a href=\"/ko/docs/WebAssembly/Loading_and_running\">Loading and running WebAssembly code</a></dt>\n  <dd>\n    <p>본 글에서는 .wasm 파일을 만든 후에 <a href=\"/ko/docs/Web/API/Fetch_API\">Fetch</a> 나 <a href=\"/ko/docs/Web/API/XMLHttpRequest\">XHR</a> API를 이용하여 <a href=\"/ko/docs/WebAssembly/JavaScript_interface\">WebAssembly Javascript</a> API와 결합한 후 .wasm 파일을 브라우저로 가져오는 방법, 컴파일하고 초기화 하는 방법에 대해서 다룹니다.</p>\n  </dd>\n  <dt id=\"using_the_webassembly_javascript_api\"><a href=\"/ko/docs/WebAssembly/Using_the_JavaScript_API\">Using the WebAssembly JavaScript API</a></dt>\n  <dd>\n    <p>.wasm 모듈을 브라우저로 불러왔으면, 사용해야겠지요? 본 글에서는 웹어셈블리 자바스크립트 API를 이용하여 웹어셈블리를 어떻게 사용하는지를 설명합니다.</p>\n  </dd>\n  <dt id=\"exported_webassembly_functions\"><a href=\"/ko/docs/WebAssembly/Exported_functions\">Exported WebAssembly functions</a></dt>\n  <dd>\n    <p>익스포트 된 웹어셈블리 함수는 자바스크립트에서의 웹어셈블리 함수의 반영이며, 자바스크립트에서 웹어셈블리 코드를 호출할 수 있도록 해줍니다. 본 글에서는 익스포트 된 웹어셈블리 함수가 무엇인지에 대해 설명합니다.</p>\n  </dd>\n  <dt id=\"understanding_webassembly_text_format\"><a href=\"/ko/docs/WebAssembly/Understanding_the_text_format\">Understanding WebAssembly text format</a></dt>\n  <dd>\n    <p>본 글에서는 웹어셈블리의 텍스트 포맷에 대해 설명합니다. 텍스트 포맷은 브라우저에서 개발자 도구를 이용하여 디버깅 할 때 보여지는 .wasm 모듈의 저수준(Low-level) 문자형 표현입니다.</p>\n  </dd>\n  <dt id=\"converting_webassembly_text_format_to_wasm\"><a href=\"/ko/docs/WebAssembly/Text_format_to_wasm\">Converting WebAssembly text format to wasm</a></dt>\n  <dd>\n    <p>본 글에서는 텍스트 포맷으로 작성된 웹어셈블리 모듈을 .wasm 바이너리로 변환하는 방법을 제시합니다.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"api_참조","title":"API 참조","isH3":false,"content":"<dl>\n  <dt id=\"webassembly\"><a href=\"/ko/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></dt>\n  <dd>\n    <p>이 객체는 모든 웹어셈블리와 관련된 기능의 네임스페이스로서 역할합니다.</p>\n  </dd>\n  <dt id=\"webassembly.global\"><a href=\"/ko/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global()</code></a></dt>\n  <dd>\n    <p><code>WebAssembly.Global</code> 객체는 전역 변수 인스턴스를 나타내며 JavaScript 및 하나 이상의 <a href=\"/ko/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a> 인스턴스에서 가져 오거나 내보낼 수 있습니다. 이렇게하면 여러 모듈을 동적으로 연결할 수 있습니다.</p>\n  </dd>\n  <dt id=\"webassembly.module\"><a href=\"/ko/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module()</code></a></dt>\n  <dd>\n    <p>\n      <code>WebAssembly.Module</code> 객체는 이미 브라우저에 의해 컴파일된 상태없는 웹어셈블리 코드를 담고있습니다. 게다가 여러번 인스턴스화 시킬 수 있고 효과적으로 합니다.\n      WebAssembly.Module 객체는 브라우저에서 이미 컴파일 된 상태의stateless WebAssembly 코드를 포함하며 <a href=\"/ko/docs/Web/API/Worker/postMessage\">Worker와 효율적으로 공유</a>하고 여러 번 인스턴스화 할 수 있습니다.\n    </p>\n  </dd>\n  <dt id=\"webassembly.instance\"><a href=\"/ko/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance()</code></a></dt>\n  <dd>\n    <p><code>WebAssembly.Instance</code> 객체는 상태를 가지며, 실행가능한 <code>Module</code>의 인스턴스입니다. <code>Instance</code> 객체는 웹어셈블리 코드를 자바스크립트에서 부를 수 있도록 <a href=\"/ko/docs/WebAssembly/Exported_functions\">익스포트된 모든 웹어셈블리 함수</a>를 포함하고있습니다.</p>\n  </dd>\n  <dt id=\"webassembly.instantiatestreaming\"><a href=\"/ko/docs/WebAssembly/JavaScript_interface/instantiateStreaming\"><code>WebAssembly.instantiateStreaming()</code></a></dt>\n  <dd>\n    <p><code>WebAssembly.instantiateStreaming ()</code> 함수는 WebAssembly 코드를 컴파일하고 인스턴스화하여 <code>모듈</code>과 첫 번째 <code>인스턴스</code>를 반환하는 기본 API입니다.</p>\n  </dd>\n  <dt id=\"webassembly.memory\"><a href=\"/ko/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory()</code></a></dt>\n  <dd>\n    <p><code>WebAssembly.Memory</code> 객체는 사이즈 조절 가능한 <a href=\"/ko/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>로, <code>Instance</code>가 접근하는 메모리를 로우(raw) 바이트들로 들고있습니다.</p>\n  </dd>\n  <dt id=\"webassembly.table\"><a href=\"/ko/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table()</code></a></dt>\n  <dd>\n    <p><code>WebAssembly.``Table</code> 객체는 <code>Instance</code>에 의해 접근되는 불투명한 값(함수 레퍼런스 등)들의 사이즈 조절 가능한, 형식지정된 배열입니다.</p>\n  </dd>\n  <dt id=\"webassembly.compileerror\"><a href=\"/ko/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError()</code></a></dt>\n  <dd>\n    <p>새 웹어셈블리 <code>CompileError</code> 객체를 생성합니다.</p>\n  </dd>\n  <dt id=\"webassembly.linkerror\"><a href=\"/ko/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError()</code></a></dt>\n  <dd>\n    <p>새 웹어셈블리 <code>LinkError</code> 객체를 생성합니다.</p>\n  </dd>\n  <dt id=\"webassembly.runtimeerror\"><a href=\"/ko/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError()</code></a></dt>\n  <dd>\n    <p>새 웹어셈블리 <code>RuntimeError</code> 객체를 생성합니다.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"예제","title":"예제","isH3":false,"content":"<ul>\n  <li><a href=\"https://github.com/JasonWeathersby/WASMSobel\" class=\"external\" rel=\" noopener\">WASMSobel</a></li>\n  <li><a href=\"https://github.com/mdn/webassembly-examples/\" class=\"external\" rel=\" noopener\">webassembly-examples</a> 저장소에서 다른 예제들도 구경해보세요.</li>\n</ul>"}},{"type":"specifications","value":{"title":"명세서","id":"명세서","isH3":false,"specifications":[{"bcdSpecificationURL":"https://webassembly.github.io/spec/js-api/#webassembly-namespace","title":"WebAssembly JavaScript Interface"}],"query":"javascript.builtins.WebAssembly"}},{"type":"browser_compatibility","value":{"title":"브라우저 호환성","id":"브라우저_호환성","isH3":false,"query":"javascript.builtins.WebAssembly","dataURL":"/ko/docs/WebAssembly/bcd.json"}},{"type":"prose","value":{"id":"바깥_고리","title":"바깥 고리","isH3":false,"content":"<ul>\n  <li><a href=\"https://research.mozilla.org/webassembly/\" class=\"external\" rel=\" noopener\">WebAssembly on Mozilla Research</a></li>\n  <li><a href=\"http://webassembly.org/\" class=\"external\" rel=\" noopener\">webassembly.org</a></li>\n  <li><a href=\"https://hacks.mozilla.org/category/webassembly/\" class=\"external\" rel=\" noopener\">WebAssembly articles on Mozilla Hacks blog</a></li>\n  <li><a href=\"https://www.w3.org/community/webassembly/\" class=\"external\" rel=\" noopener\">W3C WebAssembly Community Group</a></li>\n  <li><a href=\"/en-US/docs/Web/HTTP/Headers/Large-Allocation\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Large-Allocation HTTP header (en-US)</a></li>\n  <li><a href=\"https://developers.google.com/web/updates/2018/03/emscripting-a-c-library\" class=\"external\" rel=\" noopener\">Emscripting a C Library to Wasm</a></li>\n</ul>"}}],"toc":[{"text":"간단히 말해서","id":"간단히_말해서"},{"text":"가이드","id":"가이드"},{"text":"API 참조","id":"api_참조"},{"text":"예제","id":"예제"},{"text":"명세서","id":"명세서"},{"text":"브라우저 호환성","id":"브라우저_호환성"},{"text":"바깥 고리","id":"바깥_고리"}],"summary":"WebAssembly는 최신 웹 브라우저에서 실행할 수 있는 새로운 유형의 코드입니다. 네이티브에 가까운 성능으로 동작하며 컴팩트한 바이너리 포맷을 제공하는 저수준 어셈블리 언어로, C/C++, Rust 등과 같은 언어의 컴파일 타겟으로써 그런 언어로 작성된 프로그램을 웹에서 사용할 수 있게 해줍니다. 또한 JavaScript와 함께 실행되며 서로를 보완할 수 있도록 설계되었습니다.","popularity":0.0005,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"WebAssembly","locale":"en-US","native":"English (US)"},{"title":"WebAssembly","locale":"es","native":"Español"},{"title":"WebAssembly","locale":"fr","native":"Français"},{"title":"WebAssembly","locale":"ja","native":"日本語"},{"title":"WebAssembly","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"WebAssembly","locale":"ru","native":"Русский"},{"title":"WebAssembly","locale":"zh-CN","native":"中文 (简体)"},{"title":"WebAssembly","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ko/webassembly","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/webassembly/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"pageTitle":"웹어셈블리 | MDN","noIndexing":false}}