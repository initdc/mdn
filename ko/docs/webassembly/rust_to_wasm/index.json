{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Rust를 WebAssembly로 컴파일하기","mdn_url":"/ko/docs/WebAssembly/Rust_to_wasm","locale":"ko","native":"한국어","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"open\"><a href=\"/ko/docs/WebAssembly\"><strong>WebAssembly home page</strong></a>\n  </li><li class=\"toggle\">\n    <details open=\"\">\n      <summary>Tutorials</summary>\n      <ol>\n        <li><a href=\"/ko/docs/WebAssembly/Concepts\">WebAssembly concepts</a></li>\n        <li><a href=\"/ko/docs/WebAssembly/C_to_wasm\">Compiling from C/C++ to WebAssembly</a></li>\n        <li><a href=\"/ko/docs/WebAssembly/Rust_to_wasm\">Compiling from Rust to WebAssembly</a></li>\n        <li><a href=\"/ko/docs/WebAssembly/Using_the_JavaScript_API\">Using the WebAssembly JavaScript API</a></li>\n        <li><a href=\"/ko/docs/WebAssembly/Understanding_the_text_format\">Understanding WebAssembly text format</a></li>\n        <li><a href=\"/ko/docs/WebAssembly/Text_format_to_wasm\">Converting WebAssembly text format to wasm</a></li>\n        <li><a href=\"/ko/docs/WebAssembly/Loading_and_running\">Loading and running WebAssembly code</a></li>\n        <li><a href=\"/ko/docs/WebAssembly/Caching_modules\">Caching compiled WebAssembly modules</a></li>\n        <li><a href=\"/ko/docs/WebAssembly/Exported_functions\">Exported WebAssembly functions</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Object reference</summary>\n      <ol>\n        <li><a href=\"/ko/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></li>\n        <li><a href=\"/ko/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a></li>\n        <li><a href=\"/ko/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global</code></a></li>\n        <li><a href=\"/ko/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code></a></li>\n        <li><a href=\"/ko/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code></a></li>\n        <li><a href=\"/ko/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code></a></li>\n        <li><a href=\"/ko/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code></a></li>\n        <li><a href=\"/ko/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code></a></li>\n        <li><a href=\"/ko/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code></a></li>\n      </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>여러분이 Rust 코드를 가지고 있다면 WebAssembly로 컴파일 할 수 있습니다. 이 튜토리얼은 Rust 프로젝트를 컴파일하여 기존 웹 애플리케이션에서 사용하기 위해 알아야 할 모든 것을 설명합니다.</p>"}},{"type":"prose","value":{"id":"rust_및_webassembly_사용_사례","title":"Rust 및 WebAssembly 사용 사례","isH3":false,"content":"<p>Rust와 WebAssembly를 위한 두가지 주요 사용 사례가 있습니다.</p>\n<ul>\n  <li>어플리케이션 전체를 만드는것 - Rust기반 Web app 만들기</li>\n  <li>어플리케이션의 일부를 만드는것 - Rust를 기존에 존재하는 JavaScript frontend에서 사용하는것</li>\n</ul>\n<p>당분간, Rust 팀은 후자의 경우에 초점을 맞출 것입니다.그래서 여기서는 두번째 내용에 대해 다루겠습니다. 첫번째 use-case는 <a href=\"https://github.com/DenisKolodin/yew\" class=\"external\" rel=\" noopener\"><code>yew</code></a>와 같은 프로젝트를 한번 확인해보세요.</p>\n<p>이 튜토리얼에서는 Rust의 npm 패키지를 빌드하는 도구인 <code>wasm-pack</code>을 사용하여 npm 패키지를 빌드합니다. 이 패키지에는 WebAssembly 및 JavaScript 코드만 포함되므로 패키지 사용자는 Rust를 설치할 필요가 없습니다. 심지어 WebAssembly에서 작성된 것임을 알지 못할 수도 있습니다.</p>"}},{"type":"prose","value":{"id":"rust_환경_설치","title":"Rust 환경 설치","isH3":false,"content":"<p>환경을 설치하기 위해 필요한 모든 단계를 수행해 봅시다.</p>"}},{"type":"prose","value":{"id":"rust_설치","title":"Rust 설치","isH3":true,"content":"<p><a href=\"https://www.rust-lang.org/install.html\" class=\"external\" rel=\" noopener\">Install Rust</a>와 다음 설명에 따라 Rust를 설치합니다. \"rustup\"이라는 툴을 설치할건데 다양한 버전의 Rust를 관리할 수 있게 해줍니다. 기본적으로 최신 배포버전의 Rust가 설치됩니다. Rustup은 Rust 컴파일러인 <code>rustc</code> Rust의 표준 라이브러리 인 <code>rust-std</code>, Rust의 패키지 메니저 <code>cargo</code>및 <code>rust-docs</code> 등 유용한 문서를 설치합니다.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>참고:</strong> 설치를 완료한 뒤 cargo의 <code>bin</code> 디렉토리가 시스템의 <code>PATH</code>에 등록되어 있어야 함에 주의하십시오. 보통은 자동으로 등록되지만, 터미널을 재시작해야 할 수도 있습니다.</p>\n</div>"}},{"type":"prose","value":{"id":"wasm-pack","title":"wasm-pack","isH3":true,"content":"<p>패키지를 빌드하기 위해, <code>wasm-pack</code>이라는 추가적인 툴이 필요합니다. 이것을 통해 코드를 WebAssembly로 컴파일하고, <code>npm</code>에 적합한 패키징을 생성할 수 있습니다. 설치를 하려면 터미널에 다음 명령을 입력합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>    cargo <span class=\"token function\">install</span> wasm-pack\n</code></pre></div>"}},{"type":"prose","value":{"id":"node.js_설치와_npm_계정_생성","title":"Node.js 설치와 npm 계정 생성","isH3":true,"content":"<p>이 튜토리얼에서 우리는 npm 패키지를 생성할 것이므로 Node.js와 npm이 설치되어 있어야 합니다. 추가적으로, 우리는 npm에 패키지를 배포할 것이며 npm 계정 역시 필요합니다. 이것들은 모두 무료입니다. 당신은 <em>기술적으로는</em> 패키지를 배포할 필요가 없지만, 패키지를 사용하는 것이 더 쉬우므로 이 튜토리얼에서 수행한다고 가정합니다.</p>\n<p>Node.js와 npm을 설치하려면 <a href=\"https://www.npmjs.com/get-npm\" class=\"external\" rel=\" noopener\">Get npm!</a> 페이지를 열고 안내를 따라하시면 됩니다. 버전을 선택할 때, 원하는 것을 선택하면 됩니다. 이 튜토리얼은 버전과는 무관합니다.</p>\n<p>npm 계정을 만드려면 <a href=\"https://www.npmjs.com/signup\" class=\"external\" rel=\" noopener\">npm 가입 페이지</a> 에서 양식을 작성하시면 됩니다.</p>\n<p>그 다음은, 명령줄에서 <code>npm adduser</code> 명령을 실행합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>    $ <span class=\"token function\">npm</span> adduser\n    Username: yournpmusername\n    Password:\n    Email: <span class=\"token punctuation\">(</span>this IS public<span class=\"token punctuation\">)</span> you@example.com\n</code></pre></div>\n<p>계정명과 패스워드, 그리고 이메일을 입력하세요. 제대로 작동했다면, 다음 출력을 볼 수 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>    Logged <span class=\"token keyword\">in</span> as yournpmusername on https://registry.npmjs.org/.\n</code></pre></div>\n<p>만약 제대로 되지 않았다면, 문제 해결을 위해 npm에 문의를 해보세요.</p>"}},{"type":"prose","value":{"id":"webassembly_npm_패키지_빌드하기","title":"WebAssembly npm 패키지 빌드하기","isH3":false,"content":"<p>설치가 다 되었으므로, Rust의 새 패키지를 만듭시다. 개인 프로젝트를 담는 디렉터리로 이동한 뒤, 다음 명령어를 입력합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>    $ cargo new --lib hello-wasm\n         Created library <span class=\"token variable\"><span class=\"token variable\">`</span>hello-wasm<span class=\"token variable\">`</span></span> project\n</code></pre></div>\n<p>이 명령어는 <code>hello-wasm</code>으로 이름지어진 하위 디렉터리에 새 라이브러리를 생성합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>    +-- Cargo.toml\n    +-- src\n        +-- lib.rs\n</code></pre></div>\n<p>첫번째로, <code>Cargo.toml</code>은 빌드를 위해 설정하는 파일입니다. Bundler에서 <code>Gemfile</code>이나 npm에서 <code>package.json</code>을 써보셨다면 꽤 익숙할 것입니다. Cargo는 이것들과 비슷한 방식으로 작동합니다.</p>\n<p>다음은, Cargo가 <code>src/lib.rs</code>에 다음 Rust 코드를 생성했을 것입니다.</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>    <span class=\"token comment\">#[cfg(test)]</span>\n    mod tests <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">#[test]</span>\n        fn <span class=\"token function-name function\">it_works</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            assert_eq<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> + <span class=\"token number\">2</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>우리는 이 테스트 코드를 사용하지 않을 것이므로, 삭제해도 좋습니다.</p>"}},{"type":"prose","value":{"id":"rust로_무언가를_써보기","title":"Rust로 무언가를 써보기","isH3":true,"content":"<p><code>src/lib.rs</code>에 다음 코드를 적어봅시다.</p>\n<div class=\"code-example\"><pre class=\"brush: rs notranslate\">    use wasm_bindgen::prelude::*;\n\n    #[wasm_bindgen]\n    extern {\n        pub fn alert(s: &amp;str);\n    }\n\n    #[wasm_bindgen]\n    pub fn greet(name: &amp;str) {\n        alert(&amp;format!(\"Hello, {}!\", name));\n    }\n</pre></div>\n<p>이것은 우리의 Rust project의 내용으로, 세가지 주요 부분이 있습니다. 그들에 대해 차례대로 얘기해봅시다. 여기서는 고수준의 설명을 제공하고 일부 세부 사항에 대해서 설명합니다. Rust 언어에 대해 좀 더 배우고 싶으시면 <a href=\"https://doc.rust-lang.org/book/\" class=\"external\" rel=\" noopener\">The Rust Programming Language</a> 에서 확인하시면 됩니다.</p>\n<h4 id=\"rust와_javascript간의_통신을_위한_wasm-bindgen_사용\">Rust와 JavaScript간의 통신을 위한 <code>wasm-bindgen</code> 사용</h4>\n<p>첫 부분은 다음과 같습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: rs notranslate\">    use wasm_bindgen::prelude::*;\n</pre></div>\n<p>Rust에서 라이브러리는 크레이트(crate)라고 합니다.</p>\n<p>알 것 같나요? <em>Cargo(화물)</em> 는 배에 <em>crate(상자)</em> 들을 실어 나릅니다.</p>\n<p>세번째 줄의 <code>use</code> 키워드는 라이브러리로부터 코드를 불러옵니다. 이 경우, 우리는 <code>wasm_bindgen::prelude</code> 모듈 내에 있는 모든 것을 불러오게 됩니다. 다음 섹션에서 이것들의 기능에 대해 다룰 것입니다.</p>\n<p>다음 섹션으로 넘어가기 전에 <code>wasm-bindgen</code>에 대해 좀 더 얘기해야 합니다.</p>\n<p><code>wasm-pack</code>은 다른 도구인 <code>wasm-bindgen</code>을 사용해 JavaScript와 Rust의 타입들 사이에 다리를 제공합니다. 이는 JavaScript가 문자열을 통해 Rust의 API를 호출하거나, JavaScript의 예외를 포착하기 위해 Rust의 함수를 호출할 수 있습니다.</p>\n<p>우리는 패키지에서 <code>wasm-bindgen</code>의 기능을 사용할 것입니다. 실은, 그것들은 다음 섹션에 있습니다.</p>\n<h4 id=\"rust에서_javascript의_외부함수_호출\">Rust에서 JavaScript의 외부함수 호출</h4>\n<p>다음 부분은 이렇게 되어있을 것입니다.</p>\n<div class=\"code-example\"><pre class=\"brush: rs notranslate\">    #[wasm_bindgen]\n    extern {\n        pub fn alert(s: &amp;str);\n    }\n</pre></div>\n<p><code>#[ ]</code> 안에 있는 것을 속성이라고 부르는데, 이것은 다음에 오는 구문을 수정합니다. 이 경우에, 그 구문은 <code>extern</code>이며, Rust에게 외부에 정의된 함수를 호출할 것임을 알립니다. 이 속성의 경우, \"<code>wasm-bindgen</code>은 이 함수들을 어떻게 찾을 것인지 알고 있다\"고 알리는 것입니다.</p>\n<p>세번째 줄의 함수 시그니처는 Rust로 작성되어있습니다. <code>alert</code> 함수는 문자열 타입의 <code>s</code> 하나를 인자로서 받는다는 의미입니다.</p>\n<p>짐작하셨듯이, 이것은 <a href=\"/ko/docs/Web/API/Window/alert\">JavaScript에 의해 제공되는 <code>alert</code> 함수</a>입니다. 다음 섹션에서 이 함수를 호출할 것입니다.</p>\n<p>JavaScript 함수를 호출하고 싶을 때면 언제든지 이들을 파일에 추가할 수 있으며, `wasm-bindgen`이 당신을 위해 그 모든 것을 설정할 것입니다. 아직 모든 것이 지원되지는 않지만, 우리는 노력하고 있습니다. 빠진 것이 있다면, <a href=\"https://github.com/rustwasm/wasm-bindgen/issues/new\" class=\"external\" rel=\" noopener\">버그를 제출해주십시오.</a></p>\n<h4 id=\"javascript가_호출할_수_있는_rust_함수_작성\">JavaScript가 호출할 수 있는 Rust 함수 작성</h4>\n<p>마지막 부분은 여기 있습니다.</p>\n<div class=\"code-example\"><pre class=\"brush: rs notranslate\">    #[wasm_bindgen]\n    pub fn greet(name: &amp;str) {\n        alert(&amp;format!(\"Hello, {}!\", name));\n    }\n</pre></div>\n<p><code>#[wasm_bindgen]</code> 속성이 한번 더 나왔습니다. 이번엔 <code>extern</code> 구문이 수정되는 대신, <code>fn</code> 구문이 수정됩니다. 이것은 Rust 함수를 JavaScript에 의해 호출될 수 있도록 함을 의미하며, <code>extern</code> 과는 반대 기능이 됩니다. 이것은 우리가 필요로 하는 기능이 아니라, 우리가 세상에 제공하는 기능이 될 것입니다.</p>\n<p>이 함수의 이름은 <code>greet</code>이며, (<code>&amp;str</code> 이라고 쓰여진) 문자열 타입의 <code>name</code> 하나를 인자로 갖습니다. 이것은 우리가 위에 있는 <code>extern</code> 블록에서 요구한 <code>alert</code> 함수를 호출하여, 문자열을 연결하는 <code>format!</code> 매크로를 전달합니다.</p>\n<p><code>format!</code>매크로는 이 경우에 서식 문자열과 변수를 두개의 인자로 받습니다. 서식 문자열은 <code>\"Hello, {}!\"</code> 입니다. 이것은 두번째 인자의 변수를 표시할 <code>{}</code>를 담고 있습니다. 변수의 경우 함수의 인자로 전달받은 <code>name</code>을 전달하므로, 우리가 <code>greet(\"Steve\")</code>를 호출하였다면 매크로는 <code>\"Hello, Steve!\"</code>를 반환할 것입니다.</p>\n<p>이것은 <code>alert()</code>에 인자로 전달되므로, 이 함수를 호출한다면 우리는 브라우저의 경고창에서 \"Hello, Steve!\"를 볼 수 있을 것입니다.</p>\n<p>라이브러리가 모두 작성되었으므로, 빌드를 해봅시다.</p>"}},{"type":"prose","value":{"id":"작성된_코드를_webassembly로_컴파일","title":"작성된 코드를 WebAssembly로 컴파일","isH3":true,"content":"<p>컴파일이 올바르게 되려면, 먼저 <code>Cargo.toml</code>에서 설정을 해줘야 합니다. 파일을 열면, 다음과 같은 내용이 있을 것입니다.</p>\n<pre class=\"notranslate\">    [package]\n    name = \"hello-wasm\"\n    version = \"0.1.0\"\n    authors = [\"Your Name &lt;you@example.com&gt;\"]\n    description = \"A sample project with wasm-pack\"\n    license = \"MIT/Apache-2.0\"\n    repository = \"https://github.com/yourgithubusername/hello-wasm\"\n\n    [lib]\n    crate-type = [\"cdylib\"]\n\n    [dependencies]\n    wasm-bindgen = \"0.2\"\n</pre>\n<p>리포지토리 이름을 작성하고, <code>author</code> 필드를 <code>git</code>이 사용하는 것과 같게 설정해주세요.</p>\n<p>추가해야 할 커다란 부분은 아래에 있습니다. <code>[lib]</code> 섹션은 패키지를 <code>cdylib</code> 형식으로 빌드할 것이라고 Rust에게 알리는데, 이 튜토리얼에선 그 의미가 무엇인지 다루지 않을 것입니다. 자세한 설명은 <a href=\"https://doc.rust-lang.org/cargo/guide/\" class=\"external\" rel=\" noopener\">Cargo</a> 와 <a href=\"https://doc.rust-lang.org/reference/linkage.html\" class=\"external\" rel=\" noopener\">Rust Linkage</a> 문서를 참조하십시오.</p>\n<p>마지막의 <code>[dependencies]</code> 섹션에서, Cargo에게 어떤 버전의 <code>wasm-bindgen</code>에 의존하고 있는지 알립니다. 이 경우, 버전 <code>0.2.z</code>는 어떤 것이든 사용할 수 있지만, <code>0.3.0</code>이상부터는 사용하지 않습니다.</p>"}},{"type":"prose","value":{"id":"패키지_빌드하기","title":"패키지 빌드하기","isH3":true,"content":"<p>모든 셋팅이 끝났으므로, 패키지를 빌드합시다. 터미널에 다음을 입력합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>    wasm-pack build --scope mynpmusername\n</code></pre></div>\n<p>이 명령어를 입력하면 많은 일이 일어납니다. (그리고 특히 <code>wasm-pack</code>을 처음 실행했을 때 처럼 많은 시간이 걸립니다.) 이에 대한 자세한 사항을 알고 싶으면, <a href=\"https://hacks.mozilla.org/2018/04/hello-wasm-pack/\" class=\"external\" rel=\" noopener\">Mozilla Hacks의 블로그 포스트</a>를 확인해보세요. 간단히 요약하자면, <code>wasm-pack build</code>는:</p>\n<ol>\n  <li>Rust 코드를 WebAssembly로 컴파일 합니다.</li>\n  <li>그 WebAssembly 위에서 <code>wasm-bindgen</code>을 실행하여, WebAssembly를 npm이 이해할 수 있는 모듈로 감싸는 JavaScript 파일을 생성합니다.</li>\n  <li><code>pkg</code> 디렉터리를 만들고 JavaScript 파일과 WebAssembly 코드를 그 안으로 옮깁니다.</li>\n  <li><code>Cargo.toml</code> 을 읽고 동등한 <code>package.json</code>을 생성합니다.</li>\n  <li><code>README.md</code> 가 있다면 패키지로 복사합니다.</li>\n</ol>\n<p>빌드가 끝났다면, <code>pkg</code> 디렉터리에 npm 패키지가 생성될 것입니다.</p>\n<h4 id=\"코드_사이즈에_대한_오류\">코드 사이즈에 대한 오류</h4>\n<p>생성된 WebAssembly 코드의 크기를 확인해보면, 몇백 킬로바이트가 될 것입니다. 우리는 Rust에게 코드의 크기를 최적화하라고 지시하지 않았으며, 만약 그렇게 지시한다면 크기가 <em>많이</em> 줄어들 것입니다. 이것은 이 튜토리얼에서 다루는 내용을 벗어나지만, 자세한 내용을 보려면 <a href=\"https://rustwasm.github.io/book/game-of-life/code-size.html#shrinking-wasm-size\" class=\"external\" rel=\" noopener\">Shrinking .wasm Size</a>에 대한 Rust WebAssembly Working Group의 문서를 참조하십시오.</p>"}},{"type":"prose","value":{"id":"npm에_패키지_배포","title":"npm에 패키지 배포","isH3":true,"content":"<p>npm에 우리의 새 패키지를 배포해봅시다.</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>    <span class=\"token builtin class-name\">cd</span> pkg\n    <span class=\"token function\">npm</span> publish --access<span class=\"token operator\">=</span>public\n</code></pre></div>\n<p>우리는 이제 Rust로 쓰여졌으나, WebAssembly로 컴파일된 npm 패키지를 갖고 있습니다. 이것은 JavaScript에 쓰일 수 있도록 준비되었으며, 다른 사용자들은 Rust를 설치할 필요가 없습니다. 왜냐하면 패키지에는 WebAssembly 코드만 포함되어있으며, Rust 소스는 없기 때문입니다.</p>"}},{"type":"prose","value":{"id":"웹상의_패키지_사용하기","title":"웹상의 패키지 사용하기","isH3":false,"content":"<p>우리의 새 패키지를 사용하는 웹사이트를 빌드해봅시다. 많은 사람들이 여러가지 번들러 도구를 사용해 npm패키지를 사용하는데, 이 튜토리얼에선 이들 중 하나인 <code>webpack</code>을 사용할 것입니다. 이것은 조금 복잡하고, 현실적인 사용 사례를 보여줄 것입니다.</p>\n<p><code>pkg</code> 와 <code>hello-wasm</code> 디렉터리를 빠져나가서, 다음처럼 <code>site</code>라는 이름의 새 디렉터리를 만들고 진입합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>    <span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>\n    <span class=\"token function\">mkdir</span> site\n    <span class=\"token builtin class-name\">cd</span> site\n</code></pre></div>\n<p><code>package.json</code> 이라는 이름의 새 파일을 만들어, 다음 코드를 작성합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: json notranslate\"><code>    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"serve\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack-dev-server\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"@mynpmusername/hello-wasm\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^0.1.0\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"webpack\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.25.1\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"webpack-cli\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^3.1.2\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"webpack-dev-server\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^3.1.10\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>dependencies</code> 섹션에서 <code>@</code> 뒤에 실제 npm 계정명을 넣어주세요.</p>\n<p>그 다음은 Webpack을 설정해야 합니다. <code>webpack.config.js</code> 파일을 만든 뒤, 다음 코드를 작성합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>    <span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./index.js\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"dist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">\"development\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>그리고 HTML 파일도 필요합니다. <code>index.html</code>을 만들고, 다음 내용을 작성합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>    <span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>hello-wasm example<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./index.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>마지막으로, HTML에서 참조되는 <code>index.js</code>를 만들어 다음 내용을 작성합니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>    <span class=\"token keyword\">const</span> js <span class=\"token operator\">=</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./node_modules/@yournpmusername/hello-wasm/hello_wasm.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    js<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">js</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      js<span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WebAssembly\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>npm 계정명을 한번 더 입력해야 합니다.</p>\n<p>이것은 <code>node_modules</code> 폴더에 있는 새 모듈을 불러옵니다. 이것은 모범 사례로 여겨지진 않지만, 데모이므로 지금은 괜찮습니다. 모듈이 로드되었면, 모듈로부터 <code>greet</code> 함수를 호출하여 <code>\"WebAssembly\"</code> 를 문자열로서 전달합니다. 여기엔 특별한 것이 없지만, Rust 코드를 호출한 방법에 주목해주세요. JavaScript 코드가 알 수 있는 한, 이것은 그저 정상적인 모듈일 뿐입니다.</p>\n<p>파일들을 모두 만들었으니, 한번 보도록 합시다.</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>    <span class=\"token function\">npm</span> <span class=\"token function\">install</span>\n    <span class=\"token function\">npm</span> run serve\n</code></pre></div>\n<p>이것은 간단한 웹 서버를 시작합니다. <a href=\"http://localhost:8080/\" class=\"external\" rel=\" noopener\">http://localhost:8080</a>을 열면 화면에 <code>Hello, WebAssembly!</code> 라고 쓰여진 alert box가 나타납니다. 우리는 성공적으로 JavaScript로부터 Rust를, Rust로부터 JavaScript를 호출하였습니다.</p>"}},{"type":"prose","value":{"id":"결론","title":"결론","isH3":false,"content":"<p>이것이 튜토리얼의 끝입니다. 우리는 당신이 이것이 쓸모있다는 것을 알게 되었길 기대합니다.</p>\n<p>여기에 많은 흥미로운 작업이 진행되고 있습니다. 이것을 좀 더 낫게 만들고 싶다면, <a href=\"https://fitzgeraldnick.com/2018/02/27/wasm-domain-working-group.html\" class=\"external\" rel=\" noopener\">the Rust Webassembly Working Group</a>을 확인해보세요.</p>"}}],"toc":[{"text":"Rust 및 WebAssembly 사용 사례","id":"rust_및_webassembly_사용_사례"},{"text":"Rust 환경 설치","id":"rust_환경_설치"},{"text":"WebAssembly npm 패키지 빌드하기","id":"webassembly_npm_패키지_빌드하기"},{"text":"웹상의 패키지 사용하기","id":"웹상의_패키지_사용하기"},{"text":"결론","id":"결론"}],"summary":"여러분이 Rust 코드를 가지고 있다면 WebAssembly로 컴파일 할 수 있습니다. 이 튜토리얼은 Rust 프로젝트를 컴파일하여 기존 웹 애플리케이션에서 사용하기 위해 알아야 할 모든 것을 설명합니다.","popularity":0.0002,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Compiling from Rust to WebAssembly","locale":"en-US","native":"English (US)"},{"title":"Rust から WebAssembly にコンパイルする","locale":"ja","native":"日本語"},{"title":"Компиляция Rust в WebAssembly","locale":"ru","native":"Русский"},{"title":"编译 Rust 为 WebAssembly","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"ko/webassembly/rust_to_wasm","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/webassembly/rust_to_wasm/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ko/docs/WebAssembly","title":"웹어셈블리"},{"uri":"/ko/docs/WebAssembly/Rust_to_wasm","title":"Rust를 WebAssembly로 컴파일하기"}],"pageTitle":"Rust를 WebAssembly로 컴파일하기 - 웹어셈블리 | MDN","noIndexing":false}}