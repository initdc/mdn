{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Express Tutorial Part 4: Routes and controllers","mdn_url":"/ko/docs/Learn/Server-side/Express_Nodejs/routes","locale":"ko","native":"한국어","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"\"><a href=\"/ko/docs/Learn/Getting_started_with_the_web\"><strong>Complete beginners start here!</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>Getting started with the Web</summary>\n          <ol>\n            <li><a href=\"/ko/docs/Learn/Getting_started_with_the_web\">Getting started with the Web overview</a></li>\n            <li><a href=\"/ko/docs/Learn/Getting_started_with_the_web/Installing_basic_software\">Installing basic software</a></li>\n            <li><a href=\"/ko/docs/Learn/Getting_started_with_the_web/What_will_your_website_look_like\">What will your website look like?</a></li>\n            <li><a href=\"/ko/docs/Learn/Getting_started_with_the_web/Dealing_with_files\">Dealing with files</a></li>\n            <li><a href=\"/ko/docs/Learn/Getting_started_with_the_web/HTML_basics\">HTML basics</a></li>\n            <li><a href=\"/ko/docs/Learn/Getting_started_with_the_web/CSS_basics\">CSS basics</a></li>\n            <li><a href=\"/ko/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">JavaScript basics</a></li>\n            <li><a href=\"/ko/docs/Learn/Getting_started_with_the_web/Publishing_your_website\">Publishing your website</a></li>\n            <li><a href=\"/ko/docs/Learn/Getting_started_with_the_web/How_the_Web_works\">How the Web works</a></li>\n          </ol>\n      </details>\n  </li>\n  <li data-default-state=\"\"><a href=\"/ko/docs/Learn/HTML\"><strong>HTML — Structuring the Web</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>Introduction to HTML</summary>\n          <ol>\n            <li><a href=\"/ko/docs/Learn/HTML/Introduction_to_HTML\">Introduction to HTML overview</a></li>\n            <li><a href=\"/ko/docs/Learn/HTML/Introduction_to_HTML/Getting_started\">Getting started with HTML</a></li>\n            <li><a href=\"/ko/docs/Learn/HTML/Introduction_to_HTML/The_head_metadata_in_HTML\">What's in the head? Metadata in HTML</a></li>\n            <li><a href=\"/ko/docs/Learn/HTML/Introduction_to_HTML/HTML_text_fundamentals\">HTML text fundamentals</a></li>\n            <li><a href=\"/ko/docs/Learn/HTML/Introduction_to_HTML/Creating_hyperlinks\">Creating hyperlinks</a></li>\n            <li><a href=\"/ko/docs/Learn/HTML/Introduction_to_HTML/Advanced_text_formatting\">Advanced text formatting</a></li>\n            <li><a href=\"/ko/docs/Learn/HTML/Introduction_to_HTML/Document_and_website_structure\">Document and website structure</a></li>\n            <li><a href=\"/ko/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML\">Debugging HTML</a></li>\n            <li><a href=\"/ko/docs/Learn/HTML/Introduction_to_HTML/Marking_up_a_letter\">Assessment: Marking up a letter</a></li>\n            <li><a href=\"/ko/docs/Learn/HTML/Introduction_to_HTML/Structuring_a_page_of_content\">Assessment: Structuring a page of content</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>Multimedia and embedding</summary>\n          <ol>\n            <li><a href=\"/ko/docs/Learn/HTML/Multimedia_and_embedding\">Multimedia and embedding overview</a></li>\n            <li><a href=\"/ko/docs/Learn/HTML/Multimedia_and_embedding/Images_in_HTML\">Images in HTML</a></li>\n            <li><a href=\"/ko/docs/Learn/HTML/Multimedia_and_embedding/Video_and_audio_content\">Video and audio content</a></li>\n            <li><a href=\"/ko/docs/Learn/HTML/Multimedia_and_embedding/Other_embedding_technologies\">From object to iframe — other embedding technologies</a></li>\n            <li><a href=\"/ko/docs/Learn/HTML/Multimedia_and_embedding/Adding_vector_graphics_to_the_Web\">Adding vector graphics to the Web</a></li>\n            <li><a href=\"/ko/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images\">Responsive images</a></li>\n            <li><a href=\"/ko/docs/Learn/HTML/Multimedia_and_embedding/Mozilla_splash_page\">Assessment: Mozilla splash page</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>HTML tables</summary>\n          <ol>\n            <li><a href=\"/ko/docs/Learn/HTML/Tables\">HTML tables overview</a></li>\n            <li><a href=\"/ko/docs/Learn/HTML/Tables/Basics\">HTML table basics</a></li>\n            <li><a href=\"/ko/docs/Learn/HTML/Tables/Advanced\">HTML Table advanced features and accessibility</a></li>\n            <li><a href=\"/ko/docs/Learn/HTML/Tables/Structuring_planet_data\">Assessment: Structuring planet data</a></li>\n          </ol>\n      </details>\n  </li>\n  <li data-default-state=\"\"><a href=\"/ko/docs/Learn/CSS\"><strong>CSS — Styling the Web</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>CSS first steps</summary>\n          <ol>\n            <li><a href=\"/ko/docs/Learn/CSS/First_steps\">CSS first steps overview</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/First_steps/What_is_CSS\">What is CSS?</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/First_steps/Getting_started\">Getting started with CSS</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/First_steps/How_CSS_is_structured\">How CSS is structured</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/First_steps/How_CSS_works\">How CSS works</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/First_steps/Using_your_new_knowledge\">Using your new knowledge</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>CSS building blocks</summary>\n          <ol>\n            <li><a href=\"/ko/docs/Learn/CSS/Building_blocks\">CSS building blocks overview</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance\">Cascade and inheritance</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/Building_blocks/Selectors\">CSS selectors</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/Building_blocks/The_box_model\">The box model</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/Building_blocks/Backgrounds_and_borders\">Backgrounds and borders</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/Building_blocks/Handling_different_text_directions\">Handling different text directions</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/Building_blocks/Overflowing_content\">Overflowing content</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/Building_blocks/Values_and_units\">Values and units</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/Building_blocks/Sizing_items_in_CSS\">Sizing items in CSS</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/Building_blocks/Images_media_form_elements\">Images, media, and form elements</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/Building_blocks/Styling_tables\">Styling tables</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/Building_blocks/Debugging_CSS\">Debugging CSS</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/Building_blocks/Organizing\">Organizing your CSS</a></li>\n      </ol></details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>Styling text</summary>\n          <ol>\n            <li><a href=\"/ko/docs/Learn/CSS/Styling_text\">Styling text overview</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/Styling_text/Fundamentals\">Fundamental text and font styling</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/Styling_text/Styling_lists\">Styling lists</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/Styling_text/Styling_links\">Styling links</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/Styling_text/Web_fonts\">Web fonts</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/Styling_text/Typesetting_a_homepage\">Assessment: Typesetting a community school homepage</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>CSS layout</summary>\n          <ol>\n            <li><a href=\"/ko/docs/Learn/CSS/CSS_layout\">CSS layout overview</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/CSS_layout/Introduction\">Introduction to CSS layout</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/CSS_layout/Normal_Flow\">Normal Flow</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/CSS_layout/Flexbox\">Flexbox</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/CSS_layout/Grids\">Grids</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/CSS_layout/Floats\">Floats</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/CSS_layout/Positioning\">Positioning</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/CSS_layout/Multiple-column_Layout\">Multiple-column Layout</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/CSS_layout/Responsive_Design\">Responsive design</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/CSS_layout/Media_queries\">Beginner's guide to media queries</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/CSS_layout/Legacy_Layout_Methods\">Legacy Layout Methods</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/CSS_layout/Supporting_Older_Browsers\">Supporting Older Browsers</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/CSS_layout/Fundamental_Layout_Comprehension\">Fundamental Layout Comprehension</a></li>\n          </ol>\n      </details>\n  </li>\n  <li data-default-state=\"\"><a href=\"/ko/docs/Learn/JavaScript\"><strong>JavaScript — Dynamic client-side scripting</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>JavaScript first steps</summary>\n          <ol>\n            <li><a href=\"/ko/docs/Learn/JavaScript/First_steps\">JavaScript first steps overview</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/First_steps/What_is_JavaScript\">What is JavaScript?</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/First_steps/A_first_splash\">A first splash into JavaScript</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/First_steps/What_went_wrong\">What went wrong? Troubleshooting JavaScript</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/First_steps/Variables\">Storing the information you need — Variables</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/First_steps/Math\">Basic math in JavaScript — Numbers and operators</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/First_steps/Strings\">Handling text — Strings in JavaScript</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/First_steps/Useful_string_methods\">Useful string methods</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/First_steps/Arrays\">Arrays</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/First_steps/Silly_story_generator\">Assessment: Silly story generator</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>JavaScript building blocks</summary>\n          <ol>\n            <li><a href=\"/ko/docs/Learn/JavaScript/Building_blocks\">JavaScript building blocks overview</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/Building_blocks/conditionals\">Making decisions in your code — Conditionals</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/Building_blocks/Looping_code\">Looping code</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/Building_blocks/Functions\">Functions — Reusable blocks of code</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/Building_blocks/Build_your_own_function\">Build your own function</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/Building_blocks/Return_values\">Function return values</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/Building_blocks/Events\">Introduction to events</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/Building_blocks/Image_gallery\">Assessment: Image gallery</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>Introducing JavaScript objects</summary>\n          <ol>\n            <li><a href=\"/ko/docs/Learn/JavaScript/Objects\">Introducing JavaScript objects overview</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/Objects/Basics\">Object basics</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/Objects/Object_prototypes\">Object prototypes</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/Objects/Object-oriented_programming\">Object-oriented programming concepts</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/Objects/Classes_in_JavaScript\">Classes in JavaScript</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/Objects/JSON\">Working with JSON data</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/Objects/Object_building_practice\">Object building practice</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/Objects/Adding_bouncing_balls_features\">Assessment: Adding features to our bouncing balls demo</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Asynchronous JavaScript</summary>\n        <ol>\n          <li><a href=\"/ko/docs/Learn/JavaScript/Asynchronous\">Asynchronous JavaScript overview</a></li>\n          <li><a href=\"/ko/docs/Learn/JavaScript/Asynchronous/Concepts\">General asynchronous programming concepts</a></li>\n          <li><a href=\"/ko/docs/Learn/JavaScript/Asynchronous/Introducing\">Introducing asynchronous JavaScript</a></li>\n          <li><a href=\"/ko/docs/Learn/JavaScript/Asynchronous/Timeouts_and_intervals\">Cooperative asynchronous Java​Script: Timeouts and intervals</a></li>\n          <li><a href=\"/ko/docs/Learn/JavaScript/Asynchronous/Promises\">Graceful asynchronous programming with Promises</a></li>\n          <li><a href=\"/ko/docs/Learn/JavaScript/Asynchronous/Async_await\">Making asynchronous programming easier with async and await</a></li>\n          <li><a href=\"/ko/docs/Learn/JavaScript/Asynchronous/Choosing_the_right_approach\">Choosing the right approach</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Client-side web APIs</summary>\n        <ol>\n          <li><a href=\"/ko/docs/Learn/JavaScript/Client-side_web_APIs\">Client-side web APIs</a></li>\n          <li><a href=\"/ko/docs/Learn/JavaScript/Client-side_web_APIs/Introduction\">Introduction to web APIs</a></li>\n          <li><a href=\"/ko/docs/Learn/JavaScript/Client-side_web_APIs/Manipulating_documents\">Manipulating documents</a></li>\n          <li><a href=\"/ko/docs/Learn/JavaScript/Client-side_web_APIs/Fetching_data\">Fetching data from the server</a></li>\n          <li><a href=\"/ko/docs/Learn/JavaScript/Client-side_web_APIs/Third_party_APIs\">Third party APIs</a></li>\n          <li><a href=\"/ko/docs/Learn/JavaScript/Client-side_web_APIs/Drawing_graphics\">Drawing graphics</a></li>\n          <li><a href=\"/ko/docs/Learn/JavaScript/Client-side_web_APIs/Video_and_audio_APIs\">Video and audio APIs</a></li>\n          <li><a href=\"/ko/docs/Learn/JavaScript/Client-side_web_APIs/Client-side_storage\">Client-side storage</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"/ko/docs/Learn/Forms\"><strong>Web forms — Working with user data</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Core forms learning pathway</summary>\n        <ol>\n          <li><a href=\"/ko/docs/Learn/Forms\">Web forms overview</a></li>\n          <li><a href=\"/ko/docs/Learn/Forms/Your_first_form\">Your first form</a></li>\n          <li><a href=\"/ko/docs/Learn/Forms/How_to_structure_a_web_form\">How to structure a web form</a></li>\n          <li><a href=\"/ko/docs/Learn/Forms/Basic_native_form_controls\">Basic native form controls</a></li>\n          <li><a href=\"/ko/docs/Learn/Forms/HTML5_input_types\">The HTML5 input types</a></li>\n          <li><a href=\"/ko/docs/Learn/Forms/Other_form_controls\">Other form controls</a></li>\n          <li><a href=\"/ko/docs/Learn/Forms/Styling_web_forms\">Styling web forms</a></li>\n          <li><a href=\"/ko/docs/Learn/Forms/Advanced_form_styling\">Advanced form styling</a></li>\n          <li><a href=\"/ko/docs/Learn/Forms/UI_pseudo-classes\">UI pseudo-classes</a></li>\n          <li><a href=\"/ko/docs/Learn/Forms/Form_validation\">Client-side form validation</a></li>\n          <li><a href=\"/ko/docs/Learn/Forms/Sending_and_retrieving_form_data\">Sending form data</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Advanced forms articles</summary>\n        <ol>\n          <li><a href=\"/ko/docs/Learn/Forms/How_to_build_custom_form_controls\">How to build custom form controls</a></li>\n          <li><a href=\"/ko/docs/Learn/Forms/Sending_forms_through_JavaScript\">Sending forms through JavaScript</a></li>\n          <li><a href=\"/ko/docs/Learn/Forms/Property_compatibility_table_for_form_controls\">CSS property compatibility table for form controls</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"/ko/docs/Learn/Accessibility\"><strong>Accessibility — Make the web usable by everyone</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Accessibility guides</summary>\n        <ol>\n          <li><a href=\"/ko/docs/Learn/Accessibility\">Accessibility overview</a></li>\n          <li><a href=\"/ko/docs/Learn/Accessibility/What_is_accessibility\">What is accessibility?</a></li>\n          <li><a href=\"/ko/docs/Learn/Accessibility/HTML\">HTML: A good basis for accessibility</a></li>\n          <li><a href=\"/ko/docs/Learn/Accessibility/CSS_and_JavaScript\">CSS and JavaScript accessibility best practices</a></li>\n          <li><a href=\"/ko/docs/Learn/Accessibility/WAI-ARIA_basics\">WAI-ARIA basics</a></li>\n          <li><a href=\"/ko/docs/Learn/Accessibility/Multimedia\">Accessible multimedia</a></li>\n          <li><a href=\"/ko/docs/Learn/Accessibility/Mobile\">Mobile accessibility</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Accessibility assessment</summary>\n        <ol>\n            <li><a href=\"/ko/docs/Learn/Accessibility/Accessibility_troubleshooting\">Assessment: Accessibility troubleshooting</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"/ko/docs/Learn/Tools_and_testing\"><strong>Tools and testing</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Client-side web development tools</summary>\n        <ol>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Understanding_client-side_tools\">Client-side web development tools index</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Overview\">Client-side tooling overview</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Command_line\">Command line crash course</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Package_management\">Package management basics</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Introducing_complete_toolchain\">Introducing a complete toolchain</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Deployment\">Deploying our app</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Introduction to client-side frameworks</summary>\n        <ol>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Introduction\">Client-side frameworks overview</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Main_features\">Framework main features</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>React</summary>\n        <ol>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_getting_started\">Getting started with React</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_todo_list_beginning\">Beginning our React todo list</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_components\">Componentizing our React app</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_events_state\">React interactivity: Events and state</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_filtering_conditional_rendering\">React interactivity: Editing, filtering, conditional rendering</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_accessibility\">Accessibility in React</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_resources\">React resources</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Ember</summary>\n        <ol>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_getting_started\">Getting started with Ember</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_structure_componentization\">Ember app structure and componentization</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_interactivity_events_state\">Ember interactivity: Events, classes and state</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_conditional_footer\">Ember Interactivity: Footer functionality, conditional rendering</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_routing\">Routing in Ember</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_resources\">Ember resources and troubleshooting</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Vue</summary>\n        <ol>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_getting_started\">Getting started with Vue</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_first_component\">Creating our first Vue component</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_rendering_lists\">Rendering a list of Vue components</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_methods_events_models\">Adding a new todo form: Vue events, methods, and models</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_styling\">Styling Vue components with CSS</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_computed_properties\">Using Vue computed properties</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_conditional_rendering  \">Vue conditional rendering: editing existing todos</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_refs_focus_management\">Focus management with Vue refs</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_resources\">Vue resources</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Svelte</summary>\n        <ol>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_getting_started\">Getting started with Svelte</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_Todo_list_beginning\">Starting our Svelte Todo list app</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_variables_props\">Dynamic behavior in Svelte: working with variables and props</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_components\">Componentizing our Svelte app</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_reactivity_lifecycle_accessibility\">Advanced Svelte: Reactivity, lifecycle, accessibility</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_stores\">Working with Svelte stores</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_TypeScript  \">TypeScript support in Svelte</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_deployment_next\">Deployment and next steps</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Angular</summary>\n        <ol>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_getting_started\">Getting started with Angular</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_todo_list_beginning\">Beginning our Angular todo list app</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_styling\">Styling our Angular app</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_item_component\">Creating an item component</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_filtering\">Filtering our to-do items</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_building\">Building Angular applications and further resources</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Git and GitHub</summary>\n        <ol>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/GitHub\">Git and GitHub overview</a></li>\n          <li><a href=\"https://guides.github.com/activities/hello-world/\">Hello World</a></li>\n          <li><a href=\"https://guides.github.com/introduction/git-handbook/\">Git Handbook</a></li>\n          <li><a href=\"https://guides.github.com/activities/forking/\">Forking Projects</a></li>\n          <li><a href=\"https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests\">About pull requests</a></li>\n          <li><a href=\"https://guides.github.com/features/issues/\">Mastering Issues</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Cross browser testing</summary>\n        <ol>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Cross_browser_testing\">Cross browser testing overview</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Cross_browser_testing/Introduction\">Introduction to cross browser testing</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Cross_browser_testing/Testing_strategies\">Strategies for carrying out testing</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Cross_browser_testing/HTML_and_CSS\">Handling common HTML and CSS problems</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Cross_browser_testing/JavaScript\">Handling common JavaScript problems</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Cross_browser_testing/Accessibility\">Handling common accessibility problems</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Cross_browser_testing/Feature_detection\">Implementing feature detection</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Cross_browser_testing/Automated_testing\">Introduction to automated testing</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Cross_browser_testing/Your_own_automation_environment\">Setting up your own test automation environment</a></li>\n        </ol>\n    </details>\n  </li>\n  <li data-default-state=\"open\"><a href=\"/ko/docs/Learn/Server-side\"><strong>Server-side website programming</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>First steps</summary>\n        <ol>\n          <li><a href=\"/ko/docs/Learn/Server-side/First_steps\">First steps overview</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/First_steps/Introduction\">Introduction to the server-side</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/First_steps/Client-Server_overview\">Client-Server overview</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/First_steps/Web_frameworks\">Server-side web frameworks</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/First_steps/Website_security\">Website security</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Django web framework (Python)</summary>\n        <ol>\n          <li><a href=\"/ko/docs/Learn/Server-side/Django\">Django web framework (Python) overview</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Django/Introduction\">Introduction</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Django/development_environment\">Setting up a development environment</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Django/Tutorial_local_library_website\">Tutorial: The Local Library website</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Django/skeleton_website\">Tutorial Part 2: Creating a skeleton website</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Django/Models\">Tutorial Part 3: Using models</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Django/Admin_site\">Tutorial Part 4: Django admin site</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Django/Home_page\">Tutorial Part 5: Creating our home page</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Django/Generic_views\">Tutorial Part 6: Generic list and detail views</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Django/Sessions\">Tutorial Part 7: Sessions framework</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Django/Authentication\">Tutorial Part 8: User authentication and permissions</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Django/Forms\">Tutorial Part 9: Working with forms</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Django/Testing\">Tutorial Part 10: Testing a Django web application</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Django/Deployment\">Tutorial Part 11: Deploying Django to production</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Django/web_application_security\">Web application security</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Django/django_assessment_blog\">Assessment: DIY mini blog</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n        <summary>Express Web Framework (node.js/JavaScript)</summary>\n        <ol>\n          <li><a href=\"/ko/docs/Learn/Server-side/Express_Nodejs\">Express Web Framework (Node.js/JavaScript) overview</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Express_Nodejs/Introduction\">Express/Node introduction</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Express_Nodejs/development_environment\">Setting up a Node (Express) development environment</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Express_Nodejs/Tutorial_local_library_website\">Express tutorial: The Local Library website</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Express_Nodejs/skeleton_website\">Express Tutorial Part 2: Creating a skeleton website</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Express_Nodejs/mongoose\">Express Tutorial Part 3: Using a database (with Mongoose)</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Express_Nodejs/routes\">Express Tutorial Part 4: Routes and controllers</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Express_Nodejs/Displaying_data\">Express Tutorial Part 5: Displaying library data</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Express_Nodejs/forms\">Express Tutorial Part 6: Working with forms</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Express_Nodejs/deployment\">Express Tutorial Part 7: Deploying to production</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"#\"><strong>Further resources</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Common questions</summary>\n        <ol>\n          <li><a href=\"/ko/docs/Learn/HTML/Howto\">HTML questions</a></li>\n          <li><a href=\"/ko/docs/Learn/CSS/Howto\">CSS questions</a></li>\n          <li><a href=\"/ko/docs/Learn/JavaScript/Howto\">JavaScript questions</a></li>\n          <li><a href=\"/ko/docs/Learn/Common_questions#Web_mechanics\">Web mechanics</a></li>\n          <li><a href=\"/ko/docs/Learn/Common_questions#Tools_and_setup\">Tools and setup</a></li>\n          <li><a href=\"/ko/docs/Learn/Common_questions#Design_and_accessibility\">Design and accessibility</a></li>\n        </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ko/docs/Learn/Server-side/Express_Nodejs/mongoose\"> 이전 </a></li>\n    <li><a class=\"button minimal\" href=\"/ko/docs/Learn/Server-side/Express_Nodejs\"> Overview: Express Nodejs</a></li>\n    <li><a class=\"button minimal only-in-en-us\" href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data\" title=\"Currently only available in English (US)\"> 다음   (en-US)</a></li>\n</ul>\n<p>이 튜토리얼에서 우리는 더미 핸들러 함수를 이용해 최종적으로 <a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Tutorial_local_library_website\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">LocalLibrary (en-US)</a> 웹사이트에 쓰이게 될 모든 리소스 종단점라우팅 모듈 (url 핸들링 코드)를 설정해 볼 것입니다.이 작업을 통해 우리는 향후 문서에 쓰일 함수들을 모듈화된 라우트 핸들링 코드 구조로 제작하는 법을 배울 수 있습니다.또한 Express를 이용해 모듈화된 라우팅방법을 잘 이해할 수 있게 될 것입니다.</p>\n<table class=\"learn-box standard-table\">\n  <tbody>\n    <tr>\n      <th scope=\"row\">사전조건:</th>\n      <td>\n        <a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Introduction\">Express/Node introduction</a>를 먼저 구독해주세요.이전 강의 주제를 완료해 주세요.(\n        <a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/mongoose\">Express Tutorial Part3 : Mongoose Database 와 연동하기</a>)\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">목표:</th>\n      <td>\n        <p>간단한 라우팅 함수 구현.</p>\n        <p>모든 URL 종단점 구성해보기.</p>\n      </td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"개요","title":"개요","isH3":false,"content":"<p>지난 튜토리얼에서 우리는 데이터베이스와의 상호작용을 위해서 Mongoose 모델을 정의 했으며 초기 도서관 기록들을 만들기 위해 단 하나의 스크립트 파일을 사용했습니다.이것으로 우리는 이제 사용자에게 정보를 제공을 위한 코드를 작성할 수 있게 되었습니다. 첫번째로 해야할 일은 어떠한 정보를 웹사이트 페이지에 노출시킬 지 정하는 것입니다.그 다음에 정보들을 반환하기 위한 적절한 URL을 정의하게 될 것입니다.</p>\n<p>하단의 다이어그램은 HTTP를 통해 정보를 요청/반환을 작업할 경우 실현시켜야 하는 정보와 객체들의 주요 흐름을 나타내고 있습니다.In addition to the views and routes the diagram shows \"controllers\" — functions that separate out the code to route requests from the code that actually processes requests.</p>\n<p>`이미 작성한 모델들을 제외한 우리가 앞으로 작성할 목록은 :</p>\n<ul>\n  <li>\"Routes\" to forward the supported requests (and any information encoded in request URLs) to the appropriate controller functions.</li>\n  <li>\"라우트들\"는 지원된 요청(요청 URL에 어떤 인코딩된 정보)들을 알맞은 Controller 함수들로 보낸다.</li>\n  <li>Controller functions to get the requested data from the models, create an HTML page displaying the data, and return it to the user to view in the browser.</li>\n  <li>Controller 함수는 모델로부터 요청된 데이터를 얻어내거나 , 데이터를 나타내는 HTML 페이지를 내고, 이것을 브라우져의 화면으로 사용자에게 전달한다.</li>\n  <li>Views (templates) used by the controllers to render the data.</li>\n  <li>View들(템플릿들)은 데이터를 렌더링하는 컨트롤러에 의해서 사용된다.</li>\n</ul>\n<p>\n  <img src=\"https://mdn.mozillademos.org/files/14456/MVC%20Express.png\" alt=\"\" loading=\"lazy\">\n</p>\n<p>Ultimately we might have pages to show lists and detail information for books, genres, authors and bookinstances, along with pages to create, update, and delete records. That's a lot to document in one article. Therefore most of this article will concentrate on setting up our routes and controllers to return \"dummy\" content. We'll extend the controller methods in our subsequent articles to work with model data.</p>\n<p>The first section below provides a brief \"primer\" on how to use the Express \"Router\" middleware. We'll then use that knowledge in the following sections when we set up the LocalLibrary routes.</p>"}},{"type":"prose","value":{"id":"routes_primer","title":"Routes primer","isH3":false,"content":"<p>A route is a section of Express code that associates an HTTP verb (<code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>, etc.), an URL path/pattern, and a function that is called to handle that pattern.</p>\n<p>There are several ways to create routes. For this tutorial we're going to use the <a href=\"http://expressjs.com/en/guide/routing.html#express-router\" class=\"external\" rel=\" noopener\"><code>express.Router</code></a> middleware as it allows us to group the route handlers for a particular part of a site together and access them using a common route-prefix. We'll keep all our library-related routes in a \"catalog\" module, and, if we add routes for handling user accounts or other functions, we can keep them grouped separately.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>참고:</strong> We discussed Express application routes briefly in our <a href=\"/ko/docs/Learn/Server-side/Express_Nodejs/Introduction#creating_route_handlers\">Express Introduction &gt; Creating route handlers</a>. Other than providing better support for modularization (as discussed in the first subsection below), using <em>Router</em> is very similar to defining routes directly on the <em>Express application object</em>.</p>\n</div>\n<p>The rest of this section provides an overview of how the <code>Router</code> can be used to define the routes.</p>"}},{"type":"prose","value":{"id":"분리된_라우트_모듈들의_사용과_정의defining_and_using_separate_route_modules","title":"분리된 라우트 모듈들의 사용과 정의(Defining and using separate route modules)","isH3":true,"content":"<p>The code below provides a concrete example of how we can create a route module and then use it in an <em>Express</em> application.</p>\n<p>아래 코드는 우리가 어떻게 라우트 모듈을 생성하고 Express 어플리케이션에서 사용할 것인지에 대한 구체적인 예를 보여준다.</p>\n<p>First we create routes for a wiki in a module named <strong>wiki.js</strong>. The code first imports the Express application object, uses it to get a <code>Router</code> object and then adds a couple of routes to it using the <code>get()</code> method. Last of all the module exports the <code>Router</code> object.</p>\n<p>첫 번째 우리는 wiki.js 를 이름을 가진 모듈에서 위키를 위한 라우트를 만든다. 첫번째 코드에서 Express 어플리케이션 객체가 중요하고, 이 객체를 라우트 오브젝트를 얻기 위해서 사용하고, get()메서드를 사용하여 라우트는 2개를 추가한다. 모듈에서 마지막에는 라우트 객체를 Export한다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// wiki.js - Wiki route module</span>\n\n<span class=\"token keyword\">var</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Home page route</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Wiki home page'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// About page route</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/about'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'About this wiki'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>참고:</strong> Above we are defining our route handler callbacks directly in the router functions. In the LocalLibrary we'll define these callbacks in a separate controller module.</p>\n</div>\n<p>To use the router module in our main app file we first <code>require()</code> the route module (<strong>wiki.js</strong>). We then call <code>use()</code> on the <em>Express</em> application to add the Router to the middleware handling path, specifying an URL path of 'wiki'.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> wiki <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./wiki.js'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ...</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/wiki'</span><span class=\"token punctuation\">,</span> wiki<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>The two routes defined in our wiki route module are then accessible from <code>/wiki/</code> and <code>/wiki/about/</code>.</p>\n<p>wiki 라우트 모듈에서 정희 두개의 라우트를 정의되면 /wiki그리고 /wiki/about/ 으로 접근가능해진다.</p>"}},{"type":"prose","value":{"id":"라우트_함수들route_functions","title":"라우트 함수들(Route functions)","isH3":true,"content":"<p>Our module above defines a couple of typical route functions. The \"about\" route (reproduced below) is defined using the <code>Router.get()</code> method, which responds only to HTTP GET requests. The first argument to this method is the URL path while the second is a callback function that will be invoked if an HTTP GET request with the path is received.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/about'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'About this wiki'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>The callback takes three arguments (usually named as shown: <code>req</code>, <code>res</code>, <code>next</code>), that will contain the HTTP Request object, HTTP response, and the <em>next</em> function in the middleware chain.</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>참고:</strong> Router functions are <a href=\"/ko/docs/Learn/Server-side/Express_Nodejs/Introduction#using_middleware\">Express middleware</a>, which means that they must either complete (respond to) the request or call the next function in the chain. In the case above we complete the request, so the <code>next</code> argument is not actually used.</p>\n</div>\n<p>The callback function here calls <a href=\"https://expressjs.com/en/4x/api.html#res.send\" class=\"external\" rel=\" noopener\"><code>send()</code></a> on the response to return the string \"About this wiki\" when we receive a GET request with the path ('<code>/about'</code>). There are a <a href=\"https://expressjs.com/en/guide/routing.html#response-methods\" class=\"external\" rel=\" noopener\">number of other response methods</a> for ending the request/response cycle. For example, you could call <a href=\"https://expressjs.com/en/4x/api.html#res.json\" class=\"external\" rel=\" noopener\"><code>res.json()</code></a> to send a JSON response or <a href=\"https://expressjs.com/en/4x/api.html#res.sendFile\" class=\"external\" rel=\" noopener\"><code>res.sendFile()</code></a> to send a file. The response method that we'll be using most often as we build up the library is <a href=\"https://expressjs.com/en/4x/api.html#res.render\" class=\"external\" rel=\" noopener\">render()</a>, which creates and returns HTML files using templates and data—we'll talk a lot more about that in a later article!</p>"}},{"type":"prose","value":{"id":"http_verbs","title":"HTTP verbs","isH3":true,"content":"<p>The example routes above use the <code>Router.get()</code> method to respond to HTTP GET requests with a certain path.</p>\n<p>The <code>Router</code> also provides route methods for all the other HTTP verbs, that are mostly used in exactly the same way: <code>post()</code>, <code>put()</code>, <code>delete()</code>, <code>options()</code>, <code>trace()</code>, <code>copy()</code>, <code>lock()</code>, <code>mkcol()</code>, <code>move()</code>, <code>purge()</code>, <code>propfind()</code>, <code>proppatch()</code>, <code>unlock()</code>, <code>report()</code>, ​​​​​​ <code>mkactivity()</code>, <code>checkout()</code>, <code>merge()</code>, <code>m-``search()</code>, <code>notify()</code>, <code>subscribe()</code>, <code>unsubscribe()</code>, <code>patch()</code>, <code>search()</code>, and <code>connect()</code>.</p>\n<p>For example, the code below behaves just like the previous <code>/about</code> route, but only responds to HTTP POST requests.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/about'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'About this wiki'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"라우트_경로들route_paths","title":"라우트 경로들(Route paths)","isH3":true,"content":"<p>The route paths define the endpoints at which requests can be made. The examples we've seen so far have just been strings, and are used exactly as written: '/', '/about', '/book', '/any-random.path'.</p>\n<p>Route paths can also be string patterns. String patterns use a subset of regular expression syntax to define <em>patterns</em> of endpoints that will be matched. The subset is listed below (note that the hyphen (<code>-</code>) and the dot (<code>.</code>) are interpreted literally by string-based paths):</p>\n<ul>\n  <li>? : The endpoint must have 0 or more of the preceding character. E.g. a route path of <code>'/ab?cd'</code> will match endpoints <code>acd</code> , <code>abcd</code>, <code>abbcd</code> etc.</li>\n  <li>+ : The endpoint must have 1 or more of the preceding character. E.g. a route path of <code>'/ab+cd'</code> will match endpoints <code>abcd</code>, <code>abbcd</code>, <code>abbbcd</code>, and so on.</li>\n  <li>* : The endpoint may have an arbitrary string where the * character is placed. E.g. a route path of <code>'ab*cd'</code> will match endpoints <code>abcd</code>, <code>abXcd</code>, <code>abSOMErandomTEXTcd</code>, and so on.</li>\n  <li>() : Grouping match on a set of characters to perform another operation on. E.g. <code>'/ab(cd)?e'</code> will peform a ? match on (cd) —it will match <code>abe</code>, <code>abcde</code>, <code>abcdcde</code>, and so on.</li>\n</ul>\n<p>The route paths can also be JavaScript <a href=\"/ko/docs/Web/JavaScript/Guide/Regular_Expressions\">regular expressions</a>. For example, the route path below will match match <code>catfish</code> and <code>dogfish</code>, but not <code>catflap</code>, <code>catfishhead</code>, and so on. Note that the path for a regular expression uses regular expression syntax (it is not a quoted string as in the previous cases).</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">.*fish$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>참고:</strong> Most of our routes for the LocalLibrary will simply use strings and not string patterns and regular expressions. We'll also use route parameters as discussed in the next section.</p>\n</div>"}},{"type":"prose","value":{"id":"라우트_파라미터들route_parameters","title":"라우트 파라미터들(Route parameters)","isH3":true,"content":"<p>Route parameters are <em>named URL segments</em> used to capture the values specified at their position in the URL. The named segments are prefixed with a colon and then the name (e.g. <code>/:your_parameter_name/</code>. The captured values are stored in the <code>req.params</code> object using the parameter names as keys (e.g. <code>req.params.your_parameter_name</code>).</p>\n<p>So for example, consider a URL encoded to contain information about users and books: <code>http://localhost:3000/users/34/books/8989</code>. We can extract this information as shown below, with the <code>userId</code> and <code>bookId</code> path parameters:</p>\n<pre class=\"notranslate\">app.get('/users/:userId/books/:bookId', function (req, res) {\n  // Access userId via: req.params.userId\n  // Access bookId via: req.params.bookId\n  res.send(req.params)\n})\n</pre>\n<p>The names of route parameters must be made up of “word characters” (A-Z, a-z, 0-9, and _).</p>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>참고:</strong> The URL <em>/book/create</em> will be matched by a route like <code>/book/:bookId</code> (which will extract a \"bookId\" value of '<code>create</code>'). The first route that matches an incoming URL will be used, so if you want to process <code>/book/create</code> URLs separately, their route handler must be defined before your <code>/book/:bookId</code> route.</p>\n</div>\n<p>That's all you need to get started with routes - if needed you can find more information in the Express docs: <a href=\"http://expressjs.com/en/starter/basic-routing.html\" class=\"external\" rel=\" noopener\">Basic routing</a> and <a href=\"http://expressjs.com/en/guide/routing.html\" class=\"external\" rel=\" noopener\">Routing guide</a>. The following sections show how we'll set up our routes and controllers for the LocalLibrary.</p>"}},{"type":"prose","value":{"id":"routes_needed_for_the_locallibrary","title":"Routes needed for the LocalLibrary","isH3":false,"content":"<p>The URLs that we're ultimately going to need for our pages are listed below, where <em>object</em> is replaced by the name of each of our models (book, bookinstance, genre, author), <em>objects</em> is the plural of object, and <em>id</em> is the unique instance field (<code>_id</code>) that is given to each Mongoose model instance by default.</p>\n<ul>\n  <li><code>catalog/</code> — The home/index page.</li>\n  <li><code>catalog/&lt;objects&gt;/</code> — The list of all books, bookinstances, genres, or authors (e.g. /<code>catalog/books/</code>, /<code>catalog/genres/</code>, etc.)</li>\n  <li><code>catalog/&lt;object&gt;/&lt;id&gt;</code> — The detail page for a specific book, bookinstance, genre, or author with the given <code>_id</code> field value (e.g. <code>/catalog/book/584493c1f4887f06c0e67d37)</code>.</li>\n  <li><code>catalog/&lt;object&gt;/create</code> — The form to create a new book, bookinstance, genre, or author (e.g. <code>/catalog/book/create)</code>.</li>\n  <li><code>catalog/&lt;object&gt;/&lt;id&gt;/update</code> — The form to update a specific book, bookinstance, genre, or author with the given <code>_id</code> field value (e.g. <code>/catalog/book/584493c1f4887f06c0e67d37/update)</code>.</li>\n  <li><code>catalog/&lt;object&gt;/&lt;id&gt;/delete</code> — The form to delete a specific book, bookinstance, genre, author with the given <code>_id</code> field value (e.g. <code>/catalog/book/584493c1f4887f06c0e67d37/delete)</code>.</li>\n</ul>\n<p>The first home page and list pages don't encode any additional information. While the results returned will depend on the model type and the content in the database, the queries run to get the information will always be the same (similarly the code run for object creation will always be similar).</p>\n<p>By contrast the other URLs are used to act on a specific document/model instance—these encode the identity of the item in the URL (shown as <code>&lt;id&gt;</code> above). We'll use path parameters to extract the encoded information and pass it to the route handler (and in a later article we'll use this to dynamically determine what information to get from the database). By encoding the information in our URL we only need one route for every resource of a particular type (e.g. one route to handle the display of every single book item).</p>\n<div class=\"notecard note\" id=\"sect6\">\n  <p><strong>참고:</strong> Express allows you to construct your URLs any way you like — you can encode information in the body of the URL as shown above or use URL <code>GET</code> parameters (e.g. <code>/book/?id=6</code>). Whichever approach you use, the URLs should be kept clean, logical and readable (<a href=\"https://www.w3.org/Provider/Style/URI\" class=\"external\" rel=\" noopener\">check out the W3C advice here</a>).</p>\n</div>\n<p>Next we create our route handler callback functions and route code for all the above URLs.</p>"}},{"type":"prose","value":{"id":"create_the_route-handler_callback_functions","title":"Create the route-handler callback functions","isH3":false,"content":"<p>Before we define our routes, we'll first create all the dummy/skeleton callback functions that they will invoke. The callbacks will be stored in separate \"controller\" modules for Books, BookInstances, Genres, and Authors (you can use any file/module structure, but this seems an appropriate granularity for this project).</p>\n<p>Start by creating a folder for our controllers in the project root (<strong>/controllers</strong>) and then create separate controller files/modules for handling each of the models:</p>\n<pre class=\"notranslate\">/express-locallibrary-tutorial  //the project root\n  /controllers\n    authorController.js\n    bookController.js\n    bookinstanceController.js\n    genreController.js\n</pre>"}},{"type":"prose","value":{"id":"author_controller","title":"Author controller","isH3":true,"content":"<p>Open the <strong>/controllers/authorController.js</strong> file and copy in the following code:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> Author <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/author'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Display list of all Authors</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">author_list</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: Author list'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Display detail page for a specific Author</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">author_detail</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: Author detail: '</span> <span class=\"token operator\">+</span> req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Display Author create form on GET</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">author_create_get</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: Author create GET'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Handle Author create on POST</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">author_create_post</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: Author create POST'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Display Author delete form on GET</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">author_delete_get</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: Author delete GET'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Handle Author delete on POST</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">author_delete_post</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: Author delete POST'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Display Author update form on GET</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">author_update_get</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: Author update GET'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Handle Author update on POST</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">author_update_post</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: Author update POST'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>The module first requires the model that we'll later be using to access and update our data. It then exports functions for each of the URLs we wish to handle (the create, update and delete operations use forms, and hence also have additional methods for handling form post requests — we'll discuss those methods in the \"forms article\" later on).</p>\n<p>All the functions have the standard form of an <em>Express middleware function</em>, with arguments for the request, response, and the <code>next</code> function to be called if the method does not complete the request cycle (in all these cases it does!). The methods simply return a string indicating that the associated page has not yet been created. If a controller function is expected to receive path parameters, these are included in the message string.</p>\n<h4 id=\"bookinstance_controller\">BookInstance controller</h4>\n<p>Open the <strong>/controllers/bookinstanceController.js</strong> file and copy in the following code (this follows an identical pattern to the <code>Author</code> controller module):</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> BookInstance <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/bookinstance'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Display list of all BookInstances</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">bookinstance_list</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: BookInstance list'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Display detail page for a specific BookInstance</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">bookinstance_detail</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: BookInstance detail: '</span> <span class=\"token operator\">+</span> req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Display BookInstance create form on GET</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">bookinstance_create_get</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: BookInstance create GET'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Handle BookInstance create on POST</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">bookinstance_create_post</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: BookInstance create POST'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Display BookInstance delete form on GET</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">bookinstance_delete_get</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: BookInstance delete GET'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Handle BookInstance delete on POST</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">bookinstance_delete_post</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: BookInstance delete POST'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Display BookInstance update form on GET</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">bookinstance_update_get</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: BookInstance update GET'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Handle bookinstance update on POST</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">bookinstance_update_post</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: BookInstance update POST'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"genre_controller\">Genre controller</h4>\n<p>Open the <strong>/controllers/genreController.js</strong> file and copy in the following text (this follows an identical pattern to the <code>Author</code> and <code>BookInstance</code> files):</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> Genre <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/genre'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Display list of all Genre</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">genre_list</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: Genre list'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Display detail page for a specific Genre</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">genre_detail</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: Genre detail: '</span> <span class=\"token operator\">+</span> req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Display Genre create form on GET</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">genre_create_get</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: Genre create GET'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Handle Genre create on POST</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">genre_create_post</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: Genre create POST'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Display Genre delete form on GET</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">genre_delete_get</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: Genre delete GET'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Handle Genre delete on POST</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">genre_delete_post</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: Genre delete POST'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Display Genre update form on GET</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">genre_update_get</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: Genre update GET'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Handle Genre update on POST</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">genre_update_post</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: Genre update POST'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"book_controller\">Book controller</h4>\n<p>Open the <strong>/controllers/bookController.js</strong> file and copy in the following code. This follows the same pattern as the other controller modules, but additionally has an <code>index()</code> function for displaying the site welcome page:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> Book <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/book'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">index</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: Site Home Page'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Display list of all books</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">book_list</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: Book list'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Display detail page for a specific book</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">book_detail</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: Book detail: '</span> <span class=\"token operator\">+</span> req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Display book create form on GET</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">book_create_get</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: Book create GET'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Handle book create on POST</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">book_create_post</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: Book create POST'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Display book delete form on GET</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">book_delete_get</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: Book delete GET'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Handle book delete on POST</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">book_delete_post</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: Book delete POST'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Display book update form on GET</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">book_update_get</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: Book update GET'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Handle book update on POST</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">book_update_post</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: Book update POST'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"create_the_catalog_route_module","title":"Create the catalog route module","isH3":false,"content":"<p>Next we create <em>routes</em> for all the URLs <a href=\"#local_libary_routes\">needed by the LocalLibrary website</a>, which will call the controller functions we defined in the previous section.</p>\n<p>The skeleton already has a <strong>./routes</strong> folder containing routes for the <em>index</em> and <em>users</em>. Create another route file — <strong>catalog.js</strong> — inside this folder, as shown.</p>\n<pre class=\"notranslate\">/express-locallibrary-tutorial //the project root\n  /routes\n    index.js\n    users.js\n    catalog.js\n</pre>\n<p>Open **/routes/****catalog.js** and copy in the code below:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Require controller modules</span>\n<span class=\"token keyword\">var</span> book_controller <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../controllers/bookController'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> author_controller <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../controllers/authorController'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> genre_controller <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../controllers/genreController'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> book_instance_controller <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../controllers/bookinstanceController'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/// BOOK ROUTES ///</span>\n\n<span class=\"token comment\">/* GET catalog home page. */</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> book_controller<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* GET request for creating a Book. NOTE This must come before routes that display Book (uses id) */</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/book/create'</span><span class=\"token punctuation\">,</span> book_controller<span class=\"token punctuation\">.</span>book_create_get<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* POST request for creating Book. */</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/book/create'</span><span class=\"token punctuation\">,</span> book_controller<span class=\"token punctuation\">.</span>book_create_post<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* GET request to delete Book. */</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/book/:id/delete'</span><span class=\"token punctuation\">,</span> book_controller<span class=\"token punctuation\">.</span>book_delete_get<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// POST request to delete Book</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/book/:id/delete'</span><span class=\"token punctuation\">,</span> book_controller<span class=\"token punctuation\">.</span>book_delete_post<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* GET request to update Book. */</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/book/:id/update'</span><span class=\"token punctuation\">,</span> book_controller<span class=\"token punctuation\">.</span>book_update_get<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// POST request to update Book</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/book/:id/update'</span><span class=\"token punctuation\">,</span> book_controller<span class=\"token punctuation\">.</span>book_update_post<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* GET request for one Book. */</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/book/:id'</span><span class=\"token punctuation\">,</span> book_controller<span class=\"token punctuation\">.</span>book_detail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* GET request for list of all Book items. */</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/books'</span><span class=\"token punctuation\">,</span> book_controller<span class=\"token punctuation\">.</span>book_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/// AUTHOR ROUTES ///</span>\n\n<span class=\"token comment\">/* GET request for creating Author. NOTE This must come before route for id (i.e. display author) */</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/author/create'</span><span class=\"token punctuation\">,</span> author_controller<span class=\"token punctuation\">.</span>author_create_get<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* POST request for creating Author. */</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/author/create'</span><span class=\"token punctuation\">,</span> author_controller<span class=\"token punctuation\">.</span>author_create_post<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* GET request to delete Author. */</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/author/:id/delete'</span><span class=\"token punctuation\">,</span> author_controller<span class=\"token punctuation\">.</span>author_delete_get<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// POST request to delete Author</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/author/:id/delete'</span><span class=\"token punctuation\">,</span> author_controller<span class=\"token punctuation\">.</span>author_delete_post<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* GET request to update Author. */</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/author/:id/update'</span><span class=\"token punctuation\">,</span> author_controller<span class=\"token punctuation\">.</span>author_update_get<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// POST request to update Author</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/author/:id/update'</span><span class=\"token punctuation\">,</span> author_controller<span class=\"token punctuation\">.</span>author_update_post<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* GET request for one Author. */</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/author/:id'</span><span class=\"token punctuation\">,</span> author_controller<span class=\"token punctuation\">.</span>author_detail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* GET request for list of all Authors. */</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/authors'</span><span class=\"token punctuation\">,</span> author_controller<span class=\"token punctuation\">.</span>author_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/// GENRE ROUTES ///</span>\n\n<span class=\"token comment\">/* GET request for creating a Genre. NOTE This must come before route that displays Genre (uses id) */</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/genre/create'</span><span class=\"token punctuation\">,</span> genre_controller<span class=\"token punctuation\">.</span>genre_create_get<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* POST request for creating Genre. */</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/genre/create'</span><span class=\"token punctuation\">,</span> genre_controller<span class=\"token punctuation\">.</span>genre_create_post<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* GET request to delete Genre. */</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/genre/:id/delete'</span><span class=\"token punctuation\">,</span> genre_controller<span class=\"token punctuation\">.</span>genre_delete_get<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// POST request to delete Genre</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/genre/:id/delete'</span><span class=\"token punctuation\">,</span> genre_controller<span class=\"token punctuation\">.</span>genre_delete_post<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* GET request to update Genre. */</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/genre/:id/update'</span><span class=\"token punctuation\">,</span> genre_controller<span class=\"token punctuation\">.</span>genre_update_get<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// POST request to update Genre</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/genre/:id/update'</span><span class=\"token punctuation\">,</span> genre_controller<span class=\"token punctuation\">.</span>genre_update_post<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* GET request for one Genre. */</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/genre/:id'</span><span class=\"token punctuation\">,</span> genre_controller<span class=\"token punctuation\">.</span>genre_detail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* GET request for list of all Genre. */</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/genres'</span><span class=\"token punctuation\">,</span> genre_controller<span class=\"token punctuation\">.</span>genre_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/// BOOKINSTANCE ROUTES ///</span>\n\n<span class=\"token comment\">/* GET request for creating a BookInstance. NOTE This must come before route that displays BookInstance (uses id) */</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/bookinstance/create'</span><span class=\"token punctuation\">,</span> book_instance_controller<span class=\"token punctuation\">.</span>bookinstance_create_get<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* POST request for creating BookInstance. */</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/bookinstance/create'</span><span class=\"token punctuation\">,</span> book_instance_controller<span class=\"token punctuation\">.</span>bookinstance_create_post<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* GET request to delete BookInstance. */</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/bookinstance/:id/delete'</span><span class=\"token punctuation\">,</span> book_instance_controller<span class=\"token punctuation\">.</span>bookinstance_delete_get<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// POST request to delete BookInstance</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/bookinstance/:id/delete'</span><span class=\"token punctuation\">,</span> book_instance_controller<span class=\"token punctuation\">.</span>bookinstance_delete_post<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* GET request to update BookInstance. */</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/bookinstance/:id/update'</span><span class=\"token punctuation\">,</span> book_instance_controller<span class=\"token punctuation\">.</span>bookinstance_update_get<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// POST request to update BookInstance</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/bookinstance/:id/update'</span><span class=\"token punctuation\">,</span> book_instance_controller<span class=\"token punctuation\">.</span>bookinstance_update_post<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* GET request for one BookInstance. */</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/bookinstance/:id'</span><span class=\"token punctuation\">,</span> book_instance_controller<span class=\"token punctuation\">.</span>bookinstance_detail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* GET request for list of all BookInstance. */</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/bookinstances'</span><span class=\"token punctuation\">,</span> book_instance_controller<span class=\"token punctuation\">.</span>bookinstance_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>The module requires Express and then uses it to create a <code>Router</code> object. The routes are all set up on the router, which is then exported.</p>\n<p>The routes are defined either using <code>.get()</code> or <code>.post()</code> methods on the router object. All the paths are defined using strings (we don't use string patterns or regular expressions), routes that act on some specific resource (e.g. book) use path parameters to get the object id from the URL.</p>\n<p>The handler functions are all imported from the controller modules we created in the previous section.</p>"}},{"type":"prose","value":{"id":"update_the_index_route_module","title":"Update the index route module","isH3":true,"content":"<p>We've set up all our new routes, but we still have a route to the original page. Let's instead redirect this to the new index page that we've created at the path '/catalog'.</p>\n<p>Open <strong>/routes/index.js</strong> and replace the existing route with the function below.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/* GET home page. */</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/catalog'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect7\">\n  <p><strong>참고:</strong> This is our first use of the <a href=\"https://expressjs.com/en/4x/api.html#res.redirect\" class=\"external\" rel=\" noopener\">redirect()</a> response method. This redirects to the specified page, by default sending HTTP status code \"302 Found\". You can change the status code returned if needed, and supply either absolute or relative paths.</p>\n</div>"}},{"type":"prose","value":{"id":"update_app.js","title":"Update app.js","isH3":true,"content":"<p>The last step is to add the routes to the middleware chain. We do this in <code>app.js</code>.</p>\n<p>Open <strong>app.js</strong> and require the catalog route below the other routes (add the third line shown below, underneath the other two):</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> index <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./routes/index'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> users <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./routes/users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> catalog <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./routes/catalog'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//Import routes for \"catalog\" area of site</span>\n</code></pre></div>\n<p>Next, add the catalog route to the middleware stack below the other routes (add the third line shown below, underneath the other two):</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/users'</span><span class=\"token punctuation\">,</span> users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/catalog'</span><span class=\"token punctuation\">,</span> catalog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Add catalog routes to middleware chain.</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect8\">\n  <p><strong>참고:</strong> We have added our catalog module at a path <code>'/catalog'</code>. This is prepended to all of the paths defined in the catalog module. So for example, to access a list of books, the URL will be: <code>/catalog/books/</code>.</p>\n</div>\n<p>That's it. We should now have routes and skeleton functions enabled for all the URLs that we will eventually support on the LocalLibrary website.</p>"}},{"type":"prose","value":{"id":"testing_the_routes","title":"Testing the routes","isH3":true,"content":"<p>To test the routes, first start the website using your usual approach</p>\n<ul>\n  <li>The default method\n    <div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>//Windows\nSET <span class=\"token assign-left variable\">DEBUG</span><span class=\"token operator\">=</span>express-locallibrary-tutorial:* <span class=\"token operator\">&amp;</span> <span class=\"token function\">npm</span> start\n\n// Mac OS or Linux\n<span class=\"token assign-left variable\">DEBUG</span><span class=\"token operator\">=</span>express-locallibrary-tutorial:* <span class=\"token function\">npm</span> start\n</code></pre></div>\n  </li>\n  <li>If you previously set up <a href=\"/ko/docs/Learn/Server-side/Express_Nodejs/skeleton_website\">nodemon</a>, you can instead use:\n    <pre class=\"notranslate\">//Windows\nSET DEBUG=express-locallibrary-tutorial:* &amp; npm run devstart\n\n// Mac OS or Linux\nDEBUG=express-locallibrary-tutorial:* npm run devstart\n</pre>\n  </li>\n</ul>\n<p>Then navigate to a number of LocalLibrary URLs, and verify that you don't get an error page (HTTP 404). A small set of URLs are listed below for your convenience:</p>\n<ul>\n  <li><a href=\"http://localhost:3000/\" class=\"external\" rel=\" noopener\">http://localhost:3000/</a></li>\n  <li><a href=\"http://localhost:3000/catalog\" class=\"external\" rel=\" noopener\">http://localhost:3000/catalog</a></li>\n  <li><a href=\"http://localhost:3000/catalog/books\" class=\"external\" rel=\" noopener\">http://localhost:3000/catalog/books</a></li>\n  <li><a href=\"http://localhost:3000/catalog/bookinstances/\" class=\"external\" rel=\" noopener\">http://localhost:3000/catalog/bookinstances/</a></li>\n  <li><a href=\"http://localhost:3000/catalog/authors/\" class=\"external\" rel=\" noopener\">http://localhost:3000/catalog/authors/</a></li>\n  <li><a href=\"http://localhost:3000/catalog/genres/\" class=\"external\" rel=\" noopener\">http://localhost:3000/catalog/genres/</a></li>\n  <li><a href=\"http://localhost:3000/catalog/book/5846437593935e2f8c2aa226/\" class=\"external\" rel=\" noopener\">http://localhost:3000/catalog/book/5846437593935e2f8c2aa226</a></li>\n  <li><a href=\"http://localhost:3000/catalog/book/create\" class=\"external\" rel=\" noopener\">http://localhost:3000/catalog/book/create</a></li>\n</ul>"}},{"type":"prose","value":{"id":"summary","title":"Summary","isH3":false,"content":"<p>We've now created all the routes for our site, along with dummy controller functions that we can populate with a full implementation in later articles. Along the way we've learned a lot of fundamental information about Express routes, and some approaches for structuring our routes and controllers.</p>\n<p>In our next article we'll create a proper welcome page for the site, using views (templates) and information stored in our models.</p>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"http://expressjs.com/en/starter/basic-routing.html\" class=\"external\" rel=\" noopener\">Basic routing</a> (Express docs)</li>\n  <li><a href=\"http://expressjs.com/en/guide/routing.html\" class=\"external\" rel=\" noopener\">Routing guide</a> (Express docs)</li>\n</ul><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ko/docs/Learn/Server-side/Express_Nodejs/mongoose\"> 이전 </a></li>\n    <li><a class=\"button minimal\" href=\"/ko/docs/Learn/Server-side/Express_Nodejs\"> Overview: Express Nodejs</a></li>\n    <li><a class=\"button minimal only-in-en-us\" href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data\" title=\"Currently only available in English (US)\"> 다음   (en-US)</a></li>\n</ul>"}}],"toc":[{"text":"개요","id":"개요"},{"text":"Routes primer","id":"routes_primer"},{"text":"Routes needed for the LocalLibrary","id":"routes_needed_for_the_locallibrary"},{"text":"Create the route-handler callback functions","id":"create_the_route-handler_callback_functions"},{"text":"Create the catalog route module","id":"create_the_catalog_route_module"},{"text":"Summary","id":"summary"},{"text":"See also","id":"see_also"}],"summary":"We've now created all the routes for our site, along with dummy controller functions that we can populate with a full implementation in later articles. Along the way we've learned a lot of fundamental information about Express routes, and some approaches for structuring our routes and controllers.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Express Tutorial Part 4: Routes and controllers","locale":"en-US","native":"English (US)"},{"title":"Express チュートリアル Part 4: ルートとコントローラ","locale":"ja","native":"日本語"},{"title":"Учебник Express часть 4: Маршруты и контроллеры","locale":"ru","native":"Русский"},{"title":"Express 教程 4：路由和控制器","locale":"zh-CN","native":"中文 (简体)"},{"title":"Express 教學 4: 路由與控制器","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ko/learn/server-side/express_nodejs/routes","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/learn/server-side/express_nodejs/routes/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ko/docs/Learn","title":"Web 개발 학습하기"},{"uri":"/ko/docs/Learn/Server-side","title":"Server-side website programming"},{"uri":"/ko/docs/Learn/Server-side/Express_Nodejs","title":"Express 웹 프레임워크 (Node.js/JavaScript의 활용)"},{"uri":"/ko/docs/Learn/Server-side/Express_Nodejs/routes","title":"Express Tutorial Part 4: Routes and controllers"}],"pageTitle":"Express Tutorial Part 4: Routes and controllers - Web 개발 학습하기 | MDN","noIndexing":false}}