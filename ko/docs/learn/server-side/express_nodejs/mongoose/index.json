{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Express Tutorial Part 3: Using a Database (with Mongoose)","mdn_url":"/ko/docs/Learn/Server-side/Express_Nodejs/mongoose","locale":"ko","native":"한국어","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"\"><a href=\"/ko/docs/Learn/Getting_started_with_the_web\"><strong>Complete beginners start here!</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>Getting started with the Web</summary>\n          <ol>\n            <li><a href=\"/ko/docs/Learn/Getting_started_with_the_web\">Getting started with the Web overview</a></li>\n            <li><a href=\"/ko/docs/Learn/Getting_started_with_the_web/Installing_basic_software\">Installing basic software</a></li>\n            <li><a href=\"/ko/docs/Learn/Getting_started_with_the_web/What_will_your_website_look_like\">What will your website look like?</a></li>\n            <li><a href=\"/ko/docs/Learn/Getting_started_with_the_web/Dealing_with_files\">Dealing with files</a></li>\n            <li><a href=\"/ko/docs/Learn/Getting_started_with_the_web/HTML_basics\">HTML basics</a></li>\n            <li><a href=\"/ko/docs/Learn/Getting_started_with_the_web/CSS_basics\">CSS basics</a></li>\n            <li><a href=\"/ko/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">JavaScript basics</a></li>\n            <li><a href=\"/ko/docs/Learn/Getting_started_with_the_web/Publishing_your_website\">Publishing your website</a></li>\n            <li><a href=\"/ko/docs/Learn/Getting_started_with_the_web/How_the_Web_works\">How the Web works</a></li>\n          </ol>\n      </details>\n  </li>\n  <li data-default-state=\"\"><a href=\"/ko/docs/Learn/HTML\"><strong>HTML — Structuring the Web</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>Introduction to HTML</summary>\n          <ol>\n            <li><a href=\"/ko/docs/Learn/HTML/Introduction_to_HTML\">Introduction to HTML overview</a></li>\n            <li><a href=\"/ko/docs/Learn/HTML/Introduction_to_HTML/Getting_started\">Getting started with HTML</a></li>\n            <li><a href=\"/ko/docs/Learn/HTML/Introduction_to_HTML/The_head_metadata_in_HTML\">What's in the head? Metadata in HTML</a></li>\n            <li><a href=\"/ko/docs/Learn/HTML/Introduction_to_HTML/HTML_text_fundamentals\">HTML text fundamentals</a></li>\n            <li><a href=\"/ko/docs/Learn/HTML/Introduction_to_HTML/Creating_hyperlinks\">Creating hyperlinks</a></li>\n            <li><a href=\"/ko/docs/Learn/HTML/Introduction_to_HTML/Advanced_text_formatting\">Advanced text formatting</a></li>\n            <li><a href=\"/ko/docs/Learn/HTML/Introduction_to_HTML/Document_and_website_structure\">Document and website structure</a></li>\n            <li><a href=\"/ko/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML\">Debugging HTML</a></li>\n            <li><a href=\"/ko/docs/Learn/HTML/Introduction_to_HTML/Marking_up_a_letter\">Assessment: Marking up a letter</a></li>\n            <li><a href=\"/ko/docs/Learn/HTML/Introduction_to_HTML/Structuring_a_page_of_content\">Assessment: Structuring a page of content</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>Multimedia and embedding</summary>\n          <ol>\n            <li><a href=\"/ko/docs/Learn/HTML/Multimedia_and_embedding\">Multimedia and embedding overview</a></li>\n            <li><a href=\"/ko/docs/Learn/HTML/Multimedia_and_embedding/Images_in_HTML\">Images in HTML</a></li>\n            <li><a href=\"/ko/docs/Learn/HTML/Multimedia_and_embedding/Video_and_audio_content\">Video and audio content</a></li>\n            <li><a href=\"/ko/docs/Learn/HTML/Multimedia_and_embedding/Other_embedding_technologies\">From object to iframe — other embedding technologies</a></li>\n            <li><a href=\"/ko/docs/Learn/HTML/Multimedia_and_embedding/Adding_vector_graphics_to_the_Web\">Adding vector graphics to the Web</a></li>\n            <li><a href=\"/ko/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images\">Responsive images</a></li>\n            <li><a href=\"/ko/docs/Learn/HTML/Multimedia_and_embedding/Mozilla_splash_page\">Assessment: Mozilla splash page</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>HTML tables</summary>\n          <ol>\n            <li><a href=\"/ko/docs/Learn/HTML/Tables\">HTML tables overview</a></li>\n            <li><a href=\"/ko/docs/Learn/HTML/Tables/Basics\">HTML table basics</a></li>\n            <li><a href=\"/ko/docs/Learn/HTML/Tables/Advanced\">HTML Table advanced features and accessibility</a></li>\n            <li><a href=\"/ko/docs/Learn/HTML/Tables/Structuring_planet_data\">Assessment: Structuring planet data</a></li>\n          </ol>\n      </details>\n  </li>\n  <li data-default-state=\"\"><a href=\"/ko/docs/Learn/CSS\"><strong>CSS — Styling the Web</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>CSS first steps</summary>\n          <ol>\n            <li><a href=\"/ko/docs/Learn/CSS/First_steps\">CSS first steps overview</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/First_steps/What_is_CSS\">What is CSS?</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/First_steps/Getting_started\">Getting started with CSS</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/First_steps/How_CSS_is_structured\">How CSS is structured</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/First_steps/How_CSS_works\">How CSS works</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/First_steps/Using_your_new_knowledge\">Using your new knowledge</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>CSS building blocks</summary>\n          <ol>\n            <li><a href=\"/ko/docs/Learn/CSS/Building_blocks\">CSS building blocks overview</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance\">Cascade and inheritance</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/Building_blocks/Selectors\">CSS selectors</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/Building_blocks/The_box_model\">The box model</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/Building_blocks/Backgrounds_and_borders\">Backgrounds and borders</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/Building_blocks/Handling_different_text_directions\">Handling different text directions</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/Building_blocks/Overflowing_content\">Overflowing content</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/Building_blocks/Values_and_units\">Values and units</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/Building_blocks/Sizing_items_in_CSS\">Sizing items in CSS</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/Building_blocks/Images_media_form_elements\">Images, media, and form elements</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/Building_blocks/Styling_tables\">Styling tables</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/Building_blocks/Debugging_CSS\">Debugging CSS</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/Building_blocks/Organizing\">Organizing your CSS</a></li>\n      </ol></details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>Styling text</summary>\n          <ol>\n            <li><a href=\"/ko/docs/Learn/CSS/Styling_text\">Styling text overview</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/Styling_text/Fundamentals\">Fundamental text and font styling</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/Styling_text/Styling_lists\">Styling lists</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/Styling_text/Styling_links\">Styling links</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/Styling_text/Web_fonts\">Web fonts</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/Styling_text/Typesetting_a_homepage\">Assessment: Typesetting a community school homepage</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>CSS layout</summary>\n          <ol>\n            <li><a href=\"/ko/docs/Learn/CSS/CSS_layout\">CSS layout overview</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/CSS_layout/Introduction\">Introduction to CSS layout</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/CSS_layout/Normal_Flow\">Normal Flow</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/CSS_layout/Flexbox\">Flexbox</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/CSS_layout/Grids\">Grids</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/CSS_layout/Floats\">Floats</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/CSS_layout/Positioning\">Positioning</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/CSS_layout/Multiple-column_Layout\">Multiple-column Layout</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/CSS_layout/Responsive_Design\">Responsive design</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/CSS_layout/Media_queries\">Beginner's guide to media queries</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/CSS_layout/Legacy_Layout_Methods\">Legacy Layout Methods</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/CSS_layout/Supporting_Older_Browsers\">Supporting Older Browsers</a></li>\n            <li><a href=\"/ko/docs/Learn/CSS/CSS_layout/Fundamental_Layout_Comprehension\">Fundamental Layout Comprehension</a></li>\n          </ol>\n      </details>\n  </li>\n  <li data-default-state=\"\"><a href=\"/ko/docs/Learn/JavaScript\"><strong>JavaScript — Dynamic client-side scripting</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>JavaScript first steps</summary>\n          <ol>\n            <li><a href=\"/ko/docs/Learn/JavaScript/First_steps\">JavaScript first steps overview</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/First_steps/What_is_JavaScript\">What is JavaScript?</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/First_steps/A_first_splash\">A first splash into JavaScript</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/First_steps/What_went_wrong\">What went wrong? Troubleshooting JavaScript</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/First_steps/Variables\">Storing the information you need — Variables</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/First_steps/Math\">Basic math in JavaScript — Numbers and operators</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/First_steps/Strings\">Handling text — Strings in JavaScript</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/First_steps/Useful_string_methods\">Useful string methods</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/First_steps/Arrays\">Arrays</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/First_steps/Silly_story_generator\">Assessment: Silly story generator</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>JavaScript building blocks</summary>\n          <ol>\n            <li><a href=\"/ko/docs/Learn/JavaScript/Building_blocks\">JavaScript building blocks overview</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/Building_blocks/conditionals\">Making decisions in your code — Conditionals</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/Building_blocks/Looping_code\">Looping code</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/Building_blocks/Functions\">Functions — Reusable blocks of code</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/Building_blocks/Build_your_own_function\">Build your own function</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/Building_blocks/Return_values\">Function return values</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/Building_blocks/Events\">Introduction to events</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/Building_blocks/Image_gallery\">Assessment: Image gallery</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>Introducing JavaScript objects</summary>\n          <ol>\n            <li><a href=\"/ko/docs/Learn/JavaScript/Objects\">Introducing JavaScript objects overview</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/Objects/Basics\">Object basics</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/Objects/Object_prototypes\">Object prototypes</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/Objects/Object-oriented_programming\">Object-oriented programming concepts</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/Objects/Classes_in_JavaScript\">Classes in JavaScript</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/Objects/JSON\">Working with JSON data</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/Objects/Object_building_practice\">Object building practice</a></li>\n            <li><a href=\"/ko/docs/Learn/JavaScript/Objects/Adding_bouncing_balls_features\">Assessment: Adding features to our bouncing balls demo</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Asynchronous JavaScript</summary>\n        <ol>\n          <li><a href=\"/ko/docs/Learn/JavaScript/Asynchronous\">Asynchronous JavaScript overview</a></li>\n          <li><a href=\"/ko/docs/Learn/JavaScript/Asynchronous/Concepts\">General asynchronous programming concepts</a></li>\n          <li><a href=\"/ko/docs/Learn/JavaScript/Asynchronous/Introducing\">Introducing asynchronous JavaScript</a></li>\n          <li><a href=\"/ko/docs/Learn/JavaScript/Asynchronous/Timeouts_and_intervals\">Cooperative asynchronous Java​Script: Timeouts and intervals</a></li>\n          <li><a href=\"/ko/docs/Learn/JavaScript/Asynchronous/Promises\">Graceful asynchronous programming with Promises</a></li>\n          <li><a href=\"/ko/docs/Learn/JavaScript/Asynchronous/Async_await\">Making asynchronous programming easier with async and await</a></li>\n          <li><a href=\"/ko/docs/Learn/JavaScript/Asynchronous/Choosing_the_right_approach\">Choosing the right approach</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Client-side web APIs</summary>\n        <ol>\n          <li><a href=\"/ko/docs/Learn/JavaScript/Client-side_web_APIs\">Client-side web APIs</a></li>\n          <li><a href=\"/ko/docs/Learn/JavaScript/Client-side_web_APIs/Introduction\">Introduction to web APIs</a></li>\n          <li><a href=\"/ko/docs/Learn/JavaScript/Client-side_web_APIs/Manipulating_documents\">Manipulating documents</a></li>\n          <li><a href=\"/ko/docs/Learn/JavaScript/Client-side_web_APIs/Fetching_data\">Fetching data from the server</a></li>\n          <li><a href=\"/ko/docs/Learn/JavaScript/Client-side_web_APIs/Third_party_APIs\">Third party APIs</a></li>\n          <li><a href=\"/ko/docs/Learn/JavaScript/Client-side_web_APIs/Drawing_graphics\">Drawing graphics</a></li>\n          <li><a href=\"/ko/docs/Learn/JavaScript/Client-side_web_APIs/Video_and_audio_APIs\">Video and audio APIs</a></li>\n          <li><a href=\"/ko/docs/Learn/JavaScript/Client-side_web_APIs/Client-side_storage\">Client-side storage</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"/ko/docs/Learn/Forms\"><strong>Web forms — Working with user data</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Core forms learning pathway</summary>\n        <ol>\n          <li><a href=\"/ko/docs/Learn/Forms\">Web forms overview</a></li>\n          <li><a href=\"/ko/docs/Learn/Forms/Your_first_form\">Your first form</a></li>\n          <li><a href=\"/ko/docs/Learn/Forms/How_to_structure_a_web_form\">How to structure a web form</a></li>\n          <li><a href=\"/ko/docs/Learn/Forms/Basic_native_form_controls\">Basic native form controls</a></li>\n          <li><a href=\"/ko/docs/Learn/Forms/HTML5_input_types\">The HTML5 input types</a></li>\n          <li><a href=\"/ko/docs/Learn/Forms/Other_form_controls\">Other form controls</a></li>\n          <li><a href=\"/ko/docs/Learn/Forms/Styling_web_forms\">Styling web forms</a></li>\n          <li><a href=\"/ko/docs/Learn/Forms/Advanced_form_styling\">Advanced form styling</a></li>\n          <li><a href=\"/ko/docs/Learn/Forms/UI_pseudo-classes\">UI pseudo-classes</a></li>\n          <li><a href=\"/ko/docs/Learn/Forms/Form_validation\">Client-side form validation</a></li>\n          <li><a href=\"/ko/docs/Learn/Forms/Sending_and_retrieving_form_data\">Sending form data</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Advanced forms articles</summary>\n        <ol>\n          <li><a href=\"/ko/docs/Learn/Forms/How_to_build_custom_form_controls\">How to build custom form controls</a></li>\n          <li><a href=\"/ko/docs/Learn/Forms/Sending_forms_through_JavaScript\">Sending forms through JavaScript</a></li>\n          <li><a href=\"/ko/docs/Learn/Forms/Property_compatibility_table_for_form_controls\">CSS property compatibility table for form controls</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"/ko/docs/Learn/Accessibility\"><strong>Accessibility — Make the web usable by everyone</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Accessibility guides</summary>\n        <ol>\n          <li><a href=\"/ko/docs/Learn/Accessibility\">Accessibility overview</a></li>\n          <li><a href=\"/ko/docs/Learn/Accessibility/What_is_accessibility\">What is accessibility?</a></li>\n          <li><a href=\"/ko/docs/Learn/Accessibility/HTML\">HTML: A good basis for accessibility</a></li>\n          <li><a href=\"/ko/docs/Learn/Accessibility/CSS_and_JavaScript\">CSS and JavaScript accessibility best practices</a></li>\n          <li><a href=\"/ko/docs/Learn/Accessibility/WAI-ARIA_basics\">WAI-ARIA basics</a></li>\n          <li><a href=\"/ko/docs/Learn/Accessibility/Multimedia\">Accessible multimedia</a></li>\n          <li><a href=\"/ko/docs/Learn/Accessibility/Mobile\">Mobile accessibility</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Accessibility assessment</summary>\n        <ol>\n            <li><a href=\"/ko/docs/Learn/Accessibility/Accessibility_troubleshooting\">Assessment: Accessibility troubleshooting</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"/ko/docs/Learn/Tools_and_testing\"><strong>Tools and testing</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Client-side web development tools</summary>\n        <ol>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Understanding_client-side_tools\">Client-side web development tools index</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Overview\">Client-side tooling overview</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Command_line\">Command line crash course</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Package_management\">Package management basics</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Introducing_complete_toolchain\">Introducing a complete toolchain</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Deployment\">Deploying our app</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Introduction to client-side frameworks</summary>\n        <ol>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Introduction\">Client-side frameworks overview</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Main_features\">Framework main features</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>React</summary>\n        <ol>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_getting_started\">Getting started with React</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_todo_list_beginning\">Beginning our React todo list</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_components\">Componentizing our React app</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_events_state\">React interactivity: Events and state</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_filtering_conditional_rendering\">React interactivity: Editing, filtering, conditional rendering</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_accessibility\">Accessibility in React</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_resources\">React resources</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Ember</summary>\n        <ol>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_getting_started\">Getting started with Ember</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_structure_componentization\">Ember app structure and componentization</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_interactivity_events_state\">Ember interactivity: Events, classes and state</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_conditional_footer\">Ember Interactivity: Footer functionality, conditional rendering</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_routing\">Routing in Ember</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_resources\">Ember resources and troubleshooting</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Vue</summary>\n        <ol>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_getting_started\">Getting started with Vue</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_first_component\">Creating our first Vue component</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_rendering_lists\">Rendering a list of Vue components</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_methods_events_models\">Adding a new todo form: Vue events, methods, and models</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_styling\">Styling Vue components with CSS</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_computed_properties\">Using Vue computed properties</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_conditional_rendering  \">Vue conditional rendering: editing existing todos</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_refs_focus_management\">Focus management with Vue refs</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_resources\">Vue resources</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Svelte</summary>\n        <ol>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_getting_started\">Getting started with Svelte</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_Todo_list_beginning\">Starting our Svelte Todo list app</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_variables_props\">Dynamic behavior in Svelte: working with variables and props</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_components\">Componentizing our Svelte app</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_reactivity_lifecycle_accessibility\">Advanced Svelte: Reactivity, lifecycle, accessibility</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_stores\">Working with Svelte stores</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_TypeScript  \">TypeScript support in Svelte</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_deployment_next\">Deployment and next steps</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Angular</summary>\n        <ol>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_getting_started\">Getting started with Angular</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_todo_list_beginning\">Beginning our Angular todo list app</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_styling\">Styling our Angular app</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_item_component\">Creating an item component</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_filtering\">Filtering our to-do items</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_building\">Building Angular applications and further resources</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Git and GitHub</summary>\n        <ol>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/GitHub\">Git and GitHub overview</a></li>\n          <li><a href=\"https://guides.github.com/activities/hello-world/\">Hello World</a></li>\n          <li><a href=\"https://guides.github.com/introduction/git-handbook/\">Git Handbook</a></li>\n          <li><a href=\"https://guides.github.com/activities/forking/\">Forking Projects</a></li>\n          <li><a href=\"https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests\">About pull requests</a></li>\n          <li><a href=\"https://guides.github.com/features/issues/\">Mastering Issues</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Cross browser testing</summary>\n        <ol>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Cross_browser_testing\">Cross browser testing overview</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Cross_browser_testing/Introduction\">Introduction to cross browser testing</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Cross_browser_testing/Testing_strategies\">Strategies for carrying out testing</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Cross_browser_testing/HTML_and_CSS\">Handling common HTML and CSS problems</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Cross_browser_testing/JavaScript\">Handling common JavaScript problems</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Cross_browser_testing/Accessibility\">Handling common accessibility problems</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Cross_browser_testing/Feature_detection\">Implementing feature detection</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Cross_browser_testing/Automated_testing\">Introduction to automated testing</a></li>\n          <li><a href=\"/ko/docs/Learn/Tools_and_testing/Cross_browser_testing/Your_own_automation_environment\">Setting up your own test automation environment</a></li>\n        </ol>\n    </details>\n  </li>\n  <li data-default-state=\"open\"><a href=\"/ko/docs/Learn/Server-side\"><strong>Server-side website programming</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>First steps</summary>\n        <ol>\n          <li><a href=\"/ko/docs/Learn/Server-side/First_steps\">First steps overview</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/First_steps/Introduction\">Introduction to the server-side</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/First_steps/Client-Server_overview\">Client-Server overview</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/First_steps/Web_frameworks\">Server-side web frameworks</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/First_steps/Website_security\">Website security</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Django web framework (Python)</summary>\n        <ol>\n          <li><a href=\"/ko/docs/Learn/Server-side/Django\">Django web framework (Python) overview</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Django/Introduction\">Introduction</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Django/development_environment\">Setting up a development environment</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Django/Tutorial_local_library_website\">Tutorial: The Local Library website</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Django/skeleton_website\">Tutorial Part 2: Creating a skeleton website</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Django/Models\">Tutorial Part 3: Using models</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Django/Admin_site\">Tutorial Part 4: Django admin site</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Django/Home_page\">Tutorial Part 5: Creating our home page</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Django/Generic_views\">Tutorial Part 6: Generic list and detail views</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Django/Sessions\">Tutorial Part 7: Sessions framework</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Django/Authentication\">Tutorial Part 8: User authentication and permissions</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Django/Forms\">Tutorial Part 9: Working with forms</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Django/Testing\">Tutorial Part 10: Testing a Django web application</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Django/Deployment\">Tutorial Part 11: Deploying Django to production</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Django/web_application_security\">Web application security</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Django/django_assessment_blog\">Assessment: DIY mini blog</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n        <summary>Express Web Framework (node.js/JavaScript)</summary>\n        <ol>\n          <li><a href=\"/ko/docs/Learn/Server-side/Express_Nodejs\">Express Web Framework (Node.js/JavaScript) overview</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Express_Nodejs/Introduction\">Express/Node introduction</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Express_Nodejs/development_environment\">Setting up a Node (Express) development environment</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Express_Nodejs/Tutorial_local_library_website\">Express tutorial: The Local Library website</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Express_Nodejs/skeleton_website\">Express Tutorial Part 2: Creating a skeleton website</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Express_Nodejs/mongoose\">Express Tutorial Part 3: Using a database (with Mongoose)</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Express_Nodejs/routes\">Express Tutorial Part 4: Routes and controllers</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Express_Nodejs/Displaying_data\">Express Tutorial Part 5: Displaying library data</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Express_Nodejs/forms\">Express Tutorial Part 6: Working with forms</a></li>\n          <li><a href=\"/ko/docs/Learn/Server-side/Express_Nodejs/deployment\">Express Tutorial Part 7: Deploying to production</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"#\"><strong>Further resources</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Common questions</summary>\n        <ol>\n          <li><a href=\"/ko/docs/Learn/HTML/Howto\">HTML questions</a></li>\n          <li><a href=\"/ko/docs/Learn/CSS/Howto\">CSS questions</a></li>\n          <li><a href=\"/ko/docs/Learn/JavaScript/Howto\">JavaScript questions</a></li>\n          <li><a href=\"/ko/docs/Learn/Common_questions#Web_mechanics\">Web mechanics</a></li>\n          <li><a href=\"/ko/docs/Learn/Common_questions#Tools_and_setup\">Tools and setup</a></li>\n          <li><a href=\"/ko/docs/Learn/Common_questions#Design_and_accessibility\">Design and accessibility</a></li>\n        </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ko/docs/Learn/Server-side/Express_Nodejs/skeleton_website\"> 이전 </a></li>\n    <li><a class=\"button minimal\" href=\"/ko/docs/Learn/Server-side/Express_Nodejs\"> Overview: Express Nodejs</a></li>\n    <li><a class=\"button minimal\" href=\"/ko/docs/Learn/Server-side/Express_Nodejs/routes\"> 다음  </a></li>\n</ul>\n<p>이번에는 데이터베이스를 간단히 소개하고, Node/Express 어플리케이션으로 데이터베이스를 어떻게 다루는 지 알아보겠습니다. 그리고 <a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Tutorial_local_library_website\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">LocalLibrary (en-US)</a> 웹사이트를 위한 데이터베이스 접근을 제공하는 <a href=\"http://mongoosejs.com/\" class=\"external\" rel=\" noopener\">Mongoose</a>를 어떻게 사용할 수 있는지 보여줄 것입니다. 오브젝트 스키마와 모델을 선언하는 방법, 주요 필드 타입, 기본 유효성 검사를 설명합니다. 또한 당신이 모델 데이터에 접근할 수 있는 주요한 몇가지 방법들을 소개할 것입니다.</p>\n<table class=\"learn-box standard-table\">\n  <tbody>\n    <tr>\n      <th scope=\"row\">Prerequisites:</th>\n      <td><a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/skeleton_website\">Express Tutorial Part 2: Creating a skeleton website</a></td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Objective:</th>\n      <td>To be able to design and create your own models using Mongoose.</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"개요","title":"개요","isH3":false,"content":"<p>도서관 직원들은 책과 대여자의 정보를 저장하기 위해 Local Library 웹사이트를 사용할 것입니다. 그리고 도서관 회원들은 책을 빌리고, 검색하며, 어떤 책이 이용한지 알아내고, 책 대여를 예약하거나 책을 빌릴 것입니다. 정보를 효과적으로 저장하고 가져오기 위해서, 우리는 그 정보를 데이터베이스에 저장할 것입니다.</p>\n<p>Express 앱은 다양한 데이터베이스를 사용할 수 있고, 당신에게 CRUD(<strong>C</strong>reate, <strong>R</strong>ead, <strong>U</strong>pdate and <strong>D</strong>elete)를 수행할 수 있는 여러 방법을 제공합니다. 이번 튜토리얼은 이용가능한 몇가지 선택지에 대한 간략한 개요를 제공하며, 더 나아가 우리가 선택한 몇가지 메커니즘에 대해선 자세히 알아볼 것입니다.</p>"}},{"type":"prose","value":{"id":"사용할_수_있는_데이터베이스는_무엇이_있나요","title":"사용할 수 있는 데이터베이스는 무엇이 있나요?","isH3":true,"content":"<p>Express 앱은 노드에서 지원하는 어떤 데이터베이스라도 사용가능합니다. (Express 자체는 데이터베이스 관리에 대한 특정한 추가 동작/요구사항을 정의하지 않습니다.) PostgreSQL, MySQL, Redis, SQLite, and MongoDB를 포함한 많은 <a href=\"https://expressjs.com/en/guide/database-integration.html\" class=\"external\" rel=\" noopener\">인기있는 데이터베이스 옵션</a>을 선택가능합니다.</p>\n<p>데이터베이스를 고를때, 당신은 생산성/러닝커브, 성능, 쉬운 리플리케이션/백업, 비용, 커뮤니티 지원 등을 고려해야 합니다. 하나의 \"최고\" 데이터베이스를 정하지 못하는 동안, 우리의 Local Library 같이 작은 규모에서 중간규모의 사이트에 적합한 거의 모든 어떤 솔루션이라도 사용 가능해야 합니다.</p>\n<p>옵션에 대한 더 많은 정보는 여기를 보십시오: <a href=\"https://expressjs.com/en/guide/database-integration.html\" class=\"external\" rel=\" noopener\">데이터베이스 인테그레이션</a> (Express 문서)</p>"}},{"type":"prose","value":{"id":"데이터베이스와_상호작용하는_최소의_방법은_무엇인가요","title":"데이터베이스와 상호작용하는 최소의 방법은 무엇인가요?","isH3":true,"content":"<p>데이터베이스와 상호작용하는 두가지 접근법이 있습니다:</p>\n<ul>\n  <li>데이터베이스의 네이티브 쿼리 언어를 사용 (예를 들어 SQL)</li>\n  <li>오브젝트 데이터 모델 (\"ODM\") / 오브젝트 관계형 모델 (\"ORM\")을 사용. ODM/ORM은 웹사이트의 데이터를 Javascript 오브젝트로 나타내며, 그다음 기본 데이터베이스에 매핑됩니다. 어떤 ORM은 특정 데이터베이스에 연결된 반면, 또다른 ORM은 데이터베이스와 무관한 백엔드를 제공합니다.</li>\n</ul>\n<p>최상의 퍼포먼스는 SQL이나 데이터베이스에서 지원하는 쿼리 언어를 사용할때 얻을 수 있습니다. ODM은 오브젝트와 데이터베이스 포맷을 매핑하는 변환코드를 사용하기 때문에 종종 느리며, 가장 효율적인 데이터베이스 쿼리를 사용하지 않을 수 있습니다.</p>\n<p>ORM을 사용하는 이점은 프로그래머가 데이터베이스의 의미보다 JavaScript 객체로 계속해서 생각할 수 있다는 것입니다. - 이는 다른 데이터베이스(같거나 다른 웹사이트 어느 쪽에서든)들에서 작업해야 하는 경우 특히 그렇습니다. 또한 데이터의 유효성 및 확인을 확실히 할 수 있습니다.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>참고:</strong> <strong>팁:</strong> ODM/ORM을 사용하면 개발 및 유지 보수 비용이 절감됩니다. 네이티브 쿼리 언어에 친숙하거나 퍼포먼스가 중요한 것이 아니라면, ODM 사용을 적극 고려해야 합니다.</p>\n</div>\n<p>NPM 패키지 매니저 사이트에는 사용가능한 많은 ODM/ORM 솔루션이 있습니다.(<a href=\"https://www.npmjs.com/browse/keyword/odm\" class=\"external\" rel=\" noopener\">odm</a> 과 <a href=\"https://www.npmjs.com/browse/keyword/orm\" class=\"external\" rel=\" noopener\">orm</a> 태그 집합을 확인하십시오.)</p>\n<p>이 글 작성 시점에 인기있었던 솔루션은 다음과 같습니다:</p>\n<ul>\n  <li><a href=\"https://www.npmjs.com/package/mongoose\" class=\"external\" rel=\" noopener\">Mongoose</a>: Mongoose는 비동기적인 환경에서 작업할 수 있도록 디자인된 <a href=\"https://www.mongodb.org/\" class=\"external\" rel=\" noopener\">MongoDB</a> 객체 모델링 툴입니다.</li>\n  <li><a href=\"https://www.npmjs.com/package/waterline\" class=\"external\" rel=\" noopener\">Waterline</a>: An ORM extracted from the Express-based <a href=\"http://sailsjs.com/\" class=\"external\" rel=\" noopener\">Sails</a> web framework. It provides a uniform API for accessing numerous different databases, including Redis, mySQL, LDAP, MongoDB, and Postgres.</li>\n  <li><a href=\"https://www.npmjs.com/package/bookshelf\" class=\"external\" rel=\" noopener\">Bookshelf</a>: Features both promise-based and traditional callback interfaces, providing transaction support, eager/nested-eager relation loading, polymorphic associations, and support for one-to-one, one-to-many, and many-to-many relations. Works with PostgreSQL, MySQL, and SQLite3.</li>\n  <li><a href=\"https://www.npmjs.com/package/objection\" class=\"external\" rel=\" noopener\">Objection</a>: Makes it as easy as possible to use the full power of SQL and the underlying database engine (supports SQLite3, Postgres, and MySQL).</li>\n  <li><a href=\"https://www.npmjs.com/package/sequelize\" class=\"external\" rel=\" noopener\">Sequelize</a> is a promise-based ORM for Node.js and io.js. It supports the dialects PostgreSQL, MySQL, MariaDB, SQLite and MSSQL and features solid transaction support, relations, read replication and more.</li>\n</ul>\n<p>일반적으로 솔루션을 선택할 때, 당신은 제공되는 기능과 \"커뮤니티 활동\" (다운로드, 공헌도, 버그 리포트, 문서 퀄리티 등) 모두를 고려해야 합니다. 이에 대한 글을 작성하고 있는 시점에, 몽구스는 가장 유명한 ORM이며, 당신이 MongoDB를 사용한다면 몽구스는 합리적인 선택입니다.</p>"}},{"type":"prose","value":{"id":"using_mongoose_and_mongodb_for_the_locallibrary","title":"Using Mongoose and MongoDb for the LocalLibrary","isH3":true,"content":"<p>For the <em>Local Library</em> example (and the rest of this topic) we're going to use the <a href=\"https://www.npmjs.com/package/mongoose\" class=\"external\" rel=\" noopener\">Mongoose ODM</a> to access our library data. Mongoose acts as a front end to <a href=\"https://www.mongodb.com/what-is-mongodb\" class=\"external\" rel=\" noopener\">MongoDB</a>, an open source <a href=\"https://en.wikipedia.org/wiki/NoSQL\" class=\"external\" rel=\" noopener\">NoSQL</a> database that uses a document-oriented data model. A “collection” of “documents”, in a MongoDB database, <a href=\"https://docs.mongodb.com/manual/core/databases-and-collections/#collections\" class=\"external\" rel=\" noopener\">is analogous to</a> a “table” of “rows” in a relational database.</p>\n<p>This ODM and database combination is extremely popular in the Node community, partially because the document storage and query system looks very much like JSON, and is hence familiar to JavaScript developers.</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>참고:</strong> <strong>Tip:</strong> You don't need to know MongoDB in order to use Mongoose, although parts of the <a href=\"http://mongoosejs.com/docs/guide.html\" class=\"external\" rel=\" noopener\">Mongoose documentation</a> <em>are</em> easier to use and understand if you are already familiar with MongoDB.</p>\n</div>\n<p>The rest of this tutorial shows how to define and access the Mongoose schema and models for the <a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Tutorial_local_library_website\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">LocalLibrary website (en-US)</a> example.</p>"}},{"type":"prose","value":{"id":"designing_the_locallibrary_models","title":"Designing the LocalLibrary models","isH3":false,"content":"<p>Before you jump in and start coding the models, it's worth taking a few minutes to think about what data we need to store and the relationships between the different objects.</p>\n<p>We know that we need to store information about books (title, summary, author, genre, ISBN) and that we might have multiple copies available (with globally unique ids, availability statuses, etc.). We might need to store more information about the author than just their name, and there might be multiple authors with the same or similar names. We want to be able to sort information based on book title, author, genre, and category.</p>\n<p>When designing your models it makes sense to have separate models for every \"object\" (group of related information). In this case the obvious objects are books, book instances, and authors.</p>\n<p>You might also want to use models to represent selection-list options (e.g. like a drop down list of choices), rather than hard coding the choices into the website itself — this is recommended when all the options aren't known up front or may change. The obvious candidate for a model of this type is the book genre (e.g. Science Fiction, French Poetry, etc.)</p>\n<p>Once we've decided on our models and fields, we need to think about the relationships between them.</p>\n<p>With that in mind, the UML association diagram below shows the models we'll define in this case (as boxes). As discussed above, we've created models for book (the generic details of the book), book instance (status of specific physical copies of the book available in the system), and author. We have also decided to have a model for genre, so that values can be created dynamically. We've decided not to have a model for the <code>BookInstance:status</code> — we will hard code the acceptable values because we don't expect these to change. Within each of the boxes you can see the model name, the field names and types, and also the methods and their return types.</p>\n<p>The diagram also shows the relationships between the models, including their <em>multiplicities</em>. The multiplicities are the numbers on the diagram showing the numbers (maximum and minimum) of each model that may be present in the relationship. For example, the connecting line between the boxes shows that <code>Book</code> and a <code>Genre</code> are related. The numbers close to the <code>Book</code> model show that a book must have zero or more <code>Genre</code> (as many as you like), while the numbers on the other end of the line next to the <code>Genre</code> show that it can have zero or more associated books.</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>참고:</strong> As discussed in our <a href=\"#related_documents\">Mongoose primer</a> below it is often better to have the field that defines the relationship between the documents/models in just <em>one</em> model (you can still find the reverse relationship by searching for the associated <code>_id</code> in the other model). Below we have chosen to define the relationship between Book/Genre and Book/Author in the Book schema, and the relationship between the Book/BookInstance in the BookInstance Schema. This choice was somewhat arbitrary — we could equally well have had the field in the other schema.</p>\n</div>\n<p>\n  <img src=\"https://mdn.mozillademos.org/files/15645/Library%20Website%20-%20Mongoose_Express.png\" alt=\"Mongoose Library Model  with correct cardinality\" loading=\"lazy\">\n</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>참고:</strong> The next section provides a basic primer explaining how models are defined and used. As you read it, consider how we will construct each of the models in the diagram above.</p>\n</div>"}},{"type":"prose","value":{"id":"mongoose_primer","title":"Mongoose primer","isH3":false,"content":"<p>This section provides an overview of how to connect Mongoose to a MongoDB database, how to define a schema and a model, and how to make basic queries.</p>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>참고:</strong> This primer is \"heavily influenced\" by the <a href=\"https://www.npmjs.com/package/mongoose\" class=\"external\" rel=\" noopener\">Mongoose quick start</a> on <em>npm</em> and the <a href=\"http://mongoosejs.com/docs/guide.html\" class=\"external\" rel=\" noopener\">official documentation</a>.</p>\n</div>"}},{"type":"prose","value":{"id":"installing_mongoose_and_mongodb","title":"Installing Mongoose and MongoDB","isH3":true,"content":"<p>Mongoose is installed in your project (<strong>package.json</strong>) like any other dependency — using NPM. To install it, use the following command inside your project folder:</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> mongoose\n</code></pre></div>\n<p>Installing <em>Mongoose</em> adds all its dependencies, including the MongoDB database driver, but it does not install MongoDB itself. If you want to install a MongoDB server then you can <a href=\"https://www.mongodb.com/download-center\" class=\"external\" rel=\" noopener\">download installers from here</a> for various operating systems and install it locally. You can also use cloud-based MongoDB instances.</p>\n<div class=\"notecard note\" id=\"sect6\">\n  <p><strong>참고:</strong> For this tutorial we'll be using the mLab cloud-based <em>database as a service</em> <a href=\"https://mlab.com/plans/pricing/\" class=\"external\" rel=\" noopener\">sandbox tier</a> to provide the database. This is suitable for development, and makes sense for the tutorial because it makes \"installation\" operating system independent (database-as-a-service is also one approach you might well use for your production database).</p>\n</div>"}},{"type":"prose","value":{"id":"connecting_to_mongodb","title":"Connecting to MongoDB","isH3":true,"content":"<p><em>Mongoose</em> requires a connection to a MongoDB database. You can <code>require()</code> and connect to a locally hosted database with <code>mongoose.connect()</code>, as shown below.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">//Import the mongoose module</span>\n<span class=\"token keyword\">var</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//Set up default mongoose connection</span>\n<span class=\"token keyword\">var</span> mongoDB <span class=\"token operator\">=</span> <span class=\"token string\">'mongodb://127.0.0.1/my_database'</span><span class=\"token punctuation\">;</span>\nmongoose<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mongoDB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Get Mongoose to use the global promise library</span>\nmongoose<span class=\"token punctuation\">.</span>Promise <span class=\"token operator\">=</span> global<span class=\"token punctuation\">.</span>Promise<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//Get the default connection</span>\n<span class=\"token keyword\">var</span> db <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//Bind connection to error event (to get notification of connection errors)</span>\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">,</span> <span class=\"token string\">'MongoDB connection error:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>You can get the default <code>Connection</code> object with <code>mongoose.connection</code>. Once connected, the open event is fired on the <code>Connection</code> instance.</p>\n<div class=\"notecard note\" id=\"sect7\">\n  <p><strong>참고:</strong> <strong>Tip:</strong> If you need to create additional connections you can use <code>mongoose.createConnection()</code>. This takes the same form of database URI (with host, database, port, options etc.) as <code>connect()</code> and returns a <code>Connection</code> object).</p>\n</div>"}},{"type":"prose","value":{"id":"defining_and_creating_models","title":"Defining and creating models","isH3":true,"content":"<p>Models are <em>defined</em> using the <code>Schema</code> interface. The Schema allows you to define the fields stored in each document along with their validation requirements and default values. In addition, you can define static and instance helper methods to make it easier to work with your data types, and also virtual properties that you can use like any other field, but which aren't actually stored in the database (we'll discuss a bit further below).</p>\n<p>Schemas are then \"compiled\" into models using the <code>mongoose.model()</code> method. Once you have a model you can use it to find, create, update, and delete objects of the given type.</p>\n<div class=\"notecard note\" id=\"sect8\">\n  <p><strong>참고:</strong> Each model maps to a <em>collection</em> of <em>documents</em> in the MongoDB database. The documents will contain the fields/schema types defined in the model <code>Schema</code>.</p>\n</div>\n<h4 id=\"defining_schemas\">Defining schemas</h4>\n<p>The code fragment below shows how you might define a simple schema. First you <code>require()</code> mongoose, then use the Schema constructor to create a new schema instance, defining the various fields inside it in the constructor's object parameter.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">//Require Mongoose</span>\n<span class=\"token keyword\">var</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//Define a schema</span>\n<span class=\"token keyword\">var</span> Schema <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> SomeModelSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">a_string</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">a_date</span><span class=\"token operator\">:</span> Date\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>In the case above we just have two fields, a string and a date. In the next sections we will show some of the other field types, validation, and other methods.</p>\n<h4 id=\"creating_a_model\">Creating a model</h4>\n<p>Models are created from schemas using the <code>mongoose.model()</code> method:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Define schema</span>\n<span class=\"token keyword\">var</span> Schema <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> SomeModelSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">a_string</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">a_date</span><span class=\"token operator\">:</span> Date\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Compile model from schema</span>\n<span class=\"token keyword\">var</span> SomeModel <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SomeModel'</span><span class=\"token punctuation\">,</span> SomeModelSchema <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>The first argument is the singular name of the collection that will be created for your model (Mongoose will create the database collection for the above model <em>SomeModel</em> above), and the second argument is the schema you want to use in creating the model.</p>\n<div class=\"notecard note\" id=\"sect9\">\n  <p><strong>참고:</strong> Once you've defined your model classes you can use them to create, update, or delete records, and to run queries to get all records or particular subsets of records. We'll show you how to do this in the <a href=\"#using_models\">Using models</a> section, and when we create our views.</p>\n</div>\n<h4 id=\"스키마_타입_필드\">스키마 타입 (필드)</h4>\n<p>한 스키마는 임의의 숫자의 필드들을 가질 수 있습니다.(각각의 필드는 MongoDB에 저장된 문서의 필드를 대표합니다.) 아래의 예제 스키마는 일반적인 필드 타입들을 보여주고 있으며 그들이 어떻게 선언되는지 나타냅니다.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> schema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">binary</span><span class=\"token operator\">:</span> Buffer<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">living</span><span class=\"token operator\">:</span> Boolean<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">updated</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">.</span>now <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">min</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">max</span><span class=\"token operator\">:</span> <span class=\"token number\">65</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">mixed</span><span class=\"token operator\">:</span> Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>Mixed<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">_someId</span><span class=\"token operator\">:</span> Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">array</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">ofString</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// You can also have an array of each of the other types too.</span>\n  <span class=\"token literal-property property\">nested</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">stuff</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">lowercase</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">trim</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>Most of the <a href=\"http://mongoosejs.com/docs/schematypes.html\" class=\"external\" rel=\" noopener\">SchemaTypes</a> (the descriptors after “type:” or after field names) are self explanatory. The exceptions are:</p>\n<ul>\n  <li><code>ObjectId</code>: Represents specific instances of a model in the database. For example, a book might use this to represent its author object. This will actually contain the unique ID (<code>_id</code>) for the specified object. We can use the <code>populate()</code> method to pull in the associated information when needed.</li>\n  <li><a href=\"http://mongoosejs.com/docs/schematypes.html#mixed\" class=\"external\" rel=\" noopener\">Mixed</a>: 임의의 스키마 타입입니다.(어떤 타입도 될 수 있음)</li>\n  <li>[]: An array of items. You can perform JavaScript array operations on these models (push, pop, unshift, etc.). The examples above show an array of objects without a specified type and an array of <code>String</code> objects, but you can have an array of any type of object.</li>\n</ul>\n<p>The code also shows both ways of declaring a field:</p>\n<ul>\n  <li>Field <em>name</em> and <em>type</em> as a key-value pair (i.e. as done with fields <code>name</code>, <code>binary</code> and <code>living</code>).</li>\n  <li>Field <em>name</em> followed by an object defining the <code>type</code>, and any other <em>options</em> for the field. Options include things like:\n    <ul>\n      <li>default values.</li>\n      <li>built-in validators (e.g. max/min values) and custom validation functions.</li>\n      <li>Whether the field is required</li>\n      <li>Whether <code>String</code> fields should automatically be set to lowercase, uppercase, or trimmed (e.g. <code>{ type: String, lowercase: true, trim: true }</code>)</li>\n    </ul>\n  </li>\n</ul>\n<p>For more information about options see <a href=\"http://mongoosejs.com/docs/schematypes.html\" class=\"external\" rel=\" noopener\">SchemaTypes</a> (Mongoose docs).</p>\n<h4 id=\"validation\">Validation</h4>\n<p>Mongoose provides built-in and custom validators, and synchronous and asynchronous validators. It allows you to specify both the acceptable range or values and the error message for validation failure in all cases.</p>\n<p>The built-in validators include:</p>\n<ul>\n  <li>All <a href=\"http://mongoosejs.com/docs/schematypes.html\" class=\"external\" rel=\" noopener\">SchemaTypes</a> have the built-in <a href=\"http://mongoosejs.com/docs/api.html#schematype_SchemaType-required\" class=\"external\" rel=\" noopener\">required</a> validator. This is used to specify whether the field must be supplied in order to save a document.</li>\n  <li><a href=\"http://mongoosejs.com/docs/api.html#schema-number-js\" class=\"external\" rel=\" noopener\">Numbers</a> have <a href=\"http://mongoosejs.com/docs/api.html#schema_number_SchemaNumber-min\" class=\"external\" rel=\" noopener\">min</a> and <a href=\"http://mongoosejs.com/docs/api.html#schema_number_SchemaNumber-max\" class=\"external\" rel=\" noopener\">max</a> validators.</li>\n  <li><a href=\"http://mongoosejs.com/docs/api.html#schema-string-js\" class=\"external\" rel=\" noopener\">Strings</a> have:\n    <ul>\n      <li><a href=\"http://mongoosejs.com/docs/api.html#schema_string_SchemaString-enum\" class=\"external\" rel=\" noopener\">enum</a>: specifies the set of allowed values for the field.</li>\n      <li><a href=\"http://mongoosejs.com/docs/api.html#schema_string_SchemaString-match\" class=\"external\" rel=\" noopener\">match</a>: specifies a regular expression that the string must match.</li>\n      <li><a href=\"http://mongoosejs.com/docs/api.html#schema_string_SchemaString-maxlength\" class=\"external\" rel=\" noopener\">maxlength</a> and <a href=\"http://mongoosejs.com/docs/api.html#schema_string_SchemaString-minlength\" class=\"external\" rel=\" noopener\">minlength</a> for the string.</li>\n    </ul>\n  </li>\n</ul>\n<p>The example below (slightly modified from the Mongoose documents) shows how you can specify some of the validator types and error messages:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>    <span class=\"token keyword\">var</span> breakfastSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">eggs</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Number<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">min</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Too few eggs'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">max</span><span class=\"token operator\">:</span> <span class=\"token number\">12</span>\n        <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Why no eggs?'</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">drink</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">enum</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Coffee'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tea'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Water'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>For complete information on field validation see <a href=\"http://mongoosejs.com/docs/validation.html\" class=\"external\" rel=\" noopener\">Validation</a> (Mongoose docs).</p>\n<h4 id=\"virtual_properties\">Virtual properties</h4>\n<p>Virtual properties are document properties that you can get and set but that do not get persisted to MongoDB. The getters are useful for formatting or combining fields, while setters are useful for de-composing a single value into multiple values for storage. The example in the documentation constructs (and deconstructs) a full name virtual property from a first and last name field, which is easier and cleaner than constructing a full name every time one is used in a template.</p>\n<div class=\"notecard note\" id=\"sect10\">\n  <p><strong>참고:</strong> We will use a virtual property in the library to define a unique URL for each model record using a path and the record's <code>_id</code> value.</p>\n</div>\n<p>For more information see <a href=\"http://mongoosejs.com/docs/guide.html#virtuals\" class=\"external\" rel=\" noopener\">Virtuals</a> (Mongoose documentation).</p>\n<h4 id=\"methods_and_query_helpers\">Methods and query helpers</h4>\n<p>A schema can also have <a href=\"http://mongoosejs.com/docs/guide.html#methods\" class=\"external\" rel=\" noopener\">instance methods</a>, <a href=\"http://mongoosejs.com/docs/guide.html#statics\" class=\"external\" rel=\" noopener\">static methods</a>, and <a href=\"http://mongoosejs.com/docs/guide.html#query-helpers\" class=\"external\" rel=\" noopener\">query helpers</a>. The instance and static methods are similar, but with the obvious difference that an instance method is associated with a particular record and has access to the current object. Query helpers allow you to extend mongoose's <a href=\"http://mongoosejs.com/docs/queries.html\" class=\"external\" rel=\" noopener\">chainable query builder API</a> (for example, allowing you to add a query \"byName\" in addition to the <code>find()</code>, <code>findOne()</code> and <code>findById()</code> methods).</p>"}},{"type":"prose","value":{"id":"using_models","title":"Using models","isH3":true,"content":"<p>Once you've created a schema you can use it to create models. The model represents a collection of documents in the database that you can search, while the model's instances represent individual documents that you can save and retrieve.</p>\n<p>We provide a brief overview below. For more information see: <a href=\"http://mongoosejs.com/docs/models.html\" class=\"external\" rel=\" noopener\">Models</a> (Mongoose docs).</p>\n<h4 id=\"creating_and_modifying_documents\">Creating and modifying documents</h4>\n<p>To create a record you can define an instance of the model and then call <code>save()</code>. The examples below assume SomeModel is a model (with a single field \"name\") that we have created from our schema.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Create an instance of model SomeModel</span>\n<span class=\"token keyword\">var</span> awesome_instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SomeModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'awesome'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Save the new model instance, passing a callback</span>\nawesome_instance<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// saved!</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Creation of records (along with updates, deletes, and queries) are asynchronous operations — you supply a callback that is called when the operation completes. The API uses the error-first argument convention, so the first argument for the callback will always be an error value (or null). If the API returns some result, this will be provided as the second argument.</p>\n<p>You can also use <code>create()</code> to define the model instance at the same time as you save it. The callback will return an error for the first argument and the newly-created model instance for the second argument.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>SomeModel<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'also_awesome'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> awesome_instance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// saved!</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Every model has an associated connection (this will be the default connection when you use <code>mongoose.model()</code>). You create a new connection and call <code>.model()</code> on it to create the documents on a different database.</p>\n<p>You can access the fields in this new record using the dot syntax, and change the values. You have to call <code>save()</code> or <code>update()</code> to store modified values back to the database.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Access model field values using dot notation</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>awesome_instance<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//should log 'also_awesome'</span>\n\n<span class=\"token comment\">// Change record by modifying the fields, then calling save().</span>\nawesome_instance<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"New cool name\"</span><span class=\"token punctuation\">;</span>\nawesome_instance<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// saved!</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"searching_for_records\">Searching for records</h4>\n<p>You can search for records using query methods, specifying the query conditions as a JSON document. The code fragment below shows how you might find all athletes in a database that play tennis, returning just the fields for athlete <em>name</em> and <em>age</em>. Here we just specify one matching field (sport) but you can add more criteria, specify regular expression criteria, or remove the conditions altogether to return all athletes.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> Athlete <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Athlete'</span><span class=\"token punctuation\">,</span> yourSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// find all athletes who play tennis, selecting the 'name' and 'age' fields</span>\nAthlete<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'sport'</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tennis'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name age'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> athletes</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 'athletes' contains the list of athletes that match the criteria.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>If you specify a callback, as shown above, the query will execute immediately. The callback will be invoked when the search completes.</p>\n<div class=\"notecard note\" id=\"sect11\">\n  <p><strong>참고:</strong> All callbacks in Mongoose use the pattern <code>callback(error, result)</code>. If an error occurs executing the query, the <code>error</code> parameter will contain an error document, and <code>result</code> will be null. If the query is successful, the <code>error</code> parameter will be null, and the <code>result</code> will be populated with the results of the query.</p>\n</div>\n<p>If you don't specify a callback then the API will return a variable of type <a href=\"http://mongoosejs.com/docs/api.html#query-js\" class=\"external\" rel=\" noopener\">Query</a>. You can use this query object to build up your query and then execute it (with a callback) later using the <code>exec()</code> method.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// find all athletes that play tennis</span>\n<span class=\"token keyword\">var</span> query <span class=\"token operator\">=</span> Athlete<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'sport'</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tennis'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// selecting the 'name' and 'age' fields</span>\nquery<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// limit our results to 5 items</span>\nquery<span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// sort by age</span>\nquery<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// execute the query at a later time</span>\nquery<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> athletes</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// athletes contains an ordered list of 5 athletes who play Tennis</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>Above we've defined the query conditions in the <code>find()</code> method. We can also do this using a <code>where()</code> function, and we can chain all the parts of our query together using the dot operator (.) rather than adding them separately. The code fragment below is the same as our query above, with an additional condition for the age.</p>\n<pre class=\"notranslate\">Athlete.\n  find().\n  where('sport').equals('Tennis').\n  where('age').gt(17).lt(50).  //Additional where query\n  limit(5).\n  sort({ age: -1 }).\n  select('name age').\n  exec(callback); // where callback is the name of our callback function.\n</pre>\n<p>The <a href=\"http://mongoosejs.com/docs/api.html#query_Query-find\" class=\"external\" rel=\" noopener\">find()</a> method gets all matching records, but often you just want to get one match. The following methods query for a single record:</p>\n<ul>\n  <li><a href=\"http://mongoosejs.com/docs/api.html#model_Model.findById\" class=\"external\" rel=\" noopener\"><code>findById()</code></a>: Finds the document with the specified <code>id</code> (every document has a unique <code>id</code>).</li>\n  <li><a href=\"http://mongoosejs.com/docs/api.html#query_Query-findOne\" class=\"external\" rel=\" noopener\"><code>findOne()</code></a>: Finds a single document that matches the specified criteria.</li>\n  <li><a href=\"http://mongoosejs.com/docs/api.html#model_Model.findByIdAndRemove\" class=\"external\" rel=\" noopener\"><code>findByIdAndRemove()</code></a>, <a href=\"http://mongoosejs.com/docs/api.html#model_Model.findByIdAndUpdate\" class=\"external\" rel=\" noopener\"><code>findByIdAndUpdate()</code></a>, <a href=\"http://mongoosejs.com/docs/api.html#query_Query-findOneAndRemove\" class=\"external\" rel=\" noopener\"><code>findOneAndRemove()</code></a>, <a href=\"http://mongoosejs.com/docs/api.html#query_Query-findOneAndUpdate\" class=\"external\" rel=\" noopener\"><code>findOneAndUpdate()</code></a>: Finds a single document by <code>id</code> or criteria and either update or remove it. These are useful convenience functions for updating and removing records.</li>\n</ul>\n<div class=\"notecard note\" id=\"sect12\">\n  <p><strong>참고:</strong> There is also a <a href=\"http://mongoosejs.com/docs/api.html#model_Model.count\" class=\"external\" rel=\" noopener\"><code>count()</code></a> method that you can use to get the number of items that match conditions. This is useful if you want to perform a count without actually fetching the records.</p>\n</div>\n<p>There is a lot more you can do with queries. For more information see: <a href=\"http://mongoosejs.com/docs/queries.html\" class=\"external\" rel=\" noopener\">Queries</a> (Mongoose docs).</p>\n<h4 id=\"working_with_related_documents_—_population\">Working with related documents — population</h4>\n<p>You can create references from one document/model instance to another using the <code>ObjectId</code> schema field, or from one document to many using an array of <code>ObjectIds</code>. The field stores the id of the related model. If you need the actual content of the associated document, you can use the <a href=\"http://mongoosejs.com/docs/api.html#query_Query-populate\" class=\"external\" rel=\" noopener\"><code>populate()</code></a> method in a query to replace the id with the actual data.</p>\n<p>For example, the following schema defines authors and stories. Each author can have multiple stories, which we represent as an array of <code>ObjectId</code>. Each story can have a single author. The \"ref\" (highlighted in bold below) tells the schema which model can be assigned to this field.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">,</span> Schema <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>Schema\n\n<span class=\"token keyword\">var</span> authorSchema <span class=\"token operator\">=</span> <span class=\"token function\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span>    <span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">stories</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ref</span><span class=\"token operator\">:</span> <span class=\"token string\">'Story'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> storySchema <span class=\"token operator\">=</span> <span class=\"token function\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">author</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ref</span><span class=\"token operator\">:</span> <span class=\"token string\">'Author'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">title</span>    <span class=\"token operator\">:</span> String\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> Story  <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Story'</span><span class=\"token punctuation\">,</span> storySchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> Author <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Author'</span><span class=\"token punctuation\">,</span> authorSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>We can save our references to the related document by assigning the <code>_id</code> value. Below we create an author, then a book, and assign the author id to our stories author field.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> bob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Author</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Bob Smith'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbob<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//Bob now exists, so lets create a story</span>\n  <span class=\"token keyword\">var</span> story <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Story</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Bob goes sledding\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> bob<span class=\"token punctuation\">.</span>_id    <span class=\"token comment\">// assign the _id from the our author Bob. This ID is created by default!</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  story<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Bob now has his story</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Our story document now has an author referenced by the author document's ID. In order to get the author information in our story results we use <code>populate()</code>, as shown below.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>Story\n<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Bob goes sledding'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">populate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'author'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//This populates the author id with actual author information!</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> story</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The author is %s'</span><span class=\"token punctuation\">,</span> story<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// prints \"The author is Bob Smith\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect13\">\n  <p><strong>참고:</strong> Astute readers will have noted that we added an author to our story, but we didn't do anything to add our story to our author's <code>stories</code> array. How then can we get all stories by a particular author? One way would be to add our author to the stories array, but this would result in us having two places where the information relating authors and stories needs to be maintained.</p>\n  <p>A better way is to get the <code>_id</code> of our <em>author</em>, then use <code>find()</code> to search for this in the author field across all stories.</p>\n  <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>Story\n<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">author</span> <span class=\"token operator\">:</span> bob<span class=\"token punctuation\">.</span>_id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> stories</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// returns all stories that have Bob's id as their author.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</div>\n<p>This is almost everything you need to know about working with related items <em>for this tutorial</em>. For more detailed information see <a href=\"http://mongoosejs.com/docs/populate.html\" class=\"external\" rel=\" noopener\">Population</a> (Mongoose docs).</p>"}},{"type":"prose","value":{"id":"one_schemamodel_per_file","title":"One schema/model per file","isH3":true,"content":"<p>While you can create schemas and models using any file structure you like, we highly recommend defining each model schema in its own module (file), exporting the method to create the model. This is shown below:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// File: ./models/somemodel.js</span>\n\n<span class=\"token comment\">//Require Mongoose</span>\n<span class=\"token keyword\">var</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//Define a schema</span>\n<span class=\"token keyword\">var</span> Schema <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> SomeModelSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">a_string</span>          <span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">a_date</span>            <span class=\"token operator\">:</span> Date<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//Export function to create \"SomeModel\" model class</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SomeModel'</span><span class=\"token punctuation\">,</span> SomeModelSchema <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>You can then require and use the model immediately in other files. Below we show how you might use it to get all instances of the model.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">//Create a SomeModel model just by requiring the module</span>\n<span class=\"token keyword\">var</span> SomeModel <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/somemodel'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Use the SomeModel object (model) to find all SomeModel records</span>\nSomeModel<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>callback_function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"setting_up_the_mongodb_database","title":"Setting up the MongoDB database","isH3":false,"content":"<p>Now that we understand something of what Mongoose can do and how we want to design our models, it's time to start work on the <em>LocalLibrary</em> website. The very first thing we want to do is set up a MongoDb database that we can use to store our library data.</p>\n<p>For this tutorial we're going to use <a href=\"https://mlab.com/welcome/\" class=\"external\" rel=\" noopener\">mLab</a>'s free cloud-hosted \"<a href=\"https://mlab.com/plans/pricing/\" class=\"external\" rel=\" noopener\">sandbox</a>\" database. This database tier is not considered suitable for production websites because it has no redundancy, but it is great for development and prototyping. We're using it here because it is free and easy to set up, and because mLab is a popular <em>database as a service</em> vendor that you might reasonably choose for your production database (other popular choices at the time of writing include <a href=\"https://www.compose.com/\" class=\"external\" rel=\" noopener\">Compose</a>, <a href=\"https://scalegrid.io/pricing.html\" class=\"external\" rel=\" noopener\">ScaleGrid</a> and <a href=\"https://www.mongodb.com/cloud/atlas\" class=\"external\" rel=\" noopener\">MongoDB Atlas</a>).</p>\n<div class=\"notecard note\" id=\"sect14\">\n  <p><strong>참고:</strong> If you prefer you can set up a MongoDb database locally by downloading and installing the <a href=\"https://www.mongodb.com/download-center\" class=\"external\" rel=\" noopener\">appropriate binaries for your system</a>. The rest of the instructions in this article would be similar, except for the database URL you would specify when connecting.</p>\n</div>\n<p>You will first need to <a href=\"https://mlab.com/signup/\" class=\"external\" rel=\" noopener\">create an account</a> with mLab (this is free, and just requires that you enter basic contact details and acknowledge their terms of service).</p>\n<p>After logging in, you'll be taken to the <a href=\"https://mlab.com/home\" class=\"external\" rel=\" noopener\">home</a> screen:</p>\n<ol>\n  <li>Click <strong>Create New</strong> in the <em>MongoDB Deployments</em> section.\n    <img src=\"https://mdn.mozillademos.org/files/14446/mLabCreateNewDeployment.png\" alt=\"\" loading=\"lazy\">\n  </li>\n  <li>\n    This will open the <em>Cloud Provider Selection</em> screen.\n    \n    <img src=\"https://mdn.mozillademos.org/files/15661/mLab_new_deployment_form_v2.png\" alt=\"MLab - screen for new deployment\" loading=\"lazy\">\n    <ul>\n      <li>Select the SANDBOX (Free) plan from the Plan Type section.</li>\n      <li>Select any provider from the <em>Cloud Provider</em> section. Different providers offer different regions (displayed below the selected plan type).</li>\n      <li>Click the <strong>Continue</strong> button.</li>\n    </ul>\n  </li>\n  <li>\n    This will open the <em>Select Region</em> screen.\n    \n    <img src=\"https://mdn.mozillademos.org/files/15662/mLab_new_deployment_select_region_v2.png\" alt=\"Select new region screen\" loading=\"lazy\">\n    <ul>\n      <li>Select the region closest to you and then <strong>Continue</strong>.</li>\n    </ul>\n  </li>\n  <li>\n    This will open the <em>Final Details</em> screen.\n    \n    <img src=\"https://mdn.mozillademos.org/files/15663/mLab_new_deployment_final_details.png\" alt=\"New deployment database name\" loading=\"lazy\">\n    <ul>\n      <li>Enter the name for the new database as <code>local_library</code> and then select <strong>Continue</strong>.</li>\n    </ul>\n  </li>\n  <li>\n    This will open the <em>Order Confirmation</em> screen.\n    \n    <img src=\"https://mdn.mozillademos.org/files/15664/mLab_new_deployment_order_confirmation.png\" alt=\"Order confirmation screen\" loading=\"lazy\">\n    <ul>\n      <li>Click <strong>Submit Order</strong> to create the database.</li>\n    </ul>\n  </li>\n  <li>\n    You will be returned to the home screen. Click on the new database you just created to open its details screen. As you can see the database has no collections (data).\n    \n    <img src=\"https://mdn.mozillademos.org/files/15665/mLab_new_deployment_database_details.png\" alt=\"mLab - Database details screen\" loading=\"lazy\">\n    The URL that you need to use to access your database is displayed on the form above (shown for this database circled above). In order to use this you need to create a database user that you can specify in the URL.\n  </li>\n  <li>Click the <strong>Users</strong> tab and select the <strong>Add database user</strong> button.</li>\n  <li>\n    Enter a username and password (twice), and then press <strong>Create</strong>. Do not select <em>Make read only</em>.\n    \n    <img src=\"https://mdn.mozillademos.org/files/14454/mLab_database_users.png\" alt=\"\" loading=\"lazy\">\n  </li>\n</ol>\n<p>You now have now created the database, and have an URL (with username and password) that can be used to access it. This will look something like: <code>mongodb://your_user_namer:your_password@ds119748.mlab.com:19748/local_library</code>.</p>"}},{"type":"prose","value":{"id":"install_mongoose","title":"Install Mongoose","isH3":false,"content":"<p>Open a command prompt and navigate to the directory where you created your <a href=\"/ko/docs/Learn/Server-side/Express_Nodejs/skeleton_website\">skeleton Local Library website</a>. Enter the following command to install Mongoose (and its dependencies) and add it to your <strong>package.json</strong> file, unless you have already done so when reading the <a href=\"#installing_mongoose_and_mongodb\">Mongoose Primer</a> above.</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> mongoose --save\n</code></pre></div>"}},{"type":"prose","value":{"id":"connect_to_mongodb","title":"Connect to MongoDB","isH3":false,"content":"<p>Open <strong>/app.js</strong> (in the root of your project) and copy the following text below where you declare the <em>Express application object</em> (after the line <code>var app = express();</code>). Replace the database url string ('<em>insert_your_database_url_here</em>') with the location URL representing your own database (i.e. using the information from <a href=\"#setting_up_the_mongodb_database\">from mLab</a>).</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">//Set up mongoose connection</span>\n<span class=\"token keyword\">var</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> mongoDB <span class=\"token operator\">=</span> <span class=\"token string\">'insert_your_database_url_here'</span><span class=\"token punctuation\">;</span>\nmongoose<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mongoDB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmongoose<span class=\"token punctuation\">.</span>Promise <span class=\"token operator\">=</span> global<span class=\"token punctuation\">.</span>Promise<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> db <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">;</span>\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">,</span> <span class=\"token string\">'MongoDB connection error:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>As discussed <a href=\"#connecting_to_mongodb\">in the Mongoose primer above</a>, this code creates the default connection to the database and binds to the error event (so that errors will be printed to the console).</p>"}},{"type":"prose","value":{"id":"defining_the_locallibrary_schema","title":"Defining the LocalLibrary Schema","isH3":false,"content":"<p>We will define a separate module for each model, as <a href=\"#one_schemamodel_per_file\">discussed above</a>. Start by creating a folder for our models in the project root (<strong>/models</strong>) and then create separate files for each of the models:</p>\n<pre class=\"notranslate\">/express-locallibrary-tutorial  //the project root\n  /models\n    author.js\n    book.js\n    bookinstance.js\n    genre.js\n</pre>"}},{"type":"prose","value":{"id":"author_model","title":"Author model","isH3":true,"content":"<p>Copy the <code>Author</code> schema code shown below and paste it into your <strong>./models/author.js</strong> file. The scheme defines an author has having <code>String</code> SchemaTypes for the first and family names, that are required and have a maximum of 100 characters, and <code>Date</code> fields for the date of birth and death.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> Schema <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> AuthorSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">first_name</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">max</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">family_name</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">max</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">date_of_birth</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">date_of_death</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Virtual for author's full name</span>\nAuthorSchema\n<span class=\"token punctuation\">.</span><span class=\"token function\">virtual</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>family_name <span class=\"token operator\">+</span> <span class=\"token string\">', '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>first_name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Virtual for author's URL</span>\nAuthorSchema\n<span class=\"token punctuation\">.</span><span class=\"token function\">virtual</span><span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'/catalog/author/'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//Export model</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Author'</span><span class=\"token punctuation\">,</span> AuthorSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>We've also declared a <a href=\"#virtual_properties\">virtual</a> for the AuthorSchema named \"url\" that returns the absolute URL required to get a particular instance of the model — we'll use the property in our templates whenever we need to get a link to a particular author.</p>\n<div class=\"notecard note\" id=\"sect15\">\n  <p>\n    <strong>참고:</strong> Declaring our URLs as a virtual in the schema is a good idea because then the URL for an item only ever needs to be changed in one place.\n    At this point a link using this URL wouldn't work, because we haven't got any routes handling code for individual model instances. We'll set those up in a later article!\n  </p>\n</div>\n<p>At the end of the module we export the model.</p>"}},{"type":"prose","value":{"id":"book_model","title":"Book model","isH3":true,"content":"<p>Copy the <code>Book</code> schema code shown below and paste it into your <strong>./models/book.js</strong> file. Most of this is similar to the author model — we've declared a schema with a number of string fields and a virtual for getting the URL of specific book records, and we've exported the model.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> Schema <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> BookSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Schema<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ref</span><span class=\"token operator\">:</span> <span class=\"token string\">'Author'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">summary</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">isbn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">genre</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Schema<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ref</span><span class=\"token operator\">:</span> <span class=\"token string\">'Genre'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Virtual for book's URL</span>\nBookSchema\n<span class=\"token punctuation\">.</span><span class=\"token function\">virtual</span><span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'/catalog/book/'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//Export model</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Book'</span><span class=\"token punctuation\">,</span> BookSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>The main difference here is that we've created two references to other models:</p>\n<ul>\n  <li>author is a reference to a single <code>Author</code> model object, and is required.</li>\n  <li>genre is a reference to an array of <code>Genre</code> model objects. We haven't declared this object yet!</li>\n</ul>"}},{"type":"prose","value":{"id":"bookinstance_model","title":"BookInstance model","isH3":true,"content":"<p>Finally, copy the <code>BookInstance</code> schema code shown below and paste it into your <strong>./models/bookinstance.js</strong> file. The <code>BookInstance</code> represents a specific copy of a book that someone might borrow, and includes information about whether the copy is available or on what date it is expected back, \"imprint\" or version details.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> Schema <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> BookInstanceSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">book</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Schema<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ref</span><span class=\"token operator\">:</span> <span class=\"token string\">'Book'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//reference to the associated book</span>\n    <span class=\"token literal-property property\">imprint</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">enum</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Available'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Maintenance'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Loaned'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Reserved'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token string\">'Maintenance'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">due_back</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Virtual for bookinstance's URL</span>\nBookInstanceSchema\n<span class=\"token punctuation\">.</span><span class=\"token function\">virtual</span><span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'/catalog/bookinstance/'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//Export model</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'BookInstance'</span><span class=\"token punctuation\">,</span> BookInstanceSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>The new things we show here are the field options:</p>\n<ul>\n  <li><code>enum</code>: This allows us to set the allowed values of a string. In this case we use it to specify the availability status of our books (using an enum means that we can prevent mis-spellings and arbitrary values for our status)</li>\n  <li><code>default</code>: We use default to set the default status for newly created bookinstances to maintenance and the default <code>due_back</code> date to <code>now</code> (note how you can call the Date function when setting the date!)</li>\n</ul>\n<p>Everything else should be familiar from our previous schema.</p>"}},{"type":"prose","value":{"id":"genre_model_-_challenge!","title":"Genre model - challenge!","isH3":true,"content":"<p>Open your <strong>./models/genre.js</strong> file and create a schema for storing genres (the category of book, e.g. whether it is fiction or non-fiction, romance or military history, etc).</p>\n<p>The definition will be very similar to the other models:</p>\n<ul>\n  <li>The model should have a <code>String</code> SchemaType called <code>name</code> to describe the genre.</li>\n  <li>This name should be required and have between 3 and 100 characters.</li>\n  <li>Declare a <a href=\"#virtual_properties\">virtual</a> for the genre's URL, named <code>url</code>.</li>\n  <li>Export the model.</li>\n</ul>"}},{"type":"prose","value":{"id":"testing_—_create_some_items","title":"Testing — create some items","isH3":false,"content":"<p>That's it. We now have all models for the site set up!</p>\n<p>In order to test the models (and to create some example books and other items that we can use in our next articles) we'll now run an <em>independent</em> script to create items of each type:</p>\n<ol>\n  <li>Download (or otherwise create) the file <a href=\"https://raw.githubusercontent.com/hamishwillee/express-locallibrary-tutorial/master/populatedb.js\" class=\"external\" rel=\" noopener\">populatedb.js</a> inside your <em>express-locallibrary-tutorial</em> directory (in the same level as <code>package.json</code>).\n    <div class=\"notecard note\" id=\"sect16\">\n      <p><strong>참고:</strong> You don't need to know how <a href=\"https://raw.githubusercontent.com/hamishwillee/express-locallibrary-tutorial/master/populatedb.js\" class=\"external\" rel=\" noopener\">populatedb.js</a> works; it just adds sample data into the database.</p>\n    </div>\n  </li>\n  <li>Enter the following commands in the project root to install the <em>async</em> module that is required by the script (we'll discuss this in later tutorials, )\n    <div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> async --save\n</code></pre></div>\n  </li>\n  <li>Run the script using node in your command prompt, passing in the URL of your <em>MongoDB</em> database (the same one you replaced the <em>insert_your_database_url_here</em> placeholder with, inside <code>app.js</code> earlier):\n    <div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">node</span> populatedb <span class=\"token operator\">&lt;</span>your mongodb url<span class=\"token operator\">&gt;</span>​​​​\n</code></pre></div>\n  </li>\n  <li>The script should run through to completion, displaying items as it creates them in the terminal.</li>\n</ol>\n<div class=\"notecard note\" id=\"sect17\">\n  <p><strong>참고:</strong> <strong>Tip:</strong> Go to your database on <a href=\"https://mlab.com/home\" class=\"external\" rel=\" noopener\">mLab</a>. You should now be able to drill down into individual collections of Books, Authors, Genres and BookInstances, and check out individual documents.</p>\n</div>"}},{"type":"prose","value":{"id":"summary","title":"Summary","isH3":false,"content":"<p>In this article we've learned a bit about databases and ORMs on Node/Express, and a lot about how Mongoose schema and models are defined. We then used this information to design and implement <code>Book</code>, <code>BookInstance</code>, <code>Author</code> and <code>Genre</code> models for the <em>LocalLibrary</em> website.</p>\n<p>Last of all we tested our models by creating a number of instances (using a standalone script). In the next article we'll look at creating some pages to display these objects.</p>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"https://expressjs.com/en/guide/database-integration.html\" class=\"external\" rel=\" noopener\">Database integration</a> (Express docs)</li>\n  <li><a href=\"http://mongoosejs.com/\" class=\"external\" rel=\" noopener\">Mongoose website</a> (Mongoose docs)</li>\n  <li><a href=\"http://mongoosejs.com/docs/guide.html\" class=\"external\" rel=\" noopener\">Mongoose Guide</a> (Mongoose docs)</li>\n  <li><a href=\"http://mongoosejs.com/docs/validation.html\" class=\"external\" rel=\" noopener\">Validation</a> (Mongoose docs)</li>\n  <li><a href=\"http://mongoosejs.com/docs/schematypes.html\" class=\"external\" rel=\" noopener\">Schema Types</a> (Mongoose docs)</li>\n  <li><a href=\"http://mongoosejs.com/docs/models.html\" class=\"external\" rel=\" noopener\">Models</a> (Mongoose docs)</li>\n  <li><a href=\"http://mongoosejs.com/docs/queries.html\" class=\"external\" rel=\" noopener\">Queries</a> (Mongoose docs)</li>\n  <li><a href=\"http://mongoosejs.com/docs/populate.html\" class=\"external\" rel=\" noopener\">Population</a> (Mongoose docs)</li>\n</ul><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/ko/docs/Learn/Server-side/Express_Nodejs/skeleton_website\"> 이전 </a></li>\n    <li><a class=\"button minimal\" href=\"/ko/docs/Learn/Server-side/Express_Nodejs\"> Overview: Express Nodejs</a></li>\n    <li><a class=\"button minimal\" href=\"/ko/docs/Learn/Server-side/Express_Nodejs/routes\"> 다음  </a></li>\n</ul>"}},{"type":"prose","value":{"id":"in_this_module","title":"In this module","isH3":false,"content":"<ul>\n  <li><a href=\"/ko/docs/Learn/Server-side/Express_Nodejs/Introduction\">Express/Node introduction</a></li>\n  <li><a href=\"/ko/docs/Learn/Server-side/Express_Nodejs/development_environment\">Setting up a Node (Express) development environment</a></li>\n  <li><a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Tutorial_local_library_website\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Express Tutorial: The Local Library website (en-US)</a></li>\n  <li><a href=\"/ko/docs/Learn/Server-side/Express_Nodejs/skeleton_website\">Express Tutorial Part 2: Creating a skeleton website</a></li>\n  <li><a href=\"/ko/docs/Learn/Server-side/Express_Nodejs/mongoose\" aria-current=\"page\">Express Tutorial Part 3: Using a Database (with Mongoose)</a></li>\n  <li><a href=\"/ko/docs/Learn/Server-side/Express_Nodejs/routes\">Express Tutorial Part 4: Routes and controllers</a></li>\n  <li><a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Express Tutorial Part 5: Displaying library data (en-US)</a></li>\n  <li><a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/forms\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Express Tutorial Part 6: Working with forms (en-US)</a></li>\n  <li><a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/deployment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Express Tutorial Part 7: Deploying to production (en-US)</a></li>\n</ul>"}}],"toc":[{"text":"개요","id":"개요"},{"text":"Designing the LocalLibrary models","id":"designing_the_locallibrary_models"},{"text":"Mongoose primer","id":"mongoose_primer"},{"text":"Setting up the MongoDB database","id":"setting_up_the_mongodb_database"},{"text":"Install Mongoose","id":"install_mongoose"},{"text":"Connect to MongoDB","id":"connect_to_mongodb"},{"text":"Defining the LocalLibrary Schema","id":"defining_the_locallibrary_schema"},{"text":"Testing — create some items","id":"testing_—_create_some_items"},{"text":"Summary","id":"summary"},{"text":"See also","id":"see_also"},{"text":"In this module","id":"in_this_module"}],"summary":"In this article we've learned a bit about databases and ORMs on Node/Express, and a lot about how Mongoose schema and models are defined. We then used this information to design and implement Book, BookInstance, Author and Genre models for the LocalLibrary website.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Express Tutorial Part 3: Using a Database (with Mongoose)","locale":"en-US","native":"English (US)"},{"title":"Express チュートリアル Part 3: データベースの使用 (Mongoose を使用)","locale":"ja","native":"日本語"},{"title":"Tutorial Express Parte 3: Usando um banco de dados (com Mongoose)","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Учебник Express часть 3: Использование базы данных (с помощью Mongoose)","locale":"ru","native":"Русский"},{"title":"Express 教程 3：使用数据库  (Mongoose)","locale":"zh-CN","native":"中文 (简体)"},{"title":"Express 教學 3: 使用資料庫 ( Mongoose)","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"ko/learn/server-side/express_nodejs/mongoose","github_url":"https://github.com/mdn/translated-content/blob/main/files/ko/learn/server-side/express_nodejs/mongoose/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/ko/docs/Learn","title":"Web 개발 학습하기"},{"uri":"/ko/docs/Learn/Server-side","title":"Server-side website programming"},{"uri":"/ko/docs/Learn/Server-side/Express_Nodejs","title":"Express 웹 프레임워크 (Node.js/JavaScript의 활용)"},{"uri":"/ko/docs/Learn/Server-side/Express_Nodejs/mongoose","title":"Express Tutorial Part 3: Using a Database (with Mongoose)"}],"pageTitle":"Express Tutorial Part 3: Using a Database (with Mongoose) - Web 개발 학습하기 | MDN","noIndexing":false}}