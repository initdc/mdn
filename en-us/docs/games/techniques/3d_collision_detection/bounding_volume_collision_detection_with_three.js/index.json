{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Bounding volume collision detection with THREE.js","mdn_url":"/en-US/docs/Games/Techniques/3D_collision_detection/Bounding_volume_collision_detection_with_THREE.js","locale":"en-US","native":"English (US)","sidebarHTML":"\n  <ol>\n    <li class=\"toggle\">\n        <details>\n            <summary>Introduction</summary>\n            <ol>\n              <li><a href=\"/en-US/docs/Games/Introduction\">Introduction</a></li>\n              <li><a href=\"/en-US/docs/Games/Anatomy\">Anatomy</a></li>\n              <li><a href=\"/en-US/docs/Games/Examples\">Examples</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>APIs for game development</summary>\n            <ol>\n              <li><a href=\"/en-US/docs/Web/API/Canvas_API\">Canvas</a></li>\n              <li><a href=\"/en-US/docs/Web/CSS\">CSS</a></li>\n              <li><a href=\"/en-US/docs/Web/API/Fullscreen_API\">Full screen</a></li>\n              <li><a href=\"/en-US/docs/Web/API/Gamepad_API\">Gamepad</a></li>\n              <li><a href=\"/en-US/docs/Web/API/IndexedDB_API\">IndexedDB</a></li>\n              <li><a href=\"/en-US/docs/Web/JavaScript\">JavaScript</a></li>\n              <li><a href=\"/en-US/docs/Web/API/Pointer_Lock_API\">Pointer Lock</a></li>\n              <li><a href=\"/en-US/docs/Web/SVG\">SVG</a></li>\n              <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">Typed Arrays</a></li>\n              <li><a href=\"/en-US/docs/Web/API/Web_Audio_API\">Web Audio</a></li>\n              <li><a href=\"/en-US/docs/Web/API/WebGL_API\">WebGL</a></li>\n              <li><a href=\"/en-US/docs/Web/API/WebRTC_API\">WebRTC</a></li>\n              <li><a href=\"/en-US/docs/Web/API/WebSockets_API\">WebSockets</a></li>\n              <li><a href=\"/en-US/docs/Web/API/WebVR_API\">WebVR</a></li>\n              <li><a href=\"/en-US/docs/Web/API/Web_Workers_API\">Web Workers</a></li>\n              <li><a href=\"/en-US/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Techniques</summary>\n            <ol>\n              <li><a href=\"/en-US/docs/Games/Techniques/Async_scripts\">Using async scripts for asm.js</a></li>\n              <li><a href=\"/en-US/docs/Web/Apps/Developing/Optimizing_startup_performance\">Optimizing startup performance</a></li>\n              <li><a href=\"/en-US/docs/Games/Techniques/WebRTC_data_channels\">Using WebRTC peer-to-peer data channels</a></li>\n              <li><a href=\"/en-US/docs/Games/Techniques/Efficient_animation_for_web_games\">Efficient animation for web games</a></li>\n              <li><a href=\"/en-US/docs/Games/Techniques/Audio_for_Web_Games\">Audio for Web Games</a></li>\n              <li><a href=\"/en-US/docs/Games/Techniques/2D_collision_detection\">2D collision detection</a></li>\n              <li><a href=\"/en-US/docs/Games/Techniques/Tilemaps\">Tiles and tilemaps overview</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>3D games on the Web</summary>\n            <ol>\n              <li><a href=\"/en-US/docs/Games/Techniques/3D_on_the_web\">3D games on the Web overview</a></li>\n              <li><a href=\"/en-US/docs/Games/Techniques/3D_on_the_web/Basic_theory\">Explaining basic 3D theory</a></li>\n              <li><a href=\"/en-US/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_A-Frame\">Building up a basic demo with A-Frame</a></li>\n              <li><a href=\"/en-US/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_Babylon.js\">Building up a basic demo with Babylon.js</a></li>\n              <li><a href=\"/en-US/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_PlayCanvas\">Building up a basic demo with PlayCanvas</a></li>\n              <li><a href=\"/en-US/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_Three.js\">Building up a basic demo with Three.js</a></li>\n              <li><a href=\"/en-US/docs/Games/Techniques/3D_on_the_web/WebVR\">WebVR</a></li>\n              <li><a href=\"/en-US/docs/Games/Techniques/3D_collision_detection\">3D collision detection</a></li>\n              <li><a href=\"/en-US/docs/Games/Techniques/3D_collision_detection/Bounding_volume_collision_detection_with_THREE.js\">Bounding volume collision detection with THREE.js</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Implementing game control mechanisms</summary>\n            <ol>\n              <li><a href=\"/en-US/docs/Games/Techniques/Control_mechanisms\">Control mechanisms</a></li>\n              <li><a href=\"/en-US/docs/Games/Techniques/Control_mechanisms/Mobile_touch\">Mobile touch</a></li>\n              <li><a href=\"/en-US/docs/Games/Techniques/Control_mechanisms/Desktop_with_mouse_and_keyboard\">Desktop with mouse and keyboard</a></li>\n              <li><a href=\"/en-US/docs/Games/Techniques/Control_mechanisms/Desktop_with_gamepad\">Desktop with gamepad</a></li>\n              <li><a href=\"/en-US/docs/Games/Techniques/Control_mechanisms/Other\">Other</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Tutorials</summary>\n            <ol>\n              <li><a href=\"/en-US/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript\">2D breakout game using pure JavaScript</a></li>\n              <li><a href=\"/en-US/docs/Games/Tutorials/2D_breakout_game_Phaser\">2D breakout game using Phaser</a></li>\n              <li><a href=\"/en-US/docs/Games/Tutorials/HTML5_Gamedev_Phaser_Device_Orientation\">2D maze_game with device orientation</a></li>\n              <li><a href=\"https://mozdevs.github.io/html5-games-workshop/en/guides/platformer/start-here/\">2D platform game using Phaser</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Publishing games</summary>\n            <ol>\n              <li><a href=\"/en-US/docs/Games/Publishing_games\">Publishing games overview</a></li>\n              <li><a href=\"/en-US/docs/Games/Publishing_games/Game_distribution\">Game distribution</a></li>\n              <li><a href=\"/en-US/docs/Games/Publishing_games/Game_promotion\">Game promotion</a></li>\n              <li><a href=\"/en-US/docs/Games/Publishing_games/Game_monetization\">Game monetization</a></li>\n            </ol>\n        </details>\n    </li>\n  </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>This article shows how to implement <strong>collision detection between bounding boxes and spheres using the Three.js</strong> library. It is assumed that before reading this you have read our <a href=\"/en-US/docs/Games/Techniques/3D_collision_detection\">3D collision detection</a> introductory article first, and have basic knowledge about Three.js.</p>"}},{"type":"prose","value":{"id":"using_box3_and_sphere","title":"Using <code>Box3</code> and <code>Sphere</code>","isH3":false,"content":"<p>Three.js has objects that represent <strong>mathematical volumes</strong> and shapes — for 3D AABB and bounding spheres we can use the <strong><a href=\"https://threejs.org/docs/#api/math/Box3\" class=\"external\" rel=\" noopener\"><code>Box3</code></a></strong> and <strong><a href=\"https://threejs.org/docs/#api/math/Sphere\" class=\"external\" rel=\" noopener\"><code>Sphere</code></a></strong> objects. Once instantiated, they have methods available to do intersection tests against other volumes.</p>","titleAsText":"Using Box3 and Sphere"}},{"type":"prose","value":{"id":"instantiating_boxes","title":"Instantiating boxes","isH3":true,"content":"<p>To create a <strong><code>Box3</code> instance</strong>, we need to provide the <strong>lower and upper boundaries</strong> of the box. Usually we will want this AABB to be \"linked\" to an object in our 3D world (like a character.) In Three.js, <code>Geometry</code> instances have a <code>boundingBox</code> property with <code>min</code> and <code>max</code> boundaries for the object. Keep in mind that in order for this property to be defined, you need to manually call <code>Geometry.computeBoundingBox</code> beforehand.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> knot <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Mesh</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>TorusKnotGeometry</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">MeshNormalMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nknot<span class=\"token punctuation\">.</span>geometry<span class=\"token punctuation\">.</span><span class=\"token function\">computeBoundingBox</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> knotBBox <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Box3</span><span class=\"token punctuation\">(</span>\n  knot<span class=\"token punctuation\">.</span>geometry<span class=\"token punctuation\">.</span>boundingBox<span class=\"token punctuation\">.</span>min<span class=\"token punctuation\">,</span>\n  knot<span class=\"token punctuation\">.</span>geometry<span class=\"token punctuation\">.</span>boundingBox<span class=\"token punctuation\">.</span>max\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> The <code>boundingBox</code> property takes the <code>Geometry</code> itself as reference, and not the <code>Mesh</code>. So any transformations such as scale, position, etc. applied to the <code>Mesh</code> will be ignored while computing the calculating box.</p>\n</div>\n<p>A more simple alternative that fixes the previous issue is to set those boundaries later on with <code>Box3.setFromObject</code>, which will compute the dimensions taking into account a 3D entity's <strong>transformations <em>and</em> any child meshes</strong> as well.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> knot <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Mesh</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>TorusKnotGeometry</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">MeshNormalMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> knotBBox <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Box3</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Vector3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Vector3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nknotBBox<span class=\"token punctuation\">.</span><span class=\"token function\">setFromObject</span><span class=\"token punctuation\">(</span>knot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"instantiating_spheres","title":"Instantiating spheres","isH3":true,"content":"<p>Instantiating <strong><code>Sphere</code> objects</strong> is similar. We need to provide the sphere's center and radius, which can be added to the <code>boundingSphere</code> property available in <code>Geometry</code>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> knot <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Mesh</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>TorusKnotGeometry</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">MeshNormalMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> knotBSphere <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sphere</span><span class=\"token punctuation\">(</span>\n  knot<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span>\n  knot<span class=\"token punctuation\">.</span>geometry<span class=\"token punctuation\">.</span>boundingSphere<span class=\"token punctuation\">.</span>radius\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Unfortunately, there is no equivalent of <code>Box3.setFromObject</code> for Sphere instances. So if we apply transformations or change the position of the <code>Mesh</code>, we need to manually update the bounding sphere. For instance:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>knot<span class=\"token punctuation\">.</span>scale<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nknotBSphere<span class=\"token punctuation\">.</span>radius <span class=\"token operator\">=</span> knot<span class=\"token punctuation\">.</span>geometry<span class=\"token punctuation\">.</span>radius <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"intersection_tests","title":"Intersection tests","isH3":true,"content":"<h4 id=\"point_vs._box3_sphere\">Point vs. <code>Box3</code> / <code>Sphere</code></h4>\n<p>Both <code>Box3</code> and <code>Sphere</code> have a <strong><code>containsPoint</code></strong> method to do this test.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> point <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Vector3</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nknotBBox<span class=\"token punctuation\">.</span><span class=\"token function\">containsPoint</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"box3_vs._box3\"><code>Box3</code> vs. <code>Box3</code></h4>\n<p>The <strong><code>Box3.intersectsBox</code></strong> method is available for performing this test.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>knotBbox<span class=\"token punctuation\">.</span><span class=\"token function\">intersectsBox</span><span class=\"token punctuation\">(</span>otherBox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> This is different from the <code>Box3.containsBox</code> method, which checks whether the Box3 <em>fully</em> wraps another one.</p>\n</div>\n<h4 id=\"sphere_vs._sphere\"><code>Sphere</code> vs. <code>Sphere</code></h4>\n<p>In a similar fashion as before, there is a <strong><code>Sphere.intersectsSphere</code></strong> method to perform this test.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>knotBSphere<span class=\"token punctuation\">.</span><span class=\"token function\">intersectsSphere</span><span class=\"token punctuation\">(</span>otherSphere<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"sphere_vs._box3\"><code>Sphere</code> vs. <code>Box3</code></h4>\n<p>Unfortunately this test is not implemented in Three.js, but we can patch Sphere to implement a <a href=\"/en-US/docs/Games/Techniques/3D_collision_detection\">Sphere vs. AABB intersection</a> algorithm.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// expand THREE.js Sphere to support collision tests vs Box3</span>\n<span class=\"token comment\">// we are creating a vector outside the method scope to</span>\n<span class=\"token comment\">// avoid spawning a new instance of Vector3 on every check</span>\n\n<span class=\"token constant\">THREE</span><span class=\"token punctuation\">.</span>Sphere<span class=\"token punctuation\">.</span>__closest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Vector3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">THREE</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Sphere</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">intersectsBox</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">box</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// get box closest point to sphere center by clamping</span>\n  <span class=\"token constant\">THREE</span><span class=\"token punctuation\">.</span>Sphere<span class=\"token punctuation\">.</span>__closest<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token constant\">THREE</span><span class=\"token punctuation\">.</span>Sphere<span class=\"token punctuation\">.</span>__closest<span class=\"token punctuation\">.</span><span class=\"token function\">clamp</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">.</span>min<span class=\"token punctuation\">,</span> box<span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> distance <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">.</span><span class=\"token function\">distanceToSquared</span><span class=\"token punctuation\">(</span><span class=\"token constant\">THREE</span><span class=\"token punctuation\">.</span>Sphere<span class=\"token punctuation\">.</span>__closest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> distance <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"demos","title":"Demos","isH3":true,"content":"<p>We have prepared some <a href=\"https://mozdevs.github.io/gamedev-js-3d-aabb/\" class=\"external\" rel=\" noopener\">live demos</a> to demonstrate these techniques, with <a href=\"https://github.com/mozdevs/gamedev-js-3d-aabb\" class=\"external\" rel=\" noopener\">source code</a> to examine.</p>\n<ul>\n  <li><a href=\"https://mozdevs.github.io/gamedev-js-3d-aabb/raw_point.html\" class=\"external\" rel=\" noopener\">Point vs. Box and Sphere</a></li>\n  <li><a href=\"https://mozdevs.github.io/gamedev-js-3d-aabb/raw_box.html\" class=\"external\" rel=\" noopener\">Box vs. Box and Sphere</a></li>\n  <li><a href=\"https://mozdevs.github.io/gamedev-js-3d-aabb/raw_sphere.html\" class=\"external\" rel=\" noopener\">Sphere vs. Box and Sphere</a></li>\n</ul>\n<p>\n  <img src=\"/en-US/docs/Games/Techniques/3D_collision_detection/Bounding_volume_collision_detection_with_THREE.js/screen_shot_2015-10-20_at_15.19.16.png\" alt=\"A knot object, a large sphere object and a small sphere object in 3-D space. Three vectors are drawn on the small sphere. The vectors point in the directions of the three axes that define the space. Text at the bottom reads: Drag the ball around.\" width=\"512\" height=\"512\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"using_boxhelper","title":"Using <code>BoxHelper</code>","isH3":false,"content":"<p>As an alternative to using raw <code>Box3</code> and <code>Sphere</code> objects, Three.js has a useful object to make handling <strong>bounding boxes easier: <a href=\"https://threejs.org/docs/#api/helpers/BoxHelper\" class=\"external\" rel=\" noopener\"><code>BoxHelper</code></a></strong> (previously <code>BoundingBoxHelper</code>, which has been deprecated). This helper takes a <code>Mesh</code> and calculates a bounding box volume for it (including its child meshes). This results in a new box <code>Mesh</code> representing the bounding box, which shows the bounding box's shape, and can be passed to the previously seen <code>setFromObject</code> method in order to have a bounding box matching the <code>Mesh</code>.</p>\n<p><code>BoxHelper</code> is the <strong>recommended</strong> way to handle 3D collisions with bounding volumes in Three.js. You will miss sphere tests, but the tradeoffs are well worth it.</p>\n<p>The advantages of using this helper are:</p>\n<ul>\n  <li>It has an <code>update()</code> method that will <strong>resize</strong> its bounding box Mesh if the linked Mesh rotates or changes its dimensions, and update its <strong>position</strong>.</li>\n  <li>It <strong>takes into account the child meshes</strong> when computing the size of the bounding box, so the original mesh and all its children are wrapped.</li>\n  <li>We can easily debug collisions by <strong>rendering</strong> the <code>Mesh</code>es that <code>BoxHelper</code> creates. By default they are created with a <code>LineBasicMaterial</code> material (a three.js material for drawing wireframe-style geometries).</li>\n</ul>\n<p>The main disadvantage is that it <strong>only creates box bounding volumes</strong>, so if you need spheres vs AABB tests you need to create your own <code>Sphere</code> objects.</p>\n<p>To use it, we need to create a new <code>BoxHelper</code> instance and supply the geometry and — optionally — a color that will be used for the wireframe material. We also need to add the newly created object to the <code>three.js</code> scene in order to render it. We assume our scene variable to be called <code>scene</code>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> knot <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Mesh</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>TorusKnotGeometry</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>MeshNormalMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> knotBoxHelper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>BoxHelper</span><span class=\"token punctuation\">(</span>knot<span class=\"token punctuation\">,</span> <span class=\"token number\">0x00ff00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nscene<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>knotBoxHelper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>In order to also have our actual <code>Box3</code> bounding box, we create a new <code>Box3</code> object and make it assume the <code>BoxHelper</code>'s shape and position.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> box3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Box3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbox3<span class=\"token punctuation\">.</span><span class=\"token function\">setFromObject</span><span class=\"token punctuation\">(</span>knotBoxHelper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>If we change the <code>Mesh</code> position, rotation, scale, etc. we need to call the <code>update()</code> method so the <code>BoxHelper</code> instance matches its linked <code>Mesh</code>. We also need to call <code>setFromObject</code> again in order to make the <code>Box3</code> follow the <code>Mesh</code>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>knot<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nknot<span class=\"token punctuation\">.</span>rotation<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// update the bounding box so it stills wraps the knot</span>\nknotBoxHelper<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbox3<span class=\"token punctuation\">.</span><span class=\"token function\">setFromObject</span><span class=\"token punctuation\">(</span>knotBoxHelper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Performing <strong>collision tests</strong> is done in the same way as explained in the above section — we use our Box3 object in the same way as described above.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// box vs box</span>\nbox3<span class=\"token punctuation\">.</span><span class=\"token function\">intersectsBox</span><span class=\"token punctuation\">(</span>otherBox3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// box vs point</span>\nbox3<span class=\"token punctuation\">.</span><span class=\"token function\">containsPoint</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>","titleAsText":"Using BoxHelper"}},{"type":"prose","value":{"id":"demos_2","title":"Demos","isH3":true,"content":"<p>There are <strong>two demos</strong> you can take a look at on our <a href=\"https://mozdevs.github.io/gamedev-js-3d-aabb/\" class=\"external\" rel=\" noopener\">live demos page</a>. The <a href=\"https://mozdevs.github.io/gamedev-js-3d-aabb/api_point.html\" class=\"external\" rel=\" noopener\">first one</a> showcases point vs. box collisions using <code>BoxHelper</code>. The <a href=\"https://mozdevs.github.io/gamedev-js-3d-aabb/api_box.html\" class=\"external\" rel=\" noopener\">second one</a> performs box vs. box tests.</p>\n<p>\n  <img src=\"/en-US/docs/Games/Techniques/3D_collision_detection/Bounding_volume_collision_detection_with_THREE.js/screen_shot_2015-10-19_at_12.10.06.png\" alt=\"A knot object, a sphere object and a cube object in 3-D space. The knot and the sphere are encompassed by a virtual bounding box. The cube is intersecting the bounding box of the sphere. Text at the bottom reads: Drag the cube around. Press Esc to toggle B-Boxes.\" width=\"512\" height=\"512\" loading=\"lazy\">\n</p>"}}],"toc":[{"text":"Using <code>Box3</code> and <code>Sphere</code>","id":"using_box3_and_sphere"},{"text":"Using <code>BoxHelper</code>","id":"using_boxhelper"}],"summary":"This article shows how to implement collision detection between bounding boxes and spheres using the Three.js library. It is assumed that before reading this you have read our 3D collision detection introductory article first, and have basic knowledge about Three.js.","popularity":0.0002,"modified":"2022-09-06T03:03:02.000Z","other_translations":[{"title":"THREE.js によるバウンディングボリューム衝突検出","locale":"ja","native":"日本語"}],"source":{"folder":"en-us/games/techniques/3d_collision_detection/bounding_volume_collision_detection_with_three.js","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/games/techniques/3d_collision_detection/bounding_volume_collision_detection_with_three.js/index.md","last_commit_url":"https://github.com/mdn/content/commit/0eaa93a518e47f488c97bd7cc3d11c5036f5e918","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Games","title":"Game development"},{"uri":"/en-US/docs/Games/Techniques","title":"Techniques for game development"},{"uri":"/en-US/docs/Games/Techniques/3D_collision_detection","title":"3D collision detection"},{"uri":"/en-US/docs/Games/Techniques/3D_collision_detection/Bounding_volume_collision_detection_with_THREE.js","title":"Bounding volume collision detection with THREE.js"}],"pageTitle":"Bounding volume collision detection with THREE.js - Game development | MDN","noIndexing":false}}