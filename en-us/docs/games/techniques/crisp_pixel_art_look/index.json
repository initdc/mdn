{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Crisp pixel art look with image-rendering","mdn_url":"/en-US/docs/Games/Techniques/Crisp_pixel_art_look","locale":"en-US","native":"English (US)","sidebarHTML":"\n  <ol>\n    <li class=\"toggle\">\n        <details>\n            <summary>Introduction</summary>\n            <ol>\n              <li><a href=\"/en-US/docs/Games/Introduction\">Introduction</a></li>\n              <li><a href=\"/en-US/docs/Games/Anatomy\">Anatomy</a></li>\n              <li><a href=\"/en-US/docs/Games/Examples\">Examples</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>APIs for game development</summary>\n            <ol>\n              <li><a href=\"/en-US/docs/Web/API/Canvas_API\">Canvas</a></li>\n              <li><a href=\"/en-US/docs/Web/CSS\">CSS</a></li>\n              <li><a href=\"/en-US/docs/Web/API/Fullscreen_API\">Full screen</a></li>\n              <li><a href=\"/en-US/docs/Web/API/Gamepad_API\">Gamepad</a></li>\n              <li><a href=\"/en-US/docs/Web/API/IndexedDB_API\">IndexedDB</a></li>\n              <li><a href=\"/en-US/docs/Web/JavaScript\">JavaScript</a></li>\n              <li><a href=\"/en-US/docs/Web/API/Pointer_Lock_API\">Pointer Lock</a></li>\n              <li><a href=\"/en-US/docs/Web/SVG\">SVG</a></li>\n              <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">Typed Arrays</a></li>\n              <li><a href=\"/en-US/docs/Web/API/Web_Audio_API\">Web Audio</a></li>\n              <li><a href=\"/en-US/docs/Web/API/WebGL_API\">WebGL</a></li>\n              <li><a href=\"/en-US/docs/Web/API/WebRTC_API\">WebRTC</a></li>\n              <li><a href=\"/en-US/docs/Web/API/WebSockets_API\">WebSockets</a></li>\n              <li><a href=\"/en-US/docs/Web/API/WebVR_API\">WebVR</a></li>\n              <li><a href=\"/en-US/docs/Web/API/Web_Workers_API\">Web Workers</a></li>\n              <li><a href=\"/en-US/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Techniques</summary>\n            <ol>\n              <li><a href=\"/en-US/docs/Games/Techniques/Async_scripts\">Using async scripts for asm.js</a></li>\n              <li><a href=\"/en-US/docs/Web/Apps/Developing/Optimizing_startup_performance\">Optimizing startup performance</a></li>\n              <li><a href=\"/en-US/docs/Games/Techniques/WebRTC_data_channels\">Using WebRTC peer-to-peer data channels</a></li>\n              <li><a href=\"/en-US/docs/Games/Techniques/Efficient_animation_for_web_games\">Efficient animation for web games</a></li>\n              <li><a href=\"/en-US/docs/Games/Techniques/Audio_for_Web_Games\">Audio for Web Games</a></li>\n              <li><a href=\"/en-US/docs/Games/Techniques/2D_collision_detection\">2D collision detection</a></li>\n              <li><a href=\"/en-US/docs/Games/Techniques/Tilemaps\">Tiles and tilemaps overview</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>3D games on the Web</summary>\n            <ol>\n              <li><a href=\"/en-US/docs/Games/Techniques/3D_on_the_web\">3D games on the Web overview</a></li>\n              <li><a href=\"/en-US/docs/Games/Techniques/3D_on_the_web/Basic_theory\">Explaining basic 3D theory</a></li>\n              <li><a href=\"/en-US/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_A-Frame\">Building up a basic demo with A-Frame</a></li>\n              <li><a href=\"/en-US/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_Babylon.js\">Building up a basic demo with Babylon.js</a></li>\n              <li><a href=\"/en-US/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_PlayCanvas\">Building up a basic demo with PlayCanvas</a></li>\n              <li><a href=\"/en-US/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_Three.js\">Building up a basic demo with Three.js</a></li>\n              <li><a href=\"/en-US/docs/Games/Techniques/3D_on_the_web/WebVR\">WebVR</a></li>\n              <li><a href=\"/en-US/docs/Games/Techniques/3D_collision_detection\">3D collision detection</a></li>\n              <li><a href=\"/en-US/docs/Games/Techniques/3D_collision_detection/Bounding_volume_collision_detection_with_THREE.js\">Bounding volume collision detection with THREE.js</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Implementing game control mechanisms</summary>\n            <ol>\n              <li><a href=\"/en-US/docs/Games/Techniques/Control_mechanisms\">Control mechanisms</a></li>\n              <li><a href=\"/en-US/docs/Games/Techniques/Control_mechanisms/Mobile_touch\">Mobile touch</a></li>\n              <li><a href=\"/en-US/docs/Games/Techniques/Control_mechanisms/Desktop_with_mouse_and_keyboard\">Desktop with mouse and keyboard</a></li>\n              <li><a href=\"/en-US/docs/Games/Techniques/Control_mechanisms/Desktop_with_gamepad\">Desktop with gamepad</a></li>\n              <li><a href=\"/en-US/docs/Games/Techniques/Control_mechanisms/Other\">Other</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Tutorials</summary>\n            <ol>\n              <li><a href=\"/en-US/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript\">2D breakout game using pure JavaScript</a></li>\n              <li><a href=\"/en-US/docs/Games/Tutorials/2D_breakout_game_Phaser\">2D breakout game using Phaser</a></li>\n              <li><a href=\"/en-US/docs/Games/Tutorials/HTML5_Gamedev_Phaser_Device_Orientation\">2D maze_game with device orientation</a></li>\n              <li><a href=\"https://mozdevs.github.io/html5-games-workshop/en/guides/platformer/start-here/\">2D platform game using Phaser</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Publishing games</summary>\n            <ol>\n              <li><a href=\"/en-US/docs/Games/Publishing_games\">Publishing games overview</a></li>\n              <li><a href=\"/en-US/docs/Games/Publishing_games/Game_distribution\">Game distribution</a></li>\n              <li><a href=\"/en-US/docs/Games/Publishing_games/Game_promotion\">Game promotion</a></li>\n              <li><a href=\"/en-US/docs/Games/Publishing_games/Game_monetization\">Game monetization</a></li>\n            </ol>\n        </details>\n    </li>\n  </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>This article discusses a useful technique for giving your canvas/WebGL games a crisp pixel art look, even on high definition monitors.</p>"}},{"type":"prose","value":{"id":"the_concept","title":"The concept","isH3":false,"content":"<p>Retro <a href=\"https://en.wikipedia.org/wiki/Pixel_art\" class=\"external\" rel=\" noopener\">pixel art</a> aesthetics are getting popular, especially in <a href=\"https://en.wikipedia.org/wiki/Indie_game\" class=\"external\" rel=\" noopener\">indie games</a> or <a href=\"https://en.wikipedia.org/wiki/Game_jam\" class=\"external\" rel=\" noopener\">game jam</a> entries. But since today's screens render content at high resolutions, there is a problem with making sure the pixel art does not look blurry. Developers have been manually scaling up graphics so they are shown with blocks that represent pixels. Two downsides to this method are larger file sizes and <a href=\"https://en.wikipedia.org/wiki/Compression_artifact\" class=\"external\" rel=\" noopener\">compression artifacts</a>.</p>\n<table class=\"standard-table\">\n  <tbody>\n    <tr>\n      <td>\n        <img alt=\"small pixelated man\" src=\"/en-US/docs/Games/Techniques/Crisp_pixel_art_look/technique_original.png\" width=\"12\" height=\"34\" loading=\"lazy\">\n      </td>\n      <td>\n        <img alt=\"small pixelated man\" src=\"/en-US/docs/Games/Techniques/Crisp_pixel_art_look/technique_original.png\" width=\"12\" height=\"34\" loading=\"lazy\">\n      </td>\n      <td>\n        <img alt=\"larger pixelated man\" src=\"/en-US/docs/Games/Techniques/Crisp_pixel_art_look/technique_4x.png\" width=\"48\" height=\"136\" loading=\"lazy\">\n      </td>\n    </tr>\n    <tr>\n      <td>original size</td>\n      <td>4x size</td>\n      <td>4x size (scaled with an image editor)</td>\n    </tr>\n    <tr>\n      <td>none</td>\n      <td>vendor's algorithm</td>\n      <td><a href=\"https://en.wikipedia.org/wiki/Nearest-neighbor_interpolation\" class=\"external\" rel=\" noopener\">nearest-neighbor algorithm</a></td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"a_css-based_solution","title":"A CSS-based solution","isH3":false,"content":"<p>The good news is that you can use CSS to automatically do the up-scaling, which not only solves the blur problem, but also allows you to use the images in their original, smaller size, thus saving download time. Also, some game techniques require algorithms that analyze images, which also benefit from working with smaller images.</p>\n<p>The CSS property to achieve this scaling is <a href=\"/en-US/docs/Web/CSS/image-rendering\"><code>image-rendering</code></a>. It is still experimental, but there is partial support in most browsers. The steps to achieve this effect are:</p>\n<ul>\n  <li>Create a <a href=\"/en-US/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a> element and set its <code>width</code> and <code>height</code> attributes to the original, smaller resolution.</li>\n  <li>Set its CSS <a href=\"/en-US/docs/Web/CSS/width\"><code>width</code></a> and <a href=\"/en-US/docs/Web/CSS/height\"><code>height</code></a> properties to be 2x or 4x the value of the HTML <code>width</code> and <code>height</code>. If the canvas was created with a 128 pixel width, for example, we would set the CSS <code>width</code> to <code>512px</code> if we wanted a 4x scale.</li>\n  <li>Set the <a href=\"/en-US/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a> element's <code>image-rendering</code> CSS property to some value that does not make the image blurry. Either <code>crisp-edges</code> or <code>pixelated</code> will work. Check out the <a href=\"/en-US/docs/Web/CSS/image-rendering\"><code>image-rendering</code></a> article for more information on the differences between these values, and which prefixes to use depending on the browser.</li>\n</ul>"}},{"type":"prose","value":{"id":"an_example","title":"An example","isH3":false,"content":"<p>Let's have a look at an example. The original image we want to upscale looks like this:</p>\n<p>\n  <img src=\"/en-US/docs/Games/Techniques/Crisp_pixel_art_look/cat.png\" alt=\"Pixelated night scenery of a cat on the edge off a cliff with little hearts above his head, behind him a big full moon. With a black background, white text is displayed at the bottom of the image saying: in love with the moon.\" width=\"128\" height=\"128\" loading=\"lazy\">\n</p>\n<p>Here's some HTML to create a simple canvas:</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>canvas</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>game<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>128<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>128<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>canvas</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>CSS to size the canvas and render a crisp image:</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">canvas</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 512px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 512px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">image-rendering</span><span class=\"token punctuation\">:</span> -moz-crisp-edges<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">image-rendering</span><span class=\"token punctuation\">:</span> -webkit-crisp-edges<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">image-rendering</span><span class=\"token punctuation\">:</span> pixelated<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">image-rendering</span><span class=\"token punctuation\">:</span> crisp-edges<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>And some JavaScript to set up the canvas and load the image:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Get canvas context</span>\n<span class=\"token keyword\">const</span> ctx <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"game\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Load image</span>\n<span class=\"token keyword\">const</span> image <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nimage<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Draw the image into the canvas</span>\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nimage<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">\"cat.png\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>This code used together produces the following result:</p><iframe class=\"sample-code-frame\" title=\"An example sample\" id=\"frame_an_example\" width=\"100%\" height=\"520\" src=\"https://yari-demos.prod.mdn.mozit.cloud/en-US/docs/Games/Techniques/Crisp_pixel_art_look/_sample_.an_example.html\" loading=\"lazy\"></iframe>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> You can check out the <a href=\"https://github.com/belen-albeza/retro-canvas\" class=\"external\" rel=\" noopener\">original code on GitHub</a> (<a href=\"https://belen-albeza.github.io/retro-canvas/\" class=\"external\" rel=\" noopener\">and a live example</a>.)</p>\n</div>"}}],"toc":[{"text":"The concept","id":"the_concept"},{"text":"A CSS-based solution","id":"a_css-based_solution"},{"text":"An example","id":"an_example"}],"summary":"This article discusses a useful technique for giving your canvas/WebGL games a crisp pixel art look, even on high definition monitors.","popularity":0.0008,"modified":"2022-09-06T03:06:33.000Z","source":{"folder":"en-us/games/techniques/crisp_pixel_art_look","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/games/techniques/crisp_pixel_art_look/index.md","last_commit_url":"https://github.com/mdn/content/commit/5dd9f7248015e06f37ff64da2ec19c0ba8d92b7f","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Games","title":"Game development"},{"uri":"/en-US/docs/Games/Techniques","title":"Techniques for game development"},{"uri":"/en-US/docs/Games/Techniques/Crisp_pixel_art_look","title":"Crisp pixel art look with image-rendering"}],"pageTitle":"Crisp pixel art look with image-rendering - Game development | MDN","noIndexing":false}}