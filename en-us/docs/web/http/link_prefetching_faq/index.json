{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Link prefetching FAQ","mdn_url":"/en-US/docs/Web/HTTP/Link_prefetching_FAQ","locale":"en-US","native":"English (US)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Link prefetching is a browser mechanism, which utilizes browser idle time to download or <em>prefetch</em> documents that the user might visit in the near future. A web page provides a set of prefetching hints to the browser, and after the browser is finished loading the page, it begins silently prefetching specified documents and stores them in its cache. When the user visits one of the prefetched documents, it can be served up quickly out of the browser's cache.</p>"}},{"type":"prose","value":{"id":"what_are_the_prefetching_hints","title":"What are the prefetching hints?","isH3":true,"content":"<p>The browser looks for either an HTML <a href=\"/en-US/docs/Web/HTML/Element/link\"><code>&lt;link&gt;</code></a> or an <a href=\"/en-US/docs/Web/HTTP/Headers\">HTTP <code>Link:</code> header</a> with a relation type of either <code>next</code> or <code>prefetch</code>. An example using the <code>link</code> tag follows:</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>prefetch<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/images/big.jpeg<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n</code></pre></div>\n<p>The same prefetching hint using an HTTP <code>Link:</code> header:</p>\n<div class=\"code-example\"><pre class=\"brush: http notranslate\"><code><span class=\"token header\"><span class=\"token header-name keyword\">Link</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">&lt;/images/big.jpeg&gt;; rel=prefetch</span></span>\n</code></pre></div>\n<p>The format for the <code>Link:</code> header is described in <a href=\"https://datatracker.ietf.org/doc/html/rfc5988\" class=\"external\" rel=\" noopener\">RFC 5988</a> section 5.</p>\n<p>The browser observes all of these hints and queues up each unique request to be prefetched when the browser is idle. There can be multiple hints per page, as it might make sense to prefetch multiple documents. For example, the next document might contain several large images.</p>\n<p>Some more examples follow:</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span>\n  <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>prefetch alternate stylesheet<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Designed for Mozilla<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mozspecific.css<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>next<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2.html<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"are_anchor_a_tags_prefetched","title":"Are anchor (&lt;a&gt;) tags prefetched?","isH3":true,"content":"<p>No, only <code>&lt;link&gt;</code> tags with a relation type of <code>next</code> or <code>prefetch</code> are prefetched. However, if there is sufficient interest, we may expand link prefetching support to include prefetching &lt;a&gt; tags, which include a relation type of <code>next</code> or <code>prefetch</code> in the future. Doing so would probably help content providers avoid the problem of stale prefetching links.</p>","titleAsText":"Are anchor (<a>) tags prefetched?"}},{"type":"prose","value":{"id":"is_link_prefetching_standards_compliant","title":"Is link prefetching standards compliant?","isH3":true,"content":"<p>Yes, link prefetching as outlined in this document does not violate any existing web standards. In fact, the HTML 4.01 specification explicitly allows for the definition of new link relation types (<a href=\"https://www.w3.org/TR/html4/types.html#type-links\" class=\"external\" rel=\" noopener\">see Section 6.12: Link types</a>). However, the exact mechanism employed by Mozilla is not yet standardized. An Internet-Draft is in the works.</p>\n<p>Standardization of this technique is part of the scope of HTML 5, see the current working draft, <a href=\"https://html.spec.whatwg.org/#link-type-prefetch\" class=\"external\" rel=\" noopener\">section §5.11.3.13. Link type \"prefetch\"</a> .</p>"}},{"type":"prose","value":{"id":"how_is_browser_idle_time_determined","title":"How is browser idle time determined?","isH3":true,"content":"<p>In the current implementation (Mozilla 1.2), idle time is determined using the <code>nsIWebProgressListener</code> API. We attach a listener to the toplevel <code>nsIWebProgress</code> object (\"@mozilla.org/docloaderservice;1\"). From this, we receive document start &amp; stop notifications, and we approximate idle time as the period between the last document stop and the next document start. The last document stop notification occurs roughly when the onLoad handler would fire for the toplevel document. This is when we kick off prefetch requests. If a subframe contains prefetching hints, prefetching will not begin until the top-most frame and all its \"child\" frames finish loading.</p>"}},{"type":"prose","value":{"id":"what_happens_if_i_click_on_a_link_while_something_is_being_prefetched","title":"What happens if I click on a link while something is being prefetched?","isH3":true,"content":"<p>When the user clicks on a link, or initiates any kind of page load, link prefetching will stop and any prefetch hints will be discarded. If a prefetched document is partially downloaded, then the partial document will still be stored in the cache provided the server sent an \"Accept-Ranges: bytes\" response header. This header is typically generated by webservers when serving up static content. When the user visits a prefetched document for real, the remaining portion of the document will be fetched using a HTTP byte-range request.</p>"}},{"type":"prose","value":{"id":"what_if_im_downloading_something_in_the_background_will_link_prefetching_compete_for_bandwidth","title":"What if I'm downloading something in the background? Will link prefetching compete for bandwidth?","isH3":true,"content":"<p>Yes and no. If you are downloading something using Mozilla, link prefetching will be delayed until any background downloads complete. For example, if you load a bookmark group (which opens several tabs), any prefetch requests initiated by one of the bookmarked pages will not begin until all of the tabs finish loading. If you are using another application which uses the network, link prefetching in Mozilla may compete for bandwidth with the other application. This is a problem that we hope to address in the future by leveraging operating system services to monitor network idle time.</p>"}},{"type":"prose","value":{"id":"are_there_any_restrictions_on_what_is_prefetched","title":"Are there any restrictions on what is prefetched?","isH3":true,"content":"<p>Yes, only <code>http://</code> and <code>https://</code> URLs can be prefetched. Other protocols (such as FTP) do not provide rich enough support for client side caching.</p>"}},{"type":"prose","value":{"id":"will_mozilla_prefetch_documents_from_a_different_host","title":"Will Mozilla prefetch documents from a different host?","isH3":true,"content":"<p>Yes. There is no same-origin restriction for link prefetching. Limiting prefetching to only URLs from the same server would not offer any increased browser security.</p>"}},{"type":"prose","value":{"id":"do_prefetched_requests_contain_a_referer_header","title":"Do prefetched requests contain a Referer: header?","isH3":true,"content":"<p>Yes, prefetched requests include a HTTP <code>Referer:</code> header indicating the document from which the prefetching hint was extracted.</p>\n<p>This may impact referrer tracking that is commonly used on many sites. For this reason, link prefetching may not be appropriate for all content. However, it is possible to instruct Mozilla to validate a prefetched document when the user follows a href to the prefetched document by specifying the <code>Cache-control: must-revalidate</code> HTTP response header. This header enables caching, but requires an <code>If-Modified-Since</code> or <code>If-None-Match</code> validation request before the serving the document out of the browser's cache.</p>"}},{"type":"prose","value":{"id":"as_a_server_admin_can_i_distinguish_prefetch_requests_from_normal_requests","title":"As a server admin, can I distinguish prefetch requests from normal requests?","isH3":true,"content":"<p>Yes, we send the following header along with each prefetch request:</p>\n<div class=\"code-example\"><pre class=\"brush: http notranslate\"><code><span class=\"token header\"><span class=\"token header-name keyword\">X-moz</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">prefetch</span></span>\n</code></pre></div>\n<p>Of course, this request header is not at all standardized, and it may change in future Mozilla releases. Chrome uses \"X-Purpose: prefetch\" or \"Purpose: prefetch\" <a href=\"https://bugs.webkit.org/show_bug.cgi?id=46529\" class=\"external\" rel=\" noopener\">header</a>.</p>"}},{"type":"prose","value":{"id":"is_there_a_preference_to_disable_link_prefetching","title":"Is there a preference to disable link prefetching?","isH3":true,"content":"<p>Yes, there is a hidden preference that you can set to disable link prefetching. Add this line to your prefs.js file located in your profile directory (or make the appropriate change via <code>about:config</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">user_pref</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"network.prefetch-next\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>However, the theory is that if link prefetching needs to be disabled then there must be something wrong with the implementation. We would rather improve the implementation if it does not work correctly, than expect users to locate and tweak some obscure preference.</p>"}},{"type":"prose","value":{"id":"what_about_folks_who_pay-per-byte_for_network_bandwidth","title":"What about folks who pay-per-byte for network bandwidth?","isH3":true,"content":"<p>Basically, there are two ways of looking at this issue: websites can already cause things to be silently downloaded using JS/DOM hacks. Prefetching is a browser feature; users should be able to disable it easily.</p>\n<p>It is important that websites adopt <code>&lt;link&gt;</code> tag based prefetching instead of trying to roll-in silent downloading using various JS/DOM hacks. The <code>&lt;link&gt;</code> tag gives the browser the ability to know what sites are up to, and we can use this information to better prioritize document prefetching. The user preference to disable <code>&lt;link&gt;</code> tag prefetching may encourage websites to stick with JS/DOM hacks, and that would not be good for users. This is one reason why prefetching is enabled by default.</p>"}},{"type":"prose","value":{"id":"which_browsers_support_link_prefetching","title":"Which browsers support link prefetching?","isH3":true,"content":"<p>Browsers based on Mozilla 1.2 (or later), as well as browsers based on Mozilla 1.0.2 (or later), support prefetching. This includes Firefox and Netscape 7.01+. Camino builds as of March 2003 are based on Mozilla 1.0.1, and therefore do not support prefetching. <a href=\"https://browserspy.dk/prefetch.php\" class=\"external\" rel=\" noopener\">Test</a> your browser to see if it supports Link Prefetching.</p>"}},{"type":"prose","value":{"id":"privacy_implications","title":"Privacy implications","isH3":true,"content":"<p>Along with the referral and URL-following implications already mentioned above, prefetching will generally cause the cookies of the prefetched site to be accessed. (For example, if you google amazon, the Google results page will prefetch <code>www.amazon.com</code>, causing amazon cookies to be sent back and forth. You can block 3rd party cookies in Firefox, see <a href=\"https://support.mozilla.org/en-US/kb/third-party-cookies-firefox-tracking-protection\" class=\"external\" rel=\" noopener\">Disabling third party cookies</a>.)</p>\n<h4 id=\"see_also\">See also</h4>\n<p><a href=\"https://www.edochan.com/programming/pf.htm\" class=\"external\" rel=\" noopener\">Prefetching Hints</a></p>"}}],"toc":[],"summary":"Link prefetching is a browser mechanism, which utilizes browser idle time to download or prefetch documents that the user might visit in the near future. A web page provides a set of prefetching hints to the browser, and after the browser is finished loading the page, it begins silently prefetching specified documents and stores them in its cache. When the user visits one of the prefetched documents, it can be served up quickly out of the browser's cache.","popularity":0.0026,"modified":"2022-09-14T09:06:12.000Z","other_translations":[{"title":"FAQ sur le préchargement des liens","locale":"fr","native":"Français"},{"title":"リンク先読みの FAQ","locale":"ja","native":"日本語"},{"title":"Link prefetching FAQ","locale":"zh-CN","native":"中文 (简体)"},{"title":"預先取回連結 (Prefetch) 問答集","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"en-us/web/http/link_prefetching_faq","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/http/link_prefetching_faq/index.md","last_commit_url":"https://github.com/mdn/content/commit/8e1f45b8c0a3671f6e3de43c0764ad610aa345dd","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/HTTP","title":"HTTP"},{"uri":"/en-US/docs/Web/HTTP/Link_prefetching_FAQ","title":"Link prefetching FAQ"}],"pageTitle":"Link prefetching FAQ - HTTP | MDN","noIndexing":false}}