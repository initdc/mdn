{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Same-origin policy","mdn_url":"/en-US/docs/Web/Security/Same-origin_policy","locale":"en-US","native":"English (US)","sidebarHTML":"\n<ol><li><a href=\"/en-US/docs/Web/Security/Certificate_Transparency\">Certificate Transparency</a></li><li><a href=\"/en-US/docs/Web/Security/User_activation\">Features gated by user activation</a></li><li><a href=\"/en-US/docs/Web/Security/Firefox_Security_Guidelines\">Firefox Security Guidelines</a></li><li><a href=\"/en-US/docs/Web/Security/Insecure_passwords\">Insecure passwords</a></li><li><a href=\"/en-US/docs/Web/Security/Mixed_content\">Mixed content</a><ol><li><a href=\"/en-US/docs/Web/Security/Mixed_content\">Mixed content</a></li><li><a href=\"/en-US/docs/Web/Security/Mixed_content/How_to_fix_website_with_mixed_content\">How to fix a website with blocked mixed content</a></li></ol></li><li><a href=\"/en-US/docs/Web/Security/Referer_header:_privacy_and_security_concerns\">Referer header: privacy and security concerns</a></li><li><a href=\"/en-US/docs/Web/Security/Same-origin_policy\">Same-origin policy</a></li><li><a href=\"/en-US/docs/Web/Security/Secure_Contexts\">Secure contexts</a><ol><li><a href=\"/en-US/docs/Web/Security/Secure_Contexts\">Secure contexts</a></li><li><a href=\"/en-US/docs/Web/Security/Secure_Contexts/features_restricted_to_secure_contexts\">Features restricted to secure contexts</a></li></ol></li><li><a href=\"/en-US/docs/Web/Security/Securing_your_site\">Securing your site</a><ol><li><a href=\"/en-US/docs/Web/Security/Securing_your_site\">Securing your site</a></li><li><a href=\"/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion\">How to turn off form autocompletion</a></li></ol></li><li><a href=\"/en-US/docs/Web/Security/Subdomain_takeovers\">Subdomain takeovers</a></li><li><a href=\"/en-US/docs/Web/Security/Subresource_Integrity\">Subresource Integrity</a></li><li><a href=\"/en-US/docs/Web/Security/Transport_Layer_Security\">Transport Layer Security</a></li><li><a href=\"/en-US/docs/Web/Security/Types_of_attacks\">Types of attacks</a></li><li><a href=\"/en-US/docs/Web/Security/Weak_Signature_Algorithm\">Weak signature algorithms</a></li></ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong>same-origin policy</strong> is a critical security mechanism that restricts how a document or script loaded by one <a href=\"/en-US/docs/Glossary/Origin\">origin</a> can interact with a resource from another origin.</p>\n<p>It helps isolate potentially malicious documents, reducing possible attack vectors. For example, it prevents a malicious website on the Internet from running JS in a browser to read data from a third-party webmail service (which the user is signed into) or a company intranet (which is protected from direct access by the attacker by not having a public IP address) and relaying that data to the attacker.</p>"}},{"type":"prose","value":{"id":"definition_of_an_origin","title":"Definition of an origin","isH3":false,"content":"<p>Two URLs have the <em>same origin</em> if the <a href=\"/en-US/docs/Glossary/Protocol\">protocol</a>, <a href=\"/en-US/docs/Glossary/Port\">port</a> (if specified), and <a href=\"/en-US/docs/Glossary/Host\">host</a> are the same for both. You may see this referenced as the \"scheme/host/port tuple\", or just \"tuple\". (A \"tuple\" is a set of items that together comprise a whole — a generic form for double/triple/quadruple/quintuple/etc.)</p>\n<p>The following table gives examples of origin comparisons with the URL <code>http://store.company.com/dir/page.html</code>:</p>\n<table>\n  <thead>\n    <tr>\n      <th>URL</th>\n      <th>Outcome</th>\n      <th>Reason</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>http://store.company.com/dir2/other.html</code></td>\n      <td>Same origin</td>\n      <td>Only the path differs</td>\n    </tr>\n    <tr>\n      <td><code>http://store.company.com/dir/inner/another.html</code></td>\n      <td>Same origin</td>\n      <td>Only the path differs</td>\n    </tr>\n    <tr>\n      <td><code>https://store.company.com/page.html</code></td>\n      <td>Failure</td>\n      <td>Different protocol</td>\n    </tr>\n    <tr>\n      <td><code>http://store.company.com:81/dir/page.html</code></td>\n      <td>Failure</td>\n      <td>Different port (<code>http://</code> is port 80 by default)</td>\n    </tr>\n    <tr>\n      <td><code>http://news.company.com/dir/page.html</code></td>\n      <td>Failure</td>\n      <td>Different host</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"inherited_origins","title":"Inherited origins","isH3":true,"content":"<p>Scripts executed from pages with an <code>about:blank</code> or <code>javascript:</code> URL inherit the origin of the document containing that URL, since these types of URLs do not contain information about an origin server.</p>\n<p>For example, <code>about:blank</code> is often used as a URL of new, empty popup windows into which the parent script writes content (e.g. via the <a href=\"/en-US/docs/Web/API/Window/open\"><code>Window.open()</code></a> mechanism). If this popup also contains JavaScript, that script would inherit the same origin as the script that created it.</p>\n<p><code>data:</code> URLs get a new, empty, security context.</p>"}},{"type":"prose","value":{"id":"exceptions_in_internet_explorer","title":"Exceptions in Internet Explorer","isH3":true,"content":"<p>Internet Explorer has two major exceptions to the same-origin policy:</p>\n<dl>\n  <dt id=\"trust_zones\">Trust Zones</dt>\n  <dd>\n    <p>If both domains are in the <em>highly trusted zone</em> (e.g. corporate intranet domains), then the same-origin limitations are not applied.</p>\n  </dd>\n  <dt id=\"port\">Port</dt>\n  <dd>\n    <p>IE doesn't include port into same-origin checks. Therefore, <code>https://company.com:81/index.html</code> and <code>https://company.com/index.html</code> are considered the same origin and no restrictions are applied.</p>\n  </dd>\n</dl>\n<p>These exceptions are nonstandard and unsupported in any other browser.</p>"}},{"type":"prose","value":{"id":"file_origins","title":"File origins","isH3":true,"content":"<p>\n  Modern browsers usually treat the origin of files loaded using the <code>file:///</code> schema as <em>opaque origins</em>.\n  What this means is that if a file includes other files from the same folder (say), they are not assumed to come from the same origin, and may trigger <a href=\"/en-US/docs/Glossary/CORS\">CORS</a> errors.\n</p>\n<p>Note that the <a href=\"https://url.spec.whatwg.org/#origin\" class=\"external\" rel=\" noopener\">URL specification</a> states that the origin of files is implementation-dependent, and some browsers may treat files in the same directory or subdirectory as same-origin even though this has <a href=\"https://www.mozilla.org/en-US/security/advisories/mfsa2019-21/#CVE-2019-11730\" class=\"external\" rel=\" noopener\">security implications</a>.</p>"}},{"type":"prose","value":{"id":"changing_origin","title":"Changing origin","isH3":false,"content":"<div class=\"notecard warning\" id=\"sect1\">\n  <p><strong>Warning:</strong> The approach described here (using the <a href=\"/en-US/docs/Web/API/Document/domain\"><code>document.domain</code></a> setter) is deprecated because it undermines the security protections provided by the same origin policy, and complicates the origin model in browsers, leading to interoperability problems and security bugs.</p>\n</div>\n<p>A page may change its own origin, with some limitations. A script can set the value of <a href=\"/en-US/docs/Web/API/Document/domain\"><code>document.domain</code></a> to its current domain or a superdomain of its current domain. If set to a superdomain of the current domain, the shorter superdomain is used for same-origin checks.</p>\n<p>For example, assume a script from the document at <code>http://store.company.com/dir/other.html</code> executes the following:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>document<span class=\"token punctuation\">.</span>domain <span class=\"token operator\">=</span> <span class=\"token string\">\"company.com\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Afterward, the page can pass the same-origin check with <code>http://company.com/dir/page.html</code> (assuming <code>http://company.com/dir/page.html</code> sets its <code>document.domain</code> to \"<code>company.com</code>\" to indicate that it wishes to allow that - see <a href=\"/en-US/docs/Web/API/Document/domain\"><code>document.domain</code></a> for more). However, <code>company.com</code> could <strong>not</strong> set <code>document.domain</code> to <code>othercompany.com</code>, since that is not a superdomain of <code>company.com</code>.</p>\n<p>The port number is checked separately by the browser. Any call to <code>document.domain</code>, including <code>document.domain = document.domain</code>, causes the port number to be overwritten with <code>null</code>. Therefore, one <strong>cannot</strong> make <code>company.com:8080</code> talk to <code>company.com</code> by only setting <code>document.domain = \"company.com\"</code> in the first. It has to be set in both so their port numbers are both <code>null</code>.</p>\n<p>The mechanism has some limitations. For example, it will throw a \"<code>SecurityError</code>\" <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a> if the <a href=\"/en-US/docs/Web/HTTP/Headers/Feature-Policy/document-domain\"><code>document-domain</code></a> <a href=\"/en-US/docs/Web/HTTP/Headers/Feature-Policy\"><code>Feature-Policy</code></a> is enabled or the document is in a sandboxed <a href=\"/en-US/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code></a>, and changing the origin in this way does not affect the origin checks used by many Web APIs (e.g. <a href=\"/en-US/docs/Web/API/Window/localStorage\"><code>localStorage</code></a>, <a href=\"/en-US/docs/Web/API/IndexedDB_API\"><code>indexedDB</code></a>, <a href=\"/en-US/docs/Web/API/BroadcastChannel\"><code>BroadcastChannel</code></a>, <a href=\"/en-US/docs/Web/API/SharedWorker\"><code>SharedWorker</code></a>). A more exhaustive list of failure cases can be found in <a href=\"/en-US/docs/Web/API/Document/domain#failures\">Document.domain &gt; Failures</a>.</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> When using <code>document.domain</code> to allow a subdomain to access its parent, you need to set <code>document.domain</code> to the <em>same value</em> in both the parent domain and the subdomain. This is necessary even if doing so is setting the parent domain back to its original value. Failure to do this may result in permission errors.</p>\n</div>"}},{"type":"prose","value":{"id":"cross-origin_network_access","title":"Cross-origin network access","isH3":false,"content":"<p>The same-origin policy controls interactions between two different origins, such as when you use <a href=\"/en-US/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a> or an <a href=\"/en-US/docs/Web/HTML/Element/img\"><code>&lt;img&gt;</code></a> element. These interactions are typically placed into three categories:</p>\n<ul>\n  <li>Cross-origin <em>writes</em> are typically allowed. Examples are links, redirects, and form submissions. Some HTTP requests require <a href=\"/en-US/docs/Web/HTTP/CORS#preflighted_requests\">preflight</a>.</li>\n  <li>Cross-origin <em>embedding</em> is typically allowed. (Examples are listed below.)</li>\n  <li>Cross-origin <em>reads</em> are typically disallowed, but read access is often leaked by embedding. For example, you can read the dimensions of an embedded image, the actions of an embedded script, or the <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=629094\" class=\"external\" rel=\" noopener\">availability of an embedded resource</a>.</li>\n</ul>\n<p>Here are some examples of resources which may be embedded cross-origin:</p>\n<ul>\n  <li>JavaScript with <code>&lt;script src=\"…\"&gt;&lt;/script&gt;</code>. Error details for syntax errors are only available for same-origin scripts.</li>\n  <li>CSS applied with <code>&lt;link rel=\"stylesheet\" href=\"…\"&gt;</code>. Due to the <a href=\"https://scarybeastsecurity.blogspot.com/2009/12/generic-cross-browser-cross-domain.html\" class=\"external\" rel=\" noopener\">relaxed syntax rules</a> of CSS, cross-origin CSS requires a correct <code>Content-Type</code> header. Restrictions vary by browser: <a href=\"https://docs.microsoft.com/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622939(v=vs.85)\" class=\"external\" rel=\" noopener\">Internet Explorer</a>, <a href=\"https://www.mozilla.org/en-US/security/advisories/mfsa2010-46/\" class=\"external\" rel=\" noopener\">Firefox</a>, <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=9877\" class=\"external\" rel=\" noopener\">Chrome</a>, <a href=\"https://support.apple.com/en-us/HT4070\" class=\"external\" rel=\" noopener\">Safari</a> (scroll down to CVE-2010-0051) and <a href=\"https://security.opera.com/cross-domain-data-theft-with-css-load-opera-security-advisories/\" class=\"external\" rel=\" noopener\">Opera</a>.</li>\n  <li>Images displayed by <a href=\"/en-US/docs/Web/HTML/Element/img\"><code>&lt;img&gt;</code></a>.</li>\n  <li>Media played by <a href=\"/en-US/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a> and <a href=\"/en-US/docs/Web/HTML/Element/audio\"><code>&lt;audio&gt;</code></a>.</li>\n  <li>External resources embedded with <a href=\"/en-US/docs/Web/HTML/Element/object\"><code>&lt;object&gt;</code></a> and <a href=\"/en-US/docs/Web/HTML/Element/embed\"><code>&lt;embed&gt;</code></a>.</li>\n  <li>Fonts applied with <a href=\"/en-US/docs/Web/CSS/@font-face\"><code>@font-face</code></a>. Some browsers allow cross-origin fonts, others require same-origin.</li>\n  <li>Anything embedded by <a href=\"/en-US/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code></a>. Sites can use the <a href=\"/en-US/docs/Web/HTTP/Headers/X-Frame-Options\"><code>X-Frame-Options</code></a> header to prevent cross-origin framing.</li>\n</ul>"}},{"type":"prose","value":{"id":"how_to_allow_cross-origin_access","title":"How to allow cross-origin access","isH3":true,"content":"<p>Use <a href=\"/en-US/docs/Web/HTTP/CORS\">CORS</a> to allow cross-origin access. CORS is a part of <a href=\"/en-US/docs/Glossary/HTTP\">HTTP</a> that lets servers specify any other hosts from which a browser should permit loading of content.</p>"}},{"type":"prose","value":{"id":"how_to_block_cross-origin_access","title":"How to block cross-origin access","isH3":true,"content":"<ul>\n  <li>To prevent cross-origin writes, check an unguessable token in the request — known as a <a href=\"https://owasp.org/www-community/attacks/csrf\" class=\"external\" rel=\" noopener\">Cross-Site Request Forgery (CSRF)</a> token. You must prevent cross-origin reads of pages that require this token.</li>\n  <li>To prevent cross-origin reads of a resource, ensure that it is not embeddable. It is often necessary to prevent embedding because embedding a resource always leaks some information about it.</li>\n  <li>To prevent cross-origin embeds, ensure that your resource cannot be interpreted as one of the embeddable formats listed above. Browsers may not respect the <code>Content-Type</code> header. For example, if you point a <code>&lt;script&gt;</code> tag at an HTML document, the browser will try to parse the HTML as JavaScript. When your resource is not an entry point to your site, you can also use a CSRF token to prevent embedding.</li>\n</ul>"}},{"type":"prose","value":{"id":"cross-origin_script_api_access","title":"Cross-origin script API access","isH3":false,"content":"<p>JavaScript APIs like <a href=\"/en-US/docs/Web/API/HTMLIFrameElement/contentWindow\" title=\"iframe.contentWindow\"><code>iframe.contentWindow</code></a>, <a href=\"/en-US/docs/Web/API/Window/parent\"><code>window.parent</code></a>, <a href=\"/en-US/docs/Web/API/Window/open\"><code>window.open</code></a>, and <a href=\"/en-US/docs/Web/API/Window/opener\"><code>window.opener</code></a> allow documents to directly reference each other. When two documents do not have the same origin, these references provide very limited access to <a href=\"/en-US/docs/Web/API/Window\"><code>Window</code></a> and <a href=\"/en-US/docs/Web/API/Location\"><code>Location</code></a> objects, as described in the next two sections.</p>\n<p>To communicate between documents from different origins, use <a href=\"/en-US/docs/Web/API/Window/postMessage\"><code>window.postMessage</code></a>.</p>\n<p>Specification: <a href=\"https://html.spec.whatwg.org/multipage/browsers.html#cross-origin-objects\" class=\"external\" rel=\" noopener\">HTML Living Standard § Cross-origin objects</a>.</p>"}},{"type":"prose","value":{"id":"window","title":"Window","isH3":true,"content":"<p>The following cross-origin access to these <code>Window</code> properties is allowed:</p>\n<table>\n  <thead>\n    <tr>\n      <th>Methods</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/API/Window/blur\"><code>window.blur</code></a></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/API/Window/close\"><code>window.close</code></a></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/API/Window/focus\"><code>window.focus</code></a></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/API/Window/postMessage\"><code>window.postMessage</code></a></td>\n    </tr>\n  </tbody>\n</table>\n<table>\n  <thead>\n    <tr>\n      <th>Attributes</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/API/Window/closed\"><code>window.closed</code></a></td>\n      <td>Read only.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/API/Window/frames\"><code>window.frames</code></a></td>\n      <td>Read only.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/API/Window/length\"><code>window.length</code></a></td>\n      <td>Read only.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/API/Window/location\"><code>window.location</code></a></td>\n      <td>Read/Write.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/API/Window/opener\"><code>window.opener</code></a></td>\n      <td>Read only.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/API/Window/parent\"><code>window.parent</code></a></td>\n      <td>Read only.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/API/Window/self\"><code>window.self</code></a></td>\n      <td>Read only.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/API/Window/top\"><code>window.top</code></a></td>\n      <td>Read only.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/API/Window/window\"><code>window.window</code></a></td>\n      <td>Read only.</td>\n    </tr>\n  </tbody>\n</table>\n<p>Some browsers allow access to more properties than the above.</p>"}},{"type":"prose","value":{"id":"location","title":"Location","isH3":true,"content":"<p>The following cross-origin access to <code>Location</code> properties is allowed:</p>\n<table>\n  <thead>\n    <tr>\n      <th>Methods</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/API/Location/replace\"><code>location.replace</code></a></td>\n    </tr>\n  </tbody>\n</table>\n<table>\n  <thead>\n    <tr>\n      <th>Attributes</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>URLUtils.href</code></a></td>\n      <td>Write-only.</td>\n    </tr>\n  </tbody>\n</table>\n<p>Some browsers allow access to more properties than the above.</p>"}},{"type":"prose","value":{"id":"cross-origin_data_storage_access","title":"Cross-origin data storage access","isH3":false,"content":"<p>Access to data stored in the browser such as <a href=\"/en-US/docs/Web/API/Web_Storage_API\">Web Storage</a> and <a href=\"/en-US/docs/Web/API/IndexedDB_API\">IndexedDB</a> are separated by origin. Each origin gets its own separate storage, and JavaScript in one origin cannot read from or write to the storage belonging to another origin.</p>\n<p><a href=\"/en-US/docs/Glossary/Cookie\">Cookies</a> use a separate definition of origins. A page can set a cookie for its own domain or any parent domain, as long as the parent domain is not a public suffix. Firefox and Chrome use the <a href=\"https://publicsuffix.org/\" class=\"external\" rel=\" noopener\">Public Suffix List</a> to determine if a domain is a public suffix. Internet Explorer uses its own internal method to determine if a domain is a public suffix. The browser will make a cookie available to the given domain including any sub-domains, no matter which protocol (HTTP/HTTPS) or port is used. When you set a cookie, you can limit its availability using the <code>Domain</code>, <code>Path</code>, <code>Secure</code>, and <code>HttpOnly</code> flags. When you read a cookie, you cannot see from where it was set. Even if you use only secure https connections, any cookie you see may have been set using an insecure connection.</p>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"https://www.w3.org/Security/wiki/Same_Origin_Policy\" class=\"external\" rel=\" noopener\">Same Origin Policy at W3C</a></li>\n  <li><a href=\"https://web.dev/same-origin-policy/\" class=\"external\" rel=\" noopener\">Same-origin policy at web.dev</a></li>\n  <li><a href=\"/en-US/docs/Web/HTTP/Headers/Cross-Origin-Resource-Policy\"><code>Cross-Origin-Resource-Policy</code></a></li>\n  <li><a href=\"/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy\"><code>Cross-Origin-Embedder-Policy</code></a></li>\n</ul>"}}],"toc":[{"text":"Definition of an origin","id":"definition_of_an_origin"},{"text":"Changing origin","id":"changing_origin"},{"text":"Cross-origin network access","id":"cross-origin_network_access"},{"text":"Cross-origin script API access","id":"cross-origin_script_api_access"},{"text":"Cross-origin data storage access","id":"cross-origin_data_storage_access"},{"text":"See also","id":"see_also"}],"summary":"The same-origin policy is a critical security mechanism that restricts how a document or script loaded by one origin can interact with a resource from another origin.","popularity":0.0149,"modified":"2022-09-20T02:49:59.000Z","other_translations":[{"title":"Política Same-origin","locale":"es","native":"Español"},{"title":"Same-origin policy","locale":"fr","native":"Français"},{"title":"同一オリジンポリシー","locale":"ja","native":"日本語"},{"title":"동일 출처 정책","locale":"ko","native":"한국어"},{"title":"Same-origin policy","locale":"ru","native":"Русский"},{"title":"浏览器的同源策略","locale":"zh-CN","native":"中文 (简体)"},{"title":"同源政策 (Same-origin policy)","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"en-us/web/security/same-origin_policy","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/security/same-origin_policy/index.md","last_commit_url":"https://github.com/mdn/content/commit/309b7e313af4aebde03f5825ec530db614e2bb16","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/Security","title":"Web security"},{"uri":"/en-US/docs/Web/Security/Same-origin_policy","title":"Same-origin policy"}],"pageTitle":"Same-origin policy - Web security | MDN","noIndexing":false}}