{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Firefox Security Guidelines","mdn_url":"/en-US/docs/Web/Security/Firefox_Security_Guidelines","locale":"en-US","native":"English (US)","sidebarHTML":"","body":[{"type":"prose","value":{"id":"purpose","title":"Purpose","isH3":false,"content":"<p>This document outlines a set of security guidelines that will generally apply to all client applications, such as Firefox and Thunderbird.</p>"}},{"type":"prose","value":{"id":"secure_coding_principles","title":"Secure Coding Principles","isH3":false,"content":"<p>Ensure that the application follows the <a href=\"https://wiki.owasp.org/index.php/Secure_Coding_Principles\" class=\"external\" rel=\" noopener\">OWASP Secure Coding Principles</a>:</p>\n<ol>\n  <li>Minimize attack surface area</li>\n  <li>Establish secure defaults</li>\n  <li>Principle of Least privilege</li>\n  <li>Principle of Defense in depth</li>\n  <li>Fail securely</li>\n  <li>Don't trust services</li>\n  <li>Keep security simple</li>\n  <li>Fix security issues correctly</li>\n</ol>"}},{"type":"prose","value":{"id":"input_validation","title":"Input Validation","isH3":false,"content":"<ol>\n  <li>Does the application accept user input?\n    <ol>\n      <li>Verify a sampling of input locations to ensure that reasonable maximums are in place when accepting user data</li>\n      <li>Verify a sampling of input locations to ensure that the application allows only a defined set of acceptable characters</li>\n      <li>Ensure that allowlisting is used instead of denylisting</li>\n    </ol>\n  </li>\n  <li>Does the application accept user input that is displayed in any way?\n    <ol>\n      <li>Verify a sampling of input and output locations to ensure user supplied content is properly encoded in the response</li>\n    </ol>\n  </li>\n</ol>"}},{"type":"prose","value":{"id":"chrome_js_-_dangerous_functions","title":"Chrome JS - Dangerous Functions","isH3":false,"content":"<p>Are any of the following functions used?</p>\n<p>If so ensure they are safe and that no better alternatives are available.</p>\n<table>\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Risk Level</th>\n      <th>Problem</th>\n      <th>Solution</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>eval</td>\n      <td>Very High</td>\n      <td>Invokes JavaScript parser - dangerous if used with untrusted input</td>\n      <td>Avoid eval if at all possible.</td>\n    </tr>\n    <tr>\n      <td>setTimeout(string, time)</td>\n      <td>Very High</td>\n      <td>Acts like eval</td>\n      <td>Use setTimeout(function, time, param1, param2, â€¦)</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"c_-_dangerous_functions","title":"C++ - Dangerous Functions","isH3":false,"content":"<p>Are any of the following functions used?</p>\n<p>If so ensure they are safe and that no better alternatives are available.</p>\n<table>\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Risk Level</th>\n      <th>Problem</th>\n      <th>Solution</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>gets</td>\n      <td>Very High</td>\n      <td>No bounds checking</td>\n      <td>Do not use gets. Use fgets instead.</td>\n    </tr>\n    <tr>\n      <td>strcpy</td>\n      <td>Very High</td>\n      <td>No bounds checking</td>\n      <td>strcpy is safe only if the source string is a constant and the destination is large enough to hold it. Otherwise, use strncpy.</td>\n    </tr>\n    <tr>\n      <td>sprintf</td>\n      <td>Very High</td>\n      <td>No bounds checking, format string attacks</td>\n      <td>sprintf is very hard to use safely. Use snprintf instead.</td>\n    </tr>\n    <tr>\n      <td>scanf, sscanf</td>\n      <td>High</td>\n      <td>Possibly no bounds checking, format string attacks</td>\n      <td>Make sure all %-directives match the corresponding argument types. Do not use '%s' directives with no bounds checking. Use '%xs' where x is the buffer size of the corresponding argument. Do not use untrusted, un-validated data in the format string.</td>\n    </tr>\n    <tr>\n      <td>strcat</td>\n      <td>High</td>\n      <td>No bounds checking</td>\n      <td>If input sizes are not well-known and fixed, use strncat instead.</td>\n    </tr>\n    <tr>\n      <td>printf, fprintf, snprintf, vfprintf, vsprintf, syslog</td>\n      <td>High</td>\n      <td>format string attacks</td>\n      <td>Do not use untrusted, un-validated data in the format string. If the format string can be influenced by Web content or user input, validate it for the proper number and type of %-directives before calling these functions. Make sure destination size arguments are correct.</td>\n    </tr>\n    <tr>\n      <td>strncpy, fgets, strncat</td>\n      <td>Low</td>\n      <td>May not null-terminate</td>\n      <td>Always explicitly null-terminate the destination buffer. Make sure the size argument is correct. Be sure to leave room in the destination buffer to add the null character!</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"urls","title":"URLs","isH3":false,"content":"<ol>\n  <li>Does the application make use of untrusted data to construct URLs?\n    <ul>\n      <li>Ensure any such data is adequately sanitized and encoded prior to use.</li>\n      <li>Ensure any data obtained from these URLs is checked before use or storage.</li>\n    </ul>\n  </li>\n  <li>Does the application follow redirects?\n    <ul>\n      <li>Ensure security checks are performed on redirects as well as the original request URI.</li>\n    </ul>\n  </li>\n</ol>"}},{"type":"prose","value":{"id":"security_controls","title":"Security Controls","isH3":false,"content":"<ol>\n  <li>Does the application implement suitable permission checks?\n    <ul>\n      <li>Ensure the correct APIs are used where available (e.g. shouldLoad, etc.)</li>\n      <li>Ensure the application fails securely.</li>\n    </ul>\n  </li>\n</ol>"}},{"type":"prose","value":{"id":"remote_system_access","title":"Remote System Access","isH3":false,"content":"<ol>\n  <li>Does the application access any remote systems?</li>\n</ol>\n<ul>\n  <li>Ensure that TLS is used unless there's a <em>very</em> good reason not to.</li>\n  <li>Ensure that no user information is transmitted without the user's consent.</li>\n</ul>"}},{"type":"prose","value":{"id":"information_storage","title":"Information Storage","isH3":false,"content":"<ol>\n  <li>File storage\n    <ol>\n      <li>Ensure the application checks that any files created are under allowed paths</li>\n      <li>Are filenames generated from untrusted data?\n        <ul>\n          <li>Ensure the data is suitably encoded</li>\n        </ul>\n      </li>\n      <li>Check files are of an acceptable type</li>\n      <li>Check files cannot exceed reasonable size limits</li>\n    </ol>\n  </li>\n  <li>Database storage\n    <ol>\n      <li>Ensure any untrusted information sent to the database is adequately sanitized</li>\n      <li>Where possible, make use of type safe parameterization to prevent injection attacks</li>\n    </ol>\n  </li>\n  <li>Sensitive information\n    <ol>\n      <li>Ensure any security sensitive or personal information is adequately protected (see Encryption section)</li>\n      <li>Particular care must be taken around credentials (passwords, etc.) - If you're working with information of this type and you're unsure of what to do, it's always worth asking</li>\n    </ol>\n  </li>\n  <li>Logging\n    <ol>\n      <li>Don't forget the above rules apply to logs as well as your usual application data</li>\n    </ol>\n  </li>\n</ol>"}},{"type":"prose","value":{"id":"encryption","title":"Encryption","isH3":false,"content":"<ol>\n  <li>Does the application use any form of encryption?</li>\n  <li>Are the algorithms used recognized standards?</li>\n</ol>"}},{"type":"prose","value":{"id":"denial_of_service","title":"Denial of Service","isH3":false,"content":"<ol>\n  <li>Ensure the application protects against exhaustion of:\n    <ol>\n      <li>System memory</li>\n      <li>Storage</li>\n    </ol>\n  </li>\n</ol>"}},{"type":"prose","value":{"id":"security_warnings","title":"Security Warnings","isH3":false,"content":"<ol>\n  <li>Does the application present the user with any security warnings?</li>\n  <li>Are they clearly understandable and appropriate?</li>\n  <li>Can untrusted data change the meaning of messages to the user?\n    <ul>\n      <li>Can user input change the meaning of messages?</li>\n      <li>Can user input force system messages off the visible screen?</li>\n      <li>Can user input include special characters that can change the meaning of messages (eg Unicode right-to-left override U+202E)</li>\n    </ul>\n  </li>\n  <li>Can an attacker use the timing of dialogs to fool the user into clicking on something they didn't intend to?</li>\n</ol>"}},{"type":"prose","value":{"id":"information_disclosure","title":"Information Disclosure","isH3":false,"content":"<ol>\n  <li>Does the application disclose information that could compromise the user?</li>\n  <li>Does the application disclose any information that it does not need to?</li>\n  <li>Does the application disclose anything that may surprise or upset the user?</li>\n</ol>"}},{"type":"prose","value":{"id":"front_end","title":"Front End","isH3":false,"content":"<ol>\n  <li>Are safe mechanisms used to create XUL and HTML UI elements?\n    <ul>\n      <li>e.g. use createTextNode instead of innerHTML or similar</li>\n    </ul>\n  </li>\n  <li>Does the application create its own docshells (tabs, iframes)?\n    <ul>\n      <li>Ensure you are explicit about the type of these, e.g. iframe.setAttribute(\"type\", \"content\")</li>\n    </ul>\n  </li>\n</ol>"}},{"type":"prose","value":{"id":"references","title":"References","isH3":false,"content":"<ul>\n  <li><a href=\"https://wiki.mozilla.org/WebAppSec/Web_Security_Verification\" class=\"external\" rel=\" noopener\">Web Security Verification</a></li>\n  <li><a href=\"https://www-archive.mozilla.org/projects/security/components/reviewguide.html\" class=\"external\" rel=\" noopener\">Mozilla Security Review and Best Practices</a></li>\n  <li><a href=\"https://www.squarefree.com/securitytips/mozilla-developers.html\" class=\"external\" rel=\" noopener\">Security tips for Mozilla and extension developers</a></li>\n  <li><a href=\"https://owasp.org/www-pdf-archive/OWASP_SCP_Quick_Reference_Guide_v2.pdf\" class=\"external\" rel=\" noopener\">OWASP Secure Coding Practices - Quick Reference Guide</a></li>\n</ul>"}}],"toc":[{"text":"Purpose","id":"purpose"},{"text":"Secure Coding Principles","id":"secure_coding_principles"},{"text":"Input Validation","id":"input_validation"},{"text":"Chrome JS - Dangerous Functions","id":"chrome_js_-_dangerous_functions"},{"text":"C++ - Dangerous Functions","id":"c_-_dangerous_functions"},{"text":"URLs","id":"urls"},{"text":"Security Controls","id":"security_controls"},{"text":"Remote System Access","id":"remote_system_access"},{"text":"Information Storage","id":"information_storage"},{"text":"Encryption","id":"encryption"},{"text":"Denial of Service","id":"denial_of_service"},{"text":"Security Warnings","id":"security_warnings"},{"text":"Information Disclosure","id":"information_disclosure"},{"text":"Front End","id":"front_end"},{"text":"References","id":"references"}],"summary":"This document outlines a set of security guidelines that will generally apply to all client applications, such as Firefox and Thunderbird.","popularity":0.0008,"modified":"2022-09-09T07:06:10.000Z","source":{"folder":"en-us/web/security/firefox_security_guidelines","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/security/firefox_security_guidelines/index.md","last_commit_url":"https://github.com/mdn/content/commit/f4f8e2f18ccf19a0bee59e1fe78753e276b98232","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/Security","title":"Web security"},{"uri":"/en-US/docs/Web/Security/Firefox_Security_Guidelines","title":"Firefox Security Guidelines"}],"pageTitle":"Firefox Security Guidelines - Web security | MDN","noIndexing":false}}