{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"JavaScript/XSLT Bindings","mdn_url":"/en-US/docs/Web/XSLT/XSLT_JS_interface_in_Gecko/JavaScript_XSLT_Bindings","locale":"en-US","native":"English (US)","sidebarHTML":"","body":[{"type":"prose","value":{"id":"javascriptxslt_bindings","title":"JavaScript/XSLT Bindings","isH3":false,"content":"<p>JavaScript can run XSLT transformations through the <a href=\"/en-US/docs/Web/API/XSLTProcessor\"><code>XSLTProcessor</code></a> object. Once instantiated, an <a href=\"/en-US/docs/Web/API/XSLTProcessor\"><code>XSLTProcessor</code></a> has an <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>XSLTProcessor.importStylesheet()</code></a> method that takes as an argument the XSLT stylesheet to be used in the transformation. The stylesheet has to be passed in as an XML document, which means that the .xsl file has to be loaded by the page before calling <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>XSLTProcessor.importStylesheet()</code></a>. This can be done via <a href=\"/en-US/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a> or <a href=\"/en-US/docs/Web/API/XMLDocument/load\"><code>XMLDocument.load()</code></a>.</p>"}},{"type":"prose","value":{"id":"instantiating_an_xsltprocessor","title":"Instantiating an <a href=\"/en-US/docs/Web/API/XSLTProcessor\"><code>XSLTProcessor</code></a>","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">const</span> xsltProcessor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XSLTProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Load the xsl file using synchronous (third param is set to false) XMLHttpRequest</span>\n  <span class=\"token keyword\">const</span> myXMLHTTPRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  myXMLHTTPRequest<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"example.xsl\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  myXMLHTTPRequest<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> xslRef <span class=\"token operator\">=</span> myXMLHTTPRequest<span class=\"token punctuation\">.</span>responseXML<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Finally import the .xsl</span>\n  xsltProcessor<span class=\"token punctuation\">.</span><span class=\"token function\">importStylesheet</span><span class=\"token punctuation\">(</span>xslRef<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>For the actual transformation, <a href=\"/en-US/docs/Web/API/XSLTProcessor\"><code>XSLTProcessor</code></a> requires an XML document, which is used in conjunction with the imported XSL file to produce the final result. The XML document can be a separate XML file loaded as shown in figure 1, or it can be part of the existing page. To process part of a page's DOM, it is necessary to first create an XML document in memory. Assuming that the DOM to be processed is contained by an element with the id <code>example</code>, that DOM can be \"cloned\" using the in-memory XML document's <a href=\"/en-US/docs/Web/API/Document/importNode\"><code>Document.importNode()</code></a> method. <a href=\"/en-US/docs/Web/API/Document/importNode\"><code>Document.importNode()</code></a> allows transferring a DOM fragment between documents, in this case from an HTML document to an XML document. The first parameter references the DOM node to clone. By making the second parameter \"true\", it will clone all descendants as well (a deep clone). The cloned DOM can then be easily inserted into the XML document using <a href=\"/en-US/docs/Web/API/Node/appendChild\"><code>Node.appendChild()</code></a>, as shown in figure 2.</p>","titleAsText":"Instantiating an XSLTProcessor"}},{"type":"prose","value":{"id":"creating_an_xml_document_based_on_part_of_a_documents_dom","title":"Creating an XML document based on part of a document's DOM","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token comment\">// Create a new XML document in memory</span>\n  <span class=\"token keyword\">const</span> xmlRef <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>implementation<span class=\"token punctuation\">.</span><span class=\"token function\">createDocument</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// We want to move a part of the DOM from an HTML document to an XML document.</span>\n  <span class=\"token comment\">// importNode is used to clone the nodes we want to process via XSLT - true makes it do a deep clone</span>\n  <span class=\"token keyword\">const</span> myNode <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"example\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> clonedNode <span class=\"token operator\">=</span> xmlRef<span class=\"token punctuation\">.</span><span class=\"token function\">importNode</span><span class=\"token punctuation\">(</span>myNode<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Add the cloned DOM into the XML document</span>\n  xmlRef<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>clonedNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Once the stylesheet has been imported, <a href=\"/en-US/docs/Web/API/XSLTProcessor\"><code>XSLTProcessor</code></a> has to perform two methods for the actual transformation, namely <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>XSLTProcessor.transformToDocument()</code></a> and <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>XSLTProcessor.transformToFragment()</code></a>. <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>XSLTProcessor.transformToDocument()</code></a> returns a full XML document while <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>XSLTProcessor.transformToFragment()</code></a> returns a document fragment that can be easily added to an existing document. Both take in the XML document as the first parameter that will be transformed. <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>XSLTProcessor.transformToFragment()</code></a> requires a second parameter, namely the document object that will own the generated fragment. If the generated fragment will be inserted into the current HTML document, passing in document is enough.</p>\n<h4 id=\"creating_an_xml_document_from_a_string_xml_soup\">Creating an XML document From a String 'XML Soup'</h4>\n<p>While you can use IE <code>loadXML</code> method to load a string containing XML you have to perform some tweaking and tuning to do the same in Mozilla. You must use the DomParser.no to create any document, as this is handled by the DomParser.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> parser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DOMParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> doc <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span><span class=\"token function\">parseFromString</span><span class=\"token punctuation\">(</span>aStr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"performing_the_transformation","title":"Performing the transformation","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">const</span> fragment <span class=\"token operator\">=</span> xsltProcessor<span class=\"token punctuation\">.</span><span class=\"token function\">transformToFragment</span><span class=\"token punctuation\">(</span>xmlRef<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}}],"toc":[{"text":"JavaScript/XSLT Bindings","id":"javascriptxslt_bindings"}],"summary":"JavaScript can run XSLT transformations through the XSLTProcessor object. Once instantiated, an XSLTProcessor has an XSLTProcessor.importStylesheet() method that takes as an argument the XSLT stylesheet to be used in the transformation. The stylesheet has to be passed in as an XML document, which means that the .xsl file has to be loaded by the page before calling XSLTProcessor.importStylesheet(). This can be done via XMLHttpRequest or XMLDocument.load().","popularity":0.0004,"modified":"2022-09-09T07:06:10.000Z","other_translations":[{"title":"Les liaisons JavaScript/XSLT","locale":"fr","native":"Français"},{"title":"JavaScript/XSLT バインディング","locale":"ja","native":"日本語"}],"source":{"folder":"en-us/web/xslt/xslt_js_interface_in_gecko/javascript_xslt_bindings","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/xslt/xslt_js_interface_in_gecko/javascript_xslt_bindings/index.md","last_commit_url":"https://github.com/mdn/content/commit/f4f8e2f18ccf19a0bee59e1fe78753e276b98232","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/XSLT","title":"XSLT: Extensible Stylesheet Language Transformations"},{"uri":"/en-US/docs/Web/XSLT/XSLT_JS_interface_in_Gecko","title":"The XSLT/JavaScript Interface in Gecko"},{"uri":"/en-US/docs/Web/XSLT/XSLT_JS_interface_in_Gecko/JavaScript_XSLT_Bindings","title":"JavaScript/XSLT Bindings"}],"pageTitle":"JavaScript/XSLT Bindings - XSLT: Extensible Stylesheet Language Transformations | MDN","noIndexing":false}}