{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Using the Mozilla JavaScript interface to XSL Transformations","mdn_url":"/en-US/docs/Web/XSLT/Using_the_Mozilla_JavaScript_interface_to_XSL_Transformations","locale":"en-US","native":"English (US)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>This document describes the JavaScript interface in Mozilla 1.2 and up to the XSLT Processing Engine (TransforMiiX).</p>"}},{"type":"prose","value":{"id":"creating_an_xsltprocessor","title":"Creating an XSLTProcessor","isH3":true,"content":"<p>To start, you need to create an <a href=\"/en-US/docs/Web/API/XSLTProcessor\"><code>XSLTProcessor</code></a> object:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> processor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XSLTProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"specifying_the_stylesheet","title":"Specifying the stylesheet","isH3":true,"content":"<p>Before you can use it, you must import a stylesheet with the <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>XSLTProcessor.importStylesheet()</code></a> method. It has a single parameter, which is the DOM Node of the XSLT stylesheet to import.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> The import is live, meaning that if you alter the stylesheet DOM after importing it, this will be reflected in the processing. Rather than modifying the DOM it is recommended to use stylesheet parameters which are usually easier and can give better performance.</p>\n</div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> testTransform <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>implementation<span class=\"token punctuation\">.</span><span class=\"token function\">createDocument</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Just an example to get a transform into a script as a DOM</span>\n<span class=\"token comment\">// XMLDocument.load is asynchronous, so all processing happens in the</span>\n<span class=\"token comment\">// onload handler</span>\ntestTransform<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span> onload<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntestTransform<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test-transform.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">onload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  processor<span class=\"token punctuation\">.</span><span class=\"token function\">importStylesheet</span><span class=\"token punctuation\">(</span>testTransform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>XSLTProcessor.importStylesheet()</code></a> requires one argument, a DOM Node. If that node is a document node, you can pass in a full XSL Transform or a <a href=\"https://www.w3.org/TR/xslt/#result-element-stylesheet\" class=\"external\" rel=\" noopener\">literal result element transform</a>, otherwise it must be an <code>xsl:stylesheet</code> or <code>xsl:transform</code> element.</p>"}},{"type":"prose","value":{"id":"transforming_the_document","title":"Transforming the document","isH3":true,"content":"<p>You can use the <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>XSLTProcessor.transformToDocument()</code></a> or <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>XSLTProcessor.transformToFragment()</code></a> methods to transform a document using the imported XSLT stylesheet.</p>\n<h4 id=\"transformtodocument\">transformToDocument</h4>\n<p><a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>XSLTProcessor.transformToDocument()</code></a> takes one argument, the source node to transform, and returns a new <a href=\"/en-US/docs/Web/API/Document\"><code>Document</code></a> with the results of the transformation:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> newDocument <span class=\"token operator\">=</span> processor<span class=\"token punctuation\">.</span><span class=\"token function\">transformToDocument</span><span class=\"token punctuation\">(</span>domToBeTransformed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>The resultant object depends on the <a href=\"https://www.w3.org/TR/1999/REC-xslt-19991116/#output\" class=\"external\" rel=\" noopener\">output method</a> of the stylesheet:</p>\n<ul>\n  <li><strong>html</strong> - <a href=\"/en-US/docs/Web/API/HTMLDocument\"><code>HTMLDocument</code></a></li>\n  <li><strong>xml</strong> - <a href=\"/en-US/docs/Web/API/XMLDocument\"><code>XMLDocument</code></a></li>\n  <li><strong>text</strong> - <a href=\"/en-US/docs/Web/API/XMLDocument\"><code>XMLDocument</code></a> with a single root element <code>&lt;transformiix:result&gt;</code> with the text as a child</li>\n</ul>\n<h4 id=\"transformtofragment\">transformToFragment</h4>\n<p>You can also use <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>XSLTProcessor.transformToFragment()</code></a> which will return a <a href=\"/en-US/docs/Web/API/DocumentFragment\"><code>DocumentFragment</code></a> node. This is handy because appending a fragment to another node transparently appends all the children of that fragment, and the fragment itself is not merged. Fragments are therefore useful for moving nodes around and storing them without the overhead of a full document object.</p>\n<p><a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>XSLTProcessor.transformToFragment()</code></a> takes two arguments: the source document to be transformed (as above) and the <a href=\"/en-US/docs/Web/API/Document\"><code>Document</code></a> object that will own the fragment (all fragments must be owned by a document).</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> ownerDocument <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>implementation<span class=\"token punctuation\">.</span><span class=\"token function\">createDocument</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> newFragment <span class=\"token operator\">=</span> processor<span class=\"token punctuation\">.</span><span class=\"token function\">transformToFragment</span><span class=\"token punctuation\">(</span>domToBeTransformed<span class=\"token punctuation\">,</span> ownerDocument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>XSLTProcessor.transformToFragment()</code></a> will only produce HTML DOM objects if the owner document is itself an <a href=\"/en-US/docs/Web/API/HTMLDocument\"><code>HTMLDocument</code></a>, or if the output method of the stylesheet is HTML. It will <strong>not</strong> produce an HTML DOM objects if only the toplevel element of the result is <a href=\"/en-US/docs/Web/HTML/Element/html\"><code>&lt;html&gt;</code></a> as <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>XSLTProcessor.transformToFragment()</code></a> is rarely used to create this element. If you want to override this, you can set the output method normally in the standard way.</p>\n<h4 id=\"transforming_html\">transforming HTML</h4>\n<p>Unfortunately it is currently not supported to transform HTML nodes using XSLT. Some things work if you use lower case node-names in patterns and expressions, and treat the nodes as if they are in the null namespace, however this is not very well tested so it might not work in all situations. It is also possible that this will change in a future release.</p>\n<p>Transforming XHTML should work as expected though.</p>"}},{"type":"prose","value":{"id":"setting_parameters","title":"Setting parameters","isH3":true,"content":"<p>You can control <a href=\"https://www.w3.org/TR/1999/REC-xslt-19991116/#variables\" class=\"external\" rel=\" noopener\">parameters for the stylesheet</a> using the <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>XSLTProcessor.setParameter()</code></a>, <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>XSLTProcessor.getParameter()</code></a>, and <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>XSLTProcessor.removeParameter()</code></a> methods. These all take a namespace URI and a local name as the first two parameters, with <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>XSLTProcessor.setParameter()</code></a> taking a third - the value of the parameter to be set. See <a href=\"/en-US/docs/Web/XSLT/XSLT_JS_interface_in_Gecko/Setting_Parameters\">The XSLT/JavaScript Interface in Gecko</a> for an example.</p>"}},{"type":"prose","value":{"id":"resetting","title":"Resetting","isH3":true,"content":"<p>The <a href=\"/en-US/docs/Web/API/XSLTProcessor\"><code>XSLTProcessor</code></a> object also implements a <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>XSLTProcessor.reset()</code></a> method, which can be used to remove all stylesheets and parameters then put the processor back into its initial state. This method is implemented in Gecko 1.3 and later.</p>"}},{"type":"prose","value":{"id":"resources","title":"Resources","isH3":true,"content":"<p>The following reflect the interface of the <a href=\"/en-US/docs/Web/API/XSLTProcessor\"><code>XSLTProcessor</code></a> object:</p>\n<ul>\n  <li><a href=\"https://dxr.mozilla.org/mozilla-central/source/dom/webidl/XSLTProcessor.webidl\" class=\"external\" rel=\" noopener\">XSLTProcessor.webidl</a></li>\n  <li><a href=\"https://dxr.mozilla.org/mozilla-central/source/dom/xslt/xslt/txXSLTProcessor.cpp\" class=\"external\" rel=\" noopener\">txXSLTProcessor.cpp</a></li>\n</ul>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":true,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/XSLT/XSLT_JS_interface_in_Gecko\">The XSLT JavaScript Interface in Gecko</a></li>\n  <li><a href=\"/en-US/docs/Web/API/XMLDocument/load\">document.load()</a> regarding the loading of XML documents (as used above)</li>\n</ul>"}},{"type":"prose","value":{"id":"original_document_information","title":"Original Document Information","isH3":true,"content":"<ul>\n  <li>Author(s): Mike Hearn</li>\n  <li>Last Updated Date: December 21, 2005</li>\n  <li>Copyright Information: Copyright (C) Mike Hearn</li>\n</ul>"}}],"toc":[],"summary":"This document describes the JavaScript interface in Mozilla 1.2 and up to the XSLT Processing Engine (TransforMiiX).","popularity":0.0003,"modified":"2022-09-09T07:06:10.000Z","other_translations":[{"title":"Utilisation de l'interface JavaScript de Mozilla pour les transformations XSL","locale":"fr","native":"Français"},{"title":"Mozilla JavaScript インターフェイスを使用した XSL 変換","locale":"ja","native":"日本語"},{"title":"Using the Mozilla JavaScript interface to XSL Transformations","locale":"ko","native":"한국어"}],"source":{"folder":"en-us/web/xslt/using_the_mozilla_javascript_interface_to_xsl_transformations","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/xslt/using_the_mozilla_javascript_interface_to_xsl_transformations/index.md","last_commit_url":"https://github.com/mdn/content/commit/f4f8e2f18ccf19a0bee59e1fe78753e276b98232","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/XSLT","title":"XSLT: Extensible Stylesheet Language Transformations"},{"uri":"/en-US/docs/Web/XSLT/Using_the_Mozilla_JavaScript_interface_to_XSL_Transformations","title":"Using the Mozilla JavaScript interface to XSL Transformations"}],"pageTitle":"Using the Mozilla JavaScript interface to XSL Transformations - XSLT: Extensible Stylesheet Language Transformations | MDN","noIndexing":false}}