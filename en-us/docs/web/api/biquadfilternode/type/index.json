{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"BiquadFilterNode.type","mdn_url":"/en-US/docs/Web/API/BiquadFilterNode/type","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Web_Audio_API\">Web Audio API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/BiquadFilterNode\"><code>BiquadFilterNode</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/API/BiquadFilterNode/BiquadFilterNode\"><code>BiquadFilterNode()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/API/BiquadFilterNode/detune\"><code>detune</code></a></li><li><a href=\"/en-US/docs/Web/API/BiquadFilterNode/frequency\"><code>frequency</code></a></li><li><a href=\"/en-US/docs/Web/API/BiquadFilterNode/gain\"><code>gain</code></a></li><li><a href=\"/en-US/docs/Web/API/BiquadFilterNode/Q\"><code>Q</code></a></li><li><em><code>type</code></em></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/BiquadFilterNode/getFrequencyResponse\"><code>getFrequencyResponse()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Inheritance:</summary><ol><li><a href=\"/en-US/docs/Web/API/AudioNode\"><code>AudioNode</code></a></li><li><a href=\"/en-US/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Web Audio API</summary><ol><li><a href=\"/en-US/docs/Web/API/AnalyserNode\"><code>AnalyserNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioBuffer\"><code>AudioBuffer</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioBufferSourceNode\"><code>AudioBufferSourceNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioContext\"><code>AudioContext</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioDestinationNode\"><code>AudioDestinationNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioListener\"><code>AudioListener</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioNode\"><code>AudioNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioParam\"><code>AudioParam</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioProcessingEvent\"><code>AudioProcessingEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioScheduledSourceNode\"><code>AudioScheduledSourceNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioWorklet\"><code>AudioWorklet</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioWorkletGlobalScope\"><code>AudioWorkletGlobalScope</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioWorkletProcessor\"><code>AudioWorkletProcessor</code></a></li><li><a href=\"/en-US/docs/Web/API/BaseAudioContext\"><code>BaseAudioContext</code></a></li><li><a href=\"/en-US/docs/Web/API/ChannelMergerNode\"><code>ChannelMergerNode</code></a></li><li><a href=\"/en-US/docs/Web/API/ChannelSplitterNode\"><code>ChannelSplitterNode</code></a></li><li><a href=\"/en-US/docs/Web/API/ConstantSourceNode\"><code>ConstantSourceNode</code></a></li><li><a href=\"/en-US/docs/Web/API/ConvolverNode\"><code>ConvolverNode</code></a></li><li><a href=\"/en-US/docs/Web/API/DelayNode\"><code>DelayNode</code></a></li><li><a href=\"/en-US/docs/Web/API/DynamicsCompressorNode\"><code>DynamicsCompressorNode</code></a></li><li><a href=\"/en-US/docs/Web/API/GainNode\"><code>GainNode</code></a></li><li><a href=\"/en-US/docs/Web/API/IIRFilterNode\"><code>IIRFilterNode</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaElementAudioSourceNode\"><code>MediaElementAudioSourceNode</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaStreamAudioDestinationNode\"><code>MediaStreamAudioDestinationNode</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaStreamAudioSourceNode\"><code>MediaStreamAudioSourceNode</code></a></li><li><a href=\"/en-US/docs/Web/API/OfflineAudioCompletionEvent\"><code>OfflineAudioCompletionEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/OfflineAudioContext\"><code>OfflineAudioContext</code></a></li><li><a href=\"/en-US/docs/Web/API/OscillatorNode\"><code>OscillatorNode</code></a></li><li><a href=\"/en-US/docs/Web/API/PannerNode\"><code>PannerNode</code></a></li><li><a href=\"/en-US/docs/Web/API/PeriodicWave\"><code>PeriodicWave</code></a></li><li><a href=\"/en-US/docs/Web/API/StereoPannerNode\"><code>StereoPannerNode</code></a></li><li><a href=\"/en-US/docs/Web/API/WaveShaperNode\"><code>WaveShaperNode</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <code>type</code> property of the <a href=\"/en-US/docs/Web/API/BiquadFilterNode\"><code>BiquadFilterNode</code></a> interface is a string (enum) value defining the kind of filtering algorithm the node is implementing.</p>"}},{"type":"prose","value":{"id":"value","title":"Value","isH3":false,"content":"<p>A string (enum) representing a <a href=\"https://webaudio.github.io/web-audio-api/#idl-def-BiquadFilterType\" class=\"external\" rel=\" noopener\">BiquadFilterType</a>.</p>"}},{"type":"prose","value":{"id":"type_values_and_their_meaning","title":"<code>type</code> values and their meaning","isH3":false,"content":"<table class=\"standard-table\">\n  <tbody>\n    <tr>\n      <th scope=\"row\"><code>type</code></th>\n      <th scope=\"col\">Description</th>\n      <th scope=\"col\"><code>frequency</code></th>\n      <th scope=\"col\"><code>Q</code></th>\n      <th scope=\"col\"><code>gain</code></th>\n    </tr>\n    <tr>\n      <th scope=\"row\"><code>lowpass</code></th>\n      <td>\n        Standard second-order resonant lowpass filter with 12dB/octave rolloff.\n        Frequencies below the cutoff pass through; frequencies above it are\n        attenuated.\n      </td>\n      <td>The cutoff frequency.</td>\n      <td>\n        Indicates how peaked the frequency is around the cutoff. The greater the\n        value is, the greater is the peak.\n      </td>\n      <td><em>Not used</em></td>\n    </tr>\n    <tr>\n      <th scope=\"row\"><code>highpass</code></th>\n      <td>\n        Standard second-order resonant highpass filter with 12dB/octave rolloff.\n        Frequencies below the cutoff are attenuated; frequencies above it pass\n        through.\n      </td>\n      <td>The cutoff frequency.</td>\n      <td>\n        Indicates how peaked the frequency is around the cutoff. The greater the\n        value, the greater the peak.\n      </td>\n      <td><em>Not used</em></td>\n    </tr>\n    <tr>\n      <th scope=\"row\"><code>bandpass</code></th>\n      <td>\n        Standard second-order bandpass filter. Frequencies outside the given\n        range of frequencies are attenuated; the frequencies inside it pass\n        through.\n      </td>\n      <td>The center of the range of frequencies.</td>\n      <td>\n        Controls the width of the frequency band. The greater the\n        <code>Q</code> value, the larger the frequency band.\n      </td>\n      <td><em>Not used</em></td>\n    </tr>\n    <tr>\n      <th scope=\"row\"><code>lowshelf</code></th>\n      <td>\n        Standard second-order lowshelf filer. Frequencies lower than the\n        frequency get a boost, or an attenuation; frequencies over it are\n        unchanged.\n      </td>\n      <td>The upper limit of the frequencies getting a boost or an attenuation.</td>\n      <td><em>Not used</em></td>\n      <td>The boost, in dB, to be applied; if negative, it will be an attenuation.</td>\n    </tr>\n    <tr>\n      <th scope=\"row\"><code>highshelf</code></th>\n      <td>\n        Standard second-order highshelf filer. Frequencies higher than the\n        frequency get a boost or an attenuation; frequencies lower than it are\n        unchanged.\n      </td>\n      <td>The lower limit of the frequencies getting a boost or an attenuation.</td>\n      <td><em>Not used</em></td>\n      <td>The boost, in dB, to be applied; if negative, it will be an attenuation.</td>\n    </tr>\n    <tr>\n      <th scope=\"row\"><code>peaking</code></th>\n      <td>\n        Frequencies inside the range get a boost or an attenuation; frequencies\n        outside it are unchanged.\n      </td>\n      <td>The middle of the frequency range getting a boost or an attenuation.</td>\n      <td>\n        Controls the width of the frequency band. The greater the\n        <code>Q</code> value, the larger the frequency band.\n      </td>\n      <td>The boost, in dB, to be applied; if negative, it will be an attenuation.</td>\n    </tr>\n    <tr>\n      <th scope=\"row\"><code>notch</code></th>\n      <td>\n        Standard\n        <a href=\"https://en.wikipedia.org/wiki/Band-stop_filter\" class=\"external\" rel=\" noopener\">notch</a>\n        filter, also called a <em>band-stop</em> or\n        <em>band-rejection</em> filter. It is the opposite of a bandpass filter:\n        frequencies outside the give range of frequencies pass through;\n        frequencies inside it are attenuated.\n      </td>\n      <td>The center of the range of frequencies.</td>\n      <td>\n        Controls the width of the frequency band. The greater the\n        <code>Q</code> value, the larger the frequency band.\n      </td>\n      <td><em>Not used</em></td>\n    </tr>\n    <tr>\n      <th scope=\"row\"><code>allpass</code></th>\n      <td>\n        Standard second-order\n        <a href=\"https://en.wikipedia.org/wiki/All-pass_filter#Digital_Implementation\" class=\"external\" rel=\" noopener\">allpass</a>\n        filter. It Lets all frequencies through, but changes the\n        phase-relationship between the various frequencies.\n      </td>\n      <td>\n        The frequency with the maximal\n        <a href=\"https://en.wikipedia.org/wiki/Group_delay_and_phase_delay\" class=\"external\" rel=\" noopener\">group delay</a>, that is, the frequency where the center of the phase transition\n        occurs.\n      </td>\n      <td>\n        Controls how sharp the transition is at the medium frequency. The larger\n        this parameter is, the sharper and larger the transition will be.\n      </td>\n      <td><em>Not used</em></td>\n    </tr>\n  </tbody>\n</table>","titleAsText":"type values and their meaning"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<p>The following example shows basic usage of an AudioContext to create a Biquad filter node. For a complete working example, check out our <a href=\"https://mdn.github.io/voice-change-o-matic/\" class=\"external\" rel=\" noopener\">voice-change-o-matic</a> demo (look at the <a href=\"https://github.com/mdn/voice-change-o-matic\" class=\"external\" rel=\" noopener\">source code</a> too).</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> audioCtx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AudioContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//set up the different audio nodes we will use for the app</span>\n<span class=\"token keyword\">const</span> analyser <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createAnalyser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> distortion <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createWaveShaper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> gainNode <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createGain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> biquadFilter <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createBiquadFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> convolver <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createConvolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// connect the nodes together</span>\n\nsource <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createMediaStreamSource</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsource<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>analyser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nanalyser<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>distortion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndistortion<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>biquadFilter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbiquadFilter<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>convolver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconvolver<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>gainNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngainNode<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>audioCtx<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Manipulate the Biquad filter</span>\n\nbiquadFilter<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">\"lowshelf\"</span><span class=\"token punctuation\">;</span>\nbiquadFilter<span class=\"token punctuation\">.</span>frequency<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\nbiquadFilter<span class=\"token punctuation\">.</span>gain<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://webaudio.github.io/web-audio-api/#dom-biquadfilternode-type","title":"Web Audio API"}],"query":"api.BiquadFilterNode.type"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.BiquadFilterNode.type","dataURL":"/en-US/docs/Web/API/BiquadFilterNode/type/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API\">Using the Web Audio API</a></li>\n</ul>"}}],"toc":[{"text":"Value","id":"value"},{"text":"<code>type</code> values and their meaning","id":"type_values_and_their_meaning"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The type property of the BiquadFilterNode interface is a string (enum) value defining the kind of filtering algorithm the node is implementing.","popularity":0,"modified":"2022-09-09T05:07:36.000Z","source":{"folder":"en-us/web/api/biquadfilternode/type","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/biquadfilternode/type/index.md","last_commit_url":"https://github.com/mdn/content/commit/bf30e32f3b51f59080f2c76795beadb247a551eb","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/BiquadFilterNode","title":"BiquadFilterNode"},{"uri":"/en-US/docs/Web/API/BiquadFilterNode/type","title":"BiquadFilterNode.type"}],"pageTitle":"BiquadFilterNode.type - Web APIs | MDN","noIndexing":false}}