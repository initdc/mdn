{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"BiquadFilterNode","mdn_url":"/en-US/docs/Web/API/BiquadFilterNode","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Web_Audio_API\">Web Audio API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/BiquadFilterNode\"><code>BiquadFilterNode</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/API/BiquadFilterNode/BiquadFilterNode\"><code>BiquadFilterNode()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/API/BiquadFilterNode/detune\"><code>detune</code></a></li><li><a href=\"/en-US/docs/Web/API/BiquadFilterNode/frequency\"><code>frequency</code></a></li><li><a href=\"/en-US/docs/Web/API/BiquadFilterNode/gain\"><code>gain</code></a></li><li><a href=\"/en-US/docs/Web/API/BiquadFilterNode/Q\"><code>Q</code></a></li><li><a href=\"/en-US/docs/Web/API/BiquadFilterNode/type\"><code>type</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/BiquadFilterNode/getFrequencyResponse\"><code>getFrequencyResponse()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Inheritance:</summary><ol><li><a href=\"/en-US/docs/Web/API/AudioNode\"><code>AudioNode</code></a></li><li><a href=\"/en-US/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Web Audio API</summary><ol><li><a href=\"/en-US/docs/Web/API/AnalyserNode\"><code>AnalyserNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioBuffer\"><code>AudioBuffer</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioBufferSourceNode\"><code>AudioBufferSourceNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioContext\"><code>AudioContext</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioDestinationNode\"><code>AudioDestinationNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioListener\"><code>AudioListener</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioNode\"><code>AudioNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioParam\"><code>AudioParam</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioProcessingEvent\"><code>AudioProcessingEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioScheduledSourceNode\"><code>AudioScheduledSourceNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioWorklet\"><code>AudioWorklet</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioWorkletGlobalScope\"><code>AudioWorkletGlobalScope</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioWorkletProcessor\"><code>AudioWorkletProcessor</code></a></li><li><a href=\"/en-US/docs/Web/API/BaseAudioContext\"><code>BaseAudioContext</code></a></li><li><a href=\"/en-US/docs/Web/API/ChannelMergerNode\"><code>ChannelMergerNode</code></a></li><li><a href=\"/en-US/docs/Web/API/ChannelSplitterNode\"><code>ChannelSplitterNode</code></a></li><li><a href=\"/en-US/docs/Web/API/ConstantSourceNode\"><code>ConstantSourceNode</code></a></li><li><a href=\"/en-US/docs/Web/API/ConvolverNode\"><code>ConvolverNode</code></a></li><li><a href=\"/en-US/docs/Web/API/DelayNode\"><code>DelayNode</code></a></li><li><a href=\"/en-US/docs/Web/API/DynamicsCompressorNode\"><code>DynamicsCompressorNode</code></a></li><li><a href=\"/en-US/docs/Web/API/GainNode\"><code>GainNode</code></a></li><li><a href=\"/en-US/docs/Web/API/IIRFilterNode\"><code>IIRFilterNode</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaElementAudioSourceNode\"><code>MediaElementAudioSourceNode</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaStreamAudioDestinationNode\"><code>MediaStreamAudioDestinationNode</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaStreamAudioSourceNode\"><code>MediaStreamAudioSourceNode</code></a></li><li><a href=\"/en-US/docs/Web/API/OfflineAudioCompletionEvent\"><code>OfflineAudioCompletionEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/OfflineAudioContext\"><code>OfflineAudioContext</code></a></li><li><a href=\"/en-US/docs/Web/API/OscillatorNode\"><code>OscillatorNode</code></a></li><li><a href=\"/en-US/docs/Web/API/PannerNode\"><code>PannerNode</code></a></li><li><a href=\"/en-US/docs/Web/API/PeriodicWave\"><code>PeriodicWave</code></a></li><li><a href=\"/en-US/docs/Web/API/StereoPannerNode\"><code>StereoPannerNode</code></a></li><li><a href=\"/en-US/docs/Web/API/WaveShaperNode\"><code>WaveShaperNode</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <code>BiquadFilterNode</code> interface represents a simple low-order filter, and is created using the <a href=\"/en-US/docs/Web/API/BaseAudioContext/createBiquadFilter\"><code>BaseAudioContext/createBiquadFilter</code></a> method. It is an <a href=\"/en-US/docs/Web/API/AudioNode\"><code>AudioNode</code></a> that can represent different kinds of filters, tone control devices, and graphic equalizers. A <code>BiquadFilterNode</code> always has exactly one input and one output.</p><svg viewBox=\"-1 -1 650 42\" preserveAspectRatio=\"xMinYMin meet\">\n  <a style=\"text-decoration: none;\" xlink:href=\"/en-US/docs/Web/API/EventTarget\">\n    <rect x=\"0\" y=\"0\" width=\"88\" height=\"25\" fill=\"#fff\" stroke=\"#D4DDE4\" stroke-width=\"2px\"></rect>\n    <text x=\"44\" y=\"16\" font-size=\"10px\" fill=\"#4D4E53\" text-anchor=\"middle\">\n      EventTarget\n    </text>\n  </a>\n  <line x1=\"88\" y1=\"14\" x2=\"118\" y2=\"14\" stroke=\"#D4DDE4\" \"=\"\"></line>\n  <polyline points=\"88,14 98,9 98,19 88,14\" stroke=\"#D4DDE4\" fill=\"#fff\"></polyline>\n  <a style=\"text-decoration: none;\" xlink:href=\"/en-US/docs/Web/API/AudioNode\">\n    <rect x=\"118\" y=\"0\" width=\"75\" height=\"25\" fill=\"#fff\" stroke=\"#D4DDE4\" stroke-width=\"2px\"></rect>\n    <text x=\"155.5\" y=\"16\" font-size=\"10px\" fill=\"#4D4E53\" text-anchor=\"middle\">\n      AudioNode\n    </text>\n  </a>\n  <line x1=\"193\" y1=\"14\" x2=\"223\" y2=\"14\" stroke=\"#D4DDE4\" \"=\"\"></line>\n  <polyline points=\"193,14 203,9 203,19 193,14\" stroke=\"#D4DDE4\" fill=\"#fff\"></polyline>\n  <a style=\"text-decoration: none;\" xlink:href=\"/en-US/docs/Web/API/BiquadFilterNode\" aria-current=\"page\">\n    <rect x=\"223\" y=\"0\" width=\"128\" height=\"25\" fill=\"#F4F7F8\" stroke=\"#D4DDE4\" stroke-width=\"2px\"></rect>\n    <text x=\"287\" y=\"16\" font-size=\"10px\" fill=\"#4D4E53\" text-anchor=\"middle\">\n      BiquadFilterNode\n    </text>\n  </a></svg>\n<table class=\"properties\">\n  <tbody>\n    <tr>\n      <th scope=\"row\">Number of inputs</th>\n      <td><code>1</code></td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Number of outputs</th>\n      <td><code>1</code></td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Channel count mode</th>\n      <td><code>\"max\"</code></td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Channel count</th>\n      <td><code>2</code> (not used in the default count mode)</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Channel interpretation</th>\n      <td><code>\"speakers\"</code></td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"constructor","title":"Constructor","isH3":false,"content":"<dl>\n  <dt id=\"biquadfilternode\"><a href=\"/en-US/docs/Web/API/BiquadFilterNode/BiquadFilterNode\" title=\"BiquadFilterNode()\"><code>BiquadFilterNode()</code></a></dt>\n  <dd>\n    <p>Creates a new instance of a <code>BiquadFilterNode</code> object.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"properties","title":"Properties","isH3":false,"content":"<p><em>Inherits properties from its parent, <a href=\"/en-US/docs/Web/API/AudioNode\"><code>AudioNode</code></a></em>.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> Though the <code>AudioParam</code> objects returned are read-only, the values they represent are not.</p>\n</div>\n<dl>\n  <dt id=\"biquadfilternode.frequency\"><a href=\"/en-US/docs/Web/API/BiquadFilterNode/frequency\"><code>BiquadFilterNode.frequency</code></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>An <a href=\"/en-US/docs/Web/API/AudioParam#a-rate\">a-rate</a> <a href=\"/en-US/docs/Web/API/AudioParam\"><code>AudioParam</code></a>, a double representing a frequency in the current filtering algorithm measured in hertz (Hz).</p>\n  </dd>\n  <dt id=\"biquadfilternode.detune\"><a href=\"/en-US/docs/Web/API/BiquadFilterNode/detune\"><code>BiquadFilterNode.detune</code></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>An <a href=\"/en-US/docs/Web/API/AudioParam#a-rate\">a-rate</a> <a href=\"/en-US/docs/Web/API/AudioParam\"><code>AudioParam</code></a> representing detuning of the frequency in <a href=\"https://en.wikipedia.org/wiki/Cent_%28music%29\" class=\"external\" rel=\" noopener\">cents</a>.</p>\n  </dd>\n  <dt id=\"biquadfilternode.q\"><a href=\"/en-US/docs/Web/API/BiquadFilterNode/Q\"><code>BiquadFilterNode.Q</code></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>An <a href=\"/en-US/docs/Web/API/AudioParam#a-rate\">a-rate</a> <a href=\"/en-US/docs/Web/API/AudioParam\"><code>AudioParam</code></a>, a double representing a <a href=\"https://en.wikipedia.org/wiki/Q_factor\" class=\"external\" rel=\" noopener\">Q factor</a>, or <em>quality factor</em>.</p>\n  </dd>\n  <dt id=\"biquadfilternode.gain\"><a href=\"/en-US/docs/Web/API/BiquadFilterNode/gain\"><code>BiquadFilterNode.gain</code></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>An <a href=\"/en-US/docs/Web/API/AudioParam#a-rate\">a-rate</a> <a href=\"/en-US/docs/Web/API/AudioParam\"><code>AudioParam</code></a>, a double representing the <a href=\"https://en.wikipedia.org/wiki/Gain\" class=\"external\" rel=\" noopener\">gain</a> used in the current filtering algorithm.</p>\n  </dd>\n  <dt id=\"biquadfilternode.type\"><a href=\"/en-US/docs/Web/API/BiquadFilterNode/type\"><code>BiquadFilterNode.type</code></a></dt>\n  <dd>\n    <p>A string value defining the kind of filtering algorithm the node is implementing.</p>\n    <table class=\"standard-table\">\n      <caption>\n        The meaning of the different parameters depending of the type of the filter\n        (detune has the same meaning regardless, so isn't listed below)\n      </caption>\n      <thead>\n        <tr>\n          <th scope=\"row\"><code>type</code></th>\n          <th scope=\"col\">Description</th>\n          <th scope=\"col\"><code>frequency</code></th>\n          <th scope=\"col\"><code>Q</code></th>\n          <th scope=\"col\"><code>gain</code></th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <th scope=\"row\"><code>lowpass</code></th>\n          <td>\n            Standard second-order resonant lowpass filter with 12dB/octave rolloff.\n            Frequencies below the cutoff pass through; frequencies above it are\n            attenuated.\n          </td>\n          <td>The cutoff frequency.</td>\n          <td>\n            Indicates how peaked the frequency is around the cutoff. The greater the\n            value is, the greater is the peak.\n          </td>\n          <td><em>Not used</em></td>\n        </tr>\n        <tr>\n          <th scope=\"row\"><code>highpass</code></th>\n          <td>\n            Standard second-order resonant highpass filter with 12dB/octave rolloff.\n            Frequencies below the cutoff are attenuated; frequencies above it pass\n            through.\n          </td>\n          <td>The cutoff frequency.</td>\n          <td>\n            Indicates how peaked the frequency is around the cutoff. The greater the\n            value, the greater the peak.\n          </td>\n          <td><em>Not used</em></td>\n        </tr>\n        <tr>\n          <th scope=\"row\"><code>bandpass</code></th>\n          <td>\n            Standard second-order bandpass filter. Frequencies outside the given\n            range of frequencies are attenuated; the frequencies inside it pass\n            through.\n          </td>\n          <td>The center of the range of frequencies.</td>\n          <td>\n            Controls the width of the frequency band. The greater the\n            <code>Q</code> value, the smaller the frequency band.\n          </td>\n          <td><em>Not used</em></td>\n        </tr>\n        <tr>\n          <th scope=\"row\"><code>lowshelf</code></th>\n          <td>\n            Standard second-order lowshelf filter. Frequencies lower than the\n            frequency get a boost, or an attenuation; frequencies over it are\n            unchanged.\n          </td>\n          <td>The upper limit of the frequencies getting a boost or an attenuation.</td>\n          <td><em>Not used</em></td>\n          <td>The boost, in dB, to be applied; if negative, it will be an attenuation.</td>\n        </tr>\n        <tr>\n          <th scope=\"row\"><code>highshelf</code></th>\n          <td>\n            Standard second-order highshelf filter. Frequencies higher than the\n            frequency get a boost or an attenuation; frequencies lower than it are\n            unchanged.\n          </td>\n          <td>The lower limit of the frequencies getting a boost or an attenuation.</td>\n          <td><em>Not used</em></td>\n          <td>The boost, in dB, to be applied; if negative, it will be an attenuation.</td>\n        </tr>\n        <tr>\n          <th scope=\"row\"><code>peaking</code></th>\n          <td>\n            Frequencies inside the range get a boost or an attenuation; frequencies\n            outside it are unchanged.\n          </td>\n          <td>The middle of the frequency range getting a boost or an attenuation.</td>\n          <td>\n            Controls the width of the frequency band. The greater the\n            <code>Q</code> value, the smaller the frequency band.\n          </td>\n          <td>The boost, in dB, to be applied; if negative, it will be an attenuation.</td>\n        </tr>\n        <tr>\n          <th scope=\"row\"><code>notch</code></th>\n          <td>\n            Standard\n            <a href=\"https://en.wikipedia.org/wiki/Band-stop_filter\" class=\"external\" rel=\" noopener\">notch</a>\n            filter, also called a <em>band-stop</em> or\n            <em>band-rejection</em> filter. It is the opposite of a bandpass filter:\n            frequencies outside the give range of frequencies pass through;\n            frequencies inside it are attenuated.\n          </td>\n          <td>The center of the range of frequencies.</td>\n          <td>\n            Controls the width of the frequency band. The greater the\n            <code>Q</code> value, the smaller the frequency band.\n          </td>\n          <td><em>Not used</em></td>\n        </tr>\n        <tr>\n          <th scope=\"row\"><code>allpass</code></th>\n          <td>\n            Standard second-order\n            <a href=\"https://en.wikipedia.org/wiki/All-pass_filter#Digital_Implementation\" class=\"external\" rel=\" noopener\">allpass</a>\n            filter. It lets all frequencies through, but changes the\n            phase-relationship between the various frequencies.\n          </td>\n          <td>\n            The frequency with the maximal\n            <a href=\"https://en.wikipedia.org/wiki/Group_delay_and_phase_delay\" class=\"external\" rel=\" noopener\">group delay</a>, that is, the frequency where the center of the phase transition\n            occurs.\n          </td>\n          <td>\n            Controls how sharp the transition is at the medium frequency. The larger\n            this parameter is, the sharper and larger the transition will be.\n          </td>\n          <td><em>Not used</em></td>\n        </tr>\n      </tbody>\n    </table>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"methods","title":"Methods","isH3":false,"content":"<p><em>Inherits methods from its parent, <a href=\"/en-US/docs/Web/API/AudioNode\"><code>AudioNode</code></a></em>.</p>\n<dl>\n  <dt id=\"biquadfilternode.getfrequencyresponse\"><a href=\"/en-US/docs/Web/API/BiquadFilterNode/getFrequencyResponse\"><code>BiquadFilterNode.getFrequencyResponse()</code></a></dt>\n  <dd>\n    <p>From the current filter parameter settings this method calculates the frequency response for frequencies specified in the provided array of frequencies.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"example","title":"Example","isH3":false,"content":"<p>See <a href=\"/en-US/docs/Web/API/BaseAudioContext/createBiquadFilter#example\"><code>AudioContext.createBiquadFilter</code></a> for example code that shows how to use an <code>AudioContext</code> to create a Biquad filter node.</p>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://webaudio.github.io/web-audio-api/#BiquadFilterNode","title":"Web Audio API"}],"query":"api.BiquadFilterNode"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.BiquadFilterNode","dataURL":"/en-US/docs/Web/API/BiquadFilterNode/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API\">Using the Web Audio API</a></li>\n</ul>"}}],"toc":[{"text":"Constructor","id":"constructor"},{"text":"Properties","id":"properties"},{"text":"Methods","id":"methods"},{"text":"Example","id":"example"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The BiquadFilterNode interface represents a simple low-order filter, and is created using the BaseAudioContext/createBiquadFilter method. It is an AudioNode that can represent different kinds of filters, tone control devices, and graphic equalizers. A BiquadFilterNode always has exactly one input and one output.","popularity":0.0007,"modified":"2022-09-09T05:07:36.000Z","other_translations":[{"title":"BiquadFilterNode","locale":"fr","native":"Français"},{"title":"BiquadFilterNode","locale":"ko","native":"한국어"},{"title":"BiquadFilterNode","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"BiquadFilterNode","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/web/api/biquadfilternode","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/biquadfilternode/index.md","last_commit_url":"https://github.com/mdn/content/commit/bf30e32f3b51f59080f2c76795beadb247a551eb","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/BiquadFilterNode","title":"BiquadFilterNode"}],"pageTitle":"BiquadFilterNode - Web APIs | MDN","noIndexing":false}}