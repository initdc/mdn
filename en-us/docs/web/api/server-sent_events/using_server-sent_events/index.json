{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Using server-sent events","mdn_url":"/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Server-sent_events\">Server-sent events</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Guides</summary><ol><li><a href=\"/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events\">Using server-sent events</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Interfaces</summary><ol><li><a href=\"/en-US/docs/Web/API/EventSource\"><code>EventSource</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Developing a web application that uses <a href=\"/en-US/docs/Web/API/Server-sent_events\">server-sent events</a> is straightforward. You'll need a bit of code on the server to stream events to the front-end, but the client side code works almost identically to <a href=\"/en-US/docs/Web/API/WebSockets_API\">websockets</a> in part of handling incoming events. This is a one-way connection, so you can't send events from a client to a server.</p>"}},{"type":"prose","value":{"id":"receiving_events_from_the_server","title":"Receiving events from the server","isH3":false,"content":"<p>The server-sent event API is contained in the <a href=\"/en-US/docs/Web/API/EventSource\"><code>EventSource</code></a> interface; to open a connection to the server to begin receiving events from it, create a new <code>EventSource</code> object with the URL of a script that generates the events. For example:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> evtSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ssedemo.php\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>If the event generator script is hosted on a different origin, a new <code>EventSource</code> object should be created with both the URL and an options dictionary. For example, assuming the client script is on <code>example.com</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> evtSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"//api.example.com/ssedemo.php\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">withCredentials</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Once you've instantiated your event source, you can begin listening for messages from the server by attaching a handler for the <a href=\"/en-US/docs/Web/API/EventSource/message_event\" title=\"message\"><code>message</code></a> event:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>evtSource<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"li\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> eventList <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  newElement<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">message: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>event<span class=\"token punctuation\">.</span>data<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  eventList<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>newElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>This code listens for incoming messages (that is, notices from the server that do not have an <code>event</code> field on them) and appends the message text to a list in the document's HTML.</p>\n<p>You can also listen for events with <code>addEventListener()</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>evtSource<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ping\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"li\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> eventList <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> time <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">;</span>\n  newElement<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ping at </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>time<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  eventList<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>newElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>This code is similar, except that it will be called automatically whenever the server sends a message with the <code>event</code> field set to \"ping\"; it then parses the JSON in the <code>data</code> field and outputs that information.</p>\n<div class=\"notecard warning\" id=\"sect1\">\n  <p><strong>Warning:</strong> When <strong>not used over HTTP/2</strong>, SSE suffers from a limitation to the maximum number of open connections, which can be especially painful when opening multiple tabs, as the limit is <em>per browser</em> and is set to a very low number (6). The issue has been marked as \"Won't fix\" in <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=275955\" class=\"external\" rel=\" noopener\">Chrome</a> and <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=906896\" class=\"external\" rel=\" noopener\">Firefox</a>. This limit is per browser + domain, which means that you can open 6 SSE connections across all of the tabs to <code>www.example1.com</code> and another 6 SSE connections to <code>www.example2.com</code> (per <a href=\"https://stackoverflow.com/questions/5195452/websockets-vs-server-sent-events-eventsource/5326159\" class=\"external\" rel=\" noopener\">Stackoverflow</a>). When using HTTP/2, the maximum number of simultaneous <em>HTTP streams</em> is negotiated between the server and the client (defaults to 100).</p>\n</div>"}},{"type":"prose","value":{"id":"sending_events_from_the_server","title":"Sending events from the server","isH3":false,"content":"<p>The server-side script that sends events needs to respond using the MIME type <code>text/event-stream</code>. Each notification is sent as a block of text terminated by a pair of newlines. For details on the format of the event stream, see <a href=\"#event_stream_format\">Event stream format</a>.</p>\n<p>The <a href=\"/en-US/docs/Glossary/PHP\">PHP</a> code for the example we're using here follows:</p>\n<div class=\"code-example\"><pre class=\"brush: php notranslate\"><code><span class=\"token function\">date_default_timezone_set</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"America/New_York\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Cache-Control: no-store\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Content-Type: text/event-stream\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$counter</span> <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Every second, send a \"ping\" event.</span>\n\n  <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"event: ping\\n\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$curDate</span> <span class=\"token operator\">=</span> <span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DATE_ISO8601</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'data: {\"time\": \"'</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$curDate</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'\"}'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"\\n\\n\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Send a simple message at random intervals.</span>\n\n  <span class=\"token variable\">$counter</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$counter</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'data: This is a message at time '</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$curDate</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"\\n\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$counter</span> <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">ob_end_flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Break the loop if the client aborted the connection (closed the page)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">connection_aborted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>\n  The code above generates an event every second, with the event type \"ping\". Each event's data is a JSON object containing the ISO 8601 timestamp corresponding to the time at which the event was generated. At random intervals, a simple message (with no event type) is sent.\n  The loop will keep running independent of the connection status, so a check is included\n  to break the loop if the connection has been closed (e.g. client closes the page).\n</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> You can find a full example that uses the code shown in this article on GitHub — see <a href=\"https://github.com/mdn/dom-examples/tree/main/server-sent-events\" class=\"external\" rel=\" noopener\">Simple SSE demo using PHP</a>.</p>\n</div>"}},{"type":"prose","value":{"id":"error_handling","title":"Error handling","isH3":false,"content":"<p>When problems occur (such as a network timeout or issues pertaining to <a href=\"/en-US/docs/Web/HTTP/CORS\">access control</a>), an error event is generated. You can take action on this programmatically by implementing the <code>onerror</code> callback on the <code>EventSource</code> object:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>evtSource<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"EventSource failed:\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"closing_event_streams","title":"Closing event streams","isH3":false,"content":"<p>By default, if the connection between the client and server closes, the connection is restarted. The connection is terminated with the <code>.close()</code> method.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>evtSource<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"event_stream_format","title":"Event stream format","isH3":false,"content":"<p>The event stream is a simple stream of text data which must be encoded using <a href=\"/en-US/docs/Glossary/UTF-8\">UTF-8</a>. Messages in the event stream are separated by a pair of newline characters. A colon as the first character of a line is in essence a comment, and is ignored.</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> The comment line can be used to prevent connections from timing out; a server can send a comment periodically to keep the connection alive.</p>\n</div>\n<p>Each message consists of one or more lines of text listing the fields for that message. Each field is represented by the field name, followed by a colon, followed by the text data for that field's value.</p>"}},{"type":"prose","value":{"id":"fields","title":"Fields","isH3":true,"content":"<p>Each message received has some combination of the following fields, one per line:</p>\n<dl>\n  <dt id=\"event\"><code>event</code></dt>\n  <dd>\n    <p>A string identifying the type of event described. If this is specified, an event will be dispatched on the browser to the listener for the specified event name; the website source code should use <code>addEventListener()</code> to listen for named events. The <code>onmessage</code> handler is called if no event name is specified for a message.</p>\n  </dd>\n  <dt id=\"data\"><code>data</code></dt>\n  <dd>\n    <p>The data field for the message. When the <code>EventSource</code> receives multiple consecutive lines that begin with <code>data:</code>, <a href=\"https://html.spec.whatwg.org/multipage/#dispatchMessage\" class=\"external\" rel=\" noopener\">it concatenates them</a>, inserting a newline character between each one. Trailing newlines are removed.</p>\n  </dd>\n  <dt id=\"id\"><code>id</code></dt>\n  <dd>\n    <p>The event ID to set the <a href=\"/en-US/docs/Web/API/EventSource\"><code>EventSource</code></a> object's last event ID value.</p>\n  </dd>\n  <dt id=\"retry\"><code>retry</code></dt>\n  <dd>\n    <p>The reconnection time. If the connection to the server is lost, the browser will wait for the specified time before attempting to reconnect. This must be an integer, specifying the reconnection time in milliseconds. If a non-integer value is specified, the field is ignored.</p>\n  </dd>\n</dl>\n<p>All other field names are ignored.</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>Note:</strong> If a line doesn't contain a colon, the entire line is treated as the field name with an empty value string.</p>\n</div>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":true,"content":"<h4 id=\"data-only_messages\">Data-only messages</h4>\n<p>In the following example, there are three messages sent. The first is just a comment, since it starts with a colon character. As mentioned previously, this can be useful as a keep-alive mechanism if messages might not be sent regularly.</p>\n<p>The second message contains a data field with the value \"some text\". The third message contains a data field with the value \"another message\\nwith two lines\". Note the newline special character in the value.</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token builtin class-name\">:</span> this is a <span class=\"token builtin class-name\">test</span> stream\n\ndata: some text\n\ndata: another message\ndata: with two lines\n</code></pre></div>\n<h4 id=\"named_events\">Named events</h4>\n<p>This example sends named events. Each has an event name specified by the <code>event</code> field, and a <code>data</code> field whose value is an appropriate JSON string with the data needed for the client to act on the event. The <code>data</code> field could, of course, have any string data; it doesn't have to be JSON.</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>event: userconnect\ndata: <span class=\"token punctuation\">{</span><span class=\"token string\">\"username\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"bobby\"</span>, <span class=\"token string\">\"time\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"02:33:48\"</span><span class=\"token punctuation\">}</span>\n\nevent: usermessage\ndata: <span class=\"token punctuation\">{</span><span class=\"token string\">\"username\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"bobby\"</span>, <span class=\"token string\">\"time\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"02:34:11\"</span>, <span class=\"token string\">\"text\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Hi everyone.\"</span><span class=\"token punctuation\">}</span>\n\nevent: userdisconnect\ndata: <span class=\"token punctuation\">{</span><span class=\"token string\">\"username\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"bobby\"</span>, <span class=\"token string\">\"time\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"02:34:23\"</span><span class=\"token punctuation\">}</span>\n\nevent: usermessage\ndata: <span class=\"token punctuation\">{</span><span class=\"token string\">\"username\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"sean\"</span>, <span class=\"token string\">\"time\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"02:34:36\"</span>, <span class=\"token string\">\"text\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Bye, bobby.\"</span><span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"mixing_and_matching\">Mixing and matching</h4>\n<p>You don't have to use just unnamed messages or typed events; you can mix them together in a single event stream.</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>event: userconnect\ndata: <span class=\"token punctuation\">{</span><span class=\"token string\">\"username\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"bobby\"</span>, <span class=\"token string\">\"time\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"02:33:48\"</span><span class=\"token punctuation\">}</span>\n\ndata: Here's a system message of some kind that will get used\ndata: to accomplish some task.\n\nevent: usermessage\ndata: <span class=\"token punctuation\">{</span><span class=\"token string\">\"username\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"bobby\"</span>, <span class=\"token string\">\"time\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"02:34:11\"</span>, <span class=\"token string\">\"text\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Hi everyone.\"</span><span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.EventSource","dataURL":"/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events/bcd.json"}}],"toc":[{"text":"Receiving events from the server","id":"receiving_events_from_the_server"},{"text":"Sending events from the server","id":"sending_events_from_the_server"},{"text":"Error handling","id":"error_handling"},{"text":"Closing event streams","id":"closing_event_streams"},{"text":"Event stream format","id":"event_stream_format"},{"text":"Browser compatibility","id":"browser_compatibility"}],"summary":"Developing a web application that uses server-sent events is straightforward. You'll need a bit of code on the server to stream events to the front-end, but the client side code works almost identically to websockets in part of handling incoming events. This is a one-way connection, so you can't send events from a client to a server.","popularity":0.0102,"modified":"2022-09-09T05:18:40.000Z","other_translations":[{"title":"Utilizando eventos enviados por el servidor (server-sent event)","locale":"es","native":"Español"},{"title":"Utiliser les évènements envoyés par le serveur","locale":"fr","native":"Français"},{"title":"サーバー送信イベントの使用","locale":"ja","native":"日本語"},{"title":"Server-Sent Events 사용하기","locale":"ko","native":"한국어"},{"title":"Using server-sent events","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Using server-sent events","locale":"ru","native":"Русский"},{"title":"使用服务器发送事件","locale":"zh-CN","native":"中文 (简体)"},{"title":"使用 server-sent 事件","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"en-us/web/api/server-sent_events/using_server-sent_events","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/server-sent_events/using_server-sent_events/index.md","last_commit_url":"https://github.com/mdn/content/commit/e0e09b1df51489867f2e74c18586d168ba5e00d1","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/Server-sent_events","title":"Server-sent events"},{"uri":"/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events","title":"Using server-sent events"}],"pageTitle":"Using server-sent events - Web APIs | MDN","noIndexing":false}}