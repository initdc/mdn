{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"PaymentResponse.retry()","mdn_url":"/en-US/docs/Web/API/PaymentResponse/retry","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Payment_Request_API\">Payment Request API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/PaymentResponse\"><code>PaymentResponse</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/API/PaymentResponse/details\"><code>details</code></a></li><li><a href=\"/en-US/docs/Web/API/PaymentResponse/methodName\"><code>methodName</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/API/PaymentResponse/payerEmail\"><code>payerEmail</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/API/PaymentResponse/payerName\"><code>payerName</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/API/PaymentResponse/payerPhone\"><code>payerPhone</code></a></li><li><a href=\"/en-US/docs/Web/API/PaymentResponse/requestId\"><code>requestId</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/API/PaymentResponse/shippingAddress\"><code>shippingAddress</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/API/PaymentResponse/shippingOption\"><code>shippingOption</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/PaymentResponse/complete\"><code>complete()</code></a></li><li><em><code>retry()</code></em></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Events</summary><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/API/PaymentResponse/payerdetailchange_event\"><code>payerdetailchange</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Inheritance:</summary><ol><li><a href=\"/en-US/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Payment Request API</summary><ol><li><a href=\"/en-US/docs/Web/API/HTMLIFrameElement/allowPaymentRequest\"><code>HTMLIFrameElement.allowPaymentRequest</code></a></li><li><a href=\"/en-US/docs/Web/API/MerchantValidationEvent\"><code>MerchantValidationEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/PaymentAddress\"><code>PaymentAddress</code></a></li><li><a href=\"/en-US/docs/Web/API/PaymentMethodChangeEvent\"><code>PaymentMethodChangeEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/PaymentRequest\"><code>PaymentRequest</code></a></li><li><a href=\"/en-US/docs/Web/API/PaymentRequestUpdateEvent\"><code>PaymentRequestUpdateEvent</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard secure\" id=\"sect1\"><p><strong>Secure context:</strong> This feature is available only in <a href=\"/en-US/docs/Web/Security/Secure_Contexts\">secure contexts</a> (HTTPS), in some or all <a href=\"#browser_compatibility\">supporting browsers</a>.</p></div>\n<p>\n  The <a href=\"/en-US/docs/Web/API/PaymentResponse\"><code>PaymentResponse</code></a> interface's\n  <strong><code>retry()</code></strong> method makes it possible to ask the user to\n  retry a payment after an error occurs during processing.\n</p>\n<p>\n  This lets your app\n  gracefully deal with situations such as invalid shipping addresses or declined credit\n  cards.\n</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js-nolint notranslate\">retry(errorFields)\n</pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"errorfields\"><code>errorFields</code></dt>\n  <dd>\n    <p>An object, with the following properties:</p>\n    <dl>\n      <dt id=\"error\"><code>error</code> <span class=\"badge inline optional\">Optional</span></dt>\n      <dd>\n        <p>A general description of a payment error from which the user may attempt to recover by retrying the payment, possibly after correcting mistakes in the payment information. <code>error</code> can be provided all by itself to provide only a generic error message, or in concert with the other properties to serve as an overview while other properties' values guide the user to errors in specific fields in the payment form.</p>\n      </dd>\n      <dt id=\"paymentmethod\">`paymentMethod <span class=\"badge inline optional\">Optional</span></dt>\n      <dd>\n        <p>Any payment-method-specific errors which may have occurred. This object's contents will vary depending on the payment method used.</p>\n      </dd>\n    </dl>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>\n  A <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> which is resolved when the payment is successfully completed.\n  The promise is rejected with an appropriate exception value if the payment fails again.\n</p>\n<p>\n  Typically you will use this by calling <a href=\"/en-US/docs/Web/API/PaymentRequest/show\" title=\"show()\"><code>show()</code></a>,\n  then entering a loop or recursive function that checks the\n  <a href=\"/en-US/docs/Web/API/PaymentResponse\"><code>PaymentResponse</code></a> for errors or other reasons to retry the payment request.\n  If a retry is needed, the loop calls <code>retry()</code>, then loops back to check the\n  response when it comes in. The loop exits only when the user either cancels the payment\n  request or the request is successful.\n</p>\n<p>\n  See the <a href=\"#examples\">example</a> below for a thorough example, but the basic\n  concept, in outline form, is:\n</p>\n<ol>\n  <li>\n    Create a new <a href=\"/en-US/docs/Web/API/PaymentRequest\"><code>PaymentRequest</code></a>\n    (<code>new</code> <a href=\"/en-US/docs/Web/API/PaymentRequest/PaymentRequest\" title=\"PaymentRequest()\"><code>PaymentRequest()</code></a>)\n  </li>\n  <li>Display the payment request (<a href=\"/en-US/docs/Web/API/PaymentRequest/show\"><code>PaymentRequest.show()</code></a></li>\n  <li>\n    If <code>show()</code> resolves, the returned <a href=\"/en-US/docs/Web/API/PaymentResponse\"><code>PaymentResponse</code></a>\n    describes the requested payment and the options chosen by the user. Continue with the following steps:\n    <ol>\n      <li>\n        Validate the returned response; if there are any fields whose values are not\n        acceptable, call the response's <a href=\"/en-US/docs/Web/API/PaymentResponse/complete\" title=\"complete()\"><code>complete()</code></a> method with a value of <code>\"fail\"</code> to indicate failure.\n      </li>\n      <li>\n        If the response's data is valid and acceptable, call\n        <code>complete(\"success\")</code> to finalize the payment and process it.\n      </li>\n    </ol>\n  </li>\n  <li>\n    If <code>show()</code> is rejected, the payment request failed, usually because\n    either there's already one being processed, because the <a href=\"/en-US/docs/Glossary/User_agent\">user agent</a>\n    doesn't support any of the specified payment methods, or because of a security issue.\n    See the <a href=\"/en-US/docs/Web/API/PaymentRequest/show#exceptions\">list of exceptions</a> for <code>show()</code> for further details. Call\n    <code>complete(\"fail\")</code> to close the payment request.\n  </li>\n</ol>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handlePayment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> payRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PaymentRequest</span><span class=\"token punctuation\">(</span>methodData<span class=\"token punctuation\">,</span> details<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> payResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> payRequest<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>payResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/* let the user edit the payment information,\n         wait until they submit */</span>\n      <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">retry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">await</span> payResponse<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"success\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* handle the exception */</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">doPaymentRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PaymentRequest</span><span class=\"token punctuation\">(</span>methodData<span class=\"token punctuation\">,</span> details<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">recursiveValidate</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"success\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Keep validating until the data looks good!</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">recursiveValidate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> promisesToFixThings <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> errors <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>errors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errors<span class=\"token punctuation\">.</span>shippingAddress<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// \"shippingaddresschange\" fired at request object</span>\n    <span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token function\">fixField</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">\"shippingaddresschange\"</span><span class=\"token punctuation\">,</span> shippingValidator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    promisesToFixThings<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errors<span class=\"token punctuation\">.</span>payer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// \"payerdetailchange\" fired at response object</span>\n    <span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token function\">fixField</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> <span class=\"token string\">\"payerdetailchange\"</span><span class=\"token punctuation\">,</span> payerValidator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    promisesToFixThings<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">retry</span><span class=\"token punctuation\">(</span>errors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>promisesToFixThings<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">recursiveValidate</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fixField</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">requestOrResponse<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">,</span> validator</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Browser keeps calling this until promise resolves.</span>\n    requestOrResponse<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">listener</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ev</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> promiseToValidate <span class=\"token operator\">=</span> <span class=\"token function\">validator</span><span class=\"token punctuation\">(</span>requestOrResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      ev<span class=\"token punctuation\">.</span><span class=\"token function\">updateWith</span><span class=\"token punctuation\">(</span>promiseToValidate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> errors <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> promiseToValidate<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>errors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// yay! fixed!</span>\n        event<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">doPaymentRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/payment-request/#dom-paymentresponse-retry","title":"Payment Request API"}],"query":"api.PaymentResponse.retry"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.PaymentResponse.retry","dataURL":"/en-US/docs/Web/API/PaymentResponse/retry/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/PaymentResponse\"><code>PaymentResponse</code></a> interface.</li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The PaymentResponse interface's\n  retry() method makes it possible to ask the user to\n  retry a payment after an error occurs during processing.","popularity":0,"modified":"2022-09-13T06:09:49.000Z","source":{"folder":"en-us/web/api/paymentresponse/retry","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/paymentresponse/retry/index.md","last_commit_url":"https://github.com/mdn/content/commit/2b8f5d9a29f00aea5d2edfa78d1fb90c51752858","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/PaymentResponse","title":"PaymentResponse"},{"uri":"/en-US/docs/Web/API/PaymentResponse/retry","title":"PaymentResponse.retry()"}],"pageTitle":"PaymentResponse.retry() - Web APIs | MDN","noIndexing":false}}