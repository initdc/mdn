{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"IDBObjectStore.createIndex()","mdn_url":"/en-US/docs/Web/API/IDBObjectStore/createIndex","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/IndexedDB_API\">IndexedDB API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/IDBObjectStore\"><code>IDBObjectStore</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/API/IDBObjectStore/autoIncrement\"><code>autoIncrement</code></a></li><li><a href=\"/en-US/docs/Web/API/IDBObjectStore/indexNames\"><code>indexNames</code></a></li><li><a href=\"/en-US/docs/Web/API/IDBObjectStore/keyPath\"><code>keyPath</code></a></li><li><a href=\"/en-US/docs/Web/API/IDBObjectStore/name\"><code>name</code></a></li><li><a href=\"/en-US/docs/Web/API/IDBObjectStore/transaction\"><code>transaction</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/IDBObjectStore/add\"><code>add()</code></a></li><li><a href=\"/en-US/docs/Web/API/IDBObjectStore/clear\"><code>clear()</code></a></li><li><a href=\"/en-US/docs/Web/API/IDBObjectStore/count\"><code>count()</code></a></li><li><em><code>createIndex()</code></em></li><li><a href=\"/en-US/docs/Web/API/IDBObjectStore/delete\"><code>delete()</code></a></li><li><a href=\"/en-US/docs/Web/API/IDBObjectStore/deleteIndex\"><code>deleteIndex()</code></a></li><li><a href=\"/en-US/docs/Web/API/IDBObjectStore/get\"><code>get()</code></a></li><li><a href=\"/en-US/docs/Web/API/IDBObjectStore/getAll\"><code>getAll()</code></a></li><li><a href=\"/en-US/docs/Web/API/IDBObjectStore/getAllKeys\"><code>getAllKeys()</code></a></li><li><a href=\"/en-US/docs/Web/API/IDBObjectStore/getKey\"><code>getKey()</code></a></li><li><a href=\"/en-US/docs/Web/API/IDBObjectStore/index\"><code>index()</code></a></li><li><a href=\"/en-US/docs/Web/API/IDBObjectStore/openCursor\"><code>openCursor()</code></a></li><li><a href=\"/en-US/docs/Web/API/IDBObjectStore/openKeyCursor\"><code>openKeyCursor()</code></a></li><li><a href=\"/en-US/docs/Web/API/IDBObjectStore/put\"><code>put()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for IndexedDB</summary><ol><li><a href=\"/en-US/docs/Web/API/IDBCursor\"><code>IDBCursor</code></a></li><li><a href=\"/en-US/docs/Web/API/IDBCursorWithValue\"><code>IDBCursorWithValue</code></a></li><li><a href=\"/en-US/docs/Web/API/IDBDatabase\"><code>IDBDatabase</code></a></li><li><a href=\"/en-US/docs/Web/API/IDBFactory\"><code>IDBFactory</code></a></li><li><a href=\"/en-US/docs/Web/API/IDBIndex\"><code>IDBIndex</code></a></li><li><a href=\"/en-US/docs/Web/API/IDBKeyRange\"><code>IDBKeyRange</code></a></li><li><a href=\"/en-US/docs/Web/API/IDBOpenDBRequest\"><code>IDBOpenDBRequest</code></a></li><li><a href=\"/en-US/docs/Web/API/IDBRequest\"><code>IDBRequest</code></a></li><li><a href=\"/en-US/docs/Web/API/IDBTransaction\"><code>IDBTransaction</code></a></li><li><a href=\"/en-US/docs/Web/API/IDBVersionChangeEvent\"><code>IDBVersionChangeEvent</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>\n  The <strong><code>createIndex()</code></strong> method of the\n  <a href=\"/en-US/docs/Web/API/IDBObjectStore\"><code>IDBObjectStore</code></a> interface creates and returns a new\n  <a href=\"/en-US/docs/Web/API/IDBIndex\"><code>IDBIndex</code></a> object in the connected database. It creates a new\n  field/column defining a new data point for each database record to contain.\n</p>\n<p>\n  Bear in mind that IndexedDB indexes can contain <em>any</em> JavaScript data type;\n  IndexedDB uses the <a href=\"/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\">structured clone algorithm</a> to serialize stored objects, which allows for storage of simple\n  and complex objects.\n</p>\n<p>\n  Note that this method must be called only from a <code>VersionChange</code> transaction\n  mode callback.\n</p><div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> This feature is available in <a href=\"/en-US/docs/Web/API/Web_Workers_API\">Web Workers</a></p>\n</div>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js-nolint notranslate\">createIndex(indexName, keyPath)\ncreateIndex(indexName, keyPath, objectParameters)\n</pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"indexname\"><code>indexName</code></dt>\n  <dd>\n    <p>\n      The name of the index to create. Note that it is possible to create an index with an\n      empty name.\n    </p>\n  </dd>\n  <dt id=\"keypath\"><code>keyPath</code></dt>\n  <dd>\n    <p>\n      The key path for the index to use. Note that it is possible to create an index with\n      an empty <code>keyPath</code>, and also to pass in a sequence (array) as a\n      <code>keyPath</code>.\n    </p>\n  </dd>\n  <dt id=\"objectparameters\"><code>objectParameters</code> <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>\n      An object which can include the following\n      properties:\n    </p>\n    <dl>\n      <dt id=\"unique\"><code>unique</code></dt>\n      <dd>\n        <p>If true, the index will not allow duplicate values for a single key.</p>\n      </dd>\n      <dt id=\"multientry\"><code>multiEntry</code></dt>\n      <dd>\n        <p>\n          If <code>true</code>, the index will add an entry in the index for each\n          array element when the <code>keyPath</code> resolves to an array.\n          If <code>false</code>, it will add one single entry containing the array.\n        </p>\n      </dd>\n      <dt id=\"locale\"><code>locale</code> <svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg></dt>\n      <dd>\n        <p>\n          Currently Firefox-only (43+), this allows you to specify a locale for the index.\n          Any sorting operations performed on the data via key ranges will then obey sorting rules of that locale\n          (see <a href=\"/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB#locale-aware_sorting\">locale-aware sorting</a>).\n          You can specify its value in one of three ways:\n        </p>\n        <ul>\n          <li><code>string</code>: A string containing a specific locale code, e.g. <code>en-US</code>, or <code>pl</code>.</li>\n          <li><code>auto</code>: The platform default locale will be used (may be changed by user agent settings).</li>\n          <li><code>null</code> or <code>undefined</code>: If no locale is specified, normal JavaScript sorting will be used â€” not locale-aware.</li>\n        </ul>\n      </dd>\n    </dl>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>An <a href=\"/en-US/docs/Web/API/IDBIndex\"><code>IDBIndex</code></a> object: the newly created index.</p>"}},{"type":"prose","value":{"id":"exceptions","title":"Exceptions","isH3":true,"content":"<p>This method may raise a <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a> of one of the following types:</p>\n<dl>\n  <dt id=\"constrainterror\"><code>ConstraintError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>Thrown if an index with the same name already exists in the database. Index names are case-sensitive.</p>\n  </dd>\n  <dt id=\"invalidaccesserror\"><code>InvalidAccessError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>Thrown if the provided key path is a sequence, and <code>multiEntry</code> is set to <code>true</code> in the <code>objectParameters</code> object.</p>\n  </dd>\n  <dt id=\"invalidstateerror\"><code>InvalidStateError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>Thrown if:</p>\n    <ul>\n      <li>The method was not called from a <code>versionchange</code> transaction mode callback, i.e. from inside a <a href=\"/en-US/docs/Web/API/IDBOpenDBRequest/upgradeneeded_event\" title=\"onupgradeneeded\"><code>onupgradeneeded</code></a> handler.</li>\n      <li>The object store has been deleted.</li>\n    </ul>\n  </dd>\n  <dt id=\"syntaxerror\"><code>SyntaxError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>Thrown if the provided <code>keyPath</code> is not a <a href=\"https://www.w3.org/TR/IndexedDB/#dfn-valid-key-path\" class=\"external\" rel=\" noopener\">valid key path</a>.</p>\n  </dd>\n  <dt id=\"transactioninactiveerror\"><code>TransactionInactiveError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>\n      Thrown if the transaction this <a href=\"/en-US/docs/Web/API/IDBObjectStore\"><code>IDBObjectStore</code></a>\n      belongs to is not active (e.g. has been deleted or removed.) In Firefox\n      previous to version 41, an <code>InvalidStateError</code> was raised in\n      this case as well, which was misleading; this has now been fixed (see\n      <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1176165\" class=\"external\" rel=\" noopener\">bug&nbsp;1176165</a>.)\n    </p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<p>\n  In the following example you can see\n  the <a href=\"/en-US/docs/Web/API/IDBOpenDBRequest/upgradeneeded_event\" title=\"onupgradeneeded\"><code>onupgradeneeded</code></a> handler being used to update the\n  database structure if a database with a higher version number is loaded.\n  <code>createIndex()</code> is used to create new indexes on the object store. For a\n  full working example, see our <a href=\"https://github.com/mdn/dom-examples/tree/main/to-do-notifications\" class=\"external\" rel=\" noopener\">To-do Notifications</a> app (<a href=\"https://mdn.github.io/dom-examples/to-do-notifications/\" class=\"external\" rel=\" noopener\">view example live</a>).\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> db<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Let us open our database</span>\n<span class=\"token keyword\">const</span> DBOpenRequest <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>indexedDB<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toDoList\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Two event handlers for opening the database.</span>\nDBOpenRequest<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  note<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">+=</span> <span class=\"token string\">'&lt;li&gt;Error loading database.&lt;/li&gt;'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nDBOpenRequest<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onsuccess</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  note<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">+=</span> <span class=\"token string\">'&lt;li&gt;Database initialized.&lt;/li&gt;'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// store the result of opening the database in the db variable.</span>\n  <span class=\"token comment\">// This is used a lot below.</span>\n  db <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Run the displayData() function to populate the task list with</span>\n  <span class=\"token comment\">// all the to-do list data already in the IDB</span>\n  <span class=\"token function\">displayData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// This handler fires when a new database is created and indicates</span>\n<span class=\"token comment\">// either that one has not been created before, or a new version</span>\n<span class=\"token comment\">// was submitted with window.indexedDB.open(). (See above.)</span>\n<span class=\"token comment\">// It is only implemented in recent browsers.</span>\nDBOpenRequest<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onupgradeneeded</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">;</span>\n\n  db<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    note<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">+=</span> <span class=\"token string\">'&lt;li&gt;Error loading database.&lt;/li&gt;'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Create an objectStore for this database</span>\n  <span class=\"token keyword\">const</span> objectStore <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">createObjectStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toDoList\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">keyPath</span><span class=\"token operator\">:</span> <span class=\"token string\">\"taskTitle\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// define what data items the objectStore will contain</span>\n\n  objectStore<span class=\"token punctuation\">.</span><span class=\"token function\">createIndex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hours\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hours\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">unique</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  objectStore<span class=\"token punctuation\">.</span><span class=\"token function\">createIndex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"minutes\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"minutes\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">unique</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  objectStore<span class=\"token punctuation\">.</span><span class=\"token function\">createIndex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"day\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"day\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">unique</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  objectStore<span class=\"token punctuation\">.</span><span class=\"token function\">createIndex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"month\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"month\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">unique</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  objectStore<span class=\"token punctuation\">.</span><span class=\"token function\">createIndex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"year\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"year\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">unique</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  objectStore<span class=\"token punctuation\">.</span><span class=\"token function\">createIndex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"notified\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"notified\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">unique</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/IndexedDB/#ref-for-dom-idbobjectstore-createindexâ‘ ","title":"Indexed Database API 3.0"}],"query":"api.IDBObjectStore.createIndex"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.IDBObjectStore.createIndex","dataURL":"/en-US/docs/Web/API/IDBObjectStore/createIndex/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB\">Using IndexedDB</a></li>\n  <li>Starting transactions: <a href=\"/en-US/docs/Web/API/IDBDatabase\"><code>IDBDatabase</code></a></li>\n  <li>Using transactions: <a href=\"/en-US/docs/Web/API/IDBTransaction\"><code>IDBTransaction</code></a></li>\n  <li>Setting a range of keys: <a href=\"/en-US/docs/Web/API/IDBKeyRange\"><code>IDBKeyRange</code></a></li>\n  <li>Retrieving and making changes to your data: <a href=\"/en-US/docs/Web/API/IDBObjectStore\"><code>IDBObjectStore</code></a></li>\n  <li>Using cursors: <a href=\"/en-US/docs/Web/API/IDBCursor\"><code>IDBCursor</code></a></li>\n  <li>Reference example: <a href=\"https://github.com/mdn/dom-examples/tree/main/to-do-notifications\" class=\"external\" rel=\" noopener\">To-do Notifications</a> (<a href=\"https://mdn.github.io/dom-examples/to-do-notifications/\" class=\"external\" rel=\" noopener\">View the example live</a>).</li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The createIndex() method of the\n  IDBObjectStore interface creates and returns a new\n  IDBIndex object in the connected database. It creates a new\n  field/column defining a new data point for each database record to contain.","popularity":0.0006,"modified":"2022-09-30T09:50:26.000Z","other_translations":[{"title":"IDBObjectStore.createIndex()","locale":"fr","native":"FranÃ§ais"}],"source":{"folder":"en-us/web/api/idbobjectstore/createindex","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/idbobjectstore/createindex/index.md","last_commit_url":"https://github.com/mdn/content/commit/d42b609444efb915ab46117f59985d67dda21eb6","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/IDBObjectStore","title":"IDBObjectStore"},{"uri":"/en-US/docs/Web/API/IDBObjectStore/createIndex","title":"IDBObjectStore.createIndex()"}],"pageTitle":"IDBObjectStore.createIndex() - Web APIs | MDN","noIndexing":false}}