{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Cache.put()","mdn_url":"/en-US/docs/Web/API/Cache/put","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Service_Worker_API\">Service Worker API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/Cache\"><code>Cache</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/Cache/add\"><code>add()</code></a></li><li><a href=\"/en-US/docs/Web/API/Cache/addAll\"><code>addAll()</code></a></li><li><a href=\"/en-US/docs/Web/API/Cache/delete\"><code>delete()</code></a></li><li><a href=\"/en-US/docs/Web/API/Cache/keys\"><code>keys()</code></a></li><li><a href=\"/en-US/docs/Web/API/Cache/match\"><code>match()</code></a></li><li><a href=\"/en-US/docs/Web/API/Cache/matchAll\"><code>matchAll()</code></a></li><li><em><code>put()</code></em></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Service Workers API</summary><ol><li><a href=\"/en-US/docs/Web/API/CacheStorage\"><code>CacheStorage</code></a></li><li><a href=\"/en-US/docs/Web/API/Client\"><code>Client</code></a></li><li><a href=\"/en-US/docs/Web/API/Clients\"><code>Clients</code></a></li><li><a href=\"/en-US/docs/Web/API/ExtendableEvent\"><code>ExtendableEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/FetchEvent\"><code>FetchEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/InstallEvent\"><code>InstallEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/Navigator/serviceWorker\"><code>Navigator.serviceWorker</code></a></li><li><a href=\"/en-US/docs/Web/API/NotificationEvent\"><code>NotificationEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/PeriodicSyncEvent\"><code>PeriodicSyncEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/PeriodicSyncManager\"><code>PeriodicSyncManager</code></a></li><li><a href=\"/en-US/docs/Web/API/ServiceWorker\"><code>ServiceWorker</code></a></li><li><a href=\"/en-US/docs/Web/API/ServiceWorkerContainer\"><code>ServiceWorkerContainer</code></a></li><li><a href=\"/en-US/docs/Web/API/ServiceWorkerGlobalScope\"><code>ServiceWorkerGlobalScope</code></a></li><li><a href=\"/en-US/docs/Web/API/ServiceWorkerRegistration\"><code>ServiceWorkerRegistration</code></a></li><li><a href=\"/en-US/docs/Web/API/SyncEvent\"><code>SyncEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/SyncManager\"><code>SyncManager</code></a></li><li><a href=\"/en-US/docs/Web/API/WindowClient\"><code>WindowClient</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>\n  The <strong><code>put()</code></strong> method of the\n  <a href=\"/en-US/docs/Web/API/Cache\"><code>Cache</code></a> interface allows key/value pairs to be added to the current\n  <a href=\"/en-US/docs/Web/API/Cache\"><code>Cache</code></a> object.\n</p>\n<p>\n  Often, you will just want to <a href=\"/en-US/docs/Web/API/fetch\"><code>fetch()</code></a>\n  one or more requests, then add the result straight to your cache. In such cases you are\n  better off using\n  <a href=\"/en-US/docs/Web/API/Cache/add\" title=\"Cache.add()\"><code>Cache.add()</code></a>/<a href=\"/en-US/docs/Web/API/Cache/addAll\" title=\"Cache.addAll()\"><code>Cache.addAll()</code></a>, as\n  they are shorthand functions for one or more of these operations.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad response status\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect1\">\n  <p>\n    <strong>Note:</strong> <code>put()</code> will overwrite any key/value pair\n    previously stored in the cache that matches the request.\n  </p>\n</div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p>\n    <strong>Note:</strong> <a href=\"/en-US/docs/Web/API/Cache/add\"><code>Cache.add</code></a>/<a href=\"/en-US/docs/Web/API/Cache/addAll\"><code>Cache.addAll</code></a> do not\n    cache responses with <code>Response.status</code> values that are not in the 200\n    range, whereas <a href=\"/en-US/docs/Web/API/Cache/put\" aria-current=\"page\"><code>Cache.put</code></a> lets you store any request/response pair. As a\n    result, <a href=\"/en-US/docs/Web/API/Cache/add\"><code>Cache.add</code></a>/<a href=\"/en-US/docs/Web/API/Cache/addAll\"><code>Cache.addAll</code></a> can't be used to store\n    opaque responses, whereas <a href=\"/en-US/docs/Web/API/Cache/put\" aria-current=\"page\"><code>Cache.put</code></a> can.\n  </p>\n</div>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js-nolint notranslate\">put(request, response)\n</pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"request\"><code>request</code></dt>\n  <dd>\n    <p>The <a href=\"/en-US/docs/Web/API/Request\"><code>Request</code></a> object or URL that you want to add to the cache.</p>\n  </dd>\n  <dt id=\"response\"><code>response</code></dt>\n  <dd>\n    <p>The <a href=\"/en-US/docs/Web/API/Response\"><code>Response</code></a> you want to match up to the request.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>A <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> that resolves with <code>undefined</code>.</p>"}},{"type":"prose","value":{"id":"exceptions","title":"Exceptions","isH3":true,"content":"<dl>\n  <dt id=\"typeerror\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a></dt>\n  <dd>\n    <p>Returned if the URL scheme is not <code>http</code> or <code>https</code>.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<p>\n  This example is from the MDN <a href=\"https://github.com/mdn/dom-examples/tree/main/service-worker/simple-service-worker\" class=\"external\" rel=\" noopener\">simple-service-worker example</a> (see <a href=\"https://bncb2v.csb.app/\" class=\"external\" rel=\" noopener\">simple-service-worker running live</a>).\n  Here we wait for a <a href=\"/en-US/docs/Web/API/FetchEvent\"><code>FetchEvent</code></a> to fire. We construct a custom response\n  like so:\n</p>\n<ol>\n  <li>\n    Check whether a match for the request is found in the <a href=\"/en-US/docs/Web/API/CacheStorage\"><code>CacheStorage</code></a>\n    using <a href=\"/en-US/docs/Web/API/CacheStorage/match\" title=\"CacheStorage.match()\"><code>CacheStorage.match()</code></a>. If so, serve that.\n  </li>\n  <li>\n    If not, open the <code>v1</code> cache using <code>open()</code>, put the default\n    network request in the cache using <a href=\"/en-US/docs/Web/API/Cache/put\" title=\"Cache.put()\" aria-current=\"page\"><code>Cache.put()</code></a> and return a\n    clone of the default network request using <code>return response.clone()</code>. Clone\n    is needed because <code>put()</code> consumes the response body.\n  </li>\n  <li>If this fails (e.g., because the network is down), return a fallback response.</li>\n</ol>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> response<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> cachedResponse <span class=\"token operator\">=</span> caches\n  <span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    response <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span>\n    caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cache</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      cache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/gallery/myLittleVader.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/ServiceWorker/#cache-put","title":"Service Workers 1"}],"query":"api.Cache.put"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.Cache.put","dataURL":"/en-US/docs/Web/API/Cache/put/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers\">Using Service Workers</a></li>\n  <li><a href=\"/en-US/docs/Web/API/Cache\"><code>Cache</code></a></li>\n  <li><a href=\"/en-US/docs/Web/API/caches\"><code>caches</code></a></li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The put() method of the\n  Cache interface allows key/value pairs to be added to the current\n  Cache object.","popularity":0.0008,"modified":"2022-09-13T05:19:21.000Z","other_translations":[{"title":"Cache.put()","locale":"fr","native":"Français"},{"title":"Cache.put()","locale":"ja","native":"日本語"},{"title":"Cache.put()","locale":"ko","native":"한국어"},{"title":"Cache.put()","locale":"ru","native":"Русский"},{"title":"Cache.put()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/web/api/cache/put","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/cache/put/index.md","last_commit_url":"https://github.com/mdn/content/commit/9ad07c43f42e14278a4040fd554af33699aea632","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/Cache","title":"Cache"},{"uri":"/en-US/docs/Web/API/Cache/put","title":"Cache.put()"}],"pageTitle":"Cache.put() - Web APIs | MDN","noIndexing":false}}