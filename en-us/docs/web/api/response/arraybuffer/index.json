{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Response.arrayBuffer()","mdn_url":"/en-US/docs/Web/API/Response/arrayBuffer","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Response\"><code>Response</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/API/Response/Response\"><code>Response()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/API/Response/body\"><code>body</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/bodyUsed\"><code>bodyUsed</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/headers\"><code>headers</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/ok\"><code>ok</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/redirected\"><code>redirected</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/status\"><code>status</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/statusText\"><code>statusText</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/type\"><code>type</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/url\"><code>url</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><em><code>arrayBuffer()</code></em></li><li><a href=\"/en-US/docs/Web/API/Response/blob\"><code>blob()</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/clone\"><code>clone()</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/error\"><code>error()</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/formData\"><code>formData()</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/json\"><code>json()</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/redirect\"><code>redirect()</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/text\"><code>text()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>\n  The <strong><code>arrayBuffer()</code></strong> method of the <a href=\"/en-US/docs/Web/API/Response\"><code>Response</code></a> interface\n  takes a <a href=\"/en-US/docs/Web/API/Response\"><code>Response</code></a> stream and reads it to completion. It returns a promise\n  that resolves with an <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>.\n</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js-nolint notranslate\">arrayBuffer()\n</pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<p>None.</p>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>A promise that resolves with an <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>.</p>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"playing_music","title":"Playing music","isH3":true,"content":"<p>\n  In our <a href=\"https://github.com/mdn/dom-examples/tree/main/fetch/fetch-array-buffer\" class=\"external\" rel=\" noopener\">fetch array buffer live</a>, we have a Play button. When pressed, the <code>getData()</code>\n  function is run. Note that before playing full audio file will be downloaded. If you\n  need to play ogg during downloading (stream it) - consider\n  <a href=\"/en-US/docs/Web/API/HTMLAudioElement\"><code>HTMLAudioElement</code></a>:\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">Audio</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"music.ogg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>\n  In <code>getData()</code> we create a new request using the\n  <a href=\"/en-US/docs/Web/API/Request/Request\" title=\"Request()\"><code>Request()</code></a> constructor, then use it to fetch an OGG\n  music track. We also use <a href=\"/en-US/docs/Web/API/BaseAudioContext/createBufferSource\" title=\"AudioContext.createBufferSource\"><code>AudioContext.createBufferSource</code></a> to create an\n  audio buffer source. When the fetch is successful, we read an <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>\n  out of the response using <code>arrayBuffer()</code>, decode the audio data using\n  <a href=\"/en-US/docs/Web/API/BaseAudioContext/decodeAudioData\" title=\"AudioContext.decodeAudioData()\"><code>AudioContext.decodeAudioData()</code></a>, set the decoded data as the audio buffer\n  source's buffer (<code>source.buffer</code>), then connect the source up to the\n  <a href=\"/en-US/docs/Web/API/BaseAudioContext/destination\" title=\"AudioContext.destination\"><code>AudioContext.destination</code></a>.\n</p>\n<p>\n  Once <code>getData()</code> has finished running, we start the audio source playing\n  with <code>start(0)</code>, then disable the play button so it can't be clicked again\n  when it is already playing (this would cause an error.)\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> audioCtx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AudioContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'viper.ogg'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">HTTP error, status = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>response<span class=\"token punctuation\">.</span>status<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">arrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">buffer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">decodeAudioData</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">decodedData</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> source <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AudioBufferSourceNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      source<span class=\"token punctuation\">.</span>buffer <span class=\"token operator\">=</span> decodedData<span class=\"token punctuation\">;</span>\n      source<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>audioCtx<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> source<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// wire up buttons to stop and play audio</span>\n\nplay<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">source</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    source<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    play<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'disabled'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'disabled'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"reading_files","title":"Reading files","isH3":true,"content":"<p>\n  The <a href=\"/en-US/docs/Web/API/Response/Response\" title=\"Response()\"><code>Response()</code></a> constructor accepts\n  <a href=\"/en-US/docs/Web/API/File\"><code>File</code></a>s and <a href=\"/en-US/docs/Web/API/Blob\"><code>Blob</code></a>s, so it may be used to read a\n  <a href=\"/en-US/docs/Web/API/File\"><code>File</code></a> into other formats.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">arrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">onchange</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span> <span class=\"token punctuation\">/&gt;</span></span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://fetch.spec.whatwg.org/#ref-for-dom-body-arraybuffer①","title":"Fetch Standard"}],"query":"api.Response.arrayBuffer"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.Response.arrayBuffer","dataURL":"/en-US/docs/Web/API/Response/arrayBuffer/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/Service_Worker_API\">ServiceWorker API</a></li>\n  <li><a href=\"/en-US/docs/Web/HTTP/CORS\">HTTP access control (CORS)</a></li>\n  <li><a href=\"/en-US/docs/Web/HTTP\">HTTP</a></li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The arrayBuffer() method of the Response interface\n  takes a Response stream and reads it to completion. It returns a promise\n  that resolves with an ArrayBuffer.","popularity":0.0023,"modified":"2022-09-14T12:12:03.000Z","other_translations":[{"title":"Response.arrayBuffer()","locale":"ja","native":"日本語"},{"title":"Response.arrayBuffer()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/web/api/response/arraybuffer","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/response/arraybuffer/index.md","last_commit_url":"https://github.com/mdn/content/commit/84fc68f1674c9b2d1708fb38dc2824e228f9bb3f","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/Response","title":"Response"},{"uri":"/en-US/docs/Web/API/Response/arrayBuffer","title":"Response.arrayBuffer()"}],"pageTitle":"Response.arrayBuffer() - Web APIs | MDN","noIndexing":false}}