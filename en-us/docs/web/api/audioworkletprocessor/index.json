{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"AudioWorkletProcessor","mdn_url":"/en-US/docs/Web/API/AudioWorkletProcessor","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Web_Audio_API\">Web Audio API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/AudioWorkletProcessor\"><code>AudioWorkletProcessor</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/API/AudioWorkletProcessor/AudioWorkletProcessor\"><code>AudioWorkletProcessor()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg><a href=\"/en-US/docs/Web/API/AudioWorkletProcessor/parameterDescriptors\"><code>parameterDescriptors (static getter)</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioWorkletProcessor/port\"><code>port</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg><a href=\"/en-US/docs/Web/API/AudioWorkletProcessor/process\"><code>process()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Web Audio API</summary><ol><li><a href=\"/en-US/docs/Web/API/AnalyserNode\"><code>AnalyserNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioBuffer\"><code>AudioBuffer</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioBufferSourceNode\"><code>AudioBufferSourceNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioContext\"><code>AudioContext</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioDestinationNode\"><code>AudioDestinationNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioListener\"><code>AudioListener</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioNode\"><code>AudioNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioParam\"><code>AudioParam</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioProcessingEvent\"><code>AudioProcessingEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioScheduledSourceNode\"><code>AudioScheduledSourceNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioWorklet\"><code>AudioWorklet</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioWorkletGlobalScope\"><code>AudioWorkletGlobalScope</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a></li><li><a href=\"/en-US/docs/Web/API/BaseAudioContext\"><code>BaseAudioContext</code></a></li><li><a href=\"/en-US/docs/Web/API/BiquadFilterNode\"><code>BiquadFilterNode</code></a></li><li><a href=\"/en-US/docs/Web/API/ChannelMergerNode\"><code>ChannelMergerNode</code></a></li><li><a href=\"/en-US/docs/Web/API/ChannelSplitterNode\"><code>ChannelSplitterNode</code></a></li><li><a href=\"/en-US/docs/Web/API/ConstantSourceNode\"><code>ConstantSourceNode</code></a></li><li><a href=\"/en-US/docs/Web/API/ConvolverNode\"><code>ConvolverNode</code></a></li><li><a href=\"/en-US/docs/Web/API/DelayNode\"><code>DelayNode</code></a></li><li><a href=\"/en-US/docs/Web/API/DynamicsCompressorNode\"><code>DynamicsCompressorNode</code></a></li><li><a href=\"/en-US/docs/Web/API/GainNode\"><code>GainNode</code></a></li><li><a href=\"/en-US/docs/Web/API/IIRFilterNode\"><code>IIRFilterNode</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaElementAudioSourceNode\"><code>MediaElementAudioSourceNode</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaStreamAudioDestinationNode\"><code>MediaStreamAudioDestinationNode</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaStreamAudioSourceNode\"><code>MediaStreamAudioSourceNode</code></a></li><li><a href=\"/en-US/docs/Web/API/OfflineAudioCompletionEvent\"><code>OfflineAudioCompletionEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/OfflineAudioContext\"><code>OfflineAudioContext</code></a></li><li><a href=\"/en-US/docs/Web/API/OscillatorNode\"><code>OscillatorNode</code></a></li><li><a href=\"/en-US/docs/Web/API/PannerNode\"><code>PannerNode</code></a></li><li><a href=\"/en-US/docs/Web/API/PeriodicWave\"><code>PeriodicWave</code></a></li><li><a href=\"/en-US/docs/Web/API/StereoPannerNode\"><code>StereoPannerNode</code></a></li><li><a href=\"/en-US/docs/Web/API/WaveShaperNode\"><code>WaveShaperNode</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong><code>AudioWorkletProcessor</code></strong> interface of the <a href=\"/en-US/docs/Web/API/Web_Audio_API\">Web Audio API</a> represents an audio processing code behind a custom <a href=\"/en-US/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a>. It lives in the <a href=\"/en-US/docs/Web/API/AudioWorkletGlobalScope\"><code>AudioWorkletGlobalScope</code></a> and runs on the Web Audio rendering thread. In turn, an <a href=\"/en-US/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a> based on it runs on the main thread.</p>"}},{"type":"prose","value":{"id":"constructor","title":"Constructor","isH3":false,"content":"<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> The <code>AudioWorkletProcessor</code> and classes that derive from it cannot be instantiated directly from a user-supplied code. Instead, they are created only internally by the creation of an associated <a href=\"/en-US/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a>s. The constructor of the deriving class is getting called with an options object, so you can perform a custom initialization procedures â€” see constructor page for details.</p>\n</div>\n<dl>\n  <dt id=\"audioworkletprocessor\"><a href=\"/en-US/docs/Web/API/AudioWorkletProcessor/AudioWorkletProcessor\" title=\"AudioWorkletProcessor()\"><code>AudioWorkletProcessor()</code></a></dt>\n  <dd>\n    <p>Creates a new instance of an <code>AudioWorkletProcessor</code> object.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"properties","title":"Properties","isH3":false,"content":"<dl>\n  <dt id=\"port\"><a href=\"/en-US/docs/Web/API/AudioWorkletProcessor/port\" title=\"port\"><code>port</code></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>Returns a <a href=\"/en-US/docs/Web/API/MessagePort\"><code>MessagePort</code></a> used for bidirectional communication between the processor and the <a href=\"/en-US/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a> which it belongs to. The other end is available under the <a href=\"/en-US/docs/Web/API/AudioWorkletNode/port\" title=\"port\"><code>port</code></a> property of the node.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"methods","title":"Methods","isH3":false,"content":"<p><em>The <code>AudioWorkletProcessor</code> interface does not define any methods of its own. However, you must provide a <a href=\"/en-US/docs/Web/API/AudioWorkletProcessor/process\" title=\"process()\"><code>process()</code></a> method, which is called in order to process the audio stream.</em></p>"}},{"type":"prose","value":{"id":"events","title":"Events","isH3":false,"content":"<p><em>The <code>AudioWorkletProcessor</code> interface doesn't respond to any events.</em></p>"}},{"type":"prose","value":{"id":"usage_notes","title":"Usage notes","isH3":false,"content":""}},{"type":"prose","value":{"id":"deriving_classes","title":"Deriving classes","isH3":true,"content":"<p>To define custom audio processing code you have to derive a class from the <code>AudioWorkletProcessor</code> interface. Although not defined on the interface, the deriving class must have the <a href=\"/en-US/docs/Web/API/AudioWorkletProcessor/process\" title=\"process\"><code>process</code></a> method. This method gets called for each block of 128 sample-frames and takes input and output arrays and calculated values of custom <a href=\"/en-US/docs/Web/API/AudioParam\"><code>AudioParam</code></a>s (if they are defined) as parameters. You can use inputs and audio parameter values to fill the outputs array, which by default holds silence.</p>\n<p>Optionally, if you want custom <a href=\"/en-US/docs/Web/API/AudioParam\"><code>AudioParam</code></a>s on your node, you can supply a <a href=\"/en-US/docs/Web/API/AudioWorkletProcessor/parameterDescriptors\" title=\"parameterDescriptors\"><code>parameterDescriptors</code></a> property as a <em>static getter</em> on the processor. The array of <a href=\"/en-US/docs/Web/API/AudioParamDescriptor\"><code>AudioParamDescriptor</code></a>-based objects returned is used internally to create the <a href=\"/en-US/docs/Web/API/AudioParam\"><code>AudioParam</code></a>s during the instantiation of the <code>AudioWorkletNode</code>.</p>\n<p>The resulting <code>AudioParam</code>s reside in the <a href=\"/en-US/docs/Web/API/AudioWorkletNode/parameters\" title=\"parameters\"><code>parameters</code></a> property of the node and can be automated using standard methods such as <a href=\"/en-US/docs/Web/API/AudioParam/linearRampToValueAtTime\"><code>linearRampToValueAtTime</code></a>. Their calculated values will be passed into the <a href=\"/en-US/docs/Web/API/AudioWorkletProcessor/process\" title=\"process()\"><code>process()</code></a> method of the processor for you to shape the node output accordingly.</p>"}},{"type":"prose","value":{"id":"processing_audio","title":"Processing audio","isH3":true,"content":"<p>An example algorithm of creating a custom audio processing mechanism is:</p>\n<ol>\n  <li>Create a separate file;</li>\n  <li>In the file:\n    <ol>\n      <li>Extend the <code>AudioWorkletProcessor</code> class (see <a href=\"#deriving_classes\">\"Deriving classes\" section</a>) and supply your own <a href=\"/en-US/docs/Web/API/AudioWorkletProcessor/process\" title=\"process()\"><code>process()</code></a> method in it;</li>\n      <li>Register the processor using <a href=\"/en-US/docs/Web/API/AudioWorkletGlobalScope/registerProcessor\"><code>AudioWorkletGlobalScope.registerProcessor()</code></a> method;</li>\n    </ol>\n  </li>\n  <li>Load the file using <a href=\"/en-US/docs/Web/API/Worklet/addModule\" title=\"addModule()\"><code>addModule()</code></a> method on your audio context's <a href=\"/en-US/docs/Web/API/BaseAudioContext/audioWorklet\" title=\"audioWorklet\"><code>audioWorklet</code></a> property;</li>\n  <li>Create an <a href=\"/en-US/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a> based on the processor. The processor will be instantiated internally by the <code>AudioWorkletNode</code> constructor.</li>\n  <li>Connect the node to the other nodes.</li>\n</ol>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<p>In the example below we create a custom <a href=\"/en-US/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a> that outputs white noise.</p>\n<p>First, we need to define a custom <code>AudioWorkletProcessor</code>, which will output white noise, and register it. Note that this should be done in a separate file.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// white-noise-processor.js</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">WhiteNoiseProcessor</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AudioWorkletProcessor</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">inputs<span class=\"token punctuation\">,</span> outputs<span class=\"token punctuation\">,</span> parameters</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> outputs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    output<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">channel</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> channel<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        channel<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">registerProcessor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"white-noise-processor\"</span><span class=\"token punctuation\">,</span> WhiteNoiseProcessor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Next, in our main script file we'll load the processor, create an instance of <a href=\"/en-US/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a>, passing it the name of the processor, then connect the node to an audio graph.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> audioContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AudioContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">await</span> audioContext<span class=\"token punctuation\">.</span>audioWorklet<span class=\"token punctuation\">.</span><span class=\"token function\">addModule</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"white-noise-processor.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> whiteNoiseNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AudioWorkletNode</span><span class=\"token punctuation\">(</span>\n  audioContext<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"white-noise-processor\"</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwhiteNoiseNode<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>audioContext<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://webaudio.github.io/web-audio-api/#AudioWorkletProcessor","title":"Web Audio API"}],"query":"api.AudioWorkletProcessor"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.AudioWorkletProcessor","dataURL":"/en-US/docs/Web/API/AudioWorkletProcessor/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/Web_Audio_API\">Web Audio API</a></li>\n  <li><a href=\"/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API\">Using the Web Audio API</a></li>\n  <li><a href=\"/en-US/docs/Web/API/Web_Audio_API/Using_AudioWorklet\">Using AudioWorklet</a></li>\n</ul>"}}],"toc":[{"text":"Constructor","id":"constructor"},{"text":"Properties","id":"properties"},{"text":"Methods","id":"methods"},{"text":"Events","id":"events"},{"text":"Usage notes","id":"usage_notes"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The AudioWorkletProcessor interface of the Web Audio API represents an audio processing code behind a custom AudioWorkletNode. It lives in the AudioWorkletGlobalScope and runs on the Web Audio rendering thread. In turn, an AudioWorkletNode based on it runs on the main thread.","popularity":0.0007,"modified":"2022-09-22T21:37:38.000Z","other_translations":[{"title":"AudioWorkletProcessor","locale":"ko","native":"í•œêµ­ì–´"},{"title":"AudioWorkletProcessor","locale":"zh-CN","native":"ä¸­æ–‡ (ç®€ä½“)"}],"source":{"folder":"en-us/web/api/audioworkletprocessor","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/audioworkletprocessor/index.md","last_commit_url":"https://github.com/mdn/content/commit/3a8ddeac2f0957b775b1c6c237f565b266c274c0","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/AudioWorkletProcessor","title":"AudioWorkletProcessor"}],"pageTitle":"AudioWorkletProcessor - Web APIs | MDN","noIndexing":false}}