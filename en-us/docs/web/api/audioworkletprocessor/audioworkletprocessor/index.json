{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"AudioWorkletProcessor()","mdn_url":"/en-US/docs/Web/API/AudioWorkletProcessor/AudioWorkletProcessor","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Web_Audio_API\">Web Audio API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/AudioWorkletProcessor\"><code>AudioWorkletProcessor</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><em><code>AudioWorkletProcessor()</code></em></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg><a href=\"/en-US/docs/Web/API/AudioWorkletProcessor/parameterDescriptors\"><code>parameterDescriptors (static getter)</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioWorkletProcessor/port\"><code>port</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg><a href=\"/en-US/docs/Web/API/AudioWorkletProcessor/process\"><code>process()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Web Audio API</summary><ol><li><a href=\"/en-US/docs/Web/API/AnalyserNode\"><code>AnalyserNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioBuffer\"><code>AudioBuffer</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioBufferSourceNode\"><code>AudioBufferSourceNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioContext\"><code>AudioContext</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioDestinationNode\"><code>AudioDestinationNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioListener\"><code>AudioListener</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioNode\"><code>AudioNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioParam\"><code>AudioParam</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioProcessingEvent\"><code>AudioProcessingEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioScheduledSourceNode\"><code>AudioScheduledSourceNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioWorklet\"><code>AudioWorklet</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioWorkletGlobalScope\"><code>AudioWorkletGlobalScope</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a></li><li><a href=\"/en-US/docs/Web/API/BaseAudioContext\"><code>BaseAudioContext</code></a></li><li><a href=\"/en-US/docs/Web/API/BiquadFilterNode\"><code>BiquadFilterNode</code></a></li><li><a href=\"/en-US/docs/Web/API/ChannelMergerNode\"><code>ChannelMergerNode</code></a></li><li><a href=\"/en-US/docs/Web/API/ChannelSplitterNode\"><code>ChannelSplitterNode</code></a></li><li><a href=\"/en-US/docs/Web/API/ConstantSourceNode\"><code>ConstantSourceNode</code></a></li><li><a href=\"/en-US/docs/Web/API/ConvolverNode\"><code>ConvolverNode</code></a></li><li><a href=\"/en-US/docs/Web/API/DelayNode\"><code>DelayNode</code></a></li><li><a href=\"/en-US/docs/Web/API/DynamicsCompressorNode\"><code>DynamicsCompressorNode</code></a></li><li><a href=\"/en-US/docs/Web/API/GainNode\"><code>GainNode</code></a></li><li><a href=\"/en-US/docs/Web/API/IIRFilterNode\"><code>IIRFilterNode</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaElementAudioSourceNode\"><code>MediaElementAudioSourceNode</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaStreamAudioDestinationNode\"><code>MediaStreamAudioDestinationNode</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaStreamAudioSourceNode\"><code>MediaStreamAudioSourceNode</code></a></li><li><a href=\"/en-US/docs/Web/API/OfflineAudioCompletionEvent\"><code>OfflineAudioCompletionEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/OfflineAudioContext\"><code>OfflineAudioContext</code></a></li><li><a href=\"/en-US/docs/Web/API/OscillatorNode\"><code>OscillatorNode</code></a></li><li><a href=\"/en-US/docs/Web/API/PannerNode\"><code>PannerNode</code></a></li><li><a href=\"/en-US/docs/Web/API/PeriodicWave\"><code>PeriodicWave</code></a></li><li><a href=\"/en-US/docs/Web/API/StereoPannerNode\"><code>StereoPannerNode</code></a></li><li><a href=\"/en-US/docs/Web/API/WaveShaperNode\"><code>WaveShaperNode</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>\n  The <strong><code>AudioWorkletProcessor()</code></strong>\n  constructor creates a new <a href=\"/en-US/docs/Web/API/AudioWorkletProcessor\"><code>AudioWorkletProcessor</code></a> object, which\n  represents an underlying audio processing mechanism of an\n  <a href=\"/en-US/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a>.\n</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"notecard note\" id=\"sect1\">\n  <p>\n    <strong>Note:</strong> The <code>AudioWorkletProcessor</code> and classes that derive from it\n    cannot be instantiated directly from a user-supplied code. Instead, they are created\n    only internally by the creation of an associated <a href=\"/en-US/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a>s.\n  </p>\n</div>\n<div class=\"code-example\"><pre class=\"brush: js-nolint notranslate\">new AudioWorkletProcessor(options)\n</pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"options\"><code>options</code></dt>\n  <dd>\n    <p>\n      An object that is passed as <em>options</em> parameter to the\n      <a href=\"/en-US/docs/Web/API/AudioWorkletNode/AudioWorkletNode\" title=\"AudioWorkletNode constructor\"><code>AudioWorkletNode constructor</code></a> and\n      passed through <a href=\"/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\">the structured clone algorithm</a>.\n      Available properties are as follows:\n    </p><!-- The specification refers to this object as: AudioWorkletNodeOptions -->\n    <dl>\n      <dt id=\"numberofinputs\"><code>numberOfInputs</code> <span class=\"badge inline optional\">Optional</span></dt>\n      <dd>\n        <p>The value to initialize the <a href=\"/en-US/docs/Web/API/AudioNode/numberOfInputs\" title=\"numberOfInputs\"><code>numberOfInputs</code></a> property to. Defaults to 1.</p>\n      </dd>\n      <dt id=\"numberofoutputs\"><code>numberOfOutputs</code> <span class=\"badge inline optional\">Optional</span></dt>\n      <dd>\n        <p>The value to initialize the <a href=\"/en-US/docs/Web/API/AudioNode/numberOfOutputs\" title=\"numberOfOutputs\"><code>numberOfOutputs</code></a> property to. Defaults to 1.</p>\n      </dd>\n      <dt id=\"outputchannelcount\"><code>outputChannelCount</code> <span class=\"badge inline optional\">Optional</span></dt>\n      <dd>\n        <p>An <strong>array</strong> defining the number of channels for each output. For example, <em>outputChannelCount: [n, m]</em> specifies the number of channels in the first output to be <em>n</em> and the second output to be <em>m</em>. The array length must match <code>numberOfOutputs</code>.</p>\n      </dd>\n      <dt id=\"parameterdata\"><code>parameterData</code> <span class=\"badge inline optional\">Optional</span></dt>\n      <dd>\n        <p>An object containing the initial values of custom <a href=\"/en-US/docs/Web/API/AudioParam\"><code>AudioParam</code></a> objects on this node (in its <a href=\"/en-US/docs/Web/API/AudioWorkletNode/parameters\" title=\"parameters\"><code>parameters</code></a> property), with <code>key</code> being the name of a custom parameter and <code>value</code> being its initial value.</p>\n      </dd>\n      <dt id=\"processoroptions\"><code>processorOptions</code> <span class=\"badge inline optional\">Optional</span></dt>\n      <dd>\n        <p>Any additional data that can be used for custom initialization of the underlying <a href=\"/en-US/docs/Web/API/AudioWorkletProcessor\"><code>AudioWorkletProcessor</code></a>.</p>\n      </dd>\n    </dl>\n    <p>\n      Note that there are default values for the first two properties, so even if there are no\n      <em>options</em> object passed to the <a href=\"/en-US/docs/Web/API/AudioWorkletNode/AudioWorkletNode\" title=\"AudioWorkletNode constructor\"><code>AudioWorkletNode constructor</code></a>, the <em>options</em> object passed by the node to\n      the <code>AudioWorkletProcessor</code> constructor will exist and at minimum have\n      <code>numberOfInputs</code> and <code>numberOfOutputs</code>.\n    </p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>The newly constructed <a href=\"/en-US/docs/Web/API/AudioWorkletProcessor\"><code>AudioWorkletProcessor</code></a> instance.</p>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<p>\n  In this example we pass custom options to the\n  <a href=\"/en-US/docs/Web/API/AudioWorkletNode/AudioWorkletNode\" title=\"AudioWorkletNode constructor\"><code>AudioWorkletNode constructor</code></a> and\n  observe how a <a href=\"/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\">structured clone</a> of them gets passed to our <code>AudioWorkletProcessor</code> constructor.\n</p>\n<p>\n  First, we need to define a custom <a href=\"/en-US/docs/Web/API/AudioWorkletProcessor\"><code>AudioWorkletProcessor</code></a> and register it.\n  Note that this should be done in a separate file.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// test-processor.js</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestProcessor</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AudioWorkletProcessor</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>numberOfInputs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>processorOptions<span class=\"token punctuation\">.</span>someUsefulVariable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">inputs<span class=\"token punctuation\">,</span> outputs<span class=\"token punctuation\">,</span> parameters</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">registerProcessor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test-processor\"</span><span class=\"token punctuation\">,</span> TestProcessor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>\n  Next, in our main script file we'll load the processor, create an instance of\n  <code>AudioWorkletNode</code> passing it the name of the processor and <em>options</em>\n  object.\n</p>\n<p>\n  In the <em>options</em> object we pass <code>processorOptions</code> with a\n  <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> instance under <code>someUsefulVariable</code> key. We don't pass\n  <code>numberOfInputs</code> and see how it gets its default value.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> audioContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AudioContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">await</span> audioContext<span class=\"token punctuation\">.</span>audioWorklet<span class=\"token punctuation\">.</span><span class=\"token function\">addModule</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test-processor.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> testNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AudioWorkletNode</span><span class=\"token punctuation\">(</span>audioContext<span class=\"token punctuation\">,</span> <span class=\"token string\">\"test-processor\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">processorOptions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">someUsefulVariable</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"one\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>The console output will be as follows:</p>\n<pre class=\"notranslate\">&gt; 1 // AudioWorkletNode options.numberOfInputs set to default\n&gt; Map(2) { 1 =&gt; \"one\", 2 =&gt; \"two\" } // A cloned map under someUsefulVariable\n</pre>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://webaudio.github.io/web-audio-api/#dom-audioworkletprocessor-audioworkletprocessor","title":"Web Audio API"}],"query":"api.AudioWorkletProcessor.AudioWorkletProcessor"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.AudioWorkletProcessor.AudioWorkletProcessor","dataURL":"/en-US/docs/Web/API/AudioWorkletProcessor/AudioWorkletProcessor/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/AudioWorkletNode\" title=\"AudioWorkletNode\"><code>AudioWorkletNode</code></a> interface</li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The AudioWorkletProcessor()\n  constructor creates a new AudioWorkletProcessor object, which\n  represents an underlying audio processing mechanism of an\n  AudioWorkletNode.","popularity":0,"modified":"2022-09-15T18:16:38.000Z","other_translations":[{"title":"AudioWorkletProcessor()","locale":"ko","native":"한국어"}],"source":{"folder":"en-us/web/api/audioworkletprocessor/audioworkletprocessor","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/audioworkletprocessor/audioworkletprocessor/index.md","last_commit_url":"https://github.com/mdn/content/commit/418f9cf461de0c7845665c0c677ad0667740f52a","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/AudioWorkletProcessor","title":"AudioWorkletProcessor"},{"uri":"/en-US/docs/Web/API/AudioWorkletProcessor/AudioWorkletProcessor","title":"AudioWorkletProcessor()"}],"pageTitle":"AudioWorkletProcessor() - Web APIs | MDN","noIndexing":false}}