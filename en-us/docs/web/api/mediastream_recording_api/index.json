{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"MediaStream Recording API","mdn_url":"/en-US/docs/Web/API/MediaStream_Recording_API","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/MediaStream_Recording_API\">MediaStream Recording API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Guides</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaStream_Recording_API/Using_the_MediaStream_Recording_API\">Using the MediaStream Recording API</a></li><li><a href=\"/en-US/docs/Web/API/MediaStream_Recording_API/Recording_a_media_element\">Recording a media element</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Interfaces</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaRecorder\"><code>MediaRecorder</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorderErrorEvent\"><code>MediaRecorderErrorEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/BlobEvent\"><code>BlobEvent</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong>MediaStream Recording API</strong>, sometimes referred to as the <em>Media Recording API</em> or the <em>MediaRecorder API</em>, is closely affiliated with the <a href=\"/en-US/docs/Web/API/Media_Capture_and_Streams_API\">Media Capture and Streams API</a> and the <a href=\"/en-US/docs/Web/API/WebRTC_API\">WebRTC API</a>. The MediaStream Recording API makes it possible to capture the data generated by a <a href=\"/en-US/docs/Web/API/MediaStream\"><code>MediaStream</code></a> or <a href=\"/en-US/docs/Web/API/HTMLMediaElement\"><code>HTMLMediaElement</code></a> object for analysis, processing, or saving to disk. It's also surprisingly easy to work with.</p>"}},{"type":"prose","value":{"id":"basic_concepts","title":"Basic concepts","isH3":false,"content":"<p>The MediaStream Recording API is comprised of a single major interface, <a href=\"/en-US/docs/Web/API/MediaRecorder\"><code>MediaRecorder</code></a>, which does all the work of taking the data from a <a href=\"/en-US/docs/Web/API/MediaStream\"><code>MediaStream</code></a> and delivering it to you for processing. The data is delivered by a series of <a href=\"/en-US/docs/Web/API/MediaRecorder/dataavailable_event\" title=\"dataavailable\"><code>dataavailable</code></a> events, already in the format you specify when creating the <code>MediaRecorder</code>. You can then process the data further or write it to file as desired.</p>"}},{"type":"prose","value":{"id":"overview_of_the_recording_process","title":"Overview of the recording process","isH3":true,"content":"<p>The process of recording a stream is simple:</p>\n<ol>\n  <li>Set up a <a href=\"/en-US/docs/Web/API/MediaStream\"><code>MediaStream</code></a> or <a href=\"/en-US/docs/Web/API/HTMLMediaElement\"><code>HTMLMediaElement</code></a> (in the form of an <a href=\"/en-US/docs/Web/HTML/Element/audio\"><code>&lt;audio&gt;</code></a> or <a href=\"/en-US/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a> element) to serve as the source of the media data.</li>\n  <li>Create a <a href=\"/en-US/docs/Web/API/MediaRecorder\"><code>MediaRecorder</code></a> object, specifying the source stream and any desired options (such as the container's MIME type or the desired bit rates of its tracks).</li>\n  <li>Set <a href=\"/en-US/docs/Web/API/MediaRecorder/dataavailable_event\" title=\"ondataavailable\"><code>ondataavailable</code></a> to an event handler for the <a href=\"/en-US/docs/Web/API/MediaRecorder/dataavailable_event\" title=\"dataavailable\"><code>dataavailable</code></a> event; this will be called whenever data is available for you.</li>\n  <li>Once the source media is playing and you've reached the point where you're ready to record video, call <a href=\"/en-US/docs/Web/API/MediaRecorder/start\"><code>MediaRecorder.start()</code></a> to begin recording.</li>\n  <li>Your <a href=\"/en-US/docs/Web/API/MediaRecorder/dataavailable_event\" title=\"dataavailable\"><code>dataavailable</code></a> event handler gets called every time there's data ready for you to do with as you will; the event has a <code>data</code> attribute whose value is a <a href=\"/en-US/docs/Web/API/Blob\"><code>Blob</code></a> that contains the media data. You can force a <code>dataavailable</code> event to occur, thereby delivering the latest sound to you so you can filter it, save it, or whatever.</li>\n  <li>Recording stops automatically when the source media stops playing.</li>\n  <li>You can stop recording at any time by calling <a href=\"/en-US/docs/Web/API/MediaRecorder/stop\"><code>MediaRecorder.stop()</code></a>.</li>\n</ol>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> Individual <a href=\"/en-US/docs/Web/API/Blob\"><code>Blob</code></a>s containing slices of the recorded media will not necessarily be individually playable. The media needs to be reassembled before playback.</p>\n</div>\n<p>If anything goes wrong during recording, an <a href=\"/en-US/docs/Web/API/MediaRecorder/error_event\" title=\"error\"><code>error</code></a> event is sent to the <code>MediaRecorder</code>. You can listen for <code>error</code> events by setting up a <a href=\"/en-US/docs/Web/API/MediaRecorder/error_event\" title=\"onerror\"><code>onerror</code></a> event handler.</p>\n<p>Example here, we use an HTML Canvas as source of the <a href=\"/en-US/docs/Web/API/MediaStream\"><code>MediaStream</code></a>, and stop recording after 9 seconds.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"canvas\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Optional frames per second argument.</span>\n<span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">captureStream</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> recordedChunks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">mimeType</span><span class=\"token operator\">:</span> <span class=\"token string\">\"video/webm; codecs=vp9\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mediaRecorder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MediaRecorder</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmediaRecorder<span class=\"token punctuation\">.</span>ondataavailable <span class=\"token operator\">=</span> handleDataAvailable<span class=\"token punctuation\">;</span>\nmediaRecorder<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">handleDataAvailable</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data-available\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>size <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    recordedChunks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>recordedChunks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">download</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// …</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">download</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span>recordedChunks<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"video/webm\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  a<span class=\"token punctuation\">.</span>style <span class=\"token operator\">=</span> <span class=\"token string\">\"display: none\"</span><span class=\"token punctuation\">;</span>\n  a<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> url<span class=\"token punctuation\">;</span>\n  a<span class=\"token punctuation\">.</span>download <span class=\"token operator\">=</span> <span class=\"token string\">\"test.webm\"</span><span class=\"token punctuation\">;</span>\n  a<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">revokeObjectURL</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// demo: to download after 9sec</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stopping\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  mediaRecorder<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"examining_and_controlling_the_recorder_status","title":"Examining and controlling the recorder status","isH3":true,"content":"<p>You can also use the properties of the <code>MediaRecorder</code> object to determine the state of the recording process, and its <a href=\"/en-US/docs/Web/API/MediaRecorder/pause\" title=\"pause()\"><code>pause()</code></a> and <a href=\"/en-US/docs/Web/API/MediaRecorder/resume\" title=\"resume()\"><code>resume()</code></a> methods to pause and resume recording of the source media.</p>\n<p>If you need or want to check to see if a specific MIME type is supported, that's possible as well. Just call <a href=\"/en-US/docs/Web/API/MediaRecorder/isTypeSupported\"><code>MediaRecorder.isTypeSupported()</code></a>.</p>"}},{"type":"prose","value":{"id":"examining_potential_input_sources","title":"Examining potential input sources","isH3":true,"content":"<p>If your goal is to record camera and/or microphone input, you may wish to examine the available input devices before beginning the process of constructing the <code>MediaRecorder</code>. To do so, you'll need to call <a href=\"/en-US/docs/Web/API/MediaDevices/enumerateDevices\" title=\"navigator.mediaDevices.enumerateDevices()\"><code>navigator.mediaDevices.enumerateDevices()</code></a> to get a list of the available media devices. You can then examine that list and identify the potential input sources, and even filter the list based on desired criteria.</p>\n<p>In this code snippet, <code>enumerateDevices()</code> is used to examine the available input devices, locate those which are audio input devices, and create <a href=\"/en-US/docs/Web/HTML/Element/option\"><code>&lt;option&gt;</code></a> elements that are then added to a <a href=\"/en-US/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a> element representing an input source picker.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function\">enumerateDevices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">devices</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  devices<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">device</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> menu <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inputdevices\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">.</span>kind <span class=\"token operator\">===</span> <span class=\"token string\">\"audioinput\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> item <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"option\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      item<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> device<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">;</span>\n      item<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> device<span class=\"token punctuation\">.</span>deviceId<span class=\"token punctuation\">;</span>\n      menu<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Code similar to this can be used to let the user restrict the set of devices they wish to use.</p>"}},{"type":"prose","value":{"id":"for_more_information","title":"For more information","isH3":true,"content":"<p>To learn more about using the MediaStream Recording API, see <a href=\"/en-US/docs/Web/API/MediaStream_Recording_API/Using_the_MediaStream_Recording_API\">Using the MediaStream Recording API</a>, which shows how to use the API to record audio clips. A second article, <a href=\"/en-US/docs/Web/API/MediaStream_Recording_API/Recording_a_media_element\">Recording a media element</a>, describes how to receive a stream from an <a href=\"/en-US/docs/Web/HTML/Element/audio\"><code>&lt;audio&gt;</code></a> or <a href=\"/en-US/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a> element and use the captured stream (in this case, recording it and saving it to a local disk).</p>"}},{"type":"prose","value":{"id":"reference","title":"Reference","isH3":false,"content":"<dl>\n  <dt id=\"blobevent\"><a href=\"/en-US/docs/Web/API/BlobEvent\"><code>BlobEvent</code></a></dt>\n  <dd>\n    <p>Each time a chunk of media data is finished being recorded, it's delivered to consumers in <a href=\"/en-US/docs/Web/API/Blob\"><code>Blob</code></a> form using a <a href=\"/en-US/docs/Web/API/BlobEvent\"><code>BlobEvent</code></a> of type <code>dataavailable</code>.</p>\n  </dd>\n  <dt id=\"mediarecorder\"><a href=\"/en-US/docs/Web/API/MediaRecorder\"><code>MediaRecorder</code></a></dt>\n  <dd>\n    <p>The primary interface that implements the MediaStream Recording API.</p>\n  </dd>\n  <dt id=\"mediarecordererrorevent\"><a href=\"/en-US/docs/Web/API/MediaRecorderErrorEvent\"><code>MediaRecorderErrorEvent</code></a></dt>\n  <dd>\n    <p>The interface that represents errors thrown by the MediaStream Recording API. Its <a href=\"/en-US/docs/Web/API/MediaRecorderErrorEvent/error\" title=\"error\"><code>error</code></a> property is a <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a> that specifies that error occurred.</p>\n  </dd>\n</dl>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/mediacapture-record/#mediarecorder-api","title":"MediaStream Recording"}],"query":"api.MediaRecorder"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.MediaRecorder","dataURL":"/en-US/docs/Web/API/MediaStream_Recording_API/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/MediaStream_Recording_API/Using_the_MediaStream_Recording_API\">Using the MediaStream Recording API</a></li>\n  <li><a href=\"/en-US/docs/Web/API/MediaStream_Recording_API/Recording_a_media_element\">Recording a media element</a></li>\n  <li><a href=\"https://simpl.info/mediarecorder/\" class=\"external\" rel=\" noopener\">simpl.info MediaStream Recording demo</a>, by <a href=\"https://twitter.com/sw12\" class=\"external\" rel=\" noopener\">Sam Dutton</a></li>\n  <li><a href=\"/en-US/docs/Web/API/MediaDevices/getUserMedia\"><code>MediaDevices.getUserMedia</code></a></li>\n  <li><a href=\"https://blog.addpipe.com/mediarecorder-api/\" class=\"external\" rel=\" noopener\">HTML5's Media Recorder API in Action on Chrome and Firefox</a></li>\n  <li><a href=\"https://github.com/ai/audio-recorder-polyfill\" class=\"external\" rel=\" noopener\">MediaRecorder polyfill</a> for Safari and Edge</li>\n  <li><a href=\"https://github.com/chrisjohndigital/TutorRoom\" class=\"external\" rel=\" noopener\">TutorRoom</a>: HTML video capture/playback/download using getUserMedia and the MediaRecorder API (<a href=\"https://github.com/chrisjohndigital/TutorRoom\" class=\"external\" rel=\" noopener\">source on GitHub</a>)</li>\n  <li><a href=\"https://codepen.io/anon/pen/gpmPzm\" class=\"external\" rel=\" noopener\">Simple video recording demo</a></li>\n  <li><a href=\"https://quickblox.github.io/javascript-media-recorder/sample/\" class=\"external\" rel=\" noopener\">Advanced media stream recorder sample</a></li>\n  <li><a href=\"https://github.com/chrisjohndigital/OpenLang\" class=\"external\" rel=\" noopener\">OpenLang</a>: HTML video language lab web application using MediaDevices and the MediaStream Recording API for video recording (<a href=\"https://github.com/chrisjohndigital/OpenLang\" class=\"external\" rel=\" noopener\">source on GitHub</a>)</li>\n  <li><a href=\"https://blog.addpipe.com/safari-technology-preview-73-adds-limited-mediastream-recorder-api-support/\" class=\"external\" rel=\" noopener\">MediaStream Recorder API Now Available in Safari Technology Preview 73</a></li>\n</ul>"}}],"toc":[{"text":"Basic concepts","id":"basic_concepts"},{"text":"Reference","id":"reference"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The MediaStream Recording API, sometimes referred to as the Media Recording API or the MediaRecorder API, is closely affiliated with the Media Capture and Streams API and the WebRTC API. The MediaStream Recording API makes it possible to capture the data generated by a MediaStream or HTMLMediaElement object for analysis, processing, or saving to disk. It's also surprisingly easy to work with.","popularity":0.003,"modified":"2022-09-09T05:17:24.000Z","other_translations":[{"title":"MediaStream Recording API","locale":"ja","native":"日本語"},{"title":"MediaStream Recording API","locale":"ru","native":"Русский"},{"title":"MediaStream Recording API","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/web/api/mediastream_recording_api","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/mediastream_recording_api/index.md","last_commit_url":"https://github.com/mdn/content/commit/4b4638246aad5d39b9a2e5c572b179b4c39c0a84","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/MediaStream_Recording_API","title":"MediaStream Recording API"}],"pageTitle":"MediaStream Recording API - Web APIs | MDN","noIndexing":false}}