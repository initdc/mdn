{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Compressed texture formats","mdn_url":"/en-US/docs/Web/API/WebGL_API/Compressed_texture_formats","locale":"en-US","native":"English (US)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The WebGL API provides methods to use compressed texture formats. These are useful to increase texture detail while limiting the additional video memory necessary. By default, no compressed formats are available: a corresponding compressed texture format extension must first be enabled.</p>"}},{"type":"prose","value":{"id":"usage","title":"Usage","isH3":false,"content":"<p>Unless otherwise specified, this article applies to both WebGL 1 and 2 contexts.</p>\n<p>If supported, textures can be stored in a compressed format in video memory. This allows for additional detail while limiting the added video memory necessary. Textures are uncompressed on the fly when being accessed by a shader. Note that this advantage doesn't translate to network bandwidth: while the formats are better than uncompressed data, they are in general far worse than standard image formats such as PNG and JPG.</p>\n<p>As compressed textures require hardware support, therefore no specific formats are required by WebGL; instead, a context can make different formats available, depending on hardware support. <a href=\"https://toji.github.io/texture-tester/\" class=\"external\" rel=\" noopener\">This site</a> shows which formats are supported in the used browser.</p>\n<p>Usage of compressed formats first requires activating the respective extension with <a href=\"/en-US/docs/Web/API/WebGLRenderingContext/getExtension\"><code>WebGLRenderingContext.getExtension()</code></a>. If supported, it will return an extension object with constants for the added formats and the formats will also be returned by calls to <code>gl.getParameter(gl.COMPRESSED_TEXTURE_FORMATS)</code>. (E.g. <code>ext.COMPRESSED_RGBA_S3TC_DXT1_EXT</code> for the <a href=\"/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc\"><code>WEBGL_compressed_texture_s3tc</code></a> extension.) These can then be used with <a href=\"/en-US/docs/Web/API/WebGLRenderingContext/compressedTexImage2D\" title=\"compressedTexImage[23]D\"><code>compressedTexImage[23]D</code></a> or <a href=\"/en-US/docs/Web/API/WebGLRenderingContext/compressedTexSubImage2D\" title=\"compressedTexSubImage[23]D\"><code>compressedTexSubImage[23]D</code></a> instead of <code>texImage2D</code> calls.</p>\n<p>Note that WebGL makes no functionality available to compress or decompress textures: they must already be in a compressed format and can then be directly uploaded to video memory.</p>\n<p>All formats support 2D textures. Which formats support <code>TEXTURE_2D_ARRAY</code> and <code>TEXTURE_3D</code> targets (in combination with <code>compressedTexImage3D</code>) are noted in the following table.</p>\n<table>\n  <thead>\n    <tr>\n      <th>Extension</th>\n      <th>Notes</th>\n      <th>TEXTURE_2D_ARRAY</th>\n      <th>TEXTURE_3D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>WEBGL_compressed_texture_astc</td>\n      <td></td>\n      <td>Yes</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <td>WEBGL_compressed_texture_etc</td>\n      <td></td>\n      <td>Yes</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <td>WEBGL_compressed_texture_etc1*</td>\n      <td>Not usable with compressedTexSubImage2D/copyTexSubImage2D.</td>\n      <td>No</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <td>WEBGL_compressed_texture_pvrtc</td>\n      <td>Width and height must be powers of 2.</td>\n      <td>No</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <td>WEBGL_compressed_texture_s3tc</td>\n      <td>Width and height must be multiples of 4.</td>\n      <td>Yes</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <td>WEBGL_compressed_texture_s3tc_srgb</td>\n      <td>Width and height must be multiples of 4.</td>\n      <td>?</td>\n      <td>No</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getCompressedTextureIfAvailable</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">gl</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> texture <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">createTexture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindTexture</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_2D</span><span class=\"token punctuation\">,</span> texture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// create texture object on GPU</span>\n  <span class=\"token keyword\">const</span> ext <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getExtension</span><span class=\"token punctuation\">(</span><span class=\"token string\">'WEBGL_compressed_texture_s3tc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// will be null if not supported</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// the file is already in the correct compressed format</span>\n    <span class=\"token keyword\">const</span> dataArrayBuffer <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/textures/foobar512x512.RGBA_S3TC_DXT1'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">arrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">compressedTexImage2D</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_2D</span><span class=\"token punctuation\">,</span>\n      <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// set the base image level</span>\n      ext<span class=\"token punctuation\">.</span><span class=\"token constant\">COMPRESSED_RGBA_S3TC_DXT1_EXT</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// the compressed format we are using</span>\n      <span class=\"token number\">512</span><span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// width, height of the image</span>\n      <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// border, always 0</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataView</span><span class=\"token punctuation\">(</span>dataArrayBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">generateMipMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// create mipmap levels, like we would for a standard image</span>\n    <span class=\"token keyword\">return</span> texture<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}}],"toc":[{"text":"Usage","id":"usage"},{"text":"Examples","id":"examples"}],"summary":"The WebGL API provides methods to use compressed texture formats. These are useful to increase texture detail while limiting the additional video memory necessary. By default, no compressed formats are available: a corresponding compressed texture format extension must first be enabled.","popularity":0,"modified":"2022-09-09T07:06:10.000Z","source":{"folder":"en-us/web/api/webgl_api/compressed_texture_formats","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/webgl_api/compressed_texture_formats/index.md","last_commit_url":"https://github.com/mdn/content/commit/f4f8e2f18ccf19a0bee59e1fe78753e276b98232","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/WebGL_API","title":"WebGL: 2D and 3D graphics for the web"},{"uri":"/en-US/docs/Web/API/WebGL_API/Compressed_texture_formats","title":"Compressed texture formats"}],"pageTitle":"Compressed texture formats - Web APIs | MDN","noIndexing":false}}