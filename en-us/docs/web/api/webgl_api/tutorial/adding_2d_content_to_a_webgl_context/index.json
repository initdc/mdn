{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Adding 2D content to a WebGL context","mdn_url":"/en-US/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context","locale":"en-US","native":"English (US)","sidebarHTML":"\n <ol>\n  <li><a href=\"/en-US/docs/Web/API/WebGL_API\"><strong>WebGL API</strong></a></li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>WebGL tutorial</summary>\n      <ol>\n        <li><a href=\"/en-US/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL\">Getting started with WebGL</a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context\">Adding 2D content to a WebGL context</a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGL_API/Tutorial/Using_shaders_to_apply_color_in_WebGL\">Using shaders to apply color in WebGL</a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGL_API/Tutorial/Animating_objects_with_WebGL\">Animating objects with WebGL</a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGL_API/Tutorial/Creating_3D_objects_using_WebGL\">Creating 3D objects using WebGL</a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL\">Using textures in WebGL</a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGL_API/Tutorial/Lighting_in_WebGL\">Lighting in WebGL</a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGL_API/Tutorial/Animating_textures_in_WebGL\">Animating textures in WebGL</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Examples and articles</summary>\n      <ol>\n        <li><a href=\"/en-US/docs/Web/API/WebGL_API/Matrix_math_for_the_web\">Matrix math for the web</a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGL_API/WebGL_model_view_projection\">WebGL model view projection</a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGL_API/WebGL_best_practices\">WebGL best practices</a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGL_API/Using_Extensions\">Using WebGL extensions</a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGL_API/Basic_2D_animation_example\">A basic 2D WebGL animation example</a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGL_API/By_example\">WebGL by example</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Interfaces</summary>\n      <ol>\n        <li><a href=\"/en-US/docs/Web/API/WebGLRenderingContext\"><code>WebGLRenderingContext</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGL2RenderingContext\"><code>WebGL2RenderingContext</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGLActiveInfo\"><code>WebGLActiveInfo</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGLBuffer\"><code>WebGLBuffer</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGLContextEvent\"><code>WebGLContextEvent</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGLFramebuffer\"><code>WebGLFramebuffer</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGLProgram\"><code>WebGLProgram</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGLQuery\"><code>WebGLQuery</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGLRenderbuffer\"><code>WebGLRenderbuffer</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGLSampler\"><code>WebGLSampler</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGLShader\"><code>WebGLShader</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGLShaderPrecisionFormat\"><code>WebGLShaderPrecisionFormat</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGLSync\"><code>WebGLSync</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGLTexture\"><code>WebGLTexture</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGLTransformFeedback\"><code>WebGLTransformFeedback</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGLUniformLocation\"><code>WebGLUniformLocation</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGLVertexArrayObject\"><code>WebGLVertexArrayObject</code></a></li>\n      </ol>\n    </details>\n  </li>\n\n  <li><strong><a href=\"/en-US/docs/MDN\">Documentation:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Contribute</summary>\n      <ol>\n        <li><a href=\"/en-US/docs/MDN\">The MDN project</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/en-US/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL\">« Previous</a></li>\n    <li><a class=\"button minimal\" href=\"/en-US/docs/Web/API/WebGL_API/Tutorial/Using_shaders_to_apply_color_in_WebGL\">Next  »</a></li>\n</ul>\n<p>Once you've successfully <a href=\"/en-US/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL\">created a WebGL context</a>, you can start rendering into it. A simple thing we can do is draw an untextured square plane, so let's start there.</p>\n<p>The complete source code for this project is <a href=\"https://github.com/mdn/dom-examples/tree/main/webgl-examples/tutorial/sample2\" class=\"external\" rel=\" noopener\">available on GitHub</a>.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> This project uses the <a href=\"https://glmatrix.net/\" class=\"external\" rel=\" noopener\">glMatrix</a> library to perform its matrix operations, so you will need to include that in your project. We're loading a copy from a CDN in our HTML's <a href=\"/en-US/docs/Web/HTML/Element/head\"><code>&lt;head&gt;</code></a>.</p>\n</div>"}},{"type":"prose","value":{"id":"drawing_the_scene","title":"Drawing the scene","isH3":false,"content":"<p>The most important thing to understand before we get started is that even though we're only rendering a square plane object in this example, we're still drawing in 3D space. It's just we're drawing a square and we're putting it directly in front of the camera perpendicular to the view direction. We need to define the shaders that will create the color for our simple scene as well as draw our object. These will establish how the square plane appears on the screen.</p>"}},{"type":"prose","value":{"id":"the_shaders","title":"The shaders","isH3":true,"content":"<p>A <strong>shader</strong> is a program, written using the <a href=\"https://www.khronos.org/registry/OpenGL/specs/es/3.2/GLSL_ES_Specification_3.20.pdf\" class=\"external\" rel=\" noopener\">OpenGL ES Shading Language</a> (<strong>GLSL</strong>), that takes information about the vertices that make up a shape and generates the data needed to render the pixels onto the screen: namely, the positions of the pixels and their colors.</p>\n<p>There are two shader functions run when drawing WebGL content: the <strong>vertex shader</strong> and the <strong>fragment shader</strong>. You write these in GLSL and pass the text of the code into WebGL to be compiled for execution on the GPU. Together, a set of vertex and fragment shaders is called a <strong>shader program</strong>.</p>\n<p>Let's take a quick look at the two types of shader, with the example in mind of drawing a 2D shape into the WebGL context.</p>\n<h4 id=\"vertex_shader\">Vertex shader</h4>\n<p>Each time a shape is rendered, the vertex shader is run for each vertex in the shape. Its job is to transform the input vertex from its original coordinate system into the <strong><a href=\"/en-US/docs/Web/API/WebGL_API/WebGL_model_view_projection#clip_space\">clip space</a></strong> coordinate system used by WebGL, in which each axis has a range from -1.0 to 1.0, regardless of aspect ratio, actual size, or any other factors.</p>\n<p>The vertex shader must perform the needed transforms on the vertex's position, make any other adjustments or calculations it needs to make on a per-vertex basis, then return the transformed vertex by saving it in a special variable provided by GLSL, called <code>gl_Position</code>.</p>\n<p>The vertex shader can, as needed, also do things like determine the coordinates within the face's texture of the <a href=\"/en-US/docs/Glossary/Texel\">texel</a> to apply to the vertex, apply the normals to determine the lighting factor to apply to the vertex, and so on. This information can then be stored in <a href=\"/en-US/docs/Web/API/WebGL_API/Data#varyings\">varyings</a> or <a href=\"/en-US/docs/Web/API/WebGL_API/Data#attributes\">attributes</a> as appropriate to be shared with the fragment shader.</p>\n<p>Our vertex shader below receives vertex position values from an attribute we define called <code>aVertexPosition</code>. That position is then multiplied by two 4x4 matrices we provide called <code>uProjectionMatrix</code> and <code>uModelViewMatrix</code>; <code>gl_Position</code> is set to the result. For more info on projection and other matrixes <a href=\"https://webglfundamentals.org/webgl/lessons/webgl-3d-perspective.html\" class=\"external\" rel=\" noopener\">you might find this article useful</a>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token comment\">// Vertex shader program</span>\n\n  <span class=\"token keyword\">const</span> vsSource <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    attribute vec4 aVertexPosition;\n\n    uniform mat4 uModelViewMatrix;\n    uniform mat4 uProjectionMatrix;\n\n    void main() {\n      gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\n    }\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>It's worth noting that we're using a <code>vec4</code> attribute for the vertex position, which doesn't actually use a 4-component vector; that is, it could be handled as a <code>vec2</code> or <code>vec3</code> depending on the situation. But when we do our math, we will need it to be a <code>vec4</code>, so rather than convert it to a <code>vec4</code> every time we do math, we'll just use a <code>vec4</code> from the beginning. This eliminates operations from every calculation we do in our shader. Performance matters.</p>\n<p>In this example, we're not computing any lighting at all, since we haven't yet applied any to the scene. That will come later, in the example <a href=\"/en-US/docs/Web/API/WebGL_API/Tutorial/Lighting_in_WebGL\">Lighting in WebGL</a>. Note also the lack of any work with textures here; that will be added in <a href=\"/en-US/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL\">Using textures in WebGL</a>.</p>\n<h4 id=\"fragment_shader\">Fragment shader</h4>\n<p>The <strong>fragment shader</strong> is called once for every pixel on each shape to be drawn, after the shape's vertices have been processed by the vertex shader. Its job is to determine the color of that pixel by figuring out which texel (that is, the pixel from within the shape's texture) to apply to the pixel, getting that texel's color, then applying the appropriate lighting to the color. The color is then returned to the WebGL layer by storing it in the special variable <code>gl_FragColor</code>. That color is then drawn to the screen in the correct position for the shape's corresponding pixel.</p>\n<p>In this case, we're returning white every time, since we're just drawing a white square, with no lighting in use.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">const</span> fsSource <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    void main() {\n      gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n    }\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"initializing_the_shaders","title":"Initializing the shaders","isH3":true,"content":"<p>Now that we've defined the two shaders we need to pass them to WebGL, compile them, and link them together. The code below creates the two shaders by calling <code>loadShader()</code>, passing the type and source for the shader. It then creates a program, attaches the shaders and links them together. If compiling or linking fails the code displays an alert.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">//</span>\n<span class=\"token comment\">// Initialize a shader program, so WebGL knows how to draw our data</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">initShaderProgram</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">gl<span class=\"token punctuation\">,</span> vsSource<span class=\"token punctuation\">,</span> fsSource</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> vertexShader <span class=\"token operator\">=</span> <span class=\"token function\">loadShader</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">VERTEX_SHADER</span><span class=\"token punctuation\">,</span> vsSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> fragmentShader <span class=\"token operator\">=</span> <span class=\"token function\">loadShader</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">FRAGMENT_SHADER</span><span class=\"token punctuation\">,</span> fsSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Create the shader program</span>\n\n  <span class=\"token keyword\">const</span> shaderProgram <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">createProgram</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">attachShader</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> vertexShader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">attachShader</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> fragmentShader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">linkProgram</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// If creating the shader program failed, alert</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>gl<span class=\"token punctuation\">.</span><span class=\"token function\">getProgramParameter</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">LINK_STATUS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Unable to initialize the shader program: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>gl<span class=\"token punctuation\">.</span><span class=\"token function\">getProgramInfoLog</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> shaderProgram<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// creates a shader of the given type, uploads the source and</span>\n<span class=\"token comment\">// compiles it.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">loadShader</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">gl<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> source</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> shader <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">createShader</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Send the source to the shader object</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">shaderSource</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Compile the shader program</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">compileShader</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// See if it compiled successfully</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>gl<span class=\"token punctuation\">.</span><span class=\"token function\">getShaderParameter</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">COMPILE_STATUS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">An error occurred compiling the shaders: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>gl<span class=\"token punctuation\">.</span><span class=\"token function\">getShaderInfoLog</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">deleteShader</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> shader<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>The <code>loadShader()</code> function takes as input the WebGL context, the shader type, and the source code, then creates and compiles the shader as follows:</p>\n<ol>\n  <li>A new shader is created by calling <a href=\"/en-US/docs/Web/API/WebGLRenderingContext/createShader\" title=\"gl.createShader()\"><code>gl.createShader()</code></a>.</li>\n  <li>The shader's source code is sent to the shader by calling <a href=\"/en-US/docs/Web/API/WebGLRenderingContext/shaderSource\" title=\"gl.shaderSource()\"><code>gl.shaderSource()</code></a>.</li>\n  <li>Once the shader has the source code, it's compiled using <a href=\"/en-US/docs/Web/API/WebGLRenderingContext/compileShader\" title=\"gl.compileShader()\"><code>gl.compileShader()</code></a>.</li>\n  <li>To check to be sure the shader successfully compiled, the shader parameter <code>gl.COMPILE_STATUS</code> is checked. To get its value, we call <a href=\"/en-US/docs/Web/API/WebGLRenderingContext/getShaderParameter\" title=\"gl.getShaderParameter()\"><code>gl.getShaderParameter()</code></a>, specifying the shader and the name of the parameter we want to check (<code>gl.COMPILE_STATUS</code>). If that's <code>false</code>, we know the shader failed to compile, so show an alert with log information obtained from the compiler using <a href=\"/en-US/docs/Web/API/WebGLRenderingContext/getShaderInfoLog\" title=\"gl.getShaderInfoLog()\"><code>gl.getShaderInfoLog()</code></a>, then delete the shader and return <code>null</code> to indicate a failure to load the shader.</li>\n  <li>If the shader was loaded and successfully compiled, the compiled shader is returned to the caller.</li>\n</ol>\n<p>To use this code we call it like this</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">const</span> shaderProgram <span class=\"token operator\">=</span> <span class=\"token function\">initShaderProgram</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> vsSource<span class=\"token punctuation\">,</span> fsSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>After we've created a shader program we need to look up the locations that WebGL assigned to our inputs. In this case we have one attribute and two uniforms. Attributes receive values from buffers. Each iteration of the vertex shader receives the next value from the buffer assigned to that attribute. <a href=\"/en-US/docs/Web/API/WebGL_API/Data#uniforms\">Uniforms</a> are similar to JavaScript global variables. They stay the same value for all iterations of a shader. Since the attribute and uniform locations are specific to a single shader program we'll store them together to make them easy to pass around</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">const</span> programInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">program</span><span class=\"token operator\">:</span> shaderProgram<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">attribLocations</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">vertexPosition</span><span class=\"token operator\">:</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">'aVertexPosition'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">uniformLocations</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">projectionMatrix</span><span class=\"token operator\">:</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">'uProjectionMatrix'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">modelViewMatrix</span><span class=\"token operator\">:</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">'uModelViewMatrix'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"creating_the_square_plane","title":"Creating the square plane","isH3":false,"content":"<p>Before we can render our square plane, we need to create the buffer that contains its vertex positions and put the vertex positions in it. We'll do that using a function we call <code>initBuffers()</code>; as we explore more advanced WebGL concepts, this routine will be augmented to create more — and more complex — 3D objects.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">initBuffers</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">gl</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// Create a buffer for the square's positions.</span>\n\n  <span class=\"token keyword\">const</span> positionBuffer <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">createBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Select the positionBuffer as the one to apply buffer</span>\n  <span class=\"token comment\">// operations to from here out.</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindBuffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> positionBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Now create an array of positions for the square.</span>\n\n  <span class=\"token keyword\">const</span> positions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n     <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>\n     <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Now pass the list of positions into WebGL to build the</span>\n  <span class=\"token comment\">// shape. We do this by creating a Float32Array from the</span>\n  <span class=\"token comment\">// JavaScript array, then use it to fill the current buffer.</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">bufferData</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float32Array</span><span class=\"token punctuation\">(</span>positions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                gl<span class=\"token punctuation\">.</span><span class=\"token constant\">STATIC_DRAW</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">position</span><span class=\"token operator\">:</span> positionBuffer<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>This routine is pretty simplistic given the basic nature of the scene in this example. It starts by calling the <code>gl</code> object's <a href=\"/en-US/docs/Web/API/WebGLRenderingContext/createBuffer\" title=\"createBuffer()\"><code>createBuffer()</code></a> method to obtain a buffer into which we'll store the vertex positions. This is then bound to the context by calling the <a href=\"/en-US/docs/Web/API/WebGLRenderingContext/bindBuffer\" title=\"bindBuffer()\"><code>bindBuffer()</code></a> method.</p>\n<p>Once that's done, we create a JavaScript array containing the position for each vertex of the square plane. This is then converted into an array of floats and passed into the <code>gl</code> object's <a href=\"/en-US/docs/Web/API/WebGLRenderingContext/bufferData\" title=\"bufferData()\"><code>bufferData()</code></a> method to establish the vertex positions for the object.</p>"}},{"type":"prose","value":{"id":"rendering_the_scene","title":"Rendering the scene","isH3":false,"content":"<p>Once the shaders are established, the locations are looked up, and the square plane's vertex positions put in a buffer, we can actually render the scene. Since we're not animating anything in this example, our <code>drawScene()</code> function is very simple. It uses a few utility routines we'll cover shortly.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">drawScene</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">gl<span class=\"token punctuation\">,</span> programInfo<span class=\"token punctuation\">,</span> buffers</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">clearColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Clear to black, fully opaque</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">clearDepth</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// Clear everything</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">enable</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">DEPTH_TEST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// Enable depth testing</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">depthFunc</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">LEQUAL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// Near things obscure far things</span>\n\n  <span class=\"token comment\">// Clear the canvas before we start drawing on it.</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">COLOR_BUFFER_BIT</span> <span class=\"token operator\">|</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">DEPTH_BUFFER_BIT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Create a perspective matrix, a special matrix that is</span>\n  <span class=\"token comment\">// used to simulate the distortion of perspective in a camera.</span>\n  <span class=\"token comment\">// Our field of view is 45 degrees, with a width/height</span>\n  <span class=\"token comment\">// ratio that matches the display size of the canvas</span>\n  <span class=\"token comment\">// and we only want to see objects between 0.1 units</span>\n  <span class=\"token comment\">// and 100 units away from the camera.</span>\n\n  <span class=\"token keyword\">const</span> fieldOfView <span class=\"token operator\">=</span> <span class=\"token number\">45</span> <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">/</span> <span class=\"token number\">180</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// in radians</span>\n  <span class=\"token keyword\">const</span> aspect <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span>canvas<span class=\"token punctuation\">.</span>clientWidth <span class=\"token operator\">/</span> gl<span class=\"token punctuation\">.</span>canvas<span class=\"token punctuation\">.</span>clientHeight<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> zNear <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> zFar <span class=\"token operator\">=</span> <span class=\"token number\">100.0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> projectionMatrix <span class=\"token operator\">=</span> mat4<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// note: glmatrix.js always has the first argument</span>\n  <span class=\"token comment\">// as the destination to receive the result.</span>\n  mat4<span class=\"token punctuation\">.</span><span class=\"token function\">perspective</span><span class=\"token punctuation\">(</span>projectionMatrix<span class=\"token punctuation\">,</span>\n                   fieldOfView<span class=\"token punctuation\">,</span>\n                   aspect<span class=\"token punctuation\">,</span>\n                   zNear<span class=\"token punctuation\">,</span>\n                   zFar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Set the drawing position to the \"identity\" point, which is</span>\n  <span class=\"token comment\">// the center of the scene.</span>\n  <span class=\"token keyword\">const</span> modelViewMatrix <span class=\"token operator\">=</span> mat4<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Now move the drawing position a bit to where we want to</span>\n  <span class=\"token comment\">// start drawing the square.</span>\n\n  mat4<span class=\"token punctuation\">.</span><span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>modelViewMatrix<span class=\"token punctuation\">,</span>     <span class=\"token comment\">// destination matrix</span>\n                 modelViewMatrix<span class=\"token punctuation\">,</span>     <span class=\"token comment\">// matrix to translate</span>\n                 <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">6.0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// amount to translate</span>\n\n  <span class=\"token comment\">// Tell WebGL how to pull out the positions from the position</span>\n  <span class=\"token comment\">// buffer into the vertexPosition attribute.</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> numComponents <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// pull out 2 values per iteration</span>\n    <span class=\"token keyword\">const</span> type <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">FLOAT</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// the data in the buffer is 32bit floats</span>\n    <span class=\"token keyword\">const</span> normalize <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// don't normalize</span>\n    <span class=\"token keyword\">const</span> stride <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// how many bytes to get from one set of values to the next</span>\n                              <span class=\"token comment\">// 0 = use type and numComponents above</span>\n    <span class=\"token keyword\">const</span> offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// how many bytes inside the buffer to start from</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindBuffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> buffers<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">vertexAttribPointer</span><span class=\"token punctuation\">(</span>\n        programInfo<span class=\"token punctuation\">.</span>attribLocations<span class=\"token punctuation\">.</span>vertexPosition<span class=\"token punctuation\">,</span>\n        numComponents<span class=\"token punctuation\">,</span>\n        type<span class=\"token punctuation\">,</span>\n        normalize<span class=\"token punctuation\">,</span>\n        stride<span class=\"token punctuation\">,</span>\n        offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">enableVertexAttribArray</span><span class=\"token punctuation\">(</span>\n        programInfo<span class=\"token punctuation\">.</span>attribLocations<span class=\"token punctuation\">.</span>vertexPosition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Tell WebGL to use our program when drawing</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">useProgram</span><span class=\"token punctuation\">(</span>programInfo<span class=\"token punctuation\">.</span>program<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Set the shader uniforms</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">uniformMatrix4fv</span><span class=\"token punctuation\">(</span>\n      programInfo<span class=\"token punctuation\">.</span>uniformLocations<span class=\"token punctuation\">.</span>projectionMatrix<span class=\"token punctuation\">,</span>\n      <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      projectionMatrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">uniformMatrix4fv</span><span class=\"token punctuation\">(</span>\n      programInfo<span class=\"token punctuation\">.</span>uniformLocations<span class=\"token punctuation\">.</span>modelViewMatrix<span class=\"token punctuation\">,</span>\n      <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      modelViewMatrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> vertexCount <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">drawArrays</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TRIANGLE_STRIP</span><span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> vertexCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>The first step is to clear the canvas to our background color; then we establish the camera's perspective. We set a field of view of 45°, with a width to height ratio that matches the display dimensions of our canvas. We also specify that we only want objects between 0.1 and 100 units from the camera to be rendered.</p>\n<p>Then we establish the position of the square plane by loading the identity position and translating away from the camera by 6 units. After that, we bind the square's vertex buffer to the attribute the shader is using for <code>aVertexPosition</code> and we tell WebGL how to pull the data out of it. Finally we draw the object by calling the <a href=\"/en-US/docs/Web/API/WebGLRenderingContext/drawArrays\" title=\"drawArrays()\"><code>drawArrays()</code></a> method.</p><iframe width=\"670\" height=\"510\" src=\"https://mdn.github.io/dom-examples/webgl-examples/tutorial/sample2/index.html\" loading=\"lazy\"></iframe>\n<p><a href=\"https://github.com/mdn/dom-examples/tree/main/webgl-examples/tutorial/sample2\" class=\"external\" rel=\" noopener\">View the complete code</a> | <a href=\"https://mdn.github.io/dom-examples/webgl-examples/tutorial/sample2/\" class=\"external\" rel=\" noopener\">Open this demo on a new page</a></p>"}},{"type":"prose","value":{"id":"matrix_utility_operations","title":"Matrix utility operations","isH3":false,"content":"<p>Matrix operations might seem complicated but <a href=\"https://webglfundamentals.org/webgl/lessons/webgl-2d-matrices.html\" class=\"external\" rel=\" noopener\">they are actually pretty simple if you take them one step at a time</a>. Generally people use a matrix library rather than writing their own. In our case we're using the popular <a href=\"https://glmatrix.net/\" class=\"external\" rel=\" noopener\">glMatrix library</a>.</p>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":true,"content":"<ul>\n  <li><a href=\"https://webglfundamentals.org/webgl/lessons/webgl-2d-matrices.html\" class=\"external\" rel=\" noopener\">Matrices</a> on WebGLFundamentals</li>\n  <li><a href=\"https://mathworld.wolfram.com/Matrix.html\" class=\"external\" rel=\" noopener\">Matrices</a> on Wolfram MathWorld</li>\n  <li><a href=\"https://en.wikipedia.org/wiki/Matrix_(mathematics)\" class=\"external\" rel=\" noopener\">Matrix</a> on Wikipedia</li>\n</ul><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/en-US/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL\">« Previous</a></li>\n    <li><a class=\"button minimal\" href=\"/en-US/docs/Web/API/WebGL_API/Tutorial/Using_shaders_to_apply_color_in_WebGL\">Next  »</a></li>\n</ul>"}}],"toc":[{"text":"Drawing the scene","id":"drawing_the_scene"},{"text":"Creating the square plane","id":"creating_the_square_plane"},{"text":"Rendering the scene","id":"rendering_the_scene"},{"text":"Matrix utility operations","id":"matrix_utility_operations"}],"summary":"Once you've successfully created a WebGL context, you can start rendering into it. A simple thing we can do is draw an untextured square plane, so let's start there.","popularity":0.0024,"modified":"2022-09-09T05:19:45.000Z","other_translations":[{"title":"Agregando Contenido 2D en el Contexto WebGL","locale":"es","native":"Español"},{"title":"Ajouter du contenu à WebGL","locale":"fr","native":"Français"},{"title":"WebGL コンテキストへの平面コンテンツの追加","locale":"ja","native":"日本語"},{"title":"WebGL 컨텍스트에 2D 컨텐츠 추가하기","locale":"ko","native":"한국어"},{"title":"Adicionando conteúdo 2D a um contexto WebGL","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Добавление двухмерного контента в контекст WebGL","locale":"ru","native":"Русский"},{"title":"使用 WebGL 创建 2D 内容","locale":"zh-CN","native":"中文 (简体)"},{"title":"增加一個 2D 物件到 WebGL 環境","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"en-us/web/api/webgl_api/tutorial/adding_2d_content_to_a_webgl_context","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/webgl_api/tutorial/adding_2d_content_to_a_webgl_context/index.md","last_commit_url":"https://github.com/mdn/content/commit/f7dae62645a2c735ed6f6ed63f664bf279fdfc4b","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/WebGL_API","title":"WebGL: 2D and 3D graphics for the web"},{"uri":"/en-US/docs/Web/API/WebGL_API/Tutorial","title":"WebGL tutorial"},{"uri":"/en-US/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context","title":"Adding 2D content to a WebGL context"}],"pageTitle":"Adding 2D content to a WebGL context - Web APIs | MDN","noIndexing":false}}