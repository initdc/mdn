{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Using textures in WebGL","mdn_url":"/en-US/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL","locale":"en-US","native":"English (US)","sidebarHTML":"\n <ol>\n  <li><a href=\"/en-US/docs/Web/API/WebGL_API\"><strong>WebGL API</strong></a></li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>WebGL tutorial</summary>\n      <ol>\n        <li><a href=\"/en-US/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL\">Getting started with WebGL</a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context\">Adding 2D content to a WebGL context</a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGL_API/Tutorial/Using_shaders_to_apply_color_in_WebGL\">Using shaders to apply color in WebGL</a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGL_API/Tutorial/Animating_objects_with_WebGL\">Animating objects with WebGL</a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGL_API/Tutorial/Creating_3D_objects_using_WebGL\">Creating 3D objects using WebGL</a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL\">Using textures in WebGL</a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGL_API/Tutorial/Lighting_in_WebGL\">Lighting in WebGL</a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGL_API/Tutorial/Animating_textures_in_WebGL\">Animating textures in WebGL</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Examples and articles</summary>\n      <ol>\n        <li><a href=\"/en-US/docs/Web/API/WebGL_API/Matrix_math_for_the_web\">Matrix math for the web</a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGL_API/WebGL_model_view_projection\">WebGL model view projection</a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGL_API/WebGL_best_practices\">WebGL best practices</a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGL_API/Using_Extensions\">Using WebGL extensions</a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGL_API/Basic_2D_animation_example\">A basic 2D WebGL animation example</a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGL_API/By_example\">WebGL by example</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Interfaces</summary>\n      <ol>\n        <li><a href=\"/en-US/docs/Web/API/WebGLRenderingContext\"><code>WebGLRenderingContext</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGL2RenderingContext\"><code>WebGL2RenderingContext</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGLActiveInfo\"><code>WebGLActiveInfo</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGLBuffer\"><code>WebGLBuffer</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGLContextEvent\"><code>WebGLContextEvent</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGLFramebuffer\"><code>WebGLFramebuffer</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGLProgram\"><code>WebGLProgram</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGLQuery\"><code>WebGLQuery</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGLRenderbuffer\"><code>WebGLRenderbuffer</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGLSampler\"><code>WebGLSampler</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGLShader\"><code>WebGLShader</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGLShaderPrecisionFormat\"><code>WebGLShaderPrecisionFormat</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGLSync\"><code>WebGLSync</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGLTexture\"><code>WebGLTexture</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGLTransformFeedback\"><code>WebGLTransformFeedback</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGLUniformLocation\"><code>WebGLUniformLocation</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebGLVertexArrayObject\"><code>WebGLVertexArrayObject</code></a></li>\n      </ol>\n    </details>\n  </li>\n\n  <li><strong><a href=\"/en-US/docs/MDN\">Documentation:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Contribute</summary>\n      <ol>\n        <li><a href=\"/en-US/docs/MDN\">The MDN project</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/en-US/docs/Web/API/WebGL_API/Tutorial/Creating_3D_objects_using_WebGL\">« Previous</a></li>\n    <li><a class=\"button minimal\" href=\"/en-US/docs/Web/API/WebGL_API/Tutorial/Lighting_in_WebGL\">Next  »</a></li>\n</ul>\n<p>Now that our sample program has a rotating 3D cube, let's map a texture onto it instead of having its faces be solid colors.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> This example uses the <a href=\"https://glmatrix.net/\" class=\"external\" rel=\" noopener\">glMatrix</a> library to perform its matrix and vertex math. You'll need to include it if you create your own project based on this code. Our sample loads a copy from a CDN in our HTML's <a href=\"/en-US/docs/Web/HTML/Element/head\"><code>&lt;head&gt;</code></a>.</p>\n</div>"}},{"type":"prose","value":{"id":"loading_textures","title":"Loading textures","isH3":false,"content":"<p>The first thing to do is add code to load the textures. In our case, we'll be using a single texture, mapped onto all six sides of our rotating cube, but the same technique can be used for any number of textures.</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> It's important to note that the loading of textures follows <a href=\"/en-US/docs/Web/HTTP/CORS\">cross-domain rules</a>; that is, you can only load textures from sites for which your content has CORS approval. See <a href=\"#cross-domain_textures\">Cross-domain textures below</a> for details.</p>\n</div>\n<p>The code that loads the texture looks like this:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">//</span>\n<span class=\"token comment\">// Initialize a texture and load an image.</span>\n<span class=\"token comment\">// When the image finished loading copy it into the texture.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">loadTexture</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">gl<span class=\"token punctuation\">,</span> url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> texture <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">createTexture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindTexture</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_2D</span><span class=\"token punctuation\">,</span> texture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Because images have to be downloaded over the internet</span>\n  <span class=\"token comment\">// they might take a moment until they are ready.</span>\n  <span class=\"token comment\">// Until then put a single pixel in the texture so we can</span>\n  <span class=\"token comment\">// use it immediately. When the image has finished downloading</span>\n  <span class=\"token comment\">// we'll update the texture with the contents of the image.</span>\n  <span class=\"token keyword\">const</span> level <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> internalFormat <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">RGBA</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> width <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> height <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> border <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> srcFormat <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">RGBA</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> srcType <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">UNSIGNED_BYTE</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> pixel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// opaque blue</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">texImage2D</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_2D</span><span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">,</span> internalFormat<span class=\"token punctuation\">,</span>\n                width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> border<span class=\"token punctuation\">,</span> srcFormat<span class=\"token punctuation\">,</span> srcType<span class=\"token punctuation\">,</span>\n                pixel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> image <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  image<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindTexture</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_2D</span><span class=\"token punctuation\">,</span> texture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">texImage2D</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_2D</span><span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">,</span> internalFormat<span class=\"token punctuation\">,</span>\n                  srcFormat<span class=\"token punctuation\">,</span> srcType<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// WebGL1 has different requirements for power of 2 images</span>\n    <span class=\"token comment\">// vs non power of 2 images so check if the image is a</span>\n    <span class=\"token comment\">// power of 2 in both dimensions.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isPowerOf2</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isPowerOf2</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token comment\">// Yes, it's a power of 2. Generate mips.</span>\n       gl<span class=\"token punctuation\">.</span><span class=\"token function\">generateMipmap</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_2D</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token comment\">// No, it's not a power of 2. Turn off mips and set</span>\n       <span class=\"token comment\">// wrapping to clamp to edge</span>\n       gl<span class=\"token punctuation\">.</span><span class=\"token function\">texParameteri</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_2D</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_WRAP_S</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">CLAMP_TO_EDGE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       gl<span class=\"token punctuation\">.</span><span class=\"token function\">texParameteri</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_2D</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_WRAP_T</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">CLAMP_TO_EDGE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       gl<span class=\"token punctuation\">.</span><span class=\"token function\">texParameteri</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_2D</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_MIN_FILTER</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">LINEAR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  image<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> url<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> texture<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">isPowerOf2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> value <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>The <code>loadTexture()</code> routine starts by creating a WebGL texture object <code>texture</code> by calling the WebGL <a href=\"/en-US/docs/Web/API/WebGLRenderingContext/createTexture\" title=\"createTexture()\"><code>createTexture()</code></a> function. It then uploads a single blue pixel using <a href=\"/en-US/docs/Web/API/WebGLRenderingContext/texImage2D\" title=\"texImage2D()\"><code>texImage2D()</code></a>. This makes the texture immediately usable as a solid blue color even though it may take a few moments for our image to download.</p>\n<p>To load the texture from the image file, it then creates an <code>Image</code> object and assigns the <code>src</code> to the URL for our image we wish to use as our texture. The function we assign to <code>image.onload</code> will be called once the image has finished downloading. At that point we again call <a href=\"/en-US/docs/Web/API/WebGLRenderingContext/texImage2D\" title=\"texImage2D()\"><code>texImage2D()</code></a> this time using the image as the source for the texture. After that we setup filtering and wrapping for the texture based on whether or not the image we download was a power of 2 in both dimensions or not.</p>\n<p>WebGL1 can only use non power of 2 textures with filtering set to <code>NEAREST</code> or <code>LINEAR</code> and it can not generate a mipmap for them. Their wrapping mode must also be set to <code>CLAMP_TO_EDGE</code>. On the other hand if the texture is a power of 2 in both dimensions then WebGL can do higher quality filtering, it can use mipmap, and it can set the wrapping mode to <code>REPEAT</code> or <code>MIRRORED_REPEAT</code>.</p>\n<p>An example of a repeated texture is tiling an image of a few bricks to cover a brick wall.</p>\n<p>Mipmapping and UV repeating can be disabled with <a href=\"/en-US/docs/Web/API/WebGLRenderingContext/texParameter\" title=\"texParameteri()\"><code>texParameteri()</code></a>. This will allow non-power-of-two (NPOT) textures at the expense of mipmapping, UV wrapping, UV tiling, and your control over how the device will handle your texture.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// gl.NEAREST is also allowed, instead of gl.LINEAR, as neither mipmap.</span>\ngl<span class=\"token punctuation\">.</span><span class=\"token function\">texParameteri</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_2D</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_MIN_FILTER</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">LINEAR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Prevents s-coordinate wrapping (repeating).</span>\ngl<span class=\"token punctuation\">.</span><span class=\"token function\">texParameteri</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_2D</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_WRAP_S</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">CLAMP_TO_EDGE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Prevents t-coordinate wrapping (repeating).</span>\ngl<span class=\"token punctuation\">.</span><span class=\"token function\">texParameteri</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_2D</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_WRAP_T</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">CLAMP_TO_EDGE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Again, with these parameters, compatible WebGL devices will automatically accept any resolution for that texture (up to their maximum dimensions). Without performing the above configuration, WebGL requires all samples of NPOT textures to fail by returning transparent black: <code>rgba(0,0,0,0)</code>.</p>\n<p>To load the image, add a call to our <code>loadTexture()</code> function within our <code>main()</code> function. This can be added after the <code>initBuffers(gl)</code> call.</p>\n<p>But also note: Browsers copy pixels from the loaded image in top-to-bottom order — from the top-left corner; but WebGL wants the pixels in bottom-to-top order — starting from the bottom-left corner. (For more details, see <a href=\"https://jameshfisher.com/2020/10/22/why-is-my-webgl-texture-upside-down/\" class=\"external\" rel=\" noopener\">Why is my WebGL texture upside-down?</a>.)</p>\n<p>So in order to prevent the resulting image texture from having the wrong orientation when rendered, we also need call <a href=\"/en-US/docs/Web/API/WebGLRenderingContext/pixelStorei\"><code>pixelStorei()</code></a> with the <code>gl.UNPACK_FLIP_Y_WEBGL</code> parameter set to <code>true</code> — to cause the pixels to be flipped into the bottom-to-top order that WebGL expects.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Load texture</span>\n<span class=\"token keyword\">const</span> texture <span class=\"token operator\">=</span> <span class=\"token function\">loadTexture</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> <span class=\"token string\">'cubetexture.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Flip image pixels into the bottom-to-top order that WebGL expects.</span>\ngl<span class=\"token punctuation\">.</span><span class=\"token function\">pixelStorei</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">UNPACK_FLIP_Y_WEBGL</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"mapping_the_texture_onto_the_faces","title":"Mapping the texture onto the faces","isH3":false,"content":"<p>At this point, the texture is loaded and ready to use. But before we can use it, we need to establish the mapping of the texture coordinates to the vertices of the faces of our cube. This replaces all the previously existing code for configuring colors for each of the cube's faces in <code>initBuffers()</code>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">const</span> textureCoordBuffer <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">createBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindBuffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> textureCoordBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> textureCoordinates <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// Front</span>\n    <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// Back</span>\n    <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// Top</span>\n    <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// Bottom</span>\n    <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// Right</span>\n    <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// Left</span>\n    <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">bufferData</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float32Array</span><span class=\"token punctuation\">(</span>textureCoordinates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                gl<span class=\"token punctuation\">.</span><span class=\"token constant\">STATIC_DRAW</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// …</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">position</span><span class=\"token operator\">:</span> positionBuffer<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">textureCoord</span><span class=\"token operator\">:</span> textureCoordBuffer<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">indices</span><span class=\"token operator\">:</span> indexBuffer<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>First, this code creates a WebGL buffer into which we'll store the texture coordinates for each face, then we bind that buffer as the array we'll be writing into.</p>\n<p>The <code>textureCoordinates</code> array defines the texture coordinates corresponding to each vertex of each face. Note that the texture coordinates range from 0.0 to 1.0; the dimensions of textures are normalized to a range of 0.0 to 1.0 regardless of their actual size, for the purpose of texture mapping.</p>\n<p>Once we've set up the texture mapping array, we pass the array into the buffer, so that WebGL has that data ready for its use.</p>"}},{"type":"prose","value":{"id":"updating_the_shaders","title":"Updating the shaders","isH3":false,"content":"<p>The shader program also needs to be updated to use the textures instead of solid colors.</p>"}},{"type":"prose","value":{"id":"the_vertex_shader","title":"The vertex shader","isH3":true,"content":"<p>We need to replace the vertex shader so that instead of fetching color data, it instead fetches the texture coordinate data.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">const</span> vsSource <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    attribute vec4 aVertexPosition;\n    attribute vec2 aTextureCoord;\n\n    uniform mat4 uModelViewMatrix;\n    uniform mat4 uProjectionMatrix;\n\n    varying highp vec2 vTextureCoord;\n\n    void main(void) {\n      gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\n      vTextureCoord = aTextureCoord;\n    }\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>The key change here is that instead of fetching the vertex color, we're fetching the texture coordinates and passing them to the vertex shader; this will indicate the location within the texture corresponding to the vertex.</p>"}},{"type":"prose","value":{"id":"the_fragment_shader","title":"The fragment shader","isH3":true,"content":"<p>The fragment shader likewise needs to be updated:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">const</span> fsSource <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    varying highp vec2 vTextureCoord;\n\n    uniform sampler2D uSampler;\n\n    void main(void) {\n      gl_FragColor = texture2D(uSampler, vTextureCoord);\n    }\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Instead of assigning a color value to the fragment's color, the fragment's color is computed by fetching the <a href=\"/en-US/docs/Glossary/Texel\">texel</a> (that is, the pixel within the texture) based on the value of <code>vTextureCoord</code> which like the colors is interpolated between vertices.</p>"}},{"type":"prose","value":{"id":"attribute_and_uniform_locations","title":"Attribute and Uniform Locations","isH3":true,"content":"<p>Because we changed an attribute and added a uniform we need to look up their locations</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">const</span> programInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">program</span><span class=\"token operator\">:</span> shaderProgram<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">attribLocations</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">vertexPosition</span><span class=\"token operator\">:</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">'aVertexPosition'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">textureCoord</span><span class=\"token operator\">:</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">'aTextureCoord'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">uniformLocations</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">projectionMatrix</span><span class=\"token operator\">:</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">'uProjectionMatrix'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">modelViewMatrix</span><span class=\"token operator\">:</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">'uModelViewMatrix'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">uSampler</span><span class=\"token operator\">:</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">'uSampler'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"drawing_the_textured_cube","title":"Drawing the textured cube","isH3":false,"content":"<p>The changes to the <code>drawScene()</code> function are simple.</p>\n<p>First, the code to specify the colors buffer is gone, replaced with this:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// tell webgl how to pull out the texture coordinates from buffer</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// every coordinate composed of 2 values</span>\n    <span class=\"token keyword\">const</span> type <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">FLOAT</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// the data in the buffer is 32-bit float</span>\n    <span class=\"token keyword\">const</span> normalize <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// don't normalize</span>\n    <span class=\"token keyword\">const</span> stride <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// how many bytes to get from one set to the next</span>\n    <span class=\"token keyword\">const</span> offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// how many bytes inside the buffer to start from</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindBuffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> buffers<span class=\"token punctuation\">.</span>textureCoord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">vertexAttribPointer</span><span class=\"token punctuation\">(</span>programInfo<span class=\"token punctuation\">.</span>attribLocations<span class=\"token punctuation\">.</span>textureCoord<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> normalize<span class=\"token punctuation\">,</span> stride<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">enableVertexAttribArray</span><span class=\"token punctuation\">(</span>programInfo<span class=\"token punctuation\">.</span>attribLocations<span class=\"token punctuation\">.</span>textureCoord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Then add code to specify the texture to map onto the faces, just before draw:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token comment\">// Tell WebGL we want to affect texture unit 0</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">activeTexture</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Bind the texture to texture unit 0</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindTexture</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_2D</span><span class=\"token punctuation\">,</span> texture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Tell the shader we bound the texture to texture unit 0</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">uniform1i</span><span class=\"token punctuation\">(</span>programInfo<span class=\"token punctuation\">.</span>uniformLocations<span class=\"token punctuation\">.</span>uSampler<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>WebGL provides a minimum of 8 texture units; the first of these is <code>gl.TEXTURE0</code>. We tell WebGL we want to affect unit 0. We then call <a href=\"/en-US/docs/Web/API/WebGLRenderingContext/bindTexture\" title=\"bindTexture()\"><code>bindTexture()</code></a> which binds the texture to the <code>TEXTURE_2D</code> bind point of texture unit 0. We then tell the shader that for the <code>uSampler</code> use texture unit 0.</p>\n<p>Lastly, add <code>texture</code> as a parameter to the <code>drawScene()</code> function, both where it is defined and where it is called.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">drawScene</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> programInfo<span class=\"token punctuation\">,</span> buffers<span class=\"token punctuation\">,</span> texture<span class=\"token punctuation\">,</span> deltaTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// …</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">drawScene</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">gl<span class=\"token punctuation\">,</span> programInfo<span class=\"token punctuation\">,</span> buffers<span class=\"token punctuation\">,</span> texture<span class=\"token punctuation\">,</span> deltaTime</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// …</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>At this point, the rotating cube should be good to go.</p><iframe width=\"670\" height=\"510\" src=\"https://mdn.github.io/dom-examples/webgl-examples/tutorial/sample6/index.html\" loading=\"lazy\"></iframe>\n<p><a href=\"https://github.com/mdn/dom-examples/tree/main/webgl-examples/tutorial/sample6\" class=\"external\" rel=\" noopener\">View the complete code</a> | <a href=\"https://mdn.github.io/dom-examples/webgl-examples/tutorial/sample6/\" class=\"external\" rel=\" noopener\">Open this demo on a new page</a></p>"}},{"type":"prose","value":{"id":"cross-domain_textures","title":"Cross-domain textures","isH3":false,"content":"<p>Loading of WebGL textures is subject to cross-domain access controls. In order for your content to load a texture from another domain, CORS approval needs to be obtained. See <a href=\"/en-US/docs/Web/HTTP/CORS\">HTTP access control</a> for details on CORS.</p>\n<p>Because WebGL now requires textures to be loaded from secure contexts, you can't use textures loaded from <code>file:///</code> URLs in WebGL. That means that you'll need a secure web server to test and deploy your code. For local testing, see our guide <a href=\"/en-US/docs/Learn/Common_questions/set_up_a_local_testing_server\">How do you set up a local testing server?</a> for help.</p>\n<p>See this <a href=\"https://hacks.mozilla.org/2011/11/using-cors-to-load-webgl-textures-from-cross-domain-images/\" class=\"external\" rel=\" noopener\">hacks.mozilla.org article</a> for an explanation of how to use CORS-approved images as WebGL textures.</p>\n<p>Tainted (write-only) 2D canvases can't be used as WebGL textures. A 2D <a href=\"/en-US/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a> becomes tainted, for example, when a cross-domain image is drawn on it.</p><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/en-US/docs/Web/API/WebGL_API/Tutorial/Creating_3D_objects_using_WebGL\">« Previous</a></li>\n    <li><a class=\"button minimal\" href=\"/en-US/docs/Web/API/WebGL_API/Tutorial/Lighting_in_WebGL\">Next  »</a></li>\n</ul>"}}],"toc":[{"text":"Loading textures","id":"loading_textures"},{"text":"Mapping the texture onto the faces","id":"mapping_the_texture_onto_the_faces"},{"text":"Updating the shaders","id":"updating_the_shaders"},{"text":"Drawing the textured cube","id":"drawing_the_textured_cube"},{"text":"Cross-domain textures","id":"cross-domain_textures"}],"summary":"Now that our sample program has a rotating 3D cube, let's map a texture onto it instead of having its faces be solid colors.","popularity":0.0018,"modified":"2022-09-09T05:19:45.000Z","other_translations":[{"title":"Utilizando texturas en WebGL","locale":"es","native":"Español"},{"title":"Utilisation des textures en WebGL","locale":"fr","native":"Français"},{"title":"WebGL でのテクスチャの使用","locale":"ja","native":"日本語"},{"title":"WebGL에서 텍스쳐 사용하기","locale":"ko","native":"한국어"},{"title":"Using textures in WebGL","locale":"ru","native":"Русский"},{"title":"Using textures in WebGL","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/web/api/webgl_api/tutorial/using_textures_in_webgl","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/webgl_api/tutorial/using_textures_in_webgl/index.md","last_commit_url":"https://github.com/mdn/content/commit/f7dae62645a2c735ed6f6ed63f664bf279fdfc4b","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/WebGL_API","title":"WebGL: 2D and 3D graphics for the web"},{"uri":"/en-US/docs/Web/API/WebGL_API/Tutorial","title":"WebGL tutorial"},{"uri":"/en-US/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL","title":"Using textures in WebGL"}],"pageTitle":"Using textures in WebGL - Web APIs | MDN","noIndexing":false}}