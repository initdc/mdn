{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"AudioParam.setTargetAtTime()","mdn_url":"/en-US/docs/Web/API/AudioParam/setTargetAtTime","locale":"en-US","native":"English (US)","hasMathML":true,"sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Web_Audio_API\">Web Audio API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/AudioParam\"><code>AudioParam</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/API/AudioParam/defaultValue\"><code>defaultValue</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioParam/maxValue\"><code>maxValue</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioParam/minValue\"><code>minValue</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioParam/value\"><code>value</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/AudioParam/cancelAndHoldAtTime\"><code>cancelAndHoldAtTime()</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioParam/cancelScheduledValues\"><code>cancelScheduledValues()</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioParam/exponentialRampToValueAtTime\"><code>exponentialRampToValueAtTime()</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioParam/linearRampToValueAtTime\"><code>linearRampToValueAtTime()</code></a></li><li><em><code>setTargetAtTime()</code></em></li><li><a href=\"/en-US/docs/Web/API/AudioParam/setValueAtTime\"><code>setValueAtTime()</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioParam/setValueCurveAtTime\"><code>setValueCurveAtTime()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Web Audio API</summary><ol><li><a href=\"/en-US/docs/Web/API/AnalyserNode\"><code>AnalyserNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioBuffer\"><code>AudioBuffer</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioBufferSourceNode\"><code>AudioBufferSourceNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioContext\"><code>AudioContext</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioDestinationNode\"><code>AudioDestinationNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioListener\"><code>AudioListener</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioNode\"><code>AudioNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioProcessingEvent\"><code>AudioProcessingEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioScheduledSourceNode\"><code>AudioScheduledSourceNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioWorklet\"><code>AudioWorklet</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioWorkletGlobalScope\"><code>AudioWorkletGlobalScope</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioWorkletProcessor\"><code>AudioWorkletProcessor</code></a></li><li><a href=\"/en-US/docs/Web/API/BaseAudioContext\"><code>BaseAudioContext</code></a></li><li><a href=\"/en-US/docs/Web/API/BiquadFilterNode\"><code>BiquadFilterNode</code></a></li><li><a href=\"/en-US/docs/Web/API/ChannelMergerNode\"><code>ChannelMergerNode</code></a></li><li><a href=\"/en-US/docs/Web/API/ChannelSplitterNode\"><code>ChannelSplitterNode</code></a></li><li><a href=\"/en-US/docs/Web/API/ConstantSourceNode\"><code>ConstantSourceNode</code></a></li><li><a href=\"/en-US/docs/Web/API/ConvolverNode\"><code>ConvolverNode</code></a></li><li><a href=\"/en-US/docs/Web/API/DelayNode\"><code>DelayNode</code></a></li><li><a href=\"/en-US/docs/Web/API/DynamicsCompressorNode\"><code>DynamicsCompressorNode</code></a></li><li><a href=\"/en-US/docs/Web/API/GainNode\"><code>GainNode</code></a></li><li><a href=\"/en-US/docs/Web/API/IIRFilterNode\"><code>IIRFilterNode</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaElementAudioSourceNode\"><code>MediaElementAudioSourceNode</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaStreamAudioDestinationNode\"><code>MediaStreamAudioDestinationNode</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaStreamAudioSourceNode\"><code>MediaStreamAudioSourceNode</code></a></li><li><a href=\"/en-US/docs/Web/API/OfflineAudioCompletionEvent\"><code>OfflineAudioCompletionEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/OfflineAudioContext\"><code>OfflineAudioContext</code></a></li><li><a href=\"/en-US/docs/Web/API/OscillatorNode\"><code>OscillatorNode</code></a></li><li><a href=\"/en-US/docs/Web/API/PannerNode\"><code>PannerNode</code></a></li><li><a href=\"/en-US/docs/Web/API/PeriodicWave\"><code>PeriodicWave</code></a></li><li><a href=\"/en-US/docs/Web/API/StereoPannerNode\"><code>StereoPannerNode</code></a></li><li><a href=\"/en-US/docs/Web/API/WaveShaperNode\"><code>WaveShaperNode</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>\n  The <code>setTargetAtTime()</code> method of the\n  <a href=\"/en-US/docs/Web/API/AudioParam\"><code>AudioParam</code></a> interface schedules the start of a gradual change to the\n  <code>AudioParam</code> value. This is useful for decay or release portions of ADSR\n  envelopes.\n</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js-nolint notranslate\">setTargetAtTime(target, startTime, timeConstant)\n</pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"target\"><code>target</code></dt>\n  <dd>\n    <p>The value the parameter will start to transition towards at the given start time.</p>\n  </dd>\n  <dt id=\"starttime\"><code>startTime</code></dt>\n  <dd>\n    <p>\n      The time that the exponential transition will begin, in the same time coordinate\n      system as <a href=\"/en-US/docs/Web/API/BaseAudioContext/currentTime\" title=\"AudioContext.currentTime\"><code>AudioContext.currentTime</code></a>. If it is less than or equal to\n      <code>AudioContext.currentTime</code>, the parameter will start changing immediately.\n    </p>\n  </dd>\n  <dt id=\"timeconstant\"><code>timeConstant</code></dt>\n  <dd>\n    <p>\n      The time-constant value, given in seconds, of an exponential approach to the target\n      value. The larger this value is, the slower the transition will be.\n    </p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>\n  A reference to this <code>AudioParam</code> object. Some older browser implementations\n  of this interface return <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.\n</p>"}},{"type":"prose","value":{"id":"description","title":"Description","isH3":false,"content":"<p>\n  The change starts at the time specified in <code>startTime</code> and exponentially\n  moves towards the value given by the <code>target</code> parameter. The decay rate as\n  defined by the <code>timeConstant</code> parameter is exponential; therefore the value\n  will never reach <code>target</code> completely, but after each timestep of length\n  <code>timeConstant</code>, the value will have approached <code>target</code> by\n  another \n  <math>\n    <semantics>\n      <mrow>\n        <mn>1</mn>\n        <mo>-</mo>\n        <msup>\n          <mi>e</mi>\n          <mrow>\n            <mo>-</mo>\n            <mn>1</mn>\n          </mrow>\n        </msup>\n        <mo>â‰ˆ</mo>\n        <mn>63.2</mn>\n        <mtext>%</mtext>\n      </mrow>\n      <annotation encoding=\"TeX\">1 - e^{-1} \\approx 63.2%</annotation>\n    </semantics>\n  </math>. For the complete formula (which uses a first-order linear continuous\n  time-invariant system), check the <a href=\"https://webaudio.github.io/web-audio-api/#dom-audioparam-settargetattime\" class=\"external\" rel=\" noopener\">Web Audio specification</a>.\n</p>\n<p>\n  If you absolutely need to reach the target value by a specific time, you can use\n  <a href=\"/en-US/docs/Web/API/AudioParam/exponentialRampToValueAtTime\"><code>AudioParam.exponentialRampToValueAtTime()</code></a>. However, for mathematical\n  reasons, that method does not work if the current value or the target value is\n  <code>0</code>.\n</p>"}},{"type":"prose","value":{"id":"choosing_a_good_timeconstant","title":"Choosing a good <code>timeConstant</code>","isH3":true,"content":"<p>\n  As mentioned above, the value changes exponentially, with each\n  <code>timeConstant</code> bringing you another 63.2% toward the target value. You don't\n  have to worry about reaching the target value; once you are close enough, any further\n  changes will be imperceptible to a human listener.\n</p>\n<p>\n  Depending on your use case, getting 95% toward the target value may already be enough;\n  in that case, you could set <code>timeConstant</code> to one third of the desired\n  duration.\n</p>\n<p>\n  For more details, check the following table on how the value changes from 0% to 100% as\n  the time progresses.\n</p>\n<table>\n  <thead>\n    <tr>\n      <th>Time since <code>startTime</code></th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>0 * timeConstant</code></td>\n      <td>0%</td>\n    </tr>\n    <tr>\n      <td><code>0.5 * timeConstant</code></td>\n      <td>39.3%</td>\n    </tr>\n    <tr>\n      <td><code>1 * timeConstant</code></td>\n      <td>63.2%</td>\n    </tr>\n    <tr>\n      <td><code>2 * timeConstant</code></td>\n      <td>86.5%</td>\n    </tr>\n    <tr>\n      <td><code>3 * timeConstant</code></td>\n      <td>95.0%</td>\n    </tr>\n    <tr>\n      <td><code>4 * timeConstant</code></td>\n      <td>98.2%</td>\n    </tr>\n    <tr>\n      <td><code>5 * timeConstant</code></td>\n      <td>99.3%</td>\n    </tr>\n    <tr>\n      <td><code>n * timeConstant</code></td>\n      <td>\n        <math>\n          <semantics>\n            <mrow>\n              <mn>1</mn>\n            </mrow>\n          </semantics>\n        </math>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<p>\n  <math>\n    <semantics>\n      <mrow>\n        <mn>1</mn>\n        <mo>-</mo>\n        <msup>\n          <mi>e</mi>\n          <mrow>\n            <mo>-</mo>\n            <mi>n</mi>\n          </mrow>\n        </msup>\n      </mrow>\n      <annotation encoding=\"TeX\">1 - e^{-n}</annotation>\n    </semantics>\n  </math>\n</p>","titleAsText":"Choosing a good timeConstant"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<p>\n  In this example, we have a media source with two control buttons (see the <a href=\"https://github.com/mdn/webaudio-examples/blob/master/audio-param/index.html\" class=\"external\" rel=\" noopener\">webaudio-examples repo</a> for the source code, or <a href=\"https://mdn.github.io/webaudio-examples/audio-param/\" class=\"external\" rel=\" noopener\">view the example live</a>.) When these buttons are pressed, <code>setTargetAtTime()</code> is used to\n  fade the gain value up to 1.0, and down to 0, respectively, with the effect starting\n  after 1 second, and the length of time the effect lasts being controlled by the\n  timeConstant.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// create audio context</span>\n<span class=\"token keyword\">const</span> audioCtx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AudioContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// set basic variables for example</span>\n<span class=\"token keyword\">const</span> myAudio <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"audio\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> atTimePlus <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".at-time-plus\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> atTimeMinus <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".at-time-minus\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create a MediaElementAudioSourceNode</span>\n<span class=\"token comment\">// Feed the HTMLMediaElement into it</span>\n<span class=\"token keyword\">const</span> source <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createMediaElementSource</span><span class=\"token punctuation\">(</span>myAudio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create a gain node and set it's gain value to 0.5</span>\n<span class=\"token keyword\">const</span> gainNode <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createGain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngainNode<span class=\"token punctuation\">.</span>gain<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> currGain <span class=\"token operator\">=</span> gainNode<span class=\"token punctuation\">.</span>gain<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// connect the AudioBufferSourceNode to the gainNode</span>\n<span class=\"token comment\">// and the gainNode to the destination</span>\nsource<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>gainNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngainNode<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>audioCtx<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// set buttons to do something onclick</span>\natTimePlus<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  currGain <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n  gainNode<span class=\"token punctuation\">.</span>gain<span class=\"token punctuation\">.</span><span class=\"token function\">setTargetAtTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> audioCtx<span class=\"token punctuation\">.</span>currentTime <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\natTimeMinus<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  currGain <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  gainNode<span class=\"token punctuation\">.</span>gain<span class=\"token punctuation\">.</span><span class=\"token function\">setTargetAtTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> audioCtx<span class=\"token punctuation\">.</span>currentTime <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://webaudio.github.io/web-audio-api/#dom-audioparam-settargetattime","title":"Web Audio API"}],"query":"api.AudioParam.setTargetAtTime"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.AudioParam.setTargetAtTime","dataURL":"/en-US/docs/Web/API/AudioParam/setTargetAtTime/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API\">Using the Web Audio API</a></li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Description","id":"description"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The setTargetAtTime() method of the\n  AudioParam interface schedules the start of a gradual change to the\n  AudioParam value. This is useful for decay or release portions of ADSR\n  envelopes.","popularity":0.0002,"modified":"2022-09-14T13:55:15.000Z","other_translations":[{"title":"AudioParam.setTargetAtTime()","locale":"ko","native":"í•œêµ­ì–´"}],"source":{"folder":"en-us/web/api/audioparam/settargetattime","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/audioparam/settargetattime/index.md","last_commit_url":"https://github.com/mdn/content/commit/02e1bfcad5fd0de845fb033d331c3c027afa2d6e","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/AudioParam","title":"AudioParam"},{"uri":"/en-US/docs/Web/API/AudioParam/setTargetAtTime","title":"AudioParam.setTargetAtTime()"}],"pageTitle":"AudioParam.setTargetAtTime() - Web APIs | MDN","noIndexing":false}}