{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"ReadableStream.pipeThrough()","mdn_url":"/en-US/docs/Web/API/ReadableStream/pipeThrough","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Streams_API\">Streams API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/API/ReadableStream/ReadableStream\"><code>ReadableStream()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/API/ReadableStream/locked\"><code>locked</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/ReadableStream/cancel\"><code>cancel()</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStream/getReader\"><code>getReader()</code></a></li><li><em><code>pipeThrough()</code></em></li><li><a href=\"/en-US/docs/Web/API/ReadableStream/pipeTo\"><code>pipeTo()</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStream/tee\"><code>tee()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Streams</summary><ol><li><a href=\"/en-US/docs/Web/API/ByteLengthQueuingStrategy\"><code>ByteLengthQueuingStrategy</code></a></li><li><a href=\"/en-US/docs/Web/API/CountQueuingStrategy\"><code>CountQueuingStrategy</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableByteStreamController\"><code>ReadableByteStreamController</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamBYOBReader\"><code>ReadableStreamBYOBReader</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamBYOBRequest\"><code>ReadableStreamBYOBRequest</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamDefaultController\"><code>ReadableStreamDefaultController</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamDefaultReader\"><code>ReadableStreamDefaultReader</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/body\"><code>Response.body</code></a></li><li><a href=\"/en-US/docs/Web/API/WritableStream\"><code>WritableStream</code></a></li><li><a href=\"/en-US/docs/Web/API/WritableStreamDefaultController\"><code>WritableStreamDefaultController</code></a></li><li><a href=\"/en-US/docs/Web/API/WritableStreamDefaultWriter\"><code>WritableStreamDefaultWriter</code></a></li><li><a href=\"/en-US/docs/Web/API/fetch\"><code>fetch()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong><code>pipeThrough()</code></strong> method of the <a href=\"/en-US/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> interface provides a chainable way of piping the current stream through a transform stream or any other writable/readable pair.</p>\n<p>Piping a stream will generally lock it for the duration of the pipe, preventing other readers from locking it.</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js-nolint notranslate\">pipeThrough(transformStream)\npipeThrough(transformStream, options)\n</pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"transformstream\"><code>transformStream</code></dt>\n  <dd>\n    <p>\n      A <a href=\"/en-US/docs/Web/API/TransformStream\"><code>TransformStream</code></a> (or an object with the structure\n      <code>{writable, readable}</code>) consisting of a readable stream and a writable\n      stream working together to transform some data from one form to another. Data written\n      to the <code>writable</code> stream can be read in some transformed state by the\n      <code>readable</code> stream. For example, a <a href=\"/en-US/docs/Web/API/TextDecoder\"><code>TextDecoder</code></a>, has bytes\n      written to it and strings read from it, while a video decoder has encoded bytes\n      written to it and uncompressed video frames read from it.\n    </p>\n  </dd>\n  <dt id=\"options\"><code>options</code> <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>\n      The options that should be used when piping to the <code>writable</code> stream.\n      Available options are:\n    </p>\n    <dl>\n      <dt id=\"preventclose\"><code>preventClose</code></dt>\n      <dd>\n        <p>\n          If this is set to <code>true</code>, the source <code>ReadableStream</code> closing will no longer cause the destination <code>WritableStream</code> to be closed.\n          The method will return a fulfilled promise once this process completes, unless an error is encountered while closing the destination, in which case it will be rejected with that error.\n        </p>\n      </dd>\n      <dt id=\"preventabort\"><code>preventAbort</code></dt>\n      <dd>\n        <p>\n          If this is set to <code>true</code>, errors in the source <code>ReadableStream</code> will no longer abort the destination <code>WritableStream</code>.\n          The method will return a promise rejected with the source's error, or with any error that occurs during aborting the destination.\n        </p>\n      </dd>\n      <dt id=\"preventcancel\"><code>preventCancel</code></dt>\n      <dd>\n        <p>\n          If this is set to <code>true</code>, errors in the destination <code>WritableStream</code> will no longer cancel the source <code>ReadableStream</code>.\n          In this case the method will return a promise rejected with the source's error, or with any error that occurs during canceling the source.\n          In addition, if the destination writable stream starts out closed or closing, the source readable stream will no longer be canceled.\n          In this case the method will return a promise rejected with an error indicating piping to a closed stream failed, or with any error that occurs during canceling the source.\n        </p>\n      </dd>\n      <dt id=\"signal\"><code>signal</code></dt>\n      <dd>\n        <p>If set to an <a href=\"/en-US/docs/Web/API/AbortSignal\"><code>AbortSignal</code></a> object, ongoing pipe operations can then be aborted via the corresponding <a href=\"/en-US/docs/Web/API/AbortController\"><code>AbortController</code></a>.</p>\n      </dd>\n    </dl>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>The <code>readable</code> side of the <code>transformStream</code>.</p>"}},{"type":"prose","value":{"id":"exceptions","title":"Exceptions","isH3":true,"content":"<dl>\n  <dt id=\"typeerror\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a></dt>\n  <dd>\n    <p>Thrown if the <code>writable</code> and/or <code>readable</code> property of <code>transformStream</code> are undefined.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<p>In the following example (see <a href=\"https://mdn.github.io/dom-examples/streams/png-transform-stream/\" class=\"external\" rel=\" noopener\">Unpack chunks of a PNG</a> for the full code running live, and <a href=\"https://github.com/mdn/dom-examples/tree/main/streams/png-transform-stream\" class=\"external\" rel=\" noopener\">png-transform-stream</a> for the source code), an image is fetched and its body retrieved as a <a href=\"/en-US/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a>.</p>\n<p>Next, we log the contents of the readable stream, use <code>pipeThrough()</code> to send it to a new function that creates a gray-scaled version of the stream, then log the new stream's contents too.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Fetch the original image</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'png-logo.png'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Retrieve its body as ReadableStream</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> response<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">logReadableStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fetch Response Stream'</span><span class=\"token punctuation\">,</span> rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Create a gray-scaled PNG stream out of the original</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">body</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> body<span class=\"token punctuation\">.</span><span class=\"token function\">pipeThrough</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PNGTransformStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">logReadableStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'PNG Chunk Stream'</span><span class=\"token punctuation\">,</span> rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://streams.spec.whatwg.org/#ref-for-rs-pipe-through②","title":"Streams Standard"}],"query":"api.ReadableStream.pipeThrough"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.ReadableStream.pipeThrough","dataURL":"/en-US/docs/Web/API/ReadableStream/pipeThrough/bcd.json"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"}],"summary":"The pipeThrough() method of the ReadableStream interface provides a chainable way of piping the current stream through a transform stream or any other writable/readable pair.","popularity":0.0006,"modified":"2022-09-13T06:09:49.000Z","other_translations":[{"title":"ReadableStream.pipeThrough()","locale":"ja","native":"日本語"},{"title":"ReadableStream.pipeThrough()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/web/api/readablestream/pipethrough","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/readablestream/pipethrough/index.md","last_commit_url":"https://github.com/mdn/content/commit/2b8f5d9a29f00aea5d2edfa78d1fb90c51752858","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/ReadableStream","title":"ReadableStream"},{"uri":"/en-US/docs/Web/API/ReadableStream/pipeThrough","title":"ReadableStream.pipeThrough()"}],"pageTitle":"ReadableStream.pipeThrough() - Web APIs | MDN","noIndexing":false}}