{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"ReadableStream()","mdn_url":"/en-US/docs/Web/API/ReadableStream/ReadableStream","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Streams_API\">Streams API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><em><code>ReadableStream()</code></em></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/API/ReadableStream/locked\"><code>locked</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/ReadableStream/cancel\"><code>cancel()</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStream/getReader\"><code>getReader()</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStream/pipeThrough\"><code>pipeThrough()</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStream/pipeTo\"><code>pipeTo()</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStream/tee\"><code>tee()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Streams</summary><ol><li><a href=\"/en-US/docs/Web/API/ByteLengthQueuingStrategy\"><code>ByteLengthQueuingStrategy</code></a></li><li><a href=\"/en-US/docs/Web/API/CountQueuingStrategy\"><code>CountQueuingStrategy</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableByteStreamController\"><code>ReadableByteStreamController</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamBYOBReader\"><code>ReadableStreamBYOBReader</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamBYOBRequest\"><code>ReadableStreamBYOBRequest</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamDefaultController\"><code>ReadableStreamDefaultController</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamDefaultReader\"><code>ReadableStreamDefaultReader</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/body\"><code>Response.body</code></a></li><li><a href=\"/en-US/docs/Web/API/WritableStream\"><code>WritableStream</code></a></li><li><a href=\"/en-US/docs/Web/API/WritableStreamDefaultController\"><code>WritableStreamDefaultController</code></a></li><li><a href=\"/en-US/docs/Web/API/WritableStreamDefaultWriter\"><code>WritableStreamDefaultWriter</code></a></li><li><a href=\"/en-US/docs/Web/API/fetch\"><code>fetch()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong><code>ReadableStream()</code></strong> constructor creates and returns a readable stream object from the given handlers.</p>\n<p>Note that while all parameters are technically optional, omitting the <code>underlyingSource</code> will result in a stream that has no source, and that can't be read from (readers return a promise that will never be resolved).</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js-nolint notranslate\">new ReadableStream()\nnew ReadableStream(underlyingSource)\nnew ReadableStream(underlyingSource, queuingStrategy)\n</pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"underlyingsource\"><code>underlyingSource</code> <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>\n      An object containing methods and properties that define how the constructed stream instance will behave.\n      <code>underlyingSource</code> can contain the following:\n    </p>\n    <dl>\n      <dt id=\"start\"><code>start</code>(controller) <span class=\"badge inline optional\">Optional</span></dt>\n      <dd>\n        <p>\n          This is a method, called immediately when the object is constructed. The\n          contents of this method are defined by the developer, and should aim to get access\n          to the stream source, and do anything else required to set up the stream\n          functionality. If this process is to be done asynchronously, it can return a\n          promise to signal success or failure. The <code>controller</code> parameter passed\n          to this method is a <a href=\"/en-US/docs/Web/API/ReadableStreamDefaultController\"><code>ReadableStreamDefaultController</code></a> or a\n          <a href=\"/en-US/docs/Web/API/ReadableByteStreamController\"><code>ReadableByteStreamController</code></a>, depending on the value of the\n          <code>type</code> property. This can be used by the developer to control the\n          stream during set up.\n        </p>\n      </dd>\n      <dt id=\"pull\"><code>pull</code>(controller) <span class=\"badge inline optional\">Optional</span></dt>\n      <dd>\n        <p>\n          This method, also defined by the developer, will be called repeatedly when the\n          stream's internal queue of chunks is not full, up until it reaches its high water\n          mark. If <code>pull()</code> returns a promise, then it won't be called again\n          until that promise fulfills; if the promise rejects, the stream will become\n          errored. The <code>controller</code> parameter passed to this method is a\n          <a href=\"/en-US/docs/Web/API/ReadableStreamDefaultController\"><code>ReadableStreamDefaultController</code></a> or a\n          <a href=\"/en-US/docs/Web/API/ReadableByteStreamController\"><code>ReadableByteStreamController</code></a>, depending on the value of the\n          <code>type</code> property. This can be used by the developer to control the\n          stream as more chunks are fetched.\n        </p>\n      </dd>\n      <dt id=\"cancel\"><code>cancel</code>(reason) <span class=\"badge inline optional\">Optional</span></dt>\n      <dd>\n        <p>\n          This method, also defined by the developer, will be called if the app signals\n          that the stream is to be cancelled (e.g. if <a href=\"/en-US/docs/Web/API/ReadableStream/cancel\"><code>ReadableStream.cancel()</code></a>\n          is called). The contents should do whatever is necessary to release access to the\n          stream source. If this process is asynchronous, it can return a promise to signal\n          success or failure. The <code>reason</code> parameter contains a\n          string describing why the stream was cancelled.\n        </p>\n      </dd>\n      <dt id=\"type\"><code>type</code> <span class=\"badge inline optional\">Optional</span></dt>\n      <dd>\n        <p>\n          This property controls what type of readable stream is being dealt with. If it\n          is included with a value set to <code>\"bytes\"</code>, the passed controller object\n          will be a <a href=\"/en-US/docs/Web/API/ReadableByteStreamController\"><code>ReadableByteStreamController</code></a> capable of handling a BYOB\n          (bring your own buffer)/byte stream. If it is not included, the passed controller\n          will be a <a href=\"/en-US/docs/Web/API/ReadableStreamDefaultController\"><code>ReadableStreamDefaultController</code></a>.\n        </p>\n      </dd>\n      <dt id=\"autoallocatechunksize\"><code>autoAllocateChunkSize</code> <span class=\"badge inline optional\">Optional</span></dt>\n      <dd>\n        <p>\n          For byte streams, the developer can set the <code>autoAllocateChunkSize</code> with a positive integer value to turn on the stream's auto-allocation feature.\n          With this is set, the stream implementation will automatically allocate a view buffer of the specified size in <a href=\"/en-US/docs/Web/API/ReadableByteStreamController/byobRequest\"><code>ReadableByteStreamController.byobRequest</code></a> when required.\n        </p>\n        <p>\n          This must be set to enable zero-copy transfers to be used with a default <a href=\"/en-US/docs/Web/API/ReadableStreamDefaultReader\"><code>ReadableStreamDefaultReader</code></a>.\n          If not set, a default reader will still stream data, but <a href=\"/en-US/docs/Web/API/ReadableByteStreamController/byobRequest\"><code>ReadableByteStreamController.byobRequest</code></a> will always be <code>null</code> and transfers to the consumer must be via the stream's internal queues.\n        </p>\n      </dd>\n    </dl>\n  </dd>\n  <dt id=\"queuingstrategy\"><code>queuingStrategy</code> <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>\n      An object that optionally defines a queuing strategy for the stream. This takes two\n      parameters:\n    </p>\n    <dl>\n      <dt id=\"highwatermark\"><code>highWaterMark</code></dt>\n      <dd>\n        <p>\n          A non-negative integer — this defines the total number of chunks that can be\n          contained in the internal queue before backpressure is applied.\n        </p>\n      </dd>\n      <dt id=\"sizechunk\"><code>size(chunk)</code></dt>\n      <dd>\n        <p>\n          A method containing a parameter <code>chunk</code> — this indicates the size to\n          use for each chunk, in bytes.\n        </p>\n      </dd>\n    </dl>\n    <div class=\"notecard note\" id=\"sect1\">\n      <p>\n        <strong>Note:</strong> You could define your own custom\n        <code>queuingStrategy</code>, or use an instance of\n        <a href=\"/en-US/docs/Web/API/ByteLengthQueuingStrategy\"><code>ByteLengthQueuingStrategy</code></a> or <a href=\"/en-US/docs/Web/API/CountQueuingStrategy\"><code>CountQueuingStrategy</code></a>\n        for this object value. If no <code>queuingStrategy</code> is supplied, the default\n        used is the same as a <code>CountQueuingStrategy</code> with a high water mark of\n        1.\n      </p>\n    </div>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>An instance of the <a href=\"/en-US/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> object.</p>"}},{"type":"prose","value":{"id":"exceptions","title":"Exceptions","isH3":true,"content":"<dl>\n  <dt id=\"rangeerror\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a></dt>\n  <dd>\n    <p>Thrown if the supplied type value is neither <code>\"bytes\"</code> nor <code>undefined</code>.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<p>\n  In the following simple example, a custom <code>ReadableStream</code> is created using\n  a constructor (see our <a href=\"https://mdn.github.io/dom-examples/streams/simple-random-stream/\" class=\"external\" rel=\" noopener\">Simple random stream example</a> for the full code). The <code>start()</code> function generates a\n  random string of text every second and enqueues it into the stream. A\n  <code>cancel()</code> function is also provided to stop the generation if\n  <a href=\"/en-US/docs/Web/API/ReadableStream/cancel\"><code>ReadableStream.cancel()</code></a> is called for any reason.\n</p>\n<p>\n  When a button is pressed, the generation is stopped, the stream is closed using\n  <a href=\"/en-US/docs/Web/API/ReadableStreamDefaultController/close\"><code>ReadableStreamDefaultController.close()</code></a>, and another function is run,\n  which reads the data back out of the stream.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReadableStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    interval <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> string <span class=\"token operator\">=</span> <span class=\"token function\">randomChars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Add the string to the stream</span>\n      controller<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// show it on the screen</span>\n      <span class=\"token keyword\">let</span> listItem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      listItem<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> string<span class=\"token punctuation\">;</span>\n      list1<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>listItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    button<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">fetchStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      controller<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">pull</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// We don't really need a pull in this example</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// This is called if the reader cancels,</span>\n    <span class=\"token comment\">// so we should stop generating strings</span>\n    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://streams.spec.whatwg.org/#ref-for-rs-constructor⑤","title":"Streams Standard"}],"query":"api.ReadableStream.ReadableStream"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.ReadableStream.ReadableStream","dataURL":"/en-US/docs/Web/API/ReadableStream/ReadableStream/bcd.json"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"}],"summary":"The ReadableStream() constructor creates and returns a readable stream object from the given handlers.","popularity":0.0009,"modified":"2022-09-13T06:09:49.000Z","other_translations":[{"title":"ReadableStream()","locale":"ja","native":"日本語"},{"title":"ReadableStream.ReadableStream()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/web/api/readablestream/readablestream","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/readablestream/readablestream/index.md","last_commit_url":"https://github.com/mdn/content/commit/2b8f5d9a29f00aea5d2edfa78d1fb90c51752858","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/ReadableStream","title":"ReadableStream"},{"uri":"/en-US/docs/Web/API/ReadableStream/ReadableStream","title":"ReadableStream()"}],"pageTitle":"ReadableStream() - Web APIs | MDN","noIndexing":false}}