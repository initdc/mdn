{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"KeyboardEvent","mdn_url":"/en-US/docs/Web/API/KeyboardEvent","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/UI_Events\">UI Events</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/KeyboardEvent\"><code>KeyboardEvent</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/API/KeyboardEvent/KeyboardEvent\"><code>KeyboardEvent()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/API/KeyboardEvent/altKey\"><code>altKey</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/API/KeyboardEvent/charCode\"><code>charCode</code></a></li><li><a href=\"/en-US/docs/Web/API/KeyboardEvent/code\"><code>code</code></a></li><li><a href=\"/en-US/docs/Web/API/KeyboardEvent/ctrlKey\"><code>ctrlKey</code></a></li><li><a href=\"/en-US/docs/Web/API/KeyboardEvent/isComposing\"><code>isComposing</code></a></li><li><a href=\"/en-US/docs/Web/API/KeyboardEvent/key\"><code>key</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/API/KeyboardEvent/keyCode\"><code>keyCode</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/API/KeyboardEvent/keyIdentifier\"><code>keyIdentifier</code></a></li><li><a href=\"/en-US/docs/Web/API/KeyboardEvent/location\"><code>location</code></a></li><li><a href=\"/en-US/docs/Web/API/KeyboardEvent/metaKey\"><code>metaKey</code></a></li><li><a href=\"/en-US/docs/Web/API/KeyboardEvent/repeat\"><code>repeat</code></a></li><li><a href=\"/en-US/docs/Web/API/KeyboardEvent/shiftKey\"><code>shiftKey</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/KeyboardEvent/getModifierState\"><code>getModifierState()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent\"><code>initKeyboardEvent()</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/API/KeyboardEvent/initKeyEvent\"><code>initKeyEvent()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Inheritance:</summary><ol><li><a href=\"/en-US/docs/Web/API/UIEvent\"><code>UIEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/Event\"><code>Event</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for UI Events</summary><ol><li><a href=\"/en-US/docs/Web/API/CompositionEvent\"><code>CompositionEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/FocusEvent\"><code>FocusEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/InputEvent\"><code>InputEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/MouseEvent\"><code>MouseEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/MouseScrollEvent\"><code>MouseScrollEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/MutationEvent\"><code>MutationEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/UIEvent\"><code>UIEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/WheelEvent\"><code>WheelEvent</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>KeyboardEvent</code></strong> objects describe a user interaction with the keyboard; each event describes a single interaction between the user and a key (or combination of a key with modifier keys) on the keyboard. The event type (<a href=\"/en-US/docs/Web/API/Element/keydown_event\" title=\"keydown\"><code>keydown</code></a>, <a href=\"/en-US/docs/Web/API/Element/keypress_event\" title=\"keypress\"><code>keypress</code></a>, or <a href=\"/en-US/docs/Web/API/Element/keyup_event\" title=\"keyup\"><code>keyup</code></a>) identifies what kind of keyboard activity occurred.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> <code>KeyboardEvent</code> events just indicate what interaction the user had with a key on the keyboard at a low level, providing no contextual meaning to that interaction. When you need to handle text input, use the <a href=\"/en-US/docs/Web/API/HTMLElement/input_event\" title=\"input\"><code>input</code></a> event instead. Keyboard events may not be fired if the user is using an alternate means of entering text, such as a handwriting system on a tablet or graphics tablet.</p>\n</div><svg viewBox=\"-1 -1 650 42\" preserveAspectRatio=\"xMinYMin meet\">\n  <a style=\"text-decoration: none;\" xlink:href=\"/en-US/docs/Web/API/Event\">\n    <rect x=\"0\" y=\"0\" width=\"75\" height=\"25\" fill=\"#fff\" stroke=\"#D4DDE4\" stroke-width=\"2px\"></rect>\n    <text x=\"37.5\" y=\"16\" font-size=\"10px\" fill=\"#4D4E53\" text-anchor=\"middle\">\n      Event\n    </text>\n  </a>\n  <line x1=\"75\" y1=\"14\" x2=\"105\" y2=\"14\" stroke=\"#D4DDE4\" \"=\"\"></line>\n  <polyline points=\"75,14 85,9 85,19 75,14\" stroke=\"#D4DDE4\" fill=\"#fff\"></polyline>\n  <a style=\"text-decoration: none;\" xlink:href=\"/en-US/docs/Web/API/UIEvent\">\n    <rect x=\"105\" y=\"0\" width=\"75\" height=\"25\" fill=\"#fff\" stroke=\"#D4DDE4\" stroke-width=\"2px\"></rect>\n    <text x=\"142.5\" y=\"16\" font-size=\"10px\" fill=\"#4D4E53\" text-anchor=\"middle\">\n      UIEvent\n    </text>\n  </a>\n  <line x1=\"180\" y1=\"14\" x2=\"210\" y2=\"14\" stroke=\"#D4DDE4\" \"=\"\"></line>\n  <polyline points=\"180,14 190,9 190,19 180,14\" stroke=\"#D4DDE4\" fill=\"#fff\"></polyline>\n  <a style=\"text-decoration: none;\" xlink:href=\"/en-US/docs/Web/API/KeyboardEvent\" aria-current=\"page\">\n    <rect x=\"210\" y=\"0\" width=\"104\" height=\"25\" fill=\"#F4F7F8\" stroke=\"#D4DDE4\" stroke-width=\"2px\"></rect>\n    <text x=\"262\" y=\"16\" font-size=\"10px\" fill=\"#4D4E53\" text-anchor=\"middle\">\n      KeyboardEvent\n    </text>\n  </a></svg>"}},{"type":"prose","value":{"id":"constructor","title":"Constructor","isH3":false,"content":"<dl>\n  <dt id=\"keyboardevent\"><a href=\"/en-US/docs/Web/API/KeyboardEvent/KeyboardEvent\" title=\"KeyboardEvent()\"><code>KeyboardEvent()</code></a></dt>\n  <dd>\n    <p>Creates a new <code>KeyboardEvent</code> object.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"constants","title":"Constants","isH3":false,"content":"<p>The <code>KeyboardEvent</code> interface defines the following constants.</p>"}},{"type":"prose","value":{"id":"keyboard_locations","title":"Keyboard locations","isH3":true,"content":"<p>The following constants identify which part of the keyboard the key event originates from. They are accessed as <code>KeyboardEvent.DOM_KEY_LOCATION_STANDARD</code> and so forth.</p>\n<table class=\"standard-table\">\n  <caption>Keyboard location identifiers</caption>\n  <thead>\n    <tr>\n      <th scope=\"col\">Constant</th>\n      <th scope=\"col\">Value</th>\n      <th scope=\"col\">Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>DOM_KEY_LOCATION_STANDARD</code></td>\n      <td>0x00</td>\n      <td>\n        <p>\n          The key described by the event is not identified as being located in a\n          particular area of the keyboard; it is not located on the numeric\n          keypad (unless it's the NumLock key), and for keys that are duplicated\n          on the left and right sides of the keyboard, the key is, for whatever\n          reason, not to be associated with that location.\n        </p>\n        <p>\n          Examples include alphanumeric keys on the standard PC 101 US keyboard,\n          the NumLock key, and the space bar.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>DOM_KEY_LOCATION_LEFT</code></td>\n      <td>0x01</td>\n      <td>\n        <p>\n          The key is one which may exist in multiple locations on the keyboard\n          and, in this instance, is on the left side of the keyboard.\n        </p>\n        <p>\n          Examples include the left Control key, the left Command key on a\n          Macintosh keyboard, or the left Shift key.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>DOM_KEY_LOCATION_RIGHT</code></td>\n      <td>0x02</td>\n      <td>\n        <p>\n          The key is one which may exist in multiple positions on the keyboard\n          and, in this case, is located on the right side of the keyboard.\n        </p>\n        <p>\n          Examples include the right Shift key and the right Alt key (Option on\n          a Mac keyboard).\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>DOM_KEY_LOCATION_NUMPAD</code></td>\n      <td>0x03</td>\n      <td>\n        <p>\n          The key is located on the numeric keypad, or is a virtual key\n          associated with the numeric keypad if there's more than one place the\n          key could originate from. The NumLock key does not fall into this\n          group and is always encoded with the location\n          <code>DOM_KEY_LOCATION_STANDARD</code>.\n        </p>\n        <p>\n          Examples include the digits on the numeric keypad, the keypad's Enter\n          key, and the decimal point on the keypad.\n        </p>\n      </td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"properties","title":"Properties","isH3":false,"content":"<p><em>This interface also inherits properties of its parents, <a href=\"/en-US/docs/Web/API/UIEvent\"><code>UIEvent</code></a> and <a href=\"/en-US/docs/Web/API/Event\"><code>Event</code></a>.</em></p>\n<dl>\n  <dt id=\"keyboardevent.altkey\"><a href=\"/en-US/docs/Web/API/KeyboardEvent/altKey\"><code>KeyboardEvent.altKey</code></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>Returns a boolean value that is <code>true</code> if the <kbd>Alt</kbd> (<kbd>Option</kbd> or <kbd>⌥</kbd> on macOS) key was active when the key event was generated.</p>\n  </dd>\n  <dt id=\"keyboardevent.code\"><a href=\"/en-US/docs/Web/API/KeyboardEvent/code\"><code>KeyboardEvent.code</code></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>Returns a string with the code value of the physical key represented by the event.</p>\n    <div class=\"notecard warning\" id=\"sect2\">\n      <p><strong>Warning:</strong> This ignores the user's keyboard layout, so that if the user presses the key at the \"Y\" position in a QWERTY keyboard layout (near the middle of the row above the home row), this will always return \"KeyY\", even if the user has a QWERTZ keyboard (which would mean the user expects a \"Z\" and all the other properties would indicate a \"Z\") or a Dvorak keyboard layout (where the user would expect an \"F\"). If you want to display the correct keystrokes to the user, you can use <a href=\"/en-US/docs/Web/API/Keyboard/getLayoutMap\"><code>Keyboard.getLayoutMap()</code></a>.</p>\n    </div>\n  </dd>\n  <dt id=\"keyboardevent.ctrlkey\"><a href=\"/en-US/docs/Web/API/KeyboardEvent/ctrlKey\"><code>KeyboardEvent.ctrlKey</code></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>Returns a boolean value that is <code>true</code> if the <kbd>Ctrl</kbd> key was active when the key event was generated.</p>\n  </dd>\n  <dt id=\"keyboardevent.iscomposing\"><a href=\"/en-US/docs/Web/API/KeyboardEvent/isComposing\"><code>KeyboardEvent.isComposing</code></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>Returns a boolean value that is <code>true</code> if the event is fired between after <code>compositionstart</code> and before <code>compositionend</code>.</p>\n  </dd>\n  <dt id=\"keyboardevent.key\"><a href=\"/en-US/docs/Web/API/KeyboardEvent/key\"><code>KeyboardEvent.key</code></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>Returns a string representing the key value of the key represented by the event.</p>\n  </dd>\n  <dt id=\"keyboardevent.locale\"><a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>KeyboardEvent.locale</code></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>Returns a string representing a locale string indicating the locale the keyboard is configured for. This may be the empty string if the browser or device doesn't know the keyboard's locale.</p>\n    <div class=\"notecard note\" id=\"sect3\">\n      <p><strong>Note:</strong> This does not describe the locale of the data being entered. A user may be using one keyboard layout while typing text in a different language.</p>\n    </div>\n  </dd>\n  <dt id=\"keyboardevent.location\"><a href=\"/en-US/docs/Web/API/KeyboardEvent/location\"><code>KeyboardEvent.location</code></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>Returns a number representing the location of the key on the keyboard or other input device. A list of the constants identifying the locations is shown above in <a href=\"#keyboard_locations\">Keyboard locations</a>.</p>\n  </dd>\n  <dt id=\"keyboardevent.metakey\"><a href=\"/en-US/docs/Web/API/KeyboardEvent/metaKey\"><code>KeyboardEvent.metaKey</code></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>Returns a boolean value that is <code>true</code> if the <kbd>Meta</kbd> key (on Mac keyboards, the <kbd>⌘ Command</kbd> key; on Windows keyboards, the Windows key (<kbd>⊞</kbd>)) was active when the key event was generated.</p>\n  </dd>\n  <dt id=\"keyboardevent.repeat\"><a href=\"/en-US/docs/Web/API/KeyboardEvent/repeat\"><code>KeyboardEvent.repeat</code></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>Returns a boolean value that is <code>true</code> if the key is being held down such that it is automatically repeating.</p>\n  </dd>\n  <dt id=\"keyboardevent.shiftkey\"><a href=\"/en-US/docs/Web/API/KeyboardEvent/shiftKey\"><code>KeyboardEvent.shiftKey</code></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>Returns a boolean value that is <code>true</code> if the <kbd>Shift</kbd> key was active when the key event was generated.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"methods","title":"Methods","isH3":false,"content":"<p><em>This interface also inherits methods of its parents, <a href=\"/en-US/docs/Web/API/UIEvent\"><code>UIEvent</code></a> and <a href=\"/en-US/docs/Web/API/Event\"><code>Event</code></a>.</em></p>\n<dl>\n  <dt id=\"keyboardevent.getmodifierstate\"><a href=\"/en-US/docs/Web/API/KeyboardEvent/getModifierState\"><code>KeyboardEvent.getModifierState()</code></a></dt>\n  <dd>\n    <p>Returns a boolean value indicating if a modifier key such as <kbd>Alt</kbd>, <kbd>Shift</kbd>, <kbd>Ctrl</kbd>, or <kbd>Meta</kbd>, was pressed when the event was created.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"obsolete_methods","title":"Obsolete methods","isH3":false,"content":"<dl>\n  <dt id=\"keyboardevent.initkeyevent\"><a href=\"/en-US/docs/Web/API/KeyboardEvent/initKeyEvent\"><code>KeyboardEvent.initKeyEvent()</code></a> <svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg></dt>\n  <dd>\n    <p>Initializes a <code>KeyboardEvent</code> object. This was implemented only by Firefox, and is no longer supported even there; instead, you should use the <a href=\"/en-US/docs/Web/API/KeyboardEvent/KeyboardEvent\" title=\"KeyboardEvent()\"><code>KeyboardEvent()</code></a> constructor.</p>\n  </dd>\n  <dt id=\"keyboardevent.initkeyboardevent\"><a href=\"/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent\"><code>KeyboardEvent.initKeyboardEvent()</code></a> <svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg></dt>\n  <dd>\n    <p>Initializes a <code>KeyboardEvent</code> object. This is now deprecated. You should instead use the <a href=\"/en-US/docs/Web/API/KeyboardEvent/KeyboardEvent\" title=\"KeyboardEvent()\"><code>KeyboardEvent()</code></a> constructor.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"obsolete_properties","title":"Obsolete properties","isH3":false,"content":"<dl>\n  <dt id=\"keyboardevent.char\"><a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>KeyboardEvent.char</code></a> <svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg> <svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>Returns a string representing the character value of the key. If the key corresponds to a printable character, this value is a non-empty Unicode string containing that character. If the key doesn't have a printable representation, this is an empty string.</p>\n    <div class=\"notecard note\" id=\"sect4\">\n      <p><strong>Note:</strong> If the key is used as a macro that inserts multiple characters, this property's value is the entire string, not just the first character.</p>\n    </div>\n  </dd>\n  <dt id=\"keyboardevent.charcode\"><a href=\"/en-US/docs/Web/API/KeyboardEvent/charCode\"><code>KeyboardEvent.charCode</code></a> <svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>Returns a number representing the Unicode reference number of the key; this property is used only by the <code>keypress</code> event. For keys whose <code>char</code> property contains multiple characters, this is the Unicode value of the first character in that property. In Firefox 26 this returns codes for printable characters.</p>\n    <div class=\"notecard warning\" id=\"sect5\">\n      <p><strong>Warning:</strong> This property is deprecated; you should use <a href=\"/en-US/docs/Web/API/KeyboardEvent/key\"><code>KeyboardEvent.key</code></a> instead, if available.</p>\n    </div>\n  </dd>\n  <dt id=\"keyboardevent.keycode\"><a href=\"/en-US/docs/Web/API/KeyboardEvent/keyCode\"><code>KeyboardEvent.keyCode</code></a> <svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>Returns a number representing a system and implementation dependent numerical code identifying the unmodified value of the pressed key.</p>\n    <div class=\"notecard warning\" id=\"sect6\">\n      <p><strong>Warning:</strong> This property is deprecated; you should use <a href=\"/en-US/docs/Web/API/KeyboardEvent/key\"><code>KeyboardEvent.key</code></a> instead, if available.</p>\n    </div>\n  </dd>\n  <dt id=\"keyboardevent.keyidentifier\"><a href=\"/en-US/docs/Web/API/KeyboardEvent/keyIdentifier\"><code>KeyboardEvent.keyIdentifier</code></a> <svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg> <svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>This property is non-standard and has been deprecated in favor of <a href=\"/en-US/docs/Web/API/KeyboardEvent/key\"><code>KeyboardEvent.key</code></a>. It was part of an old version of DOM Level 3 Events.</p>\n  </dd>\n  <dt id=\"keyboardevent.keylocation\"><a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>KeyboardEvent.keyLocation</code></a> <svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg> <svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>This is a non-standard deprecated alias for <a href=\"/en-US/docs/Web/API/KeyboardEvent/location\"><code>KeyboardEvent.location</code></a>. It was part of an old version of DOM Level 3 Events.</p>\n  </dd>\n  <dt id=\"keyboardevent.which\"><a href=\"/en-US/docs/Web/API/UIEvent/which\"><code>KeyboardEvent.which</code></a> <svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>Returns a number representing a system and implementation dependent numeric code identifying the unmodified value of the pressed key; this is usually the same as <code>keyCode</code>.</p>\n    <div class=\"notecard warning\" id=\"sect7\">\n      <p><strong>Warning:</strong> This property is deprecated; you should use <a href=\"/en-US/docs/Web/API/KeyboardEvent/key\"><code>KeyboardEvent.key</code></a> instead, if available.</p>\n    </div>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"events","title":"Events","isH3":false,"content":"<p>The following events are based on the <code>KeyboardEvent</code> type. In the list below, each event links to the documentation for the <code>Element</code> handler for the event, which applies generally to all of the recipients, including <a href=\"/en-US/docs/Web/API/Element\"><code>Element</code></a>, <a href=\"/en-US/docs/Web/API/Document\"><code>Document</code></a>, and <a href=\"/en-US/docs/Web/API/Window\"><code>Window</code></a>.</p>\n<dl>\n  <dt id=\"keydown\"><a href=\"/en-US/docs/Web/API/Element/keydown_event\" title=\"keydown\"><code>keydown</code></a></dt>\n  <dd>\n    <p>A key has been pressed.</p>\n  </dd>\n  <dt id=\"keyup\"><a href=\"/en-US/docs/Web/API/Element/keyup_event\" title=\"keyup\"><code>keyup</code></a></dt>\n  <dd>\n    <p>A key has been released.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"obsolete_events","title":"Obsolete events","isH3":true,"content":"<dl>\n  <dt id=\"keypress\"><a href=\"/en-US/docs/Web/API/Element/keypress_event\" title=\"keypress\"><code>keypress</code></a> <svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg></dt>\n  <dd>\n    <p>A key that normally produces a character value has been pressed. This event was highly device-dependent and is obsolete. You should not use it.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"usage_notes","title":"Usage notes","isH3":false,"content":"<p>There are three types of keyboard events: <a href=\"/en-US/docs/Web/API/Element/keydown_event\" title=\"keydown\"><code>keydown</code></a>, <a href=\"/en-US/docs/Web/API/Element/keypress_event\" title=\"keypress\"><code>keypress</code></a>, and <a href=\"/en-US/docs/Web/API/Element/keyup_event\" title=\"keyup\"><code>keyup</code></a>. For most keys, Gecko dispatches a sequence of key events like this:</p>\n<ol>\n  <li>When the key is first pressed, the <code>keydown</code> event is sent.</li>\n  <li>If the key is not a modifier key, the <code>keypress</code> event is sent.</li>\n  <li>When the user releases the key, the <code>keyup</code> event is sent.</li>\n</ol>"}},{"type":"prose","value":{"id":"special_cases","title":"Special cases","isH3":true,"content":"<p>Some keys toggle the state of an indicator light; these include keys such as Caps Lock, Num Lock, and Scroll Lock. On Windows and Linux, these keys dispatch only the <code>keydown</code> and <code>keyup</code> events.</p>\n<div class=\"notecard note\" id=\"sect8\">\n  <p><strong>Note:</strong> On Linux, Firefox 12 and earlier also dispatched the <code>keypress</code> event for these keys.</p>\n</div>\n<p>However, a limitation of the macOS event model causes Caps Lock to dispatch only the <code>keydown</code> event. Num Lock was supported on some older laptop models (2007 models and older), but since then, macOS hasn't supported Num Lock even on external keyboards. On older MacBooks with a Num Lock key, that key doesn't generate any key events. Gecko does support the Scroll Lock key if an external keyboard which has an F14 key is connected. In certain older versions of Firefox, this key generated a <code>keypress</code> event; this inconsistent behavior was <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=602812\" class=\"external\" rel=\" noopener\">bug&nbsp;602812</a>.</p>"}},{"type":"prose","value":{"id":"auto-repeat_handling","title":"Auto-repeat handling","isH3":true,"content":"<p>When a key is pressed and held down, it begins to auto-repeat. This results in a sequence of events similar to the following being dispatched:</p>\n<ol>\n  <li><code>keydown</code></li>\n  <li><code>keypress</code></li>\n  <li><code>keydown</code></li>\n  <li><code>keypress</code></li>\n  <li>&lt;&lt;repeating until the user releases the key&gt;&gt;</li>\n  <li><code>keyup</code></li>\n</ol>\n<p>This is what the DOM Level 3 specification says should happen. There are some caveats, however, as described below.</p>\n<h4 id=\"auto-repeat_on_some_gtk_environments_such_as_ubuntu_9.4\">Auto-repeat on some GTK environments such as Ubuntu 9.4</h4>\n<p>In some GTK-based environments, auto-repeat dispatches a native key-up event automatically during auto-repeat, and there's no way for Gecko to know the difference between a repeated series of keypresses and an auto-repeat. On those platforms, then, an auto-repeat key will generate the following sequence of events:</p>\n<ol>\n  <li><code>keydown</code></li>\n  <li><code>keypress</code></li>\n  <li><code>keyup</code></li>\n  <li><code>keydown</code></li>\n  <li><code>keypress</code></li>\n  <li><code>keyup</code></li>\n  <li>&lt;&lt;repeating until the user releases the key&gt;&gt;</li>\n  <li><code>keyup</code></li>\n</ol>\n<p>In these environments, unfortunately, there's no way for web content to tell the difference between auto-repeating keys and keys that are just being pressed repeatedly.</p>"}},{"type":"prose","value":{"id":"example","title":"Example","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'keydown'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> keyName <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>keyName <span class=\"token operator\">===</span> <span class=\"token string\">'Control'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// do not alert when only Control key is pressed.</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>ctrlKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Even though event.key is not 'Control' (e.g., 'a' is pressed),</span>\n    <span class=\"token comment\">// event.ctrlKey may be true if Ctrl key is pressed at the same time.</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Combination of ctrlKey + </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>keyName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Key pressed </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>keyName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'keyup'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> keyName <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// As the user releases the Ctrl key, the key is no longer active,</span>\n  <span class=\"token comment\">// so event.ctrlKey is false.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>keyName <span class=\"token operator\">===</span> <span class=\"token string\">'Control'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Control key was released'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/uievents/#interface-keyboardevent","title":"UI Events"}],"query":"api.KeyboardEvent"}},{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <code>KeyboardEvent</code> interface specification went through numerous draft versions, first under DOM Events Level 2 where it was dropped as no consensus arose, then under DOM Events Level 3. This led to the implementation of non-standard initialization methods, the early DOM Events Level 2 version, <a href=\"/en-US/docs/Web/API/KeyboardEvent/initKeyEvent\"><code>KeyboardEvent.initKeyEvent()</code></a> by Gecko browsers and the early DOM Events Level 3 version, <a href=\"/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent\"><code>KeyboardEvent.initKeyboardEvent()</code></a> by others. Both have been superseded by the modern usage of a constructor: <a href=\"/en-US/docs/Web/API/KeyboardEvent/KeyboardEvent\" title=\"KeyboardEvent()\"><code>KeyboardEvent()</code></a>.</p>"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.KeyboardEvent","dataURL":"/en-US/docs/Web/API/KeyboardEvent/bcd.json"}},{"type":"prose","value":{"id":"compatibility_notes","title":"Compatibility notes","isH3":true,"content":"<ul>\n  <li>\n    As of Firefox 65, the <code>keypress</code> event is no longer fired for <a href=\"/en-US/docs/Web/API/KeyboardEvent/keyCode#non-printable_keys_(function_keys)\">non-printable keys</a> (<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=968056\" class=\"external\" rel=\" noopener\">bug&nbsp;968056</a>), except for the\n    <kbd>Enter</kbd>\n    key, and the\n    <kbd>Shift</kbd>\n    +\n    <kbd>Enter</kbd>\n    and\n    <kbd>Ctrl</kbd>\n    +\n    <kbd>Enter</kbd>\n    key combinations (these were kept for cross-browser compatibility purposes).\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/KeyboardEvent/code\"><code>KeyboardEvent.code</code></a>.</li>\n  <li><a href=\"/en-US/docs/Web/API/KeyboardEvent/key\"><code>KeyboardEvent.key</code></a>.</li>\n  <li><a href=\"/en-US/docs/Web/API/KeyboardEvent/getModifierState\"><code>KeyboardEvent.getModifierState()</code></a></li>\n</ul>"}}],"toc":[{"text":"Constructor","id":"constructor"},{"text":"Constants","id":"constants"},{"text":"Properties","id":"properties"},{"text":"Methods","id":"methods"},{"text":"Obsolete methods","id":"obsolete_methods"},{"text":"Obsolete properties","id":"obsolete_properties"},{"text":"Events","id":"events"},{"text":"Usage notes","id":"usage_notes"},{"text":"Example","id":"example"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"KeyboardEvent objects describe a user interaction with the keyboard; each event describes a single interaction between the user and a key (or combination of a key with modifier keys) on the keyboard. The event type (keydown, keypress, or keyup) identifies what kind of keyboard activity occurred.","popularity":0.0128,"modified":"2022-09-11T06:43:56.000Z","other_translations":[{"title":"KeyboardEvent","locale":"es","native":"Español"},{"title":"KeyboardEvent","locale":"fr","native":"Français"},{"title":"KeyboardEvent","locale":"ja","native":"日本語"},{"title":"KeyboardEvent","locale":"ko","native":"한국어"},{"title":"KeyboardEvent","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"KeyboardEvent","locale":"ru","native":"Русский"},{"title":"KeyboardEvent","locale":"zh-CN","native":"中文 (简体)"},{"title":"KeyboardEvent","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"en-us/web/api/keyboardevent","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/keyboardevent/index.md","last_commit_url":"https://github.com/mdn/content/commit/ff3545b816d9a945d3793ecc330a3b6cbdc59c1c","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/KeyboardEvent","title":"KeyboardEvent"}],"pageTitle":"KeyboardEvent - Web APIs | MDN","noIndexing":false}}