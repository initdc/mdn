{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"KeyboardEvent.key","mdn_url":"/en-US/docs/Web/API/KeyboardEvent/key","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/UI_Events\">UI Events</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/KeyboardEvent\"><code>KeyboardEvent</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/API/KeyboardEvent/KeyboardEvent\"><code>KeyboardEvent()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/API/KeyboardEvent/altKey\"><code>altKey</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/API/KeyboardEvent/charCode\"><code>charCode</code></a></li><li><a href=\"/en-US/docs/Web/API/KeyboardEvent/code\"><code>code</code></a></li><li><a href=\"/en-US/docs/Web/API/KeyboardEvent/ctrlKey\"><code>ctrlKey</code></a></li><li><a href=\"/en-US/docs/Web/API/KeyboardEvent/isComposing\"><code>isComposing</code></a></li><li><em><code>key</code></em></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/API/KeyboardEvent/keyCode\"><code>keyCode</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/API/KeyboardEvent/keyIdentifier\"><code>keyIdentifier</code></a></li><li><a href=\"/en-US/docs/Web/API/KeyboardEvent/location\"><code>location</code></a></li><li><a href=\"/en-US/docs/Web/API/KeyboardEvent/metaKey\"><code>metaKey</code></a></li><li><a href=\"/en-US/docs/Web/API/KeyboardEvent/repeat\"><code>repeat</code></a></li><li><a href=\"/en-US/docs/Web/API/KeyboardEvent/shiftKey\"><code>shiftKey</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/KeyboardEvent/getModifierState\"><code>getModifierState()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent\"><code>initKeyboardEvent()</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/API/KeyboardEvent/initKeyEvent\"><code>initKeyEvent()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Inheritance:</summary><ol><li><a href=\"/en-US/docs/Web/API/UIEvent\"><code>UIEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/Event\"><code>Event</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for UI Events</summary><ol><li><a href=\"/en-US/docs/Web/API/CompositionEvent\"><code>CompositionEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/FocusEvent\"><code>FocusEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/InputEvent\"><code>InputEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/MouseEvent\"><code>MouseEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/MouseScrollEvent\"><code>MouseScrollEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/MutationEvent\"><code>MutationEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/UIEvent\"><code>UIEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/WheelEvent\"><code>WheelEvent</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <a href=\"/en-US/docs/Web/API/KeyboardEvent\"><code>KeyboardEvent</code></a> interface's <strong><code>key</code></strong> read-only property returns the value of the key pressed by the user, taking into consideration the state of modifier keys such as <kbd>Shift</kbd> as well as the keyboard locale and layout.</p>"}},{"type":"prose","value":{"id":"value","title":"Value","isH3":false,"content":"<p>A string.</p>\n<p>Its value is determined as follows:</p>\n<ul>\n  <li>If the pressed key has a printed representation, the returned value is a non-empty Unicode character string containing the printable representation of the key.</li>\n  <li>If the pressed key is a control or special character, the returned value is one of the <a href=\"/en-US/docs/Web/API/UI_Events/Keyboard_event_key_values\">pre-defined key values</a>.</li>\n  <li>If the <code>KeyboardEvent</code> represents the press of a <a href=\"https://en.wikipedia.org/wiki/Dead_key\" class=\"external\" rel=\" noopener\">dead key</a>, the key value must be \"<code>Dead</code>\".</li>\n  <li>Some specialty keyboard keys (such as the extended keys for controlling media on multimedia keyboards) don't generate key codes on Windows; instead, they trigger <code>WM_APPCOMMAND</code> events. These events get mapped to DOM keyboard events, and are listed among the \"Virtual key codes\" for Windows, even though they aren't actually key codes.</li>\n  <li>If the key cannot be identified, the returned value is <code>Unidentified</code>.</li>\n</ul>\n<div class=\"callout\" id=\"sect1\">\n  <p><a href=\"/en-US/docs/Web/API/UI_Events/Keyboard_event_key_values\">See a full list of key values</a>.</p>\n</div>"}},{"type":"prose","value":{"id":"keyboardevent_sequence","title":"KeyboardEvent sequence","isH3":false,"content":"<p>Every <code>KeyboardEvent</code> is fired in a pre-determined sequence. For a given key press, the sequence of <code>KeyboardEvent</code>s fired is as follows assuming that <a href=\"/en-US/docs/Web/API/Event/preventDefault\"><code>Event.preventDefault</code></a> is not called:</p>\n<ol>\n  <li>A <a href=\"/en-US/docs/Web/API/Element/keydown_event\" title=\"keydown\"><code>keydown</code></a> event is first fired. If the key is held down further and the key produces a character key, then the event continues to be emitted in a platform implementation dependent interval and the <a href=\"/en-US/docs/Web/API/KeyboardEvent/repeat\"><code>KeyboardEvent.repeat</code></a> read only property is set to <code>true</code>.</li>\n  <li>If the key produces a character key that would result in a character being inserted into possibly an <a href=\"/en-US/docs/Web/HTML/Element/input\"><code>&lt;input&gt;</code></a>, <a href=\"/en-US/docs/Web/HTML/Element/textarea\"><code>&lt;textarea&gt;</code></a> or an element with <a href=\"/en-US/docs/Web/API/HTMLElement/contentEditable\"><code>HTMLElement.contentEditable</code></a> set to true, the <a href=\"/en-US/docs/Web/API/HTMLElement/beforeinput_event\" title=\"beforeinput\"><code>beforeinput</code></a> and <a href=\"/en-US/docs/Web/API/HTMLElement/input_event\" title=\"input\"><code>input</code></a> event types are fired in that order. Note that some other implementations may fire <a href=\"/en-US/docs/Web/API/Element/keypress_event\" title=\"keypress\"><code>keypress</code></a> event if supported. The events will be fired repeatedly while the key is held down.</li>\n  <li>A <a href=\"/en-US/docs/Web/API/Element/keyup_event\" title=\"keyup\"><code>keyup</code></a> event is fired once the key is released. This completes the process.</li>\n</ol>\n<p>In sequence 1 &amp; 3, the <code>KeyboardEvent.key</code> attribute is defined and is set appropriately to a value according to the rules defined earlier.</p>"}},{"type":"prose","value":{"id":"keyboardevent_sequence_example","title":"KeyboardEvent sequence example","isH3":false,"content":"<p>Consider the event sequence generated when we interact with the <kbd>Shift</kbd> and the <kbd>2</kbd> key using a U.S keyboard layout as compared to when we do so using a UK keyboard layout.</p>\n<p>Try experimenting using the following two test cases:</p>\n<ol>\n  <li>\n    Press and hold the\n    <kbd>Shift</kbd>\n    key, then press\n    <kbd>2</kbd>\n    and release it. Next, release the\n    <kbd>Shift</kbd>\n    key.\n  </li>\n  <li>\n    Press and hold the\n    <kbd>Shift</kbd>\n    key, then press and hold\n    <kbd>2</kbd>\n    . Release the\n    <kbd>Shift</kbd>\n    key. Finally, release\n    <kbd>2</kbd>\n    .\n  </li>\n</ol>"}},{"type":"prose","value":{"id":"html","title":"HTML","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fx<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>textarea</span> <span class=\"token attr-name\">rows</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>test-target<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>test-target<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>textarea</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn-reset<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn-reset<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Reset<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>flex<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pre</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>console-log<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pre</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"css","title":"CSS","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">.fx</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">-webkit-display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> -20px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-right</span><span class=\"token punctuation\">:</span> -20px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.fx &gt; div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">padding-left</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-right</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.fx &gt; div:first-child</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 30%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.flex</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">-webkit-flex</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">flex</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">#test-target</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"javascript","title":"JavaScript","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> textarea <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test-target'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\nconsoleLog <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'console-log'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\nbtnReset <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'btn-reset'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">logMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  consoleLog<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;br&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\ntextarea<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'keydown'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>e<span class=\"token punctuation\">.</span>repeat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">logMessage</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Key \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>e<span class=\"token punctuation\">.</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" pressed [event: keydown]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">logMessage</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Key \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>e<span class=\"token punctuation\">.</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" repeating [event: keydown]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ntextarea<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'beforeinput'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">logMessage</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Key \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>e<span class=\"token punctuation\">.</span>data<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" about to be input [event: beforeinput]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ntextarea<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">logMessage</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Key \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>e<span class=\"token punctuation\">.</span>data<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" input [event: input]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ntextarea<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'keyup'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">logMessage</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Key \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>e<span class=\"token punctuation\">.</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" released [event: keyup]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbtnReset<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> child <span class=\"token operator\">=</span> consoleLog<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   consoleLog<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   child <span class=\"token operator\">=</span> consoleLog<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  textarea<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"result","title":"Result","isH3":true,"content":"<iframe class=\"sample-code-frame\" title=\"KeyboardEvent sequence example sample\" id=\"frame_keyboardevent_sequence_example\" src=\"https://yari-demos.prod.mdn.mozit.cloud/en-US/docs/Web/API/KeyboardEvent/key/_sample_.keyboardevent_sequence_example.html\" loading=\"lazy\"></iframe>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> On browsers that don't fully implement the <a href=\"/en-US/docs/Web/API/InputEvent\"><code>InputEvent</code></a> interface which is used for the <a href=\"/en-US/docs/Web/API/HTMLElement/beforeinput_event\" title=\"beforeinput\"><code>beforeinput</code></a> and <a href=\"/en-US/docs/Web/API/HTMLElement/input_event\" title=\"input\"><code>input</code></a> events, you may get incorrect output on those lines of the log output.</p>\n</div>"}},{"type":"prose","value":{"id":"case_1","title":"Case 1","isH3":true,"content":"<p>When the shift key is pressed, a <a href=\"/en-US/docs/Web/API/Element/keydown_event\" title=\"keydown\"><code>keydown</code></a> event is first fired, and the <code>key</code> property value is set to the string <code>Shift</code>. As we keep holding this key, the <a href=\"/en-US/docs/Web/API/Element/keydown_event\" title=\"keydown\"><code>keydown</code></a> event does not continue to fire repeatedly because it does not produce a character key.</p>\n<p>When <code>key 2</code> is pressed, another <a href=\"/en-US/docs/Web/API/Element/keydown_event\" title=\"keydown\"><code>keydown</code></a> event is fired for this new key press, and the <code>key</code> property value for the event is set to the string <code>@</code> for the U.S keyboard type and <code>\"</code> for the UK keyboard type, because of the active modifier <code>shift</code> key. The <a href=\"/en-US/docs/Web/API/HTMLElement/beforeinput_event\" title=\"beforeinput\"><code>beforeinput</code></a> and <a href=\"/en-US/docs/Web/API/HTMLElement/input_event\" title=\"input\"><code>input</code></a> events are fired next because a character key has been produced.</p>\n<p>As we release the <code>key 2</code>, a <a href=\"/en-US/docs/Web/API/Element/keyup_event\" title=\"keyup\"><code>keyup</code></a> event is fired and the <code>key</code> property will maintain the string values <code>@</code> and <code>\"</code> for the different keyboard layouts respectively.</p>\n<p>As we finally release the <code>shift</code> key, another <a href=\"/en-US/docs/Web/API/Element/keyup_event\" title=\"keyup\"><code>keyup</code></a> event is fired for it, and the key attribute value remains <code>Shift</code>.</p>"}},{"type":"prose","value":{"id":"case_2","title":"Case 2","isH3":true,"content":"<p>When the shift key is pressed, a <a href=\"/en-US/docs/Web/API/Element/keydown_event\" title=\"keydown\"><code>keydown</code></a> event is first fired, and the <code>key</code> property value is set to be the string <code>Shift</code>. As we keep holding this key, the keydown event does not continue to fire repeatedly because it produced no character key.</p>\n<p>When <code>key 2</code> is pressed, another <a href=\"/en-US/docs/Web/API/Element/keydown_event\" title=\"keydown\"><code>keydown</code></a> event is fired for this new key press, and the <code>key</code> property value for the event is set to be the string <code>@</code> for the U.S keyboard type and <code>\"</code> for the UK keyboard type, because of the active modifier <code>shift</code> key. The <a href=\"/en-US/docs/Web/API/HTMLElement/beforeinput_event\" title=\"beforeinput\"><code>beforeinput</code></a> and <a href=\"/en-US/docs/Web/API/HTMLElement/input_event\" title=\"input\"><code>input</code></a> events are fired next because a character key has been produced. As we keep holding the key, the <a href=\"/en-US/docs/Web/API/Element/keydown_event\" title=\"keydown\"><code>keydown</code></a> event continues to fire repeatedly and the <a href=\"/en-US/docs/Web/API/KeyboardEvent/repeat\"><code>KeyboardEvent.repeat</code></a> property is set to <code>true</code>. The <a href=\"/en-US/docs/Web/API/HTMLElement/beforeinput_event\" title=\"beforeinput\"><code>beforeinput</code></a> and <a href=\"/en-US/docs/Web/API/HTMLElement/input_event\" title=\"input\"><code>input</code></a> events are fired repeatedly as well.</p>\n<p>As we release the <code>shift</code> key, a <a href=\"/en-US/docs/Web/API/Element/keyup_event\" title=\"keyup\"><code>keyup</code></a> event is fired for it, and the key attribute value remains <code>Shift</code>. At this point, notice that the <code>key</code> property value for the repeating keydown event of the <code>key 2</code> key press is now \"2\" because the modifier <code>shift</code> key is no longer active. The same goes for the <a href=\"/en-US/docs/Web/API/InputEvent/data\"><code>InputEvent.data</code></a> property of the <a href=\"/en-US/docs/Web/API/HTMLElement/beforeinput_event\" title=\"beforeinput\"><code>beforeinput</code></a> and <a href=\"/en-US/docs/Web/API/HTMLElement/input_event\" title=\"input\"><code>input</code></a> events.</p>\n<p>As we finally release the <code>key 2</code>, a <a href=\"/en-US/docs/Web/API/Element/keyup_event\" title=\"keyup\"><code>keyup</code></a> event is fired but the <code>key</code> property will be set to the string value <code>2</code> for both keyboard layouts because the modifier <code>shift</code> key is no longer active.</p>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<p>This example uses <a href=\"/en-US/docs/Web/API/EventTarget/addEventListener\"><code>EventTarget.addEventListener()</code></a> to listen for <a href=\"/en-US/docs/Web/API/Element/keydown_event\" title=\"keydown\"><code>keydown</code></a> events. When they occur, the key's value is checked to see if it's one of the keys the code is interested in, and if it is, it gets processed in some way (possibly by steering a spacecraft, perhaps by changing the selected cell in a spreadsheet).</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"keydown\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>defaultPrevented<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Do nothing if the event was already processed</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Down\"</span><span class=\"token operator\">:</span> <span class=\"token comment\">// IE/Edge specific value</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"ArrowDown\"</span><span class=\"token operator\">:</span>\n      <span class=\"token comment\">// Do something for \"down arrow\" key press.</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Up\"</span><span class=\"token operator\">:</span> <span class=\"token comment\">// IE/Edge specific value</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"ArrowUp\"</span><span class=\"token operator\">:</span>\n      <span class=\"token comment\">// Do something for \"up arrow\" key press.</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Left\"</span><span class=\"token operator\">:</span> <span class=\"token comment\">// IE/Edge specific value</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"ArrowLeft\"</span><span class=\"token operator\">:</span>\n      <span class=\"token comment\">// Do something for \"left arrow\" key press.</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Right\"</span><span class=\"token operator\">:</span> <span class=\"token comment\">// IE/Edge specific value</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"ArrowRight\"</span><span class=\"token operator\">:</span>\n      <span class=\"token comment\">// Do something for \"right arrow\" key press.</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Enter\"</span><span class=\"token operator\">:</span>\n      <span class=\"token comment\">// Do something for \"enter\" or \"return\" key press.</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Esc\"</span><span class=\"token operator\">:</span> <span class=\"token comment\">// IE/Edge specific value</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Escape\"</span><span class=\"token operator\">:</span>\n      <span class=\"token comment\">// Do something for \"esc\" key press.</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Quit when this doesn't handle the key event.</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Cancel the default action to avoid it being handled twice</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/uievents/#dom-keyboardevent-key","title":"UI Events"}],"query":"api.KeyboardEvent.key"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.KeyboardEvent.key","dataURL":"/en-US/docs/Web/API/KeyboardEvent/key/bcd.json"}}],"toc":[{"text":"Value","id":"value"},{"text":"KeyboardEvent sequence","id":"keyboardevent_sequence"},{"text":"KeyboardEvent sequence example","id":"keyboardevent_sequence_example"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"}],"summary":"The KeyboardEvent interface's key read-only property returns the value of the key pressed by the user, taking into consideration the state of modifier keys such as Shift as well as the keyboard locale and layout.","popularity":0.0115,"modified":"2022-09-13T07:59:37.000Z","other_translations":[{"title":"KeyboardEvent.key","locale":"fr","native":"Français"},{"title":"KeyboardEvent.key","locale":"ja","native":"日本語"},{"title":"KeyboardEvent.key","locale":"ko","native":"한국어"},{"title":"KeyboardEvent.key","locale":"ru","native":"Русский"},{"title":"KeyboardEvent.key","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/web/api/keyboardevent/key","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/keyboardevent/key/index.md","last_commit_url":"https://github.com/mdn/content/commit/c09b8e9dd0022a33cf84355704ca281d6a5f29f5","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/KeyboardEvent","title":"KeyboardEvent"},{"uri":"/en-US/docs/Web/API/KeyboardEvent/key","title":"KeyboardEvent.key"}],"pageTitle":"KeyboardEvent.key - Web APIs | MDN","noIndexing":false}}