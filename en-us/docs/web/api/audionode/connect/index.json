{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"AudioNode.connect()","mdn_url":"/en-US/docs/Web/API/AudioNode/connect","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Web_Audio_API\">Web Audio API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/AudioNode\"><code>AudioNode</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/API/AudioNode/channelCount\"><code>channelCount</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioNode/channelCountMode\"><code>channelCountMode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioNode/channelInterpretation\"><code>channelInterpretation</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioNode/context\"><code>context</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioNode/numberOfInputs\"><code>numberOfInputs</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioNode/numberOfOutputs\"><code>numberOfOutputs</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><em><code>connect()</code></em></li><li><a href=\"/en-US/docs/Web/API/AudioNode/disconnect\"><code>disconnect()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Inheritance:</summary><ol><li><a href=\"/en-US/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Web Audio API</summary><ol><li><a href=\"/en-US/docs/Web/API/AnalyserNode\"><code>AnalyserNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioBuffer\"><code>AudioBuffer</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioBufferSourceNode\"><code>AudioBufferSourceNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioContext\"><code>AudioContext</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioDestinationNode\"><code>AudioDestinationNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioListener\"><code>AudioListener</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioParam\"><code>AudioParam</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioProcessingEvent\"><code>AudioProcessingEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioScheduledSourceNode\"><code>AudioScheduledSourceNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioWorklet\"><code>AudioWorklet</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioWorkletGlobalScope\"><code>AudioWorkletGlobalScope</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioWorkletProcessor\"><code>AudioWorkletProcessor</code></a></li><li><a href=\"/en-US/docs/Web/API/BaseAudioContext\"><code>BaseAudioContext</code></a></li><li><a href=\"/en-US/docs/Web/API/BiquadFilterNode\"><code>BiquadFilterNode</code></a></li><li><a href=\"/en-US/docs/Web/API/ChannelMergerNode\"><code>ChannelMergerNode</code></a></li><li><a href=\"/en-US/docs/Web/API/ChannelSplitterNode\"><code>ChannelSplitterNode</code></a></li><li><a href=\"/en-US/docs/Web/API/ConstantSourceNode\"><code>ConstantSourceNode</code></a></li><li><a href=\"/en-US/docs/Web/API/ConvolverNode\"><code>ConvolverNode</code></a></li><li><a href=\"/en-US/docs/Web/API/DelayNode\"><code>DelayNode</code></a></li><li><a href=\"/en-US/docs/Web/API/DynamicsCompressorNode\"><code>DynamicsCompressorNode</code></a></li><li><a href=\"/en-US/docs/Web/API/GainNode\"><code>GainNode</code></a></li><li><a href=\"/en-US/docs/Web/API/IIRFilterNode\"><code>IIRFilterNode</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaElementAudioSourceNode\"><code>MediaElementAudioSourceNode</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaStreamAudioDestinationNode\"><code>MediaStreamAudioDestinationNode</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaStreamAudioSourceNode\"><code>MediaStreamAudioSourceNode</code></a></li><li><a href=\"/en-US/docs/Web/API/OfflineAudioCompletionEvent\"><code>OfflineAudioCompletionEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/OfflineAudioContext\"><code>OfflineAudioContext</code></a></li><li><a href=\"/en-US/docs/Web/API/OscillatorNode\"><code>OscillatorNode</code></a></li><li><a href=\"/en-US/docs/Web/API/PannerNode\"><code>PannerNode</code></a></li><li><a href=\"/en-US/docs/Web/API/PeriodicWave\"><code>PeriodicWave</code></a></li><li><a href=\"/en-US/docs/Web/API/StereoPannerNode\"><code>StereoPannerNode</code></a></li><li><a href=\"/en-US/docs/Web/API/WaveShaperNode\"><code>WaveShaperNode</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>\n  The <code>connect()</code> method of the <a href=\"/en-US/docs/Web/API/AudioNode\"><code>AudioNode</code></a> interface lets\n  you connect one of the node's outputs to a target, which may be either another\n  <code>AudioNode</code> (thereby directing the sound data to the specified node) or an\n  <a href=\"/en-US/docs/Web/API/AudioParam\"><code>AudioParam</code></a>, so that the node's output data is automatically used to\n  change the value of that parameter over time.\n</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js-nolint notranslate\">connect(destination)\nconnect(destination, outputIndex)\nconnect(destination, outputIndex, inputIndex)\n</pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"destination\"><code>destination</code></dt>\n  <dd>\n    <p>The <a href=\"/en-US/docs/Web/API/AudioNode\"><code>AudioNode</code></a> or <a href=\"/en-US/docs/Web/API/AudioParam\"><code>AudioParam</code></a> to which to connect.</p>\n  </dd>\n  <dt id=\"outputindex\"><code>outputIndex</code> <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>\n      An index specifying which output of the current <code>AudioNode</code> to connect to\n      the destination. The index numbers are defined according to the number of output\n      channels (see <a href=\"/en-US/docs/Web/API/Web_Audio_API/Basic_concepts_behind_Web_Audio_API#audio_channels\">Audio channels</a>).\n      While you can only connect a given output to a given input once\n      (repeated attempts are ignored), you can connect an output to multiple inputs by\n      calling <code>connect()</code> repeatedly. This makes <a href=\"/en-US/docs/Web/API/Web_Audio_API/Basic_concepts_behind_Web_Audio_API#fan-in_and_fan-out\">fan-out</a>\n      possible. The default value is 0.\n    </p>\n  </dd>\n  <dt id=\"inputindex\"><code>inputIndex</code> <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>\n      An index describing which input of the destination you want to connect the current\n      <code>AudioNode</code> to; the default is 0. The index numbers are defined according\n      to the number of input channels\n      (see <a href=\"/en-US/docs/Web/API/Web_Audio_API/Basic_concepts_behind_Web_Audio_API#audio_channels\">Audio channels</a>). It is possible to connect an <code>AudioNode</code> to another\n      <code>AudioNode</code>, which in turn connects back to the first\n      <code>AudioNode</code>, creating a cycle.\n    </p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>\n  If the destination is a node, <code>connect()</code> returns a reference to the\n  destination <a href=\"/en-US/docs/Web/API/AudioNode\"><code>AudioNode</code></a> object, allowing you to chain multiple\n  <code>connect()</code> calls. In some browsers, older implementations of this interface\n  return <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.\n</p>\n<p>\n  If the destination is an <code>AudioParam</code>, <code>connect()</code> returns\n  <code>undefined</code>.\n</p>"}},{"type":"prose","value":{"id":"exceptions","title":"Exceptions","isH3":true,"content":"<dl>\n  <dt id=\"indexsizeerror\"><code>IndexSizeError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>Thrown if the value specified as <code>outputIndex</code> or <code>inputIndex</code> doesn't correspond to an existing input or output.</p>\n  </dd>\n  <dt id=\"invalidaccesserror\"><code>InvalidAccessError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>Thrown if the destination node is not part of the same audio context as the source node.</p>\n  </dd>\n  <dt id=\"notsupportederror\"><code>NotSupportedError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>\n      Thrown if the specified connection would create a cycle (in which the audio loops back through\n      the same nodes repeatedly) and there are no <a href=\"/en-US/docs/Web/API/DelayNode\"><code>DelayNode</code></a> objects in the cycle to\n      prevent the resulting waveform from getting stuck constructing the same audio frame\n      indefinitely. Also thrown if the <code>inputIndex</code> parameter is used while the destination is an <a href=\"/en-US/docs/Web/API/AudioParam\"><code>AudioParam</code></a>.\n    </p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"connecting_to_an_audio_input","title":"Connecting to an audio input","isH3":true,"content":"<p>\n  The most obvious use of the <code>connect()</code> method is to direct the audio output\n  from one node into the audio input of another node for further processing. For example,\n  you might send the audio from a <a href=\"/en-US/docs/Web/API/MediaElementAudioSourceNode\"><code>MediaElementAudioSourceNode</code></a>â€”that is, the\n  audio from an HTML media element such as <a href=\"/en-US/docs/Web/HTML/Element/audio\"><code>&lt;audio&gt;</code></a>â€”through a band pass\n  filter implemented using a <a href=\"/en-US/docs/Web/API/BiquadFilterNode\"><code>BiquadFilterNode</code></a> to reduce noise before then\n  sending the audio along to the speakers.\n</p>\n<p>\n  This example creates an oscillator, then links it to a gain node, so that the gain node\n  controls the volume of the oscillator node.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> audioCtx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AudioContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> oscillator <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createOscillator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> gainNode <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createGain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\noscillator<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>gainNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngainNode<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>audioCtx<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"audioparam_example","title":"AudioParam example","isH3":true,"content":"<p>\n  In this example, we will be altering the gain value of a <a href=\"/en-US/docs/Web/API/GainNode\"><code>GainNode</code></a> using\n  an <a href=\"/en-US/docs/Web/API/OscillatorNode\"><code>OscillatorNode</code></a> with a slow frequency value. This technique is know as\n  an <em>LFO</em>-controlled parameter.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> audioCtx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AudioContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// create an normal oscillator to make sound</span>\n<span class=\"token keyword\">const</span> oscillator <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createOscillator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// create a second oscillator that will be used as an LFO (Low-frequency</span>\n<span class=\"token comment\">// oscillator), and will control a parameter</span>\n<span class=\"token keyword\">const</span> lfo <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createOscillator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// set the frequency of the second oscillator to a low number</span>\nlfo<span class=\"token punctuation\">.</span>frequency<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2Hz: two oscillations per second</span>\n\n<span class=\"token comment\">// create a gain whose gain AudioParam will be controlled by the LFO</span>\n<span class=\"token keyword\">const</span> gain <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createGain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// connect the LFO to the gain AudioParam. This means the value of the LFO</span>\n<span class=\"token comment\">// will not produce any audio, but will change the value of the gain instead</span>\nlfo<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>gain<span class=\"token punctuation\">.</span>gain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// connect the oscillator that will produce audio to the gain</span>\noscillator<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>gain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// connect the gain to the destination so we hear sound</span>\ngain<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>audioCtx<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// start the oscillator that will produce audio</span>\noscillator<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// start the oscillator that will modify the gain value</span>\nlfo<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"audioparam_notes\">AudioParam notes</h4>\n<p>It is possible to connect an <code>AudioNode</code> output to more than one <a href=\"/en-US/docs/Web/API/AudioParam\"><code>AudioParam</code></a>, and more than one AudioNode output to a single <a href=\"/en-US/docs/Web/API/AudioParam\"><code>AudioParam</code></a>, with multiple calls to <code>connect()</code>. <a href=\"/en-US/docs/Web/API/Web_Audio_API/Basic_concepts_behind_Web_Audio_API#fan-in_and_fan-out\">Fan-in and fan-out</a> are therefore supported.</p>\n<p>\n  An <a href=\"/en-US/docs/Web/API/AudioParam\"><code>AudioParam</code></a> will take the rendered audio data from any\n  <code>AudioNode</code> output connected to it and convert it to mono by <a href=\"/en-US/docs/Web/API/Web_Audio_API/Basic_concepts_behind_Web_Audio_API#up-mixing_and_down-mixing\">down-mixing</a>\n  (if it is not already mono). Next, it will mix it together with any other such outputs,\n  and the intrinsic parameter value (the value the <a href=\"/en-US/docs/Web/API/AudioParam\"><code>AudioParam</code></a> would\n  normally have without any audio connections), including any timeline changes scheduled\n  for the parameter.\n</p>\n<p>\n  Therefore, it is possible to choose the range in which an <a href=\"/en-US/docs/Web/API/AudioParam\"><code>AudioParam</code></a>\n  will change by setting the value of the <a href=\"/en-US/docs/Web/API/AudioParam\"><code>AudioParam</code></a> to the central\n  frequency, and to use a <a href=\"/en-US/docs/Web/API/GainNode\"><code>GainNode</code></a> between the audio source and the\n  <a href=\"/en-US/docs/Web/API/AudioParam\"><code>AudioParam</code></a> to adjust the range of the <a href=\"/en-US/docs/Web/API/AudioParam\"><code>AudioParam</code></a> changes.\n</p>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://webaudio.github.io/web-audio-api/#dom-audionode-connect","title":"Web Audio API"},{"bcdSpecificationURL":"https://webaudio.github.io/web-audio-api/#dom-audionode-connect-destinationparam-output","title":"Web Audio API"}],"query":"api.AudioNode.connect"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.AudioNode.connect","dataURL":"/en-US/docs/Web/API/AudioNode/connect/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API\">Using the Web Audio API</a></li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The connect() method of the AudioNode interface lets\n  you connect one of the node's outputs to a target, which may be either another\n  AudioNode (thereby directing the sound data to the specified node) or an\n  AudioParam, so that the node's output data is automatically used to\n  change the value of that parameter over time.","popularity":0.0004,"modified":"2022-09-13T05:19:21.000Z","other_translations":[{"title":"AudioNode.connect()","locale":"ko","native":"í•œêµ­ì–´"},{"title":"AudioNode.connect()","locale":"zh-CN","native":"ä¸­æ–‡ (ç®€ä½“)"}],"source":{"folder":"en-us/web/api/audionode/connect","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/audionode/connect/index.md","last_commit_url":"https://github.com/mdn/content/commit/9ad07c43f42e14278a4040fd554af33699aea632","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/AudioNode","title":"AudioNode"},{"uri":"/en-US/docs/Web/API/AudioNode/connect","title":"AudioNode.connect()"}],"pageTitle":"AudioNode.connect() - Web APIs | MDN","noIndexing":false}}