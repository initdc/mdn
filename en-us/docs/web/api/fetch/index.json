{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"fetch()","mdn_url":"/en-US/docs/Web/API/fetch","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Fetch_API\">Fetch API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/fetch\"><code>Fetch</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Fetch API</summary><ol><li><a href=\"/en-US/docs/Web/API/Headers\"><code>Headers</code></a></li><li><a href=\"/en-US/docs/Web/API/Request\"><code>Request</code></a></li><li><a href=\"/en-US/docs/Web/API/Response\"><code>Response</code></a></li><li><a href=\"/en-US/docs/Web/API/fetch\"><code>fetch()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>\n  The global <strong><code>fetch()</code></strong> method starts the process of fetching a\n  resource from the network, returning a promise which is fulfilled once the response is\n  available.\n</p>\n<p>\n  The promise resolves to the <a href=\"/en-US/docs/Web/API/Response\"><code>Response</code></a> object\n  representing the response to your request.\n</p>\n<p>\n  A <a href=\"/en-US/docs/Web/API/fetch\" aria-current=\"page\"><code>fetch()</code></a> promise only rejects when a\n  network error is encountered (which is usually when there's a permissions issue or\n  similar). A <a href=\"/en-US/docs/Web/API/fetch\" aria-current=\"page\"><code>fetch()</code></a> promise <em>does\nnot</em> reject on HTTP errors (<code>404</code>, etc.). Instead, a\n  <code>then()</code> handler must check the <a href=\"/en-US/docs/Web/API/Response/ok\"><code>Response.ok</code></a> and/or\n  <a href=\"/en-US/docs/Web/API/Response/status\"><code>Response.status</code></a> properties.\n</p>\n<p>\n  <code>WindowOrWorkerGlobalScope</code> is implemented by both <a href=\"/en-US/docs/Web/API/Window\"><code>Window</code></a> and\n  <a href=\"/en-US/docs/Web/API/WorkerGlobalScope\"><code>WorkerGlobalScope</code></a>, which means that the <code>fetch()</code> method is\n  available in pretty much any context in which you might want to fetch resources.\n</p>\n<p>\n  The <code>fetch()</code> method is controlled by the <code>connect-src</code> directive\n  of <a href=\"/en-US/docs/Web/HTTP/Headers/Content-Security-Policy\">Content Security Policy</a>\n  rather than the directive of the resources it's retrieving.\n</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p>\n    <strong>Note:</strong> The <code>fetch()</code> method's parameters are identical to\n    those of the <a href=\"/en-US/docs/Web/API/Request/Request\" title=\"Request()\"><code>Request()</code></a> constructor.\n  </p>\n</div>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js-nolint notranslate\">fetch(resource)\nfetch(resource, options)\n</pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"resource\"><code>resource</code></dt>\n  <dd>\n    <p>This defines the resource that you wish to fetch. This can either be:</p>\n    <ul>\n      <li>A string or any other object with a <a href=\"/en-US/docs/Glossary/Stringifier\">stringifier</a> — including a <a href=\"/en-US/docs/Web/API/URL\"><code>URL</code></a> object — that provides the URL of the resource you want to fetch.</li>\n      <li>A <a href=\"/en-US/docs/Web/API/Request\"><code>Request</code></a> object.</li>\n    </ul>\n  </dd>\n  <dt id=\"options\"><code>options</code> <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>\n      An object containing any custom settings that you want to apply to the request. The\n      possible options are:\n    </p>\n    <dl>\n      <dt id=\"method\"><code>method</code></dt>\n      <dd>\n        <p>\n          The request method, e.g., <code>GET</code>, <code>POST</code>. Note that the\n          <a href=\"/en-US/docs/Web/HTTP/Headers/Origin\"><code>Origin</code></a> header is not set on Fetch requests with a method of\n          <a href=\"/en-US/docs/Web/HTTP/Methods/HEAD\"><code>HEAD</code></a> or <a href=\"/en-US/docs/Web/HTTP/Methods/GET\"><code>GET</code></a>.\n          (This behavior was corrected in Firefox 65 — see <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1508661\" class=\"external\" rel=\" noopener\">bug&nbsp;1508661</a>.)\n        </p>\n      </dd>\n      <dt id=\"headers\"><code>headers</code></dt>\n      <dd>\n        <p>\n          Any headers you want to add to your request, contained within a\n          <a href=\"/en-US/docs/Web/API/Headers\"><code>Headers</code></a> object or an object literal with <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a>\n          values. Note that <a href=\"/en-US/docs/Glossary/Forbidden_header_name\">some names are forbidden</a>.\n        </p>\n      </dd>\n      <dt id=\"body\"><code>body</code></dt>\n      <dd>\n        <p>\n          Any body that you want to add to your request:\n          this can be a <a href=\"/en-US/docs/Web/API/Blob\"><code>Blob</code></a>, an <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>, a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a>, a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>,\n          a <a href=\"/en-US/docs/Web/API/FormData\"><code>FormData</code></a>, a <a href=\"/en-US/docs/Web/API/URLSearchParams\"><code>URLSearchParams</code></a>, string object or literal,\n          or a <a href=\"/en-US/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> object. This latest possibility is still experimental; check the <a href=\"/en-US/docs/Web/API/Request#browser_compatibility\">compatibility information</a> to verify you can use it.\n          Note that a request using the <code>GET</code> or <code>HEAD</code> method cannot have a body.\n        </p>\n      </dd>\n      <dt id=\"mode\"><code>mode</code></dt>\n      <dd>\n        <p>\n          The mode you want to use for the request, e.g., <code>cors</code>,\n          <code>no-cors</code>, or <code>same-origin</code>.\n        </p>\n      </dd>\n      <dt id=\"credentials\"><code>credentials</code></dt>\n      <dd>\n        <p>Controls what browsers do with credentials (<a href=\"/en-US/docs/Web/HTTP/Cookies\">cookies</a>, <a href=\"/en-US/docs/Web/HTTP/Authentication\">HTTP authentication</a> entries, and TLS client certificates). Must be one of the following strings:</p>\n        <dl>\n          <dt id=\"omit\"><code>omit</code></dt>\n          <dd>\n            <p>Tells browsers to exclude credentials from the request, and ignore any credentials sent back in the response (e.g., any <a href=\"/en-US/docs/Web/HTTP/Headers/Set-Cookie\"><code>Set-Cookie</code></a> header).</p>\n          </dd>\n          <dt id=\"same-origin\"><code>same-origin</code></dt>\n          <dd>\n            <p>Tells browsers to include credentials with requests to same-origin URLs, and use any credentials sent back in responses from same-origin URLs. <strong>This is the default value.</strong></p>\n          </dd>\n          <dt id=\"include\"><code>include</code></dt>\n          <dd>\n            <p>Tells browsers to include credentials in both same- and cross-origin requests, and always use any credentials sent back in responses.</p>\n            <div class=\"notecard note\" id=\"sect2\">\n              <p><strong>Note:</strong> Credentials may be included in simple and \"final\" cross-origin requests, but should not be included in <a href=\"/en-US/docs/Web/HTTP/CORS#preflight_requests_and_credentials\">CORS preflight requests</a>.</p>\n            </div>\n          </dd>\n        </dl>\n      </dd>\n      <dt id=\"cache\"><code>cache</code></dt>\n      <dd>\n        <p>A string indicating how the request will interact with the browser's <a href=\"/en-US/docs/Web/HTTP/Caching\">HTTP cache</a>. The possible values, <code>default</code>, <code>no-store</code>, <code>reload</code>, <code>no-cache</code>, <code>force-cache</code>, and <code>only-if-cached</code>, are documented in the article for the <a href=\"/en-US/docs/Web/API/Request/cache\" title=\"cache\"><code>cache</code></a> property of the <a href=\"/en-US/docs/Web/API/Request\"><code>Request</code></a> object.</p>\n      </dd>\n      <dt id=\"redirect\"><code>redirect</code></dt>\n      <dd>\n        <p>How to handle a <code>redirect</code> response:</p>\n        <ul>\n          <li><code>follow</code>: Automatically follow redirects. Unless otherwise stated the redirect mode is set to <code>follow</code>.</li>\n          <li><code>error</code>: Abort with an error if a redirect occurs.</li>\n          <li>\n            <code>manual</code>: Caller intends to process the response in another context.\n            See <a href=\"https://fetch.spec.whatwg.org/#requests\" class=\"external\" rel=\" noopener\">WHATWG fetch standard</a> for more information.\n          </li>\n        </ul>\n      </dd>\n      <dt id=\"referrer\"><code>referrer</code></dt>\n      <dd>\n        <p>\n          A string specifying the referrer of the request. This can be a\n          same-origin URL, <code>about:client</code>, or an empty string.\n        </p>\n      </dd>\n      <dt id=\"referrerpolicy\"><code>referrerPolicy</code></dt>\n      <dd>\n        <p>\n          Specifies the <a href=\"https://w3c.github.io/webappsec-referrer-policy/#referrer-policies\" class=\"external\" rel=\" noopener\">referrer policy</a> to use for the request. May be one of <code>no-referrer</code>,\n          <code>no-referrer-when-downgrade</code>, <code>same-origin</code>,\n          <code>origin</code>, <code>strict-origin</code>,\n          <code>origin-when-cross-origin</code>,\n          <code>strict-origin-when-cross-origin</code>, or <code>unsafe-url</code>.\n        </p>\n      </dd>\n      <dt id=\"integrity\"><code>integrity</code></dt>\n      <dd>\n        <p>\n          Contains the <a href=\"/en-US/docs/Web/Security/Subresource_Integrity\">subresource integrity</a>\n          value of the request (e.g.,\n          <code>sha256-BpfBw7ivV8q2jLiT13fxDYAe2tJllusRSZ273h2nFSE=</code>).\n        </p>\n      </dd>\n      <dt id=\"keepalive\"><code>keepalive</code></dt>\n      <dd>\n        <p>\n          The <code>keepalive</code> option can be used to allow the request to outlive\n          the page. Fetch with the <code>keepalive</code> flag is a replacement for the\n          <a href=\"/en-US/docs/Web/API/Navigator/sendBeacon\"><code>Navigator.sendBeacon()</code></a> API.\n        </p>\n      </dd>\n      <dt id=\"signal\"><code>signal</code></dt>\n      <dd>\n        <p>\n          An <a href=\"/en-US/docs/Web/API/AbortSignal\"><code>AbortSignal</code></a> object instance; allows you to communicate with a\n          fetch request and abort it if desired via an <a href=\"/en-US/docs/Web/API/AbortController\"><code>AbortController</code></a>.\n        </p>\n      </dd>\n    </dl>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>A <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> that resolves to a <a href=\"/en-US/docs/Web/API/Response\"><code>Response</code></a> object.</p>"}},{"type":"prose","value":{"id":"exceptions","title":"Exceptions","isH3":true,"content":"<dl>\n  <dt id=\"aborterror\"><code>AbortError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>\n      The request was aborted due to a call to the <a href=\"/en-US/docs/Web/API/AbortController\"><code>AbortController</code></a>\n      <a href=\"/en-US/docs/Web/API/AbortController/abort\" title=\"abort()\"><code>abort()</code></a> method.\n    </p>\n  </dd>\n  <dt id=\"typeerror\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a></dt>\n  <dd>\n    <p>Can occur for the following reasons:</p>\n  </dd>\n</dl>\n<table>\n  <thead>\n    <tr>\n      <th scope=\"col\">Reason</th>\n      <th scope=\"col\">Failing examples</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Invalid header name.</td>\n      <td>\n        <pre class=\"notranslate\">// space in \"C ontent-Type\"\nconst headers = {\n  'C ontent-Type': 'text/xml',\n  'Breaking-Bad': '&lt;3',\n};\nfetch('https://example.com/', { headers });\n        </pre>\n      </td>\n    </tr>\n    <tr>\n      <td>Invalid header value. The header object must contain exactly two elements.</td>\n      <td>\n        <pre class=\"notranslate\">const headers = [\n  ['Content-Type', 'text/html', 'extra'],\n  ['Accept'],\n];\nfetch('https://example.com/', { headers });\n        </pre>\n      </td>\n    </tr>\n    <tr>\n      <td>Invalid URL or scheme, or using a scheme that fetch does not support, or using a scheme that is not supported for a particular request mode.</td>\n      <td>\n        <pre class=\"notranslate\">fetch('blob://example.com/', { mode: 'cors' });\n        </pre>\n      </td>\n    </tr>\n    <tr>\n      <td>URL includes credentials.</td>\n      <td>\n        <pre class=\"notranslate\">fetch('https://user:password@example.com/');\n        </pre>\n      </td>\n    </tr>\n    <tr>\n      <td>Invalid referrer URL.</td>\n      <td>\n        <pre class=\"notranslate\">fetch('https://example.com/', { referrer: './abc\\u0000df' });\n        </pre>\n      </td>\n    </tr>\n    <tr>\n      <td>Invalid modes (<code>navigate</code> and <code>websocket</code>).</td>\n      <td>\n        <pre class=\"notranslate\">fetch('https://example.com/', { mode: 'navigate' });\n        </pre>\n      </td>\n    </tr>\n    <tr>\n      <td>If the request cache mode is \"only-if-cached\" and the request mode is other than \"same-origin\".</td>\n      <td>\n        <pre class=\"notranslate\">fetch('https://example.com/', {\n  cache: 'only-if-cached',\n  mode: 'no-cors',\n});\n        </pre>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        If the request method is an invalid name token or one of forbidden headers\n        (<code>'CONNECT'</code>, <code>'TRACE'</code> or <code>'TRACK'</code>).\n      </td>\n      <td>\n        <pre class=\"notranslate\">fetch('https://example.com/', { method: 'CONNECT' });\n        </pre>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        If the request mode is \"no-cors\" and the request method is not a CORS-safe-listed method\n        (<code>'GET'</code>, <code>'HEAD'</code>, or <code>'POST'</code>).\n      </td>\n      <td>\n        <pre class=\"notranslate\">fetch('https://example.com/', {\n  method: 'CONNECT',\n  mode: 'no-cors',\n});\n        </pre>\n      </td>\n    </tr>\n    <tr>\n      <td>If the request method is <code>'GET'</code> or <code>'HEAD'</code> and the body is non-null or not undefined.</td>\n      <td>\n        <pre class=\"notranslate\">fetch('https://example.com/', {\n  method: 'GET',\n  body: new FormData(),\n});\n        </pre>\n      </td>\n    </tr>\n    <tr>\n      <td>If fetch throws a network error.</td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<p>\n  In our <a href=\"https://github.com/mdn/dom-examples/tree/main/fetch/fetch-request\" class=\"external\" rel=\" noopener\">Fetch Request example</a> (see <a href=\"https://mdn.github.io/dom-examples/fetch/fetch-request/\" class=\"external\" rel=\" noopener\">Fetch Request live</a>) we\n  create a new <a href=\"/en-US/docs/Web/API/Request\"><code>Request</code></a> object using the relevant constructor, then fetch it\n  using a <code>fetch()</code> call. Since we are fetching an image, we run\n  <a href=\"/en-US/docs/Web/API/Response/blob\"><code>Response.blob()</code></a> on the response to give it the proper MIME type so it will be\n  handled properly, then create an Object URL of it and display it in an\n  <a href=\"/en-US/docs/Web/HTML/Element/img\"><code>&lt;img&gt;</code></a> element.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> myImage <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> myRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flowers.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>myRequest<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">HTTP error! Status: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>response<span class=\"token punctuation\">.</span>status<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    myImage<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>\n  In the <a href=\"https://github.com/mdn/dom-examples/tree/main/fetch/fetch-with-init-then-request/index.html\" class=\"external\" rel=\" noopener\">Fetch with init then Request example</a> (see <a href=\"https://mdn.github.io/dom-examples/fetch/fetch-with-init-then-request/\" class=\"external\" rel=\" noopener\">Fetch Request init live</a>), we do the same thing except that we pass in an\n  <code>init</code> object when we invoke <code>fetch()</code>:\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> myImage <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> myHeaders <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Accept'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'image/jpeg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> myInit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> myHeaders<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'cors'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">cache</span><span class=\"token operator\">:</span> <span class=\"token string\">'default'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> myRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flowers.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>myRequest<span class=\"token punctuation\">,</span> myInit<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// …</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>\n  You could also pass the <code>init</code> object in with the\n  <code>Request</code> constructor to get the same effect:\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> myRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flowers.jpg'</span><span class=\"token punctuation\">,</span> myInit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>\n  You can also use an object literal as <code>headers</code> in\n  <code>init</code>.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> myInit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">'Accept'</span><span class=\"token operator\">:</span> <span class=\"token string\">'image/jpeg'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'cors'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">cache</span><span class=\"token operator\">:</span> <span class=\"token string\">'default'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> myRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flowers.jpg'</span><span class=\"token punctuation\">,</span> myInit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://fetch.spec.whatwg.org/#fetch-method","title":"Fetch Standard"}],"query":"api.fetch"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.fetch","dataURL":"/en-US/docs/Web/API/fetch/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/Fetch_API\">Fetch API</a></li>\n  <li><a href=\"/en-US/docs/Web/API/Service_Worker_API\">ServiceWorker API</a></li>\n  <li><a href=\"/en-US/docs/Web/HTTP/CORS\">HTTP access control (CORS)</a></li>\n  <li><a href=\"/en-US/docs/Web/HTTP\">HTTP</a></li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The global fetch() method starts the process of fetching a\n  resource from the network, returning a promise which is fulfilled once the response is\n  available.","popularity":0.0307,"modified":"2022-09-13T05:27:14.000Z","other_translations":[{"title":"WindowOrWorkerGlobalScope.fetch()","locale":"es","native":"Español"},{"title":"GlobalFetch.fetch()","locale":"fr","native":"Français"},{"title":"WindowOrWorkerGlobalScope.fetch()","locale":"ja","native":"日本語"},{"title":"fetch()","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"WindowOrWorkerGlobalScope.fetch()","locale":"ru","native":"Русский"},{"title":"fetch()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/web/api/fetch","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/fetch/index.md","last_commit_url":"https://github.com/mdn/content/commit/4e233c16c6f0d347972c5c762f5b836318a46124","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/fetch","title":"fetch()"}],"pageTitle":"fetch() - Web APIs | MDN","noIndexing":false}}