{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Trusted Types API","mdn_url":"/en-US/docs/Web/API/Trusted_Types_API","locale":"en-US","native":"English (US)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong>Trusted Types API</strong> gives web developers a way to lock down the insecure parts of the <a href=\"/en-US/docs/Web/API/Document_Object_Model\" title=\"DOM API\"><code>DOM API</code></a> to prevent client-side <a href=\"/en-US/docs/Glossary/Cross-site_scripting\">Cross-site scripting</a> (XSS) attacks.</p>"}},{"type":"prose","value":{"id":"concepts_and_usage","title":"Concepts and Usage","isH3":false,"content":"<p>Client-side, or DOM-based, XSS attacks happen when data controlled by a user (such as that input into a form field) reaches a function that can execute that data. These functions are known as <em>injection sinks</em>. DOM-based XSS attacks happen when a user is able to write arbitrary JavaScript code and have it executed by one of these functions.</p>\n<p>The Trusted Types API locks down risky injection sinks, requiring you to process the data before passing it to one of these functions. If you use a string, then the browser will throw a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> and prevent the use of the function.</p>\n<p>Trusted Types works alongside <a href=\"/en-US/docs/Web/HTTP/CSP\">Content-Security Policy</a> with the <a href=\"/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/trusted-types\">trusted-types</a> and <a href=\"/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/require-trusted-types-for\">require-trusted-types-for</a> directives.</p>"}},{"type":"prose","value":{"id":"injection_sinks","title":"Injection Sinks","isH3":true,"content":"<p>The Trusted Types API locks down injection sinks that can act as a vector for DOM-XSS attacks. An injection sink is any Web API function that should only be called with trusted, validated or sanitized input. Examples of injection sinks include:</p>\n<ul>\n  <li>Functions that insert HTML into the document such as <a href=\"/en-US/docs/Web/API/Element/innerHTML\"><code>Element.innerHTML</code></a>, <a href=\"/en-US/docs/Web/API/Element/outerHTML\"><code>Element.outerHTML</code></a>, or <a href=\"/en-US/docs/Web/API/Document/write\"><code>Document.write</code></a>.</li>\n  <li>Functions that create a new same-origin <a href=\"/en-US/docs/Web/API/Document\"><code>Document</code></a> with caller-controlled markup such as <a href=\"/en-US/docs/Web/API/DOMParser/parseFromString\"><code>DOMParser.parseFromString</code></a>.</li>\n  <li>Functions that execute code such as <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\"><code>Global_Objects/eval</code></a>.</li>\n  <li>Setters for <a href=\"/en-US/docs/Web/API/Element\"><code>Element</code></a> attributes that accept a URL of code to load or execute.</li>\n</ul>\n<p>Trusted Types will force you to process the data before passing it to any injection sink rather than use a string. This ensures that the data is trustworthy.</p>"}},{"type":"prose","value":{"id":"trusted_type_policies","title":"Trusted Type Policies","isH3":true,"content":"<p>A policy is a factory for Trusted Types. Web developers can specify a set of policies used for the creation of typed objects which form the trusted codebase for valid Trusted Type objects.</p>"}},{"type":"prose","value":{"id":"interfaces","title":"Interfaces","isH3":false,"content":"<dl>\n  <dt id=\"trustedhtml\"><a href=\"/en-US/docs/Web/API/TrustedHTML\"><code>TrustedHTML</code></a></dt>\n  <dd>\n    <p>Represents a string to insert into an injection sink that will render it as HTML.</p>\n  </dd>\n  <dt id=\"trustedscript\"><a href=\"/en-US/docs/Web/API/TrustedScript\"><code>TrustedScript</code></a></dt>\n  <dd>\n    <p>Represents a string to insert into an injection sink that could lead to the script being executed.</p>\n  </dd>\n  <dt id=\"trustedscripturl\"><a href=\"/en-US/docs/Web/API/TrustedScriptURL\"><code>TrustedScriptURL</code></a></dt>\n  <dd>\n    <p>Represents a string to insert into an injection sink that will parse it as a URL of an external script resource.</p>\n  </dd>\n  <dt id=\"trustedtypepolicy\"><a href=\"/en-US/docs/Web/API/TrustedTypePolicy\"><code>TrustedTypePolicy</code></a></dt>\n  <dd>\n    <p>Defines the functions used to create the above Trusted Type objects.</p>\n  </dd>\n  <dt id=\"trustedtypepolicyfactory\"><a href=\"/en-US/docs/Web/API/TrustedTypePolicyFactory\"><code>TrustedTypePolicyFactory</code></a></dt>\n  <dd>\n    <p>Creates policies and verifies that Trusted Type object instances were created via one of the policies.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<p>In the below example we create a policy that will create <a href=\"/en-US/docs/Web/API/TrustedHTML\"><code>TrustedHTML</code></a> objects using <a href=\"/en-US/docs/Web/API/TrustedTypePolicyFactory/createPolicy\"><code>TrustedTypePolicyFactory.createPolicy()</code></a>. We can then use <a href=\"/en-US/docs/Web/API/TrustedTypePolicy/createHTML\"><code>TrustedTypePolicy.createHTML</code></a> to create a sanitized HTML string to be inserted into the document.</p>\n<p>The sanitized value can then be used with <a href=\"/en-US/docs/Web/API/Element/innerHTML\"><code>Element.innerHTML</code></a> to ensure that no new HTML elements can be injected.</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myDiv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> escapeHTMLPolicy <span class=\"token operator\">=</span> trustedTypes<span class=\"token punctuation\">.</span><span class=\"token function\">createPolicy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myEscapePolicy\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">createHTML</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">&gt;</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myDiv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> escaped <span class=\"token operator\">=</span> escapeHTMLPolicy<span class=\"token punctuation\">.</span><span class=\"token function\">createHTML</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;img src=x onerror=alert(1)&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>escaped <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">TrustedHTML</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nel<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> escaped<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Read more about this example, and discover other ways to sanitize input in the article <a href=\"https://web.dev/trusted-types/\" class=\"external\" rel=\" noopener\">Prevent DOM-based cross-site scripting vulnerabilities with Trusted Types</a>.</p>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/webappsec-trusted-types/dist/spec/","title":"Trusted Types"}],"query":"undefined"}},{"type":"prose","value":{"id":"browser_compatibility","title":"Browser compatibility","isH3":false,"content":"<p>See the compatibility data for each of the Trusted Types API interfaces.</p>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"https://web.dev/trusted-types/\" class=\"external\" rel=\" noopener\">Prevent DOM-based cross-site scripting vulnerabilities with Trusted Types</a></li>\n  <li><a href=\"https://github.com/w3c/webappsec-trusted-types#polyfill\" class=\"external\" rel=\" noopener\">Trusted Types polyfill</a> (also available as an <a href=\"https://www.npmjs.com/package/trusted-types\" class=\"external\" rel=\" noopener\">npm package</a>)</li>\n</ul>"}}],"toc":[{"text":"Concepts and Usage","id":"concepts_and_usage"},{"text":"Interfaces","id":"interfaces"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The Trusted Types API gives web developers a way to lock down the insecure parts of the DOM API to prevent client-side Cross-site scripting (XSS) attacks.","popularity":0.0003,"modified":"2022-09-09T05:19:45.000Z","source":{"folder":"en-us/web/api/trusted_types_api","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/trusted_types_api/index.md","last_commit_url":"https://github.com/mdn/content/commit/f7dae62645a2c735ed6f6ed63f664bf279fdfc4b","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/Trusted_Types_API","title":"Trusted Types API"}],"pageTitle":"Trusted Types API - Web APIs | MDN","noIndexing":false}}