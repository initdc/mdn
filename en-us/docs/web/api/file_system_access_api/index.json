{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"File System Access API","mdn_url":"/en-US/docs/Web/API/File_System_Access_API","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/File_System_Access_API\">File System Access API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Interfaces</summary><ol><li><a href=\"/en-US/docs/Web/API/FileSystemHandle\"><code>FileSystemHandle</code></a></li><li><a href=\"/en-US/docs/Web/API/FileSystemFileHandle\"><code>FileSystemFileHandle</code></a></li><li><a href=\"/en-US/docs/Web/API/FileSystemDirectoryHandle\"><code>FileSystemDirectoryHandle</code></a></li><li><a href=\"/en-US/docs/Web/API/FileSystemWritableFileStream\"><code>FileSystemWritableFileStream</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/window/showOpenFilePicker\"><code>window.showOpenFilePicker()</code></a></li><li><a href=\"/en-US/docs/Web/API/window/showSaveFilePicker\"><code>window.showSaveFilePicker()</code></a></li><li><a href=\"/en-US/docs/Web/API/window/showDirectoryPicker\"><code>window.showDirectoryPicker()</code></a></li><li><a href=\"/en-US/docs/Web/API/DataTransferItem/getAsFileSystemHandle\"><code>DataTransferItem.getAsFileSystemHandle()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard secure\" id=\"sect1\"><p><strong>Secure context:</strong> This feature is available only in <a href=\"/en-US/docs/Web/Security/Secure_Contexts\">secure contexts</a> (HTTPS), in some or all <a href=\"#browser_compatibility\">supporting browsers</a>.</p></div>\n<p>The File System Access API allows read, write and file management capabilities.</p>"}},{"type":"prose","value":{"id":"concepts_and_usage","title":"Concepts and Usage","isH3":false,"content":"<p>This API allows interaction with files on a user's local device, or on a user-accessible network file system. Core functionality of this API includes reading files, writing or saving files, and access to directory structure.</p>\n<p>Most of the interaction with files and directories is accomplished through handles. A parent <a href=\"/en-US/docs/Web/API/FileSystemHandle\"><code>FileSystemHandle</code></a> class helps define two child classes: <a href=\"/en-US/docs/Web/API/FileSystemFileHandle\"><code>FileSystemFileHandle</code></a> and <a href=\"/en-US/docs/Web/API/FileSystemDirectoryHandle\"><code>FileSystemDirectoryHandle</code></a>, for files and directories respectively.</p>\n<p>These handles represent the file or directory on the user's system. You must first gain access to them by showing the user a file or directory picker. The methods which allow this are <a href=\"/en-US/docs/Web/API/Window/showOpenFilePicker\"><code>window.showOpenFilePicker</code></a> and <a href=\"/en-US/docs/Web/API/Window/showDirectoryPicker\"><code>window.showDirectoryPicker</code></a>. Once these are called, the file picker presents itself and the user selects either a file or directory. Once this happens successfully, a handle is returned. You can also gain access to file handles via the <a href=\"/en-US/docs/Web/API/DataTransferItem/getAsFileSystemHandle\"><code>DataTransferItem.getAsFileSystemHandle()</code></a> method of the <a href=\"/en-US/docs/Web/API/HTML_Drag_and_Drop_API\"><code>HTML Drag and Drop API</code></a>.</p>\n<p>The handle provides its own functionality and there are a few differences depending on whether a file or directory was selected (see the <a href=\"#interfaces\">interfaces</a> section for specific details). You then can access file data, or information (including children) of the directory selected.</p>\n<p>There is also \"save\" functionality, using the <a href=\"/en-US/docs/Web/API/FileSystemWritableFileStream\"><code>FileSystemWritableFileStream</code></a> interface. Once the data you'd like to save is in a format of <a href=\"/en-US/docs/Web/API/Blob\"><code>Blob</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> object, string literal or <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>buffer</code></a>, you can open a stream and save the data to a file. This can be the existing file or a new file.</p>\n<p>This API opens up potential functionality the web has been lacking. Still, security has been of utmost concern when designing the API, and access to file/directory data is disallowed unless the user specifically permits it.</p>"}},{"type":"prose","value":{"id":"interfaces","title":"Interfaces","isH3":false,"content":"<dl>\n  <dt id=\"filesystemhandle\"><a href=\"/en-US/docs/Web/API/FileSystemHandle\"><code>FileSystemHandle</code></a></dt>\n  <dd>\n    <p>The <strong><code>FileSystemHandle</code></strong> interface is an object which represents an entry. Multiple handles can represent the same entry. For the most part you do not work with <code>FileSystemEntry</code> directly but rather it's child interfaces <a href=\"/en-US/docs/Web/API/FileSystemFileEntry\"><code>FileSystemFileEntry</code></a> and <a href=\"/en-US/docs/Web/API/FileSystemDirectoryEntry\"><code>FileSystemDirectoryEntry</code></a>.</p>\n  </dd>\n  <dt id=\"filesystemfilehandle\"><a href=\"/en-US/docs/Web/API/FileSystemFileHandle\"><code>FileSystemFileHandle</code></a></dt>\n  <dd>\n    <p>Provides a handle to a file system entry.</p>\n  </dd>\n  <dt id=\"filesystemdirectoryhandle\"><a href=\"/en-US/docs/Web/API/FileSystemDirectoryHandle\"><code>FileSystemDirectoryHandle</code></a></dt>\n  <dd>\n    <p>provides a handle to a file system directory.</p>\n  </dd>\n  <dt id=\"filesystemwritablefilestream\"><a href=\"/en-US/docs/Web/API/FileSystemWritableFileStream\"><code>FileSystemWritableFileStream</code></a></dt>\n  <dd>\n    <p>is a <a href=\"/en-US/docs/Web/API/WritableStream\"><code>WritableStream</code></a> object with additional convenience methods, which operates on a single file on disk.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"accessing_files","title":"Accessing files","isH3":true,"content":"<p>The below code allows the user to choose a file from the file picker and then tests to see whether the handle returned is a file or directory</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// store a reference to our file handle</span>\n<span class=\"token keyword\">let</span> fileHandle<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// open file picker</span>\n  <span class=\"token punctuation\">[</span>fileHandle<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">showOpenFilePicker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fileHandle<span class=\"token punctuation\">.</span>kind <span class=\"token operator\">===</span> <span class=\"token string\">'file'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// run file code</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fileHandle<span class=\"token punctuation\">.</span>kind <span class=\"token operator\">===</span> <span class=\"token string\">'directory'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// run directory code</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>The following asynchronous function presents a file picker and once a file is chosen, uses the <code>getFile()</code> method to retrieve the contents.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> pickerOpts <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">types</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> <span class=\"token string\">'Images'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">accept</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string-property property\">'image/*'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'.png'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.gif'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.jpeg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.jpg'</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">excludeAcceptAllOption</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">multiple</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getTheFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// open file picker</span>\n  <span class=\"token punctuation\">[</span>fileHandle<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">showOpenFilePicker</span><span class=\"token punctuation\">(</span>pickerOpts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// get file contents</span>\n  <span class=\"token keyword\">const</span> fileData <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> fileHandle<span class=\"token punctuation\">.</span><span class=\"token function\">getFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"accessing_directories","title":"Accessing directories","isH3":true,"content":"<p>The following example returns a directory handle with the specified name. If the directory does not exist, it is created.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> dirName <span class=\"token operator\">=</span> <span class=\"token string\">'directoryToGetName'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// assuming we have a directory handle: 'currentDirHandle'</span>\n<span class=\"token keyword\">const</span> subDir <span class=\"token operator\">=</span> currentDirHandle<span class=\"token punctuation\">.</span><span class=\"token function\">getDirectoryHandle</span><span class=\"token punctuation\">(</span>dirName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">create</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>The following asynchronous function uses <code>resolve()</code> to find the path to a chosen file, relative to a specified directory handle.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">returnPathDirectories</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">directoryHandle</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// Get a file handle by showing a file picker:</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>handle<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> self<span class=\"token punctuation\">.</span><span class=\"token function\">showOpenFilePicker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>handle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// User cancelled, or otherwise failed to open a file.</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Check if handle exists inside directory our directory handle</span>\n  <span class=\"token keyword\">const</span> relativePaths <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> directoryHandle<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>relativePaths <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Not inside directory handle</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// relativePaths is an array of names, giving the relative path</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> name <span class=\"token keyword\">of</span> relativePaths<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// log each entry</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"writing_to_files","title":"Writing to files","isH3":true,"content":"<p>The following asynchronous function opens the save file picker, which returns a <a href=\"/en-US/docs/Web/API/FileSystemFileHandle\"><code>FileSystemFileHandle</code></a> once a file is selected. A writable stream is then created using the <a href=\"/en-US/docs/Web/API/FileSystemFileHandle/createWritable\"><code>FileSystemFileHandle.createWritable()</code></a> method.</p>\n<p>A user defined <a href=\"/en-US/docs/Web/API/Blob\"><code>Blob</code></a> is then written to the stream which is subsequently closed.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">saveFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// create a new handle</span>\n  <span class=\"token keyword\">const</span> newHandle <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">showSaveFilePicker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// create a FileSystemWritableFileStream to write to</span>\n  <span class=\"token keyword\">const</span> writableStream <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> newHandle<span class=\"token punctuation\">.</span><span class=\"token function\">createWritable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// write our file</span>\n  <span class=\"token keyword\">await</span> writableStream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>imgBlob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// close the file and write the contents to disk.</span>\n  <span class=\"token keyword\">await</span> writableStream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>The following show different examples of options that can be passed into the <code>write()</code> method.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// just pass in the data (no options)</span>\nwritableStream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// writes the data to the stream from the determined position</span>\nwritableStream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"write\"</span><span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// updates the current file cursor offset to the position specified</span>\nwritableStream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"seek\"</span><span class=\"token punctuation\">,</span> position <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// resizes the file to be size bytes long</span>\nwritableStream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"truncate\"</span><span class=\"token punctuation\">,</span> size <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"query":"api.FileSystemHandle,api.FileSystemFileHandle,api.FileSystemDirectoryHandle,api.FileSystemWritableFileStream,api.Window.showOpenFilePicker","specifications":[]}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"data":null,"query":"api.FileSystemHandle,api.FileSystemFileHandle,api.FileSystemDirectoryHandle,api.FileSystemWritableFileStream,api.Window.showOpenFilePicker","browsers":null}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"https://web.dev/file-system-access/\" class=\"external\" rel=\" noopener\">The File System Access API: simplifying access to local files</a></li>\n</ul>"}}],"toc":[{"text":"Concepts and Usage","id":"concepts_and_usage"},{"text":"Interfaces","id":"interfaces"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The File System Access API allows read, write and file management capabilities.","popularity":0.0066,"modified":"2022-09-09T05:10:34.000Z","source":{"folder":"en-us/web/api/file_system_access_api","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/file_system_access_api/index.md","last_commit_url":"https://github.com/mdn/content/commit/1511e914c6b1ce6f88056bfefd48a6aa585cebce","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/File_System_Access_API","title":"File System Access API"}],"pageTitle":"File System Access API - Web APIs | MDN","noIndexing":false}}