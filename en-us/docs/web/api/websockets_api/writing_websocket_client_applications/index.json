{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Writing WebSocket client applications","mdn_url":"/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/WebSockets_API\">Websockets API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/WebSockets_API\"><code>WebSockets_API</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Websockets API</summary><ol><li><a href=\"/en-US/docs/Web/API/CloseEvent\"><code>CloseEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/MessageEvent\"><code>MessageEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/WebSocket\"><code>WebSocket</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>WebSocket client applications use the <a href=\"/en-US/docs/Web/API/WebSockets_API\">WebSocket API</a> to communicate with <a href=\"/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers\">WebSocket servers</a> using the WebSocket protocol.</p><div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> This feature is available in <a href=\"/en-US/docs/Web/API/Web_Workers_API\">Web Workers</a></p>\n</div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p>\n    <strong>Note:</strong> The example snippets in this article are taken from our WebSocket chat client/server sample.\n    <a href=\"https://github.com/mdn/samples-server/tree/master/s/websocket-chat\" class=\"external\" rel=\" noopener\">See the code</a>.\n  </p>\n</div>"}},{"type":"prose","value":{"id":"creating_a_websocket_object","title":"Creating a WebSocket object","isH3":false,"content":"<p>In order to communicate using the WebSocket protocol, you need to create a <a href=\"/en-US/docs/Web/API/WebSocket\"><code>WebSocket</code></a> object; this will automatically attempt to open the connection to the server.</p>\n<p>The WebSocket constructor accepts one required and one optional parameter:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>webSocket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> protocols<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<dl>\n  <dt id=\"url\"><code>url</code></dt>\n  <dd>\n    <p>\n      The URL to which to connect; this should be the URL to which the WebSocket server will respond.\n      This should use the URL scheme <code>wss://</code>, although some software may allow you to use the insecure <code>ws://</code> for local connections.\n    </p>\n  </dd>\n  <dt id=\"protocols\"><code>protocols</code> <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>\n      Either a single protocol string or an array of protocol strings.\n      These strings are used to indicate sub-protocols, so that a single server can implement multiple WebSocket sub-protocols (for example, you might want one server to be able to handle different types of interactions depending on the specified <code>protocol</code>).\n      If you don't specify a protocol string, an empty string is assumed.\n    </p>\n  </dd>\n</dl>\n<p>\n  The constructor will throw a <code>SecurityError</code> if the destination doesn't allow access.\n  This may happen if you attempt to use an insecure connection (most <a href=\"/en-US/docs/Glossary/User_agent\">user agents</a> now require a secure link for all WebSocket connections unless they're on the same device or possibly on the same network).\n</p>"}},{"type":"prose","value":{"id":"connection_errors","title":"Connection errors","isH3":true,"content":"<p>If an error occurs while attempting to connect, first a simple event with the name <code>error</code> is sent to the <a href=\"/en-US/docs/Web/API/WebSocket\"><code>WebSocket</code></a> object (thereby invoking its <a href=\"/en-US/docs/Web/API/WebSocket/error_event\" title=\"onerror\"><code>onerror</code></a> handler), and then the <a href=\"/en-US/docs/Web/API/CloseEvent\"><code>CloseEvent</code></a> is sent to the <code>WebSocket</code> object (thereby invoking its <a href=\"/en-US/docs/Web/API/WebSocket/close_event\" title=\"onclose\"><code>onclose</code></a> handler) to indicate the reason for the connection's closing.</p>\n<p>The browser may also output to its console a more descriptive error message as well as a closing code as defined in <a href=\"https://datatracker.ietf.org/doc/html/rfc6455#section-7.4\" class=\"external\" rel=\" noopener\">RFC 6455, Section 7.4</a> through the <a href=\"/en-US/docs/Web/API/CloseEvent\"><code>CloseEvent</code></a>.</p>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":true,"content":"<p>\n  This simple example creates a new WebSocket, connecting to the server at <code>wss://www.example.com/socketserver</code>.\n  A custom protocol of \"protocolOne\" is named in the request for the socket in this example, though this can be omitted.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> exampleSocket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wss://www.example.com/socketserver\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"protocolOne\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>\n  On return, <a href=\"/en-US/docs/Web/API/WebSocket/readyState\" title=\"exampleSocket.readyState\"><code>exampleSocket.readyState</code></a> is <code>CONNECTING</code>. The <code>readyState</code> will become <code>OPEN</code> once\n  the connection is ready to transfer data.\n</p>\n<p>If you want to open a connection and are flexible about the protocols you support, you can specify an array of protocols:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> exampleSocket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wss://www.example.com/socketserver\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"protocolOne\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"protocolTwo\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Once the connection is established (that is, <code>readyState</code> is <code>OPEN</code>), <a href=\"/en-US/docs/Web/API/WebSocket/protocol\" title=\"exampleSocket.protocol\"><code>exampleSocket.protocol</code></a> will tell you which protocol the server selected.</p>\n<p>Establishing a WebSocket relies on the <a href=\"/en-US/docs/Web/HTTP/Protocol_upgrade_mechanism\">HTTP Upgrade mechanism</a>, so the request for the protocol upgrade is implicit when we address the web server as <code>ws://www.example.com</code> or <code>wss://www.example.com</code>.</p>"}},{"type":"prose","value":{"id":"sending_data_to_the_server","title":"Sending data to the server","isH3":false,"content":"<p>\n  Once you've opened your connection, you can begin transmitting data to the server.\n  To do this, call the <code>WebSocket</code> object's <a href=\"/en-US/docs/Web/API/WebSocket/send\" title=\"send()\"><code>send()</code></a> method for each message you want to send:\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>exampleSocket<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Here's some text that the server is urgently awaiting!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>You can send data as a string, <a href=\"/en-US/docs/Web/API/Blob\"><code>Blob</code></a>, or <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>.</p>\n<p>\n  As establishing a connection is asynchronous and prone to failure there is no guarantee that calling the <code>send()</code> method immediately after creating a WebSocket object will be successful.\n  We can at least be sure that attempting to send data only takes place once a connection is established by defining an <a href=\"/en-US/docs/Web/API/WebSocket/open_event\" title=\"onopen\"><code>onopen</code></a> event handler to do the work:\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>exampleSocket<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onopen</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  exampleSocket<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Here's some text that the server is urgently awaiting!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"using_json_to_transmit_objects","title":"Using JSON to transmit objects","isH3":true,"content":"<p>\n  One handy thing you can do is use <a href=\"/en-US/docs/Glossary/JSON\">JSON</a> to send reasonably complex data\n  to the server. For example, a chat program can interact with a server using a protocol\n  implemented using packets of JSON-encapsulated data:\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Send text to all users through the server</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sendText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Construct a msg object containing the data the server needs to process the message from the chat client.</span>\n  <span class=\"token keyword\">const</span> msg <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span>   clientID<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Send the msg object as a JSON-formatted string.</span>\n  exampleSocket<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Blank the text input element, ready to receive the next line of text from the user.</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"receiving_messages_from_the_server","title":"Receiving messages from the server","isH3":false,"content":"<p>\n  WebSockets is an event-driven API; when messages are received, a <code>message</code>\n  event is sent to the <code>WebSocket</code> object. To handle it, add an event listener\n  for the <code>message</code> event, or use the <a href=\"/en-US/docs/Web/API/WebSocket/message_event\" title=\"onmessage\"><code>onmessage</code></a> event handler. To begin listening for incoming data, you can do something\n  like this:\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>exampleSocket<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"receiving_and_interpreting_json_objects","title":"Receiving and interpreting JSON objects","isH3":true,"content":"<p>Let's consider the chat client application first alluded to in <a href=\"#using_json_to_transmit_objects\">Using JSON to transmit objects</a>. There are assorted types of data packets the client might receive, such as:</p>\n<ul>\n  <li>Login handshake</li>\n  <li>Message text</li>\n  <li>User list updates</li>\n</ul>\n<p>The code that interprets these incoming messages might look like this:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>exampleSocket<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chatbox\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>contentDocument<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> msg <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> time <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> timeStr <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span>\n      clientID <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"username\"</span><span class=\"token operator\">:</span>\n      text <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">User &lt;em&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>msg<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/em&gt; signed in at </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>timeStr<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;br&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"message\"</span><span class=\"token operator\">:</span>\n      text <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>timeStr<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">) </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>msg<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>msg<span class=\"token punctuation\">.</span>text<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> &lt;br&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"rejectusername\"</span><span class=\"token operator\">:</span>\n      text <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Your username has been set to &lt;em&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>msg<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/em&gt; because the name you chose is in use.&lt;br&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"userlist\"</span><span class=\"token operator\">:</span>\n      document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userlistbox\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;br&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    f<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chatbox\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>contentWindow<span class=\"token punctuation\">.</span><span class=\"token function\">scrollByPages</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Here we use <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\"><code>JSON.parse()</code></a> to convert the JSON object back into the original object, then examine and act upon its contents.</p>"}},{"type":"prose","value":{"id":"text_data_format","title":"Text data format","isH3":true,"content":"<p>Text received over a WebSocket connection is in UTF-8 format.</p>"}},{"type":"prose","value":{"id":"closing_the_connection","title":"Closing the connection","isH3":false,"content":"<p>When you've finished using the WebSocket connection, call the WebSocket method <a href=\"/en-US/docs/Web/API/WebSocket/close\" title=\"close()\"><code>close()</code></a>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>exampleSocket<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>\n  It may be helpful to examine the socket's <a href=\"/en-US/docs/Web/API/WebSocket/bufferedAmount\" title=\"bufferedAmount\"><code>bufferedAmount</code></a> attribute before attempting to close the connection to determine if any data has yet to be transmitted on the network.\n  If this value isn't 0, there's pending data still, so you may wish to wait before closing the connection.\n</p>"}},{"type":"prose","value":{"id":"security_considerations","title":"Security considerations","isH3":false,"content":"<p>\n  WebSockets should not be used in a mixed content environment; that is, you shouldn't open a non-secure WebSocket connection from a page loaded using HTTPS or vice versa.\n  Most browsers now only allow secure WebSocket connections, and no longer support using them in insecure contexts.\n</p>"}}],"toc":[{"text":"Creating a WebSocket object","id":"creating_a_websocket_object"},{"text":"Sending data to the server","id":"sending_data_to_the_server"},{"text":"Receiving messages from the server","id":"receiving_messages_from_the_server"},{"text":"Closing the connection","id":"closing_the_connection"},{"text":"Security considerations","id":"security_considerations"}],"summary":"WebSocket client applications use the WebSocket API to communicate with WebSocket servers using the WebSocket protocol.","popularity":0.0135,"modified":"2022-09-20T12:43:24.000Z","other_translations":[{"title":"Escribiendo aplicaciones con WebSockets","locale":"es","native":"Español"},{"title":"Ecrire des applications client WebSocket","locale":"fr","native":"Français"},{"title":"WebSocket クライアントアプリケーションの記述","locale":"ja","native":"日本語"},{"title":"WebSocket을 이용하여 클라이언트 애플리케이션 작성하기","locale":"ko","native":"한국어"},{"title":"Escrevendo aplicações cliente WebSocket","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Написание клиентских приложений с помощью веб-сокетов","locale":"ru","native":"Русский"},{"title":"编写 WebSocket 客户端应用","locale":"zh-CN","native":"中文 (简体)"},{"title":"製作 WebSocket 客戶端應用程式","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"en-us/web/api/websockets_api/writing_websocket_client_applications","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/websockets_api/writing_websocket_client_applications/index.md","last_commit_url":"https://github.com/mdn/content/commit/51171b417d851dce7d4a08932f0f8db25630d57c","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/WebSockets_API","title":"The WebSocket API (WebSockets)"},{"uri":"/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications","title":"Writing WebSocket client applications"}],"pageTitle":"Writing WebSocket client applications - Web APIs | MDN","noIndexing":false}}