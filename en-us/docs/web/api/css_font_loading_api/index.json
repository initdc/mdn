{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"CSS Font Loading API","mdn_url":"/en-US/docs/Web/API/CSS_Font_Loading_API","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/CSS_Font_Loading_API\">CSS Font Loading API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Interfaces</summary><ol><li><a href=\"/en-US/docs/Web/API/FontFace\"><code>FontFace</code></a></li><li><a href=\"/en-US/docs/Web/API/FontFaceSet\"><code>FontFaceSet</code></a></li><li><a href=\"/en-US/docs/Web/API/FontFaceSetLoadEvent\"><code>FontFaceSetLoadEvent</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/API/Document/fonts\"><code>Document.fonts</code></a></li><li><a href=\"/en-US/docs/Web/API/WorkerGlobalScope/fonts\"><code>WorkerGlobalScope.fonts</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Events</summary><ol><li><a href=\"/en-US/docs/Web/API/FontFaceSet/loading event_event\"><code>FontFaceSet</code>: <code>loading event</code></a></li><li><a href=\"/en-US/docs/Web/API/FontFaceSet/loadingdone event_event\"><code>FontFaceSet</code>: <code>loadingdone event</code></a></li><li><a href=\"/en-US/docs/Web/API/FontFaceSet/loadingerror event_event\"><code>FontFaceSet</code>: <code>loadingerror event</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The CSS Font Loading API provides events and interfaces for dynamically loading font resources.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> This feature is available in <a href=\"/en-US/docs/Web/API/Web_Workers_API\">Web Workers</a> (<code>self.fonts</code> provides access to <a href=\"/en-US/docs/Web/API/FontFaceSet\"><code>FontFaceSet</code></a>).</p>\n</div>"}},{"type":"prose","value":{"id":"concepts_and_usage","title":"Concepts and usage","isH3":false,"content":"<p>\n  CSS stylesheets allow authors to use custom fonts; specifying fonts to download using the <a href=\"/en-US/docs/Web/CSS/@font-face\"><code>@font-face</code></a> rule, and applying them to elements with the <a href=\"/en-US/docs/Web/CSS/font-family\"><code>font-family</code></a> property.\n  The point at which a font is downloaded is controlled by the user agent.\n  Most agents only fetch and load fonts when they are first needed, which can result in a perceptible delay.\n</p>\n<p>\n  The CSS Font Loading API overcomes this problem by letting authors control and track when a font face is fetched and loaded, and when it is added to the font face set owned by the document or worker.\n  Adding a font face to the document or worker font face set allows the user agent to fetch and load the associated font resource automatically if needed.\n  A font face can be loaded either before or after it is added to a font face set, but it <em>must</em> be added to the set before it can be used for drawing.\n</p>\n<p>\n  Font faces are defined in <a href=\"/en-US/docs/Web/API/FontFace\"><code>FontFace</code></a> objects, which specify a binary or URL font source and other properties of font in much the same way as the CSS <a href=\"/en-US/docs/Web/CSS/@font-face\"><code>@font-face</code></a> rule.\n  <code>FontFace</code> objects are added to the document or worker <a href=\"/en-US/docs/Web/API/FontFaceSet\"><code>FontFaceSet</code></a> using <a href=\"/en-US/docs/Web/API/Document/fonts\"><code>Document.fonts</code></a> and <a href=\"/en-US/docs/Web/API/WorkerGlobalScope/fonts\"><code>WorkerGlobalScope.fonts</code></a>, respectively.\n  Authors can trigger download of fonts using either <code>FontFace</code> or <code>FontFaceSet</code>, and monitor loading completion.\n  <code>FontFaceSet</code> can additionally be used to determine when all fonts required by a page have loaded and the document layout is complete.\n</p>\n<p>\n  The <a href=\"/en-US/docs/Web/API/FontFace/status\"><code>FontFace.status</code></a> property indicates the font face loading status: <code>unloaded</code>, <code>loading</code>, <code>loaded</code> or <code>failed</code>.\n  This status is initially <code>unloaded</code>.\n  It is set to <code>loading</code> when the file is being downloaded or the font data is being processed, and to <code>failed</code> if the font definition is invalid or the font data cannot be loaded.\n  The status is set to <code>loaded</code> when the font face data has been successfully fetched (if needed) and loaded.\n</p>"}},{"type":"prose","value":{"id":"defining_a_font_face","title":"Defining a font face","isH3":true,"content":"<p>\n  Font faces are created using the <a href=\"/en-US/docs/Web/API/FontFace/FontFace\"><code>FontFace</code> constructor</a>, which takes as parameters: the font family, the font source, and optional descriptors.\n  The format and grammar of these arguments is the same as the equivalent <a href=\"/en-US/docs/Web/CSS/@font-face\"><code>@font-face</code></a> definition.\n</p>\n<p>\n  The font source can either be binary data in an <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or a font resource at an URL.\n  A typical font face definition using a URL source might be as shown below.\n  Note that the <code>url()</code> function is required for URL font sources.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> font <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FontFace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myfont\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"url(myfont.woff)\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">style</span><span class=\"token operator\">:</span> <span class=\"token string\">\"italic\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">weight</span><span class=\"token operator\">:</span> <span class=\"token string\">\"400\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">stretch</span><span class=\"token operator\">:</span> <span class=\"token string\">\"condensed\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p>\n    <strong>Note:</strong> As with <code>@font-face</code>, some descriptors represent the expected data in the font data and are used for font matching, while others actually set/define properties of the generated font face.\n    For example, setting the <code>style</code> to \"italic\" indicates that the file contains italic fonts; it is up to the author to specify a file for which this is true.\n  </p>\n</div>\n<p>\n  Font faces with a <em>binary source</em> are automatically loaded if the font definition is valid and the font data can be loaded — <a href=\"/en-US/docs/Web/API/FontFace/status\"><code>FontFace.status</code></a> is set to <code>loaded</code> on success and <code>failed</code> otherwise.\n  Font faces with a URL source are validated but not automatically loaded — <a href=\"/en-US/docs/Web/API/FontFace/status\"><code>FontFace.status</code></a> is set <code>unloaded</code> if the font face definition is valid and <code>failed</code> otherwise.\n</p>"}},{"type":"prose","value":{"id":"adding_a_font_to_a_document_or_worker","title":"Adding a font to a document or worker","isH3":true,"content":"<p>Font faces are usually added to the document or worker <a href=\"/en-US/docs/Web/API/FontFaceSet\"><code>FontFaceSet</code></a> to allow the user agent to automatically load the font when needed, and <em>must</em> be added in order for the font to be used for rendering text.</p>\n<p>The code below shows a font face being added to the document.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Define a FontFace</span>\n<span class=\"token keyword\">const</span> font <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FontFace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myfont\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"url(myfont.woff)\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">style</span><span class=\"token operator\">:</span> <span class=\"token string\">\"italic\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">weight</span><span class=\"token operator\">:</span> <span class=\"token string\">\"400\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">stretch</span><span class=\"token operator\">:</span> <span class=\"token string\">\"condensed\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Add to the document.fonts (FontFaceSet)</span>\ndocument<span class=\"token punctuation\">.</span>fonts<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>font<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"loading_a_font","title":"Loading a font","isH3":true,"content":"<p>\n  A font face can be loaded manually by calling <a href=\"/en-US/docs/Web/API/FontFace/load\"><code>FontFace.load()</code></a>, or by calling <a href=\"/en-US/docs/Web/API/FontFaceSet/load\"><code>FontFaceSet.load()</code></a> if the font face has been added to the <code>FontFaceSet</code>.\n  Note that attempting to load an already-loaded font has no effect.\n</p>\n<p>The code below shows how to define a font face, add it to the document fonts, and then initiate a font load.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Define a FontFace</span>\n<span class=\"token keyword\">const</span> font <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FontFace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myfont\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"url(myfont.woff)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Add to the document.fonts (FontFaceSet)</span>\ndocument<span class=\"token punctuation\">.</span>fonts<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>font<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Load the font</span>\nfont<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Wait until the fonts are all loaded</span>\ndocument<span class=\"token punctuation\">.</span>fonts<span class=\"token punctuation\">.</span>ready<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Use the font to render text (for example, in a canvas)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>\n  Note that the <code>font.load()</code> returns a promise, so we could have handled the completion of font loading by chaining <code>then</code> afterwards.\n  Using <a href=\"/en-US/docs/Web/API/FontFaceSet/ready\"><code>document.fonts.ready</code></a> can be better in some circumstances, as it is only called when all fonts in the document have been resolved and layout is complete.\n</p>"}},{"type":"prose","value":{"id":"interfaces","title":"Interfaces","isH3":false,"content":"<dl>\n  <dt id=\"fontface\"><a href=\"/en-US/docs/Web/API/FontFace\"><code>FontFace</code></a></dt>\n  <dd>\n    <p>Represents a single usable font face.</p>\n  </dd>\n  <dt id=\"fontfaceset\"><a href=\"/en-US/docs/Web/API/FontFaceSet\"><code>FontFaceSet</code></a></dt>\n  <dd>\n    <p>An interface loading font faces and checking their download statuses.</p>\n  </dd>\n  <dt id=\"fontfacesetloadevent\"><a href=\"/en-US/docs/Web/API/FontFaceSetLoadEvent\"><code>FontFaceSetLoadEvent</code></a></dt>\n  <dd>\n    <p>Fired whenever a <a href=\"/en-US/docs/Web/API/FontFaceSet\"><code>FontFaceSet</code></a> loads.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"basic_font_loading","title":"Basic font loading","isH3":true,"content":"<p>\n  This is a very simple example that shows a font being loaded from Google Fonts and used to draw text to a canvas.\n  The example also logs the <code>status</code> immediately after creation and after loading.\n</p>\n<h4 id=\"html\">HTML</h4>\n<p>This code defines a canvas for drawing to and a textarea for logging.</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>canvas</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js-canvas<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>canvas</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>textarea</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>log<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rows</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>3<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cols</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>textarea</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<h4 id=\"javascript\">JavaScript</h4>\n<p>First we get the element to which we will log, and the canvas that will be used to render text in the downloaded font.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> log <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"js-canvas\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token number\">650</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token number\">75</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>\n  Next we define a <code>FontFace</code> that has a URL source that is a Google Font and add it to <code>document.fonts</code>.\n  We then log the font status, which should be <code>unloaded</code>.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> bitterFontFace <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FontFace</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"FontFamily Bitter\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"url(https://fonts.gstatic.com/s/bitter/v7/HEpP8tJXlWaYHimsnXgfCOvvDin1pK8aKteLpeZ5c0A.woff2)\"</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>fonts<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>bitterFontFace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlog<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bitter font: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>bitterFontFace<span class=\"token punctuation\">.</span>status<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &gt; Bitter font: unloaded</span>\n</code></pre></div>\n<p>\n  Then we call the <a href=\"/en-US/docs/Web/API/FontFace/load\"><code>FontFace.load()</code></a> method to load the font face, and wait on the returned promise.\n  Once the promise resolves we log the loaded status (which should be <code>loaded</code>) and draw text in the loaded font to the canvas.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>bitterFontFace<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    log<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bitter font: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>bitterFontFace<span class=\"token punctuation\">.</span>status<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &gt; Bitter font: loaded</span>\n\n    <span class=\"token keyword\">const</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ctx<span class=\"token punctuation\">.</span>font <span class=\"token operator\">=</span> <span class=\"token string\">'36px \"FontFamily Bitter\"'</span><span class=\"token punctuation\">;</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bitter font loaded\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Note that we could also have waited on the promise returned by the <a href=\"/en-US/docs/Web/API/FontFace/loaded\"><code>FontFace.loaded</code></a> property, or on <a href=\"/en-US/docs/Web/API/FontFaceSet/ready\"><code>FontFaceSet.ready</code></a>.</p>\n<h4 id=\"result\">Result</h4>\n<p>\n  The result is shown below.\n  It should show the name of the font drawn on the canvas in the downloaded font, and a log showing the load status before and after loading.\n</p><iframe class=\"sample-code-frame\" title=\"Basic font loading sample\" id=\"frame_basic_font_loading\" width=\"700\" height=\"180\" src=\"https://yari-demos.prod.mdn.mozit.cloud/en-US/docs/Web/API/CSS_Font_Loading_API/_sample_.basic_font_loading.html\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"font_loading_with_events","title":"Font loading with events","isH3":true,"content":"<p>\n  This example is similar to the previous one, except that it uses <a href=\"/en-US/docs/Web/API/FontFaceSet/load\"><code>FontFaceSet.load()</code></a> to load the font.\n  It also demonstrates how to listen for font loading events.\n</p>\n<h4 id=\"html_2\">HTML</h4>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>canvas</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js-canvas<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>canvas</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>textarea</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>log<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rows</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>25<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cols</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>textarea</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<h4 id=\"javascript_2\">JavaScript</h4>\n<p>The code below defines a canvas context for drawing text, defines a font face, and adds it to the document font face set.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> log <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"js-canvas\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token number\">650</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token number\">75</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> oxygenFontFace <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FontFace</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"FontFamily Oxygen\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"url(https://fonts.gstatic.com/s/oxygen/v5/qBSyz106i5ud7wkBU-FrPevvDin1pK8aKteLpeZ5c0A.woff2)\"</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>fonts<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>oxygenFontFace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlog<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Oxygen status: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>oxygenFontFace<span class=\"token punctuation\">.</span>status<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>\n  Next we use <code>load()</code> on the font face set to load the font, specifying which of the fonts to load.\n  The method returns a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>.\n  If the promise is resolved we use the font to draw some text.\n  If it is rejected the error is logged.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>document<span class=\"token punctuation\">.</span>fonts<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"36px FontFamily Oxygen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">fonts</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    log<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bitter font: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>fonts<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &gt; Oxygen font: loaded</span>\n    log<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bitter font: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>oxygenFontFace<span class=\"token punctuation\">.</span>status<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &gt; Oxygen font: loaded</span>\n    ctx<span class=\"token punctuation\">.</span>font <span class=\"token operator\">=</span> <span class=\"token string\">'36px \"FontFamily Oxygen\"'</span><span class=\"token punctuation\">;</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Oxygen font loaded\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>\n  Instead of waiting on a promise we might instead use events to track the font loading operation.\n  The code below listens for the <code>loading</code> and <code>loadingerror</code> events and logs the number of font faces for each case.\n  In the <code>loadingdone</code> event listener we additionally iterate through the font faces and log the family names.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>document<span class=\"token punctuation\">.</span>fonts<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"loading\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  log<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">loading_event: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>event<span class=\"token punctuation\">.</span>fontfaces<span class=\"token punctuation\">.</span>length<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>fonts<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"loadingerror\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  log<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">loadingerror_event: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>event<span class=\"token punctuation\">.</span>fontfaces<span class=\"token punctuation\">.</span>length<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>fonts<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"loadingdone\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  log<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">loadingdone_event: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>event<span class=\"token punctuation\">.</span>fontfaces<span class=\"token punctuation\">.</span>length<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  event<span class=\"token punctuation\">.</span>fontfaces<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    log<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">  fontface: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token punctuation\">.</span>family<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>\n  The last bit of code demonstrates how you can monitor the completion of font loading using the promise returned by <a href=\"/en-US/docs/Web/API/FontFaceSet/ready\"><code>FontFaceSet.ready</code></a>.\n  Unlike the other mechanisms this returns when all fonts defined in the document have been downloaded and layout is complete.\n</p>\n<p>When the promise resolves we iterate the values in the document's font faces.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>document<span class=\"token punctuation\">.</span>fonts<span class=\"token punctuation\">.</span>ready<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  log<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\\nFontFaces in document: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>document<span class=\"token punctuation\">.</span>fonts<span class=\"token punctuation\">.</span>size<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> fontFace <span class=\"token keyword\">of</span> document<span class=\"token punctuation\">.</span>fonts<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    log<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">+=</span> <span class=\"token string\">\"FontFace:\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> property <span class=\"token keyword\">in</span> fontFace<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      log<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">  </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>property<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>fontFace<span class=\"token punctuation\">[</span>property<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"result_2\">Result</h4>\n<p>\n  The output below shows the text drawn in \"Oxygen\" font.\n  This also shows logging from the events and when the promise returned by <code>document.fonts.ready</code> resolves.\n</p><iframe class=\"sample-code-frame\" title=\"Font loading with events sample\" id=\"frame_font_loading_with_events\" width=\"700\" height=\"520\" src=\"https://yari-demos.prod.mdn.mozit.cloud/en-US/docs/Web/API/CSS_Font_Loading_API/_sample_.font_loading_with_events.html\" loading=\"lazy\"></iframe>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://drafts.csswg.org/css-font-loading/#fontface-interface","title":"CSS Font Loading Module Level 3"}],"query":"api.FontFace"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.FontFace","dataURL":"/en-US/docs/Web/API/CSS_Font_Loading_API/bcd.json"}}],"toc":[{"text":"Concepts and usage","id":"concepts_and_usage"},{"text":"Interfaces","id":"interfaces"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"}],"summary":"The CSS Font Loading API provides events and interfaces for dynamically loading font resources.","popularity":0.0011,"modified":"2022-09-13T07:21:28.000Z","other_translations":[{"title":"CSS Font Loading API","locale":"fr","native":"Français"},{"title":"CSS Font Loading API","locale":"ja","native":"日本語"},{"title":"CSS Font Loading API","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/web/api/css_font_loading_api","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/css_font_loading_api/index.md","last_commit_url":"https://github.com/mdn/content/commit/88e92273cd9ab37146d163239e444c194ac14f13","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/CSS_Font_Loading_API","title":"CSS Font Loading API"}],"pageTitle":"CSS Font Loading API - Web APIs | MDN","noIndexing":false}}