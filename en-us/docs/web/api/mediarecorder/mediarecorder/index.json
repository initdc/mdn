{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"MediaRecorder()","mdn_url":"/en-US/docs/Web/API/MediaRecorder/MediaRecorder","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/MediaStream_Recording_API\">MediaStream Recording API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/MediaRecorder\"><code>MediaRecorder</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><em><code>MediaRecorder()</code></em></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaRecorder/audioBitsPerSecond\"><code>audioBitsPerSecond</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/mimeType\"><code>mimeType</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/API/MediaRecorder/warning_event\"><code>onwarning</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/state\"><code>state</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/stream\"><code>stream</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/videoBitsPerSecond\"><code>videoBitsPerSecond</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaRecorder/isTypeSupported\"><code>isTypeSupported()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/pause\"><code>pause()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/requestData\"><code>requestData()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/resume\"><code>resume()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/start\"><code>start()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/stop\"><code>stop()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Events</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaRecorder/dataavailable_event\"><code>dataavailable</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/error_event\"><code>error</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/pause_event\"><code>pause</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/resume_event\"><code>resume</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/start_event\"><code>start</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/stop_event\"><code>stop</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Inheritance:</summary><ol><li><a href=\"/en-US/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for MediaStream Recording</summary><ol><li><a href=\"/en-US/docs/Web/API/BlobEvent\"><code>BlobEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorderErrorEvent\"><code>MediaRecorderErrorEvent</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>\n  The <strong><code>MediaRecorder()</code></strong> constructor\n  creates a new <a href=\"/en-US/docs/Web/API/MediaRecorder\"><code>MediaRecorder</code></a> object that will record a specified\n  <a href=\"/en-US/docs/Web/API/MediaStream\"><code>MediaStream</code></a>.\n</p>\n<p>\n  The object can optionally be configured to record\n  using a specific media container (file type), and, further, can specify the exact codec\n  and codec configuration(s) to use by specifying <a href=\"/en-US/docs/Web/Media/Formats/codecs_parameter\">the <code>codecs</code> parameter</a>.\n</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js-nolint notranslate\">new MediaRecorder(stream)\nnew MediaRecorder(stream, options)\n</pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"stream\"><code>stream</code></dt>\n  <dd>\n    <p>\n      The <a href=\"/en-US/docs/Web/API/MediaStream\"><code>MediaStream</code></a> that will be recorded. This source media can come\n      from a stream created using <a href=\"/en-US/docs/Web/API/MediaDevices/getUserMedia\" title=\"navigator.mediaDevices.getUserMedia()\"><code>navigator.mediaDevices.getUserMedia()</code></a> or from an <a href=\"/en-US/docs/Web/HTML/Element/audio\"><code>&lt;audio&gt;</code></a>,\n      <a href=\"/en-US/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a> or <a href=\"/en-US/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a> element.\n    </p>\n  </dd>\n  <dt id=\"options\"><code>options</code> <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>A dictionary object that can contain the following properties:</p>\n    <dl>\n      <dt id=\"mimetype\"><code>mimeType</code></dt>\n      <dd>\n        <p>\n          A MIME type specifying the format for the resulting\n          media; you may specify the container format (the browser will select its preferred\n          codecs for audio and/or video), or you may <a href=\"/en-US/docs/Web/Media/Formats/codecs_parameter\">use the <code>codecs</code> parameter</a> and/or the <code>profiles</code> parameter to\n          provide detailed information about which codecs to use and how to configure them.\n          Applications can check in advance if a <code>mimeType</code> is supported by the\n          <a href=\"/en-US/docs/Glossary/User_agent\">user agent</a> by calling\n          <a href=\"/en-US/docs/Web/API/MediaRecorder/isTypeSupported\"><code>MediaRecorder.isTypeSupported()</code></a>.\n        </p>\n      </dd>\n      <dt id=\"audiobitspersecond\"><code>audioBitsPerSecond</code></dt>\n      <dd>\n        <p>\n          The chosen bitrate for the audio component of\n          the media.\n        </p>\n      </dd>\n      <dt id=\"videobitspersecond\"><code>videoBitsPerSecond</code></dt>\n      <dd>\n        <p>\n          The chosen bitrate for the video component of\n          the media.\n        </p>\n      </dd>\n      <dt id=\"bitspersecond\"><code>bitsPerSecond</code></dt>\n      <dd>\n        <p>\n          The chosen bitrate for the audio and video\n          components of the media. This can be specified instead of the above two\n          properties. If this is specified along with one or the other of the above\n          properties, this will be used for the one that isn't specified.\n        </p>\n      </dd>\n    </dl>\n    <div class=\"notecard note\" id=\"sect1\">\n      <p>\n        <strong>Note:</strong> If bits per second values are not specified for video and/or audio, the default\n        adopted for video is 2.5Mbps, while the audio default is adaptive, depending upon\n        the sample rate and the number of channels.\n      </p>\n    </div>\n    <div class=\"notecard note\" id=\"sect2\">\n      <p>\n        <strong>Note:</strong> Video resolution, frame rate and similar settings are specified as constraints\n        when calling <a href=\"/en-US/docs/Web/API/MediaDevices/getUserMedia\" title=\"getUserMedia()\"><code>getUserMedia()</code></a>,\n        not here in the MediaRecorder API.\n      </p>\n    </div>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"exceptions","title":"Exceptions","isH3":true,"content":"<dl>\n  <dt id=\"notsupportederror\"><code>NotSupportedError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>Thrown if the specified MIME type is not supported by the user agent.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<p>\n  This example shows how to create a media recorder for a specified stream, whose audio\n  bit rate is set to 128 Kbit/sec and whose video bit rate is set to 2.5 Mbit/sec. The\n  recorded media data will be stored in an MP4 wrapper (so if you gather the chunks of\n  media data and save them to disk, they will be in an MP4 file).\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span>getUserMedia<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> constraints <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> chunks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onSuccess</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">stream</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">audioBitsPerSecond</span> <span class=\"token operator\">:</span> <span class=\"token number\">128000</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">videoBitsPerSecond</span> <span class=\"token operator\">:</span> <span class=\"token number\">2500000</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">mimeType</span> <span class=\"token operator\">:</span> <span class=\"token string\">'video/mp4'</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> mediaRecorder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MediaRecorder</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    m <span class=\"token operator\">=</span> mediaRecorder<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// …</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/mediacapture-record/#dom-mediarecorder-mediarecorder","title":"MediaStream Recording"}],"query":"api.MediaRecorder.MediaRecorder"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.MediaRecorder.MediaRecorder","dataURL":"/en-US/docs/Web/API/MediaRecorder/MediaRecorder/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/MediaStream_Recording_API/Using_the_MediaStream_Recording_API\">Using the MediaRecorder API</a></li>\n  <li>\n    <a href=\"https://mdn.github.io/dom-examples/media/web-dictaphone/\" class=\"external\" rel=\" noopener\">Web Dictaphone</a>: MediaRecorder +\n    getUserMedia + Web Audio API visualization demo, by <a href=\"https://twitter.com/chrisdavidmills\" class=\"external\" rel=\" noopener\">Chris Mills</a> (<a href=\"https://github.com/mdn/dom-examples/tree/main/media/web-dictaphone\" class=\"external\" rel=\" noopener\">source on GitHub</a>.)\n  </li>\n  <li><a href=\"https://simpl.info/mediarecorder/\" class=\"external\" rel=\" noopener\">simpl.info MediaStream Recording demo</a>, by <a href=\"https://twitter.com/sw12\" class=\"external\" rel=\" noopener\">Sam Dutton</a>.</li>\n  <li><a href=\"/en-US/docs/Web/API/MediaDevices/getUserMedia\"><code>MediaDevices.getUserMedia</code></a></li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The MediaRecorder() constructor\n  creates a new MediaRecorder object that will record a specified\n  MediaStream.","popularity":0.0014,"modified":"2022-09-13T05:54:54.000Z","other_translations":[{"title":"MediaRecorder()","locale":"ja","native":"日本語"},{"title":"MediaRecorder.MediaRecorder()","locale":"ru","native":"Русский"},{"title":"MediaRecorder()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/web/api/mediarecorder/mediarecorder","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/mediarecorder/mediarecorder/index.md","last_commit_url":"https://github.com/mdn/content/commit/b7556b71e1fc3e89057671b372871e9f33d3f0b8","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/MediaRecorder","title":"MediaRecorder"},{"uri":"/en-US/docs/Web/API/MediaRecorder/MediaRecorder","title":"MediaRecorder()"}],"pageTitle":"MediaRecorder() - Web APIs | MDN","noIndexing":false}}