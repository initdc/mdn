{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"MediaRecorder","mdn_url":"/en-US/docs/Web/API/MediaRecorder","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\">Media Recorder API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/MediaRecorder\"><code>MediaRecorder</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaRecorder/MediaRecorder\"><code>MediaRecorder()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaRecorder/audioBitsPerSecond\"><code>audioBitsPerSecond</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/mimeType\"><code>mimeType</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/API/MediaRecorder/warning_event\"><code>onwarning</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/state\"><code>state</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/stream\"><code>stream</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/videoBitsPerSecond\"><code>videoBitsPerSecond</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaRecorder/isTypeSupported\"><code>isTypeSupported()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/pause\"><code>pause()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/requestData\"><code>requestData()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/resume\"><code>resume()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/start\"><code>start()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/stop\"><code>stop()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Events</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaRecorder/dataavailable_event\"><code>dataavailable</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/error_event\"><code>error</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/pause_event\"><code>pause</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/resume_event\"><code>resume</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/start_event\"><code>start</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/stop_event\"><code>stop</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Inheritance:</summary><ol><li><a href=\"/en-US/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Media Recorder API</summary><ol><li><a href=\"/en-US/docs/Web/API/BlobEvent\"><code>BlobEvent</code></a></li><li><a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>window.MediaRecorder</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong><code>MediaRecorder</code></strong> interface of the <a href=\"/en-US/docs/Web/API/MediaStream_Recording_API\">MediaStream Recording API</a> provides functionality to easily record media. It is created using the <a href=\"/en-US/docs/Web/API/MediaRecorder/MediaRecorder\" title=\"MediaRecorder()\"><code>MediaRecorder()</code></a> constructor.</p><svg viewBox=\"-1 -1 650 42\" preserveAspectRatio=\"xMinYMin meet\">\n  <a style=\"text-decoration: none;\" xlink:href=\"/en-US/docs/Web/API/EventTarget\">\n    <rect x=\"0\" y=\"0\" width=\"88\" height=\"25\" fill=\"#fff\" stroke=\"#D4DDE4\" stroke-width=\"2px\"></rect>\n    <text x=\"44\" y=\"16\" font-size=\"10px\" fill=\"#4D4E53\" text-anchor=\"middle\">\n      EventTarget\n    </text>\n  </a>\n  <line x1=\"88\" y1=\"14\" x2=\"118\" y2=\"14\" stroke=\"#D4DDE4\" \"=\"\"></line>\n  <polyline points=\"88,14 98,9 98,19 88,14\" stroke=\"#D4DDE4\" fill=\"#fff\"></polyline>\n  <a style=\"text-decoration: none;\" xlink:href=\"/en-US/docs/Web/API/MediaRecorder\" aria-current=\"page\">\n    <rect x=\"118\" y=\"0\" width=\"104\" height=\"25\" fill=\"#F4F7F8\" stroke=\"#D4DDE4\" stroke-width=\"2px\"></rect>\n    <text x=\"170\" y=\"16\" font-size=\"10px\" fill=\"#4D4E53\" text-anchor=\"middle\">\n      MediaRecorder\n    </text>\n  </a></svg>"}},{"type":"prose","value":{"id":"constructor","title":"Constructor","isH3":false,"content":"<dl>\n  <dt id=\"mediarecorder\"><a href=\"/en-US/docs/Web/API/MediaRecorder/MediaRecorder\" title=\"MediaRecorder()\"><code>MediaRecorder()</code></a></dt>\n  <dd>\n    <p>Creates a new <code>MediaRecorder</code> object, given a <a href=\"/en-US/docs/Web/API/MediaStream\"><code>MediaStream</code></a> to record. Options are available to do things like set the container's MIME type (such as <code>\"video/webm\"</code> or <code>\"video/mp4\"</code>) and the bit rates of the audio and video tracks or a single overall bit rate.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"properties","title":"Properties","isH3":false,"content":"<dl>\n  <dt id=\"mediarecorder.mimetype\"><a href=\"/en-US/docs/Web/API/MediaRecorder/mimeType\"><code>MediaRecorder.mimeType</code></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>Returns the MIME type that was selected as the recording container for the <code>MediaRecorder</code> object when it was created.</p>\n  </dd>\n  <dt id=\"mediarecorder.state\"><a href=\"/en-US/docs/Web/API/MediaRecorder/state\"><code>MediaRecorder.state</code></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>Returns the current state of the <code>MediaRecorder</code> object (<code>inactive</code>, <code>recording</code>, or <code>paused</code>.)</p>\n  </dd>\n  <dt id=\"mediarecorder.stream\"><a href=\"/en-US/docs/Web/API/MediaRecorder/stream\"><code>MediaRecorder.stream</code></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>Returns the stream that was passed into the constructor when the <code>MediaRecorder</code> was created.</p>\n  </dd>\n  <dt id=\"mediarecorder.videobitspersecond\"><a href=\"/en-US/docs/Web/API/MediaRecorder/videoBitsPerSecond\"><code>MediaRecorder.videoBitsPerSecond</code></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>Returns the video encoding bit rate in use. This may differ from the bit rate specified in the constructor (if it was provided).</p>\n  </dd>\n  <dt id=\"mediarecorder.audiobitspersecond\"><a href=\"/en-US/docs/Web/API/MediaRecorder/audioBitsPerSecond\"><code>MediaRecorder.audioBitsPerSecond</code></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>Returns the audio encoding bit rate in use. This may differ from the bit rate specified in the constructor (if it was provided).</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"methods","title":"Methods","isH3":false,"content":"<dl>\n  <dt id=\"mediarecorder.pause\"><a href=\"/en-US/docs/Web/API/MediaRecorder/pause\"><code>MediaRecorder.pause()</code></a></dt>\n  <dd>\n    <p>Pauses the recording of media.</p>\n  </dd>\n  <dt id=\"mediarecorder.requestdata\"><a href=\"/en-US/docs/Web/API/MediaRecorder/requestData\"><code>MediaRecorder.requestData()</code></a></dt>\n  <dd>\n    <p>Requests a <a href=\"/en-US/docs/Web/API/Blob\"><code>Blob</code></a> containing the saved data received thus far (or since the last time <code>requestData()</code> was called. After calling this method, recording continues, but in a new <code>Blob</code>.</p>\n  </dd>\n  <dt id=\"mediarecorder.resume\"><a href=\"/en-US/docs/Web/API/MediaRecorder/resume\"><code>MediaRecorder.resume()</code></a></dt>\n  <dd>\n    <p>Resumes recording of media after having been paused.</p>\n  </dd>\n  <dt id=\"mediarecorder.start\"><a href=\"/en-US/docs/Web/API/MediaRecorder/start\"><code>MediaRecorder.start()</code></a></dt>\n  <dd>\n    <p>Begins recording media; this method can optionally be passed a <code>timeslice</code> argument with a value in milliseconds. If this is specified, the media will be captured in separate chunks of that duration, rather than the default behavior of recording the media in a single large chunk.</p>\n  </dd>\n  <dt id=\"mediarecorder.stop\"><a href=\"/en-US/docs/Web/API/MediaRecorder/stop\"><code>MediaRecorder.stop()</code></a></dt>\n  <dd>\n    <p>Stops recording, at which point a <a href=\"/en-US/docs/Web/API/MediaRecorder/dataavailable_event\" title=\"dataavailable\"><code>dataavailable</code></a> event containing the final <code>Blob</code> of saved data is fired. No more recording occurs.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"static_methods","title":"Static methods","isH3":false,"content":"<dl>\n  <dt id=\"mediarecorder.istypesupported\"><a href=\"/en-US/docs/Web/API/MediaRecorder/isTypeSupported\"><code>MediaRecorder.isTypeSupported()</code></a></dt>\n  <dd>\n    <p>A static method which returns a <code>true</code> or <code>false</code> value indicating if the given MIME media type is supported by the current user agent.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"events","title":"Events","isH3":false,"content":"<p>Listen to these events using <code>addEventListener()</code> or by assigning an event listener to the <code>oneventname</code> property of this interface.</p>\n<dl>\n  <dt id=\"dataavailable\"><a href=\"/en-US/docs/Web/API/MediaRecorder/dataavailable_event\"><code>dataavailable</code></a></dt>\n  <dd>\n    <p>Fires periodically each time <code>timeslice</code> milliseconds of media have been recorded (or when the entire media has been recorded, if <code>timeslice</code> wasn't specified). The event, of type <a href=\"/en-US/docs/Web/API/BlobEvent\"><code>BlobEvent</code></a>, contains the recorded media in its <a href=\"/en-US/docs/Web/API/BlobEvent/data\" title=\"data\"><code>data</code></a> property.</p>\n  </dd>\n  <dt id=\"error\"><a href=\"/en-US/docs/Web/API/MediaRecorder/error_event\"><code>error</code></a></dt>\n  <dd>\n    <p>Fired when there are fatal errors that stop recording. The received event is based on the <a href=\"/en-US/docs/Web/API/MediaRecorderErrorEvent\"><code>MediaRecorderErrorEvent</code></a> interface, whose <a href=\"/en-US/docs/Web/API/MediaRecorderErrorEvent/error\" title=\"error\"><code>error</code></a> property contains a <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a> that describes the actual error that occurred.</p>\n  </dd>\n  <dt id=\"pause\"><a href=\"/en-US/docs/Web/API/MediaRecorder/pause_event\"><code>pause</code></a></dt>\n  <dd>\n    <p>Fired when media recording is paused.</p>\n  </dd>\n  <dt id=\"resume\"><a href=\"/en-US/docs/Web/API/MediaRecorder/resume_event\"><code>resume</code></a></dt>\n  <dd>\n    <p>Fired when media recording resumes after being paused.</p>\n  </dd>\n  <dt id=\"start\"><a href=\"/en-US/docs/Web/API/MediaRecorder/start_event\"><code>start</code></a></dt>\n  <dd>\n    <p>Fired when media recording starts.</p>\n  </dd>\n  <dt id=\"stop\"><a href=\"/en-US/docs/Web/API/MediaRecorder/stop_event\"><code>stop</code></a></dt>\n  <dd>\n    <p>Fired when media recording ends, either when the <a href=\"/en-US/docs/Web/API/MediaStream\"><code>MediaStream</code></a> ends, or after the <a href=\"/en-US/docs/Web/API/MediaRecorder/stop\"><code>MediaRecorder.stop()</code></a> method is called.</p>\n  </dd>\n  <dt id=\"warning\"><a href=\"/en-US/docs/Web/API/MediaRecorder/warning_event\"><code>warning</code></a> <svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg></dt>\n  <dd>\n    <p>Fired when media recording has a non-fatal error, or after the <a href=\"/en-US/docs/Web/API/MediaRecorder/warning_event\"><code>MediaRecorder.onwarning()</code></a> method is called.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"example","title":"Example","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'getUserMedia supported.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> constraints <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> chunks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span>constraints<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">stream</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">const</span> mediaRecorder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MediaRecorder</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">visualize</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    record<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      mediaRecorder<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mediaRecorder<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recorder started\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      record<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>background <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">;</span>\n      record<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">\"black\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    stop<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      mediaRecorder<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mediaRecorder<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recorder stopped\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      record<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>background <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n      record<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    mediaRecorder<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onstop</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data available after MediaRecorder.stop() called.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">const</span> clipName <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Enter a name for your sound clip'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">const</span> clipContainer <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'article'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> clipLabel <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> audio <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'audio'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> deleteButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      clipContainer<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clip'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      audio<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'controls'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      deleteButton<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">\"Delete\"</span><span class=\"token punctuation\">;</span>\n      clipLabel<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> clipName<span class=\"token punctuation\">;</span>\n\n      clipContainer<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>audio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      clipContainer<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>clipLabel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      clipContainer<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>deleteButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      soundClips<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>clipContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      audio<span class=\"token punctuation\">.</span>controls <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span>chunks<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'type'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'audio/ogg; codecs=opus'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      chunks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> audioURL <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      audio<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> audioURL<span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recorder stopped\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      deleteButton<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> evtTgt <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">;</span>\n        evtTgt<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>evtTgt<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    mediaRecorder<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">ondataavailable</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      chunks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">The following error occurred: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>err<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> This code sample is inspired by the Web Dictaphone demo. Some lines have been omitted for brevity; <a href=\"https://github.com/mdn/dom-examples/tree/main/media/web-dictaphone\" class=\"external\" rel=\" noopener\">refer to the source</a> for the complete code.</p>\n</div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/mediacapture-record/#mediarecorder-api","title":"MediaStream Recording"}],"query":"api.MediaRecorder"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.MediaRecorder","dataURL":"/en-US/docs/Web/API/MediaRecorder/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/MediaStream_Recording_API/Using_the_MediaStream_Recording_API\">Using the MediaRecorder API</a></li>\n  <li><a href=\"https://mdn.github.io/dom-examples/media/web-dictaphone/\" class=\"external\" rel=\" noopener\">Web Dictaphone</a>: MediaRecorder + getUserMedia + Web Audio API visualization demo, by <a href=\"https://twitter.com/chrisdavidmills\" class=\"external\" rel=\" noopener\">Chris Mills</a> (<a href=\"https://github.com/mdn/dom-examples/tree/main/media/web-dictaphone\" class=\"external\" rel=\" noopener\">source on GitHub</a>.)</li>\n  <li><a href=\"/en-US/docs/Web/API/MediaStream_Recording_API/Recording_a_media_element\">Recording a media element</a></li>\n  <li><a href=\"https://simpl.info/mediarecorder/\" class=\"external\" rel=\" noopener\">simpl.info MediaStream Recording demo</a>, by <a href=\"https://twitter.com/sw12\" class=\"external\" rel=\" noopener\">Sam Dutton</a>.</li>\n  <li><a href=\"/en-US/docs/Web/API/MediaDevices/getUserMedia\"><code>MediaDevices.getUserMedia</code></a></li>\n  <li><a href=\"https://github.com/chrisjohndigital/OpenLang\" class=\"external\" rel=\" noopener\">OpenLang</a>: HTML video language lab web application using MediaDevices and the MediaStream Recording API for video recording (<a href=\"https://github.com/chrisjohndigital/OpenLang\" class=\"external\" rel=\" noopener\">source on GitHub</a>)</li>\n</ul>"}}],"toc":[{"text":"Constructor","id":"constructor"},{"text":"Properties","id":"properties"},{"text":"Methods","id":"methods"},{"text":"Static methods","id":"static_methods"},{"text":"Events","id":"events"},{"text":"Example","id":"example"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The MediaRecorder interface of the MediaStream Recording API provides functionality to easily record media. It is created using the MediaRecorder() constructor.","popularity":0.0043,"modified":"2022-09-09T05:17:24.000Z","other_translations":[{"title":"MediaRecorder","locale":"ja","native":"日本語"},{"title":"MediaRecorder","locale":"ru","native":"Русский"},{"title":"MediaRecorder","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/web/api/mediarecorder","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/mediarecorder/index.md","last_commit_url":"https://github.com/mdn/content/commit/4b4638246aad5d39b9a2e5c572b179b4c39c0a84","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/MediaRecorder","title":"MediaRecorder"}],"pageTitle":"MediaRecorder - Web APIs | MDN","noIndexing":false}}