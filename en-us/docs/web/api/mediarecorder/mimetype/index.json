{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"MediaRecorder.mimeType","mdn_url":"/en-US/docs/Web/API/MediaRecorder/mimeType","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/MediaStream_Recording_API\">MediaStream Recording API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/MediaRecorder\"><code>MediaRecorder</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaRecorder/MediaRecorder\"><code>MediaRecorder()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaRecorder/audioBitsPerSecond\"><code>audioBitsPerSecond</code></a></li><li><em><code>mimeType</code></em></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/API/MediaRecorder/warning_event\"><code>onwarning</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/state\"><code>state</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/stream\"><code>stream</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/videoBitsPerSecond\"><code>videoBitsPerSecond</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaRecorder/isTypeSupported\"><code>isTypeSupported()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/pause\"><code>pause()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/requestData\"><code>requestData()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/resume\"><code>resume()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/start\"><code>start()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/stop\"><code>stop()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Events</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaRecorder/dataavailable_event\"><code>dataavailable</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/error_event\"><code>error</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/pause_event\"><code>pause</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/resume_event\"><code>resume</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/start_event\"><code>start</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/stop_event\"><code>stop</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Inheritance:</summary><ol><li><a href=\"/en-US/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for MediaStream Recording</summary><ol><li><a href=\"/en-US/docs/Web/API/BlobEvent\"><code>BlobEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorderErrorEvent\"><code>MediaRecorderErrorEvent</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>\n  The <strong><code>mimeType</code></strong> read-only\n  property returns the <a href=\"/en-US/docs/Glossary/mime\">MIME</a> media type that was specified when creating\n  the <a href=\"/en-US/docs/Web/API/MediaRecorder\"><code>MediaRecorder</code></a> object, or, if none was specified, which was chosen\n  by the browser. This is the file format of the file that would result from\n  writing all of the recorded data to disk.\n</p>\n<p>\n  Keep in mind that not all codecs are supported by a given container; if you write media\n  using a codec that is not supported by a given media container, the resulting file may\n  not work reliably if at all when you try to play it back. See our <a href=\"/en-US/docs/Web/Media/Formats\">media type and format guide</a> for information\n  about container and codec support across browsers.\n</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p>\n    <strong>Note:</strong> The term \"MIME type\" is officially considered to be\n    historical; these strings are now officially known as <strong>media types</strong>.\n    MDN Web Docs content uses the terms interchangeably.\n  </p>\n</div>"}},{"type":"prose","value":{"id":"value","title":"Value","isH3":false,"content":"<p>\n  The MIME media type which describes the format of the recorded media, as a\n  string. This string <em>may</em> include the <a href=\"/en-US/docs/Web/Media/Formats/codecs_parameter\"><code>codecs</code> parameter,</a> giving details about the codecs and the codec configurations used by\n  the media recorder.\n</p>\n<p>\n  The media type strings are standardized by the Internet Assigned Numbers Authority\n  (IANA). For their official list of defined media type strings, see the article <a href=\"https://www.iana.org/assignments/media-types/media-types.xhtml\" class=\"external\" rel=\" noopener\">Media Types</a>\n  on the IANA site. See also <a href=\"/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">media types</a> to learn more\n  about media types and how they're used in web content and by web browsers.\n</p>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'getUserMedia supported.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> constraints <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> chunks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span>constraints<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">stream</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">audioBitsPerSecond</span><span class=\"token operator\">:</span> <span class=\"token number\">128000</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">videoBitsPerSecond</span><span class=\"token operator\">:</span> <span class=\"token number\">2500000</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">mimeType</span><span class=\"token operator\">:</span> <span class=\"token string\">'video/mp4'</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">const</span> mediaRecorder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MediaRecorder</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      m <span class=\"token operator\">=</span> mediaRecorder<span class=\"token punctuation\">;</span>\n\n      m<span class=\"token punctuation\">.</span>mimeType<span class=\"token punctuation\">;</span> <span class=\"token comment\">// would return 'video/mp4'</span>\n      <span class=\"token comment\">// â€¦</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>\n  Changing line 14 to the following causes <code>MediaRecorder</code> to try to use AVC\n  Constrained Baseline Profile Level 4 for video and AAC-LC (Low Complexity) for audio,\n  which is good for mobile and other possible resource-constrained situations.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token literal-property property\">mimeType</span><span class=\"token operator\">:</span> <span class=\"token string\">'video/mp4; codecs=\"avc1.424028, mp4a.40.2\"'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>\n  Assuming this configuration is acceptable to the user agent, the value returned later\n  by <code>m.mimeType</code> would then be\n  <code>video/mp4; codecs=\"avc1.424028, mp4a.40.2\"</code>.\n</p>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/mediacapture-record/#dom-mediarecorder-mimetype","title":"MediaStream Recording"}],"query":"api.MediaRecorder.mimeType"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.MediaRecorder.mimeType","dataURL":"/en-US/docs/Web/API/MediaRecorder/mimeType/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/MediaStream_Recording_API/Using_the_MediaStream_Recording_API\">Using the MediaRecorder API</a></li>\n  <li><a href=\"/en-US/docs/Web/Media/Formats/codecs_parameter\">The \"codecs\" parameter in common media types</a></li>\n  <li>\n    <a href=\"https://mdn.github.io/dom-examples/media/web-dictaphone/\" class=\"external\" rel=\" noopener\">Web Dictaphone</a>: MediaRecorder +\n    getUserMedia + Web Audio API visualization demo, by <a href=\"https://twitter.com/chrisdavidmills\" class=\"external\" rel=\" noopener\">Chris Mills</a> (<a href=\"https://github.com/mdn/dom-examples/tree/main/media/web-dictaphone\" class=\"external\" rel=\" noopener\">source on GitHub</a>.)\n  </li>\n  <li><a href=\"https://simpl.info/mediarecorder/\" class=\"external\" rel=\" noopener\">simpl.info MediaStream Recording demo</a>, by <a href=\"https://twitter.com/sw12\" class=\"external\" rel=\" noopener\">Sam Dutton</a>.</li>\n  <li><a href=\"/en-US/docs/Web/API/MediaDevices/getUserMedia\"><code>MediaDevices.getUserMedia()</code></a></li>\n</ul>"}}],"toc":[{"text":"Value","id":"value"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The mimeType read-only\n  property returns the MIME media type that was specified when creating\n  the MediaRecorder object, or, if none was specified, which was chosen\n  by the browser. This is the file format of the file that would result from\n  writing all of the recorded data to disk.","popularity":0.0012,"modified":"2022-08-27T16:31:08.000Z","other_translations":[{"title":"MediaRecorder.mimeType","locale":"ja","native":"æ—¥æœ¬èªž"}],"source":{"folder":"en-us/web/api/mediarecorder/mimetype","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/mediarecorder/mimetype/index.md","last_commit_url":"https://github.com/mdn/content/commit/c7aeb96dac3e0ac2864cffe45c02d214ae1a5219","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/MediaRecorder","title":"MediaRecorder"},{"uri":"/en-US/docs/Web/API/MediaRecorder/mimeType","title":"MediaRecorder.mimeType"}],"pageTitle":"MediaRecorder.mimeType - Web APIs | MDN","noIndexing":false}}