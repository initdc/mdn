{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"RTCRtpSender.replaceTrack()","mdn_url":"/en-US/docs/Web/API/RTCRtpSender/replaceTrack","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/WebRTC_API\">WebRTC API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/RTCRtpSender\"><code>RTCRtpSender</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/API/RTCRtpSender/dtmf\"><code>dtmf</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCRtpSender/track\"><code>track</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCRtpSender/transport\"><code>transport</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/RTCRtpSender/getCapabilities\"><code>getCapabilities() static function</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCRtpSender/getParameters\"><code>getParameters()</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCRtpSender/getStats\"><code>getStats()</code></a></li><li><em><code>replaceTrack()</code></em></li><li><a href=\"/en-US/docs/Web/API/RTCRtpSender/setParameters\"><code>setParameters()</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCRtpSender/setStreams\"><code>setStreams()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for WebRTC</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaDevices/getUserMedia\"><code>MediaDevices.getUserMedia()</code></a></li><li><a href=\"/en-US/docs/Web/API/Navigator/mediaDevices\"><code>Navigator.mediaDevices</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCCertificate\"><code>RTCCertificate</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCDTMFSender\"><code>RTCDTMFSender</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCDTMFToneChangeEvent\"><code>RTCDTMFToneChangeEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCDataChannelEvent\"><code>RTCDataChannelEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCDtlsTransport\"><code>RTCDtlsTransport</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCErrorEvent\"><code>RTCErrorEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCIceCandidate\"><code>RTCIceCandidate</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCIceTransport\"><code>RTCIceTransport</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnectionIceErrorEvent\"><code>RTCPeerConnectionIceErrorEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnectionIceEvent\"><code>RTCPeerConnectionIceEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCRtpReceiver\"><code>RTCRtpReceiver</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCRtpTransceiver\"><code>RTCRtpTransceiver</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCSctpTransport\"><code>RTCSctpTransport</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCSessionDescription\"><code>RTCSessionDescription</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCStatsReport\"><code>RTCStatsReport</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCTrackEvent\"><code>RTCTrackEvent</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>\n  The <a href=\"/en-US/docs/Web/API/RTCRtpSender\"><code>RTCRtpSender</code></a> method\n  <strong><code>replaceTrack()</code></strong> replaces the track currently being used\n  as the sender's source with a new <a href=\"/en-US/docs/Web/API/MediaStreamTrack\"><code>MediaStreamTrack</code></a>.\n</p>\n<p>\n  The new\n  track must be of the same media kind (audio, video, etc.) and switching the track should\n  not require negotiation.\n</p>\n<p>\n  Among the use cases for <code>replaceTrack()</code> is the common need to switch\n  between the rear- and front-facing cameras on a phone. With <code>replaceTrack()</code>,\n  you can have a track object for each camera and switch between the two as needed. See\n  the example <a href=\"#switching_cameras\">Switching cameras</a> below.\n</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js-nolint notranslate\">replaceTrack(newTrack)\n</pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"newtrack\"><code>newTrack</code> <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>\n      A <a href=\"/en-US/docs/Web/API/MediaStreamTrack\"><code>MediaStreamTrack</code></a> specifying the track with which to replace the\n      <code>RTCRtpSender</code>'s current source track. The new track's\n      <a href=\"/en-US/docs/Web/API/MediaStreamTrack/kind\" title=\"kind\"><code>kind</code></a> must be the same as the current track's,\n      or the replace track request will fail.\n    </p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>\n  A <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> which is fulfilled once the track has been successfully\n  replaced. The promise is rejected if the track cannot be replaced for any reason; this\n  is commonly because the change would require renegotiation of the codec, which is not\n  allowed (see <a href=\"#things_that_require_negotiation\">Things that require negotiation</a>).\n</p>\n<p>\n  If <code>newTrack</code> was omitted or was <code>null</code>,\n  <code>replaceTrack()</code> stops the sender. No negotiation is required in this case.\n</p>\n<p>\n  When the promise is fulfilled, the fulfillment handler receives a value of\n  <code>undefined</code>.\n</p>"}},{"type":"prose","value":{"id":"exceptions","title":"Exceptions","isH3":true,"content":"<p>\n  If the returned promise is rejected, one of the following exceptions is provided to the\n  rejection handler:\n</p>\n<dl>\n  <dt id=\"invalidmodificationerror\"><code>InvalidModificationError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>\n      Returned if replacing the <code>RTCRtpSender</code>'s current track with the new one\n      would require negotiation.\n    </p>\n  </dd>\n  <dt id=\"invalidstateerror\"><code>InvalidStateError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>Returned if the track on which this method was called is stopped rather than running.</p>\n  </dd>\n  <dt id=\"typeerror\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a></dt>\n  <dd>\n    <p>Returned if the new track's <code>kind</code> doesn't match the original track.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"usage_notes","title":"Usage notes","isH3":false,"content":""}},{"type":"prose","value":{"id":"things_that_trigger_negotiation","title":"Things that trigger negotiation","isH3":true,"content":"<p>\n  Not all track replacements require renegotiation. In fact, even changes that seem huge\n  can be done without requiring negotiation. Here are the changes that can trigger\n  negotiation:\n</p>\n<ul>\n  <li>\n    The new track has a resolution which is outside the bounds of the current track;\n    that is, the new track is either wider or taller than the current one.\n  </li>\n  <li>\n    The new track's frame rate is high enough to cause the codec's block rate to be\n    exceeded.\n  </li>\n  <li>\n    The new track is a video track and its raw or pre-encoded state differs from that of\n    the original track.\n  </li>\n  <li>\n    The new track is an audio track with a different number of channels from the\n    original.\n  </li>\n  <li>\n    Media sources that have built-in encoders — such as hardware encoders — may not be\n    able to provide the negotiated codec. Software sources may not implement the\n    negotiated codec.\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"switching_video_cameras","title":"Switching video cameras","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// example to change video camera, suppose selected value saved into window.selectedCamera</span>\n\nnavigator<span class=\"token punctuation\">.</span>mediaDevices\n  <span class=\"token punctuation\">.</span><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">deviceId</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">exact</span><span class=\"token operator\">:</span> window<span class=\"token punctuation\">.</span>selectedCamera\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">stream</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>videoTrack<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">getVideoTracks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    PCs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pc</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> sender <span class=\"token operator\">=</span> pc<span class=\"token punctuation\">.</span><span class=\"token function\">getSenders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> s<span class=\"token punctuation\">.</span>track<span class=\"token punctuation\">.</span>kind <span class=\"token operator\">===</span> videoTrack<span class=\"token punctuation\">.</span>kind<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Found sender:'</span><span class=\"token punctuation\">,</span> sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      sender<span class=\"token punctuation\">.</span><span class=\"token function\">replaceTrack</span><span class=\"token punctuation\">(</span>videoTrack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Error happened: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>err<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/webrtc-pc/#dom-rtcrtpsender-replacetrack","title":"WebRTC 1.0: Real-Time Communication Between Browsers"}],"query":"api.RTCRtpSender.replaceTrack"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.RTCRtpSender.replaceTrack","dataURL":"/en-US/docs/Web/API/RTCRtpSender/replaceTrack/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/WebRTC_API\">WebRTC API</a></li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Usage notes","id":"usage_notes"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The RTCRtpSender method\n  replaceTrack() replaces the track currently being used\n  as the sender's source with a new MediaStreamTrack.","popularity":0.0005,"modified":"2022-09-21T20:26:22.000Z","source":{"folder":"en-us/web/api/rtcrtpsender/replacetrack","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/rtcrtpsender/replacetrack/index.md","last_commit_url":"https://github.com/mdn/content/commit/8d27f508bd2c6270918fb3b047d73b57e8b949d3","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/RTCRtpSender","title":"RTCRtpSender"},{"uri":"/en-US/docs/Web/API/RTCRtpSender/replaceTrack","title":"RTCRtpSender.replaceTrack()"}],"pageTitle":"RTCRtpSender.replaceTrack() - Web APIs | MDN","noIndexing":false}}