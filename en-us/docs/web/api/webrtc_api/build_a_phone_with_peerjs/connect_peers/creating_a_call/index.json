{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Creating a Call","mdn_url":"/en-US/docs/Web/API/WebRTC_API/Build_a_phone_with_peerjs/Connect_peers/Creating_a_call","locale":"en-US","native":"English (US)","sidebarHTML":"\n <ol>\n  <li><a href=\"/en-US/docs/Web/API/WebRTC_API\"><strong>WebRTC API</strong></a></li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>WebRTC Guides</summary>\n      <ol>\n        <li><a href=\"/en-US/docs/Web/API/WebRTC_API/Architecture\">WebRTC Architecture</a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebRTC_API/WebRTC_Basics\">WebRTC Basics</a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebRTC_API/Protocols\">WebRTC Protocols</a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebRTC_API/Connectivity\">Dealing with connectivity</a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebRTC_API/Overview\">Overview of WebRTC interfaces</a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebRTC_API/Session_lifetime\">Lifetime of a WebRTC Session</a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebRTC_API/Using_data_channels\">Using data channels</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>WebRTC Tutorials</summary>\n      <ol>\n        <li><a href=\"/en-US/docs/Web/API/WebRTC_API/adapter.js\">Interoperability with adapter.js</a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebRTC_API/Taking_still_photos\">Taking still photos from the camera</a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebRTC_API/Simple_RTCDataChannel_sample\">A simple data channel example</a></li>\n        <li><a href=\"/en-US/docs/Web/API/WebRTC_API/Build_a_phone_with_peerjs\">Building an internet-connected phone with Peer.js</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Interfaces</summary>\n      <ol>\n        <li><a href=\"/en-US/docs/Web/API/MediaDevices\"><code>MediaDevices</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/MediaStream\"><code>MediaStream</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/MediaStreamEvent\"><code>MediaStreamEvent</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/MediaStreamTrack\"><code>MediaStreamTrack</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/MessageEvent\"><code>MessageEvent</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/RTCIceCandidate\"><code>RTCIceCandidate</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/RTCPeerConnectionIceEvent\"><code>RTCPeerConnectionIceEvent</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/RTCSessionDescription\"><code>RTCSessionDescription</code></a></li>\n        <li><a href=\"/en-US/docs/Web/API/RTCStatsReport\"><code>RTCStatsReport</code></a></li>\n      </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/en-US/docs/MDN\">Documentation:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Contribute</summary>\n      <ol>\n        <li><a href=\"/en-US/docs/MDN\">The MDN project</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/en-US/docs/Web/API/WebRTC_API/Build_a_phone_with_peerjs/Connect_peers/Create_a_peer_connection\"> Previous </a></li>\n    \n    <li><a class=\"button minimal\" href=\"/en-US/docs/Web/API/WebRTC_API/Build_a_phone_with_peerjs/Connect_peers/Answer_a_call\"> Next  </a></li>\n</ul>\n<p>Exciting times â€” now you're going to give your users the ability to create calls.</p>\n<ol>\n  <li>First of all, get a reference to the \"Call\" button that's defined in the HTML, by adding the following to the bottom of <code>script.js</code>:\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> callBtn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.call-btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n  <li>When a caller clicks \"Call\" you'll want to ask them for the peer ID of the peer they want to call (which we will store in the <code>code</code> variable in <code>getStreamCode()</code>) and then you'll want to create a connection with that code. Add the following below your previous code:\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>callBtn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getStreamCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">connectPeers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> call <span class=\"token operator\">=</span> <span class=\"token function\">peer</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">.</span>localStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// A</span>\n\n  call<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'stream'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">stream</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// B</span>\n    window<span class=\"token punctuation\">.</span>remoteAudio<span class=\"token punctuation\">.</span>srcObject <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">;</span> <span class=\"token comment\">// C</span>\n    window<span class=\"token punctuation\">.</span>remoteAudio<span class=\"token punctuation\">.</span>autoplay <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// D</span>\n    window<span class=\"token punctuation\">.</span>peerStream <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">;</span> <span class=\"token comment\">//E</span>\n    <span class=\"token function\">showConnectedContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//F    });</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>Let's walk through this code:\n    <ul>\n      <li><code>const call = peer.call(code, window.localStream)</code>: This will create a call with the <code>code</code> and <code>window.localStream</code> we've previously assigned. Note that the <code>localStream</code> will be the user's <code>localStream</code>. So for caller A it'll be their stream &amp; for B, their own stream.</li>\n      <li><code>call.on('stream', (stream) =&gt; {</code> : peerJS gives us a <code>stream</code> event which you can use on the <code>call</code> that you've created. When a call starts streaming, you need to ensure that the remote stream coming from the call is assigned to the correct HTML elements and window, this is where you'll do that.</li>\n      <li>The anonymous function takes a <code>MediaStream</code> object as an argument, which you then have to set to your window's HTML like you've done before. Here we get your remote <code>&lt;audio&gt;</code> element and assign the stream passed to the function to the <code>srcObject</code> property.</li>\n      <li>Ensure the element's <code>autoplay</code> attribute is also set to <code>true</code>.</li>\n      <li>Ensure that the window's <code>peerStream</code> is set to the stream passed to the function.</li>\n      <li>Finally you want to show the correct content, so call the <code>showConnectedContent()</code> function you created earlier.</li>\n    </ul>\n  </li>\n  <li>\n    To test this out, open <code>localhost:8000</code> in two browser windows and click Call inside one of them. You should see this:\n    \n    <img src=\"/en-US/docs/Web/API/WebRTC_API/Build_a_phone_with_peerjs/Connect_peers/Creating_a_call/1pubiml_pj-jjavpjjeouow.png\" alt=\"Two screens side by side both A cream background with the words 'phone a friend' in bold, dark green font as the heading. The first screen has 'Your device ID is: 3b77' and the second 'Your device ID is: 2doa', is immediately below the title and 'please use headphones!' below that. Following on, a big dark green button with 'Call' written in the same cream color of the background. The second screen has a browser dialogue that asks for a peer id.\" width=\"1400\" height=\"875\" loading=\"lazy\">\n    If you submit the other peer's ID, the call will be connected!\n  </li>\n</ol>\n<p>This is all working so far, but we need to give the other browser the chance to answer or decline the call We'll do that next.</p><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/en-US/docs/Web/API/WebRTC_API/Build_a_phone_with_peerjs/Connect_peers/Create_a_peer_connection\"> Previous </a></li>\n    \n    <li><a class=\"button minimal\" href=\"/en-US/docs/Web/API/WebRTC_API/Build_a_phone_with_peerjs/Connect_peers/Answer_a_call\"> Next  </a></li>\n</ul>"}}],"toc":[],"summary":"Exciting times â€” now you're going to give your users the ability to create calls.","popularity":0.0004,"modified":"2022-09-11T19:35:30.000Z","source":{"folder":"en-us/web/api/webrtc_api/build_a_phone_with_peerjs/connect_peers/creating_a_call","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/webrtc_api/build_a_phone_with_peerjs/connect_peers/creating_a_call/index.md","last_commit_url":"https://github.com/mdn/content/commit/7455f0c585ea29fa85ea09e11716b70f76241f5b","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/WebRTC_API","title":"WebRTC API"},{"uri":"/en-US/docs/Web/API/WebRTC_API/Build_a_phone_with_peerjs","title":"Building an Internet-Connected Phone with PeerJS"},{"uri":"/en-US/docs/Web/API/WebRTC_API/Build_a_phone_with_peerjs/Connect_peers","title":"Connecting the peers"},{"uri":"/en-US/docs/Web/API/WebRTC_API/Build_a_phone_with_peerjs/Connect_peers/Creating_a_call","title":"Creating a Call"}],"pageTitle":"Creating a Call - Web APIs | MDN","noIndexing":false}}