{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"XMLHttpRequest.getAllResponseHeaders()","mdn_url":"/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/API/XMLHttpRequest/XMLHttpRequest\"><code>XMLHttpRequest()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/en-US/docs/Web/API/XMLHttpRequest/channel\"><code>channel</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/en-US/docs/Web/API/XMLHttpRequest/mozAnon\"><code>mozAnon</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/en-US/docs/Web/API/XMLHttpRequest/mozBackgroundRequest\"><code>mozBackgroundRequest</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/en-US/docs/Web/API/XMLHttpRequest/mozSystem\"><code>mozSystem</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/en-US/docs/Web/API/XMLHttpRequest/msCaching\"><code>msCaching</code></a></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequest/readyState\"><code>readyState</code></a></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequest/response\"><code>response</code></a></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequest/responseText\"><code>responseText</code></a></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequest/responseType\"><code>responseType</code></a></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequest/responseURL\"><code>responseURL</code></a></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequest/responseXML\"><code>responseXML</code></a></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequest/status\"><code>status</code></a></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequest/statusText\"><code>statusText</code></a></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequest/timeout\"><code>timeout</code></a></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequest/upload\"><code>upload</code></a></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequest/withCredentials\"><code>withCredentials</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/XMLHttpRequest/abort\"><code>abort()</code></a></li><li><em><code>getAllResponseHeaders()</code></em></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequest/getResponseHeader\"><code>getResponseHeader()</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/en-US/docs/Web/API/XMLHttpRequest/msCachingEnabled\"><code>msCachingEnabled()</code></a></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequest/open\"><code>open()</code></a></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequest/overrideMimeType\"><code>overrideMimeType()</code></a></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequest/send\"><code>send()</code></a></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequest/setRequestHeader\"><code>setRequestHeader()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Events</summary><ol><li><a href=\"/en-US/docs/Web/API/XMLHttpRequest/abort_event\"><code>abort</code></a></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequest/error_event\"><code>error</code></a></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequest/load_event\"><code>load</code></a></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequest/loadend_event\"><code>loadend</code></a></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequest/loadstart_event\"><code>loadstart</code></a></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequest/progress_event\"><code>progress</code></a></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequest/readystatechange_event\"><code>readystatechange</code></a></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequest/timeout_event\"><code>timeout</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Inheritance:</summary><ol><li><a href=\"/en-US/docs/Web/API/XMLHttpRequestEventTarget\"><code>XMLHttpRequestEventTarget</code></a></li><li><a href=\"/en-US/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for XMLHttpRequest</summary><ol><li><a href=\"/en-US/docs/Web/API/FormData\"><code>FormData</code></a></li><li><a href=\"/en-US/docs/Web/API/ProgressEvent\"><code>ProgressEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequestEventTarget\"><code>XMLHttpRequestEventTarget</code></a></li><li><a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>XMLHttpRequestUpload</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>\n  The <a href=\"/en-US/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a> method\n  <strong><code>getAllResponseHeaders()</code></strong> returns all the response\n  headers, separated by <a href=\"/en-US/docs/Glossary/CRLF\">CRLF</a>, as a string, or returns <code>null</code>\n  if no response has been received.\n</p>\n<p>\n  If a network error happened, an empty string\n  is returned.\n</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p>\n    <strong>Note:</strong> For multipart requests, this returns the headers from the\n    <em>current</em> part of the request, not from the original channel.\n  </p>\n</div>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js-nolint notranslate\">getAllResponseHeaders()\n</pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<p>None.</p>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>\n  A string representing all of the response's headers (except those\n  whose field name is <code>Set-Cookie</code>) separated by <a href=\"/en-US/docs/Glossary/CRLF\">CRLF</a>,\n  or <code>null</code> if no response has been received. If a network error\n  happened, an empty string is returned.\n</p>\n<p>An example of what a raw header string looks like:</p>\n<div class=\"code-example\"><pre class=\"brush: http notranslate\"><code><span class=\"token header\"><span class=\"token header-name keyword\">date</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Fri, 08 Dec 2017 21:04:30 GMT\\r\\n</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">content-encoding</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">gzip\\r\\n</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">x-content-type-options</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">nosniff\\r\\n</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">server</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">meinheld/0.6.1\\r\\n</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">x-frame-options</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">DENY\\r\\n</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">content-type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">text/html; charset=utf-8\\r\\n</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">connection</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">keep-alive\\r\\n</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">strict-transport-security</span><span class=\"token punctuation\">:</span> <span class=\"token header-value hsts languages-hsts\">max-age=63072000\\r\\n</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">vary</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Cookie, Accept-Encoding\\r\\n</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">content-length</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">6502\\r\\n</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">x-xss-protection</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">1; mode=block\\r\\n</span></span>\n</code></pre></div>\n<p>\n  Each line is terminated by both carriage return and line feed characters\n  (<code>\\r\\n</code>). These are essentially delimiters separating each of the headers.\n</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p>\n    <strong>Note:</strong> In modern browsers, the header names are returned in all lower\n    case, as per the latest spec.\n  </p>\n</div>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<p>\n  This example examines the headers in the request's <a href=\"/en-US/docs/Web/API/XMLHttpRequest/readystatechange_event\" title=\"readystatechange\"><code>readystatechange</code></a> event. The code shows how to obtain\n  the raw header string, as well as how to convert it into an array of individual headers\n  and then how to take that array and create a mapping of header names to their values.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrequest<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"foo.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrequest<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrequest<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token constant\">HEADERS_RECEIVED</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// Get the raw header string</span>\n    <span class=\"token keyword\">const</span> headers <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getAllResponseHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Convert the header string into an array</span>\n    <span class=\"token comment\">// of individual headers</span>\n    <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> headers<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\r\\n]+</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Create a map of header names to values</span>\n    <span class=\"token keyword\">const</span> headerMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">line</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> parts <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">': '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> header <span class=\"token operator\">=</span> parts<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> parts<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">': '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      headerMap<span class=\"token punctuation\">[</span>header<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Once this is done, you can, for example:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> contentType <span class=\"token operator\">=</span> headerMap<span class=\"token punctuation\">[</span><span class=\"token string\">\"content-type\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>\n  This obtains the value of the <a href=\"/en-US/docs/Web/HTTP/Headers/Content-Type\"><code>Content-Type</code></a> header into the variable\n  <code>contentType</code>.\n</p>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://xhr.spec.whatwg.org/#the-getallresponseheaders()-method","title":"XMLHttpRequest Standard"}],"query":"api.XMLHttpRequest.getAllResponseHeaders"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.XMLHttpRequest.getAllResponseHeaders","dataURL":"/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\">Using XMLHttpRequest</a></li>\n  <li>Setting request headers: <a href=\"/en-US/docs/Web/API/XMLHttpRequest/setRequestHeader\" title=\"setRequestHeader()\"><code>setRequestHeader()</code></a></li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The XMLHttpRequest method\n  getAllResponseHeaders() returns all the response\n  headers, separated by CRLF, as a string, or returns null\n  if no response has been received.","popularity":0.001,"modified":"2022-09-13T07:01:32.000Z","other_translations":[{"title":"XMLHttpRequest.getAllResponseHeaders()","locale":"ja","native":"日本語"},{"title":"XMLHttpRequest.getAllResponseHeaders()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/web/api/xmlhttprequest/getallresponseheaders","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/xmlhttprequest/getallresponseheaders/index.md","last_commit_url":"https://github.com/mdn/content/commit/87a9f73c410c9b9e91300695c8aa4931367243fb","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/XMLHttpRequest","title":"XMLHttpRequest"},{"uri":"/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders","title":"XMLHttpRequest.getAllResponseHeaders()"}],"pageTitle":"XMLHttpRequest.getAllResponseHeaders() - Web APIs | MDN","noIndexing":false}}