{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"AudioBuffer","mdn_url":"/en-US/docs/Web/API/AudioBuffer","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Web_Audio_API\">Web Audio API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/AudioBuffer\"><code>AudioBuffer</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/API/AudioBuffer/AudioBuffer\"><code>AudioBuffer()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/API/AudioBuffer/duration\"><code>duration</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioBuffer/length\"><code>length</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioBuffer/numberOfChannels\"><code>numberOfChannels</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioBuffer/sampleRate\"><code>sampleRate</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/AudioBuffer/copyFromChannel\"><code>copyFromChannel()</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioBuffer/copyToChannel\"><code>copyToChannel()</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioBuffer/getChannelData\"><code>getChannelData()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Web Audio API</summary><ol><li><a href=\"/en-US/docs/Web/API/AnalyserNode\"><code>AnalyserNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioBufferSourceNode\"><code>AudioBufferSourceNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioContext\"><code>AudioContext</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioDestinationNode\"><code>AudioDestinationNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioListener\"><code>AudioListener</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioNode\"><code>AudioNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioParam\"><code>AudioParam</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioProcessingEvent\"><code>AudioProcessingEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioScheduledSourceNode\"><code>AudioScheduledSourceNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioWorklet\"><code>AudioWorklet</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioWorkletGlobalScope\"><code>AudioWorkletGlobalScope</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a></li><li><a href=\"/en-US/docs/Web/API/AudioWorkletProcessor\"><code>AudioWorkletProcessor</code></a></li><li><a href=\"/en-US/docs/Web/API/BaseAudioContext\"><code>BaseAudioContext</code></a></li><li><a href=\"/en-US/docs/Web/API/BiquadFilterNode\"><code>BiquadFilterNode</code></a></li><li><a href=\"/en-US/docs/Web/API/ChannelMergerNode\"><code>ChannelMergerNode</code></a></li><li><a href=\"/en-US/docs/Web/API/ChannelSplitterNode\"><code>ChannelSplitterNode</code></a></li><li><a href=\"/en-US/docs/Web/API/ConstantSourceNode\"><code>ConstantSourceNode</code></a></li><li><a href=\"/en-US/docs/Web/API/ConvolverNode\"><code>ConvolverNode</code></a></li><li><a href=\"/en-US/docs/Web/API/DelayNode\"><code>DelayNode</code></a></li><li><a href=\"/en-US/docs/Web/API/DynamicsCompressorNode\"><code>DynamicsCompressorNode</code></a></li><li><a href=\"/en-US/docs/Web/API/GainNode\"><code>GainNode</code></a></li><li><a href=\"/en-US/docs/Web/API/IIRFilterNode\"><code>IIRFilterNode</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaElementAudioSourceNode\"><code>MediaElementAudioSourceNode</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaStreamAudioDestinationNode\"><code>MediaStreamAudioDestinationNode</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaStreamAudioSourceNode\"><code>MediaStreamAudioSourceNode</code></a></li><li><a href=\"/en-US/docs/Web/API/OfflineAudioCompletionEvent\"><code>OfflineAudioCompletionEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/OfflineAudioContext\"><code>OfflineAudioContext</code></a></li><li><a href=\"/en-US/docs/Web/API/OscillatorNode\"><code>OscillatorNode</code></a></li><li><a href=\"/en-US/docs/Web/API/PannerNode\"><code>PannerNode</code></a></li><li><a href=\"/en-US/docs/Web/API/PeriodicWave\"><code>PeriodicWave</code></a></li><li><a href=\"/en-US/docs/Web/API/StereoPannerNode\"><code>StereoPannerNode</code></a></li><li><a href=\"/en-US/docs/Web/API/WaveShaperNode\"><code>WaveShaperNode</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong><code>AudioBuffer</code></strong> interface represents a short audio asset residing in memory, created from an audio file using the <a href=\"/en-US/docs/Web/API/BaseAudioContext/decodeAudioData\" title=\"AudioContext.decodeAudioData()\"><code>AudioContext.decodeAudioData()</code></a> method, or from raw data using <a href=\"/en-US/docs/Web/API/BaseAudioContext/createBuffer\" title=\"AudioContext.createBuffer()\"><code>AudioContext.createBuffer()</code></a>. Once put into an AudioBuffer, the audio can then be played by being passed into an <a href=\"/en-US/docs/Web/API/AudioBufferSourceNode\"><code>AudioBufferSourceNode</code></a>.</p>\n<p>Objects of these types are designed to hold small audio snippets, typically less than 45 s. For longer sounds, objects implementing the <a href=\"/en-US/docs/Web/API/MediaElementAudioSourceNode\"><code>MediaElementAudioSourceNode</code></a> are more suitable. The buffer contains data in the following format: non-interleaved IEEE754 32-bit linear PCM with a nominal range between <code>-1</code> and <code>+1</code>, that is, a 32-bit floating point buffer, with each sample between -1.0 and 1.0. If the <a href=\"/en-US/docs/Web/API/AudioBuffer\" aria-current=\"page\"><code>AudioBuffer</code></a> has multiple channels, they are stored in separate buffers.</p>"}},{"type":"prose","value":{"id":"constructor","title":"Constructor","isH3":false,"content":"<dl>\n  <dt id=\"audiobuffer\"><a href=\"/en-US/docs/Web/API/AudioBuffer/AudioBuffer\" title=\"AudioBuffer()\"><code>AudioBuffer()</code></a></dt>\n  <dd>\n    <p>Creates and returns a new <code>AudioBuffer</code> object instance.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"properties","title":"Properties","isH3":false,"content":"<dl>\n  <dt id=\"audiobuffer.samplerate\"><a href=\"/en-US/docs/Web/API/AudioBuffer/sampleRate\"><code>AudioBuffer.sampleRate</code></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>Returns a float representing the sample rate, in samples per second, of the PCM data stored in the buffer.</p>\n  </dd>\n  <dt id=\"audiobuffer.length\"><a href=\"/en-US/docs/Web/API/AudioBuffer/length\"><code>AudioBuffer.length</code></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>Returns an integer representing the length, in sample-frames, of the PCM data stored in the buffer.</p>\n  </dd>\n  <dt id=\"audiobuffer.duration\"><a href=\"/en-US/docs/Web/API/AudioBuffer/duration\"><code>AudioBuffer.duration</code></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>Returns a double representing the duration, in seconds, of the PCM data stored in the buffer.</p>\n  </dd>\n  <dt id=\"audiobuffer.numberofchannels\"><a href=\"/en-US/docs/Web/API/AudioBuffer/numberOfChannels\"><code>AudioBuffer.numberOfChannels</code></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>Returns an integer representing the number of discrete audio channels described by the PCM data stored in the buffer.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"methods","title":"Methods","isH3":false,"content":"<dl>\n  <dt id=\"audiobuffer.getchanneldata\"><a href=\"/en-US/docs/Web/API/AudioBuffer/getChannelData\"><code>AudioBuffer.getChannelData()</code></a></dt>\n  <dd>\n    <p>Returns a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\"><code>Float32Array</code></a> containing the PCM data associated with the channel, defined by the <code>channel</code> parameter (with <code>0</code> representing the first channel).</p>\n  </dd>\n  <dt id=\"audiobuffer.copyfromchannel\"><a href=\"/en-US/docs/Web/API/AudioBuffer/copyFromChannel\"><code>AudioBuffer.copyFromChannel()</code></a></dt>\n  <dd>\n    <p>Copies the samples from the specified channel of the <code>AudioBuffer</code> to the <code>destination</code> array.</p>\n  </dd>\n  <dt id=\"audiobuffer.copytochannel\"><a href=\"/en-US/docs/Web/API/AudioBuffer/copyToChannel\"><code>AudioBuffer.copyToChannel()</code></a></dt>\n  <dd>\n    <p>Copies the samples to the specified channel of the <code>AudioBuffer</code>, from the <code>source</code> array.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"example","title":"Example","isH3":false,"content":"<p>The following simple example shows how to create an <code>AudioBuffer</code> and fill it with random white noise. You can find the full source code at our <a href=\"https://github.com/mdn/webaudio-examples\" class=\"external\" rel=\" noopener\">webaudio-examples</a> repository; a <a href=\"https://mdn.github.io/webaudio-examples/audio-buffer/\" class=\"external\" rel=\" noopener\">running live</a> version is also available.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> audioCtx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>AudioContext <span class=\"token operator\">||</span> window<span class=\"token punctuation\">.</span>webkitAudioContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create an empty three-second stereo buffer at the sample rate of the AudioContext</span>\n<span class=\"token keyword\">const</span> myArrayBuffer <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createBuffer</span><span class=\"token punctuation\">(</span>\n  <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  audioCtx<span class=\"token punctuation\">.</span>sampleRate <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  audioCtx<span class=\"token punctuation\">.</span>sampleRate\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Fill the buffer with white noise;</span>\n<span class=\"token comment\">// just random values between -1.0 and 1.0</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> channel <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> channel <span class=\"token operator\">&lt;</span> myArrayBuffer<span class=\"token punctuation\">.</span>numberOfChannels<span class=\"token punctuation\">;</span> channel<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// This gives us the actual array that contains the data</span>\n  <span class=\"token keyword\">const</span> nowBuffering <span class=\"token operator\">=</span> myArrayBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">getChannelData</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> myArrayBuffer<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Math.random() is in [0; 1.0]</span>\n    <span class=\"token comment\">// audio needs to be in [-1.0; 1.0]</span>\n    nowBuffering<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Get an AudioBufferSourceNode.</span>\n<span class=\"token comment\">// This is the AudioNode to use when we want to play an AudioBuffer</span>\n<span class=\"token keyword\">const</span> source <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createBufferSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// set the buffer in the AudioBufferSourceNode</span>\nsource<span class=\"token punctuation\">.</span>buffer <span class=\"token operator\">=</span> myArrayBuffer<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// connect the AudioBufferSourceNode to the</span>\n<span class=\"token comment\">// destination so we can hear the sound</span>\nsource<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>audioCtx<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// start the source playing</span>\nsource<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://webaudio.github.io/web-audio-api/#AudioBuffer","title":"Web Audio API"}],"query":"api.AudioBuffer"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.AudioBuffer","dataURL":"/en-US/docs/Web/API/AudioBuffer/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API\">Using the Web Audio API</a></li>\n</ul>"}}],"toc":[{"text":"Constructor","id":"constructor"},{"text":"Properties","id":"properties"},{"text":"Methods","id":"methods"},{"text":"Example","id":"example"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The AudioBuffer interface represents a short audio asset residing in memory, created from an audio file using the AudioContext.decodeAudioData() method, or from raw data using AudioContext.createBuffer(). Once put into an AudioBuffer, the audio can then be played by being passed into an AudioBufferSourceNode.","popularity":0.0015,"modified":"2022-09-14T13:55:15.000Z","other_translations":[{"title":"AudioBuffer","locale":"es","native":"Español"},{"title":"AudioBuffer","locale":"fr","native":"Français"},{"title":"AudioBuffer","locale":"ja","native":"日本語"},{"title":"AudioBuffer","locale":"ko","native":"한국어"},{"title":"AudioBuffer","locale":"ru","native":"Русский"},{"title":"AudioBuffer","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/web/api/audiobuffer","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/audiobuffer/index.md","last_commit_url":"https://github.com/mdn/content/commit/02e1bfcad5fd0de845fb033d331c3c027afa2d6e","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/AudioBuffer","title":"AudioBuffer"}],"pageTitle":"AudioBuffer - Web APIs | MDN","noIndexing":false}}