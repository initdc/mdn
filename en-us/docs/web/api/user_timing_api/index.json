{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"User Timing API","mdn_url":"/en-US/docs/Web/API/User_Timing_API","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li class=\"toggle\"><details open=\"\"><summary>Interfaces</summary><ol><li><a href=\"/en-US/docs/Web/API/Performance\"><code>Performance</code></a></li><li><a href=\"/en-US/docs/Web/API/PerformanceEntry\"><code>PerformanceEntry</code></a></li><li><a href=\"/en-US/docs/Web/API/PerformanceMark\"><code>PerformanceMark</code></a></li><li><a href=\"/en-US/docs/Web/API/PerformanceMeasure\"><code>PerformanceMeasure</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong><code>User Timing</code></strong> interface allows the developer to create application specific <a href=\"/en-US/docs/Web/API/DOMHighResTimeStamp\" title=\"timestamps\"><code>timestamps</code></a> that are part of the browser's <em>performance timeline</em>. There are two types of <em>user</em> defined timing event types: the \"<code>mark</code>\" <a href=\"/en-US/docs/Web/API/PerformanceEntry/entryType\" title=\"event type\"><code>event type</code></a> and the \"<code>measure</code>\" <a href=\"/en-US/docs/Web/API/PerformanceEntry/entryType\" title=\"event type\"><code>event type</code></a>.</p>\n<p><strong><code>mark</code></strong> events are <em>named</em> by the application and can be set at any location in an application. <strong><code>measure</code></strong> events are also <em>named</em> by the application but they are placed between two marks thus they are effectively a <em>midpoint</em> between two marks.</p>\n<p>This document provides an overview of the <code>mark</code> and <code>measure</code> <a href=\"/en-US/docs/Web/API/PerformanceEntry/entryType\" title=\"performance event types\"><code>performance event types</code></a> including the four <code>User Timing</code> methods that extend the <a href=\"/en-US/docs/Web/API/Performance\"><code>Performance</code></a> interface. For more details and example code regarding these two performance event types and the methods, see <a href=\"/en-US/docs/Web/API/User_Timing_API/Using_the_User_Timing_API\">Using the User Timing API</a>.</p>"}},{"type":"prose","value":{"id":"performance_marks","title":"Performance <code>marks</code>","isH3":false,"content":"<p>A performance <strong><code>mark</code></strong> is a <em>named</em> <a href=\"/en-US/docs/Web/API/PerformanceEntry\" title=\"performance entry\"><code>performance entry</code></a> that is created by the application. The mark is a <a href=\"/en-US/docs/Web/API/DOMHighResTimeStamp\" title=\"timestamp\"><code>timestamp</code></a> in the browser's <em>performance timeline</em>.</p>","titleAsText":"Performance marks"}},{"type":"prose","value":{"id":"creating_a_performance_mark","title":"Creating a performance <code>mark</code>","isH3":true,"content":"<p>The <a href=\"/en-US/docs/Web/API/Performance/mark\" title=\"performance.mark()\"><code>performance.mark()</code></a> method is used to create a performance mark. The method takes one argument, the <em>name</em> of the mark (for example <code>performance.mark(\"mark-1\")</code>).</p>\n<p>The <code>mark's</code> <a href=\"/en-US/docs/Web/API/PerformanceEntry\" title=\"performance entry\"><code>performance entry</code></a> will have the following property values:</p>\n<ul>\n  <li><a href=\"/en-US/docs/Web/API/PerformanceEntry/entryType\" title=\"entryType\"><code>entryType</code></a> - set to \"<code>mark</code>\".</li>\n  <li><a href=\"/en-US/docs/Web/API/PerformanceEntry/name\" title=\"name\"><code>name</code></a> - set to the \"<code>name</code>\" given when the mark was created.</li>\n  <li><a href=\"/en-US/docs/Web/API/PerformanceEntry/startTime\" title=\"startTime\"><code>startTime</code></a> - set to the <a href=\"/en-US/docs/Web/API/DOMHighResTimeStamp\" title=\"timestamp\"><code>timestamp</code></a> when <code>mark()</code> was called.</li>\n  <li><a href=\"/en-US/docs/Web/API/PerformanceEntry/duration\" title=\"duration\"><code>duration</code></a> - set to \"<code>0</code>\" (a mark has no <em>duration</em>).</li>\n</ul>","titleAsText":"Creating a performance mark"}},{"type":"prose","value":{"id":"retrieving_performance_marks","title":"Retrieving performance <code>marks</code>","isH3":true,"content":"<p>The <a href=\"/en-US/docs/Web/API/Performance\"><code>Performance</code></a> interface has three methods that can be used to retrieve a mark:</p>\n<dl>\n  <dt id=\"performance.getentries\"><a href=\"/en-US/docs/Web/API/Performance/getEntries\" title=\"performance.getEntries()\"><code>performance.getEntries()</code></a></dt>\n  <dd>\n    <p>Returns all <a href=\"/en-US/docs/Web/API/PerformanceEntry\" title=\"performance entries\"><code>performance entries</code></a> in the performance timeline. Finding only <code>mark</code> entries requires checking each entry's <a href=\"/en-US/docs/Web/API/PerformanceEntry/entryType\" title=\"entryType\"><code>entryType</code></a> for \"<code>mark</code>\".</p>\n  </dd>\n  <dt id=\"performance.getentriesbynamename_entrytype\"><a href=\"/en-US/docs/Web/API/Performance/getEntriesByName\" title=\"performance.getEntriesByName(name, entryType)\"><code>performance.getEntriesByName(name, entryType)</code></a></dt>\n  <dd>\n    <p>Returns all <a href=\"/en-US/docs/Web/API/PerformanceEntry\" title=\"performance entries\"><code>performance entries</code></a> in the performance timeline with the specified <code>name</code> and <code>entryType</code>, thus set <code>entryType</code> to \"<code>mark</code>\" to get all marks (and set <code>name</code> accordingly to retrieve more specific entries).</p>\n  </dd>\n  <dt id=\"performance.getentriesbytypeentrytype\"><a href=\"/en-US/docs/Web/API/Performance/getEntriesByType\" title=\"performance.getEntriesByType(entryType)\"><code>performance.getEntriesByType(entryType)</code></a></dt>\n  <dd>\n    <p>Returns all <a href=\"/en-US/docs/Web/API/PerformanceEntry\" title=\"performance entries\"><code>performance entries</code></a> in the performance timeline with the specified <code>entryType</code>, thus set <code>entryType</code> to \"<code>mark</code>\" to get all marks.</p>\n  </dd>\n</dl>","titleAsText":"Retrieving performance marks"}},{"type":"prose","value":{"id":"removing_performance_marks","title":"Removing performance <code>marks</code>","isH3":true,"content":"<p>To remove a specific mark from the performance timeline, call <code>performance.clearMarks(name)</code> where <code>name</code> is the name of the mark(s) you want removed. If this method is called with no arguments, all mark type entries will be removed from the performance timeline.</p>","titleAsText":"Removing performance marks"}},{"type":"prose","value":{"id":"performance_measures","title":"Performance <code>measures</code>","isH3":false,"content":"<p><strong><code>measure</code></strong> events are also <em>named</em> by the application but they are placed between two marks thus they are effectively a <em>midpoint</em> between two marks.</p>","titleAsText":"Performance measures"}},{"type":"prose","value":{"id":"creating_a_performance_measure","title":"Creating a performance <code>measure</code>","isH3":true,"content":"<p>A <code>measure</code> is created by calling <code>performance.measure(measureName, startMarkName, endMarkName)</code> where <code>measureName</code> is the measure's name and <code>startMarkName</code> and <code>endMarkName</code> are the start and end names, respectively, of the marks the measure will be placed between (in the performance timeline).</p>\n<p>The <code>measure's</code> <a href=\"/en-US/docs/Web/API/PerformanceEntry\" title=\"performance entry\"><code>performance entry</code></a> will have the following property values:</p>\n<ul>\n  <li><a href=\"/en-US/docs/Web/API/PerformanceEntry/entryType\" title=\"entryType\"><code>entryType</code></a> - set to \"<code>measure</code>\".</li>\n  <li><a href=\"/en-US/docs/Web/API/PerformanceEntry/name\" title=\"name\"><code>name</code></a> - set to the \"<code>name</code>\" given when the measure was created.</li>\n  <li><a href=\"/en-US/docs/Web/API/PerformanceEntry/startTime\" title=\"startTime\"><code>startTime</code></a> - set to the <a href=\"/en-US/docs/Web/API/DOMHighResTimeStamp\" title=\"timestamp\"><code>timestamp</code></a> when <code>measure()</code> was called.</li>\n  <li><a href=\"/en-US/docs/Web/API/PerformanceEntry/duration\" title=\"duration\"><code>duration</code></a> - set to a <a href=\"/en-US/docs/Web/API/DOMHighResTimeStamp\"><code>DOMHighResTimeStamp</code></a> that is the duration of the measure (typically, the end mark timestamp minus the start mark timestamp).</li>\n</ul>","titleAsText":"Creating a performance measure"}},{"type":"prose","value":{"id":"retrieving_performance_measures","title":"Retrieving performance <code>measures</code>","isH3":true,"content":"<p>The <a href=\"/en-US/docs/Web/API/Performance\"><code>Performance</code></a> interface has three methods that can be used to retrieve a measure:</p>\n<dl>\n  <dt id=\"performance.getentries_2\"><a href=\"/en-US/docs/Web/API/Performance/getEntries\" title=\"performance.getEntries()\"><code>performance.getEntries()</code></a></dt>\n  <dd>\n    <p>Returns all <a href=\"/en-US/docs/Web/API/PerformanceEntry\" title=\"performance entries\"><code>performance entries</code></a> in the performance timeline. Finding the <code>measure</code> entries requires checking each entry's <a href=\"/en-US/docs/Web/API/PerformanceEntry/entryType\" title=\"entryType\"><code>entryType</code></a> for \"<code>measure</code>\".</p>\n  </dd>\n  <dt id=\"performance.getentriesbynamename_entrytype_2\"><a href=\"/en-US/docs/Web/API/Performance/getEntriesByName\" title=\"performance.getEntriesByName(name, entryType)\"><code>performance.getEntriesByName(name, entryType)</code></a></dt>\n  <dd>\n    <p>Returns all <a href=\"/en-US/docs/Web/API/PerformanceEntry\" title=\"performance entries\"><code>performance entries</code></a> in the performance timeline with the specified <code>name</code> and <code>entryType</code>, thus set <code>entryType</code> to \"<code>measure</code>\" to get all measures (and set <code>name</code> accordingly to retrieve more specific entries).</p>\n  </dd>\n  <dt id=\"performance.getentriesbytypeentrytype_2\"><a href=\"/en-US/docs/Web/API/Performance/getEntriesByType\" title=\"performance.getEntriesByType(entryType)\"><code>performance.getEntriesByType(entryType)</code></a></dt>\n  <dd>\n    <p>Returns all <a href=\"/en-US/docs/Web/API/PerformanceEntry\" title=\"performance entries\"><code>performance entries</code></a> in the performance timeline with the specified <code>entryType</code>, thus set <code>entryType</code> to \"<code>measure</code>\" to get all measures.</p>\n  </dd>\n</dl>","titleAsText":"Retrieving performance measures"}},{"type":"prose","value":{"id":"removing_performance_measures","title":"Removing performance <code>measures</code>","isH3":true,"content":"<p>To remove a specific measure from the performance timeline, call <code>performance.clearMeasures(name)</code> where <code>name</code> is the name of the measure(s) you want removed. If this method is called with no arguments, all measure type entries will be removed from the performance timeline.</p>","titleAsText":"Removing performance measures"}},{"type":"prose","value":{"id":"interoperability","title":"Interoperability","isH3":false,"content":"<p>As shown in the <a href=\"/en-US/docs/Web/API/Performance\"><code>Performance</code></a> interface's <a href=\"/en-US/docs/Web/API/Performance#browser_compatibility\">Browser Compatibility</a> table, the <code>User Timing</code> methods are broadly implemented by desktop and mobile browsers (the only exceptions are Desktop Safari and Mobile Safari, however <a href=\"https://developer.apple.com/safari/technology-preview/release-notes/#r24\" class=\"external\" rel=\" noopener\">the Safari Technology Preview 24 has support</a>).</p>\n<p>To test your browser's support for this API, run the <a href=\"https://mdn.github.io/dom-examples/performance-apis/perf-api-support.html\" class=\"external\" rel=\" noopener\"><code>perf-api-support</code></a> application.</p>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"https://w3c.github.io/user-timing/\" class=\"external\" rel=\" noopener\">User Timing Standard</a>; W3C Editor's Draft</li>\n  <li><a href=\"https://caniuse.com/#search=user-timing\" class=\"external\" rel=\" noopener\">CanIUse data</a></li>\n  <li><a href=\"https://siusin.github.io/perf-timing-primer/\" class=\"external\" rel=\" noopener\">A Primer for Web Performance Timing APIs</a>; Xiaoqian Wu; W3C Editor's Draft</li>\n</ul>"}}],"toc":[{"text":"Performance <code>marks</code>","id":"performance_marks"},{"text":"Performance <code>measures</code>","id":"performance_measures"},{"text":"Interoperability","id":"interoperability"},{"text":"See also","id":"see_also"}],"summary":"The User Timing interface allows the developer to create application specific timestamps that are part of the browser's performance timeline. There are two types of user defined timing event types: the \"mark\" event type and the \"measure\" event type.","popularity":0.0011,"modified":"2022-09-09T05:19:45.000Z","other_translations":[{"title":"User Timing API","locale":"ja","native":"日本語"},{"title":"自定义时间测量 API","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/web/api/user_timing_api","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/user_timing_api/index.md","last_commit_url":"https://github.com/mdn/content/commit/f7dae62645a2c735ed6f6ed63f664bf279fdfc4b","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/User_Timing_API","title":"User Timing API"}],"pageTitle":"User Timing API - Web APIs | MDN","noIndexing":false}}