{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"MutationObserver()","mdn_url":"/en-US/docs/Web/API/MutationObserver/MutationObserver","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/MutationObserver\"><code>MutationObserver</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><em><code>MutationObserver()</code></em></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/MutationObserver/disconnect\"><code>disconnect()</code></a></li><li><a href=\"/en-US/docs/Web/API/MutationObserver/observe\"><code>observe()</code></a></li><li><a href=\"/en-US/docs/Web/API/MutationObserver/takeRecords\"><code>takeRecords()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>\n  The DOM <strong><code>MutationObserver()</code></strong>\n  constructor — part of the <a href=\"/en-US/docs/Web/API/MutationObserver\"><code>MutationObserver</code></a> interface — creates and\n  returns a new observer which invokes a specified callback when DOM events\n  occur.\n</p>\n<p>\n  DOM observation does not begin immediately; the\n  <a href=\"/en-US/docs/Web/API/MutationObserver/observe\" title=\"observe()\"><code>observe()</code></a> method must be called first to\n  establish which portion of the DOM to watch and what kinds of changes to watch for.\n</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js-nolint notranslate\">new MutationObserver(callback)\n</pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"callback\"><code>callback</code></dt>\n  <dd>\n    <p>\n      A function which will be called on each DOM change that qualifies given the\n      observed node or subtree and options.\n    </p>\n    <p>The <code>callback</code> function takes as input two parameters:</p>\n    <ol>\n      <li>\n        An array of <a href=\"/en-US/docs/Web/API/MutationRecord\"><code>MutationRecord</code></a> objects, describing each change that\n        occurred; and\n      </li>\n      <li>\n        the <a href=\"/en-US/docs/Web/API/MutationObserver\"><code>MutationObserver</code></a> which invoked the\n        <code>callback</code>.\n      </li>\n    </ol>\n    <p>See the <a href=\"#examples\">examples</a> below for more details.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>\n  A new <a href=\"/en-US/docs/Web/API/MutationObserver\"><code>MutationObserver</code></a> object, configured to call the specified\n  <code>callback</code> when DOM mutations occur.\n</p>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<p>\n  This example creates a new <code>MutationObserver</code> configured to watch a node and\n  all of its children for additions and removals of elements to the tree, as well as any\n  changes to attributes on any of the elements in the tree.\n</p>"}},{"type":"prose","value":{"id":"the_callback_function","title":"The callback function","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mutationList<span class=\"token punctuation\">,</span> observer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  mutationList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mutation</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>mutation<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'childList'</span><span class=\"token operator\">:</span>\n        <span class=\"token comment\">/* One or more children have been added to and/or removed\n           from the tree.\n           (See mutation.addedNodes and mutation.removedNodes.) */</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'attributes'</span><span class=\"token operator\">:</span>\n        <span class=\"token comment\">/* An attribute value changed on the element in\n           mutation.target.\n           The attribute name is in mutation.attributeName, and\n           its previous value is in mutation.oldValue. */</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>\n  The <code>callback()</code> function is invoked when the observer sees changes matching\n  the configuration of the observation request specified when calling\n  <a href=\"/en-US/docs/Web/API/MutationObserver/observe\" title=\"observe()\"><code>observe()</code></a> to begin watching the DOM.\n</p>\n<p>\n  The kind of change that took place (either a change to the list of children, or a\n  change to an attribute) is detected by looking at the <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>mutation.type</code></a> property.\n</p>"}},{"type":"prose","value":{"id":"creating_and_starting_the_observer","title":"Creating and starting the observer","isH3":true,"content":"<p>This code actually sets up the observation process.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> targetNode <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#someElement\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> observerOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">childList</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">attributes</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// Omit (or set to false) to observe only changes to the parent node</span>\n  <span class=\"token literal-property property\">subtree</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MutationObserver</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobserver<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>targetNode<span class=\"token punctuation\">,</span> observerOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>\n  The desired subtree is located by finding an element with the ID\n  <code>someElement</code>. A set of options for the observer is also established in the\n  <code>observerOptions</code> record. In it, we specify values of <code>true</code> for\n  both <code>childList</code> and <code>attributes</code>, so we get the information we\n  want.\n</p>\n<p>\n  Then the observer is instantiated, specifying the <code>callback()</code> function. We\n  begin observing the DOM nodes of interest by calling <code>observe()</code>, specifying\n  the <code>target</code> node and the <code>options</code> object.\n</p>\n<p>\n  From this point until <a href=\"/en-US/docs/Web/API/MutationObserver/disconnect\" title=\"disconnect()\"><code>disconnect()</code></a> is\n  called, <code>callback()</code> will be called each time an element is added to or\n  removed from the DOM tree rooted at <code>targetNode</code>, or any of those\n  elements' attributes are changed.\n</p>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://dom.spec.whatwg.org/#ref-for-dom-mutationobserver-mutationobserver①","title":"DOM Standard"}],"query":"api.MutationObserver.MutationObserver"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.MutationObserver.MutationObserver","dataURL":"/en-US/docs/Web/API/MutationObserver/MutationObserver/bcd.json"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"}],"summary":"The DOM MutationObserver()\n  constructor — part of the MutationObserver interface — creates and\n  returns a new observer which invokes a specified callback when DOM events\n  occur.","popularity":0.0026,"modified":"2022-09-13T05:54:54.000Z","other_translations":[{"title":"MutationObserver.MutationObserver()","locale":"es","native":"Español"},{"title":"MutationObserver.MutationObserver()","locale":"ja","native":"日本語"},{"title":"MutationObserver.MutationObserver()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/web/api/mutationobserver/mutationobserver","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/mutationobserver/mutationobserver/index.md","last_commit_url":"https://github.com/mdn/content/commit/b7556b71e1fc3e89057671b372871e9f33d3f0b8","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/MutationObserver","title":"MutationObserver"},{"uri":"/en-US/docs/Web/API/MutationObserver/MutationObserver","title":"MutationObserver()"}],"pageTitle":"MutationObserver() - Web APIs | MDN","noIndexing":false}}