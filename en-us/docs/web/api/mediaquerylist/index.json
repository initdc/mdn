{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"MediaQueryList","mdn_url":"/en-US/docs/Web/API/MediaQueryList","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/CSS_Object_Model\">CSS Object Model</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/MediaQueryList\"><code>MediaQueryList</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaQueryList/matches\"><code>matches</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaQueryList/media\"><code>media</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/API/MediaQueryList/addListener\"><code>addListener()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/API/MediaQueryList/removeListener\"><code>removeListener()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Events</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaQueryList/change_event\"><code>change</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Inheritance:</summary><ol><li><a href=\"/en-US/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for CSSOM</summary><ol><li><a href=\"/en-US/docs/Web/API/AnimationEvent\"><code>AnimationEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/CSS\"><code>CSS</code></a></li><li><a href=\"/en-US/docs/Web/API/CSSConditionRule\"><code>CSSConditionRule</code></a></li><li><a href=\"/en-US/docs/Web/API/CSSGroupingRule\"><code>CSSGroupingRule</code></a></li><li><a href=\"/en-US/docs/Web/API/CSSKeyframeRule\"><code>CSSKeyframeRule</code></a></li><li><a href=\"/en-US/docs/Web/API/CSSKeyframesRule\"><code>CSSKeyframesRule</code></a></li><li><a href=\"/en-US/docs/Web/API/CSSMediaRule\"><code>CSSMediaRule</code></a></li><li><a href=\"/en-US/docs/Web/API/CSSNamespaceRule\"><code>CSSNamespaceRule</code></a></li><li><a href=\"/en-US/docs/Web/API/CSSPageRule\"><code>CSSPageRule</code></a></li><li><a href=\"/en-US/docs/Web/API/CSSRule\"><code>CSSRule</code></a></li><li><a href=\"/en-US/docs/Web/API/CSSRuleList\"><code>CSSRuleList</code></a></li><li><a href=\"/en-US/docs/Web/API/CSSStyleDeclaration\"><code>CSSStyleDeclaration</code></a></li><li><a href=\"/en-US/docs/Web/API/CSSStyleRule\"><code>CSSStyleRule</code></a></li><li><a href=\"/en-US/docs/Web/API/CSSStyleSheet\"><code>CSSStyleSheet</code></a></li><li><a href=\"/en-US/docs/Web/API/CSSSupportsRule\"><code>CSSSupportsRule</code></a></li><li><a href=\"/en-US/docs/Web/API/CaretPosition\"><code>CaretPosition</code></a></li><li><a href=\"/en-US/docs/Web/API/Screen\"><code>Screen</code></a></li><li><a href=\"/en-US/docs/Web/API/StyleSheet\"><code>StyleSheet</code></a></li><li><a href=\"/en-US/docs/Web/API/StyleSheetList\"><code>StyleSheetList</code></a></li><li><a href=\"/en-US/docs/Web/API/TransitionEvent\"><code>TransitionEvent</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>A <strong><code>MediaQueryList</code></strong> object stores information on a <a href=\"/en-US/docs/Web/CSS/Media_Queries\">media query</a> applied to a document, with support for both immediate and event-driven matching against the state of the document.</p>\n<p>You can create a <code>MediaQueryList</code> by calling <a href=\"/en-US/docs/Web/API/Window/matchMedia\" title=\"matchMedia()\"><code>matchMedia()</code></a> on the <a href=\"/en-US/docs/Web/API/Window\"><code>window</code></a> object. The resulting object handles sending notifications to listeners when the media query state changes (i.e. when the media query test starts or stops evaluating to <code>true</code>).</p>\n<p>This is very useful for adaptive design, since this makes it possible to observe a document to detect when its media queries change, instead of polling the values periodically, and allows you to programmatically make changes to a document based on media query status.</p><svg viewBox=\"-1 -1 650 42\" preserveAspectRatio=\"xMinYMin meet\">\n  <a style=\"text-decoration: none;\" xlink:href=\"/en-US/docs/Web/API/EventTarget\">\n    <rect x=\"0\" y=\"0\" width=\"88\" height=\"25\" fill=\"#fff\" stroke=\"#D4DDE4\" stroke-width=\"2px\"></rect>\n    <text x=\"44\" y=\"16\" font-size=\"10px\" fill=\"#4D4E53\" text-anchor=\"middle\">\n      EventTarget\n    </text>\n  </a>\n  <line x1=\"88\" y1=\"14\" x2=\"118\" y2=\"14\" stroke=\"#D4DDE4\" \"=\"\"></line>\n  <polyline points=\"88,14 98,9 98,19 88,14\" stroke=\"#D4DDE4\" fill=\"#fff\"></polyline>\n  <a style=\"text-decoration: none;\" xlink:href=\"/en-US/docs/Web/API/MediaQueryList\" aria-current=\"page\">\n    <rect x=\"118\" y=\"0\" width=\"112\" height=\"25\" fill=\"#F4F7F8\" stroke=\"#D4DDE4\" stroke-width=\"2px\"></rect>\n    <text x=\"174\" y=\"16\" font-size=\"10px\" fill=\"#4D4E53\" text-anchor=\"middle\">\n      MediaQueryList\n    </text>\n  </a></svg>"}},{"type":"prose","value":{"id":"properties","title":"Properties","isH3":false,"content":"<p><em>The <code>MediaQueryList</code> interface inherits properties from its parent interface, <a href=\"/en-US/docs/Web/API/EventTarget\"><code>EventTarget</code></a>.</em></p>\n<dl>\n  <dt id=\"matches\"><a href=\"/en-US/docs/Web/API/MediaQueryList/matches\" title=\"matches\"><code>matches</code></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>A boolean value that returns <code>true</code> if the <a href=\"/en-US/docs/Web/API/Document\"><code>document</code></a> currently matches the media query list, or <code>false</code> if not.</p>\n  </dd>\n  <dt id=\"media\"><a href=\"/en-US/docs/Web/API/MediaQueryList/media\" title=\"media\"><code>media</code></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>A string representing a serialized media query.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"methods","title":"Methods","isH3":false,"content":"<p><em>The <code>MediaQueryList</code> interface inherits methods from its parent interface, <a href=\"/en-US/docs/Web/API/EventTarget\"><code>EventTarget</code></a>.</em></p>\n<dl>\n  <dt id=\"addlistener\"><a href=\"/en-US/docs/Web/API/MediaQueryList/addListener\" title=\"addListener()\"><code>addListener()</code></a> <svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg></dt>\n  <dd>\n    <p>Adds to the <code>MediaQueryList</code> a callback which is invoked whenever the media query status—whether or not the document matches the media queries in the list—changes. This method exists primarily for backward compatibility; if possible, you should instead use <a href=\"/en-US/docs/Web/API/EventTarget/addEventListener\" title=\"addEventListener()\"><code>addEventListener()</code></a> to watch for the <a href=\"/en-US/docs/Web/API/MediaQueryList/change_event\" title=\"change\"><code>change</code></a> event.</p>\n  </dd>\n  <dt id=\"removelistener\"><a href=\"/en-US/docs/Web/API/MediaQueryList/removeListener\" title=\"removeListener()\"><code>removeListener()</code></a> <svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg></dt>\n  <dd>\n    <p>Removes the specified listener callback from the callbacks to be invoked when the <code>MediaQueryList</code> changes media query status, which happens any time the document switches between matching and not matching the media queries listed in the <code>MediaQueryList</code>. This method has been kept for backward compatibility; if possible, you should generally use <a href=\"/en-US/docs/Web/API/EventTarget/removeEventListener\" title=\"removeEventListener()\"><code>removeEventListener()</code></a> to remove change notification callbacks (which should have previously been added using <code>addEventListener()</code>).</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"events","title":"Events","isH3":false,"content":"<p><em>The following events are delivered to <code>MediaQueryList</code> objects:</em></p>\n<dl>\n  <dt id=\"change\"><a href=\"/en-US/docs/Web/API/MediaQueryList/change_event\" title=\"change\"><code>change</code></a></dt>\n  <dd>\n    <p>Sent to the <code>MediaQueryList</code> when the result of running the media query against the document changes. For example, if the media query is <code>(min-width: 400px)</code>, the <code>change</code> event is fired any time the width of the document's <a href=\"/en-US/docs/Glossary/Viewport\">viewport</a> changes such that its width moves across the 400px boundary in either direction.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<p>This simple example creates a <code>MediaQueryList</code> and then sets up a listener to detect when the media query status changes, running a custom function when it does to change the appearance of the page.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> para <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mql <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">matchMedia</span><span class=\"token punctuation\">(</span><span class=\"token string\">'(max-width: 600px)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">screenTest</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>matches<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* the viewport is 600 pixels wide or less */</span>\n    para<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'This is a narrow screen — less than 600px wide.'</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* the viewport is more than 600 pixels wide */</span>\n    para<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'This is a wide screen — more than 600px wide.'</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nmql<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> screenTest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> You can find this example on GitHub (see the <a href=\"https://github.com/mdn/dom-examples/blob/main/mediaquerylist/index.html\" class=\"external\" rel=\" noopener\">source code</a>, and also see it <a href=\"https://mdn.github.io/dom-examples/mediaquerylist/index.html\" class=\"external\" rel=\" noopener\">running live</a>).</p>\n</div>\n<p>You can find other examples on the individual property and method pages.</p>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://drafts.csswg.org/cssom-view/#the-mediaquerylist-interface","title":"CSSOM View Module"}],"query":"api.MediaQueryList"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.MediaQueryList","dataURL":"/en-US/docs/Web/API/MediaQueryList/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/CSS/Media_Queries/Using_media_queries\">Media queries</a></li>\n  <li><a href=\"/en-US/docs/Web/CSS/Media_Queries/Testing_media_queries\">Using media queries from code</a></li>\n  <li><a href=\"/en-US/docs/Web/API/Window/matchMedia\"><code>window.matchMedia()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/API/MediaQueryListEvent\"><code>MediaQueryListEvent</code></a></li>\n  <li>The article <a href=\"/en-US/docs/Web/API/Window/devicePixelRatio\"><code>Window.devicePixelRatio</code></a> also has a useful example</li>\n</ul>"}}],"toc":[{"text":"Properties","id":"properties"},{"text":"Methods","id":"methods"},{"text":"Events","id":"events"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"A MediaQueryList object stores information on a media query applied to a document, with support for both immediate and event-driven matching against the state of the document.","popularity":0.0022,"modified":"2022-09-09T05:17:24.000Z","other_translations":[{"title":"MediaQueryList","locale":"es","native":"Español"},{"title":"MediaQueryList","locale":"ja","native":"日本語"},{"title":"MediaQueryList","locale":"zh-CN","native":"中文 (简体)"},{"title":"MediaQueryList","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"en-us/web/api/mediaquerylist","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/mediaquerylist/index.md","last_commit_url":"https://github.com/mdn/content/commit/4b4638246aad5d39b9a2e5c572b179b4c39c0a84","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/MediaQueryList","title":"MediaQueryList"}],"pageTitle":"MediaQueryList - Web APIs | MDN","noIndexing":false}}