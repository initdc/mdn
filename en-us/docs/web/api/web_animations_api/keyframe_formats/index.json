{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Keyframe Formats","mdn_url":"/en-US/docs/Web/API/Web_Animations_API/Keyframe_Formats","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Web_Animations_API\"><code>Web_Animations_API</code></a></strong></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/en-US/docs/Web/API/Element/animate\"><code>Element.animate()</code></a>, <a href=\"/en-US/docs/Web/API/KeyframeEffect/KeyframeEffect\" title=\"KeyframeEffect()\"><code>KeyframeEffect()</code></a>, and <a href=\"/en-US/docs/Web/API/KeyframeEffect/setKeyframes\"><code>KeyframeEffect.setKeyframes()</code></a> all accept objects formatted to represent a set of keyframes. There are several options to this format, which are explained below.</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<p>There are two different ways to format keyframes:</p>\n<ol>\n  <li>\n    An <code>array</code> of objects (keyframes) consisting of properties and values to iterate over. This is the canonical format returned by the <a href=\"/en-US/docs/Web/API/KeyframeEffect/getKeyframes\" title=\"getKeyframes()\"><code>getKeyframes()</code></a> method.\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>element<span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token comment\">// from</span>\n    <span class=\"token literal-property property\">opacity</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#fff\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token comment\">// to</span>\n    <span class=\"token literal-property property\">opacity</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#000\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>Offsets for each keyframe can be specified by providing an <code>offset</code> value.\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>element<span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">opacity</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">opacity</span><span class=\"token operator\">:</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">offset</span><span class=\"token operator\">:</span> <span class=\"token number\">0.7</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">opacity</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n    <div class=\"notecard note\" id=\"sect1\">\n      <p><strong>Note:</strong> <code>offset</code> values, if provided, must be between 0.0 and 1.0 (inclusive) and arranged in ascending order.</p>\n    </div>It is not necessary to specify an offset for every keyframe. Keyframes without a specified offset will be evenly spaced between adjacent keyframes.\n    The easing to apply between keyframes can be specified by providing an <code>easing</code> value as illustrated below.\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>element<span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">opacity</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">easing</span><span class=\"token operator\">:</span> <span class=\"token string\">'ease-out'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">opacity</span><span class=\"token operator\">:</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">easing</span><span class=\"token operator\">:</span> <span class=\"token string\">'ease-in'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">opacity</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>In this example, the specified easing only applies from the keyframe where it is specified until the next keyframe. Any <code>easing</code> value specified on the <code>options</code> argument, however, applies across a single iteration of the animation — for the entire duration.\n  </li>\n  <li>\n    An <code>object</code> containing key-value pairs consisting of the property to animate and an <code>array</code> of values to iterate over.\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>element<span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">opacity</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>          <span class=\"token comment\">// [ from, to ]</span>\n  <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span>   <span class=\"token punctuation\">[</span> <span class=\"token string\">\"#fff\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"#000\"</span> <span class=\"token punctuation\">]</span> <span class=\"token comment\">// [ from, to ]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>Using this format, the number of elements in each array does not need to be equal. The provided values will be spaced out independently.\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>element<span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">opacity</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// offset: 0, 1</span>\n  <span class=\"token literal-property property\">backgroundColor</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"yellow\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"green\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// offset: 0, 0.5, 1</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>The special keys <code>offset</code>, <code>easing</code>, and <code>composite</code> (described below) may be specified alongside the property values.\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>element<span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">opacity</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">offset</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.8</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Shorthand for [ 0, 0.8, 1 ]</span>\n  <span class=\"token literal-property property\">easing</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'ease-in'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ease-out'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>After generating a suitable set of keyframes from the property value lists, each supplied offset is applied to the corresponding keyframe. If there are insufficient values, or if the list contains <code>null</code> values, the keyframes without specified offsets will be evenly spaced as with the array format described above.\n    If there are too few <code>easing</code> or <code>composite</code> values, the corresponding list will be repeated as needed.\n  </li>\n</ol>"}},{"type":"prose","value":{"id":"implicit_tofrom_keyframes","title":"Implicit to/from keyframes","isH3":true,"content":"<p>In newer browser versions, you are able to set a beginning or end state for an animation only (i.e. a single keyframe), and the browser will infer the other end of the animation if it is able to. For example, consider <a href=\"https://mdn.github.io/dom-examples/web-animations-api/implicit-keyframes.html\" class=\"external\" rel=\" noopener\">this simple animation</a> — the Keyframe object looks like so:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> rotate360 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span> <span class=\"token string\">'rotate(360deg)'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>We have only specified the end state of the animation, and the beginning state is implied.</p>"}},{"type":"prose","value":{"id":"attributes","title":"Attributes","isH3":false,"content":"<p>Keyframes may specify property-value pairs for any of the <a href=\"/en-US/docs/Web/CSS/CSS_animated_properties\"><code>animatable css properties</code></a>. The property names are specified using camel-case so for example <a href=\"/en-US/docs/Web/CSS/background-color\"><code>background-color</code></a> becomes <code>backgroundColor</code> and <a href=\"/en-US/docs/Web/CSS/background-position-x\"><code>background-position-x</code></a> becomes <code>backgroundPositionX</code>. Shorthand values such as <a href=\"/en-US/docs/Web/CSS/margin\"><code>margin</code></a> are also permitted.</p>\n<p>Two exceptional CSS properties are:</p>\n<ul>\n  <li><a href=\"/en-US/docs/Web/CSS/float\"><code>float</code></a>, which must be written as <code>cssFloat</code> since \"float\" is a reserved word in JavaScript. It's just for reference here, this will have no effect on animation since \"float\" is not an animatable CSS property.</li>\n  <li><a href=\"/en-US/docs/Web/CSS/offset\"><code>offset</code></a>, which must be written as <code>cssOffset</code> since \"offset\" represents the keyframe offset as described below.</li>\n</ul>\n<p>The following special attributes may also be specified:</p>\n<dl>\n  <dt id=\"offset\">offset</dt>\n  <dd>\n    <p>The offset of the keyframe specified as a number between <code>0.0</code> and <code>1.0</code> inclusive or <code>null</code>. This is equivalent to specifying start and end states in percentages in CSS stylesheets using <code>@keyframes</code>. If this value is <code>null</code> or missing, the keyframe will be evenly spaced between adjacent keyframes.</p>\n  </dd>\n  <dt id=\"easing\">easing</dt>\n  <dd>\n    <p>The <a href=\"/en-US/docs/Web/CSS/easing-function\">timing function</a> used from this keyframe until the next keyframe in the series.</p>\n  </dd>\n  <dt id=\"composite\">composite</dt>\n  <dd>\n    <p>The <a href=\"/en-US/docs/Web/API/KeyframeEffect/composite\"><code>KeyframeEffect.composite</code></a> operation used to combine the values specified in this keyframe with the underlying value. This will be <code>auto</code> if the composite operation specified on the effect is being used.</p>\n  </dd>\n</dl>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://drafts.csswg.org/web-animations-1/#dom-animatable-animate","title":"Web Animations"}],"query":"api.Element.animate"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.Element.animate","dataURL":"/en-US/docs/Web/API/Web_Animations_API/Keyframe_Formats/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/Web_Animations_API\">Web Animations API</a></li>\n  <li><a href=\"/en-US/docs/Web/API/Element/animate\"><code>Element.animate()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/API/KeyframeEffect/KeyframeEffect\" title=\"KeyframeEffect()\"><code>KeyframeEffect()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/API/KeyframeEffect/setKeyframes\"><code>KeyframeEffect.setKeyframes()</code></a></li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Attributes","id":"attributes"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"Element.animate(), KeyframeEffect(), and KeyframeEffect.setKeyframes() all accept objects formatted to represent a set of keyframes. There are several options to this format, which are explained below.","popularity":0.0009,"modified":"2022-09-11T19:35:30.000Z","other_translations":[{"title":"关键帧 (Keyframe) 格式","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/web/api/web_animations_api/keyframe_formats","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/web_animations_api/keyframe_formats/index.md","last_commit_url":"https://github.com/mdn/content/commit/7455f0c585ea29fa85ea09e11716b70f76241f5b","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/Web_Animations_API","title":"Web Animations API"},{"uri":"/en-US/docs/Web/API/Web_Animations_API/Keyframe_Formats","title":"Keyframe Formats"}],"pageTitle":"Keyframe Formats - Web APIs | MDN","noIndexing":false}}