{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"SubtleCrypto.wrapKey()","mdn_url":"/en-US/docs/Web/API/SubtleCrypto/wrapKey","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Web_Crypto_API\">Web Crypto API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/SubtleCrypto\"><code>SubtleCrypto</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/decrypt\"><code>decrypt()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/deriveBits\"><code>deriveBits()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/deriveKey\"><code>deriveKey()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/digest\"><code>digest()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/encrypt\"><code>encrypt()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/exportKey\"><code>exportKey()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/generateKey\"><code>generateKey()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/importKey\"><code>importKey()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/sign\"><code>sign()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/unwrapKey\"><code>unwrapKey()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/verify\"><code>verify()</code></a></li><li><em><code>wrapKey()</code></em></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Web Crypto API</summary><ol><li><a href=\"/en-US/docs/Web/API/Crypto\"><code>Crypto</code></a></li><li><a href=\"/en-US/docs/Web/API/CryptoKey\"><code>CryptoKey</code></a></li><li><a href=\"/en-US/docs/Web/API/crypto_property\"><code>crypto_property</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard secure\" id=\"sect1\"><p><strong>Secure context:</strong> This feature is available only in <a href=\"/en-US/docs/Web/Security/Secure_Contexts\">secure contexts</a> (HTTPS), in some or all <a href=\"#browser_compatibility\">supporting browsers</a>.</p></div>\n<p>\n  The <strong><code>wrapKey()</code></strong> method of the <a href=\"/en-US/docs/Web/API/SubtleCrypto\"><code>SubtleCrypto</code></a>\n  interface \"wraps\" a key. This means that it exports the key in an external, portable\n  format, then encrypts the exported key. Wrapping a key helps protect it in untrusted\n  environments, such as inside an otherwise unprotected data store or in transmission over\n  an unprotected network.\n</p>\n<p>\n  As with <a href=\"/en-US/docs/Web/API/SubtleCrypto/exportKey\"><code>SubtleCrypto.exportKey()</code></a>,\n  you specify an <a href=\"/en-US/docs/Web/API/SubtleCrypto/importKey#supported_formats\">export format</a>\n  for the key. To export a key, it must have <a href=\"/en-US/docs/Web/API/CryptoKey\"><code>CryptoKey.extractable</code></a>\n  set to <code>true</code>.\n</p>\n<p>\n  But because <code>wrapKey()</code> also encrypts the key to be imported, you also need\n  to pass in the key that must be used to encrypt it. This is sometimes called the\n  \"wrapping key\".\n</p>\n<p>\n  The inverse of <code>wrapKey()</code> is <a href=\"/en-US/docs/Web/API/SubtleCrypto/unwrapKey\"><code>SubtleCrypto.unwrapKey()</code></a>: while\n  <code>wrapKey</code> is composed of export + encrypt, <code>unwrapKey</code> is composed\n  of import + decrypt.\n</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js-nolint notranslate\">wrapKey(format, key, wrappingKey, wrapAlgo)\n</pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"format\"><code>format</code></dt>\n  <dd>\n    <p>A string describing the data format in which the key will be exported before it is encrypted. It can be one of the following:</p>\n    <dl>\n      <dt id=\"raw\"><code>raw</code></dt>\n      <dd>\n        <p><a href=\"/en-US/docs/Web/API/SubtleCrypto/importKey#raw\">Raw</a> format.</p>\n      </dd>\n      <dt id=\"pkcs8\"><code>pkcs8</code></dt>\n      <dd>\n        <p><a href=\"/en-US/docs/Web/API/SubtleCrypto/importKey#pkcs_8\">PKCS #8</a> format.</p>\n      </dd>\n      <dt id=\"spki\"><code>spki</code></dt>\n      <dd>\n        <p><a href=\"/en-US/docs/Web/API/SubtleCrypto/importKey#subjectpublickeyinfo\">SubjectPublicKeyInfo</a> format.</p>\n      </dd>\n      <dt id=\"jwk\"><code>jwk</code></dt>\n      <dd>\n        <p><a href=\"/en-US/docs/Web/API/SubtleCrypto/importKey#json_web_key\">JSON Web Key</a> format.</p>\n      </dd>\n    </dl>\n  </dd>\n  <dt id=\"key\"><code>key</code></dt>\n  <dd>\n    <p>The <a href=\"/en-US/docs/Web/API/CryptoKey\"><code>CryptoKey</code></a> to wrap.</p>\n  </dd>\n  <dt id=\"wrappingkey\"><code>wrappingkey</code></dt>\n  <dd>\n    <p>The <a href=\"/en-US/docs/Web/API/CryptoKey\"><code>CryptoKey</code></a> used to encrypt the exported key. The key must have the <code>wrapKey</code> usage set.</p>\n  </dd>\n  <dt id=\"wrapalgo\"><code>wrapAlgo</code></dt>\n  <dd>\n    <p>\n      An object specifying the <a href=\"/en-US/docs/Web/API/SubtleCrypto/encrypt#supported_algorithms\">algorithm</a>\n      to be used to encrypt the exported key, and any required extra parameters:\n    </p>\n    <ul>\n      <li>\n        To use <a href=\"/en-US/docs/Web/API/SubtleCrypto/encrypt#rsa-oaep\">RSA-OAEP</a>,\n        pass an <a href=\"/en-US/docs/Web/API/RsaOaepParams\"><code>RsaOaepParams</code></a> object.\n      </li>\n      <li>\n        To use <a href=\"/en-US/docs/Web/API/SubtleCrypto/encrypt#aes-ctr\">AES-CTR</a>,\n        pass an <a href=\"/en-US/docs/Web/API/AesCtrParams\"><code>AesCtrParams</code></a> object.\n      </li>\n      <li>\n        To use <a href=\"/en-US/docs/Web/API/SubtleCrypto/encrypt#aes-cbc\">AES-CBC</a>,\n        pass an <a href=\"/en-US/docs/Web/API/AesCbcParams\"><code>AesCbcParams</code></a> object.\n      </li>\n      <li>\n        To use <a href=\"/en-US/docs/Web/API/SubtleCrypto/encrypt#aes-gcm\">AES-GCM</a>,\n        pass an <a href=\"/en-US/docs/Web/API/AesGcmParams\"><code>AesGcmParams</code></a> object.\n      </li>\n      <li>\n        To use <a href=\"#aes-kw\">AES-KW</a>,\n        pass the string <code>\"AES-KW\"</code>, or an object of the form <code>{ \"name\": \"AES-KW }</code>.\n      </li>\n    </ul>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<ul>\n  <li>\n    <code>result</code> is a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>\n    that fulfills with an\n    <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>\n    containing the encrypted exported key.\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"exceptions","title":"Exceptions","isH3":true,"content":"<p>The promise is rejected when one of the following exceptions is encountered:</p>\n<dl>\n  <dt id=\"invalidaccesserror\"><code>InvalidAccessError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>Raised when the wrapping key is not a key for the requested wrap algorithm.</p>\n  </dd>\n  <dt id=\"notsupported\"><code>NotSupported</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>\n      Raised when trying to use an algorithm that is either unknown or isn't suitable for\n      encryption or wrapping.\n    </p>\n  </dd>\n  <dt id=\"typeerror\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a></dt>\n  <dd>\n    <p>Raised when trying to use an invalid format.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"supported_algorithms","title":"Supported algorithms","isH3":false,"content":"<p>\n  All <a href=\"/en-US/docs/Web/API/SubtleCrypto/encrypt#supported_algorithms\">algorithms that are usable for encryption</a> are also usable for key wrapping,\n  as long as the key has the \"wrapKey\" usage set. For key wrapping you have the additional option of AES-KW.\n</p>"}},{"type":"prose","value":{"id":"aes-kw","title":"AES-KW","isH3":true,"content":"<p>AES-KW is a way to use the AES cipher for key wrapping.</p>\n<p>\n  One advantage of using AES-KW over another AES mode such as AES-GCM is that AES-KW does\n  not require an initialization vector. To use AES-KW, the input must be a multiple of 64\n  bits.\n</p>\n<p>AES-KW is specified in <a href=\"https://datatracker.ietf.org/doc/html/rfc3394\" class=\"external\" rel=\" noopener\">RFC 3394</a>.</p>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> You can <a href=\"https://mdn.github.io/dom-examples/web-crypto/wrap-key/index.html\" class=\"external\" rel=\" noopener\">try the working examples</a> out on GitHub.</p>\n</div>"}},{"type":"prose","value":{"id":"raw_wrap","title":"Raw wrap","isH3":true,"content":"<p>\n  This example wraps an AES key. It uses \"raw\" as the export format and AES-KW, with a\n  password-derived key, to encrypt it. <a href=\"https://github.com/mdn/dom-examples/blob/main/web-crypto/wrap-key/raw.js\" class=\"external\" rel=\" noopener\">See the complete code on GitHub</a>.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> salt<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\nGet some key material to use as input to the deriveKey method.\nThe key material is a password supplied by the user.\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getKeyMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> password <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Enter your password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> enc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">importKey</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'raw'</span><span class=\"token punctuation\">,</span>\n    enc<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'PBKDF2'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'deriveBits'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'deriveKey'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\nGiven some key material and some random salt\nderive an AES-KW key using PBKDF2.\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">keyMaterial<span class=\"token punctuation\">,</span> salt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">deriveKey</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'PBKDF2'</span><span class=\"token punctuation\">,</span>\n      salt<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">iterations</span><span class=\"token operator\">:</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> <span class=\"token string\">'SHA-256'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    keyMaterial<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'AES-KW'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">256</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'wrapKey'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'unwrapKey'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\nWrap the given key.\n*/</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">wrapCryptoKey</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">keyToWrap</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// get the key encryption key</span>\n  <span class=\"token keyword\">const</span> keyMaterial <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getKeyMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  salt <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span><span class=\"token function\">getRandomValues</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> wrappingKey <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span>keyMaterial<span class=\"token punctuation\">,</span> salt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">wrapKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">'raw'</span><span class=\"token punctuation\">,</span> keyToWrap<span class=\"token punctuation\">,</span> wrappingKey<span class=\"token punctuation\">,</span> <span class=\"token string\">'AES-KW'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\nGenerate an encrypt/decrypt secret key,\nthen wrap it.\n*/</span>\nwindow<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle\n  <span class=\"token punctuation\">.</span><span class=\"token function\">generateKey</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'AES-GCM'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'encrypt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'decrypt'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">secretKey</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">wrapCryptoKey</span><span class=\"token punctuation\">(</span>secretKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">wrappedKey</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>wrappedKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"pkcs_8_wrap","title":"PKCS #8 wrap","isH3":true,"content":"<p>\n  This example wraps an RSA private signing key. It uses \"pkcs8\" as the export format and\n  AES-GCM, with a password-derived key, to encrypt it.\n  <a href=\"https://github.com/mdn/dom-examples/blob/main/web-crypto/wrap-key/pkcs8.js\" class=\"external\" rel=\" noopener\">See the complete code on GitHub.</a>\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> salt<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> iv<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\nGet some key material to use as input to the deriveKey method.\nThe key material is a password supplied by the user.\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getKeyMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> password <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Enter your password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> enc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">importKey</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'raw'</span><span class=\"token punctuation\">,</span>\n    enc<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'PBKDF2'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'deriveBits'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'deriveKey'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\nGiven some key material and some random salt\nderive an AES-GCM key using PBKDF2.\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">keyMaterial<span class=\"token punctuation\">,</span> salt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">deriveKey</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'PBKDF2'</span><span class=\"token punctuation\">,</span>\n      salt<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">iterations</span><span class=\"token operator\">:</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> <span class=\"token string\">'SHA-256'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    keyMaterial<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'AES-GCM'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">256</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'wrapKey'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'unwrapKey'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\nWrap the given key.\n*/</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">wrapCryptoKey</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">keyToWrap</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// get the key encryption key</span>\n  <span class=\"token keyword\">const</span> keyMaterial <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getKeyMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  salt <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span><span class=\"token function\">getRandomValues</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> wrappingKey <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span>keyMaterial<span class=\"token punctuation\">,</span> salt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  iv <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span><span class=\"token function\">getRandomValues</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">wrapKey</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'pkcs8'</span><span class=\"token punctuation\">,</span>\n    keyToWrap<span class=\"token punctuation\">,</span>\n    wrappingKey<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'AES-GCM'</span><span class=\"token punctuation\">,</span> iv <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\nGenerate a sign/verify key pair,\nthen wrap the private key.\n*/</span>\nwindow<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle\n  <span class=\"token punctuation\">.</span><span class=\"token function\">generateKey</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'RSA-PSS'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// Consider using a 4096-bit key for systems that require long-term security</span>\n      <span class=\"token literal-property property\">modulusLength</span><span class=\"token operator\">:</span> <span class=\"token number\">2048</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">publicExponent</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> <span class=\"token string\">'SHA-256'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'sign'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'verify'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">keyPair</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">wrapCryptoKey</span><span class=\"token punctuation\">(</span>keyPair<span class=\"token punctuation\">.</span>privateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">wrappedKey</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>wrappedKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"subjectpublickeyinfo_wrap","title":"SubjectPublicKeyInfo wrap","isH3":true,"content":"<p>\n  This example wraps an RSA public encryption key. It uses \"spki\" as the export format\n  and AES-CBC, with a password-derived key, to encrypt it.\n  <a href=\"https://github.com/mdn/dom-examples/blob/main/web-crypto/wrap-key/spki.js\" class=\"external\" rel=\" noopener\">See the complete code on GitHub.</a>\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> salt<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> iv<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\nGet some key material to use as input to the deriveKey method.\nThe key material is a password supplied by the user.\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getKeyMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> password <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Enter your password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> enc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">importKey</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'raw'</span><span class=\"token punctuation\">,</span>\n    enc<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'PBKDF2'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'deriveBits'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'deriveKey'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\nGiven some key material and some random salt\nderive an AES-CBC key using PBKDF2.\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">keyMaterial<span class=\"token punctuation\">,</span> salt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">deriveKey</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'PBKDF2'</span><span class=\"token punctuation\">,</span>\n      salt<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">iterations</span><span class=\"token operator\">:</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> <span class=\"token string\">'SHA-256'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    keyMaterial<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'AES-CBC'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">256</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'wrapKey'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'unwrapKey'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\nWrap the given key.\n*/</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">wrapCryptoKey</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">keyToWrap</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// get the key encryption key</span>\n  <span class=\"token keyword\">const</span> keyMaterial <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getKeyMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  salt <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span><span class=\"token function\">getRandomValues</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> wrappingKey <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span>keyMaterial<span class=\"token punctuation\">,</span> salt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  iv <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span><span class=\"token function\">getRandomValues</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">wrapKey</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'spki'</span><span class=\"token punctuation\">,</span>\n    keyToWrap<span class=\"token punctuation\">,</span>\n    wrappingKey<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'AES-CBC'</span><span class=\"token punctuation\">,</span> iv <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\nGenerate an encrypt/decrypt key pair,\nthen wrap it.\n*/</span>\nwindow<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle\n  <span class=\"token punctuation\">.</span><span class=\"token function\">generateKey</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'RSA-OAEP'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// Consider using a 4096-bit key for systems that require long-term security</span>\n      <span class=\"token literal-property property\">modulusLength</span><span class=\"token operator\">:</span> <span class=\"token number\">2048</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">publicExponent</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> <span class=\"token string\">'SHA-256'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'encrypt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'decrypt'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">keyPair</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">wrapCryptoKey</span><span class=\"token punctuation\">(</span>keyPair<span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">wrappedKey</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>wrappedKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"json_web_key_import","title":"JSON Web Key import","isH3":true,"content":"<p>\n  This code wraps an ECDSA private signing key. It uses \"jwk\" as the export format and\n  AES-GCM, with a password-derived key, to encrypt it.\n  <a href=\"https://github.com/mdn/dom-examples/blob/main/web-crypto/wrap-key/jwk.js\" class=\"external\" rel=\" noopener\">See the complete code on GitHub.</a>\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> salt<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> iv<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\nGet some key material to use as input to the deriveKey method.\nThe key material is a password supplied by the user.\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getKeyMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> password <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Enter your password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> enc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">importKey</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'raw'</span><span class=\"token punctuation\">,</span>\n    enc<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'PBKDF2'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'deriveBits'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'deriveKey'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\nGiven some key material and some random salt\nderive an AES-GCM key using PBKDF2.\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">keyMaterial<span class=\"token punctuation\">,</span> salt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">deriveKey</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'PBKDF2'</span><span class=\"token punctuation\">,</span>\n      salt<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">iterations</span><span class=\"token operator\">:</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> <span class=\"token string\">'SHA-256'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    keyMaterial<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'AES-GCM'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">256</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'wrapKey'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'unwrapKey'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\nWrap the given key.\n*/</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">wrapCryptoKey</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">keyToWrap</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// get the key encryption key</span>\n  <span class=\"token keyword\">const</span> keyMaterial <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getKeyMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  salt <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span><span class=\"token function\">getRandomValues</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> wrappingKey <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span>keyMaterial<span class=\"token punctuation\">,</span> salt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  iv <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span><span class=\"token function\">getRandomValues</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">wrapKey</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'jwk'</span><span class=\"token punctuation\">,</span>\n    keyToWrap<span class=\"token punctuation\">,</span>\n    wrappingKey<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'AES-GCM'</span><span class=\"token punctuation\">,</span> iv <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\nGenerate a sign/verify key pair,\nthen wrap the private key\n*/</span>\nwindow<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle\n  <span class=\"token punctuation\">.</span><span class=\"token function\">generateKey</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'ECDSA'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">namedCurve</span><span class=\"token operator\">:</span> <span class=\"token string\">'P-384'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'sign'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'verify'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">keyPair</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">wrapCryptoKey</span><span class=\"token punctuation\">(</span>keyPair<span class=\"token punctuation\">.</span>privateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">wrappedKey</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>wrappedKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/webcrypto/#SubtleCrypto-method-wrapKey","title":"Web Cryptography API"}],"query":"api.SubtleCrypto.wrapKey"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.SubtleCrypto.wrapKey","dataURL":"/en-US/docs/Web/API/SubtleCrypto/wrapKey/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/SubtleCrypto/exportKey\"><code>SubtleCrypto.exportKey()</code></a></li>\n  <li><a href=\"https://datatracker.ietf.org/doc/html/rfc5208\" class=\"external\" rel=\" noopener\">PKCS #8 format</a>.</li>\n  <li><a href=\"https://datatracker.ietf.org/doc/html/rfc5280#section-4.1\" class=\"external\" rel=\" noopener\">SubjectPublicKeyInfo format</a>.</li>\n  <li><a href=\"https://datatracker.ietf.org/doc/html/rfc7517\" class=\"external\" rel=\" noopener\">JSON Web Key format</a>.</li>\n  <li><a href=\"https://datatracker.ietf.org/doc/html/rfc3394\" class=\"external\" rel=\" noopener\">AES-KW specification</a>.</li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Supported algorithms","id":"supported_algorithms"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The wrapKey() method of the SubtleCrypto\n  interface \"wraps\" a key. This means that it exports the key in an external, portable\n  format, then encrypts the exported key. Wrapping a key helps protect it in untrusted\n  environments, such as inside an otherwise unprotected data store or in transmission over\n  an unprotected network.","popularity":0.0005,"modified":"2022-09-13T06:27:50.000Z","source":{"folder":"en-us/web/api/subtlecrypto/wrapkey","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/subtlecrypto/wrapkey/index.md","last_commit_url":"https://github.com/mdn/content/commit/16e398809d62247dbadc89ff4024a0ffa4781f0e","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/SubtleCrypto","title":"SubtleCrypto"},{"uri":"/en-US/docs/Web/API/SubtleCrypto/wrapKey","title":"SubtleCrypto.wrapKey()"}],"pageTitle":"SubtleCrypto.wrapKey() - Web APIs | MDN","noIndexing":false}}