{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"SubtleCrypto.digest()","mdn_url":"/en-US/docs/Web/API/SubtleCrypto/digest","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Web_Crypto_API\">Web Crypto API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/SubtleCrypto\"><code>SubtleCrypto</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/decrypt\"><code>decrypt()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/deriveBits\"><code>deriveBits()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/deriveKey\"><code>deriveKey()</code></a></li><li><em><code>digest()</code></em></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/encrypt\"><code>encrypt()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/exportKey\"><code>exportKey()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/generateKey\"><code>generateKey()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/importKey\"><code>importKey()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/sign\"><code>sign()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/unwrapKey\"><code>unwrapKey()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/verify\"><code>verify()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/wrapKey\"><code>wrapKey()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Web Crypto API</summary><ol><li><a href=\"/en-US/docs/Web/API/Crypto\"><code>Crypto</code></a></li><li><a href=\"/en-US/docs/Web/API/CryptoKey\"><code>CryptoKey</code></a></li><li><a href=\"/en-US/docs/Web/API/crypto_property\"><code>crypto_property</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard secure\" id=\"sect1\"><p><strong>Secure context:</strong> This feature is available only in <a href=\"/en-US/docs/Web/Security/Secure_Contexts\">secure contexts</a> (HTTPS), in some or all <a href=\"#browser_compatibility\">supporting browsers</a>.</p></div>\n<p>\n  The <strong><code>digest()</code></strong> method of the <a href=\"/en-US/docs/Web/API/SubtleCrypto\"><code>SubtleCrypto</code></a>\n  interface generates a <a href=\"/en-US/docs/Glossary/Digest\">digest</a> of the given data. A digest is a short\n  fixed-length value derived from some variable-length input. Cryptographic digests should\n  exhibit collision-resistance, meaning that it's hard to come up with two different\n  inputs that have the same digest value.\n</p>\n<p>\n  It takes as its arguments an identifier for the digest algorithm to use and the data to\n  digest. It returns a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> which will be fulfilled with the digest.\n</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js-nolint notranslate\">digest(algorithm, data)\n</pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"algorithm\"><code>algorithm</code></dt>\n  <dd>\n    <p>This may be a string or an object with a single property <code>name</code> that is a string. The string names the hash function to use. Supported values are:</p>\n    <ul>\n      <li><code>\"SHA-1\"</code> (but don't use this in cryptographic applications)</li>\n      <li><code>\"SHA-256\"</code></li>\n      <li><code>\"SHA-384\"</code></li>\n      <li><code>\"SHA-512\"</code>.</li>\n    </ul>\n  </dd>\n  <dt id=\"data\"><code>data</code></dt>\n  <dd>\n    <p>An <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>, a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> or a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> object containing the data to be digested.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>A <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> that fulfills with an <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> containing the digest.</p>"}},{"type":"prose","value":{"id":"supported_algorithms","title":"Supported algorithms","isH3":false,"content":"<p>\n  Digest algorithms, also known as <a href=\"/en-US/docs/Glossary/Cryptographic_hash_function\">cryptographic hash functions</a>,\n  transform an arbitrarily large block of data into a fixed-size output,\n  usually much shorter than the input. They have a variety of applications in\n  cryptography.\n</p>\n<table class=\"standard-table\">\n  <tbody>\n    <tr>\n      <th scope=\"col\">Algorithm</th>\n      <th scope=\"col\">Output length (bits)</th>\n      <th scope=\"col\">Block size (bits)</th>\n      <th scope=\"col\">Specification</th>\n    </tr>\n    <tr>\n      <th scope=\"row\">SHA-1</th>\n      <td>160</td>\n      <td>512</td>\n      <td><a href=\"https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\" class=\"external\" rel=\" noopener\">FIPS 180-4</a>, section 6.1</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">SHA-256</th>\n      <td>256</td>\n      <td>512</td>\n      <td><a href=\"https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\" class=\"external\" rel=\" noopener\">FIPS 180-4</a>, section 6.2</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">SHA-384</th>\n      <td>384</td>\n      <td>1024</td>\n      <td><a href=\"https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\" class=\"external\" rel=\" noopener\">FIPS 180-4</a>, section 6.5</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">SHA-512</th>\n      <td>512</td>\n      <td>1024</td>\n      <td><a href=\"https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\" class=\"external\" rel=\" noopener\">FIPS 180-4</a>, section 6.4</td>\n    </tr>\n  </tbody>\n</table>\n<div class=\"notecard warning\" id=\"sect2\">\n  <p>\n    <strong>Warning:</strong> SHA-1 is now considered vulnerable and should not\n    be used for cryptographic applications.\n  </p>\n</div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p>\n    <strong>Note:</strong> If you are looking here for how to create an keyed-hash message authentication\n    code (<a href=\"/en-US/docs/Glossary/HMAC\">HMAC</a>), you need to use the <a href=\"/en-US/docs/Web/API/SubtleCrypto/sign#hmac\">SubtleCrypto.sign()</a> instead.\n  </p>\n</div>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"basic_example","title":"Basic example","isH3":true,"content":"<p>\n  This example encodes a message, then calculates its SHA-256 digest and logs the digest\n  length:\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token string\">'An obscure body in the S-K System, your majesty. The inhabitants refer to it as the planet Earth.'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">digestMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> encoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> encoder<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> hash <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">digest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SHA-256'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> hash<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">digestMessage</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">digestBuffer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>digestBuffer<span class=\"token punctuation\">.</span>byteLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"converting_a_digest_to_a_hex_string","title":"Converting a digest to a hex string","isH3":true,"content":"<p>\n  The digest is returned as an <code>ArrayBuffer</code>, but for comparison and display\n  digests are often represented as hex strings. This example calculates a digest, then\n  converts the <code>ArrayBuffer</code> to a hex string:\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token string\">'An obscure body in the S-K System, your majesty. The inhabitants refer to it as the planet Earth.'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">digestMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> msgUint8 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                           <span class=\"token comment\">// encode as (utf-8) Uint8Array</span>\n  <span class=\"token keyword\">const</span> hashBuffer <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">digest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SHA-256'</span><span class=\"token punctuation\">,</span> msgUint8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// hash the message</span>\n  <span class=\"token keyword\">const</span> hashArray <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>hashBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                     <span class=\"token comment\">// convert buffer to byte array</span>\n  <span class=\"token keyword\">const</span> hashHex <span class=\"token operator\">=</span> hashArray<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// convert bytes to hex string</span>\n  <span class=\"token keyword\">return</span> hashHex<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">digestMessage</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">digestHex</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>digestHex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/webcrypto/#SubtleCrypto-method-digest","title":"Web Cryptography API"}],"query":"api.SubtleCrypto.digest"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.SubtleCrypto.digest","dataURL":"/en-US/docs/Web/API/SubtleCrypto/digest/bcd.json"}},{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard note\" id=\"sect5\">\n  <p>\n    <strong>Note:</strong> Chrome 60 added a feature that disables crypto.subtle for non-TLS\n    connections.\n  </p>\n</div>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/Web_Crypto_API/Non-cryptographic_uses_of_subtle_crypto\">Non-cryptographic uses of SubtleCrypto</a></li>\n  <li><a href=\"https://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features/\" class=\"external\" rel=\" noopener\">Chromium secure origins specification</a></li>\n  <li><a href=\"https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\" class=\"external\" rel=\" noopener\">FIPS 180-4</a> specifies the SHA family of digest algorithms.</li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Supported algorithms","id":"supported_algorithms"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The digest() method of the SubtleCrypto\n  interface generates a digest of the given data. A digest is a short\n  fixed-length value derived from some variable-length input. Cryptographic digests should\n  exhibit collision-resistance, meaning that it's hard to come up with two different\n  inputs that have the same digest value.","popularity":0.0034,"modified":"2022-09-13T06:27:50.000Z","other_translations":[{"title":"SubtleCrypto.digest()","locale":"es","native":"Español"},{"title":"SubtleCrypto.digest()","locale":"fr","native":"Français"},{"title":"SubtleCrypto.digest()","locale":"ja","native":"日本語"}],"source":{"folder":"en-us/web/api/subtlecrypto/digest","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/subtlecrypto/digest/index.md","last_commit_url":"https://github.com/mdn/content/commit/16e398809d62247dbadc89ff4024a0ffa4781f0e","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/SubtleCrypto","title":"SubtleCrypto"},{"uri":"/en-US/docs/Web/API/SubtleCrypto/digest","title":"SubtleCrypto.digest()"}],"pageTitle":"SubtleCrypto.digest() - Web APIs | MDN","noIndexing":false}}