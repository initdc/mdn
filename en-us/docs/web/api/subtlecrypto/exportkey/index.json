{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"SubtleCrypto.exportKey()","mdn_url":"/en-US/docs/Web/API/SubtleCrypto/exportKey","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Web_Crypto_API\">Web Crypto API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/SubtleCrypto\"><code>SubtleCrypto</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/decrypt\"><code>decrypt()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/deriveBits\"><code>deriveBits()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/deriveKey\"><code>deriveKey()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/digest\"><code>digest()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/encrypt\"><code>encrypt()</code></a></li><li><em><code>exportKey()</code></em></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/generateKey\"><code>generateKey()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/importKey\"><code>importKey()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/sign\"><code>sign()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/unwrapKey\"><code>unwrapKey()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/verify\"><code>verify()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/wrapKey\"><code>wrapKey()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Web Crypto API</summary><ol><li><a href=\"/en-US/docs/Web/API/Crypto\"><code>Crypto</code></a></li><li><a href=\"/en-US/docs/Web/API/CryptoKey\"><code>CryptoKey</code></a></li><li><a href=\"/en-US/docs/Web/API/crypto_property\"><code>crypto_property</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard secure\" id=\"sect1\"><p><strong>Secure context:</strong> This feature is available only in <a href=\"/en-US/docs/Web/Security/Secure_Contexts\">secure contexts</a> (HTTPS), in some or all <a href=\"#browser_compatibility\">supporting browsers</a>.</p></div>\n<p>\n  The <strong><code>exportKey()</code></strong> method of the <a href=\"/en-US/docs/Web/API/SubtleCrypto\"><code>SubtleCrypto</code></a>\n  interface exports a key: that is, it takes as input a <a href=\"/en-US/docs/Web/API/CryptoKey\"><code>CryptoKey</code></a> object\n  and gives you the key in an external, portable format.\n</p>\n<p>\n  To export a key, the key must have <a href=\"/en-US/docs/Web/API/CryptoKey\"><code>CryptoKey.extractable</code></a> set to\n  <code>true</code>.\n</p>\n<p>\n  Keys can be exported in several formats: see <a href=\"/en-US/docs/Web/API/SubtleCrypto/importKey#supported_formats\">Supported formats</a> in the\n  <a href=\"/en-US/docs/Web/API/SubtleCrypto/importKey\"><code>SubtleCrypto.importKey()</code></a>\n  page for details.\n</p>\n<p>\n  Keys are not exported in an encrypted format: to encrypt keys when exporting them use\n  the\n  <a href=\"/en-US/docs/Web/API/SubtleCrypto/wrapKey\"><code>SubtleCrypto.wrapKey()</code></a>\n  API instead.\n</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js-nolint notranslate\">exportKey(format, key)\n</pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"format\"><code>format</code></dt>\n  <dd>\n    <p>A string value describing the data format in which the key should be exported. It can be one of the following:</p>\n    <ul>\n      <li><code>raw</code>: <a href=\"/en-US/docs/Web/API/SubtleCrypto/importKey#raw\">Raw</a> format.</li>\n      <li><code>pkcs8</code>: <a href=\"/en-US/docs/Web/API/SubtleCrypto/importKey#pkcs_8\">PKCS #8</a> format.</li>\n      <li><code>spki</code>: <a href=\"/en-US/docs/Web/API/SubtleCrypto/importKey#subjectpublickeyinfo\">SubjectPublicKeyInfo</a> format.</li>\n      <li><code>jwk</code>: <a href=\"/en-US/docs/Web/API/SubtleCrypto/importKey#json_web_key\">JSON Web Key</a> format.</li>\n    </ul>\n  </dd>\n  <dt id=\"key\"><code>key</code></dt>\n  <dd>\n    <p>The <a href=\"/en-US/docs/Web/API/CryptoKey\"><code>CryptoKey</code></a> to export.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>A <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>.</p>\n<ul>\n  <li>\n    If <code>format</code> was <code>jwk</code>, then the promise fulfills\n    with a JSON object containing the key.\n  </li>\n  <li>\n    Otherwise the promise fulfills with an\n    <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>\n    containing the key.\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"exceptions","title":"Exceptions","isH3":true,"content":"<p>The promise is rejected when one of the following exceptions is encountered:</p>\n<dl>\n  <dt id=\"invalidaccesserror\"><code>InvalidAccessError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>Raised when trying to export a non-extractable key.</p>\n  </dd>\n  <dt id=\"notsupported\"><code>NotSupported</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>Raised when trying to export in an unknown format.</p>\n  </dd>\n  <dt id=\"typeerror\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a></dt>\n  <dd>\n    <p>Raised when trying to use an invalid format.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> You can <a href=\"https://mdn.github.io/dom-examples/web-crypto/export-key/index.html\" class=\"external\" rel=\" noopener\">try the working examples</a> out on GitHub.</p>\n</div>"}},{"type":"prose","value":{"id":"raw_export","title":"Raw export","isH3":true,"content":"<p>\n  This example exports an AES key as an <code>ArrayBuffer</code> containing the bytes for\n  the key. <a href=\"https://github.com/mdn/dom-examples/blob/main/web-crypto/export-key/raw.js\" class=\"external\" rel=\" noopener\">See the complete code on GitHub</a>.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/*\nExport the given key and write it into the \"exported-key\" space.\n*/</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">exportCryptoKey</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> exported <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">exportKey</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"raw\"</span><span class=\"token punctuation\">,</span>\n    key\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> exportedKeyBuffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>exported<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> exportKeyOutput <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".exported-key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  exportKeyOutput<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>exportedKeyBuffer<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\nGenerate an encrypt/decrypt secret key,\nthen set up an event listener on the \"Export\" button.\n*/</span>\nwindow<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">generateKey</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"AES-GCM\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"encrypt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"decrypt\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> exportButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".raw\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  exportButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">exportCryptoKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"pkcs_8_export","title":"PKCS #8 export","isH3":true,"content":"<p>\n  This example exports an RSA private signing key as a PKCS #8 object. The exported key\n  is then PEM-encoded. <a href=\"https://github.com/mdn/dom-examples/blob/main/web-crypto/export-key/pkcs8.js\" class=\"external\" rel=\" noopener\">See the complete code on GitHub</a>.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/*\nConvert an ArrayBuffer into a string\nfrom https://developer.chrome.com/blog/how-to-convert-arraybuffer-to-and-from-string/\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ab2str</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">buf</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\nExport the given key and write it into the \"exported-key\" space.\n*/</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">exportCryptoKey</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> exported <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">exportKey</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"pkcs8\"</span><span class=\"token punctuation\">,</span>\n    key\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> exportedAsString <span class=\"token operator\">=</span> <span class=\"token function\">ab2str</span><span class=\"token punctuation\">(</span>exported<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> exportedAsBase64 <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">btoa</span><span class=\"token punctuation\">(</span>exportedAsString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> pemExported <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">-----BEGIN PRIVATE KEY-----\\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>exportedAsBase64<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n-----END PRIVATE KEY-----</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> exportKeyOutput <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".exported-key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  exportKeyOutput<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> pemExported<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\nGenerate a sign/verify key pair,\nthen set up an event listener on the \"Export\" button.\n*/</span>\nwindow<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">generateKey</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"RSA-PSS\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// Consider using a 4096-bit key for systems that require long-term security</span>\n    <span class=\"token literal-property property\">modulusLength</span><span class=\"token operator\">:</span> <span class=\"token number\">2048</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">publicExponent</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SHA-256\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"sign\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"verify\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">keyPair</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> exportButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".pkcs8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  exportButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">exportCryptoKey</span><span class=\"token punctuation\">(</span>keyPair<span class=\"token punctuation\">.</span>privateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"subjectpublickeyinfo_export","title":"SubjectPublicKeyInfo export","isH3":true,"content":"<p>\n  This example exports an RSA public encryption key as a PEM-encoded SubjectPublicKeyInfo\n  object. <a href=\"https://github.com/mdn/dom-examples/blob/main/web-crypto/export-key/spki.js\" class=\"external\" rel=\" noopener\">See the complete code on GitHub</a>.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/*\nConvert an ArrayBuffer into a string\nfrom https://developer.chrome.com/blog/how-to-convert-arraybuffer-to-and-from-string/\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ab2str</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">buf</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\nExport the given key and write it into the \"exported-key\" space.\n*/</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">exportCryptoKey</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> exported <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">exportKey</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"spki\"</span><span class=\"token punctuation\">,</span>\n    key\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> exportedAsString <span class=\"token operator\">=</span> <span class=\"token function\">ab2str</span><span class=\"token punctuation\">(</span>exported<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> exportedAsBase64 <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">btoa</span><span class=\"token punctuation\">(</span>exportedAsString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> pemExported <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">-----BEGIN PUBLIC KEY-----\\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>exportedAsBase64<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n-----END PUBLIC KEY-----</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> exportKeyOutput <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".exported-key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  exportKeyOutput<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> pemExported<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\nGenerate an encrypt/decrypt key pair,\nthen set up an event listener on the \"Export\" button.\n*/</span>\nwindow<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">generateKey</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"RSA-OAEP\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// Consider using a 4096-bit key for systems that require long-term security</span>\n    <span class=\"token literal-property property\">modulusLength</span><span class=\"token operator\">:</span> <span class=\"token number\">2048</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">publicExponent</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SHA-256\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"encrypt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"decrypt\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">keyPair</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> exportButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".spki\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  exportButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">exportCryptoKey</span><span class=\"token punctuation\">(</span>keyPair<span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"json_web_key_export","title":"JSON Web Key export","isH3":true,"content":"<p>This code exports an ECDSA private signing key as a JSON Web Key object. <a href=\"https://github.com/mdn/dom-examples/blob/main/web-crypto/export-key/jwk.js\" class=\"external\" rel=\" noopener\">See the complete code on GitHub</a>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/*\nExport the given key and write it into the \"exported-key\" space.\n*/</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">exportCryptoKey</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> exported <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">exportKey</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"jwk\"</span><span class=\"token punctuation\">,</span>\n    key\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> exportKeyOutput <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".exported-key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  exportKeyOutput<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>exported<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\nGenerate a sign/verify key pair,\nthen set up an event listener on the \"Export\" button.\n*/</span>\nwindow<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">generateKey</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ECDSA\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">namedCurve</span><span class=\"token operator\">:</span> <span class=\"token string\">\"P-384\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"sign\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"verify\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">keyPair</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> exportButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".jwk\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  exportButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">exportCryptoKey</span><span class=\"token punctuation\">(</span>keyPair<span class=\"token punctuation\">.</span>privateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/webcrypto/#SubtleCrypto-method-exportKey","title":"Web Cryptography API"}],"query":"api.SubtleCrypto.exportKey"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.SubtleCrypto.exportKey","dataURL":"/en-US/docs/Web/API/SubtleCrypto/exportKey/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/SubtleCrypto/importKey\"><code>SubtleCrypto.importKey()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/API/SubtleCrypto/importKey\"><code>SubtleCrypto.wrapKey()</code></a></li>\n  <li><a href=\"https://datatracker.ietf.org/doc/html/rfc5208\" class=\"external\" rel=\" noopener\">PKCS #8 format</a>.</li>\n  <li><a href=\"https://datatracker.ietf.org/doc/html/rfc5280#section-4.1\" class=\"external\" rel=\" noopener\">SubjectPublicKeyInfo format</a>.</li>\n  <li><a href=\"https://datatracker.ietf.org/doc/html/rfc7517\" class=\"external\" rel=\" noopener\">JSON Web Key format</a>.</li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The exportKey() method of the SubtleCrypto\n  interface exports a key: that is, it takes as input a CryptoKey object\n  and gives you the key in an external, portable format.","popularity":0.001,"modified":"2022-09-26T22:23:47.000Z","source":{"folder":"en-us/web/api/subtlecrypto/exportkey","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/subtlecrypto/exportkey/index.md","last_commit_url":"https://github.com/mdn/content/commit/4604ca8dc337e7b02432fdfae6e2d9467b7fef6c","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/SubtleCrypto","title":"SubtleCrypto"},{"uri":"/en-US/docs/Web/API/SubtleCrypto/exportKey","title":"SubtleCrypto.exportKey()"}],"pageTitle":"SubtleCrypto.exportKey() - Web APIs | MDN","noIndexing":false}}