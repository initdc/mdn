{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"SubtleCrypto.deriveBits()","mdn_url":"/en-US/docs/Web/API/SubtleCrypto/deriveBits","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Web_Crypto_API\">Web Crypto API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/SubtleCrypto\"><code>SubtleCrypto</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/decrypt\"><code>decrypt()</code></a></li><li><em><code>deriveBits()</code></em></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/deriveKey\"><code>deriveKey()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/digest\"><code>digest()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/encrypt\"><code>encrypt()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/exportKey\"><code>exportKey()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/generateKey\"><code>generateKey()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/importKey\"><code>importKey()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/sign\"><code>sign()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/unwrapKey\"><code>unwrapKey()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/verify\"><code>verify()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/wrapKey\"><code>wrapKey()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Web Crypto API</summary><ol><li><a href=\"/en-US/docs/Web/API/Crypto\"><code>Crypto</code></a></li><li><a href=\"/en-US/docs/Web/API/CryptoKey\"><code>CryptoKey</code></a></li><li><a href=\"/en-US/docs/Web/API/crypto_property\"><code>crypto_property</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard secure\" id=\"sect1\"><p><strong>Secure context:</strong> This feature is available only in <a href=\"/en-US/docs/Web/Security/Secure_Contexts\">secure contexts</a> (HTTPS), in some or all <a href=\"#browser_compatibility\">supporting browsers</a>.</p></div>\n<p>\n  The <strong><code>deriveBits()</code></strong> method of the\n  <a href=\"/en-US/docs/Web/API/SubtleCrypto\"><code>SubtleCrypto</code></a> interface can be used to derive an array of bits from a base\n  key.\n</p>\n<p>\n  It takes as its arguments the base key, the derivation algorithm to use, and the length\n  of the bit string to derive. It returns a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>\n  which will be fulfilled with an\n  <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>\n  containing the derived bits.\n</p>\n<p>\n  This method is very similar to\n  <a href=\"/en-US/docs/Web/API/SubtleCrypto/deriveKey\"><code>SubtleCrypto.deriveKey()</code></a>,\n  except that <code>deriveKey()</code> returns a\n  <a href=\"/en-US/docs/Web/API/CryptoKey\"><code>CryptoKey</code></a> object rather than an\n  <code>ArrayBuffer</code>. Essentially <code>deriveKey()</code> is composed of\n  <code>deriveBits()</code> followed by\n  <a href=\"/en-US/docs/Web/API/SubtleCrypto/importKey\"><code>importKey()</code></a>.\n</p>\n<p>\n  This function supports the same derivation algorithms as <code>deriveKey()</code>:\n  ECDH, HKDF, and PBKDF2. See <a href=\"/en-US/docs/Web/API/SubtleCrypto/deriveKey#supported_algorithms\">Supported algorithms</a>\n  for some more detail on these algorithms.\n</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js-nolint notranslate\">deriveBits(algorithm, baseKey, length)\n</pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"algorithm\"><code>algorithm</code></dt>\n  <dd>\n    <p>An object defining the <a href=\"/en-US/docs/Web/API/SubtleCrypto/deriveKey#supported_algorithms\">derivation algorithm</a> to use.</p>\n    <ul>\n      <li>\n        To use <a href=\"/en-US/docs/Web/API/SubtleCrypto/deriveKey#ecdh\">ECDH</a>, pass an\n        <a href=\"/en-US/docs/Web/API/EcdhKeyDeriveParams\"><code>EcdhKeyDeriveParams</code></a> object.\n      </li>\n      <li>\n        To use <a href=\"/en-US/docs/Web/API/SubtleCrypto/deriveKey#hkdf\">HKDF</a>, pass\n        an <a href=\"/en-US/docs/Web/API/HkdfParams\"><code>HkdfParams</code></a> object.\n      </li>\n      <li>\n        To use <a href=\"/en-US/docs/Web/API/SubtleCrypto/deriveKey#pbkdf2\">PBKDF2</a>,\n        pass a <a href=\"/en-US/docs/Web/API/Pbkdf2Params\"><code>Pbkdf2Params</code></a> object.\n      </li>\n    </ul>\n  </dd>\n  <dt id=\"basekey\"><code>baseKey</code></dt>\n  <dd>\n    <p>\n      A <a href=\"/en-US/docs/Web/API/CryptoKey\"><code>CryptoKey</code></a> representing the input\n      to the derivation algorithm. If <code>algorithm</code> is ECDH, this will be the ECDH\n      private key. Otherwise it will be the initial key material for the derivation\n      function: for example, for PBKDF2 it might be a password, imported as a\n      <code>CryptoKey</code> using <a href=\"/en-US/docs/Web/API/SubtleCrypto/importKey\"><code>SubtleCrypto.importKey()</code></a>.\n    </p>\n  </dd>\n  <dt id=\"length\"><code>length</code></dt>\n  <dd>\n    <p>A number representing the number of bits to derive. To be compatible with all browsers, the number should be a multiple of 8.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>\n  A <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>\n  that fulfills with an <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>\n  containing the derived bits.\n</p>"}},{"type":"prose","value":{"id":"exceptions","title":"Exceptions","isH3":true,"content":"<p>The promise is rejected when one of the following exceptions are encountered:</p>\n<dl>\n  <dt id=\"operationerror\"><code>OperationError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>Raised if the <em>length</em> parameter of the <code>deriveBits()</code> call is null, and also in some cases if the <em>length</em> parameter is not a multiple of 8.</p>\n  </dd>\n  <dt id=\"invalidaccesserror\"><code>InvalidAccessError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>\n      Raised when the base key is not a key for the requested derivation algorithm or if\n      the <a href=\"/en-US/docs/Web/API/CryptoKey\"><code>CryptoKey.usages</code></a> value of that key doesn't contain\n      <code>deriveBits</code>.\n    </p>\n  </dd>\n  <dt id=\"notsupported\"><code>NotSupported</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>\n      Raised when trying to use an algorithm that is either unknown or isn't suitable for\n      derivation, or if the algorithm requested for the derived key doesn't define a key\n      length.\n    </p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"supported_algorithms","title":"Supported algorithms","isH3":false,"content":"<p>See the <a href=\"/en-US/docs/Web/API/SubtleCrypto/deriveKey#supported_algorithms\">Supported algorithms section of the <code>deriveKey()</code> documentation</a>.</p>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> You can <a href=\"https://mdn.github.io/dom-examples/web-crypto/derive-bits/index.html\" class=\"external\" rel=\" noopener\">try the working examples</a> on GitHub.</p>\n</div>"}},{"type":"prose","value":{"id":"ecdh","title":"ECDH","isH3":true,"content":"<p>In this example Alice and Bob each generate an ECDH key pair.</p>\n<p>We then use Alice's private key and Bob's public key to derive a shared secret. <a href=\"https://github.com/mdn/dom-examples/blob/main/web-crypto/derive-bits/ecdh.js\" class=\"external\" rel=\" noopener\">See the complete code on GitHub.</a></p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">deriveSharedSecret</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">privateKey<span class=\"token punctuation\">,</span> publicKey</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> sharedSecret <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">deriveBits</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ECDH\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">namedCurve</span><span class=\"token operator\">:</span> <span class=\"token string\">\"P-384\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">public</span><span class=\"token operator\">:</span> publicKey\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    privateKey<span class=\"token punctuation\">,</span>\n    <span class=\"token number\">128</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>sharedSecret<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> sharedSecretValue <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".ecdh .derived-bits-value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  sharedSecretValue<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fade-in\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  sharedSecretValue<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"animationend\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    sharedSecretValue<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fade-in\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  sharedSecretValue<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>buffer<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">…[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>sharedSecret<span class=\"token punctuation\">.</span>byteLength<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> bytes total]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Generate 2 ECDH key pairs: one for Alice and one for Bob</span>\n<span class=\"token comment\">// In more normal usage, they would generate their key pairs</span>\n<span class=\"token comment\">// separately and exchange public keys securely</span>\n<span class=\"token keyword\">const</span> generateAlicesKeyPair <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">generateKey</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ECDH\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">namedCurve</span><span class=\"token operator\">:</span> <span class=\"token string\">\"P-384\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"deriveBits\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> generateBobsKeyPair <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">generateKey</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ECDH\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">namedCurve</span><span class=\"token operator\">:</span> <span class=\"token string\">\"P-384\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"deriveBits\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>generateAlicesKeyPair<span class=\"token punctuation\">,</span> generateBobsKeyPair<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">values</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> alicesKeyPair <span class=\"token operator\">=</span> values<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> bobsKeyPair <span class=\"token operator\">=</span> values<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> deriveBitsButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".ecdh .derive-bits-button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  deriveBitsButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Alice then generates a secret using her private key and Bob's public key.</span>\n    <span class=\"token comment\">// Bob could generate the same secret using his private key and Alice's public key.</span>\n    <span class=\"token function\">deriveSharedSecret</span><span class=\"token punctuation\">(</span>alicesKeyPair<span class=\"token punctuation\">.</span>privateKey<span class=\"token punctuation\">,</span> bobsKeyPair<span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"pbkdf2","title":"PBKDF2","isH3":true,"content":"<p>\n  In this example we ask the user for a password, then use it to derive some bits using\n  PBKDF2. <a href=\"https://github.com/mdn/dom-examples/blob/main/web-crypto/derive-bits/pbkdf2.js\" class=\"external\" rel=\" noopener\">See the complete code on GitHub.</a>\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> salt<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\nGet some key material to use as input to the deriveBits method.\nThe key material is a password supplied by the user.\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getKeyMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> password <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter your password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> enc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">importKey</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"raw\"</span><span class=\"token punctuation\">,</span>\n    enc<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"PBKDF2\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"deriveBits\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"deriveKey\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\nDerive some bits from a password supplied by the user.\n*/</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getDerivedBits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> keyMaterial <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getKeyMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  salt <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span><span class=\"token function\">getRandomValues</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> derivedBits <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">deriveBits</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"PBKDF2\"</span><span class=\"token punctuation\">,</span>\n      salt<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">iterations</span><span class=\"token operator\">:</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SHA-256\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    keyMaterial<span class=\"token punctuation\">,</span>\n    <span class=\"token number\">256</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>derivedBits<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> derivedBitsValue <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".pbkdf2 .derived-bits-value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  derivedBitsValue<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fade-in\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  derivedBitsValue<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"animationend\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    derivedBitsValue<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fade-in\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  derivedBitsValue<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>buffer<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">…[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>derivedBits<span class=\"token punctuation\">.</span>byteLength<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> bytes total]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> deriveBitsButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".pbkdf2 .derive-bits-button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nderiveBitsButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getDerivedBits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/webcrypto/#SubtleCrypto-method-deriveBits","title":"Web Cryptography API"}],"query":"api.SubtleCrypto.deriveBits"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.SubtleCrypto.deriveBits","dataURL":"/en-US/docs/Web/API/SubtleCrypto/deriveBits/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"https://datatracker.ietf.org/doc/html/rfc5869\" class=\"external\" rel=\" noopener\">HKDF specification</a>.</li>\n  <li><a href=\"https://csrc.nist.gov/publications/detail/sp/800-132/final\" class=\"external\" rel=\" noopener\">NIST guidelines for password-based key derivation</a>.</li>\n  <li><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html\" class=\"external\" rel=\" noopener\">Password storage cheat sheet</a>.</li>\n  <li><a href=\"https://security.stackexchange.com/questions/3959/recommended-of-iterations-when-using-pbkdf2-sha256/3993#3993\" class=\"external\" rel=\" noopener\">Advice on choosing an iteration count for PBKDF2</a>.</li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Supported algorithms","id":"supported_algorithms"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The deriveBits() method of the\n  SubtleCrypto interface can be used to derive an array of bits from a base\n  key.","popularity":0.0003,"modified":"2022-09-13T06:27:50.000Z","source":{"folder":"en-us/web/api/subtlecrypto/derivebits","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/subtlecrypto/derivebits/index.md","last_commit_url":"https://github.com/mdn/content/commit/16e398809d62247dbadc89ff4024a0ffa4781f0e","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/SubtleCrypto","title":"SubtleCrypto"},{"uri":"/en-US/docs/Web/API/SubtleCrypto/deriveBits","title":"SubtleCrypto.deriveBits()"}],"pageTitle":"SubtleCrypto.deriveBits() - Web APIs | MDN","noIndexing":false}}