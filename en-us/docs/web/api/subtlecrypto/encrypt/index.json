{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"SubtleCrypto.encrypt()","mdn_url":"/en-US/docs/Web/API/SubtleCrypto/encrypt","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Web_Crypto_API\">Web Crypto API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/SubtleCrypto\"><code>SubtleCrypto</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/decrypt\"><code>decrypt()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/deriveBits\"><code>deriveBits()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/deriveKey\"><code>deriveKey()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/digest\"><code>digest()</code></a></li><li><em><code>encrypt()</code></em></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/exportKey\"><code>exportKey()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/generateKey\"><code>generateKey()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/importKey\"><code>importKey()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/sign\"><code>sign()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/unwrapKey\"><code>unwrapKey()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/verify\"><code>verify()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/wrapKey\"><code>wrapKey()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Web Crypto API</summary><ol><li><a href=\"/en-US/docs/Web/API/Crypto\"><code>Crypto</code></a></li><li><a href=\"/en-US/docs/Web/API/CryptoKey\"><code>CryptoKey</code></a></li><li><a href=\"/en-US/docs/Web/API/crypto_property\"><code>crypto_property</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard secure\" id=\"sect1\"><p><strong>Secure context:</strong> This feature is available only in <a href=\"/en-US/docs/Web/Security/Secure_Contexts\">secure contexts</a> (HTTPS), in some or all <a href=\"#browser_compatibility\">supporting browsers</a>.</p></div>\n<p>\n  The <strong><code>encrypt()</code></strong> method of the <a href=\"/en-US/docs/Web/API/SubtleCrypto\"><code>SubtleCrypto</code></a>\n  interface encrypts data.\n</p>\n<p>\n  It takes as its arguments a <a href=\"/en-US/docs/Glossary/Key\">key</a> to encrypt with, some\n  algorithm-specific parameters, and the data to encrypt (also known as \"plaintext\"). It\n  returns a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> which will be fulfilled with the encrypted data (also\n  known as \"ciphertext\").\n</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js-nolint notranslate\">encrypt(algorithm, key, data)\n</pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"algorithm\"><code>algorithm</code></dt>\n  <dd>\n    <p>An object specifying the <a href=\"#supported_algorithms\">algorithm</a> to be used and any extra parameters if required:</p>\n    <ul>\n      <li>To use <a href=\"#rsa-oaep\">RSA-OAEP</a>, pass an <a href=\"/en-US/docs/Web/API/RsaOaepParams\"><code>RsaOaepParams</code></a> object.</li>\n      <li>To use <a href=\"#aes-ctr\">AES-CTR</a>, pass an <a href=\"/en-US/docs/Web/API/AesCtrParams\"><code>AesCtrParams</code></a> object.</li>\n      <li>To use <a href=\"#aes-cbc\">AES-CBC</a>, pass an <a href=\"/en-US/docs/Web/API/AesCbcParams\"><code>AesCbcParams</code></a> object.</li>\n      <li>To use <a href=\"#aes-gcm\">AES-GCM</a>, pass an <a href=\"/en-US/docs/Web/API/AesGcmParams\"><code>AesGcmParams</code></a> object.</li>\n    </ul>\n  </dd>\n  <dt id=\"key\"><code>key</code></dt>\n  <dd>\n    <p>A <a href=\"/en-US/docs/Web/API/CryptoKey\"><code>CryptoKey</code></a> containing the key to be used for encryption.</p>\n  </dd>\n  <dt id=\"data\"><code>data</code></dt>\n  <dd>\n    <p>\n      An <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>, a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a>, or a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>\n      containing the data to be encrypted (also known as the <a href=\"/en-US/docs/Glossary/Plaintext\">plaintext</a>).\n    </p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>\n  A <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> that fulfills with an\n  <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> containing the \"ciphertext\".\n</p>"}},{"type":"prose","value":{"id":"exceptions","title":"Exceptions","isH3":true,"content":"<p>The promise is rejected when the following exceptions are encountered:</p>\n<dl>\n  <dt id=\"invalidaccesserror\"><code>InvalidAccessError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>\n      Raised when the requested operation is not valid for the provided key (e.g. invalid\n      encryption algorithm, or invalid key for the specified encryption algorithm*)*.\n    </p>\n  </dd>\n  <dt id=\"operationerror\"><code>OperationError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>\n      Raised when the operation failed for an operation-specific reason (e.g. algorithm\n      parameters of invalid sizes, or AES-GCM plaintext longer than 2³⁹−256 bytes).\n    </p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"supported_algorithms","title":"Supported algorithms","isH3":false,"content":"<p>\n  The Web Crypto API provides four algorithms that support the <code>encrypt()</code> and\n  <code>decrypt()</code> operations.\n</p>\n<p>One of these algorithms — RSA-OAEP — is a <a href=\"/en-US/docs/Glossary/Public-key_cryptography\">public-key cryptosystem</a>.</p>\n<p>\n  The other three encryption algorithms here are all <a href=\"/en-US/docs/Glossary/Symmetric-key_cryptography\">symmetric algorithms</a>, and they're all based on the same underlying\n  cipher, AES (Advanced Encryption Standard). The difference between them is the\n  <a href=\"/en-US/docs/Glossary/Block_cipher_mode_of_operation\">mode</a>. The Web Crypto API supports\n  three different AES modes:\n</p>\n<ul>\n  <li>CTR (Counter Mode)</li>\n  <li>CBC (Cipher Block Chaining)</li>\n  <li>GCM (Galois/Counter Mode)</li>\n</ul>\n<p>\n  It's strongly recommended to use <em>authenticated encryption</em>, which includes\n  checks that the ciphertext has not been modified by an attacker. Authentication helps\n  protect against <em>chosen-ciphertext</em> attacks, in which an attacker can ask the\n  system to decrypt arbitrary messages, and use the result to deduce information about the\n  secret key. While it's possible to add authentication to CTR and CBC modes, they do not\n  provide it by default and when implementing it manually one can easily make minor, but\n  serious mistakes. GCM does provide built-in authentication, and for this reason it's\n  often recommended over the other two AES modes.\n</p>"}},{"type":"prose","value":{"id":"rsa-oaep","title":"RSA-OAEP","isH3":true,"content":"<p>The RSA-OAEP public-key encryption system is specified in <a href=\"https://datatracker.ietf.org/doc/html/rfc3447\" class=\"external\" rel=\" noopener\">RFC 3447</a>.</p>"}},{"type":"prose","value":{"id":"aes-ctr","title":"AES-CTR","isH3":true,"content":"<p>This represents AES in Counter Mode, as specified in <a href=\"https://csrc.nist.gov/publications/detail/sp/800-38a/final\" class=\"external\" rel=\" noopener\">NIST SP800-38A</a>.</p>"}},{"type":"prose","value":{"id":"aes-cbc","title":"AES-CBC","isH3":true,"content":"<p>This represents AES in Cipher Block Chaining Mode, as specified in <a href=\"https://csrc.nist.gov/publications/detail/sp/800-38a/final\" class=\"external\" rel=\" noopener\">NIST SP800-38A</a>.</p>"}},{"type":"prose","value":{"id":"aes-gcm","title":"AES-GCM","isH3":true,"content":"<p>This represents AES in Galois/Counter Mode, as specified in <a href=\"https://csrc.nist.gov/publications/detail/sp/800-38d/final\" class=\"external\" rel=\" noopener\">NIST SP800-38D</a>.</p>\n<p>\n  One major difference between this mode and the others is that GCM is an \"authenticated\"\n  mode, which means that it includes checks that the ciphertext has not been modified by\n  an attacker.\n</p>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> You can <a href=\"https://mdn.github.io/dom-examples/web-crypto/encrypt-decrypt/index.html\" class=\"external\" rel=\" noopener\">try the working examples</a> out on GitHub.</p>\n</div>"}},{"type":"prose","value":{"id":"rsa-oaep_2","title":"RSA-OAEP","isH3":true,"content":"<p>\n  This code fetches the contents of a text box, encodes it for encryption, and encrypts\n  it with using RSA-OAEP. <a href=\"https://github.com/mdn/dom-examples/blob/main/web-crypto/encrypt-decrypt/rsa-oaep.js\" class=\"external\" rel=\" noopener\">See the complete code on GitHub.</a>\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">getMessageEncoding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> messageBox <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".rsa-oaep #message\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> messageBox<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> enc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> enc<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">encryptMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">publicKey</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> encoded <span class=\"token operator\">=</span> <span class=\"token function\">getMessageEncoding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"RSA-OAEP\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    publicKey<span class=\"token punctuation\">,</span>\n    encoded\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"aes-ctr_2","title":"AES-CTR","isH3":true,"content":"<p>\n  This code fetches the contents of a text box, encodes it for encryption, and encrypts\n  it using AES in CTR mode. <a href=\"https://github.com/mdn/dom-examples/blob/main/web-crypto/encrypt-decrypt/aes-ctr.js\" class=\"external\" rel=\" noopener\">See the complete code on GitHub.</a>\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">getMessageEncoding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> messageBox <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".aes-ctr #message\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> messageBox<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> enc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> enc<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">encryptMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> encoded <span class=\"token operator\">=</span> <span class=\"token function\">getMessageEncoding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// counter will be needed for decryption</span>\n  counter <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span><span class=\"token function\">getRandomValues</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"AES-CTR\"</span><span class=\"token punctuation\">,</span>\n      counter<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">64</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    key<span class=\"token punctuation\">,</span>\n    encoded\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> iv <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span><span class=\"token function\">getRandomValues</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> key <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span><span class=\"token function\">getRandomValues</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">12345</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//crypto functions are wrapped in promises so we have to use await and make sure the function that</span>\n<span class=\"token comment\">//contains this code is an async function</span>\n<span class=\"token comment\">//encrypt function wants a cryptokey object</span>\n<span class=\"token keyword\">const</span> key_encoded <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">importKey</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"raw\"</span><span class=\"token punctuation\">,</span>\n  key<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"AES-CTR\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"encrypt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"decrypt\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> encrypted_content <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"AES-CTR\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">counter</span><span class=\"token operator\">:</span> iv<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  key_encoded<span class=\"token punctuation\">,</span>\n  data<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Uint8Array</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>encrypted_content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"aes-cbc_2","title":"AES-CBC","isH3":true,"content":"<p>\n  This code fetches the contents of a text box, encodes it for encryption, and encrypts\n  it using AES in CBC mode. <a href=\"https://github.com/mdn/dom-examples/blob/main/web-crypto/encrypt-decrypt/aes-cbc.js\" class=\"external\" rel=\" noopener\">See the complete code on GitHub.</a>\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">getMessageEncoding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> messageBox <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".aes-cbc #message\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> messageBox<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> enc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> enc<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">encryptMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> encoded <span class=\"token operator\">=</span> <span class=\"token function\">getMessageEncoding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// iv will be needed for decryption</span>\n  iv <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span><span class=\"token function\">getRandomValues</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"AES-CBC\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">iv</span><span class=\"token operator\">:</span> iv<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    key<span class=\"token punctuation\">,</span>\n    encoded<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"aes-gcm_2","title":"AES-GCM","isH3":true,"content":"<p>\n  This code fetches the contents of a text box, encodes it for encryption, and encrypts\n  it using AES in GCM mode. <a href=\"https://github.com/mdn/dom-examples/blob/main/web-crypto/encrypt-decrypt/aes-gcm.js\" class=\"external\" rel=\" noopener\">See the complete code on GitHub.</a>\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">getMessageEncoding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> messageBox <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".aes-gcm #message\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> messageBox<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> enc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> enc<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">encryptMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> encoded <span class=\"token operator\">=</span> <span class=\"token function\">getMessageEncoding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// iv will be needed for decryption</span>\n  <span class=\"token keyword\">const</span> iv <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span><span class=\"token function\">getRandomValues</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"AES-GCM\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">iv</span><span class=\"token operator\">:</span> iv <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    key<span class=\"token punctuation\">,</span>\n    encoded<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/webcrypto/#SubtleCrypto-method-encrypt","title":"Web Cryptography API"}],"query":"api.SubtleCrypto.encrypt"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.SubtleCrypto.encrypt","dataURL":"/en-US/docs/Web/API/SubtleCrypto/encrypt/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/SubtleCrypto/decrypt\"><code>SubtleCrypto.decrypt()</code></a>.</li>\n  <li><a href=\"https://datatracker.ietf.org/doc/html/rfc3447\" class=\"external\" rel=\" noopener\">RFC 3447</a> specifies RSAOAEP.</li>\n  <li><a href=\"https://csrc.nist.gov/publications/detail/sp/800-38a/final\" class=\"external\" rel=\" noopener\">NIST SP800-38A</a> specifies CTR mode.</li>\n  <li><a href=\"https://csrc.nist.gov/publications/detail/sp/800-38a/final\" class=\"external\" rel=\" noopener\">NIST SP800-38A</a> specifies CBC mode.</li>\n  <li><a href=\"https://csrc.nist.gov/publications/detail/sp/800-38d/final\" class=\"external\" rel=\" noopener\">NIST SP800-38D</a> specifies GCM mode.</li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Supported algorithms","id":"supported_algorithms"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The encrypt() method of the SubtleCrypto\n  interface encrypts data.","popularity":0.0032,"modified":"2022-09-13T06:27:50.000Z","other_translations":[{"title":"SubtleCrypto.encrypt()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/web/api/subtlecrypto/encrypt","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/subtlecrypto/encrypt/index.md","last_commit_url":"https://github.com/mdn/content/commit/16e398809d62247dbadc89ff4024a0ffa4781f0e","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/SubtleCrypto","title":"SubtleCrypto"},{"uri":"/en-US/docs/Web/API/SubtleCrypto/encrypt","title":"SubtleCrypto.encrypt()"}],"pageTitle":"SubtleCrypto.encrypt() - Web APIs | MDN","noIndexing":false}}