{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"SubtleCrypto.verify()","mdn_url":"/en-US/docs/Web/API/SubtleCrypto/verify","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Web_Crypto_API\">Web Crypto API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/SubtleCrypto\"><code>SubtleCrypto</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/decrypt\"><code>decrypt()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/deriveBits\"><code>deriveBits()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/deriveKey\"><code>deriveKey()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/digest\"><code>digest()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/encrypt\"><code>encrypt()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/exportKey\"><code>exportKey()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/generateKey\"><code>generateKey()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/importKey\"><code>importKey()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/sign\"><code>sign()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/unwrapKey\"><code>unwrapKey()</code></a></li><li><em><code>verify()</code></em></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/wrapKey\"><code>wrapKey()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Web Crypto API</summary><ol><li><a href=\"/en-US/docs/Web/API/Crypto\"><code>Crypto</code></a></li><li><a href=\"/en-US/docs/Web/API/CryptoKey\"><code>CryptoKey</code></a></li><li><a href=\"/en-US/docs/Web/API/crypto_property\"><code>crypto_property</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard secure\" id=\"sect1\"><p><strong>Secure context:</strong> This feature is available only in <a href=\"/en-US/docs/Web/Security/Secure_Contexts\">secure contexts</a> (HTTPS), in some or all <a href=\"#browser_compatibility\">supporting browsers</a>.</p></div>\n<p>\n  The <strong><code>verify()</code></strong> method of the <a href=\"/en-US/docs/Web/API/SubtleCrypto\"><code>SubtleCrypto</code></a>\n  interface verifies a digital <a href=\"/en-US/docs/Glossary/Signature\">signature</a>.\n</p>\n<p>\n  It takes as its arguments a <a href=\"/en-US/docs/Glossary/Key\">key</a> to verify the signature with, some\n  algorithm-specific parameters, the signature, and the original signed data. It returns a\n  <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> which will be fulfilled with a boolean value\n  indicating whether the signature is valid.\n</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js-nolint notranslate\">verify(algorithm, key, signature, data)\n</pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"algorithm\"><code>algorithm</code></dt>\n  <dd>\n    <p>\n      A string or object defining the algorithm to use, and for some algorithm choices, some extra parameters.\n      The values given for the extra parameters must match those passed into the corresponding <a href=\"/en-US/docs/Web/API/SubtleCrypto/sign\" title=\"sign()\"><code>sign()</code></a> call.\n    </p>\n    <ul>\n      <li>\n        To use <a href=\"/en-US/docs/Web/API/SubtleCrypto/sign#rsassa-pkcs1-v1_5\">RSASSA-PKCS1-v1_5</a>,\n        pass the string <code>\"RSASSA-PKCS1-v1_5\"</code> or an object of the form <code>{ \"name\": \"RSASSA-PKCS1-v1_5\" }</code>.\n      </li>\n      <li>To use <a href=\"/en-US/docs/Web/API/SubtleCrypto/sign#rsa-pss\">RSA-PSS</a>, pass an <a href=\"/en-US/docs/Web/API/RsaPssParams\"><code>RsaPssParams</code></a> object.</li>\n      <li>To use <a href=\"/en-US/docs/Web/API/SubtleCrypto/sign#ecdsa\">ECDSA</a>, pass an <a href=\"/en-US/docs/Web/API/EcdsaParams\"><code>EcdsaParams</code></a> object.</li>\n      <li>To use <a href=\"/en-US/docs/Web/API/SubtleCrypto/sign#hmac\">HMAC</a>, pass the string <code>\"HMAC\"</code> or an object of the form <code>{ \"name\": \"HMAC\" }</code>.</li>\n    </ul>\n  </dd>\n  <dt id=\"key\"><code>key</code></dt>\n  <dd>\n    <p>\n      A <a href=\"/en-US/docs/Web/API/CryptoKey\"><code>CryptoKey</code></a> containing the key that will be used to verify the signature.\n      It is the secret key for a symmetric algorithm and the public key for a public-key system.\n    </p>\n  </dd>\n  <dt id=\"signature\"><code>signature</code></dt>\n  <dd>\n    <p>A <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> containing the <a href=\"/en-US/docs/Glossary/Signature\">signature</a> to verify.</p>\n  </dd>\n  <dt id=\"data\"><code>data</code></dt>\n  <dd>\n    <p>A <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> containing the data whose signature is to be verified.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>\n  A <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> that fulfills with a\n  boolean value: <code>true</code> if the signature is valid, <code>false</code>\n  otherwise.\n</p>"}},{"type":"prose","value":{"id":"exceptions","title":"Exceptions","isH3":true,"content":"<p>The promise is rejected when the following exception is encountered:</p>\n<dl>\n  <dt id=\"invalidaccesserror\"><code>InvalidAccessError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>\n      Raised when the encryption key is not a key for the requested verifying algorithm or\n      when trying to use an algorithm that is either unknown or isn't suitable for a verify\n      operation.\n    </p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"supported_algorithms","title":"Supported algorithms","isH3":false,"content":"<p>\n  The <code>verify()</code> method supports the same algorithms as the\n  <a href=\"/en-US/docs/Web/API/SubtleCrypto/sign#supported_algorithms\"><code>sign()</code></a>\n  method.\n</p>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> You can <a href=\"https://mdn.github.io/dom-examples/web-crypto/sign-verify/index.html\" class=\"external\" rel=\" noopener\">try the working examples</a> out on GitHub.</p>\n</div>"}},{"type":"prose","value":{"id":"rsassa-pkcs1-v1_5","title":"RSASSA-PKCS1-v1_5","isH3":true,"content":"<p>\n  This code uses a public key to verify a signature.\n  <a href=\"https://github.com/mdn/dom-examples/blob/main/web-crypto/sign-verify/rsassa-pkcs1.js\" class=\"external\" rel=\" noopener\">See the complete code on GitHub.</a>\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/*\nFetch the contents of the \"message\" textbox, and encode it\nin a form we can use for sign operation.\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getMessageEncoding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> messageBox <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".rsassa-pkcs1 #message\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> messageBox<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> enc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> enc<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\nFetch the encoded message-to-sign and verify it against the stored signature.\n* If it checks out, set the \"valid\" class on the signature.\n* Otherwise set the \"invalid\" class.\n*/</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">verifyMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">publicKey</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> signatureValue <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".rsassa-pkcs1 .signature-value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  signatureValue<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"valid\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"invalid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> encoded <span class=\"token operator\">=</span> <span class=\"token function\">getMessageEncoding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"RSASSA-PKCS1-v1_5\"</span><span class=\"token punctuation\">,</span>\n    publicKey<span class=\"token punctuation\">,</span>\n    signature<span class=\"token punctuation\">,</span>\n    encoded\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  signatureValue<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">?</span> <span class=\"token string\">\"valid\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"invalid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"rsa-pss","title":"RSA-PSS","isH3":true,"content":"<p>\n  This code uses a public key to verify a signature.\n  <a href=\"https://github.com/mdn/dom-examples/blob/main/web-crypto/sign-verify/rsa-pss.js\" class=\"external\" rel=\" noopener\">See the complete code on GitHub.</a>\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/*\nFetch the contents of the \"message\" textbox, and encode it\nin a form we can use for sign operation.\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getMessageEncoding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> messageBox <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".rsa-pss #message\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> messageBox<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> enc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> enc<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\nFetch the encoded message-to-sign and verify it against the stored signature.\n* If it checks out, set the \"valid\" class on the signature.\n* Otherwise set the \"invalid\" class.\n*/</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">verifyMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">publicKey</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> signatureValue <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".rsa-pss .signature-value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  signatureValue<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"valid\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"invalid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> encoded <span class=\"token operator\">=</span> <span class=\"token function\">getMessageEncoding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"RSA-PSS\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">saltLength</span><span class=\"token operator\">:</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    publicKey<span class=\"token punctuation\">,</span>\n    signature<span class=\"token punctuation\">,</span>\n    encoded\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  signatureValue<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">?</span> <span class=\"token string\">\"valid\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"invalid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"ecdsa","title":"ECDSA","isH3":true,"content":"<p>\n  This code uses a public key to verify a signature.\n  <a href=\"https://github.com/mdn/dom-examples/blob/main/web-crypto/sign-verify/ecdsa.js\" class=\"external\" rel=\" noopener\">See the complete code on GitHub.</a>\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/*\nFetch the contents of the \"message\" textbox, and encode it\nin a form we can use for sign operation.\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getMessageEncoding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> messageBox <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".ecdsa #message\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> messageBox<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> enc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> enc<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\nFetch the encoded message-to-sign and verify it against the stored signature.\n* If it checks out, set the \"valid\" class on the signature.\n* Otherwise set the \"invalid\" class.\n*/</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">verifyMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">publicKey</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> signatureValue <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".ecdsa .signature-value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  signatureValue<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"valid\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"invalid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> encoded <span class=\"token operator\">=</span> <span class=\"token function\">getMessageEncoding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ECDSA\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SHA-384\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    publicKey<span class=\"token punctuation\">,</span>\n    signature<span class=\"token punctuation\">,</span>\n    encoded\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  signatureValue<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">?</span> <span class=\"token string\">\"valid\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"invalid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"hmac","title":"HMAC","isH3":true,"content":"<p>\n  This code uses a secret key to verify a signature.\n  <a href=\"https://github.com/mdn/dom-examples/blob/main/web-crypto/sign-verify/hmac.js\" class=\"external\" rel=\" noopener\">See the complete code on GitHub.</a>\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/*\nFetch the contents of the \"message\" textbox, and encode it\nin a form we can use for sign operation.\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getMessageEncoding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> messageBox <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".hmac #message\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> messageBox<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">let</span> enc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> enc<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\nFetch the encoded message-to-sign and verify it against the stored signature.\n* If it checks out, set the \"valid\" class on the signature.\n* Otherwise set the \"invalid\" class.\n*/</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">verifyMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> signatureValue <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".hmac .signature-value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   signatureValue<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"valid\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"invalid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">let</span> encoded <span class=\"token operator\">=</span> <span class=\"token function\">getMessageEncoding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>\n     <span class=\"token string\">\"HMAC\"</span><span class=\"token punctuation\">,</span>\n     key<span class=\"token punctuation\">,</span>\n     signature<span class=\"token punctuation\">,</span>\n     encoded\n   <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   signatureValue<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">?</span> <span class=\"token string\">\"valid\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"invalid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/webcrypto/#SubtleCrypto-method-verify","title":"Web Cryptography API"}],"query":"api.SubtleCrypto.verify"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.SubtleCrypto.verify","dataURL":"/en-US/docs/Web/API/SubtleCrypto/verify/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/SubtleCrypto/sign\"><code>SubtleCrypto.sign()</code></a>.</li>\n  <li><a href=\"https://datatracker.ietf.org/doc/html/rfc3447\" class=\"external\" rel=\" noopener\">RFC 3447</a> specifies RSASSA-PKCS1-v1_5.</li>\n  <li><a href=\"https://datatracker.ietf.org/doc/html/rfc3447\" class=\"external\" rel=\" noopener\">RFC 3447</a> specifies RSA-PSS.</li>\n  <li><a href=\"https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf\" class=\"external\" rel=\" noopener\">FIPS-186</a> specifies ECDSA.</li>\n  <li><a href=\"https://csrc.nist.gov/csrc/media/publications/fips/198/1/final/documents/fips-198-1_final.pdf\" class=\"external\" rel=\" noopener\">FIPS 198-1</a> specifies HMAC.</li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Supported algorithms","id":"supported_algorithms"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The verify() method of the SubtleCrypto\n  interface verifies a digital signature.","popularity":0.0006,"modified":"2022-09-13T06:27:50.000Z","source":{"folder":"en-us/web/api/subtlecrypto/verify","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/subtlecrypto/verify/index.md","last_commit_url":"https://github.com/mdn/content/commit/16e398809d62247dbadc89ff4024a0ffa4781f0e","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/SubtleCrypto","title":"SubtleCrypto"},{"uri":"/en-US/docs/Web/API/SubtleCrypto/verify","title":"SubtleCrypto.verify()"}],"pageTitle":"SubtleCrypto.verify() - Web APIs | MDN","noIndexing":false}}