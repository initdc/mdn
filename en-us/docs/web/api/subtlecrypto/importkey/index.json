{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"SubtleCrypto.importKey()","mdn_url":"/en-US/docs/Web/API/SubtleCrypto/importKey","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Web_Crypto_API\">Web Crypto API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/SubtleCrypto\"><code>SubtleCrypto</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/decrypt\"><code>decrypt()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/deriveBits\"><code>deriveBits()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/deriveKey\"><code>deriveKey()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/digest\"><code>digest()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/encrypt\"><code>encrypt()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/exportKey\"><code>exportKey()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/generateKey\"><code>generateKey()</code></a></li><li><em><code>importKey()</code></em></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/sign\"><code>sign()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/unwrapKey\"><code>unwrapKey()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/verify\"><code>verify()</code></a></li><li><a href=\"/en-US/docs/Web/API/SubtleCrypto/wrapKey\"><code>wrapKey()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Web Crypto API</summary><ol><li><a href=\"/en-US/docs/Web/API/Crypto\"><code>Crypto</code></a></li><li><a href=\"/en-US/docs/Web/API/CryptoKey\"><code>CryptoKey</code></a></li><li><a href=\"/en-US/docs/Web/API/crypto_property\"><code>crypto_property</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard secure\" id=\"sect1\"><p><strong>Secure context:</strong> This feature is available only in <a href=\"/en-US/docs/Web/Security/Secure_Contexts\">secure contexts</a> (HTTPS), in some or all <a href=\"#browser_compatibility\">supporting browsers</a>.</p></div>\n<p>\n  The <strong><code>importKey()</code></strong> method of the <a href=\"/en-US/docs/Web/API/SubtleCrypto\"><code>SubtleCrypto</code></a>\n  interface imports a key: that is, it takes as input a key in an external, portable\n  format and gives you a <a href=\"/en-US/docs/Web/API/CryptoKey\"><code>CryptoKey</code></a> object that you can use in the <a href=\"/en-US/docs/Web/API/Web_Crypto_API\">Web Crypto API</a>.\n</p>\n<p>The function accepts several import formats: see <a href=\"#supported_formats\">Supported formats</a> for details.</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js-nolint notranslate\">importKey(format, keyData, algorithm, extractable, keyUsages)\n</pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"format\"><code>format</code></dt>\n  <dd>\n    <p>A string describing the data format of the key to import. It can be one of the following:</p>\n    <ul>\n      <li><code>raw</code>: <a href=\"#raw\">Raw</a> format.</li>\n      <li><code>pkcs8</code>: <a href=\"#pkcs_8\">PKCS #8</a> format.</li>\n      <li><code>spki</code>: <a href=\"#subjectpublickeyinfo\">SubjectPublicKeyInfo</a> format.</li>\n      <li><code>jwk</code>: <a href=\"#json_web_key\">JSON Web Key</a> format.</li>\n    </ul>\n  </dd>\n  <dt id=\"keydata\"><code>keyData</code></dt>\n  <dd>\n    <p>\n      An <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>, a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">TypedArray</a>,\n      a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>, or a <code>JSONWebKey</code> object containing the key in\n      the given format.\n    </p>\n  </dd>\n  <dt id=\"algorithm\"><code>algorithm</code></dt>\n  <dd>\n    <p>An object defining the type of key to import and providing extra algorithm-specific parameters.</p>\n    <ul>\n      <li>\n        For <a href=\"/en-US/docs/Web/API/SubtleCrypto/sign#rsassa-pkcs1-v1_5\">RSASSA-PKCS1-v1_5</a>, <a href=\"/en-US/docs/Web/API/SubtleCrypto/sign#rsa-pss\">RSA-PSS</a>,\n        or <a href=\"/en-US/docs/Web/API/SubtleCrypto/encrypt#rsa-oaep\">RSA-OAEP</a>:\n        Pass an <a href=\"/en-US/docs/Web/API/RsaHashedImportParams\"><code>RsaHashedImportParams</code></a> object.\n      </li>\n      <li>\n        For <a href=\"/en-US/docs/Web/API/SubtleCrypto/sign#ecdsa\">ECDSA</a> or <a href=\"/en-US/docs/Web/API/SubtleCrypto/deriveKey#ecdh\">ECDH</a>:\n        Pass an <a href=\"/en-US/docs/Web/API/EcKeyImportParams\"><code>EcKeyImportParams</code></a> object.\n      </li>\n      <li>\n        For <a href=\"/en-US/docs/Web/API/SubtleCrypto/sign#hmac\">HMAC</a>:\n        Pass an <a href=\"/en-US/docs/Web/API/HmacImportParams\"><code>HmacImportParams</code></a> object.\n      </li>\n      <li>\n        For <a href=\"/en-US/docs/Web/API/SubtleCrypto/encrypt#aes-ctr\">AES-CTR</a>, <a href=\"/en-US/docs/Web/API/SubtleCrypto/encrypt#aes-cbc\">AES-CBC</a>,\n        <a href=\"/en-US/docs/Web/API/SubtleCrypto/encrypt#aes-gcm\">AES-GCM</a>, or <a href=\"/en-US/docs/Web/API/SubtleCrypto/wrapKey#aes-kw\">AES-KW</a>):\n        Pass the string identifying the algorithm or an object of the form <code>{ \"name\": ALGORITHM }</code>, where <code>ALGORITHM</code> is the name of the algorithm.\n      </li>\n      <li>For <a href=\"/en-US/docs/Web/API/SubtleCrypto/deriveKey#pbkdf2\">PBKDF2</a>: Pass the string <code>PBKDF2</code>.</li>\n      <li>For <a href=\"/en-US/docs/Web/API/SubtleCrypto/deriveKey#hkdf\">HKDF</a>: Pass the string <code>HKDF</code>.</li>\n    </ul>\n  </dd>\n  <dt id=\"extractable\"><code>extractable</code></dt>\n  <dd>\n    <p>\n      A boolean value indicating whether it will be possible to export the key\n      using <a href=\"/en-US/docs/Web/API/SubtleCrypto/exportKey\"><code>SubtleCrypto.exportKey()</code></a> or <a href=\"/en-US/docs/Web/API/SubtleCrypto/wrapKey\"><code>SubtleCrypto.wrapKey()</code></a>.\n    </p>\n  </dd>\n  <dt id=\"keyusages\"><code>keyUsages</code></dt>\n  <dd>\n    <p>An <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> indicating what can be done with the key. Possible array values are:</p>\n    <ul>\n      <li><code>encrypt</code>: The key may be used to <a href=\"/en-US/docs/Web/API/SubtleCrypto/encrypt\" title=\"encrypt\"><code>encrypt</code></a> messages.</li>\n      <li><code>decrypt</code>: The key may be used to <a href=\"/en-US/docs/Web/API/SubtleCrypto/decrypt\" title=\"decrypt\"><code>decrypt</code></a> messages.</li>\n      <li><code>sign</code>: The key may be used to <a href=\"/en-US/docs/Web/API/SubtleCrypto/sign\" title=\"sign\"><code>sign</code></a> messages.</li>\n      <li><code>verify</code>: The key may be used to <a href=\"/en-US/docs/Web/API/SubtleCrypto/verify\" title=\"verify\"><code>verify</code></a> signatures.</li>\n      <li><code>deriveKey</code>: The key may be used in <a href=\"/en-US/docs/Web/API/SubtleCrypto/deriveKey\" title=\"deriving a new key\"><code>deriving a new key</code></a>.</li>\n      <li><code>deriveBits</code>: The key may be used in <a href=\"/en-US/docs/Web/API/SubtleCrypto/deriveBits\" title=\"deriving bits\"><code>deriving bits</code></a>.</li>\n      <li><code>wrapKey</code>: The key may be used to <a href=\"/en-US/docs/Web/API/SubtleCrypto/wrapKey\" title=\"wrap a key\"><code>wrap a key</code></a>.</li>\n      <li><code>unwrapKey</code>: The key may be used to <a href=\"/en-US/docs/Web/API/SubtleCrypto/unwrapKey\" title=\"unwrap a key\"><code>unwrap a key</code></a>.</li>\n    </ul>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>\n  A <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>\n  that fulfills with the imported key as a <a href=\"/en-US/docs/Web/API/CryptoKey\"><code>CryptoKey</code></a> object.\n</p>"}},{"type":"prose","value":{"id":"exceptions","title":"Exceptions","isH3":true,"content":"<p>The promise is rejected when one of the following exceptions is encountered:</p>\n<dl>\n  <dt id=\"syntaxerror\"><code>SyntaxError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>\n      Raised when <code>keyUsages</code> is empty but the unwrapped key is of\n      type <code>secret</code> or <code>private</code>.\n    </p>\n  </dd>\n  <dt id=\"typeerror\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a></dt>\n  <dd>\n    <p>\n      Raised when trying to use an invalid format or if the <code>keyData</code>\n      is not suited for that format.\n    </p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"supported_formats","title":"Supported formats","isH3":false,"content":"<p>\n  This API supports four different key import/export formats: Raw, PKCS #8,\n  SubjectPublicKeyInfo, and JSON Web Key.\n</p>"}},{"type":"prose","value":{"id":"raw","title":"Raw","isH3":true,"content":"<p>\n  You can use this format to import or export AES or HMAC secret keys, or Elliptic Curve\n  public keys.\n</p>\n<p>\n  In this format the key is supplied as an\n  <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>\n  containing the raw bytes for the key.\n</p>"}},{"type":"prose","value":{"id":"pkcs_8","title":"PKCS #8","isH3":true,"content":"<p>You can use this format to import or export RSA or Elliptic Curve private keys.</p>\n<p>\n  The PKCS #8 format is defined in <a href=\"https://datatracker.ietf.org/doc/html/rfc5208\" class=\"external\" rel=\" noopener\">RFC 5208</a>,\n  using the <a href=\"https://en.wikipedia.org/wiki/Abstract_Syntax_Notation_One\" class=\"external\" rel=\" noopener\">ASN.1 notation</a>:\n</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">PrivateKeyInfo ::= SEQUENCE {\n    version                   Version,\n    privateKeyAlgorithm       PrivateKeyAlgorithmIdentifier,\n    privateKey                PrivateKey,\n    attributes           [0]  IMPLICIT Attributes OPTIONAL }\n</pre></div>\n<p>\n  The <code>importKey()</code> method expects to receive this object as an\n  <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>\n  containing the <a href=\"https://luca.ntop.org/Teaching/Appunti/asn1.html\" class=\"external\" rel=\" noopener\">DER-encoded</a>\n  form of the <code>PrivateKeyInfo</code>. DER is a set of rules for encoding ASN.1\n  structures into a binary form.\n</p>\n<p>\n  You are most likely to encounter this object in <a href=\"https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail\" class=\"external\" rel=\" noopener\">PEM format</a>. PEM format\n  is a way to encode binary data in ASCII. It consists of a header and a footer, and in\n  between, the <a href=\"/en-US/docs/Glossary/Base64\">base64-encoded</a>\n  binary data. A PEM-encoded <code>PrivateKeyInfo</code> looks like this:\n</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">-----BEGIN PRIVATE KEY-----\nMIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGeMIGbAgEBBDAU9BD0jxDfF5OV380z\n9VIEUN2W5kJDZ3hbuaDenCxLiAMsoquKTfFaou71eLdN0TShZANiAARMUhCee/cp\nxmjGc1roj0D0k6VlUqtA+JVCWigXcIAukOeTHCngZDKCrD4PkXDBvbciJdZKvO+l\nml2FIkoovZh/8yeTKmjUMb804g6OmjUc9vVojCRV0YdaSmYkkJMJbLg=\n-----END PRIVATE KEY-----\n</pre></div>\n<p>\n  To get this into a format you can give to <code>importKey()</code> you need to do two\n  things:\n</p>\n<ul>\n  <li>\n    base64-decode the part between header and footer, using\n    <a href=\"/en-US/docs/Web/API/atob\"><code>window.atob()</code></a>.\n  </li>\n  <li>\n    convert the resulting string into an\n    <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>.\n  </li>\n</ul>\n<p>See the <a href=\"#examples\">Examples</a> section for more concrete guidance.</p>"}},{"type":"prose","value":{"id":"subjectpublickeyinfo","title":"SubjectPublicKeyInfo","isH3":true,"content":"<p>You can use this format to import or export RSA or Elliptic Curve public keys.</p>\n<p>\n  <code>SubjectPublicKey</code> is defined in <a href=\"https://datatracker.ietf.org/doc/html/rfc5280#section-4.1\" class=\"external\" rel=\" noopener\">RFC 5280, Section 4.1</a> using\n  the <a href=\"https://en.wikipedia.org/wiki/Abstract_Syntax_Notation_One\" class=\"external\" rel=\" noopener\">ASN.1 notation:</a>\n</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">SubjectPublicKeyInfo  ::=  SEQUENCE  {\n    algorithm            AlgorithmIdentifier,\n    subjectPublicKey     BIT STRING  }\n</pre></div>\n<p>\n  Just like <a href=\"#pkcs_8\">PKCS #8</a>, the <code>importKey()</code> method expects to\n  receive this object as an\n  <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>\n  containing the <a href=\"https://luca.ntop.org/Teaching/Appunti/asn1.html\" class=\"external\" rel=\" noopener\">DER-encoded</a>\n  form of the <code>SubjectPublicKeyInfo</code>.\n</p>\n<p>\n  Again, you are most likely to encounter this object in <a href=\"https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail\" class=\"external\" rel=\" noopener\">PEM format</a>.\n  A PEM-encoded <code>SubjectPublicKeyInfo</code> looks like this:\n</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3j+HgSHUnc7F6XzvEbD0\nr3M5JNy+/kabiJVu8IU1ERAl3Osi38VgiMzjDBDOrFxVzNNzl+SXAHwXIV5BHiXL\nCQ6qhwYsDgH6OqgKIwiALra/wNH4UHxj1Or/iyAkjHRR/kGhUtjyVCjzvaQaDpJW\n2G+syd1ui0B6kJov2CRUWiPwpff8hBfVWv8q9Yc2yD5hCnykVL0iAiyn+SDAk/rv\n8dC5eIlzCI4efUCbyG4c9O88Qz7bS14DxSfaPTy8P/TWoihVVjLaDF743LgM/JLq\nCDPUBUA3HLsZUhKm3BbSkd7Q9Ngkjv3+yByo4/fL+fkYRa8j9Ypa2N0Iw53LFb3B\ngQIDAQAB\n-----END PUBLIC KEY-----\n</pre></div>\n<p>\n  Just as with <a href=\"#pkcs_8\">PKCS #8</a>, to get this into a format you can give to\n  <code>importKey()</code> you need to do two things:\n</p>\n<ul>\n  <li>\n    base64-decode the part between header and footer, using\n    <a href=\"/en-US/docs/Web/API/atob\"><code>window.atob()</code></a>.\n  </li>\n  <li>\n    convert the resulting string into an\n    <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>.\n  </li>\n</ul>\n<p>See the <a href=\"#examples\">Examples</a> section for more concrete guidance.</p>"}},{"type":"prose","value":{"id":"json_web_key","title":"JSON Web Key","isH3":true,"content":"<p>\n  You can use JSON Web Key format to import or export RSA or Elliptic Curve public or\n  private keys, as well as AES and HMAC secret keys.\n</p>\n<p>\n  JSON Web Key format is defined in <a href=\"https://datatracker.ietf.org/doc/html/rfc7517\" class=\"external\" rel=\" noopener\">RFC 7517</a>.\n  It describes a way to represent public, private, and secret keys as JSON objects.\n</p>\n<p>A JSON Web Key looks something like this (this is an EC private key):</p>\n<div class=\"code-example\"><pre class=\"brush: json notranslate\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"crv\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"P-384\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"d\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"wouCtU7Nw4E8_7n5C1-xBjB4xqSb_liZhYMsy8MGgxUny6Q8NCoH9xSiviwLFfK_\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"ext\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"key_ops\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"sign\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"kty\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"EC\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"x\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SzrRXmyI8VWFJg1dPUNbFcc9jZvjZEfH7ulKI1UkXAltd7RGWrcfFxqyGPcwu6AQ\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"y\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hHUag3OvDzEr0uUQND4PXHQTXP5IDGdYhJhL-WLKjnGjQAw0rNGy5V29-aV-yseW\"</span>\n<span class=\"token punctuation\">}</span>;\n</code></pre></div>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> You can <a href=\"https://mdn.github.io/dom-examples/web-crypto/import-key/index.html\" class=\"external\" rel=\" noopener\">try the working examples</a> on GitHub.</p>\n</div>"}},{"type":"prose","value":{"id":"raw_import","title":"Raw import","isH3":true,"content":"<p>\n  This example imports an AES key from an <code>ArrayBuffer</code> containing the bytes\n  to use. <a href=\"https://github.com/mdn/dom-examples/blob/main/web-crypto/import-key/raw.js\" class=\"external\" rel=\" noopener\">See the complete code on GitHub.</a>\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> rawKey <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span><span class=\"token function\">getRandomValues</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\nImport an AES secret key from an ArrayBuffer containing the raw bytes.\nTakes an ArrayBuffer string containing the bytes, and returns a Promise\nthat will resolve to a CryptoKey representing the secret key.\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">importSecretKey</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rawKey</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">importKey</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"raw\"</span><span class=\"token punctuation\">,</span>\n    rawKey<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"AES-GCM\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"encrypt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"decrypt\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"pkcs_8_import","title":"PKCS #8 import","isH3":true,"content":"<p>\n  This example imports an RSA private signing key from a PEM-encoded PKCS #8 object.\n  <a href=\"https://github.com/mdn/dom-examples/blob/main/web-crypto/import-key/pkcs8.js\" class=\"external\" rel=\" noopener\">See the complete code on GitHub.</a>\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/*\nConvert a string into an ArrayBuffer\nfrom https://developers.google.com/web/updates/2012/06/How-to-convert-ArrayBuffer-to-and-from-String\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">str2ab</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> buf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBuffer</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> bufView <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> strLen <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> strLen<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    bufView<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> buf<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> pemEncodedKey <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDD0tPV/du2vftjvXj1t/gXTK39sNBVrOAEb/jKzXae+Xa0H+3LhZaQIQNMfACiBSgIfZUvEGb+7TqXWQpoLoFR/R7MvGWcSk98JyrVtveD8ZmZYyItSY7m2hcasqAFiKyOouV5vzyRe87/lEyzzBpF3bQQ4IDaQu+K9Hj5fKuU6rrOeOhsdnJc+VdDQLScHxvMoLZ9Vtt+oK9J4/tOLwr4CG8khDlBURcBY6gPcLo3dPU09SW+6ctX2cX4mkXx6O/0mmdTmacr/vu50KdRMleFeZYOWPAEhhMfywybTuzBiPVIZVP8WFCSKNMbfi1S9A9PdBqnebwwHhX3/hsEBt2BAgMBAAECggEABEI1P6nf6Zs7mJlyBDv+Pfl5rjL2cOqLy6TovvZVblMkCPpJyFuNIPDK2tK2i897ZaXfhPDBIKmllM2Hq6jZQKB110OAnTPDg0JxzMiIHPs32S1d/KilHjGff4Hjd4NXp1l1Dp8BUPOllorR2TYm2x6dcCGFw9lhTr8O03Qp4hjn84VjGIWADYCk83mgS4nRsnHkdiqYnWx1AjKlY51yEK6RcrDMi0Th2RXrrINoC35sVv+APt2rkoMGi52RwTEseA1KZGFrxjq61ReJif6p2VXEcvHeX6CWLx014LGk43z6Q28P6HgeEVEfIjyqCUea5Du/mYb/QsRSCosXLxBqwQKBgQD1+fdC9ZiMrVI+km7Nx2CKBn8rJrDmUh5SbXn2MYJdrUd8bYNnZkCgKMgxVXsvJrbmVOrby2txOiqudZkk5mD3E5O/QZWPWQLgRu8ueYNpobAX9NRgNfZ7rZD+81vh5MfZiXfuZOuzv29iZhU0oqyZ9y75eHkLdrerNkwYOe5aUQKBgQDLzapDi1NxkBgsj9iiO4KUa7jvD4JjRqFy4Zhj/jbQvlvM0F/uFp7sxVcHGx4r11C+6iCbhX4u+Zuu0HGjT4d+hNXmgGyxR8fIUVxOlOtDkVJa5sOBZK73/9/MBeKusdmJPRhalZQfMUJRWIoEVDMhfg3tW/rBj5RYAtP2dTVUMQKBgDs8yr52dRmT+BWXoFWwaWB0NhYHSFz/c8v4D4Ip5DJ5M5kUqquxJWksySGQa40sbqnD05fBQovPLU48hfgr/zghn9hUjBcsoZOvoZR4sRw0UztBvA+7jzOz1hKAOyWIulR6Vca0yUrNlJ6G5R56+sRNkiOETupi2dLCzcqb0PoxAoGAZyNHvTLvIZN4iGSrjz5qkM4LIwBIThFadxbv1fq6pt0O/BGf2o+cEdq0diYlGK64cEVwBwSBnSg4vzlBqRIAUejLjwEDAJyA4EE8Y5A9l04dzV7nJb5cRak6CrgXxay/mBJRFtaHxVlaZGxYPGSYE6UFS0+3EOmmevvDZQBf4qECgYEA0ZF6Vavz28+8wLO6SP3w8NmpHk7K9tGEvUfQ30SgDx4G7qPIgfPrbB4OP/E0qCfsIImi3sCPpjvUMQdVVZyPOIMuB+rV3ZOxkrzxEUOrpOpR48FZbL7RN90yRQsAsrp9e4iv8QwB3VxLe7X0TDqqnRyqrc/osGzuS2ZcHOKmCU8=\n-----END PRIVATE KEY-----</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\nImport a PEM encoded RSA private key, to use for RSA-PSS signing.\nTakes a string containing the PEM encoded key, and returns a Promise\nthat will resolve to a CryptoKey representing the private key.\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">importPrivateKey</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pem</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// fetch the part of the PEM string between header and footer</span>\n  <span class=\"token keyword\">const</span> pemHeader <span class=\"token operator\">=</span> <span class=\"token string\">\"-----BEGIN PRIVATE KEY-----\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> pemFooter <span class=\"token operator\">=</span> <span class=\"token string\">\"-----END PRIVATE KEY-----\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> pemContents <span class=\"token operator\">=</span> pem<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>pemHeader<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> pem<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> pemFooter<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// base64 decode the string to get the binary data</span>\n  <span class=\"token keyword\">const</span> binaryDerString <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">atob</span><span class=\"token punctuation\">(</span>pemContents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// convert from a binary string to an ArrayBuffer</span>\n  <span class=\"token keyword\">const</span> binaryDer <span class=\"token operator\">=</span> <span class=\"token function\">str2ab</span><span class=\"token punctuation\">(</span>binaryDerString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">importKey</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"pkcs8\"</span><span class=\"token punctuation\">,</span>\n    binaryDer<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"RSA-PSS\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SHA-256\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"sign\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"subjectpublickeyinfo_import","title":"SubjectPublicKeyInfo import","isH3":true,"content":"<p>\n  This example imports an RSA public encryption key from a PEM-encoded\n  SubjectPublicKeyInfo object. <a href=\"https://github.com/mdn/dom-examples/blob/main/web-crypto/import-key/spki.js\" class=\"external\" rel=\" noopener\">See the complete code on GitHub.</a>\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token comment\">// from https://developers.google.com/web/updates/2012/06/How-to-convert-ArrayBuffer-to-and-from-String</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">str2ab</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> buf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBuffer</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> bufView <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> strLen <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> strLen<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      bufView<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> buf<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> pemEncodedKey <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAy3Xo3U13dc+xojwQYWoJLCbOQ5fOVY8LlnqcJm1W1BFtxIhOAJWohiHuIRMctv7dzx47TLlmARSKvTRjd0dF92jx/xY20Lz+DXp8YL5yUWAFgA3XkO3LSJgEOex10NB8jfkmgSb7QIudTVvbbUDfd5fwIBmCtaCwWx7NyeWWDb7A9cFxj7EjRdrDaK3ux/ToMLHFXVLqSL341TkCf4ZQoz96RFPUGPPLOfvN0x66CM1PQCkdhzjE6U5XGE964ZkkYUPPsy6Dcie4obhW4vDjgUmLzv0z7UD010RLIneUgDE2FqBfY/C+uWigNPBPkkQ+Bv/UigS6dHqTCVeD5wgyBQIDAQAB\n-----END PUBLIC KEY-----</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">importRsaKey</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pem</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// fetch the part of the PEM string between header and footer</span>\n    <span class=\"token keyword\">const</span> pemHeader <span class=\"token operator\">=</span> <span class=\"token string\">\"-----BEGIN PUBLIC KEY-----\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> pemFooter <span class=\"token operator\">=</span> <span class=\"token string\">\"-----END PUBLIC KEY-----\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> pemContents <span class=\"token operator\">=</span> pem<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>pemHeader<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> pem<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> pemFooter<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// base64 decode the string to get the binary data</span>\n    <span class=\"token keyword\">const</span> binaryDerString <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">atob</span><span class=\"token punctuation\">(</span>pemContents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// convert from a binary string to an ArrayBuffer</span>\n    <span class=\"token keyword\">const</span> binaryDer <span class=\"token operator\">=</span> <span class=\"token function\">str2ab</span><span class=\"token punctuation\">(</span>binaryDerString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">importKey</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"spki\"</span><span class=\"token punctuation\">,</span>\n      binaryDer<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"RSA-OAEP\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SHA-256\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">[</span><span class=\"token string\">\"encrypt\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"json_web_key_import","title":"JSON Web Key import","isH3":true,"content":"<p>\n  This code imports an ECDSA private signing key, given a JSON Web Key object that\n  represents it. <a href=\"https://github.com/mdn/dom-examples/blob/main/web-crypto/import-key/jwk.js\" class=\"external\" rel=\" noopener\">See the complete code on GitHub.</a>\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> jwkEcKey <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"crv\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"P-384\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"d\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"wouCtU7Nw4E8_7n5C1-xBjB4xqSb_liZhYMsy8MGgxUny6Q8NCoH9xSiviwLFfK_\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"ext\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"key_ops\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"sign\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"kty\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"EC\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"x\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SzrRXmyI8VWFJg1dPUNbFcc9jZvjZEfH7ulKI1UkXAltd7RGWrcfFxqyGPcwu6AQ\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"y\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hHUag3OvDzEr0uUQND4PXHQTXP5IDGdYhJhL-WLKjnGjQAw0rNGy5V29-aV-yseW\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\nImport a PEM encoded RSA private key, to use for RSA-PSS signing.\nTakes a string containing the PEM encoded key, and returns a Promise\nthat will resolve to a CryptoKey representing the private key.\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">importPrivateKey</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">jwk</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">importKey</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"jwk\"</span><span class=\"token punctuation\">,</span>\n    jwk<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ECDSA\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">namedCurve</span><span class=\"token operator\">:</span> <span class=\"token string\">\"P-384\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"sign\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/webcrypto/#SubtleCrypto-method-importKey","title":"Web Cryptography API"}],"query":"api.SubtleCrypto.importKey"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.SubtleCrypto.importKey","dataURL":"/en-US/docs/Web/API/SubtleCrypto/importKey/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/SubtleCrypto/exportKey\"><code>SubtleCrypto.exportKey()</code></a></li>\n  <li><a href=\"https://datatracker.ietf.org/doc/html/rfc5208\" class=\"external\" rel=\" noopener\">PKCS #8 format</a>.</li>\n  <li><a href=\"https://datatracker.ietf.org/doc/html/rfc5280#section-4.1\" class=\"external\" rel=\" noopener\">SubjectPublicKeyInfo format</a>.</li>\n  <li><a href=\"https://datatracker.ietf.org/doc/html/rfc7517\" class=\"external\" rel=\" noopener\">JSON Web Key format</a>.</li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Supported formats","id":"supported_formats"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The importKey() method of the SubtleCrypto\n  interface imports a key: that is, it takes as input a key in an external, portable\n  format and gives you a CryptoKey object that you can use in the Web Crypto API.","popularity":0.0019,"modified":"2022-09-13T06:27:50.000Z","other_translations":[{"title":"SubtleCrypto.importKey()","locale":"pt-BR","native":"Português (do Brasil)"}],"source":{"folder":"en-us/web/api/subtlecrypto/importkey","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/subtlecrypto/importkey/index.md","last_commit_url":"https://github.com/mdn/content/commit/16e398809d62247dbadc89ff4024a0ffa4781f0e","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/SubtleCrypto","title":"SubtleCrypto"},{"uri":"/en-US/docs/Web/API/SubtleCrypto/importKey","title":"SubtleCrypto.importKey()"}],"pageTitle":"SubtleCrypto.importKey() - Web APIs | MDN","noIndexing":false}}