{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"MediaCapabilities.decodingInfo()","mdn_url":"/en-US/docs/Web/API/MediaCapabilities/decodingInfo","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/MediaCapabilities\"><code>MediaCapabilities</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><em><code>decodingInfo()</code></em></li><li><a href=\"/en-US/docs/Web/API/MediaCapabilities/encodingInfo\"><code>encodingInfo()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>\n  The <strong><code>MediaCapabilities.decodingInfo()</code></strong> method, part of the <a href=\"/en-US/docs/Web/API/MediaCapabilities\">Media Capabilities API</a>, returns a promise with the tested media configuration's capabilities info.\n  This contains the three boolean properties <code>supported</code>, <code>smooth</code>, and <code>powerefficient</code>, which describe whether decoding the media described would be supported, smooth, and powerefficient.\n</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js-nolint notranslate\">decodingInfo(configuration)\n</pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"configuration\"><code>configuration</code></dt>\n  <dd>\n    <p>An object with a property <code>type</code> and <em>either</em> a <code>video</code> or <code>audio</code> property containing a configuration of the appropriate type:<!-- MediaDecodingConfiguration in the spec --></p>\n    <dl>\n      <dt id=\"type\"><code>type</code></dt>\n      <dd>\n        <p>The type of media being tested. This takes one of three values:</p>\n        <dl>\n          <dt id=\"file\"><code>file</code></dt>\n          <dd>\n            <p>Represents a configuration that is meant to be used for a plain file playback.</p>\n          </dd>\n          <dt id=\"media-source\"><code>media-source</code></dt>\n          <dd>\n            <p>Represents a configuration that is meant to be used for playback of a <a href=\"/en-US/docs/Web/API/MediaSource\"><code>MediaSource</code></a>.</p>\n          </dd>\n          <dt id=\"webrtc\"><code>webrtc</code></dt>\n          <dd>\n            <p>Represents a configuration that is meant to be received using <a href=\"/en-US/docs/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a>.</p>\n          </dd>\n        </dl>\n      </dd>\n      <dt id=\"video\"><code>video</code></dt>\n      <dd>\n        <p>\n          Configuration object for a video media source.\n          This has the following properties:<!-- VideoConfiguration in the spec -->\n        </p>\n        <dl>\n          <dt id=\"contenttype\"><code>contentType</code></dt>\n          <dd>\n            <p>String containing a valid video MIME type, and (optionally) a <a href=\"/en-US/docs/Web/Media/Formats/codecs_parameter\"><code>codecs</code> parameter</a>.</p>\n          </dd>\n          <dt id=\"width\"><code>width</code></dt>\n          <dd>\n            <p>The width of the video.</p>\n          </dd>\n          <dt id=\"height\"><code>height</code></dt>\n          <dd>\n            <p>The height of the video.</p>\n          </dd>\n          <dt id=\"bitrate\"><code>bitrate</code></dt>\n          <dd>\n            <p>The number of bits used to encode one second of the video file.</p>\n          </dd>\n          <dt id=\"framerate\"><code>framerate</code></dt>\n          <dd>\n            <p>The number of frames making up one second of video playback.</p>\n          </dd>\n        </dl>\n      </dd>\n      <dt id=\"audio\"><code>audio</code></dt>\n      <dd>\n        <p>\n          Configuration object for an audio media source.\n          This has the following properties:<!-- AudioConfiguration in the spec -->\n        </p>\n        <dl>\n          <dt id=\"contenttype_2\"><code>contentType</code></dt>\n          <dd>\n            <p>String containing a valid audio MIME type, and (optionally) a <a href=\"/en-US/docs/Web/Media/Formats/codecs_parameter\"><code>codecs</code> parameter</a>.</p>\n          </dd>\n          <dt id=\"channels\"><code>channels</code></dt>\n          <dd>\n            <p>The number of channels used by the audio track.</p>\n          </dd>\n          <dt id=\"bitrate_2\"><code>bitrate</code></dt>\n          <dd>\n            <p>The number of bits used to encode one second of the audio file.</p>\n          </dd>\n          <dt id=\"samplerate\"><code>samplerate</code></dt>\n          <dd>\n            <p>The number of audio samples making up one second of the audio file.</p>\n          </dd>\n        </dl>\n      </dd>\n    </dl>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>A <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> fulfilling with an object containing three Boolean attributes:</p>\n<dl>\n  <dt id=\"supported\"><code>supported</code></dt>\n  <dd>\n    <p><code>true</code> if the media content can be decoded at all. Otherwise, it is <code>false</code>.</p>\n  </dd>\n  <dt id=\"smooth\"><code>smooth</code></dt>\n  <dd>\n    <p><code>true</code> if playback of the media will be smooth (of high quality). Otherwise it is <code>false</code>.</p>\n  </dd>\n  <dt id=\"powerefficient\"><code>powerEfficient</code></dt>\n  <dd>\n    <p><code>true</code> if playback of the media will be power efficient. Otherwise, it is <code>false</code>.</p>\n  </dd>\n</dl>\n<p>\n  Browsers will report a supported media configuration as <code>smooth</code> and <code>powerEfficient</code> until stats on this device have been recorded.\n  All supported audio codecs are reported to be power efficient.\n</p>"}},{"type":"prose","value":{"id":"exceptions","title":"Exceptions","isH3":true,"content":"<dl>\n  <dt id=\"typeerror\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a></dt>\n  <dd>\n    <p>Thrown if the <code>configuration</code> passed to the <code>decodingInfo()</code> method is invalid, either because the type is not video or audio, the <code>contentType</code> is not a valid codec MIME type, the media decoding configuration is not a valid value for the <code>type</code> (file, media-source, or webrtc), or any other error in the media configuration passed to the method, including omitting any values.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<p>This example shows how to create a media configuration for an audio file and then use it in <code>MediaCapabilities.decodingInfo()</code>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">//Create media configuration to be tested</span>\n<span class=\"token keyword\">const</span> mediaConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span> <span class=\"token operator\">:</span> <span class=\"token string\">'file'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// or 'media-source' or 'webrtc'</span>\n    <span class=\"token literal-property property\">audio</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">contentType</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"audio/ogg; codecs=vorbis\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// valid content type</span>\n        <span class=\"token literal-property property\">channels</span> <span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">// audio channels used by the track</span>\n        <span class=\"token literal-property property\">bitrate</span> <span class=\"token operator\">:</span> <span class=\"token number\">132700</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// number of bits used to encode 1s of audio</span>\n        <span class=\"token literal-property property\">samplerate</span> <span class=\"token operator\">:</span> <span class=\"token number\">5200</span> <span class=\"token comment\">// number of audio samples making up that 1s.</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// check support and performance</span>\nnavigator<span class=\"token punctuation\">.</span>mediaCapabilities<span class=\"token punctuation\">.</span><span class=\"token function\">decodingInfo</span><span class=\"token punctuation\">(</span>mediaConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">This configuration is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token punctuation\">.</span>supported <span class=\"token operator\">?</span> <span class=\"token string\">''</span> <span class=\"token operator\">:</span> <span class=\"token string\">'not '</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">supported,</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token punctuation\">.</span>smooth <span class=\"token operator\">?</span> <span class=\"token string\">''</span> <span class=\"token operator\">:</span> <span class=\"token string\">'not '</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">smooth, and</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token punctuation\">.</span>powerEfficient <span class=\"token operator\">?</span> <span class=\"token string\">''</span> <span class=\"token operator\">:</span> <span class=\"token string\">'not '</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">power efficient.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Similarly, the code below shows the configuration for a video file.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> mediaConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span> <span class=\"token operator\">:</span> <span class=\"token string\">'file'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">video</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">contentType</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"video/webm;codecs=vp8\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// valid content type</span>\n        <span class=\"token literal-property property\">width</span> <span class=\"token operator\">:</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">// width of the video</span>\n        <span class=\"token literal-property property\">height</span> <span class=\"token operator\">:</span> <span class=\"token number\">600</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// height of the video</span>\n        <span class=\"token literal-property property\">bitrate</span> <span class=\"token operator\">:</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// number of bits used to encode 1s of video</span>\n        <span class=\"token literal-property property\">framerate</span> <span class=\"token operator\">:</span> <span class=\"token number\">30</span>   <span class=\"token comment\">// number of frames making up that 1s.</span>\n     <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/media-capabilities/#ref-for-dom-mediacapabilities-decodinginfo","title":"Media Capabilities"}],"query":"api.MediaCapabilities.decodingInfo"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.MediaCapabilities.decodingInfo","dataURL":"/en-US/docs/Web/API/MediaCapabilities/decodingInfo/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/MediaCapabilities/encodingInfo\"><code>MediaCapabilities.encodingInfo()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/API/HTMLMediaElement/canPlayType\"><code>HTMLMediaElement.canPlayType()</code></a> for file</li>\n  <li><a href=\"/en-US/docs/Web/API/MediaSource/isTypeSupported\"><code>MediaSource.isTypeSupported()</code></a> for media-source</li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The MediaCapabilities.decodingInfo() method, part of the Media Capabilities API, returns a promise with the tested media configuration's capabilities info.\n  This contains the three boolean properties supported, smooth, and powerefficient, which describe whether decoding the media described would be supported, smooth, and powerefficient.","popularity":0.0002,"modified":"2022-09-13T05:54:54.000Z","source":{"folder":"en-us/web/api/mediacapabilities/decodinginfo","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/mediacapabilities/decodinginfo/index.md","last_commit_url":"https://github.com/mdn/content/commit/b7556b71e1fc3e89057671b372871e9f33d3f0b8","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/MediaCapabilities","title":"MediaCapabilities"},{"uri":"/en-US/docs/Web/API/MediaCapabilities/decodingInfo","title":"MediaCapabilities.decodingInfo()"}],"pageTitle":"MediaCapabilities.decodingInfo() - Web APIs | MDN","noIndexing":false}}