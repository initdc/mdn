{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"KHR_parallel_shader_compile","mdn_url":"/en-US/docs/Web/API/KHR_parallel_shader_compile","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/WebGL_API\">WebGL API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/KHR_parallel_shader_compile\"><code>KHR_parallel_shader_compile</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for WebGL</summary><ol><li><a href=\"/en-US/docs/Web/API/ANGLE_instanced_arrays\"><code>ANGLE_instanced_arrays</code></a></li><li><a href=\"/en-US/docs/Web/API/EXT_blend_minmax\"><code>EXT_blend_minmax</code></a></li><li><a href=\"/en-US/docs/Web/API/EXT_color_buffer_half_float\"><code>EXT_color_buffer_half_float</code></a></li><li><a href=\"/en-US/docs/Web/API/EXT_disjoint_timer_query\"><code>EXT_disjoint_timer_query</code></a></li><li><a href=\"/en-US/docs/Web/API/EXT_frag_depth\"><code>EXT_frag_depth</code></a></li><li><a href=\"/en-US/docs/Web/API/EXT_sRGB\"><code>EXT_sRGB</code></a></li><li><a href=\"/en-US/docs/Web/API/EXT_shader_texture_lod\"><code>EXT_shader_texture_lod</code></a></li><li><a href=\"/en-US/docs/Web/API/EXT_texture_filter_anisotropic\"><code>EXT_texture_filter_anisotropic</code></a></li><li><a href=\"/en-US/docs/Web/API/OES_element_index_uint\"><code>OES_element_index_uint</code></a></li><li><a href=\"/en-US/docs/Web/API/OES_standard_derivatives\"><code>OES_standard_derivatives</code></a></li><li><a href=\"/en-US/docs/Web/API/OES_texture_float\"><code>OES_texture_float</code></a></li><li><a href=\"/en-US/docs/Web/API/OES_texture_float_linear\"><code>OES_texture_float_linear</code></a></li><li><a href=\"/en-US/docs/Web/API/OES_texture_half_float\"><code>OES_texture_half_float</code></a></li><li><a href=\"/en-US/docs/Web/API/OES_texture_half_float_linear\"><code>OES_texture_half_float_linear</code></a></li><li><a href=\"/en-US/docs/Web/API/OES_vertex_array_object\"><code>OES_vertex_array_object</code></a></li><li><a href=\"/en-US/docs/Web/API/WEBGL_color_buffer_float\"><code>WEBGL_color_buffer_float</code></a></li><li><a href=\"/en-US/docs/Web/API/WEBGL_compressed_texture_etc1\"><code>WEBGL_compressed_texture_etc1</code></a></li><li><a href=\"/en-US/docs/Web/API/WEBGL_compressed_texture_pvrtc\"><code>WEBGL_compressed_texture_pvrtc</code></a></li><li><a href=\"/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc\"><code>WEBGL_compressed_texture_s3tc</code></a></li><li><a href=\"/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc_srgb\"><code>WEBGL_compressed_texture_s3tc_srgb</code></a></li><li><a href=\"/en-US/docs/Web/API/WEBGL_debug_renderer_info\"><code>WEBGL_debug_renderer_info</code></a></li><li><a href=\"/en-US/docs/Web/API/WEBGL_debug_shaders\"><code>WEBGL_debug_shaders</code></a></li><li><a href=\"/en-US/docs/Web/API/WEBGL_depth_texture\"><code>WEBGL_depth_texture</code></a></li><li><a href=\"/en-US/docs/Web/API/WEBGL_draw_buffers\"><code>WEBGL_draw_buffers</code></a></li><li><a href=\"/en-US/docs/Web/API/WEBGL_lose_context\"><code>WEBGL_lose_context</code></a></li><li><a href=\"/en-US/docs/Web/API/WebGL2RenderingContext\"><code>WebGL2RenderingContext</code></a></li><li><a href=\"/en-US/docs/Web/API/WebGLActiveInfo\"><code>WebGLActiveInfo</code></a></li><li><a href=\"/en-US/docs/Web/API/WebGLBuffer\"><code>WebGLBuffer</code></a></li><li><a href=\"/en-US/docs/Web/API/WebGLContextEvent\"><code>WebGLContextEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/WebGLFramebuffer\"><code>WebGLFramebuffer</code></a></li><li><a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>WebGLObject</code></a></li><li><a href=\"/en-US/docs/Web/API/WebGLProgram\"><code>WebGLProgram</code></a></li><li><a href=\"/en-US/docs/Web/API/WebGLQuery\"><code>WebGLQuery</code></a></li><li><a href=\"/en-US/docs/Web/API/WebGLRenderbuffer\"><code>WebGLRenderbuffer</code></a></li><li><a href=\"/en-US/docs/Web/API/WebGLRenderingContext\"><code>WebGLRenderingContext</code></a></li><li><a href=\"/en-US/docs/Web/API/WebGLSampler\"><code>WebGLSampler</code></a></li><li><a href=\"/en-US/docs/Web/API/WebGLShader\"><code>WebGLShader</code></a></li><li><a href=\"/en-US/docs/Web/API/WebGLShaderPrecisionFormat\"><code>WebGLShaderPrecisionFormat</code></a></li><li><a href=\"/en-US/docs/Web/API/WebGLSync\"><code>WebGLSync</code></a></li><li><a href=\"/en-US/docs/Web/API/WebGLTexture\"><code>WebGLTexture</code></a></li><li><a href=\"/en-US/docs/Web/API/WebGLTransformFeedback\"><code>WebGLTransformFeedback</code></a></li><li><a href=\"/en-US/docs/Web/API/WebGLUniformLocation\"><code>WebGLUniformLocation</code></a></li><li><a href=\"/en-US/docs/Web/API/WebGLVertexArrayObject\"><code>WebGLVertexArrayObject</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong><code>KHR_parallel_shader_compile</code></strong> extension is part of the <a href=\"/en-US/docs/Web/API/WebGL_API\">WebGL API</a> and enables a non-blocking poll operation, so that compile/link status availability (<code>COMPLETION_STATUS_KHR</code>) can be queried without potentially incurring stalls. In other words you can check the status of your shaders compiling without blocking the runtime.</p>\n<p>WebGL extensions are available using the <a href=\"/en-US/docs/Web/API/WebGLRenderingContext/getExtension\"><code>WebGLRenderingContext.getExtension()</code></a> method. For more information, see also <a href=\"/en-US/docs/Web/API/WebGL_API/Using_Extensions\">Using Extensions</a> in the <a href=\"/en-US/docs/Web/API/WebGL_API/Tutorial\">WebGL tutorial</a>.</p>"}},{"type":"prose","value":{"id":"constants","title":"Constants","isH3":false,"content":"<dl>\n  <dt id=\"ext.completion_status_khr\"><code>ext.COMPLETION_STATUS_KHR</code></dt>\n  <dd>\n    <p>A GLenum.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<p>Enable the extension:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> ext <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getExtension</span><span class=\"token punctuation\">(</span><span class=\"token string\">'KHR_parallel_shader_compile'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>In general, best practice with or without the extension is:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Assuming lists of `shaders` and `programs`:</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> x <span class=\"token keyword\">of</span> shaders<span class=\"token punctuation\">)</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">compileShader</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Never check compile status unless subsequent linking fails.</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> x <span class=\"token keyword\">of</span> programs<span class=\"token punctuation\">)</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">linkProgram</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>With the extension, apps would be able to poll whether programs have linked without janking, but these are likely to take the same total wall time to link:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Generator yielding a progress ratio [0.0, 1.0].</span>\n<span class=\"token comment\">// Without the extension, this will jank and only check one program per generation.</span>\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">linkingProgress</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">programs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> ext <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getExtension</span><span class=\"token punctuation\">(</span><span class=\"token string\">'KHR_parallel_shader_compile'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> todo <span class=\"token operator\">=</span> programs<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            todo <span class=\"token operator\">=</span> todo<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">!</span>gl<span class=\"token punctuation\">.</span><span class=\"token function\">getProgramParameter</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> ext<span class=\"token punctuation\">.</span><span class=\"token constant\">COMPLETION_STATUS_KHR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> todo<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            gl<span class=\"token punctuation\">.</span><span class=\"token function\">getProgramParameter</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">LINK_STATUS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>todo<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">yield</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> programs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://www.khronos.org/registry/webgl/extensions/KHR_parallel_shader_compile/","title":"WebGL KHR_parallel_shader_compile Extension Specification"}],"query":"api.KHR_parallel_shader_compile"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.KHR_parallel_shader_compile","dataURL":"/en-US/docs/Web/API/KHR_parallel_shader_compile/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/WebGLRenderingContext/getExtension\"><code>WebGLRenderingContext.getExtension()</code></a></li>\n</ul>"}}],"toc":[{"text":"Constants","id":"constants"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The KHR_parallel_shader_compile extension is part of the WebGL API and enables a non-blocking poll operation, so that compile/link status availability (COMPLETION_STATUS_KHR) can be queried without potentially incurring stalls. In other words you can check the status of your shaders compiling without blocking the runtime.","popularity":0.0002,"modified":"2022-09-09T05:14:42.000Z","source":{"folder":"en-us/web/api/khr_parallel_shader_compile","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/khr_parallel_shader_compile/index.md","last_commit_url":"https://github.com/mdn/content/commit/277e5969c63b97cfb55ab4a0e612e8040810f49b","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/KHR_parallel_shader_compile","title":"KHR_parallel_shader_compile"}],"pageTitle":"KHR_parallel_shader_compile - Web APIs | MDN","noIndexing":false}}