{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"WritableStream()","mdn_url":"/en-US/docs/Web/API/WritableStream/WritableStream","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Streams_API\">Streams API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/WritableStream\"><code>WritableStream</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><em><code>WritableStream()</code></em></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/API/WritableStream/locked\"><code>locked</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/WritableStream/abort\"><code>abort()</code></a></li><li><a href=\"/en-US/docs/Web/API/WritableStream/getWriter\"><code>getWriter()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Streams</summary><ol><li><a href=\"/en-US/docs/Web/API/ByteLengthQueuingStrategy\"><code>ByteLengthQueuingStrategy</code></a></li><li><a href=\"/en-US/docs/Web/API/CountQueuingStrategy\"><code>CountQueuingStrategy</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableByteStreamController\"><code>ReadableByteStreamController</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamBYOBReader\"><code>ReadableStreamBYOBReader</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamBYOBRequest\"><code>ReadableStreamBYOBRequest</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamDefaultController\"><code>ReadableStreamDefaultController</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamDefaultReader\"><code>ReadableStreamDefaultReader</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/body\"><code>Response.body</code></a></li><li><a href=\"/en-US/docs/Web/API/WritableStreamDefaultController\"><code>WritableStreamDefaultController</code></a></li><li><a href=\"/en-US/docs/Web/API/WritableStreamDefaultWriter\"><code>WritableStreamDefaultWriter</code></a></li><li><a href=\"/en-US/docs/Web/API/fetch\"><code>fetch()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>\n  The <strong><code>WritableStream()</code></strong> constructor creates\n  a new <a href=\"/en-US/docs/Web/API/WritableStream\"><code>WritableStream</code></a> object instance.\n</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js-nolint notranslate\">new WritableStream(underlyingSink)\nnew WritableStream(underlyingSink, queuingStrategy)\n</pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"underlyingsink\"><code>underlyingSink</code> <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>\n      An object containing methods and properties that define how the constructed stream\n      instance will behave. <code>underlyingSink</code> can contain the following:\n    </p>\n    <dl>\n      <dt id=\"startcontroller\"><code>start(controller)</code> <span class=\"badge inline optional\">Optional</span></dt>\n      <dd>\n        <p>\n          This is a method, called immediately when the object is constructed. The\n          contents of this method are defined by the developer, and should aim to get access\n          to the underlying sink. If this process is to be done asynchronously, it can\n          return a promise to signal success or failure. The <code>controller</code>\n          parameter passed to this method is a\n          <a href=\"/en-US/docs/Web/API/WritableStreamDefaultController\"><code>WritableStreamDefaultController</code></a>. This can be used by the developer\n          to control the stream during set up.\n        </p>\n      </dd>\n      <dt id=\"writechunk_controller\"><code>write(chunk, controller)</code> <span class=\"badge inline optional\">Optional</span></dt>\n      <dd>\n        <p>\n          This method, also defined by the developer, will be called when a new chunk of\n          data (specified in the <code>chunk</code> parameter) is ready to be written to the\n          underlying sink. It can return a promise to signal success or failure of the write\n          operation. The <code>controller</code> parameter passed to this method is a\n          <a href=\"/en-US/docs/Web/API/WritableStreamDefaultController\"><code>WritableStreamDefaultController</code></a> that can be used by the developer\n          to control the stream as more chunks are submitted for writing. This method will\n          be called only after previous writes have succeeded, and never after the stream is\n          closed or aborted (see below).\n        </p>\n      </dd>\n      <dt id=\"closecontroller\"><code>close(controller)</code> <span class=\"badge inline optional\">Optional</span></dt>\n      <dd>\n        <p>\n          This method, also defined by the developer, will be called if the app signals\n          that it has finished writing chunks to the stream. The contents should do whatever\n          is necessary to finalize writes to the underlying sink, and release access to it.\n          If this process is asynchronous, it can return a promise to signal success or\n          failure. This method will be called only after all queued-up writes have\n          succeeded. The <code>controller</code> parameter passed to this method is a\n          <a href=\"/en-US/docs/Web/API/WritableStreamDefaultController\"><code>WritableStreamDefaultController</code></a>, which can be used to control the\n          stream at the end of writing.\n        </p>\n      </dd>\n      <dt id=\"abortreason\"><code>abort(reason)</code> <span class=\"badge inline optional\">Optional</span></dt>\n      <dd>\n        <p>\n          This method, also defined by the developer, will be called if the app signals\n          that it wishes to abruptly close the stream and put it in an errored state. It can\n          clean up any held resources, much like <code>close()</code>, but\n          <code>abort()</code> will be called even if writes are queued up — those chunks\n          will be thrown away. If this process is asynchronous, it can return a promise to\n          signal success or failure. The <code>reason</code> parameter contains a\n          string describing why the stream was aborted.\n        </p>\n      </dd>\n    </dl>\n  </dd>\n  <dt id=\"queuingstrategy\"><code>queuingStrategy</code> <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>\n      An object that optionally defines a queuing strategy for the stream. This takes two\n      parameters:\n    </p>\n    <dl>\n      <dt id=\"highwatermark\"><code>highWaterMark</code></dt>\n      <dd>\n        <p>\n          A non-negative integer — this defines the total number of chunks that can be\n          contained in the internal queue before backpressure is applied.\n        </p>\n      </dd>\n      <dt id=\"sizechunk\"><code>size(chunk)</code></dt>\n      <dd>\n        <p>A method containing a parameter <code>chunk</code> — this indicates the size to use for each chunk, in bytes.</p>\n      </dd>\n    </dl>\n    <div class=\"notecard note\" id=\"sect1\">\n      <p>\n        <strong>Note:</strong> You could define your own custom\n        <code>queuingStrategy</code>, or use an instance of\n        <a href=\"/en-US/docs/Web/API/ByteLengthQueuingStrategy\"><code>ByteLengthQueuingStrategy</code></a> or <a href=\"/en-US/docs/Web/API/CountQueuingStrategy\"><code>CountQueuingStrategy</code></a>\n        for this object value. If no <code>queuingStrategy</code> is supplied, the default\n        used is the same as a <code>CountQueuingStrategy</code> with a high water mark of 1.\n      </p>\n    </div>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>An instance of the <a href=\"/en-US/docs/Web/API/WritableStream\"><code>WritableStream</code></a> object.</p>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<p>\n  The following example illustrates several features of this interface. It shows the\n  creation of the <code>WritableStream</code> with a custom sink and an API-supplied\n  queuing strategy. It then calls a function called <code>sendMessage()</code>, passing\n  the newly created stream and a string. Inside this function it calls the stream's\n  <code>getWriter()</code> method, which returns an instance of\n  <a href=\"/en-US/docs/Web/API/WritableStreamDefaultWriter\"><code>WritableStreamDefaultWriter</code></a>. A <code>forEach()</code> call is used to\n  write each chunk of the string to the stream. Finally, <code>write()</code> and\n  <code>close()</code> return promises that are processed to deal with success or failure\n  of chunks and streams.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message<span class=\"token punctuation\">,</span> writableStream</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// defaultWriter is of type WritableStreamDefaultWriter</span>\n  <span class=\"token keyword\">const</span> defaultWriter <span class=\"token operator\">=</span> writableStream<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> encoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> encoded <span class=\"token operator\">=</span> encoder<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">stream</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  encoded<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    defaultWriter<span class=\"token punctuation\">.</span>ready\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> defaultWriter<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Chunk written to sink.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Chunk error:\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Call ready again to ensure that all chunks are written</span>\n  <span class=\"token comment\">//   before closing the writer.</span>\n  defaultWriter<span class=\"token punctuation\">.</span>ready\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      defaultWriter<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"All chunks written\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stream error:\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> decoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextDecoder</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> queuingStrategy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CountQueuingStrategy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">highWaterMark</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> writableStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WritableStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Implement the sink</span>\n  <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> view <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      view<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> chunk<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> decoded <span class=\"token operator\">=</span> decoder<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">stream</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> listItem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      listItem<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Chunk decoded: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>decoded<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      list<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>listItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      result <span class=\"token operator\">+=</span> decoded<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> listItem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    listItem<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[MESSAGE RECEIVED] </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>listItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sink error:\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> queuingStrategy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world.\"</span><span class=\"token punctuation\">,</span> writableStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>You can find the full code in our <a href=\"https://mdn.github.io/dom-examples/streams/simple-writer/\" class=\"external\" rel=\" noopener\">Simple writer example</a>.</p>"}},{"type":"prose","value":{"id":"backpressure","title":"Backpressure","isH3":true,"content":"<p>\n  Because of how backpressure is supported in the API, its implementation in code may be\n  less than obvious. To see how backpressure is implemented look for three things.\n</p>\n<ul>\n  <li>\n    The <code>highWaterMark</code> property, which is set when creating the counting\n    strategy (line 35), sets the maximum amount of data that the\n    <code>WritableStream</code> instance will handle in a single <code>write()</code>\n    operation. In this example, it's the maximum amount of data that can be sent to\n    <code>defaultWriter.write()</code> (line 11).\n  </li>\n  <li>\n    The <code>defaultWriter.ready</code> property returns a promise that resolves when\n    the sink (the first property of the <code>WritableStream</code> constructor) is done\n    writing data. The data source can wither write more data (line 11) or call\n    <code>close()</code> (line 24). Calling <code>close()</code> too early can prevent\n    data from being written. This is why the example calls\n    <code>defaultWriter.ready</code> twice (lines 9 and 22).\n  </li>\n  <li>\n    The <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> returned by the sink's <code>write()</code> method (line\n    40) tells the <code>WritableStream</code> and its writer when to resolve\n    <code>defaultWriter.ready</code>.\n  </li>\n</ul>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://streams.spec.whatwg.org/#ref-for-ws-constructor④","title":"Streams Standard"}],"query":"api.WritableStream.WritableStream"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.WritableStream.WritableStream","dataURL":"/en-US/docs/Web/API/WritableStream/WritableStream/bcd.json"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"}],"summary":"The WritableStream() constructor creates\n  a new WritableStream object instance.","popularity":0.0003,"modified":"2022-09-13T07:01:32.000Z","other_translations":[{"title":"WritableStream.WritableStream()","locale":"ja","native":"日本語"},{"title":"WritableStream()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/web/api/writablestream/writablestream","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/writablestream/writablestream/index.md","last_commit_url":"https://github.com/mdn/content/commit/87a9f73c410c9b9e91300695c8aa4931367243fb","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/WritableStream","title":"WritableStream"},{"uri":"/en-US/docs/Web/API/WritableStream/WritableStream","title":"WritableStream()"}],"pageTitle":"WritableStream() - Web APIs | MDN","noIndexing":false}}