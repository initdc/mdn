{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"MediaDevices.getUserMedia()","mdn_url":"/en-US/docs/Web/API/MediaDevices/getUserMedia","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Media_Capture_and_Streams_API\">Media Capture and Streams API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/MediaDevices\"><code>MediaDevices</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaDevices/enumerateDevices\"><code>enumerateDevices()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaDevices/getDisplayMedia\"><code>getDisplayMedia()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaDevices/getSupportedConstraints\"><code>getSupportedConstraints()</code></a></li><li><em><code>getUserMedia()</code></em></li><li><svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg><a href=\"/en-US/docs/Web/API/MediaDevices/selectAudioOutput\"><code>selectAudioOutput()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Events</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaDevices/devicechange_event\"><code>devicechange</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Inheritance:</summary><ol><li><a href=\"/en-US/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Media Capture and Streams</summary><ol><li><a href=\"/en-US/docs/Web/API/CanvasCaptureMediaStreamTrack\"><code>CanvasCaptureMediaStreamTrack</code></a></li><li><a href=\"/en-US/docs/Web/API/HTMLCanvasElement/captureStream\"><code>HTMLCanvasElement.captureStream()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaDevices/getUserMedia\"><code>MediaDevices.getUserMedia()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaStream\"><code>MediaStream</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaStreamTrack\"><code>MediaStreamTrack</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaStreamTrackEvent\"><code>MediaStreamTrackEvent</code></a></li><li><a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>MediaTrackCapabilities</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaTrackConstraints\"><code>MediaTrackConstraints</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaTrackSettings\"><code>MediaTrackSettings</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaTrackSupportedConstraints\"><code>MediaTrackSupportedConstraints</code></a></li><li><a href=\"/en-US/docs/Web/API/Navigator/mediaDevices\"><code>Navigator.mediaDevices</code></a></li><li><a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>VideoStreamTrack</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard secure\" id=\"sect1\"><p><strong>Secure context:</strong> This feature is available only in <a href=\"/en-US/docs/Web/Security/Secure_Contexts\">secure contexts</a> (HTTPS), in some or all <a href=\"#browser_compatibility\">supporting browsers</a>.</p></div>\n<p>The <a href=\"/en-US/docs/Web/API/MediaDevices\"><code>MediaDevices</code></a><strong><code>.getUserMedia()</code></strong> method prompts the user for permission to use a media input which produces a <a href=\"/en-US/docs/Web/API/MediaStream\"><code>MediaStream</code></a> with tracks containing the requested types of media.</p>\n<p>That stream can include, for example, a video track (produced by either a hardware or virtual video source such as a camera, video recording device, screen sharing service, and so forth), an audio track (similarly, produced by a physical or virtual audio source like a microphone, A/D converter, or the like), and possibly other track types.</p>\n<p>\n  It returns a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> that resolves to a <a href=\"/en-US/docs/Web/API/MediaStream\"><code>MediaStream</code></a> object.\n  If the user denies permission, or matching media is not available, then the promise is rejected with <code>NotAllowedError</code> or <code>NotFoundError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a> respectively.\n</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> It's possible for the returned promise to <em>neither</em> resolve nor reject, as the user is not required to make a choice at all and may ignore the request.</p>\n</div>\n<p>Generally, you will access the <a href=\"/en-US/docs/Web/API/MediaDevices\"><code>MediaDevices</code></a> singleton object using <a href=\"/en-US/docs/Web/API/Navigator/mediaDevices\"><code>navigator.mediaDevices</code></a>, like this:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getMedia</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">constraints</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    stream <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span>constraints<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* use the stream */</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* handle the error */</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Similarly, using the raw promises directly, the code looks like this:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span>constraints<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">stream</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* use the stream */</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* handle the error */</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p>\n    <strong>Note:</strong> If the current document isn't loaded securely,\n    <code>navigator.mediaDevices</code> will be <code>undefined</code>, and you cannot use\n    <code>getUserMedia()</code>. See <a href=\"#security\">Security</a> for more information on this and\n    other security issues related to using <code>getUserMedia()</code>.\n  </p>\n</div>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js-nolint notranslate\">getUserMedia(constraints)\n</pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"constraints\"><code>constraints</code></dt>\n  <dd>\n    <p>\n      An object specifying the types of media to\n      request, along with any requirements for each type.\n    </p>\n    <p>\n      The <code>constraints</code> parameter is an object with two members: <code>video</code> and\n      <code>audio</code>, describing the media types requested. Either or both must be\n      specified. If the browser cannot find all media tracks with the specified types that\n      meet the constraints given, then the returned promise is rejected with\n      <code>NotFoundError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a>.\n    </p>\n    <p>The following requests both audio and video without any specific requirements:</p>\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n    <p>\n      If <code>true</code> is specified for a media type, the resulting stream is\n      <em>required</em> to have that type of track in it. If one cannot be included for\n      any reason, the call to <code>getUserMedia()</code> will result in an error.\n    </p>\n    <p>\n      While information about a user's cameras and microphones are inaccessible for\n      privacy reasons, an application can request the camera and microphone capabilities\n      it needs and wants, using additional constraints. The following expresses a\n      preference for 1280x720 camera resolution:\n    </p>\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token number\">1280</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">720</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n    <p>\n      The browser will try to honour this, but may return other\n      resolutions if an exact match is not available, or the user overrides it.\n    </p>\n    <p>\n      To <em>require</em> a capability, use the keywords <code>min</code>,\n      <code>max</code>, or <code>exact</code> (a.k.a. <code>min === max</code>). The\n      following demands a minimum resolution of 1280x720:\n    </p>\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">min</span><span class=\"token operator\">:</span> <span class=\"token number\">1280</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">min</span><span class=\"token operator\">:</span> <span class=\"token number\">720</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n    <p>\n      If no camera exists with this resolution or higher, then the returned promise will\n      be rejected with <code>OverconstrainedError</code>, and the user will not be\n      prompted.\n    </p>\n    <p>\n      The reason for the difference in behavior is that the keywords <code>min</code>,\n      <code>max</code>, and <code>exact</code> are inherently mandatory. Whereas plain\n      values and a keyword called <code>ideal</code> are not. Here's a full example:\n    </p>\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">min</span><span class=\"token operator\">:</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ideal</span><span class=\"token operator\">:</span> <span class=\"token number\">1280</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">max</span><span class=\"token operator\">:</span> <span class=\"token number\">1920</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">min</span><span class=\"token operator\">:</span> <span class=\"token number\">576</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ideal</span><span class=\"token operator\">:</span> <span class=\"token number\">720</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">max</span><span class=\"token operator\">:</span> <span class=\"token number\">1080</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n    <p>\n      An <code>ideal</code> value, when used, has gravity, which means that the browser\n      will try to find the setting (and camera, if you have more than one), with the\n      smallest <a href=\"https://w3c.github.io/mediacapture-main/#dfn-fitness-distance\" class=\"external\" rel=\" noopener\">fitness distance</a> from the ideal values given.\n    </p>\n    <p>\n      Plain values are inherently ideal, which means that the first of our resolution\n      examples above could have been written like this:\n    </p>\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">ideal</span><span class=\"token operator\">:</span> <span class=\"token number\">1280</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">ideal</span><span class=\"token operator\">:</span> <span class=\"token number\">720</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n    <p>\n      Not all constraints are numbers. For example, on mobile devices, the following will\n      prefer the front camera (if one is available) over the rear one:\n    </p>\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">facingMode</span><span class=\"token operator\">:</span> <span class=\"token string\">\"user\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n    <p>To <em>require</em> the rear camera, use:</p>\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">facingMode</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">exact</span><span class=\"token operator\">:</span> <span class=\"token string\">\"environment\"</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n    <p>\n      Another non-number constraint is the <code>deviceId</code> constraint. If you have\n      a <code>deviceId</code> from <a href=\"/en-US/docs/Web/API/MediaDevices/enumerateDevices\"><code>mediaDevices.enumerateDevices()</code></a>, you can\n      use it to request a specific device:\n    </p>\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">deviceId</span><span class=\"token operator\">:</span> myPreferredCameraDeviceId\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n    <p>\n      The above will return the camera you requested, or a different camera if that\n      specific camera is no longer available. Again, to <em>require</em> the specific\n      camera, you would use:\n    </p>\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">deviceId</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">exact</span><span class=\"token operator\">:</span> myExactCameraOrBustDeviceId\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>\n  A <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> whose fulfillment handler receives a <a href=\"/en-US/docs/Web/API/MediaStream\"><code>MediaStream</code></a>\n  object when the requested media has successfully been obtained.\n</p>"}},{"type":"prose","value":{"id":"exceptions","title":"Exceptions","isH3":true,"content":"<dl>\n  <dt id=\"aborterror\"><code>AbortError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>\n      Although the user and operating system both granted access to the hardware device,\n      and no hardware issues occurred that would cause a <code>NotReadableError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a>, throw if some\n      problem occurred which prevented the device from being used.\n    </p>\n  </dd>\n  <dt id=\"notallowederror\"><code>NotAllowedError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>\n      Thrown if one or more of the requested source devices cannot be used at this time. This will\n      happen if the browsing context is insecure (that is, the page was loaded using HTTP\n      rather than HTTPS). It also happens if the user has specified that the current\n      browsing instance is not permitted access to the device, the user has denied access\n      for the current session, or the user has denied all access to user media devices\n      globally. On browsers that support managing media permissions with <a href=\"/en-US/docs/Web/HTTP/Feature_Policy\">Feature Policy</a>, this error is\n      returned if Feature Policy is not configured to allow access to the input source(s).\n    </p>\n    <div class=\"notecard note\" id=\"sect4\">\n      <p>\n        <strong>Note:</strong> Older versions of the specification used <code>SecurityError</code>\n        for this instead; <code>SecurityError</code> has taken on a new meaning.\n      </p>\n    </div>\n  </dd>\n  <dt id=\"notfounderror\"><code>NotFoundError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>Thrown if no media tracks of the type specified were found that satisfy the given constraints.</p>\n  </dd>\n  <dt id=\"notreadableerror\"><code>NotReadableError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>\n      Thrown if, although the user granted permission to use the matching devices, a hardware error\n      occurred at the operating system, browser, or Web page level which prevented access to\n      the device.\n    </p>\n  </dd>\n  <dt id=\"overconstrainederror\"><code>OverconstrainedError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>\n      Thrown if the specified constraints resulted in no candidate devices which met the criteria\n      requested. The error is an object of type <code>OverconstrainedError</code>, and has a\n      <code>constraint</code> property whose string value is the name of a constraint which\n      was impossible to meet, and a <code>message</code> property containing a\n      human-readable string explaining the problem.\n    </p>\n    <div class=\"notecard note\" id=\"sect5\">\n      <p>\n        <strong>Note:</strong> Because this error can occur even when the user has not yet granted\n        permission to use the underlying device, it can potentially be used as a\n        fingerprinting surface.\n      </p>\n    </div>\n  </dd>\n  <dt id=\"securityerror\"><code>SecurityError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>\n      Thrown if user media support is disabled on the <a href=\"/en-US/docs/Web/API/Document\"><code>Document</code></a> on which\n      <code>getUserMedia()</code> was called. The mechanism by which user media support is\n      enabled and disabled is left up to the individual user agent.\n    </p>\n  </dd>\n  <dt id=\"typeerror\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a></dt>\n  <dd>\n    <p>\n      Thrown if the list of constraints specified is empty, or has all constraints set to\n      <code>false</code>. This can also happen if you try to call\n      <code>getUserMedia()</code> in an insecure context, since\n      <a href=\"/en-US/docs/Web/API/Navigator/mediaDevices\"><code>navigator.mediaDevices</code></a> is <code>undefined</code> in an insecure\n      context.\n    </p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"privacy_and_security","title":"Privacy and security","isH3":false,"content":"<p>\n  As an API that may involve significant privacy concerns, <code>getUserMedia()</code>'s\n  specification lays out a wide array of privacy and security requirements that browsers\n  are obligated to meet.\n</p>\n<p>\n  <code>getUserMedia()</code> is a powerful feature which can only be used in <a href=\"/en-US/docs/Web/Security/Secure_Contexts\">secure contexts</a>; in insecure\n  contexts, <code>navigator.mediaDevices</code> is <code>undefined</code>, preventing\n  access to <code>getUserMedia()</code>. A secure context is, in short, a page loaded\n  using HTTPS or the <code>file:///</code> URL scheme, or a page loaded from\n  <code>localhost</code>.\n</p>\n<p>\n  In addition, user permission is always required to access the user's audio and video\n  inputs. Only a window's top-level document context for a valid origin can even request\n  permission to use <code>getUserMedia()</code>, unless the top-level context expressly\n  grants permission for a given <a href=\"/en-US/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code></a> to do so using <a href=\"/en-US/docs/Web/HTTP/Feature_Policy\">Feature Policy</a>. Otherwise, the user\n  will never even be asked for permission to use the input devices.\n</p>\n<p>\n  For additional details on these requirements and rules, how they are reflected in the\n  context in which your code is running, and about how browsers manage user privacy and\n  security issues, read on.\n</p>"}},{"type":"prose","value":{"id":"user_privacy","title":"User privacy","isH3":true,"content":"<p>\n  As an API that may involve significant privacy concerns, <code>getUserMedia()</code> is\n  held by the specification to very specific requirements for user notification and\n  permission management. First, <code>getUserMedia()</code> must always get user\n  permission before opening any media gathering input such as a webcam or microphone.\n  Browsers may offer a once-per-domain permission feature, but they must ask at least the\n  first time, and the user must specifically grant ongoing permission if they choose to do\n  so.\n</p>\n<p>\n  Of equal importance are the rules around notification. Browsers are required to display\n  an indicator that shows that a camera or microphone is in use, above and beyond any\n  hardware indicator that may exist. They must also show an indicator that permission has\n  been granted to use a device for input, even if the device is not actively recording at\n  the moment.\n</p>\n<p>\n  For example in Firefox, the URL bar displays a pulsing red icon to indicate that\n  recording is underway. The icon is gray if the permission is in place but recording is\n  not currently underway. The device's physical light is used to indicate whether or not\n  recording is currently active. If you've muted your camera (so-called \"facemuting\"),\n  your camera's activity light goes out to indicate that the camera is not actively\n  recording you, without discarding the permission to resume using the camera once muting\n  is over.\n</p>"}},{"type":"prose","value":{"id":"security","title":"Security","isH3":true,"content":"<p>There are a number of ways security management and controls in a <a href=\"/en-US/docs/Glossary/User_agent\">user\n  agent</a> can cause <code>getUserMedia()</code> to return a security-related error.</p>\n<div class=\"notecard note\" id=\"sect6\">\n  <p>\n    <strong>Note:</strong> The security model for <code>getUserMedia()</code> is still\n    somewhat in flux. The originally-designed security mechanism is in the process of\n    being replaced with Feature Policy, so various browsers have different levels of\n    security support, using different mechanisms. You should test your code carefully on a\n    variety of devices and browsers to be sure it is as broadly compatible as possible\n  </p>\n</div>\n<h4 id=\"feature_policy\">Feature Policy</h4>\n<p>\n  The <a href=\"/en-US/docs/Web/HTTP/Feature_Policy\">Feature Policy</a> security\n  management feature of <a href=\"/en-US/docs/Glossary/HTTP\">HTTP</a> is in the process of being introduced into\n  browsers, with support available to some extent in many browsers (though not always\n  enabled by default, as in Firefox). <code>getUserMedia()</code> is one method which will\n  require the use of Feature Policy, and your code needs to be prepared to deal with this.\n  For example, you may need to use the <a href=\"/en-US/docs/Web/HTML/Element/iframe#attr-allow\"><code>allow</code></a> attribute on\n  any <a href=\"/en-US/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code></a> that uses <code>getUserMedia()</code>, and pages that use\n  <code>getUserMedia()</code> will eventually need to supply the\n  <a href=\"/en-US/docs/Web/HTTP/Headers/Feature-Policy\"><code>Feature-Policy</code></a> header.\n</p>\n<p>\n  The two permissions that apply to <code>getUserMedia()</code> are <code>camera</code>\n  and <code>microphone</code>.\n</p>\n<p>\n  For example, this line in the HTTP headers will enable use of a camera for the document\n  and any embedded <a href=\"/en-US/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code></a> elements that are loaded from the same\n  origin:\n</p>\n<div class=\"code-example\"><pre class=\"brush: http notranslate\"><code><span class=\"token header\"><span class=\"token header-name keyword\">Feature-Policy</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">camera 'self'</span></span>\n</code></pre></div>\n<p>\n  This will request access to the microphone for the current origin and the specific\n  origin <code>https://developer.mozilla.org</code>:\n</p>\n<div class=\"code-example\"><pre class=\"brush: http notranslate\"><code><span class=\"token header\"><span class=\"token header-name keyword\">Feature-Policy</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">microphone 'self' https://developer.mozilla.org</span></span>\n</code></pre></div>\n<p>\n  If you're using <code>getUserMedia()</code> within an <code>&lt;iframe&gt;</code>, you\n  can request permission just for that frame, which is clearly more secure than requesting\n  a more general permission. Here, indicate we need the ability to use both camera and\n  microphone:\n</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://mycode.example.net/etc<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">allow</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>camera;microphone<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>Read our guide, <a href=\"/en-US/docs/Web/HTTP/Feature_Policy/Using_Feature_Policy\">Using Feature Policy</a>, to learn more about how it works.</p>\n<h4 id=\"encryption_based_security\">Encryption based security</h4>\n<p>\n  The <code>getUserMedia()</code> method is only available in <a href=\"/en-US/docs/Web/Security/Secure_Contexts\">secure contexts</a>. A secure context\n  is one the browser is reasonably confident contains a document which was loaded\n  securely, using HTTPS/TLS, and has limited exposure to insecure contexts. If a document\n  isn't loaded in a secure context, the <a href=\"/en-US/docs/Web/API/Navigator/mediaDevices\"><code>navigator.mediaDevices</code></a> property is\n  <code>undefined</code>, making access to <code>getUserMedia()</code> impossible.\n</p>\n<p>\n  Attempting to access <code>getUserMedia()</code> in this situation will result in a\n  <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a>.\n</p>\n<h4 id=\"document_source_security\">Document source security</h4>\n<p>\n  Because of the obvious security concern associated with <code>getUserMedia()</code> if\n  used unexpectedly or without security being carefully managed, it can only be used in\n  secure contexts. There are a number of insecure ways to load a document that might, in\n  turn, attempt to call <code>getUserMedia()</code>. The following are examples of\n  situations in which <code>getUserMedia()</code> is not permitted to be called:\n</p>\n<ul>\n  <li>\n    A document loaded into a sandboxed <a href=\"/en-US/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code></a> element cannot call\n    <code>getUserMedia()</code> unless the <code>&lt;iframe&gt;</code> has its\n    <a href=\"/en-US/docs/Web/HTML/Element/iframe#attr-sandbox\"><code>sandbox</code></a> attribute set to <code>allow-same-origin</code>.\n  </li>\n  <li>\n    A document loaded using a <code>data://</code> or <code>blob://</code> URL which has\n    no origin (such as when one of these URLs is typed by the user into the address bar)\n    cannot call <code>getUserMedia()</code>. These kinds of URLs loaded from JavaScript\n    code inherit the script's permissions.\n  </li>\n  <li>\n    Any other situation in which there is no origin, such as when the\n    <a href=\"/en-US/docs/Web/HTML/Element/iframe#attr-srcdoc\"><code>srcdoc</code></a> attribute is used to specify the contents of a\n    frame.\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"width_and_height","title":"Width and height","isH3":true,"content":"<p>\n  This example gives a preference for camera resolution, and assigns the resulting\n  <a href=\"/en-US/docs/Web/API/MediaStream\"><code>MediaStream</code></a> object to a video element.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Prefer camera resolution nearest to 1280x720.</span>\n<span class=\"token keyword\">const</span> constraints <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token number\">1280</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">720</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nnavigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span>constraints<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mediaStream</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> video <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'video'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    video<span class=\"token punctuation\">.</span>srcObject <span class=\"token operator\">=</span> mediaStream<span class=\"token punctuation\">;</span>\n    video<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onloadedmetadata</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      video<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// always check for errors at the end.</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>err<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>err<span class=\"token punctuation\">.</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"frame_rate","title":"Frame rate","isH3":true,"content":"<p>\n  Lower frame-rates may be desirable in some cases, like WebRTC transmissions with\n  bandwidth restrictions.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> constraints <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">frameRate</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">ideal</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">max</span><span class=\"token operator\">:</span> <span class=\"token number\">15</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"front_and_back_camera","title":"Front and back camera","isH3":true,"content":"<p>On mobile phones.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> front <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flip-button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  front <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>front<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> constraints <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">facingMode</span><span class=\"token operator\">:</span> front <span class=\"token operator\">?</span> <span class=\"token string\">\"user\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"environment\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/mediacapture-main/#dom-mediadevices-getusermedia","title":"Media Capture and Streams"}],"query":"api.MediaDevices.getUserMedia"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.MediaDevices.getUserMedia","dataURL":"/en-US/docs/Web/API/MediaDevices/getUserMedia/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li>The older <a href=\"/en-US/docs/Web/API/Navigator/getUserMedia\"><code>navigator.getUserMedia()</code></a> legacy API</li>\n  <li><a href=\"/en-US/docs/Web/API/MediaDevices/enumerateDevices\"><code>mediaDevices.enumerateDevices()</code></a>: Listing available media devices</li>\n  <li><a href=\"/en-US/docs/Web/API/WebRTC_API\">WebRTC API</a></li>\n  <li><a href=\"/en-US/docs/Web/API/Media_Capture_and_Streams_API\">Media Capture and Streams API (Media Streams)</a></li>\n  <li>\n    <a href=\"/en-US/docs/Web/API/Screen_Capture_API\">Screen Capture API</a>: Capturing\n    screen contents as a <a href=\"/en-US/docs/Web/API/MediaStream\"><code>MediaStream</code></a>\n  </li>\n  <li>\n    <a href=\"/en-US/docs/Web/API/MediaDevices/getDisplayMedia\"><code>mediaDevices.getDisplayMedia()</code></a>: Getting a stream containing screen\n    contents\n  </li>\n  <li>\n    <a href=\"/en-US/docs/Web/API/Media_Capture_and_Streams_API/Taking_still_photos\">Taking webcam photos</a>: A tutorial on using <code>getUserMedia()</code> to take still photos\n    rather than video\n  </li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Privacy and security","id":"privacy_and_security"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The MediaDevices.getUserMedia() method prompts the user for permission to use a media input which produces a MediaStream with tracks containing the requested types of media.","popularity":0.0151,"modified":"2022-09-21T00:43:09.000Z","other_translations":[{"title":"MediaDevices.getUserMedia()","locale":"es","native":"Español"},{"title":"MediaDevices.getUserMedia()","locale":"fr","native":"Français"},{"title":"MediaDevices.getUserMedia()","locale":"ja","native":"日本語"},{"title":"MediaDevices.getUserMedia()","locale":"ko","native":"한국어"},{"title":"MediaDevices.getUserMedia()","locale":"ru","native":"Русский"},{"title":"MediaDevices.getUserMedia()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/web/api/mediadevices/getusermedia","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/mediadevices/getusermedia/index.md","last_commit_url":"https://github.com/mdn/content/commit/01d83d9cabd8d7861af35e118af3b8f83ba937ce","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/MediaDevices","title":"MediaDevices"},{"uri":"/en-US/docs/Web/API/MediaDevices/getUserMedia","title":"MediaDevices.getUserMedia()"}],"pageTitle":"MediaDevices.getUserMedia() - Web APIs | MDN","noIndexing":false}}