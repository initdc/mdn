{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Insertable Streams for MediaStreamTrack API","mdn_url":"/en-US/docs/Web/API/Insertable_Streams_for_MediaStreamTrack_API","locale":"en-US","native":"English (US)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong>Insertable Streams for MediaStreamTrack API</strong> provides a method of adding new components to a <a href=\"/en-US/docs/Web/API/MediaStreamTrack\"><code>MediaStreamTrack</code></a>.</p>"}},{"type":"prose","value":{"id":"concepts_and_usage","title":"Concepts and Usage","isH3":false,"content":"<p>When processing video or audio, you sometimes want to insert additional elements or otherwise process the stream. For example, an application might include two tracks that need to be combined, such as a weather map and video of a presenter explaining the map. Or, you may want to do processing on a track to blur backgrounds, remove background noise, or introduce other elements (such as adding funny hats to people, and so on). This API provides a method to do this by giving direct access to the stream, thus allowing it to be manipulated.</p>"}},{"type":"prose","value":{"id":"interfaces","title":"Interfaces","isH3":false,"content":"<dl>\n  <dt id=\"mediastreamtrackgenerator\"><a href=\"/en-US/docs/Web/API/MediaStreamTrackGenerator\"><code>MediaStreamTrackGenerator</code></a></dt>\n  <dd>\n    <p>Creates a <a href=\"/en-US/docs/Web/API/WritableStream\"><code>WritableStream</code></a> that acts as a <a href=\"/en-US/docs/Web/API/MediaStreamTrack\"><code>MediaStreamTrack</code></a> source.</p>\n  </dd>\n  <dt id=\"mediastreamtrackprocessor\"><a href=\"/en-US/docs/Web/API/MediaStreamTrackProcessor\"><code>MediaStreamTrackProcessor</code></a></dt>\n  <dd>\n    <p>Consumes a <a href=\"/en-US/docs/Web/API/MediaStreamTrack\"><code>MediaStreamTrack</code></a> object's source and generates a stream of media frames.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<p>The following example is from the article <a href=\"https://web.dev/mediastreamtrack-insertable-media-processing/\" class=\"external\" rel=\" noopener\">Insertable streams for MediaStreamTrack</a>, and demonstrates a barcode scanner application that highlights a barcode in a video stream. This transforms the stream accessed via <a href=\"/en-US/docs/Web/API/MediaStreamTrackProcessor/readable\"><code>MediaStreamTrackProcessor.readable</code></a>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> videoTrack <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">getVideoTracks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> trackProcessor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MediaStreamTrackProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">track</span><span class=\"token operator\">:</span> videoTrack <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> trackGenerator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MediaStreamTrackGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">kind</span><span class=\"token operator\">:</span> <span class=\"token string\">'video'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> transformer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TransformStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">videoFrame<span class=\"token punctuation\">,</span> controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> barcodes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">detectBarcodes</span><span class=\"token punctuation\">(</span>videoFrame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> newFrame <span class=\"token operator\">=</span> <span class=\"token function\">highlightBarcodes</span><span class=\"token punctuation\">(</span>videoFrame<span class=\"token punctuation\">,</span> barcodes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    videoFrame<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    controller<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>newFrame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ntrackProcessor<span class=\"token punctuation\">.</span>readable<span class=\"token punctuation\">.</span><span class=\"token function\">pipeThrough</span><span class=\"token punctuation\">(</span>transformer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pipeTo</span><span class=\"token punctuation\">(</span>trackGenerator<span class=\"token punctuation\">.</span>writable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}}],"toc":[{"text":"Concepts and Usage","id":"concepts_and_usage"},{"text":"Interfaces","id":"interfaces"},{"text":"Examples","id":"examples"}],"summary":"The Insertable Streams for MediaStreamTrack API provides a method of adding new components to a MediaStreamTrack.","popularity":0.0003,"modified":"2022-09-09T05:14:42.000Z","source":{"folder":"en-us/web/api/insertable_streams_for_mediastreamtrack_api","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/insertable_streams_for_mediastreamtrack_api/index.md","last_commit_url":"https://github.com/mdn/content/commit/277e5969c63b97cfb55ab4a0e612e8040810f49b","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/Insertable_Streams_for_MediaStreamTrack_API","title":"Insertable Streams for MediaStreamTrack API"}],"pageTitle":"Insertable Streams for MediaStreamTrack API - Web APIs | MDN","noIndexing":false}}