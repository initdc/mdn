{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"ReadableStreamDefaultReader()","mdn_url":"/en-US/docs/Web/API/ReadableStreamDefaultReader/ReadableStreamDefaultReader","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Streams_API\">Streams API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/ReadableStreamDefaultReader\"><code>ReadableStreamDefaultReader</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><em><code>ReadableStreamDefaultReader()</code></em></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/API/ReadableStreamDefaultReader/closed\"><code>closed</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/ReadableStreamDefaultReader/cancel\"><code>cancel()</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamDefaultReader/read\"><code>read()</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamDefaultReader/releaseLock\"><code>releaseLock()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Streams</summary><ol><li><a href=\"/en-US/docs/Web/API/ByteLengthQueuingStrategy\"><code>ByteLengthQueuingStrategy</code></a></li><li><a href=\"/en-US/docs/Web/API/CountQueuingStrategy\"><code>CountQueuingStrategy</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableByteStreamController\"><code>ReadableByteStreamController</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamBYOBReader\"><code>ReadableStreamBYOBReader</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamBYOBRequest\"><code>ReadableStreamBYOBRequest</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamDefaultController\"><code>ReadableStreamDefaultController</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/body\"><code>Response.body</code></a></li><li><a href=\"/en-US/docs/Web/API/WritableStream\"><code>WritableStream</code></a></li><li><a href=\"/en-US/docs/Web/API/WritableStreamDefaultController\"><code>WritableStreamDefaultController</code></a></li><li><a href=\"/en-US/docs/Web/API/WritableStreamDefaultWriter\"><code>WritableStreamDefaultWriter</code></a></li><li><a href=\"/en-US/docs/Web/API/fetch\"><code>fetch()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>\n  The <strong><code>ReadableStreamDefaultReader()</code></strong>\n  constructor creates and returns a <code>ReadableStreamDefaultReader</code> object\n  instance.\n</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p>\n    <strong>Note:</strong> You generally wouldn't use this constructor manually; instead,\n    you'd use the <a href=\"/en-US/docs/Web/API/ReadableStream/getReader\"><code>ReadableStream.getReader()</code></a> method.\n  </p>\n</div>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js-nolint notranslate\">new ReadableStreamDefaultReader(stream)\n</pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"stream\"><code>stream</code></dt>\n  <dd>\n    <p>The <a href=\"/en-US/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> to be read.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>An instance of the <a href=\"/en-US/docs/Web/API/ReadableStreamDefaultReader\"><code>ReadableStreamDefaultReader</code></a> object.</p>"}},{"type":"prose","value":{"id":"exceptions","title":"Exceptions","isH3":true,"content":"<dl>\n  <dt id=\"typeerror\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a></dt>\n  <dd>\n    <p>\n      Thrown if the supplied <code>stream</code> parameter is not a <a href=\"/en-US/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a>,\n      or it is already locked for reading by another reader.\n    </p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<p>\n  In the following simple example, a previously-created custom\n  <code>ReadableStream</code> is read using a <a href=\"/en-US/docs/Web/API/ReadableStreamDefaultReader\"><code>ReadableStreamDefaultReader</code></a>\n  created using <code>getReader()</code>. (see our <a href=\"https://mdn.github.io/dom-examples/streams/simple-random-stream/\" class=\"external\" rel=\" noopener\">Simple random stream example</a> for the full code). Each chunk is read sequentially and output to\n  the UI, until the stream has finished being read, at which point we return out of the\n  recursive function and print the entire stream to another part of the UI.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">fetchStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> reader <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">getReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> charsReceived <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// read() returns a promise that resolves</span>\n  <span class=\"token comment\">// when a value has been received</span>\n  reader<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">processText</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> done<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Result objects contain two properties:</span>\n    <span class=\"token comment\">// done  - true if the stream has already given you all its data.</span>\n    <span class=\"token comment\">// value - some data. Always undefined when done is true.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stream complete\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      para<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// value for fetch streams is a Uint8Array</span>\n    charsReceived <span class=\"token operator\">+=</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> chunk <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> listItem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    listItem<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Received </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>charsReceived<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> characters so far. Current chunk = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>chunk<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    list2<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>listItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    result <span class=\"token operator\">+=</span> chunk<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Read some more, and call this function again</span>\n    <span class=\"token keyword\">return</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>processText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://streams.spec.whatwg.org/#ref-for-default-reader-constructor①","title":"Streams Standard"}],"query":"api.ReadableStreamDefaultReader.ReadableStreamDefaultReader"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.ReadableStreamDefaultReader.ReadableStreamDefaultReader","dataURL":"/en-US/docs/Web/API/ReadableStreamDefaultReader/ReadableStreamDefaultReader/bcd.json"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"}],"summary":"The ReadableStreamDefaultReader()\n  constructor creates and returns a ReadableStreamDefaultReader object\n  instance.","popularity":0,"modified":"2022-09-13T06:09:49.000Z","other_translations":[{"title":"ReadableStreamDefaultReader.ReadableStreamDefaultReader()","locale":"ja","native":"日本語"},{"title":"ReadableStreamDefaultReader()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/web/api/readablestreamdefaultreader/readablestreamdefaultreader","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/readablestreamdefaultreader/readablestreamdefaultreader/index.md","last_commit_url":"https://github.com/mdn/content/commit/2b8f5d9a29f00aea5d2edfa78d1fb90c51752858","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/ReadableStreamDefaultReader","title":"ReadableStreamDefaultReader"},{"uri":"/en-US/docs/Web/API/ReadableStreamDefaultReader/ReadableStreamDefaultReader","title":"ReadableStreamDefaultReader()"}],"pageTitle":"ReadableStreamDefaultReader() - Web APIs | MDN","noIndexing":false}}