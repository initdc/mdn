{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Streams API","mdn_url":"/en-US/docs/Web/API/Streams_API","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Streams_API\">Streams API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Guides</summary><ol><li><a href=\"/en-US/docs/Web/API/Streams_API/Concepts\">Streams API concepts</a></li><li><a href=\"/en-US/docs/Web/API/Streams_API/Using_readable_streams\">Using readable streams</a></li><li><a href=\"/en-US/docs/Web/API/Streams_API/Using_readable_byte_streams\">Using readable byte streams</a></li><li><a href=\"/en-US/docs/Web/API/Streams_API/Using_writable_streams\">Using writable streams</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Interfaces</summary><ol><li><a href=\"/en-US/docs/Web/API/ByteLengthQueuingStrategy\"><code>ByteLengthQueuingStrategy</code></a></li><li><a href=\"/en-US/docs/Web/API/CountQueuingStrategy\"><code>CountQueuingStrategy</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableByteStreamController\"><code>ReadableByteStreamController</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamBYOBReader\"><code>ReadableStreamBYOBReader</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamBYOBRequest\"><code>ReadableStreamBYOBRequest</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamDefaultController\"><code>ReadableStreamDefaultController</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamDefaultReader\"><code>ReadableStreamDefaultReader</code></a></li><li><a href=\"/en-US/docs/Web/API/WritableStream\"><code>WritableStream</code></a></li><li><a href=\"/en-US/docs/Web/API/WritableStreamDefaultController\"><code>WritableStreamDefaultController</code></a></li><li><a href=\"/en-US/docs/Web/API/WritableStreamDefaultWriter\"><code>WritableStreamDefaultWriter</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/API/Response/body\"><code>Response.body</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/fetch\"><code>fetch()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The Streams API allows JavaScript to programmatically access streams of data received over the network and process them as desired by the developer.</p><div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> This feature is available in <a href=\"/en-US/docs/Web/API/Web_Workers_API\">Web Workers</a></p>\n</div>"}},{"type":"prose","value":{"id":"concepts_and_usage","title":"Concepts and usage","isH3":false,"content":"<p>Streaming involves breaking a resource that you want to receive over a network down into small chunks, then processing it bit by bit. This is something browsers do anyway when receiving assets to be shown on webpages — videos buffer and more is gradually available to play, and sometimes you'll see images display gradually as more is loaded.</p>\n<p>But this has never been available to JavaScript before. Previously, if we wanted to process a resource of some kind (be it a video, or a text file, etc.), we'd have to download the entire file, wait for it to be deserialized into a suitable format, then process the whole lot after it is fully received.</p>\n<p>With Streams being available to JavaScript, this all changes — you can now start processing raw data with JavaScript bit by bit as soon as it is available on the client-side, without needing to generate a buffer, string, or blob.</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/Streams_API/concept.png\" alt=\"\" width=\"1000\" height=\"382\" loading=\"lazy\">\n</p>\n<p>There are more advantages too — you can detect when streams start or end, chain streams together, handle errors and cancel streams as required, and react to the speed the stream is being read at.</p>\n<p>The basic usage of Streams hinges around making responses available as streams. For example, the response body returned by a successful <a href=\"/en-US/docs/Web/API/fetch\">fetch request</a> can be exposed as a <a href=\"/en-US/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a>, and you can then read it using a reader created with <a href=\"/en-US/docs/Web/API/ReadableStream/getReader\"><code>ReadableStream.getReader()</code></a>, cancel it with <a href=\"/en-US/docs/Web/API/ReadableStream/cancel\"><code>ReadableStream.cancel()</code></a>, etc.</p>\n<p>More complicated uses involve creating your own stream using the <a href=\"/en-US/docs/Web/API/ReadableStream/ReadableStream\" title=\"ReadableStream()\"><code>ReadableStream()</code></a> constructor, for example to process data inside a <a href=\"/en-US/docs/Web/API/Service_Worker_API\">service worker</a>.</p>\n<p>You can also write data to streams using <a href=\"/en-US/docs/Web/API/WritableStream\"><code>WritableStream</code></a>.</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> You can find a lot more details about the theory and practice of streams in our articles — <a href=\"/en-US/docs/Web/API/Streams_API/Concepts\">Streams API concepts</a>, <a href=\"/en-US/docs/Web/API/Streams_API/Using_readable_streams\">Using readable streams</a>, <a href=\"/en-US/docs/Web/API/Streams_API/Using_readable_byte_streams\">Using readable byte streams</a>, and <a href=\"/en-US/docs/Web/API/Streams_API/Using_writable_streams\">Using writable streams</a>.</p>\n</div>"}},{"type":"prose","value":{"id":"stream_interfaces","title":"Stream interfaces","isH3":false,"content":""}},{"type":"prose","value":{"id":"readable_streams","title":"Readable streams","isH3":true,"content":"<dl>\n  <dt id=\"readablestream\"><a href=\"/en-US/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a></dt>\n  <dd>\n    <p>Represents a readable stream of data. It can be used to handle response streams of the <a href=\"/en-US/docs/Web/API/Fetch_API\">Fetch API</a>, or developer-defined streams (e.g. a custom <a href=\"/en-US/docs/Web/API/ReadableStream/ReadableStream\" title=\"ReadableStream()\"><code>ReadableStream()</code></a> constructor).</p>\n  </dd>\n  <dt id=\"readablestreamdefaultreader\"><a href=\"/en-US/docs/Web/API/ReadableStreamDefaultReader\"><code>ReadableStreamDefaultReader</code></a></dt>\n  <dd>\n    <p>Represents a default reader that can be used to read stream data supplied from a network (e.g. a fetch request).</p>\n  </dd>\n  <dt id=\"readablestreamdefaultcontroller\"><a href=\"/en-US/docs/Web/API/ReadableStreamDefaultController\"><code>ReadableStreamDefaultController</code></a></dt>\n  <dd>\n    <p>Represents a controller allowing control of a <a href=\"/en-US/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a>'s state and internal queue. Default controllers are for streams that are not byte streams.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"writable_streams","title":"Writable streams","isH3":true,"content":"<dl>\n  <dt id=\"writablestream\"><a href=\"/en-US/docs/Web/API/WritableStream\"><code>WritableStream</code></a></dt>\n  <dd>\n    <p>Provides a standard abstraction for writing streaming data to a destination, known as a sink. This object comes with built-in backpressure and queuing.</p>\n  </dd>\n  <dt id=\"writablestreamdefaultwriter\"><a href=\"/en-US/docs/Web/API/WritableStreamDefaultWriter\"><code>WritableStreamDefaultWriter</code></a></dt>\n  <dd>\n    <p>Represents a default writable stream writer that can be used to write chunks of data to a writable stream.</p>\n  </dd>\n  <dt id=\"writablestreamdefaultcontroller\"><a href=\"/en-US/docs/Web/API/WritableStreamDefaultController\"><code>WritableStreamDefaultController</code></a></dt>\n  <dd>\n    <p>Represents a controller allowing control of a <a href=\"/en-US/docs/Web/API/WritableStream\"><code>WritableStream</code></a>'s state. When constructing a <code>WritableStream</code>, the underlying sink is given a corresponding <code>WritableStreamDefaultController</code> instance to manipulate.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"transform_streams","title":"Transform Streams","isH3":true,"content":"<dl>\n  <dt id=\"transformstream\"><a href=\"/en-US/docs/Web/API/TransformStream\"><code>TransformStream</code></a></dt>\n  <dd>\n    <p>Represents a set of transformable data.</p>\n  </dd>\n  <dt id=\"transformstreamdefaultcontroller\"><a href=\"/en-US/docs/Web/API/TransformStreamDefaultController\"><code>TransformStreamDefaultController</code></a></dt>\n  <dd>\n    <p>Provides methods to manipulate the <a href=\"/en-US/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> and <a href=\"/en-US/docs/Web/API/WritableStream\"><code>WritableStream</code></a> associated with a transform stream.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"related_stream_apis_and_operations","title":"Related stream APIs and operations","isH3":true,"content":"<dl>\n  <dt id=\"bytelengthqueuingstrategy\"><a href=\"/en-US/docs/Web/API/ByteLengthQueuingStrategy\"><code>ByteLengthQueuingStrategy</code></a></dt>\n  <dd>\n    <p>Provides a built-in byte length queuing strategy that can be used when constructing streams.</p>\n  </dd>\n  <dt id=\"countqueuingstrategy\"><a href=\"/en-US/docs/Web/API/CountQueuingStrategy\"><code>CountQueuingStrategy</code></a></dt>\n  <dd>\n    <p>Provides a built-in chunk counting queuing strategy that can be used when constructing streams.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"extensions_to_other_apis","title":"Extensions to other APIs","isH3":true,"content":"<dl>\n  <dt id=\"request\"><a href=\"/en-US/docs/Web/API/Request\"><code>Request</code></a></dt>\n  <dd>\n    <p>When a new <code>Request</code> object is constructed, you can pass it a <a href=\"/en-US/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> in the <code>body</code> property of its <code>RequestInit</code> dictionary. This <code>Request</code> could then be passed to a <a href=\"/en-US/docs/Web/API/fetch\"><code>fetch()</code></a> to commence fetching the stream.</p>\n  </dd>\n  <dt id=\"response.body\"><a href=\"/en-US/docs/Web/API/Response/body\"><code>Response.body</code></a></dt>\n  <dd>\n    <p>The response body returned by a successful <a href=\"/en-US/docs/Web/API/fetch\">fetch request</a> is exposed by default as a <a href=\"/en-US/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a>, and can have a reader attached to it, etc.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"bytestream-related_interfaces","title":"ByteStream-related interfaces","isH3":true,"content":"<dl>\n  <dt id=\"readablestreambyobreader\"><a href=\"/en-US/docs/Web/API/ReadableStreamBYOBReader\"><code>ReadableStreamBYOBReader</code></a></dt>\n  <dd>\n    <p>Represents a BYOB (\"bring your own buffer\") reader that can be used to read stream data supplied by the developer (e.g. a custom <a href=\"/en-US/docs/Web/API/ReadableStream/ReadableStream\" title=\"ReadableStream()\"><code>ReadableStream()</code></a> constructor).</p>\n  </dd>\n  <dt id=\"readablebytestreamcontroller\"><a href=\"/en-US/docs/Web/API/ReadableByteStreamController\"><code>ReadableByteStreamController</code></a></dt>\n  <dd>\n    <p>Represents a controller allowing control of a <a href=\"/en-US/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a>'s state and internal queue. Byte stream controllers are for byte streams.</p>\n  </dd>\n  <dt id=\"readablestreambyobrequest\"><a href=\"/en-US/docs/Web/API/ReadableStreamBYOBRequest\"><code>ReadableStreamBYOBRequest</code></a></dt>\n  <dd>\n    <p>Represents a pull into request in a <a href=\"/en-US/docs/Web/API/ReadableByteStreamController\"><code>ReadableByteStreamController</code></a>.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<p>We have created a directory of examples to go along with the Streams API documentation — see <a href=\"https://github.com/mdn/dom-examples/tree/main/streams\" class=\"external\" rel=\" noopener\">mdn/dom-examples/streams</a>. The examples are as follows:</p>\n<ul>\n  <li><a href=\"https://mdn.github.io/dom-examples/streams/simple-pump/\" class=\"external\" rel=\" noopener\">Simple stream pump</a>: This example shows how to consume a ReadableStream and pass its data to another.</li>\n  <li><a href=\"https://mdn.github.io/dom-examples/streams/grayscale-png/\" class=\"external\" rel=\" noopener\">Grayscale a PNG</a>: This example shows how a ReadableStream of a PNG can be turned into grayscale.</li>\n  <li><a href=\"https://mdn.github.io/dom-examples/streams/simple-random-stream/\" class=\"external\" rel=\" noopener\">Simple random stream</a>: This example shows how to use a custom stream to generate random strings, enqueue them as chunks, and then read them back out again.</li>\n  <li><a href=\"https://mdn.github.io/dom-examples/streams/simple-tee-example/\" class=\"external\" rel=\" noopener\">Simple tee example</a>: This example extends the Simple random stream example, showing how a stream can be teed and both resulting streams can be read independently.</li>\n  <li><a href=\"https://mdn.github.io/dom-examples/streams/simple-writer/\" class=\"external\" rel=\" noopener\">Simple writer</a>: This example shows how to write to a writable stream, then decode the stream and write the contents to the UI.</li>\n  <li><a href=\"https://mdn.github.io/dom-examples/streams/png-transform-stream/\" class=\"external\" rel=\" noopener\">Unpack chunks of a PNG</a>: This example shows how <a href=\"/en-US/docs/Web/API/ReadableStream/pipeThrough\"><code>pipeThrough()</code></a> can be used to transform a ReadableStream into a stream of other data types by transforming a data of a PNG file into a stream of PNG chunks.</li>\n</ul>\n<p>Examples from other developers:</p>\n<ul>\n  <li><a href=\"https://fetch-progress.anthum.com/\" class=\"external\" rel=\" noopener\">Progress Indicators with Streams, Service Workers, &amp; Fetch</a>.</li>\n</ul>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"query":"api.ReadableStream,api.WritableStream","specifications":[]}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"data":null,"query":"api.ReadableStream,api.WritableStream","browsers":null}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/Streams_API/Concepts\">Streams API concepts</a></li>\n  <li><a href=\"/en-US/docs/Web/API/Streams_API/Using_readable_streams\">Using readable streams</a></li>\n  <li><a href=\"/en-US/docs/Web/API/Streams_API/Using_readable_byte_streams\">Using readable byte streams</a></li>\n  <li><a href=\"/en-US/docs/Web/API/Streams_API/Using_writable_streams\">Using writable streams</a></li>\n</ul>"}}],"toc":[{"text":"Concepts and usage","id":"concepts_and_usage"},{"text":"Stream interfaces","id":"stream_interfaces"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The Streams API allows JavaScript to programmatically access streams of data received over the network and process them as desired by the developer.","popularity":0.0059,"modified":"2022-09-11T19:35:30.000Z","other_translations":[{"title":"Streams API","locale":"fr","native":"Français"},{"title":"Streams API","locale":"ja","native":"日本語"},{"title":"Streams API","locale":"ko","native":"한국어"},{"title":"Streams API","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Streams API","locale":"ru","native":"Русский"},{"title":"Stream API","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/web/api/streams_api","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/streams_api/index.md","last_commit_url":"https://github.com/mdn/content/commit/7455f0c585ea29fa85ea09e11716b70f76241f5b","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/Streams_API","title":"Streams API"}],"pageTitle":"Streams API - Web APIs | MDN","noIndexing":false}}