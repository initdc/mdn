{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"TransformStreamDefaultController.enqueue()","mdn_url":"/en-US/docs/Web/API/TransformStreamDefaultController/enqueue","locale":"en-US","native":"English (US)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong><code>enqueue()</code></strong> method of the <a href=\"/en-US/docs/Web/API/TransformStreamDefaultController\"><code>TransformStreamDefaultController</code></a> interface enqueues the given chunk in the readable side of the stream.</p>\n<p>For more information on readable streams and chunks see <a href=\"/en-US/docs/Web/API/Streams_API/Using_readable_streams\">Using Readable Streams</a>.</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js-nolint notranslate\">enqueue(chunk)\n</pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"chunk\"><code>chunk</code></dt>\n  <dd>\n    <p>The chunk being queued. A chunk is a single piece of data. It can be any type of data, and a stream can contain chunks of different types.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>None (<a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>).</p>"}},{"type":"prose","value":{"id":"exceptions","title":"Exceptions","isH3":true,"content":"<dl>\n  <dt id=\"typeerror\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a></dt>\n  <dd>\n    <p>\n      The stream is not readable.\n      This might occur if the stream is errored via <code>controller.error()</code>, or when it is closed without its controller's <code>controller.close()</code> method ever being called.\n    </p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<p>In this example an encoded chunk is passed to the queue using the <code>enqueue()</code> method.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> textEncoderStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TransformStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk<span class=\"token punctuation\">,</span> controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    controller<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    controller<span class=\"token punctuation\">.</span><span class=\"token function\">terminate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://streams.spec.whatwg.org/#ts-default-controller-enqueue","title":"Streams Standard"}],"query":"api.TransformStreamDefaultController.enqueue"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.TransformStreamDefaultController.enqueue","dataURL":"/en-US/docs/Web/API/TransformStreamDefaultController/enqueue/bcd.json"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"}],"summary":"The enqueue() method of the TransformStreamDefaultController interface enqueues the given chunk in the readable side of the stream.","popularity":0,"modified":"2022-09-13T06:39:07.000Z","other_translations":[{"title":"TransformStreamDefaultController.enqueue()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/web/api/transformstreamdefaultcontroller/enqueue","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/transformstreamdefaultcontroller/enqueue/index.md","last_commit_url":"https://github.com/mdn/content/commit/b9bcca1e96839aa9cddea3263196e0cf4656d387","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/TransformStreamDefaultController","title":"TransformStreamDefaultController"},{"uri":"/en-US/docs/Web/API/TransformStreamDefaultController/enqueue","title":"TransformStreamDefaultController.enqueue()"}],"pageTitle":"TransformStreamDefaultController.enqueue() - Web APIs | MDN","noIndexing":false}}