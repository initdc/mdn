{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"RTCPeerConnection.createDataChannel()","mdn_url":"/en-US/docs/Web/API/RTCPeerConnection/createDataChannel","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/WebRTC_API\">WebRTC API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/RTCPeerConnection\"><code>RTCPeerConnection()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/canTrickleIceCandidates\"><code>canTrickleIceCandidates</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/connectionState\"><code>connectionState</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/currentLocalDescription\"><code>currentLocalDescription</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/currentRemoteDescription\"><code>currentRemoteDescription</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/iceConnectionState\"><code>iceConnectionState</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/iceGatheringState\"><code>iceGatheringState</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/localDescription\"><code>localDescription</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/peerIdentity\"><code>peerIdentity</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/pendingLocalDescription\"><code>pendingLocalDescription</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/pendingRemoteDescription\"><code>pendingRemoteDescription</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/remoteDescription\"><code>remoteDescription</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/sctp\"><code>sctp</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/signalingState\"><code>signalingState</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/addIceCandidate\"><code>addIceCandidate()</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/API/RTCPeerConnection/addStream\"><code>addStream()</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/addTrack\"><code>addTrack()</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/addTransceiver\"><code>addTransceiver()</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/close\"><code>close()</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/createAnswer\"><code>createAnswer()</code></a></li><li><em><code>createDataChannel()</code></em></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/createOffer\"><code>createOffer()</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/generateCertificate\"><code>generateCertificate() static function</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/getConfiguration\"><code>getConfiguration()</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/getIdentityAssertion\"><code>getIdentityAssertion()</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/getReceivers\"><code>getReceivers()</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/getSenders\"><code>getSenders()</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/getStats\"><code>getStats()</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/API/RTCPeerConnection/getStreamById\"><code>getStreamById()</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/getTransceivers\"><code>getTransceivers()</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/API/RTCPeerConnection/removeStream\"><code>removeStream()</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/removeTrack\"><code>removeTrack()</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/restartIce\"><code>restartIce()</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/setConfiguration\"><code>setConfiguration()</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/setIdentityProvider\"><code>setIdentityProvider()</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/setLocalDescription\"><code>setLocalDescription()</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/setRemoteDescription\"><code>setRemoteDescription()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Events</summary><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/API/RTCPeerConnection/addstream_event\"><code>addstream</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/connectionstatechange_event\"><code>connectionstatechange</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/datachannel_event\"><code>datachannel</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/icecandidate_event\"><code>icecandidate</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/icecandidateerror_event\"><code>icecandidateerror</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/iceconnectionstatechange_event\"><code>iceconnectionstatechange</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/icegatheringstatechange_event\"><code>icegatheringstatechange</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/negotiationneeded_event\"><code>negotiationneeded</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/API/RTCPeerConnection/removestream_event\"><code>removestream</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/signalingstatechange_event\"><code>signalingstatechange</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/track_event\"><code>track</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Inheritance:</summary><ol><li><a href=\"/en-US/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for WebRTC</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaDevices/getUserMedia\"><code>MediaDevices.getUserMedia()</code></a></li><li><a href=\"/en-US/docs/Web/API/Navigator/mediaDevices\"><code>Navigator.mediaDevices</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCCertificate\"><code>RTCCertificate</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCDTMFSender\"><code>RTCDTMFSender</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCDTMFToneChangeEvent\"><code>RTCDTMFToneChangeEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCDataChannelEvent\"><code>RTCDataChannelEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCDtlsTransport\"><code>RTCDtlsTransport</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCErrorEvent\"><code>RTCErrorEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCIceCandidate\"><code>RTCIceCandidate</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCIceTransport\"><code>RTCIceTransport</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnectionIceErrorEvent\"><code>RTCPeerConnectionIceErrorEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnectionIceEvent\"><code>RTCPeerConnectionIceEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCRtpReceiver\"><code>RTCRtpReceiver</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCRtpSender\"><code>RTCRtpSender</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCRtpTransceiver\"><code>RTCRtpTransceiver</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCSctpTransport\"><code>RTCSctpTransport</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCSessionDescription\"><code>RTCSessionDescription</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCStatsReport\"><code>RTCStatsReport</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCTrackEvent\"><code>RTCTrackEvent</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>\n  The <strong><code>createDataChannel()</code></strong> method\n  on the <a href=\"/en-US/docs/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a> interface\n  creates a new channel linked with the remote peer,\n  over which any kind of data may be transmitted.\n  This can be useful for back-channel content,\n  such as images, file transfer, text chat, game update\n  packets, and so forth.\n</p>\n<p>\n  If the new data channel is the first one added to the connection, renegotiation is\n  started by delivering a <a href=\"/en-US/docs/Web/API/RTCPeerConnection/negotiationneeded_event\" title=\"negotiationneeded\"><code>negotiationneeded</code></a> event.\n</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js-nolint notranslate\">createDataChannel(label)\ncreateDataChannel(label, options)\n</pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"label\"><code>label</code></dt>\n  <dd>\n    <p>\n      A human-readable name for the channel.\n      This string may not be longer than 65,535 bytes.\n    </p>\n  </dd>\n  <dt id=\"options\"><code>options</code> <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>\n      An object providing configuration options for the data channel.\n      It can contain the following fields:\n    </p>\n    <dl>\n      <dt id=\"ordered\"><code>ordered</code> <span class=\"badge inline optional\">Optional</span></dt>\n      <dd>\n        <p>\n          Indicates whether or not\n          messages sent on the <a href=\"/en-US/docs/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a>\n          are required to arrive at their destination in the same order\n          in which they were sent (<code>true</code>),\n          or if they're allowed to arrive out-of-order (<code>false</code>).\n          <strong>Default: <code>true</code>.</strong>\n        </p>\n      </dd>\n      <dt id=\"maxpacketlifetime\"><code>maxPacketLifeTime</code> <span class=\"badge inline optional\">Optional</span></dt>\n      <dd>\n        <p>\n          The maximum number of milliseconds\n          that attempts to transfer a message may take in unreliable mode.\n          While this value is a 16-bit unsigned number,\n          each user agent may clamp it\n          to whatever maximum it deems appropriate.\n          <strong>Default: <code>null</code>.</strong>\n        </p>\n      </dd>\n      <dt id=\"maxretransmits\"><code>maxRetransmits</code> <span class=\"badge inline optional\">Optional</span></dt>\n      <dd>\n        <p>\n          The maximum number of times\n          the user agent should attempt to retransmit a message\n          which fails the first time in unreliable mode.\n          While this value is a 16-bit unsigned number,\n          each user agent may clamp it to whatever maximum it deems appropriate.\n          <strong>Default: <code>null</code>.</strong>\n        </p>\n      </dd>\n      <dt id=\"protocol\"><code>protocol</code> <span class=\"badge inline optional\">Optional</span></dt>\n      <dd>\n        <p>\n          The name of the sub-protocol\n          being used on the <a href=\"/en-US/docs/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a>,\n          if any;\n          otherwise, the empty string (<code>\"\"</code>).\n          <strong>Default: empty string (<code>\"\"</code>).</strong>\n          This string may not be longer than 65,535 <em>bytes</em>.\n        </p>\n      </dd>\n      <dt id=\"negotiated\"><code>negotiated</code> <span class=\"badge inline optional\">Optional</span></dt>\n      <dd>\n        <p>\n          By default (<code>false</code>),\n          data channels are negotiated in-band,\n          where one side calls <code>createDataChannel</code>, and\n          the other side listens to the <a href=\"/en-US/docs/Web/API/RTCDataChannelEvent\"><code>RTCDataChannelEvent</code></a> event\n          using the <a href=\"/en-US/docs/Web/API/RTCPeerConnection/datachannel_event\" title=\"ondatachannel\"><code>ondatachannel</code></a> event handler.\n          Alternatively (<code>true</code>),\n          they can be negotiated out of-band,\n          where both sides call <code>createDataChannel</code>\n          with an agreed-upon ID.\n          <strong>Default: <code>false</code>.</strong>\n        </p>\n      </dd>\n      <dt id=\"id\"><code>id</code> <span class=\"badge inline optional\">Optional</span></dt>\n      <dd>\n        <p>\n          A 16-bit numeric ID for the channel;\n          permitted values are 0 to 65534.\n          If you don't include this option,\n          the user agent will select an ID for you.\n        </p>\n      </dd>\n    </dl>\n  </dd>\n</dl>\n<div class=\"notecard note\" id=\"sect1\">\n  <p>\n    <strong>Note:</strong> These options represent the script-settable subset of the properties on the\n    <a href=\"/en-US/docs/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a> interface.\n  </p>\n</div>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>\n  A new <a href=\"/en-US/docs/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a> object with the specified <code>label</code>,\n  configured using the options specified by <code>options</code> if that parameter is\n  included; otherwise, the defaults listed above are established.\n</p>"}},{"type":"prose","value":{"id":"exceptions","title":"Exceptions","isH3":true,"content":"<dl>\n  <dt id=\"invalidstateerror\"><code>InvalidStateError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>Thrown if the <a href=\"/en-US/docs/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a> is closed.</p>\n  </dd>\n  <dt id=\"typeerror\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a></dt>\n  <dd>\n    <p>Thrown in the following situations:</p>\n    <ul>\n      <li>\n        The label and/or protocol string is too long; these cannot be longer than 65,535\n        bytes (bytes, rather than characters).\n      </li>\n      <li>\n        The <code>id</code> is 65535. While this is a valid unsigned 16-bit value, it's\n        not a permitted value for <code>id</code>.\n      </li>\n    </ul>\n  </dd>\n  <dt id=\"syntaxerror\"><code>SyntaxError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>\n      Thrown if values were specified for both the <code>maxPacketLifeTime</code> and\n      <code>maxRetransmits</code> options. You may specify a non-<code>null</code>\n      value for only one of these.\n    </p>\n  </dd>\n  <dt id=\"resourceinuse\"><code>ResourceInUse</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>\n      Thrown if an <code>id</code> was specified, but another <a href=\"/en-US/docs/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a> is\n      already using the same value.\n    </p>\n  </dd>\n  <dt id=\"operationerror\"><code>OperationError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>\n      Thrown if either the specified <code>id</code> is already in use, or if no <code>id</code> was\n      specified, the WebRTC layer was unable to automatically generate an ID because all IDs\n      are in use.\n    </p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<p>\n  This example shows how to create a data channel and set up handlers for the\n  <a href=\"/en-US/docs/Web/API/RTCDataChannel/open_event\" title=\"open\"><code>open</code></a> and <a href=\"/en-US/docs/Web/API/RTCDataChannel/message_event\" title=\"message\"><code>message</code></a> events to send and receive messages on it\n  (For brevity, the example assumes onnegotiationneeded is set up).\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Offerer side</span>\n\n<span class=\"token keyword\">const</span> pc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RTCPeerConnection</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> channel <span class=\"token operator\">=</span> pc<span class=\"token punctuation\">.</span><span class=\"token function\">createDataChannel</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchannel<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onopen</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  channel<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hi you!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nchannel<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Answerer side</span>\n\n<span class=\"token keyword\">const</span> pc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RTCPeerConnection</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npc<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">ondatachannel</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> channel <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>channel<span class=\"token punctuation\">;</span>\n    channel<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onopen</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    channel<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hi back!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  channel<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>\n  Alternatively, more symmetrical out-of-band negotiation can be used, using an\n  agreed-upon id (0 here):\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Both sides</span>\n\n<span class=\"token keyword\">const</span> pc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RTCPeerConnection</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> channel <span class=\"token operator\">=</span> pc<span class=\"token punctuation\">.</span><span class=\"token function\">createDataChannel</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chat\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">negotiated</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchannel<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onopen</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  channel<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hi!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nchannel<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>\n  For a more thorough example showing how the connection and channel are established, see\n  <a href=\"/en-US/docs/Web/API/WebRTC_API/Simple_RTCDataChannel_sample\">A simple RTCDataChannel sample</a>.\n</p>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/webrtc-pc/#dom-peerconnection-createdatachannel","title":"WebRTC 1.0: Real-Time Communication Between Browsers"}],"query":"api.RTCPeerConnection.createDataChannel"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.RTCPeerConnection.createDataChannel","dataURL":"/en-US/docs/Web/API/RTCPeerConnection/createDataChannel/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a></li>\n  <li><a href=\"/en-US/docs/Web/API/WebRTC_API/Simple_RTCDataChannel_sample\">A simple RTCDataChannel sample</a></li>\n  <li><a href=\"/en-US/docs/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a></li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The createDataChannel() method\n  on the RTCPeerConnection interface\n  creates a new channel linked with the remote peer,\n  over which any kind of data may be transmitted.\n  This can be useful for back-channel content,\n  such as images, file transfer, text chat, game update\n  packets, and so forth.","popularity":0.0006,"modified":"2022-09-13T06:27:50.000Z","other_translations":[{"title":"RTCPeerConnection.createDataChannel()","locale":"ko","native":"한국어"},{"title":"RTCPeerConnection.createDataChannel()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/web/api/rtcpeerconnection/createdatachannel","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/rtcpeerconnection/createdatachannel/index.md","last_commit_url":"https://github.com/mdn/content/commit/16e398809d62247dbadc89ff4024a0ffa4781f0e","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/RTCPeerConnection","title":"RTCPeerConnection"},{"uri":"/en-US/docs/Web/API/RTCPeerConnection/createDataChannel","title":"RTCPeerConnection.createDataChannel()"}],"pageTitle":"RTCPeerConnection.createDataChannel() - Web APIs | MDN","noIndexing":false}}