{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"MediaStreamTrack: mute event","mdn_url":"/en-US/docs/Web/API/MediaStreamTrack/mute_event","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Media_Capture_and_Streams_API\">Media Capture and Streams API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/MediaStreamTrack\"><code>MediaStreamTrack</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaStreamTrack/enabled\"><code>enabled</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaStreamTrack/id\"><code>id</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaStreamTrack/kind\"><code>kind</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaStreamTrack/label\"><code>label</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaStreamTrack/muted\"><code>muted</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaStreamTrack/readyState\"><code>readyState</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/API/MediaStreamTrack/remote\"><code>remote</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaStreamTrack/applyConstraints\"><code>applyConstraints()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaStreamTrack/clone\"><code>clone()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaStreamTrack/getCapabilities\"><code>getCapabilities()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaStreamTrack/getConstraints\"><code>getConstraints()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaStreamTrack/getSettings\"><code>getSettings()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaStreamTrack/stop\"><code>stop()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Events</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaStreamTrack/ended_event\"><code>ended</code></a></li><li><em><code>mute</code></em></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/API/MediaStreamTrack/overconstrained_event\"><code>overconstrained</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaStreamTrack/unmute_event\"><code>unmute</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Inheritance:</summary><ol><li><a href=\"/en-US/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Media Capture and Streams</summary><ol><li><a href=\"/en-US/docs/Web/API/CanvasCaptureMediaStreamTrack\"><code>CanvasCaptureMediaStreamTrack</code></a></li><li><a href=\"/en-US/docs/Web/API/HTMLCanvasElement/captureStream\"><code>HTMLCanvasElement.captureStream()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaDevices\"><code>MediaDevices</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaDevices/getUserMedia\"><code>MediaDevices.getUserMedia()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaStream\"><code>MediaStream</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaStreamTrackEvent\"><code>MediaStreamTrackEvent</code></a></li><li><a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>MediaTrackCapabilities</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaTrackConstraints\"><code>MediaTrackConstraints</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaTrackSettings\"><code>MediaTrackSettings</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaTrackSupportedConstraints\"><code>MediaTrackSupportedConstraints</code></a></li><li><a href=\"/en-US/docs/Web/API/Navigator/mediaDevices\"><code>Navigator.mediaDevices</code></a></li><li><a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>VideoStreamTrack</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong><code>mute</code></strong> event is sent to a <a href=\"/en-US/docs/Web/API/MediaStreamTrack\"><code>MediaStreamTrack</code></a> when the track's source is temporarily unable to provide media data.</p>\n<p>When the track is once again able to produce media output, an <a href=\"/en-US/docs/Web/API/MediaStreamTrack/unmute_event\" title=\"unmute\"><code>unmute</code></a> event is sent.</p>\n<p>During the time between the <code>mute</code> event and the <code>unmute</code> event, the value of the track's <a href=\"/en-US/docs/Web/API/MediaStreamTrack/muted\" title=\"muted\"><code>muted</code></a> property is <code>true</code>.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> The condition that most people think of as \"muted\" (that is, a user-toggled state of silencing a track) is actually managed using the <a href=\"/en-US/docs/Web/API/MediaStreamTrack/enabled\"><code>MediaStreamTrack.enabled</code></a> property, for which there are no events.</p>\n</div>\n<p>This event is not cancelable and does not bubble.</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<p>Use the event name in methods like <a href=\"/en-US/docs/Web/API/EventTarget/addEventListener\" title=\"addEventListener()\"><code>addEventListener()</code></a>, or set an event handler property.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mute'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function-variable function\">onmute</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"event_type","title":"Event type","isH3":false,"content":"<p>A generic <a href=\"/en-US/docs/Web/API/Event\"><code>Event</code></a>.</p>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<p>In this example, event handlers are established for the <code>mute</code> and <a href=\"/en-US/docs/Web/API/MediaStreamTrack/unmute_event\" title=\"unmute\"><code>unmute</code></a> events in order to detect when the media is not flowing from the source for the <a href=\"/en-US/docs/Web/API/MediaStreamTrack\"><code>MediaStreamTrack</code></a> referenced by <code>musicTrack</code>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>musicTrack<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mute\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timeline-widget\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">\"#aaa\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmusicTrack<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unmute\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timeline-widget\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">\"#fff\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>With these event handlers in place, when the track <code>musicTrack</code> enters its <a href=\"/en-US/docs/Web/API/MediaStreamTrack/muted\" title=\"muted\"><code>muted</code></a> state, the element with the ID <code>timeline-widget</code> gets its background color changed to <code>#aaa</code>. When the track exits the muted state—detected by the arrival of an <code>unmute</code> event—the background color is restored to white.</p>\n<p>You can also use the <code>onmute</code> event handler property to set up a handler for this event; similarly, the <a href=\"/en-US/docs/Web/API/MediaStreamTrack/unmute_event\" title=\"onunmute\"><code>onunmute</code></a> event handler is available for setting up a handler for the <code>unmute</code> event. The following example shows this:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>musicTrack<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmute</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timeline-widget\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">\"#aaa\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nmusicTrack<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onunmute</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timeline-widget\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">\"#fff\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"mute_tracks_through_receivers","title":"Mute tracks through receivers","isH3":true,"content":"<p>The following example shows how to mute tracks using receivers.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Peer 1 (Receiver)</span>\naudioTrack<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mute'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Do something in UI</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nvideoTrack<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mute'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Do something in UI</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Peer 2 (Sender)</span>\n<span class=\"token keyword\">const</span> transceivers <span class=\"token operator\">=</span> peer<span class=\"token punctuation\">.</span><span class=\"token function\">getTransceivers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> audioTrack <span class=\"token operator\">=</span> transceivers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\naudioTrack<span class=\"token punctuation\">.</span>direction <span class=\"token operator\">=</span> <span class=\"token string\">'recvonly'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> videoTrack <span class=\"token operator\">=</span> transceivers<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nvideoTrack<span class=\"token punctuation\">.</span>direction <span class=\"token operator\">=</span> <span class=\"token string\">'recvonly'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>transceivers</code> is an array of <a href=\"/en-US/docs/Web/API/RTCRtpTransceiver\"><code>RTCRtpTransceiver</code></a> where you can find the audio or video track sent and received. For more information, see the <a href=\"/en-US/docs/Web/API/RTCRtpTransceiver/direction\" title=\"direction\"><code>direction</code></a> article.</p>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/mediacapture-main/#event-mediastreamtrack-mute","title":"Media Capture and Streams"}],"query":"api.MediaStreamTrack.mute_event"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.MediaStreamTrack.mute_event","dataURL":"/en-US/docs/Web/API/MediaStreamTrack/mute_event/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/MediaStreamTrack/unmute_event\" title=\"unmute\"><code>unmute</code></a> event</li>\n  <li><a href=\"/en-US/docs/Web/API/RTCRtpTransceiver/direction\" title=\"direction\"><code>direction</code></a></li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Event type","id":"event_type"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The mute event is sent to a MediaStreamTrack when the track's source is temporarily unable to provide media data.","popularity":0.0003,"modified":"2022-09-09T05:17:24.000Z","other_translations":[{"title":"MediaStreamTrack: mute イベント","locale":"ja","native":"日本語"}],"source":{"folder":"en-us/web/api/mediastreamtrack/mute_event","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/mediastreamtrack/mute_event/index.md","last_commit_url":"https://github.com/mdn/content/commit/4b4638246aad5d39b9a2e5c572b179b4c39c0a84","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/MediaStreamTrack","title":"MediaStreamTrack"},{"uri":"/en-US/docs/Web/API/MediaStreamTrack/mute_event","title":"MediaStreamTrack: mute event"}],"pageTitle":"MediaStreamTrack: mute event - Web APIs | MDN","noIndexing":false}}