{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Using the Payment Request API","mdn_url":"/en-US/docs/Web/API/Payment_Request_API/Using_the_Payment_Request_API","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Payment_Request_API\">Payment Request API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Guides</summary><ol><li><a href=\"/en-US/docs/Web/API/Payment_Request_API/Using_the_Payment_Request_API\">Using the Payment Request API</a></li><li><a href=\"/en-US/docs/Web/API/Payment_Request_API/Concepts\">Payment processing concepts</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Interfaces</summary><ol><li><a href=\"/en-US/docs/Web/API/MerchantValidationEvent\"><code>MerchantValidationEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/PaymentAddress\"><code>PaymentAddress</code></a></li><li><a href=\"/en-US/docs/Web/API/PaymentMethodChangeEvent\"><code>PaymentMethodChangeEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/PaymentRequest\"><code>PaymentRequest</code></a></li><li><a href=\"/en-US/docs/Web/API/PaymentRequestUpdateEvent\"><code>PaymentRequestUpdateEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/PaymentResponse\"><code>PaymentResponse</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/API/HTMLIFrameElement/allowPaymentRequest\"><code>HTMLIFrameElement.allowPaymentRequest</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard secure\" id=\"sect1\"><p><strong>Secure context:</strong> This feature is available only in <a href=\"/en-US/docs/Web/Security/Secure_Contexts\">secure contexts</a> (HTTPS), in some or all <a href=\"#browser_compatibility\">supporting browsers</a>.</p></div>\n<p>The <a href=\"/en-US/docs/Web/API/Payment_Request_API\">Payment Request API</a> provides a browser-based method of connecting users and their preferred payment systems and platforms to merchants that they want to pay for goods and services. This article is a guide to making use of the <a href=\"/en-US/docs/Web/API/Payment_Request_API\">Payment Request API</a>, with examples and suggested best practices.</p>"}},{"type":"prose","value":{"id":"the_basics_of_making_a_payment","title":"The basics of making a payment","isH3":false,"content":"<p>This section details the basics of using the Payment Request API to make a payment.</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> The code snippets from this section are from our <a href=\"https://github.com/mdn/dom-examples/blob/main/payment-request/feature-detect-support.html\" class=\"external\" rel=\" noopener\">Feature detect support demo</a>.</p>\n</div>"}},{"type":"prose","value":{"id":"creating_a_new_payment_request_object","title":"Creating a new payment request object","isH3":true,"content":"<p>A payment request always starts with the creation of a new <a href=\"/en-US/docs/Web/API/PaymentRequest\"><code>PaymentRequest</code></a> object — using the <a href=\"/en-US/docs/Web/API/PaymentRequest/PaymentRequest\" title=\"PaymentRequest()\"><code>PaymentRequest()</code></a> constructor. This takes two mandatory parameters and one option parameter:</p>\n<ul>\n  <li><code>methodData</code> — an object containing information concerning the payment provider, such as what payment methods are supported, etc.</li>\n  <li><code>details</code> — an object containing information concerning the specific payment, such as the total payment amount, tax, shipping cost, etc.</li>\n  <li><code>options</code> (optional) — an object containing additional options related to the payment.</li>\n</ul>\n<p>So for example, you could create a new <code>PaymentRequest</code> instance like so:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PaymentRequest</span><span class=\"token punctuation\">(</span><span class=\"token function\">buildSupportedPaymentMethodData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                   <span class=\"token function\">buildShoppingCartDetails</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>The functions invoked inside the constructor return the required object parameters:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">buildSupportedPaymentMethodData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Example supported payment methods:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">supportedMethods</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://example.com/pay'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">buildShoppingCartDetails</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Hardcoded for demo purposes:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'order-123'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">displayItems</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">label</span><span class=\"token operator\">:</span> <span class=\"token string\">'Example item'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">amount</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">currency</span><span class=\"token operator\">:</span> <span class=\"token string\">'USD'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">'1.00'</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">total</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">label</span><span class=\"token operator\">:</span> <span class=\"token string\">'Total'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">amount</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">currency</span><span class=\"token operator\">:</span> <span class=\"token string\">'USD'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">'1.00'</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"starting_the_payment_process","title":"Starting the payment process","isH3":true,"content":"<p>Once the <code>PaymentRequest</code> object has been created, you call the <a href=\"/en-US/docs/Web/API/PaymentRequest/show\"><code>PaymentRequest.show()</code></a> method on it to initiate the payment request. This returns a promise that fulfills with a <a href=\"/en-US/docs/Web/API/PaymentResponse\"><code>PaymentResponse</code></a> object if the payment is successful:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>request<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">paymentResponse</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Here we would process the payment. For this demo, simulate immediate success:</span>\n  paymentResponse<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'success'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// For demo purposes:</span>\n      introPanel<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">;</span>\n      successPanel<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">'block'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>This object provides the developer with access to details they can use to complete the logical steps required after the payment completes, such as an email address to contact the customer, a shipping address for mailing goods out to them, etc. In the code above, you'll see that we've called the <a href=\"/en-US/docs/Web/API/PaymentResponse/complete\"><code>PaymentResponse.complete()</code></a> method to signal that the interaction has finished — you'd use this to carry out finishing steps, like updating the user interface to tell the user the transaction is complete, etc.</p>"}},{"type":"prose","value":{"id":"other_useful_payment_request_methods","title":"Other useful payment request methods","isH3":true,"content":"<p>There are some other useful payment request methods worth knowing about.</p>\n<p><a href=\"/en-US/docs/Web/API/PaymentRequest/canMakePayment\"><code>PaymentRequest.canMakePayment()</code></a> can be used to check whether the <code>PaymentRequest</code> object is capable of making a payment before you start the payment process. It returns a promise that fulfills with a boolean indicating whether it is or not, for example:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Dummy payment request to check whether payment can be made</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">PaymentRequest</span><span class=\"token punctuation\">(</span><span class=\"token function\">buildSupportedPaymentMethodData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">total</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">label</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Stub\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">amount</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">currency</span><span class=\"token operator\">:</span> <span class=\"token string\">\"USD\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.01\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">canMakePayment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Real payment request</span>\n      <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PaymentRequest</span><span class=\"token punctuation\">(</span>\n        <span class=\"token function\">buildSupportedPaymentMethodData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        checkoutObject<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      request<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">paymentResponse</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Here we would process the payment.</span>\n        paymentResponse<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"success\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// Finish handling payment</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><a href=\"/en-US/docs/Web/API/PaymentRequest/abort\"><code>PaymentRequest.abort()</code></a> can be used to abort the payment request if required.</p>"}},{"type":"prose","value":{"id":"detecting_availability_of_the_payment_request_api","title":"Detecting availability of the Payment Request API","isH3":false,"content":"<p>You can effectively detect support for the Payment Request API by checking if the user's browser supports <a href=\"/en-US/docs/Web/API/PaymentRequest\"><code>PaymentRequest</code></a>, i.e. <code>if (window.PaymentRequest)</code>.</p>\n<p>In the following snippet, a merchant page performs this check, and if it returns <code>true</code> updates the checkout button to use <code>PaymentRequest</code> instead of legacy web forms.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> checkoutButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'checkout-button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>PaymentRequest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PaymentRequest</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">buildSupportedPaymentMethodNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">buildShoppingCartDetails</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  checkoutButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">paymentResponse</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Handle successful payment</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Handle cancelled or failed payment. For example, redirect to</span>\n      <span class=\"token comment\">// the legacy web form checkout:</span>\n      window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">'/legacy-web-form-checkout'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Every click on the checkout button should use a new instance of</span>\n    <span class=\"token comment\">// PaymentRequest object, because PaymentRequest.show() can be</span>\n    <span class=\"token comment\">// called only once per instance.</span>\n    request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PaymentRequest</span><span class=\"token punctuation\">(</span>\n      <span class=\"token function\">buildSupportedPaymentMethodNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">buildShoppingCartDetails</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> See our <a href=\"https://mdn.github.io/dom-examples/payment-request/feature-detect-support.html\" class=\"external\" rel=\" noopener\">Feature detect support demo</a> for the full code.</p>\n</div>"}},{"type":"prose","value":{"id":"checking_whether_users_can_make_payments","title":"Checking whether users can make payments","isH3":false,"content":"<p>Checking whether users can make payments is always useful. Here's a couple of related techniques.</p>"}},{"type":"prose","value":{"id":"customizing_the_payment_button","title":"Customizing the payment button","isH3":true,"content":"<p>One useful technique to employ is customizing the payment request button depending on whether users can make payments.</p>\n<p>In the following snippet we do just this — depending on whether the user can make a fast payment or needs to add payment credentials first, the title of the checkout button changes between \"Fast Checkout with W3C\" and \"Setup W3C Checkout\". In both cases, the checkout button calls <a href=\"/en-US/docs/Web/API/PaymentRequest/show\"><code>PaymentRequest.show()</code></a>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> checkoutButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'checkout-button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncheckoutButton<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> <span class=\"token string\">\"Loading…\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>PaymentRequest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PaymentRequest</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">buildSupportedPaymentMethodNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">buildShoppingCartDetails</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  request<span class=\"token punctuation\">.</span><span class=\"token function\">canMakePayment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">canMakeAFastPayment</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    checkoutButton<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> canMakeAFastPayment <span class=\"token operator\">?</span> <span class=\"token string\">\"Fast Checkout with W3C\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Setup W3C Checkout\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The user may have turned off the querying functionality in their</span>\n    <span class=\"token comment\">// privacy settings. The website does not know whether they can make</span>\n    <span class=\"token comment\">// a fast payment, so pick a generic title.</span>\n    checkoutButton<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">\"Checkout with W3C\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>Note:</strong> See our <a href=\"https://mdn.github.io/dom-examples/payment-request/customize-button-can-make-payment.html\" class=\"external\" rel=\" noopener\">Customizing the payment button demo</a> for the full code.</p>\n</div>"}},{"type":"prose","value":{"id":"checking_before_all_prices_are_known","title":"Checking before all prices are known","isH3":true,"content":"<p>If the checkout flow needs to know whether <a href=\"/en-US/docs/Web/API/PaymentRequest/canMakePayment\"><code>PaymentRequest.canMakePayment()</code></a> will return <code>true</code> even before all line items and their prices are known, you can instantiate <code>PaymentRequest</code> with dummy data and pre-query <code>.canMakePayment()</code>. If you call <code>.canMakePayment()</code> multiple times, keep in mind that the first parameter to the <code>PaymentRequest</code> constructor should contain the same method names and data.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// The page has loaded. Should the page use PaymentRequest?</span>\n<span class=\"token comment\">// If PaymentRequest fails, should the page fallback to manual</span>\n<span class=\"token comment\">// web form checkout?</span>\n<span class=\"token keyword\">const</span> supportedPaymentMethods <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token comment\">/* supported methods */</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> shouldCallPaymentRequest <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> fallbackToLegacyOnPaymentRequestFailure <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">PaymentRequest</span><span class=\"token punctuation\">(</span>supportedPaymentMethods<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">total</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">label</span><span class=\"token operator\">:</span> <span class=\"token string\">'Stub'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">amount</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">currency</span><span class=\"token operator\">:</span> <span class=\"token string\">'USD'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">'0.01'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">canMakePayment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    shouldCallPaymentRequest <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// The user may have turned off query ability in their privacy settings.</span>\n    <span class=\"token comment\">// Let's use PaymentRequest by default and fallback to legacy</span>\n    <span class=\"token comment\">// web form based checkout.</span>\n    shouldCallPaymentRequest <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    fallbackToLegacyOnPaymentRequestFailure <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// User has clicked on the checkout button. We know</span>\n<span class=\"token comment\">// what's in the cart, but we don't have a `Checkout` object.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">onCheckoutButtonClicked</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">lineItems</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">callServerToRetrieveCheckoutDetails</span><span class=\"token punctuation\">(</span>lineItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// The server has constructed the `Checkout` object. Now we know</span>\n<span class=\"token comment\">// all of the prices and shipping options.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">onServerCheckoutDetailsRetrieved</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">checkoutObject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shouldCallPaymentRequest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PaymentRequest</span><span class=\"token punctuation\">(</span>supportedPaymentMethods<span class=\"token punctuation\">,</span> checkoutObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">paymentResponse</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Post the results to the server and call `paymeResponse.complete()`.</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fallbackToLegacyOnPaymentRequestFailure<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">'/legacy-web-form-checkout'</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">showCheckoutErrorToUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">'/legacy-web-form-checkout'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>Note:</strong> See our <a href=\"https://mdn.github.io/dom-examples/payment-request/check-user-can-make-payment.html\" class=\"external\" rel=\" noopener\">Checking user can make payments before prices are known demo</a> for the full code.</p>\n</div>"}},{"type":"prose","value":{"id":"recommending_a_payment_app_when_user_has_no_apps","title":"Recommending a payment app when user has no apps","isH3":false,"content":"<p>If you select to pay with the BobPay demo payment provider on this merchant page, it tries to call <code>PaymentRequest.show()</code>, while intercepting the <code>NOTSUPPORTEDERR</code> exception. If this payment method is not supported, it redirects to the signup page for BobPay.</p>\n<p>The code looks something like this:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>checkoutButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PaymentRequest</span><span class=\"token punctuation\">(</span><span class=\"token function\">buildSupportedPaymentMethodData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">buildShoppingCartDetails</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">paymentResponse</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Here we would process the payment. For this demo, simulate immediate success:</span>\n    paymentResponse<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'success'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// For demo purposes:</span>\n        introPanel<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">;</span>\n        successPanel<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">'block'</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>code <span class=\"token operator\">===</span> DOMException<span class=\"token punctuation\">.</span><span class=\"token constant\">NOT_SUPPORTED_ERR</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span>\n        <span class=\"token string\">'https://bobpay.xyz/#download'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Other kinds of errors; cancelled or failed payment. For demo purposes:</span>\n      introPanel<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">;</span>\n      legacyPanel<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">'block'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect6\">\n  <p><strong>Note:</strong> See our <a href=\"https://mdn.github.io/dom-examples/payment-request/recommend-payment-app.html\" class=\"external\" rel=\" noopener\">Recommending a payment app when user has no apps demo</a> for the full code.</p>\n</div>"}},{"type":"prose","value":{"id":"showing_additional_user_interface_after_successful_payments","title":"Showing additional user interface after successful payments","isH3":false,"content":"<p>If the merchant desires to collect additional information not part of the API (e.g., additional delivery instructions), the merchant can show a page with additional <code>&lt;input type=\"text\"&gt;</code> fields after the checkout.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>request<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">paymentResponse</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Process payment here.</span>\n    <span class=\"token comment\">// Close the UI:</span>\n    paymentResponse<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'success'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Request additional shipping address details.</span>\n      <span class=\"token keyword\">const</span> additionalDetailsContainer <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'additional-details-container'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      additionalDetailsContainer<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">'block'</span><span class=\"token punctuation\">;</span>\n      window<span class=\"token punctuation\">.</span><span class=\"token function\">scrollto</span><span class=\"token punctuation\">(</span>additionalDetailsContainer<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Handle error.</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Handle error.</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect7\">\n  <p><strong>Note:</strong> See our <a href=\"https://mdn.github.io/dom-examples/payment-request/show-additional-ui-after-payment.html\" class=\"external\" rel=\" noopener\">Show additional user interface after successful payment demo</a> for the full code.</p>\n</div>"}},{"type":"prose","value":{"id":"pre-authorizing_transactions","title":"Pre-authorizing transactions","isH3":false,"content":"<p>Some use cases (e.g., paying for fuel at a service station) involve pre-authorization of payment. One way to do this is through a Payment Handler (see the <a href=\"https://w3c.github.io/payment-handler/\" class=\"external\" rel=\" noopener\">Payment Handler API</a>). At time of writing, that specification includes a <code>CanMakePayment</code> event that a Payment Handler could make use of to return authorization status.</p>\n<p>The merchant code would look like this:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> paymentRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PaymentRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">supportedMethods</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://example.com/preauth'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> details<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Send `CanMakePayment` event to the payment handler.</span>\npaymentRequest<span class=\"token punctuation\">.</span><span class=\"token function\">canMakePayment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">// The payment handler has pre-authorized a transaction</span>\n     <span class=\"token comment\">// with some static amount, e.g., USD $1.00.</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Pre-authorization failed or payment handler not installed.</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Unexpected error occurred.</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>The payment handler would include the following code:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>self<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'canmakepayment'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Pre-authorize here.</span>\n  <span class=\"token keyword\">const</span> preAuthSuccess <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  evt<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>preAuthSuccess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>This payment handler would need to live in a service worker at <code>https://example.com/preauth</code> scope.</p>\n<div class=\"notecard note\" id=\"sect8\">\n  <p><strong>Note:</strong> See our <a href=\"https://mdn.github.io/dom-examples/payment-request/pre-authorize-transaction.html\" class=\"external\" rel=\" noopener\">Pre-authorizing transactions demo</a> for the full code.</p>\n</div>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"https://googlechrome.github.io/samples/paymentrequest/\" class=\"external\" rel=\" noopener\">Google PaymentRequest Samples</a></li>\n</ul>"}}],"toc":[{"text":"The basics of making a payment","id":"the_basics_of_making_a_payment"},{"text":"Detecting availability of the Payment Request API","id":"detecting_availability_of_the_payment_request_api"},{"text":"Checking whether users can make payments","id":"checking_whether_users_can_make_payments"},{"text":"Recommending a payment app when user has no apps","id":"recommending_a_payment_app_when_user_has_no_apps"},{"text":"Showing additional user interface after successful payments","id":"showing_additional_user_interface_after_successful_payments"},{"text":"Pre-authorizing transactions","id":"pre-authorizing_transactions"},{"text":"See also","id":"see_also"}],"summary":"The Payment Request API provides a browser-based method of connecting users and their preferred payment systems and platforms to merchants that they want to pay for goods and services. This article is a guide to making use of the Payment Request API, with examples and suggested best practices.","popularity":0.0007,"modified":"2022-09-11T19:36:48.000Z","source":{"folder":"en-us/web/api/payment_request_api/using_the_payment_request_api","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/payment_request_api/using_the_payment_request_api/index.md","last_commit_url":"https://github.com/mdn/content/commit/20a58f1383da377a634b48902bff9b4fde9227c3","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/Payment_Request_API","title":"Payment Request API"},{"uri":"/en-US/docs/Web/API/Payment_Request_API/Using_the_Payment_Request_API","title":"Using the Payment Request API"}],"pageTitle":"Using the Payment Request API - Web APIs | MDN","noIndexing":false}}