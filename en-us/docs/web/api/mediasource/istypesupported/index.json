{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"MediaSource.isTypeSupported()","mdn_url":"/en-US/docs/Web/API/MediaSource/isTypeSupported","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Media_Source_Extensions_API\">Media Source Extensions API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/MediaSource\"><code>MediaSource</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaSource/MediaSource\"><code>MediaSource()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaSource/activeSourceBuffers\"><code>activeSourceBuffers</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaSource/duration\"><code>duration</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaSource/readyState\"><code>readyState</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaSource/sourceBuffers\"><code>sourceBuffers</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaSource/addSourceBuffer\"><code>addSourceBuffer()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaSource/clearLiveSeekableRange\"><code>clearLiveSeekableRange()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaSource/endOfStream\"><code>endOfStream()</code></a></li><li><em><code>isTypeSupported()</code></em></li><li><a href=\"/en-US/docs/Web/API/MediaSource/removeSourceBuffer\"><code>removeSourceBuffer()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaSource/setLiveSeekableRange\"><code>setLiveSeekableRange()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Inheritance:</summary><ol><li><a href=\"/en-US/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Media Source Extensions</summary><ol><li><a href=\"/en-US/docs/Web/API/HTMLVideoElement/getVideoPlaybackQuality\"><code>HTMLVideoElement.getVideoPlaybackQuality()</code></a></li><li><a href=\"/en-US/docs/Web/API/SourceBuffer\"><code>SourceBuffer</code></a></li><li><a href=\"/en-US/docs/Web/API/SourceBufferList\"><code>SourceBufferList</code></a></li><li><a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>TextTrack.sourceBuffer</code></a></li><li><a href=\"/en-US/docs/Web/API/URL/createObjectURL\"><code>URL.createObjectURL()</code></a></li><li><a href=\"/en-US/docs/Web/API/VideoPlaybackQuality\"><code>VideoPlaybackQuality</code></a></li><li><a href=\"/en-US/docs/Web/API/VideoTrack/sourceBuffer\"><code>VideoTrack.sourceBuffer</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong><code>MediaSource.isTypeSupported()</code></strong> static method returns a boolean value which is <code>true</code> if the given MIME type and (optional) codec are <em>likely</em> to be supported by the current <a href=\"/en-US/docs/Glossary/User_agent\">user agent</a>.</p>\n<p>\n  That is, if it can successfully create <a href=\"/en-US/docs/Web/API/SourceBuffer\"><code>SourceBuffer</code></a> objects for that media type.\n  If the returned value is <code>false</code>, then the user agent is certain that it <em>cannot</em> access media of the specified format.\n</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js-nolint notranslate\">isTypeSupported(type)\n</pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"type\"><code>type</code></dt>\n  <dd>\n    <p>A string specifying the MIME type of the media and (optionally) a <a href=\"/en-US/docs/Web/Media/Formats/codecs_parameter\"><code>codecs</code> parameter</a> containing a comma-separated list of the supported codecs.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>A value of <code>false</code> if the media of the given type will <em>not</em> play.</p>\n<p>\n  A value of <code>true</code> is returned if the browser can <em>probably</em> play media of the specified type.\n  This is <em>not</em> a guarantee, and your code must be prepared for the possibility that the media will not play correctly if at all.\n</p>\n<p>\n  All web APIs that work with media files use a \"no/maybe/probably\" approach (or, in this case, \"no or probably\") when determining if a media type can be used.\n  This is because media files are complex, intricate constructs with far too many subtle variations to be absolutely certain of anything until you actually use the contents of the media.\n</p>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<p>The following snippet is from an example written by Nick Desaulniers (<a href=\"https://nickdesaulniers.github.io/netfix/demo/bufferAll.html\" class=\"external\" rel=\" noopener\">view the full demo live</a>, or <a href=\"https://github.com/nickdesaulniers/netfix/blob/gh-pages/demo/bufferAll.html\" class=\"external\" rel=\" noopener\">download the source</a> for further investigation). The function <code>getMediaSource()</code>, which is not defined here, returns a <code>MediaSource</code>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> assetURL <span class=\"token operator\">=</span> <span class=\"token string\">'frag_bunny.mp4'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Need to be specific for Blink regarding codecs</span>\n<span class=\"token comment\">// ./mp4info frag_bunny.mp4 | grep Codec</span>\n<span class=\"token keyword\">const</span> mimeCodec <span class=\"token operator\">=</span> <span class=\"token string\">'video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> mediaSource<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'MediaSource'</span> <span class=\"token keyword\">in</span> window <span class=\"token operator\">&amp;&amp;</span> MediaSource<span class=\"token punctuation\">.</span><span class=\"token function\">isTypeSupported</span><span class=\"token punctuation\">(</span>mimeCodec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  mediaSource <span class=\"token operator\">=</span> <span class=\"token function\">getMediaSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mediaSource<span class=\"token punctuation\">.</span>readyState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// closed</span>\n  video<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>mediaSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  mediaSource<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sourceopen'</span><span class=\"token punctuation\">,</span> sourceOpen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Unsupported MIME type or codec: '</span><span class=\"token punctuation\">,</span> mimeCodec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sourceOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>readyState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// open</span>\n  <span class=\"token keyword\">const</span> sourceBuffer <span class=\"token operator\">=</span> mediaSource<span class=\"token punctuation\">.</span><span class=\"token function\">addSourceBuffer</span><span class=\"token punctuation\">(</span>mimeCodec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">fetchAB</span><span class=\"token punctuation\">(</span>assetURL<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">buf</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    sourceBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'updateend'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      mediaSource<span class=\"token punctuation\">.</span><span class=\"token function\">endOfStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      video<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mediaSource<span class=\"token punctuation\">.</span>readyState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ended</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    sourceBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">appendBuffer</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/media-source/#dom-mediasource-istypesupported","title":"Media Source Extensions™"}],"query":"api.MediaSource.isTypeSupported"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.MediaSource.isTypeSupported","dataURL":"/en-US/docs/Web/API/MediaSource/isTypeSupported/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/Media_Source_Extensions_API\">Media Source Extensions API</a></li>\n  <li><a href=\"/en-US/docs/Web/Media/Formats\">Guide to media types and formats on the web</a></li>\n  <li><a href=\"/en-US/docs/Web/Media/Formats/codecs_parameter\">The \"codecs\" parameter in common media types</a></li>\n  <li><a href=\"/en-US/docs/Web/API/SourceBuffer\"><code>SourceBuffer</code></a></li>\n  <li><a href=\"/en-US/docs/Web/API/SourceBufferList\"><code>SourceBufferList</code></a></li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The MediaSource.isTypeSupported() static method returns a boolean value which is true if the given MIME type and (optional) codec are likely to be supported by the current user agent.","popularity":0.0004,"modified":"2022-09-13T05:54:54.000Z","other_translations":[{"title":"MediaSource.isTypeSupported()","locale":"ja","native":"日本語"},{"title":"MediaSource.isTypeSupported()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/web/api/mediasource/istypesupported","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/mediasource/istypesupported/index.md","last_commit_url":"https://github.com/mdn/content/commit/b7556b71e1fc3e89057671b372871e9f33d3f0b8","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/MediaSource","title":"MediaSource"},{"uri":"/en-US/docs/Web/API/MediaSource/isTypeSupported","title":"MediaSource.isTypeSupported()"}],"pageTitle":"MediaSource.isTypeSupported() - Web APIs | MDN","noIndexing":false}}