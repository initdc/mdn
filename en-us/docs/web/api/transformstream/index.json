{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"TransformStream","mdn_url":"/en-US/docs/Web/API/TransformStream","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Streams_API\">Streams API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/TransformStream\"><code>TransformStream</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/API/TransformStream/TransformStream\"><code>TransformStream()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/API/TransformStream/readable\"><code>readable</code></a></li><li><a href=\"/en-US/docs/Web/API/TransformStream/writable\"><code>writable</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Streams</summary><ol><li><a href=\"/en-US/docs/Web/API/ByteLengthQueuingStrategy\"><code>ByteLengthQueuingStrategy</code></a></li><li><a href=\"/en-US/docs/Web/API/CountQueuingStrategy\"><code>CountQueuingStrategy</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableByteStreamController\"><code>ReadableByteStreamController</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamBYOBReader\"><code>ReadableStreamBYOBReader</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamBYOBRequest\"><code>ReadableStreamBYOBRequest</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamDefaultController\"><code>ReadableStreamDefaultController</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamDefaultReader\"><code>ReadableStreamDefaultReader</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/body\"><code>Response.body</code></a></li><li><a href=\"/en-US/docs/Web/API/WritableStream\"><code>WritableStream</code></a></li><li><a href=\"/en-US/docs/Web/API/WritableStreamDefaultController\"><code>WritableStreamDefaultController</code></a></li><li><a href=\"/en-US/docs/Web/API/WritableStreamDefaultWriter\"><code>WritableStreamDefaultWriter</code></a></li><li><a href=\"/en-US/docs/Web/API/fetch\"><code>fetch()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong><code>TransformStream</code></strong> interface of the <a href=\"/en-US/docs/Web/API/Streams_API\">Streams API</a> represents a concrete implementation of the <a href=\"/en-US/docs/Web/API/Streams_API/Concepts#pipe_chains\">pipe chain</a> <em>transform stream</em> concept.</p>\n<p>\n  It may be passed to the <a href=\"/en-US/docs/Web/API/ReadableStream/pipeThrough\"><code>ReadableStream.pipeThrough()</code></a> method in order to transform a stream of data from one format into another.\n  For example, it might be used to decode (or encode) video frames, decompress data, or convert the stream from XML to JSON.\n</p>\n<p>\n  A transformation algorithm may be provided as an optional argument to the object constructor.\n  If not supplied, data is not modified when piped through the stream.\n</p>\n<p><code>TransformStream</code> is a <a href=\"/en-US/docs/Glossary/Transferable_objects\">transferable object</a>.</p>"}},{"type":"prose","value":{"id":"constructor","title":"Constructor","isH3":false,"content":"<dl>\n  <dt id=\"transformstream\"><a href=\"/en-US/docs/Web/API/TransformStream/TransformStream\" title=\"TransformStream()\"><code>TransformStream()</code></a></dt>\n  <dd>\n    <p>Creates and returns a transform stream object, optionally specifying a transformation object and queuing strategies for the streams.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"properties","title":"Properties","isH3":false,"content":"<dl>\n  <dt id=\"transformstream.readable\"><a href=\"/en-US/docs/Web/API/TransformStream/readable\"><code>TransformStream.readable</code></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>The <code>readable</code> end of a <code>TransformStream</code>.</p>\n  </dd>\n  <dt id=\"transformstream.writable\"><a href=\"/en-US/docs/Web/API/TransformStream/writable\"><code>TransformStream.writable</code></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>The <code>writable</code> end of a <code>TransformStream</code>.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"methods","title":"Methods","isH3":false,"content":"<p>None</p>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"anything-to-uint8array_stream","title":"Anything-to-uint8array stream","isH3":true,"content":"<p>In the following example, a transform stream passes through all chunks it receives as <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a> values.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> transformContent <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// required.</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk<span class=\"token punctuation\">,</span> controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    chunk <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> chunk<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> chunk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'object'</span><span class=\"token operator\">:</span>\n        <span class=\"token comment\">// just say the stream is done I guess</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>chunk <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          controller<span class=\"token punctuation\">.</span><span class=\"token function\">terminate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ArrayBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">isView</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          controller<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">,</span> chunk<span class=\"token punctuation\">.</span>byteOffset<span class=\"token punctuation\">,</span> chunk<span class=\"token punctuation\">.</span>byteLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n          Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n          chunk<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          controller<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token keyword\">typeof</span> chunk<span class=\"token punctuation\">.</span>valueOf <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">&amp;&amp;</span>\n          chunk<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> chunk\n        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> controller<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hack</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'toJSON'</span> <span class=\"token keyword\">in</span> chunk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> controller<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'symbol'</span><span class=\"token operator\">:</span>\n        controller<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot send a symbol as a chunk part\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'undefined'</span><span class=\"token operator\">:</span>\n        controller<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot send undefined as a chunk part\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        controller<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textencoder<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* do any destructor work here */</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AnyToU8Stream</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TransformStream</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>transformContent<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">textencoder</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"polyfilling_textencoderstream_and_textdecoderstream","title":"Polyfilling TextEncoderStream and TextDecoderStream","isH3":true,"content":"<p>Note that this is deprecated by the native constructors. This is intended as a polyfill for unsupported platforms.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> tes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>encoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk<span class=\"token punctuation\">,</span> controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    controller<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>encoder<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> _jstes_wm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* info holder */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">JSTextEncoderStream</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TransformStream</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>tes<span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n    _jstes_wm<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">encoding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> _jstes_wm<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encoder<span class=\"token punctuation\">.</span>encoding<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Similarly, <code>TextDecoderStream</code> can be written as such:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> tds <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>decoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextDecoder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>encoding<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk<span class=\"token punctuation\">,</span> controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    controller<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>decoder<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">stream</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> _jstds_wm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* info holder */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">JSTextDecoderStream</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TransformStream</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>encoding <span class=\"token operator\">=</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>options<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>tds<span class=\"token punctuation\">,</span> encoding<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n    _jstds_wm<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">encoding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> _jstds_wm<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decoder<span class=\"token punctuation\">.</span>encoding<span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">fatal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> _jstds_wm<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decoder<span class=\"token punctuation\">.</span>fatal<span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">ignoreBOM</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> _jstds_wm<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decoder<span class=\"token punctuation\">.</span>ignoreBOM<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"chaining_multiple_readablestreams_together","title":"Chaining multiple ReadableStreams together","isH3":true,"content":"<p>This is a useful one, where multiple streams can be conjoined. Examples include building a PWA with progressive loading and progressive streaming.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> responses <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token comment\">/* conjoined response tree */</span> <span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>readable<span class=\"token punctuation\">,</span> writable<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TransformStream</span>\n\nresponses<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">pipeTo</span><span class=\"token punctuation\">(</span>writable<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">preventClose</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>Note that this is not resilient to other influences.</p>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://streams.spec.whatwg.org/#ts-class","title":"Streams Standard"}],"query":"api.TransformStream"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.TransformStream","dataURL":"/en-US/docs/Web/API/TransformStream/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"https://whatwg-stream-visualizer.glitch.me/\" class=\"external\" rel=\" noopener\">WHATWG Stream Visualizer</a>, for a basic visualization of readable, writable, and transform streams.</li>\n  <li><a href=\"https://web.dev/streams/\" class=\"external\" rel=\" noopener\">Streams—The Definitive Guide</a></li>\n</ul>"}}],"toc":[{"text":"Constructor","id":"constructor"},{"text":"Properties","id":"properties"},{"text":"Methods","id":"methods"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The TransformStream interface of the Streams API represents a concrete implementation of the pipe chain transform stream concept.","popularity":0.0011,"modified":"2022-09-09T05:19:45.000Z","other_translations":[{"title":"TransformStream","locale":"ja","native":"日本語"},{"title":"TransformStream","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/web/api/transformstream","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/transformstream/index.md","last_commit_url":"https://github.com/mdn/content/commit/f7dae62645a2c735ed6f6ed63f664bf279fdfc4b","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/TransformStream","title":"TransformStream"}],"pageTitle":"TransformStream - Web APIs | MDN","noIndexing":false}}