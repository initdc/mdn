{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"URLSearchParams","mdn_url":"/en-US/docs/Web/API/URLSearchParams","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/URL_API\">URL API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/URLSearchParams\"><code>URLSearchParams</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/API/URLSearchParams/URLSearchParams\"><code>URLSearchParams()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/URLSearchParams/append\"><code>append()</code></a></li><li><a href=\"/en-US/docs/Web/API/URLSearchParams/delete\"><code>delete()</code></a></li><li><a href=\"/en-US/docs/Web/API/URLSearchParams/entries\"><code>entries()</code></a></li><li><a href=\"/en-US/docs/Web/API/URLSearchParams/forEach\"><code>forEach()</code></a></li><li><a href=\"/en-US/docs/Web/API/URLSearchParams/get\"><code>get()</code></a></li><li><a href=\"/en-US/docs/Web/API/URLSearchParams/getAll\"><code>getAll()</code></a></li><li><a href=\"/en-US/docs/Web/API/URLSearchParams/has\"><code>has()</code></a></li><li><a href=\"/en-US/docs/Web/API/URLSearchParams/keys\"><code>keys()</code></a></li><li><a href=\"/en-US/docs/Web/API/URLSearchParams/set\"><code>set()</code></a></li><li><a href=\"/en-US/docs/Web/API/URLSearchParams/sort\"><code>sort()</code></a></li><li><a href=\"/en-US/docs/Web/API/URLSearchParams/toString\"><code>toString()</code></a></li><li><a href=\"/en-US/docs/Web/API/URLSearchParams/values\"><code>values()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for URL API</summary><ol><li><a href=\"/en-US/docs/Web/API/URL\"><code>URL</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong><code>URLSearchParams</code></strong> interface defines utility methods to work with the query string of a URL.</p>\n<p>An object implementing <code>URLSearchParams</code> can directly be used in a <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/for...of\"><code>for...of</code></a> structure to iterate over key/value pairs in the same order as they appear in the query string, for example the following two lines are equivalent:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> mySearchParams<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> mySearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre></div><div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> This feature is available in <a href=\"/en-US/docs/Web/API/Web_Workers_API\">Web Workers</a></p>\n</div>"}},{"type":"prose","value":{"id":"constructor","title":"Constructor","isH3":false,"content":"<dl>\n  <dt id=\"urlsearchparams\"><a href=\"/en-US/docs/Web/API/URLSearchParams/URLSearchParams\" title=\"URLSearchParams()\"><code>URLSearchParams()</code></a></dt>\n  <dd>\n    <p>Returns a <code>URLSearchParams</code> object instance.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"methods","title":"Methods","isH3":false,"content":"<dl>\n  <dt id=\"urlsearchparams.append\"><a href=\"/en-US/docs/Web/API/URLSearchParams/append\"><code>URLSearchParams.append()</code></a></dt>\n  <dd>\n    <p>Appends a specified key/value pair as a new search parameter.</p>\n  </dd>\n  <dt id=\"urlsearchparams.delete\"><a href=\"/en-US/docs/Web/API/URLSearchParams/delete\"><code>URLSearchParams.delete()</code></a></dt>\n  <dd>\n    <p>Deletes the given search parameter, and its associated value, from the list of all search parameters.</p>\n  </dd>\n  <dt id=\"urlsearchparams.entries\"><a href=\"/en-US/docs/Web/API/URLSearchParams/entries\"><code>URLSearchParams.entries()</code></a></dt>\n  <dd>\n    <p>Returns an <a href=\"/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\"><code>iterator</code></a> allowing iteration through all key/value pairs contained in this object in the same order as they appear in the query string.</p>\n  </dd>\n  <dt id=\"urlsearchparams.foreach\"><a href=\"/en-US/docs/Web/API/URLSearchParams/forEach\"><code>URLSearchParams.forEach()</code></a></dt>\n  <dd>\n    <p>Allows iteration through all values contained in this object via a callback function.</p>\n  </dd>\n  <dt id=\"urlsearchparams.get\"><a href=\"/en-US/docs/Web/API/URLSearchParams/get\"><code>URLSearchParams.get()</code></a></dt>\n  <dd>\n    <p>Returns the first value associated with the given search parameter.</p>\n  </dd>\n  <dt id=\"urlsearchparams.getall\"><a href=\"/en-US/docs/Web/API/URLSearchParams/getAll\"><code>URLSearchParams.getAll()</code></a></dt>\n  <dd>\n    <p>Returns all the values associated with a given search parameter.</p>\n  </dd>\n  <dt id=\"urlsearchparams.has\"><a href=\"/en-US/docs/Web/API/URLSearchParams/has\"><code>URLSearchParams.has()</code></a></dt>\n  <dd>\n    <p>Returns a boolean value indicating if such a given parameter exists.</p>\n  </dd>\n  <dt id=\"urlsearchparams.keys\"><a href=\"/en-US/docs/Web/API/URLSearchParams/keys\"><code>URLSearchParams.keys()</code></a></dt>\n  <dd>\n    <p>Returns an <a href=\"/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\"><code>iterator</code></a> allowing iteration through all keys of the key/value pairs contained in this object.</p>\n  </dd>\n  <dt id=\"urlsearchparams.set\"><a href=\"/en-US/docs/Web/API/URLSearchParams/set\"><code>URLSearchParams.set()</code></a></dt>\n  <dd>\n    <p>Sets the value associated with a given search parameter to the given value. If there are several values, the others are deleted.</p>\n  </dd>\n  <dt id=\"urlsearchparams.sort\"><a href=\"/en-US/docs/Web/API/URLSearchParams/sort\"><code>URLSearchParams.sort()</code></a></dt>\n  <dd>\n    <p>Sorts all key/value pairs, if any, by their keys.</p>\n  </dd>\n  <dt id=\"urlsearchparams.tostring\"><a href=\"/en-US/docs/Web/API/URLSearchParams/toString\"><code>URLSearchParams.toString()</code></a></dt>\n  <dd>\n    <p>Returns a string containing a query string suitable for use in a URL.</p>\n  </dd>\n  <dt id=\"urlsearchparams.values\"><a href=\"/en-US/docs/Web/API/URLSearchParams/values\"><code>URLSearchParams.values()</code></a></dt>\n  <dd>\n    <p>Returns an <a href=\"/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\"><code>iterator</code></a> allowing iteration through all values of the key/value pairs contained in this object.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> paramsString <span class=\"token operator\">=</span> <span class=\"token string\">'q=URLUtils.searchParams&amp;topic=api'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> searchParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>paramsString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Iterating the search parameters</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> p <span class=\"token keyword\">of</span> searchParams<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'topic'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'topic'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"api\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'topic'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// [\"api\"]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'topic'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'webdev'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// \"q=URLUtils.searchParams&amp;topic=api&amp;topic=webdev\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'topic'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'More webdev'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// \"q=URLUtils.searchParams&amp;topic=More+webdev\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'topic'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// \"q=URLUtils.searchParams\"</span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Search parameters can also be an object</span>\n<span class=\"token keyword\">const</span> paramsObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">baz</span><span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> searchParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>paramsObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// \"foo=bar&amp;baz=bar\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// \"bar\"</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"duplicate_search_parameters","title":"Duplicate search parameters","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> paramStr <span class=\"token operator\">=</span> <span class=\"token string\">'foo=bar&amp;foo=baz'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> searchParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>paramStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// \"foo=bar&amp;foo=baz\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// bar, only returns the first value</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// [\"bar\", \"baz\"]</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"no_url_parsing","title":"No URL parsing","isH3":true,"content":"<p>The <code>URLSearchParams</code> constructor does <em>not</em> parse full URLs. However, it will strip an initial leading <code>?</code> off of a string, if present.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> paramsString1 <span class=\"token operator\">=</span> <span class=\"token string\">'http://example.com/search?query=%40'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> searchParams1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>paramsString1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>searchParams1<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'query'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>searchParams1<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://example.com/search?query'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>searchParams1<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'query'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>searchParams1<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://example.com/search?query'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"@\" (equivalent to decodeURIComponent('%40'))</span>\n\n<span class=\"token keyword\">const</span> paramsString2 <span class=\"token operator\">=</span> <span class=\"token string\">'?query=value'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> searchParams2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>paramsString2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>searchParams2<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'query'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://example.com/search?query=%40'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> searchParams3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>searchParams3<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'query'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"preserving_plus_signs","title":"Preserving plus signs","isH3":true,"content":"<p>The <code>URLSearchParams</code> constructor interprets plus signs (<code>+</code>) as spaces, which might cause problems.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> rawData <span class=\"token operator\">=</span> <span class=\"token string\">'\\x13à\\x17@\\x1F\\x80'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> base64Data <span class=\"token operator\">=</span> <span class=\"token function\">btoa</span><span class=\"token punctuation\">(</span>rawData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'E+AXQB+A'</span>\n\n<span class=\"token keyword\">const</span> searchParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">bin=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>base64Data<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'bin=E+AXQB+A'</span>\n<span class=\"token keyword\">const</span> binQuery <span class=\"token operator\">=</span> searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'E AXQB A', '+' is replaced by spaces</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">atob</span><span class=\"token punctuation\">(</span>binQuery<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> rawData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n</code></pre></div>\n<p>You can avoid this by encoding the data with the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\"><code>encodeURIComponent()</code></a>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> rawData <span class=\"token operator\">=</span> <span class=\"token string\">'\\x13à\\x17@\\x1F\\x80'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> base64Data <span class=\"token operator\">=</span> <span class=\"token function\">btoa</span><span class=\"token punctuation\">(</span>rawData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'E+AXQB+A'</span>\n<span class=\"token keyword\">const</span> encodedBase64Data <span class=\"token operator\">=</span> <span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>base64Data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'E%2BAXQB%2BA'</span>\n\n<span class=\"token keyword\">const</span> searchParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">bin=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>encodedBase64Data<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'bin=E%2BAXQB%2BA'</span>\n<span class=\"token keyword\">const</span> binQuery <span class=\"token operator\">=</span> searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'E+AXQB+A'</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">atob</span><span class=\"token punctuation\">(</span>binQuery<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> rawData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"empty_value_vs._no_value","title":"Empty value vs. no value","isH3":true,"content":"<p><code>URLSearchParams</code> doesn't distinguish between a parameter with nothing after the <code>=</code>, and a parameter that doesn't have a <code>=</code> altogether.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> emptyVal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo=&amp;bar=baz'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>emptyVal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns ''</span>\n<span class=\"token keyword\">const</span> noEquals <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo&amp;bar=baz'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>noEquals<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// also returns ''</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>noEquals<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'foo=&amp;bar=baz'</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://url.spec.whatwg.org/#urlsearchparams","title":"URL Standard"}],"query":"api.URLSearchParams"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.URLSearchParams","dataURL":"/en-US/docs/Web/API/URLSearchParams/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"https://github.com/zloirock/core-js#url-and-urlsearchparams\" class=\"external\" rel=\" noopener\">Polyfill of <code>URLSearchParams</code> in <code>core-js</code></a></li>\n  <li>The <a href=\"/en-US/docs/Web/API/URL\"><code>URL</code></a> interface.</li>\n  <li><a href=\"https://developer.chrome.com/blog/urlsearchparams/\" class=\"external\" rel=\" noopener\">Google Developers: Easy URL manipulation with URLSearchParams</a></li>\n</ul>"}}],"toc":[{"text":"Constructor","id":"constructor"},{"text":"Methods","id":"methods"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The URLSearchParams interface defines utility methods to work with the query string of a URL.","popularity":0.0374,"modified":"2022-09-09T05:19:45.000Z","other_translations":[{"title":"URLSearchParams","locale":"es","native":"Español"},{"title":"URLSearchParams","locale":"fr","native":"Français"},{"title":"URLSearchParams","locale":"ja","native":"日本語"},{"title":"URLSearchParams","locale":"ko","native":"한국어"},{"title":"URLSearchParams","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"URLSearchParams","locale":"ru","native":"Русский"},{"title":"URLSearchParams","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/web/api/urlsearchparams","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/urlsearchparams/index.md","last_commit_url":"https://github.com/mdn/content/commit/f7dae62645a2c735ed6f6ed63f664bf279fdfc4b","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/URLSearchParams","title":"URLSearchParams"}],"pageTitle":"URLSearchParams - Web APIs | MDN","noIndexing":false}}