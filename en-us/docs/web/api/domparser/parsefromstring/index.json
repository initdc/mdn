{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"DOMParser.parseFromString()","mdn_url":"/en-US/docs/Web/API/DOMParser/parseFromString","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/DOMParser\"><code>DOMParser</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/API/DOMParser/DOMParser\"><code>DOMParser()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><em><code>parseFromString()</code></em></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong><code>parseFromString()</code></strong> method of the <a href=\"/en-US/docs/Web/API/DOMParser\"><code>DOMParser</code></a> interface parses a string containing either HTML or XML, returning an <a href=\"/en-US/docs/Web/API/HTMLDocument\"><code>HTMLDocument</code></a> or an <a href=\"/en-US/docs/Web/API/XMLDocument\"><code>XMLDocument</code></a>.</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js-nolint notranslate\">parseFromString(string, mimeType)\n</pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"string\"><code>string</code></dt>\n  <dd>\n    <p>\n      The string to be parsed. It must contain either an\n      <a href=\"/en-US/docs/Glossary/HTML\">HTML</a>, <a href=\"/en-US/docs/Glossary/XML\">xml</a>, <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\">xhtml+xml</a>, or\n      <a href=\"/en-US/docs/Glossary/SVG\">svg</a> document.\n    </p>\n  </dd>\n  <dt id=\"mimetype\"><code>mimeType</code></dt>\n  <dd>\n    <p>A string. This string determines whether the XML parser or the HTML parser is used to parse the string. Valid values are:</p>\n    <ul>\n      <li><code>text/html</code></li>\n      <li><code>text/xml</code></li>\n      <li><code>application/xml</code></li>\n      <li><code>application/xhtml+xml</code></li>\n      <li><code>image/svg+xml</code></li>\n    </ul>\n    <p>A value of <code>text/html</code> will invoke the HTML parser, and the method will return an <a href=\"/en-US/docs/Web/API/HTMLDocument\"><code>HTMLDocument</code></a>.</p>\n    <p>The other valid values (<code>text/xml</code>, <code>application/xml</code>, <code>application/xhtml+xml</code>, and <code>image/svg+xml</code>) are functionally equivalent. They all invoke the XML parser, and the method will return a <a href=\"/en-US/docs/Web/API/XMLDocument\"><code>XMLDocument</code></a>.</p>\n    <p>Any other value is invalid and will cause a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> to be thrown.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>\n  An <a href=\"/en-US/docs/Web/API/HTMLDocument\"><code>HTMLDocument</code></a> or an <a href=\"/en-US/docs/Web/API/XMLDocument\"><code>XMLDocument</code></a>, depending on the\n  <code>mimeType</code> argument.\n</p>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"parsing_xml_svg_and_html","title":"Parsing XML, SVG, and HTML","isH3":true,"content":"<p>Note that a MIME type of <code>text/html</code> will invoke the HTML parser, and any other valid MIME type will invoke the XML parser. The <code>application/xml</code> and <code>image/svg+xml</code> MIME types in the example below are functionally identical â€” the latter does not include any SVG-specific parsing rules. Distinguishing between the two serves only to clarify the code's intent.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> parser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DOMParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> xmlString <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;warning&gt;Beware of the tiger&lt;/warning&gt;\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> doc1 <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span><span class=\"token function\">parseFromString</span><span class=\"token punctuation\">(</span>xmlString<span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// XMLDocument</span>\n\n<span class=\"token keyword\">const</span> svgString <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;circle cx=\\\"50\\\" cy=\\\"50\\\" r=\\\"50\\\"/&gt;\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> doc2 <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span><span class=\"token function\">parseFromString</span><span class=\"token punctuation\">(</span>svgString<span class=\"token punctuation\">,</span> <span class=\"token string\">\"image/svg+xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// XMLDocument</span>\n\n<span class=\"token keyword\">const</span> htmlString <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;strong&gt;Beware of the leopard&lt;/strong&gt;\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> doc3 <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span><span class=\"token function\">parseFromString</span><span class=\"token punctuation\">(</span>htmlString<span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// HTMLDocument</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doc1<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// \"Beware of the tiger\"</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doc2<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">.</span>tagName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"circle\"</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doc3<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"Beware of the leopard\"</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"error_handling","title":"Error handling","isH3":true,"content":"<p>When using the XML parser with a string that doesn't represent well-formed XML, the <a href=\"/en-US/docs/Web/API/XMLDocument\"><code>XMLDocument</code></a> returned by <code>parseFromString</code> will contain a <code>&lt;parsererror&gt;</code> node describing the nature of the parsing error.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> parser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DOMParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> xmlString <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;warning&gt;Beware of the missing closing tag\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> doc <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span><span class=\"token function\">parseFromString</span><span class=\"token punctuation\">(</span>xmlString<span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> errorNode <span class=\"token operator\">=</span> doc<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'parsererror'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errorNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// parsing failed</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// parsing succeeded</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Additionally, the parsing error may be reported to the browser's JavaScript console.</p>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-domparser-parsefromstring-dev","title":"HTML Standard"}],"query":"api.DOMParser.parseFromString"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.DOMParser.parseFromString","dataURL":"/en-US/docs/Web/API/DOMParser/parseFromString/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/XMLSerializer\"><code>XMLSerializer</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\"><code>JSON.parse()</code></a> - counterpart for <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON\"><code>JSON</code></a> documents.</li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The parseFromString() method of the DOMParser interface parses a string containing either HTML or XML, returning an HTMLDocument or an XMLDocument.","popularity":0.0043,"modified":"2022-09-13T05:27:14.000Z","source":{"folder":"en-us/web/api/domparser/parsefromstring","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/domparser/parsefromstring/index.md","last_commit_url":"https://github.com/mdn/content/commit/4e233c16c6f0d347972c5c762f5b836318a46124","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/DOMParser","title":"DOMParser"},{"uri":"/en-US/docs/Web/API/DOMParser/parseFromString","title":"DOMParser.parseFromString()"}],"pageTitle":"DOMParser.parseFromString() - Web APIs | MDN","noIndexing":false}}