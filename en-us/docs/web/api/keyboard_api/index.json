{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Keyboard API","mdn_url":"/en-US/docs/Web/API/Keyboard_API","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Keyboard_API\"><code>Keyboard_API</code></a></strong></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard experimental\" id=\"sect1\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"/en-US/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</p></div>\n<p>The Keyboard API provides methods for working with a physical keyboard that is attached to a device running a browser.</p>\n<p>It provides several capabilities. <em>Keyboard mapping</em> provides an interface for retrieving the string generated by particular physical key on a keyboard to correctly identify that key to a user. <em>Keyboard locking</em> enables a web page to capture keys that are normally reserved by the user agent or the underlying operating system. The intended use of the Keyboard API is by web applications such as games or remote access apps that provide a fullscreen immersive experience.</p>"}},{"type":"prose","value":{"id":"keyboard_api_concepts_and_usage","title":"Keyboard API concepts and usage","isH3":false,"content":""}},{"type":"prose","value":{"id":"keyboard_mapping","title":"Keyboard mapping","isH3":true,"content":"<p>On physical keyboards, the <code>code</code> attribute contains the physical location of the key that was pressed, and the <code>key</code> attribute contains the string generated by pressing the key at that physical location on the keyboard. The <code>key</code> value takes into account the keyboard's locale (for example, 'en-US'), layout (for example, 'QWERTY'), and modifier-key state (Shift, Control, etc.). Historically there has been no way to retrieve that information.</p>\n<p>The Keyboard Map API provides a way to retrieve the string generated by a particular key press, through the <a href=\"/en-US/docs/Web/API/Keyboard\"><code>Keyboard</code></a> interface and the <a href=\"/en-US/docs/Web/API/KeyboardLayoutMap\"><code>KeyboardLayoutMap</code></a> interface. The <a href=\"/en-US/docs/Web/API/Keyboard\"><code>Keyboard</code></a> interface is accessed through <a href=\"/en-US/docs/Web/API/Navigator/keyboard\"><code>navigator.keyboard</code></a>. <a href=\"/en-US/docs/Web/API/Keyboard\"><code>Keyboard</code></a> provides the <a href=\"/en-US/docs/Web/API/Keyboard/getLayoutMap\"><code>Keyboard.getLayoutMap</code></a> method, which returns a promise that resolves with a <a href=\"/en-US/docs/Web/API/KeyboardLayoutMap\"><code>KeyboardLayoutMap</code></a> object that contains members for converting codes to keys. A list of valid code values is found in the <a href=\"https://w3c.github.io/uievents-code/#key-alphanumeric-writing-system\" class=\"external\" rel=\" noopener\">Writing System Keys</a> section of the <a href=\"https://w3c.github.io/uievents-code/\" class=\"external\" rel=\" noopener\">UI Events KeyboardEvent code Values</a> spec.</p>\n<p>The following example demonstrates how to get the location-specific or layout-specific string associated with the key labeled <code>W</code> on an English QWERTY keyboard.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>navigator<span class=\"token punctuation\">.</span>keyboard<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> keyboard <span class=\"token operator\">=</span> navigator<span class=\"token punctuation\">.</span>keyboard<span class=\"token punctuation\">;</span>\n  keyboard<span class=\"token punctuation\">.</span><span class=\"token function\">getLayoutMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">keyboardLayoutMap</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> upKey <span class=\"token operator\">=</span> keyboardLayoutMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'KeyW'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Press </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>upKey<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> to move up.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Do something else.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"keyboard_locking","title":"Keyboard locking","isH3":true,"content":"<p>Richly interactive web pages, games, and remote-streaming experiences often require access to special keys and keyboard shortcuts while in fullscreen mode. Examples of such key/key combinations include Escape, Alt+Tab, and Ctrl+N. Those keys and key combinations are typically captured by the user agent or the underlying operating system, as illustrated in the following example.</p>\n<p>To capture the \"W\", \"A\", \"S\", and \"D\" keys, call <code>lock()</code> with a list that contains the key code attribute value for each of these keys:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>navigator<span class=\"token punctuation\">.</span>keyboard<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"KeyW\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"KeyA\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"KeyS\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"KeyD\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>This captures these keys regardless of which modifiers are used with the key press. Assuming a standard United States QWERTY layout, registering <code>KeyW</code> ensures that \"W\", Shift+\"W\", Control+\"W\", Control+Shift+\"W\", and all other key modifier combinations with \"W\" are sent to the app. The same applies to for <code>KeyA</code>, <code>KeyS</code> and <code>KeyD</code>.</p>"}},{"type":"prose","value":{"id":"writing_system_keys","title":"Writing system keys","isH3":true,"content":"<p>The codes passed <a href=\"/en-US/docs/Web/API/Keyboard/lock\"><code>Keyboard.lock</code></a> and the various methods of the <a href=\"/en-US/docs/Web/API/KeyboardLayoutMap\"><code>KeyboardLayoutMap</code></a> interface are called \"writing system keys\".</p>\n<p>\"Writing system keys\" are defined in the <a href=\"https://w3c.github.io/uievents-code/#key-alphanumeric-writing-system\" class=\"external\" rel=\" noopener\">Writing System Keys</a> section of the <a href=\"https://w3c.github.io/uievents-code/\" class=\"external\" rel=\" noopener\">UI Events KeyboardEvent code Values</a> spec as the physical keys that change meaning based on the current locale and keyboard layout. These keys are shown below. Blue keys are present on all standard keyboards while green keys are only available on some keyboards.</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/Keyboard_API/writing-system-keys.png\" alt=\"Writing system keys as defined by the UI Events KeyboardEvent code Values spec.\" width=\"2719\" height=\"938\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"interfaces","title":"Interfaces","isH3":false,"content":"<dl>\n  <dt id=\"keyboard\"><a href=\"/en-US/docs/Web/API/Keyboard\"><code>Keyboard</code></a> <svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg></dt>\n  <dd>\n    <p>Provides functions that retrieve keyboard layout maps and toggle capturing of key presses from the physical keyboard.</p>\n  </dd>\n  <dt id=\"keyboardlayoutmap\"><a href=\"/en-US/docs/Web/API/KeyboardLayoutMap\"><code>KeyboardLayoutMap</code></a> <svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg></dt>\n  <dd>\n    <p>A map-like object with functions for retrieving the string associated with specific physical keys.</p>\n  </dd>\n  <dt id=\"navigator.keyboard\"><a href=\"/en-US/docs/Web/API/Navigator/keyboard\"><code>navigator.keyboard</code></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span> <svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg></dt>\n  <dd>\n    <p>Returns a <a href=\"/en-US/docs/Web/API/Keyboard\"><code>Keyboard</code></a> object which provides access to functions that retrieve keyboard layout maps and toggle capturing of key presses from the physical keyboard.</p>\n  </dd>\n</dl>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"query":"api.Keyboard,api.KeyboardLayoutMap","specifications":[]}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"data":null,"query":"api.Keyboard,api.KeyboardLayoutMap","browsers":null}}],"toc":[{"text":"Keyboard API concepts and usage","id":"keyboard_api_concepts_and_usage"},{"text":"Interfaces","id":"interfaces"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"}],"summary":"The Keyboard API provides methods for working with a physical keyboard that is attached to a device running a browser.","popularity":0.0003,"modified":"2022-09-09T05:14:42.000Z","source":{"folder":"en-us/web/api/keyboard_api","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/keyboard_api/index.md","last_commit_url":"https://github.com/mdn/content/commit/277e5969c63b97cfb55ab4a0e612e8040810f49b","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/Keyboard_API","title":"Keyboard API"}],"pageTitle":"Keyboard API - Web APIs | MDN","noIndexing":false}}