{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Parsing and serializing XML","mdn_url":"/en-US/docs/Web/Guide/Parsing_and_serializing_XML","locale":"en-US","native":"English (US)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>At times, you may need to parse <a href=\"/en-US/docs/Glossary/XML\">XML</a> content and convert it into a <a href=\"/en-US/docs/Glossary/DOM\">DOM</a> tree, or, conversely, serialize an existing DOM tree into XML. In this article, we'll look at the objects provided by the web platform to make the common tasks of serializing and parsing XML easy.</p>\n<dl>\n  <dt id=\"xmlserializer\"><a href=\"/en-US/docs/Web/API/XMLSerializer\"><code>XMLSerializer</code></a></dt>\n  <dd>\n    <p>Serializes DOM trees, converting them into strings containing XML.</p>\n  </dd>\n  <dt id=\"domparser\"><a href=\"/en-US/docs/Web/API/DOMParser\"><code>DOMParser</code></a></dt>\n  <dd>\n    <p>Constructs a DOM tree by parsing a string containing XML, returning a <a href=\"/en-US/docs/Web/API/XMLDocument\"><code>XMLDocument</code></a> or <a href=\"/en-US/docs/Web/API/Document\"><code>Document</code></a> as appropriate based on the input data.</p>\n  </dd>\n  <dt id=\"xmlhttprequest\"><a href=\"/en-US/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a></dt>\n  <dd>\n    <p>Loads content from a URL; XML content is returned as an XML <a href=\"/en-US/docs/Web/API/Document\"><code>Document</code></a> object with a DOM tree built from the XML itself.</p>\n  </dd>\n  <dt id=\"xpath\"><a href=\"/en-US/docs/Web/XPath\">XPath</a></dt>\n  <dd>\n    <p>A technology for creating strings that contain addresses for specific portions of an XML document, and locating XML nodes based on those addresses.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"creating_an_xml_document","title":"Creating an XML document","isH3":false,"content":"<p>Using one of the following approaches to create an XML document (which is an instance of <a href=\"/en-US/docs/Web/API/Document\"><code>Document</code></a>.</p>"}},{"type":"prose","value":{"id":"parsing_strings_into_dom_trees","title":"Parsing strings into DOM trees","isH3":true,"content":"<p>This example converts an XML fragment in a string into a DOM tree using a <a href=\"/en-US/docs/Web/API/DOMParser\"><code>DOMParser</code></a>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> xmlStr <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;q id=\"a\"&gt;&lt;span id=\"b\"&gt;hey!&lt;/span&gt;&lt;/q&gt;'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> parser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DOMParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> doc <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span><span class=\"token function\">parseFromString</span><span class=\"token punctuation\">(</span>xmlStr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// print the name of the root element or error message</span>\n<span class=\"token keyword\">const</span> errorNode <span class=\"token operator\">=</span> doc<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"parsererror\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errorNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error while parsing\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>nodeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"parsing_url-addressable_resources_into_dom_trees","title":"Parsing URL-addressable resources into DOM trees","isH3":true,"content":"<h4 id=\"using_xmlhttprequest\">Using XMLHttpRequest</h4>\n<p>Here is sample code that reads and parses a URL-addressable XML file into a DOM tree:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nxhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">dump</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseXML<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>nodeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nxhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">dump</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error while getting XML.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"example.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span>responseType <span class=\"token operator\">=</span> <span class=\"token string\">\"document\"</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>The value returned in the <code>xhr</code> object's <a href=\"/en-US/docs/Web/API/XMLHttpRequest/responseXML\" title=\"responseXML\"><code>responseXML</code></a> field is a <a href=\"/en-US/docs/Web/API/Document\"><code>Document</code></a> constructed by parsing the XML.</p>\n<p>If the document is <a href=\"/en-US/docs/Glossary/HTML\">HTML</a>, the code shown above will return a <a href=\"/en-US/docs/Web/API/Document\"><code>Document</code></a>. If the document is XML, the resulting object is actually a <a href=\"/en-US/docs/Web/API/XMLDocument\"><code>XMLDocument</code></a>. The two types are essentially the same; the difference is largely historical, although differentiating has some practical benefits as well.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> There is in fact an <a href=\"/en-US/docs/Web/API/HTMLDocument\"><code>HTMLDocument</code></a> interface as well, but it is not necessarily an independent type. In some browsers it is, while in others it is an alias for the <code>Document</code> interface.</p>\n</div>"}},{"type":"prose","value":{"id":"serializing_an_xml_document","title":"Serializing an XML document","isH3":false,"content":"<p>Given a <a href=\"/en-US/docs/Web/API/Document\"><code>Document</code></a>, you can serialize the document's DOM tree back into XML using the <a href=\"/en-US/docs/Web/API/XMLSerializer/serializeToString\"><code>XMLSerializer.serializeToString()</code></a> method.</p>\n<p>Use the following approaches to serialize the contents of the XML document you created in the previous section.</p>"}},{"type":"prose","value":{"id":"serializing_dom_trees_to_strings","title":"Serializing DOM trees to strings","isH3":true,"content":"<p>First, create a DOM tree as described in <a href=\"/en-US/docs/Web/API/Document_object_model/How_to_create_a_DOM_tree\">How to Create a DOM tree</a>. Alternatively, use a DOM tree obtained from <a href=\"/en-US/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a>.</p>\n<p>To serialize the DOM tree <code>doc</code> into XML text, call <a href=\"/en-US/docs/Web/API/XMLSerializer/serializeToString\"><code>XMLSerializer.serializeToString()</code></a>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> serializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> xmlStr <span class=\"token operator\">=</span> serializer<span class=\"token punctuation\">.</span><span class=\"token function\">serializeToString</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"serializing_html_documents","title":"Serializing HTML documents","isH3":true,"content":"<p>If the DOM you have is an HTML document, you can serialize using <code>serializeToString()</code>, but there is a simpler option: just use the <a href=\"/en-US/docs/Web/API/Element/innerHTML\"><code>Element.innerHTML</code></a> property (if you want just the descendants of the specified node) or the <a href=\"/en-US/docs/Web/API/Element/outerHTML\"><code>Element.outerHTML</code></a> property if you want the node and all its descendants.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> docInnerHtml <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>As a result, <code>docInnerHtml</code> is a string containing the HTML of the contents of the document; that is, the <a href=\"/en-US/docs/Web/HTML/Element/body\"><code>&lt;body&gt;</code></a> element's contents.</p>\n<p>You can get HTML corresponding to the <code>&lt;body&gt;</code> <em>and</em> its descendants with this code:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> docOuterHtml <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>outerHTML<span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/XPath\">XPath</a></li>\n  <li><a href=\"/en-US/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a></li>\n  <li><a href=\"/en-US/docs/Web/API/Document\"><code>Document</code></a>, <a href=\"/en-US/docs/Web/API/XMLDocument\"><code>XMLDocument</code></a>, and <a href=\"/en-US/docs/Web/API/HTMLDocument\"><code>HTMLDocument</code></a></li>\n</ul>"}}],"toc":[{"text":"Creating an XML document","id":"creating_an_xml_document"},{"text":"Serializing an XML document","id":"serializing_an_xml_document"},{"text":"See also","id":"see_also"}],"summary":"At times, you may need to parse XML content and convert it into a DOM tree, or, conversely, serialize an existing DOM tree into XML. In this article, we'll look at the objects provided by the web platform to make the common tasks of serializing and parsing XML easy.","popularity":0.0035,"modified":"2022-09-09T07:06:10.000Z","other_translations":[{"title":"Convertir código a cadena de texto (serializing) y visceversa (parsing) a un  XML","locale":"es","native":"Español"},{"title":"XML のパースとシリアライズ","locale":"ja","native":"日本語"},{"title":"XML 파싱 및 직렬화","locale":"ko","native":"한국어"},{"title":"Прямая и обратная обработка XML","locale":"ru","native":"Русский"},{"title":"Parsing and serializing XML","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/web/guide/parsing_and_serializing_xml","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/guide/parsing_and_serializing_xml/index.md","last_commit_url":"https://github.com/mdn/content/commit/f4f8e2f18ccf19a0bee59e1fe78753e276b98232","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/Guide","title":"Developer guides"},{"uri":"/en-US/docs/Web/Guide/Parsing_and_serializing_XML","title":"Parsing and serializing XML"}],"pageTitle":"Parsing and serializing XML - Developer guides | MDN","noIndexing":false}}