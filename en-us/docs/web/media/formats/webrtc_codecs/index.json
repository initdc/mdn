{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Codecs used by WebRTC","mdn_url":"/en-US/docs/Web/Media/Formats/WebRTC_codecs","locale":"en-US","native":"English (US)","sidebarHTML":"\n<ol><li><a href=\"/en-US/docs/Web/Media/Autoplay_guide\">Autoplay guide for media and Web Audio APIs</a></li><li><a href=\"/en-US/docs/Web/Media/DASH_Adaptive_Streaming_for_HTML_5_Video\">DASH Adaptive Streaming for HTML 5 Video</a></li><li><a href=\"/en-US/docs/Web/Media/Streaming\">Guide to streaming audio and video</a></li><li><a href=\"/en-US/docs/Web/Media/Formats\">Media type and format guide: image, audio, and video content</a><ol><li><a href=\"/en-US/docs/Web/Media/Formats\">Media type and format guide: image, audio, and video content</a></li><li><a href=\"/en-US/docs/Web/Media/Formats/Audio_codecs\">Web audio codec guide</a></li><li><a href=\"/en-US/docs/Web/Media/Formats/Audio_concepts\">Digital audio concepts</a></li><li><a href=\"/en-US/docs/Web/Media/Formats/codecs_parameter\">The \"codecs\" parameter in common media types</a></li><li><a href=\"/en-US/docs/Web/Media/Formats/Containers\">Media container formats (file types)</a></li><li><a href=\"/en-US/docs/Web/Media/Formats/Image_types\">Image file type and format guide</a></li><li><a href=\"/en-US/docs/Web/Media/Formats/Support_issues\">Handling media support issues in web content</a></li><li><a href=\"/en-US/docs/Web/Media/Formats/Video_codecs\">Web video codec guide</a></li><li><a href=\"/en-US/docs/Web/Media/Formats/Video_concepts\">Digital video concepts</a></li><li><a href=\"/en-US/docs/Web/Media/Formats/WebRTC_codecs\">Codecs used by WebRTC</a></li></ol></li><li><a href=\"/en-US/docs/Web/Media/HTML_media\">Using audio and video in HTML</a></li><li><a href=\"/en-US/docs/Web/Media/images\">Using images in HTML</a><ol><li><a href=\"/en-US/docs/Web/Media/images\">Using images in HTML</a></li><li><a href=\"/en-US/docs/Web/Media/images/aspect_ratio_mapping\">Mapping the width and height attributes of media container elements to their aspect-ratio</a></li></ol></li></ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <a href=\"/en-US/docs/Web/API/WebRTC_API\">WebRTC API</a> makes it possible to construct web sites and apps that let users communicate in real time, using audio and/or video as well as optional data and other information. To communicate, the two devices need to be able to agree upon a mutually-understood codec for each track so they can successfully communicate and present the shared media. This guide reviews the codecs that browsers are required to implement as well as other codecs that some or all browsers support for WebRTC.</p>"}},{"type":"prose","value":{"id":"containerless_media","title":"Containerless media","isH3":false,"content":"<p>WebRTC uses bare <a href=\"/en-US/docs/Web/API/MediaStreamTrack\"><code>MediaStreamTrack</code></a> objects for each track being shared from one peer to another, without a container or even a <a href=\"/en-US/docs/Web/API/MediaStream\"><code>MediaStream</code></a> associated with the tracks. Which codecs can be within those tracks is not mandated by the WebRTC specification. However, <a href=\"https://datatracker.ietf.org/doc/html/rfc7742\" class=\"external\" rel=\" noopener\">RFC 7742</a> specifies that all WebRTC-compatible browsers must support <a href=\"/en-US/docs/Web/Media/Formats/Video_codecs#vp8\">VP8</a> and <a href=\"/en-US/docs/Web/Media/Formats/Video_codecs#avc_(h.264)\">H.264</a>'s Constrained Baseline profile for video, and <a href=\"https://datatracker.ietf.org/doc/html/rfc7874\" class=\"external\" rel=\" noopener\">RFC 7874</a> specifies that browsers must support at least the <a href=\"/en-US/docs/Web/Media/Formats/Audio_codecs#opus\">Opus</a> codec as well as <a href=\"/en-US/docs/Web/Media/Formats/Audio_codecs#g.711_pulse_code_modulation_of_voice_frequencies\">G.711</a>'s PCMA and PCMU formats.</p>\n<p>These two RFCs also lay out options that must be supported for each codec, as well as specific user comfort features such as echo cancellation. This guide reviews the codecs that browsers are required to implement as well as other codecs that some or all browsers support for WebRTC.</p>\n<p>While compression is always a necessity when dealing with media on the web, it's of additional importance when videoconferencing in order to ensure that the participants are able to communicate without lag or interruptions. Of secondary importance is the need to keep the video and audio synchronized, so that the movements and any ancillary information (such as slides or a projection) are presented at the same time as the audio that corresponds.</p>"}},{"type":"prose","value":{"id":"general_codec_requirements","title":"General codec requirements","isH3":false,"content":"<p>Before looking at codec-specific capabilities and requirements, there are a few overall requirements that must be met by <em>any</em> codec configuration used with WebRTC.</p>\n<p>Unless the <a href=\"/en-US/docs/Glossary/SDP\">SDP</a> specifically signals otherwise, the web browser receiving a WebRTC video stream must be able to handle video at 20 FPS at a minimum resolution of 320 pixels wide by 240 pixels tall. It's encouraged that video be encoded at a frame rate and size no lower than that, since that's essentially the lower bound of what WebRTC generally is expected to handle.</p>\n<p>SDP supports a codec-independent way to specify preferred video resolutions (<a href=\"https://datatracker.ietf.org/doc/html/rfc6236\" class=\"external\" rel=\" noopener\">RFC 6236</a>. This is done by sending an <code>a=imageattr</code> SDP attribute to indicate the maximum resolution that is acceptable. The sender is not required to support this mechanism, however, so you have to be prepared to receive media at a different resolution than you requested. Beyond this simple maximum resolution request, specific codecs may offer further ways to ask for specific media configurations.</p>"}},{"type":"prose","value":{"id":"supported_video_codecs","title":"Supported video codecs","isH3":false,"content":"<p>WebRTC establishes a baseline set of codecs which all compliant browsers are required to support. Some browsers may choose to allow other codecs as well.</p>\n<p>Below are the video codecs which are <em>required</em> in any fully WebRTC-compliant browser, as well as the profiles which are required and the browsers which actually meet the requirement.</p>\n<table class=\"standard-table\">\n  <caption>Mandatory video codecs</caption>\n  <thead>\n    <tr>\n      <th scope=\"row\">Codec name</th>\n      <th scope=\"col\">Profile(s)</th>\n      <th scope=\"col\">Browser compatibility</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th scope=\"row\"><a href=\"#vp8\">VP8</a></th>\n      <td>—</td>\n      <td>Chrome, Edge, Firefox, Safari (12.1+)</td>\n    </tr>\n    <tr>\n      <th scope=\"row\"><a href=\"#avc\">AVC / H.264</a></th>\n      <td>Constrained Baseline (CB)</td>\n      <td>\n        <p>Chrome (52+), Edge, Firefox, Safari</p>\n        <p>\n          Firefox for Android 68 and later do not support AVC (H.264) anymore.\n          This is due to a change in Google Play store requirements that prevent\n          Firefox from downloading and installing the OpenH264 codec needed to\n          handle H.264 in WebRTC connections. See\n          <a href=\"https://support.mozilla.org/en-US/kb/firefox-android-openh264\" class=\"external\" rel=\" noopener\">this article on SUMO</a>\n          for details.\n        </p>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<p>For details on WebRTC-related considerations for each codec, see the sub-sections below by following the links on each codec's name.</p>\n<p>Complete details of what video codecs and configurations WebRTC is required to support can be found in <a href=\"https://datatracker.ietf.org/doc/html/rfc7742\" class=\"external\" rel=\" noopener\">RFC 7742: WebRTC Video Processing and Codec Requirements</a>. It's worth noting that the RFC covers a variety of video-related requirements, including color spaces (sRGB is the preferred, but not required, default color space), recommendations for webcam processing features (automatic focus, automatic white balance, automatic light level), and so on.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> These requirements are for web browsers and other fully-WebRTC compliant products. Non-WebRTC products that are able to communicate with WebRTC to some extent may or may not support these codecs, although they're encouraged to by the specification documents.</p>\n</div>\n<p>In addition to the mandatory codecs, some browsers support additional codecs as well. Those are listed in the following table.</p>\n<table class=\"standard-table\">\n  <caption>Other video codecs</caption>\n  <thead>\n    <tr>\n      <th scope=\"row\">Codec name</th>\n      <th scope=\"col\">Profile(s)</th>\n      <th scope=\"col\">Browser compatibility</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th scope=\"row\">VP9</th>\n      <td>—</td>\n      <td>Chrome (48+), Firefox</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"vp8","title":"VP8","isH3":true,"content":"<p>VP8, which we <a href=\"/en-US/docs/Web/Media/Formats/Video_codecs#vp8\">describe in general</a> in the main <a href=\"/en-US/docs/Web/Media/Formats/Video_codecs\">guide to video codecs used on the web</a>, has some specific requirements that must be followed when using it to encode or decode a video track on a WebRTC connection.</p>\n<p>Unless signaled otherwise, VP8 will use square pixels (that is, pixels with an aspect ratio of 1:1).</p>\n<h4 id=\"other_notes\">Other notes</h4>\n<p>The network payload format for sharing VP8 using <a href=\"/en-US/docs/Glossary/RTP\">RTP</a> (such as when using WebRTC) is described in <a href=\"https://datatracker.ietf.org/doc/html/rfc7741\" class=\"external\" rel=\" noopener\">RFC 7741: RTP Payload Format for VP8 Video</a>.</p>"}},{"type":"prose","value":{"id":"avc_h.264","title":"AVC / H.264","isH3":true,"content":"<p>Support for AVC's Constrained Baseline (CB) profile is required in all fully-compliant WebRTC implementations. CB is a subset of the main profile, and is specifically designed for low-complexity, low-delay applications such as mobile video and videoconferencing, as well as for platforms with lower performing video processing capabilities.</p>\n<p>Our <a href=\"/en-US/docs/Web/Media/Formats/Video_codecs#avc_(h.264)\">overview of AVC</a> and its features can be found in the main video codec guide.</p>\n<h4 id=\"special_parameter_support_requirements\">Special parameter support requirements</h4>\n<p>AVC offers a wide array of parameters for controlling optional values. In order to improve reliability of WebRTC media sharing across multiple platforms and browsers, it's required that WebRTC endpoints that support AVC handle certain parameters in specific ways. Sometimes this means a parameter must (or must not) be supported. Sometimes it means requiring a specific value for a parameter, or that a specific set of values be allowed. And sometimes the requirements are more intricate.</p>\n<h5 id=\"parameters_which_are_useful_but_not_required\">Parameters which are useful but not required</h5>\n<p>These parameters don't have to be supported by the WebRTC endpoint, and their use is not required either. Their use can improve the user experience in various ways, but don't have to be used. Indeed, some of these are pretty complicated to use.</p>\n<dl>\n  <dt id=\"max-br\"><code>max-br</code></dt>\n  <dd>\n    <p>If specified and supported by the software, the <code>max-br</code> parameter specifies the maximum video bit rate in units of 1,000 bps for VCL and 1,200 bps for NAL. You'll find details about this on <a href=\"https://datatracker.ietf.org/doc/html/rfc6184#page-47\" class=\"external\" rel=\" noopener\">page 47 of RFC 6184</a>.</p>\n  </dd>\n  <dt id=\"max-cpb\"><code>max-cpb</code></dt>\n  <dd>\n    <p>If specified and supported by the software, <code>max-cpb</code> specifies the maximum coded picture buffer size. This is a fairly complicated parameter whose unit size can vary. See <a href=\"https://datatracker.ietf.org/doc/html/rfc6184#page-45\" class=\"external\" rel=\" noopener\">page 45 of RFC 6184</a> for details.</p>\n  </dd>\n  <dt id=\"max-dpb\"><code>max-dpb</code></dt>\n  <dd>\n    <p>If specified and supported, <code>max-dpb</code> indicates the maximum decoded picture buffer size, given in units of 8/3 macroblocks. See <a href=\"https://datatracker.ietf.org/doc/html/rfc6184#page-46\" class=\"external\" rel=\" noopener\">RFC 6184, page 46</a> for further details.</p>\n  </dd>\n  <dt id=\"max-fs\"><code>max-fs</code></dt>\n  <dd>\n    <p>If specified and supported by the software, <code>max-fs</code> specifies the maximum size of a single video frame, given as a number of macroblocks.</p>\n  </dd>\n  <dt id=\"max-mbps\"><code>max-mbps</code></dt>\n  <dd>\n    <p>If specified and supported by the software, this value is an integer specifying the maximum rate at which macroblocks should be processed per second (in macroblocks per second).</p>\n  </dd>\n  <dt id=\"max-smbps\"><code>max-smbps</code></dt>\n  <dd>\n    <p>If specified and supported by the software, this specifies an integer stating the maximum static macroblock processing rate in static macroblocks per second (using the hypothetical assumption that all macroblocks are static macroblocks).</p>\n  </dd>\n</dl>\n<h5 id=\"parameters_with_specific_requirements\">Parameters with specific requirements</h5>\n<p>These parameters may or may not be required, but have some special requirement when used.</p>\n<dl>\n  <dt id=\"packetization-mode\"><code>packetization-mode</code></dt>\n  <dd>\n    <p>All endpoints are required to support mode 1 (non-interleaved mode). Support for other packetization modes is optional, and the parameter itself is not required to be specified.</p>\n  </dd>\n  <dt id=\"sprop-parameter-sets\"><code>sprop-parameter-sets</code></dt>\n  <dd>\n    <p>Sequence and picture information for AVC can be sent either in-band or out-of-band. When AVC is used with WebRTC, this information <em>must</em> be signaled in-band; the <code>sprop-parameter-sets</code> parameter must therefore <em>not</em> be included in the SDP.</p>\n  </dd>\n</dl>\n<h5 id=\"parameters_which_must_be_specified\">Parameters which must be specified</h5>\n<p>These parameters must be specified whenever using AVC in a WebRTC connection.</p>\n<dl>\n  <dt id=\"profile-level-id\"><code>profile-level-id</code></dt>\n  <dd>\n    <p>All WebRTC implementations are <em>required</em> to specify and interpret this parameter in their SDP, identifying the sub-profile used by the codec. The specific value that is set is not defined; what matters is that the parameter be used at all. This is useful to note, since in <a href=\"https://datatracker.ietf.org/doc/html/rfc6184\" class=\"external\" rel=\" noopener\">RFC 6184</a> (\"RTP Payload Format for H.264 Video\"), <code>profile-level-id</code> is entirely optional.</p>\n  </dd>\n</dl>\n<h4 id=\"other_requirements\">Other requirements</h4>\n<p>For the purposes of supporting switching between portrait and landscape orientations, there are two methods that can be used. The first is the video orientation (CVO) header extension to the RTP protocol. However, if this isn't signaled as supported in the SDP, then it's encouraged that browsers support Display Orientation SEI messages, though not required.</p>\n<p>Unless signaled otherwise, the pixel aspect ratio is 1:1, indicating that pixels are square.</p>\n<h4 id=\"other_notes_2\">Other notes</h4>\n<p>The payload format used for AVC in WebRTC is described in <a href=\"https://datatracker.ietf.org/doc/html/rfc6184\" class=\"external\" rel=\" noopener\">RFC 6184: RTP Payload Format for H.264 Video</a>. AVC implementations for WebRTC are required to support the special \"filler payload\" and \"full frame freeze\" SEI messages; these are used to support switching among multiple input streams seamlessly.</p>"}},{"type":"prose","value":{"id":"supported_audio_codecs","title":"Supported audio codecs","isH3":false,"content":"<p>The audio codecs which <a href=\"https://datatracker.ietf.org/doc/html/rfc7874\" class=\"external\" rel=\" noopener\">RFC 7874</a> mandates that all WebRTC-compatible browsers must support are shown in the table below.</p>\n<table class=\"standard-table\">\n  <caption>Mandatory audio codecs</caption>\n  <thead>\n    <tr>\n      <th scope=\"row\">Codec name</th>\n      <th scope=\"col\">Browser compatibility</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th scope=\"row\"><a href=\"/en-US/docs/Web/Media/Formats/Audio_codecs#opus\">Opus</a></th>\n      <td>Chrome, Edge, Firefox, Safari</td>\n    </tr>\n    <tr>\n      <th scope=\"row\"><a href=\"/en-US/docs/Web/Media/Formats/Audio_codecs#g.711_pulse_code_modulation_of_voice_frequencies\">G.711 PCM (A-law)</a></th>\n      <td>Chrome, Firefox, Safari</td>\n    </tr>\n    <tr>\n      <th scope=\"row\"><a href=\"/en-US/docs/Web/Media/Formats/Audio_codecs#g.711_pulse_code_modulation_of_voice_frequencies\">G.711 PCM (µ-law)</a></th>\n      <td>Chrome, Firefox, Safari</td>\n    </tr>\n  </tbody>\n</table>\n<p>See below for more details about any WebRTC-specific considerations that exist for each codec listed above.</p>\n<p>It's useful to note that <a href=\"https://datatracker.ietf.org/doc/html/rfc7874\" class=\"external\" rel=\" noopener\">RFC 7874</a> defines more than a list of audio codecs that a WebRTC-compliant browser must support; it also provides recommendations and requirements for special audio features such as echo cancellation, noise reduction, and audio leveling.</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> The list above indicates the minimum required set of codecs that all WebRTC-compatible endpoints are required to implement. A given browser may also support other codecs; however, cross-platform and cross-device compatibility may be at risk if you use other codecs without carefully ensuring that support exists in all browsers your users might choose.</p>\n</div>\n<p>In addition to the mandatory audio codecs, some browsers support additional codecs as well. Those are listed in the following table.</p>\n<table class=\"standard-table\">\n  <caption>Other audio codecs</caption>\n  <thead>\n    <tr>\n      <th scope=\"row\">Codec name</th>\n      <th scope=\"col\">Browser compatibility</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th scope=\"row\">G.722</th>\n      <td>Chrome, Firefox, Safari</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">iLBC</th>\n      <td>Chrome, Safari</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">iSAC</th>\n      <td>Chrome, Safari</td>\n    </tr>\n  </tbody>\n</table>\n<p><strong><a href=\"https://en.wikipedia.org/wiki/Internet_Low_Bitrate_Codec\" class=\"external\" rel=\" noopener\">Internet Low Bitrate Codec</a></strong> (<strong>iLBC</strong>) is an open-source narrow-band codec developed by Global IP Solutions and now Google, designed specifically for streaming voice audio. Google and some other browser developers have adopted it for WebRTC.</p>\n<p>The <strong><a href=\"https://en.wikipedia.org/wiki/Internet_Speech_Audio_Codec\" class=\"external\" rel=\" noopener\">Internet Speech Audio Codec</a></strong> (<strong>iSAC</strong>) is another codec developed by Global IP Solutions and now owned by Google, which has open-sourced it. It's used by Google Talk, QQ, and other instant messaging clients and is specifically designed for voice transmissions which are encapsulated within an RTP stream.</p>\n<p><strong><a href=\"https://en.wikipedia.org/wiki/Comfort_noise\" class=\"external\" rel=\" noopener\">Comfort noise</a></strong> (<strong>CN</strong>) is a form of artificial background noise which is used to fill gaps in a transmission instead of using pure silence. This helps to avoid a jarring effect that can occur when voice activation and similar features cause a stream to stop sending data temporarily—a capability known as Discontinuous Transmission (DTX). In <a href=\"https://datatracker.ietf.org/doc/html/rfc3389\" class=\"external\" rel=\" noopener\">RFC 3389</a>, a method for providing an appropriate filler to use during silences.</p>\n<p>Comfort Noise is used with G.711, and may potentially be used with other codecs that don't have a built-in CN feature. Opus, for example, has its own CN capability; as such, using RFC 3389 CN with the Opus codec is not recommended.</p>\n<p>An audio sender is never required to use discontinuous transmission or comfort noise.</p>"}},{"type":"prose","value":{"id":"opus","title":"Opus","isH3":true,"content":"<p>The Opus format, defined by <a href=\"https://datatracker.ietf.org/doc/html/rfc6716\" class=\"external\" rel=\" noopener\">RFC 6716</a> is the primary format for audio in WebRTC. The RTP payload format for Opus is found in <a href=\"https://datatracker.ietf.org/doc/html/rfc7587\" class=\"external\" rel=\" noopener\">RFC 7587</a>. You can find more general information about Opus and its capabilities, and how other APIs can support Opus, in the <a href=\"/en-US/docs/Web/Media/Formats/Audio_codecs#opus\">corresponding section</a> of our <a href=\"/en-US/docs/Web/Media/Formats/Audio_codecs\">guide to audio codecs used on the web</a>.</p>\n<p>Both the speech and general audio modes should be supported. Opus's scalability and flexibility are useful when dealing with audio that may have varying degrees of complexity. Its support of in-band stereo signals allows support for stereo without complicating the demultiplexing process.</p>\n<p>The entire range of bit rates supported by Opus (6 kbps to 510 kbps) is supported in WebRTC, with the bit rate allowed to be dynamically changed. Higher bit rates typically improve quality.</p>\n<h4 id=\"bit_rate_recommendations\">Bit rate recommendations</h4>\n<p>Given a 20 millisecond frame size, the following table shows the recommended bit rates for various forms of media.</p>\n<table>\n  <thead>\n    <tr>\n      <th>Media type</th>\n      <th>Recommended bit rate range</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Narrow-band speech (NB)</td>\n      <td>8 to 12 kbps</td>\n    </tr>\n    <tr>\n      <td>Wide-band speech (WB)</td>\n      <td>16 to 20 kbps</td>\n    </tr>\n    <tr>\n      <td>Full-band speech (FB)</td>\n      <td>28 to 40 kbps</td>\n    </tr>\n    <tr>\n      <td>Full-band monaural music (FB mono)</td>\n      <td>48 to 64 kbps</td>\n    </tr>\n    <tr>\n      <td>Full-band stereo music (FB stereo)</td>\n      <td>64 to 128 kbps</td>\n    </tr>\n  </tbody>\n</table>\n<p>The bit rate may be adjusted at any time. In order to avoid network congestion, the average audio bit rate should not exceed the available network bandwidth (minus any other known or anticipated added bandwidth requirements).</p>"}},{"type":"prose","value":{"id":"g.711","title":"G.711","isH3":true,"content":"<p>G.711 defines the format for <strong>Pulse Code Modulation</strong> (<strong>PCM</strong>) audio as a series of 8-bit integer samples taken at a sample rate of 8,000 Hz, yielding a bit rate of 64 kbps. Both <a href=\"https://en.wikipedia.org/wiki/M-law\" class=\"external\" rel=\" noopener\">µ-law</a> and <a href=\"https://en.wikipedia.org/wiki/A-law\" class=\"external\" rel=\" noopener\">A-law</a> encodings are allowed.</p>\n<p>G.711 is <a href=\"https://www.itu.int/rec/T-REC-G.711-198811-I/en\" class=\"external\" rel=\" noopener\">defined by the ITU</a> and its payload format is defined in <a href=\"https://datatracker.ietf.org/doc/html/rfc3551#section-4.5.14\" class=\"external\" rel=\" noopener\">RFC 3551, section 4.5.14</a>.</p>\n<p>WebRTC requires that G.711 use 8-bit samples at the standard 64 kbps rate, even though G.711 supports some other variations. Neither G.711.0 (lossless compression), G.711.1 (wideband capability), nor any other extensions to the G.711 standard are mandated by WebRTC.</p>\n<p>Due to its low sample rate and sample size, G.711 audio quality is generally considered poor by modern standards, even though it's roughly equivalent to what a landline telephone sounds like. It is generally used as a least common denominator to ensure that browsers can achieve an audio connection regardless of platforms and browsers, or as a fallback option in general.</p>"}},{"type":"prose","value":{"id":"specifying_and_configuring_codecs","title":"Specifying and configuring codecs","isH3":false,"content":""}},{"type":"prose","value":{"id":"getting_the_supported_codecs","title":"Getting the supported codecs","isH3":true,"content":"<p>Because a given browser and platform may have different availability among the potential codecs—and may have multiple profiles or levels supported for a given codec—the first step when configuring codecs for an <a href=\"/en-US/docs/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a> is to get the list of available codecs. To do this, you first have to establish a connection on which to get the list.</p>\n<p>There are a couple of ways you can do this. The most efficient way is to use the static method <a href=\"/en-US/docs/Web/API/RTCRtpSender/getCapabilities\"><code>RTCRtpSender.getCapabilities()</code></a> (or the equivalent <a href=\"/en-US/docs/Web/API/RTCRtpReceiver/getCapabilities\"><code>RTCRtpReceiver.getCapabilities()</code></a> for a receiver), specifying the type of media as the input parameter. For example, to determine the supported codecs for video, you can do this:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>codecList <span class=\"token operator\">=</span> RTCRtpSender<span class=\"token punctuation\">.</span><span class=\"token function\">getCapabilities</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"video\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>codecs<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Now <code>codecList</code> is an array of <a href=\"/en-US/docs/Web/API/RTCRtpCodecCapability\"><code>RTCRtpCodecCapability</code></a> objects, each describing one codec configuration. Also present in the list will be entries for retransmission (RTX), redundant coding (RED), and forward error correction (FEC).</p>\n<p>If the connection is in the process of starting up, you can use the <a href=\"/en-US/docs/Web/API/RTCPeerConnection/icegatheringstatechange_event\" title=\"icegatheringstatechange\"><code>icegatheringstatechange</code></a> event to watch for the completion of <a href=\"/en-US/docs/Glossary/ICE\">ICE</a> candidate gathering, then fetch the list.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> codecList <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\npeerConnection<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"icegatheringstatechange\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>peerConnection<span class=\"token punctuation\">.</span>iceGatheringState <span class=\"token operator\">===</span> <span class=\"token string\">\"complete\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> senders <span class=\"token operator\">=</span> peerConnection<span class=\"token punctuation\">.</span><span class=\"token function\">getSenders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    senders<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sender</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">.</span>track<span class=\"token punctuation\">.</span>kind <span class=\"token operator\">===</span> <span class=\"token string\">\"video\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        codecList <span class=\"token operator\">=</span> sender<span class=\"token punctuation\">.</span><span class=\"token function\">getParameters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>codecs<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  codecList <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>The event handler for <code>icegatheringstatechange</code> is established; in it, we look to see if the ICE gathering state is <code>complete</code>, indicating that no further candidates will be collected. The method <a href=\"/en-US/docs/Web/API/RTCPeerConnection/getSenders\"><code>RTCPeerConnection.getSenders()</code></a> is called to get a list of all the <a href=\"/en-US/docs/Web/API/RTCRtpSender\"><code>RTCRtpSender</code></a> objects used by the connection.</p>\n<p>With that in hand, we walk through the list of senders, looking for the first one whose <a href=\"/en-US/docs/Web/API/MediaStreamTrack\"><code>MediaStreamTrack</code></a> indicates that it's <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>track</code></a>'s <a href=\"/en-US/docs/Web/API/MediaStreamTrack/kind\" title=\"kind\"><code>kind</code></a> is <code>video</code>, indicating that the track's data is video media. We then call that sender's <a href=\"/en-US/docs/Web/API/RTCRtpSender/getParameters\" title=\"getParameters()\"><code>getParameters()</code></a> method and, from the returned <a href=\"/en-US/docs/Web/API/RTCRtpSendParameters\"><code>RTCRtpSendParameters</code></a> object, we set <code>codecList</code> to the <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>codecs</code></a> property and return to the caller.</p>\n<p>If no video track is found, we set <code>codecList</code> to <code>null</code>.</p>\n<p>On return, then, <code>codecList</code> is either <code>null</code> to indicate that no video tracks were found or it's an array of <a href=\"/en-US/docs/Web/API/RTCRtpCodecParameters\"><code>RTCRtpCodecParameters</code></a> objects, each describing one permitted codec configuration. Of special importance in these objects: the <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>payloadType</code></a> property, which is a one-byte value which uniquely identifies the described configuration.</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> The two methods for obtaining lists of codecs shown here use different output types in their codec lists. Be aware of this when using the results.</p>\n</div>"}},{"type":"prose","value":{"id":"customizing_the_codec_list","title":"Customizing the codec list","isH3":true,"content":"<p>Once you have a list of the available codecs, you can alter it and then send the revised list to <a href=\"/en-US/docs/Web/API/RTCRtpTransceiver/setCodecPreferences\"><code>RTCRtpTransceiver.setCodecPreferences()</code></a> to rearrange the codec list. This changes the order of preference of the codecs, letting you tell WebRTC to prefer a different codec over all others.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">changeVideoCodec</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mimeType</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> transceivers <span class=\"token operator\">=</span> peerConnection<span class=\"token punctuation\">.</span><span class=\"token function\">getTransceivers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  transceivers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">transceiver</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> kind <span class=\"token operator\">=</span> transceiver<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">.</span>track<span class=\"token punctuation\">.</span>kind<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> sendCodecs <span class=\"token operator\">=</span> RTCRtpSender<span class=\"token punctuation\">.</span><span class=\"token function\">getCapabilities</span><span class=\"token punctuation\">(</span>kind<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>codecs<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> recvCodecs <span class=\"token operator\">=</span> RTCRtpReceiver<span class=\"token punctuation\">.</span><span class=\"token function\">getCapabilities</span><span class=\"token punctuation\">(</span>kind<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>codecs<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>kind <span class=\"token operator\">===</span> <span class=\"token string\">\"video\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      sendCodecs <span class=\"token operator\">=</span> <span class=\"token function\">preferCodec</span><span class=\"token punctuation\">(</span>mimeType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      recvCodecs <span class=\"token operator\">=</span> <span class=\"token function\">preferCodec</span><span class=\"token punctuation\">(</span>mimeType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      transceiver<span class=\"token punctuation\">.</span><span class=\"token function\">setCodecPreferences</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>sendCodecs<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>recvCodecs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  peerConnection<span class=\"token punctuation\">.</span><span class=\"token function\">onnegotiationneeded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>In this sample, the function <code>changeVideoCodec()</code> takes as input the MIME type of the codec you wish to use. The code starts by getting a list of all of the <a href=\"/en-US/docs/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a>'s transceivers.</p>\n<p>Then, for each transceiver, we get the kind of media represented by the transceiver from the <a href=\"/en-US/docs/Web/API/RTCRtpSender\"><code>RTCRtpSender</code></a>'s track's <a href=\"/en-US/docs/Web/API/MediaStreamTrack/kind\" title=\"kind\"><code>kind</code></a>. We also get the lists of all codecs supported by the browser for both sending and receiving video, using the <code>getCapabilities()</code> static method of both <a href=\"/en-US/docs/Web/API/RTCRtpSender\"><code>RTCRtpSender</code></a> and <a href=\"/en-US/docs/Web/API/RTCRtpReceiver\"><code>RTCRtpReceiver</code></a>.</p>\n<p>If the media is video, we call a method called <code>preferCodec()</code> for both the sender's and receiver's codec lists; this method rearranges the codec list the way we want (see below).</p>\n<p>Finally, we call the <a href=\"/en-US/docs/Web/API/RTCRtpTransceiver\"><code>RTCRtpTransceiver</code></a>'s <a href=\"/en-US/docs/Web/API/RTCRtpTransceiver/setCodecPreferences\" title=\"setCodecPreferences()\"><code>setCodecPreferences()</code></a> method to specify that the given send and receive codecs are allowed, in the newly rearranged order.</p>\n<p>That's done for each transceiver on the <code>RTCPeerConnection</code>; once all of the transceivers have been updated, we call the <a href=\"/en-US/docs/Web/API/RTCPeerConnection/negotiationneeded_event\" title=\"onnegotiationneeded\"><code>onnegotiationneeded</code></a> event handler, which will create a new offer, update the local description, send the offer along to the remote peer, and so on, thereby triggering the renegotiation of the connection.</p>\n<p>The <code>preferCodec()</code> function called by the code above looks like this to move a specified codec to the top of the list (to be prioritized during negotiation):</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">preferCodec</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">codecs<span class=\"token punctuation\">,</span> mimeType</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> otherCodecs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> sortedCodecs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> codecs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n  codecs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">codec</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>codec<span class=\"token punctuation\">.</span>mimeType <span class=\"token operator\">===</span> mimeType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      sortedCodecs<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>codec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      otherCodecs<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>codec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> sortedCodecs<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>otherCodecs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>This code is just splitting the codec list into two arrays: one containing codecs whose MIME type matches the one specified by the <code>mimeType</code> parameter, and the other with all the other codecs. Once the list has been split up, they're concatenated back together with the entries matching the given <code>mimeType</code> first, followed by all of the other codecs. The rearranged list is then returned to the caller.</p>"}},{"type":"prose","value":{"id":"default_codecs","title":"Default codecs","isH3":false,"content":"<p>Unless otherwise specified, the default—or, more accurately, preferred—codecs requested by each browser's implementation of WebRTC are shown in the table below.</p>\n<table class=\"standard-table\">\n  <caption>Preferred codecs for WebRTC in major web browsers</caption>\n  <thead>\n    <tr>\n      <th scope=\"col\"></th>\n      <th scope=\"col\">Audio</th>\n      <th scope=\"col\">Video</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th scope=\"row\">Chrome</th>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Edge</th>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Firefox</th>\n      <td></td>\n      <td>VP9 (Firefox 46 and later)<br>VP8</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Opera</th>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Safari</th>\n      <td></td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"choosing_the_right_codec","title":"Choosing the right codec","isH3":false,"content":"<p>Before choosing a codec that isn't one of the mandatory codecs (VP8 or AVC for video and Opus or PCM for audio), you should seriously consider the potential drawbacks: in particular, only these codecs can be generally assumed to be available on essentially all devices that support WebRTC.</p>\n<p>If you choose to prefer a codec other than the mandatory ones, you should at least allow for fallback to one of the mandatory codecs if support is unavailable for the codec you prefer.</p>"}},{"type":"prose","value":{"id":"audio","title":"Audio","isH3":true,"content":"<p>In general, if it's available and the audio you wish to send has a sample rate greater than 8 kHz, you should strongly consider using Opus as your primary codec. For voice-only connections in a constrained environment, using G.711 at an 8 kHz sample rate can provide an acceptable experience for conversation, but typically you'll use G.711 as a fallback option, since there are other options which are more efficient and sound better, such as Opus in its narrowband mode.</p>"}},{"type":"prose","value":{"id":"video","title":"Video","isH3":true,"content":"<p>There are a number of factors that come into play when deciding upon a video codec (or set of codecs) to support.</p>\n<h4 id=\"licensing_terms\">Licensing terms</h4>\n<p>Before choosing a video codec, make sure you're aware of any licensing requirements around the codec you select; you can find information about possible licensing concerns in our main <a href=\"/en-US/docs/Web/Media/Formats/Video_codecs\">guide to video codecs used on the web</a>. Of the two mandatory codecs for video—VP8 and AVC/H.264—only VP8 is completely free of licensing requirements. If you select AVC, make sure you're; aware of any potential fees you may need to pay; that said, the patent holders have generally said that most typical web site developers shouldn't need to worry about paying the license fees, which are typically focused more on the developers of the encoding and decoding software.</p>\n<div class=\"notecard warning\" id=\"sect4\">\n  <p><strong>Warning:</strong> The information here does <em>not</em> constitute legal advice! Be sure to confirm your exposure to liability before making any final decisions where potential exists for licensing issues.</p>\n</div>\n<h4 id=\"power_needs_and_battery_life\">Power needs and battery life</h4>\n<p>Another factor to consider—especially on mobile platforms—is the impact a codec may have on battery life. If a codec is handled in hardware on a given platform, that codec is likely to allow for much better battery life and less heat production.</p>\n<p>For example, Safari for iOS and iPadOS introduced WebRTC with AVC as the only supported video codec. AVC has the advantage, on iOS and iPadOS, of being able to be encoded and decoded in hardware. Safari 12.1 introduced support for VP8 within IRC, which improves interoperability, but at a cost—VP8 has no hardware support on iOS devices, so using it causes increased processor impact and reduced battery life.</p>\n<h4 id=\"performance\">Performance</h4>\n<p>Fortunately, VP8 and AVC perform similarly from an end-user perspective, and are equally adequate for use in videoconferencing and other WebRTC solutions. The final decision is yours. Whichever you choose, be sure to read the information provided in this article about any particular configuration issues you may need to contend with for that codec.</p>\n<p>Keep in mind that choosing a codec that isn't on the list of mandatory codecs likely runs the risk of selecting a codec which isn't supported by a browser your users might prefer. See the article <a href=\"/en-US/docs/Web/Media/Formats/Support_issues\">Handling media support issues in web content</a> to learn more about how to offer support for your preferred codecs while still being able to fall back on browsers that don't implement that codec.</p>"}},{"type":"prose","value":{"id":"security_implications","title":"Security implications","isH3":false,"content":"<p>There are interesting potential security issues that come up while selecting and configuring codecs. WebRTC video is protected using Datagram Transport Layer Security (<a href=\"/en-US/docs/Glossary/DTLS\">DTLS</a>), but it is theoretically possible for a motivated party to infer the amount of change that's occurring from frame to frame when using variable bit rate (VBR) codecs, by monitoring the stream's bit rate and how it changes over time. This could potentially allow a bad actor to infer something about the content of the stream, given the ebb and flow of the bit rate.</p>\n<p>For more about security considerations when using AVC in WebRTC, see <a href=\"https://datatracker.ietf.org/doc/html/rfc6184#section-9\" class=\"external\" rel=\" noopener\">RFC 6184, section 9: RTP Payload Format for H.264 Video: Security Considerations</a>.</p>"}},{"type":"prose","value":{"id":"rtp_payload_format_media_types","title":"RTP payload format media types","isH3":false,"content":"<p>It may be useful to refer to the <a href=\"/en-US/docs/Glossary/IANA\">IANA</a>'s list of <a href=\"/en-US/docs/Glossary/RTP\">RTP</a> payload format media types; this is a complete list of the MIME media types defined for <em>potential</em> use in RTP streams, such as those used in WebRTC. Most of these are not used in WebRTC contexts, but the list may still be useful.</p>\n<p>See also <a href=\"https://datatracker.ietf.org/doc/html/rfc4855\" class=\"external\" rel=\" noopener\">RFC 4855</a>, which covers the registry of media types.</p>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/WebRTC_API\">WebRTC API</a></li>\n  <li><a href=\"/en-US/docs/Web/API/WebRTC_API/Protocols\">Introduction to WebRTC protocols</a></li>\n  <li><a href=\"/en-US/docs/Web/API/WebRTC_API/Connectivity\">WebRTC connectivity</a></li>\n  <li><a href=\"/en-US/docs/Web/Media/Formats/Video_codecs\">Guide to video codecs used on the web</a></li>\n  <li><a href=\"/en-US/docs/Web/Media/Formats/Audio_codecs\">Guide to audio codecs used on the web</a></li>\n  <li><a href=\"/en-US/docs/Web/Media/Formats/Video_concepts\">Digital video concepts</a></li>\n  <li><a href=\"/en-US/docs/Web/Media/Formats/Audio_concepts\">Digital audio concepts</a></li>\n</ul>"}}],"toc":[{"text":"Containerless media","id":"containerless_media"},{"text":"General codec requirements","id":"general_codec_requirements"},{"text":"Supported video codecs","id":"supported_video_codecs"},{"text":"Supported audio codecs","id":"supported_audio_codecs"},{"text":"Specifying and configuring codecs","id":"specifying_and_configuring_codecs"},{"text":"Default codecs","id":"default_codecs"},{"text":"Choosing the right codec","id":"choosing_the_right_codec"},{"text":"Security implications","id":"security_implications"},{"text":"RTP payload format media types","id":"rtp_payload_format_media_types"},{"text":"See also","id":"see_also"}],"summary":"The WebRTC API makes it possible to construct web sites and apps that let users communicate in real time, using audio and/or video as well as optional data and other information. To communicate, the two devices need to be able to agree upon a mutually-understood codec for each track so they can successfully communicate and present the shared media. This guide reviews the codecs that browsers are required to implement as well as other codecs that some or all browsers support for WebRTC.","popularity":0.0025,"modified":"2022-09-09T05:38:45.000Z","other_translations":[{"title":"Кодеки, используемые WebRTC","locale":"ru","native":"Русский"}],"source":{"folder":"en-us/web/media/formats/webrtc_codecs","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/media/formats/webrtc_codecs/index.md","last_commit_url":"https://github.com/mdn/content/commit/f22e42182591e38590c9add80de91a51bce3cde2","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/Media","title":"Web media technologies"},{"uri":"/en-US/docs/Web/Media/Formats","title":"Media type and format guide: image, audio, and video content"},{"uri":"/en-US/docs/Web/Media/Formats/WebRTC_codecs","title":"Codecs used by WebRTC"}],"pageTitle":"Codecs used by WebRTC - Web media technologies | MDN","noIndexing":false}}