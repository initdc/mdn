{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Map","mdn_url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects\">Standard built-in objects</a></strong></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>Properties</strong></a><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@species\"><code>get Map[@@species]</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@toStringTag\"><code>Map.prototype[@@toStringTag]</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/size\"><code>Map.prototype.size</code></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>Methods</strong></a><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@iterator\"><code>Map.prototype[@@iterator]()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear\"><code>Map.prototype.clear()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete\"><code>Map.prototype.delete()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries\"><code>Map.prototype.entries()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach\"><code>Map.prototype.forEach()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get\"><code>Map.prototype.get()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has\"><code>Map.prototype.has()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/keys\"><code>Map.prototype.keys()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set\"><code>Map.prototype.set()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/values\"><code>Map.prototype.values()</code></a></li></ol></li><li><strong>Inheritance:</strong></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li><a href=\"#\"><strong>Properties</strong></a><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function.prototype.displayName</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function.prototype.length</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function.prototype.name</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\"><code>Function.prototype.prototype</code></a></li></ol></li><li><a href=\"#\"><strong>Methods</strong></a><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>Properties</strong></a><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>Methods</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>\n  The <strong><code>Map</code></strong> object holds key-value pairs and remembers the original insertion\n  order of the keys. Any value (both objects and\n  <a href=\"/en-US/docs/Glossary/Primitive\">primitive values</a>) may be used as\n  either a key or a value.\n</p><iframe class=\"interactive\" height=\"692\" src=\"https://interactive-examples.mdn.mozilla.net/pages/js/map.html\" title=\"MDN Web Docs Interactive Example\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"description","title":"Description","isH3":false,"content":"<p><code>Map</code> objects are collections of key-value pairs. A key in the <code>Map</code> <strong>may only occur once</strong>; it is unique in the <code>Map</code>'s collection. A <code>Map</code> object is iterated by key-value pairs — a <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/for...of\"><code>for...of</code></a> loop returns a 2-member array of <code>[key, value]</code> for each iteration. Iteration happens in <em>insertion order</em>, which corresponds to the order in which each key-value pair was first inserted into the map by the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set\"><code>set()</code></a> method (that is, there wasn't a key with the same value already in the map when <code>set()</code> was called).</p>\n<p>The specification requires maps to be implemented \"that, on average, provide access times that are sublinear on the number of elements in the collection\". Therefore, it could be represented internally as a hash table (with O(1) lookup), a search tree (with O(log(N)) lookup), or any other data structure, as long as the complexity is better than O(N).</p>"}},{"type":"prose","value":{"id":"key_equality","title":"Key equality","isH3":true,"content":"<p>Value equality is based on the <a href=\"/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value-zero_equality\">SameValueZero</a> algorithm. (It used to use <a href=\"/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value_equality_using_object.is\">SameValue</a>, which treated <code>0</code> and <code>-0</code> as different. Check <a href=\"#browser_compatibility\">browser compatibility</a>.) This means <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> is considered the same as <code>NaN</code> (even though <code>NaN !== NaN</code>) and all other values are considered equal according to the semantics of the <code>===</code> operator.</p>"}},{"type":"prose","value":{"id":"objects_vs._maps","title":"Objects vs. Maps","isH3":true,"content":"<p>\n  <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> is similar to <code>Map</code>—both let you set keys to\n  values, retrieve those values, delete keys, and detect whether something is\n  stored at a key. For this reason (and because there were no built-in\n  alternatives), <code>Object</code> has been used as <code>Map</code> historically.\n</p>\n<p>\n  However, there are important differences that make <code>Map</code> preferable in some\n  cases:\n</p>\n<table class=\"standard-table\">\n  <thead>\n    <tr>\n      <th scope=\"row\"></th>\n      <th scope=\"col\">Map</th>\n      <th scope=\"col\">Object</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th scope=\"row\">Accidental Keys</th>\n      <td>\n        A <code>Map</code> does not contain any keys by default. It only\n        contains what is explicitly put into it.\n      </td>\n      <td>\n        <p>\n          An <code>Object</code> has a prototype, so it contains default keys\n          that could collide with your own keys if you're not careful.\n        </p>\n        <div class=\"notecard note\" id=\"sect1\">\n          <p>\n            <strong>Note:</strong> This can be bypassed by using\n            <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\"><code>Object.create(null)</code></a>,\n            but this is seldom done.\n          </p>\n        </div>\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Key Types</th>\n      <td>\n        A <code>Map</code>'s keys can be any value (including functions,\n        objects, or any primitive).\n      </td>\n      <td>\n        The keys of an <code>Object</code> must be either a\n        <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> or a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a>.\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Key Order</th>\n      <td>\n        <p>\n          The keys in <code>Map</code> are ordered in a simple, straightforward\n          way: A <code>Map</code> object iterates entries, keys, and values in\n          the order of entry insertion.\n        </p>\n      </td>\n      <td>\n        <p>\n          Although the keys of an ordinary <code>Object</code> are ordered now,\n          this was not always the case, and the order is complex. As a result,\n          it's best not to rely on property order.\n        </p>\n        <p>\n          The order was first defined for own properties only in ECMAScript\n          2015; ECMAScript 2020 defines order for inherited properties as well.\n          See the\n          <a href=\"https://tc39.es/ecma262/#sec-ordinaryownpropertykeys\" class=\"external\" rel=\" noopener\">OrdinaryOwnPropertyKeys</a>\n          and\n          <a href=\"https://tc39.es/ecma262/#sec-enumerate-object-properties\" class=\"external\" rel=\" noopener\">EnumerateObjectProperties</a>\n          abstract specification operations. But note that no single mechanism\n          iterates\n          <strong>all</strong> of an object's properties; the various mechanisms\n          each include different subsets of properties.\n          (<a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/for...in\"><code>for-in</code></a>\n          includes only enumerable string-keyed properties;\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\"><code>Object.keys</code></a> includes only own, enumerable,\n          string-keyed properties;\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\"><code>Object.getOwnPropertyNames</code></a> includes own,\n          string-keyed properties even if non-enumerable;\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols\"><code>Object.getOwnPropertySymbols</code></a> does the same\n          for just <code>Symbol</code>-keyed properties, etc.)\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">\n        <p>Size</p>\n      </th>\n      <td>\n        The number of items in a <code>Map</code> is easily retrieved from its\n        <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/size\"><code>size</code></a> property.\n      </td>\n      <td>\n        The number of items in an <code>Object</code> must be determined\n        manually.\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Iteration</th>\n      <td>\n        A <code>Map</code> is an\n        <a href=\"/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\">iterable</a>, so it can be directly iterated.\n      </td>\n      <td>\n        <p>\n          <code>Object</code> does not implement an <a href=\"/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\">iteration protocol</a>, and so objects are not directly iterable using the JavaScript\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a>\n          statement (by default).\n        </p>\n        <div class=\"notecard note\" id=\"sect2\">\n          <p><strong>Note:</strong></p>\n          <ul>\n            <li>\n              An object can implement the iteration protocol, or you can get an\n              iterable for an object using <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\"><code>Object.keys</code></a> or <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\"><code>Object.entries</code></a>.\n            </li>\n            <li>\n              The\n              <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a>\n              statement allows you to iterate over the\n              <em>enumerable</em> properties of an object.\n            </li>\n          </ul>\n        </div>\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Performance</th>\n      <td>\n        <p>\n          Performs better in scenarios involving frequent additions and removals\n          of key-value pairs.\n        </p>\n      </td>\n      <td>\n        <p>Not optimized for frequent additions and removals of key-value pairs.</p>\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Serialization and parsing</th>\n      <td>\n        <p>No native support for serialization or parsing.</p>\n        <p>\n          (But you can build your own serialization and parsing support for\n          <code>Map</code> by using <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a>\n          with its <em>replacer</em> argument, and by using\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\"><code>JSON.parse()</code></a> with its\n          <em>reviver</em> argument. See the Stack Overflow question\n          <a href=\"https://stackoverflow.com/q/29085197/\" class=\"external\" rel=\" noopener\">How do you JSON.stringify an ES6 Map?</a>).\n        </p>\n      </td>\n      <td>\n        <p>\n          Native support for serialization from <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> to\n          JSON, using <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a>.\n        </p>\n        <p>\n          Native support for parsing from JSON to <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a>,\n          using <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\"><code>JSON.parse()</code></a>.\n        </p>\n      </td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"setting_object_properties","title":"Setting object properties","isH3":true,"content":"<p>\n  Setting Object properties works for Map objects as well, and can cause\n  considerable confusion.\n</p>\n<p>Therefore, this appears to work in a way:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">const</span> wrongMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwrongMap<span class=\"token punctuation\">[</span><span class=\"token string\">'bla'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'blaa'</span><span class=\"token punctuation\">;</span>\nwrongMap<span class=\"token punctuation\">[</span><span class=\"token string\">'bla2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'blaaa2'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>wrongMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Map { bla: 'blaa', bla2: 'blaaa2' }</span>\n</code></pre></div>\n<p>\n  But that way of setting a property does not interact with the Map data\n  structure. It uses the feature of the generic object. The value of 'bla' is not\n  stored in the Map for queries. Other operations on the data fail:\n</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code>wrongMap<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bla'</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// false</span>\nwrongMap<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bla'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>wrongMap<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Map { bla: 'blaa', bla2: 'blaaa2' }</span>\n</code></pre></div>\n<p>\n  The correct usage for storing data in the Map is through the <code>set(key, value)</code>\n  method.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">const</span> contacts <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncontacts<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jessie'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">phone</span><span class=\"token operator\">:</span> <span class=\"token string\">\"213-555-1234\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">address</span><span class=\"token operator\">:</span> <span class=\"token string\">\"123 N 1st Ave\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\ncontacts<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jessie'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\ncontacts<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hilary'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\ncontacts<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hilary'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">phone</span><span class=\"token operator\">:</span> <span class=\"token string\">\"617-555-4321\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">address</span><span class=\"token operator\">:</span> <span class=\"token string\">\"321 S 2nd St\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\ncontacts<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jessie'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {phone: \"213-555-1234\", address: \"123 N 1st Ave\"}</span>\ncontacts<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Raymond'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\ncontacts<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jessie'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>contacts<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"constructor","title":"Constructor","isH3":false,"content":"<dl>\n  <dt id=\"map\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/Map\"><code>Map()</code></a></dt>\n  <dd>\n    <p>Creates a new <code>Map</code> object.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"static_properties","title":"Static properties","isH3":false,"content":"<dl>\n  <dt id=\"get_mapspecies\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@species\"><code>get Map[@@species]</code></a></dt>\n  <dd>\n    <p>The constructor function that is used to create derived objects.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"instance_properties","title":"Instance properties","isH3":false,"content":"<dl>\n  <dt id=\"map.prototype.size\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/size\"><code>Map.prototype.size</code></a></dt>\n  <dd>\n    <p>Returns the number of key/value pairs in the <code>Map</code> object.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"instance_methods","title":"Instance methods","isH3":false,"content":"<dl>\n  <dt id=\"map.prototype.clear\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear\"><code>Map.prototype.clear()</code></a></dt>\n  <dd>\n    <p>Removes all key-value pairs from the <code>Map</code> object.</p>\n  </dd>\n  <dt id=\"map.prototype.delete\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete\"><code>Map.prototype.delete()</code></a></dt>\n  <dd>\n    <p>\n      Returns <code>true</code> if an element in the <code>Map</code> object existed and has been\n      removed, or <code>false</code> if the element does not exist. <code>map.has(key)</code>\n      will return <code>false</code> afterwards.\n    </p>\n  </dd>\n  <dt id=\"map.prototype.get\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get\"><code>Map.prototype.get()</code></a></dt>\n  <dd>\n    <p>Returns the value associated to the passed key, or <code>undefined</code> if there is none.</p>\n  </dd>\n  <dt id=\"map.prototype.has\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has\"><code>Map.prototype.has()</code></a></dt>\n  <dd>\n    <p>Returns a boolean indicating whether a value has been associated with the passed key in the <code>Map</code> object or not.</p>\n  </dd>\n  <dt id=\"map.prototype.set\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set\"><code>Map.prototype.set()</code></a></dt>\n  <dd>\n    <p>Sets the value for the passed key in the <code>Map</code> object. Returns the <code>Map</code> object.</p>\n  </dd>\n  <dt id=\"map.prototypeiterator\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@iterator\"><code>Map.prototype[@@iterator]()</code></a></dt>\n  <dd>\n    <p>Returns a new Iterator object that contains a two-member array of <code>[key, value]</code> for each element in the <code>Map</code> object in insertion order.</p>\n  </dd>\n  <dt id=\"map.prototype.keys\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/keys\"><code>Map.prototype.keys()</code></a></dt>\n  <dd>\n    <p>Returns a new Iterator object that contains the keys for each element in the <code>Map</code> object in insertion order.</p>\n  </dd>\n  <dt id=\"map.prototype.values\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/values\"><code>Map.prototype.values()</code></a></dt>\n  <dd>\n    <p>Returns a new Iterator object that contains the values for each element in the <code>Map</code> object in insertion order.</p>\n  </dd>\n  <dt id=\"map.prototype.entries\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries\"><code>Map.prototype.entries()</code></a></dt>\n  <dd>\n    <p>Returns a new Iterator object that contains a two-member array of <code>[key, value]</code> for each element in the <code>Map</code> object in insertion order.</p>\n  </dd>\n  <dt id=\"map.prototype.foreach\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach\"><code>Map.prototype.forEach()</code></a></dt>\n  <dd>\n    <p>Calls <code>callbackFn</code> once for each key-value pair present in the <code>Map</code> object, in insertion order. If a <code>thisArg</code> parameter is provided to <code>forEach</code>, it will be used as the <code>this</code> value for each callback.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"using_the_map_object","title":"Using the Map object","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> myMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> keyString <span class=\"token operator\">=</span> <span class=\"token string\">'a string'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> keyObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">keyFunc</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// setting the values</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>keyString<span class=\"token punctuation\">,</span> <span class=\"token string\">\"value associated with 'a string'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>keyObj<span class=\"token punctuation\">,</span> <span class=\"token string\">'value associated with keyObj'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>keyFunc<span class=\"token punctuation\">,</span> <span class=\"token string\">'value associated with keyFunc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myMap<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n\n<span class=\"token comment\">// getting the values</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>keyString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"value associated with 'a string'\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>keyObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"value associated with keyObj\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>keyFunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"value associated with keyFunc\"</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a string'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"value associated with 'a string'\", because keyString === 'a string'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined, because keyObj !== {}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined, because keyFunc !== function () {}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"using_nan_as_map_keys","title":"Using NaN as Map keys","isH3":true,"content":"<p>\n  <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> can also be used as a key. Even though every <code>NaN</code> is\n  not equal to itself (<code>NaN !== NaN</code> is true), the following example works because\n  <code>NaN</code>s are indistinguishable from each other:\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> myMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'not a number'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"not a number\"</span>\n\n<span class=\"token keyword\">const</span> otherNaN <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>otherNaN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"not a number\"</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"iterating_map_with_for...of","title":"Iterating Map with for...of","isH3":true,"content":"<p>Maps can be iterated using a <code>for...of</code> loop:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> myMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'zero'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'one'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> myMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 0 = zero</span>\n<span class=\"token comment\">// 1 = one</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">of</span> myMap<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 0</span>\n<span class=\"token comment\">// 1</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> value <span class=\"token keyword\">of</span> myMap<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// zero</span>\n<span class=\"token comment\">// one</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> myMap<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 0 = zero</span>\n<span class=\"token comment\">// 1 = one</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"iterating_map_with_foreach","title":"Iterating Map with forEach()","isH3":true,"content":"<p>\n  Maps can be iterated using the\n  <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach\"><code>forEach()</code></a> method:\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>myMap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 0 = zero</span>\n<span class=\"token comment\">// 1 = one</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"relation_with_array_objects","title":"Relation with Array objects","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> kvArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'key1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'key2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Use the regular Map constructor to transform a 2D key-value Array into a map</span>\n<span class=\"token keyword\">const</span> myMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span>kvArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'key1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"value1\"</span>\n\n<span class=\"token comment\">// Use Array.from() to transform a map into a 2D key-value Array</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>myMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Will show you exactly the same Array as kvArray</span>\n\n<span class=\"token comment\">// A succinct way to do the same, using the spread syntax</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>myMap<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Or use the keys() or values() iterators, and convert them to an array</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>myMap<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"key1\", \"key2\"]</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"cloning_and_merging_maps","title":"Cloning and merging Maps","isH3":true,"content":"<p>Just like <code>Array</code>s, <code>Map</code>s can be cloned:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> original <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'one'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> clone <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>clone<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// one</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>original <span class=\"token operator\">===</span> clone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false (useful for shallow comparison)</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> Keep in mind that <em>the data itself</em> is not cloned.</p>\n</div>\n<p>Maps can be merged, maintaining key uniqueness:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> first <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'one'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'three'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> second <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'uno'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dos'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Merge two maps. The last repeated key wins.</span>\n<span class=\"token comment\">// Spread syntax essentially converts a Map to an Array</span>\n<span class=\"token keyword\">const</span> merged <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>first<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>second<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>merged<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// uno</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>merged<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// dos</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>merged<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// three</span>\n</code></pre></div>\n<p>Maps can be merged with Arrays, too:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> first <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'one'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'three'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> second <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'uno'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dos'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Merge maps with an array. The last repeated key wins.</span>\n<span class=\"token keyword\">const</span> merged <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>first<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>second<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'eins'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>merged<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// eins</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>merged<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// dos</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>merged<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// three</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/keyed-collections.html#sec-map-objects","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.Map"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"javascript.builtins.Map","dataURL":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li>\n    A polyfill of <code>Map</code> is available in\n    <a href=\"https://github.com/zloirock/core-js#map\" class=\"external\" rel=\" noopener\"><code>core-js</code></a>\n  </li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\"><code>WeakMap</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\"><code>WeakSet</code></a></li>\n</ul>"}}],"toc":[{"text":"Description","id":"description"},{"text":"Constructor","id":"constructor"},{"text":"Static properties","id":"static_properties"},{"text":"Instance properties","id":"instance_properties"},{"text":"Instance methods","id":"instance_methods"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The Map object holds key-value pairs and remembers the original insertion\n  order of the keys. Any value (both objects and\n  primitive values) may be used as\n  either a key or a value.","popularity":0.0918,"modified":"2022-09-14T00:33:07.000Z","other_translations":[{"title":"Map","locale":"fr","native":"Français"},{"title":"Map","locale":"ja","native":"日本語"},{"title":"Map","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Map","locale":"zh-CN","native":"中文 (简体)"},{"title":"Map","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"en-us/web/javascript/reference/global_objects/map","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/javascript/reference/global_objects/map/index.md","last_commit_url":"https://github.com/mdn/content/commit/a4fa18d6d2237fd4f252c236ad1ce55c32d6c0c2","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/en-US/docs/Web/JavaScript/Reference","title":"JavaScript reference"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects","title":"Standard built-in objects"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map","title":"Map"}],"pageTitle":"Map - JavaScript | MDN","noIndexing":false}}