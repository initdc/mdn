{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Set","mdn_url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects\">Standard built-in objects</a></strong></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>Properties</strong></a><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/@@species\"><code>get Set[@@species]</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/size\"><code>Set.prototype.size</code></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>Methods</strong></a><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/@@iterator\"><code>Set.prototype[@@iterator]()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/add\"><code>Set.prototype.add()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/clear\"><code>Set.prototype.clear()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/delete\"><code>Set.prototype.delete()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/entries\"><code>Set.prototype.entries()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach\"><code>Set.prototype.forEach()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/has\"><code>Set.prototype.has()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/keys\"><code>Set.prototype.keys()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/values\"><code>Set.prototype.values()</code></a></li></ol></li><li><strong>Inheritance:</strong></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li><a href=\"#\"><strong>Properties</strong></a><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function.prototype.displayName</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function.prototype.length</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function.prototype.name</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\"><code>Function.prototype.prototype</code></a></li></ol></li><li><a href=\"#\"><strong>Methods</strong></a><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>Properties</strong></a><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>Methods</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong><code>Set</code></strong> object lets you store unique values of any type, whether <a href=\"/en-US/docs/Glossary/Primitive\">primitive values</a> or object references.</p>"}},{"type":"prose","value":{"id":"description","title":"Description","isH3":false,"content":"<p><code>Set</code> objects are collections of values. A value in the <code>Set</code> <strong>may only occur once</strong>; it is unique in the <code>Set</code>'s collection. You can iterate through the elements of a set in insertion order. The <em>insertion order</em> corresponds to the order in which each element was inserted into the set by the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/add\"><code>add()</code></a> method successfully (that is, there wasn't an identical element already in the set when <code>add()</code> was called).</p>\n<p>The specification requires sets to be implemented \"that, on average, provide access times that are sublinear on the number of elements in the collection\". Therefore, it could be represented internally as a hash table (with O(1) lookup), a search tree (with O(log(N)) lookup), or any other data structure, as long as the complexity is better than O(N).</p>"}},{"type":"prose","value":{"id":"value_equality","title":"Value equality","isH3":true,"content":"<p>Value equality is based on the <a href=\"/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value-zero_equality\">SameValueZero</a> algorithm. (It used to use <a href=\"/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value_equality_using_object.is\">SameValue</a>, which treated <code>0</code> and <code>-0</code> as different. Check <a href=\"#browser_compatibility\">browser compatibility</a>.) This means <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> is considered the same as <code>NaN</code> (even though <code>NaN !== NaN</code>) and all other values are considered equal according to the semantics of the <code>===</code> operator.</p>"}},{"type":"prose","value":{"id":"performance","title":"Performance","isH3":true,"content":"<p>The <code>Set</code> <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/has\"><code>has</code></a> method checks if a value is in a <code>Set</code> object, using an approach that is, on average, quicker than testing most of the elements that have previously been added to the <code>Set</code> object. In particular, it is, on average, faster than the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\"><code>Array.prototype.includes</code></a> method when an <code>Array</code> object has a <code>length</code> equal to a <code>Set</code> object's <code>size</code>.</p>"}},{"type":"prose","value":{"id":"constructor","title":"Constructor","isH3":false,"content":"<dl>\n  <dt id=\"set\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/Set\"><code>Set()</code></a></dt>\n  <dd>\n    <p>Creates a new <code>Set</code> object.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"static_properties","title":"Static properties","isH3":false,"content":"<dl>\n  <dt id=\"get_setspecies\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/@@species\"><code>get Set[@@species]</code></a></dt>\n  <dd>\n    <p>The constructor function that is used to create derived objects.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"instance_properties","title":"Instance properties","isH3":false,"content":"<dl>\n  <dt id=\"set.prototype.size\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/size\"><code>Set.prototype.size</code></a></dt>\n  <dd>\n    <p>Returns the number of values in the <code>Set</code> object.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"instance_methods","title":"Instance methods","isH3":false,"content":"<dl>\n  <dt id=\"set.prototype.add\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/add\"><code>Set.prototype.add()</code></a></dt>\n  <dd>\n    <p>Inserts a new element with a specified value in to a <code>Set</code> object, if there isn't an element with the same value already in the <code>Set</code>.</p>\n  </dd>\n  <dt id=\"set.prototype.clear\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/clear\"><code>Set.prototype.clear()</code></a></dt>\n  <dd>\n    <p>Removes all elements from the <code>Set</code> object.</p>\n  </dd>\n  <dt id=\"set.prototype.delete\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/delete\"><code>Set.prototype.delete()</code></a></dt>\n  <dd>\n    <p>Removes the element associated to the <code>value</code> and returns a boolean asserting whether an element was successfully removed or not. <code>Set.prototype.has(value)</code> will return <code>false</code> afterwards.</p>\n  </dd>\n  <dt id=\"set.prototype.has\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/has\"><code>Set.prototype.has()</code></a></dt>\n  <dd>\n    <p>Returns a boolean asserting whether an element is present with the given value in the <code>Set</code> object or not.</p>\n  </dd>\n  <dt id=\"set.prototypeiterator\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/@@iterator\"><code>Set.prototype[@@iterator]()</code></a></dt>\n  <dd>\n    <p>Returns a new iterator object that yields the <strong>values</strong> for each element in the <code>Set</code> object in insertion order.</p>\n  </dd>\n  <dt id=\"set.prototype.values\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/values\"><code>Set.prototype.values()</code></a></dt>\n  <dd>\n    <p>Returns a new iterator object that yields the <strong>values</strong> for each element in the <code>Set</code> object in insertion order.</p>\n  </dd>\n  <dt id=\"set.prototype.keys\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/keys\"><code>Set.prototype.keys()</code></a></dt>\n  <dd>\n    <p>An alias for <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/values\"><code>Set.prototype.values()</code></a>.</p>\n  </dd>\n  <dt id=\"set.prototype.entries\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/entries\"><code>Set.prototype.entries()</code></a></dt>\n  <dd>\n    <p>Returns a new iterator object that contains <strong>an array of <code>[value, value]</code></strong> for each element in the <code>Set</code> object, in insertion order.</p>\n    <p>This is similar to the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> object, so that each entry's <em>key</em> is the same as its <em>value</em> for a <code>Set</code>.</p>\n  </dd>\n  <dt id=\"set.prototype.foreach\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach\"><code>Set.prototype.forEach()</code></a></dt>\n  <dd>\n    <p>Calls <code>callbackFn</code> once for each value present in the <code>Set</code> object, in insertion order. If a <code>thisArg</code> parameter is provided, it will be used as the <code>this</code> value for each invocation of <code>callbackFn</code>.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"using_the_set_object","title":"Using the Set object","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> mySet1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmySet1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>           <span class=\"token comment\">// Set [ 1 ]</span>\nmySet1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>           <span class=\"token comment\">// Set [ 1, 5 ]</span>\nmySet1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>           <span class=\"token comment\">// Set [ 1, 5 ]</span>\nmySet1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'some text'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Set [ 1, 5, 'some text' ]</span>\n<span class=\"token keyword\">const</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\nmySet1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n\nmySet1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// o is referencing a different object, so this is okay</span>\n\nmySet1<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>              <span class=\"token comment\">// true</span>\nmySet1<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>              <span class=\"token comment\">// false, since 3 has not been added to the set</span>\nmySet1<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>              <span class=\"token comment\">// true</span>\nmySet1<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// true</span>\nmySet1<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Some Text'</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nmySet1<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>       <span class=\"token comment\">// true</span>\n\nmySet1<span class=\"token punctuation\">.</span>size         <span class=\"token comment\">// 5</span>\n\nmySet1<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// removes 5 from the set</span>\nmySet1<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">// false, 5 has been removed</span>\n\nmySet1<span class=\"token punctuation\">.</span>size         <span class=\"token comment\">// 4, since we just removed one value</span>\n\nmySet1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">// Set [1, 'some text', {...}, {...}, 5] - a previously deleted item will be added as a new item, it will not retain its original position before deletion</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mySet1<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// logs Set(5) [ 1, \"some text\", {…}, {…}, 5 ] in Firefox</span>\n<span class=\"token comment\">// logs Set(5) { 1, \"some text\", {…}, {…}, 5 } in Chrome</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"iterating_sets","title":"Iterating Sets","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// iterate over items in set</span>\n<span class=\"token comment\">// logs the elements in insertion order: 1, \"some text\", {\"a\": 1, \"b\": 2}, {\"a\": 1, \"b\": 2}, 5</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> item <span class=\"token keyword\">of</span> mySet1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// logs the elements in insertion order: 1, \"some text\", {\"a\": 1, \"b\": 2}, {\"a\": 1, \"b\": 2}, 5</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> item <span class=\"token keyword\">of</span> mySet1<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// logs the elements in insertion order: 1, \"some text\", {\"a\": 1, \"b\": 2}, {\"a\": 1, \"b\": 2}, 5</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> item <span class=\"token keyword\">of</span> mySet1<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// logs the elements in insertion order: 1, \"some text\", {\"a\": 1, \"b\": 2}, {\"a\": 1, \"b\": 2}, 5</span>\n<span class=\"token comment\">// (key and value are the same here)</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> mySet1<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// convert Set object to an Array object, with Array.from</span>\n<span class=\"token keyword\">const</span> myArr <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>mySet1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, \"some text\", {\"a\": 1, \"b\": 2}, {\"a\": 1, \"b\": 2}, 5]</span>\n\n<span class=\"token comment\">// the following will also work if run in an HTML document</span>\nmySet1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\nmySet1<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// converting between Set and Array</span>\n<span class=\"token keyword\">const</span> mySet2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mySet2<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>mySet2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 2, 3, 4]</span>\n\n<span class=\"token comment\">// intersect can be simulated via</span>\n<span class=\"token keyword\">const</span> intersection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>mySet1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> mySet2<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// difference can be simulated via</span>\n<span class=\"token keyword\">const</span> difference <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>mySet1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">!</span>mySet2<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Iterate set entries with forEach()</span>\nmySet2<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// 2</span>\n<span class=\"token comment\">// 3</span>\n<span class=\"token comment\">// 4</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"implementing_basic_set_operations","title":"Implementing basic set operations","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">isSuperset</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">set<span class=\"token punctuation\">,</span> subset</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> elem <span class=\"token keyword\">of</span> subset<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">setA<span class=\"token punctuation\">,</span> setB</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> _union <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>setA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> elem <span class=\"token keyword\">of</span> setB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    _union<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> _union<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">intersection</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">setA<span class=\"token punctuation\">,</span> setB</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> _intersection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> elem <span class=\"token keyword\">of</span> setB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>setA<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      _intersection<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> _intersection<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">symmetricDifference</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">setA<span class=\"token punctuation\">,</span> setB</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> _difference <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>setA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> elem <span class=\"token keyword\">of</span> setB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_difference<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      _difference<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      _difference<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> _difference<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">difference</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">setA<span class=\"token punctuation\">,</span> setB</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> _difference <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>setA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> elem <span class=\"token keyword\">of</span> setB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    _difference<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> _difference<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Examples</span>\n<span class=\"token keyword\">const</span> setA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> setB <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> setC <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">isSuperset</span><span class=\"token punctuation\">(</span>setA<span class=\"token punctuation\">,</span> setB<span class=\"token punctuation\">)</span>          <span class=\"token comment\">// returns true</span>\n<span class=\"token function\">union</span><span class=\"token punctuation\">(</span>setA<span class=\"token punctuation\">,</span> setC<span class=\"token punctuation\">)</span>               <span class=\"token comment\">// returns Set {1, 2, 3, 4, 5, 6}</span>\n<span class=\"token function\">intersection</span><span class=\"token punctuation\">(</span>setA<span class=\"token punctuation\">,</span> setC<span class=\"token punctuation\">)</span>        <span class=\"token comment\">// returns Set {3, 4}</span>\n<span class=\"token function\">symmetricDifference</span><span class=\"token punctuation\">(</span>setA<span class=\"token punctuation\">,</span> setC<span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns Set {1, 2, 5, 6}</span>\n<span class=\"token function\">difference</span><span class=\"token punctuation\">(</span>setA<span class=\"token punctuation\">,</span> setC<span class=\"token punctuation\">)</span>          <span class=\"token comment\">// returns Set {1, 2}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"relation_with_array_objects","title":"Relation with Array objects","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'value1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Use the regular Set constructor to transform an Array into a Set</span>\n<span class=\"token keyword\">const</span> mySet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>myArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmySet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value1'</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// returns true</span>\n\n<span class=\"token comment\">// Use the spread syntax to transform a set into an Array.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>mySet<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Will show you exactly the same Array as myArray</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"remove_duplicate_elements_from_the_array","title":"Remove duplicate elements from the array","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Use to remove duplicate elements from the array</span>\n\n<span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// [2, 3, 4, 5, 6, 7, 32]</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"relation_with_strings","title":"Relation with Strings","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token string\">'India'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> mySet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Set(5) {'I', 'n', 'd', 'i', 'a'}</span>\nmySet<span class=\"token punctuation\">.</span>size  <span class=\"token comment\">// 5</span>\n\n<span class=\"token comment\">//case sensitive &amp; duplicate omission</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Firefox\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Set(7) { \"F\", \"i\", \"r\", \"e\", \"f\", \"o\", \"x\" }</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"firefox\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Set(6) { \"f\", \"i\", \"r\", \"e\", \"o\", \"x\" }</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"use_set_to_ensure_the_uniqueness_of_a_list_of_values","title":"Use Set to ensure the uniqueness of a list of values","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> Array\n  <span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[id]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> e<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span>size <span class=\"token operator\">===</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/keyed-collections.html#sec-set-objects","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.Set"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"javascript.builtins.Set","dataURL":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"https://github.com/zloirock/core-js#set\" class=\"external\" rel=\" noopener\">Polyfill of <code>Set</code> in <code>core-js</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\"><code>WeakMap</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\"><code>WeakSet</code></a></li>\n</ul>"}}],"toc":[{"text":"Description","id":"description"},{"text":"Constructor","id":"constructor"},{"text":"Static properties","id":"static_properties"},{"text":"Instance properties","id":"instance_properties"},{"text":"Instance methods","id":"instance_methods"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The Set object lets you store unique values of any type, whether primitive values or object references.","popularity":0.0545,"modified":"2022-09-09T05:25:05.000Z","other_translations":[{"title":"Set","locale":"es","native":"Español"},{"title":"Set","locale":"fr","native":"Français"},{"title":"Set","locale":"ja","native":"日本語"},{"title":"Set","locale":"ko","native":"한국어"},{"title":"Set","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Set","locale":"ru","native":"Русский"},{"title":"Set","locale":"zh-CN","native":"中文 (简体)"},{"title":"Set","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"en-us/web/javascript/reference/global_objects/set","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/javascript/reference/global_objects/set/index.md","last_commit_url":"https://github.com/mdn/content/commit/968e6f1f3b6f977a09e116a0ac552459b741eac3","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/en-US/docs/Web/JavaScript/Reference","title":"JavaScript reference"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects","title":"Standard built-in objects"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set","title":"Set"}],"pageTitle":"Set - JavaScript | MDN","noIndexing":false}}