{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"BigInt.prototype.toLocaleString()","mdn_url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toLocaleString","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects\">Standard built-in objects</a></strong></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>Methods</strong></a><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asIntN\"><code>BigInt.asIntN()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asUintN\"><code>BigInt.asUintN()</code></a></li><li><em><code>BigInt.prototype.toLocaleString()</code></em></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toString\"><code>BigInt.prototype.toString()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/valueOf\"><code>BigInt.prototype.valueOf()</code></a></li></ol></li><li><strong>Inheritance:</strong></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li><a href=\"#\"><strong>Properties</strong></a><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function.prototype.displayName</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function.prototype.length</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function.prototype.name</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\"><code>Function.prototype.prototype</code></a></li></ol></li><li><a href=\"#\"><strong>Methods</strong></a><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>Properties</strong></a><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>Methods</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong><code>toLocaleString()</code></strong> method returns a string with a language-sensitive representation of this BigInt. In implementations with <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\"><code>Intl.NumberFormat</code> API</a> support, this method simply calls <code>Intl.NumberFormat</code>.</p><iframe class=\"interactive\" height=\"490\" src=\"https://interactive-examples.mdn.mozilla.net/pages/js/bigint-tolocalestring.html\" title=\"MDN Web Docs Interactive Example\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js-nolint notranslate\">toLocaleString()\ntoLocaleString(locales)\ntoLocaleString(locales, options)\n</pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<p>The <code>locales</code> and <code>options</code> parameters customize the behavior of the function and let applications specify the language whose formatting conventions should be used.</p>\n<p>In implementations that support the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\"><code>Intl.NumberFormat</code> API</a>, these parameters correspond exactly to the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat\"><code>Intl.NumberFormat()</code></a> constructor's parameters. Implementations without <code>Intl.NumberFormat</code> support are asked to ignore both parameters, making the locale used and the form of the string returned entirely implementation-dependent.</p>\n<dl>\n  <dt id=\"locales\"><code>locales</code> <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>A string with a BCP 47 language tag, or an array of such strings. Corresponds to the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#locales\"><code>locales</code></a> parameter of the <code>Intl.NumberFormat()</code> constructor.</p>\n    <p>In implementations without <code>Intl.NumberFormat</code> support, this parameter is ignored and the host's locale is usually used.</p>\n  </dd>\n  <dt id=\"options\"><code>options</code> <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>An object adjusting the output format. Corresponds to the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options\"><code>options</code></a> parameter of the <code>Intl.NumberFormat()</code> constructor.</p>\n    <p>In implementations without <code>Intl.NumberFormat</code> support, this parameter is ignored.</p>\n  </dd>\n</dl>\n<p>See the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat\"><code>Intl.NumberFormat()</code> constructor</a> for details on these parameters and how to use them.</p>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>A string with a language-sensitive representation of the given BigInt.</p>\n<p>In implementations with <code>Intl.NumberFormat</code>, this is equivalent to <code>new Intl.NumberFormat(locales, options).format(number)</code>.</p>"}},{"type":"prose","value":{"id":"performance","title":"Performance","isH3":false,"content":"<p>\n  When formatting large numbers of numbers, it is better to create a\n  <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\"><code>Intl.NumberFormat</code></a> object and use the function provided by its\n  <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/format\"><code>format()</code></a> method.\n</p>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"using_tolocalestring","title":"Using <code>toLocaleString</code>","isH3":true,"content":"<p>\n  In basic use without specifying a locale, a formatted string in the default locale and\n  with default options is returned.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> bigint <span class=\"token operator\">=</span> <span class=\"token number\">3500n</span><span class=\"token punctuation\">;</span>\n\nbigint<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Displays \"3,500\" if in U.S. English locale</span>\n</code></pre></div>","titleAsText":"Using toLocaleString"}},{"type":"prose","value":{"id":"using_locales","title":"Using <code>locales</code>","isH3":true,"content":"<p>\n  This example shows some of the variations in localized number formats. In order to get\n  the format of the language used in the user interface of your application, make sure to\n  specify that language (and possibly some fallback languages) using the\n  <code>locales</code> argument:\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> bigint <span class=\"token operator\">=</span> <span class=\"token number\">123456789123456789n</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// German uses period for thousands</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bigint<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'de-DE'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → 123.456.789.123.456.789</span>\n\n<span class=\"token comment\">// Arabic in most Arabic speaking countries uses Eastern Arabic digits</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bigint<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ar-EG'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → ١٢٣٬٤٥٦٬٧٨٩٬١٢٣٬٤٥٦٬٧٨٩</span>\n\n<span class=\"token comment\">// India uses thousands/lakh/crore separators</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bigint<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'en-IN'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → 1,23,45,67,89,12,34,56,789</span>\n\n<span class=\"token comment\">// the nu extension key requests a numbering system, e.g. Chinese decimal</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bigint<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zh-Hans-CN-u-nu-hanidec'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → 一二三,四五六,七八九,一二三,四五六,七八九</span>\n\n<span class=\"token comment\">// when requesting a language that may not be supported, such as</span>\n<span class=\"token comment\">// Balinese, include a fallback language, in this case Indonesian</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bigint<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'ban'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → 123.456.789.123.456.789</span>\n</code></pre></div>","titleAsText":"Using locales"}},{"type":"prose","value":{"id":"using_options","title":"Using <code>options</code>","isH3":true,"content":"<p>\n  The results provided by <code>toLocaleString</code> can be customized using the\n  <code>options</code> argument:\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> bigint <span class=\"token operator\">=</span> <span class=\"token number\">123456789123456789n</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// request a currency format</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bigint<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'de-DE'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">style</span><span class=\"token operator\">:</span> <span class=\"token string\">'currency'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">currency</span><span class=\"token operator\">:</span> <span class=\"token string\">'EUR'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → 123.456.789.123.456.789,00 €</span>\n\n<span class=\"token comment\">// the Japanese yen doesn't use a minor unit</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bigint<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ja-JP'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">style</span><span class=\"token operator\">:</span> <span class=\"token string\">'currency'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">currency</span><span class=\"token operator\">:</span> <span class=\"token string\">'JPY'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// → ￥123,456,789,123,456,789</span>\n\n<span class=\"token comment\">// limit to three significant digits</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bigint<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'en-IN'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">maximumSignificantDigits</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → 1,23,00,00,00,00,00,00,000</span>\n</code></pre></div>","titleAsText":"Using options"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma402/#sup-bigint.prototype.tolocalestring","title":"ECMAScript Internationalization API Specification"}],"query":"javascript.builtins.BigInt.toLocaleString"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"javascript.builtins.BigInt.toLocaleString","dataURL":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toLocaleString/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toString\"><code>BigInt.prototype.toString()</code></a></li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Performance","id":"performance"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The toLocaleString() method returns a string with a language-sensitive representation of this BigInt. In implementations with Intl.NumberFormat API support, this method simply calls Intl.NumberFormat.","popularity":0.0003,"modified":"2022-09-13T07:01:32.000Z","other_translations":[{"title":"BigInt.prototype.toLocaleString()","locale":"fr","native":"Français"},{"title":"BigInt.prototype.toLocaleString()","locale":"ja","native":"日本語"},{"title":"BigInt.prototype.toLocaleString()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/web/javascript/reference/global_objects/bigint/tolocalestring","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/javascript/reference/global_objects/bigint/tolocalestring/index.md","last_commit_url":"https://github.com/mdn/content/commit/87a9f73c410c9b9e91300695c8aa4931367243fb","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/en-US/docs/Web/JavaScript/Reference","title":"JavaScript reference"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects","title":"Standard built-in objects"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt","title":"BigInt"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toLocaleString","title":"BigInt.prototype.toLocaleString()"}],"pageTitle":"BigInt.prototype.toLocaleString() - JavaScript | MDN","noIndexing":false}}