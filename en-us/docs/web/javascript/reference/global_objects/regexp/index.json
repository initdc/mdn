{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"RegExp","mdn_url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects\">Standard built-in objects</a></strong></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>Properties</strong></a><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@species\"><code>get RegExp[@@species]</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll\"><code>RegExp.prototype.dotAll</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/flags\"><code>RegExp.prototype.flags</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global\"><code>RegExp.prototype.global</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/hasIndices\"><code>RegExp.prototype.hasIndices</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase\"><code>RegExp.prototype.ignoreCase</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/input\"><code>RegExp.input ($_)</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex\"><code>RegExp: lastIndex</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastMatch\"><code>RegExp.lastMatch ($&amp;)</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastParen\"><code>RegExp.lastParen ($+)</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/leftContext\"><code>RegExp.leftContext ($`)</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline\"><code>RegExp.prototype.multiline</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/n\"><code>RegExp.$1-$9</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/rightContext\"><code>RegExp.rightContext ($')</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/source\"><code>RegExp.prototype.source</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky\"><code>RegExp.prototype.sticky</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode\"><code>RegExp.prototype.unicode</code></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>Methods</strong></a><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@match\"><code>RegExp.prototype[@@match]()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll\"><code>RegExp.prototype[@@matchAll]()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace\"><code>RegExp.prototype[@@replace]()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@search\"><code>RegExp.prototype[@@search]()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@split\"><code>RegExp.prototype[@@split]()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/compile\"><code>RegExp.prototype.compile()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code>RegExp.prototype.exec()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\"><code>RegExp.prototype.test()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/toString\"><code>RegExp.prototype.toString()</code></a></li></ol></li><li><strong>Inheritance:</strong></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li><a href=\"#\"><strong>Properties</strong></a><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function.prototype.displayName</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function.prototype.length</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function.prototype.name</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\"><code>Function.prototype.prototype</code></a></li></ol></li><li><a href=\"#\"><strong>Methods</strong></a><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>Properties</strong></a><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>Methods</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong><code>RegExp</code></strong> object is used for matching text with a pattern.</p>\n<p>For an introduction to regular expressions, read the <a href=\"/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\">Regular Expressions chapter</a> in the <a href=\"/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\">JavaScript Guide</a>.</p>"}},{"type":"prose","value":{"id":"description","title":"Description","isH3":false,"content":""}},{"type":"prose","value":{"id":"literal_notation_and_constructor","title":"Literal notation and constructor","isH3":true,"content":"<p>There are two ways to create a <code>RegExp</code> object: a <em>literal notation</em> and a <em>constructor</em>.</p>\n<ul>\n  <li>The <em>literal notation</em> takes a pattern between two slashes, followed by optional flags, after the second slash.</li>\n  <li>The <em>constructor function</em> takes either a string or a <code>RegExp</code> object as its first parameter and a string of optional flags as its second parameter.</li>\n</ul>\n<p>The following three expressions create the same regular expression object:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">ab+c</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// literal notation</span>\n<span class=\"token comment\">// OR</span>\n<span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ab+c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// constructor with string pattern as first argument</span>\n<span class=\"token comment\">// OR</span>\n<span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">ab+c</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// constructor with regular expression literal as first argument</span>\n</code></pre></div>\n<p>Before regular expressions can be used, they have to be compiled. This process allows them to perform matches more efficiently. More about the process can be found in <a href=\"https://docs.microsoft.com/dotnet/standard/base-types/compilation-and-reuse-in-regular-expressions\" class=\"external\" rel=\" noopener\">dotnet docs</a>.</p>\n<p>The literal notation results in compilation of the regular expression when the expression is evaluated. On the other hand, the constructor of the <code>RegExp</code> object, <code>new RegExp('ab+c')</code>, results in runtime compilation of the regular expression.</p>\n<p>Use a string as the first argument to the <code>RegExp()</code> constructor when you want to <a href=\"#building_a_regular_expression_from_dynamic_inputs\">build the regular expression from dynamic input</a>.</p>"}},{"type":"prose","value":{"id":"flags_in_constructor","title":"Flags in constructor","isH3":true,"content":"<p>The expression <code>new RegExp(/ab+c/, flags)</code> will create a new <code>RegExp</code> using the source of the first parameter and the flags provided by the second.</p>\n<p>When using the constructor function, the normal string escape rules (preceding special characters with <code>\\</code> when included in a string) are necessary.</p>\n<p>For example, the following are equivalent:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\w+</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// OR</span>\n<span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\\\w+'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"special_handling_for_regexes","title":"Special handling for regexes","isH3":true,"content":"<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> Whether something is a \"regex\" can be <a href=\"https://en.wikipedia.org/wiki/Duck_typing\" class=\"external\" rel=\" noopener\">duck-typed</a>. It doesn't have to be a <code>RegExp</code>!</p>\n</div>\n<p>Some built-in methods would treat regexes specially. They decide whether <code>x</code> is a regex through <a href=\"https://tc39.es/ecma262/#sec-isregexp\" class=\"external\" rel=\" noopener\">multiple steps</a>:</p>\n<ol>\n  <li><code>x</code> must be an object (not a primitive).</li>\n  <li>If <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/match\"><code>x[Symbol.match]</code></a> is not <code>undefined</code>, check if it's <a href=\"/en-US/docs/Glossary/Truthy\">truthy</a>.</li>\n  <li>Otherwise, if <code>x[Symbol.match]</code> is <code>undefined</code>, check if <code>x</code> had been created with the <code>RegExp</code> constructor. (This step should rarely happen, since if <code>x</code> is a <code>RegExp</code> object that have not been tampered with, it should have a <code>Symbol.match</code> property.)</li>\n</ol>\n<p>Note that in most cases, it would go through the <code>Symbol.match</code> check, which means:</p>\n<ul>\n  <li>An actual <code>RegExp</code> object whose <code>Symbol.match</code> property's value is <a href=\"/en-US/docs/Glossary/Falsy\">falsy</a> but not <code>undefined</code> (even with everything else intact, like <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code>exec</code></a> and <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace\"><code>@@replace</code></a>) can be used as if it's not a regex.</li>\n  <li>A non-<code>RegExp</code> object with a <code>Symbol.match</code> property will be treated as if it's a regex.</li>\n</ul>\n<p>This choice was made because <code>@@match</code> is the most indicative property that something is intended to be used for matching. (<code>exec</code> could also be used, but because it's not a symbol property, there would be too many false positives.) The places that treat regexes specially include:</p>\n<ul>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\"><code>String.prototype.endsWith()</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\"><code>startsWith()</code></a>, and <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\"><code>includes()</code></a> throw a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> if the first argument is a regex.</li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll\"><code>String.prototype.matchAll()</code></a> and <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll\"><code>replaceAll()</code></a> check whether the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global\">global</a> flag is set if the first argument is a regex before invoking its <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/matchAll\"><code>@@matchAll</code></a> or <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/replace\"><code>@@replace</code></a> method.</li>\n  <li>The <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp\"><code>RegExp()</code></a> constructor directly returns the <code>pattern</code> argument only if <code>pattern</code> is a regex (among a few other conditions). If <code>pattern</code> is a regex, it would also interrogate <code>pattern</code>'s <code>source</code> and <code>flags</code> properties instead of coercing <code>pattern</code> to a string.</li>\n</ul>\n<p>For example, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\"><code>String.prototype.endsWith()</code></a> would coerce all inputs to strings, but it would throw if the argument is a regex, because it's only designed to match strings, and using a regex is likely a developer mistake.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string\">\"foobar\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">toString</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string\">\"bar\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token string\">\"foobar\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">bar</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError: First argument to String.prototype.endsWith must not be a regular expression</span>\n</code></pre></div>\n<p>You can get around the check by setting <code>@@match</code> to a <a href=\"/en-US/docs/Glossary/Falsy\">falsy</a> value that's not <code>undefined</code>. This would mean that the regex cannot be used for <code>String.prototype.match()</code> (since without <code>@@match</code>, <code>match()</code> would construct a new <code>RegExp</code> object with the two enclosing slashes added by <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/toString\"><code>re.toString()</code></a>), but it can be used for virtually everything else.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">bar</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\nre<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">\"/bar/g\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nre<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'bar', index: 0, input: 'bar', groups: undefined ]</span>\n<span class=\"token string\">\"bar &amp; bar\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">,</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'foo &amp; foo'</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"perl-like_regexp_properties","title":"Perl-like RegExp properties","isH3":true,"content":"<p>Note that several of the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\" aria-current=\"page\"><code>RegExp</code></a> properties have both long and short (Perl-like) names. Both names always refer to the same value. (Perl is the programming language from which JavaScript modeled its regular expressions.) See also <a href=\"/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp_properties\">deprecated <code>RegExp</code> properties</a>.</p>"}},{"type":"prose","value":{"id":"constructor","title":"Constructor","isH3":false,"content":"<dl>\n  <dt id=\"regexp\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp\"><code>RegExp()</code></a></dt>\n  <dd>\n    <p>Creates a new <code>RegExp</code> object.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"static_properties","title":"Static properties","isH3":false,"content":"<dl>\n  <dt id=\"get_regexpspecies\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@species\"><code>get RegExp[@@species]</code></a></dt>\n  <dd>\n    <p>The constructor function that is used to create derived objects.</p>\n  </dd>\n  <dt id=\"regexp.1-9\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/n\"><code>RegExp.$1-$9</code></a></dt>\n  <dd>\n    <p>The legacy read-only static properties that contain parenthesized substring matches.</p>\n  </dd>\n  <dt id=\"regexp.input__\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/input\"><code>RegExp.input ($_)</code></a> <svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg></dt>\n  <dd>\n    <p>A static read-only property that contains the last string against which a regular expression was successfully matched.</p>\n  </dd>\n  <dt id=\"regexp.lastmatch_\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastMatch\"><code>RegExp.lastMatch ($&amp;)</code></a> <svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg></dt>\n  <dd>\n    <p>A static read-only property that contains the last matched characters.</p>\n  </dd>\n  <dt id=\"regexp.lastparen_\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastParen\"><code>RegExp.lastParen ($+)</code></a> <svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg></dt>\n  <dd>\n    <p>A static property that contains the last parenthesized substring match.</p>\n  </dd>\n  <dt id=\"regexp.leftcontext_\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/leftContext\"><code>RegExp.leftContext ($`)</code></a> <svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg></dt>\n  <dd>\n    <p>A static read-only property that contains the substring preceding the most recent match.</p>\n  </dd>\n  <dt id=\"regexp.rightcontext_\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/rightContext\"><code>RegExp.rightContext ($')</code></a> <svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg></dt>\n  <dd>\n    <p>A static read-only property that contains the substring following the most recent match.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"instance_properties","title":"Instance properties","isH3":false,"content":"<dl>\n  <dt id=\"regexp.prototype.flags\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/flags\"><code>RegExp.prototype.flags</code></a></dt>\n  <dd>\n    <p>A string that contains the flags of the <code>RegExp</code> object.</p>\n  </dd>\n  <dt id=\"regexp.prototype.dotall\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll\"><code>RegExp.prototype.dotAll</code></a></dt>\n  <dd>\n    <p>Whether <code>.</code> matches newlines or not.</p>\n  </dd>\n  <dt id=\"regexp.prototype.global\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global\"><code>RegExp.prototype.global</code></a></dt>\n  <dd>\n    <p>Whether to test the regular expression against all possible matches in a string, or only against the first.</p>\n  </dd>\n  <dt id=\"regexp.prototype.hasindices\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/hasIndices\"><code>RegExp.prototype.hasIndices</code></a></dt>\n  <dd>\n    <p>Whether the regular expression result exposes the start and end indices of captured substrings.</p>\n  </dd>\n  <dt id=\"regexp.prototype.ignorecase\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase\"><code>RegExp.prototype.ignoreCase</code></a></dt>\n  <dd>\n    <p>Whether to ignore case while attempting a match in a string.</p>\n  </dd>\n  <dt id=\"regexp.prototype.multiline\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline\"><code>RegExp.prototype.multiline</code></a></dt>\n  <dd>\n    <p>Whether or not to search in strings across multiple lines.</p>\n  </dd>\n  <dt id=\"regexp.prototype.source\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/source\"><code>RegExp.prototype.source</code></a></dt>\n  <dd>\n    <p>The text of the pattern.</p>\n  </dd>\n  <dt id=\"regexp.prototype.sticky\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky\"><code>RegExp.prototype.sticky</code></a></dt>\n  <dd>\n    <p>Whether or not the search is sticky.</p>\n  </dd>\n  <dt id=\"regexp.prototype.unicode\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode\"><code>RegExp.prototype.unicode</code></a></dt>\n  <dd>\n    <p>Whether or not Unicode features are enabled.</p>\n  </dd>\n  <dt id=\"regexp.prototype.lastindex\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex\"><code>RegExp.prototype.lastIndex</code></a></dt>\n  <dd>\n    <p>The index at which to start the next match.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"instance_methods","title":"Instance methods","isH3":false,"content":"<dl>\n  <dt id=\"regexp.prototype.compile\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/compile\"><code>RegExp.prototype.compile()</code></a> <svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg></dt>\n  <dd>\n    <p>(Re-)compiles a regular expression during execution of a script.</p>\n  </dd>\n  <dt id=\"regexp.prototype.exec\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code>RegExp.prototype.exec()</code></a></dt>\n  <dd>\n    <p>Executes a search for a match in its string parameter.</p>\n  </dd>\n  <dt id=\"regexp.prototype.test\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\"><code>RegExp.prototype.test()</code></a></dt>\n  <dd>\n    <p>Tests for a match in its string parameter.</p>\n  </dd>\n  <dt id=\"regexp.prototype.tostring\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/toString\"><code>RegExp.prototype.toString()</code></a></dt>\n  <dd>\n    <p>Returns a string representing the specified object. Overrides the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a> method.</p>\n  </dd>\n  <dt id=\"regexp.prototypematch\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@match\"><code>RegExp.prototype[@@match]()</code></a></dt>\n  <dd>\n    <p>Performs match to given string and returns match result.</p>\n  </dd>\n  <dt id=\"regexp.prototypematchall\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll\"><code>RegExp.prototype[@@matchAll]()</code></a></dt>\n  <dd>\n    <p>Returns all matches of the regular expression against a string.</p>\n  </dd>\n  <dt id=\"regexp.prototypereplace\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace\"><code>RegExp.prototype[@@replace]()</code></a></dt>\n  <dd>\n    <p>Replaces matches in given string with new substring.</p>\n  </dd>\n  <dt id=\"regexp.prototypesearch\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@search\"><code>RegExp.prototype[@@search]()</code></a></dt>\n  <dd>\n    <p>Searches the match in given string and returns the index the pattern found in the string.</p>\n  </dd>\n  <dt id=\"regexp.prototypesplit\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@split\"><code>RegExp.prototype[@@split]()</code></a></dt>\n  <dd>\n    <p>Splits given string into an array by separating the string into substrings.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"using_a_regular_expression_to_change_data_format","title":"Using a regular expression to change data format","isH3":true,"content":"<p>The following script uses the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>replace()</code></a> method of the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> instance to match a name in the format <em>first last</em> and output it in the format <em>last, first</em>.</p>\n<p>In the replacement text, the script uses <code>$1</code> and <code>$2</code> to indicate the results of the corresponding matching parentheses in the regular expression pattern.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(\\w+)\\s(\\w+)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'John Smith'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> newstr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">,</span> <span class=\"token string\">'$2, $1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newstr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>This displays <code>\"Smith, John\"</code>.</p>"}},{"type":"prose","value":{"id":"using_regular_expression_to_split_lines_with_different_line_endingsends_of_lineline_breaks","title":"Using regular expression to split lines with different line endings/ends of line/line breaks","isH3":true,"content":"<p>The default line ending varies depending on the platform (Unix, Windows, etc.). The line splitting provided in this example works on all platforms.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token string\">'Some text\\nAnd some more\\r\\nAnd yet\\rThis is the end'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> lines <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\r\\n|\\r|\\n</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs [ 'Some text', 'And some more', 'And yet', 'This is the end' ]</span>\n</code></pre></div>\n<p>Note that the order of the patterns in the regular expression matters.</p>"}},{"type":"prose","value":{"id":"using_regular_expression_on_multiple_lines","title":"Using regular expression on multiple lines","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'Please yes\\nmake my day!'</span><span class=\"token punctuation\">;</span>\n\ns<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">yes.*day</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Returns null</span>\n\ns<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">yes[^]*day</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Returns [\"yes\\nmake my day\"]</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"using_a_regular_expression_with_the_sticky_flag","title":"Using a regular expression with the sticky flag","isH3":true,"content":"<p>The <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky\"><code>sticky</code></a> flag indicates that the regular expression performs sticky matching in the target string by attempting to match starting at <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex\"><code>RegExp.prototype.lastIndex</code></a>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'#foo#'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">foo</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">y</span></span><span class=\"token punctuation\">;</span>\n\nregex<span class=\"token punctuation\">.</span>lastIndex <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nregex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>      <span class=\"token comment\">// true</span>\nregex<span class=\"token punctuation\">.</span>lastIndex <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\nregex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>      <span class=\"token comment\">// false (lastIndex is taken into account with sticky flag)</span>\nregex<span class=\"token punctuation\">.</span>lastIndex      <span class=\"token comment\">// 0 (reset after match failure)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"the_difference_between_the_sticky_flag_and_the_global_flag","title":"The difference between the sticky flag and the global flag","isH3":true,"content":"<p>With the sticky flag <code>y</code>, the next match has to happen at the <code>lastIndex</code> position, while with the global flag <code>g</code>, the match can happen at the <code>lastIndex</code> position or later:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\d</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">y</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> r<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123 456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> <span class=\"token string\">\"AND re.lastIndex\"</span><span class=\"token punctuation\">,</span> re<span class=\"token punctuation\">.</span>lastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// [ '1', index: 0, input: '123 456', groups: undefined ] AND re.lastIndex 1</span>\n<span class=\"token comment\">// [ '2', index: 1, input: '123 456', groups: undefined ] AND re.lastIndex 2</span>\n<span class=\"token comment\">// [ '3', index: 2, input: '123 456', groups: undefined ] AND re.lastIndex 3</span>\n<span class=\"token comment\">//   ... and no more match.</span>\n</code></pre></div>\n<p>With the global flag <code>g</code>, all 6 digits would be matched, not just 3.</p>"}},{"type":"prose","value":{"id":"regular_expression_and_unicode_characters","title":"Regular expression and Unicode characters","isH3":true,"content":"<p><code>\\w</code> and <code>\\W</code> only matches ASCII based characters; for example, <code>a</code> to <code>z</code>, <code>A</code> to <code>Z</code>, <code>0</code> to <code>9</code>, and <code>_</code>.</p>\n<p>To match characters from other languages such as Cyrillic or Hebrew, use <code>\\uhhhh</code>, where <code>hhhh</code> is the character's Unicode value in hexadecimal.</p>\n<p>This example demonstrates how one can separate out Unicode characters from a word.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token string\">'Образец text на русском языке'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\u0400-\\u04FF]+</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> match <span class=\"token operator\">=</span> regex<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs 'Образец'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span>lastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs '7'</span>\n\n<span class=\"token keyword\">const</span> match2 <span class=\"token operator\">=</span> regex<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>match2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs 'на' [did not log 'text']</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span>lastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs '15'</span>\n\n<span class=\"token comment\">// and so on</span>\n</code></pre></div>\n<p>The <a href=\"/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Unicode_Property_Escapes\">Unicode property escapes</a> feature introduces a solution, by allowing for a statement as simple as <code>\\p{scx=Cyrl}</code>.</p>"}},{"type":"prose","value":{"id":"extracting_subdomain_name_from_url","title":"Extracting subdomain name from URL","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://xxx.domain.com\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^https?:\\/\\/(.+?)\\.</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs 'xxx'</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> Instead of using regular expressions for parsing URLs, it is usually better to use the browsers built-in URL parser by using the <a href=\"/en-US/docs/Web/API/URL_API\">URL API</a>.</p>\n</div>"}},{"type":"prose","value":{"id":"building_a_regular_expression_from_dynamic_inputs","title":"Building a regular expression from dynamic inputs","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> breakfasts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'bacon'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'eggs'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'oatmeal'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'toast'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cereal'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> order <span class=\"token operator\">=</span> <span class=\"token string\">'Let me get some bacon and eggs, please'</span><span class=\"token punctuation\">;</span>\n\norder<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\\\\b(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>breakfasts<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'|'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)\\\\b</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'g'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Returns ['bacon', 'eggs']</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/text-processing.html#sec-regexp-regular-expression-objects","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.RegExp"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"javascript.builtins.RegExp","dataURL":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/bcd.json"}},{"type":"prose","value":{"id":"firefox-specific_notes","title":"Firefox-specific notes","isH3":true,"content":"<p>Starting with Firefox 34, in the case of a capturing group with quantifiers preventing its exercise, the matched text for a capturing group is now <code>undefined</code> instead of an empty string:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Firefox 33 or older</span>\n<span class=\"token string\">'x'</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">x(.)?</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">m<span class=\"token punctuation\">,</span> group</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">group: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// group: \"\"</span>\n\n<span class=\"token comment\">// Firefox 34 or newer</span>\n<span class=\"token string\">'x'</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">x(.)?</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">m<span class=\"token punctuation\">,</span> group</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">group: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>group<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// group: undefined</span>\n</code></pre></div>\n<p>Note that due to web compatibility, <code>RegExp.$N</code> will still return an empty string instead of <code>undefined</code> (<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1053944\" class=\"external\" rel=\" noopener\">bug 1053944</a>).</p>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"https://github.com/zloirock/core-js#ecmascript-string-and-regexp\" class=\"external\" rel=\" noopener\">Polyfill of many modern <code>RegExp</code> features (<code>dotAll</code>, <code>sticky</code> flags, named capture groups, etc.) in <code>core-js</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\">Regular Expressions</a> chapter in the <a href=\"/en-US/docs/Web/JavaScript/Guide\">JavaScript Guide</a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match\"><code>String.prototype.match()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>String.prototype.replace()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\"><code>String.prototype.split()</code></a></li>\n</ul>"}}],"toc":[{"text":"Description","id":"description"},{"text":"Constructor","id":"constructor"},{"text":"Static properties","id":"static_properties"},{"text":"Instance properties","id":"instance_properties"},{"text":"Instance methods","id":"instance_methods"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The RegExp object is used for matching text with a pattern.","popularity":0.0317,"modified":"2022-09-21T15:40:26.000Z","other_translations":[{"title":"RegExp","locale":"es","native":"Español"},{"title":"RegExp","locale":"fr","native":"Français"},{"title":"RegExp","locale":"ja","native":"日本語"},{"title":"RegExp","locale":"ko","native":"한국어"},{"title":"RegExp","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"RegExp","locale":"ru","native":"Русский"},{"title":"RegExp(正则表达式)","locale":"zh-CN","native":"中文 (简体)"},{"title":"RegExp","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"en-us/web/javascript/reference/global_objects/regexp","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/javascript/reference/global_objects/regexp/index.md","last_commit_url":"https://github.com/mdn/content/commit/649656ef04735ede2ef600e8d0516e334f4b144a","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/en-US/docs/Web/JavaScript/Reference","title":"JavaScript reference"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects","title":"Standard built-in objects"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp","title":"RegExp"}],"pageTitle":"RegExp - JavaScript | MDN","noIndexing":false}}