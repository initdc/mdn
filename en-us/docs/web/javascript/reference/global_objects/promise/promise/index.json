{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Promise() constructor","mdn_url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects\">Standard built-in objects</a></strong></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>Properties</strong></a><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/@@species\"><code>get Promise[@@species]</code></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>Methods</strong></a><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\"><code>Promise.all()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled\"><code>Promise.allSettled()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/any\"><code>Promise.any()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\"><code>Promise.prototype.catch()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally\"><code>Promise.prototype.finally()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race\"><code>Promise.race()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject\"><code>Promise.reject()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\"><code>Promise.resolve()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\"><code>Promise.prototype.then()</code></a></li></ol></li><li><strong>Inheritance:</strong></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li><a href=\"#\"><strong>Properties</strong></a><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function.prototype.displayName</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function.prototype.length</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function.prototype.name</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\"><code>Function.prototype.prototype</code></a></li></ol></li><li><a href=\"#\"><strong>Methods</strong></a><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>Properties</strong></a><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>Methods</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong><code>Promise</code></strong> constructor is primarily used to wrap functions that do not already support promises.</p><iframe class=\"interactive\" height=\"692\" src=\"https://interactive-examples.mdn.mozilla.net/pages/js/promise-constructor.html\" title=\"MDN Web Docs Interactive Example\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js-nolint notranslate\">new Promise(executor)\n</pre></div>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> <code>Promise()</code> can only be constructed with <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/new\"><code>new</code></a>. Attempting to call it without <code>new</code> throws a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a>.</p>\n</div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"executor\"><code>executor</code></dt>\n  <dd>\n    <p>A <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>function</code></a> to be executed by the constructor. It receives two functions as parameters: <code>resolutionFunc</code> and <code>rejectionFunc</code>. Any errors thrown in the <code>executor</code> will cause the promise to be rejected, and the return value will be neglected. The semantics of <code>executor</code> are detailed below.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>When called via <code>new</code>, the <code>Promise</code> constructor returns a promise object. The promise object will become <em>resolved</em> when either of the functions <code>resolutionFunc</code> or <code>rejectionFunc</code> are invoked. Note that if you call <code>resolutionFunc</code> or <code>rejectionFunc</code> and pass another <code>Promise</code> object as an argument, it can be said to be \"resolved\", but still not \"settled\". See the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#description\">Promise description</a> for more explanation.</p>"}},{"type":"prose","value":{"id":"description","title":"Description","isH3":false,"content":"<p>Traditionally (before promises), asynchronous tasks were designed as callbacks.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./data.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// This callback will be called when the task is done, with the</span>\n  <span class=\"token comment\">// final `error` or `result`. Any operation dependent on the</span>\n  <span class=\"token comment\">// result must be defined within this callback.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Code here is immediately executed after the `readFile` request</span>\n<span class=\"token comment\">// is fired. It does not wait for the callback to be called, hence</span>\n<span class=\"token comment\">// making `readFile` \"asynchronous\".</span>\n</code></pre></div>\n<p>To take advantage of the readability improvement and language features offered by promises, the <code>Promise()</code> constructor allows one to transform the callback-based API to a promise-based one.</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> If your task is already promise-based, you likely do not need the <code>Promise()</code> constructor.</p>\n</div>\n<p>The <code>executor</code> is custom code that ties an outcome in a callback to a promise. You, the programmer, write the <code>executor</code>. Its signature is expected to be:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">executor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolutionFunc<span class=\"token punctuation\">,</span> rejectionFunc</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Typically, some asynchronous operation that accepts a callback,</span>\n  <span class=\"token comment\">// like the `readFile` function above</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>resolutionFunc</code> and <code>rejectionFunc</code> are also functions, and you can give them whatever actual names you want. Their signatures are simple: they accept a single parameter of any type.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">resolutionFunc</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token comment\">// call on resolved</span>\n<span class=\"token function\">rejectionFunc</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span> <span class=\"token comment\">// call on rejected</span>\n</code></pre></div>\n<p>The <code>resolutionFunc</code> <code>value</code> parameter can be another promise object, in which case the promise gets dynamically inserted into the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#chained_promises\">promise chain</a>. The <code>rejectionFunc</code> has semantics close to the <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/throw\"><code>throw</code></a> statement, so <code>reason</code> is typically an <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a> instance. If either <code>value</code> or <code>reason</code> is omitted, the promise is fulfilled/rejected with <code>undefined</code>.</p>\n<p>About the <code>executor</code>, it's important to understand the following:</p>\n<ul>\n  <li>The <code>executor</code> return value is ignored.</li>\n  <li>If an error is thrown in the <code>executor</code>, the promise is rejected.</li>\n</ul>\n<p>So the mechanism by which the code within the <code>executor</code> has effect is as follows:</p>\n<ul>\n  <li>At the time when the constructor generates the new <code>Promise</code> object, it also generates a corresponding pair of functions for <code>resolutionFunc</code> and <code>rejectionFunc</code>; these are \"tethered\" to the <code>Promise</code> object.</li>\n  <li>The code within the <code>executor</code> has the opportunity to perform some operation. The eventual completion of the asynchronous task is communicated with the promise instance via the side effect caused by <code>resolutionFunc</code> or <code>rejectionFunc</code>. The side effect is that the <code>Promise</code> object either becomes \"fulfilled\", or \"rejected\".</li>\n  <li>The promise object is stateful: once its state has moved from \"pending\" to \"fulfilled\" or \"rejected\", it stays fulfilled or rejected. Only the first call to <code>resolutionFunc</code> or <code>rejectionFunc</code> affects the promise's state, and subsequent calls to either function can neither change the fulfillment value/rejection reason nor toggle the state from \"fulfilled\" to \"rejected\" or opposite.</li>\n  <li><code>return</code> statements within the <code>executor</code> merely impacts control flow and alters whether a part of the function is executed, but does not have any impact on the promise's fulfillment value.</li>\n</ul>\n<p>And so, given all the above, here's a summary of the typical flow:</p>\n<ol>\n  <li><code>executor</code> typically wraps some asynchronous operation which provides a callback-based API.</li>\n  <li>The callback (the one passed to the original callback-based API) is defined within the <code>executor</code> code, so it has access to the <code>resolutionFunc</code> and <code>rejectionFunc</code>.</li>\n  <li>The promise is informed of the asynchronous task's eventual result, received from the callback, through the invocation of <code>resolutionFunc</code> or <code>rejectionFunc</code>.</li>\n  <li>Once <code>resolutionFunc</code> or <code>rejectionFunc</code> is called, the promise's state moves from \"pending\" to either \"fulfilled\" or \"rejected\".</li>\n  <li>The <code>Promise</code> object (asynchronously) invokes any further handlers associated by <code>.then(handleFulfilled)</code> or <code>.catch(handleRejected)</code>.</li>\n  <li>The argument passed to <code>resolutionFunc</code> or <code>rejectionFunc</code>, i.e., the fulfillment value or rejection reason, is passed to the invocation of <code>handleFulfilled</code> and <code>handleRejected</code> as an input parameter (see <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#chained_promises\">Chained Promises</a>).</li>\n</ol>\n<p>For example, the callback-based <code>readFile</code> API above can be transformed into a promise-based one.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">readFilePromise</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">readFilePromise</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./data.txt\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to read data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"creating_a_new_promise","title":"Creating a new Promise","isH3":true,"content":"<p>\n  A <code>Promise</code> object is created using the <code>new</code> keyword and its\n  constructor. This constructor takes a function, called the \"executor function\", as its\n  parameter. This function should take two functions as parameters. The first of these\n  functions (<code>resolve</code>) is called when the asynchronous task completes\n  successfully and returns the results of the task as a value. The second\n  (<code>reject</code>) is called when the task fails, and returns the reason for failure,\n  which is typically an error object.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> myFirstPromise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// do something asynchronous which eventually calls either:</span>\n  <span class=\"token comment\">//</span>\n  <span class=\"token comment\">//   resolve(someValue)        // fulfilled</span>\n  <span class=\"token comment\">// or</span>\n  <span class=\"token comment\">//   reject(\"failure reason\")  // rejected</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"making_functions_return_a_promise","title":"Making functions return a Promise","isH3":true,"content":"<p>To provide a function with promise functionality, have it return a promise:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">myAsyncFunction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span>\n    xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span>\n    xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span>\n    xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-promise-constructor","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.Promise.Promise"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"javascript.builtins.Promise.Promise","dataURL":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"https://github.com/zloirock/core-js#ecmascript-promise\" class=\"external\" rel=\" noopener\">Polyfill of <code>Promise</code> in <code>core-js</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Using_promises\">Using Promises</a></li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Description","id":"description"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The Promise constructor is primarily used to wrap functions that do not already support promises.","popularity":0.0031,"modified":"2022-09-13T07:09:29.000Z","other_translations":[{"title":"Constructeur Promise()","locale":"fr","native":"Français"},{"title":"Promise() コンストラクター","locale":"ja","native":"日本語"},{"title":"Promise() 생성자","locale":"ko","native":"한국어"},{"title":"Promise() 构造器","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/web/javascript/reference/global_objects/promise/promise","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/javascript/reference/global_objects/promise/promise/index.md","last_commit_url":"https://github.com/mdn/content/commit/ce2909126eb09e44c9f48d9f65d072acae827749","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/en-US/docs/Web/JavaScript/Reference","title":"JavaScript reference"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects","title":"Standard built-in objects"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise","title":"Promise"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise","title":"Promise() constructor"}],"pageTitle":"Promise() constructor - JavaScript | MDN","noIndexing":false}}