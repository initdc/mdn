{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"JSON.parse()","mdn_url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects\">Standard built-in objects</a></strong></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON\"><code>JSON</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>Methods</strong></a><ol><li><em><code>JSON.parse()</code></em></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a></li></ol></li><li><strong>Inheritance:</strong></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>Properties</strong></a><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>Methods</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong><code>JSON.parse()</code></strong> method parses a JSON string, constructing the JavaScript value or object described by the string. An optional <em>reviver</em> function can be provided to perform a transformation on the resulting object before it is returned.</p><iframe class=\"interactive\" height=\"490\" src=\"https://interactive-examples.mdn.mozilla.net/pages/js/json-parse.html\" title=\"MDN Web Docs Interactive Example\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js-nolint notranslate\">JSON.parse(text)\nJSON.parse(text, reviver)\n</pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"text\"><code>text</code></dt>\n  <dd>\n    <p>The string to parse as JSON. See the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON\"><code>JSON</code></a> object for a description of JSON syntax.</p>\n  </dd>\n  <dt id=\"reviver\"><code>reviver</code> <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>If a function, this prescribes how each value originally produced by parsing is transformed before being returned. Non-callable values are ignored. The function is called with the following arguments:</p>\n    <dl>\n      <dt id=\"key\"><code>key</code></dt>\n      <dd>\n        <p>The key associated with the value.</p>\n      </dd>\n      <dt id=\"value\"><code>value</code></dt>\n      <dd>\n        <p>The value produced by parsing.</p>\n      </dd>\n    </dl>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>The <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>, string, number, boolean, or <code>null</code> value corresponding to the given JSON <code>text</code>.</p>"}},{"type":"prose","value":{"id":"exceptions","title":"Exceptions","isH3":true,"content":"<dl>\n  <dt id=\"syntaxerror\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\"><code>SyntaxError</code></a></dt>\n  <dd>\n    <p>Thrown if the string to parse is not valid JSON.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"description","title":"Description","isH3":false,"content":"<p><code>JSON.parse()</code> parses a JSON string according to the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON#full_json_grammar\">JSON grammar</a>, then evaluates the string as if it's a JavaScript expression. The only instance where a piece of JSON text represents a different value from the same JavaScript expression is when dealing with the <code>\"__proto__\"</code> key —&nbsp;see <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#object_literal_syntax_vs._json\">Object literal syntax vs. JSON</a>.</p>"}},{"type":"prose","value":{"id":"the_reviver_parameter","title":"The reviver parameter","isH3":true,"content":"<p>If a <code>reviver</code> is specified, the value computed by parsing is <em>transformed</em> before being returned. Specifically, the computed value and all its properties (in a <a href=\"https://en.wikipedia.org/wiki/Depth-first_search\" class=\"external\" rel=\" noopener\">depth-first</a> fashion, beginning with the most nested properties and proceeding to the original value itself) are individually run through the <code>reviver</code>.</p>\n<p>The <code>reviver</code> is called with the object containing the property being processed as <code>this</code>, and two arguments: <code>key</code> and <code>value</code>, representing the property name as a string (even for arrays) and the property value. If the <code>reviver</code> function returns <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> (or returns no value — for example, if execution falls off the end of the function), the property is deleted from the object. Otherwise, the property is redefined to be the return value. If the <code>reviver</code> only transforms some values and not others, be certain to return all untransformed values as-is — otherwise, they will be deleted from the resulting object.</p>\n<p>Similar to the <code>replacer</code> parameter of <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a>, <code>reviver</code> will be last called on the root object with an empty string as the <code>key</code> and the root object as the <code>value</code>. For JSON text parsing to primitive values, <code>reviver</code> will be called once.</p>\n<p>Note that <code>reviver</code> is run after the value is parsed. So, for example, numbers in JSON text will have already been converted to JavaScript numbers, and may lose precision in the process. To transfer large numbers without loss of precision, serialize them as strings, and revive them to <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInts</a>, or other appropriate arbitrary precision formats.</p>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"using_json.parse","title":"Using JSON.parse()","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {}</span>\n<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\"foo\"'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"foo\"</span>\n<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[1, 5, \"false\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 5, \"false\"]</span>\n<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"using_the_reviver_parameter","title":"Using the reviver parameter","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'{\"p\": 5}'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n    <span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">\"number\"</span>\n      <span class=\"token operator\">?</span> value <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token comment\">// return value * 2 for numbers</span>\n      <span class=\"token operator\">:</span> value<span class=\"token punctuation\">,</span> <span class=\"token comment\">// return everything else unchanged</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// { p: 10 }</span>\n\n<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{\"1\": 1, \"2\": 2, \"3\": {\"4\": 4, \"5\": {\"6\": 6}}}'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// log the current property name, the last is \"\".</span>\n  <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span> <span class=\"token comment\">// return the unchanged property value.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// 2</span>\n<span class=\"token comment\">// 4</span>\n<span class=\"token comment\">// 6</span>\n<span class=\"token comment\">// 5</span>\n<span class=\"token comment\">// 3</span>\n<span class=\"token comment\">// \"\"</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"using_reviver_when_paired_with_the_replacer_of_json.stringify","title":"Using reviver when paired with the replacer of JSON.stringify()","isH3":true,"content":"<p>In order for a value to properly round-trip (that is, it gets deserialized to the same original object), the serialization process must preserve the type information. For example, you can use the <code>replacer</code> parameter of <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a> for this purpose:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Maps are normally serialized as objects with no properties.</span>\n<span class=\"token comment\">// We can use the replacer to specify the entries to be serialized.</span>\n<span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"one\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> jsonText <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>\n  map<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>value <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Map</span> <span class=\"token operator\">?</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>jsonText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [[1,\"one\"],[2,\"two\"],[3,\"three\"]]</span>\n\n<span class=\"token keyword\">const</span> map2 <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>\n  jsonText<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">===</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Map { 1 =&gt; \"one\", 2 =&gt; \"two\", 3 =&gt; \"three\" }</span>\n</code></pre></div>\n<p>Because JSON has no syntax space for annotating type metadata, in order to revive values that are not plain objects, you have to consider one of the following:</p>\n<ul>\n  <li>Serialize the entire object to a string and prefix it with a type tag.</li>\n  <li>\"Guess\" based on the structure of the data (for example, an array of two-member arrays)</li>\n  <li>If the shape of the payload is fixed, based on the property name (for example, all properties called <code>registry</code> hold <code>Map</code> objects).</li>\n</ul>"}},{"type":"prose","value":{"id":"json.parse_does_not_allow_trailing_commas","title":"JSON.parse() does not allow trailing commas","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token comment\">// both will throw a SyntaxError</span>\n<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[1, 2, 3, 4, ]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{\"foo\" : 1, }'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"json.parse_does_not_allow_single_quotes","title":"JSON.parse() does not allow single quotes","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token comment\">// will throw a SyntaxError</span>\n<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{'foo': 1}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/structured-data.html#sec-json.parse","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.JSON.parse"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"javascript.builtins.JSON.parse","dataURL":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a></li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Description","id":"description"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The JSON.parse() method parses a JSON string, constructing the JavaScript value or object described by the string. An optional reviver function can be provided to perform a transformation on the resulting object before it is returned.","popularity":0.0422,"modified":"2022-09-22T03:43:22.000Z","other_translations":[{"title":"JSON.parse()","locale":"es","native":"Español"},{"title":"JSON.parse()","locale":"fr","native":"Français"},{"title":"JSON.parse()","locale":"ja","native":"日本語"},{"title":"JSON.parse()","locale":"ko","native":"한국어"},{"title":"JSON.parse()","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"JSON.parse()","locale":"ru","native":"Русский"},{"title":"JSON.parse()","locale":"zh-CN","native":"中文 (简体)"},{"title":"JSON.parse()","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"en-us/web/javascript/reference/global_objects/json/parse","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/javascript/reference/global_objects/json/parse/index.md","last_commit_url":"https://github.com/mdn/content/commit/9010030c393cad71250a3813d29b4afc799f639f","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/en-US/docs/Web/JavaScript/Reference","title":"JavaScript reference"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects","title":"Standard built-in objects"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON","title":"JSON"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse","title":"JSON.parse()"}],"pageTitle":"JSON.parse() - JavaScript | MDN","noIndexing":false}}