{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Symbol.unscopables","mdn_url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/unscopables","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects\">Standard built-in objects</a></strong></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>Properties</strong></a><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/asyncIterator\"><code>Symbol.asyncIterator</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/description\"><code>Symbol.prototype.description</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance\"><code>Symbol.hasInstance</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/isConcatSpreadable\"><code>Symbol.isConcatSpreadable</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator\"><code>Symbol.iterator</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/match\"><code>Symbol.match</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/matchAll\"><code>Symbol.matchAll</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/replace\"><code>Symbol.replace</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/search\"><code>Symbol.search</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/species\"><code>Symbol.species</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/split\"><code>Symbol.split</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive\"><code>Symbol.toPrimitive</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag\"><code>Symbol.toStringTag</code></a></li><li><em><code>Symbol.unscopables</code></em></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>Methods</strong></a><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/@@toPrimitive\"><code>Symbol.prototype[@@toPrimitive]</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/for\"><code>Symbol.for()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/keyFor\"><code>Symbol.keyFor()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toString\"><code>Symbol.prototype.toString()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/valueOf\"><code>Symbol.prototype.valueOf()</code></a></li></ol></li><li><strong>Inheritance:</strong></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li><a href=\"#\"><strong>Properties</strong></a><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function.prototype.displayName</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function.prototype.length</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function.prototype.name</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\"><code>Function.prototype.prototype</code></a></li></ol></li><li><a href=\"#\"><strong>Methods</strong></a><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>Properties</strong></a><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>Methods</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong><code>Symbol.unscopables</code></strong> well-known symbol is used to specify an object value of whose own and inherited property names are excluded from the <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/with\"><code>with</code></a> environment bindings of the associated object.</p><iframe class=\"interactive\" height=\"490\" src=\"https://interactive-examples.mdn.mozilla.net/pages/js/symbol-unscopables.html\" title=\"MDN Web Docs Interactive Example\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"description","title":"Description","isH3":false,"content":"<p>The <code>@@unscopables</code> property (accessed via <code>Symbol.unscopables</code>) can be defined on any object to exclude property names from being exposed as lexical variables in <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/with\"><code>with</code></a> environment bindings. Note that when using <a href=\"/en-US/docs/Web/JavaScript/Reference/Strict_mode\">strict mode</a>, <code>with</code> statements are not available, and this symbol is likely not needed.</p>\n<p>Setting a property of the <code>@@unscopables</code> object to <code>true</code> (or any <a href=\"/en-US/docs/Glossary/Truthy\">truthy</a> value) will make the corresponding property of the <code>with</code> scope object <em>unscopable</em> and therefore won't be introduced to the <code>with</code> body scope. Setting a property to <code>false</code> (or any <a href=\"/en-US/docs/Glossary/Falsy\">falsy</a> value) will make it <em>scopable</em> and thus appear as lexical scope variables.</p>\n<p>When deciding whether <code>x</code> is unscopable, the entire prototype chain of the <code>@@unscopables</code> property is looked up for a property called <code>x</code>. This means if you declared <code>@@unscopables</code> as a plain object, <code>Object.prototype</code> properties like <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>toString</code></a> would become unscopable as well, which may cause backward incompatibility for legacy code assuming those properties are normally scoped (see <a href=\"#avoid_using_a_non-null-prototype_object_as_unscopables\">an example below</a>). You are advised to make your custom <code>@@unscopables</code> property have <code>null</code> as its prototype, like <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@unscopables\"><code>Array.prototype[@@unscopables]</code></a> does.</p>\n<p>This protocol is also utilized by DOM APIs, such as <a href=\"/en-US/docs/Web/API/Element/append\"><code>Element.prototype.append()</code></a>.</p><table class=\"standard-table\">\n  <thead>\n    <tr>\n      <th class=\"header\" colspan=\"2\">Property attributes of <code>Symbol.unscopables</code></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Writable</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <td>Enumerable</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <td>Configurable</td>\n      <td>no</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"scoping_in_with_statements","title":"Scoping in with statements","isH3":true,"content":"<p>The following code works fine in ES5 and below. However, in ECMAScript 2015 and later, the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys\"><code>Array.prototype.keys()</code></a> method was introduced. That means that inside a <code>with</code> environment, \"keys\" would now be the method and not the variable. That's why the <code>@@unscopables</code> symbol was introduced. A built-in <code>@@unscopables</code> setting is implemented as <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@unscopables\"><code>Array.prototype[@@unscopables]</code></a> to prevent some of the Array methods being scoped into the <code>with</code> statement.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> keys <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">with</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  keys<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"something\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"unscopables_in_objects","title":"Unscopables in objects","isH3":true,"content":"<p>You can also set <code>@@unscopables</code> for your own objects.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">bar</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">baz</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nobj<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>unscopables<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Make the object have `null` prototype to prevent</span>\n  <span class=\"token comment\">// `Object.prototype` methods from being unscopable</span>\n  <span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// `foo` will be scopable</span>\n  <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// `bar` will be unscopable</span>\n  <span class=\"token literal-property property\">bar</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// `baz` is omitted; because `undefined` is falsy, it is also scopable (default)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">with</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError: bar is not defined</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>baz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"avoid_using_a_non-null-prototype_object_as_unscopables","title":"Avoid using a non-null-prototype object as @@unscopables","isH3":true,"content":"<p>Declaring <code>@@unscopables</code> as a plain object without eliminating its prototype may cause subtle bugs. Consider the following code working before <code>@@unscopables</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> character <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Yoda\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">toString</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Use with statements, you must not\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">with</span> <span class=\"token punctuation\">(</span>character<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">' says: \"'</span> <span class=\"token operator\">+</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\"'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Yoda says: \"Use with statements, you must not\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>To preserve backward compatibility, you decided to add an <code>@@unscopables</code> property when adding more properties to <code>character</code>. You may naïvely do it like:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">const</span> character <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Yoda\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">toString</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Use with statements, you must not\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">student</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Luke\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>unscopables<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Make `student` unscopable</span>\n    <span class=\"token literal-property property\">student</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>However, the code above now breaks:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">with</span> <span class=\"token punctuation\">(</span>character<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">' says: \"'</span> <span class=\"token operator\">+</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\"'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Yoda says: \"[object Undefined]\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>This is because when looking up <code>character[Symbol.unscopables].toString</code>, it returns <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a>, which is a truthy value, thus making the <code>toString()</code> call in the <code>with()</code> statement reference <code>globalThis.toString()</code> instead — and because it's called without a <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/this\"><code>this</code></a>, <code>this</code> is <code>undefined</code>, making it return <code>[object Undefined]</code>.</p>\n<p>Even when the method is not overridden by <code>character</code>, making it unscopable will change the value of <code>this</code>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> proto <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> proto <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">with</span> <span class=\"token punctuation\">(</span>proto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isPrototypeOf</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true; `isPrototypeOf` is scoped and `this` is `proto`</span>\n<span class=\"token punctuation\">}</span>\n\nproto<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>unscopables<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">with</span> <span class=\"token punctuation\">(</span>proto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isPrototypeOf</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError: Cannot convert undefined or null to object</span>\n  <span class=\"token comment\">// `isPrototypeOf` is unscoped and `this` is undefined</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>To fix this, always make sure <code>@@unscopables</code> only contains properties you wish to be unscopable, without <code>Object.prototype</code> properties.</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">const</span> character <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Yoda\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">toString</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Use with statements, you must not\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">student</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Luke\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>unscopables<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Make the object have `null` prototype to prevent</span>\n    <span class=\"token comment\">// `Object.prototype` methods from being unscopable</span>\n    <span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// Make `student` unscopable</span>\n    <span class=\"token literal-property property\">student</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-symbol.unscopables","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.Symbol.unscopables"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"javascript.builtins.Symbol.unscopables","dataURL":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/unscopables/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@unscopables\"><code>Array.prototype[@@unscopables]</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/with\"><code>with</code></a> statement (not available in <a href=\"/en-US/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode</a>)</li>\n  <li><a href=\"/en-US/docs/Web/API/Element/append\"><code>Element.prototype.append()</code></a></li>\n</ul>"}}],"toc":[{"text":"Description","id":"description"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The Symbol.unscopables well-known symbol is used to specify an object value of whose own and inherited property names are excluded from the with environment bindings of the associated object.","popularity":0.0006,"modified":"2022-09-11T14:08:28.000Z","other_translations":[{"title":"Symbol.unscopables","locale":"es","native":"Español"},{"title":"Symbol.unscopables","locale":"fr","native":"Français"},{"title":"Symbol.unscopables","locale":"ja","native":"日本語"},{"title":"Symbol.unscopables","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Symbol.unscopables","locale":"ru","native":"Русский"},{"title":"Symbol.unscopables","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/web/javascript/reference/global_objects/symbol/unscopables","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/javascript/reference/global_objects/symbol/unscopables/index.md","last_commit_url":"https://github.com/mdn/content/commit/442e8e1b869c9f89345eb8b9f5381cfb9c071fbe","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/en-US/docs/Web/JavaScript/Reference","title":"JavaScript reference"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects","title":"Standard built-in objects"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol","title":"Symbol"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/unscopables","title":"Symbol.unscopables"}],"pageTitle":"Symbol.unscopables - JavaScript | MDN","noIndexing":false}}