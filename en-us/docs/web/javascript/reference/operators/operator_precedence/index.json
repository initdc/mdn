{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Operator precedence","mdn_url":"/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence","locale":"en-US","native":"English (US)","sidebarHTML":"\n <ol>\n  <li><a href=\"/en-US/docs/Web/JavaScript\"><strong><em>JavaScript</em></strong></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Tutorials\"><strong>Tutorials:</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Complete beginners</summary>\n      <ol>\n        <li><a href=\"/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">JavaScript basics</a></li>\n        <li><a href=\"/en-US/docs/Learn/JavaScript/First_steps\">JavaScript first steps</a></li>\n        <li><a href=\"/en-US/docs/Learn/JavaScript/Building_blocks\">JavaScript building blocks</a></li>\n        <li><a href=\"/en-US/docs/Learn/JavaScript/Objects\">Introducing JavaScript objects</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>JavaScript Guide</summary>\n      <ol>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Introduction\">Introduction</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Grammar_and_Types\">Grammar and types</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">Control flow and error handling</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration\">Loops and iteration</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Functions\">Functions</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators\">Expressions and operators</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Numbers_and_dates\">Numbers and dates</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Text_formatting\">Text formatting</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\">Regular expressions</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Indexed_collections\">Indexed collections</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Keyed_collections\">Keyed collections</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Working_with_Objects\">Working with objects</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Details_of_the_Object_Model\">Details of the object model</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Using_promises\">Using promises</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators\">Iterators and generators</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Meta_programming\">Meta programming</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Modules\">JavaScript modules</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Intermediate</summary>\n      <ol>\n        <li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks\">Client-side JavaScript frameworks</a></li>\n        <li><a href=\"/en-US/docs/Learn/JavaScript/Client-side_web_APIs\">Client-side web APIs</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">A re-introduction to JavaScript</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Data_structures\">JavaScript data structures</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness\">Equality comparisons and sameness</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Closures\">Closures</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Advanced</summary>\n      <ol>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">Inheritance and the prototype chain</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Typed_arrays\">JavaScript typed arrays</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Memory_Management\">Memory Management</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/EventLoop\">Concurrency model and Event Loop</a></li>\n      </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference\">References:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n       <summary>Built-in objects</summary>\n        <ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\">AggregateError</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\">AsyncFunction</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\">AsyncGenerator</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\">AsyncGeneratorFunction</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics\">Atomics</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array\">BigInt64Array</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array\">BigUint64Array</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\">DataView</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\">decodeURI()</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent()</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI()</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent()</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\">Error</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape\">escape()</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval()</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError\">EvalError</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\">FinalizationRegistry</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\">Float32Array</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\">Float64Array</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator\">Generator</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">globalThis</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity\">Infinity</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\">Int16Array</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\">Int32Array</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\">Int8Array</a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError\">InternalError</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite\">isFinite()</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN\">isNaN()</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\">NaN</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">parseFloat()</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">parseInt()</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\">RangeError</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\">ReferenceError</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">Reflect</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">RegExp</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\">String</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\">SyntaxError</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">TypedArray</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\">Uint16Array</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\">Uint32Array</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">Uint8Array</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\">Uint8ClampedArray</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\">undefined</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/unescape\">unescape()</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError\">URIError</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef\">WeakRef</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\">WeakSet</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Expressions &amp; operators</summary>\n      <ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Addition_assignment\">Addition assignment (+=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Addition\">Addition (+)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Assignment\">Assignment (=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/async_function*\">async function* expression</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/await\">await</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment\">Bitwise AND assignment (&amp;=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">Bitwise AND (&amp;)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">Bitwise NOT (~)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment\">Bitwise OR assignment (|=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">Bitwise OR (|)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment\">Bitwise XOR assignment (^=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">Bitwise XOR (^)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/class\">class expression</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator\">Comma operator (,)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">Conditional (ternary) operator</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Decrement\">Decrement (--)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/delete\">delete operator</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">Destructuring assignment</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Division_assignment\">Division assignment (/=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Division\">Division (/)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Equality\">Equality (==)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment\">Exponentiation assignment (**=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation\">Exponentiation (**)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/function\">Function expression</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal\">Greater than or equal (&gt;=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than\">Greater than (&gt;)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Grouping\">Grouping operator ( )</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/import.meta\">import.meta</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/import\">import</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/in\">in operator</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Increment\">Increment (++)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Inequality\">Inequality (!=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/instanceof\">instanceof</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment\">Left shift assignment (&lt;&lt;=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift\">Left shift (&lt;&lt;)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal\">Less than or equal (&lt;=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Less_than\">Less than (&lt;)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment\">Logical AND assignment (&amp;&amp;=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND\">Logical AND (&amp;&amp;)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">Logical NOT (!)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment\">Logical nullish assignment (??=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment\">Logical OR assignment (||=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Logical OR (||)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment\">Multiplication assignment (*=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Multiplication\">Multiplication (*)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/new.target\">new.target</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/new\">new operator</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/null\">null</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\">Nullish coalescing operator (??)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer\">Object initializer</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">Operator precedence</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">Optional chaining (?.)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors\">Property accessors</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Remainder_assignment\">Remainder assignment (%=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Remainder\">Remainder (%)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment\">Right shift assignment (&gt;&gt;=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift\">Right shift (&gt;&gt;)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Spread syntax (...)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality\">Strict equality (===)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">Strict inequality (!==)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment\">Subtraction assignment (-=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Subtraction\">Subtraction (-)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/super\">super</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/this\">this</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/typeof\">typeof</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Unary_negation\">Unary negation (-)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Unary_plus\">Unary plus (+)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment\">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">Unsigned right shift (&gt;&gt;&gt;)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/void\">void operator</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/yield*\">yield*</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/yield\">yield</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Statements &amp; declarations</summary>\n      <ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/async_function*\">async function*</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/block\">block</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/break\">break</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/class\">class</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/const\">const</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/continue\">continue</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/debugger\">debugger</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/do...while\">do...while</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/Empty\">empty</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/export\">export</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of\">for await...of</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/for\">for</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/function*\">function*</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/function\">function declaration</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/if...else\">if...else</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/import\">import</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/label\">label</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/let\">let</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/return\">return</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/switch\">switch</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/throw\">throw</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\">try...catch</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/var\">var</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/while\">while</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/with\">with</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Functions</summary>\n      <ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow function expressions</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Functions/get\">getter</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Functions/set\">setter</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Classes</summary>\n      <ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Classes/Class_static_initialization_blocks\">Class static initialization blocks</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Classes/constructor\">constructor</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Classes/extends\">extends</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">Private class features</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields\">Public class fields</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Classes/static\">static</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Errors</summary>\n      <ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Already_has_pragma\">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Array_sort_argument\">TypeError: invalid Array.prototype.sort argument</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Bad_octal\">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Bad_radix\">RangeError: radix must be an integer</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag\">SyntaxError: invalid regular expression flag \"x\"</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield\">SyntaxError: return not in function</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/BigInt_division_by_zero\">RangeError: BigInt division by zero</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/BigInt_negative_exponent\">RangeError: BigInt negative exponent</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type\">TypeError: X.prototype.y called on incompatible type</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init\">ReferenceError: can't access lexical declaration 'X' before initialization</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Cant_assign_to_property\">TypeError: can't assign to property \"x\" on \"y\": not an object</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Cant_be_converted_to_BigInt_because_it_isnt_an_integer\">RangeError: x can't be converted to BigInt because it isn't an integer</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Cant_convert_BigInt_to_number\">TypeError: can't convert BigInt to number</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Cant_convert_x_to_BigInt\">TypeError: can't convert x to BigInt</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible\">TypeError: can't define property \"x\": \"obj\" is not extensible</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Cant_delete\">TypeError: property \"x\" is non-configurable and can't be deleted</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property\">TypeError: can't redefine non-configurable property \"x\"</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Cant_use_nullish_coalescing_unparenthesized\">SyntaxError: cannot use `??` unparenthesized within `||` and `&amp;&amp;` expressions</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value\">TypeError: cyclic object value</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Dead_object\">TypeError: can't access dead object</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode\">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage\">ReferenceError: deprecated caller or arguments usage</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_expression_closures\">Warning: expression closures are deprecated</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_octal\">SyntaxError: \"0\"-prefixed octal literals and octal escape seq. are deprecated</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma\">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_String_generics\">Warning: String.x is deprecated; use String.prototype.x instead</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_toLocaleFormat\">Warning: Date.prototype.toLocaleFormat is deprecated</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Equal_as_assign\">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Getter_only\">TypeError: setting getter-only property \"x\"</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Hash_outside_class\">SyntaxError: Unexpected '#' used outside of class body</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Identifier_after_number\">SyntaxError: identifier starts immediately after numeric literal</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Illegal_character\">SyntaxError: illegal character</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/in_operator_no_object\">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\">RangeError: invalid array length</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side\">SyntaxError: invalid assignment left-hand side</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax\">SyntaxError: invalid BigInt syntax</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment\">TypeError: invalid assignment to const \"x\"</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_date\">RangeError: invalid date</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer\">SyntaxError: for-in loop head declarations may not have initializers</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer\">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand\">TypeError: invalid 'instanceof' operand 'x'</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/is_not_iterable\">TypeError: 'x' is not iterable</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse\">SyntaxError: JSON.parse: bad parsing</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Malformed_formal_parameter\">SyntaxError: Malformed formal parameter</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Malformed_URI\">URIError: malformed URI sequence</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list\">SyntaxError: missing ] after element list</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id\">SyntaxError: missing : after property id</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body\">SyntaxError: missing } after function body</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list\">SyntaxError: missing } after property list</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter\">SyntaxError: missing formal parameter</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const\">SyntaxError: missing = in const declaration</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator\">SyntaxError: missing name after . operator</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\">SyntaxError: missing ) after argument list</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition\">SyntaxError: missing ) after condition</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Missing_semicolon_before_statement\">SyntaxError: missing ; before statement</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/More_arguments_needed\">TypeError: More arguments needed</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count\">RangeError: repeat count must be non-negative</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/No_non-null_object\">TypeError: \"x\" is not a non-null object</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/No_properties\">TypeError: \"x\" has no properties</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/No_variable_name\">SyntaxError: missing variable name</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element\">TypeError: can't delete non-configurable array element</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint\">RangeError: argument is not a valid code point</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_constructor\">TypeError: \"x\" is not a constructor</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_function\">TypeError: \"x\" is not a function</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Not_defined\">ReferenceError: \"x\" is not defined</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Precision_range\">RangeError: precision is out of range</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Property_access_denied\">Error: Permission denied to access property \"x\"</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Read-only\">TypeError: \"x\" is read-only</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter\">SyntaxError: redeclaration of formal parameter \"x\"</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value\">TypeError: Reduce of empty array with no initial value</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Reserved_identifier\">SyntaxError: \"x\" is a reserved identifier</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large\">RangeError: repeat count must be less than infinity</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Stmt_after_return\">Warning: unreachable code after return statement</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params\">SyntaxError: \"use strict\" not allowed in function with non-simple parameters</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Too_much_recursion\">InternalError: too much recursion</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Undeclared_var\">ReferenceError: assignment to undeclared variable \"x\"</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Undefined_prop\">ReferenceError: reference to undefined property \"x\"</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Unexpected_token\">SyntaxError: Unexpected token</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Unexpected_type\">TypeError: \"x\" is (not) \"y\"</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement\">SyntaxError: function statement requires a name</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Unparenthesized_unary_expr_lhs_exponentiation\">SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Unterminated_string_literal\">SyntaxError: unterminated string literal</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Misc</summary>\n      <ol>\n        <li><a href=\"/en-US/docs/Web/JavaScript/JavaScript_technologies_overview\">JavaScript technologies overview</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Lexical_grammar\">Lexical grammar</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Data_structures\">JavaScript data structures</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">Enumerability and ownership of properties</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\">Iteration protocols</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\">Transitioning to strict mode</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Template_literals\">Template literals</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\">Deprecated features</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong>Operator precedence</strong> determines how operators are parsed concerning each other. Operators with higher precedence become the operands of operators with lower precedence.</p><iframe class=\"interactive\" height=\"490\" src=\"https://interactive-examples.mdn.mozilla.net/pages/js/expressions-operatorprecedence.html\" title=\"MDN Web Docs Interactive Example\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"precedence_and_associativity","title":"Precedence And Associativity","isH3":false,"content":"<p>Consider an expression describable by the representation below, where both <code>OP1</code> and <code>OP2</code> are fill-in-the-blanks for OPerators.</p>\n<pre class=\"notranslate\">a OP1 b OP2 c\n</pre>\n<p>The combination above has two possible interpretations:</p>\n<pre class=\"notranslate\">(a OP1 b) OP2 c\na OP1 (b OP2 c)\n</pre>\n<p>Which one the language decides to adopt depends on the identity of <code>OP1</code> ad <code>OP2</code>.</p>\n<p>If <code>OP1</code> and <code>OP2</code> have different precedence levels (see the table below), the operator with the higher <em>precedence</em> goes first and associativity does not matter. Observe how multiplication has higher precedence than addition and executed first, even though addition is written first in the code.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs 23</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs 23 because parentheses here are superfluous</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs 26 because the parentheses change the order</span>\n</code></pre></div>\n<p>Within operators of the same precedence, the language groups them by <em>associativity</em>. <em>Left-associativity</em> (left-to-right) means that it is interpreted as <code>(a OP1 b) OP2 c</code>, while <em>right-associativity</em> (right-to-left) means it is interpreted as <code>a OP1 (b OP2 c)</code>. Assignment operators are right-associative, so you can write:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>a <span class=\"token operator\">=</span> b <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// same as writing a = (b = 5);</span>\n</code></pre></div>\n<p>with the expected result that <code>a</code> and <code>b</code> get the value 5. This is because the assignment operator returns the value that is assigned. First, <code>b</code> is set to 5. Then the <code>a</code> is also set to 5 — the return value of <code>b = 5</code>, a.k.a. right operand of the assignment.</p>\n<p>As another example, the unique exponentiation operator has right-associativity, whereas other arithmetic operators have left-associativity.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">4</span> <span class=\"token operator\">**</span> <span class=\"token number\">3</span> <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Same as 4 ** (3 ** 2); evaluates to 262144</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token number\">4</span> <span class=\"token operator\">/</span> <span class=\"token number\">3</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Same as (4 / 3) / 2; evaluates to 0.6666...</span>\n</code></pre></div>\n<p>Operators are first grouped by precedence, and then, for adjacent operators that have the same precedence, by associativity. So, when mixing division and exponentiation, the exponentiation always comes before the division. For example, <code>2 ** 3 / 3 ** 2</code> results in 0.8888888888888888 because it is the same as <code>(2 ** 3) / (3 ** 2)</code>.</p>\n<p>For prefix unary operators, suppose we have the following pattern:</p>\n<pre class=\"notranslate\">OP1 a OP2 b\n</pre>\n<p>where <code>OP1</code> is a prefix unary operator and <code>OP2</code> is a binary operator. If <code>OP1</code> has higher precedence than <code>OP2</code>, then it would be grouped as <code>(OP1 a) OP2 b</code>; otherwise, it would be <code>OP1 (a OP2 b)</code>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Equivalent to (typeof a) + b; result is \"number2\"</span>\n</code></pre></div>\n<p>If the unary operator is on the second operand:</p>\n<pre class=\"notranslate\">a OP2 OP1 b\n</pre>\n<p>Then the binary operator <code>OP2</code> must have lower precedence than the unary operator <code>OP1</code> for it to be grouped as <code>a OP2 (OP1 b)</code>. For example, the following is invalid:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  a <span class=\"token operator\">+</span> <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Because <code>+</code> has higher precedence than <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/yield\"><code>yield</code></a>, this would become <code>(a + yield) 1</code> — but because <code>yield</code> is a <a href=\"/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#keywords\">reserved word</a> in generator functions, this would be a syntax error. Luckily, most unary operators have higher precedence than binary operators and do not suffer from this pitfall.</p>\n<p>If we have two prefix unary operators:</p>\n<pre class=\"notranslate\">OP1 OP2 a\n</pre>\n<p>Then the unary operator closer to the operand, <code>OP2</code>, must have higher precedence than <code>OP1</code> for it to be grouped as <code>OP1 (OP2 a)</code>. It's possible to get it the other way and end up with <code>(OP1 OP2) a</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Because <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/await\"><code>await</code></a> has higher precedence than <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/yield\"><code>yield</code></a>, this would become <code>(await yield) 1</code>, which is awaiting an identifier called <code>yield</code>, and a syntax error. Similarly, if you have <code>new !A;</code>, because <code>!</code> has lower precedence than <code>new</code>, this would become <code>(new !) A</code>, which is obviously invalid. (This code looks nonsensical to write anyway, since <code>!A</code> always produces a boolean, not a constructor function.)</p>\n<p>For postfix unary operators (namely, <code>++</code> and <code>--</code>), the same rules apply. Luckily, both operators have higher precedence than any binary operator, so the grouping is always what you would expect. Moreover, because <code>++</code> evaluates to a <em>value</em>, not a <em>reference</em>, you can't chain multiple increments together either, as you may do in C.</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\na<span class=\"token operator\">++</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SyntaxError: Invalid left-hand side in postfix operation.</span>\n</code></pre></div>\n<p>Operator precedence will be handled <em>recursively</em>. For example, consider this expression:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span> <span class=\"token operator\">/</span> <span class=\"token number\">5</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">6</span>\n</code></pre></div>\n<p>First, we group operators with different precedence by decreasing levels of precedence.</p>\n<ol>\n  <li>The <code>**</code> operator has the highest precedence, so it's grouped first.</li>\n  <li>Looking around the <code>**</code> expression, it has <code>*</code> on the right and <code>+</code> on the right. <code>*</code> has higher precedence, so it's grouped first. <code>*</code> and <code>/</code> have the same precedence, so we group them together for now.</li>\n  <li>Looking around the <code>*</code>/<code>/</code> expression grouped in 2, because <code>+</code> has higher precedence than <code>&gt;&gt;</code>, the former is grouped.</li>\n</ol>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>   <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span> <span class=\"token operator\">/</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">6</span>\n<span class=\"token comment\">// │    │ └─ 1. ─┘        │ │</span>\n<span class=\"token comment\">// │    └────── 2. ───────┘ │</span>\n<span class=\"token comment\">// └────────── 3. ──────────┘</span>\n</code></pre></div>\n<p>Within the <code>*</code>/<code>/</code> group, because they are both left-associative, the left operand would be grouped.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>   <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">6</span>\n<span class=\"token comment\">// │    │ │ └─ 1. ─┘     │    │ │</span>\n<span class=\"token comment\">// │    └─│─────── 2. ───│────┘ │</span>\n<span class=\"token comment\">// └──────│───── 3. ─────│──────┘</span>\n<span class=\"token comment\">//        └───── 4. ─────┘</span>\n</code></pre></div>\n<p>Note that operator precedence and associativity only affect the order of evaluation of <em>operators</em> (the implicit grouping), but not the order of evaluation of <em>operands</em>. The operands are always evaluated from left-to-right. The higher-precedence expressions are always evaluated first, and their results are then composed according to the order of operator precedence.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">echo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Evaluating the </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> side</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> num<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Exponentiation operator (**) is right-associative,</span>\n<span class=\"token comment\">// but all call expressions (echo()), which have higher precedence,</span>\n<span class=\"token comment\">// will be evaluated before ** does</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">echo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"left\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">**</span> <span class=\"token function\">echo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"middle\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">**</span> <span class=\"token function\">echo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"right\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Evaluating the left side</span>\n<span class=\"token comment\">// Evaluating the middle side</span>\n<span class=\"token comment\">// Evaluating the right side</span>\n<span class=\"token comment\">// 262144</span>\n\n<span class=\"token comment\">// Exponentiation operator (**) has higher precedence than division (/),</span>\n<span class=\"token comment\">// but evaluation always starts with the left operand</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">echo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"left\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token function\">echo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"middle\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">**</span> <span class=\"token function\">echo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"right\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Evaluating the left side</span>\n<span class=\"token comment\">// Evaluating the middle side</span>\n<span class=\"token comment\">// Evaluating the right side</span>\n<span class=\"token comment\">// 0.4444444444444444</span>\n</code></pre></div>\n<p>If you are familiar with binary trees, think about it as a <a href=\"https://en.wikipedia.org/wiki/Tree_traversal#Post-order,_LRN\" class=\"external\" rel=\" noopener\">post-order traversal</a>.</p>\n<pre class=\"notranslate\">                /\n       ┌────────┴────────┐\necho(\"left\", 4)         **\n                ┌────────┴────────┐\n        echo(\"middle\", 3)  echo(\"right\", 2)\n</pre>\n<p>After all operators have been properly grouped, the binary operators would form a binary tree. Evaluation starts from the outermost group — which is the operator with the lowest precedence (<code>/</code> in this case). The left operand of this operator is first evaluated, which may be composed of higher-precedence operators (such as a call expression <code>echo(\"left\", 4)</code>). After the left operand has been evaluated, the right operand is evaluated in the same fashion. Therefore, all leaf nodes — the <code>echo()</code> calls — would be visited left-to-right, regardless of the precedence of operators joining them.</p>"}},{"type":"prose","value":{"id":"short-circuiting","title":"Short-circuiting","isH3":false,"content":"<p>In the previous section, we said \"the higher-precedence expressions are always evaluated first\" — this is generally true, but it has to be amended with the acknowledgement of <em>short-circuiting</em>, in which case an operand may not be evaluated at all.</p>\n<p>Short-circuiting is jargon for conditional evaluation. For example, in the expression <code>a &amp;&amp; (b + c)</code>, if <code>a</code> is <a href=\"/en-US/docs/Glossary/Falsy\">falsy</a>, then the sub-expression <code>(b + c)</code> will not even get evaluated, even if it is grouped and therefore has higher precedence than <code>&amp;&amp;</code>. We could say that the logical AND operator (<code>&amp;&amp;</code>) is \"short-circuited\". Along with logical AND, other short-circuited operators include logical OR (<code>||</code>), nullish coalescing (<code>??</code>), and optional chaining (<code>?.</code>).</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>a <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// evaluate `a` first, then produce `a` if `a` is \"truthy\"</span>\na <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">&lt;</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// evaluate `a` first, then produce `a` if `a` is \"falsy\"</span>\na <span class=\"token operator\">??</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">||</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// evaluate `a` first, then produce `a` if `a` is not `null` and not `undefined`</span>\na<span class=\"token operator\">?.</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">;</span> <span class=\"token comment\">// evaluate `a` first, then produce `undefined` if `a` is `null` or `undefined`</span>\n</code></pre></div>\n<p>When evaluating a short-circuited operator, the left operand is always evaluated. The right operand will only be evaluated if the left operand cannot determine the result of the operation.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> The behavior of short-circuiting is baked in these operators. Other operators would <em>always</em> evaluate both operands, regardless if that's actually useful — for example, <code>NaN * foo()</code> will always call <code>foo</code>, even when the result would never be something other than <code>NaN</code>.</p>\n</div>\n<p>The previous model of a post-order traversal still stands. However, after the left subtree of a short-circuiting operator has been visited, the language will decide if the right operand needs to be evaluated. If not (for example, because the left operand of <code>||</code> is already truthy), the result is directly returned without visiting the right subtree.</p>\n<p>Consider this case:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'called A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'called B'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'called C'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// called C</span>\n<span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>Only <code>C()</code> is evaluated, despite <code>&amp;&amp;</code> having higher precedence. This does not mean that <code>||</code> has higher precedence in this case — it's exactly <em>because</em> <code>(B() &amp;&amp; A())</code> has higher precedence that causes it to be neglected as a whole. If it's re-arranged as:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// called A</span>\n<span class=\"token comment\">// called B</span>\n<span class=\"token comment\">// false</span>\n</code></pre></div>\n<p>Then the short-circuiting effect of <code>&amp;&amp;</code> would only prevent <code>C()</code> from being evaluated, but because <code>A() &amp;&amp; C()</code> as a whole is <code>false</code>, <code>B()</code> would still be evaluated.</p>\n<p>However, note that short-circuiting does not change the final evaluation outcome. It only affects the evaluation of <em>operands</em>, not how <em>operators</em> are grouped — if evaluation of operands doesn't have side effects (for example, logging to the console, assigning to variables, throwing an error), short-circuiting would not be observable at all.</p>"}},{"type":"prose","value":{"id":"table","title":"Table","isH3":false,"content":"<p>The following table lists operators in order from highest precedence (18) to lowest precedence (1).</p>\n<p>Several notes about the table:</p>\n<ol>\n  <li>Not all syntax included here are \"operators\" in the strict sense. For example, spread <code>...</code> and arrow <code>=&gt;</code> are typically not regarded as operators. However, we still included them to show how tightly they bind compared to other operators/expressions.</li>\n  <li>The operand of unary operators (precedence 14; excluding prefix increment/decrement) cannot be an exponentiation <code>**</code> (precedence 13) without grouping, or there will be a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\"><code>SyntaxError</code></a>. That means, although <code>-1 ** 2</code> is technically unambiguous, the language requires you to use <code>(-1) ** 2</code> instead.</li>\n  <li>The operands of nullish coalescing <code>??</code> (precedence 3) cannot be a logical OR <code>||</code> (precedence 3) or logical AND <code>&amp;&amp;</code> (precedence 4). That means you have to write <code>(a ?? b) || c</code> or <code>a ?? (b || c)</code>, instead of <code>a ?? b || c</code>.</li>\n  <li>Some operators have certain operands that require expressions narrower than those produced by higher-precedence operators. For example, the right-hand side of member access <code>.</code> (precedence 17) must be an identifier instead of a grouped expression. The left-hand side of arrow <code>=&gt;</code> (precedence 2) must be an arguments list or a single identifier instead of some random expression.</li>\n  <li>Some operators have certain operands that accept expressions wider than those produced by higher-precedence operators. For example, the bracket-enclosed expression of bracket notation <code>[ … ]</code> (precedence 17) can be any expression, even comma (precedence 1) joined ones. These operators act as if that operand is \"automatically grouped\". In this case we will omit the associativity.</li>\n</ol>\n<table class=\"fullwidth-table\">\n  <tbody>\n    <tr>\n      <th>Precedence</th>\n      <th>Operator type</th>\n      <th>Associativity</th>\n      <th>Individual operators</th>\n    </tr>\n    <tr>\n      <td>18</td>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Grouping\">Grouping</a></td>\n      <td>n/a</td>\n      <td><code>( … )</code></td>\n    </tr>\n    <tr>\n      <td rowspan=\"5\">17</td>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors#dot_notation\">Member Access</a></td>\n      <td>left-to-right</td>\n      <td><code>… . …</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors#bracket_notation\">Computed Member\n                Access</a></td>\n      <td>n/a</td>\n      <td><code>… [ … ]</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/new\"><code>new</code></a> (with argument list)</td>\n      <td>n/a</td>\n      <td><code>new … ( … )</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Guide/Functions\">Function Call</a></td>\n      <td>n/a</td>\n      <td><code>… ( … )</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">Optional chaining</a></td>\n      <td>left-to-right</td>\n      <td><code>… ?. …</code></td>\n    </tr>\n    <tr>\n      <td>16</td>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/new\"><code>new</code></a> (without argument list)</td>\n      <td>n/a</td>\n      <td><code>new …</code></td>\n    </tr>\n    <tr>\n      <td rowspan=\"2\">15</td>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#increment_and_decrement\">Postfix\n                Increment</a></td>\n      <td rowspan=\"2\">n/a</td>\n      <td><code>… ++</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#increment_and_decrement\">Postfix\n                Decrement</a></td>\n      <td><code>… --</code></td>\n    </tr>\n    <tr>\n      <td rowspan=\"10\">14</td>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">Logical NOT (!)</a></td>\n      <td rowspan=\"10\">n/a</td>\n      <td><code>! …</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">Bitwise NOT (~)</a></td>\n      <td><code>~ …</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Unary_plus\">Unary plus (+)</a></td>\n      <td><code>+ …</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Unary_negation\">Unary negation (-)</a></td>\n      <td><code>- …</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#increment_and_decrement\">Prefix\n                Increment</a></td>\n      <td><code>++ …</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#increment_and_decrement\">Prefix\n                Decrement</a></td>\n      <td><code>-- …</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/typeof\"><code>typeof</code></a></td>\n      <td><code>typeof …</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/void\"><code>void</code></a></td>\n      <td><code>void …</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/delete\"><code>delete</code></a></td>\n      <td><code>delete …</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/await\"><code>await</code></a></td>\n      <td><code>await …</code></td>\n    </tr>\n    <tr>\n      <td>13</td>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation\">Exponentiation (**)</a></td>\n      <td>right-to-left</td>\n      <td><code>… ** …</code></td>\n    </tr>\n    <tr>\n      <td rowspan=\"3\">12</td>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Multiplication\">Multiplication (*)</a></td>\n      <td rowspan=\"3\">left-to-right</td>\n      <td><code>… * …</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Division\">Division (/)</a></td>\n      <td><code>… / …</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Remainder\">Remainder (%)</a></td>\n      <td><code>… % …</code></td>\n    </tr>\n    <tr>\n      <td rowspan=\"2\">11</td>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Addition\">Addition (+)</a></td>\n      <td rowspan=\"2\">left-to-right</td>\n      <td><code>… + …</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Subtraction\">Subtraction (-)</a></td>\n      <td><code>… - …</code></td>\n    </tr>\n    <tr>\n      <td rowspan=\"3\">10</td>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift\">Bitwise Left Shift (&lt;&lt;)</a></td>\n      <td rowspan=\"3\">left-to-right</td>\n      <td><code>… &lt;&lt; …</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift\">Bitwise Right Shift (&gt;&gt;)</a></td>\n      <td><code>… &gt;&gt; …</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">Bitwise Unsigned Right Shift (&gt;&gt;&gt;)</a></td>\n      <td><code>… &gt;&gt;&gt; …</code></td>\n    </tr>\n    <tr>\n      <td rowspan=\"6\">9</td>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Less_than\">Less Than (&lt;)</a></td>\n      <td rowspan=\"6\">left-to-right</td>\n      <td><code>… &lt; …</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal\">Less Than Or Equal (&lt;=)</a></td>\n      <td><code>… &lt;= …</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than\">Greater Than (&gt;)</a></td>\n      <td><code>… &gt; …</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal\">Greater Than Or Equal (&gt;=)</a></td>\n      <td><code>… &gt;= …</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/in\"><code>in</code></a></td>\n      <td><code>… in …</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/instanceof\"><code>instanceof</code></a></td>\n      <td><code>… instanceof …</code></td>\n    </tr>\n    <tr>\n      <td rowspan=\"4\">8</td>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Equality\">Equality (==)</a></td>\n      <td rowspan=\"4\">left-to-right</td>\n      <td><code>… == …</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Inequality\">Inequality (!=)</a></td>\n      <td><code>… != …</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality\">Strict Equality (===)</a></td>\n      <td><code>… === …</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">Strict Inequality (!==)</a></td>\n      <td><code>… !== …</code></td>\n    </tr>\n    <tr>\n      <td>7</td>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">Bitwise AND (&amp;)</a></td>\n      <td>left-to-right</td>\n      <td><code>… &amp; …</code></td>\n    </tr>\n    <tr>\n      <td>6</td>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">Bitwise XOR (^)</a></td>\n      <td>left-to-right</td>\n      <td><code>… ^ …</code></td>\n    </tr>\n    <tr>\n      <td>5</td>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">Bitwise OR (|)</a></td>\n      <td>left-to-right</td>\n      <td><code>… | …</code></td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND\">Logical AND (&amp;&amp;)</a></td>\n      <td>left-to-right</td>\n      <td><code>… &amp;&amp; …</code></td>\n    </tr>\n    <tr>\n      <td rowspan=\"2\">3</td>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Logical OR (||)</a></td>\n      <td>left-to-right</td>\n      <td><code>… || …</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\">Nullish coalescing operator (??)</a></td>\n      <td>left-to-right</td>\n      <td><code>… ?? …</code></td>\n    </tr>\n    <tr>\n      <td rowspan=\"21\">2</td>\n      <td rowspan=\"16\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#assignment_operators\">Assignment</a></td>\n      <td rowspan=\"16\">right-to-left</td>\n      <td><code>… = …</code></td>\n    </tr>\n    <tr>\n      <td><code>… += …</code></td>\n    </tr>\n    <tr>\n      <td><code>… -= …</code></td>\n    </tr>\n    <tr>\n      <td><code>… **= …</code></td>\n    </tr>\n    <tr>\n      <td><code>… *= …</code></td>\n    </tr>\n    <tr>\n      <td><code>… /= …</code></td>\n    </tr>\n    <tr>\n      <td><code>… %= …</code></td>\n    </tr>\n    <tr>\n      <td><code>… &lt;&lt;= …</code></td>\n    </tr>\n    <tr>\n      <td><code>… &gt;&gt;= …</code></td>\n    </tr>\n    <tr>\n      <td><code>… &gt;&gt;&gt;= …</code></td>\n    </tr>\n    <tr>\n      <td><code>… &amp;= …</code></td>\n    </tr>\n    <tr>\n      <td><code>… ^= …</code></td>\n    </tr>\n    <tr>\n      <td><code>… |= …</code></td>\n    </tr>\n    <tr>\n      <td><code>… &amp;&amp;= …</code></td>\n    </tr>\n    <tr>\n      <td><code>… ||= …</code></td>\n    </tr>\n    <tr>\n      <td><code>… ??= …</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">Conditional (ternary) operator</a></td>\n      <td>right-to-left<br>(Groups on expressions after <code>?</code>)</td>\n      <td><code>… ? … : …</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow (=&gt;)</a></td>\n      <td rowspan=\"4\">n/a</td>\n      <td><code>… =&gt; …</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/yield\"><code>yield</code></a></td>\n      <td><code>yield …</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/yield*\"><code>yield*</code></a></td>\n      <td><code>yield* …</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Spread (...)</a></td>\n      <td><code>... …</code></td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator\">Comma / Sequence</a></td>\n      <td>left-to-right</td>\n      <td><code>… , …</code></td>\n    </tr>\n  </tbody>\n</table>"}}],"toc":[{"text":"Precedence And Associativity","id":"precedence_and_associativity"},{"text":"Short-circuiting","id":"short-circuiting"},{"text":"Table","id":"table"}],"summary":"Operator precedence determines how operators are parsed concerning each other. Operators with higher precedence become the operands of operators with lower precedence.","popularity":0.0161,"modified":"2022-08-17T05:31:18.000Z","other_translations":[{"title":"Precedencia de operadores","locale":"es","native":"Español"},{"title":"Précédence des opérateurs","locale":"fr","native":"Français"},{"title":"演算子の優先順位","locale":"ja","native":"日本語"},{"title":"연산자 우선순위","locale":"ko","native":"한국어"},{"title":"Precedência de Operadores","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Приоритет операторов","locale":"ru","native":"Русский"},{"title":"运算符优先级","locale":"zh-CN","native":"中文 (简体)"},{"title":"運算子優先序","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"en-us/web/javascript/reference/operators/operator_precedence","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/javascript/reference/operators/operator_precedence/index.md","last_commit_url":"https://github.com/mdn/content/commit/7de852af7cc0514ab02613dd9eb5d6236f4f3e77","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/en-US/docs/Web/JavaScript/Reference","title":"JavaScript reference"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Operators","title":"Expressions and operators"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence","title":"Operator precedence"}],"pageTitle":"Operator precedence - JavaScript | MDN","noIndexing":false}}