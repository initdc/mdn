{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Deep copy","mdn_url":"/en-US/docs/Glossary/Deep_copy","locale":"en-US","native":"English (US)","sidebarHTML":"\n  <ol>\n    <li><a href=\"/en-US/docs/MDN/About\">About MDN</a></li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Contributing to MDN</summary>\n            <ol>\n                <li><a href=\"/en-US/docs/MDN/Contribute/Getting_started\">Get started on MDN</a></li>\n                <li><a href=\"/en-US/docs/MDN/Contribute\">Contributing to MDN</a></li>\n                <li><a href=\"/en-US/docs/MDN/Contribute/Howto\">Things you can do</a></li>\n                <li><a href=\"/en-US/docs/MDN/Contribute/Localize\">Localizing MDN</a></li>\n                <li><a href=\"/en-US/docs/MDN/Guidelines\">Guidelines</a></li>\n                <li><a href=\"/en-US/docs/MDN/Structures\">Content structures</a></li>\n             </ol>\n        </details>\n    </li>\n  </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>A <strong>deep copy</strong> of an object is a copy whose properties do not share the same references (point to the same underlying values) as those of the source object from which the copy was made. As a result, when you change either the source or the copy, you can be assured you're not causing the other object to change too; that is, you won't unintentionally be causing changes to the source or copy that you don't expect. That behavior contrasts with the behavior of a <a href=\"/en-US/docs/Glossary/Shallow_copy\">shallow copy</a>, in which changes to either the source or the copy may also cause the other object to change too (because the two objects share the same references).</p>\n<p>In JavaScript, standard built-in object-copy operations (<a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">spread syntax</a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\"><code>Array.prototype.concat()</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\"><code>Array.prototype.slice()</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\"><code>Array.from()</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"><code>Object.assign()</code></a>, and <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\"><code>Object.create()</code></a>) do not create deep copies (instead, they create shallow copies).</p>\n<p>One way to make a deep copy of a JavaScript object, if it can be <a href=\"/en-US/docs/Glossary/Serialization\">serialized</a>, is to use <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a> to convert the object to a JSON string, and then <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\"><code>JSON.parse()</code></a> to convert the string back into a (completely new) JavaScript object:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> ingredients_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"noodles\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">list</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"eggs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"flour\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"water\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> ingredients_list_deepcopy <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>ingredients_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Change the value of the 'list' property in ingredients_list_deepcopy.</span>\ningredients_list_deepcopy<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"rice flour\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"water\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// The 'list' property does not change in ingredients_list.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ingredients_list<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Array(3) [ \"eggs\", \"flour\", \"water\" ]</span>\n</code></pre></div>\n<p>As can be seen from the code above, because a deep copy shares no references with its source object, any changes made to the deep copy do not affect the source object.</p>\n<p>However, while the object in the code above is simple enough to be <a href=\"/en-US/docs/Glossary/Serialization\">serializable</a>, many JavaScript objects are not serializable at all — for example, <a href=\"/en-US/docs/Web/JavaScript/Guide/Functions\">functions</a> (with closures), <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbols</a>, objects that represent HTML elements in the <a href=\"/en-US/docs/Web/API/HTML_DOM_API\">HTML DOM API</a>, recursive data, and many other cases. Calling <code>JSON.stringify()</code> to serialize the objects in those cases will fail. So there's no way to make deep copies of such objects.</p>\n<p>For objects that <em>are</em> serializable, you can alternatively use the <a href=\"/en-US/docs/Web/API/structuredClone\"><code>structuredClone()</code></a> method to create deep copies. <code>structuredClone()</code> has the advantage of allowing <a href=\"/en-US/docs/Glossary/Transferable_objects\">transferable objects</a> in the source to be <em>transferred</em> to the new copy, rather than just cloned. But note that <code>structuredClone()</code> isn't a feature of the JavaScript language itself — instead it's a feature of browsers and any other JavaScript runtimes that implement a global object like <a href=\"/en-US/docs/Web/API/Window\"><code>window</code></a>. And calling <code>structuredClone()</code> to clone a non-serializable object will fail in the same way that calling <code>JSON.stringify()</code> to serialize it will fail.</p>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Glossary/Shallow_copy\">Shallow copy</a></li>\n  <li><a href=\"/en-US/docs/Web/API/structuredClone\"><code>window.structuredClone()</code></a></li>\n</ul>"}}],"toc":[{"text":"See also","id":"see_also"}],"summary":"A deep copy of an object is a copy whose properties do not share the same references (point to the same underlying values) as those of the source object from which the copy was made. As a result, when you change either the source or the copy, you can be assured you're not causing the other object to change too; that is, you won't unintentionally be causing changes to the source or copy that you don't expect. That behavior contrasts with the behavior of a shallow copy, in which changes to either the source or the copy may also cause the other object to change too (because the two objects share the same references).","popularity":0.006,"modified":"2022-09-21T02:09:26.000Z","other_translations":[{"title":"Copie profonde","locale":"fr","native":"Français"},{"title":"Deep copy (ディープコピー)","locale":"ja","native":"日本語"}],"source":{"folder":"en-us/glossary/deep_copy","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/glossary/deep_copy/index.md","last_commit_url":"https://github.com/mdn/content/commit/ed947b2c608428b62a60f07d09dc543f732dc09b","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Glossary","title":"MDN Web Docs Glossary: Definitions of Web-related terms"},{"uri":"/en-US/docs/Glossary/Deep_copy","title":"Deep copy"}],"pageTitle":"Deep copy - MDN Web Docs Glossary: Definitions of Web-related terms | MDN","noIndexing":false}}