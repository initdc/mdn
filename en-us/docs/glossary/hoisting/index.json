{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Hoisting","mdn_url":"/en-US/docs/Glossary/Hoisting","locale":"en-US","native":"English (US)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>JavaScript <strong>Hoisting</strong> refers to the process whereby the interpreter appears to move the <em>declaration</em> of functions, variables or classes to the top of their scope, prior to execution of the code.</p>\n<p>Hoisting allows functions to be safely used in code before they are declared.</p>\n<p>\n  Variable and class <em>declarations</em> are also hoisted, so they too can be referenced before they are declared.\n  Note that doing so can lead to unexpected errors, and is not generally recommended.\n</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p>\n    <strong>Note:</strong> The term hoisting is not used in any normative specification prose prior to <a href=\"https://262.ecma-international.org/6.0/\" class=\"external\" rel=\" noopener\">ECMAScriptÂ® 2015 Language Specification</a>.\n    Hoisting was thought up as a general way of thinking about how execution contexts (specifically the creation and execution phases) work in JavaScript.\n  </p>\n</div>"}},{"type":"prose","value":{"id":"function_hoisting","title":"Function hoisting","isH3":false,"content":"<p>One of the advantages of hoisting is that it lets you use a function before you declare it in your code.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">catName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tiger\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">catName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">My cat's name is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*\nThe result of the code above is: \"My cat's name is Tiger\"\n*/</span>\n</code></pre></div>\n<p>Without hoisting you would <em>have</em> to write the same code like this:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">catName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">My cat's name is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">catName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tiger\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\nThe result of the code above is the same: \"My cat's name is Tiger\"\n*/</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"variable_hoisting","title":"Variable hoisting","isH3":false,"content":"<p>Hoisting works with variables too, so you can use a variable in code before it is declared and/or initialized.</p>\n<p>\n  However, JavaScript only hoists declarations, not initializations!\n  This means that initialization doesn't happen until the associated line of code is executed, even if the variable was originally initialized then declared, or declared and initialized in the same line.\n</p>\n<p>Until that point in the execution is reached the variable has its <em>default</em> initialization (<code>undefined</code> for a variable declared using <code>var</code>, otherwise uninitialized).</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> Conceptually variable hoisting is often presented as the interpreter \"splitting variable declaration and initialization, and moving (just) the declarations to the top of the code\".</p>\n</div>\n<p>Below are some examples showing what can happen if you use a variable before it is declared.</p>"}},{"type":"prose","value":{"id":"var_hoisting","title":"<code>var</code> hoisting","isH3":true,"content":"<p>\n  Here we declare and then initialize the value of a <code>var</code> after using it.\n  The default initialization of the <code>var</code> is <code>undefined</code>.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Returns 'undefined' from hoisted var declaration (not 6)</span>\n<span class=\"token keyword\">var</span> num<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Declaration</span>\nnum <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Initialization</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Returns 6 after the line with initialization is executed.</span>\n</code></pre></div>\n<p>The same thing happens if we declare and initialize the variable in the same line.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Returns 'undefined' from hoisted var declaration (not 6)</span>\n<span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Initialization and declaration.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Returns 6 after the line with initialization is executed.</span>\n</code></pre></div>\n<p>\n  If we forget the declaration altogether (and only initialize the value) the variable isn't hoisted.\n  Trying to read the variable before it is initialized results in a <code>ReferenceError</code> exception.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Throws ReferenceError exception - the interpreter doesn't know about `num`.</span>\nnum <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Initialization</span>\n</code></pre></div>\n<p>\n  Note however that initialization also causes declaration (if not already declared).\n  The code snippet below will work, because even though it isn't hoisted, the variable is initialized and effectively declared before it is used.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>a <span class=\"token operator\">=</span> <span class=\"token string\">\"Cran\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Initialize a</span>\nb <span class=\"token operator\">=</span> <span class=\"token string\">\"berry\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Initialize b</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Cranberry'</span>\n</code></pre></div>","titleAsText":"var hoisting"}},{"type":"prose","value":{"id":"let_and_const_hoisting","title":"<code>let</code> and <code>const</code> hoisting","isH3":true,"content":"<p>\n  Variables declared with <code>let</code> and <code>const</code> are also hoisted but, unlike <code>var</code>, are not initialized with a default value.\n  An exception will be thrown if a variable declared with <code>let</code> or <code>const</code> is read before it is initialized.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Throws ReferenceError exception as the variable value is uninitialized</span>\n<span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Initialization</span>\n</code></pre></div>\n<p>\n  Note that it is the order in which code is <em>executed</em> that matters, not the order in which it is written in the source file.\n  The code will succeed provided the line that initializes the variable is executed before any line that reads it.\n</p>\n<p>For information and examples see <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_tdz\"><code>let</code> &gt; temporal dead zone</a>.</p>","titleAsText":"let and const hoisting"}},{"type":"prose","value":{"id":"class_hoisting","title":"<code>class</code> hoisting","isH3":false,"content":"<p>\n  Classes defined using a <a href=\"/en-US/docs/Web/JavaScript/Reference/Classes#class_declarations\">class declaration</a> are hoisted, which means that JavaScript has a reference to the class.\n  However the class is not initialized by default, so any code that uses it before the line in which it is initialized is executed will throw a <code>ReferenceError</code>.\n</p>","titleAsText":"class hoisting"}},{"type":"prose","value":{"id":"function_and_class_expression_hoisting","title":"Function and class expression hoisting","isH3":false,"content":"<p><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/function\">Function expressions</a> and <a href=\"/en-US/docs/Web/JavaScript/Reference/Classes#class_expressions\">class expressions</a> are not hoisted.</p>\n<p>\n  The expressions evaluate to a function or class (respectively). They are typically then assigned to a variable or passed to other functions.\n  In this case, the variable declaration is hoisted and the expression is its initialization.\n  Therefore the expressions are not evaluated until the relevant line is executed.\n</p>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/var\"><code>var</code> statement</a> â MDN</li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/let\"><code>let</code> statement</a> â MDN</li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/const\"><code>const</code> statement</a> â MDN</li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/function\"><code>function</code> statement</a> â MDN</li>\n</ul>"}}],"toc":[{"text":"Function hoisting","id":"function_hoisting"},{"text":"Variable hoisting","id":"variable_hoisting"},{"text":"<code>class</code> hoisting","id":"class_hoisting"},{"text":"Function and class expression hoisting","id":"function_and_class_expression_hoisting"},{"text":"See also","id":"see_also"}],"summary":"JavaScript Hoisting refers to the process whereby the interpreter appears to move the declaration of functions, variables or classes to the top of their scope, prior to execution of the code.","popularity":0.0132,"modified":"2022-09-21T02:09:26.000Z","other_translations":[{"title":"Hoisting","locale":"es","native":"EspaÃ±ol"},{"title":"Hoisting","locale":"fr","native":"FranÃ§ais"},{"title":"Hoisting (å·»ãä¸ãããã¤ã¹ãã£ã³ã°)","locale":"ja","native":"æ¥æ¬èª"},{"title":"í¸ì´ì¤í","locale":"ko","native":"íêµ­ì´"},{"title":"Hoisting","locale":"pt-BR","native":"PortuguÃªs (doÂ Brasil)"},{"title":"ÐÐ¾Ð´Ð½ÑÑÐ¸Ðµ","locale":"ru","native":"Ð ÑÑÑÐºÐ¸Ð¹"},{"title":"Hoistingï¼åéæåï¼","locale":"zh-CN","native":"ä¸­æ (ç®ä½)"},{"title":"æåï¼Hoistingï¼","locale":"zh-TW","native":"æ­£é«ä¸­æ (ç¹é«)"}],"source":{"folder":"en-us/glossary/hoisting","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/glossary/hoisting/index.md","last_commit_url":"https://github.com/mdn/content/commit/ed947b2c608428b62a60f07d09dc543f732dc09b","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Glossary","title":"MDN Web Docs Glossary: Definitions of Web-related terms"},{"uri":"/en-US/docs/Glossary/Hoisting","title":"Hoisting"}],"pageTitle":"Hoisting - MDN Web Docs Glossary: Definitions of Web-related terms | MDN","noIndexing":false}}