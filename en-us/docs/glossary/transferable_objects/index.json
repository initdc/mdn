{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Transferable objects","mdn_url":"/en-US/docs/Glossary/Transferable_objects","locale":"en-US","native":"English (US)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>\n  <strong>Transferable objects</strong> are objects that own resources that can be <em>transferred</em> from one context to another, ensuring that the resources are only available in one context at a time.\n  Following a transfer, the original object is no longer usable; it no longer points to the transferred resource, and any attempt to read or write the object will throw an exception.\n</p>\n<p>\n  <em>Transferable objects</em> are commonly used to share resources that can only be safely exposed to a single JavaScript thread at a time.\n  For example, an <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> is a transferable object that owns a block of memory.\n  When such a buffer is transferred between threads, the associated memory resource is detached from the original buffer and attached to the buffer object created in the new thread.\n  The buffer object in the original thread is no longer usable because it no longer owns a memory resource.\n</p>\n<p>\n  Transferring may also be used when creating deep copies of objects with <a href=\"/en-US/docs/Web/API/structuredClone\"><code>structuredClone()</code></a>.\n  Following the cloning operation, the transferred resources are moved rather than copied to the cloned object.\n</p>\n<p>\n  The mechanism used to transfer an object's resources depends on the object.\n  For example, when an <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> is transferred between threads, the memory resource that it points to is <em>literally</em> moved between contexts in a fast and efficient zero-copy operation.\n  Other objects may be transferred by copying the associated resource and then deleting it from the old context.\n</p>\n<p>\n  Not all objects are transferable.\n  A list of transferable objects is <a href=\"#supported_objects\">provided below</a>.\n</p>"}},{"type":"prose","value":{"id":"transferring_objects_between_threads","title":"Transferring objects between threads","isH3":false,"content":"<p>\n  The code below demonstrates how transferring works when sending a message from a main thread to a <a href=\"/en-US/docs/Web/API/Web_Workers_API\" title=\"web worker thread\">web worker thread</a>.\n  The <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a> is copied (duplicated) in the worker while its buffer is transferred.\n  After transfer any attempt to read or write <code>uInt8Array</code> from the main thread will throw, but you can still check the <code>byteLength</code> to confirm it is now zero.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Create an 8MB \"file\" and fill it. 8MB = 1024 * 1024 * 8 B</span>\n<span class=\"token keyword\">const</span> uInt8Array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>uInt8Array<span class=\"token punctuation\">.</span>byteLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 8388608</span>\n\n<span class=\"token comment\">// Transfer the underlying buffer to a worker</span>\nworker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>uInt8Array<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>uInt8Array<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>uInt8Array<span class=\"token punctuation\">.</span>byteLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect1\">\n  <p>\n    <strong>Note:</strong> <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">Typed arrays</a> like <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a> and <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a>, are <a href=\"/en-US/docs/Glossary/Serializable_object\">serializable</a>, but not transferable.\n    However their underlying buffer is an <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>, which is a transferable object.\n    We could have sent <code>uInt8Array.buffer</code> in the data parameter, but not <code>uInt8Array</code> in the transfer array.\n  </p>\n</div>"}},{"type":"prose","value":{"id":"transferring_during_a_cloning_operation","title":"Transferring during a cloning operation","isH3":true,"content":"<p>The code below shows a <a href=\"/en-US/docs/Web/API/structuredClone\"><code>structuredClone()</code></a> operation where the underlying buffer is copied from the original object to the clone.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> original <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> clone <span class=\"token operator\">=</span> <span class=\"token function\">structuredClone</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">.</span>byteLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1024</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>clone<span class=\"token punctuation\">.</span>byteLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1024</span>\n\noriginal<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>clone<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n\n<span class=\"token comment\">// Transferring the Uint8Array would throw an exception as it is not a transferable object</span>\n<span class=\"token comment\">// const transferred = structuredClone(original, {transfer: [original]});</span>\n\n<span class=\"token comment\">// We can transfer Uint8Array.buffer.</span>\n<span class=\"token keyword\">const</span> transferred <span class=\"token operator\">=</span> <span class=\"token function\">structuredClone</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">transfer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>original<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>transferred<span class=\"token punctuation\">.</span>byteLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1024</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>transferred<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n\n<span class=\"token comment\">// After transferring Uint8Array.buffer cannot be used.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">.</span>byteLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"supported_objects","title":"Supported objects","isH3":false,"content":"<p>The items that various specifications indicate can be <em>transferred</em> are:</p>\n<ul>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a></li>\n  <li><a href=\"/en-US/docs/Web/API/MessagePort\"><code>MessagePort</code></a></li>\n  <li><a href=\"/en-US/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a></li>\n  <li><a href=\"/en-US/docs/Web/API/WritableStream\"><code>WritableStream</code></a></li>\n  <li><a href=\"/en-US/docs/Web/API/TransformStream\"><code>TransformStream</code></a></li>\n  <li><a href=\"/en-US/docs/Web/API/AudioData\"><code>AudioData</code></a></li>\n  <li><a href=\"/en-US/docs/Web/API/ImageBitmap\"><code>ImageBitmap</code></a></li>\n  <li><a href=\"/en-US/docs/Web/API/VideoFrame\"><code>VideoFrame</code></a></li>\n  <li><a href=\"/en-US/docs/Web/API/OffscreenCanvas\"><code>OffscreenCanvas</code></a></li>\n  <li><a href=\"/en-US/docs/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a></li>\n</ul>\n<p>\n  Browser support should be indicated in the respective object's compatibility information by the <code>transferable</code> subfeature (see <a href=\"/en-US/docs/Web/API/RTCDataChannel#browser_compatibility\"><code>RTCDataChannel</code></a> for an example).\n  At time of writing, not all transferable objects have been updated with this information.\n</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> Transferable objects are marked up in <a href=\"https://github.com/w3c/webref/tree/main/ed/idl\" class=\"external\" rel=\" noopener\">Web IDL files</a> with the attribute <code>[Transferable]</code>.</p>\n</div>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"https://developer.chrome.com/blog/transferable-objects-lightning-fast/\" class=\"external\" rel=\" noopener\">Transferable Objects: Lightning Fast!</a></li>\n  <li><a href=\"/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\">Using Web Workers</a></li>\n  <li><a href=\"https://html.spec.whatwg.org/multipage/structured-data.html#transferable-objects\" class=\"external\" rel=\" noopener\">Transferable objects in the HTML specification</a></li>\n  <li><a href=\"/en-US/docs/Web/API/DedicatedWorkerGlobalScope/postMessage\"><code>DedicatedWorkerGlobalScope.postMessage()</code></a></li>\n</ul>"}}],"toc":[{"text":"Transferring objects between threads","id":"transferring_objects_between_threads"},{"text":"Supported objects","id":"supported_objects"},{"text":"See also","id":"see_also"}],"summary":"Transferable objects are objects that own resources that can be transferred from one context to another, ensuring that the resources are only available in one context at a time.\n  Following a transfer, the original object is no longer usable; it no longer points to the transferred resource, and any attempt to read or write the object will throw an exception.","popularity":0.0028,"modified":"2022-09-10T06:36:08.000Z","other_translations":[{"title":"Transferable objects (移譲可能オブジェクト)","locale":"ja","native":"日本語"}],"source":{"folder":"en-us/glossary/transferable_objects","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/glossary/transferable_objects/index.md","last_commit_url":"https://github.com/mdn/content/commit/04e75ce1f83a591a576f52b143f195133bfcbe96","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Glossary","title":"MDN Web Docs Glossary: Definitions of Web-related terms"},{"uri":"/en-US/docs/Glossary/Transferable_objects","title":"Transferable objects"}],"pageTitle":"Transferable objects - MDN Web Docs Glossary: Definitions of Web-related terms | MDN","noIndexing":false}}