{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Base64","mdn_url":"/en-US/docs/Glossary/Base64","locale":"en-US","native":"English (US)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong>Base64</strong> is a group of similar <a href=\"https://en.wikipedia.org/wiki/Binary-to-text_encoding\" class=\"external\" rel=\" noopener\">binary-to-text encoding</a> schemes that represent binary data in an ASCII string format by translating it into a radix-64 representation. The term <em>Base64</em> originates from a specific <a href=\"https://en.wikipedia.org/wiki/MIME#Content-Transfer-Encoding\" class=\"external\" rel=\" noopener\">MIME content transfer encoding</a>.</p>\n<p>Base64 encoding schemes are commonly used when there is a need to encode binary data that needs to be stored and transferred over media that are designed to deal with ASCII. This is to ensure that the data remain intact without modification during transport. Base64 is commonly used in a number of applications including email via <a href=\"https://en.wikipedia.org/wiki/MIME\" class=\"external\" rel=\" noopener\">MIME</a>, and storing complex data in <a href=\"/en-US/docs/Web/XML\">XML</a>.</p>\n<p>One common application of Base64 encoding on the web is to encode binary data so it can be included in a <a href=\"/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs\">data: URL</a>.</p>\n<p>In JavaScript there are two functions respectively for decoding and encoding Base64 strings:</p>\n<ul>\n  <li><a href=\"/en-US/docs/Web/API/btoa\"><code>btoa()</code></a>: creates a Base64-encoded ASCII string from a \"string\" of binary data (\"btoa\" should be read as \"binary to ASCII\").</li>\n  <li><a href=\"/en-US/docs/Web/API/atob\"><code>atob()</code></a>: decodes a Base64-encoded string(\"atob\" should be read as \"ASCII to binary\").</li>\n</ul>\n<p>The algorithm used by <code>atob()</code> and <code>btoa()</code> is specified in <a href=\"https://datatracker.ietf.org/doc/html/rfc4648\" class=\"external\" rel=\" noopener\">RFC 4648</a>, section 4.</p>\n<p>Note that <code>btoa()</code> expects to be passed binary data, and will throw an exception if the given string contains any characters whose UTF-16 representation occupies more than one byte. For more details, see the documentation for <a href=\"/en-US/docs/Web/API/btoa\"><code>btoa()</code></a>.</p>"}},{"type":"prose","value":{"id":"encoded_size_increase","title":"Encoded size increase","isH3":false,"content":"<p>Each Base64 digit represents exactly 6 bits of data. So, three 8-bits bytes of the input string/binary file (3×8 bits = 24 bits) can be represented by four 6-bit Base64 digits (4×6 = 24 bits).</p>\n<p>This means that the Base64 version of a string or file will be at least 133% the size of its source (a ~33% increase). The increase may be larger if the encoded data is small. For example, the string <code>\"a\"</code> with <code>length === 1</code> gets encoded to <code>\"YQ==\"</code> with <code>length === 4</code> — a 300% increase.</p>"}},{"type":"prose","value":{"id":"the_unicode_problem","title":"The \"Unicode Problem\"","isH3":false,"content":"<p>Since JavaScript strings are 16-bit-encoded strings, in most browsers calling <code>window.btoa</code> on a Unicode string will cause a <code>Character Out Of Range</code> exception if a character exceeds the range of a 8-bit ASCII-encoded character. There are two possible methods to solve this problem:</p>\n<ul>\n  <li>the first one is to escape the whole string and then encode it;</li>\n  <li>the second one is to convert the UTF-16 string to an UTF-8 array of characters and then encode it.</li>\n</ul>\n<p>Here are the two possible methods.</p>"}},{"type":"prose","value":{"id":"solution_1_–_escaping_the_string_before_encoding_it","title":"Solution #1 – escaping the string before encoding it","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">utf8_to_b64</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">btoa</span><span class=\"token punctuation\">(</span><span class=\"token function\">unescape</span><span class=\"token punctuation\">(</span><span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">b64_to_utf8</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">decodeURIComponent</span><span class=\"token punctuation\">(</span><span class=\"token function\">escape</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span><span class=\"token function\">atob</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Usage:</span>\n<span class=\"token function\">utf8_to_b64</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"✓ à la mode\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"4pyTIMOgIGxhIG1vZGU=\"</span>\n<span class=\"token function\">b64_to_utf8</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4pyTIMOgIGxhIG1vZGU=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"✓ à la mode\"</span>\n</code></pre></div>\n<p>This solution has been proposed by <a href=\"https://ecmanaut.blogspot.com/2006/07/encoding-decoding-utf8-in-javascript.html\" class=\"external\" rel=\" noopener\">Johan Sundström</a>.</p>\n<p>\n  Another possible solution without utilizing the now deprecated 'unescape' and 'escape' functions.\n  This alternative, though, does not perform base64 encoding of the input string.\n  Note the differences in the outputs of <code>utf8_to_b64</code> and <code>b64EncodeUnicode</code>.\n  Adopting this alternative may lead to interoperability issues with other applications.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">b64EncodeUnicode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">btoa</span><span class=\"token punctuation\">(</span><span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">UnicodeDecodeB64</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">decodeURIComponent</span><span class=\"token punctuation\">(</span><span class=\"token function\">atob</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">b64EncodeUnicode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"✓ à la mode\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"JUUyJTlDJTkzJTIwJUMzJUEwJTIwbGElMjBtb2Rl\"</span>\n<span class=\"token function\">UnicodeDecodeB64</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JUUyJTlDJTkzJTIwJUMzJUEwJTIwbGElMjBtb2Rl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"✓ à la mode\"</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"solution_2_–_rewriting_atob_and_btoa_using_typedarrays_and_utf-8","title":"Solution #2 – rewriting <code>atob()</code> and <code>btoa()</code> using <code>TypedArray</code>s and UTF-8","isH3":true,"content":"<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> The following code is also useful to get an <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a> from a Base64 string and/or vice versa (<a href=\"#appendix_decode_a_base64_string_to_uint8array_or_arraybuffer\">see below</a>).</p>\n</div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Array of bytes to Base64 string decoding</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">b64ToUint6</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nChr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> nChr <span class=\"token operator\">&gt;</span> <span class=\"token number\">64</span> <span class=\"token operator\">&amp;&amp;</span> nChr <span class=\"token operator\">&lt;</span> <span class=\"token number\">91</span>\n    <span class=\"token operator\">?</span> nChr <span class=\"token operator\">-</span> <span class=\"token number\">65</span>\n    <span class=\"token operator\">:</span> nChr <span class=\"token operator\">&gt;</span> <span class=\"token number\">96</span> <span class=\"token operator\">&amp;&amp;</span> nChr <span class=\"token operator\">&lt;</span> <span class=\"token number\">123</span>\n    <span class=\"token operator\">?</span> nChr <span class=\"token operator\">-</span> <span class=\"token number\">71</span>\n    <span class=\"token operator\">:</span> nChr <span class=\"token operator\">&gt;</span> <span class=\"token number\">47</span> <span class=\"token operator\">&amp;&amp;</span> nChr <span class=\"token operator\">&lt;</span> <span class=\"token number\">58</span>\n    <span class=\"token operator\">?</span> nChr <span class=\"token operator\">+</span> <span class=\"token number\">4</span>\n    <span class=\"token operator\">:</span> nChr <span class=\"token operator\">===</span> <span class=\"token number\">43</span>\n    <span class=\"token operator\">?</span> <span class=\"token number\">62</span>\n    <span class=\"token operator\">:</span> nChr <span class=\"token operator\">===</span> <span class=\"token number\">47</span>\n    <span class=\"token operator\">?</span> <span class=\"token number\">63</span>\n    <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">base64DecToArr</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sBase64<span class=\"token punctuation\">,</span> nBlocksSize</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> sB64Enc <span class=\"token operator\">=</span> sBase64<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[^A-Za-z0-9+/]</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> nInLen <span class=\"token operator\">=</span> sB64Enc<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> nOutLen <span class=\"token operator\">=</span> nBlocksSize\n    <span class=\"token operator\">?</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nInLen <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> nBlocksSize<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> nBlocksSize\n    <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>nInLen <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> taBytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>nOutLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> nMod3<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> nMod4<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> nUint24 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> nOutIdx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> nInIdx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> nInIdx <span class=\"token operator\">&lt;</span> nInLen<span class=\"token punctuation\">;</span> nInIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    nMod4 <span class=\"token operator\">=</span> nInIdx <span class=\"token operator\">&amp;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    nUint24 <span class=\"token operator\">|=</span> <span class=\"token function\">b64ToUint6</span><span class=\"token punctuation\">(</span>sB64Enc<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>nInIdx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">6</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">-</span> nMod4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nMod4 <span class=\"token operator\">===</span> <span class=\"token number\">3</span> <span class=\"token operator\">||</span> nInLen <span class=\"token operator\">-</span> nInIdx <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      nMod3 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nMod3 <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span> <span class=\"token operator\">&amp;&amp;</span> nOutIdx <span class=\"token operator\">&lt;</span> nOutLen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        taBytes<span class=\"token punctuation\">[</span>nOutIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>nUint24 <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span> <span class=\"token operator\">&gt;&gt;&gt;</span> nMod3<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n        nMod3<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        nOutIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      nUint24 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> taBytes<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* Base64 string to array encoding */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">uint6ToB64</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nUint6</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> nUint6 <span class=\"token operator\">&lt;</span> <span class=\"token number\">26</span>\n    <span class=\"token operator\">?</span> nUint6 <span class=\"token operator\">+</span> <span class=\"token number\">65</span>\n    <span class=\"token operator\">:</span> nUint6 <span class=\"token operator\">&lt;</span> <span class=\"token number\">52</span>\n    <span class=\"token operator\">?</span> nUint6 <span class=\"token operator\">+</span> <span class=\"token number\">71</span>\n    <span class=\"token operator\">:</span> nUint6 <span class=\"token operator\">&lt;</span> <span class=\"token number\">62</span>\n    <span class=\"token operator\">?</span> nUint6 <span class=\"token operator\">-</span> <span class=\"token number\">4</span>\n    <span class=\"token operator\">:</span> nUint6 <span class=\"token operator\">===</span> <span class=\"token number\">62</span>\n    <span class=\"token operator\">?</span> <span class=\"token number\">43</span>\n    <span class=\"token operator\">:</span> nUint6 <span class=\"token operator\">===</span> <span class=\"token number\">63</span>\n    <span class=\"token operator\">?</span> <span class=\"token number\">47</span>\n    <span class=\"token operator\">:</span> <span class=\"token number\">65</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">base64EncArr</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">aBytes</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> nMod3 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> sB64Enc <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> nLen <span class=\"token operator\">=</span> aBytes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> nUint24 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> nIdx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> nIdx <span class=\"token operator\">&lt;</span> nLen<span class=\"token punctuation\">;</span> nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    nMod3 <span class=\"token operator\">=</span> nIdx <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nIdx <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nIdx <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">76</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      sB64Enc <span class=\"token operator\">+=</span> <span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    nUint24 <span class=\"token operator\">|=</span> aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span> <span class=\"token operator\">&gt;&gt;&gt;</span> nMod3<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nMod3 <span class=\"token operator\">===</span> <span class=\"token number\">2</span> <span class=\"token operator\">||</span> aBytes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> nIdx <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      sB64Enc <span class=\"token operator\">+=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCodePoint</span><span class=\"token punctuation\">(</span>\n        <span class=\"token function\">uint6ToB64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nUint24 <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">uint6ToB64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nUint24 <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">uint6ToB64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nUint24 <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">uint6ToB64</span><span class=\"token punctuation\">(</span>nUint24 <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      nUint24 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    sB64Enc<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sB64Enc<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> nMod3<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n    <span class=\"token punctuation\">(</span>nMod3 <span class=\"token operator\">===</span> <span class=\"token number\">2</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">:</span> nMod3 <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"=\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"==\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* UTF-8 array to JS string and vice versa */</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">UTF8ArrToStr</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">aBytes</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> sView <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> nPart<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> nLen <span class=\"token operator\">=</span> aBytes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> nIdx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> nIdx <span class=\"token operator\">&lt;</span> nLen<span class=\"token punctuation\">;</span> nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    nPart <span class=\"token operator\">=</span> aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    sView <span class=\"token operator\">+=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCodePoint</span><span class=\"token punctuation\">(</span>\n      nPart <span class=\"token operator\">&gt;</span> <span class=\"token number\">251</span> <span class=\"token operator\">&amp;&amp;</span> nPart <span class=\"token operator\">&lt;</span> <span class=\"token number\">254</span> <span class=\"token operator\">&amp;&amp;</span> nIdx <span class=\"token operator\">+</span> <span class=\"token number\">5</span> <span class=\"token operator\">&lt;</span> nLen <span class=\"token comment\">/* six bytes */</span>\n        <span class=\"token operator\">?</span> <span class=\"token comment\">/* (nPart - 252 &lt;&lt; 30) may be not so safe in ECMAScript! So…: */</span>\n          <span class=\"token punctuation\">(</span>nPart <span class=\"token operator\">-</span> <span class=\"token number\">252</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1073741824</span> <span class=\"token operator\">+</span>\n            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>aBytes<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>aBytes<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>aBytes<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>aBytes<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n            aBytes<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span>\n            <span class=\"token number\">128</span>\n        <span class=\"token operator\">:</span> nPart <span class=\"token operator\">&gt;</span> <span class=\"token number\">247</span> <span class=\"token operator\">&amp;&amp;</span> nPart <span class=\"token operator\">&lt;</span> <span class=\"token number\">252</span> <span class=\"token operator\">&amp;&amp;</span> nIdx <span class=\"token operator\">+</span> <span class=\"token number\">4</span> <span class=\"token operator\">&lt;</span> nLen <span class=\"token comment\">/* five bytes */</span>\n        <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nPart <span class=\"token operator\">-</span> <span class=\"token number\">248</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n          <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>aBytes<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n          <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>aBytes<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n          <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>aBytes<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n          aBytes<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span>\n          <span class=\"token number\">128</span>\n        <span class=\"token operator\">:</span> nPart <span class=\"token operator\">&gt;</span> <span class=\"token number\">239</span> <span class=\"token operator\">&amp;&amp;</span> nPart <span class=\"token operator\">&lt;</span> <span class=\"token number\">248</span> <span class=\"token operator\">&amp;&amp;</span> nIdx <span class=\"token operator\">+</span> <span class=\"token number\">3</span> <span class=\"token operator\">&lt;</span> nLen <span class=\"token comment\">/* four bytes */</span>\n        <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nPart <span class=\"token operator\">-</span> <span class=\"token number\">240</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n          <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>aBytes<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n          <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>aBytes<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n          aBytes<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span>\n          <span class=\"token number\">128</span>\n        <span class=\"token operator\">:</span> nPart <span class=\"token operator\">&gt;</span> <span class=\"token number\">223</span> <span class=\"token operator\">&amp;&amp;</span> nPart <span class=\"token operator\">&lt;</span> <span class=\"token number\">240</span> <span class=\"token operator\">&amp;&amp;</span> nIdx <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;</span> nLen <span class=\"token comment\">/* three bytes */</span>\n        <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nPart <span class=\"token operator\">-</span> <span class=\"token number\">224</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n          <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>aBytes<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n          aBytes<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span>\n          <span class=\"token number\">128</span>\n        <span class=\"token operator\">:</span> nPart <span class=\"token operator\">&gt;</span> <span class=\"token number\">191</span> <span class=\"token operator\">&amp;&amp;</span> nPart <span class=\"token operator\">&lt;</span> <span class=\"token number\">224</span> <span class=\"token operator\">&amp;&amp;</span> nIdx <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> nLen <span class=\"token comment\">/* two bytes */</span>\n        <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nPart <span class=\"token operator\">-</span> <span class=\"token number\">192</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> aBytes<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">128</span>\n        <span class=\"token operator\">:</span> <span class=\"token comment\">/* nPart &lt; 127 ? */</span> <span class=\"token comment\">/* one byte */</span>\n          nPart\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> sView<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">strToUTF8Arr</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sDOMStr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> aBytes<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> nChr<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> nStrLen <span class=\"token operator\">=</span> sDOMStr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> nArrLen <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* mapping… */</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> nMapIdx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> nMapIdx <span class=\"token operator\">&lt;</span> nStrLen<span class=\"token punctuation\">;</span> nMapIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    nChr <span class=\"token operator\">=</span> sDOMStr<span class=\"token punctuation\">.</span><span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span>nMapIdx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&gt;</span> <span class=\"token number\">65536</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      nMapIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    nArrLen <span class=\"token operator\">+=</span>\n      nChr <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x80</span>\n        <span class=\"token operator\">?</span> <span class=\"token number\">1</span>\n        <span class=\"token operator\">:</span> nChr <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x800</span>\n        <span class=\"token operator\">?</span> <span class=\"token number\">2</span>\n        <span class=\"token operator\">:</span> nChr <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x10000</span>\n        <span class=\"token operator\">?</span> <span class=\"token number\">3</span>\n        <span class=\"token operator\">:</span> nChr <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x200000</span>\n        <span class=\"token operator\">?</span> <span class=\"token number\">4</span>\n        <span class=\"token operator\">:</span> nChr <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x4000000</span>\n        <span class=\"token operator\">?</span> <span class=\"token number\">5</span>\n        <span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  aBytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>nArrLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* transcription… */</span>\n  <span class=\"token keyword\">let</span> nIdx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> nChrIdx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nIdx <span class=\"token operator\">&lt;</span> nArrLen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    nChr <span class=\"token operator\">=</span> sDOMStr<span class=\"token punctuation\">.</span><span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span>nChrIdx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&lt;</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/* one byte */</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nChr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x800</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/* two bytes */</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">192</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">128</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x10000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/* three bytes */</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">224</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">128</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">128</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x200000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/* four bytes */</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">240</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">128</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">128</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">128</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      nChrIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x4000000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/* five bytes */</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">248</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">128</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">128</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">128</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">128</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      nChrIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token comment\">/* if (nChr &lt;= 0x7fffffff) */</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/* six bytes */</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">252</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">128</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">128</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">128</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">128</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">128</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      nChrIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    nChrIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> aBytes<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","titleAsText":"Solution #2 – rewriting atob() and btoa() using TypedArrays and UTF-8"}},{"type":"prose","value":{"id":"tests","title":"Tests","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/* Tests */</span>\n\n<span class=\"token keyword\">const</span> sMyInput <span class=\"token operator\">=</span> <span class=\"token string\">\"Base 64 \\u2014 Mozilla Developer Network\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> aMyUTF8Input <span class=\"token operator\">=</span> <span class=\"token function\">strToUTF8Arr</span><span class=\"token punctuation\">(</span>sMyInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> sMyBase64 <span class=\"token operator\">=</span> <span class=\"token function\">base64EncArr</span><span class=\"token punctuation\">(</span>aMyUTF8Input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>sMyBase64<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> aMyUTF8Output <span class=\"token operator\">=</span> <span class=\"token function\">base64DecToArr</span><span class=\"token punctuation\">(</span>sMyBase64<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> sMyOutput <span class=\"token operator\">=</span> <span class=\"token function\">UTF8ArrToStr</span><span class=\"token punctuation\">(</span>aMyUTF8Output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>sMyOutput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"appendix_decode_a_base64_string_to_uint8array_or_arraybuffer","title":"Appendix: Decode a Base64 string to Uint8Array or ArrayBuffer","isH3":true,"content":"<p>These function let us to create also <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">uint8Arrays</a> or <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">arrayBuffers</a> from Base64-encoded strings:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// \"Base 64 \\u2014 Mozilla Developer Network\"</span>\n<span class=\"token keyword\">const</span> myArray <span class=\"token operator\">=</span> <span class=\"token function\">base64DecToArr</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"QmFzZSA2NCDigJQgTW96aWxsYSBEZXZlbG9wZXIgTmV0d29yaw==\"</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// \"Base 64 \\u2014 Mozilla Developer Network\"</span>\n<span class=\"token keyword\">const</span> myBuffer <span class=\"token operator\">=</span> <span class=\"token function\">base64DecToArr</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"QmFzZSA2NCDigJQgTW96aWxsYSBEZXZlbG9wZXIgTmV0d29yaw==\"</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>myBuffer<span class=\"token punctuation\">.</span>byteLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p>\n    <strong>Note:</strong> The function <code>base64DecToArr(sBase64[, nBlocksSize])</code> returns\n    an <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>uint8Array</code></a> of bytes.\n    If your aim is to build a buffer of 16-bit / 32-bit / 64-bit raw data,\n    use the <code>nBlocksSize</code> argument,\n    which is the number of bytes of which the <code>uint8Array.buffer.bytesLength</code> property must result a multiple\n    (<code>1</code> or omitted for ASCII, binary strings\n    (i.e., a string in which each character in the string is treated as a byte of binary data)\n    or UTF-8-encoded strings, <code>2</code> for UTF-16 strings, <code>4</code> for UTF-32 strings).\n  </p>\n</div>"}}],"toc":[{"text":"Encoded size increase","id":"encoded_size_increase"},{"text":"The \"Unicode Problem\"","id":"the_unicode_problem"}],"summary":"Base64 is a group of similar binary-to-text encoding schemes that represent binary data in an ASCII string format by translating it into a radix-64 representation. The term Base64 originates from a specific MIME content transfer encoding.","popularity":0.0174,"modified":"2022-09-10T06:36:08.000Z","other_translations":[{"title":"Base64 codificando y decodificando","locale":"es","native":"Español"},{"title":"Décoder et encoder en base64","locale":"fr","native":"Français"},{"title":"Base64","locale":"ja","native":"日本語"},{"title":"Кодирование и декодирование в формате Base64","locale":"ru","native":"Русский"},{"title":"Base64 的编码与解码","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/glossary/base64","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/glossary/base64/index.md","last_commit_url":"https://github.com/mdn/content/commit/04e75ce1f83a591a576f52b143f195133bfcbe96","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Glossary","title":"MDN Web Docs Glossary: Definitions of Web-related terms"},{"uri":"/en-US/docs/Glossary/Base64","title":"Base64"}],"pageTitle":"Base64 - MDN Web Docs Glossary: Definitions of Web-related terms | MDN","noIndexing":false}}