{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Literal","mdn_url":"/en-US/docs/Glossary/Literal","locale":"en-US","native":"English (US)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong>Literals</strong> represent values in JavaScript. These are fixed values—not variables—that you <em>literally</em> provide in your script.</p>\n<ul>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#array_literals\">Array literals</a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#boolean_literals\">Boolean literals</a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#floating-point_literals\">Floating-point literals</a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#numeric_literals\">Numeric literals</a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#object_literals\">Object literals</a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#regexp_literals\">RegExp literals</a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#string_literals\">String literals</a></li>\n</ul>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"string_literals","title":"String literals","isH3":true,"content":"<p>A string literal is zero or more characters enclosed in double (<code>\"</code>) or single quotation marks (<code>'</code>). A string must be delimited by quotation marks of the same type (that is, either both single quotation marks, or both double quotation marks).</p>\n<p>The following are examples of string literals:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">\"one line \\n new line\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">\"John's cat\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"object_literals","title":"Object literals","isH3":true,"content":"<p>An object literal is a list of zero or more pairs of property names and associated values of an object, enclosed in curly braces (<code>{}</code>).</p>\n<p>The following is an example of an object literal. The first element of the <code>car</code> object defines a property, <code>myCar</code>, and assigns to it a new string, \"<code>Toyota</code>\"; the second element, the <code>getCar</code> property, is immediately assigned the result of invoking the function <code>carTypes('Honda')</code>; the third element, the <code>special</code> property, uses an existing variable (<code>sales</code>).</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> sales <span class=\"token operator\">=</span> <span class=\"token string\">\"BMW\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">carTypes</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> name <span class=\"token operator\">===</span> <span class=\"token string\">\"Honda\"</span> <span class=\"token operator\">?</span> name <span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Sorry, we don't sell </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> car <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">myCar</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Toyota\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">getCar</span><span class=\"token operator\">:</span> <span class=\"token function\">carTypes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Honda\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">special</span><span class=\"token operator\">:</span> sales<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span>myCar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Toyota</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span>getCar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Honda</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span>special<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// BMW</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"https://en.wikipedia.org/wiki/Literal_(computer_programming)\" class=\"external\" rel=\" noopener\">Literal</a> on Wikipedia</li>\n</ul>"}}],"toc":[{"text":"Examples","id":"examples"},{"text":"See also","id":"see_also"}],"summary":"Literals represent values in JavaScript. These are fixed values—not variables—that you literally provide in your script.","popularity":0.0005,"modified":"2022-09-21T02:09:26.000Z","other_translations":[{"title":"リテラル","locale":"ja","native":"日本語"}],"source":{"folder":"en-us/glossary/literal","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/glossary/literal/index.md","last_commit_url":"https://github.com/mdn/content/commit/ed947b2c608428b62a60f07d09dc543f732dc09b","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Glossary","title":"MDN Web Docs Glossary: Definitions of Web-related terms"},{"uri":"/en-US/docs/Glossary/Literal","title":"Literal"}],"pageTitle":"Literal - MDN Web Docs Glossary: Definitions of Web-related terms | MDN","noIndexing":false}}