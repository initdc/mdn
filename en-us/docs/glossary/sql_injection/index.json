{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"SQL Injection","mdn_url":"/en-US/docs/Glossary/SQL_Injection","locale":"en-US","native":"English (US)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>SQL injection takes advantage of Web apps that fail to validate user input. Hackers can maliciously pass SQL commands through the Web app for execution by a backend database.</p>\n<p>SQL injection can gain unauthorized access to a database or to retrieve information directly from the database. Many data breaches are due to SQL injection.</p>\n<p><a href=\"https://cdn.acunetix.com/wp_content/uploads/2010/09/sql_inj_xss.gif\" class=\"external\" rel=\" noopener\"><img src=\"/en-US/docs/Glossary/SQL_Injection/sql_inj_xss.gif\" alt=\"Pie chart of most common vulnerabilities: SQL Injection is responsible for 50% of vulnerabilities, Cross Site Scripting is responsible for 42% of vulnerabilities, Source Code Disclosure is responsible for 7% of vulnerabilities.\" width=\"500\" height=\"275\" loading=\"lazy\"></a></p>"}},{"type":"prose","value":{"id":"how_it_works","title":"How It Works","isH3":false,"content":"<p>\n  <img src=\"/en-US/docs/Glossary/SQL_Injection/updates_loginscreen.png\" alt=\"Screenshot of the login form with username and password fields\" width=\"293\" height=\"309\" loading=\"lazy\">\n</p>\n<p>After entering username and password, behind the GUI the SQL queries work as follows:</p>\n<div class=\"code-example\"><pre class=\"brush: sql notranslate\"><code><span class=\"token string\">\"SELECT Count(*) FROM Users WHERE Username=' \"</span> <span class=\"token operator\">+</span> txt<span class=\"token punctuation\">.</span><span class=\"token keyword\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">Text</span><span class=\"token operator\">+</span><span class=\"token string\">\" ' AND Password=' \"</span><span class=\"token operator\">+</span> txt<span class=\"token punctuation\">.</span>Password<span class=\"token punctuation\">.</span><span class=\"token keyword\">Text</span><span class=\"token operator\">+</span><span class=\"token string\">\" ' \"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Now suppose User enters the Username: admin and Password: passwd123, so after clicking on the Log in button, SQL query will run as follows:</p>\n<div class=\"code-example\"><pre class=\"brush: sql notranslate\"><code><span class=\"token string\">\"SELECT Count(*) FROM Users WHERE Username=' admin ' AND Password=' passwd123 ' \"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>If the credentials are correct, then the user is allowed to log in, so it's a very simple (and therefore insecure) mechanism. Hackers use this insecurity to gain unauthorized access.</p>\n<p>Hackers use a simple string called a Magical String, for example:</p>\n<p><strong>Username: <em>admin</em></strong></p>\n<p><strong>Password: <em>anything 'or'1'='1</em></strong></p>\n<p>After clicking on the login button, the SQL query will work as follows:</p>\n<div class=\"code-example\"><pre class=\"brush: sql notranslate\"><code><span class=\"token string\">\"SELECT Count(*) FROM Users WHERE Username=' admin ' AND Password=' anything 'or'1'='1 ' \"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Just take a closer look at the above query's password section.</p>\n<pre class=\"notranslate\">Password=' anything 'or'1'='1 '\n</pre>\n<p>The password is not 'anything', hence password=anything results in FALSE, but '1'='1' is a TRUE statement and hence returns a TRUE value. Finally, due to the OR operator, the value (FALSE OR TRUE) is TRUE, so authentication bypasses successfully. Just due to a simple string (Magical String) the entire database is compromised.</p>"}},{"type":"prose","value":{"id":"how_to_prevent","title":"How To Prevent","isH3":false,"content":"<p>Before executing the queries for the user credentials, make some changes like the following:</p>\n<div class=\"code-example\"><pre class=\"brush: sql notranslate\"><code>$id <span class=\"token operator\">=</span> $_GET<span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> $id <span class=\"token operator\">=</span> Stripslashes<span class=\"token punctuation\">(</span>$id<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> $id <span class=\"token operator\">=</span> mysql_real_escape_String<span class=\"token punctuation\">(</span>$id<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>So due to (1) each single quote (') in the input string is replaced with double quotes (\"), and due to (2) before every (') it adds (/). The revised magical string fails to bypass the authentication, and your database stays secure.</p>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"https://en.wikipedia.org/wiki/SQL_injection\" class=\"external\" rel=\" noopener\">SQL injection</a> on Wikipedia</li>\n  <li><a href=\"https://owasp.org/www-community/attacks/SQL_Injection\" class=\"external\" rel=\" noopener\">Explanation of SQL injection</a> on OWASP (Open Web Application Security Project)</li>\n</ul>"}}],"toc":[{"text":"How It Works","id":"how_it_works"},{"text":"How To Prevent","id":"how_to_prevent"},{"text":"See also","id":"see_also"}],"summary":"SQL injection takes advantage of Web apps that fail to validate user input. Hackers can maliciously pass SQL commands through the Web app for execution by a backend database.","popularity":0.0003,"modified":"2022-09-21T02:09:26.000Z","other_translations":[{"title":"Injection SQL","locale":"fr","native":"Français"},{"title":"SQL Injection (SQLインジェクション)","locale":"ja","native":"日本語"},{"title":"SQL 注入","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"en-us/glossary/sql_injection","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/glossary/sql_injection/index.md","last_commit_url":"https://github.com/mdn/content/commit/ed947b2c608428b62a60f07d09dc543f732dc09b","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Glossary","title":"MDN Web Docs Glossary: Definitions of Web-related terms"},{"uri":"/en-US/docs/Glossary/SQL_Injection","title":"SQL Injection"}],"pageTitle":"SQL Injection - MDN Web Docs Glossary: Definitions of Web-related terms | MDN","noIndexing":false}}