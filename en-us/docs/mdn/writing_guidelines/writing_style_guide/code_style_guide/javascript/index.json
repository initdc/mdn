{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Guidelines for styling JavaScript code examples","mdn_url":"/en-US/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide/JavaScript","locale":"en-US","native":"English (US)","sidebarHTML":"\n  <ol>\n    <li><a href=\"/en-US/docs/MDN/About\">About MDN</a></li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Contributing to MDN</summary>\n            <ol>\n                <li><a href=\"/en-US/docs/MDN/Contribute/Getting_started\">Get started on MDN</a></li>\n                <li><a href=\"/en-US/docs/MDN/Contribute\">Contributing to MDN</a></li>\n                <li><a href=\"/en-US/docs/MDN/Contribute/Howto\">Things you can do</a></li>\n                <li><a href=\"/en-US/docs/MDN/Contribute/Localize\">Localizing MDN</a></li>\n                <li><a href=\"/en-US/docs/MDN/Guidelines\">Guidelines</a></li>\n                <li><a href=\"/en-US/docs/MDN/Structures\">Content structures</a></li>\n             </ol>\n        </details>\n    </li>\n  </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The following guidelines cover writing JavaScript example code for MDN Web Docs. This article is a list of rules for writing concise examples that will be understandable by as many people as possible.</p>"}},{"type":"prose","value":{"id":"general_guidelines_for_javascript_code_examples","title":"General guidelines for JavaScript code examples","isH3":false,"content":"<p>This section explains the general guidelines to keep in mind while writing JavaScript code examples. The later sections will cover more specific details.</p>"}},{"type":"prose","value":{"id":"choosing_a_format","title":"Choosing a format","isH3":true,"content":"<p>Opinions on correct indentation, whitespace, and line lengths have always been controversial. Discussions on these topics are a distraction from creating and maintaining content.</p>\n<p>On MDN Web Docs, we use <a href=\"https://prettier.io/\" class=\"external\" rel=\" noopener\">Prettier</a> as a code formatter to keep the code style consistent (and to avoid off-topic discussions). You can consult our <a href=\"https://github.com/mdn/content/blob/main/.prettierrc.json\" class=\"external\" rel=\" noopener\">configuration file</a> to learn about the current rules, and read the <a href=\"https://prettier.io/docs/en/index.html\" class=\"external\" rel=\" noopener\">Prettier documentation</a>.</p>\n<p>Prettier formats all the code and keeps the style consistent. Nevertheless, there are a few additional rules that you need to follow.</p>"}},{"type":"prose","value":{"id":"using_modern_javascript_features","title":"Using modern JavaScript features","isH3":true,"content":"<p>You can use new features once every major browser — Chrome, Edge, Firefox, and Safari — supports them.</p>"}},{"type":"prose","value":{"id":"spacing_and_indentation","title":"Spacing and indentation","isH3":true,"content":"<p>Mark indentation with <em>2 spaces</em>. Don't use the tab character. The end-of-line character is <code>\\n</code>, the Unix convention. To help you, we have included an <a href=\"https://editorconfig.org/\" class=\"external\" rel=\" noopener\"><code>.editorconfig</code></a> file in the repository. Many editors read its content and use it to configure their behavior.</p>"}},{"type":"prose","value":{"id":"arrays","title":"Arrays","isH3":false,"content":""}},{"type":"prose","value":{"id":"array_creation","title":"Array creation","isH3":true,"content":"<p>For creating arrays, use literals and not constructors.</p>\n<p>Create arrays like this:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">const</span> visitedCities <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Don't do this while creating arrays:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">const</span> visitedCities <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"item_addition","title":"Item addition","isH3":true,"content":"<p>When adding items to an array, use <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\"><code>push()</code></a> and not direct assignment. Consider the following array:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> pets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Add items to the array like this:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code>pets<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Don't add items to the array like this:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code>pets<span class=\"token punctuation\">[</span>pets<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"asynchronous_methods","title":"Asynchronous methods","isH3":false,"content":"<p>Writing asynchronous code improves performance and should be used when possible. In particular, you can use:</p>\n<ul>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promises</a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/async_function\"><code>async</code></a>/<a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/await\"><code>await</code></a></li>\n</ul>\n<p>When both techniques are possible, we prefer using the simpler <code>async</code>/<code>await</code> syntax. Unfortunately, you can't use <code>await</code> at the top level unless you are in an ECMAScript module. CommonJS modules used by Node.js are not ES modules. If your example is intended to be used everywhere, avoid top-level <code>await</code>.</p>"}},{"type":"prose","value":{"id":"comments","title":"Comments","isH3":false,"content":"<p>Comments are critical to writing good code examples. They clarify the intent of the code and help developers understand it. Pay special attention to them.</p>\n<ul>\n  <li>If the purpose or logic of the code isn't obvious, add a comment with your intention, as shown below:\n    <div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Calculate the sum of the four first elements of arr</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  total <span class=\"token operator\">+=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>On the other hand, restating the code in prose is not a good use of comments:\n    <div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// For loop from 1 to 4</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Add value to the total</span>\n  total <span class=\"token operator\">+=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n  </li>\n  <li>Comments are also not necessary when functions have explicit names that describe what they're doing. Write:\n    <div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token function\">closeConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>Don't write:\n    <div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token function\">closeConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Closing the connection</span>\n</code></pre></div>\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"use_single-line_comments","title":"Use single-line comments","isH3":true,"content":"<p>Single-line comments are marked with <code>//</code>, as opposed to block comments enclosed between <code>/* … */</code>.</p>\n<p>In general, use single-line comments to comment code. Writers must mark each line of the comment with <code>//</code>, so that it's easier to notice commented-out code visually. In addition, this convention allows to comment out sections of code using <code>/* … */</code> while debugging.</p>\n<ul>\n  <li>Leave a space between the slashes and the comment. Start with a capital letter, like a sentence, but don't end the comment with a period.\n    <div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token comment\">// This is a well-written single-line comment</span>\n</code></pre></div>\n  </li>\n  <li>If a comment doesn't start immediately after a new indentation level, add an empty line and then add the comment. It will create a code block, making it obvious what the comment refers to. Also, put your comments on separate lines preceding the code they are referring to. This is shown in the following example:\n    <div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">checkout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">goodsPrice<span class=\"token punctuation\">,</span> shipmentPrice<span class=\"token punctuation\">,</span> taxes</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Calculate the total price</span>\n  <span class=\"token keyword\">const</span> total <span class=\"token operator\">=</span> goodsPrice <span class=\"token operator\">+</span> shipmentPrice <span class=\"token operator\">+</span> taxes<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Create and append a new paragraph to the document</span>\n  <span class=\"token keyword\">const</span> para <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  para<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Total price is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>total<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>para<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"output_of_logs","title":"Output of logs","isH3":true,"content":"<ul>\n  <li>In code intended to run in a production environment, you rarely need to comment when you log some data. In code examples, we often use <code>console.log()</code>, <code>console.error()</code>, or similar functions to output important values. To help the reader understand what will happen without running the code, you can put a comment <em>after</em> the function with the log that will be produced. Write:\n    <div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">exampleFunc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fruitBasket</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruitBasket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['banana', 'mango', 'orange']</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>Don't write:\n    <div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">exampleFunc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fruitBasket</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Logs: ['banana', 'mango', 'orange']</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruitBasket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n  </li>\n  <li>In case the line becomes too long, put the comment <em>after</em> the function, like this:\n    <div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">exampleFunc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fruitBasket</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruitBasket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ['banana', 'mango', 'orange', 'apple', 'pear', 'durian', 'lemon']</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"multi-line_comments","title":"Multi-line comments","isH3":true,"content":"<p>Short comments are usually better, so try to keep them in one line of 60–80 characters. If this is not possible, use <code>//</code> at the beginning of each line:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token comment\">// This is an example of a multi-line comment.</span>\n<span class=\"token comment\">// The imaginary function that follows has some unusual</span>\n<span class=\"token comment\">// limitations that I want to call out.</span>\n<span class=\"token comment\">// Limitation 1</span>\n<span class=\"token comment\">// Limitation 2</span>\n</code></pre></div>\n<p>Don't use <code>/* … */</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token comment\">/* This is an example of a multi-line comment.\n  The imaginary function that follows has some unusual\n  limitations that I want to call out.\n  Limitation 1\n  Limitation 2 */</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"use_comments_to_mark_ellipsis","title":"Use comments to mark ellipsis","isH3":true,"content":"<p>Skipping redundant code using ellipses (…) is necessary to keep examples short. Still, writers should do it thoughtfully as developers frequently copy &amp; paste examples into their code, and all of our code samples should be valid JavaScript.</p>\n<p>In JavaScript, you should put the ellipses (<code>…</code>) in a comment. When possible, indicate what action somebody reusing this snippet is expected to add.</p>\n<p>Using a comment for the ellipses (…) is more explicit, preventing errors when a developer copies and pastes a sample code. Write:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">exampleFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Add your code here</span>\n  <span class=\"token comment\">// …</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Don't use ellipses (…) like this:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">exampleFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  …\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"comment_out_parameters","title":"Comment out parameters","isH3":true,"content":"<p>When writing code, you usually omit parameters you don't need. But in some code examples, you want to demonstrate that you didn't use some possible parameters.</p>\n<p>To do so, use <code>/* … */</code> in the parameter list. This is an exception to the rule to only use single-line comments (<code>//</code>).</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>array<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value <span class=\"token comment\">/* , index, array */</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// …</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"functions","title":"Functions","isH3":false,"content":""}},{"type":"prose","value":{"id":"function_names","title":"Function names","isH3":true,"content":"<p>For function names, use camelCase, starting with a lowercase character. Use concise, human-readable, and semantic names where appropriate.</p>\n<p>The following is a correct example of a function name:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Don't use function names like these:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">SayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"function_declarations","title":"Function declarations","isH3":true,"content":"<ul>\n  <li>\n    Where possible, use the function declaration over function expressions to define functions.\n    Here is the recommended way to declare a function:\n    <div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>This is not a good way to define a function:\n    <div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n  <li>\n    When using anonymous functions as a callback (a function passed to another method invocation), if you do not need to access <code>this</code>, use an arrow function to make the code shorter and cleaner.\n    Here is the recommended way:\n    <div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">const</span> array1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> sum <span class=\"token operator\">=</span> array1<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>Instead of this:\n    <div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">const</span> array1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> sum <span class=\"token operator\">=</span> array1<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n  <li>Consider avoiding using arrow function to assign a function to an identifier. In particular, don't use arrow functions for methods. Use function declarations with the keyword <code>function</code>:\n    <div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// …</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>Don't do:\n    <div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">x</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// …</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n  <li>When using arrow functions, use <a href=\"/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#function_body\">implicit return</a> (also known as <em>concise body</em>) when possible:\n    <div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code>arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> e<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>And not:\n    <div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code>arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"loops_and_conditional_statements","title":"Loops and conditional statements","isH3":false,"content":""}},{"type":"prose","value":{"id":"loop_initialization","title":"Loop initialization","isH3":true,"content":"<p>When <a href=\"/en-US/docs/Learn/JavaScript/Building_blocks/Looping_code\">loops</a> are required, choose the appropriate one from <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/for\"><code>for(;;)</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/for...of\"><code>for...of</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/while\"><code>while</code></a>, etc.</p>\n<ul>\n  <li>\n    When iterating through all collection elements, avoid using the classical <code>for (;;)</code> loop; prefer <code>for...of</code> or <code>forEach()</code>. Note that if you are using a collection that is not an <code>Array</code>, you have to check that <code>for...of</code> is actually supported (it requires the variable to be iterable), or that the <code>forEach()</code> method is actually present.\n    Use <code>for...of</code>:\n    <div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">const</span> dogs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Rex\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Lassie\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> dog <span class=\"token keyword\">of</span> dogs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>Or <code>forEach()</code>:\n    <div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">const</span> dogs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Rex\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Lassie\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\ndogs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dog</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>Do not use <code>for (;;)</code> — not only do you have to add an extra index, <code>i</code>, but you also have to track the length of the array. This can be error-prone for beginners.\n    <div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">const</span> dogs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Rex\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Lassie\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> dogs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dogs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n  </li>\n  <li>Make sure that you define the initializer properly by using the <code>const</code> keyword for <code>for...of</code> or <code>let</code> for the other loops. Don't omit it. These are correct examples:\n    <div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">const</span> cats <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Athena\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Luna\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> cat <span class=\"token keyword\">of</span> cats<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>cat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  result <span class=\"token operator\">+=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>The example below does not follow the recommended guidelines for the initialization (it implicitly creates a global variable and will fail in strict mode):\n    <div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">const</span> cats <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Athena\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Luna\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">of</span> cats<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n  </li>\n  <li>When you need to access both the value and the index, you can use <code>.forEach()</code> instead of <code>for (;;)</code>. Write:\n    <div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">const</span> gerbils <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Zoé\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Chloé\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\ngerbils<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">gerbil<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Gerbil #</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>gerbil<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>Do not write:\n    <div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">const</span> gerbils <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Zoé\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Chloé\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> gerbils<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Gerbil #</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>gerbils<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n  </li>\n</ul>\n<div class=\"notecard warning\" id=\"sect1\">\n  <p><strong>Warning:</strong> Never use <code>for...in</code> with arrays and strings.</p>\n</div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> Consider not using a <code>for</code> loop at all. If you are using an <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> (or a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> for some operations), consider using more semantic iteration methods instead, like <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"><code>map()</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every\"><code>every()</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\"><code>findIndex()</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\"><code>find()</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\"><code>includes()</code></a>, and many more.</p>\n</div>"}},{"type":"prose","value":{"id":"control_statements","title":"Control statements","isH3":true,"content":"<p>There is one notable case to keep in mind for the <code>if...else</code> control statements. If the <code>if</code> statement ends with a <code>return</code>, do not add an <code>else</code> statement.</p>\n<p>Continue right after the <code>if</code> statement. Write:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Perform something if test is true</span>\n  <span class=\"token comment\">// …</span>\n  <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Perform something if test is false</span>\n<span class=\"token comment\">// …</span>\n</code></pre></div>\n<p>Do not write:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Perform something if test is true</span>\n  <span class=\"token comment\">// …</span>\n  <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Perform something if test is false</span>\n  <span class=\"token comment\">// …</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"use_braces_with_control_flow_statements_and_loops","title":"Use braces with control flow statements and loops","isH3":true,"content":"<p>While control flow statements like <code>if</code>, <code>for</code>, and <code>while</code> don't require the use of braces when the content is made of one single statement, you should always use braces. Write:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> car <span class=\"token keyword\">of</span> storedCars<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  car<span class=\"token punctuation\">.</span><span class=\"token function\">paint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Don't write:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> car <span class=\"token keyword\">of</span> storedCars<span class=\"token punctuation\">)</span> car<span class=\"token punctuation\">.</span><span class=\"token function\">paint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>This prevent forgetting to add the braces when adding more statements.</p>"}},{"type":"prose","value":{"id":"switch_statements","title":"Switch statements","isH3":true,"content":"<p>Switch statements can be a little tricky.</p>\n<ul>\n  <li>Don't add a <code>break</code> statement after a <code>return</code> statement in a specific case. Instead, write <code>return</code> statements like this:\n    <div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>species<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">\"chicken\"</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> farm<span class=\"token punctuation\">.</span>shed<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">\"horse\"</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> corral<span class=\"token punctuation\">.</span>entry<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>If you add a <code>break</code> statement, it will be unreachable. Do not write:\n    <div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>species<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">\"chicken\"</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> farm<span class=\"token punctuation\">.</span>shed<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">\"horse\"</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> corral<span class=\"token punctuation\">.</span>entry<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n  </li>\n  <li>Use <code>default</code> as the last case, and don't end it with a <code>break</code> statement. If you need to do it differently, add a comment explaining why.</li>\n  <li>Remember that when you declare a local variable for a case, you need to use braces to define a scope:\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">\"Orange\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> slice <span class=\"token operator\">=</span> fruit<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>slice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">\"Apple\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> core <span class=\"token operator\">=</span> fruit<span class=\"token punctuation\">.</span><span class=\"token function\">extractCore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">recycle</span><span class=\"token punctuation\">(</span>core<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"error_handling","title":"Error handling","isH3":true,"content":"<ul>\n  <li>If certain states of your program throw uncaught errors, they will halt execution and potentially reduce the usefulness of the example. You should, therefore, catch errors using a <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\"><code>try...catch</code></a> block, as shown below:\n    <div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n  </li>\n  <li>When you don't need the parameter of the <code>catch</code> statement, omit it:\n    <div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"An error happened!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n  </li>\n</ul>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> Keep in mind that only <em>recoverable</em> errors should be caught and handled. All non-recoverable errors should be let through and bubble up the call stack.</p>\n</div>"}},{"type":"prose","value":{"id":"objects","title":"Objects","isH3":false,"content":""}},{"type":"prose","value":{"id":"object_names","title":"Object names","isH3":true,"content":"<ul>\n  <li>When defining a class, use <em>PascalCase</em> (starting with a capital letter) for the class name and <em>camelCase</em> (starting with a lowercase letter) for the object property and method names.</li>\n  <li>When defining an object instance, either a literal or via a constructor, use <em>camelCase</em>, starting with lower-case character, for the instance name. For example:\n    <div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">const</span> hanSolo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Han Solo\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"male\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> luke <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Luke Skywalker\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">\"male\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"object_creation","title":"Object creation","isH3":true,"content":"<p>For creating general objects (i.e., when classes are not involved), use literals and not constructors.</p>\n<p>For example, do this:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">const</span> object <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Don't create a general object like this:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">const</span> object <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"object_classes","title":"Object classes","isH3":true,"content":"<ul>\n  <li>\n    Use ES class syntax for objects, not old-style constructors.\n    For example, this is the recommended way:\n    <div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> gender</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> gender<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hi! I'm </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n  </li>\n  <li>Use <code>extends</code> for inheritance:\n    <div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Teacher</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// …</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"methods","title":"Methods","isH3":true,"content":"<p>To define methods, use the method definition syntax:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// …</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// …</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Instead of:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">foo</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// …</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">bar</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// …</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"object_properties","title":"Object properties","isH3":true,"content":"<ul>\n  <li>The <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a> method has been deprecated in favor of <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn\"><code>Object.hasOwn()</code></a>.</li>\n  <li>When possible, use the shorthand avoiding the duplication of the property identifier. Write:\n    <div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">createObject</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> age <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>Don't write:\n    <div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">createObject</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> name<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> age <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"operators","title":"Operators","isH3":false,"content":"<p>This section lists our recommendations of which operators to use and when.</p>"}},{"type":"prose","value":{"id":"conditional_operators","title":"Conditional operators","isH3":true,"content":"<p>When you want to store to a variable a literal value depending on a condition, use a <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">conditional (ternary) operator</a> instead of an <code>if...else</code> statement. This rule also applies when returning a value. Write:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> condition <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Do not write:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">let</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  x <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>The conditional operator is helpful when creating strings to log information. In such cases, using a regular <code>if...else</code> statement leads to long blocks of code for a side operation like logging, obfuscating the central point of the example.</p>"}},{"type":"prose","value":{"id":"strict_equality_operator","title":"Strict equality operator","isH3":true,"content":"<p>Prefer the <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality\">strict equality</a> (triple equals) and inequality operators over the loose equality (double equals) and inequality operators.</p>\n<p>Use the strict equality and inequality operators like this:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code>name <span class=\"token operator\">===</span> <span class=\"token string\">\"Chris\"</span><span class=\"token punctuation\">;</span>\nage <span class=\"token operator\">!==</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Don't use the loose equality and inequality operators, as shown below:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code>name <span class=\"token operator\">==</span> <span class=\"token string\">\"Chris\"</span><span class=\"token punctuation\">;</span>\nage <span class=\"token operator\">!=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>If you need to use <code>==</code> or <code>!=</code>, remember that <code>== null</code> is the only acceptable case. As TypeScript will fail on all other cases, we don't want to have them in our example code. Consider adding a comment to explain why you need it.</p>"}},{"type":"prose","value":{"id":"shortcuts_for_boolean_tests","title":"Shortcuts for boolean tests","isH3":true,"content":"<p>Prefer shortcuts for boolean tests. For example, use <code>if (x)</code> and <code>if (!x)</code>, not <code>if (x === true)</code> and <code>if (x === false)</code>, unless different kinds of truthy or falsy values are handled differently.</p>"}},{"type":"prose","value":{"id":"strings","title":"Strings","isH3":false,"content":"<p>String literals can be enclosed within single quotes, as in <code>'A string'</code>, or within double quotes, as in <code>\"A string\"</code>. Don't worry about which one to use; Prettier keeps it consistent.</p>"}},{"type":"prose","value":{"id":"template_literals","title":"Template literals","isH3":true,"content":"<p>For inserting values into strings, use <a href=\"/en-US/docs/Web/JavaScript/Reference/Template_literals\">template literals</a>.</p>\n<ul>\n  <li>Here is an example of the recommended way to use template literals. Their use prevents a lot of spacing errors.\n    <div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Chris\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hi! I'm </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>Don't concatenate strings like this:\n    <div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Chris\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi! I'm\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hi! I'mChris!</span>\n</code></pre></div>\n  </li>\n  <li>Don't overuse template literals. If there are no substitutions, use a normal string literal instead.</li>\n</ul>"}},{"type":"prose","value":{"id":"variables","title":"Variables","isH3":false,"content":""}},{"type":"prose","value":{"id":"variable_names","title":"Variable names","isH3":true,"content":"<p>Good variable names are essential to understanding code.</p>\n<ul>\n  <li>Use short identifiers, and avoid non-common abbreviations. Good variable names are usually between 3 to 10-character long, but as a hint only. For example, <code>accelerometer</code> is more descriptive than abbreviating to <code>acclmtr</code> for the sake of character length.</li>\n  <li>Try to use real-world relevant examples where each variable has clear semantics. Only fall back to placeholder names like <code>foo</code> and <code>bar</code> when the example is simple and contrived.</li>\n  <li>Do not use the <a href=\"https://en.wikipedia.org/wiki/Hungarian_notation\" class=\"external\" rel=\" noopener\">Hungarian notation</a> naming convention. Do not prefix the variable name with its type. For example, write <code>bought = car.buyer !== null</code> rather than <code>bBought = oCar.sBuyer != null</code> or <code>name = \"John Doe\"</code> instead of <code>sName = \"John Doe\"</code>.</li>\n  <li>For collections, avoid adding the type such as list, array, queue in the name. Use the content name in the plural form. For example, for an array of cars, use <code>cars</code> and not <code>carArray</code> or <code>carList</code>. There may be exceptions, like when you want to show the abstract form of a feature without the context of a particular application.</li>\n  <li>For primitive values, use <em>camelCase</em>, starting with a lowercase character. Do not use <code>_</code>. Use concise, human-readable, and semantic names where appropriate. For example, use <code>currencyName</code> rather than <code>currency_name</code>.</li>\n  <li>Avoid using articles and possessives. For example, use <code>car</code> instead of <code>myCar</code> or <code>aCar</code>. There may be exceptions, like when describing a feature in general without a practical context.</li>\n  <li>Use variable names as shown here:\n    <div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">const</span> playerScore <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> speed <span class=\"token operator\">=</span> distance <span class=\"token operator\">/</span> time<span class=\"token punctuation\">;</span>\n</code></pre></div>Don't name variables like this:\n    <div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">const</span> thisIsaveryLONGVariableThatRecordsPlayerscore345654 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> d <span class=\"token operator\">/</span> t<span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n</ul>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>Note:</strong> The only place where it's allowed not to use human-readable, semantic names is where a very commonly recognized convention exists, such as using <code>i</code> and <code>j</code> for loop iterators.</p>\n</div>"}},{"type":"prose","value":{"id":"variable_declarations","title":"Variable declarations","isH3":true,"content":"<p>When declaring variables and constants, use the <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/let\"><code>let</code></a> and <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/const\"><code>const</code></a> keywords, not <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/var\"><code>var</code></a>. The following examples show what's recommended and what's not on MDN Web Docs:</p>\n<ul>\n  <li>If a variable will not be reassigned, prefer <code>const</code>, like so:\n    <div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Chris\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n  <li>If you'll change the value of a variable, use <code>let</code> as shown below:\n    <div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span>\nage<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Happy birthday!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n  <li>The example below uses <code>let</code> where it should be <code>const</code>. The code will work, but we want to avoid this usage in MDN Web Docs code examples.\n    <div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Chris\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n  <li>The example below uses <code>const</code> for a variable that gets reassigned. The reassignment will throw an error.\n    <div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span>\nage<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Happy birthday!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n  <li>The example below uses <code>var</code>, polluting the global scope:\n    <div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Chris\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n  <li>Declare one variable per line, like so:\n    <div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">let</span> var1<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> var2<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> var3 <span class=\"token operator\">=</span> <span class=\"token string\">\"Apapou\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> var4 <span class=\"token operator\">=</span> var3<span class=\"token punctuation\">;</span>\n</code></pre></div>Do not declare multiple variables in one line, separating them with commas or using chain declaration. Avoid declaring variables like this:\n    <div class=\"code-example\"><pre class=\"brush: js-nolint example-bad notranslate\">let var1, var2;\nlet var3 = var4 = \"Apapou\"; // var4 is implicitly created as a global variable; fails in strict mode\n</pre></div>\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"type_coercion","title":"Type coercion","isH3":true,"content":"<p>Avoid implicit type coercions. In particular, avoid <code>+val</code> to force a value to a number and <code>\"\" + val</code> to force it to a string. Use <code>Number()</code> and <code>String()</code>, without <code>new</code>, instead. Write:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  #name<span class=\"token punctuation\">;</span>\n  #birthYear<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> year</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#name <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#birthYear <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Don't write:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  #name<span class=\"token punctuation\">;</span>\n  #birthYear<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> year</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#birthYear <span class=\"token operator\">=</span> <span class=\"token operator\">+</span>year<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"web_apis_to_avoid","title":"Web APIs to avoid","isH3":false,"content":"<p>In addition to these JavaScript language features, we recommend a few guidelines related to Web APIs to keep in mind.</p>"}},{"type":"prose","value":{"id":"avoid_browser_prefixes","title":"Avoid browser prefixes","isH3":true,"content":"<p>If all major browsers (Chrome, Edge, Firefox, and Safari) support a feature, don't prefix the feature. Write:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AudioContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Avoid the added complexity of prefixes. Don't write:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">const</span> AudioContext <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>AudioContext <span class=\"token operator\">||</span> window<span class=\"token punctuation\">.</span>webkitAudioContext<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AudioContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>The same rule applies to CSS prefixes.</p>"}},{"type":"prose","value":{"id":"avoid_deprecated_apis","title":"Avoid deprecated APIs","isH3":true,"content":"<p>When a method, a property, or a whole interface is deprecated, do not use it (outside its documentation). Instead, use the modern API.</p>\n<p>Here is a non-exhaustive list of Web APIs to avoid and what to replace them with:</p>\n<ul>\n  <li>Use <code>fetch()</code> instead of XHR (<code>XMLHttpRequest</code>).</li>\n  <li>Use <code>AudioWorklet</code> instead of <code>ScriptProcessorNode</code>, in the Web Audio API.</li>\n</ul>"}},{"type":"prose","value":{"id":"use_safe_and_reliable_apis","title":"Use safe and reliable APIs","isH3":true,"content":"<ul>\n  <li>\n    Do not use <a href=\"/en-US/docs/Web/API/Element/innerHTML\"><code>Element.innerHTML</code></a> to insert purely textual content into an element; use <a href=\"/en-US/docs/Web/API/Node/textContent\"><code>Node.textContent</code></a> instead. The property <code>innerHTML</code> leads to security problems if a developer doesn't control the parameter. The more we as writers avoid using it, the fewer security flaws are created when a developer copies and pastes our code.\n    The example below demonstrates the use of <code>textContent</code>.\n    <div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello to all you good people\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> para <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npara<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span>\n</code></pre></div>Don't use <code>innerHTML</code> to insert <em>pure text</em> into DOM nodes.\n    <div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello to all you good people\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> para <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npara<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n  <li>The <code>alert()</code> function is unreliable. It doesn't work in live examples on MDN Web Docs that are inside an <a href=\"/en-US/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code></a>. Moreover, it is modal to the whole window, which is annoying. In static code examples, use <code>console.log()</code> or <code>console.error()</code>. In <a href=\"/en-US/docs/MDN/Writing_guidelines/Page_structures/Live_samples\">live examples</a>, avoid <code>console.log()</code> and <code>console.error()</code> because they are not displayed. Use a dedicated UI element.</li>\n</ul>"}},{"type":"prose","value":{"id":"use_the_appropriate_log_method","title":"Use the appropriate log method","isH3":true,"content":"<ul>\n  <li>When logging a message, use <code>console.log()</code>.</li>\n  <li>When logging an error, use <code>console.error()</code>.</li>\n</ul>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<p><a href=\"/en-US/docs/Web/JavaScript/Reference\">JavaScript language reference</a> - browse through our JavaScript reference pages to check out some good, concise, meaningful JavaScript snippets.</p>"}}],"toc":[{"text":"General guidelines for JavaScript code examples","id":"general_guidelines_for_javascript_code_examples"},{"text":"Arrays","id":"arrays"},{"text":"Asynchronous methods","id":"asynchronous_methods"},{"text":"Comments","id":"comments"},{"text":"Functions","id":"functions"},{"text":"Loops and conditional statements","id":"loops_and_conditional_statements"},{"text":"Objects","id":"objects"},{"text":"Operators","id":"operators"},{"text":"Strings","id":"strings"},{"text":"Variables","id":"variables"},{"text":"Web APIs to avoid","id":"web_apis_to_avoid"},{"text":"See also","id":"see_also"}],"summary":"The following guidelines cover writing JavaScript example code for MDN Web Docs. This article is a list of rules for writing concise examples that will be understandable by as many people as possible.","popularity":0.0013,"modified":"2022-09-28T15:51:09.000Z","other_translations":[{"title":"Lignes directrices pour JavaScript","locale":"fr","native":"Français"},{"title":"JavaScript のコード例を整形するためのガイドライン","locale":"ja","native":"日本語"}],"source":{"folder":"en-us/mdn/writing_guidelines/writing_style_guide/code_style_guide/javascript","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/mdn/writing_guidelines/writing_style_guide/code_style_guide/javascript/index.md","last_commit_url":"https://github.com/mdn/content/commit/5431dab904a383ca8dcf73dbd04d24915bae254c","filename":"index.md"},"parents":[{"uri":"/en-US/docs/MDN","title":"The MDN Web Docs project"},{"uri":"/en-US/docs/MDN/Writing_guidelines","title":"Writing guidelines"},{"uri":"/en-US/docs/MDN/Writing_guidelines/Writing_style_guide","title":"Writing style guide"},{"uri":"/en-US/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide","title":"Guidelines for styling code examples"},{"uri":"/en-US/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide/JavaScript","title":"Guidelines for styling JavaScript code examples"}],"pageTitle":"Guidelines for styling JavaScript code examples - The MDN Web Docs project | MDN","noIndexing":false}}