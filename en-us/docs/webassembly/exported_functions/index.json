{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Exported WebAssembly functions","mdn_url":"/en-US/docs/WebAssembly/Exported_functions","locale":"en-US","native":"English (US)","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"open\"><a href=\"/en-US/docs/WebAssembly\"><strong>WebAssembly home page</strong></a>\n  </li><li class=\"toggle\">\n    <details open=\"\">\n      <summary>Tutorials</summary>\n      <ol>\n        <li><a href=\"/en-US/docs/WebAssembly/Concepts\">WebAssembly concepts</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/C_to_wasm\">Compiling from C/C++ to WebAssembly</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/Rust_to_wasm\">Compiling from Rust to WebAssembly</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/Using_the_JavaScript_API\">Using the WebAssembly JavaScript API</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/Understanding_the_text_format\">Understanding WebAssembly text format</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/Text_format_to_wasm\">Converting WebAssembly text format to wasm</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/Loading_and_running\">Loading and running WebAssembly code</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/Caching_modules\">Caching compiled WebAssembly modules</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/Exported_functions\">Exported WebAssembly functions</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Object reference</summary>\n      <ol>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code></a></li>\n      </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Exported WebAssembly functions are how WebAssembly functions are represented in JavaScript. This article describes what they are in a little more detail.</p>"}},{"type":"prose","value":{"id":"exported…_what","title":"Exported… What?","isH3":false,"content":"<p>Exported WebAssembly functions are basically just JavaScript wrappers that represent WebAssembly functions in JavaScript. When you call them, you get some activity in the background to convert the arguments into types that wasm can work with (for example converting JavaScript numbers to Int32), the arguments are passed to the function inside your wasm module, the function is invoked, and the result is converted and passed back to JavaScript.</p>\n<p>You can retrieve exported WebAssembly functions in two ways:</p>\n<ul>\n  <li>By calling <a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Table/get\"><code>Table.prototype.get()</code></a> on an existing table.</li>\n  <li>By accessing a function exported from a wasm module instance via <a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Instance/exports\"><code>Instance.exports</code></a>.</li>\n</ul>\n<p>Either way, you get the same kind of wrapper for the underlying function. From a JavaScript point of view, it's as if every wasm function <em>is</em> a JavaScript function too — but they are encapsulated by the exported wasm function object instance and there are only limited ways to access them.</p>"}},{"type":"prose","value":{"id":"an_example","title":"An example","isH3":false,"content":"<p>Let's look at an example to clear things up (you can find this on GitHub as <a href=\"https://github.com/mdn/webassembly-examples/blob/master/other-examples/table-set.html\" class=\"external\" rel=\" noopener\">table-set.html</a>; see it <a href=\"https://mdn.github.io/webassembly-examples/other-examples/table-set.html\" class=\"external\" rel=\" noopener\">running live also</a>, and check out the wasm <a href=\"https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/table.wat\" class=\"external\" rel=\" noopener\">text representation</a>):</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> otherTable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebAssembly<span class=\"token punctuation\">.</span>Table</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">element</span><span class=\"token operator\">:</span> <span class=\"token string\">\"anyfunc\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">initial</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nWebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"table.wasm\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> tbl <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span>tbl<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tbl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 13</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tbl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 42</span>\n  otherTable<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> tbl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  otherTable<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> tbl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>otherTable<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>otherTable<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Here we create a table (<code>otherTable</code>) from JavaScript using the <a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code></a> constructor, then we load <code>table.wasm</code> into our page using the <a href=\"/en-US/docs/WebAssembly/JavaScript_interface/instantiateStreaming\"><code>WebAssembly.instantiateStreaming()</code></a> method.</p>\n<p>We then get the function exported from the module, retrieve the functions it references via <a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Table/get\"><code>tbl.get()</code></a> and log the result of invoking each one to the console. Next, we use <code>set()</code> to make the <code>otherTable</code> table contain references to the same functions as the <code>tbl</code> table.</p>\n<p>To prove this, we then retrieve these references back from <code>otherTable</code> and print their results to console too, which gives the same results.</p>"}},{"type":"prose","value":{"id":"they_are_real_functions","title":"They are real functions","isH3":false,"content":"<p>In the previous example, the return value of each <a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Table/get\"><code>Table.prototype.get()</code></a> call is an exported WebAssembly function — exactly what we have been talking about.</p>\n<p>It is worth noting that these are real JavaScript functions, in addition to being wrappers for WebAssembly functions. If you load the above example in a <a href=\"/en-US/docs/WebAssembly#browser_compatibility\">WebAssembly-supporting browser</a>, and run the following lines in your console:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> testFunc <span class=\"token operator\">=</span> otherTable<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> testFunc<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>you'll get the result <code>function</code> returned. You can then go on to do pretty much anything to this function that you can do to other <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\">functions</a> in JavaScript — <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>call()</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>bind()</code></a>, etc. <code>testFunc.toString()</code> returns an interesting result:</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">function 0() {\n    [native code]\n}\n</pre></div>\n<p>This gives you more of an idea of its wrapper-type nature.</p>\n<p>Some other particulars to be aware of with exported WebAssembly functions:</p>\n<ul>\n  <li>Their <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length\">length</a> property is the number of declared arguments in the wasm function signature.</li>\n  <li>Their <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\">name</a> property is the <code>toString()</code> result of the function's index in the wasm module.</li>\n  <li>If you try to call an exported wasm function that takes or returns an i64 type value, it currently throws an error because JavaScript currently has no precise way to represent an i64. This may well change in the future though — a new int64 type is being considered for future standards, which could then be used by wasm.</li>\n</ul>"}}],"toc":[{"text":"Exported… What?","id":"exported…_what"},{"text":"An example","id":"an_example"},{"text":"They are real functions","id":"they_are_real_functions"}],"summary":"Exported WebAssembly functions are how WebAssembly functions are represented in JavaScript. This article describes what they are in a little more detail.","popularity":0.0005,"modified":"2022-09-19T05:46:09.000Z","other_translations":[{"title":"Exported WebAssembly functions","locale":"fr","native":"Français"},{"title":"エクスポートされた WebAssembly 関数","locale":"ja","native":"日本語"},{"title":"Exported WebAssembly functions","locale":"ko","native":"한국어"},{"title":"Экспортируемые функции WebAssembly","locale":"ru","native":"Русский"},{"title":"导出的 WebAssembly 函数","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/webassembly/exported_functions","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/webassembly/exported_functions/index.md","last_commit_url":"https://github.com/mdn/content/commit/d606f8dc936dcf766e1540f687eba8dc9dd9ed13","filename":"index.md"},"parents":[{"uri":"/en-US/docs/WebAssembly","title":"WebAssembly"},{"uri":"/en-US/docs/WebAssembly/Exported_functions","title":"Exported WebAssembly functions"}],"pageTitle":"Exported WebAssembly functions - WebAssembly | MDN","noIndexing":false}}