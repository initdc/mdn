{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Compiling an Existing C Module to WebAssembly","mdn_url":"/en-US/docs/WebAssembly/existing_C_to_wasm","locale":"en-US","native":"English (US)","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"open\"><a href=\"/en-US/docs/WebAssembly\"><strong>WebAssembly home page</strong></a>\n  </li><li class=\"toggle\">\n    <details open=\"\">\n      <summary>Tutorials</summary>\n      <ol>\n        <li><a href=\"/en-US/docs/WebAssembly/Concepts\">WebAssembly concepts</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/C_to_wasm\">Compiling from C/C++ to WebAssembly</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/Rust_to_wasm\">Compiling from Rust to WebAssembly</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/Using_the_JavaScript_API\">Using the WebAssembly JavaScript API</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/Understanding_the_text_format\">Understanding WebAssembly text format</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/Text_format_to_wasm\">Converting WebAssembly text format to wasm</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/Loading_and_running\">Loading and running WebAssembly code</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/Caching_modules\">Caching compiled WebAssembly modules</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/Exported_functions\">Exported WebAssembly functions</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Object reference</summary>\n      <ol>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code></a></li>\n      </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>A core use-case for WebAssembly is to take the existing ecosystem of C libraries and allow developers to use them on the web.</p>\n<p>These libraries often rely on C's standard library, an operating system, a file system and other things. Emscripten provides most of these features, although there are some <a href=\"https://emscripten.org/docs/porting/guidelines/api_limitations.html\" class=\"external\" rel=\" noopener\">limitations</a>.</p>\n<p>As an example, let's compile an encoder for WebP to wasm. The source for the WebP codec is written in C and <a href=\"https://github.com/webmproject/libwebp\" class=\"external\" rel=\" noopener\">available on GitHub</a> as well as some extensive <a href=\"https://developers.google.com/speed/webp/docs/api\" class=\"external\" rel=\" noopener\">API documentation</a>. That's a pretty good starting point.</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">git</span> clone https://github.com/webmproject/libwebp\n</code></pre></div>\n<p>To start off simple, expose <code>WebPGetEncoderVersion()</code> from <code>encode.h</code> to JavaScript by writing a C file called <code>webp.c</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: cpp notranslate\"><code><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"emscripten.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"src/webp/encode.h\"</span></span>\n\nEMSCRIPTEN_KEEPALIVE\n<span class=\"token keyword\">int</span> <span class=\"token function\">version</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">WebPGetEncoderVersion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>This is a good simple program to test whether you can get the source code of libwebp to compile, as it doesn't require any parameters or complex data structures to invoke this function.</p>\n<p>To compile this program, you need to tell the compiler where it can find libwebp's header files using the <code>-I</code> flag and also pass it all the C files of libwebp that it needs. A useful strategy is to just give it <strong>all</strong> the C files and rely on the compiler to strip out everything that is unnecessary. It seems to work brilliantly for this library:</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>$ emcc -O3 -s <span class=\"token assign-left variable\">WASM</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> -s <span class=\"token assign-left variable\">EXTRA_EXPORTED_RUNTIME_METHODS</span><span class=\"token operator\">=</span><span class=\"token string\">'[\"cwrap\"]'</span> <span class=\"token punctuation\">\\</span>\n    -I libwebp <span class=\"token punctuation\">\\</span>\n    webp.c <span class=\"token punctuation\">\\</span>\n    libwebp/src/<span class=\"token punctuation\">{</span>dec,dsp,demux,enc,mux,utils<span class=\"token punctuation\">}</span>/*.c\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> This strategy will not work with every C project. Many projects rely on autoconf/automake to generate system-specific code before compilation. Emscripten provides <code>emconfigure</code> and <code>emmake</code> to wrap these commands and inject the appropriate parameters. You can find more in the <a href=\"https://emscripten.org/docs/compiling/Building-Projects.html\" class=\"external\" rel=\" noopener\">Emscripten documentation</a>.</p>\n</div>\n<p>Now you only need some HTML and JavaScript to load your new module:</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./a.out.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  Module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onRuntimeInitialized</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> api <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">version</span><span class=\"token operator\">:</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">cwrap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"version\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">.</span><span class=\"token function\">version</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>And you will see the correct version number in the <a href=\"https://googlechrome.github.io/samples/webassembly/version.html\" class=\"external\" rel=\" noopener\">output</a>:</p>\n<p>\n  <img src=\"/en-US/docs/WebAssembly/existing_C_to_wasm/version.png\" alt=\"Screenshot of the DevTools console showing the correct version number.\" width=\"1024\" height=\"498\" loading=\"lazy\">\n</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> libwebp returns the current version a.b.c as a hexadecimal number 0xabc. For example, v0.6.1 is encoded as 0x000601 = 1537.</p>\n</div>"}},{"type":"prose","value":{"id":"get_an_image_from_javascript_into_wasm","title":"Get an image from JavaScript into Wasm","isH3":true,"content":"<p>Getting the encoder's version number is great, but encoding an actual image would be more impressive. How do we do that?</p>\n<p>The first question you need to answer is: how do I get the image into wasm? Looking at the <a href=\"https://developers.google.com/speed/webp/docs/api#simple_encoding_api\" class=\"external\" rel=\" noopener\">encoding API of libwebp</a>, you'll find that it expects an array of bytes in RGB, RGBA, BGR or BGRA. Luckily, the Canvas API has <a href=\"/en-US/docs/Web/API/CanvasRenderingContext2D/getImageData\"><code>CanvasRenderingContext2D.getImageData</code></a> — that gives you an <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\"><code>Uint8ClampedArray</code></a> containing the image data in RGBA:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">loadImage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">src</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Load image</span>\n  <span class=\"token keyword\">const</span> imgBlob <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resp</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> resp<span class=\"token punctuation\">.</span><span class=\"token function\">blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> img <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">createImageBitmap</span><span class=\"token punctuation\">(</span>imgBlob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Make canvas same size as image</span>\n  <span class=\"token keyword\">const</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"canvas\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  canvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n  canvas<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Draw image onto canvas</span>\n  <span class=\"token keyword\">const</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getImageData</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> img<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> img<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Now it's \"only\" a matter of copying the data from JavaScript into wasm. For that, you need to expose two additional functions — one that allocates memory for the image inside wasm and one that frees it up again:</p>\n<div class=\"code-example\"><pre class=\"brush: cpp notranslate\"><code><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span> <span class=\"token comment\">// required for malloc definition</span></span>\n\nEMSCRIPTEN_KEEPALIVE\n<span class=\"token keyword\">uint8_t</span><span class=\"token operator\">*</span> <span class=\"token function\">create_buffer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>width <span class=\"token operator\">*</span> height <span class=\"token operator\">*</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint8_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nEMSCRIPTEN_KEEPALIVE\n<span class=\"token keyword\">void</span> <span class=\"token function\">destroy_buffer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint8_t</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>The <code>create_buffer()</code> function allocates a buffer for the RGBA image — hence 4 bytes per pixel. The pointer returned by <code>malloc()</code> is the address of the first memory cell of that buffer. When the pointer is returned to JavaScript land, it is treated as just a number. After exposing the function to JavaScript using cwrap, you can use that number to find the start of our buffer and copy the image data:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> api <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">version</span><span class=\"token operator\">:</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">cwrap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"version\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">create_buffer</span><span class=\"token operator\">:</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">cwrap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"create_buffer\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">destroy_buffer</span><span class=\"token operator\">:</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">cwrap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"destroy_buffer\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">encode</span><span class=\"token operator\">:</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">cwrap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"encode\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">free_result</span><span class=\"token operator\">:</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">cwrap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"free_result\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">get_result_pointer</span><span class=\"token operator\">:</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">cwrap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get_result_pointer\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">get_result_size</span><span class=\"token operator\">:</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">cwrap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get_result_size\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> image <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">loadImage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./image.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">create_buffer</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nModule<span class=\"token punctuation\">.</span><span class=\"token constant\">HEAP8</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ... call encoder ...</span>\napi<span class=\"token punctuation\">.</span><span class=\"token function\">destroy_buffer</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"encode_the_image","title":"Encode the Image","isH3":true,"content":"<p>The image is now available in wasm. It is time to call the WebP encoder to do its job. Looking at the <a href=\"https://developers.google.com/speed/webp/docs/api#simple_encoding_api\" class=\"external\" rel=\" noopener\">WebP documentation</a>, you'll find that <code>WebPEncodeRGBA</code> seems like a perfect fit. The function takes a pointer to the input image and its dimensions, as well as a quality option between 0 and 100. It also allocates an output buffer for us that we need to free using <code>WebPFree()</code> once we are done with the WebP image.</p>\n<p>The result of the encoding operation is an output buffer and its length. Because functions in C can't have arrays as return types (unless you allocate memory dynamically), this example resorts to a static global array. This may not be clean C. In fact, it relies on wasm pointers being 32 bits wide. But this is a fair shortcut for keeping things simple:</p>\n<div class=\"code-example\"><pre class=\"brush: cpp notranslate\"><code><span class=\"token keyword\">int</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nEMSCRIPTEN_KEEPALIVE\n<span class=\"token keyword\">void</span> <span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint8_t</span><span class=\"token operator\">*</span> img_in<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> quality<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">uint8_t</span><span class=\"token operator\">*</span> img_out<span class=\"token punctuation\">;</span>\n  size_t size<span class=\"token punctuation\">;</span>\n\n  size <span class=\"token operator\">=</span> <span class=\"token function\">WebPEncodeRGBA</span><span class=\"token punctuation\">(</span>img_in<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> width <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> quality<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>img_out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>img_out<span class=\"token punctuation\">;</span>\n  result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nEMSCRIPTEN_KEEPALIVE\n<span class=\"token keyword\">void</span> <span class=\"token function\">free_result</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint8_t</span><span class=\"token operator\">*</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">WebPFree</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nEMSCRIPTEN_KEEPALIVE\n<span class=\"token keyword\">int</span> <span class=\"token function\">get_result_pointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nEMSCRIPTEN_KEEPALIVE\n<span class=\"token keyword\">int</span> <span class=\"token function\">get_result_size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Now with all of that in place, you can call the encoding function, grab the pointer and image size, put it in a JavaScript buffer of your own, and release all the wasm buffers allocated in the process:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>api<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> resultPointer <span class=\"token operator\">=</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">get_result_pointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> resultSize <span class=\"token operator\">=</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">get_result_size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> resultView <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>\n  Module<span class=\"token punctuation\">.</span><span class=\"token constant\">HEAP8</span><span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">,</span>\n  resultPointer<span class=\"token punctuation\">,</span>\n  resultSize\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>resultView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napi<span class=\"token punctuation\">.</span><span class=\"token function\">free_result</span><span class=\"token punctuation\">(</span>resultPointer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> <code>new Uint8Array(someBuffer)</code> will create a new view onto the same memory chunk, while <code>new Uint8Array(someTypedArray)</code> will copy the data.</p>\n</div>\n<p>Depending on the size of your image, you might run into an error where wasm can't grow the memory enough to accommodate both the input and the output image:</p>\n<p>\n  <img src=\"/en-US/docs/WebAssembly/existing_C_to_wasm/error.png\" alt=\"Screenshot of the DevTools console showing an error.\" width=\"1024\" height=\"132\" loading=\"lazy\">\n</p>\n<p>Luckily, the solution to this problem is in the error message. You just need to add <code>-s ALLOW_MEMORY_GROWTH=1</code> to your compilation command.</p>\n<p>And there you have it. You have compiled a WebP encoder and transcoded a JPEG image to WebP. To prove that it worked, turn your result buffer into a blob and use it on an <code>&lt;img&gt;</code> element:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"image/webp\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> blobURL <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> img <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"img\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nimg<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> blobURL<span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Behold, the glory of a new WebP image.</p>\n<p><a href=\"https://googlechrome.github.io/samples/webassembly/image.html\" class=\"external\" rel=\" noopener\">Demo</a> | <a href=\"https://web.dev/emscripting-a-c-library/\" class=\"external\" rel=\" noopener\">Original Article</a></p>\n<p>\n  <img src=\"/en-US/docs/WebAssembly/existing_C_to_wasm/result.jpg\" alt=\"DevTools network panel and the generated image.\" width=\"1024\" height=\"540\" loading=\"lazy\">\n</p>"}}],"toc":[],"summary":"A core use-case for WebAssembly is to take the existing ecosystem of C libraries and allow developers to use them on the web.","popularity":0.0016,"modified":"2022-09-19T04:57:04.000Z","other_translations":[{"title":"既存の C モジュールから WebAssembly へのコンパイル","locale":"ja","native":"日本語"},{"title":"Compiling an Existing C Module to WebAssembly","locale":"ko","native":"한국어"}],"source":{"folder":"en-us/webassembly/existing_c_to_wasm","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/webassembly/existing_c_to_wasm/index.md","last_commit_url":"https://github.com/mdn/content/commit/e1f571eced916f60ca387ecb562271f6235beb5c","filename":"index.md"},"parents":[{"uri":"/en-US/docs/WebAssembly","title":"WebAssembly"},{"uri":"/en-US/docs/WebAssembly/existing_C_to_wasm","title":"Compiling an Existing C Module to WebAssembly"}],"pageTitle":"Compiling an Existing C Module to WebAssembly - WebAssembly | MDN","noIndexing":false}}