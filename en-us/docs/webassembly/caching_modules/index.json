{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Caching compiled WebAssembly modules","mdn_url":"/en-US/docs/WebAssembly/Caching_modules","locale":"en-US","native":"English (US)","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"open\"><a href=\"/en-US/docs/WebAssembly\"><strong>WebAssembly home page</strong></a>\n  </li><li class=\"toggle\">\n    <details open=\"\">\n      <summary>Tutorials</summary>\n      <ol>\n        <li><a href=\"/en-US/docs/WebAssembly/Concepts\">WebAssembly concepts</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/C_to_wasm\">Compiling from C/C++ to WebAssembly</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/Rust_to_wasm\">Compiling from Rust to WebAssembly</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/Using_the_JavaScript_API\">Using the WebAssembly JavaScript API</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/Understanding_the_text_format\">Understanding WebAssembly text format</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/Text_format_to_wasm\">Converting WebAssembly text format to wasm</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/Loading_and_running\">Loading and running WebAssembly code</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/Caching_modules\">Caching compiled WebAssembly modules</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/Exported_functions\">Exported WebAssembly functions</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Object reference</summary>\n      <ol>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code></a></li>\n      </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard warning\" id=\"sect1\">\n  <p><strong>Warning:</strong> Experimental <a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a> IndexedDB serialization support is being removed from browsers; see <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1469395\" class=\"external\" rel=\" noopener\">bug&nbsp;1469395</a> and <a href=\"https://github.com/WebAssembly/spec/issues/821\" class=\"external\" rel=\" noopener\">this spec issue</a>.</p>\n</div>\n<p>Caching is useful for improving the performance of an app — we can store compiled WebAssembly modules on the client, so they don't have to be downloaded and compiled every time. This article explains the best practices around this.</p>"}},{"type":"prose","value":{"id":"caching_via_indexeddb","title":"Caching via IndexedDB","isH3":false,"content":"<p><a href=\"/en-US/docs/Web/API/IndexedDB_API\">IndexedDB</a> is a transactional database system that allows you to store and retrieve structured data on the client-side. It is ideal for persisting assets locally for the saved state of an application, including text, blobs, and any other type of cloneable object.</p>\n<p>This includes compiled wasm modules (<a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a> JavaScript objects).</p>"}},{"type":"prose","value":{"id":"setting_up_a_caching_library","title":"Setting up a caching library","isH3":false,"content":"<p>Because IndexedDB is a somewhat old-fashioned API, we wanted to provide a library function to speed up writing caching code, and make it work better along with today's more modern APIs.</p>\n<p>In our wasm-utils.js library script, you'll find <code>instantiateCachedURL()</code> — this function fetches the wasm module at <code>url</code> with a version of <code>dbVersion</code>, instantiates it with the given <code>importObject</code>, and returns a promise resolving to the finished wasm Instance. Additionally, it handles creating a database to cache the compiled wasm modules in, attempts to store new modules in the database, and retrieves previously cached modules from the database, saving you from having to download them again.</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> The entire site's wasm cache (not just the given URL) is versioned by the specified <code>dbVersion</code> passed into the function. If the wasm module code is updated, or its URL changes, you will need to update <code>dbVersion</code>. Any subsequent call to <code>instantiateCachedURL()</code> will then clear out the entire cache, allowing you to avoid using out-of-date modules.</p>\n</div>\n<p>The function starts off by defining some necessary constants:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">instantiateCachedURL</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dbVersion<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> importObject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> dbName <span class=\"token operator\">=</span> <span class=\"token string\">'wasm-cache'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> storeName <span class=\"token operator\">=</span> <span class=\"token string\">'wasm-cache'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"setting_up_the_database","title":"Setting up the database","isH3":true,"content":"<p>The first helper function contained inside <code>instantiateCachedURL()</code> — <code>openDatabase()</code> — creates an object store for storing wasm modules, and also handles clearing out the database if the <code>dbVersion</code> is updated; it returns a promise resolving to the new database.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">openDatabase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> indexedDB<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>dbName<span class=\"token punctuation\">,</span> dbVersion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    request<span class=\"token punctuation\">.</span>onerror <span class=\"token operator\">=</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Error opening wasm cache database\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onsuccess</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onupgradeneeded</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>objectStoreNames<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>storeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Clearing out version </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>event<span class=\"token punctuation\">.</span>oldVersion<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> wasm cache</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        db<span class=\"token punctuation\">.</span><span class=\"token function\">deleteObjectStore</span><span class=\"token punctuation\">(</span>storeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Creating version </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>event<span class=\"token punctuation\">.</span>newVersion<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> wasm cache</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      db<span class=\"token punctuation\">.</span><span class=\"token function\">createObjectStore</span><span class=\"token punctuation\">(</span>storeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"looking_up_modules_in_the_database","title":"Looking up modules in the database","isH3":true,"content":"<p>Our next function — <code>lookupInDatabase()</code> — provides a simple promise-based operation for looking up the given <code>url</code> in the object store we created above. It resolves with the stored compiled module, or rejects with an error.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">lookupInDatabase</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">db</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>storeName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">objectStore</span><span class=\"token punctuation\">(</span>storeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    request<span class=\"token punctuation\">.</span>onerror <span class=\"token operator\">=</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Error getting wasm module </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onsuccess</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Module </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> was not found in wasm cache</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"storing_and_instantiating_modules","title":"Storing and instantiating modules","isH3":true,"content":"<p>Next, we define a function <code>storeInDatabase()</code> that fires off an async operation to store a given wasm module in a given database.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">storeInDatabase</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">db<span class=\"token punctuation\">,</span> module</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>storeName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"readwrite\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">objectStore</span><span class=\"token punctuation\">(</span>storeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  request<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Failed to store in wasm cache: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>err<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  request<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onsuccess</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Successfully stored </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> in wasm cache</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"using_our_helper_functions","title":"Using our helper functions","isH3":true,"content":"<p>With all the Promise-based helper functions defined, we can now express the core logic of an IndexedDB cache lookup. We start by trying to open a database, then see if we already have a compiled Module with the key <code>url</code> stored in the given <code>db</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">return</span> <span class=\"token function\">openDatabase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">db</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">lookupInDatabase</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n</code></pre></div>\n<p>If we do, we instantiate it with the given import object:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Found </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> in wasm cache</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiate</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">,</span> importObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre></div>\n<p>If not, we compile it from scratch and then store the compiled Module in the database with a key of URL, for next time we want to use it:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>    <span class=\"token punctuation\">(</span><span class=\"token parameter\">errMsg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>errMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">results</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">storeInDatabase</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">.</span>module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> results<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> It is for this kind of usage that <a href=\"/en-US/docs/WebAssembly/JavaScript_interface/instantiate\"><code>WebAssembly.instantiate()</code></a> returns both a <a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Module\"><code>Module</code></a> and an <a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Instance\"><code>Instance</code></a>: the Module represents the compiled code and can be stored/retrieved in IDB or shared between Workers via <a href=\"/en-US/docs/Web/API/MessagePort/postMessage\"><code>postMessage()</code></a>; the Instance is stateful and contains the callable JavaScript functions, therefore it cannot be stored/shared.</p>\n</div>\n<p>If opening the database failed (for example due to permissions or quota), we fall back to fetching and compiling the module and don't try to store the results (since there is no database to store them into).</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token punctuation\">(</span><span class=\"token parameter\">errMsg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>errMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">results</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> results<span class=\"token punctuation\">.</span>instance\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"caching_a_wasm_module","title":"Caching a wasm module","isH3":false,"content":"<p>With the above library function defined, getting a wasm module instance and using its exported features (while handling caching in the background) is as simple as calling it with the following parameters:</p>\n<ul>\n  <li>A cache version, which — as we explained above — you need to update when any wasm module is updated or moved to a different URL.</li>\n  <li>The URL of the wasm module you want to instantiate.</li>\n  <li>An import object, if required.</li>\n</ul>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> wasmCacheVersion <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">instantiateCachedURL</span><span class=\"token punctuation\">(</span>wasmCacheVersion<span class=\"token punctuation\">,</span> <span class=\"token string\">\"test.wasm\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">instance</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Instance says the answer is: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">answer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Failure to instantiate: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>err<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"browser_support","title":"Browser support","isH3":false,"content":"<p>At the moment, this technique will work in Firefox and Edge, as they both have support for structured cloning of WebAssembly modules.</p>\n<p>Chrome has support implemented behind the <em>WebAssembly structured cloning support</em> flag, but is yet to turn it on by default because of some concerns (<a href=\"https://github.com/WebAssembly/design/issues/972\" class=\"external\" rel=\" noopener\">see this discussion</a>, for example).</p>\n<p>Safari is still yet to implement.</p>"}}],"toc":[{"text":"Caching via IndexedDB","id":"caching_via_indexeddb"},{"text":"Setting up a caching library","id":"setting_up_a_caching_library"},{"text":"Caching a wasm module","id":"caching_a_wasm_module"},{"text":"Browser support","id":"browser_support"}],"summary":"Caching is useful for improving the performance of an app — we can store compiled WebAssembly modules on the client, so they don't have to be downloaded and compiled every time. This article explains the best practices around this.","popularity":0.0003,"modified":"2022-09-19T05:46:09.000Z","other_translations":[{"title":"コンパイルされた WebAssembly モジュールのキャッシュ","locale":"ja","native":"日本語"},{"title":"Caching compiled WebAssembly modules","locale":"ko","native":"한국어"},{"title":"缓存已编译的 WebAssembly 模块","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/webassembly/caching_modules","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/webassembly/caching_modules/index.md","last_commit_url":"https://github.com/mdn/content/commit/d606f8dc936dcf766e1540f687eba8dc9dd9ed13","filename":"index.md"},"parents":[{"uri":"/en-US/docs/WebAssembly","title":"WebAssembly"},{"uri":"/en-US/docs/WebAssembly/Caching_modules","title":"Caching compiled WebAssembly modules"}],"pageTitle":"Caching compiled WebAssembly modules - WebAssembly | MDN","noIndexing":false}}