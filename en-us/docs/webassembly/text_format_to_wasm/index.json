{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Converting WebAssembly text format to wasm","mdn_url":"/en-US/docs/WebAssembly/Text_format_to_wasm","locale":"en-US","native":"English (US)","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"open\"><a href=\"/en-US/docs/WebAssembly\"><strong>WebAssembly home page</strong></a>\n  </li><li class=\"toggle\">\n    <details open=\"\">\n      <summary>Tutorials</summary>\n      <ol>\n        <li><a href=\"/en-US/docs/WebAssembly/Concepts\">WebAssembly concepts</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/C_to_wasm\">Compiling from C/C++ to WebAssembly</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/Rust_to_wasm\">Compiling from Rust to WebAssembly</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/Using_the_JavaScript_API\">Using the WebAssembly JavaScript API</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/Understanding_the_text_format\">Understanding WebAssembly text format</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/Text_format_to_wasm\">Converting WebAssembly text format to wasm</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/Loading_and_running\">Loading and running WebAssembly code</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/Caching_modules\">Caching compiled WebAssembly modules</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/Exported_functions\">Exported WebAssembly functions</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Object reference</summary>\n      <ol>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code></a></li>\n      </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>WebAssembly has an S-expression-based textual representation, an intermediate form designed to be exposed in text editors, browser developer tools, etc. This article explains a little bit about how it works, and how to use available tools to convert text format files to the <code>.wasm</code> assembly format.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> Text format files are usually saved with a <code>.wat</code> extension. Historically, a <code>.wast</code> extension was also used, however that's now used for the scripting language used by the WebAssembly test suite.</p>\n</div>"}},{"type":"prose","value":{"id":"a_first_look_at_the_text_format","title":"A first look at the text format","isH3":false,"content":"<p>Let's look at a simple example of this — the following program imports a function called <code>imported_func</code> from a module called <code>imports</code>, and exports a function called <code>exported_func</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token variable\">$i</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">import</span> <span class=\"token string\">\"imports\"</span> <span class=\"token string\">\"imported_func\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">export</span> <span class=\"token string\">\"exported_func\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">42</span>\n    <span class=\"token keyword\">call</span> <span class=\"token variable\">$i</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>The WebAssembly function <code>exported_func</code> is exported for use in our environment (e.g. the web app in which we are using our WebAssembly module). When it is called, it calls an imported JavaScript function called <code>imported_func</code>, which is run with the value (42) provided as a parameter.</p>"}},{"type":"prose","value":{"id":"converting_the_text_.wat_into_a_binary_.wasm_file","title":"Converting the text .wat into a binary .wasm file","isH3":false,"content":"<p>Let's have a go at converting the above <code>.wat</code> text representation example into <code>.wasm</code> assembly format.</p>\n<ol>\n  <li>To start with, make a copy of the above listing inside a text file; call it <code>simple.wat</code>.</li>\n  <li>We need to assemble this textual representation into the assembly language the browser actually reads before we can use it. To do this, we can use the wabt tool, which includes compilers to convert between WebAssembly's text representation and wasm, and vice versa, plus more besides. Go to <a href=\"https://github.com/webassembly/wabt\" class=\"external\" rel=\" noopener\">https://github.com/webassembly/wabt</a> — follow the instructions on this page to set up the tool.</li>\n  <li>Once you've got the tool built, add the <code>/wabt/out/clang/Debug</code> directory to your system <code>PATH</code>.</li>\n  <li>Next, execute the wat2wasm program, passing it the path to the input file, followed by an <code>-o</code> parameter, followed by the path to the output file:\n    <div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>wat2wasm simple.wat -o simple.wasm\n</code></pre></div>\n  </li>\n</ol>\n<p>This will convert the wasm into a file called <code>simple.wasm</code>, which contains the <code>.wasm</code> assembly code.</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> You can also convert the assembly back into the text representation using the wasm2wat tool; for example <code>wasm2wat simple.wasm -o text.wat</code>.</p>\n</div>"}},{"type":"prose","value":{"id":"viewing_the_assembly_output","title":"Viewing the assembly output","isH3":false,"content":"<p>Because the output file is assembly-based, it can't be viewed in a normal text editor. However, you can view it using the wat2wasm tool's <code>-v</code> option. Try this:</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>wat2wasm simple.wat -v\n</code></pre></div>\n<p>This will give you an output in your terminal in the following way:</p>\n<p>\n  <img src=\"/en-US/docs/WebAssembly/Text_format_to_wasm/assembly-output.png\" alt=\"several strings of binary with textual descriptions beside them. For example: 0000008: 01 ; section code \" width=\"585\" height=\"366\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/WebAssembly/Understanding_the_text_format\">Understanding WebAssembly text format</a> — a detailed explanation of the text format syntax.</li>\n  <li><a href=\"/en-US/docs/WebAssembly/C_to_wasm\">Compiling from C/C++ to WebAssembly</a> — tools like Binaryen/Emscripten both compile your source code to wasm, and create the API code needed to run the module in a JavaScript context. Find out more about how to use them.</li>\n  <li><a href=\"/en-US/docs/WebAssembly/Using_the_JavaScript_API\">Using the WebAssembly JavaScript API</a> — read this if you want to find out more about how the WebAssembly API code works.</li>\n  <li><a href=\"https://webassembly.github.io/spec/core/text/index.html\" class=\"external\" rel=\" noopener\">Text format</a> — more explanation of the text format, on the WebAssembly GitHub repo.</li>\n  <li><a href=\"https://github.com/xtuc/webassemblyjs/tree/master/packages/wast-loader\" class=\"external\" rel=\" noopener\">wast-loader</a> — a loader for webpack that takes care of all of this for you.</li>\n</ul>"}}],"toc":[{"text":"A first look at the text format","id":"a_first_look_at_the_text_format"},{"text":"Converting the text .wat into a binary .wasm file","id":"converting_the_text_.wat_into_a_binary_.wasm_file"},{"text":"Viewing the assembly output","id":"viewing_the_assembly_output"},{"text":"See also","id":"see_also"}],"summary":"WebAssembly has an S-expression-based textual representation, an intermediate form designed to be exposed in text editors, browser developer tools, etc. This article explains a little bit about how it works, and how to use available tools to convert text format files to the .wasm assembly format.","popularity":0.0009,"modified":"2022-09-10T06:49:35.000Z","other_translations":[{"title":"WebAssembly テキスト形式から wasm への変換","locale":"ja","native":"日本語"},{"title":"Converting WebAssembly text format to wasm","locale":"ko","native":"한국어"},{"title":"将 WebAssembly 文本格式转换为 wasm","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/webassembly/text_format_to_wasm","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/webassembly/text_format_to_wasm/index.md","last_commit_url":"https://github.com/mdn/content/commit/c18f91159d438c3f40b6d1f78a6ba7c04d2f1845","filename":"index.md"},"parents":[{"uri":"/en-US/docs/WebAssembly","title":"WebAssembly"},{"uri":"/en-US/docs/WebAssembly/Text_format_to_wasm","title":"Converting WebAssembly text format to wasm"}],"pageTitle":"Converting WebAssembly text format to wasm - WebAssembly | MDN","noIndexing":false}}