{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Delete Author form","mdn_url":"/en-US/docs/Learn/Server-side/Express_Nodejs/forms/Delete_author_form","locale":"en-US","native":"English (US)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>This subarticle shows how to define a page to delete <code>Author</code> objects.</p>\n<p>\n  As discussed in the <a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/forms#form_design\">form design</a> section, our strategy will be to only allow deletion of objects that are not referenced by other objects (in this case that means we won't allow an <code>Author</code> to be deleted if it is referenced by a <code>Book</code>).\n  In terms of implementation this means that the form needs to confirm that there are no associated books before the author is deleted.\n  If there are associated books, it should display them, and state that they must be deleted before the <code>Author</code> object can be deleted.\n</p>"}},{"type":"prose","value":{"id":"controller—get_route","title":"Controller—get route","isH3":false,"content":"<p>Open <strong>/controllers/authorController.js</strong>. Find the exported <code>author_delete_get()</code> controller method and replace it with the following code.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Display Author delete form on GET.</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">author_delete_get</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  async<span class=\"token punctuation\">.</span><span class=\"token function\">parallel</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">author</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Author<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">authors_books</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Book<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> results</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span>author <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// No results.</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/catalog/authors\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// Successful, so render.</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"author_delete\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Delete Author\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> results<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">author_books</span><span class=\"token operator\">:</span> results<span class=\"token punctuation\">.</span>authors_books<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>\n  The controller gets the id of the <code>Author</code> instance to be deleted from the URL parameter (<code>req.params.id</code>).\n  It uses the <code>async.parallel()</code> method to get the author record and all associated books in parallel.\n  When both operations have completed it renders the <strong>author_delete.pug</strong> view, passing variables for the <code>title</code>, <code>author</code>, and <code>author_books</code>.\n</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p>\n    <strong>Note:</strong> If <code>findById()</code> returns no results the author is not in the database.\n    In this case there is nothing to delete, so we immediately render the list of all authors.\n  </p>\n  <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> results</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span>author <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// No results.</span>\n       res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/catalog/authors'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n</div>"}},{"type":"prose","value":{"id":"controller—post_route","title":"Controller—post route","isH3":false,"content":"<p>Find the exported <code>author_delete_post()</code> controller method, and replace it with the following code.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Handle Author delete on POST.</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">author_delete_post</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  async<span class=\"token punctuation\">.</span><span class=\"token function\">parallel</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">author</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Author<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>authorid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">authors_books</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Book<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>authorid <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> results</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// Success</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span>authors_books<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Author has books. Render in same way as for GET route.</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"author_delete\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Delete Author\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> results<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">author_books</span><span class=\"token operator\">:</span> results<span class=\"token punctuation\">.</span>authors_books<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// Author has no books. Delete object and redirect to the list of authors.</span>\n      Author<span class=\"token punctuation\">.</span><span class=\"token function\">findByIdAndRemove</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>authorid<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// Success - go to author list</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/catalog/authors\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>\n  First we validate that an id has been provided (this is sent via the form body parameters, rather than using the version in the URL).\n  Then we get the author and their associated books in the same way as for the <code>GET</code> route.\n  If there are no books then we delete the author object and redirect to the list of all authors.\n  If there are still books then we just re-render the form, passing in the author and list of books to be deleted.\n</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p>\n    <strong>Note:</strong> We could check if the call to <code>findById()</code> returns any result, and if not, immediately render the list of all authors.\n    We've left the code as it is above for brevity (it will still return the list of authors if the id is not found, but this will happen after <code>findByIdAndRemove()</code>).\n  </p>\n</div>"}},{"type":"prose","value":{"id":"view","title":"View","isH3":false,"content":"<p>Create <strong>/views/author_delete.pug</strong> and copy in the text below.</p>\n<div class=\"code-example\"><pre class=\"brush: pug notranslate\">extends layout\n\nblock content\n  h1 #{title}: #{author.name}\n  p= author.lifespan\n\n  if author_books.length\n\n    p #[strong Delete the following books before attempting to delete this author.]\n\n    div(style='margin-left:20px;margin-top:20px')\n\n      h4 Books\n\n      dl\n      each book in author_books\n        dt\n          a(href=book.url) #{book.title}\n        dd #{book.summary}\n\n  else\n    p Do you really want to delete this Author?\n\n    form(method='POST' action='')\n      div.form-group\n        input#authorid.form-control(type='hidden',name='authorid', required='true', value=author._id )\n\n      button.btn.btn-primary(type='submit') Delete\n</pre></div>\n<p>\n  The view extends the layout template, overriding the block named <code>content</code>. At the top it displays the author details.\n  It then includes a conditional statement based on the number of <strong><code>author_books</code></strong> (the <code>if</code> and <code>else</code> clauses).\n</p>\n<ul>\n  <li>If there <em>are</em> books associated with the author then the page lists the books and states that these must be deleted before this <code>Author</code> may be deleted.</li>\n  <li>If there <em>are no</em> books then the page displays a confirmation prompt.</li>\n  <li>If the <strong>Delete</strong> button is clicked then the author id is sent to the server in a <code>POST</code> request and that author's record will be deleted.</li>\n</ul>"}},{"type":"prose","value":{"id":"add_a_delete_control","title":"Add a delete control","isH3":false,"content":"<p>Next we will add a <strong>Delete</strong> control to the <em>Author detail</em> view (the detail page is a good place from which to delete a record).</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p>\n    <strong>Note:</strong> In a full implementation the control would be made visible only to authorized users.\n    However at this point we haven't got an authorization system in place!\n  </p>\n</div>\n<p>Open the <strong>author_detail.pug</strong> view and add the following lines at the bottom.</p>\n<div class=\"code-example\"><pre class=\"brush: pug notranslate\">hr\np\n  a(href=author.url+'/delete') Delete author\n</pre></div>\n<p>The control should now appear as a link, as shown below on the <em>Author detail</em> page.</p>\n<p>\n  <img src=\"/en-US/docs/Learn/Server-side/Express_Nodejs/forms/Delete_author_form/locallibary_express_author_detail_delete.png\" alt=\"The Author details section of the Local library application. The left column has a vertical navigation bar. The right section contains the author details with a heading that has the Author's name followed by the life dates of the author and lists the books written by the author below it. There is a button labelled 'Delete Author' at the bottom.\" width=\"694\" height=\"351\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"what_does_it_look_like","title":"What does it look like?","isH3":false,"content":"<p>\n  Run the application and open your browser to <code>http://localhost:3000/</code>.\n  Then select the <em>All authors</em> link, and then select a particular author. Finally select the <em>Delete author</em> link.\n</p>\n<p>\n  If the author has no books, you'll be presented with a page like this.\n  After pressing delete, the server will delete the author and redirect to the author list.\n</p>\n<p>\n  <img src=\"/en-US/docs/Learn/Server-side/Express_Nodejs/forms/Delete_author_form/locallibary_express_author_delete_nobooks.png\" alt=\"The Delete Author section of the Local library application of an author who does not have any books. The left column has a vertical navigation bar. The right section contains the author's name and life dates. There is the question &quot;Do you really want to delete this author&quot; with a button labeled 'Delete'.\" width=\"813\" height=\"397\" loading=\"lazy\">\n</p>\n<p>\n  If the author does have books, then you'll be presented with a view like the following.\n  You can then delete the books from their detail pages (once that code is implemented!).\n</p>\n<p>\n  <img src=\"/en-US/docs/Learn/Server-side/Express_Nodejs/forms/Delete_author_form/locallibary_express_author_delete_withbooks.png\" alt=\"The Delete Author section of the Local library application of an author who does have books under his name. The section contains the author's name and life dates of the author. There is a statement that reads &quot;Delete the following books before attempting to delete this author&quot; followed by the author's books. The list includes the titles of each book, as links, followed by a brief description in plain text.\" width=\"619\" height=\"337\" loading=\"lazy\">\n</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p>\n    <strong>Note:</strong> The other pages for deleting objects can be implemented in much the same way.\n    We've left that as a challenge.\n  </p>\n</div>"}},{"type":"prose","value":{"id":"next_steps","title":"Next steps","isH3":false,"content":"<ul>\n  <li>Return to <a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/forms\">Express Tutorial Part 6: Working with forms</a>.</li>\n  <li>Proceed to the final subarticle of part 6: <a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/forms/Update_Book_form\">Update Book form</a>.</li>\n</ul>"}}],"toc":[{"text":"Controller—get route","id":"controller—get_route"},{"text":"Controller—post route","id":"controller—post_route"},{"text":"View","id":"view"},{"text":"Add a delete control","id":"add_a_delete_control"},{"text":"What does it look like?","id":"what_does_it_look_like"},{"text":"Next steps","id":"next_steps"}],"summary":"This subarticle shows how to define a page to delete Author objects.","popularity":0.0003,"modified":"2022-09-09T07:06:10.000Z","other_translations":[{"title":"Delete Author form","locale":"ru","native":"Русский"},{"title":"删除作者表单","locale":"zh-CN","native":"中文 (简体)"},{"title":"Delete Author form","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"en-us/learn/server-side/express_nodejs/forms/delete_author_form","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/learn/server-side/express_nodejs/forms/delete_author_form/index.md","last_commit_url":"https://github.com/mdn/content/commit/f4f8e2f18ccf19a0bee59e1fe78753e276b98232","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Learn","title":"Learn web development"},{"uri":"/en-US/docs/Learn/Server-side","title":"Server-side website programming"},{"uri":"/en-US/docs/Learn/Server-side/Express_Nodejs","title":"Express web framework (Node.js/JavaScript)"},{"uri":"/en-US/docs/Learn/Server-side/Express_Nodejs/forms","title":"Express Tutorial Part 6: Working with forms"},{"uri":"/en-US/docs/Learn/Server-side/Express_Nodejs/forms/Delete_author_form","title":"Delete Author form"}],"pageTitle":"Delete Author form - Learn web development | MDN","noIndexing":false}}