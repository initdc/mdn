{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Cómo crear widgets de formularios personalizados","mdn_url":"/es/docs/Learn/Forms/How_to_build_custom_form_controls","locale":"es","native":"Español","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"\"><a href=\"/es/docs/Learn/Getting_started_with_the_web\"><strong>Complete beginners start here!</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>Getting started with the Web</summary>\n          <ol>\n            <li><a href=\"/es/docs/Learn/Getting_started_with_the_web\">Getting started with the Web overview</a></li>\n            <li><a href=\"/es/docs/Learn/Getting_started_with_the_web/Installing_basic_software\">Installing basic software</a></li>\n            <li><a href=\"/es/docs/Learn/Getting_started_with_the_web/What_will_your_website_look_like\">What will your website look like?</a></li>\n            <li><a href=\"/es/docs/Learn/Getting_started_with_the_web/Dealing_with_files\">Dealing with files</a></li>\n            <li><a href=\"/es/docs/Learn/Getting_started_with_the_web/HTML_basics\">HTML basics</a></li>\n            <li><a href=\"/es/docs/Learn/Getting_started_with_the_web/CSS_basics\">CSS basics</a></li>\n            <li><a href=\"/es/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">JavaScript basics</a></li>\n            <li><a href=\"/es/docs/Learn/Getting_started_with_the_web/Publishing_your_website\">Publishing your website</a></li>\n            <li><a href=\"/es/docs/Learn/Getting_started_with_the_web/How_the_Web_works\">How the Web works</a></li>\n          </ol>\n      </details>\n  </li>\n  <li data-default-state=\"\"><a href=\"/es/docs/Learn/HTML\"><strong>HTML — Structuring the Web</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>Introduction to HTML</summary>\n          <ol>\n            <li><a href=\"/es/docs/Learn/HTML/Introduction_to_HTML\">Introduction to HTML overview</a></li>\n            <li><a href=\"/es/docs/Learn/HTML/Introduction_to_HTML/Getting_started\">Getting started with HTML</a></li>\n            <li><a href=\"/es/docs/Learn/HTML/Introduction_to_HTML/The_head_metadata_in_HTML\">What's in the head? Metadata in HTML</a></li>\n            <li><a href=\"/es/docs/Learn/HTML/Introduction_to_HTML/HTML_text_fundamentals\">HTML text fundamentals</a></li>\n            <li><a href=\"/es/docs/Learn/HTML/Introduction_to_HTML/Creating_hyperlinks\">Creating hyperlinks</a></li>\n            <li><a href=\"/es/docs/Learn/HTML/Introduction_to_HTML/Advanced_text_formatting\">Advanced text formatting</a></li>\n            <li><a href=\"/es/docs/Learn/HTML/Introduction_to_HTML/Document_and_website_structure\">Document and website structure</a></li>\n            <li><a href=\"/es/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML\">Debugging HTML</a></li>\n            <li><a href=\"/es/docs/Learn/HTML/Introduction_to_HTML/Marking_up_a_letter\">Assessment: Marking up a letter</a></li>\n            <li><a href=\"/es/docs/Learn/HTML/Introduction_to_HTML/Structuring_a_page_of_content\">Assessment: Structuring a page of content</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>Multimedia and embedding</summary>\n          <ol>\n            <li><a href=\"/es/docs/Learn/HTML/Multimedia_and_embedding\">Multimedia and embedding overview</a></li>\n            <li><a href=\"/es/docs/Learn/HTML/Multimedia_and_embedding/Images_in_HTML\">Images in HTML</a></li>\n            <li><a href=\"/es/docs/Learn/HTML/Multimedia_and_embedding/Video_and_audio_content\">Video and audio content</a></li>\n            <li><a href=\"/es/docs/Learn/HTML/Multimedia_and_embedding/Other_embedding_technologies\">From object to iframe — other embedding technologies</a></li>\n            <li><a href=\"/es/docs/Learn/HTML/Multimedia_and_embedding/Adding_vector_graphics_to_the_Web\">Adding vector graphics to the Web</a></li>\n            <li><a href=\"/es/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images\">Responsive images</a></li>\n            <li><a href=\"/es/docs/Learn/HTML/Multimedia_and_embedding/Mozilla_splash_page\">Assessment: Mozilla splash page</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>HTML tables</summary>\n          <ol>\n            <li><a href=\"/es/docs/Learn/HTML/Tables\">HTML tables overview</a></li>\n            <li><a href=\"/es/docs/Learn/HTML/Tables/Basics\">HTML table basics</a></li>\n            <li><a href=\"/es/docs/Learn/HTML/Tables/Advanced\">HTML Table advanced features and accessibility</a></li>\n            <li><a href=\"/es/docs/Learn/HTML/Tables/Structuring_planet_data\">Assessment: Structuring planet data</a></li>\n          </ol>\n      </details>\n  </li>\n  <li data-default-state=\"\"><a href=\"/es/docs/Learn/CSS\"><strong>CSS — Styling the Web</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>CSS first steps</summary>\n          <ol>\n            <li><a href=\"/es/docs/Learn/CSS/First_steps\">CSS first steps overview</a></li>\n            <li><a href=\"/es/docs/Learn/CSS/First_steps/What_is_CSS\">What is CSS?</a></li>\n            <li><a href=\"/es/docs/Learn/CSS/First_steps/Getting_started\">Getting started with CSS</a></li>\n            <li><a href=\"/es/docs/Learn/CSS/First_steps/How_CSS_is_structured\">How CSS is structured</a></li>\n            <li><a href=\"/es/docs/Learn/CSS/First_steps/How_CSS_works\">How CSS works</a></li>\n            <li><a href=\"/es/docs/Learn/CSS/First_steps/Using_your_new_knowledge\">Using your new knowledge</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>CSS building blocks</summary>\n          <ol>\n            <li><a href=\"/es/docs/Learn/CSS/Building_blocks\">CSS building blocks overview</a></li>\n            <li><a href=\"/es/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance\">Cascade and inheritance</a></li>\n            <li><a href=\"/es/docs/Learn/CSS/Building_blocks/Selectors\">CSS selectors</a></li>\n            <li><a href=\"/es/docs/Learn/CSS/Building_blocks/The_box_model\">The box model</a></li>\n            <li><a href=\"/es/docs/Learn/CSS/Building_blocks/Backgrounds_and_borders\">Backgrounds and borders</a></li>\n            <li><a href=\"/es/docs/Learn/CSS/Building_blocks/Handling_different_text_directions\">Handling different text directions</a></li>\n            <li><a href=\"/es/docs/Learn/CSS/Building_blocks/Overflowing_content\">Overflowing content</a></li>\n            <li><a href=\"/es/docs/Learn/CSS/Building_blocks/Values_and_units\">Values and units</a></li>\n            <li><a href=\"/es/docs/Learn/CSS/Building_blocks/Sizing_items_in_CSS\">Sizing items in CSS</a></li>\n            <li><a href=\"/es/docs/Learn/CSS/Building_blocks/Images_media_form_elements\">Images, media, and form elements</a></li>\n            <li><a href=\"/es/docs/Learn/CSS/Building_blocks/Styling_tables\">Styling tables</a></li>\n            <li><a href=\"/es/docs/Learn/CSS/Building_blocks/Debugging_CSS\">Debugging CSS</a></li>\n            <li><a href=\"/es/docs/Learn/CSS/Building_blocks/Organizing\">Organizing your CSS</a></li>\n      </ol></details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>Styling text</summary>\n          <ol>\n            <li><a href=\"/es/docs/Learn/CSS/Styling_text\">Styling text overview</a></li>\n            <li><a href=\"/es/docs/Learn/CSS/Styling_text/Fundamentals\">Fundamental text and font styling</a></li>\n            <li><a href=\"/es/docs/Learn/CSS/Styling_text/Styling_lists\">Styling lists</a></li>\n            <li><a href=\"/es/docs/Learn/CSS/Styling_text/Styling_links\">Styling links</a></li>\n            <li><a href=\"/es/docs/Learn/CSS/Styling_text/Web_fonts\">Web fonts</a></li>\n            <li><a href=\"/es/docs/Learn/CSS/Styling_text/Typesetting_a_homepage\">Assessment: Typesetting a community school homepage</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>CSS layout</summary>\n          <ol>\n            <li><a href=\"/es/docs/Learn/CSS/CSS_layout\">CSS layout overview</a></li>\n            <li><a href=\"/es/docs/Learn/CSS/CSS_layout/Introduction\">Introduction to CSS layout</a></li>\n            <li><a href=\"/es/docs/Learn/CSS/CSS_layout/Normal_Flow\">Normal Flow</a></li>\n            <li><a href=\"/es/docs/Learn/CSS/CSS_layout/Flexbox\">Flexbox</a></li>\n            <li><a href=\"/es/docs/Learn/CSS/CSS_layout/Grids\">Grids</a></li>\n            <li><a href=\"/es/docs/Learn/CSS/CSS_layout/Floats\">Floats</a></li>\n            <li><a href=\"/es/docs/Learn/CSS/CSS_layout/Positioning\">Positioning</a></li>\n            <li><a href=\"/es/docs/Learn/CSS/CSS_layout/Multiple-column_Layout\">Multiple-column Layout</a></li>\n            <li><a href=\"/es/docs/Learn/CSS/CSS_layout/Responsive_Design\">Responsive design</a></li>\n            <li><a href=\"/es/docs/Learn/CSS/CSS_layout/Media_queries\">Beginner's guide to media queries</a></li>\n            <li><a href=\"/es/docs/Learn/CSS/CSS_layout/Legacy_Layout_Methods\">Legacy Layout Methods</a></li>\n            <li><a href=\"/es/docs/Learn/CSS/CSS_layout/Supporting_Older_Browsers\">Supporting Older Browsers</a></li>\n            <li><a href=\"/es/docs/Learn/CSS/CSS_layout/Fundamental_Layout_Comprehension\">Fundamental Layout Comprehension</a></li>\n          </ol>\n      </details>\n  </li>\n  <li data-default-state=\"\"><a href=\"/es/docs/Learn/JavaScript\"><strong>JavaScript — Dynamic client-side scripting</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>JavaScript first steps</summary>\n          <ol>\n            <li><a href=\"/es/docs/Learn/JavaScript/First_steps\">JavaScript first steps overview</a></li>\n            <li><a href=\"/es/docs/Learn/JavaScript/First_steps/What_is_JavaScript\">What is JavaScript?</a></li>\n            <li><a href=\"/es/docs/Learn/JavaScript/First_steps/A_first_splash\">A first splash into JavaScript</a></li>\n            <li><a href=\"/es/docs/Learn/JavaScript/First_steps/What_went_wrong\">What went wrong? Troubleshooting JavaScript</a></li>\n            <li><a href=\"/es/docs/Learn/JavaScript/First_steps/Variables\">Storing the information you need — Variables</a></li>\n            <li><a href=\"/es/docs/Learn/JavaScript/First_steps/Math\">Basic math in JavaScript — Numbers and operators</a></li>\n            <li><a href=\"/es/docs/Learn/JavaScript/First_steps/Strings\">Handling text — Strings in JavaScript</a></li>\n            <li><a href=\"/es/docs/Learn/JavaScript/First_steps/Useful_string_methods\">Useful string methods</a></li>\n            <li><a href=\"/es/docs/Learn/JavaScript/First_steps/Arrays\">Arrays</a></li>\n            <li><a href=\"/es/docs/Learn/JavaScript/First_steps/Silly_story_generator\">Assessment: Silly story generator</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>JavaScript building blocks</summary>\n          <ol>\n            <li><a href=\"/es/docs/Learn/JavaScript/Building_blocks\">JavaScript building blocks overview</a></li>\n            <li><a href=\"/es/docs/Learn/JavaScript/Building_blocks/conditionals\">Making decisions in your code — Conditionals</a></li>\n            <li><a href=\"/es/docs/Learn/JavaScript/Building_blocks/Looping_code\">Looping code</a></li>\n            <li><a href=\"/es/docs/Learn/JavaScript/Building_blocks/Functions\">Functions — Reusable blocks of code</a></li>\n            <li><a href=\"/es/docs/Learn/JavaScript/Building_blocks/Build_your_own_function\">Build your own function</a></li>\n            <li><a href=\"/es/docs/Learn/JavaScript/Building_blocks/Return_values\">Function return values</a></li>\n            <li><a href=\"/es/docs/Learn/JavaScript/Building_blocks/Events\">Introduction to events</a></li>\n            <li><a href=\"/es/docs/Learn/JavaScript/Building_blocks/Image_gallery\">Assessment: Image gallery</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>Introducing JavaScript objects</summary>\n          <ol>\n            <li><a href=\"/es/docs/Learn/JavaScript/Objects\">Introducing JavaScript objects overview</a></li>\n            <li><a href=\"/es/docs/Learn/JavaScript/Objects/Basics\">Object basics</a></li>\n            <li><a href=\"/es/docs/Learn/JavaScript/Objects/Object_prototypes\">Object prototypes</a></li>\n            <li><a href=\"/es/docs/Learn/JavaScript/Objects/Object-oriented_programming\">Object-oriented programming concepts</a></li>\n            <li><a href=\"/es/docs/Learn/JavaScript/Objects/Classes_in_JavaScript\">Classes in JavaScript</a></li>\n            <li><a href=\"/es/docs/Learn/JavaScript/Objects/JSON\">Working with JSON data</a></li>\n            <li><a href=\"/es/docs/Learn/JavaScript/Objects/Object_building_practice\">Object building practice</a></li>\n            <li><a href=\"/es/docs/Learn/JavaScript/Objects/Adding_bouncing_balls_features\">Assessment: Adding features to our bouncing balls demo</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Asynchronous JavaScript</summary>\n        <ol>\n          <li><a href=\"/es/docs/Learn/JavaScript/Asynchronous\">Asynchronous JavaScript overview</a></li>\n          <li><a href=\"/es/docs/Learn/JavaScript/Asynchronous/Concepts\">General asynchronous programming concepts</a></li>\n          <li><a href=\"/es/docs/Learn/JavaScript/Asynchronous/Introducing\">Introducing asynchronous JavaScript</a></li>\n          <li><a href=\"/es/docs/Learn/JavaScript/Asynchronous/Timeouts_and_intervals\">Cooperative asynchronous Java​Script: Timeouts and intervals</a></li>\n          <li><a href=\"/es/docs/Learn/JavaScript/Asynchronous/Promises\">Graceful asynchronous programming with Promises</a></li>\n          <li><a href=\"/es/docs/Learn/JavaScript/Asynchronous/Async_await\">Making asynchronous programming easier with async and await</a></li>\n          <li><a href=\"/es/docs/Learn/JavaScript/Asynchronous/Choosing_the_right_approach\">Choosing the right approach</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Client-side web APIs</summary>\n        <ol>\n          <li><a href=\"/es/docs/Learn/JavaScript/Client-side_web_APIs\">Client-side web APIs</a></li>\n          <li><a href=\"/es/docs/Learn/JavaScript/Client-side_web_APIs/Introduction\">Introduction to web APIs</a></li>\n          <li><a href=\"/es/docs/Learn/JavaScript/Client-side_web_APIs/Manipulating_documents\">Manipulating documents</a></li>\n          <li><a href=\"/es/docs/Learn/JavaScript/Client-side_web_APIs/Fetching_data\">Fetching data from the server</a></li>\n          <li><a href=\"/es/docs/Learn/JavaScript/Client-side_web_APIs/Third_party_APIs\">Third party APIs</a></li>\n          <li><a href=\"/es/docs/Learn/JavaScript/Client-side_web_APIs/Drawing_graphics\">Drawing graphics</a></li>\n          <li><a href=\"/es/docs/Learn/JavaScript/Client-side_web_APIs/Video_and_audio_APIs\">Video and audio APIs</a></li>\n          <li><a href=\"/es/docs/Learn/JavaScript/Client-side_web_APIs/Client-side_storage\">Client-side storage</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"/es/docs/Learn/Forms\"><strong>Web forms — Working with user data</strong></a></li>\n  <li class=\"toggle\">\n    <details open=\"\">\n        <summary>Core forms learning pathway</summary>\n        <ol>\n          <li><a href=\"/es/docs/Learn/Forms\">Web forms overview</a></li>\n          <li><a href=\"/es/docs/Learn/Forms/Your_first_form\">Your first form</a></li>\n          <li><a href=\"/es/docs/Learn/Forms/How_to_structure_a_web_form\">How to structure a web form</a></li>\n          <li><a href=\"/es/docs/Learn/Forms/Basic_native_form_controls\">Basic native form controls</a></li>\n          <li><a href=\"/es/docs/Learn/Forms/HTML5_input_types\">The HTML5 input types</a></li>\n          <li><a href=\"/es/docs/Learn/Forms/Other_form_controls\">Other form controls</a></li>\n          <li><a href=\"/es/docs/Learn/Forms/Styling_web_forms\">Styling web forms</a></li>\n          <li><a href=\"/es/docs/Learn/Forms/Advanced_form_styling\">Advanced form styling</a></li>\n          <li><a href=\"/es/docs/Learn/Forms/UI_pseudo-classes\">UI pseudo-classes</a></li>\n          <li><a href=\"/es/docs/Learn/Forms/Form_validation\">Client-side form validation</a></li>\n          <li><a href=\"/es/docs/Learn/Forms/Sending_and_retrieving_form_data\">Sending form data</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n        <summary>Advanced forms articles</summary>\n        <ol>\n          <li><a href=\"/es/docs/Learn/Forms/How_to_build_custom_form_controls\">How to build custom form controls</a></li>\n          <li><a href=\"/es/docs/Learn/Forms/Sending_forms_through_JavaScript\">Sending forms through JavaScript</a></li>\n          <li><a href=\"/es/docs/Learn/Forms/Property_compatibility_table_for_form_controls\">CSS property compatibility table for form controls</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"/es/docs/Learn/Accessibility\"><strong>Accessibility — Make the web usable by everyone</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Accessibility guides</summary>\n        <ol>\n          <li><a href=\"/es/docs/Learn/Accessibility\">Accessibility overview</a></li>\n          <li><a href=\"/es/docs/Learn/Accessibility/What_is_accessibility\">What is accessibility?</a></li>\n          <li><a href=\"/es/docs/Learn/Accessibility/HTML\">HTML: A good basis for accessibility</a></li>\n          <li><a href=\"/es/docs/Learn/Accessibility/CSS_and_JavaScript\">CSS and JavaScript accessibility best practices</a></li>\n          <li><a href=\"/es/docs/Learn/Accessibility/WAI-ARIA_basics\">WAI-ARIA basics</a></li>\n          <li><a href=\"/es/docs/Learn/Accessibility/Multimedia\">Accessible multimedia</a></li>\n          <li><a href=\"/es/docs/Learn/Accessibility/Mobile\">Mobile accessibility</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Accessibility assessment</summary>\n        <ol>\n            <li><a href=\"/es/docs/Learn/Accessibility/Accessibility_troubleshooting\">Assessment: Accessibility troubleshooting</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"/es/docs/Learn/Tools_and_testing\"><strong>Tools and testing</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Client-side web development tools</summary>\n        <ol>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Understanding_client-side_tools\">Client-side web development tools index</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Overview\">Client-side tooling overview</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Command_line\">Command line crash course</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Package_management\">Package management basics</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Introducing_complete_toolchain\">Introducing a complete toolchain</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Deployment\">Deploying our app</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Introduction to client-side frameworks</summary>\n        <ol>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Introduction\">Client-side frameworks overview</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Main_features\">Framework main features</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>React</summary>\n        <ol>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_getting_started\">Getting started with React</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_todo_list_beginning\">Beginning our React todo list</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_components\">Componentizing our React app</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_events_state\">React interactivity: Events and state</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_filtering_conditional_rendering\">React interactivity: Editing, filtering, conditional rendering</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_accessibility\">Accessibility in React</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_resources\">React resources</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Ember</summary>\n        <ol>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_getting_started\">Getting started with Ember</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_structure_componentization\">Ember app structure and componentization</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_interactivity_events_state\">Ember interactivity: Events, classes and state</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_conditional_footer\">Ember Interactivity: Footer functionality, conditional rendering</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_routing\">Routing in Ember</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_resources\">Ember resources and troubleshooting</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Vue</summary>\n        <ol>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_getting_started\">Getting started with Vue</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_first_component\">Creating our first Vue component</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_rendering_lists\">Rendering a list of Vue components</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_methods_events_models\">Adding a new todo form: Vue events, methods, and models</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_styling\">Styling Vue components with CSS</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_computed_properties\">Using Vue computed properties</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_conditional_rendering  \">Vue conditional rendering: editing existing todos</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_refs_focus_management\">Focus management with Vue refs</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_resources\">Vue resources</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Svelte</summary>\n        <ol>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_getting_started\">Getting started with Svelte</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_Todo_list_beginning\">Starting our Svelte Todo list app</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_variables_props\">Dynamic behavior in Svelte: working with variables and props</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_components\">Componentizing our Svelte app</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_reactivity_lifecycle_accessibility\">Advanced Svelte: Reactivity, lifecycle, accessibility</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_stores\">Working with Svelte stores</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_TypeScript  \">TypeScript support in Svelte</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_deployment_next\">Deployment and next steps</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Angular</summary>\n        <ol>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_getting_started\">Getting started with Angular</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_todo_list_beginning\">Beginning our Angular todo list app</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_styling\">Styling our Angular app</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_item_component\">Creating an item component</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_filtering\">Filtering our to-do items</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_building\">Building Angular applications and further resources</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Git and GitHub</summary>\n        <ol>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/GitHub\">Git and GitHub overview</a></li>\n          <li><a href=\"https://guides.github.com/activities/hello-world/\">Hello World</a></li>\n          <li><a href=\"https://guides.github.com/introduction/git-handbook/\">Git Handbook</a></li>\n          <li><a href=\"https://guides.github.com/activities/forking/\">Forking Projects</a></li>\n          <li><a href=\"https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests\">About pull requests</a></li>\n          <li><a href=\"https://guides.github.com/features/issues/\">Mastering Issues</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Cross browser testing</summary>\n        <ol>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Cross_browser_testing\">Cross browser testing overview</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Cross_browser_testing/Introduction\">Introduction to cross browser testing</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Cross_browser_testing/Testing_strategies\">Strategies for carrying out testing</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Cross_browser_testing/HTML_and_CSS\">Handling common HTML and CSS problems</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Cross_browser_testing/JavaScript\">Handling common JavaScript problems</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Cross_browser_testing/Accessibility\">Handling common accessibility problems</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Cross_browser_testing/Feature_detection\">Implementing feature detection</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Cross_browser_testing/Automated_testing\">Introduction to automated testing</a></li>\n          <li><a href=\"/es/docs/Learn/Tools_and_testing/Cross_browser_testing/Your_own_automation_environment\">Setting up your own test automation environment</a></li>\n        </ol>\n    </details>\n  </li>\n  <li data-default-state=\"\"><a href=\"/es/docs/Learn/Server-side\"><strong>Server-side website programming</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>First steps</summary>\n        <ol>\n          <li><a href=\"/es/docs/Learn/Server-side/First_steps\">First steps overview</a></li>\n          <li><a href=\"/es/docs/Learn/Server-side/First_steps/Introduction\">Introduction to the server-side</a></li>\n          <li><a href=\"/es/docs/Learn/Server-side/First_steps/Client-Server_overview\">Client-Server overview</a></li>\n          <li><a href=\"/es/docs/Learn/Server-side/First_steps/Web_frameworks\">Server-side web frameworks</a></li>\n          <li><a href=\"/es/docs/Learn/Server-side/First_steps/Website_security\">Website security</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Django web framework (Python)</summary>\n        <ol>\n          <li><a href=\"/es/docs/Learn/Server-side/Django\">Django web framework (Python) overview</a></li>\n          <li><a href=\"/es/docs/Learn/Server-side/Django/Introduction\">Introduction</a></li>\n          <li><a href=\"/es/docs/Learn/Server-side/Django/development_environment\">Setting up a development environment</a></li>\n          <li><a href=\"/es/docs/Learn/Server-side/Django/Tutorial_local_library_website\">Tutorial: The Local Library website</a></li>\n          <li><a href=\"/es/docs/Learn/Server-side/Django/skeleton_website\">Tutorial Part 2: Creating a skeleton website</a></li>\n          <li><a href=\"/es/docs/Learn/Server-side/Django/Models\">Tutorial Part 3: Using models</a></li>\n          <li><a href=\"/es/docs/Learn/Server-side/Django/Admin_site\">Tutorial Part 4: Django admin site</a></li>\n          <li><a href=\"/es/docs/Learn/Server-side/Django/Home_page\">Tutorial Part 5: Creating our home page</a></li>\n          <li><a href=\"/es/docs/Learn/Server-side/Django/Generic_views\">Tutorial Part 6: Generic list and detail views</a></li>\n          <li><a href=\"/es/docs/Learn/Server-side/Django/Sessions\">Tutorial Part 7: Sessions framework</a></li>\n          <li><a href=\"/es/docs/Learn/Server-side/Django/Authentication\">Tutorial Part 8: User authentication and permissions</a></li>\n          <li><a href=\"/es/docs/Learn/Server-side/Django/Forms\">Tutorial Part 9: Working with forms</a></li>\n          <li><a href=\"/es/docs/Learn/Server-side/Django/Testing\">Tutorial Part 10: Testing a Django web application</a></li>\n          <li><a href=\"/es/docs/Learn/Server-side/Django/Deployment\">Tutorial Part 11: Deploying Django to production</a></li>\n          <li><a href=\"/es/docs/Learn/Server-side/Django/web_application_security\">Web application security</a></li>\n          <li><a href=\"/es/docs/Learn/Server-side/Django/django_assessment_blog\">Assessment: DIY mini blog</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Express Web Framework (node.js/JavaScript)</summary>\n        <ol>\n          <li><a href=\"/es/docs/Learn/Server-side/Express_Nodejs\">Express Web Framework (Node.js/JavaScript) overview</a></li>\n          <li><a href=\"/es/docs/Learn/Server-side/Express_Nodejs/Introduction\">Express/Node introduction</a></li>\n          <li><a href=\"/es/docs/Learn/Server-side/Express_Nodejs/development_environment\">Setting up a Node (Express) development environment</a></li>\n          <li><a href=\"/es/docs/Learn/Server-side/Express_Nodejs/Tutorial_local_library_website\">Express tutorial: The Local Library website</a></li>\n          <li><a href=\"/es/docs/Learn/Server-side/Express_Nodejs/skeleton_website\">Express Tutorial Part 2: Creating a skeleton website</a></li>\n          <li><a href=\"/es/docs/Learn/Server-side/Express_Nodejs/mongoose\">Express Tutorial Part 3: Using a database (with Mongoose)</a></li>\n          <li><a href=\"/es/docs/Learn/Server-side/Express_Nodejs/routes\">Express Tutorial Part 4: Routes and controllers</a></li>\n          <li><a href=\"/es/docs/Learn/Server-side/Express_Nodejs/Displaying_data\">Express Tutorial Part 5: Displaying library data</a></li>\n          <li><a href=\"/es/docs/Learn/Server-side/Express_Nodejs/forms\">Express Tutorial Part 6: Working with forms</a></li>\n          <li><a href=\"/es/docs/Learn/Server-side/Express_Nodejs/deployment\">Express Tutorial Part 7: Deploying to production</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"#\"><strong>Further resources</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Common questions</summary>\n        <ol>\n          <li><a href=\"/es/docs/Learn/HTML/Howto\">HTML questions</a></li>\n          <li><a href=\"/es/docs/Learn/CSS/Howto\">CSS questions</a></li>\n          <li><a href=\"/es/docs/Learn/JavaScript/Howto\">JavaScript questions</a></li>\n          <li><a href=\"/es/docs/Learn/Common_questions#Web_mechanics\">Web mechanics</a></li>\n          <li><a href=\"/es/docs/Learn/Common_questions#Tools_and_setup\">Tools and setup</a></li>\n          <li><a href=\"/es/docs/Learn/Common_questions#Design_and_accessibility\">Design and accessibility</a></li>\n        </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal only-in-en-us\" href=\"/en-US/docs/Learn/Forms/Form_validation\" title=\"Currently only available in English (US)\"> Anterior  (en-US)</a></li>\n    <li><a class=\"button minimal only-in-en-us\" href=\"/en-US/docs/Learn/Forms\" title=\"Currently only available in English (US)\"> Overview: Forms (en-US)</a></li>\n    <li><a class=\"button minimal only-in-en-us\" href=\"/en-US/docs/Learn/Forms/Sending_forms_through_JavaScript\" title=\"Currently only available in English (US)\"> Siguiente   (en-US)</a></li>\n</ul>\n<p>Hay muchos casos donde los <a href=\"/en-US/docs/Learn/Forms/Basic_native_form_controls\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">widgets de formularios HTML disponibles (en-US)</a> simplemente no son suficientes. si desea <a href=\"/en-US/docs/Learn/Forms/Advanced_form_styling\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">establecer un estilo avanzado (en-US)</a> en algunos widgets como el elemento <a href=\"/es/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a> o si desea proporcionar comportamientos personalizados, no tiene más opción que crear sus propios widgets.</p>\n<p>En este aartículo, veremos cómo construir dicho widget. Para ello, trabajaremos con un ejemplo: Reconstruir el elemento <a href=\"/es/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a>.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Nota:</strong> Nos enfocaremos en construir los widgets, no en cómo hacer que el código sea genérico y reutilizable; eso implicaría algún código JavaScript no trivial y manipulación del DOM en un contexto desconocido, y eso está fuera del alcance de este artículo.</p>\n</div>"}},{"type":"prose","value":{"id":"diseño_estructura_y_semántica","title":"Diseño, estructura, y semántica","isH3":false,"content":"<p>Antes de crear un widget personalizado, debería iniciar por averiguar exactamente qué es lo que desea. Esto le ahorarrá tiempo considerable. En particular, es importante definir claramente todos los estados de su widget. Para hacer esto, es bueno comenzar con un widget existente, cuyos estados y comportamientos son bien conocidos, por lo que simplemente puede imitarlos tanto como sea posible.</p>\n<p>En nuestro ejemplo, reconstruiremos el elemento <a href=\"/es/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a>. Este es el resultado que queremos lograr:</p>\n<p>\n  <img src=\"/files/4481/custom-select.png\" alt=\"The three states of a select box\" loading=\"lazy\">\n</p>\n<p>Esta captura de pantall muestra los tres estados principales de nuestro widget: el estado normal (a la izquiera); el estado activo (en el centro) y el estado abierto (a la derecha).</p>\n<p>En términos de comportamiento, queremos que nuestro widget sea utilizable tanto con un ratón como con un teclado, al igual que cualquier widget nativo. Comencemos por definir cómo el widget llega a cada estado:</p>\n<p>El widget está en su estado normal cuando:</p>\n<ul>\n  <li>La página carga</li>\n  <li>El widget estaba activo y el usuario hace clic en cualquier lugar fuera del widget</li>\n  <li>El widget estaba activo y el usuario mueve el foco a otro widget usando el teclado</li>\n</ul>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Nota:</strong> Mover el foco al rededor de la página generalmente se hace presionando la tecla de tabulación, pero este no es el estándar en todas partes. Por ejemplo, el ciclo a través de enlaces en una página se realiza en Safari de forma predeterminada usando la combinación <a href=\"http://www.456bereastreet.com/archive/200906/enabling_keyboard_navigation_in_mac_os_x_web_browsers/\" class=\"external\" rel=\" noopener\">combinación Opction+Tab</a>.</p>\n</div>\n<p>El widget está en su estado activo cuando:</p>\n<ul>\n  <li>El usuario hace clic en él</li>\n  <li>El usuario presiona la tecla tab y obtiene foco</li>\n  <li>El widget estaba en su estado abierto y el usuario hace clic en el widget.</li>\n</ul>\n<p>El widget está en su estado abierto cuando:</p>\n<ul>\n  <li>El widget está en cualquier otro estado diferente a abierto y el usuario hace clic en él.</li>\n</ul>\n<p>Una vez que sabemos cómo cambiar los estados, es importante definir cómo cambiar el valor del widget:</p>\n<p>El valor cambia cuando:</p>\n<ul>\n  <li>El usuario hace clic en una opción cuando el widget está en estado abierto</li>\n  <li>El usuario pulsa las teclas de flecha hacia arriba o hacia abajocuando el widget está en estado activo</li>\n</ul>\n<p>Finalmente, definamos cómo se comportarán las opciones del widget:</p>\n<ul>\n  <li>Cuando se abre el widget, se resalta la opción seleccionada</li>\n  <li>Cuando el ratón está sobre una opción, la opción se resalta y la opción resaltada anteriormente vuelve a su estado normal</li>\n</ul>\n<p>Para los fines de nuestro ejemplo, nos detendremos con eso; sin embargo, si eres un lector cuidadoso, notarás que faltan algunos comportamientos. Por ejemplo, ¿qué crees que sucederá si el usuario pulsa la tecla de tabulación mientras el widget está en estado abierto? La respuesta es ... nada. OK, el comportamiento correcto parece obvio, pero el hecho es que, como no está definido en nuestras especificaciones, es muy fácil pasar por alto este comportamiento. Esto es especialmente cierto en un entorno de equipo cuando las personas que diseñan el comportamiento del widget son diferentes de las que lo implementan.</p>\n<p>Otro ejemplo divertido: ¿qué pasará si el usuario pulsa las teclas de flecha hacia arriba o hacia abajo mientras el widget está en estado abierto? Este es un poco más complicado. Si considera que el estado activo y el estado abierto son completamente diferentes, la respuesta es nuevamente \"no pasará nada\" porque no definimos ninguna interacción de teclado para el estado abierto. Por otro lado, si considera que el estado activo y el estado abierto se superponen un poco, el valor puede cambiar pero la opción definitivamente no se resaltará en consecuencia, una vez más porque no definimos ninguna interacción del teclado sobre las opciones cuando el widget es en su estado abierto (solo hemos definido lo que debería suceder cuando se abre el widget, pero nada después de eso).</p>\n<p>En nuestro ejemplo, las especificaciones faltantes son obvias, así que las manejaremos, pero puede ser un problema real en widgets nuevos y exóticos, para los cuales nadie tiene la menor idea de cuál es el comportamiento correcto. Por lo tanto, siempre es bueno pasar tiempo en esta etapa de diseño, porque si defines un comportamiento deficiente u olvidas definir uno, será muy difícil redefinirlo una vez que los usuarios se hayan acostumbrado. Si tiene dudas, solicite las opiniones de los demás y, si tiene el presupuesto para ello, no dude en realizar las pruebas de usuario. Este proceso se llama Diseño UX. Si desea obtener más información sobre este tema, debe consultar los siguientes recursos útiles:</p>\n<ul>\n  <li><a href=\"http://www.uxmatters.com/\" class=\"external\" rel=\" noopener\">UXMatters.com</a></li>\n  <li><a href=\"http://uxdesign.com/\" class=\"external\" rel=\" noopener\">UXDesign.com</a></li>\n  <li><a href=\"http://uxdesign.smashingmagazine.com/\" class=\"external\" rel=\" noopener\">The UX Design section of SmashingMagazine</a></li>\n</ul>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Nota:</strong> Ademas, en la mayoría de los sistemas hay una forma de abrir el elemento <a href=\"/es/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a> para ver todas las opciones disponibles (esto es lo mismo que hacer clic en el elemento <a href=\"/es/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a> con un ratón). Esto se logra con Alt+Flecha abajo en Windows y no fué implementado en nuestro ejemplo —pero sería facil hacerlo, ya que el mecanismo ya se implementó para el evento <code>clic</code>.</p>\n</div>"}},{"type":"prose","value":{"id":"definiendo_la_estructura_y_semántica_html","title":"Definiendo la estructura y semántica HTML","isH3":true,"content":"<p>Ahora que se ha decidido la funcionalidad básica del widget, es hora de comenzar a construir nuestro widget. El primer paso es definir su estructura HTML y darle una semántica básica. Esto es lo que necesitamos para reconstruir un elemento <a href=\"/es/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a>:</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token comment\">&lt;!-- Este es nuestro contenedor principal para nuestro widget.\n     El atributo tabindex es lo que permite al usuario enforcar el widget.\n     Veremos más adelante que es mejor configurarlo a través de JavaScript. --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>select<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">tabindex</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token comment\">&lt;!-- Este contenedor será usado para mostrar el valor actual del widget --&gt;</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>value<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Cherry<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token comment\">&lt;!-- Este contenedor contedrá todas las opciones disponibles para nuestro widget.\n       Como es una lista, tiene sentido usar el elemento ul. --&gt;</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>optList<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- Cada opción solo contiene el valor que se mostrará, veremos más tarde\n         cómo manejar el valor real que será enviado con el formulario de datos --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Cherry<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Lemon<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Banana<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Strawberry<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Apple<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>Tenga en cuanta el uso de nombres de clases; estos identifican cada parte relevante independientemente de los elementos HTML subyacentes reales utilizados. Esto es importante para garantizar que no vinculamos nuestro CSS y JavaScript a una estructura HTML sólida, de modo que podamos realizar cambios despues en la implementación sin romper el código que usa el widget. Pro ejemplo, si desea implementar el equivalente del elemento <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/HTML/Element/optgroup\"><code>&lt;optgroup&gt;</code> <small>(en-US)</small></a>.</p>"}},{"type":"prose","value":{"id":"creating_the_look_and_feel_using_css","title":"Creating the look and feel using CSS","isH3":true,"content":"<p>Now that we have a structure, we can start designing our widget. The whole point of building this custom widget is to be able to style this widget exactly as we want. To that end, we will split our CSS work into two parts: the first part will be the CSS rules absolutely necessary to have our widget behave like a <a href=\"/es/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a> element, and the second part will consist of the fancy styles used to make it look the way we want.</p>\n<h4 id=\"required_styles\">Required styles</h4>\n<p>The required styles are those necessary to handle the three states of our widget.</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">.select</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* This will create a positioning context for the list of options */</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* This will make our widget become part of the text flow and sizable at the same time */</span>\n  <span class=\"token property\">display</span> <span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>We need an extra class <code>active</code> to define the look and feel of our widget when it is in its active state. Because our widget is focusable, we double this custom style with the <a href=\"/es/docs/Web/CSS/:focus\"><code>:focus</code></a> pseudo-class in order to be sure they will behave the same.</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">.select.active,\n.select:focus</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">outline</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* This box-shadow property is not exactly required, however it's so important to be sure\n     the active state is visible that we use it as a default value, feel free to override it. */</span>\n  <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 0 0 3px 1px #227755<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Now, let's handle the list of options:</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token comment\">/* The .select selector here is syntactic sugar to be sure the classes we define are\n   the ones inside our widget. */</span>\n<span class=\"token selector\">.select .optList</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* This will make sure our list of options will be displayed below the value\n     and out of the HTML flow */</span>\n  <span class=\"token property\">position</span> <span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span>      <span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span>     <span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>We need an extra class to handle when the list of options is hidden. This is necessary in order to manage the differences between the active state and the open state that do not exactly match.</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">.select .optList.hidden</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* This is a simple way to hide the list in an accessible way,\n     we will talk more about accessibility in the end */</span>\n  <span class=\"token property\">max-height</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">visibility</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"beautification\">Beautification</h4>\n<p>So now that we have the basic functionality in place, the fun can start. The following is just an example of what is possible, and will match the screenshot at the beginning of this article. However, you should feel free to experiment and see what you can come up with.</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">.select</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* All sizes will be expressed with the em value for accessibility reasons\n     (to make sure the widget remains resizable if the user uses the\n     browser's zoom in a text-only mode). The computations are made\n     assuming 1em == 16px which is the default value in most browsers.\n     If you are lost with px to em conversion, try http://riddle.pl/emcalc/ */</span>\n  <span class=\"token property\">font-size</span>   <span class=\"token punctuation\">:</span> 0.625em<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* this (10px) is the new font size context for em value in this context */</span>\n  <span class=\"token property\">font-family</span> <span class=\"token punctuation\">:</span> Verdana<span class=\"token punctuation\">,</span> Arial<span class=\"token punctuation\">,</span> sans-serif<span class=\"token punctuation\">;</span>\n\n  <span class=\"token property\">-moz-box-sizing</span> <span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-sizing</span> <span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* We need extra room for the down arrow we will add */</span>\n  <span class=\"token property\">padding</span> <span class=\"token punctuation\">:</span> .1em 2.5em .2em .5em<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 1px 25px 2px 5px */</span>\n  <span class=\"token property\">width</span>   <span class=\"token punctuation\">:</span> 10em<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 100px */</span>\n\n  <span class=\"token property\">border</span>        <span class=\"token punctuation\">:</span> .2em solid #000<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 2px */</span>\n  <span class=\"token property\">border-radius</span> <span class=\"token punctuation\">:</span> .4em<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 4px */</span>\n  <span class=\"token property\">box-shadow</span>    <span class=\"token punctuation\">:</span> 0 .1em .2em <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>.45<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 0 1px 2px */</span>\n\n  <span class=\"token comment\">/* The first declaration is for browsers that do not support linear gradients.\n     The second declaration is because WebKit based browsers haven't unprefixed it yet.\n     If you want to support legacy browsers, try http://www.colorzilla.com/gradient-editor/ */</span>\n  <span class=\"token property\">background</span> <span class=\"token punctuation\">:</span> #F0F0F0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span> <span class=\"token punctuation\">:</span> <span class=\"token function\">-webkit-linear-gradient</span><span class=\"token punctuation\">(</span>90deg<span class=\"token punctuation\">,</span> #E3E3E3<span class=\"token punctuation\">,</span> #fcfcfc 50%<span class=\"token punctuation\">,</span> #f0f0f0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span> <span class=\"token punctuation\">:</span> <span class=\"token function\">linear-gradient</span><span class=\"token punctuation\">(</span>0deg<span class=\"token punctuation\">,</span> #E3E3E3<span class=\"token punctuation\">,</span> #fcfcfc 50%<span class=\"token punctuation\">,</span> #f0f0f0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.select .value</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Because the value can be wider than our widget, we have to make sure it will not\n     change the widget's width */</span>\n  <span class=\"token property\">display</span>  <span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span>    <span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span> <span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n\n  <span class=\"token property\">vertical-align</span><span class=\"token punctuation\">:</span> top<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* And if the content overflows, it's better to have a nice ellipsis. */</span>\n  <span class=\"token property\">white-space</span>  <span class=\"token punctuation\">:</span> nowrap<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-overflow</span><span class=\"token punctuation\">:</span> ellipsis<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>We don't need an extra element to design the down arrow; instead, we're using the <a class=\"page-not-created\" title=\"La documentación acerca de este tema no ha sido escrita todavía . ¡Por favor  considera contribuir !\"><code>:after</code></a> pseudo-element. However, it could also be implemented using a simple background image on the <code>select</code> class.</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">.select:after</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">content</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"▼\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* We use the unicode caracter U+25BC; see http://www.utf8-chartable.de */</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">z-index</span> <span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* This will be important to keep the arrow from overlapping the list of options */</span>\n  <span class=\"token property\">top</span>     <span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">right</span>   <span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n\n  <span class=\"token property\">-moz-box-sizing</span> <span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-sizing</span> <span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n\n  <span class=\"token property\">height</span>  <span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span>   <span class=\"token punctuation\">:</span> 2em<span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* 20px */</span>\n  <span class=\"token property\">padding-top</span> <span class=\"token punctuation\">:</span> .1em<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 1px */</span>\n\n  <span class=\"token property\">border-left</span>  <span class=\"token punctuation\">:</span> .2em solid #000<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 2px */</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 0 .1em .1em 0<span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* 0 1px 1px 0 */</span>\n\n  <span class=\"token property\">background-color</span> <span class=\"token punctuation\">:</span> #000<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span> <span class=\"token punctuation\">:</span> #FFF<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-align</span> <span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Next, let's style the list of options:</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">.select .optList</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">z-index</span> <span class=\"token punctuation\">:</span> 2<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* We explicitly said the list of options will always overlap the down arrow */</span>\n\n  <span class=\"token comment\">/* this will reset the default style of the ul element */</span>\n  <span class=\"token property\">list-style</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span> <span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n\n  <span class=\"token property\">-moz-box-sizing</span> <span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-sizing</span> <span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* This will ensure that even if the values are smaller than the widget,\n     the list of options will be as large as the widget itself */</span>\n  <span class=\"token property\">min-width</span> <span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* In case the list is too long, its content will overflow vertically\n     (which will add a vertical scrollbar automatically) but never horizontally\n     (because we haven't set a width, the list will adjust its width automatically.\n     If it can't, the content will be truncated) */</span>\n  <span class=\"token property\">max-height</span><span class=\"token punctuation\">:</span> 10em<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 100px */</span>\n  <span class=\"token property\">overflow-y</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow-x</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> .2em solid #000<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 2px */</span>\n  <span class=\"token property\">border-top-width</span> <span class=\"token punctuation\">:</span> .1em<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 1px */</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 0 0 .4em .4em<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 0 0 4px 4px */</span>\n\n  <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 0 .2em .4em <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>.4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 0 2px 4px */</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #f0f0f0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>For the options, we need to add a <code>highlight</code> class to be able to identify the value the user will pick (or has picked).</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">.select .option</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> .2em .3em<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 2px 3px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.select .highlight</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #000<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #FFFFFF<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>So here's the result with our three states:</p>\n<table>\n  <thead>\n    <tr>\n      <th scope=\"col\" style=\"text-align: center\">Basic state</th>\n      <th scope=\"col\" style=\"text-align: center\">Active state</th>\n      <th scope=\"col\" style=\"text-align: center\">Open state</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><iframe class=\"sample-code-frame\" title=\"Basic state sample\" id=\"frame_basic_state\" width=\"120\" height=\"130\" src=\"https://yari-demos.prod.mdn.mozit.cloud/en-US/docs/HTML/Forms/How_to_build_custom_form_widgets/Example_1/_sample_.basic_state.html\" loading=\"lazy\"></iframe></td>\n      <td><iframe class=\"sample-code-frame\" title=\"Active state sample\" id=\"frame_active_state\" width=\"120\" height=\"130\" src=\"https://yari-demos.prod.mdn.mozit.cloud/en-US/docs/HTML/Forms/How_to_build_custom_form_widgets/Example_1/_sample_.active_state.html\" loading=\"lazy\"></iframe></td>\n      <td><iframe class=\"sample-code-frame\" title=\"Open state sample\" id=\"frame_open_state\" width=\"120\" height=\"130\" src=\"https://yari-demos.prod.mdn.mozit.cloud/en-US/docs/HTML/Forms/How_to_build_custom_form_widgets/Example_1/_sample_.open_state.html\" loading=\"lazy\"></iframe></td>\n    </tr>\n    <tr>\n      <td colspan=\"3\" style=\"text-align: center\"><a href=\"/en-US/docs/Learn/Forms/How_to_build_custom_form_controls/Example_1\" title=\"/en-US/docs/HTML/Forms/How_to_build_custom_form_widgets/Example_1\">Check out the source code</a></td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"bring_your_widget_to_life_with_javascript","title":"Bring your widget to life with JavaScript","isH3":false,"content":"<p>Now that our design and structure are ready, we can write the JavaScript code to make the widget actually work.</p>\n<div class=\"notecard warning\" id=\"sect4\">\n  <p><strong>Advertencia:</strong> The following code is educational and should not be used as-is. Among many things, as we'll see, it is not future-proof and it will not work on legacy browsers. It also has redundant parts that should be optimized in production code.</p>\n</div>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>Nota:</strong> Creating reusable widgets is something that can be a bit tricky. The <a href=\"https://dvcs.w3.org/hg/webcomponents/raw-file/tip/explainer/index.html\" class=\"external\" rel=\" noopener\">W3C Web Component draft</a> is one of the answers to this specific issue. <a href=\"http://x-tags.org/\" class=\"external\" rel=\" noopener\">The X-Tag project</a> is a test implementation of this specification; we encourage you to take a look at it.</p>\n</div>"}},{"type":"prose","value":{"id":"why_isnt_it_working","title":"Why isn't it working?","isH3":true,"content":"<p>Before we start, it's important to remember something very important about JavaScript: inside a browser, <strong>it's an unreliable technology</strong>. When you are building custom widgets, you'll have to rely on JavaScript because it's a necessary thread to tie everything together. However, there are many cases in which JavaScript isn't able to run in the browser:</p>\n<ul>\n  <li>The user has turned off JavaScript: This is the most unusual case ever; very few people turn off JavaScript nowadays.</li>\n  <li>The script is not loading. This is one of the most common cases, especially in the mobile world where the network is not very reliable.</li>\n  <li>The script is buggy. You should always consider this possibility.</li>\n  <li>The script is in conflict with a third party script. This can happen with tracking scripts or any bookmarklets the user uses.</li>\n  <li>The script is in conflict with, or is affected by, a browser extension (such as Firefox's <a href=\"https://addons.mozilla.org/fr/firefox/addon/noscript/\" class=\"external\" rel=\" noopener\">NoScript</a> extension or Chrome's <a href=\"https://chrome.google.com/webstore/detail/notscripts/odjhifogjcknibkahlpidmdajjpkkcfn\" class=\"external\" rel=\" noopener\">NotScripts</a> extension).</li>\n  <li>The user is using a legacy browser, and one of the features you require is not supported. This will happen frequently when you make use of cutting-edge APIs.</li>\n</ul>\n<p>Because of these risks, it's really important to seriously consider what will happen if JavaScript isn't working. Dealing in detail with this issue is out of the scope of this article because it's closely linked to how you want to make your script generic and reusable, but we'll consider the basics of this in our example.</p>\n<p>In our example, if our JavaScript code isn't running, we'll fall back to displaying a standard <a href=\"/es/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a> element. To achieve this, we need two things.</p>\n<p>First, we need to add a regular <a href=\"/es/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a> element before each use of our custom widget. This is actually also required in order to be able to send data from our custom widget along with the rest of our form data; more about this later.</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>no-widget<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myFruit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">&gt;</span></span>Cherry<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">&gt;</span></span>Lemon<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">&gt;</span></span>Banana<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">&gt;</span></span>Strawberry<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">&gt;</span></span>Apple<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>select<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>value<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Cherry<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>optList hidden<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Cherry<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Lemon<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Banana<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Strawberry<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Apple<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>Second, we need two new classes to let us hide the unneeded element (that is, the \"real\" <a href=\"/es/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a> element if our script isn't running, or the custom widget if it is running). Note that by default, our HTML code hides our custom widget.</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">.widget select,\n.no-widget .select</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* This CSS selector basically says:\n     - either we have set the body class to \"widget\" and thus we hide the actual &lt;select&gt; element\n     - or we have not changed the body class, therefore the body class is still \"no-widget\",\n       so the elements whose class is \"select\" must be hidden */</span>\n  <span class=\"token property\">position</span> <span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span>     <span class=\"token punctuation\">:</span> -5000em<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span>   <span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span> <span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Now we just need a JavaScript switch to determine if the script is running or not. This switch is very simple: if at page load time our script is running, it will remove the <code>no-widget</code> class and add the <code>widget</code> class, thereby swapping the visibility of the <a href=\"/es/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a> element and of the custom widget.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no-widget\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"widget\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<table>\n  <thead>\n    <tr>\n      <th scope=\"col\" style=\"text-align: center\">Without JS</th>\n      <th scope=\"col\" style=\"text-align: center\">With JS</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><iframe class=\"sample-code-frame\" title=\"No JS sample\" id=\"frame_no_js\" width=\"120\" height=\"130\" src=\"https://yari-demos.prod.mdn.mozit.cloud/en-US/docs/HTML/Forms/How_to_build_custom_form_widgets/Example_2/_sample_.no_js.html\" loading=\"lazy\"></iframe></td>\n      <td><iframe class=\"sample-code-frame\" title=\"JS sample\" id=\"frame_js\" width=\"120\" height=\"130\" src=\"https://yari-demos.prod.mdn.mozit.cloud/en-US/docs/HTML/Forms/How_to_build_custom_form_widgets/Example_2/_sample_.js.html\" loading=\"lazy\"></iframe></td>\n    </tr>\n    <tr>\n      <td colspan=\"2\" style=\"text-align: center\"><a href=\"/en-US/docs/Learn/Forms/How_to_build_custom_form_controls/Example_2\" title=\"/en-US/docs/HTML/Forms/How_to_build_custom_form_widgets/Example_2\">Check out the source code</a></td>\n    </tr>\n  </tbody>\n</table>\n<div class=\"notecard note\" id=\"sect6\">\n  <p><strong>Nota:</strong> If you really want to make your code generic and reusable, instead of doing a class switch it's far better to just add the widget class to hide the <a href=\"/es/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a> elements, and to dynamically add the DOM tree representing the custom widget after every <a href=\"/es/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a> element in the page.</p>\n</div>"}},{"type":"prose","value":{"id":"making_the_job_easier","title":"Making the job easier","isH3":true,"content":"<p>In the code we are about to build, we will use the standard DOM API to do all the work we need. However, although DOM API support has gotten much better in browsers, there are always issues with legacy browsers (especially with good old Internet Explorer).</p>\n<p>If you want to avoid trouble with legacy browsers, there are two ways to do so: using a dedicated framework such as <a href=\"https://jquery.com/\" class=\"external\" rel=\" noopener\">jQuery</a>, <a href=\"https://github.com/julienw/dollardom\" class=\"external\" rel=\" noopener\">$dom</a>, <a href=\"http://prototypejs.org/\" class=\"external\" rel=\" noopener\">prototype</a>, <a href=\"http://dojotoolkit.org/\" class=\"external\" rel=\" noopener\">Dojo</a>, <a href=\"http://yuilibrary.com/\" class=\"external\" rel=\" noopener\">YUI</a>, or the like, or by polyfilling the missing feature you want to use (which can easily be done through conditional loading, with the <a href=\"http://yepnopejs.com/\" class=\"external\" rel=\" noopener\">yepnope</a> library for example).</p>\n<p>The features we plan to use are the following (ordered from the riskiest to the safest):</p>\n<ol>\n  <li><a href=\"/es/docs/Web/API/Element/classList\" title=\"classList\"><code>classList</code></a></li>\n  <li><a href=\"/es/docs/Web/API/EventTarget/addEventListener\" title=\"addEventListener\"><code>addEventListener</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">forEach (en-US)</a> (This is not DOM but modern JavaScript)</li>\n  <li><a href=\"/es/docs/Web/API/Element/querySelector\" title=\"querySelector\"><code>querySelector</code></a> and <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Element/querySelectorAll\"><code>querySelectorAll</code> <small>(en-US)</small></a></li>\n</ol>\n<p>Beyond the availability of those specific features, there is still one issue remaining before starting. The object returned by the <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Element/querySelectorAll\"><code>querySelectorAll()</code> <small>(en-US)</small></a> function is a <a href=\"/es/docs/Web/API/NodeList\"><code>NodeList</code></a> rather than an <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Array (en-US)</a>. This is important because <code>Array</code> objects support the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">forEach (en-US)</a> function, but <a href=\"/es/docs/Web/API/NodeList\"><code>NodeList</code></a> doesn't. Because <a href=\"/es/docs/Web/API/NodeList\"><code>NodeList</code></a> really looks like an <code>Array</code> and because <code>forEach</code> is so convenient to use, we can easily add the support of <code>forEach</code> to <a href=\"/es/docs/Web/API/NodeList\"><code>NodeList</code></a> in order to make our life easier, like so:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token class-name\">NodeList</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">forEach</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>We weren't kidding when we said it's easy to do.</p>"}},{"type":"prose","value":{"id":"building_event_callbacks","title":"Building event callbacks","isH3":true,"content":"<p>The ground is ready, we can now start to define all the functions that will be used each time the user interacts with our widget.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// This function will be used each time we want to deactivate a custom widget</span>\n<span class=\"token comment\">// It takes one parameter</span>\n<span class=\"token comment\">// select : the DOM node with the `select` class to deactivate</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">deactivateSelect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">select</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// If the widget is not active there is nothing to do</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>select<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'active'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// We need to get the list of options for the custom widget</span>\n  <span class=\"token keyword\">var</span> optList <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.optList'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// We close the list of option</span>\n  optList<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hidden'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// and we deactivate the custom widget itself</span>\n  select<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">'active'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// This function will be used each time the user wants to (de)activate the widget</span>\n<span class=\"token comment\">// It takes two parameters:</span>\n<span class=\"token comment\">// select : the DOM node with the `select` class to activate</span>\n<span class=\"token comment\">// selectList : the list of all the DOM nodes with the `select` class</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">activeSelect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">select<span class=\"token punctuation\">,</span> selectList</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// If the widget is already active there is nothing to do</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>select<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'active'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// We have to turn off the active state on all custom widgets</span>\n  <span class=\"token comment\">// Because the deactivateSelect function fulfill all the requirement of the</span>\n  <span class=\"token comment\">// forEach callback function, we use it directly without using an intermediate</span>\n  <span class=\"token comment\">// anonymous function.</span>\n  selectList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>deactivateSelect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// And we turn on the active state for this specific widget</span>\n  select<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'active'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// This function will be used each time the user wants to open/closed the list of options</span>\n<span class=\"token comment\">// It takes one parameter:</span>\n<span class=\"token comment\">// select : the DOM node with the list to toggle</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">toggleOptList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">select</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// The list is kept from the widget</span>\n  <span class=\"token keyword\">var</span> optList <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.optList'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// We change the class of the list to show/hide it</span>\n  optList<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hidden'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// This function will be used each time we need to highlight an option</span>\n<span class=\"token comment\">// It takes two parameters:</span>\n<span class=\"token comment\">// select : the DOM node with the `select` class containing the option to highlight</span>\n<span class=\"token comment\">// option : the DOM node with the `option` class to highlight</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">highlightOption</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">select<span class=\"token punctuation\">,</span> option</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// We get the list of all option available for our custom select element</span>\n  <span class=\"token keyword\">var</span> optionList <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.option'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// We remove the highlight from all options</span>\n  optionList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">other</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    other<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">'highlight'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// We highlight the right option</span>\n  option<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'highlight'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>That's all you need in order to handle the various states of the custom widget.</p>\n<p>Next, we bind these functions to the appropriate events:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// We handle the event binding when the document is loaded.</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'load'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> selectList <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.select'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Each custom widget needs to be initialized</span>\n  selectList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">select</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// as well as all its `option` elements</span>\n    <span class=\"token keyword\">var</span> optionList <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.option'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Each time a user hovers their mouse over an option, we highlight the given option</span>\n    optionList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">option</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      option<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mouseover'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Note: the `select` and `option` variable are closures</span>\n        <span class=\"token comment\">// available in the scope of our function call.</span>\n        <span class=\"token function\">highlightOption</span><span class=\"token punctuation\">(</span>select<span class=\"token punctuation\">,</span> option<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Each times the user click on a custom select element</span>\n    select<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Note: the `select` variable is a closure</span>\n      <span class=\"token comment\">// available in the scope of our function call.</span>\n\n      <span class=\"token comment\">// We toggle the visibility of the list of options</span>\n      <span class=\"token function\">toggleOptList</span><span class=\"token punctuation\">(</span>select<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// In case the widget gain focus</span>\n    <span class=\"token comment\">// The widget gains the focus each time the user clicks on it or each time</span>\n    <span class=\"token comment\">// they use the tabulation key to access the widget</span>\n    select<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'focus'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Note: the `select` and `selectList` variable are closures</span>\n      <span class=\"token comment\">// available in the scope of our function call.</span>\n\n      <span class=\"token comment\">// We activate the widget</span>\n      <span class=\"token function\">activeSelect</span><span class=\"token punctuation\">(</span>select<span class=\"token punctuation\">,</span> selectList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// In case the widget loose focus</span>\n    select<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'blur'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Note: the `select` variable is a closure</span>\n      <span class=\"token comment\">// available in the scope of our function call.</span>\n\n      <span class=\"token comment\">// We deactivate the widget</span>\n      <span class=\"token function\">deactivateSelect</span><span class=\"token punctuation\">(</span>select<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>At that point, our widget will change state according to our design, but its value doesn't get updated yet. We'll handle that next.</p>\n<table>\n  <thead>\n    <tr>\n      <th>Live example</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><iframe class=\"sample-code-frame\" title=\"Change states sample\" id=\"frame_change_states\" width=\"120\" height=\"130\" src=\"https://yari-demos.prod.mdn.mozit.cloud/en-US/docs/HTML/Forms/How_to_build_custom_form_widgets/Example_3/_sample_.change_states.html\" loading=\"lazy\"></iframe></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Learn/Forms/How_to_build_custom_form_controls/Example_3\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Check out the source code (en-US)</a></td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"handling_the_widgets_value","title":"Handling the widget's value","isH3":true,"content":"<p>Now that our widget is working, we have to add code to update its value according to user input and make it possible to send the value along with form data.</p>\n<p>The easiest way to do this is to use a native widget under the hood. Such a widget will keep track of the value with all the built-in controls provided by the browser, and the value will be sent as usual when a form is submitted. There's no point in reinventing the wheel when we can have all this done for us.</p>\n<p>As seen previously, we already use a native select widget as a fallback for accessibility reasons; we can simply synchronize its value with that of our custom widget:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// This function updates the displayed value and synchronizes it with the native widget.</span>\n<span class=\"token comment\">// It takes two parameters:</span>\n<span class=\"token comment\">// select : the DOM node with the class `select` containing the value to update</span>\n<span class=\"token comment\">// index  : the index of the value to be selected</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">updateValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">select<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// We need to get the native widget for the given custom widget</span>\n  <span class=\"token comment\">// In our example, that native widget is a sibling of the custom widget</span>\n  <span class=\"token keyword\">var</span> nativeWidget <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span>previousElementSibling<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// We also need  to get the value placeholder of our custom widget</span>\n  <span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// And we need the whole list of options</span>\n  <span class=\"token keyword\">var</span> optionList <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.option'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// We set the selected index to the index of our choice</span>\n  nativeWidget<span class=\"token punctuation\">.</span>selectedIndex <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// We update the value placeholder accordingly</span>\n  value<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> optionList<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// And we highlight the corresponding option of our custom widget</span>\n  <span class=\"token function\">highlightOption</span><span class=\"token punctuation\">(</span>select<span class=\"token punctuation\">,</span> optionList<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// This function returns the current selected index in the native widget</span>\n<span class=\"token comment\">// It takes one parameter:</span>\n<span class=\"token comment\">// select : the DOM node with the class `select` related to the native widget</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">select</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// We need to access the native widget for the given custom widget</span>\n  <span class=\"token comment\">// In our example, that native widget is a sibling of the custom widget</span>\n  <span class=\"token keyword\">var</span> nativeWidget <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span>previousElementSibling<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> nativeWidget<span class=\"token punctuation\">.</span>selectedIndex<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>With these two functions, we can bind the native widgets to the custom ones:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// We handle event binding when the document is loaded.</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'load'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> selectList <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.select'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Each custom widget needs to be initialized</span>\n  selectList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">select</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> optionList <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.option'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        selectedIndex <span class=\"token operator\">=</span> <span class=\"token function\">getIndex</span><span class=\"token punctuation\">(</span>select<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// We make our custom widget focusable</span>\n    select<span class=\"token punctuation\">.</span>tabIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// We make the native widget no longer focusable</span>\n    select<span class=\"token punctuation\">.</span>previousElementSibling<span class=\"token punctuation\">.</span>tabIndex <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// We make sure that the default selected value is correctly displayed</span>\n    <span class=\"token function\">updateValue</span><span class=\"token punctuation\">(</span>select<span class=\"token punctuation\">,</span> selectedIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Each time a user clicks on an option, we update the value accordingly</span>\n    optionList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">option<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      option<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">updateValue</span><span class=\"token punctuation\">(</span>select<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Each time a user uses their keyboard on a focused widget, we update the value accordingly</span>\n    select<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'keyup'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> length <span class=\"token operator\">=</span> optionList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n          index  <span class=\"token operator\">=</span> <span class=\"token function\">getIndex</span><span class=\"token punctuation\">(</span>select<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// When the user hits the down arrow, we jump to the next option</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>keyCode <span class=\"token operator\">===</span> <span class=\"token number\">40</span> <span class=\"token operator\">&amp;&amp;</span> index <span class=\"token operator\">&lt;</span> length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// When the user hits the up arrow, we jump to the previous option</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>keyCode <span class=\"token operator\">===</span> <span class=\"token number\">38</span> <span class=\"token operator\">&amp;&amp;</span> index <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> index<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n      <span class=\"token function\">updateValue</span><span class=\"token punctuation\">(</span>select<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>In the code above, it's worth noting the use of the <a href=\"/en-US/docs/Web/API/HTMLElement/tabIndex\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">tabIndex (en-US)</a> property. Using this property is necessary to ensure that the native widget will never gain focus, and to make sure that our custom widget gains focus when the user uses his keyboard or his mouse.</p>\n<p>With that, we're done! Here's the result:</p>\n<table>\n  <thead>\n    <tr>\n      <th>Live example</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><iframe class=\"sample-code-frame\" title=\"Change states sample\" id=\"frame_change_states\" width=\"120\" height=\"130\" src=\"https://yari-demos.prod.mdn.mozit.cloud/en-US/docs/HTML/Forms/How_to_build_custom_form_widgets/Example_4/_sample_.change_states.html\" loading=\"lazy\"></iframe></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Learn/Forms/How_to_build_custom_form_controls/Example_4\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Check out the source code (en-US)</a></td>\n    </tr>\n  </tbody>\n</table>\n<p>But wait a second, are we really done?</p>"}},{"type":"prose","value":{"id":"make_it_accessible","title":"Make it accessible","isH3":false,"content":"<p>We have built something that works and though we're far from a fully-featured select box, it works nicely. But what we've done is nothing more than fiddle with the DOM. It has no real semantics, and even though it looks like a select box, from the browser's point of view it isn't one, so assistive technologies won't be able to understand it's a select box. In short, this pretty new select box isn't accessible!</p>\n<p>Fortunately, there is a solution and it's called <a href=\"/en-US/docs/Web/Accessibility/ARIA\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">ARIA (en-US)</a>. ARIA stands for \"Accessible Rich Internet Application\", and it's <a href=\"https://www.w3.org/TR/wai-aria/\" class=\"external\" rel=\" noopener\">a W3C specification</a> specifically designed for what we are doing here: making web applications and custom widgets accessible. It's basically a set of attributes that extend HTML so that we can better describe roles, states and properties as though the element we've just devised was the native element it tries to pass for. Using these attributes is dead simple, so let's do it.</p>"}},{"type":"prose","value":{"id":"the_role_attribute","title":"The <code>role</code> attribute","isH3":true,"content":"<p>The key attribute used by <a href=\"/en-US/docs/Web/Accessibility/ARIA\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">ARIA (en-US)</a> is the <a href=\"/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">role (en-US)</a> attribute. The <a href=\"/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">role (en-US)</a> attribute accepts a value that defines what an element is used for. Each role defines its own requirements and behaviors. In our example, we will use the <a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/listbox_role\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">listbox (en-US)</a> role. It's a \"composite role\", which means elements with that role expect to have children, each with a specific role (in this case, at least one child with the <code>option</code> role).</p>\n<p>It's also worth noting that ARIA defines roles that are applied by default to standard HTML markup. For example, the <a href=\"/es/docs/Web/HTML/Element/table\"><code>&lt;table&gt;</code></a> element matches the role <code>grid</code>, and the <a href=\"/es/docs/Web/HTML/Element/ul\"><code>&lt;ul&gt;</code></a> element matches the role <code>list</code>. Because we use a <a href=\"/es/docs/Web/HTML/Element/ul\"><code>&lt;ul&gt;</code></a> element, we want to make sure the <code>listbox</code> role of our widget will supersede the <code>list</code> role of the <a href=\"/es/docs/Web/HTML/Element/ul\"><code>&lt;ul&gt;</code></a> element. To that end, we will use the role <code>presentation</code>. This role is designed to let us indicate that an element has no special meaning, and is used solely to present information. We will apply it to our <a href=\"/es/docs/Web/HTML/Element/ul\"><code>&lt;ul&gt;</code></a> element.</p>\n<p>To support the <a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/listbox_role\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">listbox (en-US)</a> role, we just have to update our HTML like this:</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token comment\">&lt;!-- We add the role=\"listbox\" attribute to our top element --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>select<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>listbox<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>value<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Cherry<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token comment\">&lt;!-- We also add the role=\"presentation\" to the ul element --&gt;</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>optList<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>presentation<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- And we add the role=\"option\" attribute to all the li elements --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Cherry<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Lemon<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Banana<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Strawberry<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Apple<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect7\">\n  <p><strong>Nota:</strong> Including both the <code>role</code> attribute and a <code>class</code> attribute is only necessary if you want to support legacy browsers that do not support the <a href=\"/en-US/docs/Web/CSS/Attribute_selectors\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">CSS attribute selectors (en-US)</a>.</p>\n</div>","titleAsText":"The role attribute"}},{"type":"prose","value":{"id":"the_aria-selected_attribute","title":"The <code>aria-selected</code> attribute","isH3":true,"content":"<p>Using the <a href=\"/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">role (en-US)</a> attribute is not enough. <a href=\"/en-US/docs/Web/Accessibility/ARIA\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">ARIA (en-US)</a> also provides many states and property attributes. The more and better you use them, the better your widget will be understood by assistive technologies. In our case, we will limit our usage to one attribute: <code>aria-selected</code>.</p>\n<p>The <code>aria-selected</code> attribute is used to mark which option is currently selected; this lets assistive technologies inform the user what the current selection is. We will use it dynamically with JavaScript to mark the selected option each time the user chooses one. To that end, we need to revise our <code>updateValue()</code> function:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">updateValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">select<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> nativeWidget <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span>previousElementSibling<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> optionList <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.option'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// We make sure that all the options are not selected</span>\n  optionList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">other</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    other<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aria-selected'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'false'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// We make sure the chosen option is selected</span>\n  optionList<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aria-selected'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'true'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  nativeWidget<span class=\"token punctuation\">.</span>selectedIndex <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span>\n  value<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> optionList<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">highlightOption</span><span class=\"token punctuation\">(</span>select<span class=\"token punctuation\">,</span> optionList<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Here is the final result of all these changes (you'll get a better feel for this by trying it with an assistive technology such as <a href=\"http://www.nvda-project.org/\" class=\"external\" rel=\" noopener\">NVDA</a> or <a href=\"https://www.apple.com/accessibility/voiceover/\" class=\"external\" rel=\" noopener\">VoiceOver</a>):</p>\n<table>\n  <thead>\n    <tr>\n      <th>Live example</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><iframe class=\"sample-code-frame\" title=\"Change states sample\" id=\"frame_change_states\" width=\"120\" height=\"130\" src=\"https://yari-demos.prod.mdn.mozit.cloud/en-US/docs/HTML/Forms/How_to_build_custom_form_widgets/Example_5/_sample_.change_states.html\" loading=\"lazy\"></iframe></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Learn/Forms/How_to_build_custom_form_controls/Example_5\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Check out the final source code (en-US)</a></td>\n    </tr>\n  </tbody>\n</table>","titleAsText":"The aria-selected attribute"}},{"type":"prose","value":{"id":"conclusion","title":"Conclusion","isH3":false,"content":"<p>We have seen all the basics of building a custom form widget, but as you can see it's not trivial to do, and often it's better and easier to rely on third-party libraries instead of coding them from scratch yourself (unless, of course, your goal is to build such a library).</p>\n<p>Here are a few libraries you should consider before coding your own:</p>\n<ul>\n  <li><a href=\"http://jqueryui.com/\" class=\"external\" rel=\" noopener\">jQuery UI</a></li>\n  <li><a href=\"https://github.com/marghoobsuleman/ms-Dropdown\" class=\"external\" rel=\" noopener\">msDropDown</a></li>\n  <li><a href=\"http://www.emblematiq.com/lab/niceforms/\" class=\"external\" rel=\" noopener\">Nice Forms</a></li>\n  <li><a href=\"https://www.google.fr/search?q=HTML+custom+form+controls&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:fr:official&amp;client=firefox-a\" class=\"external\" rel=\" noopener\">And many more…</a></li>\n</ul>\n<p>If you want to move forward, the code in this example needs some improvement before it becomes generic and reusable. This is an exercise you can try to perform. Two hints to help you in this: the first argument for all our functions is the same, which means those functions need the same context. Building an object to share that context would be wise. Also, you need to make it feature-proof; that is, it needs to be able to work better with a variety of browsers whose compatibility with the Web standards they use vary. Have fun!</p><ul class=\"prev-next\">\n    <li><a class=\"button minimal only-in-en-us\" href=\"/en-US/docs/Learn/Forms/Form_validation\" title=\"Currently only available in English (US)\"> Anterior  (en-US)</a></li>\n    <li><a class=\"button minimal only-in-en-us\" href=\"/en-US/docs/Learn/Forms\" title=\"Currently only available in English (US)\"> Overview: Forms (en-US)</a></li>\n    <li><a class=\"button minimal only-in-en-us\" href=\"/en-US/docs/Learn/Forms/Sending_forms_through_JavaScript\" title=\"Currently only available in English (US)\"> Siguiente   (en-US)</a></li>\n</ul>"}},{"type":"prose","value":{"id":"in_this_module","title":"In this module","isH3":false,"content":"<ul>\n  <li><a href=\"/es/docs/Learn/Forms/Your_first_form\">Your first HTML form</a></li>\n  <li><a href=\"/es/docs/Learn/Forms/How_to_structure_a_web_form\">How to structure an HTML form</a></li>\n  <li><a href=\"/es/docs/Learn/Forms/Basic_native_form_controls\">The native form widgets</a></li>\n  <li><a href=\"/es/docs/Learn/Forms/Sending_and_retrieving_form_data\">Sending form data</a></li>\n  <li><a href=\"/en-US/docs/Learn/Forms/Form_validation\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Form data validation (en-US)</a></li>\n  <li><a href=\"/en-US/docs/Learn/Forms/How_to_build_custom_form_controls\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">How to build custom form widgets (en-US)</a></li>\n  <li><a href=\"/en-US/docs/Learn/Forms/Sending_forms_through_JavaScript\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Sending forms through JavaScript (en-US)</a></li>\n  <li><a href=\"/en-US/docs/Learn/Forms/HTML_forms_in_legacy_browsers\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">HTML forms in legacy browsers (en-US)</a></li>\n  <li><a href=\"/es/docs/Learn/Forms/Styling_web_forms\">Styling HTML forms</a></li>\n  <li><a href=\"/en-US/docs/Learn/Forms/Advanced_form_styling\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Advanced styling for HTML forms (en-US)</a></li>\n  <li><a href=\"/en-US/docs/Learn/Forms/Property_compatibility_table_for_form_controls\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Property compatibility table for form widgets (en-US)</a></li>\n</ul>"}}],"toc":[{"text":"Diseño, estructura, y semántica","id":"diseño_estructura_y_semántica"},{"text":"Bring your widget to life with JavaScript","id":"bring_your_widget_to_life_with_javascript"},{"text":"Make it accessible","id":"make_it_accessible"},{"text":"Conclusion","id":"conclusion"},{"text":"In this module","id":"in_this_module"}],"summary":"Hay muchos casos donde los widgets de formularios HTML disponibles (en-US) simplemente no son suficientes. si desea establecer un estilo avanzado (en-US) en algunos widgets como el elemento <select> o si desea proporcionar comportamientos personalizados, no tiene más opción que crear sus propios widgets.","popularity":0.0002,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"How to build custom form controls","locale":"en-US","native":"English (US)"},{"title":"Comment construire des widgets de formulaires personnalisés","locale":"fr","native":"Français"},{"title":"カスタムフォームコントロールの作成方法","locale":"ja","native":"日本語"},{"title":"How to build custom form widgets","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Как создавать пользовательские виджеты форм","locale":"ru","native":"Русский"},{"title":"如何构建表单小工具","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"es/learn/forms/how_to_build_custom_form_controls","github_url":"https://github.com/mdn/translated-content/blob/main/files/es/learn/forms/how_to_build_custom_form_controls/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/es/docs/Learn","title":"Aprende sobre desarrollo web"},{"uri":"/es/docs/Learn/Forms","title":"Formularios en HTML5"},{"uri":"/es/docs/Learn/Forms/How_to_build_custom_form_controls","title":"Cómo crear widgets de formularios personalizados"}],"pageTitle":"Cómo crear widgets de formularios personalizados - Aprende sobre desarrollo web | MDN","noIndexing":false}}