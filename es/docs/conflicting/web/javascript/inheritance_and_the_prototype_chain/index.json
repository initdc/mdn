{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Detalles del modelo de objetos","mdn_url":"/es/docs/conflicting/Web/JavaScript/Inheritance_and_the_prototype_chain","locale":"es","native":"Espa√±ol","sidebarHTML":"\n <ol>\n  <li><a href=\"/es/docs/Web/JavaScript\"><strong><em>JavaScript</em></strong></a></li>\n  <li><a href=\"/es/docs/Web/JavaScript/Tutorials\"><strong>Tutorials:</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Complete beginners</summary>\n      <ol>\n        <li><a href=\"/es/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">JavaScript basics</a></li>\n        <li><a href=\"/es/docs/Learn/JavaScript/First_steps\">JavaScript first steps</a></li>\n        <li><a href=\"/es/docs/Learn/JavaScript/Building_blocks\">JavaScript building blocks</a></li>\n        <li><a href=\"/es/docs/Learn/JavaScript/Objects\">Introducing JavaScript objects</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>JavaScript Guide</summary>\n      <ol>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Introduction\">Introduction</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Grammar_and_Types\">Grammar and types</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">Control flow and error handling</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Loops_and_iteration\">Loops and iteration</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Functions\">Functions</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Expressions_and_Operators\">Expressions and operators</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Numbers_and_dates\">Numbers and dates</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Text_formatting\">Text formatting</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Regular_Expressions\">Regular expressions</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Indexed_collections\">Indexed collections</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Keyed_collections\">Keyed collections</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Working_with_Objects\">Working with objects</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Details_of_the_Object_Model\">Details of the object model</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Using_promises\">Using promises</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Iterators_and_generators\">Iterators and generators</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Meta_programming\">Meta programming</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Modules\">JavaScript modules</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Intermediate</summary>\n      <ol>\n        <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks\">Client-side JavaScript frameworks</a></li>\n        <li><a href=\"/es/docs/Learn/JavaScript/Client-side_web_APIs\">Client-side web APIs</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">A re-introduction to JavaScript</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Data_structures\">JavaScript data structures</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Equality_comparisons_and_sameness\">Equality comparisons and sameness</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Closures\">Closures</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Advanced</summary>\n      <ol>\n        <li><a href=\"/es/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">Inheritance and the prototype chain</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Typed_arrays\">JavaScript typed arrays</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Memory_Management\">Memory Management</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/EventLoop\">Concurrency model and Event Loop</a></li>\n      </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/es/docs/Web/JavaScript/Reference\">References:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n       <summary>Built-in objects</summary>\n        <ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\">AggregateError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\">AsyncFunction</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\">AsyncGenerator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\">AsyncGeneratorFunction</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Atomics\">Atomics</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array\">BigInt64Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array\">BigUint64Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/DataView\">DataView</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\">decodeURI()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Error\">Error</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/escape\">escape()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/EvalError\">EvalError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\">FinalizationRegistry</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\">Float32Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\">Float64Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Generator\">Generator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">globalThis</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Infinity\">Infinity</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\">Int16Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\">Int32Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\">Int8Array</a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/InternalError\">InternalError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/isFinite\">isFinite()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/isNaN\">isNaN()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/NaN\">NaN</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">parseFloat()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">parseInt()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/RangeError\">RangeError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\">ReferenceError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">Reflect</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">RegExp</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/String\">String</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\">SyntaxError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">TypedArray</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\">Uint16Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\">Uint32Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">Uint8Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\">Uint8ClampedArray</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/undefined\">undefined</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/unescape\">unescape()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/URIError\">URIError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/WeakRef\">WeakRef</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\">WeakSet</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Expressions &amp; operators</summary>\n      <ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Addition_assignment\">Addition assignment (+=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Addition\">Addition (+)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Assignment\">Assignment (=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/async_function*\">async function* expression</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/await\">await</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment\">Bitwise AND assignment (&amp;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">Bitwise AND (&amp;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">Bitwise NOT (~)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment\">Bitwise OR assignment (|=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">Bitwise OR (|)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment\">Bitwise XOR assignment (^=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">Bitwise XOR (^)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/class\">class expression</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Comma_Operator\">Comma operator (,)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">Conditional (ternary) operator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Decrement\">Decrement (--)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/delete\">delete operator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">Destructuring assignment</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Division_assignment\">Division assignment (/=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Division\">Division (/)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Equality\">Equality (==)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment\">Exponentiation assignment (**=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Exponentiation\">Exponentiation (**)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/function\">Function expression</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal\">Greater than or equal (&gt;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Greater_than\">Greater than (&gt;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Grouping\">Grouping operator ( )</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/import.meta\">import.meta</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/import\">import</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/in\">in operator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Increment\">Increment (++)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Inequality\">Inequality (!=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/instanceof\">instanceof</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment\">Left shift assignment (&lt;&lt;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Left_shift\">Left shift (&lt;&lt;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal\">Less than or equal (&lt;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Less_than\">Less than (&lt;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment\">Logical AND assignment (&amp;&amp;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Logical_AND\">Logical AND (&amp;&amp;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">Logical NOT (!)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment\">Logical nullish assignment (??=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment\">Logical OR assignment (||=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Logical OR (||)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment\">Multiplication assignment (*=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Multiplication\">Multiplication (*)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/new.target\">new.target</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/new\">new operator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/null\">null</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\">Nullish coalescing operator (??)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Object_initializer\">Object initializer</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">Operator precedence</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">Optional chaining (?.)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Property_Accessors\">Property accessors</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Remainder_assignment\">Remainder assignment (%=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Remainder\">Remainder (%)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment\">Right shift assignment (&gt;&gt;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Right_shift\">Right shift (&gt;&gt;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Spread syntax (...)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Strict_equality\">Strict equality (===)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">Strict inequality (!==)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment\">Subtraction assignment (-=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Subtraction\">Subtraction (-)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/super\">super</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/this\">this</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/typeof\">typeof</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Unary_negation\">Unary negation (-)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Unary_plus\">Unary plus (+)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment\">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">Unsigned right shift (&gt;&gt;&gt;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/void\">void operator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/yield*\">yield*</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/yield\">yield</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Statements &amp; declarations</summary>\n      <ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/async_function*\">async function*</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/block\">block</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/break\">break</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/class\">class</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/const\">const</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/continue\">continue</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/debugger\">debugger</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/do...while\">do...while</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/Empty\">empty</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/export\">export</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/for-await...of\">for await...of</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/for\">for</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/function*\">function*</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/function\">function declaration</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/if...else\">if...else</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/import\">import</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/label\">label</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/let\">let</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/return\">return</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/switch\">switch</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/throw\">throw</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/try...catch\">try...catch</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/var\">var</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/while\">while</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/es/docs/Web/JavaScript/Reference/Statements/with\">with</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Functions</summary>\n      <ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow function expressions</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/get\">getter</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/set\">setter</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Classes</summary>\n      <ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Classes/Class_static_initialization_blocks\">Class static initialization blocks</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Classes/constructor\">constructor</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Classes/extends\">extends</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">Private class features</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Classes/Public_class_fields\">Public class fields</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Classes/static\">static</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Errors</summary>\n      <ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Already_has_pragma\">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Array_sort_argument\">TypeError: invalid Array.prototype.sort argument</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Bad_octal\">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Bad_radix\">RangeError: radix must be an integer</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag\">SyntaxError: invalid regular expression flag \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield\">SyntaxError: return not in function</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/BigInt_division_by_zero\">RangeError: BigInt division by zero</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/BigInt_negative_exponent\">RangeError: BigInt negative exponent</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type\">TypeError: X.prototype.y called on incompatible type</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init\">ReferenceError: can't access lexical declaration 'X' before initialization</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_assign_to_property\">TypeError: can't assign to property \"x\" on \"y\": not an object</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_be_converted_to_BigInt_because_it_isnt_an_integer\">RangeError: x can't be converted to BigInt because it isn't an integer</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_convert_BigInt_to_number\">TypeError: can't convert BigInt to number</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_convert_x_to_BigInt\">TypeError: can't convert x to BigInt</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible\">TypeError: can't define property \"x\": \"obj\" is not extensible</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_delete\">TypeError: property \"x\" is non-configurable and can't be deleted</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property\">TypeError: can't redefine non-configurable property \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_use_nullish_coalescing_unparenthesized\">SyntaxError: cannot use `??` unparenthesized within `||` and `&amp;&amp;` expressions</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value\">TypeError: cyclic object value</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Dead_object\">TypeError: can't access dead object</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode\">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage\">ReferenceError: deprecated caller or arguments usage</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Deprecated_expression_closures\">Warning: expression closures are deprecated</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Deprecated_octal\">SyntaxError: \"0\"-prefixed octal literals and octal escape seq. are deprecated</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma\">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Deprecated_String_generics\">Warning: String.x is deprecated; use String.prototype.x instead</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Deprecated_toLocaleFormat\">Warning: Date.prototype.toLocaleFormat is deprecated</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Equal_as_assign\">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Getter_only\">TypeError: setting getter-only property \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Hash_outside_class\">SyntaxError: Unexpected '#' used outside of class body</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Identifier_after_number\">SyntaxError: identifier starts immediately after numeric literal</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Illegal_character\">SyntaxError: illegal character</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/in_operator_no_object\">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\">RangeError: invalid array length</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side\">SyntaxError: invalid assignment left-hand side</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax\">SyntaxError: invalid BigInt syntax</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment\">TypeError: invalid assignment to const \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_date\">RangeError: invalid date</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer\">SyntaxError: for-in loop head declarations may not have initializers</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer\">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand\">TypeError: invalid 'instanceof' operand 'x'</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/is_not_iterable\">TypeError: 'x' is not iterable</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse\">SyntaxError: JSON.parse: bad parsing</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Malformed_formal_parameter\">SyntaxError: Malformed formal parameter</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Malformed_URI\">URIError: malformed URI sequence</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list\">SyntaxError: missing ] after element list</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id\">SyntaxError: missing : after property id</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body\">SyntaxError: missing } after function body</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list\">SyntaxError: missing } after property list</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter\">SyntaxError: missing formal parameter</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const\">SyntaxError: missing = in const declaration</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator\">SyntaxError: missing name after . operator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\">SyntaxError: missing ) after argument list</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition\">SyntaxError: missing ) after condition</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_semicolon_before_statement\">SyntaxError: missing ; before statement</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/More_arguments_needed\">TypeError: More arguments needed</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count\">RangeError: repeat count must be non-negative</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/No_non-null_object\">TypeError: \"x\" is not a non-null object</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/No_properties\">TypeError: \"x\" has no properties</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/No_variable_name\">SyntaxError: missing variable name</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element\">TypeError: can't delete non-configurable array element</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint\">RangeError: argument is not a valid code point</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Not_a_constructor\">TypeError: \"x\" is not a constructor</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Not_a_function\">TypeError: \"x\" is not a function</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Not_defined\">ReferenceError: \"x\" is not defined</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Precision_range\">RangeError: precision is out of range</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Property_access_denied\">Error: Permission denied to access property \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Read-only\">TypeError: \"x\" is read-only</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter\">SyntaxError: redeclaration of formal parameter \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value\">TypeError: Reduce of empty array with no initial value</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Reserved_identifier\">SyntaxError: \"x\" is a reserved identifier</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large\">RangeError: repeat count must be less than infinity</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Stmt_after_return\">Warning: unreachable code after return statement</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params\">SyntaxError: \"use strict\" not allowed in function with non-simple parameters</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Too_much_recursion\">InternalError: too much recursion</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Undeclared_var\">ReferenceError: assignment to undeclared variable \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Undefined_prop\">ReferenceError: reference to undefined property \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Unexpected_token\">SyntaxError: Unexpected token</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Unexpected_type\">TypeError: \"x\" is (not) \"y\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement\">SyntaxError: function statement requires a name</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Unparenthesized_unary_expr_lhs_exponentiation\">SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Unterminated_string_literal\">SyntaxError: unterminated string literal</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Misc</summary>\n      <ol>\n        <li><a href=\"/es/docs/Web/JavaScript/JavaScript_technologies_overview\">JavaScript technologies overview</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Lexical_grammar\">Lexical grammar</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Data_structures\">JavaScript data structures</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">Enumerability and ownership of properties</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Iteration_protocols\">Iteration protocols</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\">Transitioning to strict mode</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Template_literals\">Template literals</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\">Deprecated features</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div id=\"sect1\"> <ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/es/docs/Web/JavaScript/Guide/Working_with_Objects\">¬´ Anterior</a></li>\n    <li><a class=\"button minimal\" href=\"/es/docs/Web/JavaScript/Guide/Iterators_and_Generators\">Siguiente  ¬ª</a></li>\n</ul></div>\n\n<p class=\"summary\">JavaScript es un lenguaje orientado a objetos basado en prototipos en lugar de clases. Debido a esta diferencia, puede ser menos evidente c√≥mo JavaScript te permite crear jerarqu√≠as de objetos y herencia de propiedades y sus valores. Este cap√≠tulo intenta clarificar estos puntos.</p>\n\n<p>Este cap√≠tulo asume que tienes alguna familiaridad con JavaScript y que has usado funciones de JavaScript para crear objetos sencillos.</p>"}},{"type":"prose","value":{"id":"lenguajes_basados_en_clases_vs._basados_en_prototipos","title":"Lenguajes basados en clases vs. basados en prototipos","isH3":false,"content":"<p>Los lenguajes orientados a objetos basados en clases, como Java y C++, se basan en el concepto de dos entidades distintas: clases e instancias.</p>\n\n<ul>\n <li>Una <em>clase</em> define todas las propiedades (considerando como propiedades los m√©todos y campos de Java, o los miembros de C++) que caracterizan un determinado conjunto de objetos. Una clase es una entidad abstracta, m√°s que cualquier miembro en particular del conjunto de objetos que describe. Por ejemplo, la clase <span style=\"font-size: 14px; line-height: 1.5em;\"> </span><code style=\"font-size: 14px;\">Empleado</code><span style=\"font-size: 14px; line-height: 1.5em;\"> puede representar al conjunto de todos los empleados.</span></li>\n <li>Una <em>instancia</em>, por otro lado, es la instanciaci√≥n de una clase; es decir, uno de sus miembros. Por ejemplo, <code>Victoria</code> podr√≠a ser una instancia de la clase <code>Empleado</code>, representando a un individuo en particular como un empleado. Una instancia tiene exactamente las mismas propiedades de su clase padre (ni m√°s, ni menos).</li>\n</ul>\n\n<p>Un lenguaje basado en prototipos, como JavaScript, no hace esta distinci√≥n: simplemente tiene objetos. Un lenguaje basado en prototipos toma el concepto de <em>objeto protot√≠pico</em>, un objeto que se utiliza como una plantilla a partir de la cual se obtiene el conjunto inicial de propiedades de un nuevo objeto. Cualquier objeto puede especificar sus propias propiedades, ya sea cuando es creado o en tiempo de ejecuci√≥n. Adicionalmente, cualquier objeto puede ser utilizado como el <em>prototipo</em> de otro objeto, permitiendo al segundo objeto compartir las propiedades del primero.</p>"}},{"type":"prose","value":{"id":"definici√≥n_de_una_clase","title":"Definici√≥n de una clase","isH3":true,"content":"<p>En los lenguajes basados en clases defines una clase en una <em>definici√≥n de clase</em> separada. En esa definici√≥n puedes especificar m√©todos especiales, llamados <em>constructores</em>, para crear instancias de la clase. Un m√©todo constructor puede especificar valores iniciales para las propiedades de la instancia y realizar otro procesamiento de inicializaci√≥n apropiado en el momento de la creaci√≥n. Se utiliza el operador <code>new</code> junto al constructor para crear instancias de clases.</p>\n\n<p>JavaScript sigue un modelo similar, pero sin tener la definici√≥n de clase separada del constructor. En su lugar, se define una funci√≥n constructor para crear objetos con un conjunto inicial de propiedades y valores. Cualquier funci√≥n JavaScript puede utilizarse como constructor. Se utiliza el operador <code>new</code> con una funci√≥n constructor para crear un nuevo objeto.</p>\n\n\n\n<div class=\"note notecard\" id=\"sect2\">\n<p>Nota que ECMAScript 2015 introduce la <a href=\"/en-US/docs/Web/JavaScript/Reference/Classes\">declaraci√≥n de clases</a>:</p>\n\n<blockquote>\n<p>Las Clases en JavaScript, introducidas en ECMAScript 2015, son b√°sicamente un retoque sint√°ctico sobre la herencia basada en prototipos de JavaScript. La sintaxis <em>class</em> no introduce un nuevo modelo de herencia orientado a objetos en Javascript.</p>\n</blockquote>\n</div>"}},{"type":"prose","value":{"id":"subclases_y_herencia","title":"Subclases y herencia","isH3":true,"content":"<p>En un lenguaje basado en clases, creas una jerarqu√≠a de clases a trav√©s de la definici√≥n de clases. En una definici√≥n de clase, puedes especificar que la nueva clase es una <em>subclase</em> de una clase existente. Esta subclase hereda todas las propiedades de la superclase y - adem√°s -puede a√±adir nuevas propiedades o modificar las heredadas. Por ejemplo, supongamos que la clase <code>Employee</code> tiene s√≥lo las propiedades <code>name</code> y <code>dept</code>, y que <code>Manager</code> es una subclase de <code>Employee</code> que a√±ade la propiedad <code>reports</code>. En este caso, una instancia de la clase <code>Manager</code> tendr√≠a las tres propiedades: <code>name</code>, <code>dept</code>, y <code>reports</code>.</p>\n\n<p>JavaScript implementa la herencia permitiendo asociar un objeto protot√≠pico con cualquier funci√≥n <em>constructor</em>. De esta forma puedes crear una relaci√≥n entre <code>Employee</code> y <code>Manager</code>, pero usando una terminolog√≠a diferente. En primer lugar, se define la funci√≥n <em>constructor </em>para <code>Employee, </code>especificando las propiedades <code>name</code> y <code>dept</code>. Luego, se define la funci√≥n <em>constructor</em> para <code>Manager</code>, especificando la propiedad  <code>reports</code>. Por √∫ltimo, se asigna un nuevo objeto derivado de <code>Employee.prototype</code> como el <code>prototype</code> para la funci√≥n <em>constructor</em> de <code>Manager</code>. De esta forma, cuando se crea un nuevo <code>Manager</code>, este hereda las propiedades <code>name</code> y <code>dept</code> del objeto <code>Employee</code>.</p>"}},{"type":"prose","value":{"id":"a√±adir_y_quitar_propiedades","title":"A√±adir y quitar propiedades","isH3":true,"content":"<p>En lenguajes basados en clases t√≠picamente se crea una clase en tiempo de compilaci√≥n y luego se crean instancias de la clase, ya sea en tiempo de compilaci√≥n o en tiempo de ejecuci√≥n. No se puede cambiar el n√∫mero o el tipo de propiedades de una clase una vez que ha sido definida. En JavaScript, sin embargo, en tiempo de ejecuci√≥n se pueden a√±adir y quitar propiedades a un objeto. Si se a√±ade una propiedad a un objeto que est√° siendo utilizado como el prototipo de otros objetos, los objetos para los que es un prototipo tambi√©n tienen la nueva propiedad a√±adida.</p>"}},{"type":"prose","value":{"id":"resumen_de_las_diferencias","title":"Resumen de las diferencias","isH3":true,"content":"<p>La siguiente tabla muestra  un peque√±o resumen de algunas de estas diferencias. El resto de este cap√≠tulo describe los detalles del uso de los constructores JavaScript y los prototipos para crear una jerarqu√≠a de objetos, y compara esta forma de herencia no basada en clases con la basada en clases que utiliza Java.</p>\n\n<table class=\"fullwidth-table\">\n <caption>Tabla 8.1 Comparaci√≥n de los sistemas de objetos basados en clases  (Java) y basados en prototipos (JavaScript)</caption>\n <thead>\n  <tr>\n   <th scope=\"col\"><strong>Categor√≠a</strong></th>\n   <th scope=\"col\"><strong>Basado en clases (Java)</strong></th>\n   <th scope=\"col\"><strong>Basado en prototipos (JavaScript)</strong></th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td><strong>Clase vs. Instancia</strong></td>\n   <td>La clase y su instancia son entidades distintas.</td>\n   <td>Todos los objetos pueden heredar de otro objeto.</td>\n  </tr>\n  <tr>\n   <td><strong>Definici√≥n</strong></td>\n   <td>Define una clase con una definici√≥n <em>class</em>; se instancia una clase con m√©todos constructores.</td>\n   <td>Define y crea un conjunto de objetos con funciones constructoras.</td>\n  </tr>\n  <tr>\n   <td><strong>Creaci√≥n de objeto</strong></td>\n   <td>Se crea un objeto con el operador <code>new</code>.</td>\n   <td>Se crea un objeto con el operador <code>new</code>.</td>\n  </tr>\n  <tr>\n   <td><strong>Construcci√≥n de jerarqu√≠a de objetos</strong></td>\n   <td>Se construye una jerarqu√≠a de objetos utilizando definiciones de clases para definir subclases de clases existentes.</td>\n   <td>\n    <p>Se construye una jerarqu√≠a de objetos mediante la asignaci√≥n de un objeto como el prototipo asociado a una funci√≥n constructora.</p>\n   </td>\n  </tr>\n  <tr>\n   <td><strong>Herencia</strong></td>\n   <td>Se heredan propiedades siguiendo la cadena de clases.</td>\n   <td>Se heredan propiedades siguiendo la cadena de prototipos.</td>\n  </tr>\n  <tr>\n   <td><strong>Extensi√≥n de propiedades</strong></td>\n   <td>La definici√≥n de una clase especifica <em>todas</em> las propiedades de todas las instancias de esa clase. No se puede a√±adir propiedades din√°micamente en tiempo de ejecuci√≥n.</td>\n   <td>\n    <p>El conjunto <em>inicial</em> de propiedades lo determina la funci√≥n constructor o el prototipo. Se pueden a√±adir y quitar propiedades din√°micamente a objetos espec√≠ficos o a un conjunto de objetos.</p>\n   </td>\n  </tr>\n </tbody>\n</table>"}},{"type":"prose","value":{"id":"el_ejemplo_employee","title":"El ejemplo employee","isH3":false,"content":"<p>El resto de este capitulo utiliza la jerarqu√≠a <code>employee</code> que se muestra en la siguiente figura.</p>\n\n<div class=\"twocolumns\" id=\"sect3\">\n\n\n\n\n\n\n\n\n<p><img alt=\"\" class=\"internal\" src=\"/@api/deki/files/4452/=figure8.1.png\" loading=\"lazy\"></p>\n\n<p><small><strong>Figura 8.1: Una jerarqu√≠a de objetos sencilla</strong></small></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>Este ejemplo utiliza los siguientes objetos:</p>\n\n<ul>\n <li><code>Employee</code> tiene las propiedades <code>name</code> (cuyo valor por defecto es un string vac√≠o) y <code>dept</code> (cuyo valor por defecto es \"general\").</li>\n <li><code>Manager</code> est√° basado en <code>Employee</code>. A√±ade la propiedad<code> reports</code> (cuyo valor por defecto es un array vac√≠o, en la que se pretende almacenar un array de objetos <code>Employee</code> como su valor).</li>\n <li><code>WorkerBee</code> tambi√©n est√° basado en <code>Employee</code>. A√±ade la propiedad <code>projects</code> (cuyo valor por defecto es un array vac√≠o en el que se pretende almacenar un array de strings como su valor).</li>\n <li><code>SalesPerson</code> est√° basado en <code>WorkerBee</code>. A√±ade la propiedad <code>quota</code> (cuyo valor por defecto es 100). Tambi√©n reemplaza la propiedad <code>dept</code> con el valor \"sales\", indicando que todas las salespersons est√°n en el mismo departamento.</li>\n <li><code>Engineer</code> se basa en <code>WorkerBee</code>. A√±ade la propiedad <code>machine</code> (cuyo valor por defecto es un string vac√≠o) y tambi√©n reemplaza la propiedad  <code>dept</code> con el valor \"engineering\".</li>\n</ul>\n\n\n</div>\n\n\n\n<ul>\n</ul>"}},{"type":"prose","value":{"id":"creaci√≥n_de_la_jerarqu√≠a","title":"Creaci√≥n de la jerarqu√≠a","isH3":false,"content":"<p>Hay varias formas de definir funciones constructor para implementar la jerarqu√≠a Employee. Elegir una u otra forma depende sobre todo de lo que quieras y puedas ser capaz de hacer con tu aplicaci√≥n.</p>\n\n<p>Esta secci√≥n muestra como utilizar definiciones muy sencillas (y comparativamente inflexibles) para mostrar como hacer funcionar la herencia. En estas definiciones no puedes especificar valores de propiedades cuando creas un objeto. El nuevo objeto que se crea simplemente obtiene valores por defecto, que puedes cambiar posteriormente. La figura 8.2 muestra la jerarqu√≠a con estas definiciones sencillas.</p>\n\n<p>En una aplicaci√≥n real probablemente definir√≠as constructores que proporcionen valores a las propiedades en el momento de la creaci√≥n del objeto (para m√°s informaci√≥n ver <a href=\"#more_flexible_constructors\">Constructores m√°s flexibles</a>). Por ahora, estas definiciones sencillas nos sirven para mostrar como funciona la herencia.</p>\n\n<p><img alt=\"figure8.2.png\" class=\"default internal\" src=\"/@api/deki/files/4390/=figure8.2.png\" loading=\"lazy\"><br>\n <small><strong>Figura 8.2: Definiciones de los objetos de la jerarqu√≠a Employee</strong></small></p>\n\n<p>Las siguientes definiciones de <code>Employee</code> en Java y en Javascript son similares, la √∫nica diferencia es que en Java necesitas especificar el tipo para cada propiedad, no as√≠ en Javascript (esto es debido a que Java es un <a href=\"https://es.wikipedia.org/wiki/Tipado_fuerte\" class=\"external\" rel=\" noopener\">lenguaje fuertemente tipado</a>, mientras que Javascript es un lenguaje d√©bilmente tipado). </p>\n\n<table class=\"standard-table\">\n <thead>\n  <tr>\n   <th scope=\"col\">JavaScript</th>\n   <th scope=\"col\">Java</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td>\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Employee</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dept <span class=\"token operator\">=</span> <span class=\"token string\">\"general\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n   </td>\n   <td>\n    <div class=\"code-example\"><pre class=\"brush: java notranslate\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> dept<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dept <span class=\"token operator\">=</span> <span class=\"token string\">\"general\"</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n</code></pre></div>\n   </td>\n  </tr>\n </tbody>\n</table>\n\n<p>Las definiciones de <code>Manager</code> y <code>WorkerBee</code> ilustran la diferencia a la hora de especificar el siguiente objeto en la jerarqu√≠a de herencia. En JavaScript se a√±ade una instancia protot√≠pica como el valor de la propiedad <code>prototype</code> de la funci√≥n constructora, as√≠ sobre escribe <code>prototype.constructor</code> con la funci√≥n constructora. Puede hacerse en cualquier momento una vez definido el constructor. En Java se especifica la superclase en la definici√≥n de la clase. No se puede cambiar la superclase fuera de la definici√≥n de la clase.</p>\n\n<table class=\"standard-table\">\n <thead>\n  <tr>\n   <th scope=\"col\">JavaScript</th>\n   <th scope=\"col\">Java</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td>\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Manager</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reports <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Manager</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">WorkerBee</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>projects <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">WorkerBee</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n   </td>\n   <td>\n    <div class=\"code-example\"><pre class=\"brush: java notranslate\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Manager</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> reports<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">Manager</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reports <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WorkerBee</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> projects<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">WorkerBee</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>projects <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n</code></pre></div>\n   </td>\n  </tr>\n </tbody>\n</table>\n\n<p>Las definiciones de <code>Engineer</code> y <code>SalesPerson</code> crean objetos que descienden de <code>WorkerBee</code> y por tanto de <code>Employee</code>. Un objeto de √©ste tipo tiene todas las propiedades de los objetos por encima de √©l en la cadena. Adem√°s, estas definiciones reemplazan los valores heredados de la propiedad <code>dept</code> con nuevos valores espec√≠ficos para estos objetos.</p>\n\n<table class=\"standard-table\">\n <thead>\n  <tr>\n   <th scope=\"col\">JavaScript</th>\n   <th scope=\"col\">Java</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td>\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">SalesPerson</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dept <span class=\"token operator\">=</span> <span class=\"token string\">\"sales\"</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quota <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">SalesPerson</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WorkerBee</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Engineer</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dept <span class=\"token operator\">=</span> <span class=\"token string\">\"engineering\"</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>machine <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Engineer</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WorkerBee</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n   </td>\n   <td>\n    <div class=\"code-example\"><pre class=\"brush: java notranslate\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SalesPerson</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WorkerBee</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> quota<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">SalesPerson</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dept <span class=\"token operator\">=</span> <span class=\"token string\">\"sales\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quota <span class=\"token operator\">=</span> <span class=\"token number\">100.0</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Engineer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WorkerBee</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> machine<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">Engineer</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dept <span class=\"token operator\">=</span> <span class=\"token string\">\"engineering\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>machine <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n   </td>\n  </tr>\n </tbody>\n</table>\n\n<p>Usando estas definiciones puedes crear instancias de estos objetos, que adquieren valores por defecto para sus propiedades. La figura 8.3 revela el uso de estas definiciones JavaScript para crear nuevos objetos y muestra los valores de las propiedades de estos nuevos objetos.</p>\n\n<div class=\"note notecard\" id=\"sect4\">\n<p><strong>Nota:</strong> El termino <em><em>instancia</em></em> tiene un significado t√©cnico espec√≠fico en lenguajes basados en clases, donde una instancia es un ejemplar individual de una clase y es fundamentalmente diferente a la clase. En JavaScript, \"instancia\" no tiene este mismo significado ya que JavaScript no hace diferencia entre clases e instancias. Sin embargo, al hablar de JavaScript, \"instancia\" puede ser usado informalmente para indicar que un objeto ha sido creado usando una funci√≥n constructora particular. En este ejemplo, puedes decir que <code><code>jane</code></code> es una instancia de <code><code>Engineer</code></code>. De la misma manera, aunque los t√©rminos <em><em>parent</em>, <em>child</em>, <em>ancestor</em></em>, y <em><em>descendant</em></em> no tienen un significado formal en JavaScript;  puedes usarlos informalmente para referirte a objetos que est√°n por encima o por debajo de la cadena de prototipos.</p>\n</div>"}},{"type":"prose","value":{"id":"creando_objetos_con_definiciones_simples","title":"Creando objetos con definiciones simples","isH3":true,"content":"<p>La jerarqu√≠a de objetos que se muestra en la figura se corresponde con el c√≥digo escrito en el lado derecho.</p>\n\n<p><img alt=\"figure8.3.png\" class=\"default internal\" id=\"figure8.3\" src=\"/@api/deki/files/4403/=figure8.3.png\" loading=\"lazy\"><br>\n <a id=\"8.3\" name=\"8.3\"><small><strong>Figura 8.3: Creaci√≥n de objetos mediante definiciones simples</strong></small></a></p>\n\n<p><strong>Objetos individuales = Jim, Sally, Mark, Fred, Jane, etc.<br>\n \"Instancias\" creadas con <code><em>constructor</em></code></strong></p>"}},{"type":"prose","value":{"id":"propiedades_de_objetos","title":"Propiedades de objetos","isH3":false,"content":"<p>Esta secci√≥n describe c√≥mo heredan los objetos sus propiedades de otros objetos en la cadena de prototipos y qu√© ocurre cuando se a√±ade una propiedad en tiempo de ejecuci√≥n.</p>"}},{"type":"prose","value":{"id":"herencia_de_propiedades","title":"Herencia de propiedades","isH3":true,"content":"<p>Supongamos que creas el objeto <code>mark</code> como un <code>WorkerBee</code> (como se muestra en la <a href=\"#8.3\">Figura 8.3</a>) con la siguiente sentencia:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> mark <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WorkerBee</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Cuando el int√©rprete de JavaScript encuentra el operador <code>new</code>, crea un nuevo objeto gen√©rico y establece impl√≠citamente el valor de la propiedad interna [[Prototype]] con el valor de <code>WorkerBee.prototype</code> y pasa este nuevo objeto como <code>this</code> a la funci√≥n constructora de WorkerBee. La propiedad interna [[Prototype]] (que puede observarse como <code>__proto__</code>, la propiedad cuyo nombe tiene dos guiones al principio y al final) determina la cadena de prototipo usada para devolver los valores de la propiedades cuando se accede a ellas. Una vez que estas propiedades tienen sus valores, JavaScript devuelve el nuevo objeto y la sentencia de asignaci√≥n asigna el nuevo objeto ya inicializado a la variable <code>mark</code>.</p>\n\n<p>Este proceso no asigna expl√≠citamente valores al objeto <code>mark</code> (valores <em>locales</em>) para las propiedades que <code>mark</code> hereda de la cadena de prototipos. Cuando solicitas valor de una propiedad, JavaScript primero comprueba si existe un valor para esa propiedad en el objeto. Si existe, se devuelve ese valor; sino, JavaScript comprueba la cadena de prototipos (usando la propiedad  <code>__proto__</code>). Si un objeto en la cadena de prototipos tiene un valor para esa propiedad, se devuelve ese valor. Si no existe en ning√∫n objeto de la cadena de prototipos un valor para esa propiedad, JavaScript dice que el objeto no tiene esa propiedad. En el caso de nuestro objeto <code>mark</code>, √©ste tiene las siguientes propiedades y valores:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>mark<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\nmark<span class=\"token punctuation\">.</span>dept <span class=\"token operator\">=</span> <span class=\"token string\">\"general\"</span><span class=\"token punctuation\">;</span>\nmark<span class=\"token punctuation\">.</span>projects <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>El objeto <code>mark</code> hereda valores para las propiedades <code>name</code> y <code>dept</code> su objeto prototipico que enlaza en <code>mark.__proto__</code>. Se le asigna un valor local la propiedad <code>projects</code> a trav√©s del constructor <code>WorkerBee</code>.  De esta forma se heredan propiedades y sus valores en JavaScript. En la secci√≥n <a href=\"#property_inheritance_revisited\">Property inheritance revisited</a> se discuten algunos detalles de este proceso.</p>\n\n<p>Debido a que estos constructores no permiten especificar valores espec√≠ficos de instancia, esta informaci√≥n es gen√©rica. Los valores de las propiedades son los valores por omisi√≥n, compartidos por todos los objetos nuevos creados a partir de <code>WorkerBee</code>. Por supuesto se pueden cambiar despu√©s los valores de estas propiedades. Por ejemplo podr√≠amos dar valores con informaci√≥n espec√≠fica a <code>mark</code> de la siguiente forma:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>mark<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Doe, Mark\"</span><span class=\"token punctuation\">;</span>\nmark<span class=\"token punctuation\">.</span>dept <span class=\"token operator\">=</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">;</span>\nmark<span class=\"token punctuation\">.</span>projects <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"navigator\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>"}},{"type":"prose","value":{"id":"a√±adir_propiedades","title":"A√±adir propiedades","isH3":true,"content":"<p>En JavaScript puedes a√±adir propiedades a los objetos en tiempo de ejecuci√≥n. No est√°s limitado a utilizar solo las  propiedades que proporciona la funci√≥n constructora. Para a√±adir una propiedad que es especifica para un objeto determinado, se le asigna un valor a la propiedad del objeto de la siguiente forma:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>mark<span class=\"token punctuation\">.</span>bonus <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Ahora el objeto <code>mark</code> tiene una propiedad <code>bonus</code>, pero ning√∫n otro objeto creado con la funci√≥n <em>constructor</em> <code>WorkerBee</code> tiene esta propiedad.</p>\n\n<p>Si a√±ades una nueva propiedad a un objeto que se esta utilizando como el prototipo de una funci√≥n <em>constructor</em>, dicha propiedad se a√±ade a todos los objetos que heredan propiedades de dicho prototipo. Por ejemplo, puedes a√±adir una propiedad <code>specialty</code> a todos los empleados con la siguientes sentencia:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>specialty <span class=\"token operator\">=</span> <span class=\"token string\">\"none\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Tan pronto JavaScript ejecuta esta sentencia, el objeto <code>mark</code> tambi√©n tienen la propiedad <code>specialty</code> con el valor <code>\"none\"</code>. La siguiente figura muestra el efecto de a√±adir esta propiedad al prototipo  <code>Employee</code> y despu√©s reemplazarlo por el prototipo <code>Engineer</code>.</p>\n\n<p><img alt=\"\" class=\"internal\" src=\"/@api/deki/files/4422/=figure8.4.png\" loading=\"lazy\"><br>\n <small><strong>Figura 8.4: A√±adir propiedades</strong></small></p>"}},{"type":"prose","value":{"id":"constructores_m√°s_flexibles","title":"Constructores m√°s flexibles","isH3":false,"content":"<p>Las funciones constructor que se han mostrado hasta ahora no permiten especificar valores a las propiedades cuando se crea una instancia. Al igual que en Java, se pueden proporcionar argumentos a los constructores para inicializar los valores de las propiedades de las instancias. La siguiente figura muestra una forma de hacerlo.</p>\n\n<p><img alt=\"\" class=\"internal\" id=\"figure8.5\" src=\"/@api/deki/files/4423/=figure8.5.png\" loading=\"lazy\"><br>\n <a id=\"8.5\" name=\"8.5\"><small><strong>Figura 8.5: Especificaci√≥n de propiedades en un construcci√≥n, toma 1</strong></small></a></p>\n\n<p>La siguiente tabla muestra las definiciones Java y JavaScript para estos objetos.</p>\n\n<table class=\"standard-table\">\n <thead>\n  <tr>\n   <th scope=\"col\">JavaScript</th>\n   <th scope=\"col\">Java</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td>\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Employee</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> dept</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dept <span class=\"token operator\">=</span> dept <span class=\"token operator\">||</span> <span class=\"token string\">\"general\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n   </td>\n   <td>\n    <div class=\"code-example\"><pre class=\"brush: java notranslate\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> dept<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"general\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"general\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> dept<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dept <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n   </td>\n  </tr>\n  <tr>\n   <td>\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">WorkerBee</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">projs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>projects <span class=\"token operator\">=</span> projs <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">WorkerBee</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n   </td>\n   <td>\n    <div class=\"code-example\"><pre class=\"brush: java notranslate\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WorkerBee</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> projects<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">WorkerBee</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">WorkerBee</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> projs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      projects <span class=\"token operator\">=</span> projs<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div>\n   </td>\n  </tr>\n  <tr>\n   <td>\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Engineer</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">mach</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dept <span class=\"token operator\">=</span> <span class=\"token string\">\"engineering\"</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>machine <span class=\"token operator\">=</span> mach <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Engineer</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WorkerBee</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n   </td>\n   <td>\n    <div class=\"code-example\"><pre class=\"brush: java notranslate\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Engineer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WorkerBee</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> machine<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">Engineer</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      dept <span class=\"token operator\">=</span> <span class=\"token string\">\"engineering\"</span><span class=\"token punctuation\">;</span>\n      machine <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">Engineer</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> mach<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      dept <span class=\"token operator\">=</span> <span class=\"token string\">\"engineering\"</span><span class=\"token punctuation\">;</span>\n      machine <span class=\"token operator\">=</span> mach<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n   </td>\n  </tr>\n </tbody>\n</table>\n\n<p>Estas definiciones JavaScript realizan un uso idiom√°tico especial para asignar valores por defecto:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>El operador l√≥gico OR de JavaScript (<code>||</code>) eval√∫a su primer argumento. Si dicho argumento se convierte a true, el operador lo devuelve. Si no, el operador devuelve el valor del segundo argumento. Por tanto, esta linea de c√≥digo comprueba si <code>name</code> tiene un valor √∫til para la propiedad <code>name</code>, en cuyo caso asigna a <code>this.name</code> este valor. En caso contrario asigna a  <code>this.name</code> el string vac√≠o. Este capitulo emplea este uso idiom√°tico por abreviaci√≥n. Sin embargo puede resultar chocante a primera vista.</p>\n\n<div class=\"note notecard\" id=\"sect5\">\n<p><strong>Nota:</strong> Esto puede no resultar seg√∫n lo esperado si la funci√≥n <em>constructor</em> es llamada con argumentos que se convierten a <code>false</code> (como <code>0</code> (cero) y una cadena vac√≠a (<code><code>\"\"</code></code>). En este caso el valor por defecto resulta elegido en lugar del valor proporcionado en la llamada al constructor.</p>\n</div>\n\n<p>Con estas definiciones, cuando creas una instancia de un objeto, puedes especificar valores para las propiedades definidas localmente. Tal como se muestra en <a href=\"#8.5\">Figura 8.5</a>, puedes utilizar la siguiente sentencia para crear un nuevo <code>Engineer</code>:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> jane <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Engineer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"belau\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Ahora las propiedades de <code>jane</code> son:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>jane<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\njane<span class=\"token punctuation\">.</span>dept <span class=\"token operator\">==</span> <span class=\"token string\">\"engineering\"</span><span class=\"token punctuation\">;</span>\njane<span class=\"token punctuation\">.</span>projects <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\njane<span class=\"token punctuation\">.</span>machine <span class=\"token operator\">==</span> <span class=\"token string\">\"belau\"</span>\n</code></pre></div>\n\n<p>Nota que con estas definiciones no puedes dar un valor inicial a las propiedades heredadas como <code>name</code>. Si quieres especificar un valor inicial para las propiedades heredadas en  JavaScript tienes que que a√±adir m√°s c√≥digo a la funci√≥n constructora.</p>\n\n<p>Hasta ahora, la funci√≥n constructora ha creado un objeto gen√©rico y ha especificado propiedades y valores locales para el nuevo objeto. Puedes hacer que el constructor a√±ada m√°s propiedades llamando directamente a la funci√≥n <em>constructor</em> de un objeto que est√© m√°s arriba en la cadena de prototipos. La siguiente figura muestra estas definiciones.</p>\n\n\n\n<p><img alt=\"\" class=\"internal\" src=\"/@api/deki/files/4430/=figure8.6.png\" loading=\"lazy\"><br>\n <small><strong>Figura 8.6 Especificaci√≥n de propiedades en un constructor, toma 2</strong></small></p>\n\n<p>Veamos los detalles de una de estas definiciones. Aqu√≠ tenemos la nueva definici√≥n del <em>constructor</em> <code>Engineer</code>:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Engineer</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> projs<span class=\"token punctuation\">,</span> mach</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>base <span class=\"token operator\">=</span> WorkerBee<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">base</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"engineering\"</span><span class=\"token punctuation\">,</span> projs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>machine <span class=\"token operator\">=</span> mach <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n\n<p>Supongamos que se crea un nuevo <code>Engineer</code> de esta forma:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> jane <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Engineer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Doe, Jane\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"navigator\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"javascript\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"belau\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>JavaScript sigue los siguientes pasos:</p>\n\n<ol>\n <li>El operador <code>new</code> crea un nuevo objeto gen√©rico y le asigna su propiedad <code>__proto__</code> a <code>Engineer.prototype</code>.</li>\n <li>El operador <code>new</code> pasa el nuevo objeto al <em>constructor</em> <code>Engineer</code> como el valor de la palabra reservada <code>this</code>.</li>\n <li>El <em>constructor</em> crea una nueva propiedad llamada <code>base</code> para ese objeto y le asigna el valor del constructor <code>WorkerBee</code>. Esto hace que el constructor <code>WorkerBee</code> pase a ser un m√©todo del objeto <code>Engineer</code>. El nombre de esta propiedad (<code>base</code>) no es especial. Puede usarse cualquier nombre de propiedad, si bien <code>base</code> evoca el uso que se le va a dar.</li>\n <li>\n  <p>El constructor llama al m√©todo <code>base</code>, pas√°ndole como argumentos dos de los argumentos que se le han pasado al constructor (<code>\"Doe, Jane\"</code> y <code>[\"navigator\", \"javascript\"]</code>) y tambi√©n el string <code>\"engineering\"</code>. Usar expl√≠citamente <code>\"engineering\"</code> en el constructor indica que todos los objetos <code>Engineer</code> tienen el mismo valor para la propiedad heredada <code>dept</code>, y este valor reemplaza el valor heredado de <code>Employee</code>.</p>\n </li>\n <li>Como <code>base</code> es un m√©todo de <code>Engineer</code>, en la llamada a <code>base</code>, JavaScript liga la palabra <code>this</code> al objeto creado en el paso 1. De esta forma, la funci√≥n <code>WorkerBee</code> a su vez pasa los argumentos <code>\"Doe, Jane\"</code> y <code>\"engineering\"</code> a la funci√≥n constructor <code>Employee</code>. Cuando retorna la llamada de la funci√≥n constructor <code>Employee</code>, la funci√≥n <code>WorkerBee</code> utiliza el resto de argumentos para asignarle un valor a la propiedad <code>projects</code>.</li>\n <li>Cuando la llamada al m√©todo <code>base</code> retorna, el constructor <code>Engineer</code> inicializa la propiedad <code>machine</code> del objeto con el valor<code>\"belau\"</code>.</li>\n <li>Una vez creado, JavaScript asigna el nuevo objeto a la variable <code>jane</code>.</li>\n</ol>\n\n<p>Podr√≠as pensar que al haber llamado al constructor <code>WorkerBee</code> desde el constructor <code>Engineer</code> ya dejas establecida la herencia para los objetos  <code>Engineer</code>. Pero no es as√≠. Al llamar al constructor <code>WorkerBee</code> se garantiza que un objeto <code>Engineer</code> comience con las propiedades especificadas en todas las funciones del constructor que se llaman. Pero si luego se a√±aden propiedades a los prototipos de <code>Employee</code> o de <code>WorkerBee</code>, estas propiedades no se heredan por los objetos <code>Engineer</code>. Por ejemplo, veamos las siguientes sentencias:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Engineer</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> projs<span class=\"token punctuation\">,</span> mach</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>base <span class=\"token operator\">=</span> WorkerBee<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">base</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"engineering\"</span><span class=\"token punctuation\">,</span> projs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>machine <span class=\"token operator\">=</span> mach <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> jane <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Engineer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Doe, Jane\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"navigator\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"javascript\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"belau\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Employee</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>specialty <span class=\"token operator\">=</span> <span class=\"token string\">\"none\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>El objeto <code>jane</code> no hereda la propiedad <code>specialty</code> a√±adida al prototipo de <code>Employee</code>. Sigue siendo necesario dar valor al prototipo de <code>Employee</code> para que la herencia buscada se establezca. Veamos las siguientes sentencias:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Engineer</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> projs<span class=\"token punctuation\">,</span> mach</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>base <span class=\"token operator\">=</span> WorkerBee<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">base</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"engineering\"</span><span class=\"token punctuation\">,</span> projs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>machine <span class=\"token operator\">=</span> mach <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Engineer</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WorkerBee</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> jane <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Engineer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Doe, Jane\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"navigator\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"javascript\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"belau\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Employee</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>specialty <span class=\"token operator\">=</span> <span class=\"token string\">\"none\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Ahora el valor de la propiedad <code>specialty </code>del objeto<code> j</code><code>ane</code> si es \"none\".</p>\n\n<p>Otra forma de llamar al constructor es mediante el uso de los m√©todos <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" title=\"en-US/docs/JavaScript/Reference/Global Objects/Function/call\"><code>call()</code></a> / <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" title=\"en-US/docs/JavaScript/Reference/Global Objects/Function/apply\"><code>apply()</code></a>:</p>\n\n<table>\n <tbody>\n  <tr>\n   <td>\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Engineer</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> projs<span class=\"token punctuation\">,</span> mach</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>base <span class=\"token operator\">=</span> WorkerBee<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">base</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"engineering\"</span><span class=\"token punctuation\">,</span> projs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>machine <span class=\"token operator\">=</span> mach <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n   </td>\n   <td>\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Engineer</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> projs<span class=\"token punctuation\">,</span> mach</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">WorkerBee</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"engineering\"</span><span class=\"token punctuation\">,</span> projs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>machine <span class=\"token operator\">=</span> mach <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n   </td>\n  </tr>\n </tbody>\n</table>\n\n<p>Usar el m√©todo Javascript <code>call()</code> da como resultado una implementaci√≥n m√°s limpia ya que <code>base</code> ya no es necesaria. Mediante <code>call()</code> se llama a la funci√≥n constructor <code>WorkerBee</code> como un m√©todo, pas√°ndole expl√≠citamente <code>this</code>. El efecto es el mismo que el producido al llamar al constructor a trav√©s de la propiedad  <code>base</code>: en la llamada a <code>WorkerBee,</code> <code>this </code>est√° ligado al objeto que se est√° creando en <code>Engineer.</code></p>"}},{"type":"prose","value":{"id":"herencia_de_propiedades_revisada","title":"Herencia de propiedades revisada","isH3":false,"content":"<p>Las secciones precedentes describieron como los constructores y prototipos de JavaScript  jerarqu√≠as y herencia. En esta secci√≥n se discuten algunas sutilezas que no fueron necesariamente evidentes en las discusiones anteriores. </p>"}},{"type":"prose","value":{"id":"valores_locales_frente_a_valores_heredados","title":"Valores locales frente a valores heredados","isH3":true,"content":"<p>Cuando accedes a una propiedad de un objeto, JavaScript realiza estos pasos, tal como se describi√≥ m√°s arriba en este cap√≠tulo:</p>\n\n<ol>\n <li>Comprueba si el valor existe localmente. Si existe, se devuelve ese valor.</li>\n <li>Si no existe un valor local, comprueba la cadena de prototipos (usando la propiedad <code>__proto__</code>).</li>\n <li>Si alg√∫n objeto en la cadena de prototipos tiene un valor para la propiedad especificada, devuelve ese valor.</li>\n <li>Si no encuentra la propiedad en la cadena de prototipos, el objeto no tiene la propiedad.</li>\n</ol>\n\n<p>El resultado de estos pasos depende de c√≥mo se definan las cosas en el camino. El ejemplo original ten√≠a estas definiciones:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Employee</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dept <span class=\"token operator\">=</span> <span class=\"token string\">\"general\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">WorkerBee</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>projects <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">WorkerBee</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Con estas definiciones, supongamos que se crea <code>amy</code> como una instancia de <code>WorkerBee</code> con la siguiente sentencia:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> amy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WorkerBee</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>El objeto <code>amy</code> tiene una propiedad local, <code>projects</code>. Los valores de las propiedades <code>name</code> y <code>dept</code> no son locales para <code>amy</code> y por eso se obtienen de la propiedad <code>__proto__</code> del objeto. Por ello, <code>amy</code> tiene estos valores en sus propiedades:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>amy<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\namy<span class=\"token punctuation\">.</span>dept <span class=\"token operator\">==</span> <span class=\"token string\">\"general\"</span><span class=\"token punctuation\">;</span>\namy<span class=\"token punctuation\">.</span>projects <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Ahora supongamos que cambias el valor de la propiedad <code>name</code> en el prototipo asociado a <code>Employee</code>:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Unknown\"</span>\n</code></pre></div>\n\n<p>A primera vista, esperar√≠as que el nuevo valor se propague hacia abajo a todas las instancias de <code>Employee</code>. Pero no es esto lo que ocurre.</p>\n\n<p>Cuando se crea una instancia del objeto <code>Employee</code>, √©sta obtiene un valor local para la propiedad <code>name</code> (la cadena vac√≠a). Esto significa que cuando se da valor al prototipo de <code>WorkerBee</code> mediante la creaci√≥n de un nuevo objeto <code>Employee</code>, <code>WorkerBee.prototype</code> tiene un valor local para la propiedad <code>name</code>. Por tanto, cuando JavaScript busca la propiedad <code>name</code> del objeto <code>amy</code> (una instancia de <code>WorkerBee</code>), JavaScript encuentra el valor local de esa propiedad en <code>WorkerBee.prototype</code>. Por tanto no busca m√°s arriba en la cadena hasta <code>Employee.prototype</code>.</p>\n\n<p>Si quieres cambiar el valor de una propiedad de un objeto en tiempo de ejecuci√≥n y conseguir que el nuevo valor sea heredado por todos los descendientes del objeto, no puedes definir la propiedad en la funci√≥n constructor del objeto. En su lugar, la tienes que a√±adir al prototipo asociado al constructor. Por ejemplo, supongamos que cambiamos el c√≥digo anterior por este otro:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Employee</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dept <span class=\"token operator\">=</span> <span class=\"token string\">\"general\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Employee</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">WorkerBee</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>projects <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">WorkerBee</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> amy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WorkerBee</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Employee</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Unknown\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>En este caso, la propiedad <code>name</code> de <code>amy</code> si pasa a ser \"Unknown\" tras la ultima sentencia.</p>\n\n<p>Tal como muestran estos ejemplos, si quieres tener valores por defecto para propiedades de objetos, y se necesitas cambiar los valores por defecto en tiempo de ejecuci√≥n, tienes que asignar las propiedades al prototipo del constructor, y no asignarlas dentro de la funci√≥n <em>constructor</em>.</p>"}},{"type":"prose","value":{"id":"determinar_las_relaciones_entre_instancias","title":"Determinar las relaciones entre instancias","isH3":true,"content":"<p>La b√∫squeda de propiedades en la cadena de prototipos comienza en las propiedades locales del objeto y si no se encuentran localmente, se busca a trav√©s de la propiedad  <code>__proto__</code> del objeto. La b√∫squeda contin√∫a recursivamente, conoci√©ndose como \"b√∫squeda en la cadena de prototipos\".</p>\n\n<p>La propiedad especial <code>__proto__</code> de un objeto recibe su valor en el momento en el que es creado; se le asigna el valor de la propiedad <code>prototype</code> de la funci√≥n <em>constructor</em> usada para crear el objeto. As√≠, la expresi√≥n <code>new Foo()</code> crea un objeto con <code>__proto__ == <code class=\"moz-txt-verticalline\">Foo.prototype</code></code>. Por tanto, los cambios que se realicen en las propiedades de <code class=\"moz-txt-verticalline\">Foo.prototype</code> alteraran la b√∫squeda de propiedades de todos los objetos que se crearon mediante<code> new Foo()</code>.</p>\n\n<p>Todo objeto tiene una propiedad <code>__proto__</code> (salvo <code>Object</code>); toda funci√≥n tiene una propiedad <code>prototype</code>. Es as√≠ como los objetos pueden relacionarse mediante 'herencia de prototipos' con otros objetos. Puedes comprobar la herencia comparando el valor de la propiedad <code>__proto__</code> con el valor de <code>prototype</code> de una funci√≥n <em>constructor</em>. JavaScript proporciona un atajo: el operador <code>instanceof</code> que compara un objeto con una funci√≥n <em>constructor</em> y devuelve true si el objeto hereda del prototipo de la funci√≥n. Por ejemplo,</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> isTrue <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>f <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>Para ver un ejemplo m√°s detallado, supongamos que tenemos el conjunto de definiciones mostrado en <a href=\"#inheriting_properties\">heredando propiedades</a>. Creamos un objeto <code>Engineer</code> somo sigue:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> chris <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Engineer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pigman, Chris\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"jsd\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"fiji\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>En este objeto, las siguientes sentencias son todas true:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>chris<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">==</span> <span class=\"token class-name\">Engineer</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\nchris<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">==</span> <span class=\"token class-name\">WorkerBee</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\nchris<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">==</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\nchris<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">==</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\nchris<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Por tanto podr√≠a escribirse una funci√≥n <code>instanceOf</code> as√≠:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">instanceOf</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">object<span class=\"token punctuation\">,</span> constructor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>object <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>object <span class=\"token operator\">==</span> constructor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span>\n         <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> object <span class=\"token operator\">==</span> <span class=\"token string\">'xml'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> constructor<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">==</span> <span class=\"token class-name\">XML</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      object <span class=\"token operator\">=</span> object<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n\n<div class=\"note notecard\" id=\"sect6\"><strong>Nota:</strong> La implementaci√≥n anterior compara el tipo del objeto con  \"xml\" para soslayar un peque√±o problema sobre como se representan los objetos XML en las versiones recientes de JavaScript. Ver <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=634150\" class=\"external\" rel=\" noopener\">error&nbsp;634150</a> para entender los detalles.</div>\n\n<p>Usando esta funci√≥n <code>instanceOf</code> estas expresiones son todas <code>true</code>:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">instanceOf</span> <span class=\"token punctuation\">(</span>chris<span class=\"token punctuation\">,</span> Engineer<span class=\"token punctuation\">)</span>\n<span class=\"token function\">instanceOf</span> <span class=\"token punctuation\">(</span>chris<span class=\"token punctuation\">,</span> WorkerBee<span class=\"token punctuation\">)</span>\n<span class=\"token function\">instanceOf</span> <span class=\"token punctuation\">(</span>chris<span class=\"token punctuation\">,</span> Employee<span class=\"token punctuation\">)</span>\n<span class=\"token function\">instanceOf</span> <span class=\"token punctuation\">(</span>chris<span class=\"token punctuation\">,</span> Object<span class=\"token punctuation\">)</span>\n</code></pre></div>\n\n<p>Pero la siguiente expresi√≥n es <code>false</code>:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">instanceOf</span> <span class=\"token punctuation\">(</span>chris<span class=\"token punctuation\">,</span> SalesPerson<span class=\"token punctuation\">)</span></code></pre></div>"}},{"type":"prose","value":{"id":"informaci√≥n_global_en_los_constructores","title":"Informaci√≥n global en los constructores","isH3":true,"content":"<p>Cuando creas constructores tienes que tener especial cuidado si se asigna informaci√≥n global en el constructor. Por ejemplo, supongamos que quieres tener un ID √∫nico que se asigne autom√°ticamente a cada nuevo empleado. Podr√≠as utilizar la siguiente definici√≥n para <code>Employee</code>:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> idCounter <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Employee</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> dept</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dept <span class=\"token operator\">=</span> dept <span class=\"token operator\">||</span> <span class=\"token string\">\"general\"</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> idCounter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n\n<p>Con esta definici√≥n, cuando cread un nuevo <code>Employee</code>, el constructor le asigna el siguiente ID y luego incrementa el contador global ID. Por tanto, tras ejecutar el siguiente c√≥digo, <code>victoria.id</code> es 1 y <code>harry.id</code> es 2:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> victoria <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pigbert, Victoria\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pubs\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> harry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tschopik, Harry\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sales\"</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n\n<p>A primera vista puede parecer razonable. Sin embargo, <code>idCounter</code> se incrementa cada vez que se crea un nuevo objeto <code>Employee</code>, cualquiera que sea su prop√≥sito. Si creas la jerarqu√≠a completa de <code>Employee</code> mostrada en este cap√≠tulo, el constructor <code>Employee</code> es llamado cada vez que se asigna valor a un prototipo. Supongamos que tienes el siguiente c√≥digo:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> idCounter <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Employee</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> dept</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dept <span class=\"token operator\">=</span> dept <span class=\"token operator\">||</span> <span class=\"token string\">\"general\"</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> idCounter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Manager</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> dept<span class=\"token punctuation\">,</span> reports</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Manager</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">WorkerBee</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> dept<span class=\"token punctuation\">,</span> projs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">WorkerBee</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Engineer</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> projs<span class=\"token punctuation\">,</span> mach</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Engineer</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WorkerBee</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">SalesPerson</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> projs<span class=\"token punctuation\">,</span> quota</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">SalesPerson</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WorkerBee</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> mac <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Engineer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wood, Mac\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Supongamos adem√°s que las definiciones que se omiten tienen la propiedad <code>base</code> y se llama al constructor que tienen encima en la cadena de prototipos. En este caso, cuando se llega a crear el objeto <code>mac</code>, <code>mac.id</code> es 5.</p>\n\n<p>Dependiendo de la aplicaci√≥n, puede o no importar que el contador se haya incrementado esas veces extra. En caso de que importe, una soluci√≥n es utilizar este constructor:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Employee</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> dept</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dept <span class=\"token operator\">=</span> dept <span class=\"token operator\">||</span> <span class=\"token string\">\"general\"</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> idCounter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n\n<p>Cuando se crea una instancia de <code>Employee</code> para usarla como prototipo, no se especifican argumentos para el constructor. Mediante esta definici√≥n del constructor, cuando no se proporcionan argumentos, el constructor no asigna un valor al id y no actualiza el contador. Por tanto,  para que se asigne a un <code>Employee</code> un id, hay que especificar un <code>name</code> al employee. En este caso <code>mac.id</code> seria 1.</p>"}},{"type":"prose","value":{"id":"sin_herencia_m√∫ltiple","title":"Sin herencia m√∫ltiple","isH3":true,"content":"<p>Algunos lenguajes orientados a objetos tienen herencia m√∫ltiple. Es decir, un objeto puede heredar las propiedades y valores de varios objetos padre distintos. JavaScript no proporciona herencia m√∫ltiple.</p>\n\n<p>La herencia de valores de propiedades se produce en tiempo de ejecuci√≥n por JavaScript buscando en la cadena de prototipos de un objeto para encontrar un valor. Debido a que un objeto tiene un solo prototipo asociado, JavaScript no puede heredar din√°micamente de m√°s de una cadena de prototipos.</p>\n\n<p>En JavaScript se puede hacer que desde una funci√≥n constructor llame a una o m√°s funciones <em>constructor</em>. Esto da la ilusi√≥n de herencia m√∫ltiple. Considera, por ejemplo, las siguientes definiciones:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Hobbyist</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">hobby</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hobby <span class=\"token operator\">=</span> hobby <span class=\"token operator\">||</span> <span class=\"token string\">\"scuba\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Engineer</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> projs<span class=\"token punctuation\">,</span> mach<span class=\"token punctuation\">,</span> hobby</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>base1 <span class=\"token operator\">=</span> WorkerBee<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">base1</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"engineering\"</span><span class=\"token punctuation\">,</span> projs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>base2 <span class=\"token operator\">=</span> Hobbyist<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">base2</span><span class=\"token punctuation\">(</span>hobby<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>machine <span class=\"token operator\">=</span> mach <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Engineer</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WorkerBee</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> dennis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Engineer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Doe, Dennis\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"collabra\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hugo\"</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n\n<p>Consideremos, adem√°s, la definici√≥n de <code>WorkerBee</code> que se us√≥ antes en este cap√≠tulo. En este caso, el objeto <code>dennis</code> tiene estas propiedades:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>dennis<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"Doe, Dennis\"</span>\ndennis<span class=\"token punctuation\">.</span>dept <span class=\"token operator\">==</span> <span class=\"token string\">\"engineering\"</span>\ndennis<span class=\"token punctuation\">.</span>projects <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"collabra\"</span><span class=\"token punctuation\">]</span>\ndennis<span class=\"token punctuation\">.</span>machine <span class=\"token operator\">==</span> <span class=\"token string\">\"hugo\"</span>\ndennis<span class=\"token punctuation\">.</span>hobby <span class=\"token operator\">==</span> <span class=\"token string\">\"scuba\"</span>\n</code></pre></div>\n\n<p>Por tanto <code>dennis</code> obtiene la propiedad <code>hobby</code> del constructor<code> Hobbyist</code> . Sin embargo, si luego a√±ades una propiedad al prototipo del constructor de <code>Hobbyist</code>:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token class-name\">Hobbyist</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>equipment <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"mask\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"fins\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"regulator\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bcd\"</span><span class=\"token punctuation\">]</span>\n</code></pre></div>\n\n<p>El objeto <code>dennis</code> no hereda esta nueva propiedad porque no est√° en su cadena de prototipos.</p>\n\n<div id=\"sect7\"><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/es/docs/Web/JavaScript/Guide/Working_with_Objects\">¬´ Anterior</a></li>\n    <li><a class=\"button minimal\" href=\"/es/docs/Web/JavaScript/Guide/Iterators_and_Generators\">Siguiente  ¬ª</a></li>\n</ul></div>"}}],"toc":[{"text":"Lenguajes basados en clases vs. basados en prototipos","id":"lenguajes_basados_en_clases_vs._basados_en_prototipos"},{"text":"El ejemplo employee","id":"el_ejemplo_employee"},{"text":"Creaci√≥n de la jerarqu√≠a","id":"creaci√≥n_de_la_jerarqu√≠a"},{"text":"Propiedades de objetos","id":"propiedades_de_objetos"},{"text":"Constructores m√°s flexibles","id":"constructores_m√°s_flexibles"},{"text":"Herencia de propiedades revisada","id":"herencia_de_propiedades_revisada"}],"summary":"JavaScript es un lenguaje orientado a objetos basado en prototipos en lugar de clases. Debido a esta diferencia, puede ser menos evidente c√≥mo JavaScript te permite crear jerarqu√≠as de objetos y herencia de propiedades y sus valores. Este cap√≠tulo intenta clarificar estos puntos.","popularity":0.0002,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„É¢„Éá„É´„ÅÆË©≥Á¥∞","locale":"ja","native":"Êó•Êú¨Ë™û"},{"title":"Í∞ùÏ≤¥ Î™®Îç∏Ïùò ÏÑ∏Î∂Ä ÏÇ¨Ìï≠","locale":"ko","native":"ÌïúÍµ≠Ïñ¥"},{"title":"Detalhes do modelo de objeto","locale":"pt-BR","native":"Portugu√™s (do¬†Brasil)"},{"title":"–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ–±—ä–µ–∫—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏","locale":"ru","native":"–†—É—Å—Å–∫–∏–π"}],"source":{"folder":"es/conflicting/web/javascript/inheritance_and_the_prototype_chain","github_url":"https://github.com/mdn/translated-content/blob/main/files/es/conflicting/web/javascript/inheritance_and_the_prototype_chain/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"pageTitle":"Detalles del modelo de objetos | MDN","noIndexing":true}}