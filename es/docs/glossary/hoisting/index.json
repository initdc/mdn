{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Hoisting","mdn_url":"/es/docs/Glossary/Hoisting","locale":"es","native":"Español","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Hoisting es un término que <em>no</em> encontrará utilizado en ninguna especificación previa a <a href=\"https://www.ecma-international.org/ecma-262/6.0/index.html\" class=\"external\" rel=\" noopener\">ECMAScript® 2015 Language Specification</a>. El concepto de Hoisting fue pensado como una manera general de referirse a cómo funcionan los contextos de ejecución en JavaScript (específicamente las fases de creación y ejecución). Sin embargo, el concepto puede ser un poco confuso al principio.</p>\n<p>Conceptualmente, por ejemplo, una estricta definición de hoisting sugiere que las declaraciones de variables y funciones son físicamente movidas al comienzo del código, pero esto no es lo que ocurre en realidad. Lo que sucede es que las declaraciones de variables y funciones son <strong>asignadas en memoria</strong> durante la fase de <strong>compilación</strong>, pero quedan exactamente en dónde las has escrito en el código.</p>"}},{"type":"prose","value":{"id":"aprenda_más","title":"Aprenda más","isH3":false,"content":""}},{"type":"prose","value":{"id":"ejemplo_técnico","title":"Ejemplo técnico","isH3":true,"content":"<p>Una de las ventajas en JavaScript de colocar (<strong>ponerlas en memoria</strong>) las declaraciones de funciones antes de ejecutar cualquier otro segmento de código es que permite utilizar una función antes de declararla en el código. Por ejemplo:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">nombreDelGato</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nombre</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"El nombre de mi gato es \"</span> <span class=\"token operator\">+</span> nombre<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">nombreDelGato</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Maurizzio\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\nEl resultado del código es: \"El nombre de mi gato es Maurizzio\"\n*/</span>\n</code></pre></div>\n<p>El código escrito arriba está escrito de la manera que sería esperada para que funcione. Ahora, veamos qué sucede cuando llamamos a la función antes de escribirla:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">nombreDelGato</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dumas\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">nombreDelGato</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nombre</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"El nombre de mi gato es \"</span> <span class=\"token operator\">+</span> nombre<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*\nEl resultado del código es: \"El nombre de mi gato es Dumas\"\n*/</span>\n</code></pre></div>\n<p>Como se puede observar, aunque primero llamamos a la función en el código, antes de que sea escrita, el código aún funciona. Esto sucede por la manera en la que el contexto de ejecución trabaja en JavaScript.</p>\n<p>Hoisting se lleva también bien con otros tipos de datos y variables. Observemos el siguiente ejemplo:</p>"}},{"type":"prose","value":{"id":"ejemplo_técnico_2","title":"Ejemplo técnico","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x:\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// no obtenemos '5' sino 'undefined'</span>\n    <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x:\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>¿No hemos obtenido lo esperado?, como la declaración de variables se procesa antes de ejecutar cualquier código, declarar una variable en cualquier parte del código es igual a declararla al inicio del mismo. Lo que ocurre aquí y para que se entienda, es que hipotéticamente la variable se <strong>eleva</strong> y pasa a declararse <strong>al comienzo de su contexto</strong>, en este caso la función que la contiene.</p>\n<p>El ejemplo anterior se entiende implícitamente como:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Se elevo la declaración</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x:\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n    x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x:\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>JavaScript sólo utiliza el hoisting en <strong>declaraciones</strong>, no inicializaciones. Si está utilizando una variable que <strong>es declarada e inicializada después</strong> (está después en el código) <strong>de usarla</strong>, el valor será <code>undefined</code>. El siguiente ejemplo demuestra ese comportamiento:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Inicializa x</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '1 undefined'</span>\n<span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Inicializa y</span>\n</code></pre></div>\n<p>Como se puede apreciar <strong>la elevación afecta la declaración</strong> de variables, pero <strong>no su inicialización</strong>. El valor será asignado exactamente cuando la sentencia de asignación sea alcanzada.</p>\n<p>El ejemplo anterior se entiende implícitamente como:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Inicializa x</span>\n<span class=\"token keyword\">var</span> y<span class=\"token punctuation\">;</span><span class=\"token comment\">// Se elevo la declaración</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '1 undefined'</span>\ny <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Inicializa y</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"referencia_técnica","title":"Referencia técnica","isH3":true,"content":"<ul>\n  <li><a href=\"https://www.udemy.com/understand-javascript/\" class=\"external\" rel=\" noopener\">JavaScript: Understanding the Weird Parts</a> - Udemy.com Course</li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/var\">var statement</a> - MDN</li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/function\">function statement</a> - MDN</li>\n</ul>"}}],"toc":[{"text":"Aprenda más","id":"aprenda_más"}],"summary":"Hoisting es un término que no encontrará utilizado en ninguna especificación previa a ECMAScript® 2015 Language Specification. El concepto de Hoisting fue pensado como una manera general de referirse a cómo funcionan los contextos de ejecución en JavaScript (específicamente las fases de creación y ejecución). Sin embargo, el concepto puede ser un poco confuso al principio.","popularity":0.0014,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Hoisting","locale":"en-US","native":"English (US)"},{"title":"Hoisting","locale":"fr","native":"Français"},{"title":"Hoisting (巻き上げ、ホイスティング)","locale":"ja","native":"日本語"},{"title":"호이스팅","locale":"ko","native":"한국어"},{"title":"Hoisting","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Поднятие","locale":"ru","native":"Русский"},{"title":"Hoisting（变量提升）","locale":"zh-CN","native":"中文 (简体)"},{"title":"提升（Hoisting）","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"es/glossary/hoisting","github_url":"https://github.com/mdn/translated-content/blob/main/files/es/glossary/hoisting/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/es/docs/Glossary","title":"Glosario"},{"uri":"/es/docs/Glossary/Hoisting","title":"Hoisting"}],"pageTitle":"Hoisting - Glosario | MDN","noIndexing":false}}