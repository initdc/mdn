{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Funcion de primera clase","mdn_url":"/es/docs/Glossary/First-class_Function","locale":"es","native":"Español","sidebarHTML":"\n  <ol>\n    <li><a title=\"First-class functions\" href=\"https://es.wikipedia.org/wiki/First-class_function\">First-class functions</a> on Wikipedia</li>\n    <li><a href=\"/en-US/docs/Glossary\">MDN Web Docs Glossary</a>\n      <ul>\n        <li><a href=\"/es/docs/Glossary/Callback_function\">Callback function</a></li>\n        <li><a href=\"/es/docs/Glossary/Function\">Function</a></li>\n        <li><a href=\"/es/docs/Glossary/Variable\">Variable</a></li>\n      </ul>\n    </li>\n  </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Un lenguaje de programación se dice que tiene <strong>Funciones de primera clase</strong> cuando las funciones en ese lenguaje son tratadas como cualquier otra variable. Por ejemplo, en ese lenguaje, una función puede ser pasada como argumento a otras funciones, puede ser retornada por otra función y puede ser asignada a una variable.</p>"}},{"type":"prose","value":{"id":"ejemplo_asignar_función_a_una_variable","title":"Ejemplo | Asignar función a una variable","isH3":false,"content":""}},{"type":"prose","value":{"id":"javascript","title":"JavaScript","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foobar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Invocación usando una variable</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Asignamos una <strong>Función Anónima</strong> a una <a href=\"/es/docs/Glossary/Variable\">Variable</a>, la cual utilizamos para invocar la función añadiendo paréntesis <code>()</code> al final.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Nota:</strong> <strong>Aunque la función no sea anónima (función nombrada),</strong> se puede utilizar la variable para invocarla. Nombrar las funciones puede ser útil cuando estamos depurando el código. <em>Pero no afectará como invocamos a la función.</em></p>\n</div>"}},{"type":"prose","value":{"id":"ejemplo_pasar_la_función_como_argumento","title":"Ejemplo | Pasar la función como argumento","isH3":false,"content":""}},{"type":"prose","value":{"id":"javascript_2","title":"JavaScript","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">diHola</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hola \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">saludar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">saludo<span class=\"token punctuation\">,</span> nombre</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">saludo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> nombre<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Pasamos `diHola` como argumento de la función `saludar`</span>\n<span class=\"token function\">saludar</span><span class=\"token punctuation\">(</span>diHola<span class=\"token punctuation\">,</span> <span class=\"token string\">\"JavaScript!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Pasamos nuestra función <code>diHola()</code> como argumento de la función <code>saludar()</code>, esto explica como tratamos la función como un <strong>valor</strong>.</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Nota:</strong> Una función que pasamos como argumento a otra función, se llama <strong><a href=\"/es/docs/Glossary/Callback_function\">Callback function</a></strong>. <em><code>diHola</code> es una función Callback.</em></p>\n</div>"}},{"type":"prose","value":{"id":"ejemplo_devolver_una_función","title":"Ejemplo | Devolver una función","isH3":false,"content":""}},{"type":"prose","value":{"id":"javascript_3","title":"JavaScript","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">diHola</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"¡Hola!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>En este ejemplo; Necesitamos devolver una función desde otra función - <em>Podemos devolver una función porque JavaScript trata la función como un <strong>value</strong>.</em></p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Nota:</strong> Una función que devuelve una función se llama <strong>Higher-Order Function</strong>.</p>\n</div>\n<p>Volviendo al ejemplo; Ahora, necesitamos invocar la función <code>diHola</code> y su <code>Función Anónima</code> devuelta. Para ello, tenemos dos maneras:</p>"}},{"type":"prose","value":{"id":"1-_usando_una_variable","title":"1- Usando una variable","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">diHola</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"¡Hola!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> miFuncion <span class=\"token operator\">=</span> <span class=\"token function\">diHola</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">miFuncion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>De esta manera, devolverá el mensaje <code>¡Hola!</code>.</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>Nota:</strong> Debes usar otra variable para que devuelve el mensaje. Si invocas <code>diHola</code> directamente, devolvera la función en si misma <strong>sin invocar a la función devuelta</strong>.</p>\n</div>"}},{"type":"prose","value":{"id":"2-_usando_paréntesis_doble","title":"2- Usando paréntesis doble","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">diHola</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"¡Hola!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">diHola</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Usamos paréntesis doble <code>()()</code> para invocar también a la función retornada.</p>"}},{"type":"prose","value":{"id":"aprender_más","title":"Aprender más","isH3":false,"content":""}},{"type":"prose","value":{"id":"conocimiento_general","title":"Conocimiento general","isH3":true,"content":""}}],"toc":[{"text":"Ejemplo | Asignar función a una variable","id":"ejemplo_asignar_función_a_una_variable"},{"text":"Ejemplo | Pasar la función como argumento","id":"ejemplo_pasar_la_función_como_argumento"},{"text":"Ejemplo | Devolver una función","id":"ejemplo_devolver_una_función"},{"text":"Aprender más","id":"aprender_más"}],"summary":"Un lenguaje de programación se dice que tiene Funciones de primera clase cuando las funciones en ese lenguaje son tratadas como cualquier otra variable. Por ejemplo, en ese lenguaje, una función puede ser pasada como argumento a otras funciones, puede ser retornada por otra función y puede ser asignada a una variable.","popularity":0.0003,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"First-class Function","locale":"en-US","native":"English (US)"},{"title":"Fonction de première classe","locale":"fr","native":"Français"},{"title":"First-class Function (第一級関数)","locale":"ja","native":"日本語"},{"title":"일급 함수","locale":"ko","native":"한국어"},{"title":"Função First-class","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Функции первого класса","locale":"ru","native":"Русский"},{"title":"First-class Function（头等函数）","locale":"zh-CN","native":"中文 (简体)"},{"title":"一級函式（First-class Function）","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"es/glossary/first-class_function","github_url":"https://github.com/mdn/translated-content/blob/main/files/es/glossary/first-class_function/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/es/docs/Glossary","title":"Glosario"},{"uri":"/es/docs/Glossary/First-class_Function","title":"Funcion de primera clase"}],"pageTitle":"Funcion de primera clase - Glosario | MDN","noIndexing":false}}