{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Scope","mdn_url":"/es/docs/Glossary/Scope","locale":"es","native":"Español","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>El contexto actual de ejecución. El contexto en el que los valores y las expresiones son \"visibles\" o pueden ser referenciados. Si una variable u otra expresión no está \"en el Scope- alcance actual\", entonces no está disponible para su uso. Los Scope también se pueden superponer en una jerarquía, de modo que los Scope secundarios tengan acceso a los ámbitos primarios, pero no al revés.</p>\n<p>Una función sirve como un cierre en JavaScript y, por lo tanto, crea un ámbito, de modo que (por ejemplo) no se puede acceder a una variable definida exclusivamente dentro de la función desde fuera de la función o dentro de otras funciones. Por ejemplo, lo siguiente no es válido:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">exampleFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">\"declarada dentro de la función\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// x solo se puede utilizar en exampleFunction</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"funcion interna\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// error</span>\n</code></pre></div>\n<p>Sin embargo, el siguiente código es válido debido a que la variable se declara fuera de la función, lo que la hace global:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">\"función externa declarada\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">exampleFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">exampleFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"funcion interna\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"funcion externa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"aprende_mas","title":"Aprende mas","isH3":false,"content":""}},{"type":"prose","value":{"id":"conocimentos_generales","title":"Conocimentos Generales","isH3":true,"content":"<ul>\n  <li><a title=\"Scope (computer science)\" href=\"https://es.wikipedia.org/wiki/Scope_(computer_science)\" class=\"external\" rel=\" noopener\">Scope (computer science)</a> on Wikipedia</li>\n</ul>"}}],"toc":[{"text":"Aprende mas","id":"aprende_mas"}],"summary":"El contexto actual de ejecución. El contexto en el que los valores y las expresiones son \"visibles\" o pueden ser referenciados. Si una variable u otra expresión no está \"en el Scope- alcance actual\", entonces no está disponible para su uso. Los Scope también se pueden superponer en una jerarquía, de modo que los Scope secundarios tengan acceso a los ámbitos primarios, pero no al revés.","popularity":0.0003,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Scope","locale":"en-US","native":"English (US)"},{"title":"Portée","locale":"fr","native":"Français"},{"title":"Scope (スコープ)","locale":"ja","native":"日本語"},{"title":"스코프","locale":"ko","native":"한국어"},{"title":"Escopo","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Scope（作用域）","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"es/glossary/scope","github_url":"https://github.com/mdn/translated-content/blob/main/files/es/glossary/scope/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/es/docs/Glossary","title":"Glosario"},{"uri":"/es/docs/Glossary/Scope","title":"Scope"}],"pageTitle":"Scope - Glosario | MDN","noIndexing":false}}