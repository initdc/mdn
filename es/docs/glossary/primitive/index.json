{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Primitivo","mdn_url":"/es/docs/Glossary/Primitive","locale":"es","native":"Español","sidebarHTML":"\n  <ol>\n    <li><a href=\"/es/docs/Glossary\">Glosario</a>\n      <ol>\n        <li><a href=\"/es/docs/Glossary/JavaScript\">JavaScript</a></li>\n        <li><a href=\"/es/docs/Glossary/String\">string</a></li>\n        <li><a href=\"/es/docs/Glossary/Number\">number</a></li>\n        <li><a href=\"/es/docs/Glossary/BigInt\">bigint</a></li>\n        <li><a href=\"/es/docs/Glossary/Boolean\">boolean</a></li>\n        <li><a href=\"/es/docs/Glossary/Null\">null</a></li>\n        <li><a href=\"/es/docs/Glossary/undefined\">undefined</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">symbol</a></li>\n      </ol>\n    </li>\n    <li><a class=\"page-not-created\" title=\"La documentación acerca de este tema no ha sido escrita todavía . ¡Por favor  considera contribuir !\"><code>Tipos de datos JavaScript</code></a></li>\n  </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>En <a href=\"/es/docs/Glossary/JavaScript\">JavaScript</a>, un <strong>primitive</strong> (valor primitivo, tipo de dato primitivo) son datos que no son un <a href=\"/es/docs/Glossary/Object\">objeto</a> y no tienen <a href=\"/es/docs/Glossary/Method\">métodos</a>. Hay 6 tipos de datos primitivos: <a href=\"/es/docs/Glossary/String\">string</a>, <a href=\"/es/docs/Glossary/Number\">number</a>, <a href=\"/es/docs/Glossary/BigInt\">bigint</a>, <a href=\"/es/docs/Glossary/Boolean\">boolean</a>, <a href=\"/es/docs/Glossary/undefined\">undefined</a> y <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">symbol</a>. También hay <a href=\"/es/docs/Glossary/Null\">null</a>, que aparentemente es primitivo, pero de hecho es un caso especial para cada <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a>: y cualquier tipo estructurado se deriva de <code>null</code> por la <a href=\"/es/docs/Learn/JavaScript/Objects/Classes_in_JavaScript\">Cadena de prototipos</a>.</p>\n<p>La mayoría de las veces, un valor primitivo se representa directamente en el nivel más bajo de la implementación del lenguaje.</p>\n<p>Todos los primitivos son <strong>inmutables</strong>, es decir, no se pueden modificar. Es importante no confundir un primitivo en sí mismo con un valor primitivo asignado a una variable. Se puede reasignar un nuevo valor a la variable, pero el valor existente no se puede cambiar de la misma forma en que se pueden modificar los objetos, los arreglos y las funciones.</p>"}},{"type":"prose","value":{"id":"ejemplo","title":"Ejemplo","isH3":false,"content":"<p>Este ejemplo te ayudará a comprender que los valores primitivos son <strong>inmutables</strong>.</p>"}},{"type":"prose","value":{"id":"javascript","title":"JavaScript","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// El uso de un método de cadena no modifica la cadena</span>\n<span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token string\">\"baz\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// baz</span>\nbar<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// baz</span>\n\n<span class=\"token comment\">// El uso de un método de arreglo muta el arreglo</span>\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// []</span>\nfoo<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"plugh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// [\"plugh\"]</span>\n\n<span class=\"token comment\">// La asignación le da al primitivo un nuevo valor (no lo muta)</span>\nbar <span class=\"token operator\">=</span> bar<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// BAZ</span>\n</code></pre></div>\n<p>Un primitivo se puede reemplazar, pero no se puede modificar directamente.</p>"}},{"type":"prose","value":{"id":"otro_ejemplo_paso_a_paso","title":"Otro ejemplo [paso a paso]","isH3":false,"content":"<p>El siguiente ejemplo te ayudará a analizar cómo se ocupa JavaScript de los primitivos.</p>"}},{"type":"prose","value":{"id":"javascript_2","title":"JavaScript","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// El primitivo</span>\n<span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Define una función que debería cambiar el valor primitivo</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">addTwo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   num <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Otra función que intenta hacer lo mismo</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">addTwo_v2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">foo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   foo <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Llama a tu primera función mientras pasas el primitivo como argumento</span>\n<span class=\"token function\">addTwo</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Obtiene el valor primitivo actual</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 5</span>\n\n<span class=\"token comment\">// Intenta de nuevo con tu segunda función...</span>\n<span class=\"token function\">addTwo_v2</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 5</span>\n</code></pre></div>\n<p>¿Esperaba que fuera <code>7</code> en lugar de <code>5</code>?, si es así, lee cómo se ejecuta este código:</p>\n<ul>\n  <li>Para las llamadas a las funciones <code>addTwo</code> y <code>addTwo_v2</code>, JavaScript busca el valor del identificador <code>foo</code>. Encuentra correctamente tu variable instanciada con la primera declaración</li>\n  <li>Después de encontrarla, evalúa la expresión, <code>foo</code> se reemplaza por 5 y el motor de JavaScript pasa ese valor a las funciones como argumento</li>\n  <li>Antes de ejecutar las declaraciones dentro del cuerpo de las funciones, <strong>JavaScript toma una copia del argumento originalmente pasado</strong> (que es un primitivo) y crea una copia local. Estas copias, que existen solo dentro del ámbito de las funciones, son accesibles a través de los identificadores que especificaste en las definiciones de las funciones (<code>num</code> para <code>addTwo</code>, <code>foo</code> para <code>addTwo_v2</code>)</li>\n  <li>Luego, se ejecutan las instrucciones de las funciones:\n    <ul>\n      <li>En la primera función, se creó una variable <code>num</code> local. ¡Estas aumentando su valor en 2, no el valor original de <code>foo</code>!</li>\n      <li>En la segunda función, se creó una variable <code>foo</code> local. ¡Esto incrementa su valor en 2, no el valor original (externo) de <code>foo</code>!, además, en esta situación, no se puede acceder directamente a la variable <code>foo</code> externa. Esto se debe al alcance léxico de JavaScript y al ensombrecimiento de variables resultante. El <code>foo</code> local oculta al <code>foo</code> externo. Para obtener más información, consulta <a class=\"page-not-created\" title=\"La documentación acerca de este tema no ha sido escrita todavía . ¡Por favor  considera contribuir !\"><code>Cierres</code></a>. (Ten en cuenta que <code>window.foo</code> aún se podría usar para acceder a la variable <code>foo</code> externa).</li>\n    </ul>\n  </li>\n  <li>En conclusión, cualquier cambio dentro de tus funciones <strong>no</strong> afectará a la <code>foo</code> original en absoluto, ya que estas modificando <strong>copias</strong> de la misma.</li>\n</ul>\n<p>Es por eso que los primitivos son inmutables: en lugar de cambiarlos directamente, modificas una <em>copia, sin afectar el original</em>.</p>"}},{"type":"prose","value":{"id":"envolturas_de_objetos_primitivos_en_javascript","title":"Envolturas de objetos primitivos en JavaScript","isH3":false,"content":"<p>A excepción de <code>null</code> y <code>undefined</code>, todos los valores primitivos tienen objetos equivalentes que envuelven los valores primitivos:</p>\n<ul>\n  <li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> para el <code>string</code> primitivo.</li>\n  <li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> para el <code>number</code> primitivo.</li>\n  <li><a class=\"page-not-created\" title=\"La documentación acerca de este tema no ha sido escrita todavía . ¡Por favor  considera contribuir !\"><code>BigInt</code></a> para el <code>bigint</code> primitivo.</li>\n  <li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> para el <code>boolean</code> primitivo.</li>\n  <li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> para el <code>symbol</code> primitivo.</li>\n</ul>\n<p>El método <a class=\"page-not-created\" title=\"La documentación acerca de este tema no ha sido escrita todavía . ¡Por favor  considera contribuir !\"><code> valueOf()</code></a> del contenedor devuelve el valor primitivo.</p>"}},{"type":"prose","value":{"id":"aprende_más","title":"Aprende más","isH3":false,"content":""}},{"type":"prose","value":{"id":"conocimientos_generales","title":"Conocimientos generales","isH3":true,"content":"<ul>\n  <li><a class=\"page-not-created\" title=\"La documentación acerca de este tema no ha sido escrita todavía . ¡Por favor  considera contribuir !\"><code>Introducción a los tipos de datos de JavaScript</code></a></li>\n  <li><a title=\"Tipo de dato primitivo\" href=\"https://es.wikipedia.org/wiki/Tipo_de_dato_primitivo\" class=\"external\" rel=\" noopener\">Tipo de dato primitivo</a> en Wikipedia</li>\n</ul>"}}],"toc":[{"text":"Ejemplo","id":"ejemplo"},{"text":"Otro ejemplo [paso a paso]","id":"otro_ejemplo_paso_a_paso"},{"text":"Envolturas de objetos primitivos en JavaScript","id":"envolturas_de_objetos_primitivos_en_javascript"},{"text":"Aprende más","id":"aprende_más"}],"summary":"En JavaScript, un primitive (valor primitivo, tipo de dato primitivo) son datos que no son un objeto y no tienen métodos. Hay 6 tipos de datos primitivos: string, number, bigint, boolean, undefined y symbol. También hay null, que aparentemente es primitivo, pero de hecho es un caso especial para cada Object: y cualquier tipo estructurado se deriva de null por la Cadena de prototipos.","popularity":0.001,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Primitive","locale":"en-US","native":"English (US)"},{"title":"Primitive","locale":"fr","native":"Français"},{"title":"Primitive (プリミティブ)","locale":"ja","native":"日本語"},{"title":"원시 값","locale":"ko","native":"한국어"},{"title":"Primitivo","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Primitive","locale":"ru","native":"Русский"},{"title":"基本类型","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"es/glossary/primitive","github_url":"https://github.com/mdn/translated-content/blob/main/files/es/glossary/primitive/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/es/docs/Glossary","title":"Glosario"},{"uri":"/es/docs/Glossary/Primitive","title":"Primitivo"}],"pageTitle":"Primitivo - Glosario | MDN","noIndexing":false}}