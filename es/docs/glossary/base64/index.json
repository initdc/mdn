{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Base64 codificando y decodificando","mdn_url":"/es/docs/Glossary/Base64","locale":"es","native":"Español","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong>Base64</strong> es un grupo de esquemas de <a href=\"https://es.wikipedia.org/wiki/Codificaci%C3%B3n_de_binario_a_texto\" class=\"external\" rel=\" noopener\">codificación de binario a texto</a> que representa los datos binarios mediante una cadena ASCII, traduciéndolos en una representación radix-64. El término <em>Base64</em> se origina de un <a href=\"https://es.wikipedia.org/wiki/Multipurpose_Internet_Mail_Extensions#Content-Transfer-Encoding\" class=\"external\" rel=\" noopener\">sistema de codificación de transmisión de contenido MIME</a> específico.</p>\n<p>Los esquemas de codificación Base64 son comúnmente usados cuando se necesita codificar datos binarios para que sean almacenados y transferidos sobre un medio diseñado para tratar con datos textuales. Esto es para asegurar que los datos se mantienen intactos y sin modificaciones durante la transmisión. Base64 es comúnmente usado en muchas aplicaciones, incluyendo la escritura de emails vía <a href=\"https://es.wikipedia.org/wiki/Multipurpose_Internet_Mail_Extensions\" class=\"external\" rel=\" noopener\">MIME</a> y el almacenamiento de datos complejos en <a href=\"/en-US/docs/Web/XML\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">XML (en-US)</a>.</p>\n<p>En JavaScript hay dos funciones para decodificar y codificar cadenas base64, respectivamente:</p>\n<ul>\n  <li><a href=\"/es/docs/Web/API/atob\" title=\"atob()\"><code>atob()</code></a></li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/btoa\"><code>btoa()</code> <small>(en-US)</small></a></li>\n</ul>\n<p>La función <code>atob()</code> decodifica una cadena de datos que ha sido codificada usando la codificación en base 64. Por el contrario, la función <code>btoa()</code> crea una cadena ASCII codificada en base 64 a partir de una \"cadena\" de datos binarios.</p>\n<p>Ambas funciones trabajan sobre cadenas de texto. Si desea trabajar con <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffers</a>, lea <a href=\"/es/docs/Web/API/WindowBase64/Base64_codificando_y_decodificando$edit#Solution_.232_.E2.80.93_rewriting_atob%28%29_and_btoa%28%29_using_TypedArrays_and_UTF-8\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">este párrafo</a>.</p>\n<ul>\n  <li><a href=\"/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs\"><code>data</code> URIs</a>\n    <ul>\n      <li><code>Los URIs de</code> datos, definidos por <a href=\"https://tools.ietf.org/html/rfc2397\" class=\"external\" rel=\" noopener\">RFC 2397</a>, permiten a los creadores de contenido introducir pequeños ficheros en línea en documentos.</li>\n    </ul>\n  </li>\n  <li><a href=\"https://es.wikipedia.org/wiki/Base64\" class=\"external\" rel=\" noopener\">Base64</a>\n    <ul>\n      <li>Artículo en Wikipedia sobre el sistema de codificación Base64.</li>\n    </ul>\n  </li>\n  <li><a href=\"/es/docs/Web/API/atob\"><code>atob()</code></a>\n    <ul>\n      <li>Decodifica una cadena de datos que ha sido codificada utilizando base-64.</li>\n    </ul>\n  </li>\n  <li><a href=\"/en-US/docs/Web/API/btoa\"><code>btoa()</code> (en-US)</a>\n    <ul>\n      <li>Crea una cadena ASCII codificada en base 64 a partir de una \"cadena\" de datos binarios.</li>\n    </ul>\n  </li>\n  <li><a href=\"/es/docs/glossary/base64#the_.22unicode_problem.22\" aria-current=\"page\">The \"Unicode Problem\"</a>\n    <ul>\n      <li>En la mayoría de navegadores, llamar a <code>btoa()</code> con una cadena Unicode causará una excepción <code>Character Out Of Range</code>. Este párrafo muestra algunas soluciones.</li>\n    </ul>\n  </li>\n  <li><a href=\"/en-US/docs/URIScheme\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">URIScheme</a>\n    <ul>\n      <li>Lista de esquemas URI soportados por Mozilla.</li>\n    </ul>\n  </li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Typed_arrays/StringView\" class=\"page-not-created\" title=\"This is a link to an unwritten page\"><code>StringView</code></a>\n    <ul>\n      <li>En este artículo está publicada una librería hecha por nosotros con los siguientes objetivos:\n        <ul>\n          <li>crear una interfaz al estilo de <a href=\"http://en.wikipedia.org/wiki/C_%28programming_language%29\" class=\"external\" rel=\" noopener\">C</a> para cadenas (es decir, arrays de códigos de caracteres — <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>ArrayBufferView</code></a> en JavaScript) basada en la interfaz <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> de JavaScript.</li>\n          <li>crear una colección de métodos para los que los objetos parecidos a cadenas (de ahora en adelante, <code>stringView</code>s) funcionen estrictamente en arrays de números más que en cadenas JavaScript inmutables.</li>\n          <li>trabajar con otras codificaciones Unicode diferentes de las <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>DOMString</code></a>s UTF-16 por defecto de JavaScript.</li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n</ul>\n<p><strong>Herramientas</strong></p>\n<ul>\n  <li><a href=\"/es/docs/glossary/base64#solution_.232_.e2.80.93_rewriting_atob%28%29_and_btoa%28%29_using_typedarrays_and_utf-8\" aria-current=\"page\">Reescribir atob() y btoa() usando TypedArrays y UTF-8</a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Typed_arrays/StringView\" class=\"page-not-created\" title=\"This is a link to an unwritten page\"><code>StringView</code>, una representación parecida a C de cadenas basadas en arrays tipados</a></li>\n</ul>\n<p><strong>Temas relacionados</strong></p>\n<ul>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Typed_arrays\">Vectores o arrays tipados</a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">ArrayBufferView</a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Typed_arrays/StringView\" class=\"page-not-created\" title=\"This is a link to an unwritten page\"><code>StringView</code></a>, una representación parecida a C de cadenas basadas en arrays tipados</li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>DOMString</code></a></li>\n  <li><a href=\"/en-US/docs/Glossary/URI\"><code>URI</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\"><code>encodeURI()</code></a></li>\n</ul>"}},{"type":"prose","value":{"id":"el_problema_unicode","title":"El \"Problema Unicode\"","isH3":false,"content":"<p>Como las <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>DOMString</code></a>s son cadenas codificadas en 16 bits, en la mayoría de navegadores llamar a <code>window.btoa</code> sobre una cadena Unicode resultará en una excepción <code>Character Out Of Range</code> si un carácter excede el rango de los caracteres ASCII de 8 bits. Hay dos posibles métodos para resolver este problema:</p>\n<ul>\n  <li>el primero es escapar la cadena completa y, entonces, codificarla;</li>\n  <li>el segundo es convertir la <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>DOMString</code></a> UTF-16 en un array de caracteres UTF-8 y codificarla.</li>\n</ul>\n<p>Aquí están los dos posibles métodos:</p>"}},{"type":"prose","value":{"id":"solución_1_–_escapar_la_cadena_antes_de_codificarla","title":"Solución #1 – escapar la cadena antes de codificarla","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">utf8_to_b64</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">str</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">btoa</span><span class=\"token punctuation\">(</span><span class=\"token function\">unescape</span><span class=\"token punctuation\">(</span><span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span> str <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">b64_to_utf8</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">str</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">decodeURIComponent</span><span class=\"token punctuation\">(</span><span class=\"token function\">escape</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span><span class=\"token function\">atob</span><span class=\"token punctuation\">(</span> str <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Uso:</span>\n<span class=\"token function\">utf8_to_b64</span><span class=\"token punctuation\">(</span><span class=\"token string\">'✓ à la mode'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"4pyTIMOgIGxhIG1vZGU=\"</span>\n<span class=\"token function\">b64_to_utf8</span><span class=\"token punctuation\">(</span><span class=\"token string\">'4pyTIMOgIGxhIG1vZGU='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"✓ à la mode\"</span>\n</code></pre></div>\n<p>Esta solución ha sido propuesta por <a href=\"http://ecmanaut.blogspot.com/2006/07/encoding-decoding-utf8-in-javascript.html\" class=\"external\" rel=\" noopener\">Johan Sundström</a>.</p>\n<p>Otra posible solución sin utilizar las funciones 'unscape' y 'escape', ya obsoletas.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">b64EncodeUnicode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">btoa</span><span class=\"token punctuation\">(</span><span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">%([0-9A-F]{2})</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">match<span class=\"token punctuation\">,</span> p1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0x'</span> <span class=\"token operator\">+</span> p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n <span class=\"token function\">b64EncodeUnicode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'✓ à la mode'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"4pyTIMOgIGxhIG1vZGU=\"</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"solución_2_–_reescribir_atob_y_btoa_usando_typedarrays_y_utf-8","title":"Solución #2 – reescribir <code>atob()</code> y <code>btoa()</code> usando <code>TypedArray</code>s y UTF-8","isH3":true,"content":"<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Nota:</strong> El siguiente código también es útil para obtener un <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a> a partir de una cadena <em>Base64</em> y/o viceversa (<a href=\"#appendix.3a_decode_a_base64_string_to_uint8array_or_arraybuffer\">véase abajo</a>). <strong>Para una librería completa de arrays tipados, vea <a href=\"/en-US/docs/Web/JavaScript/Typed_arrays/StringView\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">este artículo</a></strong>.</p>\n</div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\\\n|*|\n|*|  Base64 / binary data / UTF-8 strings utilities\n|*|\n|*|  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Base64_encoding_and_decoding\n|*|\n\\*/</span>\n\n<span class=\"token comment\">/* Decodificación de cadena base64 en array de bytes */</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">b64ToUint6</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nChr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">return</span> nChr <span class=\"token operator\">&gt;</span> <span class=\"token number\">64</span> <span class=\"token operator\">&amp;&amp;</span> nChr <span class=\"token operator\">&lt;</span> <span class=\"token number\">91</span> <span class=\"token operator\">?</span>\n      nChr <span class=\"token operator\">-</span> <span class=\"token number\">65</span>\n    <span class=\"token operator\">:</span> nChr <span class=\"token operator\">&gt;</span> <span class=\"token number\">96</span> <span class=\"token operator\">&amp;&amp;</span> nChr <span class=\"token operator\">&lt;</span> <span class=\"token number\">123</span> <span class=\"token operator\">?</span>\n      nChr <span class=\"token operator\">-</span> <span class=\"token number\">71</span>\n    <span class=\"token operator\">:</span> nChr <span class=\"token operator\">&gt;</span> <span class=\"token number\">47</span> <span class=\"token operator\">&amp;&amp;</span> nChr <span class=\"token operator\">&lt;</span> <span class=\"token number\">58</span> <span class=\"token operator\">?</span>\n      nChr <span class=\"token operator\">+</span> <span class=\"token number\">4</span>\n    <span class=\"token operator\">:</span> nChr <span class=\"token operator\">===</span> <span class=\"token number\">43</span> <span class=\"token operator\">?</span>\n      <span class=\"token number\">62</span>\n    <span class=\"token operator\">:</span> nChr <span class=\"token operator\">===</span> <span class=\"token number\">47</span> <span class=\"token operator\">?</span>\n      <span class=\"token number\">63</span>\n    <span class=\"token operator\">:</span>\n      <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">base64DecToArr</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">sBase64<span class=\"token punctuation\">,</span> nBlocksSize</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">var</span>\n    sB64Enc <span class=\"token operator\">=</span> sBase64<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[^A-Za-z0-9\\+\\/]</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nInLen <span class=\"token operator\">=</span> sB64Enc<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n    nOutLen <span class=\"token operator\">=</span> nBlocksSize <span class=\"token operator\">?</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nInLen <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> nBlocksSize<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> nBlocksSize <span class=\"token operator\">:</span> nInLen <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> taBytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>nOutLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> nMod3<span class=\"token punctuation\">,</span> nMod4<span class=\"token punctuation\">,</span> nUint24 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nOutIdx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nInIdx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> nInIdx <span class=\"token operator\">&lt;</span> nInLen<span class=\"token punctuation\">;</span> nInIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    nMod4 <span class=\"token operator\">=</span> nInIdx <span class=\"token operator\">&amp;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    nUint24 <span class=\"token operator\">|=</span> <span class=\"token function\">b64ToUint6</span><span class=\"token punctuation\">(</span>sB64Enc<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>nInIdx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">18</span> <span class=\"token operator\">-</span> <span class=\"token number\">6</span> <span class=\"token operator\">*</span> nMod4<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nMod4 <span class=\"token operator\">===</span> <span class=\"token number\">3</span> <span class=\"token operator\">||</span> nInLen <span class=\"token operator\">-</span> nInIdx <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>nMod3 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> nMod3 <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span> <span class=\"token operator\">&amp;&amp;</span> nOutIdx <span class=\"token operator\">&lt;</span> nOutLen<span class=\"token punctuation\">;</span> nMod3<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> nOutIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        taBytes<span class=\"token punctuation\">[</span>nOutIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nUint24 <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">16</span> <span class=\"token operator\">&gt;&gt;&gt;</span> nMod3 <span class=\"token operator\">&amp;</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      nUint24 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> taBytes<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* Codificación de array en una cadena Base64 */</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">uint6ToB64</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nUint6</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">return</span> nUint6 <span class=\"token operator\">&lt;</span> <span class=\"token number\">26</span> <span class=\"token operator\">?</span>\n      nUint6 <span class=\"token operator\">+</span> <span class=\"token number\">65</span>\n    <span class=\"token operator\">:</span> nUint6 <span class=\"token operator\">&lt;</span> <span class=\"token number\">52</span> <span class=\"token operator\">?</span>\n      nUint6 <span class=\"token operator\">+</span> <span class=\"token number\">71</span>\n    <span class=\"token operator\">:</span> nUint6 <span class=\"token operator\">&lt;</span> <span class=\"token number\">62</span> <span class=\"token operator\">?</span>\n      nUint6 <span class=\"token operator\">-</span> <span class=\"token number\">4</span>\n    <span class=\"token operator\">:</span> nUint6 <span class=\"token operator\">===</span> <span class=\"token number\">62</span> <span class=\"token operator\">?</span>\n      <span class=\"token number\">43</span>\n    <span class=\"token operator\">:</span> nUint6 <span class=\"token operator\">===</span> <span class=\"token number\">63</span> <span class=\"token operator\">?</span>\n      <span class=\"token number\">47</span>\n    <span class=\"token operator\">:</span>\n      <span class=\"token number\">65</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">base64EncArr</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">aBytes</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">var</span> nMod3 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> sB64Enc <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> nLen <span class=\"token operator\">=</span> aBytes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> nUint24 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nIdx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> nIdx <span class=\"token operator\">&lt;</span> nLen<span class=\"token punctuation\">;</span> nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    nMod3 <span class=\"token operator\">=</span> nIdx <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nIdx <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>nIdx <span class=\"token operator\">*</span> <span class=\"token number\">4</span> <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">76</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> sB64Enc <span class=\"token operator\">+=</span> <span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    nUint24 <span class=\"token operator\">|=</span> aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">16</span> <span class=\"token operator\">&gt;&gt;&gt;</span> nMod3 <span class=\"token operator\">&amp;</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nMod3 <span class=\"token operator\">===</span> <span class=\"token number\">2</span> <span class=\"token operator\">||</span> aBytes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> nIdx <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      sB64Enc <span class=\"token operator\">+=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token function\">uint6ToB64</span><span class=\"token punctuation\">(</span>nUint24 <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">18</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">uint6ToB64</span><span class=\"token punctuation\">(</span>nUint24 <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">12</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">uint6ToB64</span><span class=\"token punctuation\">(</span>nUint24 <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">6</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">uint6ToB64</span><span class=\"token punctuation\">(</span>nUint24 <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      nUint24 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> sB64Enc<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sB64Enc<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> nMod3<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>nMod3 <span class=\"token operator\">===</span> <span class=\"token number\">2</span> <span class=\"token operator\">?</span> <span class=\"token string\">''</span> <span class=\"token operator\">:</span> nMod3 <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token string\">'='</span> <span class=\"token operator\">:</span> <span class=\"token string\">'=='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* De array UTF-8 a DOMString y viceversa */</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">UTF8ArrToStr</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">aBytes</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">var</span> sView <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> nPart<span class=\"token punctuation\">,</span> nLen <span class=\"token operator\">=</span> aBytes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> nIdx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> nIdx <span class=\"token operator\">&lt;</span> nLen<span class=\"token punctuation\">;</span> nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    nPart <span class=\"token operator\">=</span> aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    sView <span class=\"token operator\">+=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span>\n      nPart <span class=\"token operator\">&gt;</span> <span class=\"token number\">251</span> <span class=\"token operator\">&amp;&amp;</span> nPart <span class=\"token operator\">&lt;</span> <span class=\"token number\">254</span> <span class=\"token operator\">&amp;&amp;</span> nIdx <span class=\"token operator\">+</span> <span class=\"token number\">5</span> <span class=\"token operator\">&lt;</span> nLen <span class=\"token operator\">?</span> <span class=\"token comment\">/* six bytes */</span>\n        <span class=\"token comment\">/* (nPart - 252 &lt;&lt; 30) may be not so safe in ECMAScript! So...: */</span>\n        <span class=\"token punctuation\">(</span>nPart <span class=\"token operator\">-</span> <span class=\"token number\">252</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1073741824</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>aBytes<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">128</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>aBytes<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">128</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>aBytes<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">128</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>aBytes<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">128</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> aBytes<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">128</span>\n      <span class=\"token operator\">:</span> nPart <span class=\"token operator\">&gt;</span> <span class=\"token number\">247</span> <span class=\"token operator\">&amp;&amp;</span> nPart <span class=\"token operator\">&lt;</span> <span class=\"token number\">252</span> <span class=\"token operator\">&amp;&amp;</span> nIdx <span class=\"token operator\">+</span> <span class=\"token number\">4</span> <span class=\"token operator\">&lt;</span> nLen <span class=\"token operator\">?</span> <span class=\"token comment\">/* five bytes */</span>\n        <span class=\"token punctuation\">(</span>nPart <span class=\"token operator\">-</span> <span class=\"token number\">248</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>aBytes<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">128</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>aBytes<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">128</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>aBytes<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">128</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> aBytes<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">128</span>\n      <span class=\"token operator\">:</span> nPart <span class=\"token operator\">&gt;</span> <span class=\"token number\">239</span> <span class=\"token operator\">&amp;&amp;</span> nPart <span class=\"token operator\">&lt;</span> <span class=\"token number\">248</span> <span class=\"token operator\">&amp;&amp;</span> nIdx <span class=\"token operator\">+</span> <span class=\"token number\">3</span> <span class=\"token operator\">&lt;</span> nLen <span class=\"token operator\">?</span> <span class=\"token comment\">/* four bytes */</span>\n        <span class=\"token punctuation\">(</span>nPart <span class=\"token operator\">-</span> <span class=\"token number\">240</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>aBytes<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">128</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>aBytes<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">128</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> aBytes<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">128</span>\n      <span class=\"token operator\">:</span> nPart <span class=\"token operator\">&gt;</span> <span class=\"token number\">223</span> <span class=\"token operator\">&amp;&amp;</span> nPart <span class=\"token operator\">&lt;</span> <span class=\"token number\">240</span> <span class=\"token operator\">&amp;&amp;</span> nIdx <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;</span> nLen <span class=\"token operator\">?</span> <span class=\"token comment\">/* three bytes */</span>\n        <span class=\"token punctuation\">(</span>nPart <span class=\"token operator\">-</span> <span class=\"token number\">224</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>aBytes<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">128</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> aBytes<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">128</span>\n      <span class=\"token operator\">:</span> nPart <span class=\"token operator\">&gt;</span> <span class=\"token number\">191</span> <span class=\"token operator\">&amp;&amp;</span> nPart <span class=\"token operator\">&lt;</span> <span class=\"token number\">224</span> <span class=\"token operator\">&amp;&amp;</span> nIdx <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> nLen <span class=\"token operator\">?</span> <span class=\"token comment\">/* two bytes */</span>\n        <span class=\"token punctuation\">(</span>nPart <span class=\"token operator\">-</span> <span class=\"token number\">192</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> aBytes<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">128</span>\n      <span class=\"token operator\">:</span> <span class=\"token comment\">/* nPart &lt; 127 ? */</span> <span class=\"token comment\">/* one byte */</span>\n        nPart\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> sView<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">strToUTF8Arr</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">sDOMStr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">var</span> aBytes<span class=\"token punctuation\">,</span> nChr<span class=\"token punctuation\">,</span> nStrLen <span class=\"token operator\">=</span> sDOMStr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> nArrLen <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* mapeando... */</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> nMapIdx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> nMapIdx <span class=\"token operator\">&lt;</span> nStrLen<span class=\"token punctuation\">;</span> nMapIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    nChr <span class=\"token operator\">=</span> sDOMStr<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>nMapIdx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    nArrLen <span class=\"token operator\">+=</span> nChr <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x80</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> nChr <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x800</span> <span class=\"token operator\">?</span> <span class=\"token number\">2</span> <span class=\"token operator\">:</span> nChr <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x10000</span> <span class=\"token operator\">?</span> <span class=\"token number\">3</span> <span class=\"token operator\">:</span> nChr <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x200000</span> <span class=\"token operator\">?</span> <span class=\"token number\">4</span> <span class=\"token operator\">:</span> nChr <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x4000000</span> <span class=\"token operator\">?</span> <span class=\"token number\">5</span> <span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  aBytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>nArrLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* transcripción... */</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> nIdx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nChrIdx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> nIdx <span class=\"token operator\">&lt;</span> nArrLen<span class=\"token punctuation\">;</span> nChrIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    nChr <span class=\"token operator\">=</span> sDOMStr<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>nChrIdx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&lt;</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/* un byte */</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nChr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x800</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/* dos bytes */</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">192</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">128</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x10000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/* tres bytes */</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">224</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">128</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">6</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">128</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x200000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/* cuatro bytes */</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">240</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">128</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">12</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">128</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">6</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">128</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x4000000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/* cinco bytes */</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">248</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">128</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">18</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">128</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">12</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">128</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">6</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">128</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token comment\">/* if (nChr &lt;= 0x7fffffff) */</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/* seis bytes */</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">252</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">128</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">24</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">128</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">18</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">128</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">12</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">128</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">6</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      aBytes<span class=\"token punctuation\">[</span>nIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">128</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>nChr <span class=\"token operator\">&amp;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> aBytes<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"tests\">Tests</h4>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/* Tests */</span>\n\n<span class=\"token keyword\">var</span> sMyInput <span class=\"token operator\">=</span> <span class=\"token string\">\"Base 64 \\u2014 Mozilla Developer Network\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> aMyUTF8Input <span class=\"token operator\">=</span> <span class=\"token function\">strToUTF8Arr</span><span class=\"token punctuation\">(</span>sMyInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> sMyBase64 <span class=\"token operator\">=</span> <span class=\"token function\">base64EncArr</span><span class=\"token punctuation\">(</span>aMyUTF8Input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>sMyBase64<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> aMyUTF8Output <span class=\"token operator\">=</span> <span class=\"token function\">base64DecToArr</span><span class=\"token punctuation\">(</span>sMyBase64<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> sMyOutput <span class=\"token operator\">=</span> <span class=\"token function\">UTF8ArrToStr</span><span class=\"token punctuation\">(</span>aMyUTF8Output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>sMyOutput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"apéndice_decodificar_una_cadena_base64_en_uint8array_o_arraybuffer\">Apéndice: Decodificar una cadena <em>Base64</em> en <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">Uint8Array</a> o <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a></h4>\n<p>Estas funciones nos permiten crear también <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">uint8Arrays</a> o <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">arrayBuffers</a> a partir de cadenas codificadas en base 64:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myArray <span class=\"token operator\">=</span> <span class=\"token function\">base64DecToArr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"QmFzZSA2NCDigJQgTW96aWxsYSBEZXZlbG9wZXIgTmV0d29yaw==\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Base 64 \\u2014 Mozilla Developer Network\"</span>\n\n<span class=\"token keyword\">var</span> myBuffer <span class=\"token operator\">=</span> <span class=\"token function\">base64DecToArr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"QmFzZSA2NCDigJQgTW96aWxsYSBEZXZlbG9wZXIgTmV0d29yaw==\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Base 64 \\u2014 Mozilla Developer Network\"</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>myBuffer<span class=\"token punctuation\">.</span>byteLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Nota:</strong> La función <code>base64DecToArr(sBase64[, nBlocksSize])</code> devuelve un <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>uint8Array</code></a> de bytes. Si tu objetivo es construir un búfer de datos crudos de 16, 32 o 64 bits, usa el argumento <code>nBlocksSize</code>, que es el número de bytes de los que la propiedad <code>uint8Array.buffer.bytesLength</code> debe devolver un múltiplo (1 u omitido para ASCII, <a href=\"/en-US/docs/Web/API/btoa\">cadenas binarias</a> o cadenas UTF-8 codificacas, 2 para cadenas UTF-16, 4 para cadenas UTF-32).</p>\n</div>\n<p>Para una librería más completa, véase <a href=\"/en-US/docs/Web/JavaScript/Typed_arrays/StringView\" class=\"page-not-created\" title=\"This is a link to an unwritten page\"><code>StringView</code></a><a href=\"/en-US/docs/Web/JavaScript/Typed_arrays/StringView\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">, una representación parecida a C de cadenas basadas en arrays tipados</a>.</p>","titleAsText":"Solución #2 – reescribir atob() y btoa() usando TypedArrays y UTF-8"}},{"type":"prose","value":{"id":"véase_también","title":"Véase también","isH3":false,"content":"<ul>\n  <li><a href=\"/es/docs/Web/API/atob\" title=\"atob()\"><code>atob()</code></a></li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/btoa\"><code>btoa()</code> <small>(en-US)</small></a></li>\n  <li><a href=\"/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs\"><code>data</code> URIs</a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Typed_arrays\">TypedArrays</a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">ArrayBufferView</a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">Uint8Array</a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Typed_arrays/StringView\" class=\"page-not-created\" title=\"This is a link to an unwritten page\"><code>StringView</code> – a C-like representation of strings based on typed arrays</a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\">DOMString</a></li>\n  <li><a href=\"/en-US/docs/Glossary/URI\"><code>URI</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\"><code>encodeURI()</code></a></li>\n  <li><a href=\"/en-US/docs/XPCOM_Interface_Reference/nsIURIFixup\" class=\"page-not-created\" title=\"This is a link to an unwritten page\"><code>nsIURIFixup()</code></a></li>\n  <li><a href=\"https://en.wikipedia.org/wiki/Base64\" class=\"external\" rel=\" noopener\"><code>Base64 on Wikipedia</code></a></li>\n</ul>"}}],"toc":[{"text":"El \"Problema Unicode\"","id":"el_problema_unicode"},{"text":"Véase también","id":"véase_también"}],"summary":"Base64 es un grupo de esquemas de codificación de binario a texto que representa los datos binarios mediante una cadena ASCII, traduciéndolos en una representación radix-64. El término Base64 se origina de un sistema de codificación de transmisión de contenido MIME específico.","popularity":0.0034,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Base64","locale":"en-US","native":"English (US)"},{"title":"Décoder et encoder en base64","locale":"fr","native":"Français"},{"title":"Base64","locale":"ja","native":"日本語"},{"title":"Кодирование и декодирование в формате Base64","locale":"ru","native":"Русский"},{"title":"Base64 的编码与解码","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"es/glossary/base64","github_url":"https://github.com/mdn/translated-content/blob/main/files/es/glossary/base64/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/es/docs/Glossary","title":"Glosario"},{"uri":"/es/docs/Glossary/Base64","title":"Base64 codificando y decodificando"}],"pageTitle":"Base64 codificando y decodificando - Glosario | MDN","noIndexing":false}}