{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"WebAssembly","mdn_url":"/es/docs/WebAssembly","locale":"es","native":"Español","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"open\"><a href=\"/es/docs/WebAssembly\"><strong>WebAssembly home page</strong></a>\n  </li><li class=\"toggle\">\n    <details open=\"\">\n      <summary>Tutorials</summary>\n      <ol>\n        <li><a href=\"/es/docs/WebAssembly/Concepts\">WebAssembly concepts</a></li>\n        <li><a href=\"/es/docs/WebAssembly/C_to_wasm\">Compiling from C/C++ to WebAssembly</a></li>\n        <li><a href=\"/es/docs/WebAssembly/Rust_to_wasm\">Compiling from Rust to WebAssembly</a></li>\n        <li><a href=\"/es/docs/WebAssembly/Using_the_JavaScript_API\">Using the WebAssembly JavaScript API</a></li>\n        <li><a href=\"/es/docs/WebAssembly/Understanding_the_text_format\">Understanding WebAssembly text format</a></li>\n        <li><a href=\"/es/docs/WebAssembly/Text_format_to_wasm\">Converting WebAssembly text format to wasm</a></li>\n        <li><a href=\"/es/docs/WebAssembly/Loading_and_running\">Loading and running WebAssembly code</a></li>\n        <li><a href=\"/es/docs/WebAssembly/Caching_modules\">Caching compiled WebAssembly modules</a></li>\n        <li><a href=\"/es/docs/WebAssembly/Exported_functions\">Exported WebAssembly functions</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Object reference</summary>\n      <ol>\n        <li><a href=\"/es/docs/conflicting/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code> <small>(en-US)</small></a></li>\n      </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>WebAssembly es un nuevo tipo de código que puede ser ejecutado en navegadores modernos — es un lenguaje de bajo nivel, similar al lenguaje ensamblador, con un formato binario compacto que se ejecuta con rendimiento casi nativo y provee un objetivo de compilación para lenguajes como C/C++ y Rust que les permite correr en la web. También está diseñado para correr a la par de JavaScript, permitiendo que ambos trabajen juntos.</p>"}},{"type":"prose","value":{"id":"en_pocas_palabras","title":"En pocas palabras","isH3":false,"content":"<p>WebAssembly tiene grandes implicaciones para la plataforma web — provee una forma de correr código escrito en múltiples lenguajes en la web a una velocidad casi nativa, con aplicaciones cliente corriendo en la web que anteriormente no podrían haberlo hecho.</p>\n<p>WebAssembly esta diseñado para complementar y correr a la par de JavaScript — usando las APIs WebAssembly de JavaScript, puedes cargar módulos de WebAssembly en una aplicación JavaScript y compartir funcionalidad entre ambos. Esto te permite aprovechar el rendimiento y poder de WebAssembly y la expresividad y flexibilidad de JavaScript en las mismas aplicaciones, incluso si no sabes cómo escribir código WebAssembly.</p>\n<p>Y lo mejor es que está siendo desarrollado como un estándar web a través del <a href=\"https://www.w3.org/wasm/\" class=\"external\" rel=\" noopener\">grupo de trabajo de WebAssembly del W3C</a> y su <a href=\"https://www.w3.org/community/webassembly/\" class=\"external\" rel=\" noopener\">grupo comunitario</a> con las participación activa de todos los principales fabricantes de navegadores.</p>"}},{"type":"prose","value":{"id":"guías","title":"Guías","isH3":false,"content":"<dl>\n  <dt id=\"conceptos_de_webassembly\"><a href=\"/es/docs/WebAssembly/Concepts\">Conceptos de WebAssembly</a></dt>\n  <dd>\n    <p>Empieza leyendo los conceptos de alto nivel detrás de WebAssembly — qué es, por qué es tan útil, cómo encaja en la plataforma web (y más allá), y cómo usarlo.</p>\n  </dd>\n  <dt id=\"compilar_un_nuevo_módulo_de_cc_a_webassembly\"><a href=\"/en-US/docs/WebAssembly/C_to_wasm\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Compilar un nuevo módulo de C/C++ a WebAssembly (en-US)</a></dt>\n  <dd>\n    <p>Al escribir código en C/C++, puedes compilarlo a .wasm usando una herramienta como <a href=\"/es/docs/Mozilla/Projects/Emscripten/\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">Emscripten</a>. Veamos cómo funciona.</p>\n  </dd>\n  <dt id=\"compilar_un_módulo_existente_de_c_a_webassembly\"><a href=\"/en-US/docs/WebAssembly/existing_C_to_wasm\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Compilar un módulo existente de C a WebAssembly (en-US)</a></dt>\n  <dd>\n    <p>Uno de los principales casos de uso para WebAssembly es tomar las librerías existentes del ecosistema de C y permitir que los desarrolladores los usen en la web.</p>\n  </dd>\n  <dt id=\"compilar_de_rust_a_webassembly\"><a href=\"/en-US/docs/WebAssembly/Rust_to_wasm\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Compilar de Rust a WebAssembly (en-US)</a></dt>\n  <dd>\n    <p>Si has escrito algo en Rust, ¡puedes compilarlo a WebAssembly! Este tutorial te enseña todo lo que necesitas saber para compilar un proyecto de Rust a wasm y usarlo en una aplicación web existente.</p>\n  </dd>\n  <dt id=\"cargar_y_ejecutar_código_webassembly\"><a href=\"/es/docs/WebAssembly/Loading_and_running\">Cargar y ejecutar código WebAssembly</a></dt>\n  <dd>\n    <p>Una vez que tengas un .wasm, este artículo cubre cómo recuperarlo, compilarlo e instanciarlo, combinando la API de <a href=\"/es/docs/WebAssembly/JavaScript_interface\">WebAssembly de JavaScript</a> con las APIs <a href=\"/es/docs/Web/API/Fetch_API\">Fetch</a> o <a href=\"/es/docs/Web/API/XMLHttpRequest\">XHR</a>.</p>\n  </dd>\n  <dt id=\"usar_la_api_webassembly_de_javascript\"><a href=\"/en-US/docs/WebAssembly/Using_the_JavaScript_API\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Usar la API WebAssembly de JavaScript (en-US)</a></dt>\n  <dd>\n    <p>Una vez cargado el módulo .wasm, querrás usarlo. En este artículo te mostramos cómo usar WebAssembly mediante la API WebAssembly de JavaScript.</p>\n  </dd>\n  <dt id=\"funciones_exportadas_de_webassembly\"><a href=\"/en-US/docs/WebAssembly/Exported_functions\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Funciones exportadas de WebAssembly (en-US)</a></dt>\n  <dd>\n    <p>Las funciones exportadas de WebAssembly son el reflejo en JavaScript de las funciones de WebAssembly que te permiten llamar código WebAssembly desde JavaScript. Este artículo las describe.</p>\n  </dd>\n  <dt id=\"entendiendo_el_formato_de_texto_webassembly\"><a href=\"/en-US/docs/WebAssembly/Understanding_the_text_format\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Entendiendo el formato de texto WebAssembly (en-US)</a></dt>\n  <dd>\n    <p>Este artículo explica el formato de texto wasm. Esta es la representación textual de bajo nivel de un módulo .wasm, mostrada en las herramientas de desarrollador del navegador al depurar.</p>\n  </dd>\n  <dt id=\"convertir_el_formato_de_texto_webassembly_a_wasm\"><a href=\"/en-US/docs/WebAssembly/Text_format_to_wasm\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Convertir el formato de texto WebAssembly a wasm (en-US)</a></dt>\n  <dd>\n    <p>Este artículo provee una guía para convertir un módulo de WebAssembly escrito en su formato de texto a un binario .wasm.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"referencia_de_la_api","title":"Referencia de la API","isH3":false,"content":"<dl>\n  <dt id=\"webassembly\"><a href=\"/es/docs/conflicting/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></dt>\n  <dd>\n    <p>Este objeto sirve como espacio de nombres para toda funcionalidad relacionada a WebAssembly.</p>\n  </dd>\n  <dt id=\"webassembly.global_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>El objeto <code>WebAssembly.Global</code> representa una instancia variable global, accesible desde JavaScript e importable/exportable a través de una o más instancias de <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code> <small>(en-US)</small></a>. Esto permite el enlace dinámico de varios módulos.</p>\n  </dd>\n  <dt id=\"webassembly.module_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>El objeto <code>WebAssembly.Module</code> contiene código WebAssembly sin estado que ha sido ya compilado por el navegador y puede ser <a href=\"/en-US/docs/Web/API/Worker/postMessage\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">compartido con workers (en-US)</a> e instanciado varias veces.</p>\n  </dd>\n  <dt id=\"webassembly.instance_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>Un objeto <code>WebAssembly.Instance</code> es una instancia ejecutable y con estado de un <code>Module</code>. Los objetos <code>Instance</code> contienen todas las <a href=\"/en-US/docs/WebAssembly/Exported_functions\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">funciones exportadas de WebAssembly (en-US)</a> que permiten llamar a código WebAssembly desde JavaScript.</p>\n  </dd>\n  <dt id=\"webassembly.instantiatestreaming_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/instantiateStreaming\"><code>WebAssembly.instantiateStreaming()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>La función <code>WebAssembly.instantiateStreaming()</code> es la principal API para compilar e instanciar código WebAssembly, retornando tanto un <code>Module</code> como su primera <code>Instance</code>.</p>\n  </dd>\n  <dt id=\"webassembly.memory_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>Un objeto <code>WebAssembly.``Memory</code> es un <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> redimensionable que contiene los bytes de memoria accedidos por una <code>Instance</code>.</p>\n  </dd>\n  <dt id=\"webassembly.table_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>Un objeto <code>WebAssembly.``Table</code> es un arreglo tipado redimensionable de valores opacos, como referencias a funciones, que son accedidos por una <code>Instance</code>.</p>\n  </dd>\n  <dt id=\"webassembly.compileerror_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>Crea un nuevo objeto <code>CompileError</code> de WebAssembly.</p>\n  </dd>\n  <dt id=\"webassembly.linkerror_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>Crea un nuevo objeto <code>LinkError</code> de WebAssembly.</p>\n  </dd>\n  <dt id=\"webassembly.runtimeerror_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>Crea un nuevo objeto <code>RuntimeError</code> de WebAssembly.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"ejemplos","title":"Ejemplos","isH3":false,"content":"<ul>\n  <li><a href=\"https://github.com/JasonWeathersby/WASMSobel\" class=\"external\" rel=\" noopener\">WASMSobel</a></li>\n  <li>Consulta nuestro repositorio <a href=\"https://github.com/mdn/webassembly-examples/\" class=\"external\" rel=\" noopener\">webassembly-examples</a> para ver otros ejemplos.</li>\n</ul>"}},{"type":"prose","value":{"id":"especificaciones","title":"Especificaciones","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>Especificación</th>\n      <th>Estado</th>\n      <th>Comentarios</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://webassembly.github.io/spec/js-api/\" hreflang=\"en\" lang=\"en\" class=\"external\" title=\"La especificación 'WebAssembly JavaScript Interface'\" rel=\" noopener\">WebAssembly JavaScript Interface</a></td>\n      <td><span class=\"spec-wd\">Working Draft</span></td>\n      <td>Borrador inicial de la definición de la API de JavaScript.</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"browser_compatibility","value":{"title":"Compatibilidad con navegadores","id":"compatibilidad_con_navegadores","isH3":false,"query":"javascript.builtins.WebAssembly","dataURL":"/es/docs/WebAssembly/bcd.json"}},{"type":"prose","value":{"id":"ver_también","title":"Ver también","isH3":false,"content":"<ul>\n  <li><a href=\"https://research.mozilla.org/webassembly/\" class=\"external\" rel=\" noopener\">WebAssembly en Mozilla Research</a></li>\n  <li><a href=\"http://webassembly.org/\" class=\"external\" rel=\" noopener\">webassembly.org</a></li>\n  <li><a href=\"https://hacks.mozilla.org/category/webassembly/\" class=\"external\" rel=\" noopener\">Artículos de WebAssembly en el blog Mozilla Hacks</a></li>\n  <li><a href=\"https://www.w3.org/community/webassembly/\" class=\"external\" rel=\" noopener\">Grupo comunitario de WebAssembly del W3C</a></li>\n  <li><a href=\"/en-US/docs/Web/HTTP/Headers/Large-Allocation\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Cabecera HTTP Large-Allocation (en-US)</a></li>\n  <li><a href=\"https://developers.google.com/web/updates/2018/03/emscripting-a-c-library\" class=\"external\" rel=\" noopener\">Compilar una librería de C a Wasm</a></li>\n</ul>"}}],"toc":[{"text":"En pocas palabras","id":"en_pocas_palabras"},{"text":"Guías","id":"guías"},{"text":"Referencia de la API","id":"referencia_de_la_api"},{"text":"Ejemplos","id":"ejemplos"},{"text":"Especificaciones","id":"especificaciones"},{"text":"Compatibilidad con navegadores","id":"compatibilidad_con_navegadores"},{"text":"Ver también","id":"ver_también"}],"summary":"WebAssembly es un nuevo tipo de código que puede ser ejecutado en navegadores modernos — es un lenguaje de bajo nivel, similar al lenguaje ensamblador, con un formato binario compacto que se ejecuta con rendimiento casi nativo y provee un objetivo de compilación para lenguajes como C/C++ y Rust que les permite correr en la web. También está diseñado para correr a la par de JavaScript, permitiendo que ambos trabajen juntos.","popularity":0.0005,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"WebAssembly","locale":"en-US","native":"English (US)"},{"title":"WebAssembly","locale":"fr","native":"Français"},{"title":"WebAssembly","locale":"ja","native":"日本語"},{"title":"웹어셈블리","locale":"ko","native":"한국어"},{"title":"WebAssembly","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"WebAssembly","locale":"ru","native":"Русский"},{"title":"WebAssembly","locale":"zh-CN","native":"中文 (简体)"},{"title":"WebAssembly","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"es/webassembly","github_url":"https://github.com/mdn/translated-content/blob/main/files/es/webassembly/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"pageTitle":"WebAssembly | MDN","noIndexing":false}}