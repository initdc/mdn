{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Funciones","mdn_url":"/es/docs/Web/JavaScript/Reference/Functions","locale":"es","native":"Espa√±ol","sidebarHTML":"\n <ol>\n  <li><a href=\"/es/docs/Web/JavaScript\"><strong><em>JavaScript</em></strong></a></li>\n  <li><a href=\"/es/docs/Web/JavaScript/Tutorials\"><strong>Tutorials:</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Complete beginners</summary>\n      <ol>\n        <li><a href=\"/es/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">JavaScript basics</a></li>\n        <li><a href=\"/es/docs/Learn/JavaScript/First_steps\">JavaScript first steps</a></li>\n        <li><a href=\"/es/docs/Learn/JavaScript/Building_blocks\">JavaScript building blocks</a></li>\n        <li><a href=\"/es/docs/Learn/JavaScript/Objects\">Introducing JavaScript objects</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>JavaScript Guide</summary>\n      <ol>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Introduction\">Introduction</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Grammar_and_Types\">Grammar and types</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">Control flow and error handling</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Loops_and_iteration\">Loops and iteration</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Functions\">Functions</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Expressions_and_Operators\">Expressions and operators</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Numbers_and_dates\">Numbers and dates</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Text_formatting\">Text formatting</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Regular_Expressions\">Regular expressions</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Indexed_collections\">Indexed collections</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Keyed_collections\">Keyed collections</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Working_with_Objects\">Working with objects</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Details_of_the_Object_Model\">Details of the object model</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Using_promises\">Using promises</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Iterators_and_generators\">Iterators and generators</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Meta_programming\">Meta programming</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Modules\">JavaScript modules</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Intermediate</summary>\n      <ol>\n        <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks\">Client-side JavaScript frameworks</a></li>\n        <li><a href=\"/es/docs/Learn/JavaScript/Client-side_web_APIs\">Client-side web APIs</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">A re-introduction to JavaScript</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Data_structures\">JavaScript data structures</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Equality_comparisons_and_sameness\">Equality comparisons and sameness</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Closures\">Closures</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Advanced</summary>\n      <ol>\n        <li><a href=\"/es/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">Inheritance and the prototype chain</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Typed_arrays\">JavaScript typed arrays</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Memory_Management\">Memory Management</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/EventLoop\">Concurrency model and Event Loop</a></li>\n      </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/es/docs/Web/JavaScript/Reference\">References:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n       <summary>Built-in objects</summary>\n        <ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\">AggregateError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\">AsyncFunction</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\">AsyncGenerator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\">AsyncGeneratorFunction</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Atomics\">Atomics</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array\">BigInt64Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array\">BigUint64Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/DataView\">DataView</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\">decodeURI()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Error\">Error</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/escape\">escape()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/EvalError\">EvalError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\">FinalizationRegistry</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\">Float32Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\">Float64Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Generator\">Generator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">globalThis</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Infinity\">Infinity</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\">Int16Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\">Int32Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\">Int8Array</a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/InternalError\">InternalError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/isFinite\">isFinite()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/isNaN\">isNaN()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/NaN\">NaN</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">parseFloat()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">parseInt()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/RangeError\">RangeError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\">ReferenceError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">Reflect</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">RegExp</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/String\">String</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\">SyntaxError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">TypedArray</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\">Uint16Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\">Uint32Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">Uint8Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\">Uint8ClampedArray</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/undefined\">undefined</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/unescape\">unescape()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/URIError\">URIError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/WeakRef\">WeakRef</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\">WeakSet</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Expressions &amp; operators</summary>\n      <ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Addition_assignment\">Addition assignment (+=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Addition\">Addition (+)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Assignment\">Assignment (=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/async_function*\">async function* expression</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/await\">await</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment\">Bitwise AND assignment (&amp;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">Bitwise AND (&amp;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">Bitwise NOT (~)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment\">Bitwise OR assignment (|=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">Bitwise OR (|)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment\">Bitwise XOR assignment (^=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">Bitwise XOR (^)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/class\">class expression</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Comma_Operator\">Comma operator (,)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">Conditional (ternary) operator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Decrement\">Decrement (--)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/delete\">delete operator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">Destructuring assignment</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Division_assignment\">Division assignment (/=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Division\">Division (/)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Equality\">Equality (==)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment\">Exponentiation assignment (**=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Exponentiation\">Exponentiation (**)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/function\">Function expression</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal\">Greater than or equal (&gt;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Greater_than\">Greater than (&gt;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Grouping\">Grouping operator ( )</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/import.meta\">import.meta</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/import\">import</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/in\">in operator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Increment\">Increment (++)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Inequality\">Inequality (!=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/instanceof\">instanceof</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment\">Left shift assignment (&lt;&lt;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Left_shift\">Left shift (&lt;&lt;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal\">Less than or equal (&lt;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Less_than\">Less than (&lt;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment\">Logical AND assignment (&amp;&amp;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Logical_AND\">Logical AND (&amp;&amp;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">Logical NOT (!)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment\">Logical nullish assignment (??=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment\">Logical OR assignment (||=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Logical OR (||)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment\">Multiplication assignment (*=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Multiplication\">Multiplication (*)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/new.target\">new.target</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/new\">new operator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/null\">null</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\">Nullish coalescing operator (??)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Object_initializer\">Object initializer</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">Operator precedence</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">Optional chaining (?.)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Property_Accessors\">Property accessors</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Remainder_assignment\">Remainder assignment (%=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Remainder\">Remainder (%)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment\">Right shift assignment (&gt;&gt;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Right_shift\">Right shift (&gt;&gt;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Spread syntax (...)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Strict_equality\">Strict equality (===)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">Strict inequality (!==)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment\">Subtraction assignment (-=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Subtraction\">Subtraction (-)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/super\">super</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/this\">this</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/typeof\">typeof</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Unary_negation\">Unary negation (-)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Unary_plus\">Unary plus (+)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment\">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">Unsigned right shift (&gt;&gt;&gt;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/void\">void operator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/yield*\">yield*</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/yield\">yield</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Statements &amp; declarations</summary>\n      <ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/async_function*\">async function*</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/block\">block</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/break\">break</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/class\">class</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/const\">const</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/continue\">continue</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/debugger\">debugger</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/do...while\">do...while</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/Empty\">empty</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/export\">export</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/for-await...of\">for await...of</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/for\">for</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/function*\">function*</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/function\">function declaration</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/if...else\">if...else</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/import\">import</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/label\">label</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/let\">let</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/return\">return</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/switch\">switch</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/throw\">throw</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/try...catch\">try...catch</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/var\">var</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/while\">while</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/es/docs/Web/JavaScript/Reference/Statements/with\">with</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Functions</summary>\n      <ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow function expressions</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/get\">getter</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/set\">setter</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Classes</summary>\n      <ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Classes/Class_static_initialization_blocks\">Class static initialization blocks</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Classes/constructor\">constructor</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Classes/extends\">extends</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">Private class features</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Classes/Public_class_fields\">Public class fields</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Classes/static\">static</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Errors</summary>\n      <ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Already_has_pragma\">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Array_sort_argument\">TypeError: invalid Array.prototype.sort argument</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Bad_octal\">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Bad_radix\">RangeError: radix must be an integer</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag\">SyntaxError: invalid regular expression flag \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield\">SyntaxError: return not in function</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/BigInt_division_by_zero\">RangeError: BigInt division by zero</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/BigInt_negative_exponent\">RangeError: BigInt negative exponent</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type\">TypeError: X.prototype.y called on incompatible type</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init\">ReferenceError: can't access lexical declaration 'X' before initialization</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_assign_to_property\">TypeError: can't assign to property \"x\" on \"y\": not an object</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_be_converted_to_BigInt_because_it_isnt_an_integer\">RangeError: x can't be converted to BigInt because it isn't an integer</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_convert_BigInt_to_number\">TypeError: can't convert BigInt to number</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_convert_x_to_BigInt\">TypeError: can't convert x to BigInt</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible\">TypeError: can't define property \"x\": \"obj\" is not extensible</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_delete\">TypeError: property \"x\" is non-configurable and can't be deleted</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property\">TypeError: can't redefine non-configurable property \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_use_nullish_coalescing_unparenthesized\">SyntaxError: cannot use `??` unparenthesized within `||` and `&amp;&amp;` expressions</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value\">TypeError: cyclic object value</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Dead_object\">TypeError: can't access dead object</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode\">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage\">ReferenceError: deprecated caller or arguments usage</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Deprecated_expression_closures\">Warning: expression closures are deprecated</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Deprecated_octal\">SyntaxError: \"0\"-prefixed octal literals and octal escape seq. are deprecated</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma\">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Deprecated_String_generics\">Warning: String.x is deprecated; use String.prototype.x instead</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Deprecated_toLocaleFormat\">Warning: Date.prototype.toLocaleFormat is deprecated</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Equal_as_assign\">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Getter_only\">TypeError: setting getter-only property \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Hash_outside_class\">SyntaxError: Unexpected '#' used outside of class body</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Identifier_after_number\">SyntaxError: identifier starts immediately after numeric literal</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Illegal_character\">SyntaxError: illegal character</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/in_operator_no_object\">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\">RangeError: invalid array length</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side\">SyntaxError: invalid assignment left-hand side</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax\">SyntaxError: invalid BigInt syntax</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment\">TypeError: invalid assignment to const \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_date\">RangeError: invalid date</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer\">SyntaxError: for-in loop head declarations may not have initializers</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer\">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand\">TypeError: invalid 'instanceof' operand 'x'</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/is_not_iterable\">TypeError: 'x' is not iterable</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse\">SyntaxError: JSON.parse: bad parsing</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Malformed_formal_parameter\">SyntaxError: Malformed formal parameter</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Malformed_URI\">URIError: malformed URI sequence</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list\">SyntaxError: missing ] after element list</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id\">SyntaxError: missing : after property id</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body\">SyntaxError: missing } after function body</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list\">SyntaxError: missing } after property list</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter\">SyntaxError: missing formal parameter</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const\">SyntaxError: missing = in const declaration</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator\">SyntaxError: missing name after . operator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\">SyntaxError: missing ) after argument list</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition\">SyntaxError: missing ) after condition</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_semicolon_before_statement\">SyntaxError: missing ; before statement</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/More_arguments_needed\">TypeError: More arguments needed</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count\">RangeError: repeat count must be non-negative</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/No_non-null_object\">TypeError: \"x\" is not a non-null object</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/No_properties\">TypeError: \"x\" has no properties</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/No_variable_name\">SyntaxError: missing variable name</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element\">TypeError: can't delete non-configurable array element</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint\">RangeError: argument is not a valid code point</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Not_a_constructor\">TypeError: \"x\" is not a constructor</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Not_a_function\">TypeError: \"x\" is not a function</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Not_defined\">ReferenceError: \"x\" is not defined</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Precision_range\">RangeError: precision is out of range</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Property_access_denied\">Error: Permission denied to access property \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Read-only\">TypeError: \"x\" is read-only</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter\">SyntaxError: redeclaration of formal parameter \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value\">TypeError: Reduce of empty array with no initial value</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Reserved_identifier\">SyntaxError: \"x\" is a reserved identifier</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large\">RangeError: repeat count must be less than infinity</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Stmt_after_return\">Warning: unreachable code after return statement</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params\">SyntaxError: \"use strict\" not allowed in function with non-simple parameters</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Too_much_recursion\">InternalError: too much recursion</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Undeclared_var\">ReferenceError: assignment to undeclared variable \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Undefined_prop\">ReferenceError: reference to undefined property \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Unexpected_token\">SyntaxError: Unexpected token</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Unexpected_type\">TypeError: \"x\" is (not) \"y\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement\">SyntaxError: function statement requires a name</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Unparenthesized_unary_expr_lhs_exponentiation\">SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Unterminated_string_literal\">SyntaxError: unterminated string literal</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Misc</summary>\n      <ol>\n        <li><a href=\"/es/docs/Web/JavaScript/JavaScript_technologies_overview\">JavaScript technologies overview</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Lexical_grammar\">Lexical grammar</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Data_structures\">JavaScript data structures</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">Enumerability and ownership of properties</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Iteration_protocols\">Iteration protocols</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\">Transitioning to strict mode</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Template_literals\">Template literals</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\">Deprecated features</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div id=\"sect1\"></div>\n\n<p>En t√©rminos generales, una funci√≥n es un \"subprograma\" que puede ser <em>llamado</em> por c√≥digo externo (o interno en caso de recursi√≥n) a la funci√≥n. Al igual que el programa en s√≠ mismo, una funci√≥n se compone de una secuencia de declaraciones, que conforman el llamado <em>cuerpo de la funci√≥n</em>. Se pueden pasar valores a una funci√≥n, y la funci√≥n puede <em>devolver</em> un valor.</p>\n\n<p>En JavaScript, las funciones son objetos de primera clase, es decir, son objetos y se pueden manipular y transmitir al igual que cualquier otro objeto. Concretamente son objetos <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a>.</p>"}},{"type":"prose","value":{"id":"general","title":"General","isH3":false,"content":"<p>Toda funci√≥n en JavaScript es un objeto Function. Ver <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> para obtener informaci√≥n sobre las propiedades y m√©todos de los objetos <code>Function</code>.</p>\n\n<p>Las funciones no son lo mismo que los procedimientos. Una funci√≥n siempre devuelve un valor, pero un procedimiento, puede o no puede devolver un valor.</p>\n\n<p>Para devolver un valor especifico distinto del predeterminado, una funci√≥n debe tener una sentencia <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>return</code></a>, que especifique el valor a devolver. Una funci√≥n sin una instrucci√≥n return devolver√° el valor predeterminado. En el caso de un <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>constructor</code></a> llamado con la palabra clave <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>new</code></a>, el valor predeterminado es el valor de su parametro. Para el resto de funciones, el valor predeterminado es undefined.</p>\n\n<p>Los par√°metros en la llamada a una funci√≥n son los argumentos de la funci√≥n. Los argumentos se pasan a las funciones <em>por valor</em>. Si la funci√≥n cambia el valor de un argumento, este cambio no se refleja globalmente ni en la llamada de la funci√≥n. Sin embargo, las referencias a objetos tambi√©n son valores, y son especiales: si la funci√≥n cambia las propiedades del objeto referenciado, ese cambio es visible fuera de la funci√≥n, tal y como se muestra en el siguiente ejemplo:</p>\n\n<pre class=\"notranslate\"><code class=\"language-js\"><span class=\"comment token\">/* Declarando la funci√≥n 'myFunc' */</span>\n <span class=\"keyword token\">function</span> <span class=\"function token\">myFunc<span class=\"punctuation token\">(elobjeto</span></span><span class=\"punctuation token\">)</span>\n <span class=\"punctuation token\">{</span>\n   elobjeto<span class=\"punctuation token\">.marca</span><span class=\"operator token\">=</span> <span class=\"string token\">\"Toyota\"</span><span class=\"brush: js\">;</span>\n <span class=\"punctuation token\">}</span>\n\n <span class=\"comment token\">/*\n  * Declarando la variable 'mycar';\n  * Se crea e inicializa el nuevo objeto;\n  * para hacer referencia a √©l mediante 'mycar'\n  */</span>\n <span class=\"keyword token\">var</span> mycar <span class=\"operator token\">=</span> <span class=\"punctuation token\">{</span>\n   marca<span class=\"punctuation token\">:</span> <span class=\"string token\">\"Honda\"</span><span class=\"punctuation token\">,</span>\n   modelo<span class=\"punctuation token\">:</span> <span class=\"string token\">\"Accord\"</span><span class=\"punctuation token\">,</span>\n   a√±o<span class=\"punctuation token\">:</span> <span class=\"number token\">1998</span>\n <span class=\"punctuation token\">}</span><span class=\"punctuation token\">;</span>\n\n <span class=\"comment token\">/* Mostrando 'Honda' */</span>\n window<span class=\"punctuation token\">.</span><span class=\"function token\">alert<span class=\"punctuation token\">(</span></span>mycar<span class=\"punctuation token\">.marca</span><span class=\"punctuation token\">)</span><span class=\"punctuation token\">;</span>\n\n <span class=\"comment token\">/* Paso por referencia del objeto 'mycar' a la funci√≥n 'myFunc'*/</span>\n <span class=\"function token\">myFunc<span class=\"punctuation token\">(</span></span>mycar<span class=\"punctuation token\">)</span><span class=\"punctuation token\">;</span>\n\n <span class=\"comment token\">/*\n  * Muestra 'Toyota' como valor de la propiedad 'marca'\n  * del objeto, que ha sido cambiado por la funci√≥n.\n  */</span>\n window<span class=\"punctuation token\">.</span><span class=\"function token\">alert<span class=\"punctuation token\">(</span></span>mycar<span class=\"punctuation token\">.marca</span><span class=\"punctuation token\">)</span><span class=\"punctuation token\">;</span></code></pre>\n\n<p>La palabra clave <a href=\"/es/docs/Web/JavaScript/Reference/Operators/this\"><code>this</code></a> no hace referencia a la funci√≥n que est√° ejecutandose actualmente, por lo que debes referirte a los objetos Function por nombre, incluso dentro del cuerpo de la funci√≥n. Como alternativa, puedes utilizar la propiedad <a href=\"es/Referencia_de_JavaScript_1.5/Funciones/arguments/callee\">arguments.callee</a> (que no se recomienda).</p>"}},{"type":"prose","value":{"id":"defining_functions","title":"Definiendo funciones","isH3":false,"content":"<p>Hay varias formas de definir funciones:</p>"}},{"type":"prose","value":{"id":"the_function_declaration_.28function_statement.29","title":"Declaraci√≥n de una funci√≥n (La instrucci√≥n <code>function</code>)","isH3":true,"content":"<p>Hay una sintaxis especial para declarar funciones (ver la instrucci√≥n <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>function</code></a> para m√°s detalles):</p>\n\n<pre class=\"eval notranslate\">function nombre([<em>param</em>[,<em>param</em>[, ...<em>param</em>]]]) {\n   instrucciones\n}\n</pre>\n\n<dl>\n <dt id=\"nombre\"><code>nombre</code></dt>\n <dd>El nombre de la funci√≥n.</dd>\n</dl>\n\n<dl>\n <dt id=\"param\"><code>param</code></dt>\n <dd>El nombre de un argumento que se pasar√° a la funci√≥n. Una funci√≥n puede tener hasta 255 argumentos.</dd>\n</dl>\n\n<dl>\n <dt id=\"instrucciones\"><code>instrucciones</code></dt>\n <dd>Las instruciones que forman el cuerpo de la funci√≥n.</dd>\n</dl>","titleAsText":"Declaraci√≥n de una funci√≥n (La instrucci√≥n function)"}},{"type":"prose","value":{"id":"the_function_declaration_.28function_statement.29_2","title":"Expresi√≥n de una funci√≥n (El operador <code>function</code>)","isH3":true,"content":"<p>Una expresi√≥n function es similar y tiene la misma sintaxis que una declaraci√≥n de funci√≥n (ver operador <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>function</code></a> para m√°s detalles):</p>\n\n<pre class=\"eval notranslate\">function [nombre]([<em>param</em>[, <em>param</em>[, ...<em>param</em>]]]) {\n   instrucciones\n}\n</pre>\n\n<dl>\n <dt id=\"nombre_2\"><code>nombre</code></dt>\n <dd>El nombre de la funci√≥n, se puede omitir, en ese caso la funci√≥n se conoce como funci√≥n an√≥nima.</dd>\n</dl>\n\n<dl>\n <dt id=\"param_2\"><code>param</code></dt>\n <dd>El nombre de los argumentos que se pasar√°n a la funci√≥n. Una funci√≥n puede tener hasta 255 argumentos.</dd>\n</dl>\n\n<dl>\n <dt id=\"instrucciones_2\"><code>instrucciones</code></dt>\n <dd>Las instrucciones que forman el cuerpo de la funci√≥n.</dd>\n</dl>","titleAsText":"Expresi√≥n de una funci√≥n (El operador function)"}},{"type":"prose","value":{"id":"la_expresi√≥n_de_funci√≥n_flecha_>","title":"La expresi√≥n de funci√≥n flecha (=&gt;)","isH3":true,"content":"<div class=\"note notecard\" id=\"sect2\">\n<p><strong>Nota:</strong> Las expresiones de funci√≥n Flecha son una tecnolog√≠a experimental, parte de la proposici√≥n Harmony (EcmaScript 6) y no son ampliamente implementadas por los navegadores.</p>\n</div>\n\n<p>Una expresi√≥n de funci√≥n flecha tiene una sintaxis m√°s corta y su l√©xico se une a este valor (ver <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\">arrow functions</a> para m√°s detalles):</p>\n\n<pre class=\"language-html notranslate\">([param] [, param]) =&gt; { instrucciones }\n\nparam =&gt; expresi√≥n\n</pre>\n\n<dl>\n <dt id=\"param_3\"><code>param</code></dt>\n <dd>El nombre de un argumento. Si no hay argumentos se tiene que indicar con <code>()</code>. Para un √∫nico argumento no son necesarios los parentesis. (como <code>foo =&gt; 1</code>)</dd>\n <dt id=\"instrucciones_o_expresi√≥n\"><code>instrucciones o expresi√≥n</code></dt>\n <dd>Multiples instrucciones deben ser encerradas entre llaves. Una √∫nica expresi√≥n no necesita llaves. La expresi√≥n es, as√≠ mismo, el valor de retorno impl√≠cito de esa funci√≥n.</dd>\n</dl>","titleAsText":"La expresi√≥n de funci√≥n flecha (=>)"}},{"type":"prose","value":{"id":"the_function_constructor","title":"El constructor <code>Function</code>","isH3":true,"content":"<p>Como todos los dem√°s objetos, los objetos <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> se pueden crear mediante el operador new:</p>\n\n<pre class=\"language-html notranslate\">new Function (<em>arg1</em>, <em>arg2</em>, ... <em>argN</em>, <em>functionBody</em>)\n</pre>\n\n<dl>\n <dt id=\"arg1_arg2_..._argn\"><code>arg1, arg2, ... arg<em>N</em></code></dt>\n <dd>Ning√∫n o varios argumentos  son pasados para ser utilizados por la funci√≥n como nombres de argumentos formales. Cada uno debe ser una cadena que se ajuste a las reglas de identificadores v√°lidos en JavaScript, o a una lista de este tipo de cadenas separadas por comas; por ejemplo \"x\", \"theValue\", o \"a,b\".</dd>\n</dl>\n\n<dl>\n <dt id=\"cuerpo_de_la_funci√≥n\"><code>Cuerpo de la funci√≥n</code></dt>\n <dd>Una cadena conteniendo las instrucciones JavaScript que comprenden la definici√≥n de la funci√≥n.</dd>\n</dl>\n\n<p>Llamar al contructor Function como una funci√≥n, sin el operador new, tiene el mismo efecto que llamarlo como un constructor.</p>\n\n<div class=\"note notecard\" id=\"sect3\"><strong>Nota:</strong> Utilizar el constructor Function no se recomienda, ya que necesita el cuerpo de la funci√≥n como una cadena, lo cual puede ocasionar que no se optimize correctamente por el motor JS, y puede tambi√©n causar otros problemas.</div>","titleAsText":"El constructor Function"}},{"type":"prose","value":{"id":"the_arguments_object","title":"El objeto <code>arguments</code>","isH3":false,"content":"<p>Puedes referirte a los argumentos de una funci√≥n dentro de la misma, utilizando el objeto arguments. Ver <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Function</code></a>.</p>","titleAsText":"El objeto arguments"}},{"type":"prose","value":{"id":"scope_and_the_function_stack","title":"√Åmbito de ejecuci√≥n y pila de funciones","isH3":false,"content":"<p><span class=\"comment\">some section about scope and functions calling other functions</span></p>"}},{"type":"prose","value":{"id":"repaso","title":"Repaso","isH3":true,"content":"<p>Una funci√≥n puede referirse y llamarse a s√≠ misma. Hay tres maneras en la que una funci√≥n puede referirse a s√≠ misma.</p>\n\n<ol>\n <li>El nombre de la funci√≥n</li>\n <li><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>arguments.callee</code></a></li>\n <li>una funci√≥n dentro del ambito de ejecuci√≥n que refiere a la funci√≥n</li>\n</ol>\n\n<p>Por ejemplo, considere la siguiente definici√≥n de funci√≥n:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// el cuerpo va aqui</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Dentro del cuerpo de la funci√≥n, todo lo siguientes son lo mismo:</p>\n\n<ol>\n <li><code>bar()</code></li>\n <li><code>arguments.callee()</code></li>\n <li><code>foo()</code></li>\n</ol>\n\n<p>Una funci√≥n que se llama a s√≠ misma es llamada una <em>funci√≥n recursiva. </em>En algunas ocaciones, la recursi√≥n es an√°loga a un bucle. Ambos ejecutan el mismo c√≥digo m√∫ltiples veces, y ambas requieren una condici√≥n (para evitar un bucle infinito, o en su lugar, recursi√≥n infinita en este caso). Por ejemplo, el siguiente bucle:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// \"x &lt; 10\" es la condici√≥n</span>\n   <span class=\"token comment\">// haz algo</span>\n   x<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n\n<p>puede ser convertida en una funci√≥n recursiva y una llamada a esa funci√≥n:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">loop</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&gt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"x &gt;= 10\" es la condici√≥n de salida (equivalente a \"!(x &lt; 10)\")</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">// haz algo</span>\n   <span class=\"token function\">loop</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// la llamada recursiva</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">loop</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p>Sin embargo, algunos algoritmos no pueden ser bucles iterativos simples. Por ejemplo, obtener todos los nodos de una estructura de arbol (e.g. el <a href=\"/en-US/docs/DOM\">DOM</a>) es realizado de manera m√°s f√°cil usando recursi√≥n:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js  language-js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">recorrerArbol</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nodo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nodo <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">// haz algo con el nodo</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nodo<span class=\"token punctuation\">.</span>nodosHijos<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token function\">recorrerArbol</span><span class=\"token punctuation\">(</span>nodo<span class=\"token punctuation\">.</span>nodosHijos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n\n<p>En comparaci√≥n con el bucle de la funci√≥n <code>loop</code>, cada llamada recursiva hace muchas llamadas recursivas aqu√≠.</p>\n\n<p>Es posible convertir cualquier algoritmo recursivo en uno no recursivo, pero a menudo la l√≥gica es mucho m√°s compleja y hacerlo requiere el uso de una pila. De hecho, la recursi√≥n utiliza una pila: la pila de funciones.</p>\n\n<p>El comportamiento similar a la pila se puede ver en el ejemplo siguiente:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js  language-js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n   document<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inicio:'</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   document<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fin:'</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>que produce:</p>\n\n<pre class=\"language-html notranslate\">inicio:3\ninicio:2\ninicio:1\ninicio:0\nfin:0\nfin:1\nfin:2\nfin:3\n</pre>"}},{"type":"prose","value":{"id":"nested_functions_and_closures","title":"Funciones anidadas y cierres","isH3":false,"content":"<p>Puede anidar una funci√≥n dentro de una funci√≥n. La funci√≥n anidada (inner) es privada a la funci√≥n que la contiene (outer). Tambi√©n con la forma: aclosure.</p>\n\n<dl>\n <dd>Un cierre es una expresi√≥n (normalmente una funci√≥n) que puede tener variables libres junto con un entorno que enlaza esas variables (que \"cierra\" la expresi√≥n).<br>\n Dado que una funci√≥n anidada es un cierre, esto significa que una funci√≥n anidada puede \"heredar\" los argumentos y las variables de su funci√≥n contenedora. En otras palabras, la funci√≥n interna contiene el √°mbito de la funci√≥n externa. <a class=\"external\" href=\"https://jibbering.com/faq/faq_notes/closures.html\" rel=\" noopener\"> </a></dd>\n</dl>\n\n<p>Desde que la funci√≥n anidada es un cierre (closure), esto significa que una funci√≥n anidada puede \"heredar\" los argumentos y variables de su funci√≥n contenedora. En otras palabras, la funci√≥n interna contiene un scope (alcance) de la funci√≥n externa.</p>\n\n<p><span class=\"external\">Para resumir: </span></p>\n\n<ul>\n <li><span class=\"external\">La funci√≥n interna se puede acceder s√≥lo a partir de sentencias en la funci√≥n externa. </span></li>\n</ul>\n\n<ul>\n <li><span class=\"external\">La funci√≥n interna forma un cierre: la funci√≥n interna puede utilizar los argumentos y las variables de la funci√≥n externa, mientras que la funci√≥n externa no puede utilizar los argumentos y las variables de la funci√≥n interna. </span></li>\n</ul>\n\n<p><span class=\"external\">El ejemplo siguiente muestra funciones anidadas: </span></p>\n\n<pre class=\"eval notranslate\"><span class=\"brush: js\">function addCuadrado(a,b) {\n   function cuadrado(x) {\n      return x * x;\n   }\n   return cuadrado(a) + cuadrado(b);\n}\na = addCuadrado(2,3); // retorna 13\nb = addCuadrado(3,4); // retorna 25\nc = addCuadrado(4,5); // retorna 41\n</span></pre>\n\n<p><span class=\"external\">Dado que la funci√≥n interna forma un cierre, puede llamar a la funci√≥n externa y especificar argumentos para la funci√≥n externa e interna</span></p>\n\n<pre class=\"eval notranslate\"><span class=\"brush: js\">function fuerade(x) {\n   function dentro(y) {\n      return x + y;\n   }\n   return dentro;\n}\nresultado = fuerade(3)(5); // retorna 8\n</span></pre>"}},{"type":"prose","value":{"id":"efficiency_considerations","title":"<span class=\"external\">Consideraciones sobre la eficiencia</span>","isH3":true,"content":"<p><span class=\"external\">Observe c√≥mo se conserva <code>x</code> cuando se devuelve <font face=\"consolas, Liberation Mono, courier, monospace\"><span style=\"background-color: #eeeeee;\">dentro</span></font>. Un cierre conserva los argumentos y las variables en todos los √°mbitos que contiene. Puesto que cada llamada proporciona argumentos potencialmente diferentes, debe crearse un cierre para cada llamada a la funci√≥n externa. En otras palabras, cada llamada a <code>fuerade</code> crea un cierre. Por esta raz√≥n, los cierres pueden usar una gran cantidad de memoria. La memoria se puede liberar s√≥lo cuando el <code>dentro</code> devuelto ya no es accesible. En este caso, el cierre del <code>dentro</code> se almacena en <code>resultado</code>. Como el <code>resultado</code> est√° en el √°mbito global, el cierre permanecer√° hasta que se descargue el script (en un navegador, esto suceder√≠a cuando la p√°gina que contiene el script est√© cerrada).</span></p>\n\n<p><span class=\"external\">Debido a esta ineficiencia, evite cierres siempre que sea posible, es decir, evite las funciones de anidamiento siempre que sea posible. Por ejemplo, considere el siguiente ejemplo:</span></p>\n\n<pre class=\"eval notranslate\"><span class=\"brush: js\">function assignOnclick(elemento) {\n   element.onclick = function() {\n      this.style.backgroundColor = 'blue';\n   };\n}\n</span></pre>\n\n<p><span class=\"external\">Esto se puede volver a escribir para evitar el cierre. Sin embargo, la funci√≥n interna an√≥nima necesitar√≠a ser nombrada y ya no ser√≠a privada para <code>assignOnclick</code>: </span></p>\n\n<pre class=\"eval notranslate\"><span class=\"brush: json\">function assignOnclick(elemento) {\n   elemento.onclick = elemento_onclick;\n}\n\nfunction elemento_onclick() {\n   this.style.backgroundColor = 'blue';\n}\n</span></pre>\n\n<h4 id=\"multiply-nested_functions\" name=\"Multiply-nested_functions\">Multiples funciones anidadas</h4>\n\n<p><span class=\"external\">Las funciones pueden ser anidadas contigua de la otra, es decir, una funci√≥n (A) que contiene una funci√≥n (B) que contiene una funci√≥n (C), etc. Ambas funciones B y C forman cierres aqu√≠, por lo que B puede acceder a A y C pueden acceder a B. Adem√°s, como C puede acceder a B, que puede acceder a A, C tambi√©n puede acceder a A. Por lo tanto, los cierres pueden contener m√∫ltiples √°mbitos; contienen recursivamente el alcance de las funciones que lo contienen. Esto es llamado encadenamiento de objetos(<em>scope chaining</em>). (Por qu√© se llama \"<em>chaining</em>\"(\"encadenamiento\") se explicar√° m√°s adelante.)</span></p>\n\n<p><span class=\"external\">Considere el siguiente ejemplo:</span></p>\n\n<pre class=\"eval notranslate\"><span class=\"brush: js\">function A(x) {\n   function B(y) {\n      function C(z) {\n         alert(x + y + z);\n      }\n      C(3);\n   }\n   B(2);\n}\nA(1); // alerts 6 (1 + 2 + 3)\n</span></pre>\n\n<p><span class=\"external\">En este ejemplo, <code>C</code> accede a las <code>B</code> que hayan en <code>y</code> y <code>A</code> en <code>x</code>. Esto se puede hacer porque: </span></p>\n\n<ol>\n <li><span class=\"external\"><code>B</code> forma un cierre que incluye a <code>A</code>, es decir, <code>B</code> puede acceder a los argumentos y variables de <code>A</code>. </span></li>\n <li><span class=\"external\"><code>C</code> forma un cierre que incluye a <code>B</code>. </span></li>\n <li><span class=\"external\">Como el cierre de <code>B</code> incluye a <code>A</code>, el cierre de <code>C</code> incluye a <code>A</code>, <code>C</code> puede acceder a los argumentos y variables de la Banda <code>A</code>. En otras palabras, codifica los √°mbitos de <code>B</code> y A en ese orden. </span></li>\n</ol>\n\n<p><span class=\"external\">Lo contrario, sin embargo, no es cierto. <code>A</code> no puede acceder a <code>C</code>, porque <code>A</code> no puede acceder a ning√∫n argumento o variable de <code>B</code>, que <code>C</code> es una variable de. As√≠, <code>C</code> permanece privado de s√≥lo <code>B</code>. </span></p>","titleAsText":"Consideraciones sobre la eficiencia"}},{"type":"prose","value":{"id":"conflictos_de_nombre","title":"<span class=\"external\">Conflictos de nombre </span>","isH3":true,"content":"<p><span class=\"external\">Cuando dos argumentos o variables en los √°mbitos de un cierre tienen el mismo nombre, existe un conflicto de nombres(\"<em>name conflict</em>\"). M√°s alcances internos tienen prioridad, por lo que el alcance m√°s interno tiene la m√°s alta precedencia, mientras que el alcance m√°s externo toma el m√°s bajo. Esta es la cadena de alcance. El primero en la cadena es el alcance m√°s interno, y el √∫ltimo es el alcance m√°s exterior. Considera lo siguiente:</span></p>\n\n<pre class=\"eval notranslate\"><span class=\"brush: js\">function fuerade() {\n   var x = 10;\n   function dentro(x) {\n      return x;\n   }\n   return dentro;\n}\nresultado = fuerade()(20); // retorna 20 en lugar de 10</span>\n</pre>\n\n<p><span class=\"external\">El conflicto de nombres ocurre en la sentencia <code>return x</code> y est√° entre el par√°metro <code>x</code> del <code>dentro</code>y la variable <code>x</code> del <code>fuerade</code>. La cadena de alcance aqu√≠ es {<code>dentro</code>, <code>fuerade</code>, global object}. Por lo tanto, la <code>x</code> de <code>inside</code>tiene precedentes sobre la <code>x</code> de <code>fuerade</code>, y 20 (<code>dentro</code>de <code>x</code>) se devuelve en lugar de 10 (<code>fuerade</code> de <code>x</code>).</span></p>","titleAsText":"Conflictos de nombre "}},{"type":"prose","value":{"id":"constructor_versus_declaration_versus_expression","title":"<span class=\"external\">Constructor vs declaraci√≥n vs expresi√≥n</span>","isH3":false,"content":"<p><span class=\"external\">Las diferencias entre la <code>Function</code> constructora, la de declaraci√≥n y la de expresi√≥n. </span></p>\n\n<p><span class=\"external\">Compare lo siguiente: </span></p>\n\n<ol>\n <li><span class=\"external\">Una funci√≥n definida con el constructor <code>Function</code> asignado a la variable <code>multiply</code>                                                                                                                    </span>\n\n  <pre class=\"notranslate\"><span class=\"brush: js\">var multiply = new Function(\"x\", \"y\", \"return x * y;\");\n</span></pre>\n </li>\n <li><span class=\"external\">Una declaraci√≥n de una funci√≥n denominada <code>multiply</code>                                                 </span>\n  <pre class=\"notranslate\"><span class=\"brush: js\">function multiply(x, y) {\n   return x * y;\n}\n</span></pre>\n </li>\n <li><span class=\"external\">Una expresi√≥n de funci√≥n an√≥nima asignada a la variable <code>multiply</code>                          </span>\n  <pre class=\"notranslate\"><span class=\"brush: js\">var multiply = function(x, y) {\n   return x * y;\n}\n</span></pre>\n </li>\n <li><span class=\"external\">Una declaraci√≥n de una funci√≥n denominada <code>func_name</code> asignada a la variable <code>multiply</code>                                                                                                                 </span>\n  <pre class=\"notranslate\"><span class=\"brush: js\">var multiply = function func_name(x, y) {\n   return x * y;\n}\n</span></pre>\n </li>\n</ol>\n\n<p><span class=\"external\">Todos hacen aproximadamente la misma cosa, con algunas diferencias sutiles:</span></p>\n\n<ul>\n <li><span class=\"external\">Existe una distinci√≥n entre el nombre de la funci√≥n y la variable a la que se asigna la funci√≥n:</span><span class=\"external\"> </span>\n\n  <ul>\n   <li><span class=\"external\">El nombre de la funci√≥n no se puede cambiar, mientras que la variable a la que se asigna la funci√≥n puede ser reasignada.</span></li>\n   <li><span class=\"external\">El nombre de la funci√≥n s√≥lo se puede utilizar en el cuerpo de la funci√≥n. Intentar utilizarlo fuera del cuerpo de la funci√≥n da como resultado un error (o <code>undefined</code> si el nombre de la funci√≥n se declar√≥ previamente mediante una instrucci√≥n <code>var</code>). Por ejemplo:                                                                                                           </span>\n    <pre class=\"notranslate\"><span class=\"brush: js\">var y = function x() {};\nalert(x); // arroja un error\n</span></pre>\n\n    <p><span class=\"external\">El nombre de la funci√≥n tambi√©n aparece cuando la funci√≥n se serializa v√≠a el m√©todo de la </span><code>Function</code> 'toString'.</p>\n\n    <p>Por otro lado, la variable a la que se asigna la funci√≥n est√° limitada s√≥lo por su √°mbito, que est√° garantizado para incluir el √°mbito en el que se declara la funci√≥n.</p>\n   </li>\n   <li>Como muestra el ejemplo 4, el nombre de la funci√≥n puede ser diferente de la variable a la que se asigna la funci√≥n. No tienen relaci√≥n entre s√≠.</li>\n  </ul>\n </li>\n <li>Una declaraci√≥n de funci√≥n tambi√©n crea una variable con el mismo nombre que el nombre de la funci√≥n. Por lo tanto, a diferencia de las definidas por las expresiones de funci√≥n, las funciones definidas por las declaraciones de funci√≥n se puede acceder por su nombre en el √°mbito que se definieron en:\n  <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// salida x serializado en un string</span>\n</code></pre></div>\n\n  <p>El siguiente ejemplo muestra c√≥mo los nombres de las funciones no est√°n relacionados con las variables a las que est√°n asignadas las funciones. Si una \"variable de funci√≥n\" se asigna a otro valor, seguir√° teniendo el mismo nombre de funci√≥n:</p>\n\n  <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// el string alterado contiene el nombre</span>\n            <span class=\"token comment\">// de la funci√≥n \"foo\"</span>\n<span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// el string todav√≠a contiene el nombre</span>\n            <span class=\"token comment\">// de la funci√≥n \"foo\"</span>\n</code></pre></div>\n </li>\n <li>Una funci√≥n definida por un<code>Function</code> no tiene un nombre de funci√≥n. Sin embargo, en el <a href=\"/es/docs/Mozilla/Projetos/SpiderMonkey\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">SpiderMonkey</a> en el motor de JavaScript, la forma serializada de la funci√≥n muestra como si tuviera el nombre \"an√≥nimo\"(\"anonymous\"). Por ejemplo, <code>alert(new Function())</code> salida:\n  <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">anonymous</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n\n  <p>Dado que la funci√≥n en realidad no tiene un nombre, <code>anonymous</code> no es una variable que se puede acceder dentro de la funci√≥n. Por ejemplo, lo siguiente resultar√≠a en un error:</p>\n\n  <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"alert(anonymous);\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n </li>\n <li>A diferencia de las funciones definidas por expresiones de funci√≥n o constructores <code>Function</code> se puede utilizar una funci√≥n definida por una declaraci√≥n de funci√≥n antes de la propia declaraci√≥n de la funci√≥n. Por ejemplo:\n  <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// alerts FOO!</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'FOO!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n </li>\n <li>Una funci√≥n definida por una expresi√≥n de funci√≥n hereda el √°mbito actual. Es decir, la funci√≥n forma un cierre. Por otro lado, una funci√≥n definida por un constructor de <code>Function</code> no hereda ning√∫n √°mbito que no sea el √°mbito global (que todas las funciones heredan).</li>\n <li>Las funciones definidas por expresiones de funci√≥n y declaraciones de funci√≥n son analizadas una sola vez, mientras que las definidas por el constructor de <code>Function</code> no lo son. Es decir, la cadena de cuerpo de funci√≥n pasada al constructor de <code>Function</code> debe ser analizada cada vez que se eval√∫a.  Aunque una expresi√≥n de funci√≥n crea un cierre cada vez, el cuerpo de la funci√≥n no es reparsed, por lo que las expresiones de funci√≥n son a√∫n m√°s r√°pido que \"<code>new Function(...)</code>\". Por lo tanto, el constructor de la <code>Function</code> debe evitarse siempre que sea posible.</li>\n</ul>\n\n<p>Una declaraci√≥n de funci√≥n es muy f√°cilmente (ya menudo involuntariamente) convertida en una expresi√≥n de funci√≥n. Una declaraci√≥n de funci√≥n deja de ser una cuando:</p>\n\n<ul>\n <li>Se convierte en parte de una expresi√≥n</li>\n <li>Ya no es un \"elemento fuente\" de una funci√≥n o el propio script. Un \"elemento de origen\" es una sentencia no anidada en el script o un cuerpo de funci√≥n:\n  <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// elemento fuente</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>            <span class=\"token comment\">// elemento fuente</span>\n   x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// no es un elemento fuente</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">boo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>     <span class=\"token comment\">// no es un elemento fuente</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>         <span class=\"token comment\">// elemento fuente</span>\n   <span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// elemento fuente</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>     <span class=\"token comment\">// elemento fuente</span>\n   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>     <span class=\"token comment\">// elemento fuente</span>\n      <span class=\"token keyword\">function</span> <span class=\"token function\">blah</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// no es un elemento fuente</span>\n      y<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// no es un elemento fuente</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n </li>\n</ul>\n\n<p>Ejemplos:</p>\n\n<ul>\n <li>\n  <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// function declaraci√≥n</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// expresi√≥n de una funci√≥n</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// expresi√≥n de una funci√≥n</span>\n<span class=\"token function-variable function\">x</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre></div>\n </li>\n <li>\n  <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// expresi√≥n de la funci√≥n</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">world</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n </li>\n <li>\n  <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// instrucci√≥n de la funci√≥n</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// instrucci√≥n de la funci√≥n</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// expresi√≥n de la funci√≥n</span>\n      <span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n </li>\n</ul>","titleAsText":"Constructor vs declaraci√≥n vs expresi√≥n"}},{"type":"prose","value":{"id":"conditionally_defining_a_function","title":"Definici√≥n condicional de una funci√≥n","isH3":true,"content":"<p>Las funciones se pueden definir de forma condicional utilizando expresiones de funci√≥n o el constructor <code>Function</code>.</p>\n\n<p>En la siguiente secuencia de comandos, la funci√≥n <code>zero</code> nunca se define y no se puede invocar, porque '<code>if (0)</code>' se eval√∫a como false:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">zero</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      document<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Esto es zero.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n</code></pre></div>\n\n<p>Si se cambia el script para que la condici√≥n se convierta en '<code>if (1)</code>', se define la funci√≥n <code>zero</code>.</p>\n\n<div class=\"note notecard\" id=\"sect4\">\n<p>Nota: Aunque esto parece una declaraci√≥n de funci√≥n, √©sta es en realidad una expresi√≥n de funci√≥n ya que est√° anidada dentro de otra instrucci√≥n. Ver <a href=\"#constructor_versus_declaration_versus_expression\">las diferencias entre las funciones de declaraci√≥n y de expresi√≥n</a>.</p>\n</div>\n\n<div class=\"note notecard\" id=\"sect5\">\n<p>Nota: Algunos motores JavaScript, sin incluir <a href=\"/es/docs/Mozilla/Projetos/SpiderMonkey\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">SpiderMonkey</a>, tratan incorrectamente cualquier expresi√≥n de funci√≥n con un nombre como una declaraci√≥n de funci√≥n. Esto llevar√≠a a que se definiera <code>zero</code> incluso con el siempre-falso(\"<em>always-false</em>\") condicional. Una manera m√°s segura de definir funciones condicionalmente es definir la funci√≥n an√≥nimamente y asignarla a una variable:</p>\n</div>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">zero</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      document<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Esto es zero.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"functions_as_event_handlers","title":"Funciones como manejadores de eventos","isH3":false,"content":"<p>En JavaScript, los controladores de eventos <a href=\"es/DOM\">DOM</a> son funciones (en oposici√≥n a los objetos que contienen un m√©todo <code>handleEvent</code> en otros enlaces de idioma DOM). Las funciones se pasan un objeto de <a href=\"es/DOM/event\">evento</a> como el primer y √∫nico par√°metro. Como cualquier otro par√°metro, si el objeto de evento no necesita ser utilizado, puede omitirse en la lista de par√°metros formales.</p>\n\n<p>Los posibles objetivos de eventos en un documento <a href=\"es/HTML\">HTML</a> incluyen: <code>window</code> (<code>Window</code> objects(\"objeto de ventana\"), including frames(\"marcos\")), <code>document</code> (<code>HTMLDocument</code> objects(\"objetos HTMLDocument\")), y elementos (<code>Element</code> objects(\"objetos Elemento\")). En el <a class=\"external\" href=\"https://www.w3.org/TR/DOM-Level-2-HTML/\" rel=\" noopener\">HTML DOM</a>, los destinos de evento tienen propiedades de controlador de eventos. Estas propiedades son nombres de eventos en min√∫sculas con prefijo \"on\", e.g. <code>onfocus</code>. Los eventos <a class=\"external\" href=\"https://www.w3.org/TR/DOM-Level-2-Events/\" rel=\" noopener\">DOM Level 2 Events</a> proporcionan una forma alternativa y m√°s s√≥lida de agregar oyentes de eventos.</p>\n\n<div class=\"note notecard\" id=\"sect6\">\n<p>Nota: Los eventos son parte del DOM, no de JavaScript. (JavaScript simplemente proporciona un enlace al DOM.)</p>\n</div>\n\n<p>El ejemplo siguiente asigna una funci√≥n a un manejador de eventos de \"foco\"(\"focus\") de ventana.</p>\n\n<pre class=\"notranslate\">window.onfocus = function() {\n   document.body.style.backgroundColor = 'white';\n}\n</pre>\n\n<p>Si se asigna una funci√≥n a una variable, puede asignar la variable a un controlador de eventos. El siguiente c√≥digo asigna una funci√≥n a la variable <code>setBGColor</code>.</p>\n\n<pre class=\"notranslate\">var setBGColor = new Function(\"document.body.style.backgroundColor = 'white';\");\n</pre>\n\n<p>Puede utilizar esta variable para asignar una funci√≥n a un controlador de eventos de varias maneras. Aqu√≠ hay dos formas:</p>\n\n<ol>\n <li>Escritura con propiedades de evento DOM HTML<br>\n\n  <pre class=\"notranslate\">document.form1.colorButton.onclick = setBGColor;\n</pre>\n </li>\n <li>Atributo de evento HTML<br>\n\n  <pre class=\"notranslate\">&lt;input name=\"colorBoton\" type=\"button\"\n   value=\"Cambia color de fondo\"\n   onclick=\"setBGColor();\"/&gt;\n</pre>\n\n  <p>Un manejador de eventos establecido de esta manera es en realidad una funci√≥n, denominada despu√©s del atributo, envuelta alrededor del c√≥digo especificado. Esta es la raz√≥n por la que los par√©ntesis en \"<code>setBGColor()</code>\" son necesarios aqu√≠ (en lugar de s√≥lo \"<code>setBGColor</code>\").</p>\n </li>\n</ol>\n\n<p>Es equivalente a:</p>\n\n<pre class=\"notranslate\">document.form1.colorButton.onclick = function onclick(event) {\n   setBGColor();\n}\n</pre>\n\n<p>Observe c√≥mo se pasa el objeto de evento a esta funci√≥n an√≥nima como <code>event</code> de par√°metro. Esto permite que el c√≥digo especificado utilice el objeto Evento(\"Event object)\":</p>\n\n<pre class=\"notranslate\">&lt;input ...\n    onclick=\"alert(event.target.tagName);\"/&gt;\n</pre>\n\n<p>Al igual que cualquier otra propiedad que se refiere a una funci√≥n, el controlador de eventos puede actuar como un m√©todo, y <code>this</code> se refiere al elemento que contiene el controlador de eventos. En el ejemplo siguiente, se llama a la funci√≥n referida por <code>onfocus</code> con <code>this</code> igual a <code>window</code>.</p>\n\n<pre class=\"eval notranslate\">window.onfocus();\n</pre>\n\n<p>Un error com√∫n de principiante de JavaScript es el a√±adir par√©ntesis y / o par√°metros al final de la variable, es decir, llamar al manejador de eventos cuando lo asigna. La adici√≥n de estos par√©ntesis asignar√° el <em>valor devuelto al llamar al manejador de eventos</em>, que a menudo es <code>undefined</code> (si la funci√≥n no devuelve nada), en lugar del controlador de eventos en s√≠:</p>\n\n<pre class=\"eval notranslate\">document.form1.button1.onclick = setBGColor();\n</pre>\n\n<p>Para pasar par√°metros a un manejador de eventos, el manejador debe ser envuelto en otra funci√≥n de la siguiente manera:</p>\n\n<pre class=\"eval notranslate\">document.form1.button1.onclick = function() {\n   setBGColor('Algun valor');\n};\n</pre>"}},{"type":"prose","value":{"id":"backward_compatibility","title":"Compatibilidad con versiones anteriores","isH3":true,"content":"<h4 id=\"javascript_1.1_and_earlier\" name=\"JavaScript_1.1_and_earlier\">JavaScript 1.1 y anteriores</h4>\n\n<p>No puede anidar una sentencia de funci√≥n en otra instrucci√≥n o en s√≠ misma.</p>"}},{"type":"prose","value":{"id":"local_variables_within_functions","title":"Variables locales dentro de las funciones","isH3":true,"content":"<p><a href=\"es/Referencia_de_JavaScript_1.5/Funciones/arguments\">arguments</a>: Objeto similar a una matriz que contiene los argumentos pasados a la funci√≥n en ejecuci√≥n.</p>\n\n<p><a href=\"es/Referencia_de_JavaScript_1.5/Funciones/arguments/callee\">arguments.callee</a>: Especifica la funci√≥n en ejecuci√≥n.</p>\n\n<p><a href=\"es/Referencia_de_JavaScript_1.5/Funciones/arguments/caller\">arguments.caller</a>: Especifica la funci√≥n que invoc√≥ la funci√≥n en ejecuci√≥n.</p>\n\n<p><a href=\"es/Referencia_de_JavaScript_1.5/Funciones/arguments/length\">arguments.length</a>: Especifica el n√∫mero de argumentos pasados a la funci√≥n.</p>"}},{"type":"prose","value":{"id":"ejemplos","title":"Ejemplos","isH3":true,"content":"<h4 id=\"1.29_returning_a_formatted_number\" name=\"1.29_Returning_a_formatted_number\">1) Devolver un n√∫mero con formato</h4>\n\n<p>La siguiente funci√≥n devuelve una cadena que contiene la representaci√≥n formateada de un n√∫mero rellenado con ceros a la izquierda.</p>\n\n<pre class=\"eval notranslate\">// Esta funci√≥n devuelve una cadena rellenada con ceros a la izquierda\n\nfunction padZeros(num, totalLen) {\n   var numStr = num.toString();             // Inicializa un valor de retorno como cadena\n   var numZeros = totalLen - numStr.length; // Calcula el no. de ceros\n   for (var i = 1; i &lt;= numZeros; i++) {\n      numStr = \"0\" + numStr;\n   }\n   return numStr;\n}\n</pre>\n\n<p>Las siguientes sentencias llaman a la funci√≥n padZeros.</p>\n\n<pre class=\"eval notranslate\">var resultado;\nresultado = padZeros(42,4); // retorna \"0042\"\nresultado = padZeros(42,2); // retorna \"42\"\nresultado = padZeros(5,4);  // retorna \"0005\"\n</pre>\n\n<h4 id=\"2.29_determining_whether_a_function_exists\" name=\"2.29_Determining_whether_a_function_exists\">2) Determinar si existe una funci√≥n</h4>\n\n<p>Puede determinar si existe una funci√≥n utilizando el operador <code>typeof</code>. En el ejemplo siguiente, se realiza una prueba para determinar si el objeto <code>window</code> tiene una propiedad llamada <code>noFunc</code> que es una funci√≥n. Si es as√≠, se utiliza; de lo contrario, se tomar√°n otras medidas.</p>\n\n<pre class=\"notranslate\"> if ('function' == typeof window.noFunc) {\n   // utiliza noFunc()\n } else {\n   // hacer algo mas\n }\n</pre>\n\n<div class=\"note notecard\" id=\"sect7\">\n<p>Nota: Tenga en cuenta que en la prueba <code>if</code>, e utiliza una referencia a <code>noFunc</code> aqu√≠ no hay par√©ntesis \"()\" despu√©s del nombre de la funci√≥n para que la funci√≥n real no se llame.</p>\n</div>"}},{"type":"prose","value":{"id":"ver_tambi.c3.a9n","title":"Ver tambi√©n","isH3":true,"content":"<p><a href=\"es/Referencia_de_JavaScript_1.5/Objetos_globales/Function\">Function</a>, <a href=\"es/Referencia_de_JavaScript_1.5/Sentencias/function\">sentencia function</a>, <a href=\"es/Referencia_de_JavaScript_1.5/Operadores/Operadores_globales/function\">operador function</a></p>\n\n<p></p>"}}],"toc":[{"text":"General","id":"general"},{"text":"Definiendo funciones","id":"defining_functions"},{"text":"El objeto <code>arguments</code>","id":"the_arguments_object"},{"text":"√Åmbito de ejecuci√≥n y pila de funciones","id":"scope_and_the_function_stack"},{"text":"Funciones anidadas y cierres","id":"nested_functions_and_closures"},{"text":"<span class=\"external\">Constructor vs declaraci√≥n vs expresi√≥n</span>","id":"constructor_versus_declaration_versus_expression"},{"text":"Funciones como manejadores de eventos","id":"functions_as_event_handlers"}],"summary":"En t√©rminos generales, una funci√≥n es un \"subprograma\" que puede ser llamado por c√≥digo externo (o interno en caso de recursi√≥n) a la funci√≥n. Al igual que el programa en s√≠ mismo, una funci√≥n se compone de una secuencia de declaraciones, que conforman el llamado cuerpo de la funci√≥n. Se pueden pasar valores a una funci√≥n, y la funci√≥n puede devolver un valor.","popularity":0.0039,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Functions","locale":"en-US","native":"English (US)"},{"title":"Fonctions et port√©e des fonctions","locale":"fr","native":"Fran√ßais"},{"title":"Èñ¢Êï∞","locale":"ja","native":"Êó•Êú¨Ë™û"},{"title":"Ìï®Ïàò","locale":"ko","native":"ÌïúÍµ≠Ïñ¥"},{"title":"Fun√ß√µes","locale":"pt-BR","native":"Portugu√™s (do¬†Brasil)"},{"title":"–§—É–Ω–∫—Ü–∏–∏","locale":"ru","native":"–†—É—Å—Å–∫–∏–π"},{"title":"ÂáΩÊï∞","locale":"zh-CN","native":"‰∏≠Êñá (ÁÆÄ‰Ωì)"},{"title":"Functions","locale":"zh-TW","native":"Ê≠£È´î‰∏≠Êñá (ÁπÅÈ´î)"}],"source":{"folder":"es/web/javascript/reference/functions","github_url":"https://github.com/mdn/translated-content/blob/main/files/es/web/javascript/reference/functions/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/es/docs/Web","title":"Tecnolog√≠a para desarrolladores web"},{"uri":"/es/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/es/docs/Web/JavaScript/Reference","title":"Referencia de JavaScript"},{"uri":"/es/docs/Web/JavaScript/Reference/Functions","title":"Funciones"}],"pageTitle":"Funciones - JavaScript | MDN","noIndexing":false}}