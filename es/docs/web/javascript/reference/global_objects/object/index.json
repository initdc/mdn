{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Object","mdn_url":"/es/docs/Web/JavaScript/Reference/Global_Objects/Object","locale":"es","native":"Español","sidebarHTML":"<ol><li><strong><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects\">Standard built-in objects</a></strong></li><li><strong><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>Propiedades</strong></a><ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>Métodos</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code> <small>(en-US)</small></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code> <small>(en-US)</small></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code> <small>(en-US)</small></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"><code>Object.assign()</code></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/create\"><code>Object.create()</code></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties\"><code>Object.defineProperties()</code></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty()</code></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\"><code>Object.entries()</code></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\"><code>Object.freeze()</code></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries\"><code>Object.fromEntries()</code></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\"><code>Object.getOwnPropertyDescriptor()</code></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors\"><code>Object.getOwnPropertyDescriptors()</code></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\"><code>Object.getOwnPropertyNames()</code></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols\"><code>Object.getOwnPropertySymbols()</code></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\"><code>Object.getPrototypeOf()</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn\"><code>Object.hasOwn()</code> <small>(en-US)</small></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/is\"><code>Object.is()</code></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\"><code>Object.isExtensible()</code></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\"><code>Object.isFrozen()</code></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\"><code>Object.isSealed()</code></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\"><code>Object.keys()</code></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\"><code>Object.preventExtensions()</code></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\"><code>Object.seal()</code></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/values\"><code>Object.values()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>La clase <strong><code>Object</code></strong> representa uno de los <a href=\"/es/docs/Web/JavaScript/Data_structures\">tipos de datos en Javascript</a>. Es usado para guardar una colección de datos definidos y entidades más complejas. Los objetos pueden ser creados utilizando el constructor <a class=\"page-not-created\" title=\"La documentación acerca de este tema no ha sido escrita todavía . ¡Por favor  considera contribuir !\"><code>Object()</code></a> o <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">la sintaxis literal / inicializador de objeto (en-US)</a>.</p>"}},{"type":"prose","value":{"id":"descripción","title":"Descripción","isH3":false,"content":"<p>Casi todos los objetos en JavaScript son instancias de <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object\" aria-current=\"page\"><code>Object</code></a>; un objeto típico hereda propiedades (incluyendo los métodos) de <code>Object.prototype</code>, a pesar de que esas propiedades puedan ser sobreescritas. Aun así, un <code>Object</code> puede ser deliberadamente creado para que esto no se cumpla (por ejemplo con <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/create\"><code>Object.create(null)</code></a>), o puede alterarse para que esto no sea más verdad (por ejemplo con <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf</code></a>).</p>\n<p>Los cambios realizados en el <code>Object</code> prototipo son vistos por todos los objetos de la cadena de prototipos, a no ser que las propiedades y métodos sujetos a esos cambios hayan sido sobreescritos más abajo en la cadena. Sobreescribir o extender el comportamiento de un objeto es un mecanismo muy poderoso, aunque potencialmente peligroso.</p>\n<p>El constructor <code>Objeto</code> crea un envoltorio de objeto para el valor dado.</p>\n<ul>\n  <li>Si el valor es <a href=\"/es/docs/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> o <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>, se creará un objeto y se retornará un objeto vacío.</li>\n  <li>Si el valor ya es un objeto, entonces se retornará el valor.</li>\n  <li>En cualquier otro caso, se retornará un objeto del Tipo que corresponda al valor dado.</li>\n</ul>\n<p>Cuando lo llamamos en un contexto no-constructivo, <code>Object</code> se comporta igual que <code>new Object()</code>.</p>\n<p>Véase también la <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">la sintaxis literal / inicializador de objeto (en-US)</a>.</p>"}},{"type":"prose","value":{"id":"borrando_una_propiedad_de_un_objeto","title":"Borrando una propiedad de un objeto","isH3":false,"content":"<p>No hay ningún método en un Objeto que sirva para borrar sus propiedades (como <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete\"><code>Map.prototype.delete()</code> <small>(en-US)</small></a>). Para hacerlo, es necesario el uso del <a href=\"/es/docs/Web/JavaScript/Reference/Operators/delete\">operador delete</a>.</p>"}},{"type":"prose","value":{"id":"constructor","title":"Constructor","isH3":false,"content":"<dl>\n  <dt id=\"object\"><a class=\"page-not-created\" title=\"La documentación acerca de este tema no ha sido escrita todavía . ¡Por favor  considera contribuir !\"><code>Object()</code></a></dt>\n  <dd>\n    <p>Crea un nuevo objeto <code>Object</code>. Este es un envoltorio para el valor dado.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"métodos_estáticos","title":"Métodos estáticos","isH3":false,"content":"<dl>\n  <dt id=\"object.assign\"><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"><code>Object.assign()</code></a></dt>\n  <dd>\n    <p>Copia los valores de todas las propiedades enumerables propias de uno o más objetos fuente al objeto asignado.</p>\n  </dd>\n  <dt id=\"object.create\"><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/create\"><code>Object.create()</code></a></dt>\n  <dd>\n    <p>Crea un nuevo objeto con el objeto prototipal especificado y sus propiedades.</p>\n  </dd>\n  <dt id=\"object.defineproperty\"><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty()</code></a></dt>\n  <dd>\n    <p>Agrega la propiedad nombrada descrita por el descriptor dado a un objeto.</p>\n  </dd>\n  <dt id=\"object.defineproperties\"><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties\"><code>Object.defineProperties()</code></a></dt>\n  <dd>\n    <p>Añade las propiedades nombradas a un objeto.</p>\n  </dd>\n  <dt id=\"object.entries\"><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\"><code>Object.entries()</code></a></dt>\n  <dd>\n    <p>Devuelve un array que contiene todos los pares <code>[key, value]</code> de las propiedades enumerables en formato cadena de texto que le <strong>pertenecen</strong> a un objeto dado.</p>\n  </dd>\n  <dt id=\"object.freeze\"><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\"><code>Object.freeze()</code></a></dt>\n  <dd>\n    <p>Congela un objeto. Otro código no puede borrar ni cambiar sus propiedades.</p>\n  </dd>\n  <dt id=\"object.fromentries\"><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries\"><code>Object.fromEntries()</code></a></dt>\n  <dd>\n    <p>Devuelve un nuevo objeto de los pares iterables <code>[key, value]</code>. (Este método hace lo contrario a <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\"><code>Object.entries</code></a>).</p>\n  </dd>\n  <dt id=\"object.getownpropertydescriptor\"><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\"><code>Object.getOwnPropertyDescriptor()</code></a></dt>\n  <dd>\n    <p>Devuelve un descriptor de propiedad para una propiedad nombrada en un objeto.</p>\n  </dd>\n  <dt id=\"object.getownpropertydescriptors\"><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors\"><code>Object.getOwnPropertyDescriptors()</code></a></dt>\n  <dd>\n    <p>Devuelve un objeto con todos los descriptores de propiedad pertenecientes a un objeto.</p>\n  </dd>\n  <dt id=\"object.getownpropertynames\"><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\"><code>Object.getOwnPropertyNames()</code></a></dt>\n  <dd>\n    <p>Devuelve un arreglo que contiene todos los nombres de las propiedades enumerables y no enumerables que le <strong>pertenecen</strong> a un objeto dado.</p>\n  </dd>\n  <dt id=\"object.getownpropertysymbols\"><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols\"><code>Object.getOwnPropertySymbols()</code></a></dt>\n  <dd>\n    <p>Devuelve un objeto que contiene todas las propiedades símbolo encontradas directamente en un objeto dado.</p>\n  </dd>\n  <dt id=\"object.getprototypeof\"><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\"><code>Object.getPrototypeOf()</code></a></dt>\n  <dd>\n    <p>Devuelve el prototipo (la propiedad interna <code>[[Prototype]]</code>) del objeto especificado.</p>\n  </dd>\n  <dt id=\"object.is\"><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/is\"><code>Object.is()</code></a></dt>\n  <dd>\n    <p>Compara si dos valores son el mismo valor. Iguala todos los valores <code>NaN</code> (lo que difiere de la Comparación Abstracta de Igualdad y de la Comparación Estricta de Igualdad).</p>\n  </dd>\n  <dt id=\"object.isextensible\"><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\"><code>Object.isExtensible()</code></a></dt>\n  <dd>\n    <p>Determina si está permitido extender un objeto.</p>\n  </dd>\n  <dt id=\"object.isfrozen\"><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\"><code>Object.isFrozen()</code></a></dt>\n  <dd>\n    <p>Determina si un objeto está congelado.</p>\n  </dd>\n  <dt id=\"object.issealed\"><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\"><code>Object.isSealed()</code></a></dt>\n  <dd>\n    <p>Determines si un objeto está sellado.</p>\n  </dd>\n  <dt id=\"object.keys\"><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\"><code>Object.keys()</code></a></dt>\n  <dd>\n    <p>Devuelve un arreglo que contiene todos los nombres de las propiedades enumerables de tipo cadena de texto <strong>pertenecientes</strong> al objeto dado.</p>\n  </dd>\n  <dt id=\"object.preventextensions\"><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\"><code>Object.preventExtensions()</code></a></dt>\n  <dd>\n    <p>Previene que un objeto pueda extenderse.</p>\n  </dd>\n  <dt id=\"object.seal\"><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\"><code>Object.seal()</code></a></dt>\n  <dd>\n    <p>Previene que otro código pueda borrar propiedades de un objeto.</p>\n  </dd>\n  <dt id=\"object.setprototypeof\"><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></dt>\n  <dd>\n    <p>Estipula el prototipo de un objeto (su propiedad interna <code>[[Prototype]]</code>).</p>\n  </dd>\n  <dt id=\"object.values\"><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/values\"><code>Object.values()</code></a></dt>\n  <dd>\n    <p>Devuelve un arreglo que contiene todos los valores correspondientes a las propiedades enumerables de tipo cadena de texto <strong>pertenecientes</strong> a un objeto dado.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"propiedades_de_instancia","title":"Propiedades de instancia","isH3":false,"content":"<dl>\n  <dt id=\"object.prototype.constructor\"><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></dt>\n  <dd>\n    <p>Especifica la función que crea el prototipo de un objeto.</p>\n  </dd>\n  <dt id=\"object.prototype.__proto__\"><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></dt>\n  <dd>\n    <p>Apunta al objeto que fue usado como prototipo cuando el objeto fue instanciado.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"métodos_de_instancia","title":"Métodos de instancia","isH3":false,"content":"<dl>\n  <dt id=\"object.prototype.__definegetter__\"><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></dt>\n  <dd>\n    <p>Asocia una función a una propiedad que, cuando es accedida, ejecuta la función y retorna su valor de retorno.</p>\n  </dd>\n  <dt id=\"object.prototype.__definesetter___en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>Asocia una función a una propiedad que, cuando es estipulada, ejecuta la función que modificará dicha propiedad.</p>\n  </dd>\n  <dt id=\"object.prototype.__lookupgetter___en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>Devuelve la función asociada a la propiedad establecida por el método <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>__defineGetter__()</code></a>.</p>\n  </dd>\n  <dt id=\"object.prototype.__lookupsetter___en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>Devuelve la función asociada a la propiedad establecida por el método <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>__defineSetter__()</code> <small>(en-US)</small></a>.</p>\n  </dd>\n  <dt id=\"object.prototype.hasownproperty\"><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></dt>\n  <dd>\n    <p>Devuelve un booleano que indica si el objeto contiene una propiedad determinada como una propiedad directa del objeto y que no haya sido heredada a través de la cadena de prototipos.</p>\n  </dd>\n  <dt id=\"object.prototype.isprototypeof\"><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></dt>\n  <dd>\n    <p>Devuelve un booleano que indica si el objeto por el cual este método está siendo llamado está en la cadena de prototipos del objeto específicado.</p>\n  </dd>\n  <dt id=\"object.prototype.propertyisenumerable\"><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></dt>\n  <dd>\n    <p>Devuelve un booleano indicando si el [atributo ECMAScript [<a href=\"/es/docs/Web/JavaScript/Data_structures#propiedades\">Enumerable]]</a> interno está establecido.</p>\n  </dd>\n  <dt id=\"object.prototype.tolocalestring\"><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></dt>\n  <dd>\n    <p>Llama a <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>toString()</code></a>.</p>\n  </dd>\n  <dt id=\"object.prototype.tostring\"><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></dt>\n  <dd>\n    <p>Devuelve una representación del objeto en formato cadena de texto.</p>\n  </dd>\n  <dt id=\"object.prototype.valueof\"><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></dt>\n  <dd>\n    <p>Devuelve el valor primitivo del objeto especificado.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"ejemplos","title":"Ejemplos","isH3":false,"content":""}},{"type":"prose","value":{"id":"usando_object_dados_los_tipos_undefined_y_null","title":"Usando <code>Object</code> dados los tipos <code>undefined</code> y <code>null</code>","isH3":true,"content":"<p>Los siguientes ejemplos almacenan un objeto vacío <code>Object</code>en <code>o</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>","titleAsText":"Usando Object dados los tipos undefined y null"}},{"type":"prose","value":{"id":"usando_object_para_crear_objetos_boolean","title":"Usando <code>Object</code> para crear objetos <code>Boolean</code>","isH3":true,"content":"<p>Los siguientes ejemplos almacenan objetos <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> en <code>o</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// equivalente a o = new Boolean(true)</span>\n<span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// equivalente a o = new Boolean(false)</span>\n<span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>","titleAsText":"Usando Object para crear objetos Boolean"}},{"type":"prose","value":{"id":"prototipos_del_objeto","title":"Prototipos del objeto","isH3":true,"content":"<p>Cuando altere el comportamiento de los métodos existentes en <code>Object.prototype</code>, considere inyectar el código envolviendo la extensión antes o después de la lógica existente. Por ejemplo, este código (no testeado) ejecutará precondicionalmente la lógica modificada antes que la lógica predefinida o la ejecución de cualquier otra extensión.</p>\n<p>Cuando una función es llamada, los argumentos de la llamada son retenidos por la \"variable\" pseudo-arreglo <a href=\"/es/docs/Web/JavaScript/Reference/Functions/arguments\">arguments</a>. Por ejemplo en la llamada <code>myFn(a, b, c)</code>, los argumentos dentro del cuerpo de <code>myFn</code> contendrán tres elementos pseudo-arreglo correspondientes a <code>(a, b, c)</code>.</p>\n<p>Cuando modificamos prototipos con hooks, pase <code>this</code>y sus argumentos (el estado durante el llamado) al actual comportamiento llamando a <code>apply()</code>en la función. Esta patrón puede ser usado por cualquier prototipo, como <code>Node.prototype</code>, <code>Function.prototype</code>, etc.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> current <span class=\"token operator\">=</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>valueOf<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Ya que mi propiedad \"-prop-value\" es transversal y no siempre está</span>\n<span class=\"token comment\">// en la misma cadena protipal, yo quiero cambiar el Object.prototype:</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">valueOf</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-prop-value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"-prop-value\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Si no parece uno de mis objetos, debo caer en</span>\n    <span class=\"token comment\">// el comportamiento predeterminado reproduciendo el comportamiento actual lo mejor que podamos.</span>\n    <span class=\"token comment\">// Apply se comporta como lo hace \"super\" en otros lenguajes.</span>\n    <span class=\"token comment\">// A pesar de que valueOf() no tome ningún argumento, puede hacerlo.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">current</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Ya que JavaScript no tiene exactamente objetos sub-clase, el prototipo sirve para crear objetos que actúen como \"clase base\" para ciertas funciones que actúan como objetos y así mitigar esta limitación. Por ejemplo:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Person</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>canTalk <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">greet</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>canTalk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hola, yo soy \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Employee</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> title</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">Person</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Employee</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Employee</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> Employee<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//Si no aplicas Object.prototype.constructor a Employee,</span>\n<span class=\"token comment\">//tomará prototype.constructor de Person (padre).</span>\n<span class=\"token comment\">//Para evitarlo, aplicamos prototype.constructor a Employee (hijo).</span>\n\n<span class=\"token class-name\">Employee</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">greet</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>canTalk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hola, yo soy \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\", el \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Customer</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">Person</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Customer</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Customer</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> Customer<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//Si no aplicas Object.prototype.constructor a Customer,</span>\n<span class=\"token comment\">//tomará prototype.constructor de Person (padre).</span>\n<span class=\"token comment\">//Para evitarlo, aplicamos prototype.constructor a Customer (hijo).</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Mime</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">Person</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>canTalk <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Mime</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Mime</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> Mime<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//Si no aplicas Object.prototype.constructor a Mime,</span>\n<span class=\"token comment\">//tomará prototype.constructor de Person (padre).</span>\n<span class=\"token comment\">//Para evitarlo, aplicamos prototype.constructor a Mime (hijo).</span>\n\n<span class=\"token keyword\">var</span> bob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Constructor\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> joe <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Joe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> rg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Red Green\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Reparador\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> mike <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mike\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> mime <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mime</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbob<span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Hola, yo soy Bob, el Constructor</span>\n\njoe<span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Hola, yo soy Joe</span>\n\nrg<span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Hola, yo soy Red Green, el Reparador</span>\n\nmike<span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Hola, yo soy Mike</span>\n\nmime<span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Especificaciones","id":"especificaciones","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object-objects","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.Object"}},{"type":"browser_compatibility","value":{"title":"Compatibilidad con navegadores","id":"compatibilidad_con_navegadores","isH3":false,"query":"javascript.builtins.Object","dataURL":"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/bcd.json"}},{"type":"prose","value":{"id":"véase_también","title":"Véase también","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Inicializador de objeto (en-US)</a>.</li>\n</ul>"}}],"toc":[{"text":"Descripción","id":"descripción"},{"text":"Borrando una propiedad de un objeto","id":"borrando_una_propiedad_de_un_objeto"},{"text":"Constructor","id":"constructor"},{"text":"Métodos estáticos","id":"métodos_estáticos"},{"text":"Propiedades de instancia","id":"propiedades_de_instancia"},{"text":"Métodos de instancia","id":"métodos_de_instancia"},{"text":"Ejemplos","id":"ejemplos"},{"text":"Especificaciones","id":"especificaciones"},{"text":"Compatibilidad con navegadores","id":"compatibilidad_con_navegadores"},{"text":"Véase también","id":"véase_también"}],"summary":"La clase Object representa uno de los tipos de datos en Javascript. Es usado para guardar una colección de datos definidos y entidades más complejas. Los objetos pueden ser creados utilizando el constructor Object() o la sintaxis literal / inicializador de objeto (en-US).","popularity":0.005,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Object","locale":"en-US","native":"English (US)"},{"title":"Object","locale":"fr","native":"Français"},{"title":"Object","locale":"ja","native":"日本語"},{"title":"Object","locale":"ko","native":"한국어"},{"title":"Object","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Object","locale":"ru","native":"Русский"},{"title":"Object","locale":"zh-CN","native":"中文 (简体)"},{"title":"Object","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"es/web/javascript/reference/global_objects/object","github_url":"https://github.com/mdn/translated-content/blob/main/files/es/web/javascript/reference/global_objects/object/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/es/docs/Web","title":"Tecnología para desarrolladores web"},{"uri":"/es/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/es/docs/Web/JavaScript/Reference","title":"Referencia de JavaScript"},{"uri":"/es/docs/Web/JavaScript/Reference/Global_Objects","title":"Objetos globales"},{"uri":"/es/docs/Web/JavaScript/Reference/Global_Objects/Object","title":"Object"}],"pageTitle":"Object - JavaScript | MDN","noIndexing":false}}