{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Function.prototype.apply()","mdn_url":"/es/docs/Web/JavaScript/Reference/Global_Objects/Function/apply","locale":"es","native":"Español","sidebarHTML":"<ol><li><strong><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects\">Standard built-in objects</a></strong></li><li><strong><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>Propiedades</strong></a><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function.prototype.displayName</code></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function.prototype.length</code></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function.prototype.name</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\"><code>Function.prototype.prototype</code> <small>(en-US)</small></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>Métodos</strong></a><ol><li><em><code>Function.prototype.apply()</code></em></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></li><li><strong>Herencia</strong></li><li><strong><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>Propiedades</strong></a><ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>Métodos</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code> <small>(en-US)</small></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code> <small>(en-US)</small></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code> <small>(en-US)</small></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div id=\"sect1\"></div>"}},{"type":"prose","value":{"id":"summary","title":"Resumen","isH3":false,"content":"<p>El método <strong>apply()</strong> invoca una determinada función asignando explícitamente el objeto <strong>this</strong> y un array o similar (<a href=\"/en-US/docs/Web/JavaScript/Guide#working_with_array-like_objects\" title=\"/en-US/docs/JavaScript/Guide/Predefined_Core_Objects#Working_with_Array-like_objects\">array like object</a>) como parámetros (<strong>argumentos)</strong> para dicha función.</p>\n\n<div class=\"note notecard\" id=\"sect2\"><strong>NOTA:</strong> Aunque la sintaxis de esta función es casi idéntica a <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>call()</code></a>, la diferencia fundamental es que <code>call()</code> acepta una lista de argumentos, mientras que <code>apply()</code> acepta un simple array con los argumentos.</div>"}},{"type":"prose","value":{"id":"syntax","title":"Sintaxis","isH3":false,"content":"<pre class=\"syntaxbox notranslate\"><code><em>fun</em>.apply(<em>thisArg</em>[, <em>argsArray</em>])</code></pre>"}},{"type":"prose","value":{"id":"parameters","title":"Parámetros","isH3":true,"content":"<dl>\n <dt id=\"thisarg\"><code>thisArg</code></dt>\n <dd>El valor del objeto <strong>this</strong> a utilizar dentro de la llamada a <em>fun</em>. Cabe mencionar que éste puede no ser el valor visto por el método: si el método es una función del tipo <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Strict_mode\">non-strict mode <small>(en-US)</small></a>, <a href=\"/es/docs/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> o <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> será reemplazado por el objeto global, y los valores primitivos serán encapsulados.</dd>\n <dt id=\"argsarray\"><code>argsArray</code></dt>\n <dd>Un objeto similar a un array (<a href=\"/en-US/docs/Web/JavaScript/Guide#working_with_array-like_objects\" title=\"/en-US/docs/JavaScript/Guide/Predefined_Core_Objects#Working_with_Array-like_objects\">array like object</a>), que contiene los parámetros con los que será llamada <em><code>fun</code></em>, o <code>null</code> o <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> si ningún argumento es estipulado. Desde la versión 5 de ECMAScript estos parámetros pueden estar en un objeto similar a un array en lugar de un array. Véase <a href=\"#browser_compatibility\">browser compatibility</a> para mayor información.</dd>\n <dt id=\"sect3\">\n <h3 id=\"valor_de_retorno\">Valor de retorno</h3>\n\n <p>El resultado de llamar a la función con el valor dado <code><strong>this</strong></code> y argumentos.</p>\n </dt>\n</dl>"}},{"type":"prose","value":{"id":"description","title":"Descripción","isH3":false,"content":"<p>Puede estipularse un objeto <code>this</code> diferente al llamar una función. <code>this</code> se refiere al objeto actual, el objeto haciendo la llamada. Con <code>apply</code>, puede escribirse un método una vez y heredarlo a otro objeto, sin necesidad de reescribir el método para adecuarlo al nuevo objeto.</p>\n\n<p><code>apply</code> es muy similar a <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>call()</code></a>, excepto por el tipo de argumentos que soporta. Puede utilizarse un arreglo de parámetros en lugar de un conjunto de pares nombre-valor. Con <code>apply</code>, puede utilizarse un arreglo literal, por ejemplo, <code><em>fun</em>.apply(this, ['eat', 'bananas'])</code>, o un objeto <code>Array</code>, por ejemplo, <code><em>fun</em>.apply(this, new Array('eat', 'bananas'))</code>.</p>\n\n<p>Puede también utilizarse <a href=\"/es/docs/Web/JavaScript/Reference/Functions/arguments\"><code>arguments</code></a> como parámetro <code>argsArray</code>. <code>arguments</code> es una variable local a la función. Puede utilizarse para acceder a todos los argumentos no específicados en la llamada al objeto. Por lo tanto, no se requiere conocer todos los argumentos del objeto invocado cuando se utiliza el método <code>apply</code>. Puede utilizarse <code>arguments</code> para pasar los argumentos al objeto invocado. El objeto invocado es entonces responsable por el manejo de los argumentos.</p>\n\n<p>Desde la 5ta edición de ECMAScript se puede utilizar también cualquier tipo de objeto similar a un arreglo, que en términos prácticos significa que tendrá una propiedad <code>length</code> y propiedades integer en el rango (<code>0...length)</code>. Por ejemplo, ahora puede utilizarse un <a href=\"/es/docs/Web/API/NodeList\"><code>NodeList</code></a> o un objeto personalizado como: <code>{'length': 2, '0': 'eat', '1': 'bananas'}</code>.</p>\n\n<div id=\"sect4\"><div class=\"notecard note\" id=\"sect5\"><p>null</p></div></div>\n\n<div id=\"sect6\"> </div>"}},{"type":"prose","value":{"id":"examples","title":"Ejemplos","isH3":false,"content":""}},{"type":"prose","value":{"id":"using_apply_to_chain_constructors","title":"Utilizando <strong><code>apply</code></strong> para encadenar constructores","isH3":true,"content":"<p>Puedes utilizar <code>apply</code> para encadenar <a href=\"/es/docs/Web/JavaScript/Reference/Operators/new\"><code>constructors</code></a> para un objeto, similar a Java. En el ejemplo siguiente se crea un método global a <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> llamado <code>construct</code>, en cual posibilita el uso de un objeto similar a un arreglo en un constructor en lugar de una lista de argumentos.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">construct</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">aArgs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> fConstructor <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">fNewConstr</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">fConstructor</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> aArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    fNewConstr<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> fConstructor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">fNewConstr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>Ejemplo de uso:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">MyConstructor</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> nProp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> nProp <span class=\"token operator\">&lt;</span> arguments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> nProp<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"property\"</span> <span class=\"token operator\">+</span> nProp<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">[</span>nProp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello world!\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> myInstance <span class=\"token operator\">=</span> MyConstructor<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>myArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>myInstance<span class=\"token punctuation\">.</span>property1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// alerts \"Hello world!\"</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>myInstance <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MyConstructor</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// alerts \"true\"</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>myInstance<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// alerts \"MyConstructor\"</span></code></pre></div>\n\n<div class=\"note notecard\" id=\"sect7\"><strong>Nota:</strong> El método <code>Function.construct</code> no nativo no funcionará con algunos constructores nativos (como <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a>, por ejemplo). En estos casos se deberá utilizar el método <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.bind</code></a> (por ejemplo, supóngase un arreglo como el siguiente para utilizar con el constructor <code>Date</code>: <code>[2012, 11, 4]</code>; en este caso se tendría que escribir algo como: <code>new (Function.prototype.bind.apply(Date, [null].concat([2012, 11, 4])))()</code> – de cualquier manera, ésta no es la mejor manera de hacerlo y probablemente no debería utilizarse en ningún entorno en producción).</div>","titleAsText":"Utilizando apply para encadenar constructores"}},{"type":"prose","value":{"id":"apply_and_built-in_functions","title":"<strong><code>apply</code></strong> y funciones <strong>built-in</strong>","isH3":true,"content":"<p>El uso inteligente de <strong><code>apply</code></strong> permite utilizar funciones built-in para algunas tareas que, de otra manera, habrían sido escritas recorriendo los valores del arreglo dentro de un bucle. Como ejemplo, vamos a utilizar <code>Math.max</code>/<code>Math.min </code>para encontrar el máximo/mínimo valor en un arreglo.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/* min/max number in an array */</span>\n<span class=\"token keyword\">var</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* using Math.min/Math.max apply */</span>\n<span class=\"token keyword\">var</span> max <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* This about equal to Math.max(numbers[0], ...) or Math.max(5, 6, ..) */</span>\n<span class=\"token keyword\">var</span> min <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* vs. simple loop based algorithm */</span>\nmax <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">,</span> min <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numbers<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> max<span class=\"token punctuation\">)</span>\n    max <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> min<span class=\"token punctuation\">)</span>\n    min <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<p>Pero cuidado: utilizando <code>apply</code> de esta manera estás corriendo el riesgo de exceder el límite de argumentos permitido por el motor de JavaScript. Las consecuencias de aplicar una función con demasiados argumentos (imagínate más de decenas de miles de argumentos) varían entre los distintos motores (JavaScriptCore tiene un <a href=\"https://bugs.webkit.org/show_bug.cgi?id=80797\" class=\"external\" rel=\" noopener\">límite de argumentos fijo de 65536</a>), porque el límite (de hecho, incluso el comportamiento de cualquier pila excesivamente larga) no está especificado. Algunos motores lanzarán una excepción. Más perniciosamente, otros limitarán de manera arbitraria el número de argumentos que se están pasando en realidad a la función. (Para ilustrar este último caso: si un motor tuviera un límite de cuatro argumentos [por supuesto, los límites reales son significamente mayores], sería como si los argumentos 5, 6, 2 y 3 hubieran sido pasados a <code>apply</code> en los ejemplos anteriores, en lugar del arreglo completo). Si el valor de tu arreglo pudiera crecer en decenas de miles, utiliza una estrategia híbrida: aplica a tu función trozos del array a la vez:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">minOfArray</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> min <span class=\"token operator\">=</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> <span class=\"token constant\">QUANTUM</span> <span class=\"token operator\">=</span> <span class=\"token number\">32768</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token constant\">QUANTUM</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> submin <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token constant\">QUANTUM</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    min <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>submin<span class=\"token punctuation\">,</span> min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> min<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> min <span class=\"token operator\">=</span> <span class=\"token function\">minOfArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","titleAsText":"apply y funciones built-in"}},{"type":"prose","value":{"id":"utilizando_apply_en_monkey-patching","title":"Utilizando apply en \"monkey-patching\" ","isH3":true,"content":"<p>(Reemplazando de manera dinámica los argumentos en tiempo de ejecución)</p>\n\n<p><code>apply </code>puede ser la mejor manera de reemplazar dinámicamente una función 'built-in' de Firefox, o de una librería de JavaScript. Dada una función <code>someobject.foo</code>, puedes modificar la función de una forma 'hacker', como ésta:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> originalfoo <span class=\"token operator\">=</span> someobject<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span>\nsomeobject<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Haz algo antes de llamar a la función</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Llama a la función como la hubieras llamado normalmente</span>\n  <span class=\"token function\">originalfoo</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Aquí, ejecuta algo después</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<p>Este método es especialmente útil cuando quieres depurar eventos, o interfaces con algún elemento que no tiene API, al igual que los diversos <code>.on</code> (eventos<code> [event]..., </code>como los que se usan en el <a href=\"/en-US/docs/Tools/Page_Inspector#Developer_API\">Devtools Inspector</a>)</p>"}},{"type":"prose","value":{"id":"especificaciones","title":"Especificaciones","isH3":false,"content":"<table>\n <tbody>\n  <tr>\n   <th scope=\"col\">Especificación</th>\n   <th scope=\"col\">Estado</th>\n   <th scope=\"col\">Comentario</th>\n  </tr>\n  <tr>\n   <td><a href=\"https://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf\" hreflang=\"en\" lang=\"en\" class=\"external\" title=\"La especificación 'ECMAScript 3rd Edition (ECMA-262)'\" rel=\" noopener\">ECMAScript 3rd Edition (ECMA-262)</a></td>\n   <td><span class=\"spec-standard\">Standard</span></td>\n   <td>Definición Inicial. Implementada in JavaScript 1.3.</td>\n  </tr>\n  <tr>\n   <td><a href=\"https://www.ecma-international.org/ecma-262/5.1/#sec-15.3.4.3\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">ECMAScript 5.1 (ECMA-262)<br><small lang=\"es\">La definición de 'Function.prototype.apply' en esta especificación.</small></a></td>\n   <td><span class=\"spec-standard\">Standard</span></td>\n   <td> </td>\n  </tr>\n  <tr>\n   <td><a href=\"https://www.ecma-international.org/ecma-262/6.0/#sec-function.prototype.apply\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">ECMAScript 2015 (6th Edition, ECMA-262)<br><small lang=\"es\">La definición de 'Function.prototype.apply' en esta especificación.</small></a></td>\n   <td><span class=\"spec-standard\">Standard</span></td>\n   <td> </td>\n  </tr>\n  <tr>\n   <td><a href=\"https://tc39.es/ecma262/#sec-function.prototype.apply\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">ECMAScript (ECMA-262)<br><small lang=\"es\">La definición de 'Function.prototype.apply' en esta especificación.</small></a></td>\n   <td><span class=\"spec-living\">Living Standard</span></td>\n   <td> </td>\n  </tr>\n </tbody>\n</table>"}},{"type":"browser_compatibility","value":{"title":"Compatibilidad entre navegadores","id":"compatibilidad_entre_navegadores","isH3":false,"query":"javascript.builtins.Function.apply","dataURL":"/es/docs/Web/JavaScript/Reference/Global_Objects/Function/apply/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"Véase también","isH3":false,"content":"<ul>\n <li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/arguments\"><code>arguments</code></a> objetos</li>\n <li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li>\n <li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li>\n</ul>"}}],"toc":[{"text":"Resumen","id":"summary"},{"text":"Sintaxis","id":"syntax"},{"text":"Descripción","id":"description"},{"text":"Ejemplos","id":"examples"},{"text":"Especificaciones","id":"especificaciones"},{"text":"Compatibilidad entre navegadores","id":"compatibilidad_entre_navegadores"},{"text":"Véase también","id":"see_also"}],"summary":"El método apply() invoca una determinada función asignando explícitamente el objeto this y un array o similar (array like object) como parámetros (argumentos) para dicha función.","popularity":0.0008,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Function.prototype.apply()","locale":"en-US","native":"English (US)"},{"title":"Function.prototype.apply()","locale":"fr","native":"Français"},{"title":"Function.prototype.apply()","locale":"ja","native":"日本語"},{"title":"Function.prototype.apply()","locale":"ko","native":"한국어"},{"title":"Function.prototype.apply()","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Function.prototype.apply()","locale":"ru","native":"Русский"},{"title":"Function.prototype.apply()","locale":"zh-CN","native":"中文 (简体)"},{"title":"Function.prototype.apply()","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"es/web/javascript/reference/global_objects/function/apply","github_url":"https://github.com/mdn/translated-content/blob/main/files/es/web/javascript/reference/global_objects/function/apply/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/es/docs/Web","title":"Tecnología para desarrolladores web"},{"uri":"/es/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/es/docs/Web/JavaScript/Reference","title":"Referencia de JavaScript"},{"uri":"/es/docs/Web/JavaScript/Reference/Global_Objects","title":"Objetos globales"},{"uri":"/es/docs/Web/JavaScript/Reference/Global_Objects/Function","title":"Function"},{"uri":"/es/docs/Web/JavaScript/Reference/Global_Objects/Function/apply","title":"Function.prototype.apply()"}],"pageTitle":"Function.prototype.apply() - JavaScript | MDN","noIndexing":false}}